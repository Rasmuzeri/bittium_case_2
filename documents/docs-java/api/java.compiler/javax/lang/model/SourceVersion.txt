SourceVersion (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Enum Constants
Field
Method
Detail:
Enum Constants
Field
Method
Summary:
Nested
|
Enum Constants
|
Field |
Method
Detail:
Enum Constants
|
Field |
Method
SEARCH
Module
java.compiler
Package
javax.lang.model
Enum Class SourceVersion
java.lang.Object
java.lang.Enum
<
SourceVersion
>
javax.lang.model.SourceVersion
All Implemented Interfaces:
Serializable
,
Comparable
<
SourceVersion
>
,
Constable
public enum
SourceVersion
extends
Enum
<
SourceVersion
>
Source versions of the Java programming language.

 See the appropriate edition of
The Java Language Specification
for information about a particular source version.
Note that additional source version constants will be added to
 model future releases of the language.
Since:
1.6
See Also:
ClassFileFormatVersion
Nested Class Summary
Nested classes/interfaces declared in class java.lang.
Enum
Enum.EnumDesc
<
E
extends
Enum
<
E
>>
Enum Constant Summary
Enum Constants
Enum Constant
Description
RELEASE_0
The original version.
RELEASE_1
The version introduced by the Java Platform 1.1.
RELEASE_10
The version introduced by the Java Platform, Standard Edition
 10.
RELEASE_11
The version introduced by the Java Platform, Standard Edition
 11.
RELEASE_12
The version introduced by the Java Platform, Standard Edition
 12.
RELEASE_13
The version introduced by the Java Platform, Standard Edition
 13.
RELEASE_14
The version introduced by the Java Platform, Standard Edition
 14.
RELEASE_15
The version introduced by the Java Platform, Standard Edition
 15.
RELEASE_16
The version introduced by the Java Platform, Standard Edition
 16.
RELEASE_17
The version introduced by the Java Platform, Standard Edition
 17.
RELEASE_18
The version introduced by the Java Platform, Standard Edition
 18.
RELEASE_19
The version introduced by the Java Platform, Standard Edition
 19.
RELEASE_2
The version introduced by the Java 2 Platform, Standard Edition,
 v 1.2.
RELEASE_20
The version introduced by the Java Platform, Standard Edition
 20.
RELEASE_21
The version introduced by the Java Platform, Standard Edition
 21.
RELEASE_3
The version introduced by the Java 2 Platform, Standard Edition,
 v 1.3.
RELEASE_4
The version introduced by the Java 2 Platform, Standard Edition,
 v 1.4.
RELEASE_5
The version introduced by the Java 2 Platform, Standard
 Edition 5.0.
RELEASE_6
The version introduced by the Java Platform, Standard Edition
 6.
RELEASE_7
The version introduced by the Java Platform, Standard Edition
 7.
RELEASE_8
The version introduced by the Java Platform, Standard Edition
 8.
RELEASE_9
The version introduced by the Java Platform, Standard Edition
 9.
Method Summary
All Methods
Static Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
static boolean
isIdentifier
(
CharSequence
name)
Returns whether or not
name
is a syntactically valid
 identifier (simple name) or keyword in the latest source
 version.
static boolean
isKeyword
(
CharSequence
s)
Returns whether or not
s
is a keyword, boolean literal,
 or null literal in the latest source version.
static boolean
isKeyword
(
CharSequence
s,
SourceVersion
version)
Returns whether or not
s
is a keyword, boolean literal,
 or null literal in the given source version.
static boolean
isName
(
CharSequence
name)
Returns whether or not
name
is a syntactically valid
 qualified name in the latest source version.
static boolean
isName
(
CharSequence
name,
SourceVersion
version)
Returns whether or not
name
is a syntactically valid
 qualified name in the given source version.
static
SourceVersion
latest
()
Returns the latest source version that can be modeled.
static
SourceVersion
latestSupported
()
Returns the latest source version fully supported by the
 current execution environment.
Runtime.Version
runtimeVersion
()
Returns the least runtime version that supports this source
 version; otherwise
null
.
static
SourceVersion
valueOf
(
Runtime.Version
rv)
Returns the latest source version that is usable under the
 runtime version argument.
static
SourceVersion
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
SourceVersion
[]
values
()
Returns an array containing the constants of this enum class, in
the order they are declared.
Methods declared in class java.lang.
Enum
clone
,
compareTo
,
describeConstable
,
equals
,
finalize
,
getDeclaringClass
,
hashCode
,
name
,
ordinal
,
toString
,
valueOf
Methods declared in class java.lang.
Object
getClass
,
notify
,
notifyAll
,
wait
,
wait
,
wait
Enum Constant Details
RELEASE_0
public static final
SourceVersion
RELEASE_0
The original version.

 The language described in
The Java Language Specification, First Edition
.
RELEASE_1
public static final
SourceVersion
RELEASE_1
The version introduced by the Java Platform 1.1.

 The language is
RELEASE_0
augmented with nested classes
 as described in the 1.1 update to
The Java Language
 Specification, First Edition
.
RELEASE_2
public static final
SourceVersion
RELEASE_2
The version introduced by the Java 2 Platform, Standard Edition,
 v 1.2.

 The language described in
The Java Language Specification,
 Second Edition
, which includes the
strictfp
modifier.
RELEASE_3
public static final
SourceVersion
RELEASE_3
The version introduced by the Java 2 Platform, Standard Edition,
 v 1.3.

 No major changes from
RELEASE_2
.
RELEASE_4
public static final
SourceVersion
RELEASE_4
The version introduced by the Java 2 Platform, Standard Edition,
 v 1.4.

 Added a simple assertion facility.
See Also:
JSR 41: A Simple Assertion Facility
RELEASE_5
public static final
SourceVersion
RELEASE_5
The version introduced by the Java 2 Platform, Standard
 Edition 5.0.

 The language described in
The Java Language Specification,
 Third Edition
.  First release to support
 generics, annotations, autoboxing, var-args, enhanced
for
loop, and hexadecimal floating-point literals.
See Also:
JSR 14: Add Generic Types To The Java™ Programming Language
JSR 175: A Metadata Facility for the Java™ Programming Language
JSR 201: Extending the Java™ Programming Language with Enumerations,
 Autoboxing, Enhanced for loops and Static Import
RELEASE_6
public static final
SourceVersion
RELEASE_6
The version introduced by the Java Platform, Standard Edition
 6.

 No major changes from
RELEASE_5
.
See Also:
The Java Language Specification, Third Edition
RELEASE_7
public static final
SourceVersion
RELEASE_7
The version introduced by the Java Platform, Standard Edition
 7.

 Additions in this release include diamond syntax for
 constructors,
try
-with-resources, strings in switch,
 binary literals, and multi-catch.
Since:
1.7
See Also:
The Java Language Specification, Java SE 7 Edition
JSR 334: Small Enhancements to the Java™ Programming Language
RELEASE_8
public static final
SourceVersion
RELEASE_8
The version introduced by the Java Platform, Standard Edition
 8.

 Additions in this release include lambda expressions and default methods.
Since:
1.8
See Also:
The Java Language Specification, Java SE 8 Edition
JSR 335: Lambda Expressions for the Java™ Programming Language
RELEASE_9
public static final
SourceVersion
RELEASE_9
The version introduced by the Java Platform, Standard Edition
 9.

 Additions in this release include modules and removal of a
 single underscore from the set of legal identifier names.
Since:
9
See Also:
The Java Language Specification, Java SE 9 Edition
JSR 376: Java™ Platform Module System
JEP 213: Milling Project Coin
RELEASE_10
public static final
SourceVersion
RELEASE_10
The version introduced by the Java Platform, Standard Edition
 10.

 Additions in this release include local-variable type inference
 (
var
).
Since:
10
See Also:
The Java Language Specification, Java SE 10 Edition
JEP 286: Local-Variable Type Inference
RELEASE_11
public static final
SourceVersion
RELEASE_11
The version introduced by the Java Platform, Standard Edition
 11.

 Additions in this release include local-variable syntax for
 lambda parameters.
Since:
11
See Also:
The Java Language Specification, Java SE 11 Edition
JEP 323: Local-Variable Syntax for Lambda Parameters
RELEASE_12
public static final
SourceVersion
RELEASE_12
The version introduced by the Java Platform, Standard Edition
 12.
 No major changes from the prior release.
Since:
12
See Also:
The Java Language Specification, Java SE 12 Edition
RELEASE_13
public static final
SourceVersion
RELEASE_13
The version introduced by the Java Platform, Standard Edition
 13.
 No major changes from the prior release.
Since:
13
See Also:
The Java Language Specification, Java SE 13 Edition
RELEASE_14
public static final
SourceVersion
RELEASE_14
The version introduced by the Java Platform, Standard Edition
 14.

 Additions in this release include switch expressions.
Since:
14
See Also:
The Java Language Specification, Java SE 14 Edition
JEP 361: Switch Expressions
RELEASE_15
public static final
SourceVersion
RELEASE_15
The version introduced by the Java Platform, Standard Edition
 15.

 Additions in this release include text blocks.
Since:
15
See Also:
The Java Language Specification, Java SE 15 Edition
JEP 378: Text Blocks
RELEASE_16
public static final
SourceVersion
RELEASE_16
The version introduced by the Java Platform, Standard Edition
 16.

 Additions in this release include records and pattern matching
 for
instanceof
.
Since:
16
See Also:
The Java Language Specification, Java SE 16 Edition
JEP 394: Pattern Matching for instanceof
JEP 395: Records
RELEASE_17
public static final
SourceVersion
RELEASE_17
The version introduced by the Java Platform, Standard Edition
 17.

 Additions in this release include sealed classes and
 restoration of always-strict floating-point semantics.
Since:
17
See Also:
The Java Language Specification, Java SE 17 Edition
JEP 306: Restore Always-Strict Floating-Point Semantics
JEP 409: Sealed Classes
RELEASE_18
public static final
SourceVersion
RELEASE_18
The version introduced by the Java Platform, Standard Edition
 18.

 No major changes from the prior release.
Since:
18
See Also:
The Java Language Specification, Java SE 18 Edition
RELEASE_19
public static final
SourceVersion
RELEASE_19
The version introduced by the Java Platform, Standard Edition
 19.

 No major changes from the prior release.
Since:
19
See Also:
The Java Language Specification, Java SE 19 Edition
RELEASE_20
public static final
SourceVersion
RELEASE_20
The version introduced by the Java Platform, Standard Edition
 20.

 No major changes from the prior release.
Since:
20
See Also:
The Java Language Specification, Java SE 20 Edition
RELEASE_21
public static final
SourceVersion
RELEASE_21
The version introduced by the Java Platform, Standard Edition
 21.

 Additions in this release include record patterns and pattern
 matching for
switch
.
Since:
21
See Also:
The Java Language Specification, Java SE 21 Edition
Record Patterns
Pattern Matching for switch
Method Details
values
public static
SourceVersion
[]
values
()
Returns an array containing the constants of this enum class, in
the order they are declared.
Returns:
an array containing the constants of this enum class, in the order they are declared
valueOf
public static
SourceVersion
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
The string must match
exactly
an identifier used to declare an
enum constant in this class.  (Extraneous whitespace characters are 
not permitted.)
Parameters:
name
- the name of the enum constant to be returned.
Returns:
the enum constant with the specified name
Throws:
IllegalArgumentException
- if this enum class has no constant with the specified name
NullPointerException
- if the argument is null
latest
public static
SourceVersion
latest
()
Returns the latest source version that can be modeled.
Returns:
the latest source version that can be modeled
latestSupported
public static
SourceVersion
latestSupported
()
Returns the latest source version fully supported by the
 current execution environment.
RELEASE_9
or later must
 be returned.
API Note:
This method is included alongside
latest()
to
 allow identification of situations where the language model API
 is running on a platform version different than the latest
 version modeled by the API. One way that sort of situation can
 occur is if an IDE or similar tool is using the API to model
 source version
N
while running on platform version
 (
N
- 1). Running in this configuration is
 supported by the API. Running an API on platform versions
 earlier than (
N
- 1) or later than
N
may or may not work as an implementation detail. If an
 annotation processor was generating code to run under the
 current execution environment, the processor should only use
 platform features up to the
latestSupported
release,
 which may be earlier than the
latest
release.
Returns:
the latest source version fully supported by the
 current execution environment
isIdentifier
public static
boolean
isIdentifier
(
CharSequence
name)
Returns whether or not
name
is a syntactically valid
 identifier (simple name) or keyword in the latest source
 version.  The method returns
true
if the name consists
 of an initial character for which
Character.isJavaIdentifierStart(int)
returns
true
,
 followed only by characters for which
Character.isJavaIdentifierPart(int)
returns
true
.
 This pattern matches regular identifiers, keywords, contextual
 keywords, and the literals
"true"
,
"false"
,
"null"
.

 The method returns
false
for all other strings.
Parameters:
name
- the string to check
Returns:
true
if this string is a
 syntactically valid identifier or keyword,
false
otherwise.
See
Java Language Specification
:
3.8 Identifiers
isName
public static
boolean
isName
(
CharSequence
name)
Returns whether or not
name
is a syntactically valid
 qualified name in the latest source version.

 Syntactically, a qualified name is a sequence of identifiers
 separated by period characters ("
.
"). This method
 splits the input string into period-separated segments and
 applies checks to each segment in turn.

 Unlike
isIdentifier
, this method returns
false
for keywords, boolean literals, and the null
 literal in any segment.

 This method returns
true
for
contextual
 keywords
.
Parameters:
name
- the string to check
Returns:
true
if this string is a
 syntactically valid name,
false
otherwise.
See
Java Language Specification
:
3.9 Keywords
6.2 Names and Identifiers
isName
public static
boolean
isName
(
CharSequence
name,
SourceVersion
version)
Returns whether or not
name
is a syntactically valid
 qualified name in the given source version.

 Syntactically, a qualified name is a sequence of identifiers
 separated by period characters ("
.
"). This method
 splits the input string into period-separated segments and
 applies checks to each segment in turn.

 Unlike
isIdentifier
, this method returns
false
for keywords, boolean literals, and the null
 literal in any segment.

 This method returns
true
for
contextual
 keywords
.
Parameters:
name
- the string to check
version
- the version to use
Returns:
true
if this string is a
 syntactically valid name,
false
otherwise.
See
Java Language Specification
:
3.9 Keywords
6.2 Names and Identifiers
Since:
9
isKeyword
public static
boolean
isKeyword
(
CharSequence
s)
Returns whether or not
s
is a keyword, boolean literal,
 or null literal in the latest source version.
 This method returns
false
for
contextual
 keywords
.
Parameters:
s
- the string to check
Returns:
true
if
s
is a keyword, or boolean
 literal, or null literal,
false
otherwise.
See
Java Language Specification
:
3.9 Keywords
3.10.3 Boolean Literals
3.10.8 The Null Literal
isKeyword
public static
boolean
isKeyword
(
CharSequence
s,
SourceVersion
version)
Returns whether or not
s
is a keyword, boolean literal,
 or null literal in the given source version.
 This method returns
false
for
contextual
 keywords
.
Parameters:
s
- the string to check
version
- the version to use
Returns:
true
if
s
is a keyword, or boolean
 literal, or null literal,
false
otherwise.
See
Java Language Specification
:
3.9 Keywords
3.10.3 Boolean Literals
3.10.8 The Null Literal
Since:
9
valueOf
public static
SourceVersion
valueOf
(
Runtime.Version
rv)
Returns the latest source version that is usable under the
 runtime version argument. If the runtime version's
feature
is greater than the feature
 of the
runtime version
of the
latest source version
, an
IllegalArgumentException
is thrown.
Because the source versions of the Java programming language
 have so far followed a linear progression, only the feature
 component of a runtime version is queried to determine the
 mapping to a source version. If that linearity changes in the
 future, other components of the runtime version may influence
 the result.
API Note:
An expression to convert from a string value, for example
"17"
, to the corresponding source version,
RELEASE_17
, is:
Copy
SourceVersion.valueOf(Runtime.Version.parse("17"))
Parameters:
rv
- runtime version to map to a source version
Returns:
the latest source version that is usable under the
 runtime version argument
Throws:
IllegalArgumentException
- if the feature of version
 argument is greater than the feature of the platform version.
Since:
18
runtimeVersion
public
Runtime.Version
runtimeVersion
()
Returns the least runtime version that supports this source
 version; otherwise
null
. The returned runtime version
 has a
feature
large
 enough to support this source version and has no other elements
 set.

 Source versions greater than or equal to
RELEASE_6
have non-
null
results.
Returns:
the least runtime version that supports this source
 version; otherwise
null
Since:
18
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.