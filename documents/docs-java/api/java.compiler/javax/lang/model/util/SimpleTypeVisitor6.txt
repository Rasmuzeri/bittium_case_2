SimpleTypeVisitor6 (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field
|
Constr
|
Method
Detail:
Field
|
Constr
|
Method
SEARCH
Module
java.compiler
Package
javax.lang.model.util
Class SimpleTypeVisitor6<R,
P>
java.lang.Object
javax.lang.model.util.AbstractTypeVisitor6
<R,
P>
javax.lang.model.util.SimpleTypeVisitor6<R,
P>
Type Parameters:
R
- the return type of this visitor's methods.  Use
Void
for visitors that do not need to return results.
P
- the type of the additional parameter to this visitor's
            methods.  Use
Void
for visitors that do not need an
            additional parameter.
All Implemented Interfaces:
TypeVisitor
<R,
P>
Direct Known Subclasses:
SimpleTypeVisitor7
,
TypeKindVisitor6
@SupportedSourceVersion
(
RELEASE_6
)
public class
SimpleTypeVisitor6<R,
P>
extends
AbstractTypeVisitor6
<R,
P>
A simple visitor of types with default behavior appropriate for the
RELEASE_6
source version.

 Visit methods corresponding to
RELEASE_6
language
 constructs call
defaultAction
, passing their
 arguments to
defaultAction
's corresponding parameters.

 For constructs introduced in
RELEASE_7
and later,
visitUnknown
is called instead.
API Note:
Methods in this class may be overridden subject to their general
 contract.
WARNING:
The
TypeVisitor
interface implemented by this class may have methods
 added to it in the future to accommodate new, currently unknown,
 language structures added to future versions of the Java
 programming language.  Therefore, methods whose names begin with
"visit"
may be added to this class in the future; to avoid
 incompatibilities, classes and subclasses which extend this class
 should not declare any instance methods with names beginning with
"visit"
.
When such a new visit method is added, the default
 implementation in this class will be to directly or indirectly call
 the
visitUnknown
method.  A new simple type
 visitor class will also be introduced to correspond to the new
 language level; this visitor will have different default behavior
 for the visit method in question.  When a new visitor is
 introduced, portions of this visitor class may be deprecated,
 including its constructors.
Since:
1.6
See Also:
SimpleTypeVisitor7
SimpleTypeVisitor8
SimpleTypeVisitor9
SimpleTypeVisitor14
Field Summary
Fields
Modifier and Type
Field
Description
protected final
R
DEFAULT_VALUE
Default value to be returned;
defaultAction
returns this value unless the method is
 overridden.
Constructor Summary
Constructors
Modifier
Constructor
Description
protected
SimpleTypeVisitor6
()
Deprecated.
Release 6 is obsolete; update to a visitor for a newer
 release level.
protected
SimpleTypeVisitor6
(
R
defaultValue)
Deprecated.
Release 6 is obsolete; update to a visitor for a newer
 release level.
Method Summary
All Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
protected
R
defaultAction
(
TypeMirror
t,
P
p)
The default action for visit methods.
R
visitArray
(
ArrayType
t,
P
p)
Visits an array type.
R
visitDeclared
(
DeclaredType
t,
P
p)
Visits a declared type.
R
visitError
(
ErrorType
t,
P
p)
Visits an error type.
R
visitExecutable
(
ExecutableType
t,
P
p)
Visits an executable type.
R
visitNoType
(
NoType
t,
P
p)
Visits a
NoType
instance.
R
visitNull
(
NullType
t,
P
p)
Visits the null type.
R
visitPrimitive
(
PrimitiveType
t,
P
p)
Visits a primitive type.
R
visitTypeVariable
(
TypeVariable
t,
P
p)
Visits a type variable.
R
visitWildcard
(
WildcardType
t,
P
p)
Visits a wildcard type.
Methods declared in class javax.lang.model.util.
AbstractTypeVisitor6
visit
,
visit
,
visitIntersection
,
visitUnion
,
visitUnknown
Methods declared in class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Field Details
DEFAULT_VALUE
protected final
R
DEFAULT_VALUE
Default value to be returned;
defaultAction
returns this value unless the method is
 overridden.
Constructor Details
SimpleTypeVisitor6
@Deprecated
(
since
="9")
protected
SimpleTypeVisitor6
()
Deprecated.
Release 6 is obsolete; update to a visitor for a newer
 release level.
Constructor for concrete subclasses; uses
null
for the
 default value.
SimpleTypeVisitor6
@Deprecated
(
since
="9")
protected
SimpleTypeVisitor6
(
R
defaultValue)
Deprecated.
Release 6 is obsolete; update to a visitor for a newer
 release level.
Constructor for concrete subclasses; uses the argument for the
 default value.
Parameters:
defaultValue
- the value to assign to
DEFAULT_VALUE
Method Details
defaultAction
protected
R
defaultAction
(
TypeMirror
t,
P
p)
The default action for visit methods.
Implementation Requirements:
The implementation in this class just returns
DEFAULT_VALUE
; subclasses will commonly override this method.
Parameters:
t
- the type to process
p
- a visitor-specified parameter
Returns:
DEFAULT_VALUE
unless overridden
visitPrimitive
public
R
visitPrimitive
(
PrimitiveType
t,
P
p)
Visits a primitive type.
Implementation Requirements:
This implementation calls
defaultAction
.
Parameters:
t
- the type to visit
p
- a visitor-specified parameter
Returns:
the result of
defaultAction
visitNull
public
R
visitNull
(
NullType
t,
P
p)
Visits the null type. This implementation calls
defaultAction
.
Implementation Requirements:
This implementation calls
defaultAction
.
Parameters:
t
- the type to visit
p
- a visitor-specified parameter
Returns:
the result of
defaultAction
visitArray
public
R
visitArray
(
ArrayType
t,
P
p)
Visits an array type.
Implementation Requirements:
This implementation calls
defaultAction
.
Parameters:
t
- the type to visit
p
- a visitor-specified parameter
Returns:
the result of
defaultAction
visitDeclared
public
R
visitDeclared
(
DeclaredType
t,
P
p)
Visits a declared type.
Implementation Requirements:
This implementation calls
defaultAction
.
Parameters:
t
- the type to visit
p
- a visitor-specified parameter
Returns:
the result of
defaultAction
visitError
public
R
visitError
(
ErrorType
t,
P
p)
Visits an error type.
Implementation Requirements:
This implementation calls
defaultAction
.
Parameters:
t
- the type to visit
p
- a visitor-specified parameter
Returns:
the result of
defaultAction
visitTypeVariable
public
R
visitTypeVariable
(
TypeVariable
t,
P
p)
Visits a type variable.
Implementation Requirements:
This implementation calls
defaultAction
.
Parameters:
t
- the type to visit
p
- a visitor-specified parameter
Returns:
the result of
defaultAction
visitWildcard
public
R
visitWildcard
(
WildcardType
t,
P
p)
Visits a wildcard type.
Implementation Requirements:
This implementation calls
defaultAction
.
Parameters:
t
- the type to visit
p
- a visitor-specified parameter
Returns:
the result of
defaultAction
visitExecutable
public
R
visitExecutable
(
ExecutableType
t,
P
p)
Visits an executable type.
Implementation Requirements:
This implementation calls
defaultAction
.
Parameters:
t
- the type to visit
p
- a visitor-specified parameter
Returns:
the result of
defaultAction
visitNoType
public
R
visitNoType
(
NoType
t,
P
p)
Visits a
NoType
instance.
Implementation Requirements:
This implementation calls
defaultAction
.
Parameters:
t
- the type to visit
p
- a visitor-specified parameter
Returns:
the result of
defaultAction
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.