ElementScanner8 (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field
|
Constr
|
Method
Detail:
Field |
Constr
|
Method
SEARCH
Module
java.compiler
Package
javax.lang.model.util
Class ElementScanner8<R,
P>
java.lang.Object
javax.lang.model.util.AbstractElementVisitor6
<R,
P>
javax.lang.model.util.ElementScanner6
<R,
P>
javax.lang.model.util.ElementScanner7
<R,
P>
javax.lang.model.util.ElementScanner8<R,
P>
Type Parameters:
R
- the return type of this visitor's methods.  Use
Void
for visitors that do not need to return results.
P
- the type of the additional parameter to this visitor's
            methods.  Use
Void
for visitors that do not need an
            additional parameter.
All Implemented Interfaces:
ElementVisitor
<R,
P>
Direct Known Subclasses:
ElementScanner9
@SupportedSourceVersion
(
RELEASE_8
)
public class
ElementScanner8<R,
P>
extends
ElementScanner7
<R,
P>
A scanning visitor of program elements with default behavior
 appropriate for the
RELEASE_8
source version.  The
visit
Xyz
methods in this
 class scan their component elements by calling
scan
on their
enclosed elements
,
parameters
, etc., as indicated in
 the individual method specifications.  A subclass can control the
 order elements are visited by overriding the
visit
Xyz
methods.  Note that clients of a
 scanner may get the desired behavior by invoking
v.scan(e,
 p)
rather than
v.visit(e, p)
on the root objects of
 interest.
When a subclass overrides a
visit
Xyz
method, the
 new method can cause the enclosed elements to be scanned in the
 default way by calling
super.visit
Xyz
.  In this
 fashion, the concrete visitor can control the ordering of traversal
 over the component elements with respect to the additional
 processing; for example, consistently calling
super.visit
Xyz
at the start of the overridden
 methods will yield a preorder traversal, etc.  If the component
 elements should be traversed in some other order, instead of
 calling
super.visit
Xyz
, an overriding visit method
 should call
scan
with the elements in the desired order.
API Note:
Methods in this class may be overridden subject to their general
 contract.
Since:
1.8
See Also:
Compatibility note for subclasses
ElementScanner6
ElementScanner7
ElementScanner9
ElementScanner14
Field Summary
Fields declared in class javax.lang.model.util.
ElementScanner6
DEFAULT_VALUE
Constructor Summary
Constructors
Modifier
Constructor
Description
protected
ElementScanner8
()
Constructor for concrete subclasses; uses
null
for the
 default value.
protected
ElementScanner8
(
R
defaultValue)
Constructor for concrete subclasses; uses the argument for the
 default value.
Method Summary
Methods declared in class javax.lang.model.util.
ElementScanner7
visitVariable
Methods declared in class javax.lang.model.util.
ElementScanner6
scan
,
scan
,
scan
,
visitExecutable
,
visitPackage
,
visitType
,
visitTypeParameter
Methods declared in class javax.lang.model.util.
AbstractElementVisitor6
visit
,
visit
,
visitModule
,
visitRecordComponent
,
visitUnknown
Methods declared in class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Constructor Details
ElementScanner8
protected
ElementScanner8
()
Constructor for concrete subclasses; uses
null
for the
 default value.
ElementScanner8
protected
ElementScanner8
(
R
defaultValue)
Constructor for concrete subclasses; uses the argument for the
 default value.
Parameters:
defaultValue
- the default value
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.