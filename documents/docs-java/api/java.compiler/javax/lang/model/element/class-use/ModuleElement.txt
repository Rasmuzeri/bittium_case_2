Uses of Interface javax.lang.model.element.ModuleElement (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Interface
javax.lang.model.element.ModuleElement
Packages that use
ModuleElement
Package
Description
javax.lang.model.element
Interfaces used to model elements of the Java programming language.
javax.lang.model.util
Utilities to assist in the processing of
program elements
and
types
.
Uses of
ModuleElement
in
javax.lang.model.element
Methods in
javax.lang.model.element
that return
ModuleElement
Modifier and Type
Method
Description
ModuleElement
ModuleElement.RequiresDirective.
getDependency
()
Returns the module that is required.
Methods in
javax.lang.model.element
that return types with arguments of type
ModuleElement
Modifier and Type
Method
Description
List
<? extends
ModuleElement
>
ModuleElement.ExportsDirective.
getTargetModules
()
Returns the specific modules to which the package is being exported,
 or
null
, if the package is exported to all modules which
 have readability to this module.
List
<? extends
ModuleElement
>
ModuleElement.OpensDirective.
getTargetModules
()
Returns the specific modules to which the package is being open
 or
null
, if the package is open all modules which
 have readability to this module.
Methods in
javax.lang.model.element
with parameters of type
ModuleElement
Modifier and Type
Method
Description
default
R
ElementVisitor.
visitModule
(
ModuleElement
e,
P
p)
Visits a module element.
Uses of
ModuleElement
in
javax.lang.model.util
Methods in
javax.lang.model.util
that return
ModuleElement
Modifier and Type
Method
Description
default
ModuleElement
Elements.
getModuleElement
(
CharSequence
name)
Returns a module element given its fully qualified name.
default
ModuleElement
Elements.
getModuleOf
(
Element
e)
Returns the module of an element.
Methods in
javax.lang.model.util
that return types with arguments of type
ModuleElement
Modifier and Type
Method
Description
default
Set
<? extends
ModuleElement
>
Elements.
getAllModuleElements
()
Returns all module elements in the current environment.
static
List
<
ModuleElement
>
ElementFilter.
modulesIn
(
Iterable
<? extends
Element
> elements)
Returns a list of modules in
elements
.
static
Set
<
ModuleElement
>
ElementFilter.
modulesIn
(
Set
<? extends
Element
> elements)
Returns a set of modules in
elements
.
Methods in
javax.lang.model.util
with parameters of type
ModuleElement
Modifier and Type
Method
Description
default
Elements.Origin
Elements.
getOrigin
(
ModuleElement
m,
ModuleElement.Directive
directive)
Returns the
origin
of the given module directive.
default
PackageElement
Elements.
getPackageElement
(
ModuleElement
module,
CharSequence
name)
Returns a package given its fully qualified name, as seen from the given module.
default
TypeElement
Elements.
getTypeElement
(
ModuleElement
module,
CharSequence
name)
Returns a type element given its canonical name, as seen from the given module.
default boolean
Elements.
isAutomaticModule
(
ModuleElement
module)
Returns
true
if the module element is an automatic
 module,
false
otherwise.
R
AbstractElementVisitor6.
visitModule
(
ModuleElement
e,
P
p)
Visits a module element.
abstract
R
AbstractElementVisitor9.
visitModule
(
ModuleElement
e,
P
p)
Visits a module element.
R
ElementKindVisitor9.
visitModule
(
ModuleElement
e,
P
p)
Visits a module element.
R
ElementScanner9.
visitModule
(
ModuleElement
e,
P
p)
Visits a module element.
R
SimpleElementVisitor9.
visitModule
(
ModuleElement
e,
P
p)
Visits a module element.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.