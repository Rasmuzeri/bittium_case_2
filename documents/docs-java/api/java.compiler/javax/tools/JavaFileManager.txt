JavaFileManager (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested
|
Field |
Constr |
Method
Detail:
Field |
Constr |
Method
SEARCH
Module
java.compiler
Package
javax.tools
Interface JavaFileManager
All Superinterfaces:
AutoCloseable
,
Closeable
,
Flushable
,
OptionChecker
All Known Subinterfaces:
StandardJavaFileManager
All Known Implementing Classes:
ForwardingJavaFileManager
public interface
JavaFileManager
extends
Closeable
,
Flushable
,
OptionChecker
File manager for tools operating on Java programming language
 source and class files.  In this context,
file
means an
 abstraction of regular files and other sources of data.
When constructing new JavaFileObjects, the file manager must
 determine where to create them.  For example, if a file manager
 manages regular files on a file system, it would most likely have a
 current/working directory to use as default location when creating
 or finding files.  A number of hints can be provided to a file
 manager as to where to create files.  Any file manager might choose
 to ignore these hints.
Some methods in this interface use class names.  Such class
 names must be given in the Java Virtual Machine internal form of
 fully qualified class and interface names.  For convenience '.'
 and '/' are interchangeable.  The internal form is defined in
 chapter four of
The Java Virtual Machine Specification
.
Discussion:
this means that the names
   "java/lang.package-info", "java/lang/package-info",
   "java.lang.package-info", are valid and equivalent.  Compare to
   binary name as defined in
The Java Language Specification
,
   section 13.1 "The Form of a Binary".
The case of names is significant.  All names should be treated
 as case-sensitive.  For example, some file systems have
 case-insensitive, case-aware file names.  File objects representing
 such files should take care to preserve case by using
File.getCanonicalFile()
or similar means.  If the system is
 not case-aware, file objects must use other means to preserve case.
Relative names
:
some
 methods in this interface use relative names.  A relative name is a
 non-null, non-empty sequence of path segments separated by '/'.
 '.' or '..'  are invalid path segments.  A valid relative name must
 match the "path-rootless" rule of
RFC 3986
,
 section 3.3.  Informally, this should be true:
Copy
URI.
create
(relativeName).
normalize
().
getPath
().equals(relativeName)
All methods in this interface might throw a SecurityException.
An object of this interface is not required to support
 multi-threaded access, that is, be synchronized.  However, it must
 support concurrent access to different file objects created by this
 object.
Implementation note:
a consequence of this requirement
 is that a trivial implementation of output to a
JarOutputStream
is not a sufficient implementation.
 That is, rather than creating a JavaFileObject that returns the
 JarOutputStream directly, the contents must be cached until closed
 and then written to the JarOutputStream.
Unless explicitly allowed, all methods in this interface might
 throw a NullPointerException if given a
null
argument.
Since:
1.6
External Specifications
RFC 3986: Uniform Resource Identifier (URI): Generic Syntax
See Also:
JavaFileObject
FileObject
Nested Class Summary
Nested Classes
Modifier and Type
Interface
Description
static interface
JavaFileManager.Location
Interface for locations of file objects.
Method Summary
All Methods
Instance Methods
Abstract Methods
Default Methods
Modifier and Type
Method
Description
void
close
()
Releases any resources opened by this file manager directly or
 indirectly.
default boolean
contains
(
JavaFileManager.Location
location,
FileObject
fo)
Determines whether or not a given file object is "contained in" a specified location.
void
flush
()
Flushes any resources opened for output by this file manager
 directly or indirectly.
ClassLoader
getClassLoader
(
JavaFileManager.Location
location)
Returns a class loader for loading plug-ins from the given
 package-oriented location.
FileObject
getFileForInput
(
JavaFileManager.Location
location,
String
packageName,
String
relativeName)
Returns a
file object
for input
 representing the specified
relative
 name
in the specified package in the given package-oriented location.
FileObject
getFileForOutput
(
JavaFileManager.Location
location,
String
packageName,
String
relativeName,
FileObject
sibling)
Returns a
file object
for output
 representing the specified
relative
 name
in the specified package in the given location.
default
FileObject
getFileForOutputForOriginatingFiles
(
JavaFileManager.Location
location,
String
packageName,
String
relativeName,
FileObject
... originatingFiles)
Returns a
file object
for output
 representing the specified
relative
 name
in the specified package in the given location.
JavaFileObject
getJavaFileForInput
(
JavaFileManager.Location
location,
String
className,
JavaFileObject.Kind
kind)
Returns a
file object
for input
 representing the specified class of the specified kind in the
 given package-oriented location.
JavaFileObject
getJavaFileForOutput
(
JavaFileManager.Location
location,
String
className,
JavaFileObject.Kind
kind,
FileObject
sibling)
Returns a
file object
for output
 representing the specified class of the specified kind in the
 given package-oriented location.
default
JavaFileObject
getJavaFileForOutputForOriginatingFiles
(
JavaFileManager.Location
location,
String
className,
JavaFileObject.Kind
kind,
FileObject
... originatingFiles)
Returns a
file object
for output
 representing the specified class of the specified kind in the
 given package-oriented location.
default
JavaFileManager.Location
getLocationForModule
(
JavaFileManager.Location
location,
String
moduleName)
Gets a location for a named module within a location, which may be either
 a module-oriented location or an output location.
default
JavaFileManager.Location
getLocationForModule
(
JavaFileManager.Location
location,
JavaFileObject
fo)
Gets a location for the module containing a specific file
 to be found within a location, which may be either
 a module-oriented location or an output location.
default <S>
ServiceLoader
<S>
getServiceLoader
(
JavaFileManager.Location
location,
Class
<S> service)
Get a service loader for a specific service class from a given location.
boolean
handleOption
(
String
current,
Iterator
<
String
> remaining)
Handles one option.
boolean
hasLocation
(
JavaFileManager.Location
location)
Determines if a location is known to this file manager.
String
inferBinaryName
(
JavaFileManager.Location
location,
JavaFileObject
file)
Infers a binary name of a file object based on a package-oriented location.
default
String
inferModuleName
(
JavaFileManager.Location
location)
Infer the name of the module from its location, as returned by
getLocationForModule
or
listModuleLocations
.
boolean
isSameFile
(
FileObject
a,
FileObject
b)
Compares two file objects and return true if they represent the
 same underlying object.
Iterable
<
JavaFileObject
>
list
(
JavaFileManager.Location
location,
String
packageName,
Set
<
JavaFileObject.Kind
> kinds,
 boolean recurse)
Lists all file objects matching the given criteria in the given
 package-oriented location.
default
Iterable
<
Set
<
JavaFileManager.Location
>>
listLocationsForModules
(
JavaFileManager.Location
location)
Lists the locations for all the modules in a module-oriented location or an output location.
Methods declared in interface javax.tools.
OptionChecker
isSupportedOption
Method Details
getClassLoader
ClassLoader
getClassLoader
(
JavaFileManager.Location
location)
Returns a class loader for loading plug-ins from the given
 package-oriented location.
 For example, to load annotation processors,
 a compiler will request a class loader for the
ANNOTATION_PROCESSOR_PATH
location.
Parameters:
location
- a location
Returns:
a class loader for the given location; or
null
if loading plug-ins from the given location is disabled or if
 the location is not known
Throws:
SecurityException
- if a class loader can not be created
 in the current security context
IllegalStateException
- if
close()
has been called
 and this file manager cannot be reopened
IllegalArgumentException
- if the location is a module-oriented location
list
Iterable
<
JavaFileObject
>
list
(
JavaFileManager.Location
location,
String
packageName,
Set
<
JavaFileObject.Kind
> kinds,
 boolean recurse)
throws
IOException
Lists all file objects matching the given criteria in the given
 package-oriented location.
 List file objects in "subpackages" if recurse is true.
Note: even if the given location is unknown to this file
 manager, it may not return
null
.  Also, an unknown
 location may not cause an exception.
Parameters:
location
- a location
packageName
- a package name
kinds
- return objects only of these kinds
recurse
- if true include "subpackages"
Returns:
an Iterable of file objects matching the given criteria
Throws:
IOException
- if an I/O error occurred, or if
close()
has been called and this file manager cannot be
 reopened
IllegalArgumentException
- if the location is a module-oriented location
IllegalStateException
- if
close()
has been called
 and this file manager cannot be reopened
inferBinaryName
String
inferBinaryName
(
JavaFileManager.Location
location,
JavaFileObject
file)
Infers a binary name of a file object based on a package-oriented location.
 The binary name returned might not be a valid binary name according to
The Java Language Specification
.
Parameters:
location
- a location
file
- a file object
Returns:
a binary name or
null
the file object is not
 found in the given location
Throws:
IllegalArgumentException
- if the location is a module-oriented location
IllegalStateException
- if
close()
has been called
 and this file manager cannot be reopened
isSameFile
boolean
isSameFile
(
FileObject
a,
FileObject
b)
Compares two file objects and return true if they represent the
 same underlying object.
Parameters:
a
- a file object
b
- a file object
Returns:
true if the given file objects represent the same
 underlying object
Throws:
IllegalArgumentException
- if either of the arguments
 were created with another file manager and this file manager
 does not support foreign file objects
handleOption
boolean
handleOption
(
String
current,
Iterator
<
String
> remaining)
Handles one option.  If
current
is an option to this
 file manager it will consume any arguments to that option from
remaining
and return true, otherwise return false.
Parameters:
current
- current option
remaining
- remaining options
Returns:
true if this option was handled by this file manager,
 false otherwise
Throws:
IllegalArgumentException
- if this option to this file
 manager is used incorrectly
IllegalStateException
- if
close()
has been called
 and this file manager cannot be reopened
hasLocation
boolean
hasLocation
(
JavaFileManager.Location
location)
Determines if a location is known to this file manager.
Parameters:
location
- a location
Returns:
true if the location is known
getJavaFileForInput
JavaFileObject
getJavaFileForInput
(
JavaFileManager.Location
location,
String
className,
JavaFileObject.Kind
kind)
throws
IOException
Returns a
file object
for input
 representing the specified class of the specified kind in the
 given package-oriented location.
Parameters:
location
- a location
className
- the name of a class
kind
- the kind of file, must be one of
SOURCE
or
CLASS
Returns:
a file object, might return
null
if the
 file does not exist
Throws:
IllegalArgumentException
- if the location is not known
 to this file manager and the file manager does not support
 unknown locations, or if the kind is not valid, or if the
 location is a module-oriented location
IOException
- if an I/O error occurred, or if
close()
has been called and this file manager cannot be
 reopened
IllegalStateException
- if
close()
has been called
 and this file manager cannot be reopened
getJavaFileForOutput
JavaFileObject
getJavaFileForOutput
(
JavaFileManager.Location
location,
String
className,
JavaFileObject.Kind
kind,
FileObject
sibling)
throws
IOException
Returns a
file object
for output
 representing the specified class of the specified kind in the
 given package-oriented location.
Optionally, this file manager might consider the sibling as
 a hint for where to place the output.  The exact semantics of
 this hint is unspecified.  The JDK compiler, javac, for
 example, will place class files in the same directories as
 originating source files unless a class file output directory
 is provided.  To facilitate this behavior, javac might provide
 the originating source file as sibling when calling this
 method.
Parameters:
location
- a package-oriented location
className
- the name of a class
kind
- the kind of file, must be one of
SOURCE
or
CLASS
sibling
- a file object to be used as hint for placement;
 might be
null
Returns:
a file object for output
Throws:
IllegalArgumentException
- if sibling is not known to
 this file manager, or if the location is not known to this file
 manager and the file manager does not support unknown
 locations, or if the kind is not valid, or if the location is
 not an output location
IOException
- if an I/O error occurred, or if
close()
has been called and this file manager cannot be
 reopened
IllegalStateException
-
close()
has been called
 and this file manager cannot be reopened
getJavaFileForOutputForOriginatingFiles
default
JavaFileObject
getJavaFileForOutputForOriginatingFiles
(
JavaFileManager.Location
location,
String
className,
JavaFileObject.Kind
kind,
FileObject
... originatingFiles)
throws
IOException
Returns a
file object
for output
 representing the specified class of the specified kind in the
 given package-oriented location.
The provided
originatingFiles
represent files that
 were, in an unspecified way, used to create the content of
 the file created by this method. See
originatingElements
in
Filer.createSourceFile(java.lang.CharSequence, javax.lang.model.element.Element...)
.
Elements.getFileObjectOf(javax.lang.model.element.Element)
may be used to convert the
Element
s to
FileObject
s.
Implementation Requirements:
The default implementation calls
getJavaFileForOutput(javax.tools.JavaFileManager.Location, java.lang.String, javax.tools.JavaFileObject.Kind, javax.tools.FileObject)
with the first element of the
originatingFiles
, if any, as a
sibling
.
Parameters:
location
- a package-oriented location
className
- the name of a class
kind
- the kind of file, must be one of
SOURCE
or
CLASS
originatingFiles
- the files which are contributing to this newly created file;
null
is equivalent to empty
originatingFiles
,
                         meaning no known originating files
Returns:
a file object for output
Throws:
IllegalArgumentException
- if sibling is not known to
 this file manager, or if the location is not known to this file
 manager and the file manager does not support unknown
 locations, or if the kind is not valid, or if the location is
 not an output location
IOException
- if an I/O error occurred, or if
close()
has been called and this file manager cannot be
 reopened
IllegalStateException
-
close()
has been called
 and this file manager cannot be reopened
Since:
18
See Also:
Filer.createSourceFile(java.lang.CharSequence, javax.lang.model.element.Element...)
getFileForInput
FileObject
getFileForInput
(
JavaFileManager.Location
location,
String
packageName,
String
relativeName)
throws
IOException
Returns a
file object
for input
 representing the specified
relative
 name
in the specified package in the given package-oriented location.
If the returned object represents a
source
or
class
file, it must be an instance
 of
JavaFileObject
.
Informally, the file object returned by this method is
 located in the concatenation of the location, package name, and
 relative name.  For example, to locate the properties file
 "resources/compiler.properties" in the package
 "com.sun.tools.javac" in the
SOURCE_PATH
location, this method
 might be called like so:
Copy
getFileForInput(SOURCE_PATH, "com.sun.tools.javac", "resources/compiler.properties");
If the call was executed on Windows, with SOURCE_PATH set to
"C:\Documents and Settings\UncleBob\src\share\classes"
,
 a valid result would be a file object representing the file
"C:\Documents and Settings\UncleBob\src\share\classes\com\sun\tools\javac\resources\compiler.properties"
.
Parameters:
location
- a package-oriented location
packageName
- a package name
relativeName
- a relative name
Returns:
a file object, might return
null
if the file
 does not exist
Throws:
IllegalArgumentException
- if the location is not known
 to this file manager and the file manager does not support
 unknown locations, or if
relativeName
is not valid,
 or if the location is a module-oriented location
IOException
- if an I/O error occurred, or if
close()
has been called and this file manager cannot be
 reopened
IllegalStateException
- if
close()
has been called
 and this file manager cannot be reopened
getFileForOutput
FileObject
getFileForOutput
(
JavaFileManager.Location
location,
String
packageName,
String
relativeName,
FileObject
sibling)
throws
IOException
Returns a
file object
for output
 representing the specified
relative
 name
in the specified package in the given location.
Optionally, this file manager might consider the sibling as
 a hint for where to place the output.  The exact semantics of
 this hint is unspecified.  The JDK compiler, javac, for
 example, will place class files in the same directories as
 originating source files unless a class file output directory
 is provided.  To facilitate this behavior, javac might provide
 the originating source file as sibling when calling this
 method.
If the returned object represents a
source
or
class
file, it must be an instance
 of
JavaFileObject
.
Informally, the file object returned by this method is
 located in the concatenation of the location, package name, and
 relative name or next to the sibling argument.  See
getFileForInput
for an example.
Parameters:
location
- an output location
packageName
- a package name
relativeName
- a relative name
sibling
- a file object to be used as hint for placement;
 might be
null
Returns:
a file object
Throws:
IllegalArgumentException
- if sibling is not known to
 this file manager, or if the location is not known to this file
 manager and the file manager does not support unknown
 locations, or if
relativeName
is not valid,
 or if the location is not an output location
IOException
- if an I/O error occurred, or if
close()
has been called and this file manager cannot be
 reopened
IllegalStateException
- if
close()
has been called
 and this file manager cannot be reopened
getFileForOutputForOriginatingFiles
default
FileObject
getFileForOutputForOriginatingFiles
(
JavaFileManager.Location
location,
String
packageName,
String
relativeName,
FileObject
... originatingFiles)
throws
IOException
Returns a
file object
for output
 representing the specified
relative
 name
in the specified package in the given location.
The provided
originatingFiles
represent files that
 were, in an unspecified way, used to create the content of
 the file created by this method. See
originatingElements
in
Filer.createResource(javax.tools.JavaFileManager.Location, java.lang.CharSequence, java.lang.CharSequence, javax.lang.model.element.Element...)
.
Elements.getFileObjectOf(javax.lang.model.element.Element)
may be used to convert the
Element
s to
FileObject
s.
If the returned object represents a
source
or
class
file, it must be an instance
 of
JavaFileObject
.
Informally, the file object returned by this method is
 located in the concatenation of the location, package name, and
 relative name or in a location inferred from the
originatingFiles
.
 See
getFileForInput
for an example.
Implementation Requirements:
The default implementation calls
getFileForOutput(javax.tools.JavaFileManager.Location, java.lang.String, java.lang.String, javax.tools.FileObject)
with the first element of the
originatingFiles
, if any, as a
sibling
.
Parameters:
location
- an output location
packageName
- a package name
relativeName
- a relative name
originatingFiles
- the files which are contributing to this newly created file;
null
is equivalent to empty
originatingFiles
,
                         meaning no known originating files
Returns:
a file object
Throws:
IllegalArgumentException
- if sibling is not known to
 this file manager, or if the location is not known to this file
 manager and the file manager does not support unknown
 locations, or if
relativeName
is not valid,
 or if the location is not an output location
IOException
- if an I/O error occurred, or if
close()
has been called and this file manager cannot be
 reopened
IllegalStateException
- if
close()
has been called
 and this file manager cannot be reopened
Since:
18
See Also:
Filer.createResource(javax.tools.JavaFileManager.Location, java.lang.CharSequence, java.lang.CharSequence, javax.lang.model.element.Element...)
flush
void
flush
()
    throws
IOException
Flushes any resources opened for output by this file manager
 directly or indirectly.  Flushing a closed file manager has no
 effect.
Specified by:
flush
in interface
Flushable
Throws:
IOException
- if an I/O error occurred
See Also:
close()
close
void
close
()
    throws
IOException
Releases any resources opened by this file manager directly or
 indirectly.  This might render this file manager useless and
 the effect of subsequent calls to methods on this object or any
 objects obtained through this object is undefined unless
 explicitly allowed.  However, closing a file manager which has
 already been closed has no effect.
Specified by:
close
in interface
AutoCloseable
Specified by:
close
in interface
Closeable
Throws:
IOException
- if an I/O error occurred
See Also:
flush()
getLocationForModule
default
JavaFileManager.Location
getLocationForModule
(
JavaFileManager.Location
location,
String
moduleName)
throws
IOException
Gets a location for a named module within a location, which may be either
 a module-oriented location or an output location.
 The result will be an output location if the given location is
 an output location, or it will be a package-oriented location.
Implementation Requirements:
This implementation throws
UnsupportedOperationException
.
Parameters:
location
- the module-oriented location
moduleName
- the name of the module to be found
Returns:
the location for the named module
Throws:
IOException
- if an I/O error occurred
UnsupportedOperationException
- if this operation is not supported by this file manager
IllegalArgumentException
- if the location is neither an output location nor a
 module-oriented location
Since:
9
getLocationForModule
default
JavaFileManager.Location
getLocationForModule
(
JavaFileManager.Location
location,
JavaFileObject
fo)
throws
IOException
Gets a location for the module containing a specific file
 to be found within a location, which may be either
 a module-oriented location or an output location.
 The result will be an output location if the given location is
 an output location, or it will be a package-oriented location.
Implementation Requirements:
This implementation throws
UnsupportedOperationException
.
Parameters:
location
- the module-oriented location
fo
- the file
Returns:
the module containing the file
Throws:
IOException
- if an I/O error occurred
UnsupportedOperationException
- if this operation is not supported by this file manager
IllegalArgumentException
- if the location is neither an output location nor a
 module-oriented location
Since:
9
getServiceLoader
default
<S>
ServiceLoader
<S>
getServiceLoader
(
JavaFileManager.Location
location,
Class
<S> service)
throws
IOException
Get a service loader for a specific service class from a given location.

 If the location is a module-oriented location, the service loader will use the
 service declarations in the modules found in that location. Otherwise, a service loader
 is created using the package-oriented location, in which case, the services are
 determined using the provider-configuration files in
META-INF/services
.
Implementation Requirements:
This implementation throws
UnsupportedOperationException
.
Type Parameters:
S
- the service class
Parameters:
location
- the module-oriented location
service
- the
Class
object of the service class
Returns:
a service loader for the given service class
Throws:
IOException
- if an I/O error occurred
UnsupportedOperationException
- if this operation is not supported by this file manager
Since:
9
inferModuleName
default
String
inferModuleName
(
JavaFileManager.Location
location)
throws
IOException
Infer the name of the module from its location, as returned by
getLocationForModule
or
listModuleLocations
.
Implementation Requirements:
This implementation throws
UnsupportedOperationException
.
Parameters:
location
- a package-oriented location representing a module
Returns:
the name of the module
Throws:
IOException
- if an I/O error occurred
UnsupportedOperationException
- if this operation is not supported by this file manager
IllegalArgumentException
- if the location is not one known to this file manager
Since:
9
listLocationsForModules
default
Iterable
<
Set
<
JavaFileManager.Location
>>
listLocationsForModules
(
JavaFileManager.Location
location)
throws
IOException
Lists the locations for all the modules in a module-oriented location or an output location.
 The locations that are returned will be output locations if the given location is an output,
 or it will be a package-oriented locations.
Implementation Requirements:
This implementation throws
UnsupportedOperationException
.
Parameters:
location
- the module-oriented location for which to list the modules
Returns:
a series of sets of locations containing modules
Throws:
IOException
- if an I/O error occurred
UnsupportedOperationException
- if this operation is not supported by this file manager
IllegalArgumentException
- if the location is not a module-oriented location
Since:
9
contains
default
boolean
contains
(
JavaFileManager.Location
location,
FileObject
fo)
throws
IOException
Determines whether or not a given file object is "contained in" a specified location.
For a package-oriented location, a file object is contained in the location if there exist
 values for
packageName
and
relativeName
such that either of the following
 calls would return the
same
file object:
Copy
getFileForInput(location,
packageName
,
relativeName
)
getFileForOutput(location,
packageName
,
relativeName
, null)
For a module-oriented location, a file object is contained in the location if there exists
 a module that may be obtained by the call:
Copy
getLocationForModule(location,
moduleName
)
such that the file object is contained in the (package-oriented) location for that module.
Implementation Requirements:
This implementation throws
UnsupportedOperationException
.
Parameters:
location
- the location
fo
- the file object
Returns:
whether or not the file is contained in the location
Throws:
IOException
- if there is a problem determining the result
UnsupportedOperationException
- if the method is not supported
Since:
9
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.