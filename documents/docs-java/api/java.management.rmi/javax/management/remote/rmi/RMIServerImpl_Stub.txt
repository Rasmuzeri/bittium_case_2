RMIServerImpl_Stub (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field
|
Constr
|
Method
Detail:
Field |
Constr
|
Method
SEARCH
Module
java.management.rmi
Package
javax.management.remote.rmi
Class RMIServerImpl_Stub
java.lang.Object
java.rmi.server.RemoteObject
java.rmi.server.RemoteStub
javax.management.remote.rmi.RMIServerImpl_Stub
All Implemented Interfaces:
Serializable
,
Remote
,
RMIServer
public final class
RMIServerImpl_Stub
extends
RemoteStub
implements
RMIServer
RMIServerImpl remote stub.
See Also:
Serialized Form
Field Summary
Fields declared in class java.rmi.server.
RemoteObject
ref
Constructor Summary
Constructors
Constructor
Description
RMIServerImpl_Stub
(
RemoteRef
ref)
Constructor.
Method Summary
All Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
String
getVersion
()
The version of the RMI Connector Protocol understood by this
 connector server.
RMIConnection
newClient
(
Object
$param_Object_1)
Makes a new connection through this RMI connector.
Methods declared in class java.rmi.server.
RemoteStub
setRef
Methods declared in class java.rmi.server.
RemoteObject
equals
,
getRef
,
hashCode
,
toString
,
toStub
Methods declared in class java.lang.
Object
clone
,
finalize
,
getClass
,
notify
,
notifyAll
,
wait
,
wait
,
wait
Constructor Details
RMIServerImpl_Stub
public
RMIServerImpl_Stub
(
RemoteRef
ref)
Constructor.
Parameters:
ref
- a remote ref
Method Details
getVersion
public
String
getVersion
()
                  throws
RemoteException
Description copied from interface:
RMIServer
The version of the RMI Connector Protocol understood by this
 connector server.  This is a string with the following format:
protocol-version
implementation-name
The
protocol-version
is a series of
 two or more non-negative integers separated by periods
 (
.
).  An implementation of the version described
 by this documentation must use the string
1.0
here.
After the protocol version there must be a space, followed
 by the implementation name.  The format of the implementation
 name is unspecified.  It is recommended that it include an
 implementation version number.  An implementation can use an
 empty string as its implementation name, for example for
 security reasons.
Specified by:
getVersion
in interface
RMIServer
Returns:
a string with the format described here.
Throws:
RemoteException
- if there is a communication
 exception during the remote method call.
newClient
public
RMIConnection
newClient
(
Object
$param_Object_1)
throws
IOException
Description copied from interface:
RMIServer
Makes a new connection through this RMI connector.  Each
 remote client calls this method to obtain a new RMI object
 representing its connection.
Specified by:
newClient
in interface
RMIServer
Parameters:
$param_Object_1
- this object specifies the user-defined credentials
 to be passed in to the server in order to authenticate the user before
 creating the
RMIConnection
.  Can be null.
Returns:
the newly-created connection object.
Throws:
IOException
- if the new client object cannot be
 created or exported, or if there is a communication exception
 during the remote method call.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.