RMIConnectionImpl_Stub (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field
|
Constr
|
Method
Detail:
Field |
Constr
|
Method
SEARCH
Module
java.management.rmi
Package
javax.management.remote.rmi
Class RMIConnectionImpl_Stub
java.lang.Object
java.rmi.server.RemoteObject
java.rmi.server.RemoteStub
javax.management.remote.rmi.RMIConnectionImpl_Stub
All Implemented Interfaces:
Closeable
,
Serializable
,
AutoCloseable
,
Remote
,
RMIConnection
public final class
RMIConnectionImpl_Stub
extends
RemoteStub
implements
RMIConnection
RMIConnectionImpl remote stub.
See Also:
Serialized Form
Field Summary
Fields declared in class java.rmi.server.
RemoteObject
ref
Constructor Summary
Constructors
Constructor
Description
RMIConnectionImpl_Stub
(
RemoteRef
ref)
Constructor.
Method Summary
All Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
void
addNotificationListener
(
ObjectName
$param_ObjectName_1,
ObjectName
$param_ObjectName_2,
MarshalledObject
$param_MarshalledObject_3,
MarshalledObject
$param_MarshalledObject_4,
Subject
$param_Subject_5)
Handles the method
MBeanServerConnection.addNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)
.
Integer
[]
addNotificationListeners
(
ObjectName
[] $param_arrayOf_ObjectName_1,
MarshalledObject
[] $param_arrayOf_MarshalledObject_2,
Subject
[] $param_arrayOf_Subject_3)
Handles the method
MBeanServerConnection.addNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)
.
void
close
()
Closes this connection.
ObjectInstance
createMBean
(
String
$param_String_1,
ObjectName
$param_ObjectName_2,
MarshalledObject
$param_MarshalledObject_3,
String
[] $param_arrayOf_String_4,
Subject
$param_Subject_5)
Handles the method
MBeanServerConnection.createMBean(String, ObjectName, Object[], String[])
.
ObjectInstance
createMBean
(
String
$param_String_1,
ObjectName
$param_ObjectName_2,
ObjectName
$param_ObjectName_3,
MarshalledObject
$param_MarshalledObject_4,
String
[] $param_arrayOf_String_5,
Subject
$param_Subject_6)
Handles the method
MBeanServerConnection.createMBean(String, ObjectName, ObjectName, Object[], String[])
.
ObjectInstance
createMBean
(
String
$param_String_1,
ObjectName
$param_ObjectName_2,
ObjectName
$param_ObjectName_3,
Subject
$param_Subject_4)
Handles the method
MBeanServerConnection.createMBean(String, ObjectName, ObjectName)
.
ObjectInstance
createMBean
(
String
$param_String_1,
ObjectName
$param_ObjectName_2,
Subject
$param_Subject_3)
Handles the method
MBeanServerConnection.createMBean(String, ObjectName)
.
NotificationResult
fetchNotifications
(long $param_long_1,
 int $param_int_2,
 long $param_long_3)
Retrieves notifications from the connector server.
Object
getAttribute
(
ObjectName
$param_ObjectName_1,
String
$param_String_2,
Subject
$param_Subject_3)
Handles the method
MBeanServerConnection.getAttribute(ObjectName, String)
.
AttributeList
getAttributes
(
ObjectName
$param_ObjectName_1,
String
[] $param_arrayOf_String_2,
Subject
$param_Subject_3)
Handles the method
MBeanServerConnection.getAttributes(ObjectName, String[])
.
String
getConnectionId
()
Returns the connection ID.
String
getDefaultDomain
(
Subject
$param_Subject_1)
Handles the method
MBeanServerConnection.getDefaultDomain()
.
String
[]
getDomains
(
Subject
$param_Subject_1)
Handles the method
MBeanServerConnection.getDomains()
.
Integer
getMBeanCount
(
Subject
$param_Subject_1)
Handles the method
MBeanServerConnection.getMBeanCount()
.
MBeanInfo
getMBeanInfo
(
ObjectName
$param_ObjectName_1,
Subject
$param_Subject_2)
Handles the method
MBeanServerConnection.getMBeanInfo(ObjectName)
.
ObjectInstance
getObjectInstance
(
ObjectName
$param_ObjectName_1,
Subject
$param_Subject_2)
Handles the method
MBeanServerConnection.getObjectInstance(ObjectName)
.
Object
invoke
(
ObjectName
$param_ObjectName_1,
String
$param_String_2,
MarshalledObject
$param_MarshalledObject_3,
String
[] $param_arrayOf_String_4,
Subject
$param_Subject_5)
Handles the method
MBeanServerConnection.invoke(ObjectName, String, Object[], String[])
.
boolean
isInstanceOf
(
ObjectName
$param_ObjectName_1,
String
$param_String_2,
Subject
$param_Subject_3)
Handles the method
MBeanServerConnection.isInstanceOf(ObjectName, String)
.
boolean
isRegistered
(
ObjectName
$param_ObjectName_1,
Subject
$param_Subject_2)
Handles the method
MBeanServerConnection.isRegistered(ObjectName)
.
Set
queryMBeans
(
ObjectName
$param_ObjectName_1,
MarshalledObject
$param_MarshalledObject_2,
Subject
$param_Subject_3)
Handles the method
MBeanServerConnection.queryMBeans(ObjectName, QueryExp)
.
Set
queryNames
(
ObjectName
$param_ObjectName_1,
MarshalledObject
$param_MarshalledObject_2,
Subject
$param_Subject_3)
Handles the method
MBeanServerConnection.queryNames(ObjectName, QueryExp)
.
void
removeNotificationListener
(
ObjectName
$param_ObjectName_1,
ObjectName
$param_ObjectName_2,
MarshalledObject
$param_MarshalledObject_3,
MarshalledObject
$param_MarshalledObject_4,
Subject
$param_Subject_5)
Handles the method
MBeanServerConnection.removeNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)
.
void
removeNotificationListener
(
ObjectName
$param_ObjectName_1,
ObjectName
$param_ObjectName_2,
Subject
$param_Subject_3)
Handles the method
MBeanServerConnection.removeNotificationListener(ObjectName, ObjectName)
.
void
removeNotificationListeners
(
ObjectName
$param_ObjectName_1,
Integer
[] $param_arrayOf_Integer_2,
Subject
$param_Subject_3)
Handles the
removeNotificationListener(ObjectName, NotificationListener)
and
removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)
methods.
void
setAttribute
(
ObjectName
$param_ObjectName_1,
MarshalledObject
$param_MarshalledObject_2,
Subject
$param_Subject_3)
Handles the method
MBeanServerConnection.setAttribute(ObjectName, Attribute)
.
AttributeList
setAttributes
(
ObjectName
$param_ObjectName_1,
MarshalledObject
$param_MarshalledObject_2,
Subject
$param_Subject_3)
Handles the method
MBeanServerConnection.setAttributes(ObjectName, AttributeList)
.
void
unregisterMBean
(
ObjectName
$param_ObjectName_1,
Subject
$param_Subject_2)
Handles the method
MBeanServerConnection.unregisterMBean(ObjectName)
.
Methods declared in class java.rmi.server.
RemoteStub
setRef
Methods declared in class java.rmi.server.
RemoteObject
equals
,
getRef
,
hashCode
,
toString
,
toStub
Methods declared in class java.lang.
Object
clone
,
finalize
,
getClass
,
notify
,
notifyAll
,
wait
,
wait
,
wait
Constructor Details
RMIConnectionImpl_Stub
public
RMIConnectionImpl_Stub
(
RemoteRef
ref)
Constructor.
Parameters:
ref
- a remote ref
Method Details
addNotificationListener
public
void
addNotificationListener
(
ObjectName
$param_ObjectName_1,
ObjectName
$param_ObjectName_2,
MarshalledObject
$param_MarshalledObject_3,
MarshalledObject
$param_MarshalledObject_4,
Subject
$param_Subject_5)
throws
IOException
,
InstanceNotFoundException
Description copied from interface:
RMIConnection
Handles the method
MBeanServerConnection.addNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)
.  The
NotificationFilter
parameter is wrapped in a
MarshalledObject
.  The
Object
(handback) parameter is also wrapped in a
MarshalledObject
.
Specified by:
addNotificationListener
in interface
RMIConnection
Parameters:
$param_ObjectName_1
- The name of the MBean on which the listener should
 be added.
$param_ObjectName_2
- The object name of the listener which will
 handle the notifications emitted by the registered MBean.
$param_MarshalledObject_3
- The filter object, encapsulated into a
MarshalledObject
. If filter encapsulated in the
MarshalledObject
has a null value, no filtering
 will be performed before handling notifications.
$param_MarshalledObject_4
- The context to be sent to the listener when a
 notification is emitted, encapsulated into a
MarshalledObject
.
$param_Subject_5
- The
Subject
containing the
 delegation principals or
null
if the authentication
 principal is used instead.
Throws:
IOException
- if a general communication exception occurred.
InstanceNotFoundException
- The MBean name of the
 notification listener or of the notification broadcaster does
 not match any of the registered MBeans.
See Also:
RMIConnection.removeNotificationListener(ObjectName, ObjectName, Subject)
RMIConnection.removeNotificationListener(ObjectName, ObjectName, MarshalledObject, MarshalledObject, Subject)
addNotificationListeners
public
Integer
[]
addNotificationListeners
(
ObjectName
[] $param_arrayOf_ObjectName_1,
MarshalledObject
[] $param_arrayOf_MarshalledObject_2,
Subject
[] $param_arrayOf_Subject_3)
throws
IOException
,
InstanceNotFoundException
Description copied from interface:
RMIConnection
Handles the method
MBeanServerConnection.addNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)
.
Register for notifications from the given MBeans that match
 the given filters.  The remote client can subsequently retrieve
 the notifications using the
fetchNotifications
method.
For each listener, the original
NotificationListener
and
handback
are
 kept on the client side; in order for the client to be able to
 identify them, the server generates and returns a unique
listenerID
.  This
listenerID
is
 forwarded with the
Notifications
to the remote
 client.
If any one of the given (name, filter) pairs cannot be
 registered, then the operation fails with an exception, and no
 names or filters are registered.
Specified by:
addNotificationListeners
in interface
RMIConnection
Parameters:
$param_arrayOf_ObjectName_1
- the
ObjectNames
identifying the
 MBeans emitting the Notifications.
$param_arrayOf_MarshalledObject_2
- an array of marshalled representations of the
NotificationFilters
.  Elements of this array can
 be null.
$param_arrayOf_Subject_3
- the
Subjects
on behalf
 of which the listeners are being added.  Elements of this array
 can be null.  Also, the
delegationSubjects
parameter itself can be null, which is equivalent to an array
 of null values with the same size as the
names
and
filters
arrays.
Returns:
an array of
listenerIDs
identifying the
 local listeners.  This array has the same number of elements as
 the parameters.
Throws:
IOException
- if a general communication exception occurred.
InstanceNotFoundException
- if one of the
names
does not correspond to any registered MBean.
close
public
void
close
()
           throws
IOException
Description copied from interface:
RMIConnection
Closes this connection.  On return from this method, the RMI
 object implementing this interface is unexported, so further
 remote calls to it will fail.
Specified by:
close
in interface
AutoCloseable
Specified by:
close
in interface
Closeable
Specified by:
close
in interface
RMIConnection
Throws:
IOException
- if the connection could not be closed,
 or the Remote object could not be unexported, or there was a
 communication failure when transmitting the remote close
 request.
createMBean
public
ObjectInstance
createMBean
(
String
$param_String_1,
ObjectName
$param_ObjectName_2,
MarshalledObject
$param_MarshalledObject_3,
String
[] $param_arrayOf_String_4,
Subject
$param_Subject_5)
throws
IOException
,
InstanceAlreadyExistsException
,
MBeanException
,
MBeanRegistrationException
,
NotCompliantMBeanException
,
ReflectionException
Description copied from interface:
RMIConnection
Handles the method
MBeanServerConnection.createMBean(String, ObjectName, Object[], String[])
.  The
Object[]
parameter is wrapped in a
MarshalledObject
.
Specified by:
createMBean
in interface
RMIConnection
Parameters:
$param_String_1
- The class name of the MBean to be instantiated.
$param_ObjectName_2
- The object name of the MBean. May be null.
$param_MarshalledObject_3
- An array containing the parameters of the
 constructor to be invoked, encapsulated into a
MarshalledObject
.  The encapsulated array can be
 null, equivalent to an empty array.
$param_arrayOf_String_4
- An array containing the signature of the
 constructor to be invoked.  Can be null, equivalent to an empty
 array.
$param_Subject_5
- The
Subject
containing the
 delegation principals or
null
if the authentication
 principal is used instead.
Returns:
An
ObjectInstance
, containing the
ObjectName
and the Java class name of the newly
 instantiated MBean.  If the contained
ObjectName
is
n
, the contained Java class name is
getMBeanInfo(n)
.getClassName()
.
Throws:
IOException
- if a general communication exception occurred.
InstanceAlreadyExistsException
- The MBean is already
 under the control of the MBean server.
MBeanException
- The constructor of the MBean has
 thrown an exception.
MBeanRegistrationException
- The
preRegister
(
MBeanRegistration
interface) method of the MBean has thrown an exception. The
 MBean will not be registered.
NotCompliantMBeanException
- This class is not a JMX
 compliant MBean.
ReflectionException
- Wraps a
java.lang.ClassNotFoundException
or a
java.lang.Exception
that occurred when trying to
 invoke the MBean's constructor.
createMBean
public
ObjectInstance
createMBean
(
String
$param_String_1,
ObjectName
$param_ObjectName_2,
ObjectName
$param_ObjectName_3,
MarshalledObject
$param_MarshalledObject_4,
String
[] $param_arrayOf_String_5,
Subject
$param_Subject_6)
throws
IOException
,
InstanceAlreadyExistsException
,
InstanceNotFoundException
,
MBeanException
,
MBeanRegistrationException
,
NotCompliantMBeanException
,
ReflectionException
Description copied from interface:
RMIConnection
Handles the method
MBeanServerConnection.createMBean(String, ObjectName, ObjectName, Object[], String[])
.  The
Object[]
parameter is wrapped in a
MarshalledObject
.
Specified by:
createMBean
in interface
RMIConnection
Parameters:
$param_String_1
- The class name of the MBean to be instantiated.
$param_ObjectName_2
- The object name of the MBean. May be null.
$param_ObjectName_3
- The object name of the class loader to be used.
$param_MarshalledObject_4
- An array containing the parameters of the
 constructor to be invoked, encapsulated into a
MarshalledObject
.  The encapsulated array can be
 null, equivalent to an empty array.
$param_arrayOf_String_5
- An array containing the signature of the
 constructor to be invoked.  Can be null, equivalent to an empty
 array.
$param_Subject_6
- The
Subject
containing the
 delegation principals or
null
if the authentication
 principal is used instead.
Returns:
An
ObjectInstance
, containing the
ObjectName
and the Java class name of the newly
 instantiated MBean.  If the contained
ObjectName
is
n
, the contained Java class name is
getMBeanInfo(n)
.getClassName()
.
Throws:
IOException
- if a general communication exception occurred.
InstanceAlreadyExistsException
- The MBean is already
 under the control of the MBean server.
InstanceNotFoundException
- The specified class loader
 is not registered in the MBean server.
MBeanException
- The constructor of the MBean has
 thrown an exception.
MBeanRegistrationException
- The
preRegister
(
MBeanRegistration
interface) method of the MBean has thrown an exception. The
 MBean will not be registered.
NotCompliantMBeanException
- This class is not a JMX
 compliant MBean.
ReflectionException
- Wraps a
java.lang.ClassNotFoundException
or a
java.lang.Exception
that occurred when trying to
 invoke the MBean's constructor.
createMBean
public
ObjectInstance
createMBean
(
String
$param_String_1,
ObjectName
$param_ObjectName_2,
ObjectName
$param_ObjectName_3,
Subject
$param_Subject_4)
throws
IOException
,
InstanceAlreadyExistsException
,
InstanceNotFoundException
,
MBeanException
,
MBeanRegistrationException
,
NotCompliantMBeanException
,
ReflectionException
Description copied from interface:
RMIConnection
Handles the method
MBeanServerConnection.createMBean(String, ObjectName, ObjectName)
.
Specified by:
createMBean
in interface
RMIConnection
Parameters:
$param_String_1
- The class name of the MBean to be instantiated.
$param_ObjectName_2
- The object name of the MBean. May be null.
$param_ObjectName_3
- The object name of the class loader to be used.
$param_Subject_4
- The
Subject
containing the
 delegation principals or
null
if the authentication
 principal is used instead.
Returns:
An
ObjectInstance
, containing the
ObjectName
and the Java class name of the newly
 instantiated MBean.  If the contained
ObjectName
is
n
, the contained Java class name is
getMBeanInfo(n)
.getClassName()
.
Throws:
IOException
- if a general communication exception occurred.
InstanceAlreadyExistsException
- The MBean is already
 under the control of the MBean server.
InstanceNotFoundException
- The specified class loader
 is not registered in the MBean server.
MBeanException
- The constructor of the MBean has
 thrown an exception.
MBeanRegistrationException
- The
preRegister
(
MBeanRegistration
interface) method of the MBean has thrown an exception. The
 MBean will not be registered.
NotCompliantMBeanException
- This class is not a JMX
 compliant MBean.
ReflectionException
- Wraps a
java.lang.ClassNotFoundException
or a
java.lang.Exception
that occurred when trying to
 invoke the MBean's constructor.
createMBean
public
ObjectInstance
createMBean
(
String
$param_String_1,
ObjectName
$param_ObjectName_2,
Subject
$param_Subject_3)
throws
IOException
,
InstanceAlreadyExistsException
,
MBeanException
,
MBeanRegistrationException
,
NotCompliantMBeanException
,
ReflectionException
Description copied from interface:
RMIConnection
Handles the method
MBeanServerConnection.createMBean(String, ObjectName)
.
Specified by:
createMBean
in interface
RMIConnection
Parameters:
$param_String_1
- The class name of the MBean to be instantiated.
$param_ObjectName_2
- The object name of the MBean. May be null.
$param_Subject_3
- The
Subject
containing the
 delegation principals or
null
if the authentication
 principal is used instead.
Returns:
An
ObjectInstance
, containing the
ObjectName
and the Java class name of the newly
 instantiated MBean.  If the contained
ObjectName
is
n
, the contained Java class name is
getMBeanInfo(n)
.getClassName()
.
Throws:
IOException
- if a general communication exception occurred.
InstanceAlreadyExistsException
- The MBean is already
 under the control of the MBean server.
MBeanException
- The constructor of the MBean has
 thrown an exception.
MBeanRegistrationException
- The
preRegister
(
MBeanRegistration
interface) method of the MBean has thrown an exception. The
 MBean will not be registered.
NotCompliantMBeanException
- This class is not a JMX
 compliant MBean.
ReflectionException
- Wraps a
java.lang.ClassNotFoundException
or a
java.lang.Exception
that occurred
 when trying to invoke the MBean's constructor.
fetchNotifications
public
NotificationResult
fetchNotifications
(long $param_long_1,
 int $param_int_2,
 long $param_long_3)
throws
IOException
Description copied from interface:
RMIConnection
Retrieves notifications from the connector server.  This
 method can block until there is at least one notification or
 until the specified timeout is reached.  The method can also
 return at any time with zero notifications.
A notification can be included in the result if its sequence
 number is no less than
clientSequenceNumber
and
 this client has registered at least one listener for the MBean
 generating the notification, with a filter that accepts the
 notification.  Each listener that is interested in the
 notification is identified by an Integer ID that was returned
 by
RMIConnection.addNotificationListeners(ObjectName[], MarshalledObject[], Subject[])
.
Specified by:
fetchNotifications
in interface
RMIConnection
Parameters:
$param_long_1
- the first sequence number that the
 client is interested in.  If negative, it is interpreted as
 meaning the sequence number that the next notification will
 have.
$param_int_2
- the maximum number of different
 notifications to return.  The
TargetedNotification
array in the returned
NotificationResult
can have
 more elements than this if the same notification appears more
 than once.  The behavior is unspecified if this parameter is
 negative.
$param_long_3
- the maximum time in milliseconds to wait for a
 notification to arrive.  This can be 0 to indicate that the
 method should not wait if there are no notifications, but
 should return at once.  It can be
Long.MAX_VALUE
to indicate that there is no timeout.  The behavior is
 unspecified if this parameter is negative.
Returns:
A
NotificationResult
.
Throws:
IOException
- if a general communication exception occurred.
getAttribute
public
Object
getAttribute
(
ObjectName
$param_ObjectName_1,
String
$param_String_2,
Subject
$param_Subject_3)
throws
IOException
,
AttributeNotFoundException
,
InstanceNotFoundException
,
MBeanException
,
ReflectionException
Description copied from interface:
RMIConnection
Handles the method
MBeanServerConnection.getAttribute(ObjectName, String)
.
Specified by:
getAttribute
in interface
RMIConnection
Parameters:
$param_ObjectName_1
- The object name of the MBean from which the
 attribute is to be retrieved.
$param_String_2
- A String specifying the name of the attribute
 to be retrieved.
$param_Subject_3
- The
Subject
containing the
 delegation principals or
null
if the authentication
 principal is used instead.
Returns:
The value of the retrieved attribute.
Throws:
IOException
- if a general communication exception occurred.
AttributeNotFoundException
- The attribute specified
 is not accessible in the MBean.
InstanceNotFoundException
- The MBean specified is not
 registered in the MBean server.
MBeanException
- Wraps an exception thrown by the
 MBean's getter.
ReflectionException
- Wraps a
java.lang.Exception
thrown when trying to invoke
 the getter.
See Also:
RMIConnection.setAttribute(javax.management.ObjectName, java.rmi.MarshalledObject, javax.security.auth.Subject)
getAttributes
public
AttributeList
getAttributes
(
ObjectName
$param_ObjectName_1,
String
[] $param_arrayOf_String_2,
Subject
$param_Subject_3)
throws
IOException
,
InstanceNotFoundException
,
ReflectionException
Description copied from interface:
RMIConnection
Handles the method
MBeanServerConnection.getAttributes(ObjectName, String[])
.
Specified by:
getAttributes
in interface
RMIConnection
Parameters:
$param_ObjectName_1
- The object name of the MBean from which the
 attributes are retrieved.
$param_arrayOf_String_2
- A list of the attributes to be retrieved.
$param_Subject_3
- The
Subject
containing the
 delegation principals or
null
if the authentication
 principal is used instead.
Returns:
The list of the retrieved attributes.
Throws:
IOException
- if a general communication exception occurred.
InstanceNotFoundException
- The MBean specified is not
 registered in the MBean server.
ReflectionException
- An exception occurred when
 trying to invoke the getAttributes method of a Dynamic MBean.
See Also:
RMIConnection.setAttributes(javax.management.ObjectName, java.rmi.MarshalledObject, javax.security.auth.Subject)
getConnectionId
public
String
getConnectionId
()
                       throws
IOException
Description copied from interface:
RMIConnection
Returns the connection ID.  This string is different for
 every open connection to a given RMI connector server.
Specified by:
getConnectionId
in interface
RMIConnection
Returns:
the connection ID
Throws:
IOException
- if a general communication exception occurred.
See Also:
RMIConnector.connect
getDefaultDomain
public
String
getDefaultDomain
(
Subject
$param_Subject_1)
throws
IOException
Description copied from interface:
RMIConnection
Handles the method
MBeanServerConnection.getDefaultDomain()
.
Specified by:
getDefaultDomain
in interface
RMIConnection
Parameters:
$param_Subject_1
- The
Subject
containing the
 delegation principals or
null
if the authentication
 principal is used instead.
Returns:
the default domain.
Throws:
IOException
- if a general communication exception occurred.
getDomains
public
String
[]
getDomains
(
Subject
$param_Subject_1)
throws
IOException
Description copied from interface:
RMIConnection
Handles the method
MBeanServerConnection.getDomains()
.
Specified by:
getDomains
in interface
RMIConnection
Parameters:
$param_Subject_1
- The
Subject
containing the
 delegation principals or
null
if the authentication
 principal is used instead.
Returns:
the list of domains.
Throws:
IOException
- if a general communication exception occurred.
getMBeanCount
public
Integer
getMBeanCount
(
Subject
$param_Subject_1)
throws
IOException
Description copied from interface:
RMIConnection
Handles the method
MBeanServerConnection.getMBeanCount()
.
Specified by:
getMBeanCount
in interface
RMIConnection
Parameters:
$param_Subject_1
- The
Subject
containing the
 delegation principals or
null
if the authentication
 principal is used instead.
Returns:
the number of MBeans registered.
Throws:
IOException
- if a general communication exception occurred.
getMBeanInfo
public
MBeanInfo
getMBeanInfo
(
ObjectName
$param_ObjectName_1,
Subject
$param_Subject_2)
throws
IOException
,
InstanceNotFoundException
,
IntrospectionException
,
ReflectionException
Description copied from interface:
RMIConnection
Handles the method
MBeanServerConnection.getMBeanInfo(ObjectName)
.
Specified by:
getMBeanInfo
in interface
RMIConnection
Parameters:
$param_ObjectName_1
- The name of the MBean to analyze
$param_Subject_2
- The
Subject
containing the
 delegation principals or
null
if the authentication
 principal is used instead.
Returns:
An instance of
MBeanInfo
allowing the
 retrieval of all attributes and operations of this MBean.
Throws:
IOException
- if a general communication exception occurred.
InstanceNotFoundException
- The MBean specified was
 not found.
IntrospectionException
- An exception occurred during
 introspection.
ReflectionException
- An exception occurred when
 trying to invoke the getMBeanInfo of a Dynamic MBean.
getObjectInstance
public
ObjectInstance
getObjectInstance
(
ObjectName
$param_ObjectName_1,
Subject
$param_Subject_2)
throws
IOException
,
InstanceNotFoundException
Description copied from interface:
RMIConnection
Handles the method
MBeanServerConnection.getObjectInstance(ObjectName)
.
Specified by:
getObjectInstance
in interface
RMIConnection
Parameters:
$param_ObjectName_1
- The object name of the MBean.
$param_Subject_2
- The
Subject
containing the
 delegation principals or
null
if the authentication
 principal is used instead.
Returns:
The
ObjectInstance
associated with the MBean
 specified by
name
.  The contained
ObjectName
is
name
and the contained class name is
getMBeanInfo(name)
.getClassName()
.
Throws:
IOException
- if a general communication exception occurred.
InstanceNotFoundException
- The MBean specified is not
 registered in the MBean server.
invoke
public
Object
invoke
(
ObjectName
$param_ObjectName_1,
String
$param_String_2,
MarshalledObject
$param_MarshalledObject_3,
String
[] $param_arrayOf_String_4,
Subject
$param_Subject_5)
throws
IOException
,
InstanceNotFoundException
,
MBeanException
,
ReflectionException
Description copied from interface:
RMIConnection
Handles the method
MBeanServerConnection.invoke(ObjectName, String, Object[], String[])
.  The
Object[]
parameter is wrapped in a
MarshalledObject
.
Specified by:
invoke
in interface
RMIConnection
Parameters:
$param_ObjectName_1
- The object name of the MBean on which the method is
 to be invoked.
$param_String_2
- The name of the operation to be invoked.
$param_MarshalledObject_3
- An array containing the parameters to be set when
 the operation is invoked, encapsulated into a
MarshalledObject
.  The encapsulated array can be
 null, equivalent to an empty array.
$param_arrayOf_String_4
- An array containing the signature of the
 operation. The class objects will be loaded using the same
 class loader as the one used for loading the MBean on which the
 operation was invoked.  Can be null, equivalent to an empty
 array.
$param_Subject_5
- The
Subject
containing the
 delegation principals or
null
if the authentication
 principal is used instead.
Returns:
The object returned by the operation, which represents
 the result of invoking the operation on the MBean specified.
Throws:
IOException
- if a general communication exception occurred.
InstanceNotFoundException
- The MBean specified is not
 registered in the MBean server.
MBeanException
- Wraps an exception thrown by the
 MBean's invoked method.
ReflectionException
- Wraps a
java.lang.Exception
thrown while trying to invoke
 the method.
isInstanceOf
public
boolean
isInstanceOf
(
ObjectName
$param_ObjectName_1,
String
$param_String_2,
Subject
$param_Subject_3)
throws
IOException
,
InstanceNotFoundException
Description copied from interface:
RMIConnection
Handles the method
MBeanServerConnection.isInstanceOf(ObjectName, String)
.
Specified by:
isInstanceOf
in interface
RMIConnection
Parameters:
$param_ObjectName_1
- The
ObjectName
of the MBean.
$param_String_2
- The name of the class.
$param_Subject_3
- The
Subject
containing the
 delegation principals or
null
if the authentication
 principal is used instead.
Returns:
true if the MBean specified is an instance of the
 specified class according to the rules above, false otherwise.
Throws:
IOException
- if a general communication exception occurred.
InstanceNotFoundException
- The MBean specified is not
 registered in the MBean server.
isRegistered
public
boolean
isRegistered
(
ObjectName
$param_ObjectName_1,
Subject
$param_Subject_2)
throws
IOException
Description copied from interface:
RMIConnection
Handles the method
MBeanServerConnection.isRegistered(ObjectName)
.
Specified by:
isRegistered
in interface
RMIConnection
Parameters:
$param_ObjectName_1
- The object name of the MBean to be checked.
$param_Subject_2
- The
Subject
containing the
 delegation principals or
null
if the authentication
 principal is used instead.
Returns:
True if the MBean is already registered in the MBean
 server, false otherwise.
Throws:
IOException
- if a general communication exception occurred.
queryMBeans
public
Set
queryMBeans
(
ObjectName
$param_ObjectName_1,
MarshalledObject
$param_MarshalledObject_2,
Subject
$param_Subject_3)
throws
IOException
Description copied from interface:
RMIConnection
Handles the method
MBeanServerConnection.queryMBeans(ObjectName, QueryExp)
.  The
QueryExp
is wrapped in a
MarshalledObject
.
Specified by:
queryMBeans
in interface
RMIConnection
Parameters:
$param_ObjectName_1
- The object name pattern identifying the MBeans to
 be retrieved. If null or no domain and key properties are
 specified, all the MBeans registered will be retrieved.
$param_MarshalledObject_2
- The query expression to be applied for selecting
 MBeans, encapsulated into a
MarshalledObject
. If
 the
MarshalledObject
encapsulates a null value no
 query expression will be applied for selecting MBeans.
$param_Subject_3
- The
Subject
containing the
 delegation principals or
null
if the authentication
 principal is used instead.
Returns:
A set containing the
ObjectInstance
objects for the selected MBeans.  If no MBean satisfies the
 query an empty list is returned.
Throws:
IOException
- if a general communication exception occurred.
queryNames
public
Set
queryNames
(
ObjectName
$param_ObjectName_1,
MarshalledObject
$param_MarshalledObject_2,
Subject
$param_Subject_3)
throws
IOException
Description copied from interface:
RMIConnection
Handles the method
MBeanServerConnection.queryNames(ObjectName, QueryExp)
.  The
QueryExp
is wrapped in a
MarshalledObject
.
Specified by:
queryNames
in interface
RMIConnection
Parameters:
$param_ObjectName_1
- The object name pattern identifying the MBean names
 to be retrieved. If null or no domain and key properties are
 specified, the name of all registered MBeans will be retrieved.
$param_MarshalledObject_2
- The query expression to be applied for selecting
 MBeans, encapsulated into a
MarshalledObject
. If
 the
MarshalledObject
encapsulates a null value no
 query expression will be applied for selecting MBeans.
$param_Subject_3
- The
Subject
containing the
 delegation principals or
null
if the authentication
 principal is used instead.
Returns:
A set containing the ObjectNames for the MBeans
 selected.  If no MBean satisfies the query, an empty list is
 returned.
Throws:
IOException
- if a general communication exception occurred.
removeNotificationListener
public
void
removeNotificationListener
(
ObjectName
$param_ObjectName_1,
ObjectName
$param_ObjectName_2,
MarshalledObject
$param_MarshalledObject_3,
MarshalledObject
$param_MarshalledObject_4,
Subject
$param_Subject_5)
throws
IOException
,
InstanceNotFoundException
,
ListenerNotFoundException
Description copied from interface:
RMIConnection
Handles the method
MBeanServerConnection.removeNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)
.  The
NotificationFilter
parameter is wrapped in a
MarshalledObject
.  The
Object
parameter is also wrapped in a
MarshalledObject
.
Specified by:
removeNotificationListener
in interface
RMIConnection
Parameters:
$param_ObjectName_1
- The name of the MBean on which the listener should
 be removed.
$param_ObjectName_2
- A listener that was previously added to this
 MBean.
$param_MarshalledObject_3
- The filter that was specified when the listener
 was added, encapsulated into a
MarshalledObject
.
$param_MarshalledObject_4
- The handback that was specified when the
 listener was added, encapsulated into a
MarshalledObject
.
$param_Subject_5
- The
Subject
containing the
 delegation principals or
null
if the authentication
 principal is used instead.
Throws:
IOException
- if a general communication exception occurred.
InstanceNotFoundException
- The MBean name provided
 does not match any of the registered MBeans.
ListenerNotFoundException
- The listener is not
 registered in the MBean, or it is not registered with the given
 filter and handback.
See Also:
RMIConnection.addNotificationListener(javax.management.ObjectName, javax.management.ObjectName, java.rmi.MarshalledObject, java.rmi.MarshalledObject, javax.security.auth.Subject)
removeNotificationListener
public
void
removeNotificationListener
(
ObjectName
$param_ObjectName_1,
ObjectName
$param_ObjectName_2,
Subject
$param_Subject_3)
throws
IOException
,
InstanceNotFoundException
,
ListenerNotFoundException
Description copied from interface:
RMIConnection
Handles the method
MBeanServerConnection.removeNotificationListener(ObjectName, ObjectName)
.
Specified by:
removeNotificationListener
in interface
RMIConnection
Parameters:
$param_ObjectName_1
- The name of the MBean on which the listener should
 be removed.
$param_ObjectName_2
- The object name of the listener to be removed.
$param_Subject_3
- The
Subject
containing the
 delegation principals or
null
if the authentication
 principal is used instead.
Throws:
IOException
- if a general communication exception occurred.
InstanceNotFoundException
- The MBean name provided
 does not match any of the registered MBeans.
ListenerNotFoundException
- The listener is not
 registered in the MBean.
See Also:
RMIConnection.addNotificationListener(javax.management.ObjectName, javax.management.ObjectName, java.rmi.MarshalledObject, java.rmi.MarshalledObject, javax.security.auth.Subject)
removeNotificationListeners
public
void
removeNotificationListeners
(
ObjectName
$param_ObjectName_1,
Integer
[] $param_arrayOf_Integer_2,
Subject
$param_Subject_3)
throws
IOException
,
InstanceNotFoundException
,
ListenerNotFoundException
Description copied from interface:
RMIConnection
Handles the
removeNotificationListener(ObjectName, NotificationListener)
and
removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)
methods.
This method removes one or more
NotificationListener
s from a given MBean in the
 MBean server.
The
NotificationListeners
are identified by the
 IDs which were returned by the
RMIConnection.addNotificationListeners(ObjectName[], MarshalledObject[], Subject[])
method.
Specified by:
removeNotificationListeners
in interface
RMIConnection
Parameters:
$param_ObjectName_1
- the
ObjectName
identifying the MBean
 emitting the Notifications.
$param_arrayOf_Integer_2
- the list of the IDs corresponding to the
 listeners to remove.
$param_Subject_3
- The
Subject
containing the
 delegation principals or
null
if the authentication
 principal is used instead.
Throws:
IOException
- if a general communication exception occurred.
InstanceNotFoundException
- if the given
name
does not correspond to any registered MBean.
ListenerNotFoundException
- if one of the listeners was
 not found on the server side.  This exception can happen if the
 MBean discarded a listener for some reason other than a call to
MBeanServer.removeNotificationListener
.
setAttribute
public
void
setAttribute
(
ObjectName
$param_ObjectName_1,
MarshalledObject
$param_MarshalledObject_2,
Subject
$param_Subject_3)
throws
IOException
,
AttributeNotFoundException
,
InstanceNotFoundException
,
InvalidAttributeValueException
,
MBeanException
,
ReflectionException
Description copied from interface:
RMIConnection
Handles the method
MBeanServerConnection.setAttribute(ObjectName, Attribute)
.  The
Attribute
parameter is wrapped
 in a
MarshalledObject
.
Specified by:
setAttribute
in interface
RMIConnection
Parameters:
$param_ObjectName_1
- The name of the MBean within which the attribute is
 to be set.
$param_MarshalledObject_2
- The identification of the attribute to be set
 and the value it is to be set to, encapsulated into a
MarshalledObject
.
$param_Subject_3
- The
Subject
containing the
 delegation principals or
null
if the authentication
 principal is used instead.
Throws:
IOException
- if a general communication exception occurred.
AttributeNotFoundException
- The attribute specified
 is not accessible in the MBean.
InstanceNotFoundException
- The MBean specified is not
 registered in the MBean server.
InvalidAttributeValueException
- The value specified
 for the attribute is not valid.
MBeanException
- Wraps an exception thrown by the
 MBean's setter.
ReflectionException
- Wraps a
java.lang.Exception
thrown when trying to invoke
 the setter.
See Also:
RMIConnection.getAttribute(javax.management.ObjectName, java.lang.String, javax.security.auth.Subject)
setAttributes
public
AttributeList
setAttributes
(
ObjectName
$param_ObjectName_1,
MarshalledObject
$param_MarshalledObject_2,
Subject
$param_Subject_3)
throws
IOException
,
InstanceNotFoundException
,
ReflectionException
Description copied from interface:
RMIConnection
Handles the method
MBeanServerConnection.setAttributes(ObjectName, AttributeList)
.  The
AttributeList
parameter is
 wrapped in a
MarshalledObject
.
Specified by:
setAttributes
in interface
RMIConnection
Parameters:
$param_ObjectName_1
- The object name of the MBean within which the
 attributes are to be set.
$param_MarshalledObject_2
- A list of attributes: The identification of
 the attributes to be set and the values they are to be set to,
 encapsulated into a
MarshalledObject
.
$param_Subject_3
- The
Subject
containing the
 delegation principals or
null
if the authentication
 principal is used instead.
Returns:
The list of attributes that were set, with their new
 values.
Throws:
IOException
- if a general communication exception occurred.
InstanceNotFoundException
- The MBean specified is not
 registered in the MBean server.
ReflectionException
- An exception occurred when
 trying to invoke the getAttributes method of a Dynamic MBean.
See Also:
RMIConnection.getAttributes(javax.management.ObjectName, java.lang.String[], javax.security.auth.Subject)
unregisterMBean
public
void
unregisterMBean
(
ObjectName
$param_ObjectName_1,
Subject
$param_Subject_2)
throws
IOException
,
InstanceNotFoundException
,
MBeanRegistrationException
Description copied from interface:
RMIConnection
Handles the method
MBeanServerConnection.unregisterMBean(ObjectName)
.
Specified by:
unregisterMBean
in interface
RMIConnection
Parameters:
$param_ObjectName_1
- The object name of the MBean to be unregistered.
$param_Subject_2
- The
Subject
containing the
 delegation principals or
null
if the authentication
 principal is used instead.
Throws:
IOException
- if a general communication exception occurred.
InstanceNotFoundException
- The MBean specified is not
 registered in the MBean server.
MBeanRegistrationException
- The preDeregister
 (
MBeanRegistration
interface) method of the MBean
 has thrown an exception.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.