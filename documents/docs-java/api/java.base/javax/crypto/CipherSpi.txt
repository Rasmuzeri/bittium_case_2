CipherSpi (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr
|
Method
Detail:
Field |
Constr
|
Method
SEARCH
Module
java.base
Package
javax.crypto
Class CipherSpi
java.lang.Object
javax.crypto.CipherSpi
public abstract class
CipherSpi
extends
Object
This class defines the
Service Provider Interface
(
SPI
)
 for the
Cipher
class.
 All the abstract methods in this class must be implemented by each
 cryptographic service provider who wishes to supply the implementation
 of a particular cipher algorithm.
In order to create an instance of
Cipher
, which
 encapsulates an instance of this
CipherSpi
class, an
 application calls one of the
getInstance
factory methods of the
Cipher
engine class and specifies the requested
transformation
.
 Optionally, the application may also specify the name of a provider.
A
transformation
is a string that describes the operation (or
 set of operations) to be performed on the given input, to produce some
 output. A transformation always includes the name of a cryptographic
 algorithm (e.g.,
AES
), and may be followed by a feedback mode and
 padding scheme.
A transformation is of the form:
"
algorithm/mode/padding
" or
"
algorithm
"
(in the latter case,
 provider-specific default values for the mode and padding scheme are used).
 For example, the following is a valid transformation:
Cipher c = Cipher.getInstance("
AES/CBC/PKCS5Padding
");
A provider may supply a separate class for each combination
 of
algorithm/mode/padding
, or may decide to provide more generic
 classes representing sub-transformations corresponding to
algorithm
or
algorithm/mode
or
algorithm//padding
(note the double slashes),
 in which case the requested mode and/or padding are set automatically by
 the
getInstance
methods of
Cipher
, which invoke
 the
engineSetMode
and
engineSetPadding
methods of the provider's subclass of
CipherSpi
.
A
Cipher
property in a provider master class may have one of
 the following formats:
// provider's subclass of "CipherSpi" implements "algName" with
     // pluggable mode and padding
Cipher.
algName
// provider's subclass of "CipherSpi" implements "algName" in the
     // specified "mode", with pluggable padding
Cipher.
algName/mode
// provider's subclass of "CipherSpi" implements "algName" with the
     // specified "padding", with pluggable mode
Cipher.
algName//padding
// provider's subclass of "CipherSpi" implements "algName" with the
     // specified "mode" and "padding"
Cipher.
algName/mode/padding
For example, a provider may supply a subclass of
CipherSpi
that implements
AES/ECB/PKCS5Padding
, one that implements
AES/CBC/PKCS5Padding
, one that implements
AES/CFB/PKCS5Padding
, and yet another one that implements
AES/OFB/PKCS5Padding
. That provider would have the following
Cipher
properties in its master class:
Cipher.
AES/ECB/PKCS5Padding
Cipher.
AES/CBC/PKCS5Padding
Cipher.
AES/CFB/PKCS5Padding
Cipher.
AES/OFB/PKCS5Padding
Another provider may implement a class for each of the above modes
 (i.e., one class for
ECB
, one for
CBC
, one for
CFB
,
 and one for
OFB
), one class for
PKCS5Padding
,
 and a generic
AES
class that subclasses from
CipherSpi
.
 That provider would have the following
Cipher
properties in its master class:
Cipher.
AES
The
getInstance
factory method of the
Cipher
engine class follows these rules in order to instantiate a provider's
 implementation of
CipherSpi
for a
 transformation of the form "
algorithm
":
Check if the provider has registered a subclass of
CipherSpi
for the specified "
algorithm
".
If the answer is YES, instantiate this
 class, for whose mode and padding scheme default values (as supplied by
 the provider) are used.
If the answer is NO, throw a
NoSuchAlgorithmException
exception.
The
getInstance
factory method of the
Cipher
engine class follows these rules in order to instantiate a provider's
 implementation of
CipherSpi
for a
 transformation of the form "
algorithm/mode/padding
":
Check if the provider has registered a subclass of
CipherSpi
for the specified "
algorithm/mode/padding
" transformation.
If the answer is YES, instantiate it.
If the answer is NO, go to the next step.
Check if the provider has registered a subclass of
CipherSpi
for the sub-transformation "
algorithm/mode
".
If the answer is YES, instantiate it, and call
engineSetPadding(<i>padding</i>)
on the new instance.
If the answer is NO, go to the next step.
Check if the provider has registered a subclass of
CipherSpi
for the sub-transformation "
algorithm//padding
" (note the double
 slashes).
If the answer is YES, instantiate it, and call
engineSetMode(<i>mode</i>)
on the new instance.
If the answer is NO, go to the next step.
Check if the provider has registered a subclass of
CipherSpi
for the sub-transformation "
algorithm
".
If the answer is YES, instantiate it, and call
engineSetMode(<i>mode</i>)
and
engineSetPadding(<i>padding</i>)
on the new instance.
If the answer is NO, throw a
NoSuchAlgorithmException
exception.
Since:
1.4
See Also:
KeyGenerator
SecretKey
Constructor Summary
Constructors
Constructor
Description
CipherSpi
()
Constructor for subclasses to call.
Method Summary
All Methods
Instance Methods
Abstract Methods
Concrete Methods
Modifier and Type
Method
Description
protected abstract byte[]
engineDoFinal
(byte[] input,
 int inputOffset,
 int inputLen)
Encrypts or decrypts data in a single-part operation,
 or finishes a multiple-part operation.
protected abstract int
engineDoFinal
(byte[] input,
 int inputOffset,
 int inputLen,
 byte[] output,
 int outputOffset)
Encrypts or decrypts data in a single-part operation,
 or finishes a multiple-part operation.
protected int
engineDoFinal
(
ByteBuffer
input,
ByteBuffer
output)
Encrypts or decrypts data in a single-part operation,
 or finishes a multiple-part operation.
protected abstract int
engineGetBlockSize
()
Returns the block size (in bytes).
protected abstract byte[]
engineGetIV
()
Returns the initialization vector (IV) in a new buffer.
protected int
engineGetKeySize
(
Key
key)
Returns the key size of the given key object in bits.
protected abstract int
engineGetOutputSize
(int inputLen)
Returns the length in bytes that an output buffer would
 need to be in order to hold the result of the next
update
or
doFinal
operation, given the input length
inputLen
(in bytes).
protected abstract
AlgorithmParameters
engineGetParameters
()
Returns the parameters used with this cipher.
protected abstract void
engineInit
(int opmode,
Key
key,
AlgorithmParameters
params,
SecureRandom
random)
Initializes this
CipherSpi
object with a key, a set of
 algorithm parameters, and a source of randomness.
protected abstract void
engineInit
(int opmode,
Key
key,
SecureRandom
random)
Initializes this
CipherSpi
object with a key and a source
 of randomness.
protected abstract void
engineInit
(int opmode,
Key
key,
AlgorithmParameterSpec
params,
SecureRandom
random)
Initializes this
CipherSpi
object with a key, a set of
 algorithm parameters, and a source of randomness.
protected abstract void
engineSetMode
(
String
mode)
Sets the mode of this cipher.
protected abstract void
engineSetPadding
(
String
padding)
Sets the padding mechanism of this cipher.
protected
Key
engineUnwrap
(byte[] wrappedKey,
String
wrappedKeyAlgorithm,
 int wrappedKeyType)
Unwrap a previously wrapped key.
protected abstract byte[]
engineUpdate
(byte[] input,
 int inputOffset,
 int inputLen)
Continues a multiple-part encryption or decryption operation
 (depending on how this
CipherSpi
object was initialized),
 processing another data part.
protected abstract int
engineUpdate
(byte[] input,
 int inputOffset,
 int inputLen,
 byte[] output,
 int outputOffset)
Continues a multiple-part encryption or decryption operation
 (depending on how this
CipherSpi
object was initialized),
 processing another data part.
protected int
engineUpdate
(
ByteBuffer
input,
ByteBuffer
output)
Continues a multiple-part encryption or decryption operation
 (depending on how this
CipherSpi
object was initialized),
 processing another data part.
protected void
engineUpdateAAD
(byte[] src,
 int offset,
 int len)
Continues a multipart update of the Additional Authentication
 Data (AAD), using a subset of the provided buffer.
protected void
engineUpdateAAD
(
ByteBuffer
src)
Continues a multipart update of the Additional Authentication
 Data (AAD).
protected byte[]
engineWrap
(
Key
key)
Wrap a key.
Methods declared in class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Constructor Details
CipherSpi
public
CipherSpi
()
Constructor for subclasses to call.
Method Details
engineSetMode
protected abstract
void
engineSetMode
(
String
mode)
throws
NoSuchAlgorithmException
Sets the mode of this cipher.
Parameters:
mode
- the cipher mode
Throws:
NoSuchAlgorithmException
- if the requested cipher mode
 does not exist
engineSetPadding
protected abstract
void
engineSetPadding
(
String
padding)
throws
NoSuchPaddingException
Sets the padding mechanism of this cipher.
Parameters:
padding
- the padding mechanism
Throws:
NoSuchPaddingException
- if the requested padding mechanism
 does not exist
engineGetBlockSize
protected abstract
int
engineGetBlockSize
()
Returns the block size (in bytes).
Returns:
the block size (in bytes), or 0 if the algorithm is
 not a block cipher
engineGetOutputSize
protected abstract
int
engineGetOutputSize
(int inputLen)
Returns the length in bytes that an output buffer would
 need to be in order to hold the result of the next
update
or
doFinal
operation, given the input length
inputLen
(in bytes).
This call takes into account any unprocessed (buffered) data from a
 previous
update
call, padding, and AEAD tagging.
The actual output length of the next
update
or
doFinal
call may be smaller than the length returned by
 this method.
Parameters:
inputLen
- the input length (in bytes)
Returns:
the required output buffer size (in bytes)
engineGetIV
protected abstract
byte[]
engineGetIV
()
Returns the initialization vector (IV) in a new buffer.
This is useful in the context of password-based encryption or
 decryption, where the IV is derived from a user-provided passphrase.
Returns:
the initialization vector in a new buffer, or
null
if the
 algorithm does not use an IV, or if the IV has not yet
 been set
engineGetParameters
protected abstract
AlgorithmParameters
engineGetParameters
()
Returns the parameters used with this cipher.
The returned parameters may be the same that were used to initialize
 this cipher, or may contain additional default or random parameter
 values used by the underlying cipher implementation. If the required
 parameters were not supplied and can be generated by the cipher, the
 generated parameters are returned. Otherwise,
null
is returned.
Returns:
the parameters used with this cipher, or
null
engineInit
protected abstract
void
engineInit
(int opmode,
Key
key,
SecureRandom
random)
throws
InvalidKeyException
Initializes this
CipherSpi
object with a key and a source
 of randomness.
The
CipherSpi
object is initialized for one of the
 following four operations:
 encryption, decryption, key wrapping or key unwrapping, depending on
 the value of
opmode
.
If this cipher requires any algorithm parameters that cannot be
 derived from the given
key
, the underlying cipher
 implementation is supposed to generate the required parameters itself
 (using provider-specific default or random values) if it is being
 initialized for encryption or key wrapping, and raise an
InvalidKeyException
if it is being
 initialized for decryption or key unwrapping.
 The generated parameters can be retrieved using
engineGetParameters
or
engineGetIV
(if the parameter is an IV).
If this cipher requires algorithm parameters that cannot be
 derived from the input parameters, and there are no reasonable
 provider-specific default values, initialization will
 necessarily fail.
If this cipher (including its feedback or padding scheme)
 requires any random bytes (e.g., for parameter generation), it will get
 them from
random
.
Note that when a
CipherSpi
object is initialized, it loses all
 previously-acquired state. In other words, initializing a
CipherSpi
object is equivalent to creating a new instance
 of that
CipherSpi
object and initializing it.
Parameters:
opmode
- the operation mode of this
CipherSpi
object
 (this is one of the following:
ENCRYPT_MODE
,
DECRYPT_MODE
,
WRAP_MODE
or
UNWRAP_MODE
)
key
- the encryption key
random
- the source of randomness
Throws:
InvalidKeyException
- if the given key is inappropriate for
 initializing this cipher, or requires
 algorithm parameters that cannot be
 determined from the given key
UnsupportedOperationException
- if
opmode
is
WRAP_MODE
or
UNWRAP_MODE
is not implemented
 by the cipher
engineInit
protected abstract
void
engineInit
(int opmode,
Key
key,
AlgorithmParameterSpec
params,
SecureRandom
random)
throws
InvalidKeyException
,
InvalidAlgorithmParameterException
Initializes this
CipherSpi
object with a key, a set of
 algorithm parameters, and a source of randomness.
The
CipherSpi
object is initialized for one of the
 following four operations:
 encryption, decryption, key wrapping or key unwrapping, depending on
 the value of
opmode
.
If this cipher requires any algorithm parameters and
params
is
null
, the underlying cipher implementation
 is supposed to generate the required parameters itself (using
 provider-specific default or random values) if it is being
 initialized for encryption or key wrapping, and raise an
InvalidAlgorithmParameterException
if it is being
 initialized for decryption or key unwrapping.
 The generated parameters can be retrieved using
engineGetParameters
or
engineGetIV
(if the parameter is an IV).
If this cipher requires algorithm parameters that cannot be
 derived from the input parameters, and there are no reasonable
 provider-specific default values, initialization will
 necessarily fail.
If this cipher (including its feedback or padding scheme)
 requires any random bytes (e.g., for parameter generation), it will get
 them from
random
.
Note that when a
CipherSpi
object is initialized, it loses all
 previously-acquired state. In other words, initializing a
CipherSpi
object is equivalent to creating a new instance of that
CipherSpi
object and initializing it.
Parameters:
opmode
- the operation mode of this
CipherSpi
object
 (this is one of the following:
ENCRYPT_MODE
,
DECRYPT_MODE
,
WRAP_MODE
, or
UNWRAP_MODE
)
key
- the encryption key
params
- the algorithm parameters
random
- the source of randomness
Throws:
InvalidKeyException
- if the given key is inappropriate for
 initializing this cipher
InvalidAlgorithmParameterException
- if the given algorithm
 parameters are inappropriate for this cipher,
 or if this cipher requires
 algorithm parameters and
params
is
null
UnsupportedOperationException
- if
opmode
is
WRAP_MODE
or
UNWRAP_MODE
is not implemented
 by the cipher
engineInit
protected abstract
void
engineInit
(int opmode,
Key
key,
AlgorithmParameters
params,
SecureRandom
random)
throws
InvalidKeyException
,
InvalidAlgorithmParameterException
Initializes this
CipherSpi
object with a key, a set of
 algorithm parameters, and a source of randomness.
The
CipherSpi
object is initialized for one of the
 following four operations:
 encryption, decryption, key wrapping or key unwrapping, depending on
 the value of
opmode
.
If this cipher requires any algorithm parameters and
params
is
null
, the underlying cipher implementation is
 supposed to generate the required parameters itself (using
 provider-specific default or random values) if it is being
 initialized for encryption or key wrapping, and raise an
InvalidAlgorithmParameterException
if it is being
 initialized for decryption or key unwrapping.
 The generated parameters can be retrieved using
engineGetParameters
or
engineGetIV
(if the parameter is an IV).
If this cipher requires algorithm parameters that cannot be
 derived from the input parameters, and there are no reasonable
 provider-specific default values, initialization will
 necessarily fail.
If this cipher (including its feedback or padding scheme)
 requires any random bytes (e.g., for parameter generation), it will get
 them from
random
.
Note that when a
CipherSpi
object is initialized, it loses all
 previously-acquired state. In other words, initializing a
CipherSpi
object is equivalent to creating a new instance of that
CipherSpi
object and initializing it.
Parameters:
opmode
- the operation mode of this
CipherSpi
object
 (this is one of the following:
ENCRYPT_MODE
,
DECRYPT_MODE
,
WRAP_MODE
, or
UNWRAP_MODE
)
key
- the encryption key
params
- the algorithm parameters
random
- the source of randomness
Throws:
InvalidKeyException
- if the given key is inappropriate for
 initializing this cipher
InvalidAlgorithmParameterException
- if the given algorithm
 parameters are inappropriate for this cipher,
 or if this cipher requires
 algorithm parameters and
params
is null
UnsupportedOperationException
- if
opmode
is
WRAP_MODE
or
UNWRAP_MODE
is not implemented
 by the cipher
engineUpdate
protected abstract
byte[]
engineUpdate
(byte[] input,
 int inputOffset,
 int inputLen)
Continues a multiple-part encryption or decryption operation
 (depending on how this
CipherSpi
object was initialized),
 processing another data part.
The first
inputLen
bytes in the
input
buffer, starting at
inputOffset
inclusive, are processed,
 and the result is stored in a new buffer.
Parameters:
input
- the input buffer
inputOffset
- the offset in
input
where the input starts
inputLen
- the input length
Returns:
the new buffer with the result, or
null
if the
 cipher is a block cipher and the input data is too short to result in a
 new block
engineUpdate
protected abstract
int
engineUpdate
(byte[] input,
 int inputOffset,
 int inputLen,
 byte[] output,
 int outputOffset)
throws
ShortBufferException
Continues a multiple-part encryption or decryption operation
 (depending on how this
CipherSpi
object was initialized),
 processing another data part.
The first
inputLen
bytes in the
input
buffer, starting at
inputOffset
inclusive, are processed,
 and the result is stored in the
output
buffer, starting at
outputOffset
inclusive.
If the
output
buffer is too small to hold the result,
 a
ShortBufferException
is thrown.
Parameters:
input
- the input buffer
inputOffset
- the offset in
input
where the input
 starts
inputLen
- the input length
output
- the buffer for the result
outputOffset
- the offset in
output
where the result
 is stored
Returns:
the number of bytes stored in
output
Throws:
ShortBufferException
- if the given output buffer is too small
 to hold the result
engineUpdate
protected
int
engineUpdate
(
ByteBuffer
input,
ByteBuffer
output)
throws
ShortBufferException
Continues a multiple-part encryption or decryption operation
 (depending on how this
CipherSpi
object was initialized),
 processing another data part.
All
input.remaining()
bytes starting at
input.position()
are processed. The result is stored
 in the output buffer.
 Upon return, the input buffer's position will be equal
 to its limit; its limit will not have changed. The output buffer's
 position will have advanced by n, where n is the value returned
 by this method; the output buffer's limit will not have changed.
If
output.remaining()
bytes are insufficient to
 hold the result, a
ShortBufferException
is thrown.
Subclasses should consider overriding this method if they can
 process ByteBuffers more efficiently than byte arrays.
Parameters:
input
- the input ByteBuffer
output
- the output ByteBuffer
Returns:
the number of bytes stored in
output
Throws:
ShortBufferException
- if there is insufficient space in the
 output buffer
NullPointerException
- if either parameter is
null
Since:
1.5
engineDoFinal
protected abstract
byte[]
engineDoFinal
(byte[] input,
 int inputOffset,
 int inputLen)
throws
IllegalBlockSizeException
,
BadPaddingException
Encrypts or decrypts data in a single-part operation,
 or finishes a multiple-part operation.
 The data is encrypted or decrypted, depending on how this
CipherSpi
object was initialized.
The first
inputLen
bytes in the
input
buffer, starting at
inputOffset
inclusive, and any input
 bytes that may have been buffered during a previous
update
operation, are processed, with padding (if requested) being applied.
 If an AEAD mode (such as GCM or CCM) is being used, the authentication
 tag is appended in the case of encryption, or verified in the
 case of decryption.
 The result is stored in a new buffer.
Upon finishing, this method resets this
CipherSpi
object
 to the state it was in when previously initialized via a call to
engineInit
.
 That is, the object is reset and available to encrypt or decrypt
 (depending on the operation mode that was specified in the call to
engineInit
) more data.
Note: if any exception is thrown, this
CipherSpi
object
 may need to be reset before it can be used again.
Parameters:
input
- the input buffer
inputOffset
- the offset in
input
where the input starts
inputLen
- the input length
Returns:
the new buffer with the result
Throws:
IllegalBlockSizeException
- if this cipher is a block cipher,
 no padding has been requested (only in encryption mode), and the total
 input length of the data processed by this cipher is not a multiple of
 block size; or if this encryption algorithm is unable to
 process the input data provided
BadPaddingException
- if this
CipherSpi
object is in
 decryption mode, and (un)padding has been requested, but the decrypted
 data is not bounded by the appropriate padding bytes
AEADBadTagException
- if this
CipherSpi
object is
 decrypting in an AEAD mode (such as GCM or CCM), and the received
 authentication tag does not match the calculated value
engineDoFinal
protected abstract
int
engineDoFinal
(byte[] input,
 int inputOffset,
 int inputLen,
 byte[] output,
 int outputOffset)
throws
ShortBufferException
,
IllegalBlockSizeException
,
BadPaddingException
Encrypts or decrypts data in a single-part operation,
 or finishes a multiple-part operation.
 The data is encrypted or decrypted, depending on how this
CipherSpi
object was initialized.
The first
inputLen
bytes in the
input
buffer, starting at
inputOffset
inclusive, and any input
 bytes that may have been buffered during a previous
update
operation, are processed, with padding (if requested) being applied.
 If an AEAD mode such as GCM or CCM is being used, the authentication
 tag is appended in the case of encryption, or verified in the
 case of decryption.
 The result is stored in the
output
buffer, starting at
outputOffset
inclusive.
If the
output
buffer is too small to hold the result,
 a
ShortBufferException
is thrown.
Upon finishing, this method resets this
CipherSpi
object
 to the state it was in when previously initialized via a call to
engineInit
.
 That is, the object is reset and available to encrypt or decrypt
 (depending on the operation mode that was specified in the call to
engineInit
) more data.
Note: if any exception is thrown, this
CipherSpi
object
 may need to be reset before it can be used again.
Parameters:
input
- the input buffer
inputOffset
- the offset in
input
where the input
 starts
inputLen
- the input length
output
- the buffer for the result
outputOffset
- the offset in
output
where the result
 is stored
Returns:
the number of bytes stored in
output
Throws:
IllegalBlockSizeException
- if this cipher is a block cipher,
 no padding has been requested (only in encryption mode), and the total
 input length of the data processed by this cipher is not a multiple of
 block size; or if this encryption algorithm is unable to
 process the input data provided
ShortBufferException
- if the given output buffer is too small
 to hold the result
BadPaddingException
- if this
CipherSpi
object is in
 decryption mode,
 and (un)padding has been requested, but the decrypted data is not
 bounded by the appropriate padding bytes
AEADBadTagException
- if this
CipherSpi
object is
 decrypting in an AEAD mode (such as GCM or CCM), and the received
 authentication tag does not match the calculated value
engineDoFinal
protected
int
engineDoFinal
(
ByteBuffer
input,
ByteBuffer
output)
throws
ShortBufferException
,
IllegalBlockSizeException
,
BadPaddingException
Encrypts or decrypts data in a single-part operation,
 or finishes a multiple-part operation.
 The data is encrypted or decrypted, depending on how this
CipherSpi
object was initialized.
All
input.remaining()
bytes starting at
input.position()
are processed.
 If an AEAD mode such as GCM or CCM is being used, the authentication
 tag is appended in the case of encryption, or verified in the
 case of decryption.
 The result is stored in the output buffer.
 Upon return, the input buffer's position will be equal
 to its limit; its limit will not have changed. The output buffer's
 position will have advanced by n, where n is the value returned
 by this method; the output buffer's limit will not have changed.
If
output.remaining()
bytes are insufficient to
 hold the result, a
ShortBufferException
is thrown.
Upon finishing, this method resets this
CipherSpi
object
 to the state it was in when previously initialized via a call to
engineInit
.
 That is, the object is reset and available to encrypt or decrypt
 (depending on the operation mode that was specified in the call to
engineInit
more data.
Note: if any exception is thrown, this
CipherSpi
object
 may need to be reset before it can be used again.
Subclasses should consider overriding this method if they can
 process ByteBuffers more efficiently than byte arrays.
Parameters:
input
- the input ByteBuffer
output
- the output ByteBuffer
Returns:
the number of bytes stored in
output
Throws:
IllegalBlockSizeException
- if this cipher is a block cipher,
 no padding has been requested (only in encryption mode), and the total
 input length of the data processed by this cipher is not a multiple of
 block size; or if this encryption algorithm is unable to
 process the input data provided
ShortBufferException
- if there is insufficient space in the
 output buffer
BadPaddingException
- if this
CipherSpi
object is in
 decryption mode, and (un)padding has been requested, but the decrypted
 data is not bounded by the appropriate padding bytes
AEADBadTagException
- if this
CipherSpi
object is
 decrypting in an AEAD mode (such as GCM or CCM), and the received
 authentication tag does not match the calculated value
NullPointerException
- if either parameter is
null
Since:
1.5
engineWrap
protected
byte[]
engineWrap
(
Key
key)
throws
IllegalBlockSizeException
,
InvalidKeyException
Wrap a key.
This concrete method has been added to this previously-defined
 abstract class. (For backwards compatibility, it cannot be abstract.)
 It may be overridden by a provider to wrap a key.
 Such an override is expected to throw an
IllegalBlockSizeException
or
InvalidKeyException
(under the specified circumstances), if the given key cannot be wrapped.
 If this method is not overridden, it always throws an
UnsupportedOperationException
.
Parameters:
key
- the key to be wrapped
Returns:
the wrapped key
Throws:
IllegalBlockSizeException
- if this cipher is a block cipher,
 no padding has been requested, and the length of the encoding of the
 key to be wrapped is not a multiple of the block size
InvalidKeyException
- if it is impossible or unsafe to
 wrap the key with this cipher (e.g., a hardware protected key is
 being passed to a software-only cipher)
UnsupportedOperationException
- if this method is not supported
engineUnwrap
protected
Key
engineUnwrap
(byte[] wrappedKey,
String
wrappedKeyAlgorithm,
 int wrappedKeyType)
throws
InvalidKeyException
,
NoSuchAlgorithmException
Unwrap a previously wrapped key.
This concrete method has been added to this previously-defined
 abstract class. (For backwards compatibility, it cannot be abstract.)
 It may be overridden by a provider to unwrap a previously wrapped key.
 Such an override is expected to throw an
InvalidKeyException
if
 the given wrapped key cannot be unwrapped.
 If this method is not overridden, it always throws an
UnsupportedOperationException
.
Parameters:
wrappedKey
- the key to be unwrapped
wrappedKeyAlgorithm
- the algorithm associated with the wrapped
 key
wrappedKeyType
- the type of the wrapped key. This is one of
SECRET_KEY
,
PRIVATE_KEY
, or
PUBLIC_KEY
.
Returns:
the unwrapped key
Throws:
NoSuchAlgorithmException
- if no installed providers
 can create keys of type
wrappedKeyType
for the
wrappedKeyAlgorithm
InvalidKeyException
- if
wrappedKey
does not
 represent a wrapped key of type
wrappedKeyType
for
 the
wrappedKeyAlgorithm
UnsupportedOperationException
- if this method is not supported
engineGetKeySize
protected
int
engineGetKeySize
(
Key
key)
throws
InvalidKeyException
Returns the key size of the given key object in bits.
This concrete method has been added to this previously-defined
 abstract class. It throws an
UnsupportedOperationException
if it is not overridden by the provider.
Parameters:
key
- the key object
Returns:
the key size of the given key object
Throws:
InvalidKeyException
- if
key
is invalid
engineUpdateAAD
protected
void
engineUpdateAAD
(byte[] src,
 int offset,
 int len)
Continues a multipart update of the Additional Authentication
 Data (AAD), using a subset of the provided buffer.
Calls to this method provide AAD to the cipher when operating in
 modes such as AEAD (GCM or CCM).  If this cipher is operating in
 either GCM or CCM mode, all AAD must be supplied before beginning
 operations on the ciphertext (via the
update
and
doFinal
methods).
Parameters:
src
- the buffer containing the AAD
offset
- the offset in
src
where the AAD input starts
len
- the number of AAD bytes
Throws:
IllegalStateException
- if this
CipherSpi
object is in
 a wrong state (e.g., has not been initialized), does not accept AAD,
 or if operating in either GCM or CCM mode and one of the
update
methods has already been called for the active
 encryption/decryption operation
UnsupportedOperationException
- if this method
 has not been overridden by an implementation
Since:
1.7
engineUpdateAAD
protected
void
engineUpdateAAD
(
ByteBuffer
src)
Continues a multipart update of the Additional Authentication
 Data (AAD).
Calls to this method provide AAD to the cipher when operating in
 modes such as AEAD (GCM or CCM).  If this cipher is operating in
 either GCM or CCM mode, all AAD must be supplied before beginning
 operations on the ciphertext (via the
update
and
doFinal
methods).
All
src.remaining()
bytes starting at
src.position()
are processed.
 Upon return, the input buffer's position will be equal
 to its limit; its limit will not have changed.
Parameters:
src
- the buffer containing the AAD
Throws:
IllegalStateException
- if this
CipherSpi
object is in
 a wrong state (e.g., has not been initialized), does not accept AAD,
 or if operating in either GCM or CCM mode and one of the
update
methods has already been called for the active
 encryption/decryption operation
UnsupportedOperationException
- if this method
 has not been overridden by an implementation
Since:
1.7
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.