PrivateCredentialPermission (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr
|
Method
Detail:
Field |
Constr
|
Method
SEARCH
Module
java.base
Package
javax.security.auth
Class PrivateCredentialPermission
java.lang.Object
java.security.Permission
javax.security.auth.PrivateCredentialPermission
All Implemented Interfaces:
Serializable
,
Guard
public final class
PrivateCredentialPermission
extends
Permission
This class is used to protect access to private Credentials
 belonging to a particular
Subject
.  The
Subject
is represented by a Set of Principals.
The target name of this
Permission
specifies
 a Credential class name, and a Set of Principals.
 The only valid value for this Permission's actions is, "read".
 The target name must abide by the following syntax:
CredentialClass {PrincipalClass "PrincipalName"}*
For example, the following permission grants access to the
 com.sun.PrivateCredential owned by Subjects which have
 a com.sun.Principal with the name, "duke".  Note that although
 this example, as well as all the examples below, do not contain
 Codebase, SignedBy, or Principal information in the grant statement
 (for simplicity reasons), actual policy configurations should
 specify that information when appropriate.
grant {
      permission javax.security.auth.PrivateCredentialPermission
              "com.sun.PrivateCredential com.sun.Principal \"duke\"",
              "read";
    };
If CredentialClass is "*", then access is granted to
 all private Credentials belonging to the specified
Subject
.
 If "PrincipalName" is "*", then access is granted to the
 specified Credential owned by any
Subject
that has the
 specified
Principal
(the actual PrincipalName doesn't matter).
 For example, the following grants access to the
 a.b.Credential owned by any
Subject
that has
 an a.b.Principal.
grant {
      permission javax.security.auth.PrivateCredentialPermission
              "a.b.Credential a.b.Principal "*"",
              "read";
    };
If both the PrincipalClass and "PrincipalName" are "*",
 then access is granted to the specified Credential owned by
 any
Subject
.
In addition, the PrincipalClass/PrincipalName pairing may be repeated:
grant {
      permission javax.security.auth.PrivateCredentialPermission
              "a.b.Credential a.b.Principal "duke" c.d.Principal "dukette"",
              "read";
    };
The above grants access to the private Credential, "a.b.Credential",
 belonging to a
Subject
with at least two associated Principals:
 "a.b.Principal" with the name, "duke", and "c.d.Principal", with the name,
 "dukette".
Since:
1.4
See Also:
Serialized Form
Constructor Summary
Constructors
Constructor
Description
PrivateCredentialPermission
(
String
name,
String
actions)
Creates a new
PrivateCredentialPermission
with the specified
name
.
Method Summary
All Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
boolean
equals
(
Object
obj)
Checks two
PrivateCredentialPermission
objects for
 equality.
String
getActions
()
Returns the "canonical string representation" of the actions.
String
getCredentialClass
()
Returns the Class name of the Credential associated with this
PrivateCredentialPermission
.
String
[][]
getPrincipals
()
Returns the
Principal
classes and names
 associated with this
PrivateCredentialPermission
.
int
hashCode
()
Returns the hash code value for this object.
boolean
implies
(
Permission
p)
Checks if this
PrivateCredentialPermission
implies
 the specified
Permission
.
PermissionCollection
newPermissionCollection
()
Return a homogeneous collection of PrivateCredentialPermissions
 in a
PermissionCollection
.
Methods declared in class java.security.
Permission
checkGuard
,
getName
,
toString
Methods declared in class java.lang.
Object
clone
,
finalize
,
getClass
,
notify
,
notifyAll
,
wait
,
wait
,
wait
Constructor Details
PrivateCredentialPermission
public
PrivateCredentialPermission
(
String
name,
String
actions)
Creates a new
PrivateCredentialPermission
with the specified
name
.  The
name
specifies both a Credential class and a
Principal
Set.
Parameters:
name
- the name specifying the Credential class and
Principal
Set.
actions
- the actions specifying that the Credential can be read.
Throws:
IllegalArgumentException
- if
name
does not conform
          to the correct syntax or if
actions
is not "read".
Method Details
getCredentialClass
public
String
getCredentialClass
()
Returns the Class name of the Credential associated with this
PrivateCredentialPermission
.
Returns:
the Class name of the Credential associated with this
PrivateCredentialPermission
.
getPrincipals
public
String
[][]
getPrincipals
()
Returns the
Principal
classes and names
 associated with this
PrivateCredentialPermission
.
 The information is returned as a two-dimensional array (array[x][y]).
 The 'x' value corresponds to the number of
Principal
class and name pairs.  When (y==0), it corresponds to
 the
Principal
class value, and when (y==1),
 it corresponds to the
Principal
name value.
 For example, array[0][0] corresponds to the class name of
 the first
Principal
in the array.  array[0][1]
 corresponds to the
Principal
name of the
 first
Principal
in the array.
Returns:
the
Principal
class and names associated
          with this
PrivateCredentialPermission
.
implies
public
boolean
implies
(
Permission
p)
Checks if this
PrivateCredentialPermission
implies
 the specified
Permission
.
This method returns true if:
p
is an instanceof PrivateCredentialPermission and
the target name for
p
is implied by this object's
          target name.  For example:
[* P1 "duke"] implies [a.b.Credential P1 "duke"].
  [C1 P1 "duke"] implies [C1 P1 "duke" P2 "dukette"].
  [C1 P2 "dukette"] implies [C1 P1 "duke" P2 "dukette"].
Specified by:
implies
in class
Permission
Parameters:
p
- the
Permission
to check against.
Returns:
true if this
PrivateCredentialPermission
implies
 the specified
Permission
, false if not.
equals
public
boolean
equals
(
Object
obj)
Checks two
PrivateCredentialPermission
objects for
 equality.  Checks that
obj
is a
PrivateCredentialPermission
,
 and has the same credential class as this object,
 as well as the same Principals as this object.
 The order of the Principals in the respective Permission's
 target names is not relevant.
Specified by:
equals
in class
Permission
Parameters:
obj
- the object we are testing for equality with this object.
Returns:
true if obj is a
PrivateCredentialPermission
,
          has the same credential class as this object,
          and has the same Principals as this object.
See Also:
Object.hashCode()
HashMap
hashCode
public
int
hashCode
()
Returns the hash code value for this object.
Specified by:
hashCode
in class
Permission
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object)
System.identityHashCode(java.lang.Object)
getActions
public
String
getActions
()
Returns the "canonical string representation" of the actions.
 This method always returns the String, "read".
Specified by:
getActions
in class
Permission
Returns:
the actions (always returns "read").
newPermissionCollection
public
PermissionCollection
newPermissionCollection
()
Return a homogeneous collection of PrivateCredentialPermissions
 in a
PermissionCollection
.
 No such
PermissionCollection
is defined,
 so this method always returns
null
.
Overrides:
newPermissionCollection
in class
Permission
Returns:
null in all cases.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.