UnixDomainSocketAddress (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr |
Method
Detail:
Field |
Constr |
Method
SEARCH
Module
java.base
Package
java.net
Class UnixDomainSocketAddress
java.lang.Object
java.net.SocketAddress
java.net.UnixDomainSocketAddress
All Implemented Interfaces:
Serializable
public final class
UnixDomainSocketAddress
extends
SocketAddress
A Unix domain socket address.
 A Unix domain socket address encapsulates a file-system path that Unix domain sockets
 bind or connect to.
An
unnamed
UnixDomainSocketAddress
has
 an empty path. The local address of a
SocketChannel
to a Unix domain socket
 that is
automatically
or
implicitly
bound will be unnamed.
Path
objects used to create instances of this class must be obtained
 from the
system-default
file system.
Since:
16
See Also:
SocketChannel
ServerSocketChannel
Serialized Form
Method Summary
All Methods
Static Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
boolean
equals
(
Object
o)
Compares this address with another object.
Path
getPath
()
Returns this address's path.
int
hashCode
()
Returns the hash code of this
UnixDomainSocketAddress
static
UnixDomainSocketAddress
of
(
String
pathname)
Creates a UnixDomainSocketAddress from the given path string.
static
UnixDomainSocketAddress
of
(
Path
path)
Creates a UnixDomainSocketAddress for the given path.
String
toString
()
Returns a string representation of this
UnixDomainSocketAddress
.
Methods declared in class java.lang.
Object
clone
,
finalize
,
getClass
,
notify
,
notifyAll
,
wait
,
wait
,
wait
Method Details
of
public static
UnixDomainSocketAddress
of
(
String
pathname)
Creates a UnixDomainSocketAddress from the given path string.
Parameters:
pathname
- The path string, which can be empty
Returns:
A UnixDomainSocketAddress
Throws:
InvalidPathException
- If the path cannot be converted to a Path
NullPointerException
- if pathname is
null
of
public static
UnixDomainSocketAddress
of
(
Path
path)
Creates a UnixDomainSocketAddress for the given path.
Parameters:
path
- The path to the socket, which can be empty
Returns:
A UnixDomainSocketAddress
Throws:
IllegalArgumentException
- If the path is not associated with the default file system
NullPointerException
- if path is
null
getPath
public
Path
getPath
()
Returns this address's path.
Returns:
this address's path
hashCode
public
int
hashCode
()
Returns the hash code of this
UnixDomainSocketAddress
Overrides:
hashCode
in class
Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object)
System.identityHashCode(java.lang.Object)
equals
public
boolean
equals
(
Object
o)
Compares this address with another object.
Overrides:
equals
in class
Object
Parameters:
o
- the reference object with which to compare.
Returns:
true if the path fields are equal
See Also:
Object.hashCode()
HashMap
toString
public
String
toString
()
Returns a string representation of this
UnixDomainSocketAddress
.
Overrides:
toString
in class
Object
Returns:
this address's path which may be empty for an unnamed address
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.