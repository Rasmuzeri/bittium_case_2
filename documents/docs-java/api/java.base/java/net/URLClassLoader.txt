URLClassLoader (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr
|
Method
Detail:
Field |
Constr
|
Method
SEARCH
Module
java.base
Package
java.net
Class URLClassLoader
java.lang.Object
java.lang.ClassLoader
java.security.SecureClassLoader
java.net.URLClassLoader
All Implemented Interfaces:
Closeable
,
AutoCloseable
Direct Known Subclasses:
MLet
public class
URLClassLoader
extends
SecureClassLoader
implements
Closeable
This class loader is used to load classes and resources from a search
 path of URLs referring to both JAR files and directories. Any
jar:
scheme URL (see
JarURLConnection
) is assumed to refer to a
 JAR file.  Any
file:
scheme URL that ends with a '/' is assumed to
 refer to a directory. Otherwise, the URL is assumed to refer to a JAR file
 which will be opened as needed.
This class loader supports the loading of classes and resources from the
 contents of a
multi-release
JAR file that is referred to by a given URL.
The AccessControlContext of the thread that created the instance of
 URLClassLoader will be used when subsequently loading classes and
 resources.
The classes that are loaded are by default granted permission only to
 access the URLs specified when the URLClassLoader was created.
Since:
1.2
Constructor Summary
Constructors
Constructor
Description
URLClassLoader
(
String
name,
URL
[] urls,
ClassLoader
parent)
Constructs a new named
URLClassLoader
for the specified URLs.
URLClassLoader
(
String
name,
URL
[] urls,
ClassLoader
parent,
URLStreamHandlerFactory
factory)
Constructs a new named
URLClassLoader
for the specified URLs,
 parent class loader, and URLStreamHandlerFactory.
URLClassLoader
(
URL
[] urls)
Constructs a new URLClassLoader for the specified URLs using the
 default delegation parent
ClassLoader
.
URLClassLoader
(
URL
[] urls,
ClassLoader
parent)
Constructs a new URLClassLoader for the given URLs.
URLClassLoader
(
URL
[] urls,
ClassLoader
parent,
URLStreamHandlerFactory
factory)
Constructs a new URLClassLoader for the specified URLs, parent
 class loader, and URLStreamHandlerFactory.
Method Summary
All Methods
Static Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
protected void
addURL
(
URL
url)
Appends the specified URL to the list of URLs to search for
 classes and resources.
void
close
()
Closes this URLClassLoader, so that it can no longer be used to load
 new classes or resources that are defined by this loader.
protected
Package
definePackage
(
String
name,
Manifest
man,
URL
url)
Defines a new package by name in this
URLClassLoader
.
protected
Class
<?>
findClass
(
String
name)
Finds and loads the class with the specified name from the URL search
 path.
URL
findResource
(
String
name)
Finds the resource with the specified name on the URL search path.
Enumeration
<
URL
>
findResources
(
String
name)
Returns an Enumeration of URLs representing all of the resources
 on the URL search path having the specified name.
protected
PermissionCollection
getPermissions
(
CodeSource
codesource)
Returns the permissions for the given codesource object.
InputStream
getResourceAsStream
(
String
name)
Returns an input stream for reading the specified resource.
URL
[]
getURLs
()
Returns the search path of URLs for loading classes and resources.
static
URLClassLoader
newInstance
(
URL
[] urls)
Creates a new instance of URLClassLoader for the specified
 URLs and default parent class loader.
static
URLClassLoader
newInstance
(
URL
[] urls,
ClassLoader
parent)
Creates a new instance of URLClassLoader for the specified
 URLs and parent class loader.
Methods declared in class java.security.
SecureClassLoader
defineClass
,
defineClass
Methods declared in class java.lang.
ClassLoader
clearAssertionStatus
,
defineClass
,
defineClass
,
defineClass
,
defineClass
,
definePackage
,
findClass
,
findLibrary
,
findLoadedClass
,
findResource
,
findSystemClass
,
getClassLoadingLock
,
getDefinedPackage
,
getDefinedPackages
,
getName
,
getPackage
,
getPackages
,
getParent
,
getPlatformClassLoader
,
getResource
,
getResources
,
getSystemClassLoader
,
getSystemResource
,
getSystemResourceAsStream
,
getSystemResources
,
getUnnamedModule
,
isRegisteredAsParallelCapable
,
loadClass
,
loadClass
,
registerAsParallelCapable
,
resolveClass
,
resources
,
setClassAssertionStatus
,
setDefaultAssertionStatus
,
setPackageAssertionStatus
,
setSigners
Methods declared in class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Constructor Details
URLClassLoader
public
URLClassLoader
(
URL
[] urls,
ClassLoader
parent)
Constructs a new URLClassLoader for the given URLs. The URLs will be
 searched in the order specified for classes and resources after first
 searching in the specified parent class loader.  Any
jar:
scheme URL is assumed to refer to a JAR file.  Any
file:
scheme
 URL that ends with a '/' is assumed to refer to a directory.  Otherwise,
 the URL is assumed to refer to a JAR file which will be downloaded and
 opened as needed.
If there is a security manager, this method first
 calls the security manager's
checkCreateClassLoader
method
 to ensure creation of a class loader is allowed.
Parameters:
urls
- the URLs from which to load classes and resources
parent
- the parent class loader for delegation
Throws:
SecurityException
- if a security manager exists and its
checkCreateClassLoader
method doesn't allow
             creation of a class loader.
NullPointerException
- if
urls
or any of its
             elements is
null
.
See Also:
SecurityManager.checkCreateClassLoader()
URLClassLoader
public
URLClassLoader
(
URL
[] urls)
Constructs a new URLClassLoader for the specified URLs using the
 default delegation parent
ClassLoader
. The URLs will
 be searched in the order specified for classes and resources after
 first searching in the parent class loader. Any URL that ends with
 a '/' is assumed to refer to a directory. Otherwise, the URL is
 assumed to refer to a JAR file which will be downloaded and opened
 as needed.
If there is a security manager, this method first
 calls the security manager's
checkCreateClassLoader
method
 to ensure creation of a class loader is allowed.
Parameters:
urls
- the URLs from which to load classes and resources
Throws:
SecurityException
- if a security manager exists and its
checkCreateClassLoader
method doesn't allow
             creation of a class loader.
NullPointerException
- if
urls
or any of its
             elements is
null
.
See Also:
SecurityManager.checkCreateClassLoader()
URLClassLoader
public
URLClassLoader
(
URL
[] urls,
ClassLoader
parent,
URLStreamHandlerFactory
factory)
Constructs a new URLClassLoader for the specified URLs, parent
 class loader, and URLStreamHandlerFactory. The parent argument
 will be used as the parent class loader for delegation. The
 factory argument will be used as the stream handler factory to
 obtain protocol handlers when creating new jar URLs.
If there is a security manager, this method first
 calls the security manager's
checkCreateClassLoader
method
 to ensure creation of a class loader is allowed.
Parameters:
urls
- the URLs from which to load classes and resources
parent
- the parent class loader for delegation
factory
- the URLStreamHandlerFactory to use when creating URLs
Throws:
SecurityException
- if a security manager exists and its
checkCreateClassLoader
method doesn't allow
         creation of a class loader.
NullPointerException
- if
urls
or any of its
         elements is
null
.
See Also:
SecurityManager.checkCreateClassLoader()
URLClassLoader
public
URLClassLoader
(
String
name,
URL
[] urls,
ClassLoader
parent)
Constructs a new named
URLClassLoader
for the specified URLs.
 The URLs will be searched in the order specified for classes
 and resources after first searching in the specified parent class loader.
 Any URL that ends with a '/' is assumed to refer to a directory.
 Otherwise, the URL is assumed to refer to a JAR file which will be
 downloaded and opened as needed.
Parameters:
name
- class loader name; or
null
if not named
urls
- the URLs from which to load classes and resources
parent
- the parent class loader for delegation
Throws:
IllegalArgumentException
- if the given name is empty.
NullPointerException
- if
urls
or any of its
         elements is
null
.
SecurityException
- if a security manager exists and its
SecurityManager.checkCreateClassLoader()
method doesn't
         allow creation of a class loader.
Since:
9
URLClassLoader
public
URLClassLoader
(
String
name,
URL
[] urls,
ClassLoader
parent,
URLStreamHandlerFactory
factory)
Constructs a new named
URLClassLoader
for the specified URLs,
 parent class loader, and URLStreamHandlerFactory.
 The parent argument will be used as the parent class loader for delegation.
 The factory argument will be used as the stream handler factory to
 obtain protocol handlers when creating new jar URLs.
Parameters:
name
- class loader name; or
null
if not named
urls
- the URLs from which to load classes and resources
parent
- the parent class loader for delegation
factory
- the URLStreamHandlerFactory to use when creating URLs
Throws:
IllegalArgumentException
- if the given name is empty.
NullPointerException
- if
urls
or any of its
         elements is
null
.
SecurityException
- if a security manager exists and its
checkCreateClassLoader
method doesn't allow
         creation of a class loader.
Since:
9
Method Details
getResourceAsStream
public
InputStream
getResourceAsStream
(
String
name)
Returns an input stream for reading the specified resource.
 If this loader is closed, then any resources opened by this method
 will be closed.
The search order is described in the documentation for
ClassLoader.getResource(String)
.
Overrides:
getResourceAsStream
in class
ClassLoader
Parameters:
name
- The resource name
Returns:
An input stream for reading the resource, or
null
if the resource could not be found
Throws:
NullPointerException
- If
name
is
null
Since:
1.7
close
public
void
close
()
           throws
IOException
Closes this URLClassLoader, so that it can no longer be used to load
 new classes or resources that are defined by this loader.
 Classes and resources defined by any of this loader's parents in the
 delegation hierarchy are still accessible. Also, any classes or resources
 that are already loaded, are still accessible.
In the case of jar: and file: URLs, it also closes any files
 that were opened by it. If another thread is loading a
 class when the
close
method is invoked, then the result of
 that load is undefined.
The method makes a best effort attempt to close all opened files,
 by catching
IOException
s internally. Unchecked exceptions
 and errors are not caught. Calling close on an already closed
 loader has no effect.
Specified by:
close
in interface
AutoCloseable
Specified by:
close
in interface
Closeable
Throws:
IOException
- if closing any file opened by this class loader
 resulted in an IOException. Any such exceptions are caught internally.
 If only one is caught, then it is re-thrown. If more than one exception
 is caught, then the second and following exceptions are added
 as suppressed exceptions of the first one caught, which is then re-thrown.
SecurityException
- if a security manager is set, and it denies
RuntimePermission
("closeClassLoader")
Since:
1.7
addURL
protected
void
addURL
(
URL
url)
Appends the specified URL to the list of URLs to search for
 classes and resources.
If the URL specified is
null
or is already in the
 list of URLs, or if this loader is closed, then invoking this
 method has no effect.
Parameters:
url
- the URL to be added to the search path of URLs
getURLs
public
URL
[]
getURLs
()
Returns the search path of URLs for loading classes and resources.
 This includes the original list of URLs specified to the constructor,
 along with any URLs subsequently appended by the addURL() method.
Returns:
the search path of URLs for loading classes and resources.
findClass
protected
Class
<?>
findClass
(
String
name)
throws
ClassNotFoundException
Finds and loads the class with the specified name from the URL search
 path. Any URLs referring to JAR files are loaded and opened as needed
 until the class is found.
Overrides:
findClass
in class
ClassLoader
Parameters:
name
- the name of the class
Returns:
the resulting class
Throws:
ClassNotFoundException
- if the class could not be found,
            or if the loader is closed.
NullPointerException
- if
name
is
null
.
definePackage
protected
Package
definePackage
(
String
name,
Manifest
man,
URL
url)
Defines a new package by name in this
URLClassLoader
.
 The attributes contained in the specified
Manifest
will be used to obtain package version and sealing information.
 For sealed packages, the additional URL specifies the code source URL
 from which the package was loaded.
Parameters:
name
- the package name
man
- the
Manifest
containing package version and sealing
              information
url
- the code source url for the package, or null if none
Returns:
the newly defined
Package
object
Throws:
IllegalArgumentException
- if the package name is
              already defined by this class loader
findResource
public
URL
findResource
(
String
name)
Finds the resource with the specified name on the URL search path.
Overrides:
findResource
in class
ClassLoader
Parameters:
name
- the name of the resource
Returns:
a
URL
for the resource, or
null
if the resource could not be found, or if the loader is closed.
findResources
public
Enumeration
<
URL
>
findResources
(
String
name)
throws
IOException
Returns an Enumeration of URLs representing all of the resources
 on the URL search path having the specified name.
Overrides:
findResources
in class
ClassLoader
Parameters:
name
- the resource name
Returns:
An
Enumeration
of
URL
s.
         If the loader is closed, the Enumeration contains no elements.
Throws:
IOException
- if an I/O exception occurs
getPermissions
protected
PermissionCollection
getPermissions
(
CodeSource
codesource)
Returns the permissions for the given codesource object.
 The implementation of this method first calls super.getPermissions
 and then adds permissions based on the URL of the codesource.
If the protocol of this URL is "jar", then the permission granted
 is based on the permission that is required by the URL of the Jar
 file.
If the protocol is "file" and there is an authority component, then
 permission to connect to and accept connections from that authority
 may be granted. If the protocol is "file"
 and the path specifies a file, then permission to read that
 file is granted. If protocol is "file" and the path is
 a directory, permission is granted to read all files
 and (recursively) all files and subdirectories contained in
 that directory.
If the protocol is not "file", then permission
 to connect to and accept connections from the URL's host is granted.
Overrides:
getPermissions
in class
SecureClassLoader
Parameters:
codesource
- the codesource
Returns:
the permissions granted to the codesource
Throws:
NullPointerException
- if
codesource
is
null
.
newInstance
public static
URLClassLoader
newInstance
(
URL
[] urls,
ClassLoader
parent)
Creates a new instance of URLClassLoader for the specified
 URLs and parent class loader. If a security manager is
 installed, the
loadClass
method of the URLClassLoader
 returned by this method will invoke the
SecurityManager.checkPackageAccess
method before
 loading the class.
Parameters:
urls
- the URLs to search for classes and resources
parent
- the parent class loader for delegation
Returns:
the resulting class loader
Throws:
NullPointerException
- if
urls
or any of its
             elements is
null
.
newInstance
public static
URLClassLoader
newInstance
(
URL
[] urls)
Creates a new instance of URLClassLoader for the specified
 URLs and default parent class loader. If a security manager is
 installed, the
loadClass
method of the URLClassLoader
 returned by this method will invoke the
SecurityManager.checkPackageAccess
before
 loading the class.
Parameters:
urls
- the URLs to search for classes and resources
Returns:
the resulting class loader
Throws:
NullPointerException
- if
urls
or any of its
             elements is
null
.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.