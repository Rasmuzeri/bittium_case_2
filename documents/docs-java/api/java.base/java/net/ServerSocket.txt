ServerSocket (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr
|
Method
Detail:
Field |
Constr
|
Method
SEARCH
Module
java.base
Package
java.net
Class ServerSocket
java.lang.Object
java.net.ServerSocket
All Implemented Interfaces:
Closeable
,
AutoCloseable
Direct Known Subclasses:
SSLServerSocket
public class
ServerSocket
extends
Object
implements
Closeable
This class implements server sockets. A server socket waits for
 requests to come in over the network. It performs some operation
 based on that request, and then possibly returns a result to the requester.
The actual work of the server socket is performed by an instance
 of the
SocketImpl
class.
The
ServerSocket
class defines convenience
 methods to set and get several socket options. This class also
 defines the
setOption
and
getOption
methods to set
 and query socket options.
 A
ServerSocket
supports the following options:
Socket options
Option Name
Description
SO_RCVBUF
The size of the socket receive buffer
SO_REUSEADDR
Re-use address
Additional (implementation specific) options may also be supported.
Since:
1.0
See Also:
SocketImpl
ServerSocketChannel
Constructor Summary
Constructors
Modifier
Constructor
Description
ServerSocket
()
Creates an unbound server socket.
ServerSocket
(int port)
Creates a server socket, bound to the specified port.
ServerSocket
(int port,
 int backlog)
Creates a server socket and binds it to the specified local port
 number, with the specified backlog.
ServerSocket
(int port,
 int backlog,
InetAddress
bindAddr)
Create a server with the specified port, listen backlog, and
 local IP address to bind to.
protected
ServerSocket
(
SocketImpl
impl)
Creates a server socket with a user-specified
SocketImpl
.
Method Summary
All Methods
Static Methods
Instance Methods
Concrete Methods
Deprecated Methods
Modifier and Type
Method
Description
Socket
accept
()
Listens for a connection to be made to this socket and accepts
 it.
void
bind
(
SocketAddress
endpoint)
Binds the
ServerSocket
to a specific address
 (IP address and port number).
void
bind
(
SocketAddress
endpoint,
 int backlog)
Binds the
ServerSocket
to a specific address
 (IP address and port number).
void
close
()
Closes this socket.
ServerSocketChannel
getChannel
()
Returns the unique
ServerSocketChannel
object
 associated with this socket, if any.
InetAddress
getInetAddress
()
Returns the local address of this server socket.
int
getLocalPort
()
Returns the port number on which this socket is listening.
SocketAddress
getLocalSocketAddress
()
Returns the address of the endpoint this socket is bound to.
<T> T
getOption
(
SocketOption
<T> name)
Returns the value of a socket option.
int
getReceiveBufferSize
()
Gets the value of the
SO_RCVBUF
option
 for this
ServerSocket
, that is the proposed buffer size that
 will be used for Sockets accepted from this
ServerSocket
.
boolean
getReuseAddress
()
Tests if
SO_REUSEADDR
is enabled.
int
getSoTimeout
()
Retrieve setting for
SO_TIMEOUT
.
 0 returns implies that the option is disabled (i.e., timeout of infinity).
protected final void
implAccept
(
Socket
s)
Subclasses of ServerSocket use this method to override accept()
 to return their own subclass of socket.
boolean
isBound
()
Returns the binding state of the ServerSocket.
boolean
isClosed
()
Returns the closed state of the ServerSocket.
<T>
ServerSocket
setOption
(
SocketOption
<T> name,
 T value)
Sets the value of a socket option.
void
setPerformancePreferences
(int connectionTime,
 int latency,
 int bandwidth)
Sets performance preferences for this ServerSocket.
void
setReceiveBufferSize
(int size)
Sets a default proposed value for the
SO_RCVBUF
option for sockets
 accepted from this
ServerSocket
.
void
setReuseAddress
(boolean on)
Enable/disable the
SO_REUSEADDR
socket option.
static void
setSocketFactory
(
SocketImplFactory
fac)
Deprecated.
Use a
ServerSocketFactory
and subclass
ServerSocket
directly.
void
setSoTimeout
(int timeout)
Enable/disable
SO_TIMEOUT
with the
 specified timeout, in milliseconds.
Set
<
SocketOption
<?>>
supportedOptions
()
Returns a set of the socket options supported by this server socket.
String
toString
()
Returns the implementation address and implementation port of
 this socket as a
String
.
Methods declared in class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
wait
,
wait
,
wait
Constructor Details
ServerSocket
protected
ServerSocket
(
SocketImpl
impl)
Creates a server socket with a user-specified
SocketImpl
.
Parameters:
impl
- an instance of a SocketImpl to use on the ServerSocket.
Throws:
NullPointerException
- if impl is
null
.
SecurityException
- if a security manager is set and
             its
checkPermission
method doesn't allow
NetPermission("setSocketImpl")
.
Since:
12
ServerSocket
public
ServerSocket
()
             throws
IOException
Creates an unbound server socket.
Throws:
IOException
- IO error when opening the socket.
ServerSocket
public
ServerSocket
(int port)
throws
IOException
Creates a server socket, bound to the specified port. A port number
 of
0
means that the port number is automatically
 allocated, typically from an ephemeral port range. This port
 number can then be retrieved by calling
getLocalPort
.
The maximum queue length for incoming connection indications (a
 request to connect) is set to
50
. If a connection
 indication arrives when the queue is full, the connection is refused.
If the application has specified a server socket implementation
 factory, that factory's
createSocketImpl
method is called to
 create the actual socket implementation. Otherwise a system-default
 socket implementation is created.
If there is a security manager,
 its
checkListen
method is called
 with the
port
argument
 as its argument to ensure the operation is allowed.
 This could result in a SecurityException.
Parameters:
port
- the port number, or
0
to use a port
                   number that is automatically allocated.
Throws:
IOException
- if an I/O error occurs when opening the socket.
SecurityException
- if a security manager exists and its
checkListen
method doesn't allow the operation.
IllegalArgumentException
- if the port parameter is outside
             the specified range of valid port values, which is between
             0 and 65535, inclusive.
See Also:
SocketImpl
SecurityManager.checkListen(int)
ServerSocket
public
ServerSocket
(int port,
 int backlog)
throws
IOException
Creates a server socket and binds it to the specified local port
 number, with the specified backlog.
 A port number of
0
means that the port number is
 automatically allocated, typically from an ephemeral port range.
 This port number can then be retrieved by calling
getLocalPort
.
The maximum queue length for incoming connection indications (a
 request to connect) is set to the
backlog
parameter. If
 a connection indication arrives when the queue is full, the
 connection is refused.
If the application has specified a server socket implementation
 factory, that factory's
createSocketImpl
method is called to
 create the actual socket implementation. Otherwise a system-default
 socket implementation is created.
If there is a security manager,
 its
checkListen
method is called
 with the
port
argument
 as its argument to ensure the operation is allowed.
 This could result in a SecurityException.

 The
backlog
argument is the requested maximum number of
 pending connections on the socket. Its exact semantics are implementation
 specific. In particular, an implementation may impose a maximum length
 or may choose to ignore the parameter altogether. The value provided
 should be greater than
0
. If it is less than or equal to
0
, then an implementation specific default will be used.
Parameters:
port
- the port number, or
0
to use a port
                      number that is automatically allocated.
backlog
- requested maximum length of the queue of incoming
                      connections.
Throws:
IOException
- if an I/O error occurs when opening the socket.
SecurityException
- if a security manager exists and its
checkListen
method doesn't allow the operation.
IllegalArgumentException
- if the port parameter is outside
             the specified range of valid port values, which is between
             0 and 65535, inclusive.
See Also:
SocketImpl
SecurityManager.checkListen(int)
ServerSocket
public
ServerSocket
(int port,
 int backlog,
InetAddress
bindAddr)
throws
IOException
Create a server with the specified port, listen backlog, and
 local IP address to bind to.  The
bindAddr
argument
 can be used on a multi-homed host for a ServerSocket that
 will only accept connect requests to one of its addresses.
 If
bindAddr
is null, it will default accepting
 connections on any/all local addresses.
 The port must be between 0 and 65535, inclusive.
 A port number of
0
means that the port number is
 automatically allocated, typically from an ephemeral port range.
 This port number can then be retrieved by calling
getLocalPort
.
If there is a security manager, this method
 calls its
checkListen
method
 with the
port
argument
 as its argument to ensure the operation is allowed.
 This could result in a SecurityException.

 The
backlog
argument is the requested maximum number of
 pending connections on the socket. Its exact semantics are implementation
 specific. In particular, an implementation may impose a maximum length
 or may choose to ignore the parameter altogether. The value provided
 should be greater than
0
. If it is less than or equal to
0
, then an implementation specific default will be used.
Parameters:
port
- the port number, or
0
to use a port
              number that is automatically allocated.
backlog
- requested maximum length of the queue of incoming
                connections.
bindAddr
- the local InetAddress the server will bind to
Throws:
SecurityException
- if a security manager exists and
 its
checkListen
method doesn't allow the operation.
IOException
- if an I/O error occurs when opening the socket.
IllegalArgumentException
- if the port parameter is outside
             the specified range of valid port values, which is between
             0 and 65535, inclusive.
Since:
1.1
See Also:
SocketOptions
SocketImpl
SecurityManager.checkListen(int)
Method Details
bind
public
void
bind
(
SocketAddress
endpoint)
throws
IOException
Binds the
ServerSocket
to a specific address
 (IP address and port number).
If the address is
null
, then the system will pick up
 an ephemeral port and a valid local address to bind the socket.
Parameters:
endpoint
- The IP address and port number to bind to.
Throws:
IOException
- if the bind operation fails, or if the socket
                     is already bound.
SecurityException
- if a
SecurityManager
is present and
 its
checkListen
method doesn't allow the operation.
IllegalArgumentException
- if endpoint is a
          SocketAddress subclass not supported by this socket
Since:
1.4
bind
public
void
bind
(
SocketAddress
endpoint,
 int backlog)
throws
IOException
Binds the
ServerSocket
to a specific address
 (IP address and port number).
If the address is
null
, then the system will pick up
 an ephemeral port and a valid local address to bind the socket.
The
backlog
argument is the requested maximum number of
 pending connections on the socket. Its exact semantics are implementation
 specific. In particular, an implementation may impose a maximum length
 or may choose to ignore the parameter altogether. The value provided
 should be greater than
0
. If it is less than or equal to
0
, then an implementation specific default will be used.
Parameters:
endpoint
- The IP address and port number to bind to.
backlog
- requested maximum length of the queue of
                          incoming connections.
Throws:
IOException
- if the bind operation fails, or if the socket
                     is already bound.
SecurityException
- if a
SecurityManager
is present and
 its
checkListen
method doesn't allow the operation.
IllegalArgumentException
- if endpoint is a
          SocketAddress subclass not supported by this socket
Since:
1.4
getInetAddress
public
InetAddress
getInetAddress
()
Returns the local address of this server socket.
If the socket was bound prior to being
closed
,
 then this method will continue to return the local address
 after the socket is closed.
If there is a security manager set, its
checkConnect
method is
 called with the local address and
-1
as its arguments to see
 if the operation is allowed. If the operation is not allowed,
 the
loopback
address is returned.
Returns:
the address to which this socket is bound,
          or the loopback address if denied by the security manager,
          or
null
if the socket is unbound.
See Also:
SecurityManager.checkConnect(java.lang.String, int)
getLocalPort
public
int
getLocalPort
()
Returns the port number on which this socket is listening.
If the socket was bound prior to being
closed
,
 then this method will continue to return the port number
 after the socket is closed.
Returns:
the port number to which this socket is listening or
          -1 if the socket is not bound yet.
getLocalSocketAddress
public
SocketAddress
getLocalSocketAddress
()
Returns the address of the endpoint this socket is bound to.
If the socket was bound prior to being
closed
,
 then this method will continue to return the address of the endpoint
 after the socket is closed.
If there is a security manager set, its
checkConnect
method is
 called with the local address and
-1
as its arguments to see
 if the operation is allowed. If the operation is not allowed,
 a
SocketAddress
representing the
loopback
address and the local
 port to which the socket is bound is returned.
Returns:
a
SocketAddress
representing the local endpoint of
         this socket, or a
SocketAddress
representing the
         loopback address if denied by the security manager,
         or
null
if the socket is not bound yet.
Since:
1.4
See Also:
getInetAddress()
getLocalPort()
bind(SocketAddress)
SecurityManager.checkConnect(java.lang.String, int)
accept
public
Socket
accept
()
              throws
IOException
Listens for a connection to be made to this socket and accepts
 it. The method blocks until a connection is made.
This method is
interruptible
in the
 following circumstances:
The socket is
associated
with a
ServerSocketChannel
. In that
        case, interrupting a thread accepting a connection will close the
        underlying channel and cause this method to throw
ClosedByInterruptException
with the interrupt
        status set.
The socket uses the system-default socket implementation and a
virtual thread
is accepting a
        connection. In that case, interrupting the virtual thread will
        cause it to wakeup and close the socket. This method will then throw
SocketException
with the interrupt status set.
A new Socket
s
is created and, if there
 is a security manager,
 the security manager's
checkAccept
method is called
 with
s.getInetAddress().getHostAddress()
and
s.getPort()
as its arguments to ensure the operation is allowed.
 This could result in a SecurityException.
Implementation Note:
An instance of this class using a system-default
SocketImpl
accepts sockets with a
SocketImpl
of the same type, regardless
 of the
client socket implementation factory
, if one has been set.
Returns:
the new Socket
Throws:
IOException
- if an I/O error occurs when waiting for a
               connection.
SecurityException
- if a security manager exists and its
checkAccept
method doesn't allow the operation.
SocketTimeoutException
- if a timeout was previously set with setSoTimeout and
             the timeout has been reached.
IllegalBlockingModeException
- if this socket has an associated channel, the channel is in
             non-blocking mode, and there is no connection ready to be
             accepted
See Also:
SecurityManager.checkAccept(java.lang.String, int)
implAccept
protected final
void
implAccept
(
Socket
s)
throws
IOException
Subclasses of ServerSocket use this method to override accept()
 to return their own subclass of socket.  So a FooServerSocket
 will typically hand this method a newly created, unbound, FooSocket.
 On return from implAccept the FooSocket will be connected to a client.
The behavior of this method is unspecified when invoked with a
 socket that is not newly created and unbound. Any socket options set
 on the given socket prior to invoking this method may or may not be
 preserved when the connection is accepted. It may not be possible to
 accept a connection when this socket has a
SocketImpl
of one
 type and the given socket has a
SocketImpl
of a completely
 different type.
Implementation Note:
An instance of this class using a system-default
SocketImpl
can accept a connection with a Socket using a
SocketImpl
of
 the same type:
IOException
is thrown if the Socket is using
 a custom
SocketImpl
. An instance of this class using a
 custom
SocketImpl
cannot accept a connection with a Socket
 using a system-default
SocketImpl
.
Parameters:
s
- the Socket
Throws:
IllegalBlockingModeException
- if this socket has an associated channel,
         and the channel is in non-blocking mode
IOException
- if an I/O error occurs when waiting
         for a connection, or if it is not possible for this socket
         to accept a connection with the given socket
Since:
1.1
close
public
void
close
()
           throws
IOException
Closes this socket.

 Any thread currently blocked in
accept()
will throw
 a
SocketException
.
If this socket has an associated channel then the channel is closed
 as well.
Specified by:
close
in interface
AutoCloseable
Specified by:
close
in interface
Closeable
Throws:
IOException
- if an I/O error occurs when closing the socket.
getChannel
public
ServerSocketChannel
getChannel
()
Returns the unique
ServerSocketChannel
object
 associated with this socket, if any.
A server socket will have a channel if, and only if, the channel
 itself was created via the
ServerSocketChannel.open
method.
Returns:
the server-socket channel associated with this socket,
          or
null
if this socket was not created
          for a channel
Since:
1.4
isBound
public
boolean
isBound
()
Returns the binding state of the ServerSocket.
If the socket was bound prior to being
closed
,
 then this method will continue to return
true
after the socket is closed.
Returns:
true if the ServerSocket successfully bound to an address
Since:
1.4
isClosed
public
boolean
isClosed
()
Returns the closed state of the ServerSocket.
Returns:
true if the socket has been closed
Since:
1.4
setSoTimeout
public
void
setSoTimeout
(int timeout)
throws
SocketException
Enable/disable
SO_TIMEOUT
with the
 specified timeout, in milliseconds.  With this option set to a positive
 timeout value, a call to accept() for this ServerSocket
 will block for only this amount of time.  If the timeout expires,
 a
java.net.SocketTimeoutException
is raised, though the
 ServerSocket is still valid. A timeout of zero is interpreted as an
 infinite timeout.
 The option
must
be enabled prior to entering the blocking
 operation to have effect.
Parameters:
timeout
- the specified timeout, in milliseconds
Throws:
SocketException
- if there is an error in the underlying protocol,
          such as a TCP error
IllegalArgumentException
- if
timeout
is negative
Since:
1.1
See Also:
getSoTimeout()
getSoTimeout
public
int
getSoTimeout
()
                 throws
IOException
Retrieve setting for
SO_TIMEOUT
.
 0 returns implies that the option is disabled (i.e., timeout of infinity).
Returns:
the
SO_TIMEOUT
value
Throws:
IOException
- if an I/O error occurs
Since:
1.1
See Also:
setSoTimeout(int)
setReuseAddress
public
void
setReuseAddress
(boolean on)
throws
SocketException
Enable/disable the
SO_REUSEADDR
socket option.
When a TCP connection is closed the connection may remain
 in a timeout state for a period of time after the connection
 is closed (typically known as the
TIME_WAIT
state
 or
2MSL
wait state).
 For applications using a well known socket address or port
 it may not be possible to bind a socket to the required
SocketAddress
if there is a connection in the
 timeout state involving the socket address or port.
Enabling
SO_REUSEADDR
prior to
 binding the socket using
bind(SocketAddress)
allows the socket
 to be bound even though a previous connection is in a timeout state.
When a
ServerSocket
is created the initial setting
 of
SO_REUSEADDR
is not defined.
 Applications can use
getReuseAddress()
to determine the initial
 setting of
SO_REUSEADDR
.
The behaviour when
SO_REUSEADDR
is
 enabled or disabled after a socket is bound (See
isBound()
)
 is not defined.
Parameters:
on
- whether to enable or disable the socket option
Throws:
SocketException
- if an error occurs enabling or
            disabling the
SO_REUSEADDR
socket option, or the socket is closed.
Since:
1.4
See Also:
getReuseAddress()
bind(SocketAddress)
isBound()
isClosed()
getReuseAddress
public
boolean
getReuseAddress
()
                        throws
SocketException
Tests if
SO_REUSEADDR
is enabled.
Returns:
a
boolean
indicating whether or not
SO_REUSEADDR
is enabled.
Throws:
SocketException
- if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.4
See Also:
setReuseAddress(boolean)
toString
public
String
toString
()
Returns the implementation address and implementation port of
 this socket as a
String
.
If there is a security manager set, and this socket is
bound
, its
checkConnect
method is
 called with the local address and
-1
as its arguments to see
 if the operation is allowed. If the operation is not allowed,
 an
InetAddress
representing the
loopback
address is returned as
 the implementation address.
Overrides:
toString
in class
Object
Returns:
a string representation of this socket.
setSocketFactory
@Deprecated
(
since
="17")
public static
void
setSocketFactory
(
SocketImplFactory
fac)
throws
IOException
Deprecated.
Use a
ServerSocketFactory
and subclass
ServerSocket
directly.
This method provided a way in early JDK releases to replace the
    system wide implementation of
ServerSocket
. It has been mostly
    obsolete since Java 1.4. If required, a
ServerSocket
can be
    created to use a custom implementation by extending
ServerSocket
and using the
protected
    constructor
that takes an
implementation
as a parameter.
Sets the server socket implementation factory for the
 application. The factory can be specified only once.
When an application creates a new server socket, the socket
 implementation factory's
createSocketImpl
method is
 called to create the actual socket implementation.
Passing
null
to the method is a no-op unless the factory
 was already set.
If there is a security manager, this method first calls
 the security manager's
checkSetFactory
method
 to ensure the operation is allowed.
 This could result in a SecurityException.
Parameters:
fac
- the desired factory.
Throws:
IOException
- if an I/O error occurs when setting the
               socket factory.
SocketException
- if the factory has already been defined.
SecurityException
- if a security manager exists and its
checkSetFactory
method doesn't allow the operation.
See Also:
SocketImplFactory.createSocketImpl()
SecurityManager.checkSetFactory()
setReceiveBufferSize
public
void
setReceiveBufferSize
(int size)
throws
SocketException
Sets a default proposed value for the
SO_RCVBUF
option for sockets
 accepted from this
ServerSocket
. The value actually set
 in the accepted socket must be determined by calling
Socket.getReceiveBufferSize()
after the socket
 is returned by
accept()
.
The value of
SO_RCVBUF
is used both to
 set the size of the internal socket receive buffer, and to set the size
 of the TCP receive window that is advertised to the remote peer.
It is possible to change the value subsequently, by calling
Socket.setReceiveBufferSize(int)
. However, if the application
 wishes to allow a receive window larger than 64K bytes, as defined by RFC1323
 then the proposed value must be set in the ServerSocket
before
it is bound to a local address. This implies, that the ServerSocket must be
 created with the no-argument constructor, then setReceiveBufferSize() must
 be called and lastly the ServerSocket is bound to an address by calling bind().
Failure to do this will not cause an error, and the buffer size may be set to the
 requested value but the TCP receive window in sockets accepted from
 this ServerSocket will be no larger than 64K bytes.
Parameters:
size
- the size to which to set the receive buffer
 size. This value must be greater than 0.
Throws:
SocketException
- if there is an error
 in the underlying protocol, such as a TCP error.
IllegalArgumentException
- if the
 value is 0 or is negative.
Since:
1.4
See Also:
getReceiveBufferSize()
getReceiveBufferSize
public
int
getReceiveBufferSize
()
                         throws
SocketException
Gets the value of the
SO_RCVBUF
option
 for this
ServerSocket
, that is the proposed buffer size that
 will be used for Sockets accepted from this
ServerSocket
.
Note, the value actually set in the accepted socket is determined by
 calling
Socket.getReceiveBufferSize()
.
Returns:
the value of the
SO_RCVBUF
option for this
Socket
.
Throws:
SocketException
- if there is an error
            in the underlying protocol, such as a TCP error.
Since:
1.4
See Also:
setReceiveBufferSize(int)
setPerformancePreferences
public
void
setPerformancePreferences
(int connectionTime,
 int latency,
 int bandwidth)
Sets performance preferences for this ServerSocket.
Sockets use the TCP/IP protocol by default.  Some implementations
 may offer alternative protocols which have different performance
 characteristics than TCP/IP.  This method allows the application to
 express its own preferences as to how these tradeoffs should be made
 when the implementation chooses from the available protocols.
Performance preferences are described by three integers
 whose values indicate the relative importance of short connection time,
 low latency, and high bandwidth.  The absolute values of the integers
 are irrelevant; in order to choose a protocol the values are simply
 compared, with larger values indicating stronger preferences.  If the
 application prefers short connection time over both low latency and high
 bandwidth, for example, then it could invoke this method with the values
(1, 0, 0)
.  If the application prefers high bandwidth above low
 latency, and low latency above short connection time, then it could
 invoke this method with the values
(0, 1, 2)
.
Invoking this method after this socket has been bound
 will have no effect. This implies that in order to use this capability
 requires the socket to be created with the no-argument constructor.
Parameters:
connectionTime
- An
int
expressing the relative importance of a short
         connection time
latency
- An
int
expressing the relative importance of low
         latency
bandwidth
- An
int
expressing the relative importance of high
         bandwidth
Since:
1.5
setOption
public
<T>
ServerSocket
setOption
(
SocketOption
<T> name,
 T value)
throws
IOException
Sets the value of a socket option.
Type Parameters:
T
- The type of the socket option value
Parameters:
name
- The socket option
value
- The value of the socket option. A value of
null
may be valid for some options.
Returns:
this ServerSocket
Throws:
UnsupportedOperationException
- if the server socket does not
         support the option.
IllegalArgumentException
- if the value is not valid for
         the option.
IOException
- if an I/O error occurs, or if the socket is closed.
NullPointerException
- if name is
null
SecurityException
- if a security manager is set and if the socket
         option requires a security permission and if the caller does
         not have the required permission.
StandardSocketOptions
do not require any security permission.
Since:
9
getOption
public
<T>
T
getOption
(
SocketOption
<T> name)
throws
IOException
Returns the value of a socket option.
Type Parameters:
T
- The type of the socket option value
Parameters:
name
- The socket option
Returns:
The value of the socket option.
Throws:
UnsupportedOperationException
- if the server socket does not
         support the option.
IOException
- if an I/O error occurs, or if the socket is closed.
NullPointerException
- if name is
null
SecurityException
- if a security manager is set and if the socket
         option requires a security permission and if the caller does
         not have the required permission.
StandardSocketOptions
do not require any security permission.
Since:
9
supportedOptions
public
Set
<
SocketOption
<?>>
supportedOptions
()
Returns a set of the socket options supported by this server socket.

 This method will continue to return the set of options even after
 the socket has been closed.
Returns:
A set of the socket options supported by this socket. This set
         may be empty if the socket's SocketImpl cannot be created.
Since:
9
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.