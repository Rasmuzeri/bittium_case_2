Uses of Class java.net.MalformedURLException (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Class
java.net.MalformedURLException
Packages that use
MalformedURLException
Package
Description
java.io
Provides for system input and output through data streams,
 serialization and the file system.
java.net
Provides the classes for implementing networking applications.
java.rmi
Provides the RMI package.
java.rmi.server
Provides classes and interfaces for supporting the server side of RMI.
javax.management.remote
Interfaces for remote access to
        JMX MBean servers.
Uses of
MalformedURLException
in
java.io
Methods in
java.io
that throw
MalformedURLException
Modifier and Type
Method
Description
URL
File.
toURL
()
Deprecated.
This method does not automatically escape characters that
 are illegal in URLs.
Uses of
MalformedURLException
in
java.net
Methods in
java.net
that throw
MalformedURLException
Modifier and Type
Method
Description
static
URL
URL.
of
(
URI
uri,
URLStreamHandler
handler)
Creates a URL from a URI, as if by invoking
uri.toURL()
, but
 associating it with the given
URLStreamHandler
, if allowed.
URL
URI.
toURL
()
Constructs a URL from this URI.
Constructors in
java.net
that throw
MalformedURLException
Modifier
Constructor
Description
protected
JarURLConnection
(
URL
url)
Creates the new JarURLConnection to the specified URL.
URL
(
String
spec)
Deprecated.
Use
URI.toURL()
to construct an instance of URL.
URL
(
String
protocol,
String
host,
 int port,
String
file)
Deprecated.
Use
URI.toURL()
to construct an instance of URL.
URL
(
String
protocol,
String
host,
 int port,
String
file,
URLStreamHandler
handler)
Deprecated.
Use
URL.of(URI, URLStreamHandler)
to construct an instance of URL
 associated with a custom protocol handler.
URL
(
String
protocol,
String
host,
String
file)
Deprecated.
Use
URI.toURL()
to construct an instance of URL.
URL
(
URL
context,
String
spec)
Deprecated.
Use
URI.toURL()
to construct an instance of URL.
URL
(
URL
context,
String
spec,
URLStreamHandler
handler)
Deprecated.
Use
URL.of(URI, URLStreamHandler)
to construct an instance of URL
 associated with a custom protocol handler.
Uses of
MalformedURLException
in
java.rmi
Methods in
java.rmi
that throw
MalformedURLException
Modifier and Type
Method
Description
static void
Naming.
bind
(
String
name,
Remote
obj)
Binds the specified
name
to a remote object.
static
String
[]
Naming.
list
(
String
name)
Returns an array of the names bound in the registry.
static
Remote
Naming.
lookup
(
String
name)
Returns a reference, a stub, for the remote object associated
 with the specified
name
.
static void
Naming.
rebind
(
String
name,
Remote
obj)
Rebinds the specified name to a new remote object.
static void
Naming.
unbind
(
String
name)
Destroys the binding for the specified name that is associated
 with a remote object.
Uses of
MalformedURLException
in
java.rmi.server
Methods in
java.rmi.server
that throw
MalformedURLException
Modifier and Type
Method
Description
static
ClassLoader
RMIClassLoader.
getClassLoader
(
String
codebase)
Returns a class loader that loads classes from the given codebase
 URL path.
abstract
ClassLoader
RMIClassLoaderSpi.
getClassLoader
(
String
codebase)
Provides the implementation for
RMIClassLoader.getClassLoader(String)
.
Class
<?>
LoaderHandler.
loadClass
(
String
name)
Deprecated.
no replacement
Class
<?>
LoaderHandler.
loadClass
(
URL
codebase,
String
name)
Deprecated.
no replacement
static
Class
<?>
RMIClassLoader.
loadClass
(
String
name)
Deprecated.
replaced by
loadClass(String,String)
method
static
Class
<?>
RMIClassLoader.
loadClass
(
String
codebase,
String
name)
Loads a class from a codebase URL path.
static
Class
<?>
RMIClassLoader.
loadClass
(
String
codebase,
String
name,
ClassLoader
defaultLoader)
Loads a class from a codebase URL path, optionally using the
 supplied loader.
static
Class
<?>
RMIClassLoader.
loadClass
(
URL
codebase,
String
name)
Loads a class from a codebase URL.
abstract
Class
<?>
RMIClassLoaderSpi.
loadClass
(
String
codebase,
String
name,
ClassLoader
defaultLoader)
Provides the implementation for
RMIClassLoader.loadClass(URL,String)
,
RMIClassLoader.loadClass(String,String)
, and
RMIClassLoader.loadClass(String,String,ClassLoader)
.
static
Class
<?>
RMIClassLoader.
loadProxyClass
(
String
codebase,
String
[] interfaces,
ClassLoader
defaultLoader)
Loads a dynamic proxy class (see
Proxy
)
 that implements a set of interfaces with the given names
 from a codebase URL path.
abstract
Class
<?>
RMIClassLoaderSpi.
loadProxyClass
(
String
codebase,
String
[] interfaces,
ClassLoader
defaultLoader)
Provides the implementation for
RMIClassLoader.loadProxyClass(String,String[],ClassLoader)
.
Uses of
MalformedURLException
in
javax.management.remote
Constructors in
javax.management.remote
that throw
MalformedURLException
Modifier
Constructor
Description
JMXServiceURL
(
String
serviceURL)
Constructs a
JMXServiceURL
by parsing a Service URL
 string.
JMXServiceURL
(
String
protocol,
String
host,
 int port)
Constructs a
JMXServiceURL
with the given protocol,
 host, and port.
JMXServiceURL
(
String
protocol,
String
host,
 int port,
String
urlPath)
Constructs a
JMXServiceURL
with the given parts.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.