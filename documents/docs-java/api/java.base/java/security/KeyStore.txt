KeyStore (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested
|
Field |
Constr
|
Method
Detail:
Field |
Constr
|
Method
SEARCH
Module
java.base
Package
java.security
Class KeyStore
java.lang.Object
java.security.KeyStore
public class
KeyStore
extends
Object
This class represents a storage facility for cryptographic
 keys and certificates.
A
KeyStore
manages different types of entries.
 Each type of entry implements the
KeyStore.Entry
interface.
 Three basic
KeyStore.Entry
implementations are provided:
KeyStore.PrivateKeyEntry
This type of entry holds a cryptographic
PrivateKey
,
 which is optionally stored in a protected format to prevent
 unauthorized access.  It is also accompanied by a certificate chain
 for the corresponding public key.
Private keys and certificate chains are used by a given entity for
 self-authentication. Applications for this authentication include software
 distribution organizations which sign JAR files as part of releasing
 and/or licensing software.
KeyStore.SecretKeyEntry
This type of entry holds a cryptographic
SecretKey
,
 which is optionally stored in a protected format to prevent
 unauthorized access.
KeyStore.TrustedCertificateEntry
This type of entry contains a single public key
Certificate
belonging to another party. It is called a
trusted certificate
because the keystore owner trusts that the public key in the certificate
 indeed belongs to the identity identified by the
subject
(owner)
 of the certificate.
This type of entry can be used to authenticate other parties.
Each entry in a keystore is identified by an "alias" string. In the
 case of private keys and their associated certificate chains, these strings
 distinguish among the different ways in which the entity may authenticate
 itself. For example, the entity may authenticate itself using different
 certificate authorities, or using different public key algorithms.
Whether aliases are case-sensitive is implementation dependent. In order
 to avoid problems, it is recommended not to use aliases in a KeyStore that
 only differ in case.
Whether keystores are persistent, and the mechanisms used by the
 keystore if it is persistent, are not specified here. This allows
 use of a variety of techniques for protecting sensitive (e.g., private or
 secret) keys. Smart cards or other integrated cryptographic engines
 (SafeKeyper) are one option, and simpler mechanisms such as files may also
 be used (in a variety of formats).
Typical ways to request a
KeyStore
object include
 specifying an existing keystore file,
 relying on the default type and providing a specific keystore type.
To specify an existing keystore file:
// get keystore password
    char[] password = getPassword();

    // probe the keystore file and load the keystore entries
    KeyStore ks = KeyStore.getInstance(new File("keyStoreName"), password);
The system will probe the specified file to determine its keystore type
 and return a keystore implementation with its entries already loaded.
 When this approach is used there is no need to call the keystore's
load
method.
To rely on the default type:
KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
The system will return a keystore implementation for the default type.
To provide a specific keystore type:
KeyStore ks = KeyStore.getInstance("JKS");
The system will return the most preferred implementation of the
 specified keystore type available in the environment.
Before a keystore can be accessed, it must be
loaded
(unless it was already loaded during instantiation).
KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());

    // get user password and file input stream
    char[] password = getPassword();

    try (FileInputStream fis = new FileInputStream("keyStoreName")) {
        ks.load(fis, password);
    }
To create an empty keystore using the above
load
method,
 pass
null
as the
InputStream
argument.
Once the keystore has been loaded, it is possible
 to read existing entries from the keystore, or to write new entries
 into the keystore:
KeyStore.PasswordProtection protParam =
        new KeyStore.PasswordProtection(password);
    try (FileOutputStream fos = new FileOutputStream("newKeyStoreName")) {
        // get my private key
        KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry)
            ks.getEntry("privateKeyAlias", protParam);
        PrivateKey myPrivateKey = pkEntry.getPrivateKey();

        // save my secret key
        javax.crypto.SecretKey mySecretKey;
        KeyStore.SecretKeyEntry skEntry =
            new KeyStore.SecretKeyEntry(mySecretKey);
        ks.setEntry("secretKeyAlias", skEntry, protParam);

        // store away the keystore
        ks.store(fos, password);
    } finally {
        protParam.destroy();
    }
Note that although the same password may be used to
 load the keystore, to protect the private key entry,
 to protect the secret key entry, and to store the keystore
 (as is shown in the sample code above),
 different passwords or other protection parameters
 may also be used.
Every implementation of the Java platform is required to support
 the following standard
KeyStore
type:
PKCS12
This type is described in the
KeyStore section
of the
 Java Security Standard Algorithm Names Specification.
 Consult the release documentation for your implementation to see if any
 other types are supported.
Since:
1.2
See Also:
PrivateKey
SecretKey
Certificate
Nested Class Summary
Nested Classes
Modifier and Type
Class
Description
static class
KeyStore.Builder
A description of a to-be-instantiated
KeyStore
object.
static class
KeyStore.CallbackHandlerProtection
A
ProtectionParameter
encapsulating a CallbackHandler.
static interface
KeyStore.Entry
A marker interface for
KeyStore
entry types.
static interface
KeyStore.LoadStoreParameter
A marker interface for
KeyStore
load
and
store
parameters.
static class
KeyStore.PasswordProtection
A password-based implementation of
ProtectionParameter
.
static final class
KeyStore.PrivateKeyEntry
A
KeyStore
entry that holds a
PrivateKey
and corresponding certificate chain.
static interface
KeyStore.ProtectionParameter
A marker interface for keystore protection parameters.
static final class
KeyStore.SecretKeyEntry
A
KeyStore
entry that holds a
SecretKey
.
static final class
KeyStore.TrustedCertificateEntry
A
KeyStore
entry that holds a trusted
Certificate
.
Constructor Summary
Constructors
Modifier
Constructor
Description
protected
KeyStore
(
KeyStoreSpi
keyStoreSpi,
Provider
provider,
String
type)
Creates a
KeyStore
object of the given type, and encapsulates
 the given provider implementation (SPI object) in it.
Method Summary
All Methods
Static Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
final
Enumeration
<
String
>
aliases
()
Lists all the alias names of this keystore.
final boolean
containsAlias
(
String
alias)
Checks if the given alias exists in this keystore.
final void
deleteEntry
(
String
alias)
Deletes the entry identified by the given alias from this keystore.
final boolean
entryInstanceOf
(
String
alias,
Class
<? extends
KeyStore.Entry
> entryClass)
Determines if the keystore
Entry
for the specified
alias
is an instance or subclass of the specified
entryClass
.
final
Set
<
KeyStore.Entry.Attribute
>
getAttributes
(
String
alias)
Retrieves the attributes associated with the given alias.
final
Certificate
getCertificate
(
String
alias)
Returns the certificate associated with the given alias.
final
String
getCertificateAlias
(
Certificate
cert)
Returns the (alias) name of the first keystore entry whose certificate
 matches the given certificate.
final
Certificate
[]
getCertificateChain
(
String
alias)
Returns the certificate chain associated with the given alias.
final
Date
getCreationDate
(
String
alias)
Returns the creation date of the entry identified by the given alias.
static final
String
getDefaultType
()
Returns the default keystore type as specified by the
keystore.type
security property, or the string
 "jks" (acronym for "Java keystore")
 if no such property exists.
final
KeyStore.Entry
getEntry
(
String
alias,
KeyStore.ProtectionParameter
protParam)
Gets a keystore
Entry
for the specified alias
 with the specified protection parameter.
static final
KeyStore
getInstance
(
File
file,
 char[] password)
Returns a loaded keystore object of the appropriate keystore type.
static final
KeyStore
getInstance
(
File
file,
KeyStore.LoadStoreParameter
param)
Returns a loaded keystore object of the appropriate keystore type.
static
KeyStore
getInstance
(
String
type)
Returns a
KeyStore
object of the specified type.
static
KeyStore
getInstance
(
String
type,
String
provider)
Returns a
KeyStore
object of the specified type.
static
KeyStore
getInstance
(
String
type,
Provider
provider)
Returns a
KeyStore
object of the specified type.
final
Key
getKey
(
String
alias,
 char[] password)
Returns the key associated with the given alias, using the given
 password to recover it.
final
Provider
getProvider
()
Returns the provider of this keystore.
final
String
getType
()
Returns the type of this keystore.
final boolean
isCertificateEntry
(
String
alias)
Returns
true
if the entry identified by the given alias
 was created by a call to
setCertificateEntry
,
 or created by a call to
setEntry
with a
TrustedCertificateEntry
.
final boolean
isKeyEntry
(
String
alias)
Returns
true
if the entry identified by the given alias
 was created by a call to
setKeyEntry
,
 or created by a call to
setEntry
with a
PrivateKeyEntry
or a
SecretKeyEntry
.
final void
load
(
InputStream
stream,
 char[] password)
Loads this keystore from the given input stream.
final void
load
(
KeyStore.LoadStoreParameter
param)
Loads this keystore using the given
LoadStoreParameter
.
final void
setCertificateEntry
(
String
alias,
Certificate
cert)
Assigns the given trusted certificate to the given alias.
final void
setEntry
(
String
alias,
KeyStore.Entry
entry,
KeyStore.ProtectionParameter
protParam)
Saves a keystore
Entry
under the specified alias.
final void
setKeyEntry
(
String
alias,
 byte[] key,
Certificate
[] chain)
Assigns the given key (that has already been protected) to the given
 alias.
final void
setKeyEntry
(
String
alias,
Key
key,
 char[] password,
Certificate
[] chain)
Assigns the given key to the given alias, protecting it with the given
 password.
final int
size
()
Retrieves the number of entries in this keystore.
final void
store
(
OutputStream
stream,
 char[] password)
Stores this keystore to the given output stream, and protects its
 integrity with the given password.
final void
store
(
KeyStore.LoadStoreParameter
param)
Stores this keystore using the given
LoadStoreParameter
.
Methods declared in class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Constructor Details
KeyStore
protected
KeyStore
(
KeyStoreSpi
keyStoreSpi,
Provider
provider,
String
type)
Creates a
KeyStore
object of the given type, and encapsulates
 the given provider implementation (SPI object) in it.
Parameters:
keyStoreSpi
- the provider implementation.
provider
- the provider.
type
- the keystore type.
Method Details
getInstance
public static
KeyStore
getInstance
(
String
type)
throws
KeyStoreException
Returns a
KeyStore
object of the specified type.
This method traverses the list of registered security providers,
 starting with the most preferred provider.
 A new
KeyStore
object encapsulating the
KeyStoreSpi
implementation from the first
 provider that supports the specified type is returned.
Note that the list of registered providers may be retrieved via
 the
Security.getProviders()
method.
Implementation Note:
The JDK Reference Implementation additionally uses the
jdk.security.provider.preferred
Security
property to determine
 the preferred provider order for the specified algorithm. This
 may be different from the order of providers returned by
Security.getProviders()
.
Parameters:
type
- the type of keystore.
 See the KeyStore section in the
Java Security Standard Algorithm Names Specification
for information about standard keystore types.
Returns:
a keystore object of the specified type
Throws:
KeyStoreException
- if no provider supports a
KeyStoreSpi
implementation for the
         specified type
NullPointerException
- if
type
is
null
See Also:
Provider
getInstance
public static
KeyStore
getInstance
(
String
type,
String
provider)
throws
KeyStoreException
,
NoSuchProviderException
Returns a
KeyStore
object of the specified type.
A new
KeyStore
object encapsulating the
KeyStoreSpi
implementation from the specified provider
 is returned.  The specified provider must be registered
 in the security provider list.
Note that the list of registered providers may be retrieved via
 the
Security.getProviders()
method.
Parameters:
type
- the type of keystore.
 See the KeyStore section in the
Java Security Standard Algorithm Names Specification
for information about standard keystore types.
provider
- the name of the provider.
Returns:
a keystore object of the specified type
Throws:
IllegalArgumentException
- if the provider name is
null
or empty
KeyStoreException
- if a
KeyStoreSpi
implementation for the specified type is not
         available from the specified provider
NoSuchProviderException
- if the specified provider is not
         registered in the security provider list
NullPointerException
- if
type
is
null
See Also:
Provider
getInstance
public static
KeyStore
getInstance
(
String
type,
Provider
provider)
throws
KeyStoreException
Returns a
KeyStore
object of the specified type.
A new
KeyStore
object encapsulating the
KeyStoreSpi
implementation from the specified provider
 object is returned.  Note that the specified provider object
 does not have to be registered in the provider list.
Parameters:
type
- the type of keystore.
 See the KeyStore section in the
Java Security Standard Algorithm Names Specification
for information about standard keystore types.
provider
- the provider.
Returns:
a keystore object of the specified type
Throws:
IllegalArgumentException
- if the specified provider is
null
KeyStoreException
- if
KeyStoreSpi
implementation for the specified type is not available
         from the specified
Provider
object
NullPointerException
- if
type
is
null
Since:
1.4
See Also:
Provider
getDefaultType
public static final
String
getDefaultType
()
Returns the default keystore type as specified by the
keystore.type
security property, or the string
 "jks" (acronym for "Java keystore")
 if no such property exists.
The default keystore type can be used by applications that do not
 want to use a hard-coded keystore type when calling one of the
getInstance
methods, and want to provide a default keystore
 type in case a user does not specify its own.
The default keystore type can be changed by setting the value of the
keystore.type
security property to the desired keystore type.
Returns:
the default keystore type as specified by the
keystore.type
security property, or the string "jks"
 if no such property exists.
See Also:
security properties
getProvider
public final
Provider
getProvider
()
Returns the provider of this keystore.
Returns:
the provider of this keystore.
getType
public final
String
getType
()
Returns the type of this keystore.
Returns:
the type of this keystore.
getAttributes
public final
Set
<
KeyStore.Entry.Attribute
>
getAttributes
(
String
alias)
throws
KeyStoreException
Retrieves the attributes associated with the given alias.
Parameters:
alias
- the alias name
Returns:
an unmodifiable
Set
of attributes. This set is
      empty if the
KeyStoreSpi
implementation has not overridden
KeyStoreSpi.engineGetAttributes(String)
, or the given
      alias does not exist, or there are no attributes associated
      with the alias. This set may also be empty for
PrivateKeyEntry
or
SecretKeyEntry
entries that contain protected attributes and are only available
      through the
KeyStore.Entry.getAttributes()
method after the entry
      is extracted.
Throws:
KeyStoreException
- if the keystore has not been initialized
 (loaded).
NullPointerException
- if
alias
is
null
Since:
18
getKey
public final
Key
getKey
(
String
alias,
 char[] password)
throws
KeyStoreException
,
NoSuchAlgorithmException
,
UnrecoverableKeyException
Returns the key associated with the given alias, using the given
 password to recover it.  The key must have been associated with
 the alias by a call to
setKeyEntry
,
 or by a call to
setEntry
with a
PrivateKeyEntry
or
SecretKeyEntry
.
Parameters:
alias
- the alias name
password
- the password for recovering the key
Returns:
the requested key, or
null
if the given alias does
 not exist or does not identify a key-related entry.
Throws:
KeyStoreException
- if the keystore has not been initialized
 (loaded).
NoSuchAlgorithmException
- if the algorithm for recovering the
 key cannot be found
UnrecoverableKeyException
- if the key cannot be recovered
 (e.g., the given password is wrong).
getCertificateChain
public final
Certificate
[]
getCertificateChain
(
String
alias)
throws
KeyStoreException
Returns the certificate chain associated with the given alias.
 The certificate chain must have been associated with the alias
 by a call to
setKeyEntry
,
 or by a call to
setEntry
with a
PrivateKeyEntry
.
Parameters:
alias
- the alias name
Returns:
the certificate chain (ordered with the user's certificate first
 followed by zero or more certificate authorities), or
null
if the given alias does not exist or does not contain a certificate chain
Throws:
KeyStoreException
- if the keystore has not been initialized
 (loaded).
getCertificate
public final
Certificate
getCertificate
(
String
alias)
throws
KeyStoreException
Returns the certificate associated with the given alias.
If the given alias name identifies an entry
 created by a call to
setCertificateEntry
,
 or created by a call to
setEntry
with a
TrustedCertificateEntry
,
 then the trusted certificate contained in that entry is returned.
If the given alias name identifies an entry
 created by a call to
setKeyEntry
,
 or created by a call to
setEntry
with a
PrivateKeyEntry
,
 then the first element of the certificate chain in that entry
 is returned.
Parameters:
alias
- the alias name
Returns:
the certificate, or
null
if the given alias does not
 exist or does not contain a certificate.
Throws:
KeyStoreException
- if the keystore has not been initialized
 (loaded).
getCreationDate
public final
Date
getCreationDate
(
String
alias)
throws
KeyStoreException
Returns the creation date of the entry identified by the given alias.
Parameters:
alias
- the alias name
Returns:
the creation date of this entry, or
null
if the given
 alias does not exist
Throws:
KeyStoreException
- if the keystore has not been initialized
 (loaded).
setKeyEntry
public final
void
setKeyEntry
(
String
alias,
Key
key,
 char[] password,
Certificate
[] chain)
throws
KeyStoreException
Assigns the given key to the given alias, protecting it with the given
 password.
If the given key is of type
java.security.PrivateKey
,
 it must be accompanied by a certificate chain certifying the
 corresponding public key.
If the given alias already exists, the keystore information
 associated with it is overridden by the given key (and possibly
 certificate chain).
Parameters:
alias
- the alias name
key
- the key to be associated with the alias
password
- the password to protect the key
chain
- the certificate chain for the corresponding public
 key (only required if the given key is of type
java.security.PrivateKey
).
Throws:
KeyStoreException
- if the keystore has not been initialized
 (loaded), the given key cannot be protected, or this operation fails
 for some other reason
setKeyEntry
public final
void
setKeyEntry
(
String
alias,
 byte[] key,
Certificate
[] chain)
throws
KeyStoreException
Assigns the given key (that has already been protected) to the given
 alias.
If the protected key is of type
java.security.PrivateKey
, it must be accompanied by a
 certificate chain certifying the corresponding public key. If the
 underlying keystore implementation is of type
jks
,
key
must be encoded as an
EncryptedPrivateKeyInfo
as defined in the PKCS #8 standard.
If the given alias already exists, the keystore information
 associated with it is overridden by the given key (and possibly
 certificate chain).
Parameters:
alias
- the alias name
key
- the key (in protected format) to be associated with the alias
chain
- the certificate chain for the corresponding public
          key (only useful if the protected key is of type
java.security.PrivateKey
).
Throws:
KeyStoreException
- if the keystore has not been initialized
 (loaded), or if this operation fails for some other reason.
setCertificateEntry
public final
void
setCertificateEntry
(
String
alias,
Certificate
cert)
throws
KeyStoreException
Assigns the given trusted certificate to the given alias.
If the given alias identifies an existing entry
 created by a call to
setCertificateEntry
,
 or created by a call to
setEntry
with a
TrustedCertificateEntry
,
 the trusted certificate in the existing entry
 is overridden by the given certificate.
Parameters:
alias
- the alias name
cert
- the certificate
Throws:
KeyStoreException
- if the keystore has not been initialized,
 or the given alias already exists and does not identify an
 entry containing a trusted certificate,
 or this operation fails for some other reason.
deleteEntry
public final
void
deleteEntry
(
String
alias)
throws
KeyStoreException
Deletes the entry identified by the given alias from this keystore.
Parameters:
alias
- the alias name
Throws:
KeyStoreException
- if the keystore has not been initialized,
 or if the entry cannot be removed.
aliases
public final
Enumeration
<
String
>
aliases
()
                                  throws
KeyStoreException
Lists all the alias names of this keystore.
Returns:
enumeration of the alias names
Throws:
KeyStoreException
- if the keystore has not been initialized
 (loaded).
containsAlias
public final
boolean
containsAlias
(
String
alias)
throws
KeyStoreException
Checks if the given alias exists in this keystore.
Parameters:
alias
- the alias name
Returns:
true
if the alias exists,
false
otherwise
Throws:
KeyStoreException
- if the keystore has not been initialized
 (loaded).
size
public final
int
size
()
               throws
KeyStoreException
Retrieves the number of entries in this keystore.
Returns:
the number of entries in this keystore
Throws:
KeyStoreException
- if the keystore has not been initialized
 (loaded).
isKeyEntry
public final
boolean
isKeyEntry
(
String
alias)
throws
KeyStoreException
Returns
true
if the entry identified by the given alias
 was created by a call to
setKeyEntry
,
 or created by a call to
setEntry
with a
PrivateKeyEntry
or a
SecretKeyEntry
.
Parameters:
alias
- the alias for the keystore entry to be checked
Returns:
true
if the entry identified by the given alias is a
 key-related entry,
false
otherwise.
Throws:
KeyStoreException
- if the keystore has not been initialized
 (loaded).
isCertificateEntry
public final
boolean
isCertificateEntry
(
String
alias)
throws
KeyStoreException
Returns
true
if the entry identified by the given alias
 was created by a call to
setCertificateEntry
,
 or created by a call to
setEntry
with a
TrustedCertificateEntry
.
Parameters:
alias
- the alias for the keystore entry to be checked
Returns:
true
if the entry identified by the given alias
 contains a trusted certificate,
false
otherwise.
Throws:
KeyStoreException
- if the keystore has not been initialized
 (loaded).
getCertificateAlias
public final
String
getCertificateAlias
(
Certificate
cert)
throws
KeyStoreException
Returns the (alias) name of the first keystore entry whose certificate
 matches the given certificate.
This method attempts to match the given certificate with each
 keystore entry. If the entry being considered was
 created by a call to
setCertificateEntry
,
 or created by a call to
setEntry
with a
TrustedCertificateEntry
,
 then the given certificate is compared to that entry's certificate.
If the entry being considered was
 created by a call to
setKeyEntry
,
 or created by a call to
setEntry
with a
PrivateKeyEntry
,
 then the given certificate is compared to the first
 element of that entry's certificate chain.
Parameters:
cert
- the certificate to match with.
Returns:
the alias name of the first entry with a matching certificate,
 or
null
if no such entry exists in this keystore.
Throws:
KeyStoreException
- if the keystore has not been initialized
 (loaded).
store
public final
void
store
(
OutputStream
stream,
 char[] password)
throws
KeyStoreException
,
IOException
,
NoSuchAlgorithmException
,
CertificateException
Stores this keystore to the given output stream, and protects its
 integrity with the given password.
Parameters:
stream
- the output stream to which this keystore is written.
password
- the password to generate the keystore integrity check.
                 May be
null
if the keystore does not support
                 or require an integrity check.
Throws:
KeyStoreException
- if the keystore has not been initialized
 (loaded).
IOException
- if there was an I/O problem with data
NoSuchAlgorithmException
- if the appropriate data integrity
 algorithm could not be found
CertificateException
- if any of the certificates included in
 the keystore data could not be stored
store
public final
void
store
(
KeyStore.LoadStoreParameter
param)
throws
KeyStoreException
,
IOException
,
NoSuchAlgorithmException
,
CertificateException
Stores this keystore using the given
LoadStoreParameter
.
Parameters:
param
- the
LoadStoreParameter
that specifies how to store the keystore,
          which may be
null
Throws:
IllegalArgumentException
- if the given
LoadStoreParameter
input is not recognized
KeyStoreException
- if the keystore has not been initialized
          (loaded)
IOException
- if there was an I/O problem with data
NoSuchAlgorithmException
- if the appropriate data integrity
          algorithm could not be found
CertificateException
- if any of the certificates included in
          the keystore data could not be stored
UnsupportedOperationException
- if this operation is not supported
Since:
1.5
load
public final
void
load
(
InputStream
stream,
 char[] password)
throws
IOException
,
NoSuchAlgorithmException
,
CertificateException
Loads this keystore from the given input stream.
A password may be given to unlock the keystore
 (e.g. the keystore resides on a hardware token device),
 or to check the integrity of the keystore data.
 If a password is not given for integrity checking,
 then integrity checking is not performed.
In order to create an empty keystore, or if the keystore cannot
 be initialized from a stream, pass
null
as the
stream
argument.
Note that if this keystore has already been loaded, it is
 reinitialized and loaded again from the given input stream.
Parameters:
stream
- the input stream from which the keystore is loaded,
 or
null
password
- the password used to check the integrity of
 the keystore, the password used to unlock the keystore,
 or
null
Throws:
IOException
- if there is an I/O or format problem with the
 keystore data, if a password is required but not given,
 or if the given password was incorrect. If the error is due to a
 wrong password, the
cause
of the
IOException
should be an
UnrecoverableKeyException
NoSuchAlgorithmException
- if the algorithm used to check
 the integrity of the keystore cannot be found
CertificateException
- if any of the certificates in the
 keystore could not be loaded
load
public final
void
load
(
KeyStore.LoadStoreParameter
param)
throws
IOException
,
NoSuchAlgorithmException
,
CertificateException
Loads this keystore using the given
LoadStoreParameter
.
Note that if this
KeyStore
has already been loaded, it is
 reinitialized and loaded again from the given parameter.
Parameters:
param
- the
LoadStoreParameter
that specifies how to load the keystore,
          which may be
null
Throws:
IllegalArgumentException
- if the given
LoadStoreParameter
input is not recognized
IOException
- if there is an I/O or format problem with the
          keystore data. If the error is due to an incorrect
ProtectionParameter
(e.g. wrong password)
         the
cause
of the
IOException
should be an
UnrecoverableKeyException
NoSuchAlgorithmException
- if the algorithm used to check
          the integrity of the keystore cannot be found
CertificateException
- if any of the certificates in the
          keystore could not be loaded
Since:
1.5
getEntry
public final
KeyStore.Entry
getEntry
(
String
alias,
KeyStore.ProtectionParameter
protParam)
throws
NoSuchAlgorithmException
,
UnrecoverableEntryException
,
KeyStoreException
Gets a keystore
Entry
for the specified alias
 with the specified protection parameter.
Parameters:
alias
- get the keystore
Entry
for this alias
protParam
- the
ProtectionParameter
used to protect the
Entry
,
          which may be
null
Returns:
the keystore
Entry
for the specified alias,
          or
null
if there is no such entry
Throws:
NullPointerException
- if
alias
is
null
NoSuchAlgorithmException
- if the algorithm for recovering the
          entry cannot be found
UnrecoverableEntryException
- if the specified
protParam
were insufficient or invalid
UnrecoverableKeyException
- if the entry is a
PrivateKeyEntry
or
SecretKeyEntry
and the specified
protParam
does not contain
          the information needed to recover the key (e.g. wrong password)
KeyStoreException
- if the keystore has not been initialized
          (loaded).
Since:
1.5
See Also:
setEntry(String, KeyStore.Entry, KeyStore.ProtectionParameter)
setEntry
public final
void
setEntry
(
String
alias,
KeyStore.Entry
entry,
KeyStore.ProtectionParameter
protParam)
throws
KeyStoreException
Saves a keystore
Entry
under the specified alias.
 The protection parameter is used to protect the
Entry
.
If an entry already exists for the specified alias,
 it is overridden.
Parameters:
alias
- save the keystore
Entry
under this alias
entry
- the
Entry
to save
protParam
- the
ProtectionParameter
used to protect the
Entry
,
          which may be
null
Throws:
NullPointerException
- if
alias
or
entry
is
null
KeyStoreException
- if the keystore has not been initialized
          (loaded), or if this operation fails for some other reason
Since:
1.5
See Also:
getEntry(String, KeyStore.ProtectionParameter)
entryInstanceOf
public final
boolean
entryInstanceOf
(
String
alias,
Class
<? extends
KeyStore.Entry
> entryClass)
throws
KeyStoreException
Determines if the keystore
Entry
for the specified
alias
is an instance or subclass of the specified
entryClass
.
Parameters:
alias
- the alias name
entryClass
- the entry class
Returns:
true
if the keystore
Entry
for the specified
alias
is an instance or subclass of the
          specified
entryClass
,
false
otherwise
Throws:
NullPointerException
- if
alias
or
entryClass
is
null
KeyStoreException
- if the keystore has not been
          initialized (loaded)
Since:
1.5
getInstance
public static final
KeyStore
getInstance
(
File
file,
 char[] password)
throws
KeyStoreException
,
IOException
,
NoSuchAlgorithmException
,
CertificateException
Returns a loaded keystore object of the appropriate keystore type.
 First the keystore type is determined by probing the specified file.
 Then a keystore object is instantiated and loaded using the data from
 that file.
A password may be given to unlock the keystore
 (e.g. the keystore resides on a hardware token device),
 or to check the integrity of the keystore data.
 If a password is not given for integrity checking,
 then integrity checking is not performed.
This method traverses the list of registered security
providers
, starting with the most
 preferred provider.
 For each
KeyStoreSpi
implementation supported by a
 provider, it invokes the
engineProbe
method to
 determine if it supports the specified keystore.
 A new
KeyStore
object is returned that encapsulates the
KeyStoreSpi
implementation from the first provider that supports the specified file.
Note that the list of registered providers may be retrieved via
 the
Security.getProviders()
method.
Parameters:
file
- the keystore file
password
- the keystore password, which may be
null
Returns:
a keystore object loaded with keystore data
Throws:
KeyStoreException
- if no provider supports a
KeyStoreSpi
implementation for the specified keystore file.
IOException
- if there is an I/O or format problem with the
             keystore data, if a password is required but not given,
             or if the given password was incorrect. If the error is
             due to a wrong password, the
cause
of the
IOException
should be an
UnrecoverableKeyException
.
NoSuchAlgorithmException
- if the algorithm used to check the
             integrity of the keystore cannot be found.
CertificateException
- if any of the certificates in the
             keystore could not be loaded.
IllegalArgumentException
- if file does not exist or does not
             refer to a normal file.
NullPointerException
- if file is
null
.
SecurityException
- if a security manager exists and its
SecurityManager.checkRead(java.io.FileDescriptor)
method denies
             read access to the specified file.
Since:
9
See Also:
Provider
getInstance
public static final
KeyStore
getInstance
(
File
file,
KeyStore.LoadStoreParameter
param)
throws
KeyStoreException
,
IOException
,
NoSuchAlgorithmException
,
CertificateException
Returns a loaded keystore object of the appropriate keystore type.
 First the keystore type is determined by probing the specified file.
 Then a keystore object is instantiated and loaded using the data from
 that file.
 A
LoadStoreParameter
may be supplied which specifies how to
 unlock the keystore data or perform an integrity check.
This method traverses the list of registered security
providers
, starting with the most preferred provider.
 For each
KeyStoreSpi
implementation supported by a
 provider, it invokes the
engineProbe
method to
 determine if it supports the specified keystore.
 A new
KeyStore
object is returned that encapsulates the
KeyStoreSpi
implementation from the first provider that supports the specified file.
Note that the list of registered providers may be retrieved via
 the
Security.getProviders()
method.
Parameters:
file
- the keystore file
param
- the
LoadStoreParameter
that specifies how to load
             the keystore, which may be
null
Returns:
a keystore object loaded with keystore data
Throws:
KeyStoreException
- if no provider supports a
KeyStoreSpi
implementation for the specified keystore file.
IOException
- if there is an I/O or format problem with the
             keystore data. If the error is due to an incorrect
ProtectionParameter
(e.g. wrong password)
             the
cause
of the
IOException
should be an
UnrecoverableKeyException
.
NoSuchAlgorithmException
- if the algorithm used to check the
             integrity of the keystore cannot be found.
CertificateException
- if any of the certificates in the
             keystore could not be loaded.
IllegalArgumentException
- if file does not exist or does not
             refer to a normal file, or if param is not recognized.
NullPointerException
- if file is
null
.
SecurityException
- if a security manager exists and its
SecurityManager.checkRead(java.io.FileDescriptor)
method denies
             read access to the specified file.
Since:
9
See Also:
Provider
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.