Uses of Interface java.security.spec.AlgorithmParameterSpec (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Interface
java.security.spec.AlgorithmParameterSpec
Packages that use
AlgorithmParameterSpec
Package
Description
java.security
Provides the classes and interfaces for the security framework.
java.security.interfaces
Provides interfaces for generating RSA (Rivest, Shamir and
 Adleman AsymmetricCipher algorithm)
 keys as defined in the RSA Laboratory Technical Note
 PKCS#1, and DSA (Digital Signature
 Algorithm) keys as defined in NIST's FIPS-186.
java.security.spec
Provides classes and interfaces for key specifications and algorithm
 parameter specifications.
javax.crypto
Provides the classes and interfaces for cryptographic
 operations.
javax.crypto.spec
Provides classes and interfaces for key specifications and
 algorithm parameter specifications.
javax.xml.crypto
Common classes for XML cryptography.
javax.xml.crypto.dsig
Classes for generating and validating XML digital
 signatures.
javax.xml.crypto.dsig.spec
Parameter classes for XML digital signatures.
Uses of
AlgorithmParameterSpec
in
java.security
Methods in
java.security
with type parameters of type
AlgorithmParameterSpec
Modifier and Type
Method
Description
protected abstract <T extends
AlgorithmParameterSpec
>
T
AlgorithmParametersSpi.
engineGetParameterSpec
(
Class
<T> paramSpec)
Returns a (transparent) specification of this parameters
 object.
final <T extends
AlgorithmParameterSpec
>
T
AlgorithmParameters.
getParameterSpec
(
Class
<T> paramSpec)
Returns a (transparent) specification of this parameter object.
Methods in
java.security
that return
AlgorithmParameterSpec
Modifier and Type
Method
Description
AlgorithmParameterSpec
KeyStore.PasswordProtection.
getProtectionParameters
()
Gets the parameters supplied for the protection algorithm.
Methods in
java.security
with parameters of type
AlgorithmParameterSpec
Modifier and Type
Method
Description
protected abstract void
AlgorithmParameterGeneratorSpi.
engineInit
(
AlgorithmParameterSpec
genParamSpec,
SecureRandom
random)
Initializes this parameter generator with a set of
 algorithm-specific parameter generation values.
protected abstract void
AlgorithmParametersSpi.
engineInit
(
AlgorithmParameterSpec
paramSpec)
Initializes this parameters object using the parameters
 specified in
paramSpec
.
protected void
SignatureSpi.
engineSetParameter
(
AlgorithmParameterSpec
params)
Initializes this
Signature
object with the specified parameter
 values.
final void
AlgorithmParameterGenerator.
init
(
AlgorithmParameterSpec
genParamSpec)
Initializes this parameter generator with a set of algorithm-specific
 parameter generation values.
final void
AlgorithmParameterGenerator.
init
(
AlgorithmParameterSpec
genParamSpec,
SecureRandom
random)
Initializes this parameter generator with a set of algorithm-specific
 parameter generation values.
final void
AlgorithmParameters.
init
(
AlgorithmParameterSpec
paramSpec)
Initializes this parameter object using the parameters
 specified in
paramSpec
.
void
KeyPairGenerator.
initialize
(
AlgorithmParameterSpec
params)
Initializes the key pair generator using the specified parameter
 set and the
SecureRandom
implementation of the highest-priority installed provider as the source
 of randomness.
void
KeyPairGenerator.
initialize
(
AlgorithmParameterSpec
params,
SecureRandom
random)
Initializes the key pair generator with the given parameter
 set and source of randomness.
void
KeyPairGeneratorSpi.
initialize
(
AlgorithmParameterSpec
params,
SecureRandom
random)
Initializes the key pair generator using the specified parameter
 set and user-provided source of randomness.
final void
Signature.
setParameter
(
AlgorithmParameterSpec
params)
Initializes this
Signature
object with the specified parameter
 values.
Constructors in
java.security
with parameters of type
AlgorithmParameterSpec
Modifier
Constructor
Description
PasswordProtection
(char[] password,
String
protectionAlgorithm,
AlgorithmParameterSpec
protectionParameters)
Creates a password parameter and specifies the protection algorithm
 and associated parameters to use when encrypting a keystore entry.
Uses of
AlgorithmParameterSpec
in
java.security.interfaces
Methods in
java.security.interfaces
that return
AlgorithmParameterSpec
Modifier and Type
Method
Description
default
AlgorithmParameterSpec
RSAKey.
getParams
()
Returns the parameters associated with this key.
AlgorithmParameterSpec
XECKey.
getParams
()
Returns the algorithm parameters associated
 with the key.
Uses of
AlgorithmParameterSpec
in
java.security.spec
Classes in
java.security.spec
that implement
AlgorithmParameterSpec
Modifier and Type
Class
Description
final class
DSAGenParameterSpec
This immutable class specifies the set of parameters used for
 generating DSA parameters as specified in
FIPS 186-3 Digital Signature Standard (DSS)
.
class
DSAParameterSpec
This class specifies the set of parameters used with the DSA algorithm.
class
ECGenParameterSpec
This immutable class specifies the set of parameters used for
 generating elliptic curve (EC) domain parameters.
class
ECParameterSpec
This immutable class specifies the set of domain parameters
 used with elliptic curve cryptography (ECC).
class
EdDSAParameterSpec
A class used to specify EdDSA signature and verification parameters.
class
MGF1ParameterSpec
This class specifies the set of parameters used with mask generation
 function MGF1 in OAEP Padding and RSASSA-PSS signature scheme, as
 defined in the
PKCS#1 v2.2
standard.
class
NamedParameterSpec
This class is used to specify any algorithm parameters that are determined
 by a standard name.
class
PSSParameterSpec
This class specifies a parameter spec for the RSASSA-PSS signature scheme,
 as defined in the
PKCS#1 v2.2
standard.
class
RSAKeyGenParameterSpec
This class specifies the set of parameters used to generate an RSA
 key pair.
Methods in
java.security.spec
that return
AlgorithmParameterSpec
Modifier and Type
Method
Description
AlgorithmParameterSpec
RSAKeyGenParameterSpec.
getKeyParams
()
Returns the parameters to be associated with key.
AlgorithmParameterSpec
PSSParameterSpec.
getMGFParameters
()
Returns the parameters for the mask generation function.
AlgorithmParameterSpec
RSAPrivateKeySpec.
getParams
()
Returns the parameters associated with this key, may be null if not
 present.
AlgorithmParameterSpec
RSAPublicKeySpec.
getParams
()
Returns the parameters associated with this key, may be null if not
 present.
AlgorithmParameterSpec
XECPrivateKeySpec.
getParams
()
Get the algorithm parameters that define the curve and other settings.
AlgorithmParameterSpec
XECPublicKeySpec.
getParams
()
Get the algorithm parameters that define the curve and other settings.
Constructors in
java.security.spec
with parameters of type
AlgorithmParameterSpec
Modifier
Constructor
Description
PSSParameterSpec
(
String
mdName,
String
mgfName,
AlgorithmParameterSpec
mgfSpec,
 int saltLen,
 int trailerField)
Creates a new
PSSParameterSpec
as defined in
 the PKCS #1 standard using the specified message digest,
 mask generation function, parameters for mask generation
 function, salt length, and trailer field values.
RSAKeyGenParameterSpec
(int keysize,
BigInteger
publicExponent,
AlgorithmParameterSpec
keyParams)
Constructs a new
RSAKeyGenParameterSpec
object from the
 given keysize, public-exponent value, and key parameters.
RSAMultiPrimePrivateCrtKeySpec
(
BigInteger
modulus,
BigInteger
publicExponent,
BigInteger
privateExponent,
BigInteger
primeP,
BigInteger
primeQ,
BigInteger
primeExponentP,
BigInteger
primeExponentQ,
BigInteger
crtCoefficient,
RSAOtherPrimeInfo
[] otherPrimeInfo,
AlgorithmParameterSpec
keyParams)
Creates a new
RSAMultiPrimePrivateCrtKeySpec
with additional
 key parameters.
RSAPrivateCrtKeySpec
(
BigInteger
modulus,
BigInteger
publicExponent,
BigInteger
privateExponent,
BigInteger
primeP,
BigInteger
primeQ,
BigInteger
primeExponentP,
BigInteger
primeExponentQ,
BigInteger
crtCoefficient,
AlgorithmParameterSpec
keyParams)
Creates a new
RSAPrivateCrtKeySpec
with additional
 key parameters.
RSAPrivateKeySpec
(
BigInteger
modulus,
BigInteger
privateExponent,
AlgorithmParameterSpec
params)
Creates a new RSAPrivateKeySpec with additional key parameters.
RSAPublicKeySpec
(
BigInteger
modulus,
BigInteger
publicExponent,
AlgorithmParameterSpec
params)
Creates a new RSAPublicKeySpec with additional key parameters.
XECPrivateKeySpec
(
AlgorithmParameterSpec
params,
 byte[] scalar)
Construct a private key spec using the supplied parameters and
 encoded scalar value.
XECPublicKeySpec
(
AlgorithmParameterSpec
params,
BigInteger
u)
Construct a public key spec using the supplied parameters and
 u coordinate.
Uses of
AlgorithmParameterSpec
in
javax.crypto
Methods in
javax.crypto
that return
AlgorithmParameterSpec
Modifier and Type
Method
Description
static final
AlgorithmParameterSpec
Cipher.
getMaxAllowedParameterSpec
(
String
transformation)
Returns an {code AlgorithmParameterSpec} object which contains
 the maximum
Cipher
parameter value according to the
 jurisdiction policy file.
Methods in
javax.crypto
with parameters of type
AlgorithmParameterSpec
Modifier and Type
Method
Description
protected abstract void
CipherSpi.
engineInit
(int opmode,
Key
key,
AlgorithmParameterSpec
params,
SecureRandom
random)
Initializes this
CipherSpi
object with a key, a set of
 algorithm parameters, and a source of randomness.
protected abstract void
ExemptionMechanismSpi.
engineInit
(
Key
key,
AlgorithmParameterSpec
params)
Initializes this exemption mechanism with a key and a set of algorithm
 parameters.
protected abstract void
KeyAgreementSpi.
engineInit
(
Key
key,
AlgorithmParameterSpec
params,
SecureRandom
random)
Initializes this key agreement with the given key, set of
 algorithm parameters, and source of randomness.
protected abstract void
KeyGeneratorSpi.
engineInit
(
AlgorithmParameterSpec
params,
SecureRandom
random)
Initializes the key generator with the specified parameter
 set and a user-provided source of randomness.
protected abstract void
MacSpi.
engineInit
(
Key
key,
AlgorithmParameterSpec
params)
Initializes the MAC with the given (secret) key and algorithm
 parameters.
KEMSpi.DecapsulatorSpi
KEMSpi.
engineNewDecapsulator
(
PrivateKey
privateKey,
AlgorithmParameterSpec
spec)
Creates a KEM decapsulator on the KEM receiver side.
KEMSpi.EncapsulatorSpi
KEMSpi.
engineNewEncapsulator
(
PublicKey
publicKey,
AlgorithmParameterSpec
spec,
SecureRandom
secureRandom)
Creates a KEM encapsulator on the KEM sender side.
final void
Cipher.
init
(int opmode,
Key
key,
AlgorithmParameterSpec
params)
Initializes this
Cipher
object with a key and a set of algorithm
 parameters.
final void
Cipher.
init
(int opmode,
Key
key,
AlgorithmParameterSpec
params,
SecureRandom
random)
Initializes this
Cipher
object with a key, a set of algorithm
 parameters, and a source of randomness.
final void
ExemptionMechanism.
init
(
Key
key,
AlgorithmParameterSpec
params)
Initializes this exemption mechanism with a key and a set of algorithm
 parameters.
final void
KeyAgreement.
init
(
Key
key,
AlgorithmParameterSpec
params)
Initializes this key agreement with the given key and set of
 algorithm parameters.
final void
KeyAgreement.
init
(
Key
key,
AlgorithmParameterSpec
params,
SecureRandom
random)
Initializes this key agreement with the given key, set of
 algorithm parameters, and source of randomness.
final void
KeyGenerator.
init
(
AlgorithmParameterSpec
params)
Initializes this key generator with the specified parameter set.
final void
KeyGenerator.
init
(
AlgorithmParameterSpec
params,
SecureRandom
random)
Initializes this key generator with the specified parameter
 set and a user-provided source of randomness.
final void
Mac.
init
(
Key
key,
AlgorithmParameterSpec
params)
Initializes this
Mac
object with the given key and
 algorithm parameters.
KEM.Decapsulator
KEM.
newDecapsulator
(
PrivateKey
privateKey,
AlgorithmParameterSpec
spec)
Creates a KEM decapsulator on the KEM receiver side.
KEM.Encapsulator
KEM.
newEncapsulator
(
PublicKey
publicKey,
AlgorithmParameterSpec
spec,
SecureRandom
secureRandom)
Creates a KEM encapsulator on the KEM sender side.
Uses of
AlgorithmParameterSpec
in
javax.crypto.spec
Classes in
javax.crypto.spec
that implement
AlgorithmParameterSpec
Modifier and Type
Class
Description
final class
ChaCha20ParameterSpec
This class specifies the parameters used with the
ChaCha20
algorithm.
class
DHGenParameterSpec
This class specifies the set of parameters used for generating
 Diffie-Hellman (system) parameters for use in Diffie-Hellman key
 agreement.
class
DHParameterSpec
This class specifies the set of parameters used with the Diffie-Hellman
 algorithm, as specified in PKCS #3:
Diffie-Hellman Key-Agreement
 Standard
.
class
GCMParameterSpec
Specifies the set of parameters required by a
Cipher
using the Galois/Counter Mode (GCM) mode.
class
IvParameterSpec
This class specifies an
initialization vector
(IV).
class
OAEPParameterSpec
This class specifies the set of parameters used with OAEP Padding,
 as defined in the
PKCS#1 v2.2
standard.
class
PBEParameterSpec
This class specifies the set of parameters used with password-based
 encryption (PBE), as defined in the
PKCS #5
standard.
class
RC2ParameterSpec
This class specifies the parameters used with the
RC2
algorithm.
class
RC5ParameterSpec
This class specifies the parameters used with the
RC5
algorithm.
Methods in
javax.crypto.spec
that return
AlgorithmParameterSpec
Modifier and Type
Method
Description
AlgorithmParameterSpec
OAEPParameterSpec.
getMGFParameters
()
Returns the parameters for the mask generation function.
AlgorithmParameterSpec
PBEParameterSpec.
getParameterSpec
()
Returns the cipher algorithm parameter specification.
Constructors in
javax.crypto.spec
with parameters of type
AlgorithmParameterSpec
Modifier
Constructor
Description
OAEPParameterSpec
(
String
mdName,
String
mgfName,
AlgorithmParameterSpec
mgfSpec,
PSource
pSrc)
Constructs a parameter set for OAEP padding as defined in
 the PKCS #1 standard using the specified message digest
 algorithm
mdName
, mask generation function
 algorithm
mgfName
, parameters for the mask
 generation function
mgfSpec
, and source of
 the encoding input P
pSrc
.
PBEParameterSpec
(byte[] salt,
 int iterationCount,
AlgorithmParameterSpec
paramSpec)
Constructs a parameter set for password-based encryption as defined in
 the PKCS #5 standard.
Uses of
AlgorithmParameterSpec
in
javax.xml.crypto
Methods in
javax.xml.crypto
that return
AlgorithmParameterSpec
Modifier and Type
Method
Description
AlgorithmParameterSpec
AlgorithmMethod.
getParameterSpec
()
Returns the algorithm parameters of this
AlgorithmMethod
.
Uses of
AlgorithmParameterSpec
in
javax.xml.crypto.dsig
Methods in
javax.xml.crypto.dsig
that return
AlgorithmParameterSpec
Modifier and Type
Method
Description
AlgorithmParameterSpec
CanonicalizationMethod.
getParameterSpec
()
Returns the algorithm-specific input parameters associated with this
CanonicalizationMethod
.
AlgorithmParameterSpec
DigestMethod.
getParameterSpec
()
Returns the algorithm-specific input parameters associated with this
DigestMethod
.
AlgorithmParameterSpec
SignatureMethod.
getParameterSpec
()
Returns the algorithm-specific input parameters of this
SignatureMethod
.
AlgorithmParameterSpec
Transform.
getParameterSpec
()
Returns the algorithm-specific input parameters associated with this
Transform
.
Uses of
AlgorithmParameterSpec
in
javax.xml.crypto.dsig.spec
Subinterfaces of
AlgorithmParameterSpec
in
javax.xml.crypto.dsig.spec
Modifier and Type
Interface
Description
interface
C14NMethodParameterSpec
A specification of algorithm parameters for a
CanonicalizationMethod
Algorithm.
interface
DigestMethodParameterSpec
A specification of algorithm parameters for a
DigestMethod
algorithm.
interface
SignatureMethodParameterSpec
A specification of algorithm parameters for an XML
SignatureMethod
algorithm.
interface
TransformParameterSpec
A specification of algorithm parameters for a
Transform
algorithm.
Classes in
javax.xml.crypto.dsig.spec
that implement
AlgorithmParameterSpec
Modifier and Type
Class
Description
final class
ExcC14NParameterSpec
Parameters for the W3C Recommendation:
Exclusive XML Canonicalization (C14N) algorithm
.
final class
HMACParameterSpec
Parameters for the
XML Signature HMAC Algorithm
.
final class
RSAPSSParameterSpec
Parameters for the
XML Signature RSASSA-PSS Algorithm
.
final class
XPathFilter2ParameterSpec
Parameters for the W3C Recommendation
XPath Filter 2.0 Transform Algorithm
.
final class
XPathFilterParameterSpec
Parameters for the
XPath Filtering Transform Algorithm
.
final class
XSLTTransformParameterSpec
Parameters for the
XSLT Transform Algorithm
.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.