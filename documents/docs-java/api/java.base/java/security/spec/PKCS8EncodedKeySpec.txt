PKCS8EncodedKeySpec (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr
|
Method
Detail:
Field |
Constr
|
Method
SEARCH
Module
java.base
Package
java.security.spec
Class PKCS8EncodedKeySpec
java.lang.Object
java.security.spec.EncodedKeySpec
java.security.spec.PKCS8EncodedKeySpec
All Implemented Interfaces:
KeySpec
public class
PKCS8EncodedKeySpec
extends
EncodedKeySpec
This class represents the ASN.1 encoding of a private key,
 encoded according to the ASN.1 type
PrivateKeyInfo
.
 The
PrivateKeyInfo
syntax is defined in the PKCS#8 standard
 as follows:
PrivateKeyInfo ::= SEQUENCE {
   version Version,
   privateKeyAlgorithm PrivateKeyAlgorithmIdentifier,
   privateKey PrivateKey,
   attributes [0] IMPLICIT Attributes OPTIONAL }

 Version ::= INTEGER

 PrivateKeyAlgorithmIdentifier ::= AlgorithmIdentifier

 PrivateKey ::= OCTET STRING

 Attributes ::= SET OF Attribute
Since:
1.2
See Also:
Key
KeyFactory
KeySpec
EncodedKeySpec
X509EncodedKeySpec
Constructor Summary
Constructors
Constructor
Description
PKCS8EncodedKeySpec
(byte[] encodedKey)
Creates a new
PKCS8EncodedKeySpec
with the given encoded key.
PKCS8EncodedKeySpec
(byte[] encodedKey,
String
algorithm)
Creates a new
PKCS8EncodedKeySpec
with the given encoded key and
 algorithm.
Method Summary
All Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
byte[]
getEncoded
()
Returns the key bytes, encoded according to the PKCS #8 standard.
final
String
getFormat
()
Returns the name of the encoding format associated with this
 key specification.
Methods declared in class java.security.spec.
EncodedKeySpec
getAlgorithm
Methods declared in class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Constructor Details
PKCS8EncodedKeySpec
public
PKCS8EncodedKeySpec
(byte[] encodedKey)
Creates a new
PKCS8EncodedKeySpec
with the given encoded key.
Parameters:
encodedKey
- the key, which is assumed to be
 encoded according to the PKCS #8 standard. The contents of
 the array are copied to protect against subsequent modification.
Throws:
NullPointerException
- if
encodedKey
is null.
PKCS8EncodedKeySpec
public
PKCS8EncodedKeySpec
(byte[] encodedKey,
String
algorithm)
Creates a new
PKCS8EncodedKeySpec
with the given encoded key and
 algorithm. This constructor is useful when subsequent callers of
 the
PKCS8EncodedKeySpec
object might not know the
 algorithm of the private key.
Parameters:
encodedKey
- the key, which is assumed to be
 encoded according to the PKCS #8 standard. The contents of
 the array are copied to protect against subsequent modification.
algorithm
- the algorithm name of the encoded private key
 See the KeyFactory section in the
Java Security Standard Algorithm Names Specification
for information about standard algorithm names.
Throws:
NullPointerException
- if
encodedKey
or
algorithm
is null.
IllegalArgumentException
- if
algorithm
is
 the empty string
""
Since:
9
Method Details
getEncoded
public
byte[]
getEncoded
()
Returns the key bytes, encoded according to the PKCS #8 standard.
Overrides:
getEncoded
in class
EncodedKeySpec
Returns:
the PKCS #8 encoding of the key. Returns a new array
 each time this method is called.
getFormat
public final
String
getFormat
()
Returns the name of the encoding format associated with this
 key specification.
Specified by:
getFormat
in class
EncodedKeySpec
Returns:
the string
"PKCS#8"
.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.