Uses of Class java.security.InvalidAlgorithmParameterException (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Class
java.security.InvalidAlgorithmParameterException
Packages that use
InvalidAlgorithmParameterException
Package
Description
java.security
Provides the classes and interfaces for the security framework.
java.security.cert
Provides classes and interfaces for parsing and managing
 certificates, certificate revocation lists (CRLs), and
 certification paths.
javax.crypto
Provides the classes and interfaces for cryptographic
 operations.
javax.net.ssl
Provides classes for the secure socket package.
javax.xml.crypto.dsig
Classes for generating and validating XML digital
 signatures.
Uses of
InvalidAlgorithmParameterException
in
java.security
Methods in
java.security
that throw
InvalidAlgorithmParameterException
Modifier and Type
Method
Description
protected abstract void
AlgorithmParameterGeneratorSpi.
engineInit
(
AlgorithmParameterSpec
genParamSpec,
SecureRandom
random)
Initializes this parameter generator with a set of
 algorithm-specific parameter generation values.
protected void
SignatureSpi.
engineSetParameter
(
AlgorithmParameterSpec
params)
Initializes this
Signature
object with the specified parameter
 values.
final void
AlgorithmParameterGenerator.
init
(
AlgorithmParameterSpec
genParamSpec)
Initializes this parameter generator with a set of algorithm-specific
 parameter generation values.
final void
AlgorithmParameterGenerator.
init
(
AlgorithmParameterSpec
genParamSpec,
SecureRandom
random)
Initializes this parameter generator with a set of algorithm-specific
 parameter generation values.
void
KeyPairGenerator.
initialize
(
AlgorithmParameterSpec
params)
Initializes the key pair generator using the specified parameter
 set and the
SecureRandom
implementation of the highest-priority installed provider as the source
 of randomness.
void
KeyPairGenerator.
initialize
(
AlgorithmParameterSpec
params,
SecureRandom
random)
Initializes the key pair generator with the given parameter
 set and source of randomness.
void
KeyPairGeneratorSpi.
initialize
(
AlgorithmParameterSpec
params,
SecureRandom
random)
Initializes the key pair generator using the specified parameter
 set and user-provided source of randomness.
final void
Signature.
setParameter
(
AlgorithmParameterSpec
params)
Initializes this
Signature
object with the specified parameter
 values.
Uses of
InvalidAlgorithmParameterException
in
java.security.cert
Methods in
java.security.cert
that throw
InvalidAlgorithmParameterException
Modifier and Type
Method
Description
final
CertPathBuilderResult
CertPathBuilder.
build
(
CertPathParameters
params)
Attempts to build a certification path using the specified algorithm
 parameter set.
abstract
CertPathBuilderResult
CertPathBuilderSpi.
engineBuild
(
CertPathParameters
params)
Attempts to build a certification path using the specified
 algorithm parameter set.
abstract
CertPathValidatorResult
CertPathValidatorSpi.
engineValidate
(
CertPath
certPath,
CertPathParameters
params)
Validates the specified certification path using the specified
 algorithm parameter set.
static
CertStore
CertStore.
getInstance
(
String
type,
CertStoreParameters
params)
Returns a
CertStore
object that implements the specified
CertStore
type and is initialized with the specified
 parameters.
static
CertStore
CertStore.
getInstance
(
String
type,
CertStoreParameters
params,
String
provider)
Returns a
CertStore
object that implements the specified
CertStore
type.
static
CertStore
CertStore.
getInstance
(
String
type,
CertStoreParameters
params,
Provider
provider)
Returns a
CertStore
object that implements the specified
CertStore
type.
void
PKIXParameters.
setTrustAnchors
(
Set
<
TrustAnchor
> trustAnchors)
Sets the
Set
of most-trusted CAs.
final
CertPathValidatorResult
CertPathValidator.
validate
(
CertPath
certPath,
CertPathParameters
params)
Validates the specified certification path using the specified
 algorithm parameter set.
Constructors in
java.security.cert
that throw
InvalidAlgorithmParameterException
Modifier
Constructor
Description
CertStoreSpi
(
CertStoreParameters
params)
The sole constructor.
PKIXBuilderParameters
(
KeyStore
keystore,
CertSelector
targetConstraints)
Creates an instance of
PKIXBuilderParameters
that
 populates the set of most-trusted CAs from the trusted
 certificate entries contained in the specified
KeyStore
.
PKIXBuilderParameters
(
Set
<
TrustAnchor
> trustAnchors,
CertSelector
targetConstraints)
Creates an instance of
PKIXBuilderParameters
with
 the specified
Set
of most-trusted CAs.
PKIXParameters
(
KeyStore
keystore)
Creates an instance of
PKIXParameters
that
 populates the set of most-trusted CAs from the trusted
 certificate entries contained in the specified
KeyStore
.
PKIXParameters
(
Set
<
TrustAnchor
> trustAnchors)
Creates an instance of
PKIXParameters
with the specified
Set
of most-trusted CAs.
Uses of
InvalidAlgorithmParameterException
in
javax.crypto
Methods in
javax.crypto
that throw
InvalidAlgorithmParameterException
Modifier and Type
Method
Description
protected abstract void
CipherSpi.
engineInit
(int opmode,
Key
key,
AlgorithmParameters
params,
SecureRandom
random)
Initializes this
CipherSpi
object with a key, a set of
 algorithm parameters, and a source of randomness.
protected abstract void
CipherSpi.
engineInit
(int opmode,
Key
key,
AlgorithmParameterSpec
params,
SecureRandom
random)
Initializes this
CipherSpi
object with a key, a set of
 algorithm parameters, and a source of randomness.
protected abstract void
ExemptionMechanismSpi.
engineInit
(
Key
key,
AlgorithmParameters
params)
Initializes this exemption mechanism with a key and a set of algorithm
 parameters.
protected abstract void
ExemptionMechanismSpi.
engineInit
(
Key
key,
AlgorithmParameterSpec
params)
Initializes this exemption mechanism with a key and a set of algorithm
 parameters.
protected abstract void
KeyAgreementSpi.
engineInit
(
Key
key,
AlgorithmParameterSpec
params,
SecureRandom
random)
Initializes this key agreement with the given key, set of
 algorithm parameters, and source of randomness.
protected abstract void
KeyGeneratorSpi.
engineInit
(
AlgorithmParameterSpec
params,
SecureRandom
random)
Initializes the key generator with the specified parameter
 set and a user-provided source of randomness.
protected abstract void
MacSpi.
engineInit
(
Key
key,
AlgorithmParameterSpec
params)
Initializes the MAC with the given (secret) key and algorithm
 parameters.
KEMSpi.DecapsulatorSpi
KEMSpi.
engineNewDecapsulator
(
PrivateKey
privateKey,
AlgorithmParameterSpec
spec)
Creates a KEM decapsulator on the KEM receiver side.
KEMSpi.EncapsulatorSpi
KEMSpi.
engineNewEncapsulator
(
PublicKey
publicKey,
AlgorithmParameterSpec
spec,
SecureRandom
secureRandom)
Creates a KEM encapsulator on the KEM sender side.
final void
Cipher.
init
(int opmode,
Key
key,
AlgorithmParameters
params)
Initializes this
Cipher
object with a key and a set of algorithm
 parameters.
final void
Cipher.
init
(int opmode,
Key
key,
AlgorithmParameters
params,
SecureRandom
random)
Initializes this
Cipher
object with a key, a set of algorithm
 parameters, and a source of randomness.
final void
Cipher.
init
(int opmode,
Key
key,
AlgorithmParameterSpec
params)
Initializes this
Cipher
object with a key and a set of algorithm
 parameters.
final void
Cipher.
init
(int opmode,
Key
key,
AlgorithmParameterSpec
params,
SecureRandom
random)
Initializes this
Cipher
object with a key, a set of algorithm
 parameters, and a source of randomness.
final void
ExemptionMechanism.
init
(
Key
key,
AlgorithmParameters
params)
Initializes this exemption mechanism with a key and a set of algorithm
 parameters.
final void
ExemptionMechanism.
init
(
Key
key,
AlgorithmParameterSpec
params)
Initializes this exemption mechanism with a key and a set of algorithm
 parameters.
final void
KeyAgreement.
init
(
Key
key,
AlgorithmParameterSpec
params)
Initializes this key agreement with the given key and set of
 algorithm parameters.
final void
KeyAgreement.
init
(
Key
key,
AlgorithmParameterSpec
params,
SecureRandom
random)
Initializes this key agreement with the given key, set of
 algorithm parameters, and source of randomness.
final void
KeyGenerator.
init
(
AlgorithmParameterSpec
params)
Initializes this key generator with the specified parameter set.
final void
KeyGenerator.
init
(
AlgorithmParameterSpec
params,
SecureRandom
random)
Initializes this key generator with the specified parameter
 set and a user-provided source of randomness.
final void
Mac.
init
(
Key
key,
AlgorithmParameterSpec
params)
Initializes this
Mac
object with the given key and
 algorithm parameters.
KEM.Decapsulator
KEM.
newDecapsulator
(
PrivateKey
privateKey,
AlgorithmParameterSpec
spec)
Creates a KEM decapsulator on the KEM receiver side.
KEM.Encapsulator
KEM.
newEncapsulator
(
PublicKey
publicKey,
AlgorithmParameterSpec
spec,
SecureRandom
secureRandom)
Creates a KEM encapsulator on the KEM sender side.
Uses of
InvalidAlgorithmParameterException
in
javax.net.ssl
Methods in
javax.net.ssl
that throw
InvalidAlgorithmParameterException
Modifier and Type
Method
Description
protected abstract void
KeyManagerFactorySpi.
engineInit
(
ManagerFactoryParameters
spec)
Initializes this factory with a source of key material.
protected abstract void
TrustManagerFactorySpi.
engineInit
(
ManagerFactoryParameters
spec)
Initializes this factory with a source of provider-specific
 key material.
final void
KeyManagerFactory.
init
(
ManagerFactoryParameters
spec)
Initializes this factory with a source of provider-specific
 key material.
final void
TrustManagerFactory.
init
(
ManagerFactoryParameters
spec)
Initializes this factory with a source of provider-specific
 trust material.
Uses of
InvalidAlgorithmParameterException
in
javax.xml.crypto.dsig
Methods in
javax.xml.crypto.dsig
that throw
InvalidAlgorithmParameterException
Modifier and Type
Method
Description
abstract void
TransformService.
init
(
TransformParameterSpec
params)
Initializes this
TransformService
with the specified
 parameters.
abstract void
TransformService.
init
(
XMLStructure
parent,
XMLCryptoContext
context)
Initializes this
TransformService
with the specified
 parameters and document context.
abstract
CanonicalizationMethod
XMLSignatureFactory.
newCanonicalizationMethod
(
String
algorithm,
C14NMethodParameterSpec
params)
Creates a
CanonicalizationMethod
for the specified
 algorithm URI and parameters.
abstract
CanonicalizationMethod
XMLSignatureFactory.
newCanonicalizationMethod
(
String
algorithm,
XMLStructure
params)
Creates a
CanonicalizationMethod
for the specified
 algorithm URI and parameters.
abstract
DigestMethod
XMLSignatureFactory.
newDigestMethod
(
String
algorithm,
DigestMethodParameterSpec
params)
Creates a
DigestMethod
for the specified algorithm URI
 and parameters.
abstract
SignatureMethod
XMLSignatureFactory.
newSignatureMethod
(
String
algorithm,
SignatureMethodParameterSpec
params)
Creates a
SignatureMethod
for the specified algorithm URI
 and parameters.
abstract
Transform
XMLSignatureFactory.
newTransform
(
String
algorithm,
TransformParameterSpec
params)
Creates a
Transform
for the specified algorithm URI
 and parameters.
abstract
Transform
XMLSignatureFactory.
newTransform
(
String
algorithm,
XMLStructure
params)
Creates a
Transform
for the specified algorithm URI
 and parameters.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.