AlgorithmParameterGeneratorSpi (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr
|
Method
Detail:
Field |
Constr
|
Method
SEARCH
Module
java.base
Package
java.security
Class AlgorithmParameterGeneratorSpi
java.lang.Object
java.security.AlgorithmParameterGeneratorSpi
public abstract class
AlgorithmParameterGeneratorSpi
extends
Object
This class defines the
Service Provider Interface
(
SPI
)
 for the
AlgorithmParameterGenerator
class, which
 is used to generate a set of parameters to be used with a certain algorithm.
All the abstract methods in this class must be implemented by each
 cryptographic service provider who wishes to supply the implementation
 of a parameter generator for a particular algorithm.
In case the client does not explicitly initialize the
 AlgorithmParameterGenerator (via a call to an
engineInit
method), each provider must supply (and document) a default initialization.
 See the Keysize Restriction sections of the
JDK Providers
document for information on the AlgorithmParameterGenerator defaults
 used by JDK providers.
 However, note that defaults may vary across different providers.
 Additionally, the default value for a provider may change in a future
 version. Therefore, it is recommended to explicitly initialize the
AlgorithmParameterGenerator
instead of relying on
 provider-specific defaults.
Since:
1.2
See Also:
AlgorithmParameterGenerator
AlgorithmParameters
AlgorithmParameterSpec
Constructor Summary
Constructors
Constructor
Description
AlgorithmParameterGeneratorSpi
()
Constructor for subclasses to call.
Method Summary
All Methods
Instance Methods
Abstract Methods
Modifier and Type
Method
Description
protected abstract
AlgorithmParameters
engineGenerateParameters
()
Generates the parameters.
protected abstract void
engineInit
(int size,
SecureRandom
random)
Initializes this parameter generator for a certain size
 and source of randomness.
protected abstract void
engineInit
(
AlgorithmParameterSpec
genParamSpec,
SecureRandom
random)
Initializes this parameter generator with a set of
 algorithm-specific parameter generation values.
Methods declared in class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Constructor Details
AlgorithmParameterGeneratorSpi
public
AlgorithmParameterGeneratorSpi
()
Constructor for subclasses to call.
Method Details
engineInit
protected abstract
void
engineInit
(int size,
SecureRandom
random)
Initializes this parameter generator for a certain size
 and source of randomness.
Parameters:
size
- the size (number of bits).
random
- the source of randomness.
engineInit
protected abstract
void
engineInit
(
AlgorithmParameterSpec
genParamSpec,
SecureRandom
random)
throws
InvalidAlgorithmParameterException
Initializes this parameter generator with a set of
 algorithm-specific parameter generation values.
Parameters:
genParamSpec
- the set of algorithm-specific parameter generation values.
random
- the source of randomness.
Throws:
InvalidAlgorithmParameterException
- if the given parameter
 generation values are inappropriate for this parameter generator.
engineGenerateParameters
protected abstract
AlgorithmParameters
engineGenerateParameters
()
Generates the parameters.
Returns:
the new
AlgorithmParameters
object.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.