Certificate (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested
|
Field |
Constr
|
Method
Detail:
Field |
Constr
|
Method
SEARCH
Module
java.base
Package
java.security.cert
Class Certificate
java.lang.Object
java.security.cert.Certificate
All Implemented Interfaces:
Serializable
Direct Known Subclasses:
X509Certificate
public abstract class
Certificate
extends
Object
implements
Serializable
Abstract class for managing a variety of identity certificates.
 An identity certificate is a binding of a principal to a public key which
 is vouched for by another principal.  (A principal represents
 an entity such as an individual user, a group, or a corporation.)
This class is an abstraction for certificates that have different
 formats but important common uses.  For example, different types of
 certificates, such as X.509 and PGP, share general certificate
 functionality (like encoding and verifying) and
 some types of information (like a public key).
X.509, PGP, and SDSI certificates can all be implemented by
 subclassing the Certificate class, even though they contain different
 sets of information, and they store and retrieve the information in
 different ways.
Since:
1.2
See Also:
X509Certificate
CertificateFactory
Serialized Form
Nested Class Summary
Nested Classes
Modifier and Type
Class
Description
protected static class
Certificate.CertificateRep
Alternate
Certificate
class for serialization.
Constructor Summary
Constructors
Modifier
Constructor
Description
protected
Certificate
(
String
type)
Creates a certificate of the specified type.
Method Summary
All Methods
Instance Methods
Abstract Methods
Concrete Methods
Modifier and Type
Method
Description
boolean
equals
(
Object
other)
Compares this certificate for equality with the specified
 object.
abstract byte[]
getEncoded
()
Returns the encoded form of this certificate.
abstract
PublicKey
getPublicKey
()
Gets the public key from this certificate.
final
String
getType
()
Returns the type of this certificate.
int
hashCode
()
Returns a hashcode value for this certificate from its
 encoded form.
abstract
String
toString
()
Returns a string representation of this certificate.
abstract void
verify
(
PublicKey
key)
Verifies that this certificate was signed using the
 private key that corresponds to the specified public key.
abstract void
verify
(
PublicKey
key,
String
sigProvider)
Verifies that this certificate was signed using the
 private key that corresponds to the specified public key.
void
verify
(
PublicKey
key,
Provider
sigProvider)
Verifies that this certificate was signed using the
 private key that corresponds to the specified public key.
protected
Object
writeReplace
()
Replace the
Certificate
to be serialized with a
CertificateRep
object containing the type and
 encoded bytes of the
Certificate
.
Methods declared in class java.lang.
Object
clone
,
finalize
,
getClass
,
notify
,
notifyAll
,
wait
,
wait
,
wait
Constructor Details
Certificate
protected
Certificate
(
String
type)
Creates a certificate of the specified type.
Parameters:
type
- the standard name of the certificate type.
 See the CertificateFactory section in the
Java Security Standard Algorithm Names Specification
for information about standard certificate types.
Method Details
getType
public final
String
getType
()
Returns the type of this certificate.
Returns:
the type of this certificate.
equals
public
boolean
equals
(
Object
other)
Compares this certificate for equality with the specified
 object. If the
other
object is an
instanceof
Certificate
, then
 its encoded form is retrieved and compared with the
 encoded form of this certificate.
Overrides:
equals
in class
Object
Parameters:
other
- the object to test for equality with this certificate.
Returns:
true iff the encoded forms of the two certificates
 match, false otherwise.
See Also:
Object.hashCode()
HashMap
hashCode
public
int
hashCode
()
Returns a hashcode value for this certificate from its
 encoded form.
Overrides:
hashCode
in class
Object
Returns:
the hashcode value.
See Also:
Object.equals(java.lang.Object)
System.identityHashCode(java.lang.Object)
getEncoded
public abstract
byte[]
getEncoded
()
                           throws
CertificateEncodingException
Returns the encoded form of this certificate. It is
 assumed that each certificate type would have only a single
 form of encoding; for example, X.509 certificates would
 be encoded as ASN.1 DER.
Returns:
the encoded form of this certificate
Throws:
CertificateEncodingException
- if an encoding error occurs.
verify
public abstract
void
verify
(
PublicKey
key)
throws
CertificateException
,
NoSuchAlgorithmException
,
InvalidKeyException
,
NoSuchProviderException
,
SignatureException
Verifies that this certificate was signed using the
 private key that corresponds to the specified public key.
Parameters:
key
- the PublicKey used to carry out the verification.
Throws:
NoSuchAlgorithmException
- on unsupported signature
 algorithms.
InvalidKeyException
- on incorrect key.
NoSuchProviderException
- if there's no default provider.
SignatureException
- on signature errors.
CertificateException
- on encoding errors.
verify
public abstract
void
verify
(
PublicKey
key,
String
sigProvider)
throws
CertificateException
,
NoSuchAlgorithmException
,
InvalidKeyException
,
NoSuchProviderException
,
SignatureException
Verifies that this certificate was signed using the
 private key that corresponds to the specified public key.
 This method uses the signature verification engine
 supplied by the specified provider.
Parameters:
key
- the PublicKey used to carry out the verification.
sigProvider
- the name of the signature provider.
Throws:
NoSuchAlgorithmException
- on unsupported signature
 algorithms.
InvalidKeyException
- on incorrect key.
NoSuchProviderException
- on incorrect provider.
SignatureException
- on signature errors.
CertificateException
- on encoding errors.
verify
public
void
verify
(
PublicKey
key,
Provider
sigProvider)
throws
CertificateException
,
NoSuchAlgorithmException
,
InvalidKeyException
,
SignatureException
Verifies that this certificate was signed using the
 private key that corresponds to the specified public key.
 This method uses the signature verification engine
 supplied by the specified provider. Note that the specified
 Provider object does not have to be registered in the provider list.
This method was added to version 1.8 of the Java Platform
 Standard Edition. In order to maintain backwards compatibility with
 existing service providers, this method cannot be
abstract
and by default throws an
UnsupportedOperationException
.
Parameters:
key
- the PublicKey used to carry out the verification.
sigProvider
- the signature provider.
Throws:
NoSuchAlgorithmException
- on unsupported signature
 algorithms.
InvalidKeyException
- on incorrect key.
SignatureException
- on signature errors.
CertificateException
- on encoding errors.
UnsupportedOperationException
- if the method is not supported
Since:
1.8
toString
public abstract
String
toString
()
Returns a string representation of this certificate.
Overrides:
toString
in class
Object
Returns:
a string representation of this certificate.
getPublicKey
public abstract
PublicKey
getPublicKey
()
Gets the public key from this certificate.
Returns:
the public key.
writeReplace
protected
Object
writeReplace
()
                       throws
ObjectStreamException
Replace the
Certificate
to be serialized with a
CertificateRep
object containing the type and
 encoded bytes of the
Certificate
.
Returns:
a
CertificateRep
object containing the type and encoded
         bytes of the
Certificate
Throws:
ObjectStreamException
- if a
CertificateRep
object
         representing this
Certificate
could not be created
Since:
1.3
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.