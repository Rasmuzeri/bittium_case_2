Uses of Package java.util (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Package
java.util
Packages that use
java.util
Package
Description
com.sun.java.accessibility.util
Provides a collection of interfaces and classes that compose the Java Accessibility
 Utilities.
com.sun.jdi
This is the core package of the Java Debug
 Interface (JDI), it defines mirrors for values, types, and the target
 VirtualMachine itself - as well bootstrapping facilities.
com.sun.jdi.connect
This package defines connections between the virtual machine
 using the JDI and the target virtual machine.
com.sun.jdi.event
This package defines JDI events and event processing.
com.sun.jdi.request
This package is used to request that a JDI
 event be sent under specified conditions.
com.sun.management
This package contains the JDK's extension to
 the standard implementation of the
java.lang.management
API and also defines the management
 interface for some other components of the platform.
com.sun.net.httpserver
Provides a simple high-level Http server API, which can be used to build
   embedded HTTP servers.
com.sun.nio.sctp
A Java API for Stream Control Transport Protocol.
com.sun.security.auth.module
Provides implementations of
LoginModule
.
com.sun.source.doctree
Provides interfaces to represent documentation comments as abstract syntax
 trees (AST).
com.sun.source.tree
Provides interfaces to represent source code as abstract syntax
 trees (AST).
com.sun.source.util
Provides utilities for operations on abstract syntax trees (AST).
com.sun.tools.attach
Provides the API to attach to a Java virtual machine.
com.sun.tools.attach.spi
Only developers who are defining new attach providers should need to make
 direct use of this package.
com.sun.tools.jconsole
This package contains the JConsole API.
java.applet
Provides the classes necessary to create an applet and the classes an applet
 uses to communicate with its applet context.
java.awt
Contains all of the classes for creating user interfaces and for painting
 graphics and images.
java.awt.datatransfer
Provides interfaces and classes for transferring data between and within
 applications.
java.awt.desktop
Provides interfaces and classes for interaction with various desktop
 capabilities.
java.awt.dnd
Drag and Drop is a direct manipulation gesture found in many Graphical User
 Interface systems that provides a mechanism to transfer information between
 two entities logically associated with presentation elements in the GUI.
java.awt.event
Provides interfaces and classes for dealing with different types of events
 fired by AWT components.
java.awt.font
Provides classes and interface relating to fonts.
java.awt.im
Provides classes and interfaces for the input method framework.
java.awt.im.spi
Provides interfaces that enable the development of input methods that can be
 used with any Java runtime environment.
java.awt.image
Provides classes for creating and modifying images.
java.awt.image.renderable
Provides classes and interfaces for producing rendering-independent images.
java.beans
Contains classes related to developing
beans
-- components based on
 the JavaBeans architecture.
java.beans.beancontext
Provides classes and interfaces relating to bean context.
java.io
Provides for system input and output through data streams,
 serialization and the file system.
java.lang
Provides classes that are fundamental to the design of the Java
 programming language.
java.lang.constant
Classes and interfaces to represent
nominal descriptors
for run-time
 entities such as classes or method handles, and classfile entities such as
 constant pool entries or
invokedynamic
call sites.
java.lang.foreign
Provides low-level access to memory and functions outside the Java runtime.
java.lang.instrument
Provides services that allow Java programming language agents to instrument
 programs running on the Java Virtual Machine (JVM).
java.lang.invoke
The
java.lang.invoke
package provides low-level primitives for interacting
 with the Java Virtual Machine.
java.lang.management
Provides the management interfaces for monitoring and management of the
Java virtual machine and other components in the Java runtime.
java.lang.module
Classes to support module descriptors and creating configurations of modules
 by means of resolution and service binding.
java.lang.reflect
Provides classes and interfaces for obtaining reflective information about
 classes and objects.
java.math
Provides classes for performing arbitrary-precision integer
 arithmetic (
BigInteger
) and arbitrary-precision decimal
 arithmetic (
BigDecimal
).
java.net
Provides the classes for implementing networking applications.
java.net.http
HTTP Client and WebSocket APIs
java.nio.channels
Defines channels, which represent connections to entities that are capable of
 performing I/O operations, such as files and sockets; defines selectors, for
 multiplexed, non-blocking I/O operations.
java.nio.channels.spi
Service-provider classes for the
java.nio.channels
package.
java.nio.charset
Defines charsets, decoders, and encoders, for translating between
 bytes and Unicode characters.
java.nio.charset.spi
Service-provider classes for the
java.nio.charset
package.
java.nio.file
Defines interfaces and classes for the Java virtual machine to access files,
 file attributes, and file systems.
java.nio.file.attribute
Interfaces and classes providing access to file and file system attributes.
java.nio.file.spi
Service-provider classes for the
java.nio.file
package.
java.security
Provides the classes and interfaces for the security framework.
java.security.cert
Provides classes and interfaces for parsing and managing
 certificates, certificate revocation lists (CRLs), and
 certification paths.
java.security.interfaces
Provides interfaces for generating RSA (Rivest, Shamir and
 Adleman AsymmetricCipher algorithm)
 keys as defined in the RSA Laboratory Technical Note
 PKCS#1, and DSA (Digital Signature
 Algorithm) keys as defined in NIST's FIPS-186.
java.security.spec
Provides classes and interfaces for key specifications and algorithm
 parameter specifications.
java.sql
Provides the API for accessing and processing data stored in a
 data source (usually a relational database) using the
 Java programming language.
java.text
Provides classes and interfaces for handling text, dates, numbers,
 and messages in a manner independent of natural languages.
java.text.spi
Service provider classes for the classes in the java.text package.
java.time
The main API for dates, times, instants, and durations.
java.time.chrono
Generic API for calendar systems other than the default ISO.
java.time.format
Provides classes to print and parse dates and times.
java.time.temporal
Access to date and time using fields and units, and date time adjusters.
java.time.zone
Support for time-zones and their rules.
java.util
Contains the collections framework, some internationalization support classes,
 a service loader, properties, random number generation, string parsing
 and scanning classes, base64 encoding and decoding, a bit array, and
 several miscellaneous utility classes.
java.util.concurrent
Utility classes commonly useful in concurrent programming.
java.util.concurrent.locks
Interfaces and classes providing a framework for locking and waiting
 for conditions that is distinct from built-in synchronization and
 monitors.
java.util.function
Functional interfaces
provide target types for lambda expressions
 and method references.
java.util.jar
Provides classes for reading and writing the JAR (Java ARchive)
 file format, which is based on the standard ZIP file format with an
 optional manifest file.
java.util.logging
Provides the classes and interfaces of
 the Java 2 platform's core logging facilities.
java.util.prefs
This package allows applications to store and retrieve user and system
 preference and configuration data.
java.util.regex
Classes for matching character sequences against patterns specified
 by regular expressions.
java.util.spi
Service provider classes for the classes in the java.util package.
java.util.stream
Classes to support functional-style operations on streams of elements, such
 as map-reduce transformations on collections.
java.util.zip
Provides classes for reading and writing the standard ZIP and GZIP file
 formats.
javax.accessibility
Defines a contract between user-interface components and an assistive
 technology that provides access to those components.
javax.annotation.processing
Facilities for declaring annotation processors and for
 allowing annotation processors to communicate with an annotation processing
 tool environment.
javax.imageio
The main package of the Java Image I/O API.
javax.imageio.event
A package of the Java Image I/O API dealing with synchronous notification of
 events during the reading and writing of images.
javax.imageio.metadata
A package of the Java Image I/O API dealing with reading and writing
 metadata.
javax.imageio.plugins.bmp
Package containing the public classes used by the built-in BMP plug-in.
javax.imageio.plugins.jpeg
Classes supporting the built-in JPEG plug-in.
javax.imageio.plugins.tiff
Public classes used by the built-in TIFF plug-ins.
javax.imageio.spi
A package of the Java Image I/O API containing the plug-in interfaces for
 readers, writers, transcoders, and streams, and a runtime registry.
javax.lang.model
Types and hierarchies of packages comprising a Java language model, a model of the declarations and types of the Java
 programming language.
javax.lang.model.element
Interfaces used to model elements of the Java programming language.
javax.lang.model.type
Interfaces used to model Java programming language types.
javax.lang.model.util
Utilities to assist in the processing of
program elements
and
types
.
javax.management
Provides the core classes for the Java Management Extensions.
javax.management.loading
Provides the classes which implement advanced dynamic
        loading.
javax.management.monitor
Provides the definition of the monitor classes.
javax.management.openmbean
Provides the open data types and Open MBean descriptor classes.
javax.management.relation
Provides the definition of the Relation Service.
javax.management.remote
Interfaces for remote access to
        JMX MBean servers.
javax.management.remote.rmi
The RMI connector is a connector for the JMX Remote API that
      uses RMI to transmit client requests to a remote MBean server.
javax.management.timer
Provides the definition of the Timer MBean.
javax.naming
Provides the classes and interfaces for accessing naming services.
javax.naming.directory
Extends the
javax.naming
package to provide functionality
for accessing directory services.
javax.naming.event
Provides support for event notification when accessing naming and
directory services.
javax.naming.ldap
Provides support for LDAPv3 extended operations and controls.
javax.naming.ldap.spi
javax.naming.spi
Provides the means for dynamically plugging in support for accessing
naming and directory services through the
javax.naming
and related packages.
javax.net.ssl
Provides classes for the secure socket package.
javax.print.attribute
Provides classes and interfaces that describe the types of Java Print
 Service attributes and how they can be collected into attribute sets.
javax.print.attribute.standard
Package
javax.print.attribute.standard
contains classes for specific
 printing attributes.
javax.print.event
Package
javax.print.event
contains event classes and listener
 interfaces.
javax.script
The scripting API consists of interfaces and classes that define
Java Scripting Engines and provides
a framework for their use in Java applications.
javax.security.auth
This package provides a framework for authentication and
 authorization.
javax.security.auth.callback
This package provides the classes necessary for services
 to interact with applications in order to retrieve
 information (authentication data including usernames
 or passwords, for example) or to display information
 (error and warning messages, for example).
javax.security.auth.kerberos
This package contains utility classes related to the Kerberos network
 authentication protocol.
javax.security.auth.login
This package provides a pluggable authentication framework.
javax.security.auth.spi
This package provides the interface to be used for
 implementing pluggable authentication modules.
javax.security.auth.x500
This package contains the classes that should be used to store
 X500 Principal and X500 Private Credentials in a
Subject
.
javax.security.cert
Provides classes for public key certificates.
javax.security.sasl
Contains class and interfaces for supporting SASL.
javax.smartcardio
Java™ Smart Card I/O API.
javax.sound.midi
Provides interfaces and classes for I/O, sequencing, and synthesis of MIDI
 (Musical Instrument Digital Interface) data.
javax.sound.sampled
Provides interfaces and classes for capture, processing, and playback of
 sampled audio data.
javax.sql
Provides the API for server side data source access and processing from
 the Java programming language.
javax.sql.rowset
Standard interfaces and base classes for JDBC
RowSet
implementations.
javax.sql.rowset.serial
Provides utility classes to allow serializable mappings between SQL types
 and data types in the Java programming language.
javax.sql.rowset.spi
The standard classes and interfaces that a third party vendor has to
 use in its implementation of a synchronization provider.
javax.swing
Provides a set of "lightweight" (all-Java language) components
 that, to the maximum degree possible, work the same on all platforms.
javax.swing.event
Provides for events fired by Swing components.
javax.swing.plaf.basic
Provides user interface objects built according to the Basic look and feel.
javax.swing.plaf.metal
Provides user interface objects built according to the Java look and feel
 (once codenamed
Metal
), which is the default look and feel.
javax.swing.plaf.multi
Provides user interface objects that combine two or more look and feels.
javax.swing.plaf.synth
Synth is a skinnable look and feel in which all painting is delegated.
javax.swing.table
Provides classes and interfaces for dealing with
javax.swing.JTable
.
javax.swing.text
Provides classes and interfaces that deal with editable and noneditable text
 components.
javax.swing.text.html
Provides the class
HTMLEditorKit
and supporting classes for creating
 HTML text editors.
javax.swing.text.html.parser
Provides the default HTML parser, along with support classes.
javax.swing.tree
Provides classes and interfaces for dealing with
javax.swing.JTree
.
javax.swing.undo
Allows developers to provide support for undo/redo in applications such as
 text editors.
javax.tools
Provides interfaces for tools which can be invoked from a program,
 for example, compilers.
javax.xml.crypto
Common classes for XML cryptography.
javax.xml.crypto.dom
DOM-specific classes for the
javax.xml.crypto
package.
javax.xml.crypto.dsig
Classes for generating and validating XML digital
 signatures.
javax.xml.crypto.dsig.keyinfo
Classes for parsing and processing
KeyInfo
elements and structures.
javax.xml.crypto.dsig.spec
Parameter classes for XML digital signatures.
javax.xml.datatype
Defines XML/Java Type Mappings.
javax.xml.namespace
Defines XML Namespace processing.
javax.xml.stream
Defines interfaces and classes for the Streaming API for XML (StAX).
javax.xml.stream.events
Defines event interfaces for the Streaming API for XML (StAX).
javax.xml.stream.util
Provides utility classes for the Streaming API for XML (StAX).
javax.xml.transform
Defines the generic APIs for processing transformation instructions,
 and performing a transformation from source to result.
javax.xml.xpath
Provides an
object-model neutral
API for the
 evaluation of XPath expressions and access to the evaluation
 environment.
jdk.dynalink
Contains interfaces and classes that are used to link an
invokedynamic
call site.
jdk.dynalink.beans
Contains the linker for ordinary Java objects.
jdk.dynalink.linker
Contains interfaces and classes needed by language runtimes to implement
 their own language-specific object models and type conversions.
jdk.dynalink.linker.support
Contains classes that make it more convenient for language runtimes to
 implement their own language-specific object models and type conversions
 by providing basic implementations of some classes as well as various
 utilities.
jdk.javadoc.doclet
The Doclet API provides an environment which, in conjunction with
 the Language Model API and Compiler Tree API, allows clients
 to inspect the source-level structures of programs and
 libraries, including API comments embedded in the source.
jdk.jfr
This package provides classes to create events and control Flight Recorder.
jdk.jfr.consumer
This package contains classes for consuming Flight Recorder data.
jdk.jshell
Provides interfaces for creating tools, such as a Read-Eval-Print Loop (REPL),
 which interactively evaluate "snippets" of Java programming language code.
jdk.jshell.execution
Provides implementation support for building JShell execution engines.
jdk.jshell.spi
Defines the Service Provider Interface for pluggable JShell execution engines.
jdk.jshell.tool
Provides a mechanism to launch an instance of a Java shell tool.
jdk.management.jfr
This package contains classes to control and monitor Flight Recorder over Java Management Extensions (JMX).
jdk.net
Platform specific socket options for the
java.net
and
java.nio.channels
socket classes.
org.xml.sax
Provides the interfaces for the Simple API for XML (SAX).
org.xml.sax.helpers
Provides helper classes, including
 support for bootstrapping SAX-based applications.
Classes in
java.util
used by
com.sun.java.accessibility.util
Class
Description
EventListener
A tagging interface that all event listener interfaces must extend.
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Classes in
java.util
used by
com.sun.jdi
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
Classes in
java.util
used by
com.sun.jdi.connect
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
Classes in
java.util
used by
com.sun.jdi.event
Class
Description
Collection
The root interface in the
collection hierarchy
.
Iterator
An iterator over a collection.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
com.sun.jdi.request
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Classes in
java.util
used by
com.sun.management
Class
Description
Collection
The root interface in the
collection hierarchy
.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
Classes in
java.util
used by
com.sun.net.httpserver
Class
Description
Collection
The root interface in the
collection hierarchy
.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
Map.Entry
A map entry (key-value pair).
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
com.sun.nio.sctp
Class
Description
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
com.sun.security.auth.module
Class
Description
Map
An object that maps keys to values.
Classes in
java.util
used by
com.sun.source.doctree
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Classes in
java.util
used by
com.sun.source.tree
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
com.sun.source.util
Class
Description
Iterator
An iterator over a collection.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Classes in
java.util
used by
com.sun.tools.attach
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Properties
The
Properties
class represents a persistent set of
 properties.
Classes in
java.util
used by
com.sun.tools.attach.spi
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Classes in
java.util
used by
com.sun.tools.jconsole
Class
Description
Map
An object that maps keys to values.
Classes in
java.util
used by
java.applet
Class
Description
Enumeration
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
Iterator
An iterator over a collection.
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Classes in
java.util
used by
java.awt
Class
Description
Collection
The root interface in the
collection hierarchy
.
EmptyStackException
Thrown by methods in the
Stack
class to indicate
 that the stack is empty.
Enumeration
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
EventListener
A tagging interface that all event listener interfaces must extend.
EventObject
The root class from which all event state objects shall be derived.
Hashtable
This class implements a hash table, which maps keys to values.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Map
An object that maps keys to values.
Map.Entry
A map entry (key-value pair).
Properties
The
Properties
class represents a persistent set of
 properties.
ResourceBundle
Resource bundles contain locale-specific objects.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
java.awt.datatransfer
Class
Description
EventListener
A tagging interface that all event listener interfaces must extend.
EventObject
The root class from which all event state objects shall be derived.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
Classes in
java.util
used by
java.awt.desktop
Class
Description
EventListener
A tagging interface that all event listener interfaces must extend.
EventObject
The root class from which all event state objects shall be derived.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Classes in
java.util
used by
java.awt.dnd
Class
Description
ArrayList
Resizable-array implementation of the
List
interface.
EventListener
A tagging interface that all event listener interfaces must extend.
EventObject
The root class from which all event state objects shall be derived.
Iterator
An iterator over a collection.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
TooManyListenersException
The
TooManyListenersException
Exception is used as part of
 the Java Event model to annotate and implement a unicast special case of
 a multicast Event Source.
Classes in
java.util
used by
java.awt.event
Class
Description
EventListener
A tagging interface that all event listener interfaces must extend.
EventListenerProxy
An abstract wrapper class for an
EventListener
class
 which associates a set of additional parameters with the listener.
EventObject
The root class from which all event state objects shall be derived.
Classes in
java.util
used by
java.awt.font
Class
Description
Map
An object that maps keys to values.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
java.awt.im
Class
Description
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Map
An object that maps keys to values.
Classes in
java.util
used by
java.awt.im.spi
Class
Description
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Classes in
java.util
used by
java.awt.image
Class
Description
Hashtable
This class implements a hash table, which maps keys to values.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Vector
The
Vector
class implements a growable array of
 objects.
Classes in
java.util
used by
java.awt.image.renderable
Class
Description
Vector
The
Vector
class implements a growable array of
 objects.
Classes in
java.util
used by
java.beans
Class
Description
Enumeration
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
EventListener
A tagging interface that all event listener interfaces must extend.
EventListenerProxy
An abstract wrapper class for an
EventListener
class
 which associates a set of additional parameters with the listener.
EventObject
The root class from which all event state objects shall be derived.
Classes in
java.util
used by
java.beans.beancontext
Class
Description
ArrayList
Resizable-array implementation of the
List
interface.
Collection
The root interface in the
collection hierarchy
.
EventListener
A tagging interface that all event listener interfaces must extend.
EventObject
The root class from which all event state objects shall be derived.
HashMap
Hash table based implementation of the
Map
interface.
Iterator
An iterator over a collection.
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
TooManyListenersException
The
TooManyListenersException
Exception is used as part of
 the Java Event model to annotate and implement a unicast special case of
 a multicast Event Source.
Classes in
java.util
used by
java.io
Class
Description
Enumeration
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Classes in
java.util
used by
java.lang
Class
Description
Comparator
A comparison function, which imposes a
total ordering
on
 some collection of objects.
Enumeration
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
Iterator
An iterator over a collection.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Map
An object that maps keys to values.
Optional
A container object which may or may not contain a non-
null
value.
Properties
The
Properties
class represents a persistent set of
 properties.
ResourceBundle
Resource bundles contain locale-specific objects.
Set
A collection that contains no duplicate elements.
Spliterator
An object for traversing and partitioning elements of a source.
Classes in
java.util
used by
java.lang.constant
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Optional
A container object which may or may not contain a non-
null
value.
Classes in
java.util
used by
java.lang.foreign
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Optional
A container object which may or may not contain a non-
null
value.
Spliterator
An object for traversing and partitioning elements of a source.
Classes in
java.util
used by
java.lang.instrument
Class
Description
Map
An object that maps keys to values.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
java.lang.invoke
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Optional
A container object which may or may not contain a non-
null
value.
Classes in
java.util
used by
java.lang.management
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
java.lang.module
Class
Description
Collection
The root interface in the
collection hierarchy
.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Optional
A container object which may or may not contain a non-
null
value.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
java.lang.reflect
Class
Description
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
java.math
Class
Description
Random
An instance of this class is used to generate a stream of
 pseudorandom numbers; its period is only 2
48
.
Classes in
java.util
used by
java.net
Class
Description
Enumeration
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
Optional
A container object which may or may not contain a non-
null
value.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
java.net.http
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
Optional
A container object which may or may not contain a non-
null
value.
OptionalLong
A container object which may or may not contain a
long
value.
Classes in
java.util
used by
java.nio.channels
Class
Description
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
java.nio.channels.spi
Class
Description
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
java.nio.charset
Class
Description
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Set
A collection that contains no duplicate elements.
SortedMap
A
Map
that further provides a
total ordering
on its keys.
Classes in
java.util
used by
java.nio.charset.spi
Class
Description
Iterator
An iterator over a collection.
Classes in
java.util
used by
java.nio.file
Class
Description
ConcurrentModificationException
This exception may be thrown by methods that have detected concurrent
 modification of an object when such modification is not permissible.
Iterator
An iterator over a collection.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
java.nio.file.attribute
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
java.nio.file.spi
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
java.security
Class
Description
Collection
The root interface in the
collection hierarchy
.
Date
The class
Date
represents a specific instant
 in time, with millisecond precision.
Dictionary
The
Dictionary
class is the abstract parent of any
 class, such as
Hashtable
, which maps keys to values.
Enumeration
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
Hashtable
This class implements a hash table, which maps keys to values.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
Map.Entry
A map entry (key-value pair).
Properties
The
Properties
class represents a persistent set of
 properties.
Random
An instance of this class is used to generate a stream of
 pseudorandom numbers; its period is only 2
48
.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
java.security.cert
Class
Description
Collection
The root interface in the
collection hierarchy
.
Date
The class
Date
represents a specific instant
 in time, with millisecond precision.
Iterator
An iterator over a collection.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
java.security.interfaces
Class
Description
Optional
A container object which may or may not contain a non-
null
value.
Classes in
java.util
used by
java.security.spec
Class
Description
Optional
A container object which may or may not contain a non-
null
value.
Classes in
java.util
used by
java.sql
Class
Description
Calendar
The
Calendar
class is an abstract class that provides methods
 for converting between a specific instant in time and a set of
calendar fields
such as
YEAR
,
MONTH
,
DAY_OF_MONTH
,
HOUR
, and so on, and for
 manipulating the calendar fields, such as getting the date of the next
 week.
Date
The class
Date
represents a specific instant
 in time, with millisecond precision.
Enumeration
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
Iterator
An iterator over a collection.
Map
An object that maps keys to values.
Properties
The
Properties
class represents a persistent set of
 properties.
Classes in
java.util
used by
java.text
Class
Description
Calendar
The
Calendar
class is an abstract class that provides methods
 for converting between a specific instant in time and a set of
calendar fields
such as
YEAR
,
MONTH
,
DAY_OF_MONTH
,
HOUR
, and so on, and for
 manipulating the calendar fields, such as getting the date of the next
 week.
Comparator
A comparison function, which imposes a
total ordering
on
 some collection of objects.
Currency
Represents a currency.
Date
The class
Date
represents a specific instant
 in time, with millisecond precision.
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Map
An object that maps keys to values.
Set
A collection that contains no duplicate elements.
TimeZone
TimeZone
represents a time zone offset, and also figures out daylight
 savings.
Classes in
java.util
used by
java.text.spi
Class
Description
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Classes in
java.util
used by
java.time
Class
Description
Comparator
A comparison function, which imposes a
total ordering
on
 some collection of objects.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Map
An object that maps keys to values.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
java.time.chrono
Class
Description
Comparator
A comparison function, which imposes a
total ordering
on
 some collection of objects.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Map
An object that maps keys to values.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
java.time.format
Class
Description
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Map
An object that maps keys to values.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
java.time.temporal
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Map
An object that maps keys to values.
Classes in
java.util
used by
java.time.zone
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
NavigableMap
A
SortedMap
extended with navigation methods returning the
 closest matches for given search targets.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
java.util
Class
Description
AbstractCollection
This class provides a skeletal implementation of the
Collection
interface, to minimize the effort required to implement this interface.
AbstractList
This class provides a skeletal implementation of the
List
interface to minimize the effort required to implement this interface
 backed by a "random access" data store (such as an array).
AbstractMap
This class provides a skeletal implementation of the
Map
interface, to minimize the effort required to implement this interface.
AbstractQueue
This class provides skeletal implementations of some
Queue
operations.
AbstractSequentialList
This class provides a skeletal implementation of the
List
interface to minimize the effort required to implement this interface
 backed by a "sequential access" data store (such as a linked list).
AbstractSet
This class provides a skeletal implementation of the
Set
interface to minimize the effort required to implement this
 interface.
ArrayDeque
Resizable-array implementation of the
Deque
interface.
ArrayList
Resizable-array implementation of the
List
interface.
Base64.Decoder
This class implements a decoder for decoding byte data using the
 Base64 encoding scheme as specified in RFC 4648 and RFC 2045.
Base64.Encoder
This class implements an encoder for encoding byte data using
 the Base64 encoding scheme as specified in RFC 4648 and RFC 2045.
BitSet
This class implements a vector of bits that grows as needed.
Calendar
The
Calendar
class is an abstract class that provides methods
 for converting between a specific instant in time and a set of
calendar fields
such as
YEAR
,
MONTH
,
DAY_OF_MONTH
,
HOUR
, and so on, and for
 manipulating the calendar fields, such as getting the date of the next
 week.
Calendar.Builder
Calendar.Builder
is used for creating a
Calendar
from
 various date-time parameters.
Collection
The root interface in the
collection hierarchy
.
Comparator
A comparison function, which imposes a
total ordering
on
 some collection of objects.
Currency
Represents a currency.
Date
The class
Date
represents a specific instant
 in time, with millisecond precision.
Deque
A linear collection that supports element insertion and removal at
 both ends.
Dictionary
The
Dictionary
class is the abstract parent of any
 class, such as
Hashtable
, which maps keys to values.
DoubleSummaryStatistics
A state object for collecting statistics such as count, min, max, sum, and
 average.
Enumeration
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
EnumMap
A specialized
Map
implementation for use with enum type keys.
EnumSet
A specialized
Set
implementation for use with enum types.
EventListener
A tagging interface that all event listener interfaces must extend.
FormatProcessor
Preview.
This
StringTemplate.Processor
PREVIEW
constructs a
String
result using
Formatter
specifications and values found in the
StringTemplate
PREVIEW
.
Formatter
An interpreter for printf-style format strings.
Formatter.BigDecimalLayoutForm
Enum for
BigDecimal
formatting.
GregorianCalendar
GregorianCalendar
is a concrete subclass of
Calendar
and provides the standard calendar system
 used by most of the world.
HashMap
Hash table based implementation of the
Map
interface.
HashSet
This class implements the
Set
interface, backed by a hash table
 (actually a
HashMap
instance).
Hashtable
This class implements a hash table, which maps keys to values.
HexFormat
HexFormat
converts between bytes and chars and hex-encoded strings which may include
 additional formatting markup such as prefixes, suffixes, and delimiters.
IllegalFormatException
Unchecked exception thrown when a format string contains an illegal syntax
 or a format specifier that is incompatible with the given arguments.
IntSummaryStatistics
A state object for collecting statistics such as count, min, max, sum, and
 average.
InvalidPropertiesFormatException
Thrown to indicate that an operation could not complete because
 the input did not conform to the appropriate XML document type
 for a collection of properties, as per the
Properties
specification.
Iterator
An iterator over a collection.
LinkedHashMap
Hash table and linked list implementation of the
Map
interface,
 with well-defined encounter order.
LinkedHashSet
Hash table and linked list implementation of the
Set
interface,
 with well-defined encounter order.
LinkedList
Doubly-linked list implementation of the
List
and
Deque
interfaces.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
ListIterator
An iterator for lists that allows the programmer
 to traverse the list in either direction, modify
 the list during iteration, and obtain the iterator's
 current position in the list.
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Locale.Builder
Builder
is used to build instances of
Locale
from values configured by the setters.
Locale.Category
Enum for locale categories.
Locale.FilteringMode
This enum provides constants to select a filtering mode for locale
 matching.
Locale.IsoCountryCode
Enum for specifying the type defined in ISO 3166.
Locale.LanguageRange
This class expresses a
Language Range
defined in
RFC 4647 Matching of
 Language Tags
.
LongSummaryStatistics
A state object for collecting statistics such as count, min, max, sum, and
 average.
Map
An object that maps keys to values.
Map.Entry
A map entry (key-value pair).
MissingResourceException
Signals that a resource is missing.
NavigableMap
A
SortedMap
extended with navigation methods returning the
 closest matches for given search targets.
NavigableSet
A
SortedSet
extended with navigation methods reporting
 closest matches for given search targets.
NoSuchElementException
Thrown by various accessor methods to indicate that the element being requested
 does not exist.
Observable
Deprecated.
This class and the
Observer
interface have been deprecated.
Observer
Deprecated.
This interface has been deprecated.
Optional
A container object which may or may not contain a non-
null
value.
OptionalDouble
A container object which may or may not contain a
double
value.
OptionalInt
A container object which may or may not contain an
int
value.
OptionalLong
A container object which may or may not contain a
long
value.
PrimitiveIterator
A base type for primitive specializations of
Iterator
.
PrimitiveIterator.OfDouble
An Iterator specialized for
double
values.
PrimitiveIterator.OfInt
An Iterator specialized for
int
values.
PrimitiveIterator.OfLong
An Iterator specialized for
long
values.
PriorityQueue
An unbounded priority
queue
based on a priority heap.
Properties
The
Properties
class represents a persistent set of
 properties.
Queue
A collection designed for holding elements prior to processing.
Random
An instance of this class is used to generate a stream of
 pseudorandom numbers; its period is only 2
48
.
RandomAccess
Marker interface used by
List
implementations to indicate that
 they support fast (generally constant time) random access.
ResourceBundle
Resource bundles contain locale-specific objects.
ResourceBundle.Control
ResourceBundle.Control
defines a set of callback methods
 that are invoked by the
ResourceBundle.getBundle
factory
 methods during the bundle loading process.
Scanner
A simple text scanner which can parse primitive types and strings using
 regular expressions.
SequencedCollection
A collection that has a well-defined encounter order, that supports operations at both ends,
 and that is reversible.
SequencedMap
A Map that has a well-defined encounter order, that supports operations at both ends, and
 that is reversible.
SequencedSet
A collection that is both a
SequencedCollection
and a
Set
.
ServiceLoader
A facility to load implementations of a service.
ServiceLoader.Provider
Represents a service provider located by
ServiceLoader
.
Set
A collection that contains no duplicate elements.
SortedMap
A
Map
that further provides a
total ordering
on its keys.
SortedSet
A
Set
that further provides a
total ordering
on its elements.
Spliterator
An object for traversing and partitioning elements of a source.
Spliterator.OfDouble
A Spliterator specialized for
double
values.
Spliterator.OfInt
A Spliterator specialized for
int
values.
Spliterator.OfLong
A Spliterator specialized for
long
values.
Spliterator.OfPrimitive
A Spliterator specialized for primitive values.
SplittableRandom
A generator of uniform pseudorandom values (with period 2
64
)
 applicable for use in (among other contexts) isolated parallel
 computations that may generate subtasks.
StringJoiner
StringJoiner
is used to construct a sequence of characters separated
 by a delimiter and optionally starting with a supplied prefix
 and ending with a supplied suffix.
TimerTask
A task that can be scheduled for one-time or repeated execution by a
Timer
.
TimeZone
TimeZone
represents a time zone offset, and also figures out daylight
 savings.
UUID
A class that represents an immutable universally unique identifier (UUID).
Vector
The
Vector
class implements a growable array of
 objects.
WeakHashMap
Hash table based implementation of the
Map
interface, with
weak keys
.
Classes in
java.util
used by
java.util.concurrent
Class
Description
AbstractCollection
This class provides a skeletal implementation of the
Collection
interface, to minimize the effort required to implement this interface.
AbstractMap
This class provides a skeletal implementation of the
Map
interface, to minimize the effort required to implement this interface.
AbstractQueue
This class provides skeletal implementations of some
Queue
operations.
AbstractSet
This class provides a skeletal implementation of the
Set
interface to minimize the effort required to implement this
 interface.
Collection
The root interface in the
collection hierarchy
.
Comparator
A comparison function, which imposes a
total ordering
on
 some collection of objects.
Deque
A linear collection that supports element insertion and removal at
 both ends.
Enumeration
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
Iterator
An iterator over a collection.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
ListIterator
An iterator for lists that allows the programmer
 to traverse the list in either direction, modify
 the list during iteration, and obtain the iterator's
 current position in the list.
Map
An object that maps keys to values.
Map.Entry
A map entry (key-value pair).
NavigableMap
A
SortedMap
extended with navigation methods returning the
 closest matches for given search targets.
NavigableSet
A
SortedSet
extended with navigation methods reporting
 closest matches for given search targets.
Optional
A container object which may or may not contain a non-
null
value.
Queue
A collection designed for holding elements prior to processing.
Random
An instance of this class is used to generate a stream of
 pseudorandom numbers; its period is only 2
48
.
RandomAccess
Marker interface used by
List
implementations to indicate that
 they support fast (generally constant time) random access.
SequencedCollection
A collection that has a well-defined encounter order, that supports operations at both ends,
 and that is reversible.
SequencedMap
A Map that has a well-defined encounter order, that supports operations at both ends, and
 that is reversible.
SequencedSet
A collection that is both a
SequencedCollection
and a
Set
.
Set
A collection that contains no duplicate elements.
SortedMap
A
Map
that further provides a
total ordering
on its keys.
SortedSet
A
Set
that further provides a
total ordering
on its elements.
Spliterator
An object for traversing and partitioning elements of a source.
Classes in
java.util
used by
java.util.concurrent.locks
Class
Description
Collection
The root interface in the
collection hierarchy
.
Date
The class
Date
represents a specific instant
 in time, with millisecond precision.
Classes in
java.util
used by
java.util.function
Class
Description
Comparator
A comparison function, which imposes a
total ordering
on
 some collection of objects.
Classes in
java.util
used by
java.util.jar
Class
Description
Collection
The root interface in the
collection hierarchy
.
Enumeration
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
Map
An object that maps keys to values.
Map.Entry
A map entry (key-value pair).
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
java.util.logging
Class
Description
Enumeration
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
ResourceBundle
Resource bundles contain locale-specific objects.
Classes in
java.util
used by
java.util.prefs
Class
Description
EventListener
A tagging interface that all event listener interfaces must extend.
EventObject
The root class from which all event state objects shall be derived.
Classes in
java.util
used by
java.util.regex
Class
Description
Map
An object that maps keys to values.
Classes in
java.util
used by
java.util.spi
Class
Description
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Map
An object that maps keys to values.
Optional
A container object which may or may not contain a non-
null
value.
ResourceBundle
Resource bundles contain locale-specific objects.
ResourceBundle.Control
ResourceBundle.Control
defines a set of callback methods
 that are invoked by the
ResourceBundle.getBundle
factory
 methods during the bundle loading process.
Classes in
java.util
used by
java.util.stream
Class
Description
Collection
The root interface in the
collection hierarchy
.
Comparator
A comparison function, which imposes a
total ordering
on
 some collection of objects.
DoubleSummaryStatistics
A state object for collecting statistics such as count, min, max, sum, and
 average.
IntSummaryStatistics
A state object for collecting statistics such as count, min, max, sum, and
 average.
Iterator
An iterator over a collection.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
LongSummaryStatistics
A state object for collecting statistics such as count, min, max, sum, and
 average.
Map
An object that maps keys to values.
Optional
A container object which may or may not contain a non-
null
value.
OptionalDouble
A container object which may or may not contain a
double
value.
OptionalInt
A container object which may or may not contain an
int
value.
OptionalLong
A container object which may or may not contain a
long
value.
Set
A collection that contains no duplicate elements.
Spliterator
An object for traversing and partitioning elements of a source.
Spliterator.OfDouble
A Spliterator specialized for
double
values.
Spliterator.OfInt
A Spliterator specialized for
int
values.
Spliterator.OfLong
A Spliterator specialized for
long
values.
Classes in
java.util
used by
java.util.zip
Class
Description
Enumeration
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
Classes in
java.util
used by
javax.accessibility
Class
Description
ListResourceBundle
ListResourceBundle
is an abstract subclass of
ResourceBundle
that manages resources for a locale
 in a convenient and easy to use list.
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
ResourceBundle
Resource bundles contain locale-specific objects.
Vector
The
Vector
class implements a growable array of
 objects.
Classes in
java.util
used by
javax.annotation.processing
Class
Description
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Map
An object that maps keys to values.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
javax.imageio
Class
Description
Iterator
An iterator over a collection.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
javax.imageio.event
Class
Description
EventListener
A tagging interface that all event listener interfaces must extend.
Classes in
java.util
used by
javax.imageio.metadata
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Classes in
java.util
used by
javax.imageio.plugins.bmp
Class
Description
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Classes in
java.util
used by
javax.imageio.plugins.jpeg
Class
Description
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Classes in
java.util
used by
javax.imageio.plugins.tiff
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
SortedSet
A
Set
that further provides a
total ordering
on its elements.
Classes in
java.util
used by
javax.imageio.spi
Class
Description
Iterator
An iterator over a collection.
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Classes in
java.util
used by
javax.lang.model
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Classes in
java.util
used by
javax.lang.model.element
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
javax.lang.model.type
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Classes in
java.util
used by
javax.lang.model.util
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
javax.management
Class
Description
AbstractCollection
This class provides a skeletal implementation of the
Collection
interface, to minimize the effort required to implement this interface.
AbstractList
This class provides a skeletal implementation of the
List
interface to minimize the effort required to implement this interface
 backed by a "random access" data store (such as an array).
ArrayList
Resizable-array implementation of the
List
interface.
Collection
The root interface in the
collection hierarchy
.
EventListener
A tagging interface that all event listener interfaces must extend.
EventObject
The root class from which all event state objects shall be derived.
Hashtable
This class implements a hash table, which maps keys to values.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
RandomAccess
Marker interface used by
List
implementations to indicate that
 they support fast (generally constant time) random access.
SequencedCollection
A collection that has a well-defined encounter order, that supports operations at both ends,
 and that is reversible.
Set
A collection that contains no duplicate elements.
Vector
The
Vector
class implements a growable array of
 objects.
Classes in
java.util
used by
javax.management.loading
Class
Description
Enumeration
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
javax.management.monitor
Class
Description
EventObject
The root class from which all event state objects shall be derived.
Classes in
java.util
used by
javax.management.openmbean
Class
Description
Collection
The root interface in the
collection hierarchy
.
Date
The class
Date
represents a specific instant
 in time, with millisecond precision.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
Map.Entry
A map entry (key-value pair).
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
javax.management.relation
Class
Description
AbstractCollection
This class provides a skeletal implementation of the
Collection
interface, to minimize the effort required to implement this interface.
AbstractList
This class provides a skeletal implementation of the
List
interface to minimize the effort required to implement this interface
 backed by a "random access" data store (such as an array).
ArrayList
Resizable-array implementation of the
List
interface.
Collection
The root interface in the
collection hierarchy
.
EventListener
A tagging interface that all event listener interfaces must extend.
EventObject
The root class from which all event state objects shall be derived.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
RandomAccess
Marker interface used by
List
implementations to indicate that
 they support fast (generally constant time) random access.
SequencedCollection
A collection that has a well-defined encounter order, that supports operations at both ends,
 and that is reversible.
Vector
The
Vector
class implements a growable array of
 objects.
Classes in
java.util
used by
javax.management.remote
Class
Description
EventObject
The root class from which all event state objects shall be derived.
Map
An object that maps keys to values.
Classes in
java.util
used by
javax.management.remote.rmi
Class
Description
Map
An object that maps keys to values.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
javax.management.timer
Class
Description
Date
The class
Date
represents a specific instant
 in time, with millisecond precision.
EventObject
The root class from which all event state objects shall be derived.
Vector
The
Vector
class implements a growable array of
 objects.
Classes in
java.util
used by
javax.naming
Class
Description
Enumeration
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
Hashtable
This class implements a hash table, which maps keys to values.
Properties
The
Properties
class represents a persistent set of
 properties.
Vector
The
Vector
class implements a growable array of
 objects.
Classes in
java.util
used by
javax.naming.directory
Class
Description
Hashtable
This class implements a hash table, which maps keys to values.
Vector
The
Vector
class implements a growable array of
 objects.
Classes in
java.util
used by
javax.naming.event
Class
Description
EventListener
A tagging interface that all event listener interfaces must extend.
EventObject
The root class from which all event state objects shall be derived.
Classes in
java.util
used by
javax.naming.ldap
Class
Description
Enumeration
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
EventListener
A tagging interface that all event listener interfaces must extend.
EventObject
The root class from which all event state objects shall be derived.
Hashtable
This class implements a hash table, which maps keys to values.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Classes in
java.util
used by
javax.naming.ldap.spi
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
Optional
A container object which may or may not contain a non-
null
value.
Classes in
java.util
used by
javax.naming.spi
Class
Description
Hashtable
This class implements a hash table, which maps keys to values.
Classes in
java.util
used by
javax.net.ssl
Class
Description
Collection
The root interface in the
collection hierarchy
.
Enumeration
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
EventListener
A tagging interface that all event listener interfaces must extend.
EventObject
The root class from which all event state objects shall be derived.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Optional
A container object which may or may not contain a non-
null
value.
Classes in
java.util
used by
javax.print.attribute
Class
Description
Date
The class
Date
represents a specific instant
 in time, with millisecond precision.
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Classes in
java.util
used by
javax.print.attribute.standard
Class
Description
AbstractCollection
This class provides a skeletal implementation of the
Collection
interface, to minimize the effort required to implement this interface.
AbstractMap
This class provides a skeletal implementation of the
Map
interface, to minimize the effort required to implement this interface.
AbstractSet
This class provides a skeletal implementation of the
Set
interface to minimize the effort required to implement this
 interface.
Collection
The root interface in the
collection hierarchy
.
Date
The class
Date
represents a specific instant
 in time, with millisecond precision.
HashMap
Hash table based implementation of the
Map
interface.
HashSet
This class implements the
Set
interface, backed by a hash table
 (actually a
HashMap
instance).
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Map
An object that maps keys to values.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
javax.print.event
Class
Description
EventObject
The root class from which all event state objects shall be derived.
Classes in
java.util
used by
javax.script
Class
Description
Collection
The root interface in the
collection hierarchy
.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
Map.Entry
A map entry (key-value pair).
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
javax.security.auth
Class
Description
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
javax.security.auth.callback
Class
Description
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Classes in
java.util
used by
javax.security.auth.kerberos
Class
Description
Date
The class
Date
represents a specific instant
 in time, with millisecond precision.
Classes in
java.util
used by
javax.security.auth.login
Class
Description
Map
An object that maps keys to values.
Classes in
java.util
used by
javax.security.auth.spi
Class
Description
Map
An object that maps keys to values.
Classes in
java.util
used by
javax.security.auth.x500
Class
Description
Map
An object that maps keys to values.
Classes in
java.util
used by
javax.security.cert
Class
Description
Date
The class
Date
represents a specific instant
 in time, with millisecond precision.
Classes in
java.util
used by
javax.security.sasl
Class
Description
Enumeration
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
Map
An object that maps keys to values.
Classes in
java.util
used by
javax.smartcardio
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Classes in
java.util
used by
javax.sound.midi
Class
Description
EventListener
A tagging interface that all event listener interfaces must extend.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
Vector
The
Vector
class implements a growable array of
 objects.
Classes in
java.util
used by
javax.sound.sampled
Class
Description
EventListener
A tagging interface that all event listener interfaces must extend.
EventObject
The root class from which all event state objects shall be derived.
Map
An object that maps keys to values.
Classes in
java.util
used by
javax.sql
Class
Description
Calendar
The
Calendar
class is an abstract class that provides methods
 for converting between a specific instant in time and a set of
calendar fields
such as
YEAR
,
MONTH
,
DAY_OF_MONTH
,
HOUR
, and so on, and for
 manipulating the calendar fields, such as getting the date of the next
 week.
EventListener
A tagging interface that all event listener interfaces must extend.
EventObject
The root class from which all event state objects shall be derived.
Map
An object that maps keys to values.
Classes in
java.util
used by
javax.sql.rowset
Class
Description
Calendar
The
Calendar
class is an abstract class that provides methods
 for converting between a specific instant in time and a set of
calendar fields
such as
YEAR
,
MONTH
,
DAY_OF_MONTH
,
HOUR
, and so on, and for
 manipulating the calendar fields, such as getting the date of the next
 week.
Collection
The root interface in the
collection hierarchy
.
Map
An object that maps keys to values.
Classes in
java.util
used by
javax.sql.rowset.serial
Class
Description
Map
An object that maps keys to values.
Vector
The
Vector
class implements a growable array of
 objects.
Classes in
java.util
used by
javax.sql.rowset.spi
Class
Description
Enumeration
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
Classes in
java.util
used by
javax.swing
Class
Description
Collection
The root interface in the
collection hierarchy
.
Comparator
A comparison function, which imposes a
total ordering
on
 some collection of objects.
Date
The class
Date
represents a specific instant
 in time, with millisecond precision.
Dictionary
The
Dictionary
class is the abstract parent of any
 class, such as
Hashtable
, which maps keys to values.
Enumeration
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
EventListener
A tagging interface that all event listener interfaces must extend.
EventObject
The root class from which all event state objects shall be derived.
Hashtable
This class implements a hash table, which maps keys to values.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Map
An object that maps keys to values.
Set
A collection that contains no duplicate elements.
Vector
The
Vector
class implements a growable array of
 objects.
Classes in
java.util
used by
javax.swing.event
Class
Description
EventListener
A tagging interface that all event listener interfaces must extend.
EventObject
The root class from which all event state objects shall be derived.
Classes in
java.util
used by
javax.swing.plaf.basic
Class
Description
EventListener
A tagging interface that all event listener interfaces must extend.
Hashtable
This class implements a hash table, which maps keys to values.
Vector
The
Vector
class implements a growable array of
 objects.
Classes in
java.util
used by
javax.swing.plaf.metal
Class
Description
EventListener
A tagging interface that all event listener interfaces must extend.
Classes in
java.util
used by
javax.swing.plaf.multi
Class
Description
Vector
The
Vector
class implements a growable array of
 objects.
Classes in
java.util
used by
javax.swing.plaf.synth
Class
Description
EventListener
A tagging interface that all event listener interfaces must extend.
Classes in
java.util
used by
javax.swing.table
Class
Description
Comparator
A comparison function, which imposes a
total ordering
on
 some collection of objects.
Enumeration
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
EventListener
A tagging interface that all event listener interfaces must extend.
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Vector
The
Vector
class implements a growable array of
 objects.
Classes in
java.util
used by
javax.swing.text
Class
Description
Dictionary
The
Dictionary
class is the abstract parent of any
 class, such as
Hashtable
, which maps keys to values.
Enumeration
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
EventListener
A tagging interface that all event listener interfaces must extend.
Vector
The
Vector
class implements a growable array of
 objects.
Classes in
java.util
used by
javax.swing.text.html
Class
Description
Enumeration
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
EventListener
A tagging interface that all event listener interfaces must extend.
EventObject
The root class from which all event state objects shall be derived.
Vector
The
Vector
class implements a growable array of
 objects.
Classes in
java.util
used by
javax.swing.text.html.parser
Class
Description
BitSet
This class implements a vector of bits that grows as needed.
Enumeration
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
Hashtable
This class implements a hash table, which maps keys to values.
Vector
The
Vector
class implements a growable array of
 objects.
Classes in
java.util
used by
javax.swing.tree
Class
Description
Enumeration
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
EventListener
A tagging interface that all event listener interfaces must extend.
EventObject
The root class from which all event state objects shall be derived.
Vector
The
Vector
class implements a growable array of
 objects.
Classes in
java.util
used by
javax.swing.undo
Class
Description
EventListener
A tagging interface that all event listener interfaces must extend.
Hashtable
This class implements a hash table, which maps keys to values.
Vector
The
Vector
class implements a growable array of
 objects.
Classes in
java.util
used by
javax.tools
Class
Description
Collection
The root interface in the
collection hierarchy
.
Iterator
An iterator over a collection.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
ServiceLoader
A facility to load implementations of a service.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
javax.xml.crypto
Class
Description
Iterator
An iterator over a collection.
Classes in
java.util
used by
javax.xml.crypto.dom
Class
Description
Iterator
An iterator over a collection.
Map.Entry
A map entry (key-value pair).
Classes in
java.util
used by
javax.xml.crypto.dsig
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Classes in
java.util
used by
javax.xml.crypto.dsig.keyinfo
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Classes in
java.util
used by
javax.xml.crypto.dsig.spec
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
Classes in
java.util
used by
javax.xml.datatype
Class
Description
Calendar
The
Calendar
class is an abstract class that provides methods
 for converting between a specific instant in time and a set of
calendar fields
such as
YEAR
,
MONTH
,
DAY_OF_MONTH
,
HOUR
, and so on, and for
 manipulating the calendar fields, such as getting the date of the next
 week.
Date
The class
Date
represents a specific instant
 in time, with millisecond precision.
GregorianCalendar
GregorianCalendar
is a concrete subclass of
Calendar
and provides the standard calendar system
 used by most of the world.
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
TimeZone
TimeZone
represents a time zone offset, and also figures out daylight
 savings.
Classes in
java.util
used by
javax.xml.namespace
Class
Description
Iterator
An iterator over a collection.
Classes in
java.util
used by
javax.xml.stream
Class
Description
Iterator
An iterator over a collection.
Classes in
java.util
used by
javax.xml.stream.events
Class
Description
Iterator
An iterator over a collection.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Classes in
java.util
used by
javax.xml.stream.util
Class
Description
Iterator
An iterator over a collection.
Classes in
java.util
used by
javax.xml.transform
Class
Description
Properties
The
Properties
class represents a persistent set of
 properties.
Classes in
java.util
used by
javax.xml.xpath
Class
Description
Iterator
An iterator over a collection.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Classes in
java.util
used by
jdk.dynalink
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
ServiceConfigurationError
Error thrown when something goes wrong while locating, loading, or
 instantiating a service provider.
Classes in
java.util
used by
jdk.dynalink.beans
Class
Description
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
jdk.dynalink.linker
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Classes in
java.util
used by
jdk.dynalink.linker.support
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Classes in
java.util
used by
jdk.javadoc.doclet
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
jdk.jfr
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
jdk.jfr.consumer
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
Classes in
java.util
used by
jdk.jshell
Class
Description
Collection
The root interface in the
collection hierarchy
.
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Map
An object that maps keys to values.
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
jdk.jshell.execution
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
Classes in
java.util
used by
jdk.jshell.spi
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
Optional
A container object which may or may not contain a non-
null
value.
Classes in
java.util
used by
jdk.jshell.tool
Class
Description
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Map
An object that maps keys to values.
Classes in
java.util
used by
jdk.management.jfr
Class
Description
List
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
Map
An object that maps keys to values.
Classes in
java.util
used by
jdk.net
Class
Description
Set
A collection that contains no duplicate elements.
Classes in
java.util
used by
org.xml.sax
Class
Description
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Classes in
java.util
used by
org.xml.sax.helpers
Class
Description
Enumeration
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.