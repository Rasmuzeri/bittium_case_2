Uses of Class java.util.concurrent.TimeoutException (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Class
java.util.concurrent.TimeoutException
Packages that use
TimeoutException
Package
Description
java.util.concurrent
Utility classes commonly useful in concurrent programming.
javax.swing
Provides a set of "lightweight" (all-Java language) components
 that, to the maximum degree possible, work the same on all platforms.
Uses of
TimeoutException
in
java.util.concurrent
Methods in
java.util.concurrent
that throw
TimeoutException
Modifier and Type
Method
Description
int
CyclicBarrier.
await
(long timeout,
TimeUnit
unit)
Waits until all
parties
have invoked
await
on this barrier, or the specified waiting time elapses.
int
Phaser.
awaitAdvanceInterruptibly
(int phase,
 long timeout,
TimeUnit
unit)
Awaits the phase of this phaser to advance from the given phase
 value or the given timeout to elapse, throwing
InterruptedException
if interrupted while waiting, or
 returning immediately if the current phase is not equal to the
 given phase value or this phaser is terminated.
V
Exchanger.
exchange
(
V
x,
 long timeout,
TimeUnit
unit)
Waits for another thread to arrive at this exchange point (unless
 the current thread is
interrupted
or
 the specified waiting time elapses), and then transfers the given
 object to it, receiving its object in return.
T
CompletableFuture.
get
(long timeout,
TimeUnit
unit)
Waits if necessary for at most the given time for this future
 to complete, and then returns its result, if available.
final
V
ForkJoinTask.
get
(long timeout,
TimeUnit
unit)
Waits if necessary for at most the given time for the computation
 to complete, and then retrieves its result, if available.
V
Future.
get
(long timeout,
TimeUnit
unit)
Waits if necessary for at most the given time for the computation
 to complete, and then retrieves its result, if available.
V
FutureTask.
get
(long timeout,
TimeUnit
unit)
<T> T
AbstractExecutorService.
invokeAny
(
Collection
<? extends
Callable
<T>> tasks,
 long timeout,
TimeUnit
unit)
<T> T
ExecutorService.
invokeAny
(
Collection
<? extends
Callable
<T>> tasks,
 long timeout,
TimeUnit
unit)
Executes the given tasks, returning the result
 of one that has completed successfully (i.e., without throwing
 an exception), if any do before the given timeout elapses.
StructuredTaskScope
PREVIEW
<
T
>
StructuredTaskScope.
joinUntil
(
Instant
deadline)
Wait for all subtasks started in this task scope to finish or the task scope to
 shut down, up to the given deadline.
StructuredTaskScope.ShutdownOnFailure
PREVIEW
StructuredTaskScope.ShutdownOnFailure.
joinUntil
(
Instant
deadline)
Wait for all subtasks started in this task scope to complete or for a subtask
 to
fail
PREVIEW
, up to the given deadline.
StructuredTaskScope.ShutdownOnSuccess
PREVIEW
<
T
>
StructuredTaskScope.ShutdownOnSuccess.
joinUntil
(
Instant
deadline)
Wait for a subtask started in this task scope to complete
successfully
PREVIEW
or all subtasks to complete, up to the
 given deadline.
Uses of
TimeoutException
in
javax.swing
Methods in
javax.swing
that throw
TimeoutException
Modifier and Type
Method
Description
final
T
SwingWorker.
get
(long timeout,
TimeUnit
unit)
Waits if necessary for at most the given time for the computation
 to complete, and then retrieves its result, if available.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.