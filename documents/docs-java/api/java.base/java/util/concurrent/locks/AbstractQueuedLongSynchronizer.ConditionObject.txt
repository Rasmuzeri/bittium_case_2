AbstractQueuedLongSynchronizer.ConditionObject (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr
|
Method
Detail:
Field |
Constr
|
Method
SEARCH
Module
java.base
Package
java.util.concurrent.locks
Class AbstractQueuedLongSynchronizer.ConditionObject
java.lang.Object
java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject
All Implemented Interfaces:
Serializable
,
Condition
Enclosing class:
AbstractQueuedLongSynchronizer
public class
AbstractQueuedLongSynchronizer.ConditionObject
extends
Object
implements
Condition
,
Serializable
Condition implementation for a
AbstractQueuedLongSynchronizer
serving as the basis of a
Lock
implementation.
Method documentation for this class describes mechanics,
 not behavioral specifications from the point of view of Lock
 and Condition users. Exported versions of this class will in
 general need to be accompanied by documentation describing
 condition semantics that rely on those of the associated
AbstractQueuedLongSynchronizer
.
This class is Serializable, but all fields are transient,
 so deserialized conditions have no waiters.
See Also:
Serialized Form
Constructor Summary
Constructors
Constructor
Description
ConditionObject
()
Creates a new
ConditionObject
instance.
Method Summary
All Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
final void
await
()
Implements interruptible condition wait.
final boolean
await
(long time,
TimeUnit
unit)
Implements timed condition wait.
final long
awaitNanos
(long nanosTimeout)
Implements timed condition wait.
final void
awaitUninterruptibly
()
Implements uninterruptible condition wait.
final boolean
awaitUntil
(
Date
deadline)
Implements absolute timed condition wait.
protected final
Collection
<
Thread
>
getWaitingThreads
()
Returns a collection containing those threads that may be
 waiting on this Condition.
protected final int
getWaitQueueLength
()
Returns an estimate of the number of threads waiting on
 this condition.
protected final boolean
hasWaiters
()
Queries whether any threads are waiting on this condition.
final void
signal
()
Moves the longest-waiting thread, if one exists, from the
 wait queue for this condition to the wait queue for the
 owning lock.
final void
signalAll
()
Moves all threads from the wait queue for this condition to
 the wait queue for the owning lock.
Methods declared in class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Constructor Details
ConditionObject
public
ConditionObject
()
Creates a new
ConditionObject
instance.
Method Details
signal
public final
void
signal
()
Moves the longest-waiting thread, if one exists, from the
 wait queue for this condition to the wait queue for the
 owning lock.
Specified by:
signal
in interface
Condition
Throws:
IllegalMonitorStateException
- if
AbstractQueuedLongSynchronizer.isHeldExclusively()
returns
false
signalAll
public final
void
signalAll
()
Moves all threads from the wait queue for this condition to
 the wait queue for the owning lock.
Specified by:
signalAll
in interface
Condition
Throws:
IllegalMonitorStateException
- if
AbstractQueuedLongSynchronizer.isHeldExclusively()
returns
false
awaitUninterruptibly
public final
void
awaitUninterruptibly
()
Implements uninterruptible condition wait.
Save lock state returned by
AbstractQueuedLongSynchronizer.getState()
.
Invoke
AbstractQueuedLongSynchronizer.release(long)
with saved state as argument,
     throwing IllegalMonitorStateException if it fails.
Block until signalled.
Reacquire by invoking specialized version of
AbstractQueuedLongSynchronizer.acquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node, long, boolean, boolean, boolean, long)
with saved state as argument.
Specified by:
awaitUninterruptibly
in interface
Condition
await
public final
void
await
()
                 throws
InterruptedException
Implements interruptible condition wait.
If current thread is interrupted, throw InterruptedException.
Save lock state returned by
AbstractQueuedLongSynchronizer.getState()
.
Invoke
AbstractQueuedLongSynchronizer.release(long)
with saved state as argument,
     throwing IllegalMonitorStateException if it fails.
Block until signalled or interrupted.
Reacquire by invoking specialized version of
AbstractQueuedLongSynchronizer.acquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node, long, boolean, boolean, boolean, long)
with saved state as argument.
If interrupted while blocked in step 4, throw InterruptedException.
Specified by:
await
in interface
Condition
Throws:
InterruptedException
- if the current thread is interrupted
         (and interruption of thread suspension is supported)
awaitNanos
public final
long
awaitNanos
(long nanosTimeout)
throws
InterruptedException
Implements timed condition wait.
If current thread is interrupted, throw InterruptedException.
Save lock state returned by
AbstractQueuedLongSynchronizer.getState()
.
Invoke
AbstractQueuedLongSynchronizer.release(long)
with saved state as argument,
     throwing IllegalMonitorStateException if it fails.
Block until signalled, interrupted, or timed out.
Reacquire by invoking specialized version of
AbstractQueuedLongSynchronizer.acquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node, long, boolean, boolean, boolean, long)
with saved state as argument.
If interrupted while blocked in step 4, throw InterruptedException.
Specified by:
awaitNanos
in interface
Condition
Parameters:
nanosTimeout
- the maximum time to wait, in nanoseconds
Returns:
an estimate of the
nanosTimeout
value minus
         the time spent waiting upon return from this method.
         A positive value may be used as the argument to a
         subsequent call to this method to finish waiting out
         the desired time.  A value less than or equal to zero
         indicates that no time remains.
Throws:
InterruptedException
- if the current thread is interrupted
         (and interruption of thread suspension is supported)
awaitUntil
public final
boolean
awaitUntil
(
Date
deadline)
throws
InterruptedException
Implements absolute timed condition wait.
If current thread is interrupted, throw InterruptedException.
Save lock state returned by
AbstractQueuedLongSynchronizer.getState()
.
Invoke
AbstractQueuedLongSynchronizer.release(long)
with saved state as argument,
     throwing IllegalMonitorStateException if it fails.
Block until signalled, interrupted, or timed out.
Reacquire by invoking specialized version of
AbstractQueuedLongSynchronizer.acquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node, long, boolean, boolean, boolean, long)
with saved state as argument.
If interrupted while blocked in step 4, throw InterruptedException.
If timed out while blocked in step 4, return false, else true.
Specified by:
awaitUntil
in interface
Condition
Parameters:
deadline
- the absolute time to wait until
Returns:
false
if the deadline has elapsed upon return, else
true
Throws:
InterruptedException
- if the current thread is interrupted
         (and interruption of thread suspension is supported)
await
public final
boolean
await
(long time,
TimeUnit
unit)
throws
InterruptedException
Implements timed condition wait.
If current thread is interrupted, throw InterruptedException.
Save lock state returned by
AbstractQueuedLongSynchronizer.getState()
.
Invoke
AbstractQueuedLongSynchronizer.release(long)
with saved state as argument,
     throwing IllegalMonitorStateException if it fails.
Block until signalled, interrupted, or timed out.
Reacquire by invoking specialized version of
AbstractQueuedLongSynchronizer.acquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node, long, boolean, boolean, boolean, long)
with saved state as argument.
If interrupted while blocked in step 4, throw InterruptedException.
If timed out while blocked in step 4, return false, else true.
Specified by:
await
in interface
Condition
Parameters:
time
- the maximum time to wait
unit
- the time unit of the
time
argument
Returns:
false
if the waiting time detectably elapsed
         before return from the method, else
true
Throws:
InterruptedException
- if the current thread is interrupted
         (and interruption of thread suspension is supported)
hasWaiters
protected final
boolean
hasWaiters
()
Queries whether any threads are waiting on this condition.
 Implements
AbstractQueuedLongSynchronizer.hasWaiters(ConditionObject)
.
Returns:
true
if there are any waiting threads
Throws:
IllegalMonitorStateException
- if
AbstractQueuedLongSynchronizer.isHeldExclusively()
returns
false
getWaitQueueLength
protected final
int
getWaitQueueLength
()
Returns an estimate of the number of threads waiting on
 this condition.
 Implements
AbstractQueuedLongSynchronizer.getWaitQueueLength(ConditionObject)
.
Returns:
the estimated number of waiting threads
Throws:
IllegalMonitorStateException
- if
AbstractQueuedLongSynchronizer.isHeldExclusively()
returns
false
getWaitingThreads
protected final
Collection
<
Thread
>
getWaitingThreads
()
Returns a collection containing those threads that may be
 waiting on this Condition.
 Implements
AbstractQueuedLongSynchronizer.getWaitingThreads(ConditionObject)
.
Returns:
the collection of threads
Throws:
IllegalMonitorStateException
- if
AbstractQueuedLongSynchronizer.isHeldExclusively()
returns
false
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.