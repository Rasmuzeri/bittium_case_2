Delayed (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr |
Method
Detail:
Field |
Constr |
Method
SEARCH
Module
java.base
Package
java.util.concurrent
Interface Delayed
All Superinterfaces:
Comparable
<
Delayed
>
All Known Subinterfaces:
RunnableScheduledFuture
<V>
,
ScheduledFuture
<V>
public interface
Delayed
extends
Comparable
<
Delayed
>
A mix-in style interface for marking objects that should be
 acted upon after a given delay.
An implementation of this interface must define a
compareTo
method that provides an ordering consistent with
 its
getDelay
method.
Since:
1.5
Method Summary
All Methods
Instance Methods
Abstract Methods
Modifier and Type
Method
Description
long
getDelay
(
TimeUnit
unit)
Returns the remaining delay associated with this object, in the
 given time unit.
Methods declared in interface java.lang.
Comparable
compareTo
Method Details
getDelay
long
getDelay
(
TimeUnit
unit)
Returns the remaining delay associated with this object, in the
 given time unit.
Parameters:
unit
- the time unit
Returns:
the remaining delay; zero or negative values indicate
 that the delay has already elapsed
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.