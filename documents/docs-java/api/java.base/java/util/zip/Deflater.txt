Deflater (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field
|
Constr
|
Method
Detail:
Field
|
Constr
|
Method
SEARCH
Module
java.base
Package
java.util.zip
Class Deflater
java.lang.Object
java.util.zip.Deflater
public class
Deflater
extends
Object
This class provides support for general purpose compression using the
 popular ZLIB compression library. The ZLIB compression library was
 initially developed as part of the PNG graphics standard and is not
 protected by patents. It is fully described in the specifications at
 the
java.util.zip
 package description
.
This class deflates sequences of bytes into ZLIB compressed data format.
 The input byte sequence is provided in either byte array or byte buffer,
 via one of the
setInput()
methods. The output byte sequence is
 written to the output byte array or byte buffer passed to the
deflate()
methods.
The following code fragment demonstrates a trivial compression
 and decompression of a string using
Deflater
and
Inflater
.
try {
     // Encode a String into bytes
     String inputString = "blahblahblah";
     byte[] input = inputString.getBytes("UTF-8");

     // Compress the bytes
     byte[] output = new byte[100];
     Deflater compresser = new Deflater();
     compresser.setInput(input);
     compresser.finish();
     int compressedDataLength = compresser.deflate(output);
     compresser.end();

     // Decompress the bytes
     Inflater decompresser = new Inflater();
     decompresser.setInput(output, 0, compressedDataLength);
     byte[] result = new byte[100];
     int resultLength = decompresser.inflate(result);
     decompresser.end();

     // Decode the bytes into a String
     String outputString = new String(result, 0, resultLength, "UTF-8");
 } catch (java.io.UnsupportedEncodingException ex) {
     // handle
 } catch (java.util.zip.DataFormatException ex) {
     // handle
 }
API Note:
To release resources used by this
Deflater
, the
end()
method
 should be called explicitly. Subclasses are responsible for the cleanup of resources
 acquired by the subclass. Subclasses that override
Object.finalize()
in order
 to perform cleanup should be modified to use alternative cleanup mechanisms such
 as
Cleaner
and remove the overriding
finalize
method.
Since:
1.1
See Also:
Inflater
Field Summary
Fields
Modifier and Type
Field
Description
static final int
BEST_COMPRESSION
Compression level for best compression.
static final int
BEST_SPEED
Compression level for fastest compression.
static final int
DEFAULT_COMPRESSION
Default compression level.
static final int
DEFAULT_STRATEGY
Default compression strategy.
static final int
DEFLATED
Compression method for the deflate algorithm (the only one currently
 supported).
static final int
FILTERED
Compression strategy best used for data consisting mostly of small
 values with a somewhat random distribution.
static final int
FULL_FLUSH
Compression flush mode used to flush out all pending output and
 reset the deflater.
static final int
HUFFMAN_ONLY
Compression strategy for Huffman coding only.
static final int
NO_COMPRESSION
Compression level for no compression.
static final int
NO_FLUSH
Compression flush mode used to achieve best compression result.
static final int
SYNC_FLUSH
Compression flush mode used to flush out all pending output; may
 degrade compression for some compression algorithms.
Constructor Summary
Constructors
Constructor
Description
Deflater
()
Creates a new compressor with the default compression level.
Deflater
(int level)
Creates a new compressor using the specified compression level.
Deflater
(int level,
 boolean nowrap)
Creates a new compressor using the specified compression level.
Method Summary
All Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
int
deflate
(byte[] output)
Compresses the input data and fills specified buffer with compressed
 data.
int
deflate
(byte[] output,
 int off,
 int len)
Compresses the input data and fills specified buffer with compressed
 data.
int
deflate
(byte[] output,
 int off,
 int len,
 int flush)
Compresses the input data and fills the specified buffer with compressed
 data.
int
deflate
(
ByteBuffer
output)
Compresses the input data and fills specified buffer with compressed
 data.
int
deflate
(
ByteBuffer
output,
 int flush)
Compresses the input data and fills the specified buffer with compressed
 data.
void
end
()
Closes the compressor and discards any unprocessed input.
void
finish
()
When called, indicates that compression should end with the current
 contents of the input buffer.
boolean
finished
()
Returns true if the end of the compressed data output stream has
 been reached.
int
getAdler
()
Returns the ADLER-32 value of the uncompressed data.
long
getBytesRead
()
Returns the total number of uncompressed bytes input so far.
long
getBytesWritten
()
Returns the total number of compressed bytes output so far.
int
getTotalIn
()
Returns the total number of uncompressed bytes input so far.
int
getTotalOut
()
Returns the total number of compressed bytes output so far.
boolean
needsInput
()
Returns true if no data remains in the input buffer.
void
reset
()
Resets deflater so that a new set of input data can be processed.
void
setDictionary
(byte[] dictionary)
Sets preset dictionary for compression.
void
setDictionary
(byte[] dictionary,
 int off,
 int len)
Sets preset dictionary for compression.
void
setDictionary
(
ByteBuffer
dictionary)
Sets preset dictionary for compression.
void
setInput
(byte[] input)
Sets input data for compression.
void
setInput
(byte[] input,
 int off,
 int len)
Sets input data for compression.
void
setInput
(
ByteBuffer
input)
Sets input data for compression.
void
setLevel
(int level)
Sets the compression level to the specified value.
void
setStrategy
(int strategy)
Sets the compression strategy to the specified value.
Methods declared in class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Field Details
DEFLATED
public static final
int
DEFLATED
Compression method for the deflate algorithm (the only one currently
 supported).
See Also:
Constant Field Values
NO_COMPRESSION
public static final
int
NO_COMPRESSION
Compression level for no compression.
See Also:
Constant Field Values
BEST_SPEED
public static final
int
BEST_SPEED
Compression level for fastest compression.
See Also:
Constant Field Values
BEST_COMPRESSION
public static final
int
BEST_COMPRESSION
Compression level for best compression.
See Also:
Constant Field Values
DEFAULT_COMPRESSION
public static final
int
DEFAULT_COMPRESSION
Default compression level.
See Also:
Constant Field Values
FILTERED
public static final
int
FILTERED
Compression strategy best used for data consisting mostly of small
 values with a somewhat random distribution. Forces more Huffman coding
 and less string matching.
See Also:
Constant Field Values
HUFFMAN_ONLY
public static final
int
HUFFMAN_ONLY
Compression strategy for Huffman coding only.
See Also:
Constant Field Values
DEFAULT_STRATEGY
public static final
int
DEFAULT_STRATEGY
Default compression strategy.
See Also:
Constant Field Values
NO_FLUSH
public static final
int
NO_FLUSH
Compression flush mode used to achieve best compression result.
Since:
1.7
See Also:
deflate(byte[], int, int, int)
Constant Field Values
SYNC_FLUSH
public static final
int
SYNC_FLUSH
Compression flush mode used to flush out all pending output; may
 degrade compression for some compression algorithms.
Since:
1.7
See Also:
deflate(byte[], int, int, int)
Constant Field Values
FULL_FLUSH
public static final
int
FULL_FLUSH
Compression flush mode used to flush out all pending output and
 reset the deflater. Using this mode too often can seriously degrade
 compression.
Since:
1.7
See Also:
deflate(byte[], int, int, int)
Constant Field Values
Constructor Details
Deflater
public
Deflater
(int level,
 boolean nowrap)
Creates a new compressor using the specified compression level.
 If 'nowrap' is true then the ZLIB header and checksum fields will
 not be used in order to support the compression format used in
 both GZIP and PKZIP.
Parameters:
level
- the compression level (0-9)
nowrap
- if true then use GZIP compatible compression
Deflater
public
Deflater
(int level)
Creates a new compressor using the specified compression level.
 Compressed data will be generated in ZLIB format.
Parameters:
level
- the compression level (0-9)
Deflater
public
Deflater
()
Creates a new compressor with the default compression level.
 Compressed data will be generated in ZLIB format.
Method Details
setInput
public
void
setInput
(byte[] input,
 int off,
 int len)
Sets input data for compression.
One of the
setInput()
methods should be called whenever
needsInput()
returns true indicating that more input data
 is required.
Parameters:
input
- the input data bytes
off
- the start offset of the data
len
- the length of the data
See Also:
needsInput()
setInput
public
void
setInput
(byte[] input)
Sets input data for compression.
One of the
setInput()
methods should be called whenever
needsInput()
returns true indicating that more input data
 is required.
Parameters:
input
- the input data bytes
See Also:
needsInput()
setInput
public
void
setInput
(
ByteBuffer
input)
Sets input data for compression.
One of the
setInput()
methods should be called whenever
needsInput()
returns true indicating that more input data
 is required.
The given buffer's position will be advanced as deflate
 operations are performed, up to the buffer's limit.
 The input buffer may be modified (refilled) between deflate
 operations; doing so is equivalent to creating a new buffer
 and setting it with this method.
Modifying the input buffer's contents, position, or limit
 concurrently with an deflate operation will result in
 undefined behavior, which may include incorrect operation
 results or operation failure.
Parameters:
input
- the input data bytes
Since:
11
See Also:
needsInput()
setDictionary
public
void
setDictionary
(byte[] dictionary,
 int off,
 int len)
Sets preset dictionary for compression. A preset dictionary is used
 when the history buffer can be predetermined. When the data is later
 uncompressed with Inflater.inflate(), Inflater.getAdler() can be called
 in order to get the Adler-32 value of the dictionary required for
 decompression.
Parameters:
dictionary
- the dictionary data bytes
off
- the start offset of the data
len
- the length of the data
See Also:
Inflater.inflate(byte[], int, int)
Inflater.getAdler()
setDictionary
public
void
setDictionary
(byte[] dictionary)
Sets preset dictionary for compression. A preset dictionary is used
 when the history buffer can be predetermined. When the data is later
 uncompressed with Inflater.inflate(), Inflater.getAdler() can be called
 in order to get the Adler-32 value of the dictionary required for
 decompression.
Parameters:
dictionary
- the dictionary data bytes
See Also:
Inflater.inflate(byte[], int, int)
Inflater.getAdler()
setDictionary
public
void
setDictionary
(
ByteBuffer
dictionary)
Sets preset dictionary for compression. A preset dictionary is used
 when the history buffer can be predetermined. When the data is later
 uncompressed with Inflater.inflate(), Inflater.getAdler() can be called
 in order to get the Adler-32 value of the dictionary required for
 decompression.
The bytes in given byte buffer will be fully consumed by this method.  On
 return, its position will equal its limit.
Parameters:
dictionary
- the dictionary data bytes
See Also:
Inflater.inflate(byte[], int, int)
Inflater.getAdler()
setStrategy
public
void
setStrategy
(int strategy)
Sets the compression strategy to the specified value.
If the compression strategy is changed, the next invocation
 of
deflate
will compress the input available so far with
 the old strategy (and may be flushed); the new strategy will take
 effect only after that invocation.
Parameters:
strategy
- the new compression strategy
Throws:
IllegalArgumentException
- if the compression strategy is
                                     invalid
setLevel
public
void
setLevel
(int level)
Sets the compression level to the specified value.
If the compression level is changed, the next invocation
 of
deflate
will compress the input available so far
 with the old level (and may be flushed); the new level will
 take effect only after that invocation.
Parameters:
level
- the new compression level (0-9)
Throws:
IllegalArgumentException
- if the compression level is invalid
needsInput
public
boolean
needsInput
()
Returns true if no data remains in the input buffer. This can
 be used to determine if one of the
setInput()
methods should be
 called in order to provide more input.
Returns:
true if the input data buffer is empty and setInput()
 should be called in order to provide more input
finish
public
void
finish
()
When called, indicates that compression should end with the current
 contents of the input buffer.
finished
public
boolean
finished
()
Returns true if the end of the compressed data output stream has
 been reached.
Returns:
true if the end of the compressed data output stream has
 been reached
deflate
public
int
deflate
(byte[] output,
 int off,
 int len)
Compresses the input data and fills specified buffer with compressed
 data. Returns actual number of bytes of compressed data. A return value
 of 0 indicates that
needsInput
should be called
 in order to determine if more input data is required.
This method uses
NO_FLUSH
as its compression flush mode.
 An invocation of this method of the form
deflater.deflate(b, off, len)
yields the same result as the invocation of
deflater.deflate(b, off, len, Deflater.NO_FLUSH)
.
Parameters:
output
- the buffer for the compressed data
off
- the start offset of the data
len
- the maximum number of bytes of compressed data
Returns:
the actual number of bytes of compressed data written to the
         output buffer
deflate
public
int
deflate
(byte[] output)
Compresses the input data and fills specified buffer with compressed
 data. Returns actual number of bytes of compressed data. A return value
 of 0 indicates that
needsInput
should be called
 in order to determine if more input data is required.
This method uses
NO_FLUSH
as its compression flush mode.
 An invocation of this method of the form
deflater.deflate(b)
yields the same result as the invocation of
deflater.deflate(b, 0, b.length, Deflater.NO_FLUSH)
.
Parameters:
output
- the buffer for the compressed data
Returns:
the actual number of bytes of compressed data written to the
         output buffer
deflate
public
int
deflate
(
ByteBuffer
output)
Compresses the input data and fills specified buffer with compressed
 data. Returns actual number of bytes of compressed data. A return value
 of 0 indicates that
needsInput
should be called
 in order to determine if more input data is required.
This method uses
NO_FLUSH
as its compression flush mode.
 An invocation of this method of the form
deflater.deflate(output)
yields the same result as the invocation of
deflater.deflate(output, Deflater.NO_FLUSH)
.
Parameters:
output
- the buffer for the compressed data
Returns:
the actual number of bytes of compressed data written to the
         output buffer
Throws:
ReadOnlyBufferException
- if the given output buffer is read-only
Since:
11
deflate
public
int
deflate
(byte[] output,
 int off,
 int len,
 int flush)
Compresses the input data and fills the specified buffer with compressed
 data. Returns actual number of bytes of data compressed.
Compression flush mode is one of the following three modes:
NO_FLUSH
: allows the deflater to decide how much data
 to accumulate, before producing output, in order to achieve the best
 compression (should be used in normal use scenario). A return value
 of 0 in this flush mode indicates that
needsInput()
should
 be called in order to determine if more input data is required.
SYNC_FLUSH
: all pending output in the deflater is flushed,
 to the specified output buffer, so that an inflater that works on
 compressed data can get all input data available so far (In particular
 the
needsInput()
returns
true
after this invocation
 if enough output space is provided). Flushing with
SYNC_FLUSH
may degrade compression for some compression algorithms and so it
 should be used only when necessary.
FULL_FLUSH
: all pending output is flushed out as with
SYNC_FLUSH
. The compression state is reset so that the inflater
 that works on the compressed output data can restart from this point
 if previous compressed data has been damaged or if random access is
 desired. Using
FULL_FLUSH
too often can seriously degrade
 compression.
In the case of
FULL_FLUSH
or
SYNC_FLUSH
, if
 the return value is
len
, the space available in output
 buffer
b
, this method should be invoked again with the same
flush
parameter and more output space. Make sure that
len
is greater than 6 to avoid flush marker (5 bytes) being
 repeatedly output to the output buffer every time this method is
 invoked.
If the
setInput(ByteBuffer)
method was called to provide a buffer
 for input, the input buffer's position will be advanced by the number of bytes
 consumed by this operation.
Parameters:
output
- the buffer for the compressed data
off
- the start offset of the data
len
- the maximum number of bytes of compressed data
flush
- the compression flush mode
Returns:
the actual number of bytes of compressed data written to
         the output buffer
Throws:
IllegalArgumentException
- if the flush mode is invalid
Since:
1.7
deflate
public
int
deflate
(
ByteBuffer
output,
 int flush)
Compresses the input data and fills the specified buffer with compressed
 data. Returns actual number of bytes of data compressed.
Compression flush mode is one of the following three modes:
NO_FLUSH
: allows the deflater to decide how much data
 to accumulate, before producing output, in order to achieve the best
 compression (should be used in normal use scenario). A return value
 of 0 in this flush mode indicates that
needsInput()
should
 be called in order to determine if more input data is required.
SYNC_FLUSH
: all pending output in the deflater is flushed,
 to the specified output buffer, so that an inflater that works on
 compressed data can get all input data available so far (In particular
 the
needsInput()
returns
true
after this invocation
 if enough output space is provided). Flushing with
SYNC_FLUSH
may degrade compression for some compression algorithms and so it
 should be used only when necessary.
FULL_FLUSH
: all pending output is flushed out as with
SYNC_FLUSH
. The compression state is reset so that the inflater
 that works on the compressed output data can restart from this point
 if previous compressed data has been damaged or if random access is
 desired. Using
FULL_FLUSH
too often can seriously degrade
 compression.
In the case of
FULL_FLUSH
or
SYNC_FLUSH
, if
 the return value is equal to the
remaining space
of the buffer, this method should be invoked again with the same
flush
parameter and more output space. Make sure that
 the buffer has at least 6 bytes of remaining space to avoid the
 flush marker (5 bytes) being repeatedly output to the output buffer
 every time this method is invoked.
On success, the position of the given
output
byte buffer will be
 advanced by as many bytes as were produced by the operation, which is equal
 to the number returned by this method.
If the
setInput(ByteBuffer)
method was called to provide a buffer
 for input, the input buffer's position will be advanced by the number of bytes
 consumed by this operation.
Parameters:
output
- the buffer for the compressed data
flush
- the compression flush mode
Returns:
the actual number of bytes of compressed data written to
         the output buffer
Throws:
IllegalArgumentException
- if the flush mode is invalid
ReadOnlyBufferException
- if the given output buffer is read-only
Since:
11
getAdler
public
int
getAdler
()
Returns the ADLER-32 value of the uncompressed data.
Returns:
the ADLER-32 value of the uncompressed data
getTotalIn
public
int
getTotalIn
()
Returns the total number of uncompressed bytes input so far.
Since the number of bytes may be greater than
 Integer.MAX_VALUE, the
getBytesRead()
method is now
 the preferred means of obtaining this information.
Returns:
the total number of uncompressed bytes input so far
getBytesRead
public
long
getBytesRead
()
Returns the total number of uncompressed bytes input so far.
Returns:
the total (non-negative) number of uncompressed bytes input so far
Since:
1.5
getTotalOut
public
int
getTotalOut
()
Returns the total number of compressed bytes output so far.
Since the number of bytes may be greater than
 Integer.MAX_VALUE, the
getBytesWritten()
method is now
 the preferred means of obtaining this information.
Returns:
the total number of compressed bytes output so far
getBytesWritten
public
long
getBytesWritten
()
Returns the total number of compressed bytes output so far.
Returns:
the total (non-negative) number of compressed bytes output so far
Since:
1.5
reset
public
void
reset
()
Resets deflater so that a new set of input data can be processed.
 Keeps current compression level and strategy settings.
end
public
void
end
()
Closes the compressor and discards any unprocessed input.

 This method should be called when the compressor is no longer
 being used. Once this method is called, the behavior of the
 Deflater object is undefined.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.