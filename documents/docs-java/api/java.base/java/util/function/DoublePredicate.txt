DoublePredicate (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr |
Method
Detail:
Field |
Constr |
Method
SEARCH
Module
java.base
Package
java.util.function
Interface DoublePredicate
Functional Interface:
This is a functional interface and can therefore be used as the assignment target for a lambda expression or method reference.
@FunctionalInterface
public interface
DoublePredicate
Represents a predicate (boolean-valued function) of one
double
-valued
 argument. This is the
double
-consuming primitive type specialization
 of
Predicate
.
This is a
functional interface
whose functional method is
test(double)
.
Since:
1.8
See Also:
Predicate
Method Summary
All Methods
Instance Methods
Abstract Methods
Default Methods
Modifier and Type
Method
Description
default
DoublePredicate
and
(
DoublePredicate
other)
Returns a composed predicate that represents a short-circuiting logical
 AND of this predicate and another.
default
DoublePredicate
negate
()
Returns a predicate that represents the logical negation of this
 predicate.
default
DoublePredicate
or
(
DoublePredicate
other)
Returns a composed predicate that represents a short-circuiting logical
 OR of this predicate and another.
boolean
test
(double value)
Evaluates this predicate on the given argument.
Method Details
test
boolean
test
(double value)
Evaluates this predicate on the given argument.
Parameters:
value
- the input argument
Returns:
true
if the input argument matches the predicate,
 otherwise
false
and
default
DoublePredicate
and
(
DoublePredicate
other)
Returns a composed predicate that represents a short-circuiting logical
 AND of this predicate and another.  When evaluating the composed
 predicate, if this predicate is
false
, then the
other
predicate is not evaluated.
Any exceptions thrown during evaluation of either predicate are relayed
 to the caller; if evaluation of this predicate throws an exception, the
other
predicate will not be evaluated.
Parameters:
other
- a predicate that will be logically-ANDed with this
              predicate
Returns:
a composed predicate that represents the short-circuiting logical
 AND of this predicate and the
other
predicate
Throws:
NullPointerException
- if other is null
negate
default
DoublePredicate
negate
()
Returns a predicate that represents the logical negation of this
 predicate.
Returns:
a predicate that represents the logical negation of this
 predicate
or
default
DoublePredicate
or
(
DoublePredicate
other)
Returns a composed predicate that represents a short-circuiting logical
 OR of this predicate and another.  When evaluating the composed
 predicate, if this predicate is
true
, then the
other
predicate is not evaluated.
Any exceptions thrown during evaluation of either predicate are relayed
 to the caller; if evaluation of this predicate throws an exception, the
other
predicate will not be evaluated.
Parameters:
other
- a predicate that will be logically-ORed with this
              predicate
Returns:
a composed predicate that represents the short-circuiting logical
 OR of this predicate and the
other
predicate
Throws:
NullPointerException
- if other is null
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.