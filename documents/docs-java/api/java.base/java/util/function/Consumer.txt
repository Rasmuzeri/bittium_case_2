Consumer (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr |
Method
Detail:
Field |
Constr |
Method
SEARCH
Module
java.base
Package
java.util.function
Interface Consumer<T>
Type Parameters:
T
- the type of the input to the operation
All Known Subinterfaces:
Stream.Builder
<T>
Functional Interface:
This is a functional interface and can therefore be used as the assignment target for a lambda expression or method reference.
@FunctionalInterface
public interface
Consumer<T>
Represents an operation that accepts a single input argument and returns no
 result. Unlike most other functional interfaces,
Consumer
is expected
 to operate via side-effects.
This is a
functional interface
whose functional method is
accept(Object)
.
Since:
1.8
Method Summary
All Methods
Instance Methods
Abstract Methods
Default Methods
Modifier and Type
Method
Description
void
accept
(
T
t)
Performs this operation on the given argument.
default
Consumer
<
T
>
andThen
(
Consumer
<? super
T
> after)
Returns a composed
Consumer
that performs, in sequence, this
 operation followed by the
after
operation.
Method Details
accept
void
accept
(
T
t)
Performs this operation on the given argument.
Parameters:
t
- the input argument
andThen
default
Consumer
<
T
>
andThen
(
Consumer
<? super
T
> after)
Returns a composed
Consumer
that performs, in sequence, this
 operation followed by the
after
operation. If performing either
 operation throws an exception, it is relayed to the caller of the
 composed operation.  If performing this operation throws an exception,
 the
after
operation will not be performed.
Parameters:
after
- the operation to perform after this operation
Returns:
a composed
Consumer
that performs in sequence this
 operation followed by the
after
operation
Throws:
NullPointerException
- if
after
is null
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.