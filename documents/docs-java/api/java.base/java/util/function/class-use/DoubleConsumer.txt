Uses of Interface java.util.function.DoubleConsumer (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Interface
java.util.function.DoubleConsumer
Packages that use
DoubleConsumer
Package
Description
java.util
Contains the collections framework, some internationalization support classes,
 a service loader, properties, random number generation, string parsing
 and scanning classes, base64 encoding and decoding, a bit array, and
 several miscellaneous utility classes.
java.util.function
Functional interfaces
provide target types for lambda expressions
 and method references.
java.util.stream
Classes to support functional-style operations on streams of elements, such
 as map-reduce transformations on collections.
Uses of
DoubleConsumer
in
java.util
Classes in
java.util
that implement
DoubleConsumer
Modifier and Type
Class
Description
class
DoubleSummaryStatistics
A state object for collecting statistics such as count, min, max, sum, and
 average.
Methods in
java.util
with parameters of type
DoubleConsumer
Modifier and Type
Method
Description
default void
PrimitiveIterator.OfDouble.
forEachRemaining
(
DoubleConsumer
action)
Performs the given action for each remaining element until all elements
 have been processed or the action throws an exception.
void
OptionalDouble.
ifPresent
(
DoubleConsumer
action)
If a value is present, performs the given action with the value,
 otherwise does nothing.
void
OptionalDouble.
ifPresentOrElse
(
DoubleConsumer
action,
Runnable
emptyAction)
If a value is present, performs the given action with the value,
 otherwise performs the given empty-based action.
Uses of
DoubleConsumer
in
java.util.function
Methods in
java.util.function
that return
DoubleConsumer
Modifier and Type
Method
Description
default
DoubleConsumer
DoubleConsumer.
andThen
(
DoubleConsumer
after)
Returns a composed
DoubleConsumer
that performs, in sequence, this
 operation followed by the
after
operation.
Methods in
java.util.function
with parameters of type
DoubleConsumer
Modifier and Type
Method
Description
default
DoubleConsumer
DoubleConsumer.
andThen
(
DoubleConsumer
after)
Returns a composed
DoubleConsumer
that performs, in sequence, this
 operation followed by the
after
operation.
Uses of
DoubleConsumer
in
java.util.stream
Subinterfaces of
DoubleConsumer
in
java.util.stream
Modifier and Type
Interface
Description
static interface
DoubleStream.Builder
A mutable builder for a
DoubleStream
.
Methods in
java.util.stream
with parameters of type
DoubleConsumer
Modifier and Type
Method
Description
void
DoubleStream.DoubleMapMultiConsumer.
accept
(double value,
DoubleConsumer
dc)
Replaces the given
value
with zero or more values by feeding the mapped
 values to the
dc
consumer.
void
DoubleStream.
forEach
(
DoubleConsumer
action)
Performs an action for each element of this stream.
void
DoubleStream.
forEachOrdered
(
DoubleConsumer
action)
Performs an action for each element of this stream, guaranteeing that
 each element is processed in encounter order for streams that have a
 defined encounter order.
DoubleStream
DoubleStream.
peek
(
DoubleConsumer
action)
Returns a stream consisting of the elements of this stream, additionally
 performing the provided action on each element as elements are consumed
 from the resulting stream.
Method parameters in
java.util.stream
with type arguments of type
DoubleConsumer
Modifier and Type
Method
Description
default
DoubleStream
Stream.
mapMultiToDouble
(
BiConsumer
<? super
T
,
? super
DoubleConsumer
> mapper)
Returns a
DoubleStream
consisting of the results of replacing each
 element of this stream with multiple elements, specifically zero or more
 elements.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.