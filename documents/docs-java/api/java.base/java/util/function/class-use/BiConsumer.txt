Uses of Interface java.util.function.BiConsumer (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Interface
java.util.function.BiConsumer
Packages that use
BiConsumer
Package
Description
java.security
Provides the classes and interfaces for the security framework.
java.util
Contains the collections framework, some internationalization support classes,
 a service loader, properties, random number generation, string parsing
 and scanning classes, base64 encoding and decoding, a bit array, and
 several miscellaneous utility classes.
java.util.concurrent
Utility classes commonly useful in concurrent programming.
java.util.function
Functional interfaces
provide target types for lambda expressions
 and method references.
java.util.stream
Classes to support functional-style operations on streams of elements, such
 as map-reduce transformations on collections.
jdk.security.jarsigner
This package defines APIs for signing jar files.
Uses of
BiConsumer
in
java.security
Methods in
java.security
with parameters of type
BiConsumer
Modifier and Type
Method
Description
void
Provider.
forEach
(
BiConsumer
<? super
Object
,
? super
Object
> action)
Uses of
BiConsumer
in
java.util
Methods in
java.util
with parameters of type
BiConsumer
Modifier and Type
Method
Description
default void
Map.
forEach
(
BiConsumer
<? super
K
,
? super
V
> action)
Performs the given action for each entry in this map until all entries
 have been processed or the action throws an exception.
Uses of
BiConsumer
in
java.util.concurrent
Methods in
java.util.concurrent
with parameters of type
BiConsumer
Modifier and Type
Method
Description
void
ConcurrentHashMap.
forEach
(long parallelismThreshold,
BiConsumer
<? super
K
,
? super
V
> action)
Performs the given action for each (key, value).
default void
ConcurrentMap.
forEach
(
BiConsumer
<? super
K
,
? super
V
> action)
Performs the given action for each entry in this map until all entries
 have been processed or the action throws an exception.
<U>
CompletableFuture
<
Void
>
CompletableFuture.
thenAcceptBoth
(
CompletionStage
<? extends U> other,
BiConsumer
<? super
T
,
? super U> action)
<U>
CompletionStage
<
Void
>
CompletionStage.
thenAcceptBoth
(
CompletionStage
<? extends U> other,
BiConsumer
<? super
T
,
? super U> action)
Returns a new CompletionStage that, when this and the other
 given stage both complete normally, is executed with the two
 results as arguments to the supplied action.
<U>
CompletableFuture
<
Void
>
CompletableFuture.
thenAcceptBothAsync
(
CompletionStage
<? extends U> other,
BiConsumer
<? super
T
,
? super U> action)
<U>
CompletableFuture
<
Void
>
CompletableFuture.
thenAcceptBothAsync
(
CompletionStage
<? extends U> other,
BiConsumer
<? super
T
,
? super U> action,
Executor
executor)
<U>
CompletionStage
<
Void
>
CompletionStage.
thenAcceptBothAsync
(
CompletionStage
<? extends U> other,
BiConsumer
<? super
T
,
? super U> action)
Returns a new CompletionStage that, when this and the other
 given stage both complete normally, is executed using this
 stage's default asynchronous execution facility, with the two
 results as arguments to the supplied action.
<U>
CompletionStage
<
Void
>
CompletionStage.
thenAcceptBothAsync
(
CompletionStage
<? extends U> other,
BiConsumer
<? super
T
,
? super U> action,
Executor
executor)
Returns a new CompletionStage that, when this and the other
 given stage both complete normally, is executed using the
 supplied executor, with the two results as arguments to the
 supplied action.
CompletableFuture
<
T
>
CompletableFuture.
whenComplete
(
BiConsumer
<? super
T
,
? super
Throwable
> action)
CompletionStage
<
T
>
CompletionStage.
whenComplete
(
BiConsumer
<? super
T
,
? super
Throwable
> action)
Returns a new CompletionStage with the same result or exception as
 this stage, that executes the given action when this stage completes.
CompletableFuture
<
T
>
CompletableFuture.
whenCompleteAsync
(
BiConsumer
<? super
T
,
? super
Throwable
> action)
CompletableFuture
<
T
>
CompletableFuture.
whenCompleteAsync
(
BiConsumer
<? super
T
,
? super
Throwable
> action,
Executor
executor)
CompletionStage
<
T
>
CompletionStage.
whenCompleteAsync
(
BiConsumer
<? super
T
,
? super
Throwable
> action)
Returns a new CompletionStage with the same result or exception as
 this stage, that executes the given action using this stage's
 default asynchronous execution facility when this stage completes.
CompletionStage
<
T
>
CompletionStage.
whenCompleteAsync
(
BiConsumer
<? super
T
,
? super
Throwable
> action,
Executor
executor)
Returns a new CompletionStage with the same result or exception as
 this stage, that executes the given action using the supplied
 Executor when this stage completes.
Constructors in
java.util.concurrent
with parameters of type
BiConsumer
Modifier
Constructor
Description
SubmissionPublisher
(
Executor
executor,
 int maxBufferCapacity,
BiConsumer
<? super
Flow.Subscriber
<? super
T
>,
? super
Throwable
> handler)
Creates a new SubmissionPublisher using the given Executor for
 async delivery to subscribers, with the given maximum buffer size
 for each subscriber, and, if non-null, the given handler invoked
 when any Subscriber throws an exception in method
onNext
.
Uses of
BiConsumer
in
java.util.function
Methods in
java.util.function
that return
BiConsumer
Modifier and Type
Method
Description
default
BiConsumer
<
T
,
U
>
BiConsumer.
andThen
(
BiConsumer
<? super
T
,
? super
U
> after)
Returns a composed
BiConsumer
that performs, in sequence, this
 operation followed by the
after
operation.
Methods in
java.util.function
with parameters of type
BiConsumer
Modifier and Type
Method
Description
default
BiConsumer
<
T
,
U
>
BiConsumer.
andThen
(
BiConsumer
<? super
T
,
? super
U
> after)
Returns a composed
BiConsumer
that performs, in sequence, this
 operation followed by the
after
operation.
Uses of
BiConsumer
in
java.util.stream
Methods in
java.util.stream
that return
BiConsumer
Modifier and Type
Method
Description
BiConsumer
<
A
,
T
>
Collector.
accumulator
()
A function that folds a value into a mutable result container.
Methods in
java.util.stream
with parameters of type
BiConsumer
Modifier and Type
Method
Description
<R> R
DoubleStream.
collect
(
Supplier
<R> supplier,
ObjDoubleConsumer
<R> accumulator,
BiConsumer
<R,
R> combiner)
Performs a
mutable
 reduction
operation on the elements of this stream.
<R> R
IntStream.
collect
(
Supplier
<R> supplier,
ObjIntConsumer
<R> accumulator,
BiConsumer
<R,
R> combiner)
Performs a
mutable
 reduction
operation on the elements of this stream.
<R> R
LongStream.
collect
(
Supplier
<R> supplier,
ObjLongConsumer
<R> accumulator,
BiConsumer
<R,
R> combiner)
Performs a
mutable
 reduction
operation on the elements of this stream.
<R> R
Stream.
collect
(
Supplier
<R> supplier,
BiConsumer
<R,
? super
T
> accumulator,
BiConsumer
<R,
R> combiner)
Performs a
mutable
 reduction
operation on the elements of this stream.
default <R>
Stream
<R>
Stream.
mapMulti
(
BiConsumer
<? super
T
,
? super
Consumer
<R>> mapper)
Returns a stream consisting of the results of replacing each element of
 this stream with multiple elements, specifically zero or more elements.
default
DoubleStream
Stream.
mapMultiToDouble
(
BiConsumer
<? super
T
,
? super
DoubleConsumer
> mapper)
Returns a
DoubleStream
consisting of the results of replacing each
 element of this stream with multiple elements, specifically zero or more
 elements.
default
IntStream
Stream.
mapMultiToInt
(
BiConsumer
<? super
T
,
? super
IntConsumer
> mapper)
Returns an
IntStream
consisting of the results of replacing each
 element of this stream with multiple elements, specifically zero or more
 elements.
default
LongStream
Stream.
mapMultiToLong
(
BiConsumer
<? super
T
,
? super
LongConsumer
> mapper)
Returns a
LongStream
consisting of the results of replacing each
 element of this stream with multiple elements, specifically zero or more
 elements.
static <T,
A,
R>
Collector
<T,
A,
R>
Collector.
of
(
Supplier
<A> supplier,
BiConsumer
<A,
T> accumulator,
BinaryOperator
<A> combiner,
Function
<A,
R> finisher,
Collector.Characteristics
... characteristics)
Returns a new
Collector
described by the given
supplier
,
accumulator
,
combiner
, and
finisher
functions.
static <T,
R>
Collector
<T,
R,
R>
Collector.
of
(
Supplier
<R> supplier,
BiConsumer
<R,
T> accumulator,
BinaryOperator
<R> combiner,
Collector.Characteristics
... characteristics)
Returns a new
Collector
described by the given
supplier
,
accumulator
, and
combiner
functions.
Uses of
BiConsumer
in
jdk.security.jarsigner
Methods in
jdk.security.jarsigner
with parameters of type
BiConsumer
Modifier and Type
Method
Description
JarSigner.Builder
JarSigner.Builder.
eventHandler
(
BiConsumer
<
String
,
String
> handler)
Sets en event handler that will be triggered when a
JarEntry
is to be added, signed, or updated during the signing process.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.