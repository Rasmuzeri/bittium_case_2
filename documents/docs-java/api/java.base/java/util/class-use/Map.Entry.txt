Uses of Interface java.util.Map.Entry (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Interface
java.util.Map.Entry
Packages that use
Map.Entry
Package
Description
com.sun.net.httpserver
Provides a simple high-level Http server API, which can be used to build
   embedded HTTP servers.
java.awt
Contains all of the classes for creating user interfaces and for painting
 graphics and images.
java.security
Provides the classes and interfaces for the security framework.
java.util
Contains the collections framework, some internationalization support classes,
 a service loader, properties, random number generation, string parsing
 and scanning classes, base64 encoding and decoding, a bit array, and
 several miscellaneous utility classes.
java.util.concurrent
Utility classes commonly useful in concurrent programming.
java.util.jar
Provides classes for reading and writing the JAR (Java ARchive)
 file format, which is based on the standard ZIP file format with an
 optional manifest file.
javax.management.openmbean
Provides the open data types and Open MBean descriptor classes.
javax.script
The scripting API consists of interfaces and classes that define
Java Scripting Engines and provides
a framework for their use in Java applications.
javax.xml.crypto.dom
DOM-specific classes for the
javax.xml.crypto
package.
Uses of
Map.Entry
in
com.sun.net.httpserver
Methods in
com.sun.net.httpserver
that return types with arguments of type
Map.Entry
Modifier and Type
Method
Description
Set
<
Map.Entry
<
String
,
List
<
String
>>>
Headers.
entrySet
()
Uses of
Map.Entry
in
java.awt
Methods in
java.awt
that return types with arguments of type
Map.Entry
Modifier and Type
Method
Description
Set
<
Map.Entry
<
Object
,
Object
>>
RenderingHints.
entrySet
()
Returns a
Set
view of the mappings contained
 in this
RenderingHints
.
Uses of
Map.Entry
in
java.security
Methods in
java.security
that return types with arguments of type
Map.Entry
Modifier and Type
Method
Description
Set
<
Map.Entry
<
Object
,
Object
>>
Provider.
entrySet
()
Returns an unmodifiable Set view of the property entries contained
 in this
Provider
.
Uses of
Map.Entry
in
java.util
Classes in
java.util
that implement
Map.Entry
Modifier and Type
Class
Description
static class
AbstractMap.SimpleEntry
<K,
V>
An Entry maintaining a key and a value.
static class
AbstractMap.SimpleImmutableEntry
<K,
V>
An unmodifiable Entry maintaining a key and a value.
Methods in
java.util
that return
Map.Entry
Modifier and Type
Method
Description
Map.Entry
<
K
,
V
>
NavigableMap.
ceilingEntry
(
K
key)
Returns a key-value mapping associated with the least key
 greater than or equal to the given key, or
null
if
 there is no such key.
Map.Entry
<
K
,
V
>
TreeMap.
ceilingEntry
(
K
key)
static <K,
V>
Map.Entry
<K,
V>
Map.Entry.
copyOf
(
Map.Entry
<? extends K,
? extends V> e)
Returns a copy of the given
Map.Entry
.
static <K,
V>
Map.Entry
<K,
V>
Map.
entry
(K k,
 V v)
Returns an unmodifiable
Map.Entry
containing the given key and value.
Map.Entry
<
K
,
V
>
NavigableMap.
firstEntry
()
Returns a key-value mapping associated with the least
 key in this map, or
null
if the map is empty.
default
Map.Entry
<
K
,
V
>
SequencedMap.
firstEntry
()
Returns the first key-value mapping in this map,
 or
null
if the map is empty.
Map.Entry
<
K
,
V
>
TreeMap.
firstEntry
()
Map.Entry
<
K
,
V
>
NavigableMap.
floorEntry
(
K
key)
Returns a key-value mapping associated with the greatest key
 less than or equal to the given key, or
null
if there
 is no such key.
Map.Entry
<
K
,
V
>
TreeMap.
floorEntry
(
K
key)
Map.Entry
<
K
,
V
>
NavigableMap.
higherEntry
(
K
key)
Returns a key-value mapping associated with the least key
 strictly greater than the given key, or
null
if there
 is no such key.
Map.Entry
<
K
,
V
>
TreeMap.
higherEntry
(
K
key)
Map.Entry
<
K
,
V
>
NavigableMap.
lastEntry
()
Returns a key-value mapping associated with the greatest
 key in this map, or
null
if the map is empty.
default
Map.Entry
<
K
,
V
>
SequencedMap.
lastEntry
()
Returns the last key-value mapping in this map,
 or
null
if the map is empty.
Map.Entry
<
K
,
V
>
TreeMap.
lastEntry
()
Map.Entry
<
K
,
V
>
NavigableMap.
lowerEntry
(
K
key)
Returns a key-value mapping associated with the greatest key
 strictly less than the given key, or
null
if there is
 no such key.
Map.Entry
<
K
,
V
>
TreeMap.
lowerEntry
(
K
key)
Map.Entry
<
K
,
V
>
NavigableMap.
pollFirstEntry
()
Removes and returns a key-value mapping associated with
 the least key in this map, or
null
if the map is empty.
default
Map.Entry
<
K
,
V
>
SequencedMap.
pollFirstEntry
()
Removes and returns the first key-value mapping in this map,
 or
null
if the map is empty (optional operation).
Map.Entry
<
K
,
V
>
TreeMap.
pollFirstEntry
()
Map.Entry
<
K
,
V
>
NavigableMap.
pollLastEntry
()
Removes and returns a key-value mapping associated with
 the greatest key in this map, or
null
if the map is empty.
default
Map.Entry
<
K
,
V
>
SequencedMap.
pollLastEntry
()
Removes and returns the last key-value mapping in this map,
 or
null
if the map is empty (optional operation).
Map.Entry
<
K
,
V
>
TreeMap.
pollLastEntry
()
Methods in
java.util
that return types with arguments of type
Map.Entry
Modifier and Type
Method
Description
static <K extends
Comparable
<? super K>,
V>
Comparator
<
Map.Entry
<K,
V>>
Map.Entry.
comparingByKey
()
Returns a comparator that compares
Map.Entry
in natural order on key.
static <K,
V>
Comparator
<
Map.Entry
<K,
V>>
Map.Entry.
comparingByKey
(
Comparator
<? super K> cmp)
Returns a comparator that compares
Map.Entry
by key using the given
Comparator
.
static <K,
V extends
Comparable
<? super V>>
Comparator
<
Map.Entry
<K,
V>>
Map.Entry.
comparingByValue
()
Returns a comparator that compares
Map.Entry
in natural order on value.
static <K,
V>
Comparator
<
Map.Entry
<K,
V>>
Map.Entry.
comparingByValue
(
Comparator
<? super V> cmp)
Returns a comparator that compares
Map.Entry
by value using the given
Comparator
.
Set
<
Map.Entry
<
K
,
V
>>
EnumMap.
entrySet
()
Returns a
Set
view of the mappings contained in this map.
Set
<
Map.Entry
<
K
,
V
>>
HashMap.
entrySet
()
Returns a
Set
view of the mappings contained in this map.
Set
<
Map.Entry
<
K
,
V
>>
Hashtable.
entrySet
()
Returns a
Set
view of the mappings contained in this map.
Set
<
Map.Entry
<
K
,
V
>>
IdentityHashMap.
entrySet
()
Returns a
Set
view of the mappings contained in this map.
Set
<
Map.Entry
<
K
,
V
>>
LinkedHashMap.
entrySet
()
Returns a
Set
view of the mappings contained in this map.
Set
<
Map.Entry
<
K
,
V
>>
Map.
entrySet
()
Returns a
Set
view of the mappings contained in this map.
Set
<
Map.Entry
<
K
,
V
>>
SortedMap.
entrySet
()
Returns a
Set
view of the mappings contained in this map.
Set
<
Map.Entry
<
K
,
V
>>
TreeMap.
entrySet
()
Returns a
Set
view of the mappings contained in this map.
Set
<
Map.Entry
<
K
,
V
>>
WeakHashMap.
entrySet
()
Returns a
Set
view of the mappings contained in this map.
SequencedSet
<
Map.Entry
<
K
,
V
>>
LinkedHashMap.
sequencedEntrySet
()
Returns a
SequencedSet
view of this map's
entrySet
.
default
SequencedSet
<
Map.Entry
<
K
,
V
>>
SequencedMap.
sequencedEntrySet
()
Returns a
SequencedSet
view of this map's
entrySet
.
Methods in
java.util
with parameters of type
Map.Entry
Modifier and Type
Method
Description
static <K,
V>
Map.Entry
<K,
V>
Map.Entry.
copyOf
(
Map.Entry
<? extends K,
? extends V> e)
Returns a copy of the given
Map.Entry
.
static <K,
V>
Map
<K,
V>
Map.
ofEntries
(
Map.Entry
<? extends K,
? extends V>... entries)
Returns an unmodifiable map containing keys and values extracted from the given entries.
protected boolean
LinkedHashMap.
removeEldestEntry
(
Map.Entry
<
K
,
V
> eldest)
Returns
true
if this map should remove its eldest entry.
Constructors in
java.util
with parameters of type
Map.Entry
Modifier
Constructor
Description
SimpleEntry
(
Map.Entry
<? extends
K
,
? extends
V
> entry)
Creates an entry representing the same mapping as the
 specified entry.
SimpleImmutableEntry
(
Map.Entry
<? extends
K
,
? extends
V
> entry)
Creates an entry representing the same mapping as the
 specified entry.
Uses of
Map.Entry
in
java.util.concurrent
Methods in
java.util.concurrent
that return
Map.Entry
Modifier and Type
Method
Description
Map.Entry
<
K
,
V
>
ConcurrentSkipListMap.
ceilingEntry
(
K
key)
Returns a key-value mapping associated with the least key
 greater than or equal to the given key, or
null
if
 there is no such entry.
Map.Entry
<
K
,
V
>
ConcurrentSkipListMap.
firstEntry
()
Returns a key-value mapping associated with the least
 key in this map, or
null
if the map is empty.
Map.Entry
<
K
,
V
>
ConcurrentSkipListMap.
floorEntry
(
K
key)
Returns a key-value mapping associated with the greatest key
 less than or equal to the given key, or
null
if there
 is no such key.
Map.Entry
<
K
,
V
>
ConcurrentSkipListMap.
higherEntry
(
K
key)
Returns a key-value mapping associated with the least key
 strictly greater than the given key, or
null
if there
 is no such key.
Map.Entry
<
K
,
V
>
ConcurrentSkipListMap.
lastEntry
()
Returns a key-value mapping associated with the greatest
 key in this map, or
null
if the map is empty.
Map.Entry
<
K
,
V
>
ConcurrentSkipListMap.
lowerEntry
(
K
key)
Returns a key-value mapping associated with the greatest key
 strictly less than the given key, or
null
if there is
 no such key.
Map.Entry
<
K
,
V
>
ConcurrentSkipListMap.
pollFirstEntry
()
Removes and returns a key-value mapping associated with
 the least key in this map, or
null
if the map is empty.
Map.Entry
<
K
,
V
>
ConcurrentSkipListMap.
pollLastEntry
()
Removes and returns a key-value mapping associated with
 the greatest key in this map, or
null
if the map is empty.
Map.Entry
<
K
,
V
>
ConcurrentHashMap.
reduceEntries
(long parallelismThreshold,
BiFunction
<
Map.Entry
<
K
,
V
>,
Map.Entry
<
K
,
V
>,
? extends
Map.Entry
<
K
,
V
>> reducer)
Returns the result of accumulating all entries using the
 given reducer to combine values, or null if none.
Methods in
java.util.concurrent
that return types with arguments of type
Map.Entry
Modifier and Type
Method
Description
Set
<
Map.Entry
<
K
,
V
>>
ConcurrentHashMap.
entrySet
()
Returns a
Set
view of the mappings contained in this map.
Set
<
Map.Entry
<
K
,
V
>>
ConcurrentSkipListMap.
entrySet
()
Returns a
Set
view of the mappings contained in this map.
Method parameters in
java.util.concurrent
with type arguments of type
Map.Entry
Modifier and Type
Method
Description
void
ConcurrentHashMap.
forEachEntry
(long parallelismThreshold,
Consumer
<? super
Map.Entry
<
K
,
V
>> action)
Performs the given action for each entry.
<U> void
ConcurrentHashMap.
forEachEntry
(long parallelismThreshold,
Function
<
Map.Entry
<
K
,
V
>,
? extends U> transformer,
Consumer
<? super U> action)
Performs the given action for each non-null transformation
 of each entry.
Map.Entry
<
K
,
V
>
ConcurrentHashMap.
reduceEntries
(long parallelismThreshold,
BiFunction
<
Map.Entry
<
K
,
V
>,
Map.Entry
<
K
,
V
>,
? extends
Map.Entry
<
K
,
V
>> reducer)
Returns the result of accumulating all entries using the
 given reducer to combine values, or null if none.
Map.Entry
<
K
,
V
>
ConcurrentHashMap.
reduceEntries
(long parallelismThreshold,
BiFunction
<
Map.Entry
<
K
,
V
>,
Map.Entry
<
K
,
V
>,
? extends
Map.Entry
<
K
,
V
>> reducer)
Returns the result of accumulating all entries using the
 given reducer to combine values, or null if none.
Map.Entry
<
K
,
V
>
ConcurrentHashMap.
reduceEntries
(long parallelismThreshold,
BiFunction
<
Map.Entry
<
K
,
V
>,
Map.Entry
<
K
,
V
>,
? extends
Map.Entry
<
K
,
V
>> reducer)
Returns the result of accumulating all entries using the
 given reducer to combine values, or null if none.
<U> U
ConcurrentHashMap.
reduceEntries
(long parallelismThreshold,
Function
<
Map.Entry
<
K
,
V
>,
? extends U> transformer,
BiFunction
<? super U,
? super U,
? extends U> reducer)
Returns the result of accumulating the given transformation
 of all entries using the given reducer to combine values,
 or null if none.
double
ConcurrentHashMap.
reduceEntriesToDouble
(long parallelismThreshold,
ToDoubleFunction
<
Map.Entry
<
K
,
V
>> transformer,
 double basis,
DoubleBinaryOperator
reducer)
Returns the result of accumulating the given transformation
 of all entries using the given reducer to combine values,
 and the given basis as an identity value.
int
ConcurrentHashMap.
reduceEntriesToInt
(long parallelismThreshold,
ToIntFunction
<
Map.Entry
<
K
,
V
>> transformer,
 int basis,
IntBinaryOperator
reducer)
Returns the result of accumulating the given transformation
 of all entries using the given reducer to combine values,
 and the given basis as an identity value.
long
ConcurrentHashMap.
reduceEntriesToLong
(long parallelismThreshold,
ToLongFunction
<
Map.Entry
<
K
,
V
>> transformer,
 long basis,
LongBinaryOperator
reducer)
Returns the result of accumulating the given transformation
 of all entries using the given reducer to combine values,
 and the given basis as an identity value.
<U> U
ConcurrentHashMap.
searchEntries
(long parallelismThreshold,
Function
<
Map.Entry
<
K
,
V
>,
? extends U> searchFunction)
Returns a non-null result from applying the given search
 function on each entry, or null if none.
Uses of
Map.Entry
in
java.util.jar
Methods in
java.util.jar
that return types with arguments of type
Map.Entry
Modifier and Type
Method
Description
Set
<
Map.Entry
<
Object
,
Object
>>
Attributes.
entrySet
()
Returns a Collection view of the attribute name-value mappings
 contained in this Map.
Uses of
Map.Entry
in
javax.management.openmbean
Methods in
javax.management.openmbean
that return types with arguments of type
Map.Entry
Modifier and Type
Method
Description
Set
<
Map.Entry
<
Object
,
Object
>>
TabularDataSupport.
entrySet
()
Returns a collection view of the index to row mappings
 contained in this
TabularDataSupport
instance.
Uses of
Map.Entry
in
javax.script
Methods in
javax.script
that return types with arguments of type
Map.Entry
Modifier and Type
Method
Description
Set
<
Map.Entry
<
String
,
Object
>>
SimpleBindings.
entrySet
()
Returns a
Set
view of the mappings contained in this map.
Uses of
Map.Entry
in
javax.xml.crypto.dom
Methods in
javax.xml.crypto.dom
that return types with arguments of type
Map.Entry
Modifier and Type
Method
Description
Iterator
<
Map.Entry
<
String
,
Element
>>
DOMCryptoContext.
iterator
()
Returns a read-only iterator over the set of Id/Element mappings of
 this
DOMCryptoContext
.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.