Uses of Interface java.util.SequencedCollection (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Interface
java.util.SequencedCollection
Packages that use
SequencedCollection
Package
Description
java.util
Contains the collections framework, some internationalization support classes,
 a service loader, properties, random number generation, string parsing
 and scanning classes, base64 encoding and decoding, a bit array, and
 several miscellaneous utility classes.
java.util.concurrent
Utility classes commonly useful in concurrent programming.
javax.management
Provides the core classes for the Java Management Extensions.
javax.management.relation
Provides the definition of the Relation Service.
Uses of
SequencedCollection
in
java.util
Subinterfaces of
SequencedCollection
in
java.util
Modifier and Type
Interface
Description
interface
Deque
<E>
A linear collection that supports element insertion and removal at
 both ends.
interface
List
<E>
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
interface
NavigableSet
<E>
A
SortedSet
extended with navigation methods reporting
 closest matches for given search targets.
interface
SequencedSet
<E>
A collection that is both a
SequencedCollection
and a
Set
.
interface
SortedSet
<E>
A
Set
that further provides a
total ordering
on its elements.
Classes in
java.util
that implement
SequencedCollection
Modifier and Type
Class
Description
class
AbstractList
<E>
This class provides a skeletal implementation of the
List
interface to minimize the effort required to implement this interface
 backed by a "random access" data store (such as an array).
class
AbstractSequentialList
<E>
This class provides a skeletal implementation of the
List
interface to minimize the effort required to implement this interface
 backed by a "sequential access" data store (such as a linked list).
class
ArrayDeque
<E>
Resizable-array implementation of the
Deque
interface.
class
ArrayList
<E>
Resizable-array implementation of the
List
interface.
class
LinkedHashSet
<E>
Hash table and linked list implementation of the
Set
interface,
 with well-defined encounter order.
class
LinkedList
<E>
Doubly-linked list implementation of the
List
and
Deque
interfaces.
class
Stack
<E>
The
Stack
class represents a last-in-first-out
 (LIFO) stack of objects.
class
TreeSet
<E>
A
NavigableSet
implementation based on a
TreeMap
.
class
Vector
<E>
The
Vector
class implements a growable array of
 objects.
Methods in
java.util
that return
SequencedCollection
Modifier and Type
Method
Description
SequencedCollection
<
E
>
SequencedCollection.
reversed
()
Returns a reverse-ordered
view
of this collection.
SequencedCollection
<
V
>
LinkedHashMap.
sequencedValues
()
Returns a
SequencedCollection
view of this map's
values
collection.
default
SequencedCollection
<
V
>
SequencedMap.
sequencedValues
()
Returns a
SequencedCollection
view of this map's
values
collection.
static <T>
SequencedCollection
<T>
Collections.
unmodifiableSequencedCollection
(
SequencedCollection
<? extends T> c)
Returns an
unmodifiable view
of the
 specified
SequencedCollection
.
Methods in
java.util
with parameters of type
SequencedCollection
Modifier and Type
Method
Description
static <T>
SequencedCollection
<T>
Collections.
unmodifiableSequencedCollection
(
SequencedCollection
<? extends T> c)
Returns an
unmodifiable view
of the
 specified
SequencedCollection
.
Uses of
SequencedCollection
in
java.util.concurrent
Subinterfaces of
SequencedCollection
in
java.util.concurrent
Modifier and Type
Interface
Description
interface
BlockingDeque
<E>
A
Deque
that additionally supports blocking operations that wait
 for the deque to become non-empty when retrieving an element, and wait for
 space to become available in the deque when storing an element.
Classes in
java.util.concurrent
that implement
SequencedCollection
Modifier and Type
Class
Description
class
ConcurrentLinkedDeque
<E>
An unbounded concurrent
deque
based on linked nodes.
class
ConcurrentSkipListSet
<E>
A scalable concurrent
NavigableSet
implementation based on
 a
ConcurrentSkipListMap
.
class
CopyOnWriteArrayList
<E>
A thread-safe variant of
ArrayList
in which all mutative
 operations (
add
,
set
, and so on) are implemented by
 making a fresh copy of the underlying array.
class
LinkedBlockingDeque
<E>
An optionally-bounded
blocking deque
based on
 linked nodes.
Uses of
SequencedCollection
in
javax.management
Classes in
javax.management
that implement
SequencedCollection
Modifier and Type
Class
Description
class
AttributeList
Represents a list of values for attributes of an MBean.
Uses of
SequencedCollection
in
javax.management.relation
Classes in
javax.management.relation
that implement
SequencedCollection
Modifier and Type
Class
Description
class
RoleList
A RoleList represents a list of roles (Role objects).
class
RoleUnresolvedList
A RoleUnresolvedList represents a list of RoleUnresolved objects,
 representing roles not retrieved from a relation due to a problem
 encountered when trying to access (read or write) the roles.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.