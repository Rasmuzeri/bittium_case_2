Uses of Interface java.util.List (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Interface
java.util.List
Packages that use
List
Package
Description
com.sun.jdi
This is the core package of the Java Debug
 Interface (JDI), it defines mirrors for values, types, and the target
 VirtualMachine itself - as well bootstrapping facilities.
com.sun.jdi.connect
This package defines connections between the virtual machine
 using the JDI and the target virtual machine.
com.sun.jdi.request
This package is used to request that a JDI
 event be sent under specified conditions.
com.sun.management
This package contains the JDK's extension to
 the standard implementation of the
java.lang.management
API and also defines the management
 interface for some other components of the platform.
com.sun.net.httpserver
Provides a simple high-level Http server API, which can be used to build
   embedded HTTP servers.
com.sun.source.doctree
Provides interfaces to represent documentation comments as abstract syntax
 trees (AST).
com.sun.source.tree
Provides interfaces to represent source code as abstract syntax
 trees (AST).
com.sun.source.util
Provides utilities for operations on abstract syntax trees (AST).
com.sun.tools.attach
Provides the API to attach to a Java virtual machine.
com.sun.tools.attach.spi
Only developers who are defining new attach providers should need to make
 direct use of this package.
java.awt
Contains all of the classes for creating user interfaces and for painting
 graphics and images.
java.awt.datatransfer
Provides interfaces and classes for transferring data between and within
 applications.
java.awt.desktop
Provides interfaces and classes for interaction with various desktop
 capabilities.
java.awt.dnd
Drag and Drop is a direct manipulation gesture found in many Graphical User
 Interface systems that provides a mechanism to transfer information between
 two entities logically associated with presentation elements in the GUI.
java.awt.image
Provides classes for creating and modifying images.
java.lang
Provides classes that are fundamental to the design of the Java
 programming language.
java.lang.constant
Classes and interfaces to represent
nominal descriptors
for run-time
 entities such as classes or method handles, and classfile entities such as
 constant pool entries or
invokedynamic
call sites.
java.lang.foreign
Provides low-level access to memory and functions outside the Java runtime.
java.lang.invoke
The
java.lang.invoke
package provides low-level primitives for interacting
 with the Java Virtual Machine.
java.lang.management
Provides the management interfaces for monitoring and management of the
Java virtual machine and other components in the Java runtime.
java.lang.module
Classes to support module descriptors and creating configurations of modules
 by means of resolution and service binding.
java.net
Provides the classes for implementing networking applications.
java.net.http
HTTP Client and WebSocket APIs
java.nio.file
Defines interfaces and classes for the Java virtual machine to access files,
 file attributes, and file systems.
java.nio.file.attribute
Interfaces and classes providing access to file and file system attributes.
java.nio.file.spi
Service-provider classes for the
java.nio.file
package.
java.security
Provides the classes and interfaces for the security framework.
java.security.cert
Provides classes and interfaces for parsing and managing
 certificates, certificate revocation lists (CRLs), and
 certification paths.
java.time
The main API for dates, times, instants, and durations.
java.time.chrono
Generic API for calendar systems other than the default ISO.
java.time.temporal
Access to date and time using fields and units, and date time adjusters.
java.time.zone
Support for time-zones and their rules.
java.util
Contains the collections framework, some internationalization support classes,
 a service loader, properties, random number generation, string parsing
 and scanning classes, base64 encoding and decoding, a bit array, and
 several miscellaneous utility classes.
java.util.concurrent
Utility classes commonly useful in concurrent programming.
java.util.logging
Provides the classes and interfaces of
 the Java 2 platform's core logging facilities.
java.util.stream
Classes to support functional-style operations on streams of elements, such
 as map-reduce transformations on collections.
javax.imageio
The main package of the Java Image I/O API.
javax.imageio.metadata
A package of the Java Image I/O API dealing with reading and writing
 metadata.
javax.imageio.plugins.tiff
Public classes used by the built-in TIFF plug-ins.
javax.lang.model
Types and hierarchies of packages comprising a Java language model, a model of the declarations and types of the Java
 programming language.
javax.lang.model.element
Interfaces used to model elements of the Java programming language.
javax.lang.model.type
Interfaces used to model Java programming language types.
javax.lang.model.util
Utilities to assist in the processing of
program elements
and
types
.
javax.management
Provides the core classes for the Java Management Extensions.
javax.management.loading
Provides the classes which implement advanced dynamic
        loading.
javax.management.openmbean
Provides the open data types and Open MBean descriptor classes.
javax.management.relation
Provides the definition of the Relation Service.
javax.naming.ldap
Provides support for LDAPv3 extended operations and controls.
javax.naming.ldap.spi
javax.net.ssl
Provides classes for the secure socket package.
javax.script
The scripting API consists of interfaces and classes that define
Java Scripting Engines and provides
a framework for their use in Java applications.
javax.smartcardio
Javaâ„¢ Smart Card I/O API.
javax.sound.midi
Provides interfaces and classes for I/O, sequencing, and synthesis of MIDI
 (Musical Instrument Digital Interface) data.
javax.swing
Provides a set of "lightweight" (all-Java language) components
 that, to the maximum degree possible, work the same on all platforms.
javax.tools
Provides interfaces for tools which can be invoked from a program,
 for example, compilers.
javax.xml.crypto.dsig
Classes for generating and validating XML digital
 signatures.
javax.xml.crypto.dsig.keyinfo
Classes for parsing and processing
KeyInfo
elements and structures.
javax.xml.crypto.dsig.spec
Parameter classes for XML digital signatures.
javax.xml.stream.events
Defines event interfaces for the Streaming API for XML (StAX).
javax.xml.xpath
Provides an
object-model neutral
API for the
 evaluation of XPath expressions and access to the evaluation
 environment.
jdk.dynalink
Contains interfaces and classes that are used to link an
invokedynamic
call site.
jdk.dynalink.linker
Contains interfaces and classes needed by language runtimes to implement
 their own language-specific object models and type conversions.
jdk.dynalink.linker.support
Contains classes that make it more convenient for language runtimes to
 implement their own language-specific object models and type conversions
 by providing basic implementations of some classes as well as various
 utilities.
jdk.javadoc.doclet
The Doclet API provides an environment which, in conjunction with
 the Language Model API and Compiler Tree API, allows clients
 to inspect the source-level structures of programs and
 libraries, including API comments embedded in the source.
jdk.jfr
This package provides classes to create events and control Flight Recorder.
jdk.jfr.consumer
This package contains classes for consuming Flight Recorder data.
jdk.jshell
Provides interfaces for creating tools, such as a Read-Eval-Print Loop (REPL),
 which interactively evaluate "snippets" of Java programming language code.
jdk.jshell.execution
Provides implementation support for building JShell execution engines.
jdk.jshell.spi
Defines the Service Provider Interface for pluggable JShell execution engines.
jdk.management.jfr
This package contains classes to control and monitor Flight Recorder over Java Management Extensions (JMX).
Uses of
List
in
com.sun.jdi
Methods in
com.sun.jdi
that return
List
Modifier and Type
Method
Description
List
<
ReferenceType
>
VirtualMachine.
allClasses
()
Returns all
loaded types
in the target VM.
List
<
Connector
>
VirtualMachineManager.
allConnectors
()
Returns the list of all known
Connector
objects.
List
<
Field
>
ReferenceType.
allFields
()
Returns a list containing each
Field
declared in this type,
 and its superclasses, implemented interfaces, and/or superinterfaces.
List
<
InterfaceType
>
ClassType.
allInterfaces
()
Gets the interfaces directly and indirectly implemented
 by this class.
List
<
Location
>
Method.
allLineLocations
()
Returns a list containing a
Location
object for
 each executable source line in this method.
List
<
Location
>
Method.
allLineLocations
(
String
stratum,
String
sourceName)
Returns a list containing a
Location
object for
 each executable source line in this method.
List
<
Location
>
ReferenceType.
allLineLocations
()
Returns a list containing a
Location
object
 for each executable source line in this reference type.
List
<
Location
>
ReferenceType.
allLineLocations
(
String
stratum,
String
sourceName)
Returns a list containing a
Location
object
 for each executable source line in this reference type.
List
<
Method
>
ReferenceType.
allMethods
()
Returns a list containing each
Method
declared in this type,
 and its superclasses, implemented interfaces, and/or superinterfaces.
default
List
<
ModuleReference
>
VirtualMachine.
allModules
()
Returns all modules.
List
<
ThreadReference
>
VirtualMachine.
allThreads
()
Returns a list of the live threads in the target VM.
List
<
LocalVariable
>
Method.
arguments
()
Returns a list containing each
LocalVariable
that is
 declared as an argument of this method.
List
<
String
>
Method.
argumentTypeNames
()
Returns a list containing a text representation of the type
 of each formal parameter of this method.
List
<
Type
>
Method.
argumentTypes
()
Returns a list containing the type
 of each formal parameter of this method.
List
<
AttachingConnector
>
VirtualMachineManager.
attachingConnectors
()
Returns the list of known
AttachingConnector
objects.
List
<
String
>
ReferenceType.
availableStrata
()
Return the available strata for this reference type.
List
<
String
>
PathSearchingVirtualMachine.
bootClassPath
()
Get the boot class path for this virtual machine.
List
<
ReferenceType
>
VirtualMachine.
classesByName
(
String
className)
Returns the loaded reference types that
 match a given name.
List
<
String
>
PathSearchingVirtualMachine.
classPath
()
Get the class path for this virtual machine.
List
<
VirtualMachine
>
VirtualMachineManager.
connectedVirtualMachines
()
Lists all target VMs which are connected to the debugger.
List
<
ReferenceType
>
ClassLoaderReference.
definedClasses
()
Returns a list of all classes defined by this class loader.
List
<
Field
>
ReferenceType.
fields
()
Returns a list containing each
Field
declared in this type.
List
<
StackFrame
>
ThreadReference.
frames
()
Returns a List containing each
StackFrame
in the
 thread's current call stack.
List
<
StackFrame
>
ThreadReference.
frames
(intÂ start,
 intÂ length)
Returns a List containing a range of
StackFrame
mirrors
 from the thread's current call stack.
List
<
Value
>
StackFrame.
getArgumentValues
()
Returns the values of all arguments in this frame.
List
<
Value
>
ArrayReference.
getValues
()
Returns all of the components in this array.
List
<
Value
>
ArrayReference.
getValues
(intÂ index,
 intÂ length)
Returns a range of array components.
List
<
ClassType
>
InterfaceType.
implementors
()
Gets the currently prepared classes which directly implement this
 interface.
List
<
ObjectReference
>
ReferenceType.
instances
(longÂ maxInstances)
Returns instances of this ReferenceType.
List
<
InterfaceType
>
ClassType.
interfaces
()
Gets the interfaces directly implemented by this class.
List
<
LaunchingConnector
>
VirtualMachineManager.
launchingConnectors
()
Returns the list of known
LaunchingConnector
objects.
List
<
ListeningConnector
>
VirtualMachineManager.
listeningConnectors
()
Returns the list of known
ListeningConnector
objects.
List
<
Location
>
Method.
locationsOfLine
(intÂ lineNumber)
Returns a List containing all
Location
objects
 that map to the given line number.
List
<
Location
>
Method.
locationsOfLine
(
String
stratum,
String
sourceName,
 intÂ lineNumber)
Returns a List containing all
Location
objects
 that map to the given line number and source name.
List
<
Location
>
ReferenceType.
locationsOfLine
(intÂ lineNumber)
Returns a List containing all
Location
objects
 that map to the given line number.
List
<
Location
>
ReferenceType.
locationsOfLine
(
String
stratum,
String
sourceName,
 intÂ lineNumber)
Returns a List containing all
Location
objects
 that map to the given line number.
List
<
Method
>
ReferenceType.
methods
()
Returns a list containing each
Method
declared
 directly in this type.
List
<
Method
>
ReferenceType.
methodsByName
(
String
name)
Returns a List containing each visible
Method
that
 has the given name.
List
<
Method
>
ReferenceType.
methodsByName
(
String
name,
String
signature)
Returns a List containing each visible
Method
that
 has the given name and signature.
List
<
ReferenceType
>
ReferenceType.
nestedTypes
()
Returns a List containing
ReferenceType
objects that are
 declared within this type and are currently loaded into the Virtual
 Machine.
List
<
ObjectReference
>
ThreadReference.
ownedMonitors
()
Returns a List containing an
ObjectReference
for
 each monitor owned by the thread.
List
<
MonitorInfo
>
ThreadReference.
ownedMonitorsAndFrames
()
Returns a List containing a
MonitorInfo
object for
 each monitor owned by the thread.
List
<
ObjectReference
>
ObjectReference.
referringObjects
(longÂ maxReferrers)
Returns objects that directly reference this object.
List
<
String
>
ReferenceType.
sourceNames
(
String
stratum)
Gets the identifying names for all the source corresponding to the
 declaration of this type.
List
<
String
>
ReferenceType.
sourcePaths
(
String
stratum)
Gets the paths to the source corresponding to the
 declaration of this type.
List
<
ClassType
>
ClassType.
subclasses
()
Gets the currently loaded, direct subclasses of this class.
List
<
InterfaceType
>
InterfaceType.
subinterfaces
()
Gets the currently prepared interfaces which directly extend this
 interface.
List
<
InterfaceType
>
InterfaceType.
superinterfaces
()
Gets the interfaces directly extended by this interface.
List
<
ThreadGroupReference
>
ThreadGroupReference.
threadGroups
()
Returns a List containing a
ThreadGroupReference
for each
 subgroup.
List
<
ThreadReference
>
ThreadGroupReference.
threads
()
Returns a List containing a
ThreadReference
for each live platform
 thread in this thread group.
List
<
ThreadGroupReference
>
VirtualMachine.
topLevelThreadGroups
()
Returns each thread group which does not have a parent.
List
<
LocalVariable
>
Method.
variables
()
Returns a list containing each
LocalVariable
declared
 in this method.
List
<
LocalVariable
>
Method.
variablesByName
(
String
name)
Returns a list containing each
LocalVariable
of a
 given name in this method.
List
<
ReferenceType
>
ClassLoaderReference.
visibleClasses
()
Returns a list of all classes which this class loader
 can find by name via
ClassLoader::loadClass
,
Class::forName
and bytecode linkage in the target VM.
List
<
Field
>
ReferenceType.
visibleFields
()
Returns a list containing each unhidden and unambiguous
Field
in this type.
List
<
Method
>
ReferenceType.
visibleMethods
()
Returns a list containing each
Method
declared or inherited by this type.
List
<
LocalVariable
>
StackFrame.
visibleVariables
()
Returns a list containing each
LocalVariable
that can be accessed from this frame's location.
List
<
ThreadReference
>
ObjectReference.
waitingThreads
()
Returns a List containing a
ThreadReference
for
 each thread currently waiting for this object's monitor.
Methods in
com.sun.jdi
with parameters of type
List
Modifier and Type
Method
Description
Map
<
Field
,
Value
>
ObjectReference.
getValues
(
List
<? extends
Field
>Â fields)
Gets the value of multiple instance and/or static fields in this object.
Map
<
Field
,
Value
>
ReferenceType.
getValues
(
List
<? extends
Field
>Â fields)
Returns a map containing the
Value
of each
 static
Field
in the given list.
Map
<
LocalVariable
,
Value
>
StackFrame.
getValues
(
List
<? extends
LocalVariable
>Â variables)
Returns the values of multiple local variables in this frame.
long[]
VirtualMachine.
instanceCounts
(
List
<? extends
ReferenceType
>Â refTypes)
Returns the number of instances of each ReferenceType in the 'refTypes'
 list.
Value
ClassType.
invokeMethod
(
ThreadReference
thread,
Method
method,
List
<? extends
Value
>Â arguments,
 intÂ options)
Invokes the specified static
Method
in the
 target VM.
default
Value
InterfaceType.
invokeMethod
(
ThreadReference
thread,
Method
method,
List
<? extends
Value
>Â arguments,
 intÂ options)
Invokes the specified static
Method
in the
 target VM.
Value
ObjectReference.
invokeMethod
(
ThreadReference
thread,
Method
method,
List
<? extends
Value
>Â arguments,
 intÂ options)
Invokes the specified
Method
on this object in the
 target VM.
ObjectReference
ClassType.
newInstance
(
ThreadReference
thread,
Method
method,
List
<? extends
Value
>Â arguments,
 intÂ options)
Constructs a new instance of this type, using
 the given constructor
Method
in the
 target VM.
void
ArrayReference.
setValues
(intÂ index,
List
<? extends
Value
>Â values,
 intÂ srcIndex,
 intÂ length)
Replaces a range of array components with other values.
void
ArrayReference.
setValues
(
List
<? extends
Value
>Â values)
Replaces all array components with other values.
Uses of
List
in
com.sun.jdi.connect
Methods in
com.sun.jdi.connect
that return
List
Modifier and Type
Method
Description
List
<
String
>
IllegalConnectorArgumentsException.
argumentNames
()
Return a
List
containing the names of the
 invalid or inconsistent arguments.
List
<
String
>
Connector.SelectedArgument.
choices
()
Return the possible values for the argument
Constructors in
com.sun.jdi.connect
with parameters of type
List
Modifier
Constructor
Description
IllegalConnectorArgumentsException
(
String
s,
List
<
String
>Â names)
Construct an
IllegalConnectorArgumentsException
with the specified detail message and a
List
of
 names of arguments which are invalid or inconsistent.
Uses of
List
in
com.sun.jdi.request
Methods in
com.sun.jdi.request
that return
List
Modifier and Type
Method
Description
List
<
AccessWatchpointRequest
>
EventRequestManager.
accessWatchpointRequests
()
Return an unmodifiable list of the enabled and disabled access
 watchpoint requests.
List
<
BreakpointRequest
>
EventRequestManager.
breakpointRequests
()
Return an unmodifiable list of the enabled and disabled breakpoint requests.
List
<
ClassPrepareRequest
>
EventRequestManager.
classPrepareRequests
()
Return an unmodifiable list of the enabled and disabled class prepare requests.
List
<
ClassUnloadRequest
>
EventRequestManager.
classUnloadRequests
()
Return an unmodifiable list of the enabled and disabled class unload requests.
List
<
ExceptionRequest
>
EventRequestManager.
exceptionRequests
()
Return an unmodifiable list of the enabled and disabled exception requests.
List
<
MethodEntryRequest
>
EventRequestManager.
methodEntryRequests
()
Return an unmodifiable list of the enabled and disabled method entry requests.
List
<
MethodExitRequest
>
EventRequestManager.
methodExitRequests
()
Return an unmodifiable list of the enabled and disabled method exit requests.
List
<
ModificationWatchpointRequest
>
EventRequestManager.
modificationWatchpointRequests
()
Return an unmodifiable list of the enabled and disabled modification
 watchpoint requests.
List
<
MonitorContendedEnteredRequest
>
EventRequestManager.
monitorContendedEnteredRequests
()
Return an unmodifiable list of the enabled and disabled monitor contended entered requests.
List
<
MonitorContendedEnterRequest
>
EventRequestManager.
monitorContendedEnterRequests
()
Return an unmodifiable list of the enabled and disabled monitor contended enter requests.
List
<
MonitorWaitedRequest
>
EventRequestManager.
monitorWaitedRequests
()
Return an unmodifiable list of the enabled and disabled monitor waited requests.
List
<
MonitorWaitRequest
>
EventRequestManager.
monitorWaitRequests
()
Return an unmodifiable list of the enabled and disabled monitor wait requests.
List
<
StepRequest
>
EventRequestManager.
stepRequests
()
Return an unmodifiable list of the enabled and disabled step requests.
List
<
ThreadDeathRequest
>
EventRequestManager.
threadDeathRequests
()
Return an unmodifiable list of the enabled and disabled thread death requests.
List
<
ThreadStartRequest
>
EventRequestManager.
threadStartRequests
()
Return an unmodifiable list of the enabled and disabled thread start requests.
List
<
VMDeathRequest
>
EventRequestManager.
vmDeathRequests
()
Return an unmodifiable list of the enabled and disabled VM death requests.
Methods in
com.sun.jdi.request
with parameters of type
List
Modifier and Type
Method
Description
void
EventRequestManager.
deleteEventRequests
(
List
<? extends
EventRequest
>Â eventRequests)
Removes a list of
EventRequest
s.
Uses of
List
in
com.sun.management
Methods in
com.sun.management
that return
List
Modifier and Type
Method
Description
List
<
VMOption
>
HotSpotDiagnosticMXBean.
getDiagnosticOptions
()
Returns a list of
VMOption
objects for all diagnostic options.
Uses of
List
in
com.sun.net.httpserver
Methods in
com.sun.net.httpserver
that return
List
Modifier and Type
Method
Description
List
<
String
>
Headers.
get
(
Object
key)
abstract
List
<
Filter
>
HttpContext.
getFilters
()
Returns this context's
List
of
filters
.
List
<
String
>
Headers.
put
(
String
key,
List
<
String
>Â value)
List
<
String
>
Headers.
remove
(
Object
key)
Methods in
com.sun.net.httpserver
that return types with arguments of type
List
Modifier and Type
Method
Description
Set
<
Map.Entry
<
String
,
List
<
String
>>>
Headers.
entrySet
()
Collection
<
List
<
String
>>
Headers.
values
()
Methods in
com.sun.net.httpserver
with parameters of type
List
Modifier and Type
Method
Description
List
<
String
>
Headers.
put
(
String
key,
List
<
String
>Â value)
default
Request
Request.
with
(
String
headerName,
List
<
String
>Â headerValues)
Returns an identical
Request
with an additional header.
Method parameters in
com.sun.net.httpserver
with type arguments of type
List
Modifier and Type
Method
Description
static
Headers
Headers.
of
(
Map
<
String
,
List
<
String
>>Â headers)
Returns an immutable
Headers
from the given
headers
with
 the same header names and values.
void
Headers.
putAll
(
Map
<? extends
String
,
? extends
List
<
String
>>Â t)
Constructors in
com.sun.net.httpserver
with parameters of type
List
Modifier
Constructor
Description
Chain
(
List
<
Filter
>Â filters,
HttpHandler
handler)
Creates a
Chain
instance with given filters and handler.
Constructor parameters in
com.sun.net.httpserver
with type arguments of type
List
Modifier
Constructor
Description
Headers
(
Map
<
String
,
List
<
String
>>Â headers)
Creates a mutable
Headers
from the given
headers
with
 the same header names and values.
Uses of
List
in
com.sun.source.doctree
Methods in
com.sun.source.doctree
that return
List
Modifier and Type
Method
Description
List
<? extends
DocTree
>
SnippetTree.
getAttributes
()
Returns the list of the attributes of the
@snippet
tag.
List
<? extends
DocTree
>
StartElementTree.
getAttributes
()
Returns any attributes defined by this element.
List
<? extends
DocTree
>
DocCommentTree.
getBlockTags
()
Returns the block tags for a documentation comment.
List
<? extends
DocTree
>
DeprecatedTree.
getBody
()
Returns the description explaining why an item is deprecated.
List
<? extends
DocTree
>
DocCommentTree.
getBody
()
Returns the body of a documentation comment,
 appearing after the first sentence, and before any block tags.
List
<? extends
DocTree
>
HiddenTree.
getBody
()
Returns the description explaining why an item is hidden.
List
<? extends
DocTree
>
SinceTree.
getBody
()
Returns the text explaining the availability of the item being documented.
List
<? extends
DocTree
>
VersionTree.
getBody
()
Returns the body of the tag.
List
<? extends
DocTree
>
UnknownBlockTagTree.
getContent
()
Returns the content of an unrecognized block tag.
List
<? extends
DocTree
>
UnknownInlineTagTree.
getContent
()
Returns the content of an unrecognized inline tag.
List
<? extends
DocTree
>
IndexTree.
getDescription
()
Returns the description, if any.
List
<? extends
DocTree
>
ParamTree.
getDescription
()
Returns the description of the parameter.
List
<? extends
DocTree
>
ProvidesTree.
getDescription
()
Returns a description of the service type being provided by the module.
List
<? extends
DocTree
>
ReturnTree.
getDescription
()
Returns the description of the return value of a method.
List
<? extends
DocTree
>
SerialDataTree.
getDescription
()
Returns the description of the serial data.
List
<? extends
DocTree
>
SerialFieldTree.
getDescription
()
Returns the description of the serial field.
List
<? extends
DocTree
>
SerialTree.
getDescription
()
Returns the description of the field, or the word
 "include" or "exclude".
List
<? extends
DocTree
>
ThrowsTree.
getDescription
()
Returns a description of the reasons why the
 exception may be thrown.
List
<? extends
DocTree
>
UsesTree.
getDescription
()
Returns a description of the use of service type within the module.
List
<? extends
DocTree
>
DocCommentTree.
getFirstSentence
()
Returns the first sentence of a documentation comment.
default
List
<? extends
DocTree
>
DocCommentTree.
getFullBody
()
Returns the entire body of a documentation comment, appearing
 before any block tags, including the first sentence.
List
<? extends
DocTree
>
LinkTree.
getLabel
()
Returns the label, if any, of the link.
List
<? extends
DocTree
>
AuthorTree.
getName
()
Returns the name of the author.
default
List
<? extends
DocTree
>
DocCommentTree.
getPostamble
()
Returns a list of trees containing the content (if any) following the
 content of the documentation comment.
default
List
<? extends
DocTree
>
DocCommentTree.
getPreamble
()
Returns a list of trees containing the content (if any) preceding
 the content of the documentation comment.
List
<? extends
DocTree
>
SeeTree.
getReference
()
Returns the reference.
List
<? extends
DocTree
>
SummaryTree.
getSummary
()
Returns the summary or the first line of a comment.
List
<? extends
DocTree
>
SpecTree.
getTitle
()
Returns the title.
List
<? extends
DocTree
>
AttributeTree.
getValue
()
Returns the value of the attribute, or
null
if the
kind of this attribute
is
EMPTY
.
Uses of
List
in
com.sun.source.tree
Methods in
com.sun.source.tree
that return
List
Modifier and Type
Method
Description
List
<? extends
AnnotationTree
>
AnnotatedTypeTree.
getAnnotations
()
Returns the annotations associated with this type expression.
List
<? extends
AnnotationTree
>
ModifiersTree.
getAnnotations
()
Returns the annotations in this modifiers tree.
List
<? extends
AnnotationTree
>
ModuleTree.
getAnnotations
()
Returns the annotations associated with this module declaration.
List
<? extends
AnnotationTree
>
NewArrayTree.
getAnnotations
()
Returns the annotations on the base type.
List
<? extends
AnnotationTree
>
PackageTree.
getAnnotations
()
Returns the annotations associated with this package declaration.
List
<? extends
AnnotationTree
>
TypeParameterTree.
getAnnotations
()
Returns annotations on the type parameter declaration.
List
<? extends
ExpressionTree
>
AnnotationTree.
getArguments
()
Returns the arguments, if any, for the annotation.
List
<? extends
ExpressionTree
>
MethodInvocationTree.
getArguments
()
Returns the arguments for the method invocation.
List
<? extends
ExpressionTree
>
NewClassTree.
getArguments
()
Returns the arguments for the constructor to be invoked.
List
<? extends
Tree
>
IntersectionTypeTree.
getBounds
()
Returns the bounds of the type.
List
<? extends
Tree
>
TypeParameterTree.
getBounds
()
Returns the bounds of the type parameter.
List
<? extends
CaseTree
>
SwitchExpressionTree.
getCases
()
Returns the cases for the
switch
expression.
List
<? extends
CaseTree
>
SwitchTree.
getCases
()
Returns the cases for the
switch
statement.
List
<? extends
CatchTree
>
TryTree.
getCatches
()
Returns any catch blocks provided in the
try
statement.
List
<? extends
List
<? extends
AnnotationTree
>>
NewArrayTree.
getDimAnnotations
()
Returns the annotations on each of the dimension
 expressions.
List
<? extends
ExpressionTree
>
NewArrayTree.
getDimensions
()
Returns the dimension expressions for the type.
List
<? extends
DirectiveTree
>
ModuleTree.
getDirectives
()
Returns the directives in the module declaration.
List
<? extends
Tree
>
ErroneousTree.
getErrorTrees
()
Returns any trees that were saved in this node.
List
<? extends
ExpressionTree
>
CaseTree.
getExpressions
()
Returns the labels for this case.
List
<? extends
ExpressionTree
>
StringTemplateTree.
getExpressions
()
Returns list of expressions.
List
<
String
>
StringTemplateTree.
getFragments
()
Returns string fragments.
List
<? extends
ExpressionTree
>
ProvidesTree.
getImplementationNames
()
Returns the names of the implementation types being provided.
List
<? extends
Tree
>
ClassTree.
getImplementsClause
()
Returns the interfaces implemented by this type declaration.
List
<? extends
ImportTree
>
CompilationUnitTree.
getImports
()
Returns the import declarations appearing in this compilation unit,
 or an empty list if there are no import declarations.
List
<? extends
StatementTree
>
ForLoopTree.
getInitializer
()
Returns any initializers of the
for
statement.
List
<? extends
ExpressionTree
>
NewArrayTree.
getInitializers
()
Returns the initializer expressions.
List
<? extends
CaseLabelTree
>
CaseTree.
getLabels
()
Returns the labels for this case.
List
<? extends
Tree
>
ClassTree.
getMembers
()
Returns the members declared in this type declaration.
List
<? extends
ExpressionTree
>
ExportsTree.
getModuleNames
()
Returns the names of the modules to which the package is exported,
 or null, if the package is exported to all modules.
List
<? extends
ExpressionTree
>
OpensTree.
getModuleNames
()
Returns the names of the modules to which the package is opened,
 or null, if the package is opened to all modules.
List
<? extends
PatternTree
>
DeconstructionPatternTree.
getNestedPatterns
()
Returns the nested patterns.
List
<? extends
AnnotationTree
>
CompilationUnitTree.
getPackageAnnotations
()
Returns the annotations listed on any package declaration
 at the head of this compilation unit, or
null
if there
 is no package declaration.
List
<? extends
VariableTree
>
LambdaExpressionTree.
getParameters
()
Returns the parameters of this lambda expression.
List
<? extends
VariableTree
>
MethodTree.
getParameters
()
Returns the parameters of the method being declared.
default
List
<? extends
Tree
>
ClassTree.
getPermitsClause
()
Returns the subclasses permitted by this type declaration.
List
<? extends
Tree
>
TryTree.
getResources
()
Returns any resource declarations provided in the
try
statement.
List
<? extends
StatementTree
>
BlockTree.
getStatements
()
Returns the statements comprising this block.
List
<? extends
StatementTree
>
CaseTree.
getStatements
()
For case with kind
CaseTree.CaseKind.STATEMENT
,
 returns the statements labeled by the case.
List
<? extends
ExpressionTree
>
MethodTree.
getThrows
()
Returns the exceptions listed as being thrown by this method.
List
<? extends
Tree
>
UnionTypeTree.
getTypeAlternatives
()
Returns the alternative type expressions.
List
<? extends
ExpressionTree
>
MemberReferenceTree.
getTypeArguments
()
Returns the type arguments for the reference.
List
<? extends
Tree
>
MethodInvocationTree.
getTypeArguments
()
Returns the type arguments for this method invocation.
List
<? extends
Tree
>
NewClassTree.
getTypeArguments
()
Returns the type arguments for the object being created.
List
<? extends
Tree
>
ParameterizedTypeTree.
getTypeArguments
()
Returns the type arguments.
List
<? extends
Tree
>
CompilationUnitTree.
getTypeDecls
()
Returns the type declarations appearing in this compilation unit,
 or an empty list if there are no type declarations.
List
<? extends
TypeParameterTree
>
ClassTree.
getTypeParameters
()
Returns any type parameters of this type declaration.
List
<? extends
TypeParameterTree
>
MethodTree.
getTypeParameters
()
Returns the type parameters of the method being declared.
List
<? extends
ExpressionStatementTree
>
ForLoopTree.
getUpdate
()
Returns any update expressions of the
for
statement.
Methods in
com.sun.source.tree
that return types with arguments of type
List
Modifier and Type
Method
Description
List
<? extends
List
<? extends
AnnotationTree
>>
NewArrayTree.
getDimAnnotations
()
Returns the annotations on each of the dimension
 expressions.
Uses of
List
in
com.sun.source.util
Methods in
com.sun.source.util
that return
List
Modifier and Type
Method
Description
List
<
DocTree
>
DocTreeFactory.
getFirstSentence
(
List
<? extends
DocTree
>Â list)
Gets the first sentence contained in a list of content.
abstract
List
<
DocTree
>
DocTrees.
getFirstSentence
(
List
<? extends
DocTree
>Â list)
Returns the list of
DocTree
representing the first sentence of
 a comment.
Methods in
com.sun.source.util
with parameters of type
List
Modifier and Type
Method
Description
List
<
DocTree
>
DocTreeFactory.
getFirstSentence
(
List
<? extends
DocTree
>Â list)
Gets the first sentence contained in a list of content.
abstract
List
<
DocTree
>
DocTrees.
getFirstSentence
(
List
<? extends
DocTree
>Â list)
Returns the list of
DocTree
representing the first sentence of
 a comment.
AttributeTree
DocTreeFactory.
newAttributeTree
(
Name
name,
AttributeTree.ValueKind
vkind,
List
<? extends
DocTree
>Â value)
Creates a new
AttributeTree
object, to represent an attribute in an HTML element or tag.
AuthorTree
DocTreeFactory.
newAuthorTree
(
List
<? extends
DocTree
>Â name)
Creates a new
AuthorTree
object, to represent an
@author
tag.
DeprecatedTree
DocTreeFactory.
newDeprecatedTree
(
List
<? extends
DocTree
>Â text)
Creates a new
DeprecatedTree
object, to represent an
@deprecated
tag.
DocCommentTree
DocTreeFactory.
newDocCommentTree
(
List
<? extends
DocTree
>Â fullBody,
List
<? extends
DocTree
>Â tags)
Creates a new
DocCommentTree
object, to represent a complete doc comment.
DocCommentTree
DocTreeFactory.
newDocCommentTree
(
List
<? extends
DocTree
>Â fullBody,
List
<? extends
DocTree
>Â tags,
List
<? extends
DocTree
>Â preamble,
List
<? extends
DocTree
>Â postamble)
Creates a new
DocCommentTree
object, to represent the entire doc comment.
ThrowsTree
DocTreeFactory.
newExceptionTree
(
ReferenceTree
name,
List
<? extends
DocTree
>Â description)
Creates a new
ThrowsTree
object, to represent an
@exception
tag.
HiddenTree
DocTreeFactory.
newHiddenTree
(
List
<? extends
DocTree
>Â text)
Creates a new
HiddenTree
object, to represent an
@hidden
tag.
IndexTree
DocTreeFactory.
newIndexTree
(
DocTree
term,
List
<? extends
DocTree
>Â description)
Creates a new
IndexTree
object, to represent an
{@index }
tag.
LinkTree
DocTreeFactory.
newLinkPlainTree
(
ReferenceTree
ref,
List
<? extends
DocTree
>Â label)
Creates a new
LinkTree
object, to represent a
{@linkplain }
tag.
LinkTree
DocTreeFactory.
newLinkTree
(
ReferenceTree
ref,
List
<? extends
DocTree
>Â label)
Creates a new
LinkTree
object, to represent a
{@link }
tag.
ParamTree
DocTreeFactory.
newParamTree
(booleanÂ isTypeParameter,
IdentifierTree
name,
List
<? extends
DocTree
>Â description)
Creates a new
ParamTree
object, to represent a
@param
tag.
ProvidesTree
DocTreeFactory.
newProvidesTree
(
ReferenceTree
name,
List
<? extends
DocTree
>Â description)
Creates a new
ProvidesTree
object, to represent a
@provides
tag.
default
ReturnTree
DocTreeFactory.
newReturnTree
(booleanÂ isInline,
List
<? extends
DocTree
>Â description)
Creates a new
ReturnTree
object, to represent a
@return
tag
 or
{@return}
tag.
ReturnTree
DocTreeFactory.
newReturnTree
(
List
<? extends
DocTree
>Â description)
Creates a new
ReturnTree
object, to represent a
@return
tag.
SeeTree
DocTreeFactory.
newSeeTree
(
List
<? extends
DocTree
>Â reference)
Creates a new
SeeTree
object, to represent a
@see
tag.
SerialDataTree
DocTreeFactory.
newSerialDataTree
(
List
<? extends
DocTree
>Â description)
Creates a new
SerialDataTree
object, to represent a
@serialData
tag.
SerialFieldTree
DocTreeFactory.
newSerialFieldTree
(
IdentifierTree
name,
ReferenceTree
type,
List
<? extends
DocTree
>Â description)
Creates a new
SerialFieldTree
object, to represent a
@serialField
tag.
SerialTree
DocTreeFactory.
newSerialTree
(
List
<? extends
DocTree
>Â description)
Creates a new
SerialTree
object, to represent a
@serial
tag.
SinceTree
DocTreeFactory.
newSinceTree
(
List
<? extends
DocTree
>Â text)
Creates a new
SinceTree
object, to represent a
@since
tag.
SnippetTree
DocTreeFactory.
newSnippetTree
(
List
<? extends
DocTree
>Â attributes,
TextTree
text)
Creates a new
SnippetTree
object, to represent a
{@snippet }
tag.
SpecTree
DocTreeFactory.
newSpecTree
(
TextTree
url,
List
<? extends
DocTree
>Â title)
Creates a new
SpecTree
object, to represent an
@spec
tag.
StartElementTree
DocTreeFactory.
newStartElementTree
(
Name
name,
List
<? extends
DocTree
>Â attrs,
 booleanÂ selfClosing)
Creates a new
StartElementTree
object, to represent the start of an HTML element.
default
SummaryTree
DocTreeFactory.
newSummaryTree
(
List
<? extends
DocTree
>Â summary)
Creates a new
SummaryTree
object, to represent a
{@summary }
tag.
ThrowsTree
DocTreeFactory.
newThrowsTree
(
ReferenceTree
name,
List
<? extends
DocTree
>Â description)
Creates a new
ThrowsTree
object, to represent a
@throws
tag.
UnknownBlockTagTree
DocTreeFactory.
newUnknownBlockTagTree
(
Name
name,
List
<? extends
DocTree
>Â content)
Creates a new
UnknownBlockTagTree
object, to represent an unrecognized block tag.
UnknownInlineTagTree
DocTreeFactory.
newUnknownInlineTagTree
(
Name
name,
List
<? extends
DocTree
>Â content)
Creates a new
UnknownInlineTagTree
object, to represent an unrecognized inline tag.
UsesTree
DocTreeFactory.
newUsesTree
(
ReferenceTree
name,
List
<? extends
DocTree
>Â description)
Creates a new
UsesTree
object, to represent a
@uses
tag.
VersionTree
DocTreeFactory.
newVersionTree
(
List
<? extends
DocTree
>Â text)
Creates a new
VersionTree
object, to represent a
{@version }
tag.
Uses of
List
in
com.sun.tools.attach
Methods in
com.sun.tools.attach
that return
List
Modifier and Type
Method
Description
static
List
<
VirtualMachineDescriptor
>
VirtualMachine.
list
()
Return a list of Java virtual machines.
Uses of
List
in
com.sun.tools.attach.spi
Methods in
com.sun.tools.attach.spi
that return
List
Modifier and Type
Method
Description
abstract
List
<
VirtualMachineDescriptor
>
AttachProvider.
listVirtualMachines
()
Lists the Java virtual machines known to this provider.
static
List
<
AttachProvider
>
AttachProvider.
providers
()
Returns a list of the installed attach providers.
Uses of
List
in
java.awt
Methods in
java.awt
that return
List
Modifier and Type
Method
Description
List
<
Image
>
Window.
getIconImages
()
Returns the sequence of images to be displayed as the icon for this window.
protected
List
<
KeyEventDispatcher
>
KeyboardFocusManager.
getKeyEventDispatchers
()
Returns this KeyboardFocusManager's KeyEventDispatcher chain as a List.
protected
List
<
KeyEventPostProcessor
>
KeyboardFocusManager.
getKeyEventPostProcessors
()
Returns this KeyboardFocusManager's KeyEventPostProcessor chain as a
 List.
Methods in
java.awt
with parameters of type
List
Modifier and Type
Method
Description
void
Window.
setIconImages
(
List
<? extends
Image
>Â icons)
Sets the sequence of images to be displayed as the icon
 for this window.
Uses of
List
in
java.awt.datatransfer
Methods in
java.awt.datatransfer
that return
List
Modifier and Type
Method
Description
List
<
DataFlavor
>
FlavorTable.
getFlavorsForNative
(
String
nat)
Returns a
List
of
DataFlavor
s to which the specified
String
corresponds.
List
<
DataFlavor
>
SystemFlavorMap.
getFlavorsForNative
(
String
nat)
Returns a
List
of
DataFlavor
s to which the specified
String
native can be translated by the data transfer subsystem.
List
<
String
>
FlavorTable.
getNativesForFlavor
(
DataFlavor
flav)
Returns a
List
of
String
natives to which the specified
DataFlavor
corresponds.
List
<
String
>
SystemFlavorMap.
getNativesForFlavor
(
DataFlavor
flav)
Returns a
List
of
String
natives to which the specified
DataFlavor
can be translated by the data transfer subsystem.
Uses of
List
in
java.awt.desktop
Methods in
java.awt.desktop
that return
List
Modifier and Type
Method
Description
List
<
File
>
FilesEvent.
getFiles
()
Gets the list of files.
Constructors in
java.awt.desktop
with parameters of type
List
Modifier
Constructor
Description
OpenFilesEvent
(
List
<
File
>Â files,
String
searchTerm)
Constructs an
OpenFilesEvent
.
PrintFilesEvent
(
List
<
File
>Â files)
Constructs a
PrintFilesEvent
.
Uses of
List
in
java.awt.dnd
Methods in
java.awt.dnd
that return
List
Modifier and Type
Method
Description
protected
List
<
DataFlavor
>
DropTargetContext.
getCurrentDataFlavorsAsList
()
This method returns the currently available DataFlavors
 of the
Transferable
operand
 as a
java.util.List
.
List
<
DataFlavor
>
DropTargetDragEvent.
getCurrentDataFlavorsAsList
()
This method returns the current
DataFlavor
s
 as a
java.util.List
List
<
DataFlavor
>
DropTargetDropEvent.
getCurrentDataFlavorsAsList
()
This method returns the currently available
DataFlavor
s as a
java.util.List
.
Constructors in
java.awt.dnd
with parameters of type
List
Modifier
Constructor
Description
DragGestureEvent
(
DragGestureRecognizer
dgr,
 intÂ act,
Point
ori,
List
<? extends
InputEvent
>Â evs)
Constructs a
DragGestureEvent
object given by the
DragGestureRecognizer
instance firing this event,
 an
act
parameter representing
 the user's preferred action, an
ori
parameter
 indicating the origin of the drag, and a
List
of
 events that comprise the gesture(
evs
parameter).
Uses of
List
in
java.awt.image
Methods in
java.awt.image
that return
List
Modifier and Type
Method
Description
List
<
Image
>
BaseMultiResolutionImage.
getResolutionVariants
()
List
<
Image
>
MultiResolutionImage.
getResolutionVariants
()
Gets a readable list of all resolution variants.
Uses of
List
in
java.lang
Methods in
java.lang
that return
List
Modifier and Type
Method
Description
List
<
String
>
ProcessBuilder.
command
()
Returns this process builder's operating system program and
 arguments.
List
<
String
>
StringTemplate.
fragments
()
Returns a list of fragment literals for this
StringTemplate
PREVIEW
.
List
<
ModuleLayer
>
ModuleLayer.
parents
()
Returns an unmodifiable list of this layer's parents, in search
 order.
static
List
<
Process
>
ProcessBuilder.
startPipeline
(
List
<
ProcessBuilder
>Â builders)
Starts a Process for each ProcessBuilder, creating a pipeline of
 processes linked by their standard output and standard input streams.
List
<
Object
>
StringTemplate.
values
()
Returns a list of embedded expression results for this
StringTemplate
PREVIEW
.
List
<
Integer
>
Runtime.Version.
version
()
Returns an unmodifiable
List
of the integers
 represented in the
version number
.
Methods in
java.lang
with parameters of type
List
Modifier and Type
Method
Description
static
StringTemplate
PREVIEW
StringTemplate.
combine
(
List
<
StringTemplate
PREVIEW
>Â stringTemplates)
Combine a list of
StringTemplates
PREVIEW
into a single
StringTemplate
PREVIEW
.
ProcessBuilder
ProcessBuilder.
command
(
List
<
String
>Â command)
Sets this process builder's operating system program and
 arguments.
static
ModuleLayer.Controller
ModuleLayer.
defineModules
(
Configuration
cf,
List
<
ModuleLayer
>Â parentLayers,
Function
<
String
,
ClassLoader
>Â clf)
Creates a new module layer by defining the modules in the given
Configuration
to the Java virtual machine.
static
ModuleLayer.Controller
ModuleLayer.
defineModulesWithManyLoaders
(
Configuration
cf,
List
<
ModuleLayer
>Â parentLayers,
ClassLoader
parentLoader)
Creates a new module layer by defining the modules in the given
Configuration
to the Java virtual machine.
static
ModuleLayer.Controller
ModuleLayer.
defineModulesWithOneLoader
(
Configuration
cf,
List
<
ModuleLayer
>Â parentLayers,
ClassLoader
parentLoader)
Creates a new module layer by defining the modules in the given
Configuration
to the Java virtual machine.
static
String
StringTemplate.
interpolate
(
List
<
String
>Â fragments,
List
<?>Â values)
Creates a string that interleaves the elements of values between the
 elements of fragments.
MethodHandle
StringTemplate.Processor.Linkage.
linkage
(
List
<
String
>Â fragments,
MethodType
type)
This method creates a
MethodHandle
that when invoked with arguments of
 those specified in
type
returns a result that equals that returned by
 the template processor's process method.
static
StringTemplate
PREVIEW
StringTemplate.
of
(
List
<
String
>Â fragments,
List
<?>Â values)
Returns a StringTemplate with the given fragments and values.
static
List
<
Process
>
ProcessBuilder.
startPipeline
(
List
<
ProcessBuilder
>Â builders)
Starts a Process for each ProcessBuilder, creating a pipeline of
 processes linked by their standard output and standard input streams.
Constructors in
java.lang
with parameters of type
List
Modifier
Constructor
Description
ProcessBuilder
(
List
<
String
>Â command)
Constructs a process builder with the specified operating
 system program and arguments.
Uses of
List
in
java.lang.constant
Methods in
java.lang.constant
that return
List
Modifier and Type
Method
Description
List
<
ConstantDesc
>
DynamicConstantDesc.
bootstrapArgsList
()
Returns the bootstrap arguments for this constant as an immutable
List
.
List
<
ClassDesc
>
MethodTypeDesc.
parameterList
()
Returns the parameter types as an immutable
List
.
Methods in
java.lang.constant
with parameters of type
List
Modifier and Type
Method
Description
static
MethodTypeDesc
MethodTypeDesc.
of
(
ClassDesc
returnDesc,
List
<
ClassDesc
>Â paramDescs)
Returns a
MethodTypeDesc
given the return type and a list of
 parameter types.
Uses of
List
in
java.lang.foreign
Methods in
java.lang.foreign
that return
List
Modifier and Type
Method
Description
List
<
MemoryLayout
PREVIEW
>
FunctionDescriptor.
argumentLayouts
()
Returns the argument layouts of this function descriptor (as an unmodifiable list).
List
<
MemoryLayout
PREVIEW
>
GroupLayout.
memberLayouts
()
Returns the member layouts of this group layout.
Uses of
List
in
java.lang.invoke
Methods in
java.lang.invoke
that return
List
Modifier and Type
Method
Description
List
<
Class
<?>>
VarHandle.
coordinateTypes
()
Returns the coordinate types for this VarHandle.
static
List
<
MethodHandle
>
StringConcatFactory.
makeConcatWithTemplateCluster
(
List
<
String
>Â fragments,
List
<
Class
<?>>Â ptypes,
 intÂ maxSlots)
Preview.
This method breaks up large concatenations into separate
MethodHandles
based on the number of slots required
 per
MethodHandle
.
List
<
Class
<?>>
MethodType.
parameterList
()
Presents the parameter types as a list (a convenience method).
List
<
F
>
TypeDescriptor.OfMethod.
parameterList
()
Return an immutable list of field descriptors for the parameter types of the method type
 described by this descriptor
Methods in
java.lang.invoke
with parameters of type
List
Modifier and Type
Method
Description
MethodType
MethodType.
appendParameterTypes
(
List
<
Class
<?>>Â ptypesToInsert)
Finds or creates a method type with additional parameter types.
static
MethodHandle
MethodHandles.
dropArguments
(
MethodHandle
target,
 intÂ pos,
List
<
Class
<?>>Â valueTypes)
Produces a method handle which will discard some dummy arguments
 before calling some other specified
target
method handle.
static
MethodHandle
MethodHandles.
dropArgumentsToMatch
(
MethodHandle
target,
 intÂ skip,
List
<
Class
<?>>Â newTypes,
 intÂ pos)
Adapts a target method handle to match the given parameter type list.
MethodType
MethodType.
insertParameterTypes
(intÂ num,
List
<
Class
<?>>Â ptypesToInsert)
Finds or creates a method type with additional parameter types.
Object
MethodHandle.
invokeWithArguments
(
List
<?>Â arguments)
Performs a variable arity invocation, passing the arguments in the given list
 to the method handle, as if via an inexact
invoke
from a call site
 which mentions only the type
Object
, and whose actual argument count is the length
 of the argument list.
static
MethodHandle
StringConcatFactory.
makeConcatWithTemplate
(
List
<
String
>Â fragments,
List
<
Class
<?>>Â ptypes)
Preview.
Simplified concatenation method to facilitate
StringTemplate
PREVIEW
concatenation.
static
List
<
MethodHandle
>
StringConcatFactory.
makeConcatWithTemplateCluster
(
List
<
String
>Â fragments,
List
<
Class
<?>>Â ptypes,
 intÂ maxSlots)
Preview.
This method breaks up large concatenations into separate
MethodHandles
based on the number of slots required
 per
MethodHandle
.
static
MethodHandle
StringConcatFactory.
makeConcatWithTemplateGetters
(
List
<
String
>Â fragments,
List
<
MethodHandle
>Â getters,
 intÂ maxSlots)
Preview.
This method creates a
MethodHandle
expecting one input, the
 receiver of the supplied getters.
static
MethodType
MethodType.
methodType
(
Class
<?>Â rtype,
List
<
Class
<?>>Â ptypes)
Finds or creates a method type with the given components.
static
VarHandle
MethodHandles.
permuteCoordinates
(
VarHandle
target,
List
<
Class
<?>>Â newCoordinates,
 int...Â reorder)
Preview.
Provides a var handle which adapts the coordinate values of the target var handle, by re-arranging them
 so that the new coordinates match the provided ones.
Uses of
List
in
java.lang.management
Methods in
java.lang.management
that return
List
Modifier and Type
Method
Description
static
List
<
GarbageCollectorMXBean
>
ManagementFactory.
getGarbageCollectorMXBeans
()
Returns a list of
GarbageCollectorMXBean
objects
 in the Java virtual machine.
List
<
String
>
RuntimeMXBean.
getInputArguments
()
Returns the input arguments passed to the Java virtual machine
 which does not include the arguments to the
main
method.
List
<
String
>
PlatformLoggingMXBean.
getLoggerNames
()
Returns the list of the currently registered
logger
names.
static
List
<
MemoryManagerMXBean
>
ManagementFactory.
getMemoryManagerMXBeans
()
Returns a list of
MemoryManagerMXBean
objects
 in the Java virtual machine.
static
List
<
MemoryPoolMXBean
>
ManagementFactory.
getMemoryPoolMXBeans
()
Returns a list of
MemoryPoolMXBean
objects in the
 Java virtual machine.
static <T extends
PlatformManagedObject
>
List
<T>
ManagementFactory.
getPlatformMXBeans
(
Class
<T>Â mxbeanInterface)
Returns the list of platform MXBeans implementing
 the given
mxbeanInterface
in the Java
 virtual machine.
static <T extends
PlatformManagedObject
>
List
<T>
ManagementFactory.
getPlatformMXBeans
(
MBeanServerConnection
connection,
Class
<T>Â mxbeanInterface)
Returns the list of the platform MXBean proxies for
 forwarding the method calls of the
mxbeanInterface
through the given
MBeanServerConnection
.
Uses of
List
in
java.lang.module
Methods in
java.lang.module
that return
List
Modifier and Type
Method
Description
List
<
Configuration
>
Configuration.
parents
()
Returns an unmodifiable list of this configuration's parents, in search
 order.
List
<
String
>
ModuleDescriptor.Provides.
providers
()
Returns the list of the fully qualified class names of the providers
 or provider factories.
Methods in
java.lang.module
with parameters of type
List
Modifier and Type
Method
Description
ModuleDescriptor.Builder
ModuleDescriptor.Builder.
provides
(
String
service,
List
<
String
>Â providers)
Provides implementations of a service.
static
Configuration
Configuration.
resolve
(
ModuleFinder
before,
List
<
Configuration
>Â parents,
ModuleFinder
after,
Collection
<
String
>Â roots)
Resolves a collection of root modules to create a configuration.
static
Configuration
Configuration.
resolveAndBind
(
ModuleFinder
before,
List
<
Configuration
>Â parents,
ModuleFinder
after,
Collection
<
String
>Â roots)
Resolves a collection of root modules, with service binding, to create
 configuration.
Uses of
List
in
java.net
Methods in
java.net
that return
List
Modifier and Type
Method
Description
List
<
HttpCookie
>
CookieStore.
get
(
URI
uri)
Retrieve cookies associated with given URI, or whose domain matches the
 given URI.
List
<
HttpCookie
>
CookieStore.
getCookies
()
Get all not-expired cookies in cookie store.
List
<
InterfaceAddress
>
NetworkInterface.
getInterfaceAddresses
()
Get a List of all or a subset of the
InterfaceAddresses
of this network interface.
abstract
List
<
Certificate
>
SecureCacheResponse.
getLocalCertificateChain
()
Returns the certificate chain that were sent to the server during
 handshaking of the original connection that retrieved the
 network resource.
abstract
List
<
Certificate
>
SecureCacheResponse.
getServerCertificateChain
()
Returns the server's certificate chain, which was established as
 part of defining the session in the original connection that
 retrieved the network resource, from cache.
List
<
URI
>
CookieStore.
getURIs
()
Get all URIs which identify the cookies in this cookie store.
static
List
<
HttpCookie
>
HttpCookie.
parse
(
String
header)
Constructs cookies from set-cookie or set-cookie2 header string.
abstract
List
<
Proxy
>
ProxySelector.
select
(
URI
uri)
Selects all the applicable proxies based on the protocol to
 access the resource with and a destination address to access
 the resource at.
Methods in
java.net
that return types with arguments of type
List
Modifier and Type
Method
Description
abstract
Map
<
String
,
List
<
String
>>
CookieHandler.
get
(
URI
uri,
Map
<
String
,
List
<
String
>>Â requestHeaders)
Gets all the applicable cookies from a cookie cache for the
 specified uri in the request header.
Map
<
String
,
List
<
String
>>
CookieManager.
get
(
URI
uri,
Map
<
String
,
List
<
String
>>Â requestHeaders)
Map
<
String
,
List
<
String
>>
URLConnection.
getHeaderFields
()
Returns an unmodifiable Map of the header fields.
abstract
Map
<
String
,
List
<
String
>>
CacheResponse.
getHeaders
()
Returns the response headers as a Map.
Map
<
String
,
List
<
String
>>
URLConnection.
getRequestProperties
()
Returns an unmodifiable Map of general request
 properties for this connection.
Method parameters in
java.net
with type arguments of type
List
Modifier and Type
Method
Description
abstract
Map
<
String
,
List
<
String
>>
CookieHandler.
get
(
URI
uri,
Map
<
String
,
List
<
String
>>Â requestHeaders)
Gets all the applicable cookies from a cookie cache for the
 specified uri in the request header.
Map
<
String
,
List
<
String
>>
CookieManager.
get
(
URI
uri,
Map
<
String
,
List
<
String
>>Â requestHeaders)
abstract
CacheResponse
ResponseCache.
get
(
URI
uri,
String
rqstMethod,
Map
<
String
,
List
<
String
>>Â rqstHeaders)
Retrieve the cached response based on the requesting uri,
 request method and request headers.
abstract void
CookieHandler.
put
(
URI
uri,
Map
<
String
,
List
<
String
>>Â responseHeaders)
Sets all the applicable cookies, examples are response header
 fields that are named Set-Cookie2, present in the response
 headers into a cookie cache.
void
CookieManager.
put
(
URI
uri,
Map
<
String
,
List
<
String
>>Â responseHeaders)
Uses of
List
in
java.net.http
Methods in
java.net.http
with type parameters of type
List
Modifier and Type
Method
Description
static <S extends
Flow.Subscriber
<? super
List
<
ByteBuffer
>>,
T>
HttpResponse.BodyHandler
<T>
HttpResponse.BodyHandlers.
fromSubscriber
(SÂ subscriber,
Function
<? super S,
? extends T>Â finisher)
Returns a response body handler that returns a
BodySubscriber
<T>
obtained from
HttpResponse.BodySubscribers.fromSubscriber(Subscriber, Function)
, with the
 given
subscriber
and
finisher
function.
static <S extends
Flow.Subscriber
<? super
List
<
ByteBuffer
>>,
T>
HttpResponse.BodySubscriber
<T>
HttpResponse.BodySubscribers.
fromSubscriber
(SÂ subscriber,
Function
<? super S,
? extends T>Â finisher)
Returns a body subscriber that forwards all response body to the
 given
Flow.Subscriber
.
Methods in
java.net.http
that return
List
Modifier and Type
Method
Description
List
<
String
>
HttpHeaders.
allValues
(
String
name)
Returns an unmodifiable List of all of the header string values of the
 given named header.
Methods in
java.net.http
that return types with arguments of type
List
Modifier and Type
Method
Description
Map
<
String
,
List
<
String
>>
HttpHeaders.
map
()
Returns an unmodifiable multi Map view of this HttpHeaders.
static
HttpResponse.BodyHandler
<
Flow.Publisher
<
List
<
ByteBuffer
>>>
HttpResponse.BodyHandlers.
ofPublisher
()
Returns a
BodyHandler<Publisher<List<ByteBuffer>>>
that creates a
BodySubscriber
<Publisher<List<ByteBuffer>>>
obtained from
BodySubscribers.ofPublisher()
.
static
HttpResponse.BodySubscriber
<
Flow.Publisher
<
List
<
ByteBuffer
>>>
HttpResponse.BodySubscribers.
ofPublisher
()
Returns a response subscriber which publishes the response body
 through a
Publisher<List<ByteBuffer>>
.
Method parameters in
java.net.http
with type arguments of type
List
Modifier and Type
Method
Description
static
HttpResponse.BodyHandler
<
Void
>
HttpResponse.BodyHandlers.
fromSubscriber
(
Flow.Subscriber
<? super
List
<
ByteBuffer
>>Â subscriber)
Returns a response body handler that returns a
BodySubscriber
<Void>
obtained from
HttpResponse.BodySubscribers.fromSubscriber(Subscriber)
, with the given
subscriber
.
static
HttpResponse.BodySubscriber
<
Void
>
HttpResponse.BodySubscribers.
fromSubscriber
(
Flow.Subscriber
<? super
List
<
ByteBuffer
>>Â subscriber)
Returns a body subscriber that forwards all response body to the
 given
Flow.Subscriber
.
static
HttpHeaders
HttpHeaders.
of
(
Map
<
String
,
List
<
String
>>Â headerMap,
BiPredicate
<
String
,
String
>Â filter)
Returns an HTTP headers from the given map.
Uses of
List
in
java.nio.file
Methods in
java.nio.file
that return
List
Modifier and Type
Method
Description
List
<
WatchEvent
<?>>
WatchKey.
pollEvents
()
Retrieves and removes all pending events for this watch key, returning
 a
List
of the events that were retrieved.
static
List
<
String
>
Files.
readAllLines
(
Path
path)
Read all lines from a file.
static
List
<
String
>
Files.
readAllLines
(
Path
path,
Charset
cs)
Read all lines from a file.
Uses of
List
in
java.nio.file.attribute
Methods in
java.nio.file.attribute
that return
List
Modifier and Type
Method
Description
List
<
AclEntry
>
AclFileAttributeView.
getAcl
()
Reads the access control list.
List
<
String
>
UserDefinedFileAttributeView.
list
()
Returns a list containing the names of the user-defined attributes.
Methods in
java.nio.file.attribute
with parameters of type
List
Modifier and Type
Method
Description
void
AclFileAttributeView.
setAcl
(
List
<
AclEntry
>Â acl)
Updates (replace) the access control list.
Uses of
List
in
java.nio.file.spi
Methods in
java.nio.file.spi
that return
List
Modifier and Type
Method
Description
static
List
<
FileSystemProvider
>
FileSystemProvider.
installedProviders
()
Returns a list of the installed file system providers.
Uses of
List
in
java.security
Constructors in
java.security
with parameters of type
List
Modifier
Constructor
Description
Service
(
Provider
provider,
String
type,
String
algorithm,
String
className,
List
<
String
>Â aliases,
Map
<
String
,
String
>Â attributes)
Construct a new service.
Uses of
List
in
java.security.cert
Methods in
java.security.cert
that return
List
Modifier and Type
Method
Description
abstract
List
<? extends
Certificate
>
CertPath.
getCertificates
()
Returns the list of certificates in this certification path.
List
<
PKIXCertPathChecker
>
PKIXParameters.
getCertPathCheckers
()
Returns the
List
of certification path checkers.
List
<
CertStore
>
PKIXParameters.
getCertStores
()
Returns an immutable
List
of
CertStore
s that
 are used to find certificates and CRLs.
List
<
String
>
X509Certificate.
getExtendedKeyUsage
()
Gets an unmodifiable list of Strings representing the OBJECT
 IDENTIFIERs of the
ExtKeyUsageSyntax
field of the
 extended key usage extension, (OID = 2.5.29.37).
List
<
Extension
>
PKIXRevocationChecker.
getOcspExtensions
()
Gets the optional OCSP request extensions.
abstract
List
<
CertPathValidatorException
>
PKIXRevocationChecker.
getSoftFailExceptions
()
Returns a list containing the exceptions that are ignored by the
 revocation checker when the
SOFT_FAIL
option
 is set.
Methods in
java.security.cert
that return types with arguments of type
List
Modifier and Type
Method
Description
Collection
<
List
<?>>
X509Certificate.
getIssuerAlternativeNames
()
Gets an immutable collection of issuer alternative names from the
IssuerAltName
extension, (OID = 2.5.29.18).
Collection
<
List
<?>>
X509CertSelector.
getPathToNames
()
Returns a copy of the pathToNames criterion.
Collection
<
List
<?>>
X509Certificate.
getSubjectAlternativeNames
()
Gets an immutable collection of subject alternative names from the
SubjectAltName
extension, (OID = 2.5.29.17).
Collection
<
List
<?>>
X509CertSelector.
getSubjectAlternativeNames
()
Returns a copy of the subjectAlternativeNames criterion.
Methods in
java.security.cert
with parameters of type
List
Modifier and Type
Method
Description
CertPath
CertificateFactorySpi.
engineGenerateCertPath
(
List
<? extends
Certificate
>Â certificates)
Generates a
CertPath
object and initializes it with
 a
List
of
Certificate
s.
final
CertPath
CertificateFactory.
generateCertPath
(
List
<? extends
Certificate
>Â certificates)
Generates a
CertPath
object and initializes it with
 a
List
of
Certificate
s.
void
PKIXParameters.
setCertPathCheckers
(
List
<
PKIXCertPathChecker
>Â checkers)
Sets a
List
of additional certification path checkers.
void
PKIXParameters.
setCertStores
(
List
<
CertStore
>Â stores)
Sets the list of
CertStore
s to be used in finding
 certificates and CRLs.
void
PKIXRevocationChecker.
setOcspExtensions
(
List
<
Extension
>Â extensions)
Sets the optional OCSP request extensions.
Method parameters in
java.security.cert
with type arguments of type
List
Modifier and Type
Method
Description
void
X509CertSelector.
setPathToNames
(
Collection
<
List
<?>>Â names)
Sets the pathToNames criterion.
void
X509CertSelector.
setSubjectAlternativeNames
(
Collection
<
List
<?>>Â names)
Sets the subjectAlternativeNames criterion.
Uses of
List
in
java.time
Methods in
java.time
that return
List
Modifier and Type
Method
Description
List
<
TemporalUnit
>
Duration.
getUnits
()
Gets the set of units supported by this duration.
List
<
TemporalUnit
>
Period.
getUnits
()
Gets the set of units supported by this period.
Uses of
List
in
java.time.chrono
Methods in
java.time.chrono
that return
List
Modifier and Type
Method
Description
List
<
Era
>
Chronology.
eras
()
Gets the list of eras for the chronology.
List
<
Era
>
HijrahChronology.
eras
()
List
<
Era
>
IsoChronology.
eras
()
List
<
Era
>
JapaneseChronology.
eras
()
List
<
Era
>
MinguoChronology.
eras
()
List
<
Era
>
ThaiBuddhistChronology.
eras
()
List
<
TemporalUnit
>
ChronoPeriod.
getUnits
()
Gets the set of units supported by this period.
Uses of
List
in
java.time.temporal
Methods in
java.time.temporal
that return
List
Modifier and Type
Method
Description
List
<
TemporalUnit
>
TemporalAmount.
getUnits
()
Returns the list of units uniquely defining the value of this TemporalAmount.
Uses of
List
in
java.time.zone
Methods in
java.time.zone
that return
List
Modifier and Type
Method
Description
List
<
ZoneOffsetTransitionRule
>
ZoneRules.
getTransitionRules
()
Gets the list of transition rules for years beyond those defined in the transition list.
List
<
ZoneOffsetTransition
>
ZoneRules.
getTransitions
()
Gets the complete list of fully defined transitions.
List
<
ZoneOffset
>
ZoneRules.
getValidOffsets
(
LocalDateTime
localDateTime)
Gets the offset applicable at the specified local date-time in these rules.
Methods in
java.time.zone
with parameters of type
List
Modifier and Type
Method
Description
static
ZoneRules
ZoneRules.
of
(
ZoneOffset
baseStandardOffset,
ZoneOffset
baseWallOffset,
List
<
ZoneOffsetTransition
>Â standardOffsetTransitionList,
List
<
ZoneOffsetTransition
>Â transitionList,
List
<
ZoneOffsetTransitionRule
>Â lastRules)
Obtains an instance of a ZoneRules.
Uses of
List
in
java.util
Classes in
java.util
that implement
List
Modifier and Type
Class
Description
class
AbstractList
<E>
This class provides a skeletal implementation of the
List
interface to minimize the effort required to implement this interface
 backed by a "random access" data store (such as an array).
class
AbstractSequentialList
<E>
This class provides a skeletal implementation of the
List
interface to minimize the effort required to implement this interface
 backed by a "sequential access" data store (such as a linked list).
class
ArrayList
<E>
Resizable-array implementation of the
List
interface.
class
LinkedList
<E>
Doubly-linked list implementation of the
List
and
Deque
interfaces.
class
Stack
<E>
The
Stack
class represents a last-in-first-out
 (LIFO) stack of objects.
class
Vector
<E>
The
Vector
class implements a growable array of
 objects.
Fields in
java.util
declared as
List
Modifier and Type
Field
Description
static final
List
Collections.
EMPTY_LIST
The empty list (immutable).
static final
List
<
String
>
ResourceBundle.Control.
FORMAT_CLASS
The class-only format
List
containing
"java.class"
.
static final
List
<
String
>
ResourceBundle.Control.
FORMAT_DEFAULT
The default format
List
, which contains the strings
"java.class"
and
"java.properties"
, in
 this order.
static final
List
<
String
>
ResourceBundle.Control.
FORMAT_PROPERTIES
The properties-only format
List
containing
"java.properties"
.
Methods in
java.util
that return
List
Modifier and Type
Method
Description
static <T>
List
<T>
Arrays.
asList
(T...Â a)
Returns a fixed-size list backed by the specified array.
static <E>
List
<E>
Collections.
checkedList
(
List
<E>Â list,
Class
<E>Â type)
Returns a dynamically typesafe view of the specified list.
static <E>
List
<E>
List.
copyOf
(
Collection
<? extends E>Â coll)
Returns an
unmodifiable List
containing the elements of
 the given Collection, in its iteration order.
static final <T>
List
<T>
Collections.
emptyList
()
Returns an empty list (immutable).
static
List
<
Locale
>
Locale.
filter
(
List
<
Locale.LanguageRange
>Â priorityList,
Collection
<
Locale
>Â locales)
Returns a list of matching
Locale
instances using the filtering
 mechanism defined in RFC 4647.
static
List
<
Locale
>
Locale.
filter
(
List
<
Locale.LanguageRange
>Â priorityList,
Collection
<
Locale
>Â locales,
Locale.FilteringMode
mode)
Returns a list of matching
Locale
instances using the filtering
 mechanism defined in RFC 4647.
static
List
<
String
>
Locale.
filterTags
(
List
<
Locale.LanguageRange
>Â priorityList,
Collection
<
String
>Â tags)
Returns a list of matching languages tags using the basic filtering
 mechanism defined in RFC 4647.
static
List
<
String
>
Locale.
filterTags
(
List
<
Locale.LanguageRange
>Â priorityList,
Collection
<
String
>Â tags,
Locale.FilteringMode
mode)
Returns a list of matching languages tags using the basic filtering
 mechanism defined in RFC 4647.
List
<
Locale
>
ResourceBundle.Control.
getCandidateLocales
(
String
baseName,
Locale
locale)
Returns a
List
of
Locale
s as candidate
 locales for
baseName
and
locale
.
List
<
String
>
ResourceBundle.Control.
getFormats
(
String
baseName)
Returns a
List
of
String
s containing
 formats to be used to load resource bundles for the given
baseName
.
static
List
<
Locale.LanguageRange
>
Locale.LanguageRange.
mapEquivalents
(
List
<
Locale.LanguageRange
>Â priorityList,
Map
<
String
,
List
<
String
>>Â map)
Generates a new customized Language Priority List using the given
priorityList
and
map
.
static <T>
List
<T>
Collections.
nCopies
(intÂ n,
 TÂ o)
Returns an immutable list consisting of
n
copies of the
 specified object.
static <E>
List
<E>
List.
of
()
Returns an unmodifiable list containing zero elements.
static <E>
List
<E>
List.
of
(EÂ e1)
Returns an unmodifiable list containing one element.
static <E>
List
<E>
List.
of
(E...Â elements)
Returns an unmodifiable list containing an arbitrary number of elements.
static <E>
List
<E>
List.
of
(EÂ e1,
 EÂ e2)
Returns an unmodifiable list containing two elements.
static <E>
List
<E>
List.
of
(EÂ e1,
 EÂ e2,
 EÂ e3)
Returns an unmodifiable list containing three elements.
static <E>
List
<E>
List.
of
(EÂ e1,
 EÂ e2,
 EÂ e3,
 EÂ e4)
Returns an unmodifiable list containing four elements.
static <E>
List
<E>
List.
of
(EÂ e1,
 EÂ e2,
 EÂ e3,
 EÂ e4,
 EÂ e5)
Returns an unmodifiable list containing five elements.
static <E>
List
<E>
List.
of
(EÂ e1,
 EÂ e2,
 EÂ e3,
 EÂ e4,
 EÂ e5,
 EÂ e6)
Returns an unmodifiable list containing six elements.
static <E>
List
<E>
List.
of
(EÂ e1,
 EÂ e2,
 EÂ e3,
 EÂ e4,
 EÂ e5,
 EÂ e6,
 EÂ e7)
Returns an unmodifiable list containing seven elements.
static <E>
List
<E>
List.
of
(EÂ e1,
 EÂ e2,
 EÂ e3,
 EÂ e4,
 EÂ e5,
 EÂ e6,
 EÂ e7,
 EÂ e8)
Returns an unmodifiable list containing eight elements.
static <E>
List
<E>
List.
of
(EÂ e1,
 EÂ e2,
 EÂ e3,
 EÂ e4,
 EÂ e5,
 EÂ e6,
 EÂ e7,
 EÂ e8,
 EÂ e9)
Returns an unmodifiable list containing nine elements.
static <E>
List
<E>
List.
of
(EÂ e1,
 EÂ e2,
 EÂ e3,
 EÂ e4,
 EÂ e5,
 EÂ e6,
 EÂ e7,
 EÂ e8,
 EÂ e9,
 EÂ e10)
Returns an unmodifiable list containing ten elements.
static
List
<
Locale.LanguageRange
>
Locale.LanguageRange.
parse
(
String
ranges)
Parses the given
ranges
to generate a Language Priority List.
static
List
<
Locale.LanguageRange
>
Locale.LanguageRange.
parse
(
String
ranges,
Map
<
String
,
List
<
String
>>Â map)
Parses the given
ranges
to generate a Language Priority
 List, and then customizes the list using the given
map
.
default
List
<
E
>
List.
reversed
()
Returns a reverse-ordered
view
of this collection.
static <T>
List
<T>
Collections.
singletonList
(TÂ o)
Returns an immutable list containing only the specified object.
List
<
E
>
AbstractList.
subList
(intÂ fromIndex,
 intÂ toIndex)
Returns a view of the portion of this list between the specified
fromIndex
, inclusive, and
toIndex
, exclusive.
List
<
E
>
ArrayList.
subList
(intÂ fromIndex,
 intÂ toIndex)
Returns a view of the portion of this list between the specified
fromIndex
, inclusive, and
toIndex
, exclusive.
List
<
E
>
List.
subList
(intÂ fromIndex,
 intÂ toIndex)
Returns a view of the portion of this list between the specified
fromIndex
, inclusive, and
toIndex
, exclusive.
List
<
E
>
Vector.
subList
(intÂ fromIndex,
 intÂ toIndex)
Returns a view of the portion of this List between fromIndex,
 inclusive, and toIndex, exclusive.
static <T>
List
<T>
Collections.
synchronizedList
(
List
<T>Â list)
Returns a synchronized (thread-safe) list backed by the specified
 list.
static <T>
List
<T>
Collections.
unmodifiableList
(
List
<? extends T>Â list)
Returns an
unmodifiable view
of the
 specified list.
Methods in
java.util
with parameters of type
List
Modifier and Type
Method
Description
static <T>Â int
Collections.
binarySearch
(
List
<? extends
Comparable
<? super T>>Â list,
 TÂ key)
Searches the specified list for the specified object using the binary
 search algorithm.
static <T>Â int
Collections.
binarySearch
(
List
<? extends T>Â list,
 TÂ key,
Comparator
<? super T>Â c)
Searches the specified list for the specified object using the binary
 search algorithm.
static <E>
List
<E>
Collections.
checkedList
(
List
<E>Â list,
Class
<E>Â type)
Returns a dynamically typesafe view of the specified list.
static <T>Â void
Collections.
copy
(
List
<? super T>Â dest,
List
<? extends T>Â src)
Copies all of the elements from one list into another.
static <T>Â void
Collections.
fill
(
List
<? super T>Â list,
 TÂ obj)
Replaces all of the elements of the specified list with the specified
 element.
static
List
<
Locale
>
Locale.
filter
(
List
<
Locale.LanguageRange
>Â priorityList,
Collection
<
Locale
>Â locales)
Returns a list of matching
Locale
instances using the filtering
 mechanism defined in RFC 4647.
static
List
<
Locale
>
Locale.
filter
(
List
<
Locale.LanguageRange
>Â priorityList,
Collection
<
Locale
>Â locales,
Locale.FilteringMode
mode)
Returns a list of matching
Locale
instances using the filtering
 mechanism defined in RFC 4647.
static
List
<
String
>
Locale.
filterTags
(
List
<
Locale.LanguageRange
>Â priorityList,
Collection
<
String
>Â tags)
Returns a list of matching languages tags using the basic filtering
 mechanism defined in RFC 4647.
static
List
<
String
>
Locale.
filterTags
(
List
<
Locale.LanguageRange
>Â priorityList,
Collection
<
String
>Â tags,
Locale.FilteringMode
mode)
Returns a list of matching languages tags using the basic filtering
 mechanism defined in RFC 4647.
static final
ResourceBundle.Control
ResourceBundle.Control.
getControl
(
List
<
String
>Â formats)
Returns a
ResourceBundle.Control
in which the
getFormats
method returns the specified
formats
.
static final
ResourceBundle.Control
ResourceBundle.Control.
getNoFallbackControl
(
List
<
String
>Â formats)
Returns a
ResourceBundle.Control
in which the
getFormats
method returns the specified
formats
and the
getFallbackLocale
method returns
null
.
static int
Collections.
indexOfSubList
(
List
<?>Â source,
List
<?>Â target)
Returns the starting position of the first occurrence of the specified
 target list within the specified source list, or -1 if there is no
 such occurrence.
static int
Collections.
lastIndexOfSubList
(
List
<?>Â source,
List
<?>Â target)
Returns the starting position of the last occurrence of the specified
 target list within the specified source list, or -1 if there is no such
 occurrence.
MethodHandle
FormatProcessor.
linkage
(
List
<
String
>Â fragments,
MethodType
type)
Constructs a
MethodHandle
that when supplied with the values from
 a
StringTemplate
PREVIEW
will produce a result equivalent to that provided by
FormatProcessor.process(StringTemplate)
PREVIEW
.
static
Locale
Locale.
lookup
(
List
<
Locale.LanguageRange
>Â priorityList,
Collection
<
Locale
>Â locales)
Returns a
Locale
instance for the best-matching language
 tag using the lookup mechanism defined in RFC 4647.
static
String
Locale.
lookupTag
(
List
<
Locale.LanguageRange
>Â priorityList,
Collection
<
String
>Â tags)
Returns the best-matching language tag using the lookup mechanism
 defined in RFC 4647.
static
List
<
Locale.LanguageRange
>
Locale.LanguageRange.
mapEquivalents
(
List
<
Locale.LanguageRange
>Â priorityList,
Map
<
String
,
List
<
String
>>Â map)
Generates a new customized Language Priority List using the given
priorityList
and
map
.
static <T>Â boolean
Collections.
replaceAll
(
List
<T>Â list,
 TÂ oldVal,
 TÂ newVal)
Replaces all occurrences of one specified value in a list with another.
static void
Collections.
reverse
(
List
<?>Â list)
Reverses the order of the elements in the specified list.
static void
Collections.
rotate
(
List
<?>Â list,
 intÂ distance)
Rotates the elements in the specified list by the specified distance.
static void
Collections.
shuffle
(
List
<?>Â list)
Randomly permutes the specified list using a default source of
 randomness.
static void
Collections.
shuffle
(
List
<?>Â list,
Random
rnd)
Randomly permute the specified list using the specified source of
 randomness.
static void
Collections.
shuffle
(
List
<?>Â list,
RandomGenerator
rnd)
Randomly permute the specified list using the specified source of
 randomness.
static <T extends
Comparable
<? super T>>
void
Collections.
sort
(
List
<T>Â list)
Sorts the specified list into ascending order, according to the
natural ordering
of its elements.
static <T>Â void
Collections.
sort
(
List
<T>Â list,
Comparator
<? super T>Â c)
Sorts the specified list according to the order induced by the
 specified comparator.
static void
Collections.
swap
(
List
<?>Â list,
 intÂ i,
 intÂ j)
Swaps the elements at the specified positions in the specified list.
static <T>
List
<T>
Collections.
synchronizedList
(
List
<T>Â list)
Returns a synchronized (thread-safe) list backed by the specified
 list.
static <T>
List
<T>
Collections.
unmodifiableList
(
List
<? extends T>Â list)
Returns an
unmodifiable view
of the
 specified list.
Method parameters in
java.util
with type arguments of type
List
Modifier and Type
Method
Description
static
List
<
Locale.LanguageRange
>
Locale.LanguageRange.
mapEquivalents
(
List
<
Locale.LanguageRange
>Â priorityList,
Map
<
String
,
List
<
String
>>Â map)
Generates a new customized Language Priority List using the given
priorityList
and
map
.
static
List
<
Locale.LanguageRange
>
Locale.LanguageRange.
parse
(
String
ranges,
Map
<
String
,
List
<
String
>>Â map)
Parses the given
ranges
to generate a Language Priority
 List, and then customizes the list using the given
map
.
Uses of
List
in
java.util.concurrent
Classes in
java.util.concurrent
that implement
List
Modifier and Type
Class
Description
class
CopyOnWriteArrayList
<E>
A thread-safe variant of
ArrayList
in which all mutative
 operations (
add
,
set
, and so on) are implemented by
 making a fresh copy of the underlying array.
Methods in
java.util.concurrent
that return
List
Modifier and Type
Method
Description
List
<
Flow.Subscriber
<? super
T
>>
SubmissionPublisher.
getSubscribers
()
Returns a list of current subscribers for monitoring and
 tracking purposes, not for invoking
Flow.Subscriber
methods on the subscribers.
<T>
List
<
Future
<T>>
AbstractExecutorService.
invokeAll
(
Collection
<? extends
Callable
<T>>Â tasks)
<T>
List
<
Future
<T>>
AbstractExecutorService.
invokeAll
(
Collection
<? extends
Callable
<T>>Â tasks,
 longÂ timeout,
TimeUnit
unit)
<T>
List
<
Future
<T>>
ExecutorService.
invokeAll
(
Collection
<? extends
Callable
<T>>Â tasks)
Executes the given tasks, returning a list of Futures holding
 their status and results when all complete.
<T>
List
<
Future
<T>>
ExecutorService.
invokeAll
(
Collection
<? extends
Callable
<T>>Â tasks,
 longÂ timeout,
TimeUnit
unit)
Executes the given tasks, returning a list of Futures holding
 their status and results
 when all complete or the timeout expires, whichever happens first.
<T>
List
<
Future
<T>>
ForkJoinPool.
invokeAll
(
Collection
<? extends
Callable
<T>>Â tasks)
List
<
E
>
CopyOnWriteArrayList.
reversed
()
Returns a reverse-ordered
view
of this collection.
List
<
Runnable
>
ExecutorService.
shutdownNow
()
Attempts to stop all actively executing tasks, halts the
 processing of waiting tasks, and returns a list of the tasks
 that were awaiting execution.
List
<
Runnable
>
ForkJoinPool.
shutdownNow
()
Possibly attempts to cancel and/or stop all tasks, and reject
 all subsequently submitted tasks.
List
<
Runnable
>
ScheduledThreadPoolExecutor.
shutdownNow
()
Attempts to stop all actively executing tasks, halts the
 processing of waiting tasks, and returns a list of the tasks
 that were awaiting execution.
List
<
Runnable
>
ThreadPoolExecutor.
shutdownNow
()
Attempts to stop all actively executing tasks, halts the
 processing of waiting tasks, and returns a list of the tasks
 that were awaiting execution.
List
<
E
>
CopyOnWriteArrayList.
subList
(intÂ fromIndex,
 intÂ toIndex)
Returns a view of the portion of this list between
fromIndex
, inclusive, and
toIndex
, exclusive.
Uses of
List
in
java.util.logging
Methods in
java.util.logging
that return
List
Modifier and Type
Method
Description
List
<
String
>
LoggingMXBean.
getLoggerNames
()
Deprecated.
Returns the list of currently registered logger names.
Uses of
List
in
java.util.stream
Methods in
java.util.stream
that return
List
Modifier and Type
Method
Description
default
List
<
T
>
Stream.
toList
()
Accumulates the elements of this stream into a
List
.
Methods in
java.util.stream
that return types with arguments of type
List
Modifier and Type
Method
Description
static <T,
K>
Collector
<T,
?,
Map
<K,
List
<T>>>
Collectors.
groupingBy
(
Function
<? super T,
? extends K>Â classifier)
Returns a
Collector
implementing a "group by" operation on
 input elements of type
T
, grouping elements according to a
 classification function, and returning the results in a
Map
.
static <T,
K>
Collector
<T,
?,
ConcurrentMap
<K,
List
<T>>>
Collectors.
groupingByConcurrent
(
Function
<? super T,
? extends K>Â classifier)
Returns a concurrent
Collector
implementing a "group by"
 operation on input elements of type
T
, grouping elements
 according to a classification function.
static <T>
Collector
<T,
?,
Map
<
Boolean
,
List
<T>>>
Collectors.
partitioningBy
(
Predicate
<? super T>Â predicate)
Returns a
Collector
which partitions the input elements according
 to a
Predicate
, and organizes them into a
Map<Boolean, List<T>>
.
static <T>
Collector
<T,
?,
List
<T>>
Collectors.
toList
()
Returns a
Collector
that accumulates the input elements into a
 new
List
.
static <T>
Collector
<T,
?,
List
<T>>
Collectors.
toUnmodifiableList
()
Returns a
Collector
that accumulates the input elements into an
unmodifiable List
in encounter
 order.
Uses of
List
in
javax.imageio
Fields in
javax.imageio
declared as
List
Modifier and Type
Field
Description
protected
List
<
IIOReadProgressListener
>
ImageReader.
progressListeners
A
List
of currently registered
IIOReadProgressListener
s, initialized by default
 to
null
, which is synonymous with an empty
List
.
protected
List
<
IIOWriteProgressListener
>
ImageWriter.
progressListeners
A
List
of currently registered
IIOWriteProgressListener
s, initialized by default
null
, which is synonymous with an empty
List
.
protected
List
<? extends
BufferedImage
>
IIOImage.
thumbnails
A
List
of
BufferedImage
thumbnails,
 or
null
.
protected
List
<
IIOReadUpdateListener
>
ImageReader.
updateListeners
A
List
of currently registered
IIOReadUpdateListener
s, initialized by default to
null
, which is synonymous with an empty
List
.
protected
List
<
IIOReadWarningListener
>
ImageReader.
warningListeners
A
List
of currently registered
IIOReadWarningListener
s, initialized by default to
null
, which is synonymous with an empty
List
.
protected
List
<
IIOWriteWarningListener
>
ImageWriter.
warningListeners
A
List
of currently registered
IIOWriteWarningListener
s, initialized by default to
null
, which is synonymous with an empty
List
.
protected
List
<
Locale
>
ImageReader.
warningLocales
A
List
of the
Locale
s associated with
 each currently registered
IIOReadWarningListener
,
 initialized by default to
null
, which is
 synonymous with an empty
List
.
protected
List
<
Locale
>
ImageWriter.
warningLocales
A
List
of
Locale
s, one for each
 element of
warningListeners
, initialized by default
null
, which is synonymous with an empty
List
.
Methods in
javax.imageio
that return
List
Modifier and Type
Method
Description
List
<? extends
BufferedImage
>
IIOImage.
getThumbnails
()
Returns the current
List
of thumbnail
BufferedImage
s, or
null
if none is
 set.
Methods in
javax.imageio
with parameters of type
List
Modifier and Type
Method
Description
void
ImageWriter.
prepareInsertEmpty
(intÂ imageIndex,
ImageTypeSpecifier
imageType,
 intÂ width,
 intÂ height,
IIOMetadata
imageMetadata,
List
<? extends
BufferedImage
>Â thumbnails,
ImageWriteParam
param)
Begins the insertion of a new image with undefined pixel values
 into an existing image stream.
void
ImageWriter.
prepareWriteEmpty
(
IIOMetadata
streamMetadata,
ImageTypeSpecifier
imageType,
 intÂ width,
 intÂ height,
IIOMetadata
imageMetadata,
List
<? extends
BufferedImage
>Â thumbnails,
ImageWriteParam
param)
Begins the writing of a complete image stream, consisting of a
 single image with undefined pixel values and associated
 metadata and thumbnails, to the output.
void
IIOImage.
setThumbnails
(
List
<? extends
BufferedImage
>Â thumbnails)
Sets the list of thumbnails to a new
List
of
BufferedImage
s, or to
null
.
Constructors in
javax.imageio
with parameters of type
List
Modifier
Constructor
Description
IIOImage
(
Raster
raster,
List
<? extends
BufferedImage
>Â thumbnails,
IIOMetadata
metadata)
Constructs an
IIOImage
containing a
Raster
, and thumbnails and metadata
 associated with it.
IIOImage
(
RenderedImage
image,
List
<? extends
BufferedImage
>Â thumbnails,
IIOMetadata
metadata)
Constructs an
IIOImage
containing a
RenderedImage
, and thumbnails and metadata
 associated with it.
Uses of
List
in
javax.imageio.metadata
Methods in
javax.imageio.metadata
with parameters of type
List
Modifier and Type
Method
Description
protected void
IIOMetadataFormatImpl.
addAttribute
(
String
elementName,
String
attrName,
 intÂ dataType,
 booleanÂ required,
String
defaultValue,
List
<
String
>Â enumeratedValues)
Adds a new attribute to a previously defined element that will
 be defined by a set of enumerated values.
protected <T>Â void
IIOMetadataFormatImpl.
addObjectValue
(
String
elementName,
Class
<T>Â classType,
 booleanÂ required,
 TÂ defaultValue,
List
<? extends T>Â enumeratedValues)
Allows an
Object
reference of a given class type
 to be stored in nodes implementing the named element.
Uses of
List
in
javax.imageio.plugins.tiff
Methods in
javax.imageio.plugins.tiff
that return
List
Modifier and Type
Method
Description
List
<
TIFFTagSet
>
TIFFImageReadParam.
getAllowedTagSets
()
Returns a
List
containing the allowed
TIFFTagSet
objects.
Constructors in
javax.imageio.plugins.tiff
with parameters of type
List
Modifier
Constructor
Description
TIFFTagSet
(
List
<
TIFFTag
>Â tags)
Constructs a
TIFFTagSet
, given a
List
of
TIFFTag
objects.
Uses of
List
in
javax.lang.model
Methods in
javax.lang.model
that return
List
Modifier and Type
Method
Description
List
<? extends
AnnotationMirror
>
AnnotatedConstruct.
getAnnotationMirrors
()
Returns the annotations that are
directly present
on
 this construct.
Uses of
List
in
javax.lang.model.element
Methods in
javax.lang.model.element
that return
List
Modifier and Type
Method
Description
List
<? extends
AnnotationMirror
>
Element.
getAnnotationMirrors
()
Returns the annotations that are
directly present
on
 this construct.
List
<? extends
TypeMirror
>
TypeParameterElement.
getBounds
()
Returns the bounds of this type parameter.
List
<? extends
ModuleElement.Directive
>
ModuleElement.
getDirectives
()
Returns the directives contained in the declaration of this module.
List
<? extends
Element
>
Element.
getEnclosedElements
()
Returns the elements that are, loosely speaking, directly
 enclosed by this element.
List
<? extends
Element
>
ModuleElement.
getEnclosedElements
()
Returns the packages within this module.
List
<? extends
Element
>
PackageElement.
getEnclosedElements
()
Returns the
top-level
classes and interfaces within this package.
List
<? extends
Element
>
TypeElement.
getEnclosedElements
()
Returns the fields, methods, constructors, record components,
 and member classes and interfaces that are directly declared in
 this class or interface.
List
<? extends
TypeElement
>
ModuleElement.ProvidesDirective.
getImplementations
()
Returns the implementations of the service being provided.
List
<? extends
TypeMirror
>
TypeElement.
getInterfaces
()
Returns the interface types directly implemented by this class
 or extended by this interface.
List
<? extends
VariableElement
>
ExecutableElement.
getParameters
()
Returns the formal parameters of this executable.
default
List
<? extends
TypeMirror
>
TypeElement.
getPermittedSubclasses
()
Returns the permitted classes of this class or interface
 element in declaration order.
default
List
<? extends
RecordComponentElement
>
TypeElement.
getRecordComponents
()
Returns the record components of this class or interface
 element in declaration order.
List
<? extends
ModuleElement
>
ModuleElement.ExportsDirective.
getTargetModules
()
Returns the specific modules to which the package is being exported,
 or
null
, if the package is exported to all modules which
 have readability to this module.
List
<? extends
ModuleElement
>
ModuleElement.OpensDirective.
getTargetModules
()
Returns the specific modules to which the package is being open
 or
null
, if the package is open all modules which
 have readability to this module.
List
<? extends
TypeMirror
>
ExecutableElement.
getThrownTypes
()
Returns the exceptions and other throwables listed in this
 method or constructor's
throws
clause in declaration
 order.
List
<? extends
TypeParameterElement
>
ExecutableElement.
getTypeParameters
()
Returns the formal type parameters of this executable
 in declaration order.
List
<? extends
TypeParameterElement
>
Parameterizable.
getTypeParameters
()
Returns the formal type parameters of an element in
 declaration order.
List
<? extends
TypeParameterElement
>
TypeElement.
getTypeParameters
()
Returns the formal type parameters of this class or interface element
 in declaration order.
Methods in
javax.lang.model.element
with parameters of type
List
Modifier and Type
Method
Description
R
AnnotationValueVisitor.
visitArray
(
List
<? extends
AnnotationValue
>Â vals,
P
p)
Visits an array value in an annotation.
Uses of
List
in
javax.lang.model.type
Methods in
javax.lang.model.type
that return
List
Modifier and Type
Method
Description
List
<? extends
TypeMirror
>
UnionType.
getAlternatives
()
Returns the alternatives comprising this union type.
List
<? extends
AnnotationMirror
>
TypeMirror.
getAnnotationMirrors
()
Returns the annotations that are
directly present
on
 this construct.
List
<? extends
TypeMirror
>
IntersectionType.
getBounds
()
Returns the bounds comprising this intersection type.
List
<? extends
TypeMirror
>
ExecutableType.
getParameterTypes
()
Returns the types of this executable's formal parameters.
List
<? extends
TypeMirror
>
ExecutableType.
getThrownTypes
()
Returns the exceptions and other throwables listed in this
 executable's
throws
clause.
List
<? extends
TypeMirror
>
DeclaredType.
getTypeArguments
()
Returns the actual type arguments of this type.
List
<? extends
TypeMirror
>
MirroredTypesException.
getTypeMirrors
()
Returns the type mirrors corresponding to the types being accessed.
List
<? extends
TypeVariable
>
ExecutableType.
getTypeVariables
()
Returns the type variables declared by the formal type parameters
 of this executable.
Constructors in
javax.lang.model.type
with parameters of type
List
Modifier
Constructor
Description
MirroredTypesException
(
List
<? extends
TypeMirror
>Â types)
Constructs a new MirroredTypesException for the specified types.
Uses of
List
in
javax.lang.model.util
Methods in
javax.lang.model.util
that return
List
Modifier and Type
Method
Description
static
List
<
ExecutableElement
>
ElementFilter.
constructorsIn
(
Iterable
<? extends
Element
>Â elements)
Returns a list of constructors in
elements
.
List
<? extends
TypeMirror
>
Types.
directSupertypes
(
TypeMirror
t)
Returns the direct supertypes of a type.
static
List
<
ModuleElement.ExportsDirective
>
ElementFilter.
exportsIn
(
Iterable
<? extends
ModuleElement.Directive
>Â directives)
Returns a list of
exports
directives in
directives
.
static
List
<
VariableElement
>
ElementFilter.
fieldsIn
(
Iterable
<? extends
Element
>Â elements)
Returns a list of fields in
elements
.
List
<? extends
AnnotationMirror
>
Elements.
getAllAnnotationMirrors
(
Element
e)
Returns all annotations
present
on an element, whether
 directly present or present via inheritance.
List
<? extends
Element
>
Elements.
getAllMembers
(
TypeElement
type)
Returns all members of a type element, whether inherited or
 declared directly.
static
List
<
ExecutableElement
>
ElementFilter.
methodsIn
(
Iterable
<? extends
Element
>Â elements)
Returns a list of methods in
elements
.
static
List
<
ModuleElement
>
ElementFilter.
modulesIn
(
Iterable
<? extends
Element
>Â elements)
Returns a list of modules in
elements
.
static
List
<
ModuleElement.OpensDirective
>
ElementFilter.
opensIn
(
Iterable
<? extends
ModuleElement.Directive
>Â directives)
Returns a list of
opens
directives in
directives
.
static
List
<
PackageElement
>
ElementFilter.
packagesIn
(
Iterable
<? extends
Element
>Â elements)
Returns a list of packages in
elements
.
static
List
<
ModuleElement.ProvidesDirective
>
ElementFilter.
providesIn
(
Iterable
<? extends
ModuleElement.Directive
>Â directives)
Returns a list of
provides
directives in
directives
.
static
List
<
RecordComponentElement
>
ElementFilter.
recordComponentsIn
(
Iterable
<? extends
Element
>Â elements)
Returns a list of record components in
elements
.
static
List
<
ModuleElement.RequiresDirective
>
ElementFilter.
requiresIn
(
Iterable
<? extends
ModuleElement.Directive
>Â directives)
Returns a list of
requires
directives in
directives
.
static
List
<
TypeElement
>
ElementFilter.
typesIn
(
Iterable
<? extends
Element
>Â elements)
Returns a list of classes and interfaces in
elements
.
static
List
<
ModuleElement.UsesDirective
>
ElementFilter.
usesIn
(
Iterable
<? extends
ModuleElement.Directive
>Â directives)
Returns a list of
uses
directives in
directives
.
Methods in
javax.lang.model.util
with parameters of type
List
Modifier and Type
Method
Description
R
SimpleAnnotationValueVisitor6.
visitArray
(
List
<? extends
AnnotationValue
>Â vals,
P
p)
Visits an array value in an annotation.
Uses of
List
in
javax.management
Classes in
javax.management
that implement
List
Modifier and Type
Class
Description
class
AttributeList
Represents a list of values for attributes of an MBean.
Methods in
javax.management
that return
List
Modifier and Type
Method
Description
List
<
Attribute
>
AttributeList.
asList
()
Return a view of this list as a
List<Attribute>
.
Constructors in
javax.management
with parameters of type
List
Modifier
Constructor
Description
AttributeList
(
List
<
Attribute
>Â list)
Constructs an
AttributeList
containing the elements of the
List
specified, in the order in which they are returned by
 the
List
's iterator.
Uses of
List
in
javax.management.loading
Methods in
javax.management.loading
that return
List
Modifier and Type
Method
Description
List
<
String
>
MLetContent.
getParameterTypes
()
Deprecated, for removal: This API element is subject to removal in a future version.
Gets the list of values of the
TYPE
attribute in
 each nested <PARAM> tag within the
MLET
tag.
List
<
String
>
MLetContent.
getParameterValues
()
Deprecated, for removal: This API element is subject to removal in a future version.
Gets the list of values of the
VALUE
attribute in
 each nested <PARAM> tag within the
MLET
tag.
Constructors in
javax.management.loading
with parameters of type
List
Modifier
Constructor
Description
MLetContent
(
URL
url,
Map
<
String
,
String
>Â attributes,
List
<
String
>Â types,
List
<
String
>Â values)
Deprecated, for removal: This API element is subject to removal in a future version.
Creates an
MLet
instance initialized with attributes read
 from an
MLET
tag in an MLet text file.
Uses of
List
in
javax.management.openmbean
Fields in
javax.management.openmbean
declared as
List
Modifier and Type
Field
Description
static final
List
<
String
>
OpenType.
ALLOWED_CLASSNAMES_LIST
List of the fully qualified names of the Java classes allowed for open
 data values.
Methods in
javax.management.openmbean
that return
List
Modifier and Type
Method
Description
List
<
String
>
TabularType.
getIndexNames
()
Returns, in the same order as was given to this instance's
 constructor, an unmodifiable List of the names of the items the
 values of which are used to uniquely index each row element of
 tabular data values described by this
TabularType
instance.
Uses of
List
in
javax.management.relation
Classes in
javax.management.relation
that implement
List
Modifier and Type
Class
Description
class
RoleList
A RoleList represents a list of roles (Role objects).
class
RoleUnresolvedList
A RoleUnresolvedList represents a list of RoleUnresolved objects,
 representing roles not retrieved from a relation due to a problem
 encountered when trying to access (read or write) the roles.
Methods in
javax.management.relation
that return
List
Modifier and Type
Method
Description
List
<
Role
>
RoleList.
asList
()
Return a view of this list as a
List<Role>
.
List
<
RoleUnresolved
>
RoleUnresolvedList.
asList
()
Return a view of this list as a
List<RoleUnresolved>
.
List
<
String
>
RelationService.
findRelationsOfType
(
String
relationTypeName)
Returns the relation ids for relations of the given type.
List
<
String
>
RelationServiceMBean.
findRelationsOfType
(
String
relationTypeName)
Returns the relation ids for relations of the given type.
List
<
String
>
RelationService.
getAllRelationIds
()
Returns all the relation ids for all the relations handled by the
 Relation Service.
List
<
String
>
RelationServiceMBean.
getAllRelationIds
()
Returns all the relation ids for all the relations handled by the
 Relation Service.
List
<
String
>
RelationService.
getAllRelationTypeNames
()
Retrieves names of all known relation types.
List
<
String
>
RelationServiceMBean.
getAllRelationTypeNames
()
Retrieves names of all known relation types.
List
<
ObjectName
>
RelationNotification.
getMBeansToUnregister
()
Returns the list of ObjectNames of MBeans expected to be unregistered
 due to a relation removal (only for relation removal).
List
<
ObjectName
>
RelationNotification.
getNewRoleValue
()
Returns new value of updated role (only for role update).
List
<
ObjectName
>
RelationNotification.
getOldRoleValue
()
Returns old value of updated role (only for role update).
List
<
ObjectName
>
Relation.
getRole
(
String
roleName)
Retrieves role value for given role name.
List
<
ObjectName
>
RelationService.
getRole
(
String
relationId,
String
roleName)
Retrieves role value for given role name in given relation.
List
<
ObjectName
>
RelationServiceMBean.
getRole
(
String
relationId,
String
roleName)
Retrieves role value for given role name in given relation.
List
<
ObjectName
>
RelationSupport.
getRole
(
String
roleName)
Retrieves role value for given role name.
List
<
RoleInfo
>
RelationService.
getRoleInfos
(
String
relationTypeName)
Retrieves list of role infos (RoleInfo objects) of a given relation
 type.
List
<
RoleInfo
>
RelationServiceMBean.
getRoleInfos
(
String
relationTypeName)
Retrieves list of role infos (RoleInfo objects) of a given relation
 type.
List
<
RoleInfo
>
RelationType.
getRoleInfos
()
Returns the list of role definitions (ArrayList of RoleInfo objects).
List
<
RoleInfo
>
RelationTypeSupport.
getRoleInfos
()
Returns the list of role definitions (ArrayList of RoleInfo objects).
List
<
ObjectName
>
Role.
getRoleValue
()
Retrieves role value.
List
<
ObjectName
>
RoleUnresolved.
getRoleValue
()
Retrieves role value.
Methods in
javax.management.relation
that return types with arguments of type
List
Modifier and Type
Method
Description
Map
<
ObjectName
,
List
<
String
>>
RelationService.
findAssociatedMBeans
(
ObjectName
mbeanName,
String
relationTypeName,
String
roleName)
Retrieves the MBeans associated to given one in a relation.
Map
<
ObjectName
,
List
<
String
>>
RelationServiceMBean.
findAssociatedMBeans
(
ObjectName
mbeanName,
String
relationTypeName,
String
roleName)
Retrieves the MBeans associated to given one in a relation.
Map
<
String
,
List
<
String
>>
RelationService.
findReferencingRelations
(
ObjectName
mbeanName,
String
relationTypeName,
String
roleName)
Retrieves the relations where a given MBean is referenced.
Map
<
String
,
List
<
String
>>
RelationServiceMBean.
findReferencingRelations
(
ObjectName
mbeanName,
String
relationTypeName,
String
roleName)
Retrieves the relations where a given MBean is referenced.
Map
<
ObjectName
,
List
<
String
>>
Relation.
getReferencedMBeans
()
Retrieves MBeans referenced in the various roles of the relation.
Map
<
ObjectName
,
List
<
String
>>
RelationService.
getReferencedMBeans
(
String
relationId)
Retrieves MBeans referenced in the various roles of the relation.
Map
<
ObjectName
,
List
<
String
>>
RelationServiceMBean.
getReferencedMBeans
(
String
relationId)
Retrieves MBeans referenced in the various roles of the relation.
Map
<
ObjectName
,
List
<
String
>>
RelationSupport.
getReferencedMBeans
()
Retrieves MBeans referenced in the various roles of the relation.
Methods in
javax.management.relation
with parameters of type
List
Modifier and Type
Method
Description
static
String
Role.
roleValueToString
(
List
<
ObjectName
>Â roleValue)
Returns a string for the given role value.
void
RelationService.
sendRelationRemovalNotification
(
String
relationId,
List
<
ObjectName
>Â unregMBeanList)
Sends a notification (RelationNotification) for a relation removal.
void
RelationServiceMBean.
sendRelationRemovalNotification
(
String
relationId,
List
<
ObjectName
>Â unregMBeanList)
Sends a notification (RelationNotification) for a relation removal.
void
RelationService.
sendRoleUpdateNotification
(
String
relationId,
Role
newRole,
List
<
ObjectName
>Â oldValue)
Sends a notification (RelationNotification) for a role update in the
 given relation.
void
RelationServiceMBean.
sendRoleUpdateNotification
(
String
relationId,
Role
newRole,
List
<
ObjectName
>Â oldRoleValue)
Sends a notification (RelationNotification) for a role update in the
 given relation.
void
Role.
setRoleValue
(
List
<
ObjectName
>Â roleValue)
Sets role value.
void
RoleUnresolved.
setRoleValue
(
List
<
ObjectName
>Â value)
Sets role value.
void
RelationService.
updateRoleMap
(
String
relationId,
Role
newRole,
List
<
ObjectName
>Â oldValue)
Handles update of the Relation Service role map for the update of given
 role in given relation.
void
RelationServiceMBean.
updateRoleMap
(
String
relationId,
Role
newRole,
List
<
ObjectName
>Â oldRoleValue)
Handles update of the Relation Service role map for the update of given
 role in given relation.
Constructors in
javax.management.relation
with parameters of type
List
Modifier
Constructor
Description
RelationNotification
(
String
notifType,
Object
sourceObj,
 longÂ sequence,
 longÂ timeStamp,
String
message,
String
id,
String
typeName,
ObjectName
objectName,
String
name,
List
<
ObjectName
>Â newValue,
List
<
ObjectName
>Â oldValue)
Creates a notification for a role update in a relation.
RelationNotification
(
String
notifType,
Object
sourceObj,
 longÂ sequence,
 longÂ timeStamp,
String
message,
String
id,
String
typeName,
ObjectName
objectName,
List
<
ObjectName
>Â unregMBeanList)
Creates a notification for either a relation creation (RelationSupport
 object created internally in the Relation Service, or an MBean added as a
 relation) or for a relation removal from the Relation Service.
Role
(
String
roleName,
List
<
ObjectName
>Â roleValue)
Make a new Role object.
RoleList
(
List
<
Role
>Â list)
Constructs a
RoleList
containing the elements of the
List
specified, in the order in which they are returned by
 the
List
's iterator.
RoleUnresolved
(
String
name,
List
<
ObjectName
>Â value,
 intÂ pbType)
Constructor.
RoleUnresolvedList
(
List
<
RoleUnresolved
>Â list)
Constructs a
RoleUnresolvedList
containing the elements of the
List
specified, in the order in which they are returned by
 the
List
's iterator.
Uses of
List
in
javax.naming.ldap
Methods in
javax.naming.ldap
that return
List
Modifier and Type
Method
Description
List
<
Rdn
>
LdapName.
getRdns
()
Retrieves the list of relative distinguished names.
Methods in
javax.naming.ldap
with parameters of type
List
Modifier and Type
Method
Description
Name
LdapName.
addAll
(intÂ posn,
List
<
Rdn
>Â suffixRdns)
Adds the RDNs of a name -- in order -- at a specified position
 within this name.
Name
LdapName.
addAll
(
List
<
Rdn
>Â suffixRdns)
Adds the RDNs of a name -- in order -- to the end of this name.
boolean
LdapName.
endsWith
(
List
<
Rdn
>Â rdns)
Determines whether the specified RDN sequence forms a suffix of this
 LDAP name.
boolean
LdapName.
startsWith
(
List
<
Rdn
>Â rdns)
Determines whether the specified RDN sequence forms a prefix of this
 LDAP name.
Constructors in
javax.naming.ldap
with parameters of type
List
Modifier
Constructor
Description
LdapName
(
List
<
Rdn
>Â rdns)
Constructs an LDAP name given its parsed RDN components.
Uses of
List
in
javax.naming.ldap.spi
Methods in
javax.naming.ldap.spi
that return
List
Modifier and Type
Method
Description
List
<
String
>
LdapDnsProviderResult.
getEndpoints
()
Returns the possibly empty list of individual server endpoints resolved
 from the LDAP URL.
Constructors in
javax.naming.ldap.spi
with parameters of type
List
Modifier
Constructor
Description
LdapDnsProviderResult
(
String
domainName,
List
<
String
>Â endpoints)
Construct an LdapDnsProviderResult consisting of a resolved domain name
 and the LDAP server endpoints that serve the domain.
Uses of
List
in
javax.net.ssl
Methods in
javax.net.ssl
that return
List
Modifier and Type
Method
Description
List
<
KeyStore.Builder
>
KeyStoreBuilderParameters.
getParameters
()
Return the unmodifiable List of the
KeyStore.Builder
s
 encapsulated by this object.
List
<
SNIServerName
>
ExtendedSSLSession.
getRequestedServerNames
()
Obtains a
List
containing all
SNIServerName
s
 of the requested Server Name Indication (SNI) extension.
final
List
<
SNIServerName
>
SSLParameters.
getServerNames
()
Returns a
List
containing all
SNIServerName
s of the
 Server Name Indication (SNI) parameter, or null if none has been set.
List
<byte[]>
ExtendedSSLSession.
getStatusResponses
()
Returns a
List
containing DER-encoded OCSP responses
 (using the ASN.1 type OCSPResponse defined in RFC 6960) for
 the client to verify status of the server's certificate during
 handshaking.
Methods in
javax.net.ssl
that return types with arguments of type
List
Modifier and Type
Method
Description
BiFunction
<
SSLEngine
,
List
<
String
>,
String
>
SSLEngine.
getHandshakeApplicationProtocolSelector
()
Retrieves the callback function that selects an application protocol
 value during a SSL/TLS/DTLS handshake.
BiFunction
<
SSLSocket
,
List
<
String
>,
String
>
SSLSocket.
getHandshakeApplicationProtocolSelector
()
Retrieves the callback function that selects an application protocol
 value during a SSL/TLS/DTLS handshake.
Methods in
javax.net.ssl
with parameters of type
List
Modifier and Type
Method
Description
final void
SSLParameters.
setServerNames
(
List
<
SNIServerName
>Â serverNames)
Sets the desired
SNIServerName
s of the Server Name
 Indication (SNI) parameter.
Method parameters in
javax.net.ssl
with type arguments of type
List
Modifier and Type
Method
Description
void
SSLEngine.
setHandshakeApplicationProtocolSelector
(
BiFunction
<
SSLEngine
,
List
<
String
>,
String
>Â selector)
Registers a callback function that selects an application protocol
 value for a SSL/TLS/DTLS handshake.
void
SSLSocket.
setHandshakeApplicationProtocolSelector
(
BiFunction
<
SSLSocket
,
List
<
String
>,
String
>Â selector)
Registers a callback function that selects an application protocol
 value for a SSL/TLS/DTLS handshake.
Constructors in
javax.net.ssl
with parameters of type
List
Modifier
Constructor
Description
KeyStoreBuilderParameters
(
List
<
KeyStore.Builder
>Â parameters)
Construct new KeyStoreBuilderParameters from a List
 of
KeyStore.Builder
s.
Uses of
List
in
javax.script
Methods in
javax.script
that return
List
Modifier and Type
Method
Description
List
<
ScriptEngineFactory
>
ScriptEngineManager.
getEngineFactories
()
Returns a list whose elements are instances of all the
ScriptEngineFactory
classes
 found by the discovery mechanism.
List
<
String
>
ScriptEngineFactory.
getExtensions
()
Returns an immutable list of filename extensions, which generally identify scripts
 written in the language supported by this
ScriptEngine
.
List
<
String
>
ScriptEngineFactory.
getMimeTypes
()
Returns an immutable list of mimetypes, associated with scripts that
 can be executed by the engine.
List
<
String
>
ScriptEngineFactory.
getNames
()
Returns an immutable list of  short names for the
ScriptEngine
, which may be used to
 identify the
ScriptEngine
by the
ScriptEngineManager
.
List
<
Integer
>
ScriptContext.
getScopes
()
Returns immutable
List
of all the valid values for
 scope in the ScriptContext.
List
<
Integer
>
SimpleScriptContext.
getScopes
()
Returns immutable
List
of all the valid values for
 scope in the ScriptContext.
Uses of
List
in
javax.smartcardio
Methods in
javax.smartcardio
that return
List
Modifier and Type
Method
Description
List
<
CardTerminal
>
CardTerminals.
list
()
Returns an unmodifiable list of all available terminals.
abstract
List
<
CardTerminal
>
CardTerminals.
list
(
CardTerminals.State
state)
Returns an unmodifiable list of all terminals matching the specified
 state.
Uses of
List
in
javax.sound.midi
Methods in
javax.sound.midi
that return
List
Modifier and Type
Method
Description
List
<
Receiver
>
MidiDevice.
getReceivers
()
Returns all currently active, non-closed receivers connected with this
MidiDevice
.
List
<
Transmitter
>
MidiDevice.
getTransmitters
()
Returns all currently active, non-closed transmitters connected with this
MidiDevice
.
Uses of
List
in
javax.swing
Methods in
javax.swing
that return
List
Modifier and Type
Method
Description
List
<?>
SpinnerListModel.
getList
()
Returns the
List
that defines the sequence for this model.
List
<
E
>
JList.
getSelectedValuesList
()
Returns a list of all the selected items, in increasing order based
 on their indices in the list.
List
<? extends
RowSorter.SortKey
>
DefaultRowSorter.
getSortKeys
()
Returns the current sort keys.
abstract
List
<? extends
RowSorter.SortKey
>
RowSorter.
getSortKeys
()
Returns the current sort keys.
Methods in
javax.swing
with parameters of type
List
Modifier and Type
Method
Description
protected void
SwingWorker.
process
(
List
<
V
>Â chunks)
Receives data chunks from the
publish
method asynchronously on the
Event Dispatch Thread
.
void
SpinnerListModel.
setList
(
List
<?>Â list)
Changes the list that defines this sequence and resets the index
 of the models
value
to zero.
void
DefaultRowSorter.
setSortKeys
(
List
<? extends
RowSorter.SortKey
>Â sortKeys)
Sets the sort keys.
abstract void
RowSorter.
setSortKeys
(
List
<? extends
RowSorter.SortKey
>Â keys)
Sets the current sort keys.
Constructors in
javax.swing
with parameters of type
List
Modifier
Constructor
Description
SpinnerListModel
(
List
<?>Â values)
Constructs a
SpinnerModel
whose sequence of
 values is defined by the specified
List
.
Uses of
List
in
javax.tools
Methods in
javax.tools
that return
List
Modifier and Type
Method
Description
List
<
Diagnostic
<? extends
S
>>
DiagnosticCollector.
getDiagnostics
()
Returns a list view of diagnostics collected by this object.
Uses of
List
in
javax.xml.crypto.dsig
Methods in
javax.xml.crypto.dsig
that return
List
Modifier and Type
Method
Description
List
<
XMLStructure
>
SignatureProperty.
getContent
()
Returns an
unmodifiable
 list
of one or more
XMLStructure
s that are contained in
 this
SignatureProperty
.
List
<
XMLStructure
>
XMLObject.
getContent
()
Returns an
unmodifiable
 list
of
XMLStructure
s contained in this
XMLObject
,
 which represent elements from any namespace.
List
<
XMLObject
>
XMLSignature.
getObjects
()
Returns an
unmodifiable
 list
of
XMLObject
s contained in this
XMLSignature
.
List
<
SignatureProperty
>
SignatureProperties.
getProperties
()
Returns an
unmodifiable
 list
of one or more
SignatureProperty
s that are contained in
 this
SignatureProperties
.
List
<
Reference
>
Manifest.
getReferences
()
Returns an
unmodifiable
 list
of one or more
Reference
s that are contained in this
Manifest
.
List
<
Reference
>
SignedInfo.
getReferences
()
Returns an
unmodifiable list
of one or more
Reference
s.
List
<
Transform
>
Reference.
getTransforms
()
Returns an
unmodifiable
 list
of
Transform
s that are contained in this
Reference
.
Methods in
javax.xml.crypto.dsig
with parameters of type
List
Modifier and Type
Method
Description
abstract
Manifest
XMLSignatureFactory.
newManifest
(
List
<? extends
Reference
>Â references)
Creates a
Manifest
containing the specified
 list of
Reference
s.
abstract
Manifest
XMLSignatureFactory.
newManifest
(
List
<? extends
Reference
>Â references,
String
id)
Creates a
Manifest
containing the specified
 list of
Reference
s and optional id.
abstract
Reference
XMLSignatureFactory.
newReference
(
String
uri,
DigestMethod
dm,
List
<? extends
Transform
>Â transforms,
String
type,
String
id)
Creates a
Reference
with the specified parameters.
abstract
Reference
XMLSignatureFactory.
newReference
(
String
uri,
DigestMethod
dm,
List
<? extends
Transform
>Â transforms,
String
type,
String
id,
 byte[]Â digestValue)
Creates a
Reference
with the specified parameters and
 pre-calculated digest value.
abstract
Reference
XMLSignatureFactory.
newReference
(
String
uri,
DigestMethod
dm,
List
<? extends
Transform
>Â appliedTransforms,
Data
result,
List
<? extends
Transform
>Â transforms,
String
type,
String
id)
Creates a
Reference
with the specified parameters.
abstract
SignatureProperties
XMLSignatureFactory.
newSignatureProperties
(
List
<? extends
SignatureProperty
>Â properties,
String
id)
Creates a
SignatureProperties
containing the specified
 list of
SignatureProperty
s and optional id.
abstract
SignatureProperty
XMLSignatureFactory.
newSignatureProperty
(
List
<? extends
XMLStructure
>Â content,
String
target,
String
id)
Creates a
SignatureProperty
containing the specified
 list of
XMLStructure
s, target URI and optional id.
abstract
SignedInfo
XMLSignatureFactory.
newSignedInfo
(
CanonicalizationMethod
cm,
SignatureMethod
sm,
List
<? extends
Reference
>Â references)
Creates a
SignedInfo
with the specified canonicalization
 and signature methods, and list of one or more references.
abstract
SignedInfo
XMLSignatureFactory.
newSignedInfo
(
CanonicalizationMethod
cm,
SignatureMethod
sm,
List
<? extends
Reference
>Â references,
String
id)
Creates a
SignedInfo
with the specified parameters.
abstract
XMLObject
XMLSignatureFactory.
newXMLObject
(
List
<? extends
XMLStructure
>Â content,
String
id,
String
mimeType,
String
encoding)
Creates an
XMLObject
from the specified parameters.
abstract
XMLSignature
XMLSignatureFactory.
newXMLSignature
(
SignedInfo
si,
KeyInfo
ki,
List
<? extends
XMLObject
>Â objects,
String
id,
String
signatureValueId)
Creates an
XMLSignature
and initializes it with the
 specified parameters.
Uses of
List
in
javax.xml.crypto.dsig.keyinfo
Methods in
javax.xml.crypto.dsig.keyinfo
that return
List
Modifier and Type
Method
Description
List
<
XMLStructure
>
KeyInfo.
getContent
()
Returns an
unmodifiable
 list
containing the key information.
List
<?>
X509Data.
getContent
()
Returns an
unmodifiable
 list
of the content in this
X509Data
.
List
<
XMLStructure
>
PGPData.
getExternalElements
()
Returns an
unmodifiable list
of
XMLStructure
s representing elements from an external
 namespace.
List
<
Transform
>
RetrievalMethod.
getTransforms
()
Returns an
unmodifiable
 list
of
Transform
s of this
RetrievalMethod
.
Methods in
javax.xml.crypto.dsig.keyinfo
with parameters of type
List
Modifier and Type
Method
Description
abstract
KeyInfo
KeyInfoFactory.
newKeyInfo
(
List
<? extends
XMLStructure
>Â content)
Creates a
KeyInfo
containing the specified list of
 key information types.
abstract
KeyInfo
KeyInfoFactory.
newKeyInfo
(
List
<? extends
XMLStructure
>Â content,
String
id)
Creates a
KeyInfo
containing the specified list of key
 information types and optional id.
abstract
PGPData
KeyInfoFactory.
newPGPData
(byte[]Â keyId,
 byte[]Â keyPacket,
List
<? extends
XMLStructure
>Â other)
Creates a
PGPData
from the specified PGP public key
 identifier, and optional key material packet and list of external
 elements.
abstract
PGPData
KeyInfoFactory.
newPGPData
(byte[]Â keyPacket,
List
<? extends
XMLStructure
>Â other)
Creates a
PGPData
from the specified PGP key material
 packet and optional list of external elements.
abstract
RetrievalMethod
KeyInfoFactory.
newRetrievalMethod
(
String
uri,
String
type,
List
<? extends
Transform
>Â transforms)
Creates a
RetrievalMethod
from the specified parameters.
abstract
X509Data
KeyInfoFactory.
newX509Data
(
List
<?>Â content)
Creates a
X509Data
containing the specified list of
 X.509 content.
Uses of
List
in
javax.xml.crypto.dsig.spec
Methods in
javax.xml.crypto.dsig.spec
that return
List
Modifier and Type
Method
Description
List
<
String
>
ExcC14NParameterSpec.
getPrefixList
()
Returns the inclusive namespace prefix list.
List
<
XPathType
>
XPathFilter2ParameterSpec.
getXPathList
()
Returns a list of one or more
XPathType
objects.
Constructors in
javax.xml.crypto.dsig.spec
with parameters of type
List
Modifier
Constructor
Description
ExcC14NParameterSpec
(
List
<
String
>Â prefixList)
Creates a
ExcC14NParameterSpec
with the specified list
 of prefixes.
XPathFilter2ParameterSpec
(
List
<
XPathType
>Â xPathList)
Creates an
XPathFilter2ParameterSpec
.
Uses of
List
in
javax.xml.stream.events
Methods in
javax.xml.stream.events
that return
List
Modifier and Type
Method
Description
List
<
EntityDeclaration
>
DTD.
getEntities
()
Return a List containing the general entities, both external and
 internal, declared in the DTD.
List
<
NotationDeclaration
>
DTD.
getNotations
()
Return a List containing the notations declared in the DTD.
Uses of
List
in
javax.xml.xpath
Methods in
javax.xml.xpath
with parameters of type
List
Modifier and Type
Method
Description
Object
XPathFunction.
evaluate
(
List
<?>Â args)
Evaluate the function with the specified arguments.
Uses of
List
in
jdk.dynalink
Methods in
jdk.dynalink
that return
List
Modifier and Type
Method
Description
List
<
ServiceConfigurationError
>
DynamicLinkerFactory.
getAutoLoadingErrors
()
Returns a list of
ServiceConfigurationError
s that were
 encountered while loading automatically discovered linkers during the
 last invocation of
DynamicLinkerFactory.createLinker()
.
Methods in
jdk.dynalink
with parameters of type
List
Modifier and Type
Method
Description
void
DynamicLinkerFactory.
setFallbackLinkers
(
List
<? extends
GuardingDynamicLinker
>Â fallbackLinkers)
Sets the fallback guarding dynamic linkers.
void
DynamicLinkerFactory.
setPrioritizedLinkers
(
List
<? extends
GuardingDynamicLinker
>Â prioritizedLinkers)
Sets the prioritized guarding dynamic linkers.
Uses of
List
in
jdk.dynalink.linker
Methods in
jdk.dynalink.linker
with parameters of type
List
Modifier and Type
Method
Description
GuardedInvocation
GuardedInvocation.
dropArguments
(intÂ pos,
List
<
Class
<?>>Â valueTypes)
Makes an invocation that drops arguments in both the invocation and the
 guard (if it exists and has at least
pos
parameters) with
MethodHandles.dropArguments(MethodHandle, int, List)
.
Uses of
List
in
jdk.dynalink.linker.support
Methods in
jdk.dynalink.linker.support
that return
List
Modifier and Type
Method
Description
static
List
<
GuardingDynamicLinker
>
CompositeTypeBasedGuardingDynamicLinker.
optimize
(
Iterable
<? extends
GuardingDynamicLinker
>Â linkers)
Optimizes a list of type-based linkers.
Uses of
List
in
jdk.javadoc.doclet
Methods in
jdk.javadoc.doclet
that return
List
Modifier and Type
Method
Description
List
<
String
>
Doclet.Option.
getNames
()
Returns the list of names that may be used to identify the option.
Methods in
jdk.javadoc.doclet
with parameters of type
List
Modifier and Type
Method
Description
boolean
Doclet.Option.
process
(
String
option,
List
<
String
>Â arguments)
Processes the option and arguments as needed.
String
Taglet.
toString
(
List
<? extends
DocTree
>Â tags,
Element
element)
Returns the string representation of a series of instances of
 this tag to be included in the generated output.
Uses of
List
in
jdk.jfr
Methods in
jdk.jfr
that return
List
Modifier and Type
Method
Description
List
<
AnnotationElement
>
AnnotationElement.
getAnnotationElements
()
Returns an immutable list of annotation elements for this
AnnotationElement
.
List
<
AnnotationElement
>
EventType.
getAnnotationElements
()
Returns an immutable list of annotation elements for this event type.
List
<
AnnotationElement
>
SettingDescriptor.
getAnnotationElements
()
Returns an immutable list of annotation elements for this value
 descriptor.
List
<
AnnotationElement
>
ValueDescriptor.
getAnnotationElements
()
Returns an immutable list of annotation elements for this value
 descriptor.
List
<
String
>
EventType.
getCategoryNames
()
Returns the list of human-readable names that makes up the categories for
 this event type (for example,
"Java Application"
,
"Statistics"
).
static
List
<
Configuration
>
Configuration.
getConfigurations
()
Returns an immutable list of predefined configurations for this Java Virtual Machine (JVM).
List
<
EventType
>
FlightRecorder.
getEventTypes
()
Returns an immutable list that contains all currently registered events.
List
<
ValueDescriptor
>
EventType.
getFields
()
Returns an immutable list of descriptors that describe the event fields of
 this event type.
List
<
ValueDescriptor
>
ValueDescriptor.
getFields
()
Returns an immutable list of value descriptors if the type is complex,
 else an empty list.
List
<
Recording
>
FlightRecorder.
getRecordings
()
Returns an immutable list of the available recordings.
List
<
SettingDescriptor
>
EventType.
getSettingDescriptors
()
Returns an immutable list of the setting descriptors that describe the available
 event settings for this event type.
List
<
ValueDescriptor
>
AnnotationElement.
getValueDescriptors
()
Returns an immutable list of descriptors that describes the annotation values
 for this
AnnotationElement
.
List
<
Object
>
AnnotationElement.
getValues
()
Returns an immutable list of annotation values in an order that matches the
 value descriptors for this
AnnotationElement
.
Methods in
jdk.jfr
with parameters of type
List
Modifier and Type
Method
Description
static
EventFactory
EventFactory.
create
(
List
<
AnnotationElement
>Â annotationElements,
List
<
ValueDescriptor
>Â fields)
Creates an
EventFactory
object.
Constructors in
jdk.jfr
with parameters of type
List
Modifier
Constructor
Description
ValueDescriptor
(
Class
<?>Â type,
String
name,
List
<
AnnotationElement
>Â annotations)
Constructs a value descriptor, useful for dynamically creating event types and
 annotations.
Uses of
List
in
jdk.jfr.consumer
Methods in
jdk.jfr.consumer
that return
List
Modifier and Type
Method
Description
final
List
<
EventType
>
MetadataEvent.
getAddedEventTypes
()
Returns a list of added event types since the last metadata event.
List
<
Configuration
>
MetadataEvent.
getConfigurations
()
Returns a list of configurations.
final
List
<
EventType
>
MetadataEvent.
getEventTypes
()
Returns a list of the current event types being used.
List
<
ValueDescriptor
>
RecordedEvent.
getFields
()
Returns the list of descriptors that describes the fields of the event.
List
<
ValueDescriptor
>
RecordedObject.
getFields
()
Returns an immutable list of the fields for this object.
List
<
RecordedFrame
>
RecordedStackTrace.
getFrames
()
Returns the frames in the stack trace.
final
List
<
EventType
>
MetadataEvent.
getRemovedEventTypes
()
Returns a list of removed event types since the last metadata event.
static
List
<
RecordedEvent
>
RecordingFile.
readAllEvents
(
Path
path)
Returns a list of all events in a file.
List
<
EventType
>
RecordingFile.
readEventTypes
()
Returns a list of all event types in this recording.
Uses of
List
in
jdk.jshell
Methods in
jdk.jshell
that return
List
Modifier and Type
Method
Description
abstract
List
<
SourceCodeAnalysis.Suggestion
>
SourceCodeAnalysis.
completionSuggestions
(
String
input,
 intÂ cursor,
 int[]Â anchor)
Compute possible follow-ups for the given input.
abstract
List
<
SourceCodeAnalysis.Documentation
>
SourceCodeAnalysis.
documentation
(
String
input,
 intÂ cursor,
 booleanÂ computeJavadoc)
Compute documentation for the given user's input.
List
<
SnippetEvent
>
JShell.
drop
(
Snippet
snippet)
Remove a declaration from the state.
List
<
SnippetEvent
>
JShell.
eval
(
String
input)
Evaluate the input String, including definition and/or execution, if
 applicable.
List
<
String
>
SourceCodeAnalysis.QualifiedNames.
getNames
()
Known qualified names for the given simple name in the original code.
abstract
List
<
SourceCodeAnalysis.Highlight
>
SourceCodeAnalysis.
highlights
(
String
snippet)
Returns a collection of
Highlight
s which can be used to color
 the given snippet.
abstract
List
<
Snippet
>
SourceCodeAnalysis.
sourceToSnippets
(
String
input)
Converts the source code of a snippet into a
Snippet
object (or
 list of
Snippet
objects in the case of some var declarations,
 e.g.: int x, y, z;).
abstract
List
<
SourceCodeAnalysis.SnippetWrapper
>
SourceCodeAnalysis.
wrappers
(
String
input)
Returns the wrapper information for the snippet within the
 input source string.
Uses of
List
in
jdk.jshell.execution
Constructors in
jdk.jshell.execution
with parameters of type
List
Modifier
Constructor
Description
JdiInitiator
(intÂ port,
List
<
String
>Â remoteVMOptions,
String
remoteAgent,
 booleanÂ isLaunch,
String
host,
 intÂ timeout,
Map
<
String
,
String
>Â customConnectorArgs)
Start the remote agent and establish a JDI connection to it.
Uses of
List
in
jdk.jshell.spi
Methods in
jdk.jshell.spi
that return
List
Modifier and Type
Method
Description
List
<
String
>
ExecutionEnv.
extraRemoteVMOptions
()
Returns the additional VM options to be used when launching the remote
 JVM.
Uses of
List
in
jdk.management.jfr
Methods in
jdk.management.jfr
that return
List
Modifier and Type
Method
Description
List
<
String
>
EventTypeInfo.
getCategoryNames
()
Returns the list of human-readable names that makes up the category for this
EventTypeInfo
(for example,
"Java Virtual Machine"
or
"Garbage Collector"
).
List
<
ConfigurationInfo
>
FlightRecorderMXBean.
getConfigurations
()
Returns the list of predefined configurations for this Java Virtual Machine (JVM).
List
<
EventTypeInfo
>
FlightRecorderMXBean.
getEventTypes
()
Returns the list of currently registered event types.
List
<
RecordingInfo
>
FlightRecorderMXBean.
getRecordings
()
Returns the list of the available recordings, not necessarily running.
List
<
SettingDescriptorInfo
>
EventTypeInfo.
getSettingDescriptors
()
Returns settings for the event type associated with this
EventTypeInfo
.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
Â© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.