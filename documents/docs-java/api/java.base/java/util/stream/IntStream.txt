IntStream (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested
|
Field |
Constr |
Method
Detail:
Field |
Constr |
Method
SEARCH
Module
java.base
Package
java.util.stream
Interface IntStream
All Superinterfaces:
AutoCloseable
,
BaseStream
<
Integer
,
IntStream
>
public interface
IntStream
extends
BaseStream
<
Integer
,
IntStream
>
A sequence of primitive int-valued elements supporting sequential and parallel
 aggregate operations.  This is the
int
primitive specialization of
Stream
.
The following example illustrates an aggregate operation using
Stream
and
IntStream
, computing the sum of the weights of the
 red widgets:
int sum = widgets.stream()
                      .filter(w -> w.getColor() == RED)
                      .mapToInt(w -> w.getWeight())
                      .sum();
See the class documentation for
Stream
and the package documentation
 for
java.util.stream
for additional
 specification of streams, stream operations, stream pipelines, and
 parallelism.
Since:
1.8
See Also:
Stream
java.util.stream
Nested Class Summary
Nested Classes
Modifier and Type
Interface
Description
static interface
IntStream.Builder
A mutable builder for an
IntStream
.
static interface
IntStream.IntMapMultiConsumer
Represents an operation that accepts an
int
-valued argument
 and an IntConsumer, and returns no result.
Method Summary
All Methods
Static Methods
Instance Methods
Abstract Methods
Default Methods
Modifier and Type
Method
Description
boolean
allMatch
(
IntPredicate
predicate)
Returns whether all elements of this stream match the provided predicate.
boolean
anyMatch
(
IntPredicate
predicate)
Returns whether any elements of this stream match the provided
 predicate.
DoubleStream
asDoubleStream
()
Returns a
DoubleStream
consisting of the elements of this stream,
 converted to
double
.
LongStream
asLongStream
()
Returns a
LongStream
consisting of the elements of this stream,
 converted to
long
.
OptionalDouble
average
()
Returns an
OptionalDouble
describing the arithmetic mean of elements of
 this stream, or an empty optional if this stream is empty.
Stream
<
Integer
>
boxed
()
Returns a
Stream
consisting of the elements of this stream,
 each boxed to an
Integer
.
static
IntStream.Builder
builder
()
Returns a builder for an
IntStream
.
<R> R
collect
(
Supplier
<R> supplier,
ObjIntConsumer
<R> accumulator,
BiConsumer
<R,
R> combiner)
Performs a
mutable
 reduction
operation on the elements of this stream.
static
IntStream
concat
(
IntStream
a,
IntStream
b)
Creates a lazily concatenated stream whose elements are all the
 elements of the first stream followed by all the elements of the
 second stream.
long
count
()
Returns the count of elements in this stream.
IntStream
distinct
()
Returns a stream consisting of the distinct elements of this stream.
default
IntStream
dropWhile
(
IntPredicate
predicate)
Returns, if this stream is ordered, a stream consisting of the remaining
 elements of this stream after dropping the longest prefix of elements
 that match the given predicate.
static
IntStream
empty
()
Returns an empty sequential
IntStream
.
IntStream
filter
(
IntPredicate
predicate)
Returns a stream consisting of the elements of this stream that match
 the given predicate.
OptionalInt
findAny
()
Returns an
OptionalInt
describing some element of the stream, or
 an empty
OptionalInt
if the stream is empty.
OptionalInt
findFirst
()
Returns an
OptionalInt
describing the first element of this
 stream, or an empty
OptionalInt
if the stream is empty.
IntStream
flatMap
(
IntFunction
<? extends
IntStream
> mapper)
Returns a stream consisting of the results of replacing each element of
 this stream with the contents of a mapped stream produced by applying
 the provided mapping function to each element.
void
forEach
(
IntConsumer
action)
Performs an action for each element of this stream.
void
forEachOrdered
(
IntConsumer
action)
Performs an action for each element of this stream, guaranteeing that
 each element is processed in encounter order for streams that have a
 defined encounter order.
static
IntStream
generate
(
IntSupplier
s)
Returns an infinite sequential unordered stream where each element is
 generated by the provided
IntSupplier
.
static
IntStream
iterate
(int seed,
IntPredicate
hasNext,
IntUnaryOperator
next)
Returns a sequential ordered
IntStream
produced by iterative
 application of the given
next
function to an initial element,
 conditioned on satisfying the given
hasNext
predicate.
static
IntStream
iterate
(int seed,
IntUnaryOperator
f)
Returns an infinite sequential ordered
IntStream
produced by iterative
 application of a function
f
to an initial element
seed
,
 producing a
Stream
consisting of
seed
,
f(seed)
,
f(f(seed))
, etc.
IntStream
limit
(long maxSize)
Returns a stream consisting of the elements of this stream, truncated
 to be no longer than
maxSize
in length.
IntStream
map
(
IntUnaryOperator
mapper)
Returns a stream consisting of the results of applying the given
 function to the elements of this stream.
default
IntStream
mapMulti
(
IntStream.IntMapMultiConsumer
mapper)
Returns a stream consisting of the results of replacing each element of
 this stream with multiple elements, specifically zero or more elements.
DoubleStream
mapToDouble
(
IntToDoubleFunction
mapper)
Returns a
DoubleStream
consisting of the results of applying the
 given function to the elements of this stream.
LongStream
mapToLong
(
IntToLongFunction
mapper)
Returns a
LongStream
consisting of the results of applying the
 given function to the elements of this stream.
<U>
Stream
<U>
mapToObj
(
IntFunction
<? extends U> mapper)
Returns an object-valued
Stream
consisting of the results of
 applying the given function to the elements of this stream.
OptionalInt
max
()
Returns an
OptionalInt
describing the maximum element of this
 stream, or an empty optional if this stream is empty.
OptionalInt
min
()
Returns an
OptionalInt
describing the minimum element of this
 stream, or an empty optional if this stream is empty.
boolean
noneMatch
(
IntPredicate
predicate)
Returns whether no elements of this stream match the provided predicate.
static
IntStream
of
(int t)
Returns a sequential
IntStream
containing a single element.
static
IntStream
of
(int... values)
Returns a sequential ordered stream whose elements are the specified values.
IntStream
peek
(
IntConsumer
action)
Returns a stream consisting of the elements of this stream, additionally
 performing the provided action on each element as elements are consumed
 from the resulting stream.
static
IntStream
range
(int startInclusive,
 int endExclusive)
Returns a sequential ordered
IntStream
from
startInclusive
(inclusive) to
endExclusive
(exclusive) by an incremental step of
1
.
static
IntStream
rangeClosed
(int startInclusive,
 int endInclusive)
Returns a sequential ordered
IntStream
from
startInclusive
(inclusive) to
endInclusive
(inclusive) by an incremental step of
1
.
int
reduce
(int identity,
IntBinaryOperator
op)
Performs a
reduction
on the
 elements of this stream, using the provided identity value and an
associative
accumulation function, and returns the reduced value.
OptionalInt
reduce
(
IntBinaryOperator
op)
Performs a
reduction
on the
 elements of this stream, using an
associative
accumulation
 function, and returns an
OptionalInt
describing the reduced value,
 if any.
IntStream
skip
(long n)
Returns a stream consisting of the remaining elements of this stream
 after discarding the first
n
elements of the stream.
IntStream
sorted
()
Returns a stream consisting of the elements of this stream in sorted
 order.
int
sum
()
Returns the sum of elements in this stream.
IntSummaryStatistics
summaryStatistics
()
Returns an
IntSummaryStatistics
describing various
 summary data about the elements of this stream.
default
IntStream
takeWhile
(
IntPredicate
predicate)
Returns, if this stream is ordered, a stream consisting of the longest
 prefix of elements taken from this stream that match the given predicate.
int[]
toArray
()
Returns an array containing the elements of this stream.
Methods declared in interface java.util.stream.
BaseStream
close
,
isParallel
,
iterator
,
onClose
,
parallel
,
sequential
,
spliterator
,
unordered
Method Details
filter
IntStream
filter
(
IntPredicate
predicate)
Returns a stream consisting of the elements of this stream that match
 the given predicate.
This is an
intermediate
 operation
.
Parameters:
predicate
- a
non-interfering
,
stateless
predicate to apply to each element to determine if it
                  should be included
Returns:
the new stream
map
IntStream
map
(
IntUnaryOperator
mapper)
Returns a stream consisting of the results of applying the given
 function to the elements of this stream.
This is an
intermediate
 operation
.
Parameters:
mapper
- a
non-interfering
,
stateless
function to apply to each element
Returns:
the new stream
mapToObj
<U>
Stream
<U>
mapToObj
(
IntFunction
<? extends U> mapper)
Returns an object-valued
Stream
consisting of the results of
 applying the given function to the elements of this stream.
This is an
intermediate operation
.
Type Parameters:
U
- the element type of the new stream
Parameters:
mapper
- a
non-interfering
,
stateless
function to apply to each element
Returns:
the new stream
mapToLong
LongStream
mapToLong
(
IntToLongFunction
mapper)
Returns a
LongStream
consisting of the results of applying the
 given function to the elements of this stream.
This is an
intermediate
 operation
.
Parameters:
mapper
- a
non-interfering
,
stateless
function to apply to each element
Returns:
the new stream
mapToDouble
DoubleStream
mapToDouble
(
IntToDoubleFunction
mapper)
Returns a
DoubleStream
consisting of the results of applying the
 given function to the elements of this stream.
This is an
intermediate
 operation
.
Parameters:
mapper
- a
non-interfering
,
stateless
function to apply to each element
Returns:
the new stream
flatMap
IntStream
flatMap
(
IntFunction
<? extends
IntStream
> mapper)
Returns a stream consisting of the results of replacing each element of
 this stream with the contents of a mapped stream produced by applying
 the provided mapping function to each element.  Each mapped stream is
closed
after its contents
 have been placed into this stream.  (If a mapped stream is
null
an empty stream is used, instead.)
This is an
intermediate
 operation
.
Parameters:
mapper
- a
non-interfering
,
stateless
function to apply to each element which produces an
IntStream
of new values
Returns:
the new stream
See Also:
Stream.flatMap(Function)
mapMulti
default
IntStream
mapMulti
(
IntStream.IntMapMultiConsumer
mapper)
Returns a stream consisting of the results of replacing each element of
 this stream with multiple elements, specifically zero or more elements.
 Replacement is performed by applying the provided mapping function to each
 element in conjunction with a
consumer
argument
 that accepts replacement elements. The mapping function calls the consumer
 zero or more times to provide the replacement elements.
This is an
intermediate
 operation
.
If the
consumer
argument is used outside the scope of
 its application to the mapping function, the results are undefined.
Implementation Requirements:
The default implementation invokes
flatMap
on this stream,
 passing a function that behaves as follows. First, it calls the mapper function
 with an
IntConsumer
that accumulates replacement elements into a newly created
 internal buffer. When the mapper function returns, it creates an
IntStream
from the
 internal buffer. Finally, it returns this stream to
flatMap
.
Parameters:
mapper
- a
non-interfering
,
stateless
function that generates replacement elements
Returns:
the new stream
Since:
16
See Also:
Stream.mapMulti
distinct
IntStream
distinct
()
Returns a stream consisting of the distinct elements of this stream.
This is a
stateful
 intermediate operation
.
Returns:
the new stream
sorted
IntStream
sorted
()
Returns a stream consisting of the elements of this stream in sorted
 order.
This is a
stateful
 intermediate operation
.
Returns:
the new stream
peek
IntStream
peek
(
IntConsumer
action)
Returns a stream consisting of the elements of this stream, additionally
 performing the provided action on each element as elements are consumed
 from the resulting stream.
This is an
intermediate
 operation
.
For parallel stream pipelines, the action may be called at
 whatever time and in whatever thread the element is made available by the
 upstream operation.  If the action modifies shared state,
 it is responsible for providing the required synchronization.
API Note:
This method exists mainly to support debugging, where you want
 to see the elements as they flow past a certain point in a pipeline:
IntStream.of(1, 2, 3, 4)
         .filter(e -> e > 2)
         .peek(e -> System.out.println("Filtered value: " + e))
         .map(e -> e * e)
         .peek(e -> System.out.println("Mapped value: " + e))
         .sum();
In cases where the stream implementation is able to optimize away the
 production of some or all the elements (such as with short-circuiting
 operations like
findFirst
, or in the example described in
count()
), the action will not be invoked for those elements.
Parameters:
action
- a
non-interfering
action to perform on the elements as
               they are consumed from the stream
Returns:
the new stream
limit
IntStream
limit
(long maxSize)
Returns a stream consisting of the elements of this stream, truncated
 to be no longer than
maxSize
in length.
This is a
short-circuiting
 stateful intermediate operation
.
API Note:
While
limit()
is generally a cheap operation on sequential
 stream pipelines, it can be quite expensive on ordered parallel pipelines,
 especially for large values of
maxSize
, since
limit(n)
is constrained to return not just any
n
elements, but the
first n
elements in the encounter order.  Using an unordered
 stream source (such as
generate(IntSupplier)
) or removing the
 ordering constraint with
BaseStream.unordered()
may result in significant
 speedups of
limit()
in parallel pipelines, if the semantics of
 your situation permit.  If consistency with encounter order is required,
 and you are experiencing poor performance or memory utilization with
limit()
in parallel pipelines, switching to sequential execution
 with
BaseStream.sequential()
may improve performance.
Parameters:
maxSize
- the number of elements the stream should be limited to
Returns:
the new stream
Throws:
IllegalArgumentException
- if
maxSize
is negative
skip
IntStream
skip
(long n)
Returns a stream consisting of the remaining elements of this stream
 after discarding the first
n
elements of the stream.
 If this stream contains fewer than
n
elements then an
 empty stream will be returned.
This is a
stateful
 intermediate operation
.
API Note:
While
skip()
is generally a cheap operation on sequential
 stream pipelines, it can be quite expensive on ordered parallel pipelines,
 especially for large values of
n
, since
skip(n)
is constrained to skip not just any
n
elements, but the
first n
elements in the encounter order.  Using an unordered
 stream source (such as
generate(IntSupplier)
) or removing the
 ordering constraint with
BaseStream.unordered()
may result in significant
 speedups of
skip()
in parallel pipelines, if the semantics of
 your situation permit.  If consistency with encounter order is required,
 and you are experiencing poor performance or memory utilization with
skip()
in parallel pipelines, switching to sequential execution
 with
BaseStream.sequential()
may improve performance.
Parameters:
n
- the number of leading elements to skip
Returns:
the new stream
Throws:
IllegalArgumentException
- if
n
is negative
takeWhile
default
IntStream
takeWhile
(
IntPredicate
predicate)
Returns, if this stream is ordered, a stream consisting of the longest
 prefix of elements taken from this stream that match the given predicate.
 Otherwise returns, if this stream is unordered, a stream consisting of a
 subset of elements taken from this stream that match the given predicate.
If this stream is ordered then the longest prefix is a contiguous
 sequence of elements of this stream that match the given predicate.  The
 first element of the sequence is the first element of this stream, and
 the element immediately following the last element of the sequence does
 not match the given predicate.
If this stream is unordered, and some (but not all) elements of this
 stream match the given predicate, then the behavior of this operation is
 nondeterministic; it is free to take any subset of matching elements
 (which includes the empty set).
Independent of whether this stream is ordered or unordered if all
 elements of this stream match the given predicate then this operation
 takes all elements (the result is the same as the input), or if no
 elements of the stream match the given predicate then no elements are
 taken (the result is an empty stream).
This is a
short-circuiting
 stateful intermediate operation
.
API Note:
While
takeWhile()
is generally a cheap operation on sequential
 stream pipelines, it can be quite expensive on ordered parallel
 pipelines, since the operation is constrained to return not just any
 valid prefix, but the longest prefix of elements in the encounter order.
 Using an unordered stream source (such as
generate(IntSupplier)
)
 or removing the ordering constraint with
BaseStream.unordered()
may result
 in significant speedups of
takeWhile()
in parallel pipelines, if
 the semantics of your situation permit.  If consistency with encounter
 order is required, and you are experiencing poor performance or memory
 utilization with
takeWhile()
in parallel pipelines, switching to
 sequential execution with
BaseStream.sequential()
may improve performance.
Implementation Requirements:
The default implementation obtains the
spliterator
of this stream, wraps that spliterator so as to support the semantics
 of this operation on traversal, and returns a new stream associated with
 the wrapped spliterator.  The returned stream preserves the execution
 characteristics of this stream (namely parallel or sequential execution
 as per
BaseStream.isParallel()
) but the wrapped spliterator may choose to
 not support splitting.  When the returned stream is closed, the close
 handlers for both the returned and this stream are invoked.
Parameters:
predicate
- a
non-interfering
,
stateless
predicate to apply to elements to determine the longest
                  prefix of elements.
Returns:
the new stream
Since:
9
dropWhile
default
IntStream
dropWhile
(
IntPredicate
predicate)
Returns, if this stream is ordered, a stream consisting of the remaining
 elements of this stream after dropping the longest prefix of elements
 that match the given predicate.  Otherwise returns, if this stream is
 unordered, a stream consisting of the remaining elements of this stream
 after dropping a subset of elements that match the given predicate.
If this stream is ordered then the longest prefix is a contiguous
 sequence of elements of this stream that match the given predicate.  The
 first element of the sequence is the first element of this stream, and
 the element immediately following the last element of the sequence does
 not match the given predicate.
If this stream is unordered, and some (but not all) elements of this
 stream match the given predicate, then the behavior of this operation is
 nondeterministic; it is free to drop any subset of matching elements
 (which includes the empty set).
Independent of whether this stream is ordered or unordered if all
 elements of this stream match the given predicate then this operation
 drops all elements (the result is an empty stream), or if no elements of
 the stream match the given predicate then no elements are dropped (the
 result is the same as the input).
This is a
stateful
 intermediate operation
.
API Note:
While
dropWhile()
is generally a cheap operation on sequential
 stream pipelines, it can be quite expensive on ordered parallel
 pipelines, since the operation is constrained to return not just any
 valid prefix, but the longest prefix of elements in the encounter order.
 Using an unordered stream source (such as
generate(IntSupplier)
)
 or removing the ordering constraint with
BaseStream.unordered()
may result
 in significant speedups of
dropWhile()
in parallel pipelines, if
 the semantics of your situation permit.  If consistency with encounter
 order is required, and you are experiencing poor performance or memory
 utilization with
dropWhile()
in parallel pipelines, switching to
 sequential execution with
BaseStream.sequential()
may improve performance.
Implementation Requirements:
The default implementation obtains the
spliterator
of this stream, wraps that spliterator so as to support the semantics
 of this operation on traversal, and returns a new stream associated with
 the wrapped spliterator.  The returned stream preserves the execution
 characteristics of this stream (namely parallel or sequential execution
 as per
BaseStream.isParallel()
) but the wrapped spliterator may choose to
 not support splitting.  When the returned stream is closed, the close
 handlers for both the returned and this stream are invoked.
Parameters:
predicate
- a
non-interfering
,
stateless
predicate to apply to elements to determine the longest
                  prefix of elements.
Returns:
the new stream
Since:
9
forEach
void
forEach
(
IntConsumer
action)
Performs an action for each element of this stream.
This is a
terminal
 operation
.
For parallel stream pipelines, this operation does
not
guarantee to respect the encounter order of the stream, as doing so
 would sacrifice the benefit of parallelism.  For any given element, the
 action may be performed at whatever time and in whatever thread the
 library chooses.  If the action accesses shared state, it is
 responsible for providing the required synchronization.
Parameters:
action
- a
non-interfering
action to perform on the elements
forEachOrdered
void
forEachOrdered
(
IntConsumer
action)
Performs an action for each element of this stream, guaranteeing that
 each element is processed in encounter order for streams that have a
 defined encounter order.
This is a
terminal
 operation
.
Parameters:
action
- a
non-interfering
action to perform on the elements
See Also:
forEach(IntConsumer)
toArray
int[]
toArray
()
Returns an array containing the elements of this stream.
This is a
terminal
 operation
.
Returns:
an array containing the elements of this stream
reduce
int
reduce
(int identity,
IntBinaryOperator
op)
Performs a
reduction
on the
 elements of this stream, using the provided identity value and an
associative
accumulation function, and returns the reduced value.  This is equivalent
 to:
int result = identity;
     for (int element : this stream)
         result = accumulator.applyAsInt(result, element)
     return result;
but is not constrained to execute sequentially.
The
identity
value must be an identity for the accumulator
 function. This means that for all
x
,
accumulator.apply(identity, x)
is equal to
x
.
 The
accumulator
function must be an
associative
function.
This is a
terminal
 operation
.
API Note:
Sum, min and max are all special cases of reduction that can be
 expressed using this method.
 For example, summing a stream can be expressed as:
int sum = integers.reduce(0, (a, b) -> a+b);
or more compactly:
int sum = integers.reduce(0, Integer::sum);
While this may seem a more roundabout way to perform an aggregation
 compared to simply mutating a running total in a loop, reduction
 operations parallelize more gracefully, without needing additional
 synchronization and with greatly reduced risk of data races.
Parameters:
identity
- the identity value for the accumulating function
op
- an
associative
,
non-interfering
,
stateless
function for combining two values
Returns:
the result of the reduction
See Also:
sum()
min()
max()
average()
reduce
OptionalInt
reduce
(
IntBinaryOperator
op)
Performs a
reduction
on the
 elements of this stream, using an
associative
accumulation
 function, and returns an
OptionalInt
describing the reduced value,
 if any. This is equivalent to:
boolean foundAny = false;
     int result = null;
     for (int element : this stream) {
         if (!foundAny) {
             foundAny = true;
             result = element;
         }
         else
             result = accumulator.applyAsInt(result, element);
     }
     return foundAny ? OptionalInt.of(result) : OptionalInt.empty();
but is not constrained to execute sequentially.
The
accumulator
function must be an
associative
function.
This is a
terminal
 operation
.
Parameters:
op
- an
associative
,
non-interfering
,
stateless
function for combining two values
Returns:
the result of the reduction
See Also:
reduce(int, IntBinaryOperator)
collect
<R>
R
collect
(
Supplier
<R> supplier,
ObjIntConsumer
<R> accumulator,
BiConsumer
<R,
R> combiner)
Performs a
mutable
 reduction
operation on the elements of this stream.  A mutable
 reduction is one in which the reduced value is a mutable result container,
 such as an
ArrayList
, and elements are incorporated by updating
 the state of the result rather than by replacing the result.  This
 produces a result equivalent to:
R result = supplier.get();
     for (int element : this stream)
         accumulator.accept(result, element);
     return result;
Like
reduce(int, IntBinaryOperator)
,
collect
operations
 can be parallelized without requiring additional synchronization.
This is a
terminal
 operation
.
Type Parameters:
R
- the type of the mutable result container
Parameters:
supplier
- a function that creates a new mutable result container.
                 For a parallel execution, this function may be called
                 multiple times and must return a fresh value each time.
accumulator
- an
associative
,
non-interfering
,
stateless
function that must fold an element into a result
                    container.
combiner
- an
associative
,
non-interfering
,
stateless
function that accepts two partial result containers
                    and merges them, which must be compatible with the
                    accumulator function.  The combiner function must fold
                    the elements from the second result container into the
                    first result container.
Returns:
the result of the reduction
See Also:
Stream.collect(Supplier, BiConsumer, BiConsumer)
sum
int
sum
()
Returns the sum of elements in this stream.  This is a special case
 of a
reduction
and is equivalent to:
return reduce(0, Integer::sum);
This is a
terminal
 operation
.
Returns:
the sum of elements in this stream
min
OptionalInt
min
()
Returns an
OptionalInt
describing the minimum element of this
 stream, or an empty optional if this stream is empty.  This is a special
 case of a
reduction
and is equivalent to:
return reduce(Integer::min);
This is a
terminal operation
.
Returns:
an
OptionalInt
containing the minimum element of this
 stream, or an empty
OptionalInt
if the stream is empty
max
OptionalInt
max
()
Returns an
OptionalInt
describing the maximum element of this
 stream, or an empty optional if this stream is empty.  This is a special
 case of a
reduction
and is equivalent to:
return reduce(Integer::max);
This is a
terminal
 operation
.
Returns:
an
OptionalInt
containing the maximum element of this
 stream, or an empty
OptionalInt
if the stream is empty
count
long
count
()
Returns the count of elements in this stream.  This is a special case of
 a
reduction
and is
 equivalent to:
return mapToLong(e -> 1L).sum();
This is a
terminal operation
.
API Note:
An implementation may choose to not execute the stream pipeline (either
 sequentially or in parallel) if it is capable of computing the count
 directly from the stream source.  In such cases no source elements will
 be traversed and no intermediate operations will be evaluated.
 Behavioral parameters with side-effects, which are strongly discouraged
 except for harmless cases such as debugging, may be affected.  For
 example, consider the following stream:
IntStream s = IntStream.of(1, 2, 3, 4);
     long count = s.peek(System.out::println).count();
The number of elements covered by the stream source is known and the
 intermediate operation,
peek
, does not inject into or remove
 elements from the stream (as may be the case for
flatMap
or
filter
operations).  Thus the count is 4 and there is no need to
 execute the pipeline and, as a side-effect, print out the elements.
Returns:
the count of elements in this stream
average
OptionalDouble
average
()
Returns an
OptionalDouble
describing the arithmetic mean of elements of
 this stream, or an empty optional if this stream is empty.  This is a
 special case of a
reduction
.
This is a
terminal
 operation
.
Returns:
an
OptionalDouble
containing the average element of this
 stream, or an empty optional if the stream is empty
summaryStatistics
IntSummaryStatistics
summaryStatistics
()
Returns an
IntSummaryStatistics
describing various
 summary data about the elements of this stream.  This is a special
 case of a
reduction
.
This is a
terminal
 operation
.
Returns:
an
IntSummaryStatistics
describing various summary data
 about the elements of this stream
anyMatch
boolean
anyMatch
(
IntPredicate
predicate)
Returns whether any elements of this stream match the provided
 predicate.  May not evaluate the predicate on all elements if not
 necessary for determining the result.  If the stream is empty then
false
is returned and the predicate is not evaluated.
This is a
short-circuiting
 terminal operation
.
API Note:
This method evaluates the
existential quantification
of the
 predicate over the elements of the stream (for some x P(x)).
Parameters:
predicate
- a
non-interfering
,
stateless
predicate to apply to elements of this stream
Returns:
true
if any elements of the stream match the provided
 predicate, otherwise
false
allMatch
boolean
allMatch
(
IntPredicate
predicate)
Returns whether all elements of this stream match the provided predicate.
 May not evaluate the predicate on all elements if not necessary for
 determining the result.  If the stream is empty then
true
is
 returned and the predicate is not evaluated.
This is a
short-circuiting
 terminal operation
.
API Note:
This method evaluates the
universal quantification
of the
 predicate over the elements of the stream (for all x P(x)).  If the
 stream is empty, the quantification is said to be
vacuously
 satisfied
and is always
true
(regardless of P(x)).
Parameters:
predicate
- a
non-interfering
,
stateless
predicate to apply to elements of this stream
Returns:
true
if either all elements of the stream match the
 provided predicate or the stream is empty, otherwise
false
noneMatch
boolean
noneMatch
(
IntPredicate
predicate)
Returns whether no elements of this stream match the provided predicate.
 May not evaluate the predicate on all elements if not necessary for
 determining the result.  If the stream is empty then
true
is
 returned and the predicate is not evaluated.
This is a
short-circuiting
 terminal operation
.
API Note:
This method evaluates the
universal quantification
of the
 negated predicate over the elements of the stream (for all x ~P(x)).  If
 the stream is empty, the quantification is said to be vacuously satisfied
 and is always
true
, regardless of P(x).
Parameters:
predicate
- a
non-interfering
,
stateless
predicate to apply to elements of this stream
Returns:
true
if either no elements of the stream match the
 provided predicate or the stream is empty, otherwise
false
findFirst
OptionalInt
findFirst
()
Returns an
OptionalInt
describing the first element of this
 stream, or an empty
OptionalInt
if the stream is empty.  If the
 stream has no encounter order, then any element may be returned.
This is a
short-circuiting
 terminal operation
.
Returns:
an
OptionalInt
describing the first element of this stream,
 or an empty
OptionalInt
if the stream is empty
findAny
OptionalInt
findAny
()
Returns an
OptionalInt
describing some element of the stream, or
 an empty
OptionalInt
if the stream is empty.
This is a
short-circuiting
 terminal operation
.
The behavior of this operation is explicitly nondeterministic; it is
 free to select any element in the stream.  This is to allow for maximal
 performance in parallel operations; the cost is that multiple invocations
 on the same source may not return the same result.  (If a stable result
 is desired, use
findFirst()
instead.)
Returns:
an
OptionalInt
describing some element of this stream, or
 an empty
OptionalInt
if the stream is empty
See Also:
findFirst()
asLongStream
LongStream
asLongStream
()
Returns a
LongStream
consisting of the elements of this stream,
 converted to
long
.
This is an
intermediate
 operation
.
Returns:
a
LongStream
consisting of the elements of this stream,
 converted to
long
asDoubleStream
DoubleStream
asDoubleStream
()
Returns a
DoubleStream
consisting of the elements of this stream,
 converted to
double
.
This is an
intermediate
 operation
.
Returns:
a
DoubleStream
consisting of the elements of this stream,
 converted to
double
boxed
Stream
<
Integer
>
boxed
()
Returns a
Stream
consisting of the elements of this stream,
 each boxed to an
Integer
.
This is an
intermediate
 operation
.
Returns:
a
Stream
consistent of the elements of this stream,
 each boxed to an
Integer
builder
static
IntStream.Builder
builder
()
Returns a builder for an
IntStream
.
Returns:
a stream builder
empty
static
IntStream
empty
()
Returns an empty sequential
IntStream
.
Returns:
an empty sequential stream
of
static
IntStream
of
(int t)
Returns a sequential
IntStream
containing a single element.
Parameters:
t
- the single element
Returns:
a singleton sequential stream
of
static
IntStream
of
(int... values)
Returns a sequential ordered stream whose elements are the specified values.
Parameters:
values
- the elements of the new stream
Returns:
the new stream
iterate
static
IntStream
iterate
(int seed,
IntUnaryOperator
f)
Returns an infinite sequential ordered
IntStream
produced by iterative
 application of a function
f
to an initial element
seed
,
 producing a
Stream
consisting of
seed
,
f(seed)
,
f(f(seed))
, etc.
The first element (position
0
) in the
IntStream
will be
 the provided
seed
.  For
n > 0
, the element at position
n
, will be the result of applying the function
f
to the
 element at position
n - 1
.
The action of applying
f
for one element
happens-before
the action of applying
f
for subsequent elements.  For any given
 element the action may be performed in whatever thread the library
 chooses.
Parameters:
seed
- the initial element
f
- a function to be applied to the previous element to produce
          a new element
Returns:
a new sequential
IntStream
iterate
static
IntStream
iterate
(int seed,
IntPredicate
hasNext,
IntUnaryOperator
next)
Returns a sequential ordered
IntStream
produced by iterative
 application of the given
next
function to an initial element,
 conditioned on satisfying the given
hasNext
predicate.  The
 stream terminates as soon as the
hasNext
predicate returns false.
IntStream.iterate
should produce the same sequence of elements as
 produced by the corresponding for-loop:
for (int index=seed; hasNext.test(index); index = next.applyAsInt(index)) {
         ...
     }
The resulting sequence may be empty if the
hasNext
predicate
 does not hold on the seed value.  Otherwise the first element will be the
 supplied
seed
value, the next element (if present) will be the
 result of applying the
next
function to the
seed
value,
 and so on iteratively until the
hasNext
predicate indicates that
 the stream should terminate.
The action of applying the
hasNext
predicate to an element
happens-before
the action of applying the
next
function to that element.  The
 action of applying the
next
function for one element
happens-before
the action of applying the
hasNext
predicate for subsequent elements.  For any given element an action may
 be performed in whatever thread the library chooses.
Parameters:
seed
- the initial element
hasNext
- a predicate to apply to elements to determine when the
                stream must terminate.
next
- a function to be applied to the previous element to produce
             a new element
Returns:
a new sequential
IntStream
Since:
9
generate
static
IntStream
generate
(
IntSupplier
s)
Returns an infinite sequential unordered stream where each element is
 generated by the provided
IntSupplier
.  This is suitable for
 generating constant streams, streams of random elements, etc.
Parameters:
s
- the
IntSupplier
for generated elements
Returns:
a new infinite sequential unordered
IntStream
range
static
IntStream
range
(int startInclusive,
 int endExclusive)
Returns a sequential ordered
IntStream
from
startInclusive
(inclusive) to
endExclusive
(exclusive) by an incremental step of
1
.
API Note:
An equivalent sequence of increasing values can be produced
 sequentially using a
for
loop as follows:
for (int i = startInclusive; i < endExclusive ; i++) { ... }
Parameters:
startInclusive
- the (inclusive) initial value
endExclusive
- the exclusive upper bound
Returns:
a sequential
IntStream
for the range of
int
elements
rangeClosed
static
IntStream
rangeClosed
(int startInclusive,
 int endInclusive)
Returns a sequential ordered
IntStream
from
startInclusive
(inclusive) to
endInclusive
(inclusive) by an incremental step of
1
.
API Note:
An equivalent sequence of increasing values can be produced
 sequentially using a
for
loop as follows:
for (int i = startInclusive; i <= endInclusive ; i++) { ... }
Parameters:
startInclusive
- the (inclusive) initial value
endInclusive
- the inclusive upper bound
Returns:
a sequential
IntStream
for the range of
int
elements
concat
static
IntStream
concat
(
IntStream
a,
IntStream
b)
Creates a lazily concatenated stream whose elements are all the
 elements of the first stream followed by all the elements of the
 second stream.  The resulting stream is ordered if both
 of the input streams are ordered, and parallel if either of the input
 streams is parallel.  When the resulting stream is closed, the close
 handlers for both input streams are invoked.
This method operates on the two input streams and binds each stream
 to its source.  As a result subsequent modifications to an input stream
 source may not be reflected in the concatenated stream result.
API Note:
To preserve optimization opportunities this method binds each stream to
 its source and accepts only two streams as parameters.  For example, the
 exact size of the concatenated stream source can be computed if the exact
 size of each input stream source is known.
 To concatenate more streams without binding, or without nested calls to
 this method, try creating a stream of streams and flat-mapping with the
 identity function, for example:
IntStream concat = Stream.of(s1, s2, s3, s4).flatMapToInt(s -> s);
Implementation Note:
Use caution when constructing streams from repeated concatenation.
 Accessing an element of a deeply concatenated stream can result in deep
 call chains, or even
StackOverflowError
.
Parameters:
a
- the first stream
b
- the second stream
Returns:
the concatenation of the two input streams
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.