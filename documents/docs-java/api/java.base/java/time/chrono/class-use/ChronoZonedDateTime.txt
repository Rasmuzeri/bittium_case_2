Uses of Interface java.time.chrono.ChronoZonedDateTime (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Interface
java.time.chrono.ChronoZonedDateTime
Packages that use
ChronoZonedDateTime
Package
Description
java.time
The main API for dates, times, instants, and durations.
java.time.chrono
Generic API for calendar systems other than the default ISO.
Uses of
ChronoZonedDateTime
in
java.time
Classes in
java.time
that implement
ChronoZonedDateTime
Modifier and Type
Class
Description
final class
ZonedDateTime
A date-time with a time-zone in the ISO-8601 calendar system,
 such as
2007-12-03T10:15:30+01:00 Europe/Paris
.
Uses of
ChronoZonedDateTime
in
java.time.chrono
Methods in
java.time.chrono
that return
ChronoZonedDateTime
Modifier and Type
Method
Description
ChronoZonedDateTime
<
D
>
ChronoLocalDateTime.
atZone
(
ZoneId
zone)
Combines this time with a time-zone to create a
ChronoZonedDateTime
.
static
ChronoZonedDateTime
<?>
ChronoZonedDateTime.
from
(
TemporalAccessor
temporal)
Obtains an instance of
ChronoZonedDateTime
from a temporal object.
default
ChronoZonedDateTime
<
D
>
ChronoZonedDateTime.
minus
(long amountToSubtract,
TemporalUnit
unit)
Returns an object of the same type as this object with the specified period subtracted.
default
ChronoZonedDateTime
<
D
>
ChronoZonedDateTime.
minus
(
TemporalAmount
amount)
Returns an object of the same type as this object with an amount subtracted.
ChronoZonedDateTime
<
D
>
ChronoZonedDateTime.
plus
(long amountToAdd,
TemporalUnit
unit)
Returns an object of the same type as this object with the specified period added.
default
ChronoZonedDateTime
<
D
>
ChronoZonedDateTime.
plus
(
TemporalAmount
amount)
Returns an object of the same type as this object with an amount added.
default
ChronoZonedDateTime
<
D
>
ChronoZonedDateTime.
with
(
TemporalAdjuster
adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
ChronoZonedDateTime
<
D
>
ChronoZonedDateTime.
with
(
TemporalField
field,
 long newValue)
Returns an object of the same type as this object with the specified field altered.
ChronoZonedDateTime
<
D
>
ChronoZonedDateTime.
withEarlierOffsetAtOverlap
()
Returns a copy of this date-time changing the zone offset to the
 earlier of the two valid offsets at a local time-line overlap.
ChronoZonedDateTime
<
D
>
ChronoZonedDateTime.
withLaterOffsetAtOverlap
()
Returns a copy of this date-time changing the zone offset to the
 later of the two valid offsets at a local time-line overlap.
ChronoZonedDateTime
<
D
>
ChronoZonedDateTime.
withZoneSameInstant
(
ZoneId
zone)
Returns a copy of this date-time with a different time-zone,
 retaining the instant.
ChronoZonedDateTime
<
D
>
ChronoZonedDateTime.
withZoneSameLocal
(
ZoneId
zone)
Returns a copy of this date-time with a different time-zone,
 retaining the local date-time if possible.
default
ChronoZonedDateTime
<? extends
ChronoLocalDate
>
Chronology.
zonedDateTime
(
Instant
instant,
ZoneId
zone)
Obtains a
ChronoZonedDateTime
in this chronology from an
Instant
.
default
ChronoZonedDateTime
<? extends
ChronoLocalDate
>
Chronology.
zonedDateTime
(
TemporalAccessor
temporal)
Obtains a
ChronoZonedDateTime
in this chronology from another temporal object.
ChronoZonedDateTime
<
HijrahDate
>
HijrahChronology.
zonedDateTime
(
Instant
instant,
ZoneId
zone)
ChronoZonedDateTime
<
HijrahDate
>
HijrahChronology.
zonedDateTime
(
TemporalAccessor
temporal)
ChronoZonedDateTime
<
JapaneseDate
>
JapaneseChronology.
zonedDateTime
(
Instant
instant,
ZoneId
zone)
ChronoZonedDateTime
<
JapaneseDate
>
JapaneseChronology.
zonedDateTime
(
TemporalAccessor
temporal)
ChronoZonedDateTime
<
MinguoDate
>
MinguoChronology.
zonedDateTime
(
Instant
instant,
ZoneId
zone)
ChronoZonedDateTime
<
MinguoDate
>
MinguoChronology.
zonedDateTime
(
TemporalAccessor
temporal)
ChronoZonedDateTime
<
ThaiBuddhistDate
>
ThaiBuddhistChronology.
zonedDateTime
(
Instant
instant,
ZoneId
zone)
ChronoZonedDateTime
<
ThaiBuddhistDate
>
ThaiBuddhistChronology.
zonedDateTime
(
TemporalAccessor
temporal)
Methods in
java.time.chrono
that return types with arguments of type
ChronoZonedDateTime
Modifier and Type
Method
Description
static
Comparator
<
ChronoZonedDateTime
<?>>
ChronoZonedDateTime.
timeLineOrder
()
Gets a comparator that compares
ChronoZonedDateTime
in
 time-line order ignoring the chronology.
Methods in
java.time.chrono
with parameters of type
ChronoZonedDateTime
Modifier and Type
Method
Description
default int
ChronoZonedDateTime.
compareTo
(
ChronoZonedDateTime
<?> other)
Compares this date-time to another date-time, including the chronology.
default boolean
ChronoZonedDateTime.
isAfter
(
ChronoZonedDateTime
<?> other)
Checks if the instant of this date-time is after that of the specified date-time.
default boolean
ChronoZonedDateTime.
isBefore
(
ChronoZonedDateTime
<?> other)
Checks if the instant of this date-time is before that of the specified date-time.
default boolean
ChronoZonedDateTime.
isEqual
(
ChronoZonedDateTime
<?> other)
Checks if the instant of this date-time is equal to that of the specified date-time.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.