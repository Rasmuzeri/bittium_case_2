StringReader (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field
|
Constr
|
Method
Detail:
Field |
Constr
|
Method
SEARCH
Module
java.base
Package
java.io
Class StringReader
java.lang.Object
java.io.Reader
java.io.StringReader
All Implemented Interfaces:
Closeable
,
AutoCloseable
,
Readable
public class
StringReader
extends
Reader
A character stream whose source is a string.
Since:
1.1
Field Summary
Fields declared in class java.io.
Reader
lock
Constructor Summary
Constructors
Constructor
Description
StringReader
(
String
s)
Creates a new string reader.
Method Summary
All Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
void
close
()
Closes the stream and releases any system resources associated with
 it.
void
mark
(int readAheadLimit)
Marks the present position in the stream.
boolean
markSupported
()
Tells whether this stream supports the mark() operation, which it does.
int
read
()
Reads a single character.
int
read
(char[] cbuf,
 int off,
 int len)
Reads characters into a portion of an array.
boolean
ready
()
Tells whether this stream is ready to be read.
void
reset
()
Resets the stream to the most recent mark, or to the beginning of the
 string if it has never been marked.
long
skip
(long n)
Skips characters.
Methods declared in class java.io.
Reader
nullReader
,
read
,
read
,
transferTo
Methods declared in class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Constructor Details
StringReader
public
StringReader
(
String
s)
Creates a new string reader.
Parameters:
s
- String providing the character stream.
Method Details
read
public
int
read
()
         throws
IOException
Reads a single character.
Overrides:
read
in class
Reader
Returns:
The character read, or -1 if the end of the stream has been
             reached
Throws:
IOException
- If an I/O error occurs
read
public
int
read
(char[] cbuf,
 int off,
 int len)
throws
IOException
Reads characters into a portion of an array.
If
len
is zero, then no characters are read and
0
is
 returned; otherwise, there is an attempt to read at least one character.
 If no character is available because the stream is at its end, the value
-1
is returned; otherwise, at least one character is read and
 stored into
cbuf
.
Specified by:
read
in class
Reader
Parameters:
cbuf
- Destination buffer
off
- Offset at which to start storing characters
len
- Maximum number of characters to read
Returns:
The number of characters read, or -1 if the end of the
             stream has been reached
Throws:
IndexOutOfBoundsException
- If
off
is negative, or
len
is negative,
             or
len
is greater than
cbuf.length - off
IOException
- If an I/O error occurs
skip
public
long
skip
(long n)
throws
IOException
Skips characters. If the stream is already at its end before this method
 is invoked, then no characters are skipped and zero is returned.
The
n
parameter may be negative, even though the
skip
method of the
Reader
superclass throws
 an exception in this case. Negative values of
n
cause the
 stream to skip backwards. Negative return values indicate a skip
 backwards. It is not possible to skip backwards past the beginning of
 the string.
If the entire string has been read or skipped, then this method has
 no effect and always returns
0
.
Overrides:
skip
in class
Reader
Parameters:
n
- The number of characters to skip
Returns:
The number of characters actually skipped
Throws:
IOException
- If an I/O error occurs
ready
public
boolean
ready
()
              throws
IOException
Tells whether this stream is ready to be read.
Overrides:
ready
in class
Reader
Returns:
True if the next read() is guaranteed not to block for input
Throws:
IOException
- If the stream is closed
markSupported
public
boolean
markSupported
()
Tells whether this stream supports the mark() operation, which it does.
Overrides:
markSupported
in class
Reader
Returns:
true if and only if this stream supports the mark operation.
mark
public
void
mark
(int readAheadLimit)
throws
IOException
Marks the present position in the stream.  Subsequent calls to reset()
 will reposition the stream to this point.
Overrides:
mark
in class
Reader
Parameters:
readAheadLimit
- Limit on the number of characters that may be
                         read while still preserving the mark.  Because
                         the stream's input comes from a string, there
                         is no actual limit, so this argument must not
                         be negative, but is otherwise ignored.
Throws:
IllegalArgumentException
- If
readAheadLimit < 0
IOException
- If an I/O error occurs
reset
public
void
reset
()
           throws
IOException
Resets the stream to the most recent mark, or to the beginning of the
 string if it has never been marked.
Overrides:
reset
in class
Reader
Throws:
IOException
- If an I/O error occurs
close
public
void
close
()
Closes the stream and releases any system resources associated with
 it. Once the stream has been closed, further read(),
 ready(), mark(), or reset() invocations will throw an IOException.
 Closing a previously closed stream has no effect. This method will block
 while there is another thread blocking on the reader.
Specified by:
close
in interface
AutoCloseable
Specified by:
close
in interface
Closeable
Specified by:
close
in class
Reader
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.