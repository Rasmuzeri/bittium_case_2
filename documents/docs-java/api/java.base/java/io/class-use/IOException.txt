Uses of Class java.io.IOException (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Class
java.io.IOException
Packages that use
IOException
Package
Description
com.sun.jdi
This is the core package of the Java Debug
 Interface (JDI), it defines mirrors for values, types, and the target
 VirtualMachine itself - as well bootstrapping facilities.
com.sun.jdi.connect
This package defines connections between the virtual machine
 using the JDI and the target virtual machine.
com.sun.jdi.connect.spi
This package comprises the interfaces and classes used to
 develop new
TransportService
implementations.
com.sun.management
This package contains the JDK's extension to
 the standard implementation of the
java.lang.management
API and also defines the management
 interface for some other components of the platform.
com.sun.net.httpserver
Provides a simple high-level Http server API, which can be used to build
   embedded HTTP servers.
com.sun.net.httpserver.spi
Provides a pluggable service provider interface, which allows the HTTP server
 implementation to be replaced with other implementations.
com.sun.nio.sctp
A Java API for Stream Control Transport Protocol.
com.sun.security.auth.callback
Provides an implementation of
CallbackHandler
.
com.sun.source.util
Provides utilities for operations on abstract syntax trees (AST).
com.sun.tools.attach
Provides the API to attach to a Java virtual machine.
com.sun.tools.attach.spi
Only developers who are defining new attach providers should need to make
 direct use of this package.
java.applet
Provides the classes necessary to create an applet and the classes an applet
 uses to communicate with its applet context.
java.awt
Contains all of the classes for creating user interfaces and for painting
 graphics and images.
java.awt.color
Provides classes for color spaces.
java.awt.datatransfer
Provides interfaces and classes for transferring data between and within
 applications.
java.awt.dnd
Drag and Drop is a direct manipulation gesture found in many Graphical User
 Interface systems that provides a mechanism to transfer information between
 two entities logically associated with presentation elements in the GUI.
java.awt.print
Provides classes and interfaces for a general printing API.
java.beans
Contains classes related to developing
beans
-- components based on
 the JavaBeans architecture.
java.beans.beancontext
Provides classes and interfaces relating to bean context.
java.io
Provides for system input and output through data streams,
 serialization and the file system.
java.lang
Provides classes that are fundamental to the design of the Java
 programming language.
java.lang.management
Provides the management interfaces for monitoring and management of the
Java virtual machine and other components in the Java runtime.
java.lang.module
Classes to support module descriptors and creating configurations of modules
 by means of resolution and service binding.
java.net
Provides the classes for implementing networking applications.
java.net.http
HTTP Client and WebSocket APIs
java.nio
Defines buffers, which are containers for data, and provides an
 overview of the other NIO packages.
java.nio.channels
Defines channels, which represent connections to entities that are capable of
 performing I/O operations, such as files and sockets; defines selectors, for
 multiplexed, non-blocking I/O operations.
java.nio.channels.spi
Service-provider classes for the
java.nio.channels
package.
java.nio.charset
Defines charsets, decoders, and encoders, for translating between
 bytes and Unicode characters.
java.nio.file
Defines interfaces and classes for the Java virtual machine to access files,
 file attributes, and file systems.
java.nio.file.attribute
Interfaces and classes providing access to file and file system attributes.
java.nio.file.spi
Service-provider classes for the
java.nio.file
package.
java.rmi
Provides the RMI package.
java.rmi.server
Provides classes and interfaces for supporting the server side of RMI.
java.security
Provides the classes and interfaces for the security framework.
java.security.cert
Provides classes and interfaces for parsing and managing
 certificates, certificate revocation lists (CRLs), and
 certification paths.
java.util
Contains the collections framework, some internationalization support classes,
 a service loader, properties, random number generation, string parsing
 and scanning classes, base64 encoding and decoding, a bit array, and
 several miscellaneous utility classes.
java.util.jar
Provides classes for reading and writing the JAR (Java ARchive)
 file format, which is based on the standard ZIP file format with an
 optional manifest file.
java.util.logging
Provides the classes and interfaces of
 the Java 2 platform's core logging facilities.
java.util.prefs
This package allows applications to store and retrieve user and system
 preference and configuration data.
java.util.zip
Provides classes for reading and writing the standard ZIP and GZIP file
 formats.
javax.annotation.processing
Facilities for declaring annotation processors and for
 allowing annotation processors to communicate with an annotation processing
 tool environment.
javax.crypto
Provides the classes and interfaces for cryptographic
 operations.
javax.imageio
The main package of the Java Image I/O API.
javax.imageio.metadata
A package of the Java Image I/O API dealing with reading and writing
 metadata.
javax.imageio.spi
A package of the Java Image I/O API containing the plug-in interfaces for
 readers, writers, transcoders, and streams, and a runtime registry.
javax.imageio.stream
A package of the Java Image I/O API dealing with low-level I/O from files and
 streams.
javax.management
Provides the core classes for the Java Management Extensions.
javax.management.loading
Provides the classes which implement advanced dynamic
        loading.
javax.management.remote
Interfaces for remote access to
        JMX MBean servers.
javax.management.remote.rmi
The RMI connector is a connector for the JMX Remote API that
      uses RMI to transmit client requests to a remote MBean server.
javax.naming.ldap
Provides support for LDAPv3 extended operations and controls.
javax.net
Provides classes for networking applications.
javax.net.ssl
Provides classes for the secure socket package.
javax.print
Provides the principal classes and interfaces for the Java Print
 Service API.
javax.rmi.ssl
Provides implementations of
RMIClientSocketFactory
and
RMIServerSocketFactory
over
 the Secure Sockets Layer (SSL) or Transport Layer Security (TLS) protocols.
javax.security.auth.callback
This package provides the classes necessary for services
 to interact with applications in order to retrieve
 information (authentication data including usernames
 or passwords, for example) or to display information
 (error and warning messages, for example).
javax.security.sasl
Contains class and interfaces for supporting SASL.
javax.sound.midi
Provides interfaces and classes for I/O, sequencing, and synthesis of MIDI
 (Musical Instrument Digital Interface) data.
javax.sound.midi.spi
Supplies interfaces for service providers to implement when offering new MIDI
 devices, MIDI file readers and writers, or sound bank readers.
javax.sound.sampled
Provides interfaces and classes for capture, processing, and playback of
 sampled audio data.
javax.sound.sampled.spi
Supplies abstract classes for service providers to subclass when offering new
 audio devices, sound file readers and writers, or audio format converters.
javax.sql.rowset
Standard interfaces and base classes for JDBC
RowSet
implementations.
javax.swing
Provides a set of "lightweight" (all-Java language) components
 that, to the maximum degree possible, work the same on all platforms.
javax.swing.filechooser
Contains classes and interfaces used by the
JFileChooser
component.
javax.swing.plaf.synth
Synth is a skinnable look and feel in which all painting is delegated.
javax.swing.text
Provides classes and interfaces that deal with editable and noneditable text
 components.
javax.swing.text.html
Provides the class
HTMLEditorKit
and supporting classes for creating
 HTML text editors.
javax.swing.text.html.parser
Provides the default HTML parser, along with support classes.
javax.swing.text.rtf
Provides a class (
RTFEditorKit
) for creating Rich-Text-Format text
 editors.
javax.tools
Provides interfaces for tools which can be invoked from a program,
 for example, compilers.
javax.xml.parsers
Provides the classes for processing XML documents with a SAX (Simple API for XML)
 parser or a DOM (Document Object Model) Document builder.
javax.xml.validation
Provides an API for validation of XML documents.
jdk.jfr
This package provides classes to create events and control Flight Recorder.
jdk.jfr.consumer
This package contains classes for consuming Flight Recorder data.
jdk.jshell.execution
Provides implementation support for building JShell execution engines.
jdk.management.jfr
This package contains classes to control and monitor Flight Recorder over Java Management Extensions (JMX).
jdk.net
Platform specific socket options for the
java.net
and
java.nio.channels
socket classes.
jdk.nio
Defines JDK-specific
channel
APIs.
org.xml.sax
Provides the interfaces for the Simple API for XML (SAX).
org.xml.sax.ext
Provides interfaces to SAX2 facilities that
 conformant SAX drivers won't necessarily support.
org.xml.sax.helpers
Provides helper classes, including
 support for bootstrapping SAX-based applications.
Uses of
IOException
in
com.sun.jdi
Methods in
com.sun.jdi
that throw
IOException
Modifier and Type
Method
Description
VirtualMachine
VirtualMachineManager.
createVirtualMachine
(
Connection
connection)
Creates a new virtual machine.
VirtualMachine
VirtualMachineManager.
createVirtualMachine
(
Connection
connection,
Process
process)
Create a virtual machine mirror for a target VM.
Uses of
IOException
in
com.sun.jdi.connect
Subclasses of
IOException
in
com.sun.jdi.connect
Modifier and Type
Class
Description
class
TransportTimeoutException
This exception may be thrown as a result of a timeout
 when attaching to a target VM, or waiting to accept a
 connection from a target VM.
Methods in
com.sun.jdi.connect
that throw
IOException
Modifier and Type
Method
Description
VirtualMachine
ListeningConnector.
accept
(
Map
<
String
,
? extends
Connector.Argument
> arguments)
Waits for a target VM to attach to this connector.
VirtualMachine
AttachingConnector.
attach
(
Map
<
String
,
? extends
Connector.Argument
> arguments)
Attaches to a running application and returns a
 mirror of its VM.
VirtualMachine
LaunchingConnector.
launch
(
Map
<
String
,
? extends
Connector.Argument
> arguments)
Launches an application and connects to its VM.
String
ListeningConnector.
startListening
(
Map
<
String
,
? extends
Connector.Argument
> arguments)
Listens for one or more connections initiated by target VMs.
void
ListeningConnector.
stopListening
(
Map
<
String
,
? extends
Connector.Argument
> arguments)
Cancels listening for connections.
Uses of
IOException
in
com.sun.jdi.connect.spi
Subclasses of
IOException
in
com.sun.jdi.connect.spi
Modifier and Type
Class
Description
class
ClosedConnectionException
This exception may be thrown as a result of an asynchronous
 close of a
Connection
while an I/O operation is
 in progress.
Methods in
com.sun.jdi.connect.spi
that throw
IOException
Modifier and Type
Method
Description
abstract
Connection
TransportService.
accept
(
TransportService.ListenKey
listenKey,
 long acceptTimeout,
 long handshakeTimeout)
Accept a connection from a target VM.
abstract
Connection
TransportService.
attach
(
String
address,
 long attachTimeout,
 long handshakeTimeout)
Attaches to the specified address.
abstract void
Connection.
close
()
Closes this connection.
abstract byte[]
Connection.
readPacket
()
Reads a packet from the target VM.
abstract
TransportService.ListenKey
TransportService.
startListening
()
Listens on an address chosen by the transport service.
abstract
TransportService.ListenKey
TransportService.
startListening
(
String
address)
Listens on the specified address for inbound connections.
abstract void
TransportService.
stopListening
(
TransportService.ListenKey
listenKey)
Stop listening for inbound connections.
abstract void
Connection.
writePacket
(byte[] pkt)
Writes a packet to the target VM.
Uses of
IOException
in
com.sun.management
Methods in
com.sun.management
that throw
IOException
Modifier and Type
Method
Description
void
HotSpotDiagnosticMXBean.
dumpHeap
(
String
outputFile,
 boolean live)
Dumps the heap to the
outputFile
file in the same
 format as the hprof heap dump.
default void
HotSpotDiagnosticMXBean.
dumpThreads
(
String
outputFile,
HotSpotDiagnosticMXBean.ThreadDumpFormat
format)
Generate a thread dump to the given file in the given format.
Uses of
IOException
in
com.sun.net.httpserver
Methods in
com.sun.net.httpserver
that throw
IOException
Modifier and Type
Method
Description
abstract void
HttpServer.
bind
(
InetSocketAddress
addr,
 int backlog)
Binds a currently unbound
HttpServer
to the given address and
 port number.
static
HttpServer
HttpServer.
create
()
Creates a
HttpServer
instance which is initially not bound to any
 local address/port.
static
HttpServer
HttpServer.
create
(
InetSocketAddress
addr,
 int backlog)
Create a
HttpServer
instance which will bind to the
 specified
InetSocketAddress
(IP address and port number).
static
HttpServer
HttpServer.
create
(
InetSocketAddress
addr,
 int backlog,
String
path,
HttpHandler
handler,
Filter
... filters)
Creates an
HttpServer
instance with an initial context.
static
HttpsServer
HttpsServer.
create
()
Creates a
HttpsServer
instance which is initially not bound to any
 local address/port.
static
HttpsServer
HttpsServer.
create
(
InetSocketAddress
addr,
 int backlog)
Create a
HttpsServer
instance which will bind to the specified
InetSocketAddress
(IP address and port number).
static
HttpsServer
HttpsServer.
create
(
InetSocketAddress
addr,
 int backlog,
String
path,
HttpHandler
handler,
Filter
... filters)
Creates an
HttpsServer
instance with an initial context.
void
Filter.Chain.
doFilter
(
HttpExchange
exchange)
Calls the next filter in the chain, or else the users exchange
 handler, if this is the final filter in the chain.
abstract void
Filter.
doFilter
(
HttpExchange
exchange,
Filter.Chain
chain)
Asks this filter to pre/post-process the given exchange.
void
HttpHandler.
handle
(
HttpExchange
exchange)
Handle the given request and generate an appropriate response.
abstract void
HttpExchange.
sendResponseHeaders
(int rCode,
 long responseLength)
Starts sending the response back to the client using the current set of
 response headers and the numeric response code as specified in this
 method.
Uses of
IOException
in
com.sun.net.httpserver.spi
Methods in
com.sun.net.httpserver.spi
that throw
IOException
Modifier and Type
Method
Description
abstract
HttpServer
HttpServerProvider.
createHttpServer
(
InetSocketAddress
addr,
 int backlog)
creates a HttpServer from this provider
abstract
HttpsServer
HttpServerProvider.
createHttpsServer
(
InetSocketAddress
addr,
 int backlog)
creates a HttpsServer from this provider
Uses of
IOException
in
com.sun.nio.sctp
Methods in
com.sun.nio.sctp
that throw
IOException
Modifier and Type
Method
Description
abstract
SctpChannel
SctpServerChannel.
accept
()
Accepts an association on this channel's socket.
abstract
Association
SctpChannel.
association
()
Returns the association on this channel's socket.
abstract
Set
<
Association
>
SctpMultiChannel.
associations
()
Returns the open associations on this channel's socket.
abstract
SctpChannel
SctpChannel.
bind
(
SocketAddress
local)
Binds the channel's socket to a local address.
final
SctpMultiChannel
SctpMultiChannel.
bind
(
SocketAddress
local)
Binds the channel's socket to a local address and configures the socket
 to listen for connections.
abstract
SctpMultiChannel
SctpMultiChannel.
bind
(
SocketAddress
local,
 int backlog)
Binds the channel's socket to a local address and configures the socket
 to listen for connections.
final
SctpServerChannel
SctpServerChannel.
bind
(
SocketAddress
local)
Binds the channel's socket to a local address and configures the socket
 to listen for associations.
abstract
SctpServerChannel
SctpServerChannel.
bind
(
SocketAddress
local,
 int backlog)
Binds the channel's socket to a local address and configures the socket
 to listen for associations.
abstract
SctpChannel
SctpChannel.
bindAddress
(
InetAddress
address)
Adds the given address to the bound addresses for the channel's
 socket.
abstract
SctpMultiChannel
SctpMultiChannel.
bindAddress
(
InetAddress
address)
Adds the given address to the bound addresses for the channel's
 socket.
abstract
SctpServerChannel
SctpServerChannel.
bindAddress
(
InetAddress
address)
Adds the given address to the bound addresses for the channel's
 socket.
abstract
SctpChannel
SctpMultiChannel.
branch
(
Association
association)
Branches off an association.
abstract boolean
SctpChannel.
connect
(
SocketAddress
remote)
Connects this channel's socket.
abstract boolean
SctpChannel.
connect
(
SocketAddress
remote,
 int maxOutStreams,
 int maxInStreams)
Connects this channel's socket.
abstract boolean
SctpChannel.
finishConnect
()
Finishes the process of connecting an SCTP channel.
abstract
Set
<
SocketAddress
>
SctpChannel.
getAllLocalAddresses
()
Returns all of the socket addresses to which this channel's socket is
 bound.
abstract
Set
<
SocketAddress
>
SctpMultiChannel.
getAllLocalAddresses
()
Returns all of the socket addresses to which this channel's socket is
 bound.
abstract
Set
<
SocketAddress
>
SctpServerChannel.
getAllLocalAddresses
()
Returns all of the socket addresses to which this channel's socket is
 bound.
abstract <T> T
SctpChannel.
getOption
(
SctpSocketOption
<T> name)
Returns the value of a socket option.
abstract <T> T
SctpMultiChannel.
getOption
(
SctpSocketOption
<T> name,
Association
association)
Returns the value of a socket option.
abstract <T> T
SctpServerChannel.
getOption
(
SctpSocketOption
<T> name)
Returns the value of a socket option.
abstract
Set
<
SocketAddress
>
SctpChannel.
getRemoteAddresses
()
Returns all of the remote addresses to which this channel's socket
 is connected.
abstract
Set
<
SocketAddress
>
SctpMultiChannel.
getRemoteAddresses
(
Association
association)
Returns all of the remote addresses to which the given association on
 this channel's socket is connected.
static
SctpChannel
SctpChannel.
open
()
Opens an SCTP channel.
static
SctpChannel
SctpChannel.
open
(
SocketAddress
remote,
 int maxOutStreams,
 int maxInStreams)
Opens an SCTP channel and connects it to a remote address.
static
SctpMultiChannel
SctpMultiChannel.
open
()
Opens an SCTP multi channel.
static
SctpServerChannel
SctpServerChannel.
open
()
Opens an SCTP server channel.
abstract <T>
MessageInfo
SctpChannel.
receive
(
ByteBuffer
dst,
 T attachment,
NotificationHandler
<T> handler)
Receives a message into the given buffer and/or handles a notification.
abstract <T>
MessageInfo
SctpMultiChannel.
receive
(
ByteBuffer
buffer,
 T attachment,
NotificationHandler
<T> handler)
Receives a message and/or handles a notification via this channel.
abstract int
SctpChannel.
send
(
ByteBuffer
src,
MessageInfo
messageInfo)
Sends a message via this channel.
abstract int
SctpMultiChannel.
send
(
ByteBuffer
buffer,
MessageInfo
messageInfo)
Sends a message via this channel.
abstract <T>
SctpChannel
SctpChannel.
setOption
(
SctpSocketOption
<T> name,
 T value)
Sets the value of a socket option.
abstract <T>
SctpMultiChannel
SctpMultiChannel.
setOption
(
SctpSocketOption
<T> name,
 T value,
Association
association)
Sets the value of a socket option.
abstract <T>
SctpServerChannel
SctpServerChannel.
setOption
(
SctpSocketOption
<T> name,
 T value)
Sets the value of a socket option.
abstract
SctpChannel
SctpChannel.
shutdown
()
Shutdown a connection without closing the channel.
abstract
SctpMultiChannel
SctpMultiChannel.
shutdown
(
Association
association)
Shutdown an association without closing the channel.
abstract
SctpChannel
SctpChannel.
unbindAddress
(
InetAddress
address)
Removes the given address from the bound addresses for the channel's
 socket.
abstract
SctpMultiChannel
SctpMultiChannel.
unbindAddress
(
InetAddress
address)
Removes the given address from the bound addresses for the channel's
 socket.
abstract
SctpServerChannel
SctpServerChannel.
unbindAddress
(
InetAddress
address)
Removes the given address from the bound addresses for the channel's
 socket.
Uses of
IOException
in
com.sun.security.auth.callback
Methods in
com.sun.security.auth.callback
that throw
IOException
Modifier and Type
Method
Description
void
TextCallbackHandler.
handle
(
Callback
[] callbacks)
Handles the specified set of callbacks.
Uses of
IOException
in
com.sun.source.util
Methods in
com.sun.source.util
that throw
IOException
Modifier and Type
Method
Description
abstract
Iterable
<? extends
Element
>
JavacTask.
analyze
()
Completes all analysis.
abstract
Iterable
<? extends
JavaFileObject
>
JavacTask.
generate
()
Generates code.
abstract
DocCommentTree
DocTrees.
getDocCommentTree
(
Element
e,
String
relativePath)
Returns the doc comment tree of the given file whose path is
 specified relative to the given element.
abstract
Iterable
<? extends
CompilationUnitTree
>
JavacTask.
parse
()
Parses the specified files returning a list of abstract syntax trees.
Uses of
IOException
in
com.sun.tools.attach
Subclasses of
IOException
in
com.sun.tools.attach
Modifier and Type
Class
Description
class
AttachOperationFailedException
Exception type to signal that an attach operation failed in the target VM.
Methods in
com.sun.tools.attach
that throw
IOException
Modifier and Type
Method
Description
static
VirtualMachine
VirtualMachine.
attach
(
VirtualMachineDescriptor
vmd)
Attaches to a Java virtual machine.
static
VirtualMachine
VirtualMachine.
attach
(
String
id)
Attaches to a Java virtual machine.
abstract void
VirtualMachine.
detach
()
Detach from the virtual machine.
abstract
Properties
VirtualMachine.
getAgentProperties
()
Returns the current
agent properties
in the target virtual
 machine.
abstract
Properties
VirtualMachine.
getSystemProperties
()
Returns the current system properties in the target virtual machine.
void
VirtualMachine.
loadAgent
(
String
agent)
Loads an agent.
abstract void
VirtualMachine.
loadAgent
(
String
agent,
String
options)
Loads an agent.
void
VirtualMachine.
loadAgentLibrary
(
String
agentLibrary)
Loads an agent library.
abstract void
VirtualMachine.
loadAgentLibrary
(
String
agentLibrary,
String
options)
Loads an agent library.
void
VirtualMachine.
loadAgentPath
(
String
agentPath)
Load a native agent library by full pathname.
abstract void
VirtualMachine.
loadAgentPath
(
String
agentPath,
String
options)
Load a native agent library by full pathname.
abstract
String
VirtualMachine.
startLocalManagementAgent
()
Starts the local JMX management agent in the target virtual machine.
abstract void
VirtualMachine.
startManagementAgent
(
Properties
agentProperties)
Starts the JMX management agent in the target virtual machine.
Uses of
IOException
in
com.sun.tools.attach.spi
Methods in
com.sun.tools.attach.spi
that throw
IOException
Modifier and Type
Method
Description
VirtualMachine
AttachProvider.
attachVirtualMachine
(
VirtualMachineDescriptor
vmd)
Attaches to a Java virtual machine.
abstract
VirtualMachine
AttachProvider.
attachVirtualMachine
(
String
id)
Attaches to a Java virtual machine.
Uses of
IOException
in
java.applet
Methods in
java.applet
that throw
IOException
Modifier and Type
Method
Description
void
AppletContext.
setStream
(
String
key,
InputStream
stream)
Deprecated, for removal: This API element is subject to removal in a future version.
Associates the specified stream with the specified key in this applet
 context.
Uses of
IOException
in
java.awt
Methods in
java.awt
that throw
IOException
Modifier and Type
Method
Description
void
Desktop.
browse
(
URI
uri)
Launches the default browser to display a
URI
.
static
Font
Font.
createFont
(int fontFormat,
File
fontFile)
Returns a new
Font
using the specified font type
 and the specified font file.
static
Font
Font.
createFont
(int fontFormat,
InputStream
fontStream)
Returns a new
Font
using the specified font type
 and input data.
static
Font
[]
Font.
createFonts
(
File
fontFile)
Returns a new array of
Font
decoded from the specified file.
static
Font
[]
Font.
createFonts
(
InputStream
fontStream)
Returns a new array of
Font
decoded from the specified stream.
void
Desktop.
edit
(
File
file)
Launches the associated editor application and opens a file for
 editing.
void
Desktop.
mail
()
Launches the mail composing window of the user default mail
 client.
void
Desktop.
mail
(
URI
mailtoURI)
Launches the mail composing window of the user default mail
 client, filling the message fields specified by a
mailto:
URI.
void
Desktop.
open
(
File
file)
Launches the associated application to open the file.
void
Desktop.
print
(
File
file)
Prints a file with the native desktop printing facility, using
 the associated application's print command.
protected static void
AWTEventMulticaster.
save
(
ObjectOutputStream
s,
String
k,
EventListener
l)
Saves a Serializable listener chain to a serialization stream.
protected void
AWTEventMulticaster.
saveInternal
(
ObjectOutputStream
s,
String
k)
Serialization support.
void
SplashScreen.
setImageURL
(
URL
imageURL)
Changes the splash screen image.
Uses of
IOException
in
java.awt.color
Methods in
java.awt.color
that throw
IOException
Modifier and Type
Method
Description
static
ICC_Profile
ICC_Profile.
getInstance
(
InputStream
s)
Constructs an
ICC_Profile
corresponding to the data in an
InputStream
.
static
ICC_Profile
ICC_Profile.
getInstance
(
String
fileName)
Constructs an
ICC_Profile
corresponding to the data in a file.
void
ICC_Profile.
write
(
OutputStream
s)
Write this
ICC_Profile
to an
OutputStream
.
void
ICC_Profile.
write
(
String
fileName)
Write this
ICC_Profile
to a file.
Uses of
IOException
in
java.awt.datatransfer
Methods in
java.awt.datatransfer
that throw
IOException
Modifier and Type
Method
Description
Object
Clipboard.
getData
(
DataFlavor
flavor)
Returns an object representing the current contents of this clipboard in
 the specified
DataFlavor
.
Reader
DataFlavor.
getReaderForText
(
Transferable
transferable)
Gets a Reader for a text flavor, decoded, if necessary, for the expected
 charset (encoding).
Object
StringSelection.
getTransferData
(
DataFlavor
flavor)
Returns the
Transferable
's data in the requested
DataFlavor
if possible.
Object
Transferable.
getTransferData
(
DataFlavor
flavor)
Returns an object which represents the data to be transferred.
void
DataFlavor.
readExternal
(
ObjectInput
is)
Restores this
DataFlavor
from a Serialized state.
void
DataFlavor.
writeExternal
(
ObjectOutput
os)
Serializes this
DataFlavor
.
Uses of
IOException
in
java.awt.dnd
Methods in
java.awt.dnd
that throw
IOException
Modifier and Type
Method
Description
Object
DropTargetContext.TransferableProxy.
getTransferData
(
DataFlavor
df)
Returns an object which represents the data provided by
 the encapsulated transferable for the requested data flavor.
Uses of
IOException
in
java.awt.print
Methods in
java.awt.print
that return
IOException
Modifier and Type
Method
Description
IOException
PrinterIOException.
getIOException
()
Returns the
IOException
that terminated
 the print job.
Constructors in
java.awt.print
with parameters of type
IOException
Modifier
Constructor
Description
PrinterIOException
(
IOException
exception)
Constructs a new
PrinterIOException
with the string representation of the specified
IOException
.
Uses of
IOException
in
java.beans
Methods in
java.beans
that throw
IOException
Modifier and Type
Method
Description
static
Object
Beans.
instantiate
(
ClassLoader
cls,
String
beanName)
Instantiate a JavaBean.
static
Object
Beans.
instantiate
(
ClassLoader
cls,
String
beanName,
BeanContext
beanContext)
Instantiate a JavaBean.
static
Object
Beans.
instantiate
(
ClassLoader
cls,
String
beanName,
BeanContext
beanContext,
AppletInitializer
initializer)
Deprecated, for removal: This API element is subject to removal in a future version.
It is recommended to use
Beans.instantiate(ClassLoader, String, BeanContext)
,
 because the Applet API is deprecated.
Uses of
IOException
in
java.beans.beancontext
Methods in
java.beans.beancontext
that throw
IOException
Modifier and Type
Method
Description
protected void
BeanContextServicesSupport.
bcsPreDeserializationHook
(
ObjectInputStream
ois)
called from BeanContextSupport readObject before it deserializes the
 children ...
protected void
BeanContextSupport.
bcsPreDeserializationHook
(
ObjectInputStream
ois)
called by readObject after defaultReadObject() but prior to
 deserialization of any children.
protected void
BeanContextServicesSupport.
bcsPreSerializationHook
(
ObjectOutputStream
oos)
called from BeanContextSupport writeObject before it serializes the
 children ...
protected void
BeanContextSupport.
bcsPreSerializationHook
(
ObjectOutputStream
oos)
called by writeObject after defaultWriteObject() but prior to
 serialization of currently serializable children.
protected final void
BeanContextSupport.
deserialize
(
ObjectInputStream
ois,
Collection
coll)
used by readObject to deserialize a collection.
Object
BeanContext.
instantiateChild
(
String
beanName)
Instantiate the javaBean named as a
 child of this
BeanContext
.
Object
BeanContextSupport.
instantiateChild
(
String
beanName)
The instantiateChild method is a convenience hook
 in BeanContext to simplify
 the task of instantiating a Bean, nested,
 into a
BeanContext
.
final void
BeanContextSupport.
readChildren
(
ObjectInputStream
ois)
When an instance of this class is used as a delegate for the
 implementation of the BeanContext protocols (and its subprotocols)
 there exists a 'chicken and egg' problem during deserialization
protected final void
BeanContextSupport.
serialize
(
ObjectOutputStream
oos,
Collection
<?> coll)
Used by writeObject to serialize a Collection.
final void
BeanContextSupport.
writeChildren
(
ObjectOutputStream
oos)
Used to serialize all children of
 this
BeanContext
.
Uses of
IOException
in
java.io
Subclasses of
IOException
in
java.io
Modifier and Type
Class
Description
class
CharConversionException
Base class for character conversion exceptions.
class
EOFException
Signals that an end of file or end of stream has been reached
 unexpectedly during input.
class
FileNotFoundException
Signals that an attempt to open the file denoted by a specified pathname
 has failed.
class
InterruptedIOException
Signals that an I/O operation has been interrupted.
class
InvalidClassException
Thrown when the Serialization runtime detects one of the following
 problems with a Class.
class
InvalidObjectException
Indicates that one or more deserialized objects failed validation
 tests.
class
NotActiveException
Thrown when serialization or deserialization is not active.
class
NotSerializableException
Thrown when an instance is required to have a Serializable interface.
class
ObjectStreamException
Superclass of all exceptions specific to Object Stream classes.
class
OptionalDataException
Exception indicating the failure of an object read operation due to
 unread primitive data, or the end of data belonging to a serialized
 object in the stream.
class
StreamCorruptedException
Thrown when control information that was read from an object stream
 violates internal consistency checks.
class
SyncFailedException
Signals that a sync operation has failed.
class
UnsupportedEncodingException
The Character Encoding is not supported.
class
UTFDataFormatException
Signals that a malformed string in
modified UTF-8
format has been read in a data
 input stream or by any class that implements the data input
 interface.
class
WriteAbortedException
Signals that one of the ObjectStreamExceptions was thrown during a
 write operation.
Methods in
java.io
that return
IOException
Modifier and Type
Method
Description
IOException
UncheckedIOException.
getCause
()
Returns the cause of this exception.
Methods in
java.io
that throw
IOException
Modifier and Type
Method
Description
protected void
ObjectOutputStream.
annotateClass
(
Class
<?> cl)
Subclasses may implement this method to allow class data to be stored in
 the stream.
protected void
ObjectOutputStream.
annotateProxyClass
(
Class
<?> cl)
Subclasses may implement this method to store custom data in the stream
 along with descriptors for dynamic proxy classes.
Writer
Writer.
append
(char c)
Appends the specified character to this writer.
Writer
Writer.
append
(
CharSequence
csq)
Appends the specified character sequence to this writer.
Writer
Writer.
append
(
CharSequence
csq,
 int start,
 int end)
Appends a subsequence of the specified character sequence to this writer.
int
BufferedInputStream.
available
()
Returns an estimate of the number of bytes that can be read (or
 skipped over) from this input stream without blocking by the next
 invocation of a method for this input stream.
int
FileInputStream.
available
()
Returns an estimate of the number of remaining bytes that can be read (or
 skipped over) from this input stream without blocking by the next
 invocation of a method for this input stream.
int
FilterInputStream.
available
()
Returns an estimate of the number of bytes that can be read (or
 skipped over) from this input stream without blocking by the next
 caller of a method for this input stream.
int
InputStream.
available
()
Returns an estimate of the number of bytes that can be read (or skipped
 over) from this input stream without blocking, which may be 0, or 0 when
 end of stream is detected.
int
LineNumberInputStream.
available
()
Deprecated.
Returns the number of bytes that can be read from this input
 stream without blocking.
int
ObjectInput.
available
()
Returns the number of bytes that can be read
 without blocking.
int
ObjectInputStream.
available
()
Returns the number of bytes that can be read without blocking.
int
PipedInputStream.
available
()
Returns the number of bytes that can be read from this input
 stream without blocking.
int
PushbackInputStream.
available
()
Returns an estimate of the number of bytes that can be read (or
 skipped over) from this input stream without blocking by the next
 invocation of a method for this input stream.
int
SequenceInputStream.
available
()
Returns an estimate of the number of bytes that can be read (or
 skipped over) from the current underlying input stream without
 blocking by the next invocation of a method for the current
 underlying input stream.
void
BufferedInputStream.
close
()
Closes this input stream and releases any system resources
 associated with the stream.
void
BufferedReader.
close
()
void
BufferedWriter.
close
()
void
ByteArrayInputStream.
close
()
Closing a
ByteArrayInputStream
has no effect.
void
ByteArrayOutputStream.
close
()
Closing a
ByteArrayOutputStream
has no effect.
void
Closeable.
close
()
Closes this stream and releases any system resources associated
 with it.
void
FileInputStream.
close
()
Closes this file input stream and releases any system resources
 associated with the stream.
void
FileOutputStream.
close
()
Closes this file output stream and releases any system resources
 associated with this stream.
void
FilterInputStream.
close
()
Closes this input stream and releases any system resources associated
 with the stream.
void
FilterOutputStream.
close
()
Closes this output stream and releases any system resources
 associated with the stream.
void
FilterReader.
close
()
void
FilterWriter.
close
()
void
InputStream.
close
()
Closes this input stream and releases any system resources associated
 with the stream.
void
InputStreamReader.
close
()
void
ObjectInput.
close
()
Closes the input stream.
void
ObjectInputStream.
close
()
Closes this input stream and releases any system resources associated
 with the stream.
void
ObjectOutput.
close
()
Closes the stream.
void
ObjectOutputStream.
close
()
Closes the stream.
void
OutputStream.
close
()
Closes this output stream and releases any system resources
 associated with this stream.
void
OutputStreamWriter.
close
()
void
PipedInputStream.
close
()
Closes this input stream and releases any system resources associated
 with the stream.
void
PipedOutputStream.
close
()
Closes this piped output stream and releases any system resources
 associated with this stream.
void
PipedReader.
close
()
Closes this piped stream and releases any system resources
 associated with the stream.
void
PipedWriter.
close
()
Closes this piped output stream and releases any system resources
 associated with this stream.
void
PushbackInputStream.
close
()
Closes this input stream and releases any system resources
 associated with the stream.
void
PushbackReader.
close
()
Closes the stream and releases any system resources associated with
 it.
void
RandomAccessFile.
close
()
Closes this random access file stream and releases any system
 resources associated with the stream.
abstract void
Reader.
close
()
Closes the stream and releases any system resources associated with
 it.
void
SequenceInputStream.
close
()
Closes this input stream and releases any system resources associated
 with the stream.
void
StringWriter.
close
()
Closing a
StringWriter
has no effect.
abstract void
Writer.
close
()
Closes the stream, flushing it first.
void
PipedInputStream.
connect
(
PipedOutputStream
src)
Causes this piped input stream to be connected
 to the piped  output stream
src
.
void
PipedOutputStream.
connect
(
PipedInputStream
snk)
Connects this piped output stream to a receiver.
void
PipedReader.
connect
(
PipedWriter
src)
Causes this piped reader to be connected
 to the piped  writer
src
.
void
PipedWriter.
connect
(
PipedReader
snk)
Connects this piped writer to a receiver.
boolean
File.
createNewFile
()
Atomically creates a new, empty file named by this abstract pathname if
 and only if a file with this name does not yet exist.
static
File
File.
createTempFile
(
String
prefix,
String
suffix)
Creates an empty file in the default temporary-file directory, using
 the given prefix and suffix to generate its name.
static
File
File.
createTempFile
(
String
prefix,
String
suffix,
File
directory)
Creates a new empty file in the specified directory, using the
 given prefix and suffix strings to generate its name.
abstract boolean
ObjectInputStream.GetField.
defaulted
(
String
name)
Return true if the named field is defaulted and has no value in this
 stream.
void
ObjectInputStream.
defaultReadObject
()
Read the non-static and non-transient fields of the current class from
 this stream.
void
ObjectOutputStream.
defaultWriteObject
()
Write the non-static and non-transient fields of the current class to
 this stream.
protected void
ObjectOutputStream.
drain
()
Drain any buffered data in ObjectOutputStream.
void
BufferedOutputStream.
flush
()
Flushes this buffered output stream.
void
BufferedWriter.
flush
()
Flushes the stream.
void
DataOutputStream.
flush
()
Flushes this data output stream.
void
FilterOutputStream.
flush
()
Flushes this output stream and forces any buffered output bytes
 to be written out to the stream.
void
FilterWriter.
flush
()
Flushes the stream.
void
Flushable.
flush
()
Flushes this stream by writing any buffered output to the underlying
 stream.
void
ObjectOutput.
flush
()
Flushes the stream.
void
ObjectOutputStream.
flush
()
Flushes the stream.
void
OutputStream.
flush
()
Flushes this output stream and forces any buffered output bytes
 to be written out.
void
OutputStreamWriter.
flush
()
Flushes the stream.
void
PipedOutputStream.
flush
()
Flushes this output stream and forces any buffered output bytes
 to be written out.
void
PipedWriter.
flush
()
Flushes this output stream and forces any buffered output characters
 to be written out.
abstract void
Writer.
flush
()
Flushes the stream.
abstract boolean
ObjectInputStream.GetField.
get
(
String
name,
 boolean val)
Get the value of the named boolean field from the persistent field.
abstract byte
ObjectInputStream.GetField.
get
(
String
name,
 byte val)
Get the value of the named byte field from the persistent field.
abstract char
ObjectInputStream.GetField.
get
(
String
name,
 char val)
Get the value of the named char field from the persistent field.
abstract double
ObjectInputStream.GetField.
get
(
String
name,
 double val)
Get the value of the named double field from the persistent field.
abstract float
ObjectInputStream.GetField.
get
(
String
name,
 float val)
Get the value of the named float field from the persistent field.
abstract int
ObjectInputStream.GetField.
get
(
String
name,
 int val)
Get the value of the named int field from the persistent field.
abstract long
ObjectInputStream.GetField.
get
(
String
name,
 long val)
Get the value of the named long field from the persistent field.
abstract short
ObjectInputStream.GetField.
get
(
String
name,
 short val)
Get the value of the named short field from the persistent field.
abstract
Object
ObjectInputStream.GetField.
get
(
String
name,
Object
val)
Get the value of the named Object field from the persistent field.
File
File.
getCanonicalFile
()
Returns the canonical form of this abstract pathname.
String
File.
getCanonicalPath
()
Returns the canonical pathname string of this abstract pathname.
final
FileDescriptor
FileInputStream.
getFD
()
Returns the
FileDescriptor
object  that represents the connection to
 the actual file in the file system being
 used by this
FileInputStream
.
final
FileDescriptor
FileOutputStream.
getFD
()
Returns the file descriptor associated with this stream.
final
FileDescriptor
RandomAccessFile.
getFD
()
Returns the opaque file descriptor object associated with this
 stream.
long
RandomAccessFile.
getFilePointer
()
Returns the current offset in this file.
long
RandomAccessFile.
length
()
Returns the length of this file.
void
BufferedReader.
mark
(int readAheadLimit)
Marks the present position in the stream.
void
CharArrayReader.
mark
(int readAheadLimit)
Marks the present position in the stream.
void
FilterReader.
mark
(int readAheadLimit)
Marks the present position in the stream.
void
LineNumberReader.
mark
(int readAheadLimit)
Mark the present position in the stream.
void
PushbackReader.
mark
(int readAheadLimit)
Marks the present position in the stream.
void
Reader.
mark
(int readAheadLimit)
Marks the present position in the stream.
void
StringReader.
mark
(int readAheadLimit)
Marks the present position in the stream.
void
BufferedWriter.
newLine
()
Writes a line separator.
int
StreamTokenizer.
nextToken
()
Parses the next token from the input stream of this tokenizer.
ObjectOutputStream.PutField
ObjectOutputStream.
putFields
()
Retrieve the object used to buffer persistent fields to be written to
 the stream.
int
BufferedInputStream.
read
()
See
 the general contract of the
read
method of
InputStream
.
int
BufferedInputStream.
read
(byte[] b,
 int off,
 int len)
Reads bytes from this byte-input stream into the specified byte array,
 starting at the given offset.
int
BufferedReader.
read
()
Reads a single character.
int
BufferedReader.
read
(char[] cbuf,
 int off,
 int len)
Reads characters into a portion of an array.
int
CharArrayReader.
read
()
Reads a single character.
int
CharArrayReader.
read
(char[] cbuf,
 int off,
 int len)
Reads characters into a portion of an array.
final int
DataInputStream.
read
(byte[] b)
Reads some number of bytes from the contained input stream and
 stores them into the buffer array
b
.
final int
DataInputStream.
read
(byte[] b,
 int off,
 int len)
Reads up to
len
bytes of data from the contained
 input stream into an array of bytes.
int
FileInputStream.
read
()
Reads a byte of data from this input stream.
int
FileInputStream.
read
(byte[] b)
Reads up to
b.length
bytes of data from this input
 stream into an array of bytes.
int
FileInputStream.
read
(byte[] b,
 int off,
 int len)
Reads up to
len
bytes of data from this input stream
 into an array of bytes.
int
FilterInputStream.
read
()
Reads the next byte of data from the input stream.
int
FilterInputStream.
read
(byte[] b)
Reads up to
b.length
bytes of data from this
 input stream into an array of bytes.
int
FilterInputStream.
read
(byte[] b,
 int off,
 int len)
Reads up to
len
bytes of data from this input stream
 into an array of bytes.
int
FilterReader.
read
()
Reads a single character.
int
FilterReader.
read
(char[] cbuf,
 int off,
 int len)
Reads characters into a portion of an array.
abstract int
InputStream.
read
()
Reads the next byte of data from the input stream.
int
InputStream.
read
(byte[] b)
Reads some number of bytes from the input stream and stores them into
 the buffer array
b
.
int
InputStream.
read
(byte[] b,
 int off,
 int len)
Reads up to
len
bytes of data from the input stream into
 an array of bytes.
int
InputStreamReader.
read
()
Reads a single character.
int
InputStreamReader.
read
(char[] cbuf,
 int off,
 int len)
Reads characters into a portion of an array.
int
LineNumberInputStream.
read
()
Deprecated.
Reads the next byte of data from this input stream.
int
LineNumberInputStream.
read
(byte[] b,
 int off,
 int len)
Deprecated.
Reads up to
len
bytes of data from this input stream
 into an array of bytes.
int
LineNumberReader.
read
()
Read a single character.
int
LineNumberReader.
read
(char[] cbuf,
 int off,
 int len)
Reads characters into a portion of an array.
int
ObjectInput.
read
()
Reads a byte of data.
int
ObjectInput.
read
(byte[] b)
Reads into an array of bytes.
int
ObjectInput.
read
(byte[] b,
 int off,
 int len)
Reads into an array of bytes.
int
ObjectInputStream.
read
()
Reads a byte of data.
int
ObjectInputStream.
read
(byte[] buf,
 int off,
 int len)
Reads into an array of bytes.
int
PipedInputStream.
read
()
Reads the next byte of data from this piped input stream.
int
PipedInputStream.
read
(byte[] b,
 int off,
 int len)
Reads up to
len
bytes of data from this piped input
 stream into an array of bytes.
int
PipedReader.
read
()
Reads the next character of data from this piped stream.
int
PipedReader.
read
(char[] cbuf,
 int off,
 int len)
Reads characters into a portion of an array.
int
PushbackInputStream.
read
()
Reads the next byte of data from this input stream.
int
PushbackInputStream.
read
(byte[] b,
 int off,
 int len)
Reads up to
len
bytes of data from this input stream into
 an array of bytes.
int
PushbackReader.
read
()
Reads a single character.
int
RandomAccessFile.
read
()
Reads a byte of data from this file.
int
RandomAccessFile.
read
(byte[] b)
Reads up to
b.length
bytes of data from this file
 into an array of bytes.
int
RandomAccessFile.
read
(byte[] b,
 int off,
 int len)
Reads up to
len
bytes of data from this file into an
 array of bytes.
int
Reader.
read
()
Reads a single character.
int
Reader.
read
(char[] cbuf)
Reads characters into an array.
abstract int
Reader.
read
(char[] cbuf,
 int off,
 int len)
Reads characters into a portion of an array.
int
Reader.
read
(
CharBuffer
target)
Attempts to read characters into the specified character buffer.
int
SequenceInputStream.
read
()
Reads the next byte of data from the input stream.
int
SequenceInputStream.
read
(byte[] b,
 int off,
 int len)
Reads up to
len
bytes of data from this input stream into an
 array of bytes.
int
StringReader.
read
()
Reads a single character.
int
StringReader.
read
(char[] cbuf,
 int off,
 int len)
Reads characters into a portion of an array.
byte[]
InputStream.
readAllBytes
()
Reads all remaining bytes from the input stream.
boolean
DataInput.
readBoolean
()
Reads one input byte and returns
true
if that byte is nonzero,
false
if that byte is zero.
final boolean
DataInputStream.
readBoolean
()
See the general contract of the
readBoolean
method of
DataInput
.
boolean
ObjectInputStream.
readBoolean
()
Reads in a boolean.
final boolean
RandomAccessFile.
readBoolean
()
Reads a
boolean
from this file.
byte
DataInput.
readByte
()
Reads and returns one input byte.
final byte
DataInputStream.
readByte
()
See the general contract of the
readByte
method of
DataInput
.
byte
ObjectInputStream.
readByte
()
Reads an 8-bit byte.
final byte
RandomAccessFile.
readByte
()
Reads a signed eight-bit value from this file.
char
DataInput.
readChar
()
Reads two input bytes and returns a
char
value.
final char
DataInputStream.
readChar
()
See the general contract of the
readChar
method of
DataInput
.
char
ObjectInputStream.
readChar
()
Reads a 16-bit char.
final char
RandomAccessFile.
readChar
()
Reads a character from this file.
protected
ObjectStreamClass
ObjectInputStream.
readClassDescriptor
()
Read a class descriptor from the serialization stream.
double
DataInput.
readDouble
()
Reads eight input bytes and returns
 a
double
value.
final double
DataInputStream.
readDouble
()
See the general contract of the
readDouble
method of
DataInput
.
double
ObjectInputStream.
readDouble
()
Reads a 64-bit double.
final double
RandomAccessFile.
readDouble
()
Reads a
double
from this file.
void
Externalizable.
readExternal
(
ObjectInput
in)
The object implements the readExternal method to restore its
 contents by calling the methods of DataInput for primitive
 types and readObject for objects, strings and arrays.
ObjectInputStream.GetField
ObjectInputStream.
readFields
()
Reads the persistent fields from the stream and makes them available by
 name.
float
DataInput.
readFloat
()
Reads four input bytes and returns
 a
float
value.
final float
DataInputStream.
readFloat
()
See the general contract of the
readFloat
method of
DataInput
.
float
ObjectInputStream.
readFloat
()
Reads a 32-bit float.
final float
RandomAccessFile.
readFloat
()
Reads a
float
from this file.
void
DataInput.
readFully
(byte[] b)
Reads some bytes from an input
 stream and stores them into the buffer
 array
b
.
void
DataInput.
readFully
(byte[] b,
 int off,
 int len)
Reads
len
bytes from
 an input stream.
final void
DataInputStream.
readFully
(byte[] b)
See the general contract of the
readFully
method of
DataInput
.
final void
DataInputStream.
readFully
(byte[] b,
 int off,
 int len)
See the general contract of the
readFully
method of
DataInput
.
void
ObjectInputStream.
readFully
(byte[] buf)
Reads bytes, blocking until all bytes are read.
void
ObjectInputStream.
readFully
(byte[] buf,
 int off,
 int len)
Reads bytes, blocking until all bytes are read.
final void
RandomAccessFile.
readFully
(byte[] b)
Reads
b.length
bytes from this file into the byte
 array, starting at the current file pointer.
final void
RandomAccessFile.
readFully
(byte[] b,
 int off,
 int len)
Reads exactly
len
bytes from this file into the byte
 array, starting at the current file pointer.
int
DataInput.
readInt
()
Reads four input bytes and returns an
int
value.
final int
DataInputStream.
readInt
()
See the general contract of the
readInt
method of
DataInput
.
int
ObjectInputStream.
readInt
()
Reads a 32-bit int.
final int
RandomAccessFile.
readInt
()
Reads a signed 32-bit integer from this file.
String
BufferedReader.
readLine
()
Reads a line of text.
String
DataInput.
readLine
()
Reads the next line of text from the input stream.
final
String
DataInputStream.
readLine
()
Deprecated.
This method does not properly convert bytes to characters.
String
LineNumberReader.
readLine
()
Read a line of text.
String
ObjectInputStream.
readLine
()
Deprecated.
This method does not properly convert bytes to characters.
final
String
RandomAccessFile.
readLine
()
Reads the next line of text from this file.
long
DataInput.
readLong
()
Reads eight input bytes and returns
 a
long
value.
final long
DataInputStream.
readLong
()
See the general contract of the
readLong
method of
DataInput
.
long
ObjectInputStream.
readLong
()
Reads a 64-bit long.
final long
RandomAccessFile.
readLong
()
Reads a signed 64-bit integer from this file.
int
InputStream.
readNBytes
(byte[] b,
 int off,
 int len)
Reads the requested number of bytes from the input stream into the given
 byte array.
byte[]
InputStream.
readNBytes
(int len)
Reads up to a specified number of bytes from the input stream.
Object
ObjectInput.
readObject
()
Read and return an object.
final
Object
ObjectInputStream.
readObject
()
Read an object from the ObjectInputStream.
protected
Object
ObjectInputStream.
readObjectOverride
()
This method is called by trusted subclasses of ObjectInputStream that
 constructed ObjectInputStream using the protected no-arg constructor.
short
DataInput.
readShort
()
Reads two input bytes and returns
 a
short
value.
final short
DataInputStream.
readShort
()
See the general contract of the
readShort
method of
DataInput
.
short
ObjectInputStream.
readShort
()
Reads a 16-bit short.
final short
RandomAccessFile.
readShort
()
Reads a signed 16-bit number from this file.
protected void
ObjectInputStream.
readStreamHeader
()
The readStreamHeader method is provided to allow subclasses to read and
 verify their own stream headers.
Object
ObjectInputStream.
readUnshared
()
Reads an "unshared" object from the ObjectInputStream.
int
DataInput.
readUnsignedByte
()
Reads one input byte, zero-extends
 it to type
int
, and returns
 the result, which is therefore in the range
0
through
255
.
final int
DataInputStream.
readUnsignedByte
()
See the general contract of the
readUnsignedByte
method of
DataInput
.
int
ObjectInputStream.
readUnsignedByte
()
Reads an unsigned 8-bit byte.
final int
RandomAccessFile.
readUnsignedByte
()
Reads an unsigned eight-bit number from this file.
int
DataInput.
readUnsignedShort
()
Reads two input bytes and returns
 an
int
value in the range
0
through
65535
.
final int
DataInputStream.
readUnsignedShort
()
See the general contract of the
readUnsignedShort
method of
DataInput
.
int
ObjectInputStream.
readUnsignedShort
()
Reads an unsigned 16-bit short.
final int
RandomAccessFile.
readUnsignedShort
()
Reads an unsigned 16-bit number from this file.
String
DataInput.
readUTF
()
Reads in a string that has been encoded using a
modified UTF-8
format.
final
String
DataInputStream.
readUTF
()
See the general contract of the
readUTF
method of
DataInput
.
static final
String
DataInputStream.
readUTF
(
DataInput
in)
Reads from the
 stream
in
a representation
 of a Unicode  character string encoded in
modified UTF-8
format;
 this string of characters is then returned as a
String
.
String
ObjectInputStream.
readUTF
()
Reads a String in
modified UTF-8
format.
final
String
RandomAccessFile.
readUTF
()
Reads in a string from this file.
boolean
BufferedReader.
ready
()
Tells whether this stream is ready to be read.
boolean
CharArrayReader.
ready
()
Tells whether this stream is ready to be read.
boolean
FilterReader.
ready
()
Tells whether this stream is ready to be read.
boolean
InputStreamReader.
ready
()
Tells whether this stream is ready to be read.
boolean
PipedReader.
ready
()
Tell whether this stream is ready to be read.
boolean
PushbackReader.
ready
()
Tells whether this stream is ready to be read.
boolean
Reader.
ready
()
Tells whether this stream is ready to be read.
boolean
StringReader.
ready
()
Tells whether this stream is ready to be read.
protected void
PipedInputStream.
receive
(int b)
Receives a byte of data.
protected
Object
ObjectOutputStream.
replaceObject
(
Object
obj)
This method will allow trusted subclasses of ObjectOutputStream to
 substitute one object for another during serialization.
void
BufferedInputStream.
reset
()
See the general contract of the
reset
method of
InputStream
.
void
BufferedReader.
reset
()
Resets the stream to the most recent mark.
void
CharArrayReader.
reset
()
Resets the stream to the most recent mark, or to the beginning if it has
 never been marked.
void
FilterInputStream.
reset
()
Repositions this stream to the position at the time the
mark
method was last called on this input stream.
void
FilterReader.
reset
()
Resets the stream.
void
InputStream.
reset
()
Repositions this stream to the position at the time the
mark
method was last called on this input stream.
void
LineNumberInputStream.
reset
()
Deprecated.
Repositions this stream to the position at the time the
mark
method was last called on this input stream.
void
LineNumberReader.
reset
()
Reset the stream to the most recent mark.
void
ObjectOutputStream.
reset
()
Reset will disregard the state of any objects already written to the
 stream.
void
PushbackInputStream.
reset
()
Repositions this stream to the position at the time the
mark
method was last called on this input stream.
void
PushbackReader.
reset
()
Resets the stream.
void
Reader.
reset
()
Resets the stream.
void
StringReader.
reset
()
Resets the stream to the most recent mark, or to the beginning of the
 string if it has never been marked.
protected
Class
<?>
ObjectInputStream.
resolveClass
(
ObjectStreamClass
desc)
Load the local class equivalent of the specified stream class
 description.
protected
Object
ObjectInputStream.
resolveObject
(
Object
obj)
This method will allow trusted subclasses of ObjectInputStream to
 substitute one object for another during deserialization.
protected
Class
<?>
ObjectInputStream.
resolveProxyClass
(
String
[] interfaces)
Returns a proxy class that implements the interfaces named in a proxy
 class descriptor; subclasses may implement this method to read custom
 data from the stream along with the descriptors for dynamic proxy
 classes, allowing them to use an alternate loading mechanism for the
 interfaces and the proxy class.
void
RandomAccessFile.
seek
(long pos)
Sets the file-pointer offset, measured from the beginning of this
 file, at which the next read or write occurs.
void
RandomAccessFile.
setLength
(long newLength)
Sets the length of this file.
long
BufferedInputStream.
skip
(long n)
See the general contract of the
skip
method of
InputStream
.
long
CharArrayReader.
skip
(long n)
Skips characters.
long
FileInputStream.
skip
(long n)
Skips over and discards
n
bytes of data from the
 input stream.
long
FilterInputStream.
skip
(long n)
Skips over and discards
n
bytes of data from the
 input stream.
long
FilterReader.
skip
(long n)
Skips characters.
long
InputStream.
skip
(long n)
Skips over and discards
n
bytes of data from this input
 stream.
long
LineNumberInputStream.
skip
(long n)
Deprecated.
Skips over and discards
n
bytes of data from this
 input stream.
long
ObjectInput.
skip
(long n)
Skips n bytes of input.
long
PushbackInputStream.
skip
(long n)
Skips over and discards
n
bytes of data from this
 input stream.
long
Reader.
skip
(long n)
Skips characters.
long
StringReader.
skip
(long n)
Skips characters.
int
DataInput.
skipBytes
(int n)
Makes an attempt to skip over
n
bytes
 of data from the input
 stream, discarding the skipped bytes.
final int
DataInputStream.
skipBytes
(int n)
See the general contract of the
skipBytes
method of
DataInput
.
int
ObjectInputStream.
skipBytes
(int len)
Skips bytes.
int
RandomAccessFile.
skipBytes
(int n)
Attempts to skip over
n
bytes of input discarding the
 skipped bytes.
void
InputStream.
skipNBytes
(long n)
Skips over and discards exactly
n
bytes of data from this input
 stream.
long
InputStream.
transferTo
(
OutputStream
out)
Reads all bytes from this input stream and writes the bytes to the
 given output stream in the order that they are read.
long
Reader.
transferTo
(
Writer
out)
Reads all characters from this reader and writes the characters to the
 given writer in the order that they are read.
void
PushbackInputStream.
unread
(byte[] b)
Pushes back an array of bytes by copying it to the front of the
 pushback buffer.
void
PushbackInputStream.
unread
(byte[] b,
 int off,
 int len)
Pushes back a portion of an array of bytes by copying it to the front
 of the pushback buffer.
void
PushbackInputStream.
unread
(int b)
Pushes back a byte by copying it to the front of the pushback buffer.
void
PushbackReader.
unread
(char[] cbuf)
Pushes back an array of characters by copying it to the front of the
 pushback buffer.
void
PushbackReader.
unread
(char[] cbuf,
 int off,
 int len)
Pushes back a portion of an array of characters by copying it to the
 front of the pushback buffer.
void
PushbackReader.
unread
(int c)
Pushes back a single character by copying it to the front of the
 pushback buffer.
void
ObjectOutputStream.
useProtocolVersion
(int version)
Specify stream protocol version to use when writing the stream.
void
BufferedOutputStream.
write
(byte[] b,
 int off,
 int len)
Writes
len
bytes from the specified byte array
 starting at offset
off
to this buffered output stream.
void
BufferedOutputStream.
write
(int b)
Writes the specified byte to this buffered output stream.
void
BufferedWriter.
write
(char[] cbuf,
 int off,
 int len)
Writes a portion of an array of characters.
void
BufferedWriter.
write
(int c)
Writes a single character.
void
BufferedWriter.
write
(
String
s,
 int off,
 int len)
Writes a portion of a String.
void
DataOutput.
write
(byte[] b)
Writes to the output stream all the bytes in array
b
.
void
DataOutput.
write
(byte[] b,
 int off,
 int len)
Writes
len
bytes from array
b
, in order,  to
 the output stream.
void
DataOutput.
write
(int b)
Writes to the output stream the eight
 low-order bits of the argument
b
.
void
DataOutputStream.
write
(byte[] b,
 int off,
 int len)
Writes
len
bytes from the specified byte array
 starting at offset
off
to the underlying output stream.
void
DataOutputStream.
write
(int b)
Writes the specified byte (the low eight bits of the argument
b
) to the underlying output stream.
void
FileOutputStream.
write
(byte[] b)
Writes
b.length
bytes from the specified byte array
 to this file output stream.
void
FileOutputStream.
write
(byte[] b,
 int off,
 int len)
Writes
len
bytes from the specified byte array
 starting at offset
off
to this file output stream.
void
FileOutputStream.
write
(int b)
Writes the specified byte to this file output stream.
void
FilterOutputStream.
write
(byte[] b)
Writes
b.length
bytes to this output stream.
void
FilterOutputStream.
write
(byte[] b,
 int off,
 int len)
Writes
len
bytes from the specified
byte
array starting at offset
off
to
 this output stream.
void
FilterOutputStream.
write
(int b)
Writes the specified
byte
to this output stream.
void
FilterWriter.
write
(char[] cbuf,
 int off,
 int len)
Writes a portion of an array of characters.
void
FilterWriter.
write
(int c)
Writes a single character.
void
FilterWriter.
write
(
String
str,
 int off,
 int len)
Writes a portion of a string.
void
ObjectOutput.
write
(byte[] b)
Writes an array of bytes.
void
ObjectOutput.
write
(byte[] b,
 int off,
 int len)
Writes a sub array of bytes.
void
ObjectOutput.
write
(int b)
Writes a byte.
abstract void
ObjectOutputStream.PutField.
write
(
ObjectOutput
out)
Deprecated.
This method does not write the values contained by this
PutField
object in a proper format, and may
         result in corruption of the serialization stream.
void
ObjectOutputStream.
write
(byte[] buf)
Writes an array of bytes.
void
ObjectOutputStream.
write
(byte[] buf,
 int off,
 int len)
Writes a sub array of bytes.
void
ObjectOutputStream.
write
(int val)
Writes a byte.
void
OutputStream.
write
(byte[] b)
Writes
b.length
bytes from the specified byte array
 to this output stream.
void
OutputStream.
write
(byte[] b,
 int off,
 int len)
Writes
len
bytes from the specified byte array
 starting at offset
off
to this output stream.
abstract void
OutputStream.
write
(int b)
Writes the specified byte to this output stream.
void
OutputStreamWriter.
write
(char[] cbuf,
 int off,
 int len)
Writes a portion of an array of characters.
void
OutputStreamWriter.
write
(int c)
Writes a single character.
void
OutputStreamWriter.
write
(
String
str,
 int off,
 int len)
Writes a portion of a string.
void
PipedOutputStream.
write
(byte[] b,
 int off,
 int len)
Writes
len
bytes from the specified byte array
 starting at offset
off
to this piped output stream.
void
PipedOutputStream.
write
(int b)
Writes the specified
byte
to the piped output stream.
void
PipedWriter.
write
(char[] cbuf,
 int off,
 int len)
Writes
len
characters from the specified character array
 starting at offset
off
to this piped output stream.
void
PipedWriter.
write
(int c)
Writes the specified
char
to the piped output stream.
void
PrintStream.
write
(byte[] buf)
Writes all bytes from the specified byte array to this stream.
void
RandomAccessFile.
write
(byte[] b)
Writes
b.length
bytes from the specified byte array
 to this file, starting at the current file pointer.
void
RandomAccessFile.
write
(byte[] b,
 int off,
 int len)
Writes
len
bytes from the specified byte array
 starting at offset
off
to this file.
void
RandomAccessFile.
write
(int b)
Writes the specified byte to this file.
void
Writer.
write
(char[] cbuf)
Writes an array of characters.
abstract void
Writer.
write
(char[] cbuf,
 int off,
 int len)
Writes a portion of an array of characters.
void
Writer.
write
(int c)
Writes a single character.
void
Writer.
write
(
String
str)
Writes a string.
void
Writer.
write
(
String
str,
 int off,
 int len)
Writes a portion of a string.
void
DataOutput.
writeBoolean
(boolean v)
Writes a
boolean
value to this output stream.
final void
DataOutputStream.
writeBoolean
(boolean v)
Writes a
boolean
to the underlying output stream as
 a 1-byte value.
void
ObjectOutputStream.
writeBoolean
(boolean val)
Writes a boolean.
final void
RandomAccessFile.
writeBoolean
(boolean v)
Writes a
boolean
to the file as a one-byte value.
void
DataOutput.
writeByte
(int v)
Writes to the output stream the eight low-order
 bits of the argument
v
.
final void
DataOutputStream.
writeByte
(int v)
Writes out a
byte
to the underlying output stream as
 a 1-byte value.
void
ObjectOutputStream.
writeByte
(int val)
Writes an 8-bit byte.
final void
RandomAccessFile.
writeByte
(int v)
Writes a
byte
to the file as a one-byte value.
void
DataOutput.
writeBytes
(
String
s)
Writes a string to the output stream.
final void
DataOutputStream.
writeBytes
(
String
s)
Writes out the string to the underlying output stream as a
 sequence of bytes.
void
ObjectOutputStream.
writeBytes
(
String
str)
Writes a String as a sequence of bytes.
final void
RandomAccessFile.
writeBytes
(
String
s)
Writes the string to the file as a sequence of bytes.
void
DataOutput.
writeChar
(int v)
Writes a
char
value, which
 is comprised of two bytes, to the
 output stream.
final void
DataOutputStream.
writeChar
(int v)
Writes a
char
to the underlying output stream as a
 2-byte value, high byte first.
void
ObjectOutputStream.
writeChar
(int val)
Writes a 16-bit char.
final void
RandomAccessFile.
writeChar
(int v)
Writes a
char
to the file as a two-byte value, high
 byte first.
void
DataOutput.
writeChars
(
String
s)
Writes every character in the string
s
,
 to the output stream, in order,
 two bytes per character.
final void
DataOutputStream.
writeChars
(
String
s)
Writes a string to the underlying output stream as a sequence of
 characters.
void
ObjectOutputStream.
writeChars
(
String
str)
Writes a String as a sequence of chars.
final void
RandomAccessFile.
writeChars
(
String
s)
Writes a string to the file as a sequence of characters.
protected void
ObjectOutputStream.
writeClassDescriptor
(
ObjectStreamClass
desc)
Write the specified class descriptor to the ObjectOutputStream.
void
DataOutput.
writeDouble
(double v)
Writes a
double
value,
 which is comprised of eight bytes, to the output stream.
final void
DataOutputStream.
writeDouble
(double v)
Converts the double argument to a
long
using the
doubleToLongBits
method in class
Double
,
 and then writes that
long
value to the underlying
 output stream as an 8-byte quantity, high byte first.
void
ObjectOutputStream.
writeDouble
(double val)
Writes a 64-bit double.
final void
RandomAccessFile.
writeDouble
(double v)
Converts the double argument to a
long
using the
doubleToLongBits
method in class
Double
,
 and then writes that
long
value to the file as an
 eight-byte quantity, high byte first.
void
Externalizable.
writeExternal
(
ObjectOutput
out)
The object implements the writeExternal method to save its contents
 by calling the methods of DataOutput for its primitive values or
 calling the writeObject method of ObjectOutput for objects, strings,
 and arrays.
void
ObjectOutputStream.
writeFields
()
Write the buffered fields to the stream.
void
DataOutput.
writeFloat
(float v)
Writes a
float
value,
 which is comprised of four bytes, to the output stream.
final void
DataOutputStream.
writeFloat
(float v)
Converts the float argument to an
int
using the
floatToIntBits
method in class
Float
,
 and then writes that
int
value to the underlying
 output stream as a 4-byte quantity, high byte first.
void
ObjectOutputStream.
writeFloat
(float val)
Writes a 32-bit float.
final void
RandomAccessFile.
writeFloat
(float v)
Converts the float argument to an
int
using the
floatToIntBits
method in class
Float
,
 and then writes that
int
value to the file as a
 four-byte quantity, high byte first.
void
DataOutput.
writeInt
(int v)
Writes an
int
value, which is
 comprised of four bytes, to the output stream.
final void
DataOutputStream.
writeInt
(int v)
Writes an
int
to the underlying output stream as four
 bytes, high byte first.
void
ObjectOutputStream.
writeInt
(int val)
Writes a 32-bit int.
final void
RandomAccessFile.
writeInt
(int v)
Writes an
int
to the file as four bytes, high byte first.
void
DataOutput.
writeLong
(long v)
Writes a
long
value, which is
 comprised of eight bytes, to the output stream.
final void
DataOutputStream.
writeLong
(long v)
Writes a
long
to the underlying output stream as eight
 bytes, high byte first.
void
ObjectOutputStream.
writeLong
(long val)
Writes a 64-bit long.
final void
RandomAccessFile.
writeLong
(long v)
Writes a
long
to the file as eight bytes, high byte first.
void
ObjectOutput.
writeObject
(
Object
obj)
Write an object to the underlying storage or stream.
final void
ObjectOutputStream.
writeObject
(
Object
obj)
Write the specified object to the ObjectOutputStream.
protected void
ObjectOutputStream.
writeObjectOverride
(
Object
obj)
Method used by subclasses to override the default writeObject method.
void
DataOutput.
writeShort
(int v)
Writes two bytes to the output
 stream to represent the value of the argument.
final void
DataOutputStream.
writeShort
(int v)
Writes a
short
to the underlying output stream as two
 bytes, high byte first.
void
ObjectOutputStream.
writeShort
(int val)
Writes a 16-bit short.
final void
RandomAccessFile.
writeShort
(int v)
Writes a
short
to the file as two bytes, high byte first.
protected void
ObjectOutputStream.
writeStreamHeader
()
The writeStreamHeader method is provided so subclasses can append or
 prepend their own header to the stream.
void
ByteArrayOutputStream.
writeTo
(
OutputStream
out)
Writes the complete contents of this
ByteArrayOutputStream
to
 the specified output stream argument, as if by calling the output
 stream's write method using
out.write(buf, 0, count)
.
void
CharArrayWriter.
writeTo
(
Writer
out)
Writes the contents of the buffer to another character stream.
void
ObjectOutputStream.
writeUnshared
(
Object
obj)
Writes an "unshared" object to the ObjectOutputStream.
void
DataOutput.
writeUTF
(
String
s)
Writes two bytes of length information
 to the output stream, followed
 by the
modified UTF-8
representation
 of  every character in the string
s
.
final void
DataOutputStream.
writeUTF
(
String
str)
Writes a string to the underlying output stream using
modified UTF-8
encoding in a machine-independent manner.
void
ObjectOutputStream.
writeUTF
(
String
str)
Primitive data write of this String in
modified UTF-8
format.
final void
RandomAccessFile.
writeUTF
(
String
str)
Writes a string to the file using
modified UTF-8
encoding in a machine-independent manner.
Constructors in
java.io
with parameters of type
IOException
Modifier
Constructor
Description
UncheckedIOException
(
IOException
cause)
Constructs an instance of this class.
UncheckedIOException
(
String
message,
IOException
cause)
Constructs an instance of this class.
Constructors in
java.io
that throw
IOException
Modifier
Constructor
Description
FileReader
(
File
file,
Charset
charset)
Creates a new
FileReader
, given the
File
to read and
 the
charset
.
FileReader
(
String
fileName,
Charset
charset)
Creates a new
FileReader
, given the name of the file to read
 and the
charset
.
FileWriter
(
File
file)
Constructs a
FileWriter
given the
File
to write,
 using the
default charset
FileWriter
(
File
file,
 boolean append)
Constructs a
FileWriter
given the
File
to write and
 a boolean indicating whether to append the data written, using the
default charset
.
FileWriter
(
File
file,
Charset
charset)
Constructs a
FileWriter
given the
File
to write and
charset
.
FileWriter
(
File
file,
Charset
charset,
 boolean append)
Constructs a
FileWriter
given the
File
to write,
charset
and a boolean indicating
 whether to append the data written.
FileWriter
(
String
fileName)
Constructs a
FileWriter
given a file name, using the
default charset
FileWriter
(
String
fileName,
 boolean append)
Constructs a
FileWriter
given a file name and a boolean indicating
 whether to append the data written, using the
default charset
.
FileWriter
(
String
fileName,
Charset
charset)
Constructs a
FileWriter
given a file name and
charset
.
FileWriter
(
String
fileName,
Charset
charset,
 boolean append)
Constructs a
FileWriter
given a file name,
charset
and a boolean indicating
 whether to append the data written.
protected
ObjectInputStream
()
Provide a way for subclasses that are completely reimplementing
 ObjectInputStream to not have to allocate private data just used by this
 implementation of ObjectInputStream.
ObjectInputStream
(
InputStream
in)
Creates an ObjectInputStream that reads from the specified InputStream.
protected
ObjectOutputStream
()
Provide a way for subclasses that are completely reimplementing
 ObjectOutputStream to not have to allocate private data just used by
 this implementation of ObjectOutputStream.
ObjectOutputStream
(
OutputStream
out)
Creates an ObjectOutputStream that writes to the specified OutputStream.
PipedInputStream
(
PipedOutputStream
src)
Creates a
PipedInputStream
so
 that it is connected to the piped output
 stream
src
.
PipedInputStream
(
PipedOutputStream
src,
 int pipeSize)
Creates a
PipedInputStream
so that it is
 connected to the piped output stream
src
and uses the specified pipe size for
 the pipe's buffer.
PipedOutputStream
(
PipedInputStream
snk)
Creates a piped output stream connected to the specified piped
 input stream.
PipedReader
(
PipedWriter
src)
Creates a
PipedReader
so
 that it is connected to the piped writer
src
.
PipedReader
(
PipedWriter
src,
 int pipeSize)
Creates a
PipedReader
so that it is connected
 to the piped writer
src
and uses the specified
 pipe size for the pipe's buffer.
PipedWriter
(
PipedReader
snk)
Creates a piped writer connected to the specified piped
 reader.
PrintStream
(
File
file,
Charset
charset)
Creates a new print stream, without automatic line flushing, with the
 specified file and charset.
PrintStream
(
String
fileName,
Charset
charset)
Creates a new print stream, without automatic line flushing, with the
 specified file name and charset.
PrintWriter
(
File
file,
Charset
charset)
Creates a new PrintWriter, without automatic line flushing, with the
 specified file and charset.
PrintWriter
(
String
fileName,
Charset
charset)
Creates a new PrintWriter, without automatic line flushing, with the
 specified file name and charset.
Uses of
IOException
in
java.lang
Methods in
java.lang
that throw
IOException
Modifier and Type
Method
Description
Appendable
Appendable.
append
(char c)
Appends the specified character to this
Appendable
.
Appendable
Appendable.
append
(
CharSequence
csq)
Appends the specified character sequence to this
Appendable
.
Appendable
Appendable.
append
(
CharSequence
csq,
 int start,
 int end)
Appends a subsequence of the specified character sequence to this
Appendable
.
Process
Runtime.
exec
(
String
command)
Deprecated.
This method is error-prone and should not be used, the corresponding method
Runtime.exec(String[])
or
ProcessBuilder
should be used instead.
Process
Runtime.
exec
(
String
[] cmdarray)
Executes the specified command and arguments in a separate process.
Process
Runtime.
exec
(
String
[] cmdarray,
String
[] envp)
Executes the specified command and arguments in a separate process
 with the specified environment.
Process
Runtime.
exec
(
String
[] cmdarray,
String
[] envp,
File
dir)
Executes the specified command and arguments in a separate process with
 the specified environment and working directory.
Process
Runtime.
exec
(
String
command,
String
[] envp)
Deprecated.
This method is error-prone and should not be used, the corresponding method
Runtime.exec(String[], String[])
or
ProcessBuilder
should be used instead.
Process
Runtime.
exec
(
String
command,
String
[] envp,
File
dir)
Deprecated.
This method is error-prone and should not be used, the corresponding method
Runtime.exec(String[], String[], File)
or
ProcessBuilder
should be used instead.
protected
URL
ClassLoader.
findResource
(
String
moduleName,
String
name)
Returns a URL to a resource in a module defined to this class loader.
protected
Enumeration
<
URL
>
ClassLoader.
findResources
(
String
name)
Returns an enumeration of
URL
objects
 representing all the resources with the given name.
InputStream
Module.
getResourceAsStream
(
String
name)
Returns an input stream for reading a resource in this module.
Enumeration
<
URL
>
ClassLoader.
getResources
(
String
name)
Finds all the resources with the given name.
static
Enumeration
<
URL
>
ClassLoader.
getSystemResources
(
String
name)
Finds all resources of the specified name from the search path used to
 load classes.
static
Channel
System.
inheritedChannel
()
Returns the channel inherited from the entity that created this
 Java virtual machine.
int
Readable.
read
(
CharBuffer
cb)
Attempts to read characters into the specified character buffer.
Process
ProcessBuilder.
start
()
Starts a new process using the attributes of this process builder.
static
List
<
Process
>
ProcessBuilder.
startPipeline
(
List
<
ProcessBuilder
> builders)
Starts a Process for each ProcessBuilder, creating a pipeline of
 processes linked by their standard output and standard input streams.
Uses of
IOException
in
java.lang.management
Methods in
java.lang.management
that throw
IOException
Modifier and Type
Method
Description
static <T extends
PlatformManagedObject
>
T
ManagementFactory.
getPlatformMXBean
(
MBeanServerConnection
connection,
Class
<T> mxbeanInterface)
Returns the platform MXBean proxy for
mxbeanInterface
which is specified to have one single
 instance in a Java virtual machine and the proxy will
 forward the method calls through the given
MBeanServerConnection
.
static <T extends
PlatformManagedObject
>
List
<T>
ManagementFactory.
getPlatformMXBeans
(
MBeanServerConnection
connection,
Class
<T> mxbeanInterface)
Returns the list of the platform MXBean proxies for
 forwarding the method calls of the
mxbeanInterface
through the given
MBeanServerConnection
.
static <T> T
ManagementFactory.
newPlatformMXBeanProxy
(
MBeanServerConnection
connection,
String
mxbeanName,
Class
<T> mxbeanInterface)
Returns a proxy for a platform MXBean interface of a
 given
MXBean name
that forwards its method calls through the given
MBeanServerConnection
.
Uses of
IOException
in
java.lang.module
Methods in
java.lang.module
that throw
IOException
Modifier and Type
Method
Description
void
ModuleReader.
close
()
Closes the module reader.
Optional
<
URI
>
ModuleReader.
find
(
String
name)
Finds a resource, returning a URI to the resource in the module.
Stream
<
String
>
ModuleReader.
list
()
Lists the contents of the module, returning a stream of elements that
 are the names of all resources in the module.
default
Optional
<
InputStream
>
ModuleReader.
open
(
String
name)
Opens a resource, returning an input stream to read the resource in
 the module.
abstract
ModuleReader
ModuleReference.
open
()
Opens the module content for reading.
static
ModuleDescriptor
ModuleDescriptor.
read
(
InputStream
in)
Reads the binary form of a module declaration from an input stream as a
 module descriptor.
static
ModuleDescriptor
ModuleDescriptor.
read
(
InputStream
in,
Supplier
<
Set
<
String
>> packageFinder)
Reads the binary form of a module declaration from an input stream
 as a module descriptor.
default
Optional
<
ByteBuffer
>
ModuleReader.
read
(
String
name)
Reads a resource, returning a byte buffer with the contents of the
 resource.
Uses of
IOException
in
java.net
Subclasses of
IOException
in
java.net
Modifier and Type
Class
Description
class
BindException
Signals that an error occurred while attempting to bind a
 socket to a local address and port.
class
ConnectException
Signals that an error occurred while attempting to connect a
 socket to a remote address and port.
class
HttpRetryException
Thrown to indicate that a HTTP request needs to be retried
 but cannot be retried automatically, due to streaming mode
 being enabled.
class
MalformedURLException
Thrown to indicate that a malformed URL has occurred.
class
NoRouteToHostException
Signals that an error occurred while attempting to connect a
 socket to a remote address and port.
class
PortUnreachableException
Signals that an ICMP Port Unreachable message has been
 received on a connected datagram.
class
ProtocolException
Thrown to indicate that there is an error in the underlying
 protocol, such as a TCP error.
class
SocketException
Thrown to indicate that there is an error creating or accessing a Socket.
class
SocketTimeoutException
Signals that a timeout has occurred on a socket read or accept.
class
UnknownHostException
Thrown to indicate that the IP address of a host could not be determined.
class
UnknownServiceException
Thrown to indicate that an unknown service exception has
 occurred.
Methods in
java.net
with parameters of type
IOException
Modifier and Type
Method
Description
abstract void
ProxySelector.
connectFailed
(
URI
uri,
SocketAddress
sa,
IOException
ioe)
Called to indicate that a connection could not be established
 to a proxy/socks server.
Methods in
java.net
that throw
IOException
Modifier and Type
Method
Description
Socket
ServerSocket.
accept
()
Listens for a connection to be made to this socket and accepts
 it.
protected abstract void
SocketImpl.
accept
(
SocketImpl
s)
Accepts a connection.
protected abstract int
SocketImpl.
available
()
Returns the number of bytes that can be read from this socket
 without blocking.
void
ServerSocket.
bind
(
SocketAddress
endpoint)
Binds the
ServerSocket
to a specific address
 (IP address and port number).
void
ServerSocket.
bind
(
SocketAddress
endpoint,
 int backlog)
Binds the
ServerSocket
to a specific address
 (IP address and port number).
void
Socket.
bind
(
SocketAddress
bindpoint)
Binds the socket to a local address.
protected abstract void
SocketImpl.
bind
(
InetAddress
host,
 int port)
Binds this socket to the specified local IP address and port number.
void
ServerSocket.
close
()
Closes this socket.
void
Socket.
close
()
Closes this socket.
protected abstract void
SocketImpl.
close
()
Closes this socket.
void
URLClassLoader.
close
()
Closes this URLClassLoader, so that it can no longer be used to load
 new classes or resources that are defined by this loader.
void
Socket.
connect
(
SocketAddress
endpoint)
Connects this socket to the server.
void
Socket.
connect
(
SocketAddress
endpoint,
 int timeout)
Connects this socket to the server with a specified timeout value.
protected abstract void
SocketImpl.
connect
(
String
host,
 int port)
Connects this socket to the specified port on the named host.
protected abstract void
SocketImpl.
connect
(
InetAddress
address,
 int port)
Connects this socket to the specified port number on the specified host.
protected abstract void
SocketImpl.
connect
(
SocketAddress
address,
 int timeout)
Connects this socket to the specified port number on the specified host.
abstract void
URLConnection.
connect
()
Opens a communications link to the resource referenced by this
 URL, if such a connection has not already been established.
protected abstract void
SocketImpl.
create
(boolean stream)
Creates either a stream or a datagram socket.
Enumeration
<
URL
>
URLClassLoader.
findResources
(
String
name)
Returns an Enumeration of URLs representing all of the resources
 on the URL search path having the specified name.
abstract
Map
<
String
,
List
<
String
>>
CookieHandler.
get
(
URI
uri,
Map
<
String
,
List
<
String
>> requestHeaders)
Gets all the applicable cookies from a cookie cache for the
 specified uri in the request header.
Map
<
String
,
List
<
String
>>
CookieManager.
get
(
URI
uri,
Map
<
String
,
List
<
String
>> requestHeaders)
abstract
CacheResponse
ResponseCache.
get
(
URI
uri,
String
rqstMethod,
Map
<
String
,
List
<
String
>> rqstHeaders)
Retrieve the cached response based on the requesting uri,
 request method and request headers.
Attributes
JarURLConnection.
getAttributes
()
Return the Attributes object for this connection if the URL
 for it points to a JAR file entry, null otherwise.
abstract
OutputStream
CacheRequest.
getBody
()
Returns an OutputStream to which the response body can be
 written.
abstract
InputStream
CacheResponse.
getBody
()
Returns the response body as an InputStream.
Certificate
[]
JarURLConnection.
getCertificates
()
Returns the Certificate objects for this connection if the URL
 for it points to a JAR file entry, null otherwise.
abstract
Object
ContentHandler.
getContent
(
URLConnection
urlc)
Given a URL connect stream positioned at the beginning of the
 representation of an object, this method reads that stream and
 creates an object from it.
Object
ContentHandler.
getContent
(
URLConnection
urlc,
Class
[] classes)
Given a URL connect stream positioned at the beginning of the
 representation of an object, this method reads that stream and
 creates an object that matches one of the types specified.
final
Object
URL.
getContent
()
Gets the contents of this URL.
final
Object
URL.
getContent
(
Class
<?>[] classes)
Gets the contents of this URL.
Object
URLConnection.
getContent
()
Retrieves the contents of this URL connection.
Object
URLConnection.
getContent
(
Class
<?>[] classes)
Retrieves the contents of this URL connection.
abstract
Map
<
String
,
List
<
String
>>
CacheResponse.
getHeaders
()
Returns the response headers as a Map.
InputStream
Socket.
getInputStream
()
Returns an input stream for this socket.
protected abstract
InputStream
SocketImpl.
getInputStream
()
Returns an input stream for this socket.
InputStream
URLConnection.
getInputStream
()
Returns an input stream that reads from this open connection.
JarEntry
JarURLConnection.
getJarEntry
()
Return the JAR entry object for this connection, if any.
abstract
JarFile
JarURLConnection.
getJarFile
()
Return the JAR file for this connection.
Attributes
JarURLConnection.
getMainAttributes
()
Returns the main Attributes for the JAR file for this
 connection.
Manifest
JarURLConnection.
getManifest
()
Returns the Manifest for this connection, or null if none.
<T> T
DatagramSocket.
getOption
(
SocketOption
<T> name)
Returns the value of a socket option.
protected <T> T
DatagramSocketImpl.
getOption
(
SocketOption
<T> name)
Called to get a socket option.
<T> T
ServerSocket.
getOption
(
SocketOption
<T> name)
Returns the value of a socket option.
<T> T
Socket.
getOption
(
SocketOption
<T> name)
Returns the value of a socket option.
protected <T> T
SocketImpl.
getOption
(
SocketOption
<T> name)
Called to get a socket option.
OutputStream
Socket.
getOutputStream
()
Returns an output stream for this socket.
protected abstract
OutputStream
SocketImpl.
getOutputStream
()
Returns an output stream for this socket.
OutputStream
URLConnection.
getOutputStream
()
Returns an output stream that writes to this connection.
Permission
HttpURLConnection.
getPermission
()
Returns a
SocketPermission
object representing the
 permission necessary to connect to the destination host and port.
Permission
URLConnection.
getPermission
()
Returns a permission object representing the permission
 necessary to make the connection represented by this
 object.
int
HttpURLConnection.
getResponseCode
()
Gets the status code from an HTTP response message.
String
HttpURLConnection.
getResponseMessage
()
Gets the HTTP response message, if any, returned along with the
 response code from a server.
int
ServerSocket.
getSoTimeout
()
Retrieve setting for
SO_TIMEOUT
.
 0 returns implies that the option is disabled (i.e., timeout of infinity).
protected abstract int
DatagramSocketImpl.
getTimeToLive
()
Retrieve the TTL (time-to-live) option.
int
MulticastSocket.
getTimeToLive
()
Get the default time-to-live for multicast packets sent out on
 the socket.
protected abstract byte
DatagramSocketImpl.
getTTL
()
Deprecated.
use getTimeToLive instead.
byte
MulticastSocket.
getTTL
()
Deprecated.
use the
MulticastSocket.getTimeToLive()
method instead,
 which returns an
int
instead of a
byte
.
static
String
URLConnection.
guessContentTypeFromStream
(
InputStream
is)
Tries to determine the type of an input stream based on the
 characters at the beginning of the input stream.
protected final void
ServerSocket.
implAccept
(
Socket
s)
Subclasses of ServerSocket use this method to override accept()
 to return their own subclass of socket.
boolean
InetAddress.
isReachable
(int timeout)
Test whether that address is reachable.
boolean
InetAddress.
isReachable
(
NetworkInterface
netif,
 int ttl,
 int timeout)
Test whether that address is reachable.
protected abstract void
DatagramSocketImpl.
join
(
InetAddress
inetaddr)
Join the multicast group.
void
DatagramSocket.
joinGroup
(
SocketAddress
mcastaddr,
NetworkInterface
netIf)
Joins a multicast group.
protected abstract void
DatagramSocketImpl.
joinGroup
(
SocketAddress
mcastaddr,
NetworkInterface
netIf)
Join the multicast group.
void
MulticastSocket.
joinGroup
(
InetAddress
mcastaddr)
Deprecated.
This method does not accept the network interface on
             which to join the multicast group.
void
MulticastSocket.
joinGroup
(
SocketAddress
mcastaddr,
NetworkInterface
netIf)
Joins a multicast group.
protected abstract void
DatagramSocketImpl.
leave
(
InetAddress
inetaddr)
Leave the multicast group.
void
DatagramSocket.
leaveGroup
(
SocketAddress
mcastaddr,
NetworkInterface
netIf)
Leave a multicast group on a specified local interface.
protected abstract void
DatagramSocketImpl.
leaveGroup
(
SocketAddress
mcastaddr,
NetworkInterface
netIf)
Leave the multicast group.
void
MulticastSocket.
leaveGroup
(
InetAddress
mcastaddr)
Deprecated.
This method does not accept the network interface on which
             to leave the multicast group.
void
MulticastSocket.
leaveGroup
(
SocketAddress
mcastaddr,
NetworkInterface
netIf)
Leave a multicast group on a specified local interface.
protected abstract void
SocketImpl.
listen
(int backlog)
Sets the maximum queue length for incoming connection indications
 (a request to connect) to the
count
argument.
URLConnection
URL.
openConnection
()
Returns a
URLConnection
instance that
 represents a connection to the remote object referred to by the
URL
.
URLConnection
URL.
openConnection
(
Proxy
proxy)
Same as
URL.openConnection()
, except that the connection will be
 made through the specified proxy; Protocol handlers that do not
 support proxying will ignore the proxy parameter and make a
 normal connection.
protected abstract
URLConnection
URLStreamHandler.
openConnection
(
URL
u)
Opens a connection to the object referenced by the
URL
argument.
protected
URLConnection
URLStreamHandler.
openConnection
(
URL
u,
Proxy
p)
Same as openConnection(URL), except that the connection will be
 made through the specified proxy; Protocol handlers that do not
 support proxying will ignore the proxy parameter and make a
 normal connection.
final
InputStream
URL.
openStream
()
Opens a connection to this
URL
and returns an
InputStream
for reading from that connection.
protected abstract int
DatagramSocketImpl.
peek
(
InetAddress
i)
Peek at the packet to see who it is from.
protected abstract int
DatagramSocketImpl.
peekData
(
DatagramPacket
p)
Peek at the packet to see who it is from.
abstract void
CookieHandler.
put
(
URI
uri,
Map
<
String
,
List
<
String
>> responseHeaders)
Sets all the applicable cookies, examples are response header
 fields that are named Set-Cookie2, present in the response
 headers into a cookie cache.
void
CookieManager.
put
(
URI
uri,
Map
<
String
,
List
<
String
>> responseHeaders)
abstract
CacheRequest
ResponseCache.
put
(
URI
uri,
URLConnection
conn)
The protocol handler calls this method after a resource has
 been retrieved, and the ResponseCache must decide whether or
 not to store the resource in its cache.
void
DatagramSocket.
receive
(
DatagramPacket
p)
Receives a datagram packet from this socket.
protected abstract void
DatagramSocketImpl.
receive
(
DatagramPacket
p)
Receive the datagram packet.
void
DatagramSocket.
send
(
DatagramPacket
p)
Sends a datagram packet from this socket.
protected abstract void
DatagramSocketImpl.
send
(
DatagramPacket
p)
Sends a datagram packet.
void
MulticastSocket.
send
(
DatagramPacket
p,
 byte ttl)
Deprecated.
Use the following code or its equivalent instead:
void
Socket.
sendUrgentData
(int data)
Send one byte of urgent data on the socket.
protected abstract void
SocketImpl.
sendUrgentData
(int data)
Send one byte of urgent data on the socket.
static void
DatagramSocket.
setDatagramSocketImplFactory
(
DatagramSocketImplFactory
fac)
Deprecated.
Use
DatagramChannel
, or subclass
DatagramSocket
directly.
<T>
DatagramSocket
DatagramSocket.
setOption
(
SocketOption
<T> name,
 T value)
Sets the value of a socket option.
protected <T> void
DatagramSocketImpl.
setOption
(
SocketOption
<T> name,
 T value)
Called to set a socket option.
<T>
ServerSocket
ServerSocket.
setOption
(
SocketOption
<T> name,
 T value)
Sets the value of a socket option.
<T>
Socket
Socket.
setOption
(
SocketOption
<T> name,
 T value)
Sets the value of a socket option.
protected <T> void
SocketImpl.
setOption
(
SocketOption
<T> name,
 T value)
Called to set a socket option.
static void
ServerSocket.
setSocketFactory
(
SocketImplFactory
fac)
Deprecated.
Use a
ServerSocketFactory
and subclass
ServerSocket
directly.
static void
Socket.
setSocketImplFactory
(
SocketImplFactory
fac)
Deprecated.
Use a
SocketFactory
and subclass
Socket
directly.
protected abstract void
DatagramSocketImpl.
setTimeToLive
(int ttl)
Set the TTL (time-to-live) option.
void
MulticastSocket.
setTimeToLive
(int ttl)
Set the default time-to-live for multicast packets sent out
 on this
MulticastSocket
in order to control the
 scope of the multicasts.
protected abstract void
DatagramSocketImpl.
setTTL
(byte ttl)
Deprecated.
use setTimeToLive instead.
void
MulticastSocket.
setTTL
(byte ttl)
Deprecated.
use the
MulticastSocket.setTimeToLive(int)
method instead, which uses
int
instead of
byte
as the type for ttl.
void
Socket.
shutdownInput
()
Places the input stream for this socket at "end of stream".
protected void
SocketImpl.
shutdownInput
()
Places the input stream for this socket at "end of stream".
void
Socket.
shutdownOutput
()
Disables the output stream for this socket.
protected void
SocketImpl.
shutdownOutput
()
Disables the output stream for this socket.
Constructors in
java.net
that throw
IOException
Modifier
Constructor
Description
MulticastSocket
()
Constructs a multicast socket and binds it to any available port
 on the local host machine.
MulticastSocket
(int port)
Constructs a multicast socket and binds it to the specified port
 on the local host machine.
MulticastSocket
(
SocketAddress
bindaddr)
Creates a multicast socket, bound to the specified local
 socket address.
ServerSocket
()
Creates an unbound server socket.
ServerSocket
(int port)
Creates a server socket, bound to the specified port.
ServerSocket
(int port,
 int backlog)
Creates a server socket and binds it to the specified local port
 number, with the specified backlog.
ServerSocket
(int port,
 int backlog,
InetAddress
bindAddr)
Create a server with the specified port, listen backlog, and
 local IP address to bind to.
Socket
(
String
host,
 int port)
Creates a stream socket and connects it to the specified port
 number on the named host.
Socket
(
String
host,
 int port,
 boolean stream)
Deprecated.
Use DatagramSocket instead for UDP transport.
Socket
(
String
host,
 int port,
InetAddress
localAddr,
 int localPort)
Creates a socket and connects it to the specified remote host on
 the specified remote port.
Socket
(
InetAddress
address,
 int port)
Creates a stream socket and connects it to the specified port
 number at the specified IP address.
Socket
(
InetAddress
host,
 int port,
 boolean stream)
Deprecated.
Use DatagramSocket instead for UDP transport.
Socket
(
InetAddress
address,
 int port,
InetAddress
localAddr,
 int localPort)
Creates a socket and connects it to the specified remote address on
 the specified remote port.
Uses of
IOException
in
java.net.http
Subclasses of
IOException
in
java.net.http
Modifier and Type
Class
Description
class
HttpConnectTimeoutException
Thrown when a connection, over which an
HttpRequest
is intended to be
 sent, is not successfully established within a specified time period.
class
HttpTimeoutException
Thrown when a response is not received within a specified time period.
final class
WebSocketHandshakeException
Thrown when the opening handshake has failed.
Methods in
java.net.http
that throw
IOException
Modifier and Type
Method
Description
abstract <T>
HttpResponse
<T>
HttpClient.
send
(
HttpRequest
request,
HttpResponse.BodyHandler
<T> responseBodyHandler)
Sends the given request using this client, blocking if necessary to get
 the response.
Uses of
IOException
in
java.nio
Methods in
java.nio
that throw
IOException
Modifier and Type
Method
Description
int
CharBuffer.
read
(
CharBuffer
target)
Attempts to read characters into the specified character buffer.
Uses of
IOException
in
java.nio.channels
Subclasses of
IOException
in
java.nio.channels
Modifier and Type
Class
Description
class
AsynchronousCloseException
Checked exception received by a thread when another thread closes the
 channel or the part of the channel upon which it is blocked in an I/O
 operation.
class
ClosedByInterruptException
Checked exception received by a thread when another thread interrupts it
 while it is blocked in an I/O operation upon a channel.
class
ClosedChannelException
Checked exception thrown when an attempt is made to invoke or complete an
 I/O operation upon channel that is closed, or at least closed to that
 operation.
class
FileLockInterruptionException
Checked exception received by a thread when another thread interrupts it
 while it is waiting to acquire a file lock.
class
InterruptedByTimeoutException
Checked exception received by a thread when a timeout elapses before an
 asynchronous operation completes.
Methods in
java.nio.channels
that throw
IOException
Modifier and Type
Method
Description
abstract
SocketChannel
ServerSocketChannel.
accept
()
Accepts a connection made to this channel's socket.
final
AsynchronousServerSocketChannel
AsynchronousServerSocketChannel.
bind
(
SocketAddress
local)
Binds the channel's socket to a local address and configures the socket to
 listen for connections.
abstract
AsynchronousServerSocketChannel
AsynchronousServerSocketChannel.
bind
(
SocketAddress
local,
 int backlog)
Binds the channel's socket to a local address and configures the socket to
 listen for connections.
abstract
AsynchronousSocketChannel
AsynchronousSocketChannel.
bind
(
SocketAddress
local)
abstract
DatagramChannel
DatagramChannel.
bind
(
SocketAddress
local)
NetworkChannel
NetworkChannel.
bind
(
SocketAddress
local)
Binds the channel's socket to a local address.
final
ServerSocketChannel
ServerSocketChannel.
bind
(
SocketAddress
local)
Binds the channel's socket to a local address and configures the socket
 to listen for connections.
abstract
ServerSocketChannel
ServerSocketChannel.
bind
(
SocketAddress
local,
 int backlog)
Binds the channel's socket to a local address and configures the socket to
 listen for connections.
abstract
SocketChannel
SocketChannel.
bind
(
SocketAddress
local)
Binds the channel's socket to a local address.
abstract
MembershipKey
MembershipKey.
block
(
InetAddress
source)
Block multicast datagrams from the given source address.
void
AsynchronousChannel.
close
()
Closes this channel.
void
Channel.
close
()
Closes this channel.
final void
FileLock.
close
()
This method invokes the
FileLock.release()
method.
void
InterruptibleChannel.
close
()
Closes this channel.
void
MulticastChannel.
close
()
Closes this channel.
abstract void
Selector.
close
()
Closes this selector.
abstract
SelectableChannel
SelectableChannel.
configureBlocking
(boolean block)
Adjusts this channel's blocking mode.
abstract
DatagramChannel
DatagramChannel.
connect
(
SocketAddress
remote)
Connects this channel's socket.
abstract boolean
SocketChannel.
connect
(
SocketAddress
remote)
Connects this channel's socket.
abstract
DatagramChannel
DatagramChannel.
disconnect
()
Disconnects this channel's socket.
abstract boolean
SocketChannel.
finishConnect
()
Finishes the process of connecting a socket channel.
abstract void
AsynchronousFileChannel.
force
(boolean metaData)
Forces any updates to this channel's file to be written to the storage
 device that contains it.
abstract void
FileChannel.
force
(boolean metaData)
Forces any updates to this channel's file to be written to the storage
 device that contains it.
abstract
SocketAddress
AsynchronousServerSocketChannel.
getLocalAddress
()
Returns the socket address that this channel's socket is bound to.
abstract
SocketAddress
AsynchronousSocketChannel.
getLocalAddress
()
Returns the socket address that this channel's socket is bound to.
abstract
SocketAddress
DatagramChannel.
getLocalAddress
()
Returns the socket address that this channel's socket is bound to.
SocketAddress
NetworkChannel.
getLocalAddress
()
Returns the socket address that this channel's socket is bound to.
abstract
SocketAddress
ServerSocketChannel.
getLocalAddress
()
Returns the socket address that this channel's socket is bound to.
abstract
SocketAddress
SocketChannel.
getLocalAddress
()
Returns the socket address that this channel's socket is bound to.
<T> T
NetworkChannel.
getOption
(
SocketOption
<T> name)
Returns the value of a socket option.
abstract
SocketAddress
AsynchronousSocketChannel.
getRemoteAddress
()
Returns the remote address to which this channel's socket is connected.
abstract
SocketAddress
DatagramChannel.
getRemoteAddress
()
Returns the remote address to which this channel's socket is connected.
abstract
SocketAddress
SocketChannel.
getRemoteAddress
()
Returns the remote address to which this channel's socket is connected.
MembershipKey
MulticastChannel.
join
(
InetAddress
group,
NetworkInterface
interf)
Joins a multicast group to begin receiving all datagrams sent to the group,
 returning a membership key.
MembershipKey
MulticastChannel.
join
(
InetAddress
group,
NetworkInterface
interf,
InetAddress
source)
Joins a multicast group to begin receiving datagrams sent to the group
 from a given source address.
final
FileLock
FileChannel.
lock
()
Acquires an exclusive lock on this channel's file.
abstract
FileLock
FileChannel.
lock
(long position,
 long size,
 boolean shared)
Acquires a lock on the given region of this channel's file.
abstract
MappedByteBuffer
FileChannel.
map
(
FileChannel.MapMode
mode,
 long position,
 long size)
Maps a region of this channel's file directly into memory.
MemorySegment
PREVIEW
FileChannel.
map
(
FileChannel.MapMode
mode,
 long offset,
 long size,
Arena
PREVIEW
arena)
Preview.
Maps a region of this channel's file into a new mapped memory segment,
 with the given offset, size and arena.
static
AsynchronousFileChannel
AsynchronousFileChannel.
open
(
Path
file,
OpenOption
... options)
Opens or creates a file for reading and/or writing, returning an
 asynchronous file channel to access the file.
static
AsynchronousFileChannel
AsynchronousFileChannel.
open
(
Path
file,
Set
<? extends
OpenOption
> options,
ExecutorService
executor,
FileAttribute
<?>... attrs)
Opens or creates a file for reading and/or writing, returning an
 asynchronous file channel to access the file.
static
AsynchronousServerSocketChannel
AsynchronousServerSocketChannel.
open
()
Opens an asynchronous server-socket channel.
static
AsynchronousServerSocketChannel
AsynchronousServerSocketChannel.
open
(
AsynchronousChannelGroup
group)
Opens an asynchronous server-socket channel.
static
AsynchronousSocketChannel
AsynchronousSocketChannel.
open
()
Opens an asynchronous socket channel.
static
AsynchronousSocketChannel
AsynchronousSocketChannel.
open
(
AsynchronousChannelGroup
group)
Opens an asynchronous socket channel.
static
DatagramChannel
DatagramChannel.
open
()
Opens a datagram channel.
static
DatagramChannel
DatagramChannel.
open
(
ProtocolFamily
family)
Opens a datagram channel.
static
FileChannel
FileChannel.
open
(
Path
path,
OpenOption
... options)
Opens or creates a file, returning a file channel to access the file.
static
FileChannel
FileChannel.
open
(
Path
path,
Set
<? extends
OpenOption
> options,
FileAttribute
<?>... attrs)
Opens or creates a file, returning a file channel to access the file.
static
Pipe
Pipe.
open
()
Opens a pipe.
static
Selector
Selector.
open
()
Opens a selector.
static
ServerSocketChannel
ServerSocketChannel.
open
()
Opens a server-socket channel for an
Internet protocol
socket.
static
ServerSocketChannel
ServerSocketChannel.
open
(
ProtocolFamily
family)
Opens a server-socket channel.
static
SocketChannel
SocketChannel.
open
()
Opens a socket channel for an
Internet protocol
socket.
static
SocketChannel
SocketChannel.
open
(
ProtocolFamily
family)
Opens a socket channel.
static
SocketChannel
SocketChannel.
open
(
SocketAddress
remote)
Opens a socket channel and connects it to a remote address.
abstract long
FileChannel.
position
()
Returns this channel's file position.
abstract
FileChannel
FileChannel.
position
(long newPosition)
Sets this channel's file position.
long
SeekableByteChannel.
position
()
Returns this channel's position.
SeekableByteChannel
SeekableByteChannel.
position
(long newPosition)
Sets this channel's position.
abstract int
DatagramChannel.
read
(
ByteBuffer
dst)
Reads a datagram from this channel.
final long
DatagramChannel.
read
(
ByteBuffer
[] dsts)
Reads a datagram from this channel.
abstract long
DatagramChannel.
read
(
ByteBuffer
[] dsts,
 int offset,
 int length)
Reads a datagram from this channel.
abstract int
FileChannel.
read
(
ByteBuffer
dst)
Reads a sequence of bytes from this channel into the given buffer.
final long
FileChannel.
read
(
ByteBuffer
[] dsts)
Reads a sequence of bytes from this channel into the given buffers.
abstract long
FileChannel.
read
(
ByteBuffer
[] dsts,
 int offset,
 int length)
Reads a sequence of bytes from this channel into a subsequence of the
 given buffers.
abstract int
FileChannel.
read
(
ByteBuffer
dst,
 long position)
Reads a sequence of bytes from this channel into the given buffer,
 starting at the given file position.
int
ReadableByteChannel.
read
(
ByteBuffer
dst)
Reads a sequence of bytes from this channel into the given buffer.
long
ScatteringByteChannel.
read
(
ByteBuffer
[] dsts)
Reads a sequence of bytes from this channel into the given buffers.
long
ScatteringByteChannel.
read
(
ByteBuffer
[] dsts,
 int offset,
 int length)
Reads a sequence of bytes from this channel into a subsequence of the
 given buffers.
int
SeekableByteChannel.
read
(
ByteBuffer
dst)
Reads a sequence of bytes from this channel into the given buffer.
abstract int
SocketChannel.
read
(
ByteBuffer
dst)
final long
SocketChannel.
read
(
ByteBuffer
[] dsts)
abstract long
SocketChannel.
read
(
ByteBuffer
[] dsts,
 int offset,
 int length)
abstract
SocketAddress
DatagramChannel.
receive
(
ByteBuffer
dst)
Receives a datagram via this channel.
abstract void
FileLock.
release
()
Releases this lock.
abstract int
Selector.
select
()
Selects a set of keys whose corresponding channels are ready for I/O
 operations.
abstract int
Selector.
select
(long timeout)
Selects a set of keys whose corresponding channels are ready for I/O
 operations.
int
Selector.
select
(
Consumer
<
SelectionKey
> action)
Selects and performs an action on the keys whose corresponding channels
 are ready for I/O operations.
int
Selector.
select
(
Consumer
<
SelectionKey
> action,
 long timeout)
Selects and performs an action on the keys whose corresponding channels
 are ready for I/O operations.
abstract int
Selector.
selectNow
()
Selects a set of keys whose corresponding channels are ready for I/O
 operations.
int
Selector.
selectNow
(
Consumer
<
SelectionKey
> action)
Selects and performs an action on the keys whose corresponding channels
 are ready for I/O operations.
abstract int
DatagramChannel.
send
(
ByteBuffer
src,
SocketAddress
target)
Sends a datagram via this channel.
abstract <T>
AsynchronousServerSocketChannel
AsynchronousServerSocketChannel.
setOption
(
SocketOption
<T> name,
 T value)
abstract <T>
AsynchronousSocketChannel
AsynchronousSocketChannel.
setOption
(
SocketOption
<T> name,
 T value)
abstract <T>
DatagramChannel
DatagramChannel.
setOption
(
SocketOption
<T> name,
 T value)
<T>
NetworkChannel
NetworkChannel.
setOption
(
SocketOption
<T> name,
 T value)
Sets the value of a socket option.
abstract <T>
ServerSocketChannel
ServerSocketChannel.
setOption
(
SocketOption
<T> name,
 T value)
abstract <T>
SocketChannel
SocketChannel.
setOption
(
SocketOption
<T> name,
 T value)
abstract
AsynchronousSocketChannel
AsynchronousSocketChannel.
shutdownInput
()
Shutdown the connection for reading without closing the channel.
abstract
SocketChannel
SocketChannel.
shutdownInput
()
Shutdown the connection for reading without closing the channel.
abstract void
AsynchronousChannelGroup.
shutdownNow
()
Shuts down the group and closes all open channels in the group.
abstract
AsynchronousSocketChannel
AsynchronousSocketChannel.
shutdownOutput
()
Shutdown the connection for writing without closing the channel.
abstract
SocketChannel
SocketChannel.
shutdownOutput
()
Shutdown the connection for writing without closing the channel.
abstract long
AsynchronousFileChannel.
size
()
Returns the current size of this channel's file.
abstract long
FileChannel.
size
()
Returns the current size of this channel's file.
long
SeekableByteChannel.
size
()
Returns the current size of entity to which this channel is connected.
abstract long
FileChannel.
transferFrom
(
ReadableByteChannel
src,
 long position,
 long count)
Transfers bytes into this channel's file from the given readable byte
 channel.
abstract long
FileChannel.
transferTo
(long position,
 long count,
WritableByteChannel
target)
Transfers bytes from this channel's file to the given writable byte
 channel.
abstract
AsynchronousFileChannel
AsynchronousFileChannel.
truncate
(long size)
Truncates this channel's file to the given size.
abstract
FileChannel
FileChannel.
truncate
(long size)
Truncates this channel's file to the given size.
SeekableByteChannel
SeekableByteChannel.
truncate
(long size)
Truncates the entity, to which this channel is connected, to the given
 size.
final
FileLock
AsynchronousFileChannel.
tryLock
()
Attempts to acquire an exclusive lock on this channel's file.
abstract
FileLock
AsynchronousFileChannel.
tryLock
(long position,
 long size,
 boolean shared)
Attempts to acquire a lock on the given region of this channel's file.
final
FileLock
FileChannel.
tryLock
()
Attempts to acquire an exclusive lock on this channel's file.
abstract
FileLock
FileChannel.
tryLock
(long position,
 long size,
 boolean shared)
Attempts to acquire a lock on the given region of this channel's file.
static
AsynchronousChannelGroup
AsynchronousChannelGroup.
withCachedThreadPool
(
ExecutorService
executor,
 int initialSize)
Creates an asynchronous channel group with a given thread pool that
 creates new threads as needed.
static
AsynchronousChannelGroup
AsynchronousChannelGroup.
withFixedThreadPool
(int nThreads,
ThreadFactory
threadFactory)
Creates an asynchronous channel group with a fixed thread pool.
static
AsynchronousChannelGroup
AsynchronousChannelGroup.
withThreadPool
(
ExecutorService
executor)
Creates an asynchronous channel group with a given thread pool.
abstract int
DatagramChannel.
write
(
ByteBuffer
src)
Writes a datagram to this channel.
final long
DatagramChannel.
write
(
ByteBuffer
[] srcs)
Writes a datagram to this channel.
abstract long
DatagramChannel.
write
(
ByteBuffer
[] srcs,
 int offset,
 int length)
Writes a datagram to this channel.
abstract int
FileChannel.
write
(
ByteBuffer
src)
Writes a sequence of bytes to this channel from the given buffer.
final long
FileChannel.
write
(
ByteBuffer
[] srcs)
Writes a sequence of bytes to this channel from the given buffers.
abstract long
FileChannel.
write
(
ByteBuffer
[] srcs,
 int offset,
 int length)
Writes a sequence of bytes to this channel from a subsequence of the
 given buffers.
abstract int
FileChannel.
write
(
ByteBuffer
src,
 long position)
Writes a sequence of bytes to this channel from the given buffer,
 starting at the given file position.
long
GatheringByteChannel.
write
(
ByteBuffer
[] srcs)
Writes a sequence of bytes to this channel from the given buffers.
long
GatheringByteChannel.
write
(
ByteBuffer
[] srcs,
 int offset,
 int length)
Writes a sequence of bytes to this channel from a subsequence of the
 given buffers.
int
SeekableByteChannel.
write
(
ByteBuffer
src)
Writes a sequence of bytes to this channel from the given buffer.
abstract int
SocketChannel.
write
(
ByteBuffer
src)
final long
SocketChannel.
write
(
ByteBuffer
[] srcs)
abstract long
SocketChannel.
write
(
ByteBuffer
[] srcs,
 int offset,
 int length)
int
WritableByteChannel.
write
(
ByteBuffer
src)
Writes a sequence of bytes to this channel from the given buffer.
Uses of
IOException
in
java.nio.channels.spi
Methods in
java.nio.channels.spi
that throw
IOException
Modifier and Type
Method
Description
final void
AbstractInterruptibleChannel.
close
()
Closes this channel.
final void
AbstractSelector.
close
()
Closes this selector.
final
SelectableChannel
AbstractSelectableChannel.
configureBlocking
(boolean block)
Adjusts this channel's blocking mode.
protected abstract void
AbstractInterruptibleChannel.
implCloseChannel
()
Closes this channel.
protected final void
AbstractSelectableChannel.
implCloseChannel
()
Closes this channel.
protected abstract void
AbstractSelectableChannel.
implCloseSelectableChannel
()
Closes this selectable channel.
protected abstract void
AbstractSelector.
implCloseSelector
()
Closes this selector.
protected abstract void
AbstractSelectableChannel.
implConfigureBlocking
(boolean block)
Adjusts this channel's blocking mode.
Channel
SelectorProvider.
inheritedChannel
()
Returns the channel inherited from the entity that created this
 Java virtual machine.
abstract
AsynchronousChannelGroup
AsynchronousChannelProvider.
openAsynchronousChannelGroup
(int nThreads,
ThreadFactory
threadFactory)
Constructs a new asynchronous channel group with a fixed thread pool.
abstract
AsynchronousChannelGroup
AsynchronousChannelProvider.
openAsynchronousChannelGroup
(
ExecutorService
executor,
 int initialSize)
Constructs a new asynchronous channel group with the given thread pool.
abstract
AsynchronousServerSocketChannel
AsynchronousChannelProvider.
openAsynchronousServerSocketChannel
(
AsynchronousChannelGroup
group)
Opens an asynchronous server-socket channel.
abstract
AsynchronousSocketChannel
AsynchronousChannelProvider.
openAsynchronousSocketChannel
(
AsynchronousChannelGroup
group)
Opens an asynchronous socket channel.
abstract
DatagramChannel
SelectorProvider.
openDatagramChannel
()
Opens a datagram channel.
abstract
DatagramChannel
SelectorProvider.
openDatagramChannel
(
ProtocolFamily
family)
Opens a datagram channel.
abstract
Pipe
SelectorProvider.
openPipe
()
Opens a pipe.
abstract
AbstractSelector
SelectorProvider.
openSelector
()
Opens a selector.
abstract
ServerSocketChannel
SelectorProvider.
openServerSocketChannel
()
Opens a server-socket channel.
ServerSocketChannel
SelectorProvider.
openServerSocketChannel
(
ProtocolFamily
family)
Opens a server-socket channel.
abstract
SocketChannel
SelectorProvider.
openSocketChannel
()
Opens a socket channel.
SocketChannel
SelectorProvider.
openSocketChannel
(
ProtocolFamily
family)
Opens a socket channel.
Uses of
IOException
in
java.nio.charset
Subclasses of
IOException
in
java.nio.charset
Modifier and Type
Class
Description
class
CharacterCodingException
Checked exception thrown when a character encoding
 or decoding error occurs.
class
MalformedInputException
Checked exception thrown when an input byte sequence is not legal for given
 charset, or an input character sequence is not a legal sixteen-bit Unicode
 sequence.
class
UnmappableCharacterException
Checked exception thrown when an input character (or byte) sequence
 is valid but cannot be mapped to an output byte (or character)
 sequence.
Uses of
IOException
in
java.nio.file
Subclasses of
IOException
in
java.nio.file
Modifier and Type
Class
Description
class
AccessDeniedException
Checked exception thrown when a file system operation is denied, typically
 due to a file permission or other access check.
class
AtomicMoveNotSupportedException
Checked exception thrown when a file cannot be moved as an atomic file system
 operation.
class
DirectoryNotEmptyException
Checked exception thrown when a file system operation fails because a
 directory is not empty.
class
FileAlreadyExistsException
Checked exception thrown when an attempt is made to create a file or
 directory and a file of that name already exists.
class
FileSystemException
Thrown when a file system operation fails on one or two files.
class
FileSystemLoopException
Checked exception thrown when a file system loop, or cycle, is encountered.
class
NoSuchFileException
Checked exception thrown when an attempt is made to access a file that does
 not exist.
class
NotDirectoryException
Checked exception thrown when a file system operation, intended for a
 directory, fails because the file is not a directory.
class
NotLinkException
Checked exception thrown when a file system operation fails because a file
 is not a symbolic link.
Methods in
java.nio.file
that return
IOException
Modifier and Type
Method
Description
IOException
DirectoryIteratorException.
getCause
()
Returns the cause of this exception.
Methods in
java.nio.file
with parameters of type
IOException
Modifier and Type
Method
Description
FileVisitResult
FileVisitor.
postVisitDirectory
(
T
dir,
IOException
exc)
Invoked for a directory after entries in the directory, and all of their
 descendants, have been visited.
FileVisitResult
SimpleFileVisitor.
postVisitDirectory
(
T
dir,
IOException
exc)
Invoked for a directory after entries in the directory, and all of their
 descendants, have been visited.
FileVisitResult
FileVisitor.
visitFileFailed
(
T
file,
IOException
exc)
Invoked for a file that could not be visited.
FileVisitResult
SimpleFileVisitor.
visitFileFailed
(
T
file,
IOException
exc)
Invoked for a file that could not be visited.
Methods in
java.nio.file
that throw
IOException
Modifier and Type
Method
Description
boolean
DirectoryStream.Filter.
accept
(
T
entry)
Decides if the given directory entry should be accepted or filtered.
abstract void
FileSystem.
close
()
Closes this file system.
void
WatchService.
close
()
Closes this watch service.
static long
Files.
copy
(
InputStream
in,
Path
target,
CopyOption
... options)
Copies all bytes from an input stream to a file.
static long
Files.
copy
(
Path
source,
OutputStream
out)
Copies all bytes from a file to an output stream.
static
Path
Files.
copy
(
Path
source,
Path
target,
CopyOption
... options)
Copy a file to a target file.
static
Path
Files.
createDirectories
(
Path
dir,
FileAttribute
<?>... attrs)
Creates a directory by creating all nonexistent parent directories first.
static
Path
Files.
createDirectory
(
Path
dir,
FileAttribute
<?>... attrs)
Creates a new directory.
static
Path
Files.
createFile
(
Path
path,
FileAttribute
<?>... attrs)
Creates a new and empty file, failing if the file already exists.
static
Path
Files.
createLink
(
Path
link,
Path
existing)
Creates a new link (directory entry) for an existing file
(optional
 operation)
.
static
Path
Files.
createSymbolicLink
(
Path
link,
Path
target,
FileAttribute
<?>... attrs)
Creates a symbolic link to a target
(optional operation)
.
static
Path
Files.
createTempDirectory
(
String
prefix,
FileAttribute
<?>... attrs)
Creates a new directory in the default temporary-file directory, using
 the given prefix to generate its name.
static
Path
Files.
createTempDirectory
(
Path
dir,
String
prefix,
FileAttribute
<?>... attrs)
Creates a new directory in the specified directory, using the given
 prefix to generate its name.
static
Path
Files.
createTempFile
(
String
prefix,
String
suffix,
FileAttribute
<?>... attrs)
Creates an empty file in the default temporary-file directory, using
 the given prefix and suffix to generate its name.
static
Path
Files.
createTempFile
(
Path
dir,
String
prefix,
String
suffix,
FileAttribute
<?>... attrs)
Creates a new empty file in the specified directory, using the given
 prefix and suffix strings to generate its name.
static void
Files.
delete
(
Path
path)
Deletes a file.
void
SecureDirectoryStream.
deleteDirectory
(
T
path)
Deletes a directory.
void
SecureDirectoryStream.
deleteFile
(
T
path)
Deletes a file.
static boolean
Files.
deleteIfExists
(
Path
path)
Deletes a file if it exists.
static
Stream
<
Path
>
Files.
find
(
Path
start,
 int maxDepth,
BiPredicate
<
Path
,
BasicFileAttributes
> matcher,
FileVisitOption
... options)
Return a
Stream
that is lazily populated with
Path
by searching for files in a file tree rooted at a given starting
 file.
static
Object
Files.
getAttribute
(
Path
path,
String
attribute,
LinkOption
... options)
Reads the value of a file attribute.
abstract
Object
FileStore.
getAttribute
(
String
attribute)
Reads the value of a file store attribute.
long
FileStore.
getBlockSize
()
Returns the number of bytes per block in this file store.
static
FileStore
Files.
getFileStore
(
Path
path)
Returns the
FileStore
representing the file store where a file
 is located.
static
FileTime
Files.
getLastModifiedTime
(
Path
path,
LinkOption
... options)
Returns a file's last modified time.
static
UserPrincipal
Files.
getOwner
(
Path
path,
LinkOption
... options)
Returns the owner of a file.
static
Set
<
PosixFilePermission
>
Files.
getPosixFilePermissions
(
Path
path,
LinkOption
... options)
Returns a file's POSIX file permissions.
abstract long
FileStore.
getTotalSpace
()
Returns the size, in bytes, of the file store.
abstract long
FileStore.
getUnallocatedSpace
()
Returns the number of unallocated bytes in the file store.
abstract long
FileStore.
getUsableSpace
()
Returns the number of bytes available to this Java virtual machine on the
 file store.
static boolean
Files.
isHidden
(
Path
path)
Tells whether or not a file is considered
hidden
.
static boolean
Files.
isSameFile
(
Path
path,
Path
path2)
Tests if two paths locate the same file.
static
Stream
<
String
>
Files.
lines
(
Path
path)
Read all lines from a file as a
Stream
.
static
Stream
<
String
>
Files.
lines
(
Path
path,
Charset
cs)
Read all lines from a file as a
Stream
.
static
Stream
<
Path
>
Files.
list
(
Path
dir)
Return a lazily populated
Stream
, the elements of
 which are the entries in the directory.
static long
Files.
mismatch
(
Path
path,
Path
path2)
Finds and returns the position of the first mismatched byte in the content
 of two files, or
-1L
if there is no mismatch.
static
Path
Files.
move
(
Path
source,
Path
target,
CopyOption
... options)
Move or rename a file to a target file.
void
SecureDirectoryStream.
move
(
T
srcpath,
SecureDirectoryStream
<
T
> targetdir,
T
targetpath)
Move a file from this directory to another directory.
static
BufferedReader
Files.
newBufferedReader
(
Path
path)
Opens a file for reading, returning a
BufferedReader
to read text
 from the file in an efficient manner.
static
BufferedReader
Files.
newBufferedReader
(
Path
path,
Charset
cs)
Opens a file for reading, returning a
BufferedReader
that may be
 used to read text from the file in an efficient manner.
static
BufferedWriter
Files.
newBufferedWriter
(
Path
path,
Charset
cs,
OpenOption
... options)
Opens or creates a file for writing, returning a
BufferedWriter
that may be used to write text to the file in an efficient manner.
static
BufferedWriter
Files.
newBufferedWriter
(
Path
path,
OpenOption
... options)
Opens or creates a file for writing, returning a
BufferedWriter
to write text to the file in an efficient manner.
static
SeekableByteChannel
Files.
newByteChannel
(
Path
path,
OpenOption
... options)
Opens or creates a file, returning a seekable byte channel to access the
 file.
static
SeekableByteChannel
Files.
newByteChannel
(
Path
path,
Set
<? extends
OpenOption
> options,
FileAttribute
<?>... attrs)
Opens or creates a file, returning a seekable byte channel to access the
 file.
SeekableByteChannel
SecureDirectoryStream.
newByteChannel
(
T
path,
Set
<? extends
OpenOption
> options,
FileAttribute
<?>... attrs)
Opens or creates a file in this directory, returning a seekable byte
 channel to access the file.
static
DirectoryStream
<
Path
>
Files.
newDirectoryStream
(
Path
dir)
Opens a directory, returning a
DirectoryStream
to iterate over
 all entries in the directory.
static
DirectoryStream
<
Path
>
Files.
newDirectoryStream
(
Path
dir,
String
glob)
Opens a directory, returning a
DirectoryStream
to iterate over
 the entries in the directory.
static
DirectoryStream
<
Path
>
Files.
newDirectoryStream
(
Path
dir,
DirectoryStream.Filter
<? super
Path
> filter)
Opens a directory, returning a
DirectoryStream
to iterate over
 the entries in the directory.
SecureDirectoryStream
<
T
>
SecureDirectoryStream.
newDirectoryStream
(
T
path,
LinkOption
... options)
Opens the directory identified by the given path, returning a
SecureDirectoryStream
to iterate over the entries in the directory.
static
FileSystem
FileSystems.
newFileSystem
(
URI
uri,
Map
<
String
,
?> env)
Constructs a new file system that is identified by a
URI
static
FileSystem
FileSystems.
newFileSystem
(
URI
uri,
Map
<
String
,
?> env,
ClassLoader
loader)
Constructs a new file system that is identified by a
URI
static
FileSystem
FileSystems.
newFileSystem
(
Path
path)
Constructs a new
FileSystem
to access the contents of a file as a
 file system.
static
FileSystem
FileSystems.
newFileSystem
(
Path
path,
ClassLoader
loader)
Constructs a new
FileSystem
to access the contents of a file as a
 file system.
static
FileSystem
FileSystems.
newFileSystem
(
Path
path,
Map
<
String
,
?> env)
Constructs a new
FileSystem
to access the contents of a file as a
 file system.
static
FileSystem
FileSystems.
newFileSystem
(
Path
path,
Map
<
String
,
?> env,
ClassLoader
loader)
Constructs a new
FileSystem
to access the contents of a file as a
 file system.
static
InputStream
Files.
newInputStream
(
Path
path,
OpenOption
... options)
Opens a file, returning an input stream to read from the file.
static
OutputStream
Files.
newOutputStream
(
Path
path,
OpenOption
... options)
Opens or creates a file, returning an output stream that may be used to
 write bytes to the file.
abstract
WatchService
FileSystem.
newWatchService
()
Constructs a new
WatchService
(optional operation)
.
FileVisitResult
FileVisitor.
postVisitDirectory
(
T
dir,
IOException
exc)
Invoked for a directory after entries in the directory, and all of their
 descendants, have been visited.
FileVisitResult
SimpleFileVisitor.
postVisitDirectory
(
T
dir,
IOException
exc)
Invoked for a directory after entries in the directory, and all of their
 descendants, have been visited.
FileVisitResult
FileVisitor.
preVisitDirectory
(
T
dir,
BasicFileAttributes
attrs)
Invoked for a directory before entries in the directory are visited.
FileVisitResult
SimpleFileVisitor.
preVisitDirectory
(
T
dir,
BasicFileAttributes
attrs)
Invoked for a directory before entries in the directory are visited.
static
String
Files.
probeContentType
(
Path
path)
Probes the content type of a file.
static byte[]
Files.
readAllBytes
(
Path
path)
Reads all the bytes from a file.
static
List
<
String
>
Files.
readAllLines
(
Path
path)
Read all lines from a file.
static
List
<
String
>
Files.
readAllLines
(
Path
path,
Charset
cs)
Read all lines from a file.
static <A extends
BasicFileAttributes
>
A
Files.
readAttributes
(
Path
path,
Class
<A> type,
LinkOption
... options)
Reads a file's attributes as a bulk operation.
static
Map
<
String
,
Object
>
Files.
readAttributes
(
Path
path,
String
attributes,
LinkOption
... options)
Reads a set of file attributes as a bulk operation.
static
String
Files.
readString
(
Path
path)
Reads all content from a file into a string, decoding from bytes to characters
 using the
UTF-8
charset
.
static
String
Files.
readString
(
Path
path,
Charset
cs)
Reads all characters from a file into a string, decoding from bytes to characters
 using the specified
charset
.
static
Path
Files.
readSymbolicLink
(
Path
link)
Reads the target of a symbolic link
(optional operation)
.
default
WatchKey
Path.
register
(
WatchService
watcher,
WatchEvent.Kind
<?>... events)
Registers the file located by this path with a watch service.
WatchKey
Path.
register
(
WatchService
watcher,
WatchEvent.Kind
<?>[] events,
WatchEvent.Modifier
... modifiers)
Registers the file located by this path with a watch service.
WatchKey
Watchable.
register
(
WatchService
watcher,
WatchEvent.Kind
<?>... events)
Registers an object with a watch service.
WatchKey
Watchable.
register
(
WatchService
watcher,
WatchEvent.Kind
<?>[] events,
WatchEvent.Modifier
... modifiers)
Registers an object with a watch service.
static
Path
Files.
setAttribute
(
Path
path,
String
attribute,
Object
value,
LinkOption
... options)
Sets the value of a file attribute.
static
Path
Files.
setLastModifiedTime
(
Path
path,
FileTime
time)
Updates a file's last modified time attribute.
static
Path
Files.
setOwner
(
Path
path,
UserPrincipal
owner)
Updates the file owner.
static
Path
Files.
setPosixFilePermissions
(
Path
path,
Set
<
PosixFilePermission
> perms)
Sets a file's POSIX permissions.
static long
Files.
size
(
Path
path)
Returns the size of a file (in bytes).
Path
Path.
toRealPath
(
LinkOption
... options)
Returns the
real
path of an existing file.
FileVisitResult
FileVisitor.
visitFile
(
T
file,
BasicFileAttributes
attrs)
Invoked for a file in a directory.
FileVisitResult
SimpleFileVisitor.
visitFile
(
T
file,
BasicFileAttributes
attrs)
Invoked for a file in a directory.
FileVisitResult
FileVisitor.
visitFileFailed
(
T
file,
IOException
exc)
Invoked for a file that could not be visited.
FileVisitResult
SimpleFileVisitor.
visitFileFailed
(
T
file,
IOException
exc)
Invoked for a file that could not be visited.
static
Stream
<
Path
>
Files.
walk
(
Path
start,
 int maxDepth,
FileVisitOption
... options)
Return a
Stream
that is lazily populated with
Path
by walking the file tree rooted at a given starting file.
static
Stream
<
Path
>
Files.
walk
(
Path
start,
FileVisitOption
... options)
Return a
Stream
that is lazily populated with
Path
by walking the file tree rooted at a given starting file.
static
Path
Files.
walkFileTree
(
Path
start,
FileVisitor
<? super
Path
> visitor)
Walks a file tree.
static
Path
Files.
walkFileTree
(
Path
start,
Set
<
FileVisitOption
> options,
 int maxDepth,
FileVisitor
<? super
Path
> visitor)
Walks a file tree.
static
Path
Files.
write
(
Path
path,
 byte[] bytes,
OpenOption
... options)
Writes bytes to a file.
static
Path
Files.
write
(
Path
path,
Iterable
<? extends
CharSequence
> lines,
Charset
cs,
OpenOption
... options)
Write lines of text to a file.
static
Path
Files.
write
(
Path
path,
Iterable
<? extends
CharSequence
> lines,
OpenOption
... options)
Write lines of text to a file.
static
Path
Files.
writeString
(
Path
path,
CharSequence
csq,
Charset
cs,
OpenOption
... options)
Write a
CharSequence
to a file.
static
Path
Files.
writeString
(
Path
path,
CharSequence
csq,
OpenOption
... options)
Write a
CharSequence
to a file.
Constructors in
java.nio.file
with parameters of type
IOException
Modifier
Constructor
Description
DirectoryIteratorException
(
IOException
cause)
Constructs an instance of this class.
Uses of
IOException
in
java.nio.file.attribute
Subclasses of
IOException
in
java.nio.file.attribute
Modifier and Type
Class
Description
class
UserPrincipalNotFoundException
Checked exception thrown when a lookup of
UserPrincipal
fails because
 the principal does not exist.
Methods in
java.nio.file.attribute
that throw
IOException
Modifier and Type
Method
Description
void
UserDefinedFileAttributeView.
delete
(
String
name)
Deletes a user-defined attribute.
List
<
AclEntry
>
AclFileAttributeView.
getAcl
()
Reads the access control list.
UserPrincipal
FileOwnerAttributeView.
getOwner
()
Read the file owner.
List
<
String
>
UserDefinedFileAttributeView.
list
()
Returns a list containing the names of the user-defined attributes.
abstract
GroupPrincipal
UserPrincipalLookupService.
lookupPrincipalByGroupName
(
String
group)
Lookup a group principal by group name.
abstract
UserPrincipal
UserPrincipalLookupService.
lookupPrincipalByName
(
String
name)
Lookup a user principal by name.
int
UserDefinedFileAttributeView.
read
(
String
name,
ByteBuffer
dst)
Read the value of a user-defined attribute into a buffer.
BasicFileAttributes
BasicFileAttributeView.
readAttributes
()
Reads the basic file attributes as a bulk operation.
DosFileAttributes
DosFileAttributeView.
readAttributes
()
PosixFileAttributes
PosixFileAttributeView.
readAttributes
()
void
AclFileAttributeView.
setAcl
(
List
<
AclEntry
> acl)
Updates (replace) the access control list.
void
DosFileAttributeView.
setArchive
(boolean value)
Updates the value of the archive attribute.
void
PosixFileAttributeView.
setGroup
(
GroupPrincipal
group)
Updates the file group-owner.
void
DosFileAttributeView.
setHidden
(boolean value)
Updates the value of the hidden attribute.
void
FileOwnerAttributeView.
setOwner
(
UserPrincipal
owner)
Updates the file owner.
void
PosixFileAttributeView.
setPermissions
(
Set
<
PosixFilePermission
> perms)
Updates the file permissions.
void
DosFileAttributeView.
setReadOnly
(boolean value)
Updates the value of the read-only attribute.
void
DosFileAttributeView.
setSystem
(boolean value)
Updates the value of the system attribute.
void
BasicFileAttributeView.
setTimes
(
FileTime
lastModifiedTime,
FileTime
lastAccessTime,
FileTime
createTime)
Updates any or all of the file's last modified time, last access time,
 and create time attributes.
int
UserDefinedFileAttributeView.
size
(
String
name)
Returns the size of the value of a user-defined attribute.
int
UserDefinedFileAttributeView.
write
(
String
name,
ByteBuffer
src)
Writes the value of a user-defined attribute from a buffer.
Uses of
IOException
in
java.nio.file.spi
Methods in
java.nio.file.spi
that throw
IOException
Modifier and Type
Method
Description
abstract void
FileSystemProvider.
checkAccess
(
Path
path,
AccessMode
... modes)
Checks the existence, and optionally the accessibility, of a file.
abstract void
FileSystemProvider.
copy
(
Path
source,
Path
target,
CopyOption
... options)
Copy a file to a target file.
abstract void
FileSystemProvider.
createDirectory
(
Path
dir,
FileAttribute
<?>... attrs)
Creates a new directory.
void
FileSystemProvider.
createLink
(
Path
link,
Path
existing)
Creates a new link (directory entry) for an existing file.
void
FileSystemProvider.
createSymbolicLink
(
Path
link,
Path
target,
FileAttribute
<?>... attrs)
Creates a symbolic link to a target.
abstract void
FileSystemProvider.
delete
(
Path
path)
Deletes a file.
boolean
FileSystemProvider.
deleteIfExists
(
Path
path)
Deletes a file if it exists.
abstract
FileStore
FileSystemProvider.
getFileStore
(
Path
path)
Returns the
FileStore
representing the file store where a file
 is located.
abstract boolean
FileSystemProvider.
isHidden
(
Path
path)
Tells whether or not a file is considered
hidden
.
abstract boolean
FileSystemProvider.
isSameFile
(
Path
path,
Path
path2)
Tests if two paths locate the same file.
abstract void
FileSystemProvider.
move
(
Path
source,
Path
target,
CopyOption
... options)
Move or rename a file to a target file.
AsynchronousFileChannel
FileSystemProvider.
newAsynchronousFileChannel
(
Path
path,
Set
<? extends
OpenOption
> options,
ExecutorService
executor,
FileAttribute
<?>... attrs)
Opens or creates a file for reading and/or writing, returning an
 asynchronous file channel to access the file.
abstract
SeekableByteChannel
FileSystemProvider.
newByteChannel
(
Path
path,
Set
<? extends
OpenOption
> options,
FileAttribute
<?>... attrs)
Opens or creates a file, returning a seekable byte channel to access the
 file.
abstract
DirectoryStream
<
Path
>
FileSystemProvider.
newDirectoryStream
(
Path
dir,
DirectoryStream.Filter
<? super
Path
> filter)
Opens a directory, returning a
DirectoryStream
to iterate over
 the entries in the directory.
FileChannel
FileSystemProvider.
newFileChannel
(
Path
path,
Set
<? extends
OpenOption
> options,
FileAttribute
<?>... attrs)
Opens or creates a file for reading and/or writing, returning a file
 channel to access the file.
abstract
FileSystem
FileSystemProvider.
newFileSystem
(
URI
uri,
Map
<
String
,
?> env)
Constructs a new
FileSystem
object identified by a URI.
FileSystem
FileSystemProvider.
newFileSystem
(
Path
path,
Map
<
String
,
?> env)
Constructs a new
FileSystem
to access the contents of a file as a
 file system.
InputStream
FileSystemProvider.
newInputStream
(
Path
path,
OpenOption
... options)
Opens a file, returning an input stream to read from the file.
OutputStream
FileSystemProvider.
newOutputStream
(
Path
path,
OpenOption
... options)
Opens or creates a file, returning an output stream that may be used to
 write bytes to the file.
abstract
String
FileTypeDetector.
probeContentType
(
Path
path)
Probes the given file to guess its content type.
abstract <A extends
BasicFileAttributes
>
A
FileSystemProvider.
readAttributes
(
Path
path,
Class
<A> type,
LinkOption
... options)
Reads a file's attributes as a bulk operation.
abstract
Map
<
String
,
Object
>
FileSystemProvider.
readAttributes
(
Path
path,
String
attributes,
LinkOption
... options)
Reads a set of file attributes as a bulk operation.
<A extends
BasicFileAttributes
>
A
FileSystemProvider.
readAttributesIfExists
(
Path
path,
Class
<A> type,
LinkOption
... options)
Reads a file's attributes as a bulk operation if it exists.
Path
FileSystemProvider.
readSymbolicLink
(
Path
link)
Reads the target of a symbolic link.
abstract void
FileSystemProvider.
setAttribute
(
Path
path,
String
attribute,
Object
value,
LinkOption
... options)
Sets the value of a file attribute.
Uses of
IOException
in
java.rmi
Subclasses of
IOException
in
java.rmi
Modifier and Type
Class
Description
class
AccessException
An
AccessException
is thrown by certain methods of the
java.rmi.Naming
class (specifically
bind
,
rebind
, and
unbind
) to
 indicate that the caller does not have permission to perform the action
 requested by the method call.
class
ConnectException
A
ConnectException
is thrown if a connection is refused
 to the remote host for a remote method call.
class
ConnectIOException
A
ConnectIOException
is thrown if an
IOException
occurs while making a connection
 to the remote host for a remote method call.
class
MarshalException
A
MarshalException
is thrown if a
java.io.IOException
occurs while marshalling the remote call
 header, arguments or return value for a remote method call.
class
NoSuchObjectException
A
NoSuchObjectException
is thrown if an attempt is made to
 invoke a method on an object that no longer exists in the remote virtual
 machine.
class
RemoteException
A
RemoteException
is the common superclass for a number of
 communication-related exceptions that may occur during the execution of a
 remote method call.
class
ServerError
A
ServerError
is thrown as a result of a remote method
 invocation when an
Error
is thrown while processing
 the invocation on the server, either while unmarshalling the arguments,
 executing the remote method itself, or marshalling the return value.
class
ServerException
A
ServerException
is thrown as a result of a remote method
 invocation when a
RemoteException
is thrown while processing
 the invocation on the server, either while unmarshalling the arguments or
 executing the remote method itself.
class
ServerRuntimeException
Deprecated.
no replacement
class
StubNotFoundException
A
StubNotFoundException
is thrown if a valid stub class
 could not be found for a remote object when it is exported.
class
UnexpectedException
An
UnexpectedException
is thrown if the client of a
 remote method call receives, as a result of the call, a checked
 exception that is not among the checked exception types declared in the
throws
clause of the method in the remote interface.
class
UnknownHostException
An
UnknownHostException
is thrown if a
java.net.UnknownHostException
occurs while creating
 a connection to the remote host for a remote method call.
class
UnmarshalException
An
UnmarshalException
can be thrown while unmarshalling the
 parameters or results of a remote method call if any of the following
 conditions occur:
 
  if an exception occurs while unmarshalling the call header
  if the protocol for the return value is invalid
  if a
java.io.IOException
occurs unmarshalling
 parameters (on the server side) or the return value (on the client side).
Methods in
java.rmi
that throw
IOException
Modifier and Type
Method
Description
T
MarshalledObject.
get
()
Returns a new copy of the contained marshalledobject.
Constructors in
java.rmi
that throw
IOException
Modifier
Constructor
Description
MarshalledObject
(
T
obj)
Creates a new
MarshalledObject
that contains the
 serialized representation of the current state of the supplied object.
Uses of
IOException
in
java.rmi.server
Subclasses of
IOException
in
java.rmi.server
Modifier and Type
Class
Description
class
ExportException
An
ExportException
is a
RemoteException
thrown if an attempt to export a remote object fails.
class
SkeletonMismatchException
Deprecated.
no replacement.
class
SkeletonNotFoundException
Deprecated.
no replacement.
class
SocketSecurityException
Deprecated.
This class is obsolete.
Methods in
java.rmi.server
that throw
IOException
Modifier and Type
Method
Description
ServerSocket
RMIServerSocketFactory.
createServerSocket
(int port)
Create a server socket on the specified port (port 0 indicates
 an anonymous port).
abstract
ServerSocket
RMISocketFactory.
createServerSocket
(int port)
Create a server socket on the specified port (port 0 indicates
 an anonymous port).
Socket
RMIClientSocketFactory.
createSocket
(
String
host,
 int port)
Create a client socket connected to the specified host and port.
abstract
Socket
RMISocketFactory.
createSocket
(
String
host,
 int port)
Creates a client socket connected to the specified host and port.
void
RemoteCall.
done
()
Deprecated.
no replacement
ObjectInput
RemoteCall.
getInputStream
()
Deprecated.
no replacement
ObjectOutput
RemoteCall.
getOutputStream
()
Deprecated.
no replacement
ObjectOutput
RemoteCall.
getResultStream
(boolean success)
Deprecated.
no replacement
static
ObjID
ObjID.
read
(
ObjectInput
in)
Constructs and returns a new
ObjID
instance by
 unmarshalling a binary representation from an
ObjectInput
instance.
static
UID
UID.
read
(
DataInput
in)
Constructs and returns a new
UID
instance by
 unmarshalling a binary representation from an
DataInput
instance.
void
RemoteCall.
releaseInputStream
()
Deprecated.
no replacement
void
RemoteCall.
releaseOutputStream
()
Deprecated.
no replacement
static void
RMISocketFactory.
setSocketFactory
(
RMISocketFactory
fac)
Set the global socket factory from which RMI gets sockets (if the
 remote object is not associated with a specific client and/or server
 socket factory).
void
ObjID.
write
(
ObjectOutput
out)
Marshals a binary representation of this
ObjID
to
 an
ObjectOutput
instance.
void
UID.
write
(
DataOutput
out)
Marshals a binary representation of this
UID
to
 a
DataOutput
instance.
Uses of
IOException
in
java.security
Methods in
java.security
that throw
IOException
Modifier and Type
Method
Description
void
Certificate.
decode
(
InputStream
stream)
Deprecated, for removal: This API element is subject to removal in a future version.
Decodes a certificate from an input stream.
void
Certificate.
encode
(
OutputStream
stream)
Deprecated, for removal: This API element is subject to removal in a future version.
Encodes the certificate to an output stream in a format that can
 be decoded by the
decode
method.
protected abstract byte[]
AlgorithmParametersSpi.
engineGetEncoded
()
Returns the parameters in their primary encoding format.
protected abstract byte[]
AlgorithmParametersSpi.
engineGetEncoded
(
String
format)
Returns the parameters encoded in the specified format.
protected abstract void
AlgorithmParametersSpi.
engineInit
(byte[] params)
Imports the specified parameters and decodes them
 according to the primary decoding format for parameters.
protected abstract void
AlgorithmParametersSpi.
engineInit
(byte[] params,
String
format)
Imports the parameters from
params
and
 decodes them according to the specified decoding format.
abstract void
KeyStoreSpi.
engineLoad
(
InputStream
stream,
 char[] password)
Loads the keystore from the given input stream.
void
KeyStoreSpi.
engineLoad
(
KeyStore.LoadStoreParameter
param)
Loads the keystore using the given
KeyStore.LoadStoreParameter
.
boolean
KeyStoreSpi.
engineProbe
(
InputStream
stream)
Probes the specified input stream to determine whether it contains a
 keystore that is supported by this implementation, or not.
abstract void
KeyStoreSpi.
engineStore
(
OutputStream
stream,
 char[] password)
Stores this keystore to the given output stream, and protects its
 integrity with the given password.
void
KeyStoreSpi.
engineStore
(
KeyStore.LoadStoreParameter
param)
Stores this keystore using the given
KeyStore.LoadStoreParameter
.
final byte[]
AlgorithmParameters.
getEncoded
()
Returns the parameters in their primary encoding format.
final byte[]
AlgorithmParameters.
getEncoded
(
String
format)
Returns the parameters encoded in the specified scheme.
static final
KeyStore
KeyStore.
getInstance
(
File
file,
 char[] password)
Returns a loaded keystore object of the appropriate keystore type.
static final
KeyStore
KeyStore.
getInstance
(
File
file,
KeyStore.LoadStoreParameter
param)
Returns a loaded keystore object of the appropriate keystore type.
Object
SignedObject.
getObject
()
Retrieves the encapsulated object.
final void
AlgorithmParameters.
init
(byte[] params)
Imports the specified parameters and decodes them according to the
 primary decoding format for parameters.
final void
AlgorithmParameters.
init
(byte[] params,
String
format)
Imports the parameters from
params
and decodes them
 according to the specified decoding scheme.
final void
KeyStore.
load
(
InputStream
stream,
 char[] password)
Loads this keystore from the given input stream.
final void
KeyStore.
load
(
KeyStore.LoadStoreParameter
param)
Loads this keystore using the given
LoadStoreParameter
.
void
Provider.
load
(
InputStream
inStream)
Reads a property list (key and element pairs) from the input stream.
int
DigestInputStream.
read
()
Reads a byte, and updates the message digest (if the digest
 function is on).
int
DigestInputStream.
read
(byte[] b,
 int off,
 int len)
Reads into a byte array, and updates the message digest (if the
 digest function is on).
final void
KeyStore.
store
(
OutputStream
stream,
 char[] password)
Stores this keystore to the given output stream, and protects its
 integrity with the given password.
final void
KeyStore.
store
(
KeyStore.LoadStoreParameter
param)
Stores this keystore using the given
LoadStoreParameter
.
void
DigestOutputStream.
write
(byte[] b,
 int off,
 int len)
Updates the message digest (if the digest function is on) using
 the specified subarray, and in any case writes the subarray to
 the output stream.
void
DigestOutputStream.
write
(int b)
Updates the message digest (if the digest function is on) using
 the specified byte, and in any case writes the byte
 to the output stream.
Constructors in
java.security
that throw
IOException
Modifier
Constructor
Description
SignedObject
(
Serializable
object,
PrivateKey
signingKey,
Signature
signingEngine)
Constructs a
SignedObject
from any Serializable object.
Uses of
IOException
in
java.security.cert
Methods in
java.security.cert
that throw
IOException
Modifier and Type
Method
Description
void
X509CRLSelector.
addIssuerName
(byte[] name)
Adds a name to the issuerNames criterion.
void
X509CRLSelector.
addIssuerName
(
String
name)
Deprecated.
Use
X509CRLSelector.addIssuer(X500Principal)
or
X509CRLSelector.addIssuerName(byte[])
instead.
void
X509CertSelector.
addPathToName
(int type,
 byte[] name)
Adds a name to the pathToNames criterion.
void
X509CertSelector.
addPathToName
(int type,
String
name)
Adds a name to the pathToNames criterion.
void
X509CertSelector.
addSubjectAlternativeName
(int type,
 byte[] name)
Adds a name to the subjectAlternativeNames criterion.
void
X509CertSelector.
addSubjectAlternativeName
(int type,
String
name)
Adds a name to the subjectAlternativeNames criterion.
void
Extension.
encode
(
OutputStream
out)
Generates the extension's DER encoding and writes it to the output
 stream.
byte[]
X509CertSelector.
getIssuerAsBytes
()
Returns the issuer criterion as a byte array.
byte[]
X509CertSelector.
getSubjectAsBytes
()
Returns the subject criterion as a byte array.
void
X509CertSelector.
setExtendedKeyUsage
(
Set
<
String
> keyPurposeSet)
Sets the extendedKeyUsage criterion.
void
X509CertSelector.
setIssuer
(byte[] issuerDN)
Sets the issuer criterion.
void
X509CertSelector.
setIssuer
(
String
issuerDN)
Deprecated.
Use
X509CertSelector.setIssuer(X500Principal)
or
X509CertSelector.setIssuer(byte[])
instead.
void
X509CRLSelector.
setIssuerNames
(
Collection
<?> names)
Note:
use
X509CRLSelector.setIssuers(Collection)
instead
 or only specify the byte array form of distinguished names when using
 this method.
void
X509CertSelector.
setNameConstraints
(byte[] bytes)
Sets the name constraints criterion.
void
X509CertSelector.
setPathToNames
(
Collection
<
List
<?>> names)
Sets the pathToNames criterion.
void
X509CertSelector.
setPolicy
(
Set
<
String
> certPolicySet)
Sets the policy constraint.
void
X509CertSelector.
setSubject
(byte[] subjectDN)
Sets the subject criterion.
void
X509CertSelector.
setSubject
(
String
subjectDN)
Deprecated.
Use
X509CertSelector.setSubject(X500Principal)
or
X509CertSelector.setSubject(byte[])
instead.
void
X509CertSelector.
setSubjectAlternativeNames
(
Collection
<
List
<?>> names)
Sets the subjectAlternativeNames criterion.
void
X509CertSelector.
setSubjectPublicKey
(byte[] key)
Sets the subjectPublicKey criterion.
void
X509CertSelector.
setSubjectPublicKeyAlgID
(
String
oid)
Sets the subjectPublicKeyAlgID criterion.
Constructors in
java.security.cert
that throw
IOException
Modifier
Constructor
Description
PolicyQualifierInfo
(byte[] encoded)
Creates an instance of
PolicyQualifierInfo
from the
 encoded bytes.
Uses of
IOException
in
java.util
Subclasses of
IOException
in
java.util
Modifier and Type
Class
Description
class
InvalidPropertiesFormatException
Thrown to indicate that an operation could not complete because
 the input did not conform to the appropriate XML document type
 for a collection of properties, as per the
Properties
specification.
Methods in
java.util
that return
IOException
Modifier and Type
Method
Description
IOException
Formatter.
ioException
()
Returns the
IOException
last thrown by this formatter's
Appendable
.
IOException
Scanner.
ioException
()
Returns the
IOException
last thrown by this
Scanner
's underlying
Readable
.
Methods in
java.util
that throw
IOException
Modifier and Type
Method
Description
void
Properties.
load
(
InputStream
inStream)
Reads a property list (key and element pairs) from the input
 byte stream.
void
Properties.
load
(
Reader
reader)
Reads a property list (key and element pairs) from the input
 character stream in a simple line-oriented format.
void
Properties.
loadFromXML
(
InputStream
in)
Loads all of the properties represented by the XML document on the
 specified input stream into this properties table.
ResourceBundle
ResourceBundle.Control.
newBundle
(
String
baseName,
Locale
locale,
String
format,
ClassLoader
loader,
 boolean reload)
Instantiates a resource bundle for the given bundle name of the
 given format and locale, using the given class loader if
 necessary.
void
Properties.
store
(
OutputStream
out,
String
comments)
Writes this property list (key and element pairs) in this
Properties
table to the output stream in a format suitable
 for loading into a
Properties
table using the
load(InputStream)
method.
void
Properties.
store
(
Writer
writer,
String
comments)
Writes this property list (key and element pairs) in this
Properties
table to the output character stream in a
 format suitable for using the
load(Reader)
method.
void
Properties.
storeToXML
(
OutputStream
os,
String
comment)
Emits an XML document representing all of the properties contained
 in this table.
void
Properties.
storeToXML
(
OutputStream
os,
String
comment,
String
encoding)
Emits an XML document representing all of the properties contained
 in this table, using the specified encoding.
void
Properties.
storeToXML
(
OutputStream
os,
String
comment,
Charset
charset)
Emits an XML document representing all of the properties contained
 in this table, using the specified encoding.
Constructors in
java.util
that throw
IOException
Modifier
Constructor
Description
Formatter
(
File
file,
Charset
charset,
Locale
l)
Constructs a new formatter with the specified file, charset, and
 locale.
Formatter
(
String
fileName,
Charset
charset,
Locale
l)
Constructs a new formatter with the specified file name, charset, and
 locale.
PropertyResourceBundle
(
InputStream
stream)
Creates a property resource bundle from an
InputStream
.
PropertyResourceBundle
(
Reader
reader)
Creates a property resource bundle from a
Reader
.
Scanner
(
File
source,
Charset
charset)
Constructs a new
Scanner
that produces values scanned
 from the specified file.
Scanner
(
Path
source)
Constructs a new
Scanner
that produces values scanned
 from the specified file.
Scanner
(
Path
source,
String
charsetName)
Constructs a new
Scanner
that produces values scanned
 from the specified file.
Scanner
(
Path
source,
Charset
charset)
Constructs a new
Scanner
that produces values scanned
 from the specified file.
Uses of
IOException
in
java.util.jar
Subclasses of
IOException
in
java.util.jar
Modifier and Type
Class
Description
class
JarException
Signals that an error of some sort has occurred while reading from
 or writing to a JAR file.
Methods in
java.util.jar
that throw
IOException
Modifier and Type
Method
Description
Attributes
JarEntry.
getAttributes
()
Returns the
Manifest
Attributes
for this
 entry, or
null
if none.
InputStream
JarFile.
getInputStream
(
ZipEntry
ze)
Returns an input stream for reading the contents of the specified
 zip file entry.
Manifest
JarFile.
getManifest
()
Returns the jar file manifest, or
null
if none.
ZipEntry
JarInputStream.
getNextEntry
()
Reads the next ZIP file entry and positions the stream at the
 beginning of the entry data.
JarEntry
JarInputStream.
getNextJarEntry
()
Reads the next JAR file entry and positions the stream at the
 beginning of the entry data.
void
JarOutputStream.
putNextEntry
(
ZipEntry
ze)
Begins writing a new JAR file entry and positions the stream
 to the start of the entry data.
int
JarInputStream.
read
(byte[] b,
 int off,
 int len)
Reads from the current JAR entry into an array of bytes, returning the number of
 inflated bytes.
void
Manifest.
read
(
InputStream
is)
Reads the Manifest from the specified InputStream.
void
Manifest.
write
(
OutputStream
out)
Writes the Manifest to the specified OutputStream.
Constructors in
java.util.jar
that throw
IOException
Modifier
Constructor
Description
JarFile
(
File
file)
Creates a new
JarFile
to read from the specified
File
object.
JarFile
(
File
file,
 boolean verify)
Creates a new
JarFile
to read from the specified
File
object.
JarFile
(
File
file,
 boolean verify,
 int mode)
Creates a new
JarFile
to read from the specified
File
object in the specified mode.
JarFile
(
File
file,
 boolean verify,
 int mode,
Runtime.Version
version)
Creates a new
JarFile
to read from the specified
File
object in the specified mode.
JarFile
(
String
name)
Creates a new
JarFile
to read from the specified
 file
name
.
JarFile
(
String
name,
 boolean verify)
Creates a new
JarFile
to read from the specified
 file
name
.
JarInputStream
(
InputStream
in)
Creates a new
JarInputStream
and reads the optional
 manifest.
JarInputStream
(
InputStream
in,
 boolean verify)
Creates a new
JarInputStream
and reads the optional
 manifest.
JarOutputStream
(
OutputStream
out)
Creates a new
JarOutputStream
with no manifest.
JarOutputStream
(
OutputStream
out,
Manifest
man)
Creates a new
JarOutputStream
with the specified
Manifest
.
Manifest
(
InputStream
is)
Constructs a new Manifest from the specified input stream.
Uses of
IOException
in
java.util.logging
Methods in
java.util.logging
that throw
IOException
Modifier and Type
Method
Description
void
LogManager.
readConfiguration
()
Reads and initializes the logging configuration.
void
LogManager.
readConfiguration
(
InputStream
ins)
Reads and initializes the logging configuration from the given input stream.
void
LogManager.
updateConfiguration
(
InputStream
ins,
Function
<
String
,
BiFunction
<
String
,
String
,
String
>> mapper)
Updates the logging configuration.
void
LogManager.
updateConfiguration
(
Function
<
String
,
BiFunction
<
String
,
String
,
String
>> mapper)
Updates the logging configuration.
Constructors in
java.util.logging
that throw
IOException
Modifier
Constructor
Description
FileHandler
()
Construct a default
FileHandler
.
FileHandler
(
String
pattern)
Initialize a
FileHandler
to write to the given filename.
FileHandler
(
String
pattern,
 boolean append)
Initialize a
FileHandler
to write to the given filename,
 with optional append.
FileHandler
(
String
pattern,
 int limit,
 int count)
Initialize a
FileHandler
to write to a set of files.
FileHandler
(
String
pattern,
 int limit,
 int count,
 boolean append)
Initialize a
FileHandler
to write to a set of files
 with optional append.
FileHandler
(
String
pattern,
 long limit,
 int count,
 boolean append)
Initialize a
FileHandler
to write to a set of files
 with optional append.
SocketHandler
()
Create a
SocketHandler
, using only
LogManager
properties
 (or their defaults).
SocketHandler
(
String
host,
 int port)
Construct a
SocketHandler
using a specified host and port.
Uses of
IOException
in
java.util.prefs
Methods in
java.util.prefs
that throw
IOException
Modifier and Type
Method
Description
void
AbstractPreferences.
exportNode
(
OutputStream
os)
Implements the
exportNode
method as per the specification in
Preferences.exportNode(OutputStream)
.
abstract void
Preferences.
exportNode
(
OutputStream
os)
Emits on the specified output stream an XML document representing all
 of the preferences contained in this node (but not its descendants).
void
AbstractPreferences.
exportSubtree
(
OutputStream
os)
Implements the
exportSubtree
method as per the specification in
Preferences.exportSubtree(OutputStream)
.
abstract void
Preferences.
exportSubtree
(
OutputStream
os)
Emits an XML document representing all of the preferences contained
 in this node and all of its descendants.
static void
Preferences.
importPreferences
(
InputStream
is)
Imports all of the preferences represented by the XML document on the
 specified input stream.
Uses of
IOException
in
java.util.zip
Subclasses of
IOException
in
java.util.zip
Modifier and Type
Class
Description
class
ZipException
Signals that a Zip exception of some sort has occurred.
Methods in
java.util.zip
that throw
IOException
Modifier and Type
Method
Description
int
DeflaterInputStream.
available
()
Returns 0 after EOF has been reached, otherwise always return 1.
int
InflaterInputStream.
available
()
Returns 0 after EOF has been reached, otherwise always return 1.
int
ZipInputStream.
available
()
Returns 0 when end of stream is detected for the current ZIP entry or
ZipInputStream.closeEntry()
has been called on the current ZIP entry, otherwise
 returns 1.
void
DeflaterInputStream.
close
()
Closes this input stream and its underlying input stream, discarding
 any pending uncompressed data.
void
DeflaterOutputStream.
close
()
Writes remaining compressed data to the output stream and closes the
 underlying stream.
void
GZIPInputStream.
close
()
Closes this input stream and releases any system resources associated
 with the stream.
void
InflaterInputStream.
close
()
Closes this input stream and releases any system resources associated
 with the stream.
void
InflaterOutputStream.
close
()
Writes any remaining uncompressed data to the output stream and closes
 the underlying output stream.
void
ZipFile.
close
()
Closes the ZIP file.
void
ZipInputStream.
close
()
Closes this input stream and releases any system resources associated
 with the stream.
void
ZipOutputStream.
close
()
Closes the ZIP output stream as well as the stream being filtered.
void
ZipInputStream.
closeEntry
()
Closes the current ZIP entry and positions the stream for reading the
 next entry.
void
ZipOutputStream.
closeEntry
()
Closes the current ZIP entry and positions the stream for writing
 the next entry.
protected void
DeflaterOutputStream.
deflate
()
Writes next block of compressed data to the output stream.
protected void
InflaterInputStream.
fill
()
Fills input buffer with more data to decompress.
void
DeflaterOutputStream.
finish
()
Finishes writing compressed data to the output stream without closing
 the underlying stream.
void
GZIPOutputStream.
finish
()
Finishes writing compressed data to the output stream without closing
 the underlying stream.
void
InflaterOutputStream.
finish
()
Finishes writing uncompressed data to the output stream without closing
 the underlying stream.
void
ZipOutputStream.
finish
()
Finishes writing the contents of the ZIP output stream without closing
 the underlying stream.
void
DeflaterOutputStream.
flush
()
Flushes the compressed output stream.
void
InflaterOutputStream.
flush
()
Flushes this output stream, forcing any pending buffered output bytes to be
 written.
InputStream
ZipFile.
getInputStream
(
ZipEntry
entry)
Returns an input stream for reading the contents of the specified
 zip file entry.
ZipEntry
ZipInputStream.
getNextEntry
()
Reads the next ZIP file entry and positions the stream at the
 beginning of the entry data.
void
ZipOutputStream.
putNextEntry
(
ZipEntry
e)
Begins writing a new ZIP file entry and positions the stream to the
 start of the entry data.
int
CheckedInputStream.
read
()
Reads a byte.
int
CheckedInputStream.
read
(byte[] buf,
 int off,
 int len)
Reads into an array of bytes.
int
DeflaterInputStream.
read
()
Reads a single byte of compressed data from the input stream.
int
DeflaterInputStream.
read
(byte[] b,
 int off,
 int len)
Reads compressed data into a byte array.
int
GZIPInputStream.
read
(byte[] buf,
 int off,
 int len)
Reads uncompressed data into an array of bytes, returning the number of inflated
 bytes.
int
InflaterInputStream.
read
()
Reads a byte of uncompressed data.
int
InflaterInputStream.
read
(byte[] b,
 int off,
 int len)
Reads uncompressed data into an array of bytes, returning the number of inflated
 bytes.
int
ZipInputStream.
read
()
Reads the next byte of data from the input stream for the current
 ZIP entry.
int
ZipInputStream.
read
(byte[] b,
 int off,
 int len)
Reads the requested number of bytes from the input stream into the given
 byte array for the current ZIP entry returning the number of
 inflated bytes.
byte[]
ZipInputStream.
readAllBytes
()
Reads all remaining bytes from the input stream for the current ZIP entry.
int
ZipInputStream.
readNBytes
(byte[] b,
 int off,
 int len)
Reads the requested number of bytes from the input stream into the given
 byte array for the current ZIP entry returning the number of
 inflated bytes.
byte[]
ZipInputStream.
readNBytes
(int len)
Reads up to a specified number of bytes from the input stream
 for the current ZIP entry.
void
DeflaterInputStream.
reset
()
This operation is not supported
.
void
InflaterInputStream.
reset
()
Repositions this stream to the position at the time the
mark
method was last called on this input stream.
long
CheckedInputStream.
skip
(long n)
Skips specified number of bytes of input.
long
DeflaterInputStream.
skip
(long n)
Skips over and discards data from the input stream.
long
InflaterInputStream.
skip
(long n)
Skips specified number of bytes of uncompressed data.
long
ZipInputStream.
skip
(long n)
Skips over and discards
n
bytes of data from this input stream
 for the current ZIP entry.
void
ZipInputStream.
skipNBytes
(long n)
Skips over and discards exactly
n
bytes of data from this input
 stream for the current ZIP entry.
long
ZipInputStream.
transferTo
(
OutputStream
out)
Reads all bytes from this input stream for the current ZIP entry
 and writes the bytes to the given output stream in the order that they
 are read.
void
CheckedOutputStream.
write
(byte[] b,
 int off,
 int len)
Writes an array of bytes.
void
CheckedOutputStream.
write
(int b)
Writes a byte.
void
DeflaterOutputStream.
write
(byte[] b,
 int off,
 int len)
Writes an array of bytes to the compressed output stream.
void
DeflaterOutputStream.
write
(int b)
Writes a byte to the compressed output stream.
void
GZIPOutputStream.
write
(byte[] buf,
 int off,
 int len)
Writes array of bytes to the compressed output stream.
void
InflaterOutputStream.
write
(byte[] b,
 int off,
 int len)
Writes an array of bytes to the uncompressed output stream.
void
InflaterOutputStream.
write
(int b)
Writes a byte to the uncompressed output stream.
void
ZipOutputStream.
write
(byte[] b,
 int off,
 int len)
Writes an array of bytes to the current ZIP entry data.
Constructors in
java.util.zip
that throw
IOException
Modifier
Constructor
Description
GZIPInputStream
(
InputStream
in)
Creates a new input stream with a default buffer size.
GZIPInputStream
(
InputStream
in,
 int size)
Creates a new input stream with the specified buffer size.
GZIPOutputStream
(
OutputStream
out)
Creates a new output stream with a default buffer size.
GZIPOutputStream
(
OutputStream
out,
 boolean syncFlush)
Creates a new output stream with a default buffer size and
 the specified flush mode.
GZIPOutputStream
(
OutputStream
out,
 int size)
Creates a new output stream with the specified buffer size.
GZIPOutputStream
(
OutputStream
out,
 int size,
 boolean syncFlush)
Creates a new output stream with the specified buffer size and
 flush mode.
ZipFile
(
File
file)
Opens a ZIP file for reading given the specified File object.
ZipFile
(
File
file,
 int mode)
Opens a new
ZipFile
to read from the specified
File
object in the specified mode.
ZipFile
(
File
file,
 int mode,
Charset
charset)
Opens a new
ZipFile
to read from the specified
File
object in the specified mode.
ZipFile
(
File
file,
Charset
charset)
Opens a ZIP file for reading given the specified File object.
ZipFile
(
String
name)
Opens a zip file for reading.
ZipFile
(
String
name,
Charset
charset)
Opens a zip file for reading.
Uses of
IOException
in
javax.annotation.processing
Subclasses of
IOException
in
javax.annotation.processing
Modifier and Type
Class
Description
class
FilerException
Indicates a
Filer
detected an attempt to open a file that
 would violate the guarantees provided by the
Filer
.
Methods in
javax.annotation.processing
that throw
IOException
Modifier and Type
Method
Description
JavaFileObject
Filer.
createClassFile
(
CharSequence
name,
Element
... originatingElements)
Creates a new class file, and returns an object to allow
 writing to it.
FileObject
Filer.
createResource
(
JavaFileManager.Location
location,
CharSequence
moduleAndPkg,
CharSequence
relativeName,
Element
... originatingElements)
Creates a new auxiliary resource file for writing and returns a
 file object for it.
JavaFileObject
Filer.
createSourceFile
(
CharSequence
name,
Element
... originatingElements)
Creates a new source file and returns an object to allow
 writing to it.
FileObject
Filer.
getResource
(
JavaFileManager.Location
location,
CharSequence
moduleAndPkg,
CharSequence
relativeName)
Returns an object for reading an existing resource.
Uses of
IOException
in
javax.crypto
Methods in
javax.crypto
that throw
IOException
Modifier and Type
Method
Description
int
CipherInputStream.
available
()
Returns the number of bytes that can be read from this input
 stream without blocking.
void
CipherInputStream.
close
()
Closes this input stream and releases any system resources
 associated with the stream.
void
CipherOutputStream.
close
()
Closes this output stream and releases any system resources
 associated with this stream.
void
CipherOutputStream.
flush
()
Flushes this output stream by forcing any buffered output bytes
 that have already been processed by the encapsulated
Cipher
object to be written out.
byte[]
EncryptedPrivateKeyInfo.
getEncoded
()
Returns the ASN.1 encoding of this object.
final
Object
SealedObject.
getObject
(
Key
key)
Retrieves the original (encapsulated) object.
final
Object
SealedObject.
getObject
(
Key
key,
String
provider)
Retrieves the original (encapsulated) object.
final
Object
SealedObject.
getObject
(
Cipher
c)
Retrieves the original (encapsulated) object.
int
CipherInputStream.
read
()
Reads the next byte of data from this input stream.
int
CipherInputStream.
read
(byte[] b)
Reads up to
b.length
bytes of data from this input
 stream into an array of bytes.
int
CipherInputStream.
read
(byte[] b,
 int off,
 int len)
Reads up to
len
bytes of data from this input stream
 into an array of bytes.
long
CipherInputStream.
skip
(long n)
Skips
n
bytes of input from the bytes that can be read
 from this input stream without blocking.
void
CipherOutputStream.
write
(byte[] b)
Writes
b.length
bytes from the specified byte array
 to this output stream.
void
CipherOutputStream.
write
(byte[] b,
 int off,
 int len)
Writes
len
bytes from the specified byte array
 starting at offset
off
to this output stream.
void
CipherOutputStream.
write
(int b)
Writes the specified byte to this output stream.
Constructors in
javax.crypto
that throw
IOException
Modifier
Constructor
Description
EncryptedPrivateKeyInfo
(byte[] encoded)
Constructs (i.e., parses) an
EncryptedPrivateKeyInfo
from
 its ASN.1 encoding.
SealedObject
(
Serializable
object,
Cipher
c)
Constructs a
SealedObject
from any
Serializable
object.
Uses of
IOException
in
javax.imageio
Subclasses of
IOException
in
javax.imageio
Modifier and Type
Class
Description
class
IIOException
An exception class used for signaling run-time failure of reading
 and writing operations.
Methods in
javax.imageio
that throw
IOException
Modifier and Type
Method
Description
boolean
ImageWriter.
canInsertEmpty
(int imageIndex)
Returns
true
if the writer supports the insertion
 of a new, empty image at the given index.
boolean
ImageWriter.
canInsertImage
(int imageIndex)
Returns
true
if the writer supports the insertion
 of a new image at the given index.
boolean
ImageWriter.
canRemoveImage
(int imageIndex)
Returns
true
if the writer supports the removal
 of an existing image at the given index.
boolean
ImageWriter.
canReplaceImageMetadata
(int imageIndex)
Returns
true
if it is possible to replace the
 image metadata associated with an existing image with index
imageIndex
.
boolean
ImageWriter.
canReplacePixels
(int imageIndex)
Returns
true
if the writer allows pixels of the
 given image to be replaced using the
replacePixels
methods.
boolean
ImageWriter.
canReplaceStreamMetadata
()
Returns
true
if it is possible to replace the
 stream metadata already present in the output.
boolean
ImageWriter.
canWriteEmpty
()
Returns
true
if the writer supports the writing of
 a complete image stream consisting of a single image with
 undefined pixel values and associated metadata and thumbnails
 to the output.
static
ImageInputStream
ImageIO.
createImageInputStream
(
Object
input)
Returns an
ImageInputStream
that will take its
 input from the given
Object
.
static
ImageOutputStream
ImageIO.
createImageOutputStream
(
Object
output)
Returns an
ImageOutputStream
that will send its
 output to the given
Object
.
void
ImageWriter.
endInsertEmpty
()
Completes the insertion of a new image that was begun with a
 prior call to
prepareInsertEmpty
.
void
ImageWriter.
endReplacePixels
()
Terminates a sequence of calls to
replacePixels
.
void
ImageWriter.
endWriteEmpty
()
Completes the writing of a new image that was begun with a
 prior call to
prepareWriteEmpty
.
void
ImageWriter.
endWriteSequence
()
Completes the writing of a sequence of images begun with
prepareWriteSequence
.
float
ImageReader.
getAspectRatio
(int imageIndex)
Returns the aspect ratio of the given image (that is, its width
 divided by its height) as a
float
.
String
ImageReader.
getFormatName
()
Returns a
String
identifying the format of the
 input source.
abstract int
ImageReader.
getHeight
(int imageIndex)
Returns the height in pixels of the given image within the
 input source.
abstract
IIOMetadata
ImageReader.
getImageMetadata
(int imageIndex)
Returns an
IIOMetadata
object containing metadata
 associated with the given image, or
null
if the
 reader does not support reading metadata, is set to ignore
 metadata, or if no metadata is available.
IIOMetadata
ImageReader.
getImageMetadata
(int imageIndex,
String
formatName,
Set
<
String
> nodeNames)
Returns an
IIOMetadata
object representing the
 metadata associated with the given image, or
null
if the reader does not support reading metadata or none
 is available.
abstract
Iterator
<
ImageTypeSpecifier
>
ImageReader.
getImageTypes
(int imageIndex)
Returns an
Iterator
containing possible image
 types to which the given image may be decoded, in the form of
ImageTypeSpecifiers
s.
abstract int
ImageReader.
getNumImages
(boolean allowSearch)
Returns the number of images, not including thumbnails, available
 from the current input source.
int
ImageReader.
getNumThumbnails
(int imageIndex)
Returns the number of thumbnail preview images associated with
 the given image.
ImageTypeSpecifier
ImageReader.
getRawImageType
(int imageIndex)
Returns an
ImageTypeSpecifier
indicating the
SampleModel
and
ColorModel
which most
 closely represents the "raw" internal format of the image.
abstract
IIOMetadata
ImageReader.
getStreamMetadata
()
Returns an
IIOMetadata
object representing the
 metadata associated with the input source as a whole (i.e., not
 associated with any particular image), or
null
if
 the reader does not support reading metadata, is set to ignore
 metadata, or if no metadata is available.
IIOMetadata
ImageReader.
getStreamMetadata
(
String
formatName,
Set
<
String
> nodeNames)
Returns an
IIOMetadata
object representing the
 metadata associated with the input source as a whole (i.e.,
 not associated with any particular image).
int
ImageReader.
getThumbnailHeight
(int imageIndex,
 int thumbnailIndex)
Returns the height of the thumbnail preview image indexed by
thumbnailIndex
, associated with the image indexed
 by
ImageIndex
.
int
ImageReader.
getThumbnailWidth
(int imageIndex,
 int thumbnailIndex)
Returns the width of the thumbnail preview image indexed by
thumbnailIndex
, associated with the image indexed
 by
ImageIndex
.
int
ImageReader.
getTileGridXOffset
(int imageIndex)
Returns the X coordinate of the upper-left corner of tile (0,
 0) in the given image.
int
ImageReader.
getTileGridYOffset
(int imageIndex)
Returns the Y coordinate of the upper-left corner of tile (0,
 0) in the given image.
int
ImageReader.
getTileHeight
(int imageIndex)
Returns the height of a tile in the given image.
int
ImageReader.
getTileWidth
(int imageIndex)
Returns the width of a tile in the given image.
abstract int
ImageReader.
getWidth
(int imageIndex)
Returns the width in pixels of the given image within the input
 source.
boolean
ImageReader.
hasThumbnails
(int imageIndex)
Returns
true
if the given image has thumbnail
 preview images associated with it.
boolean
ImageReader.
isImageTiled
(int imageIndex)
Returns
true
if the image is organized into
tiles
, that is, equal-sized non-overlapping rectangles.
boolean
ImageReader.
isRandomAccessEasy
(int imageIndex)
Returns
true
if the storage format of the given
 image places no inherent impediment on random access to pixels.
void
ImageWriter.
prepareInsertEmpty
(int imageIndex,
ImageTypeSpecifier
imageType,
 int width,
 int height,
IIOMetadata
imageMetadata,
List
<? extends
BufferedImage
> thumbnails,
ImageWriteParam
param)
Begins the insertion of a new image with undefined pixel values
 into an existing image stream.
void
ImageWriter.
prepareReplacePixels
(int imageIndex,
Rectangle
region)
Prepares the writer to handle a series of calls to the
replacePixels
methods.
void
ImageWriter.
prepareWriteEmpty
(
IIOMetadata
streamMetadata,
ImageTypeSpecifier
imageType,
 int width,
 int height,
IIOMetadata
imageMetadata,
List
<? extends
BufferedImage
> thumbnails,
ImageWriteParam
param)
Begins the writing of a complete image stream, consisting of a
 single image with undefined pixel values and associated
 metadata and thumbnails, to the output.
void
ImageWriter.
prepareWriteSequence
(
IIOMetadata
streamMetadata)
Prepares a stream to accept a series of subsequent
writeToSequence
calls, using the provided stream
 metadata object.
static
BufferedImage
ImageIO.
read
(
File
input)
Returns a
BufferedImage
as the result of decoding
 a supplied
File
with an
ImageReader
chosen automatically from among those currently registered.
static
BufferedImage
ImageIO.
read
(
InputStream
input)
Returns a
BufferedImage
as the result of decoding
 a supplied
InputStream
with an
ImageReader
chosen automatically from among those currently registered.
static
BufferedImage
ImageIO.
read
(
URL
input)
Returns a
BufferedImage
as the result of decoding
 a supplied
URL
with an
ImageReader
chosen automatically from among those currently registered.
static
BufferedImage
ImageIO.
read
(
ImageInputStream
stream)
Returns a
BufferedImage
as the result of decoding
 a supplied
ImageInputStream
with an
ImageReader
chosen automatically from among those
 currently registered.
BufferedImage
ImageReader.
read
(int imageIndex)
Reads the image indexed by
imageIndex
and returns
 it as a complete
BufferedImage
, using a default
ImageReadParam
.
abstract
BufferedImage
ImageReader.
read
(int imageIndex,
ImageReadParam
param)
Reads the image indexed by
imageIndex
and returns
 it as a complete
BufferedImage
, using a supplied
ImageReadParam
.
IIOImage
ImageReader.
readAll
(int imageIndex,
ImageReadParam
param)
Reads the image indexed by
imageIndex
and returns
 an
IIOImage
containing the image, thumbnails, and
 associated image metadata, using a supplied
ImageReadParam
.
Iterator
<
IIOImage
>
ImageReader.
readAll
(
Iterator
<? extends
ImageReadParam
> params)
Returns an
Iterator
containing all the images,
 thumbnails, and metadata, starting at the index given by
getMinIndex
, from the input source in the form of
IIOImage
objects.
RenderedImage
ImageReader.
readAsRenderedImage
(int imageIndex,
ImageReadParam
param)
Returns a
RenderedImage
object that contains the
 contents of the image indexed by
imageIndex
.
Raster
ImageReader.
readRaster
(int imageIndex,
ImageReadParam
param)
Returns a new
Raster
object containing the raw pixel data
 from the image stream, without any color conversion applied.
BufferedImage
ImageReader.
readThumbnail
(int imageIndex,
 int thumbnailIndex)
Returns the thumbnail preview image indexed by
thumbnailIndex
, associated with the image indexed
 by
ImageIndex
as a
BufferedImage
.
BufferedImage
ImageReader.
readTile
(int imageIndex,
 int tileX,
 int tileY)
Reads the tile indicated by the
tileX
and
tileY
arguments, returning it as a
BufferedImage
.
Raster
ImageReader.
readTileRaster
(int imageIndex,
 int tileX,
 int tileY)
Returns a new
Raster
object containing the raw
 pixel data from the tile, without any color conversion applied.
void
ImageWriter.
removeImage
(int imageIndex)
Removes an image from the stream.
void
ImageWriter.
replaceImageMetadata
(int imageIndex,
IIOMetadata
imageMetadata)
Replaces the image metadata associated with an existing image.
void
ImageWriter.
replacePixels
(
Raster
raster,
ImageWriteParam
param)
Replaces a portion of an image already present in the output
 with a portion of the given
Raster
.
void
ImageWriter.
replacePixels
(
RenderedImage
image,
ImageWriteParam
param)
Replaces a portion of an image already present in the output
 with a portion of the given image.
void
ImageWriter.
replaceStreamMetadata
(
IIOMetadata
streamMetadata)
Replaces the stream metadata in the output with new
 information.
static boolean
ImageIO.
write
(
RenderedImage
im,
String
formatName,
File
output)
Writes an image using an arbitrary
ImageWriter
that supports the given format to a
File
.
static boolean
ImageIO.
write
(
RenderedImage
im,
String
formatName,
OutputStream
output)
Writes an image using an arbitrary
ImageWriter
that supports the given format to an
OutputStream
.
static boolean
ImageIO.
write
(
RenderedImage
im,
String
formatName,
ImageOutputStream
output)
Writes an image using an arbitrary
ImageWriter
that supports the given format to an
ImageOutputStream
.
void
ImageWriter.
write
(
RenderedImage
image)
Appends a complete image stream consisting of a single image
 with default metadata and thumbnails to the output.
void
ImageWriter.
write
(
IIOImage
image)
Appends a complete image stream containing a single image with
 default metadata and thumbnails to the output.
abstract void
ImageWriter.
write
(
IIOMetadata
streamMetadata,
IIOImage
image,
ImageWriteParam
param)
Appends a complete image stream containing a single image and
 associated stream and image metadata and thumbnails to the
 output.
void
ImageWriter.
writeInsert
(int imageIndex,
IIOImage
image,
ImageWriteParam
param)
Inserts a new image into an existing image stream.
void
ImageWriter.
writeToSequence
(
IIOImage
image,
ImageWriteParam
param)
Appends a single image and possibly associated metadata and
 thumbnails, to the output.
Uses of
IOException
in
javax.imageio.metadata
Subclasses of
IOException
in
javax.imageio.metadata
Modifier and Type
Class
Description
class
IIOInvalidTreeException
An
IIOInvalidTreeException
is thrown when an attempt
 by an
IIOMetadata
object to parse a tree of
IIOMetadataNode
s fails.
Uses of
IOException
in
javax.imageio.spi
Methods in
javax.imageio.spi
that throw
IOException
Modifier and Type
Method
Description
abstract boolean
ImageReaderSpi.
canDecodeInput
(
Object
source)
Returns
true
if the supplied source object appears
 to be of the format supported by this reader.
ImageInputStream
ImageInputStreamSpi.
createInputStreamInstance
(
Object
input)
Returns an instance of the
ImageInputStream
implementation associated with this service provider.
abstract
ImageInputStream
ImageInputStreamSpi.
createInputStreamInstance
(
Object
input,
 boolean useCache,
File
cacheDir)
Returns an instance of the
ImageInputStream
implementation associated with this service provider.
ImageOutputStream
ImageOutputStreamSpi.
createOutputStreamInstance
(
Object
output)
Returns an instance of the
ImageOutputStream
implementation associated with this service provider.
abstract
ImageOutputStream
ImageOutputStreamSpi.
createOutputStreamInstance
(
Object
output,
 boolean useCache,
File
cacheDir)
Returns an instance of the
ImageOutputStream
implementation associated with this service provider.
ImageReader
ImageReaderSpi.
createReaderInstance
()
Returns an instance of the
ImageReader
implementation associated with this service provider.
abstract
ImageReader
ImageReaderSpi.
createReaderInstance
(
Object
extension)
Returns an instance of the
ImageReader
implementation associated with this service provider.
ImageWriter
ImageWriterSpi.
createWriterInstance
()
Returns an instance of the
ImageWriter
implementation associated with this service provider.
abstract
ImageWriter
ImageWriterSpi.
createWriterInstance
(
Object
extension)
Returns an instance of the
ImageWriter
implementation associated with this service provider.
Uses of
IOException
in
javax.imageio.stream
Methods in
javax.imageio.stream
that throw
IOException
Modifier and Type
Method
Description
protected final void
ImageInputStreamImpl.
checkClosed
()
Throws an
IOException
if the stream has been closed.
void
FileCacheImageInputStream.
close
()
Closes this
FileCacheImageInputStream
, closing
 and removing the cache file.
void
FileCacheImageOutputStream.
close
()
Closes this
FileCacheImageOutputStream
.
void
FileImageOutputStream.
close
()
void
ImageInputStream.
close
()
Closes the stream.
void
ImageInputStreamImpl.
close
()
void
MemoryCacheImageInputStream.
close
()
Closes this
MemoryCacheImageInputStream
, freeing
 the cache.
void
MemoryCacheImageOutputStream.
close
()
Closes this
MemoryCacheImageOutputStream
.
void
ImageInputStream.
flush
()
Discards the initial position of the stream prior to the current
 stream position.
void
ImageInputStreamImpl.
flush
()
void
FileCacheImageOutputStream.
flushBefore
(long pos)
void
ImageInputStream.
flushBefore
(long pos)
Discards the initial portion of the stream prior to the
 indicated position.
void
ImageInputStreamImpl.
flushBefore
(long pos)
void
ImageOutputStream.
flushBefore
(long pos)
Flushes all data prior to the given position to the underlying
 destination, such as an
OutputStream
or
File
.
void
MemoryCacheImageOutputStream.
flushBefore
(long pos)
protected final void
ImageOutputStreamImpl.
flushBits
()
If the bit offset is non-zero, forces the remaining bits
 in the current byte to 0 and advances the stream position
 by one.
int
ImageInputStream.
getBitOffset
()
Returns the current bit offset, as an integer between 0 and 7,
 inclusive.
int
ImageInputStreamImpl.
getBitOffset
()
long
ImageInputStream.
getStreamPosition
()
Returns the current byte position of the stream.
long
ImageInputStreamImpl.
getStreamPosition
()
long
ImageInputStream.
length
()
Returns the total length of the stream, if known.
int
FileCacheImageInputStream.
read
()
int
FileCacheImageInputStream.
read
(byte[] b,
 int off,
 int len)
int
FileCacheImageOutputStream.
read
()
int
FileCacheImageOutputStream.
read
(byte[] b,
 int off,
 int len)
int
FileImageInputStream.
read
()
int
FileImageInputStream.
read
(byte[] b,
 int off,
 int len)
int
FileImageOutputStream.
read
()
int
FileImageOutputStream.
read
(byte[] b,
 int off,
 int len)
int
ImageInputStream.
read
()
Reads a single byte from the stream and returns it as an
 integer between 0 and 255.
int
ImageInputStream.
read
(byte[] b)
Reads up to
b.length
bytes from the stream, and
 stores them into
b
starting at index 0.
int
ImageInputStream.
read
(byte[] b,
 int off,
 int len)
Reads up to
len
bytes from the stream, and stores
 them into
b
starting at index
off
.
abstract int
ImageInputStreamImpl.
read
()
Reads a single byte from the stream and returns it as an
int
between 0 and 255.
int
ImageInputStreamImpl.
read
(byte[] b)
A convenience method that calls
read(b, 0, b.length)
.
abstract int
ImageInputStreamImpl.
read
(byte[] b,
 int off,
 int len)
Reads up to
len
bytes from the stream, and stores
 them into
b
starting at index
off
.
int
MemoryCacheImageInputStream.
read
()
int
MemoryCacheImageInputStream.
read
(byte[] b,
 int off,
 int len)
int
MemoryCacheImageOutputStream.
read
()
int
MemoryCacheImageOutputStream.
read
(byte[] b,
 int off,
 int len)
int
ImageInputStream.
readBit
()
Reads a single bit from the stream and returns it as an
int
with the value
0
or
1
.
int
ImageInputStreamImpl.
readBit
()
long
ImageInputStream.
readBits
(int numBits)
Reads a bitstring from the stream and returns it as a
long
, with the first bit read becoming the most
 significant bit of the output.
long
ImageInputStreamImpl.
readBits
(int numBits)
boolean
ImageInputStream.
readBoolean
()
Reads a byte from the stream and returns a
boolean
value of
true
if it is nonzero,
false
if it is zero.
boolean
ImageInputStreamImpl.
readBoolean
()
byte
ImageInputStream.
readByte
()
Reads a byte from the stream and returns it as a
byte
value.
byte
ImageInputStreamImpl.
readByte
()
void
ImageInputStream.
readBytes
(
IIOByteBuffer
buf,
 int len)
Reads up to
len
bytes from the stream, and
 modifies the supplied
IIOByteBuffer
to indicate
 the byte array, offset, and length where the data may be found.
void
ImageInputStreamImpl.
readBytes
(
IIOByteBuffer
buf,
 int len)
char
ImageInputStream.
readChar
()
Equivalent to
readUnsignedShort
, except that the
 result is returned using the
char
datatype.
char
ImageInputStreamImpl.
readChar
()
double
ImageInputStream.
readDouble
()
Reads 8 bytes from the stream, and (conceptually) concatenates
 them according to the current byte order and returns the result
 as a
double
.
double
ImageInputStreamImpl.
readDouble
()
float
ImageInputStream.
readFloat
()
Reads 4 bytes from the stream, and (conceptually) concatenates
 them according to the current byte order and returns the result
 as a
float
.
float
ImageInputStreamImpl.
readFloat
()
void
ImageInputStream.
readFully
(byte[] b)
Reads
b.length
bytes from the stream, and stores them
 into
b
starting at index
0
.
void
ImageInputStream.
readFully
(byte[] b,
 int off,
 int len)
Reads
len
bytes from the stream, and stores them
 into
b
starting at index
off
.
void
ImageInputStream.
readFully
(char[] c,
 int off,
 int len)
Reads
len
chars (unsigned 16-bit integers) from the
 stream according to the current byte order, and
 stores them into
c
starting at index
off
.
void
ImageInputStream.
readFully
(double[] d,
 int off,
 int len)
Reads
len
doubles (64-bit IEEE double-precision
 floats) from the stream according to the current byte order,
 and stores them into
d
starting at
 index
off
.
void
ImageInputStream.
readFully
(float[] f,
 int off,
 int len)
Reads
len
floats (32-bit IEEE single-precision
 floats) from the stream according to the current byte order,
 and stores them into
f
starting at
 index
off
.
void
ImageInputStream.
readFully
(int[] i,
 int off,
 int len)
Reads
len
ints (signed 32-bit integers) from the
 stream according to the current byte order, and
 stores them into
i
starting at index
off
.
void
ImageInputStream.
readFully
(long[] l,
 int off,
 int len)
Reads
len
longs (signed 64-bit integers) from the
 stream according to the current byte order, and
 stores them into
l
starting at index
off
.
void
ImageInputStream.
readFully
(short[] s,
 int off,
 int len)
Reads
len
shorts (signed 16-bit integers) from the
 stream according to the current byte order, and
 stores them into
s
starting at index
off
.
void
ImageInputStreamImpl.
readFully
(byte[] b)
void
ImageInputStreamImpl.
readFully
(byte[] b,
 int off,
 int len)
void
ImageInputStreamImpl.
readFully
(char[] c,
 int off,
 int len)
void
ImageInputStreamImpl.
readFully
(double[] d,
 int off,
 int len)
void
ImageInputStreamImpl.
readFully
(float[] f,
 int off,
 int len)
void
ImageInputStreamImpl.
readFully
(int[] i,
 int off,
 int len)
void
ImageInputStreamImpl.
readFully
(long[] l,
 int off,
 int len)
void
ImageInputStreamImpl.
readFully
(short[] s,
 int off,
 int len)
int
ImageInputStream.
readInt
()
Reads 4 bytes from the stream, and (conceptually) concatenates
 them according to the current byte order and returns the result
 as an
int
.
int
ImageInputStreamImpl.
readInt
()
String
ImageInputStream.
readLine
()
Reads the next line of text from the input stream.
String
ImageInputStreamImpl.
readLine
()
long
ImageInputStream.
readLong
()
Reads 8 bytes from the stream, and (conceptually) concatenates
 them according to the current byte order and returns the result
 as a
long
.
long
ImageInputStreamImpl.
readLong
()
short
ImageInputStream.
readShort
()
Reads two bytes from the stream, and (conceptually)
 concatenates them according to the current byte order, and
 returns the result as a
short
value.
short
ImageInputStreamImpl.
readShort
()
int
ImageInputStream.
readUnsignedByte
()
Reads a byte from the stream, and (conceptually) converts it to
 an int, masks it with
0xff
in order to strip off
 any sign-extension bits, and returns it as a
byte
value.
int
ImageInputStreamImpl.
readUnsignedByte
()
long
ImageInputStream.
readUnsignedInt
()
Reads 4 bytes from the stream, and (conceptually) concatenates
 them according to the current byte order, converts the result
 to a long, masks it with
0xffffffffL
in order to
 strip off any sign-extension bits, and returns the result as an
 unsigned
long
value.
long
ImageInputStreamImpl.
readUnsignedInt
()
int
ImageInputStream.
readUnsignedShort
()
Reads two bytes from the stream, and (conceptually)
 concatenates them according to the current byte order, converts
 the resulting value to an
int
, masks it with
0xffff
in order to strip off any sign-extension
 buts, and returns the result as an unsigned
int
value.
int
ImageInputStreamImpl.
readUnsignedShort
()
String
ImageInputStream.
readUTF
()
Reads in a string that has been encoded using a
modified UTF-8
format.
String
ImageInputStreamImpl.
readUTF
()
void
ImageInputStream.
reset
()
Returns the stream pointer to its previous position, including
 the bit offset, at the time of the most recent unmatched call
 to
mark
.
void
ImageInputStreamImpl.
reset
()
Resets the current stream byte and bit positions from the stack
 of marked positions.
void
FileCacheImageOutputStream.
seek
(long pos)
Sets the current stream position and resets the bit offset to
 0.
void
FileImageOutputStream.
seek
(long pos)
Sets the current stream position and resets the bit offset to
 0.
void
ImageInputStream.
seek
(long pos)
Sets the current stream position to the desired location.
void
ImageInputStreamImpl.
seek
(long pos)
void
ImageInputStream.
setBitOffset
(int bitOffset)
Sets the bit offset to an integer between 0 and 7, inclusive.
void
ImageInputStreamImpl.
setBitOffset
(int bitOffset)
int
ImageInputStream.
skipBytes
(int n)
Moves the stream position forward by a given number of bytes.
long
ImageInputStream.
skipBytes
(long n)
Moves the stream position forward by a given number of bytes.
int
ImageInputStreamImpl.
skipBytes
(int n)
Advances the current stream position by calling
seek(getStreamPosition() + n)
.
long
ImageInputStreamImpl.
skipBytes
(long n)
Advances the current stream position by calling
seek(getStreamPosition() + n)
.
void
FileCacheImageOutputStream.
write
(byte[] b,
 int off,
 int len)
void
FileCacheImageOutputStream.
write
(int b)
void
FileImageOutputStream.
write
(byte[] b,
 int off,
 int len)
void
FileImageOutputStream.
write
(int b)
void
ImageOutputStream.
write
(byte[] b)
Writes a sequence of bytes to the stream at the current
 position.
void
ImageOutputStream.
write
(byte[] b,
 int off,
 int len)
Writes a sequence of bytes to the stream at the current
 position.
void
ImageOutputStream.
write
(int b)
Writes a single byte to the stream at the current position.
void
ImageOutputStreamImpl.
write
(byte[] b)
void
MemoryCacheImageOutputStream.
write
(byte[] b,
 int off,
 int len)
void
MemoryCacheImageOutputStream.
write
(int b)
void
ImageOutputStream.
writeBit
(int bit)
Writes a single bit, given by the least significant bit of the
 argument, to the stream at the current bit offset within the
 current byte position.
void
ImageOutputStreamImpl.
writeBit
(int bit)
void
ImageOutputStream.
writeBits
(long bits,
 int numBits)
Writes a sequence of bits, given by the
numBits
least significant bits of the
bits
argument in
 left-to-right order, to the stream at the current bit offset
 within the current byte position.
void
ImageOutputStreamImpl.
writeBits
(long bits,
 int numBits)
void
ImageOutputStream.
writeBoolean
(boolean v)
Writes a
boolean
value to the stream.
void
ImageOutputStreamImpl.
writeBoolean
(boolean v)
void
ImageOutputStream.
writeByte
(int v)
Writes the 8 low-order bits of
v
to the
 stream.
void
ImageOutputStreamImpl.
writeByte
(int v)
void
ImageOutputStream.
writeBytes
(
String
s)
Writes a string to the output stream.
void
ImageOutputStreamImpl.
writeBytes
(
String
s)
void
ImageOutputStream.
writeChar
(int v)
This method is a synonym for
writeShort
.
void
ImageOutputStreamImpl.
writeChar
(int v)
void
ImageOutputStream.
writeChars
(char[] c,
 int off,
 int len)
Writes a sequence of chars to the stream at the current
 position.
void
ImageOutputStream.
writeChars
(
String
s)
Writes a string to the output stream.
void
ImageOutputStreamImpl.
writeChars
(char[] c,
 int off,
 int len)
void
ImageOutputStreamImpl.
writeChars
(
String
s)
void
ImageOutputStream.
writeDouble
(double v)
Writes a
double
value, which is comprised of four
 bytes, to the output stream.
void
ImageOutputStreamImpl.
writeDouble
(double v)
void
ImageOutputStream.
writeDoubles
(double[] d,
 int off,
 int len)
Writes a sequence of doubles to the stream at the current
 position.
void
ImageOutputStreamImpl.
writeDoubles
(double[] d,
 int off,
 int len)
void
ImageOutputStream.
writeFloat
(float v)
Writes a
float
value, which is comprised of four
 bytes, to the output stream.
void
ImageOutputStreamImpl.
writeFloat
(float v)
void
ImageOutputStream.
writeFloats
(float[] f,
 int off,
 int len)
Writes a sequence of floats to the stream at the current
 position.
void
ImageOutputStreamImpl.
writeFloats
(float[] f,
 int off,
 int len)
void
ImageOutputStream.
writeInt
(int v)
Writes the 32 bits of
v
to the stream.
void
ImageOutputStreamImpl.
writeInt
(int v)
void
ImageOutputStream.
writeInts
(int[] i,
 int off,
 int len)
Writes a sequence of ints to the stream at the current
 position.
void
ImageOutputStreamImpl.
writeInts
(int[] i,
 int off,
 int len)
void
ImageOutputStream.
writeLong
(long v)
Writes the 64 bits of
v
to the stream.
void
ImageOutputStreamImpl.
writeLong
(long v)
void
ImageOutputStream.
writeLongs
(long[] l,
 int off,
 int len)
Writes a sequence of longs to the stream at the current
 position.
void
ImageOutputStreamImpl.
writeLongs
(long[] l,
 int off,
 int len)
void
ImageOutputStream.
writeShort
(int v)
Writes the 16 low-order bits of
v
to the
 stream.
void
ImageOutputStreamImpl.
writeShort
(int v)
void
ImageOutputStream.
writeShorts
(short[] s,
 int off,
 int len)
Writes a sequence of shorts to the stream at the current
 position.
void
ImageOutputStreamImpl.
writeShorts
(short[] s,
 int off,
 int len)
void
ImageOutputStream.
writeUTF
(
String
s)
Writes two bytes of length information to the output stream in
 network byte order, followed by the
modified UTF-8
representation of every character in the string
s
.
void
ImageOutputStreamImpl.
writeUTF
(
String
s)
Constructors in
javax.imageio.stream
that throw
IOException
Modifier
Constructor
Description
FileCacheImageInputStream
(
InputStream
stream,
File
cacheDir)
Constructs a
FileCacheImageInputStream
that will read
 from a given
InputStream
.
FileCacheImageOutputStream
(
OutputStream
stream,
File
cacheDir)
Constructs a
FileCacheImageOutputStream
that will write
 to a given
outputStream
.
FileImageInputStream
(
File
f)
Constructs a
FileImageInputStream
that will read
 from a given
File
.
FileImageOutputStream
(
File
f)
Constructs a
FileImageOutputStream
that will write
 to a given
File
.
Uses of
IOException
in
javax.management
Methods in
javax.management
that throw
IOException
Modifier and Type
Method
Description
void
MBeanServerConnection.
addNotificationListener
(
ObjectName
name,
NotificationListener
listener,
NotificationFilter
filter,
Object
handback)
Adds a listener to a registered MBean.
void
MBeanServerConnection.
addNotificationListener
(
ObjectName
name,
ObjectName
listener,
NotificationFilter
filter,
Object
handback)
Adds a listener to a registered MBean.
ObjectInstance
MBeanServerConnection.
createMBean
(
String
className,
ObjectName
name)
Instantiates and registers an MBean in the MBean server.
ObjectInstance
MBeanServerConnection.
createMBean
(
String
className,
ObjectName
name,
Object
[] params,
String
[] signature)
Instantiates and registers an MBean in the MBean server.
ObjectInstance
MBeanServerConnection.
createMBean
(
String
className,
ObjectName
name,
ObjectName
loaderName)
Instantiates and registers an MBean in the MBean server.
ObjectInstance
MBeanServerConnection.
createMBean
(
String
className,
ObjectName
name,
ObjectName
loaderName,
Object
[] params,
String
[] signature)
Instantiates and registers an MBean in the MBean server.
Object
MBeanServerConnection.
getAttribute
(
ObjectName
name,
String
attribute)
Gets the value of a specific attribute of a named MBean.
AttributeList
MBeanServerConnection.
getAttributes
(
ObjectName
name,
String
[] attributes)
Retrieves the values of several attributes of a named MBean.
String
MBeanServerConnection.
getDefaultDomain
()
Returns the default domain used for naming the MBean.
String
[]
MBeanServerConnection.
getDomains
()
Returns the list of domains in which any MBean is currently
 registered.
Integer
MBeanServerConnection.
getMBeanCount
()
Returns the number of MBeans registered in the MBean server.
MBeanInfo
MBeanServerConnection.
getMBeanInfo
(
ObjectName
name)
This method discovers the attributes and operations that an
 MBean exposes for management.
ObjectInstance
MBeanServerConnection.
getObjectInstance
(
ObjectName
name)
Gets the
ObjectInstance
for a given MBean
 registered with the MBean server.
Object
MBeanServerConnection.
invoke
(
ObjectName
name,
String
operationName,
Object
[] params,
String
[] signature)
Invokes an operation on an MBean.
boolean
MBeanServerConnection.
isInstanceOf
(
ObjectName
name,
String
className)
Returns true if the MBean specified is an instance of the
 specified class, false otherwise.
boolean
MBeanServerConnection.
isRegistered
(
ObjectName
name)
Checks whether an MBean, identified by its object name, is
 already registered with the MBean server.
Set
<
ObjectInstance
>
MBeanServerConnection.
queryMBeans
(
ObjectName
name,
QueryExp
query)
Gets MBeans controlled by the MBean server.
Set
<
ObjectName
>
MBeanServerConnection.
queryNames
(
ObjectName
name,
QueryExp
query)
Gets the names of MBeans controlled by the MBean server.
void
MBeanServerConnection.
removeNotificationListener
(
ObjectName
name,
NotificationListener
listener)
Removes a listener from a registered MBean.
void
MBeanServerConnection.
removeNotificationListener
(
ObjectName
name,
NotificationListener
listener,
NotificationFilter
filter,
Object
handback)
Removes a listener from a registered MBean.
void
MBeanServerConnection.
removeNotificationListener
(
ObjectName
name,
ObjectName
listener)
Removes a listener from a registered MBean.
void
MBeanServerConnection.
removeNotificationListener
(
ObjectName
name,
ObjectName
listener,
NotificationFilter
filter,
Object
handback)
Removes a listener from a registered MBean.
void
MBeanServerConnection.
setAttribute
(
ObjectName
name,
Attribute
attribute)
Sets the value of a specific attribute of a named MBean.
AttributeList
MBeanServerConnection.
setAttributes
(
ObjectName
name,
AttributeList
attributes)
Sets the values of several attributes of a named MBean.
void
MBeanServerConnection.
unregisterMBean
(
ObjectName
name)
Unregisters an MBean from the MBean server.
Uses of
IOException
in
javax.management.loading
Methods in
javax.management.loading
that throw
IOException
Modifier and Type
Method
Description
Enumeration
<
URL
>
MLetMBean.
getResources
(
String
name)
Deprecated, for removal: This API element is subject to removal in a future version.
Finds all the resources with the given name.
void
MLet.
readExternal
(
ObjectInput
in)
Deprecated, for removal: This API element is subject to removal in a future version.
Restore this MLet's contents from the given
ObjectInput
.
void
MLet.
writeExternal
(
ObjectOutput
out)
Deprecated, for removal: This API element is subject to removal in a future version.
Save this MLet's contents to the given
ObjectOutput
.
Uses of
IOException
in
javax.management.remote
Subclasses of
IOException
in
javax.management.remote
Modifier and Type
Class
Description
class
JMXProviderException
Exception thrown by
JMXConnectorFactory
and
JMXConnectorServerFactory
when a provider exists for
 the required protocol but cannot be used for some reason.
class
JMXServerErrorException
Exception thrown as the result of a remote
MBeanServer
method invocation when an
Error
is thrown while
 processing the invocation in the remote MBean server.
Methods in
javax.management.remote
that throw
IOException
Modifier and Type
Method
Description
void
JMXConnector.
close
()
Closes the client connection to its server.
void
JMXConnector.
connect
()
Establishes the connection to the connector server.
void
JMXConnector.
connect
(
Map
<
String
,
?> env)
Establishes the connection to the connector server.
static
JMXConnector
JMXConnectorFactory.
connect
(
JMXServiceURL
serviceURL)
Creates a connection to the connector server at the given
 address.
static
JMXConnector
JMXConnectorFactory.
connect
(
JMXServiceURL
serviceURL,
Map
<
String
,
?> environment)
Creates a connection to the connector server at the given
 address.
String
JMXConnector.
getConnectionId
()
Gets this connection's ID from the connector server.
MBeanServerConnection
JMXConnector.
getMBeanServerConnection
()
Returns an
MBeanServerConnection
object
 representing a remote MBean server.
MBeanServerConnection
JMXConnector.
getMBeanServerConnection
(
Subject
delegationSubject)
Deprecated, for removal: This API element is subject to removal in a future version.
This method supported the legacy Subject Delegation feature,
 and is only useful in conjunction with other APIs which are deprecated and
 subject to removal in a future release.
static
JMXConnector
JMXConnectorFactory.
newJMXConnector
(
JMXServiceURL
serviceURL,
Map
<
String
,
?> environment)
Creates a connector client for the connector server at the
 given address.
JMXConnector
JMXConnectorProvider.
newJMXConnector
(
JMXServiceURL
serviceURL,
Map
<
String
,
?> environment)
Creates a new connector client that is ready to connect
 to the connector server at the given address.
static
JMXConnectorServer
JMXConnectorServerFactory.
newJMXConnectorServer
(
JMXServiceURL
serviceURL,
Map
<
String
,
?> environment,
MBeanServer
mbeanServer)
Creates a connector server at the given address.
JMXConnectorServer
JMXConnectorServerProvider.
newJMXConnectorServer
(
JMXServiceURL
serviceURL,
Map
<
String
,
?> environment,
MBeanServer
mbeanServer)
Creates a new connector server at the given address.
void
JMXConnectorServerMBean.
start
()
Activates the connector server, that is, starts listening for
 client connections.
void
JMXConnectorServerMBean.
stop
()
Deactivates the connector server, that is, stops listening for
 client connections.
JMXConnector
JMXConnectorServer.
toJMXConnector
(
Map
<
String
,
?> env)
Returns a client stub for this connector server.
JMXConnector
JMXConnectorServerMBean.
toJMXConnector
(
Map
<
String
,
?> env)
Returns a client stub for this connector server.
Uses of
IOException
in
javax.management.remote.rmi
Methods in
javax.management.remote.rmi
that throw
IOException
Modifier and Type
Method
Description
void
RMIConnection.
addNotificationListener
(
ObjectName
name,
ObjectName
listener,
MarshalledObject
filter,
MarshalledObject
handback,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.addNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)
.
void
RMIConnectionImpl_Stub.
addNotificationListener
(
ObjectName
$param_ObjectName_1,
ObjectName
$param_ObjectName_2,
MarshalledObject
$param_MarshalledObject_3,
MarshalledObject
$param_MarshalledObject_4,
Subject
$param_Subject_5)
void
RMIConnectionImpl.
addNotificationListener
(
ObjectName
name,
ObjectName
listener,
MarshalledObject
filter,
MarshalledObject
handback,
Subject
delegationSubject)
Integer
[]
RMIConnection.
addNotificationListeners
(
ObjectName
[] names,
MarshalledObject
[] filters,
Subject
[] delegationSubjects)
Handles the method
MBeanServerConnection.addNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)
.
Integer
[]
RMIConnectionImpl_Stub.
addNotificationListeners
(
ObjectName
[] $param_arrayOf_ObjectName_1,
MarshalledObject
[] $param_arrayOf_MarshalledObject_2,
Subject
[] $param_arrayOf_Subject_3)
Integer
[]
RMIConnectionImpl.
addNotificationListeners
(
ObjectName
[] names,
MarshalledObject
[] filters,
Subject
[] delegationSubjects)
protected void
RMIServerImpl.
clientClosed
(
RMIConnection
client)
Method called when a client connection created by
makeClient
is closed.
void
RMIConnection.
close
()
Closes this connection.
void
RMIConnectionImpl_Stub.
close
()
void
RMIConnectionImpl.
close
()
void
RMIConnector.
close
()
void
RMIServerImpl.
close
()
Closes this connection server.
protected void
RMIJRMPServerImpl.
closeClient
(
RMIConnection
client)
protected abstract void
RMIServerImpl.
closeClient
(
RMIConnection
client)
Closes a client connection made by
makeClient
.
protected void
RMIJRMPServerImpl.
closeServer
()
Called by
RMIServerImpl.close()
to close the connector server by
 unexporting this object.
protected abstract void
RMIServerImpl.
closeServer
()
Called by
RMIServerImpl.close()
to close the connector server.
void
RMIConnector.
connect
()
void
RMIConnector.
connect
(
Map
<
String
,
?> environment)
ObjectInstance
RMIConnection.
createMBean
(
String
className,
ObjectName
name,
MarshalledObject
params,
String
[] signature,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.createMBean(String, ObjectName, Object[], String[])
.
ObjectInstance
RMIConnection.
createMBean
(
String
className,
ObjectName
name,
ObjectName
loaderName,
MarshalledObject
params,
String
[] signature,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.createMBean(String, ObjectName, ObjectName, Object[], String[])
.
ObjectInstance
RMIConnection.
createMBean
(
String
className,
ObjectName
name,
ObjectName
loaderName,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.createMBean(String, ObjectName, ObjectName)
.
ObjectInstance
RMIConnection.
createMBean
(
String
className,
ObjectName
name,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.createMBean(String, ObjectName)
.
ObjectInstance
RMIConnectionImpl_Stub.
createMBean
(
String
$param_String_1,
ObjectName
$param_ObjectName_2,
MarshalledObject
$param_MarshalledObject_3,
String
[] $param_arrayOf_String_4,
Subject
$param_Subject_5)
ObjectInstance
RMIConnectionImpl_Stub.
createMBean
(
String
$param_String_1,
ObjectName
$param_ObjectName_2,
ObjectName
$param_ObjectName_3,
MarshalledObject
$param_MarshalledObject_4,
String
[] $param_arrayOf_String_5,
Subject
$param_Subject_6)
ObjectInstance
RMIConnectionImpl_Stub.
createMBean
(
String
$param_String_1,
ObjectName
$param_ObjectName_2,
ObjectName
$param_ObjectName_3,
Subject
$param_Subject_4)
ObjectInstance
RMIConnectionImpl_Stub.
createMBean
(
String
$param_String_1,
ObjectName
$param_ObjectName_2,
Subject
$param_Subject_3)
ObjectInstance
RMIConnectionImpl.
createMBean
(
String
className,
ObjectName
name,
MarshalledObject
params,
String
[] signature,
Subject
delegationSubject)
ObjectInstance
RMIConnectionImpl.
createMBean
(
String
className,
ObjectName
name,
ObjectName
loaderName,
MarshalledObject
params,
String
[] signature,
Subject
delegationSubject)
ObjectInstance
RMIConnectionImpl.
createMBean
(
String
className,
ObjectName
name,
ObjectName
loaderName,
Subject
delegationSubject)
ObjectInstance
RMIConnectionImpl.
createMBean
(
String
className,
ObjectName
name,
Subject
delegationSubject)
protected void
RMIJRMPServerImpl.
export
()
protected abstract void
RMIServerImpl.
export
()
Exports this RMI object.
NotificationResult
RMIConnection.
fetchNotifications
(long clientSequenceNumber,
 int maxNotifications,
 long timeout)
Retrieves notifications from the connector server.
NotificationResult
RMIConnectionImpl_Stub.
fetchNotifications
(long $param_long_1,
 int $param_int_2,
 long $param_long_3)
NotificationResult
RMIConnectionImpl.
fetchNotifications
(long clientSequenceNumber,
 int maxNotifications,
 long timeout)
Object
RMIConnection.
getAttribute
(
ObjectName
name,
String
attribute,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.getAttribute(ObjectName, String)
.
Object
RMIConnectionImpl_Stub.
getAttribute
(
ObjectName
$param_ObjectName_1,
String
$param_String_2,
Subject
$param_Subject_3)
Object
RMIConnectionImpl.
getAttribute
(
ObjectName
name,
String
attribute,
Subject
delegationSubject)
AttributeList
RMIConnection.
getAttributes
(
ObjectName
name,
String
[] attributes,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.getAttributes(ObjectName, String[])
.
AttributeList
RMIConnectionImpl_Stub.
getAttributes
(
ObjectName
$param_ObjectName_1,
String
[] $param_arrayOf_String_2,
Subject
$param_Subject_3)
AttributeList
RMIConnectionImpl.
getAttributes
(
ObjectName
name,
String
[] attributes,
Subject
delegationSubject)
String
RMIConnection.
getConnectionId
()
Returns the connection ID.
String
RMIConnectionImpl_Stub.
getConnectionId
()
String
RMIConnectionImpl.
getConnectionId
()
String
RMIConnector.
getConnectionId
()
String
RMIConnection.
getDefaultDomain
(
Subject
delegationSubject)
Handles the method
MBeanServerConnection.getDefaultDomain()
.
String
RMIConnectionImpl_Stub.
getDefaultDomain
(
Subject
$param_Subject_1)
String
RMIConnectionImpl.
getDefaultDomain
(
Subject
delegationSubject)
String
[]
RMIConnection.
getDomains
(
Subject
delegationSubject)
Handles the method
MBeanServerConnection.getDomains()
.
String
[]
RMIConnectionImpl_Stub.
getDomains
(
Subject
$param_Subject_1)
String
[]
RMIConnectionImpl.
getDomains
(
Subject
delegationSubject)
Integer
RMIConnection.
getMBeanCount
(
Subject
delegationSubject)
Handles the method
MBeanServerConnection.getMBeanCount()
.
Integer
RMIConnectionImpl_Stub.
getMBeanCount
(
Subject
$param_Subject_1)
Integer
RMIConnectionImpl.
getMBeanCount
(
Subject
delegationSubject)
MBeanInfo
RMIConnection.
getMBeanInfo
(
ObjectName
name,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.getMBeanInfo(ObjectName)
.
MBeanInfo
RMIConnectionImpl_Stub.
getMBeanInfo
(
ObjectName
$param_ObjectName_1,
Subject
$param_Subject_2)
MBeanInfo
RMIConnectionImpl.
getMBeanInfo
(
ObjectName
name,
Subject
delegationSubject)
MBeanServerConnection
RMIConnector.
getMBeanServerConnection
()
MBeanServerConnection
RMIConnector.
getMBeanServerConnection
(
Subject
delegationSubject)
ObjectInstance
RMIConnection.
getObjectInstance
(
ObjectName
name,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.getObjectInstance(ObjectName)
.
ObjectInstance
RMIConnectionImpl_Stub.
getObjectInstance
(
ObjectName
$param_ObjectName_1,
Subject
$param_Subject_2)
ObjectInstance
RMIConnectionImpl.
getObjectInstance
(
ObjectName
name,
Subject
delegationSubject)
Object
RMIConnection.
invoke
(
ObjectName
name,
String
operationName,
MarshalledObject
params,
String
[] signature,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.invoke(ObjectName, String, Object[], String[])
.
Object
RMIConnectionImpl_Stub.
invoke
(
ObjectName
$param_ObjectName_1,
String
$param_String_2,
MarshalledObject
$param_MarshalledObject_3,
String
[] $param_arrayOf_String_4,
Subject
$param_Subject_5)
Object
RMIConnectionImpl.
invoke
(
ObjectName
name,
String
operationName,
MarshalledObject
params,
String
[] signature,
Subject
delegationSubject)
boolean
RMIConnection.
isInstanceOf
(
ObjectName
name,
String
className,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.isInstanceOf(ObjectName, String)
.
boolean
RMIConnectionImpl_Stub.
isInstanceOf
(
ObjectName
$param_ObjectName_1,
String
$param_String_2,
Subject
$param_Subject_3)
boolean
RMIConnectionImpl.
isInstanceOf
(
ObjectName
name,
String
className,
Subject
delegationSubject)
boolean
RMIConnection.
isRegistered
(
ObjectName
name,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.isRegistered(ObjectName)
.
boolean
RMIConnectionImpl_Stub.
isRegistered
(
ObjectName
$param_ObjectName_1,
Subject
$param_Subject_2)
boolean
RMIConnectionImpl.
isRegistered
(
ObjectName
name,
Subject
delegationSubject)
protected
RMIConnection
RMIJRMPServerImpl.
makeClient
(
String
connectionId,
Subject
subject)
Creates a new client connection as an RMI object exported
 through JRMP.
protected abstract
RMIConnection
RMIServerImpl.
makeClient
(
String
connectionId,
Subject
subject)
Creates a new client connection.
RMIConnection
RMIServer.
newClient
(
Object
credentials)
Makes a new connection through this RMI connector.
RMIConnection
RMIServerImpl_Stub.
newClient
(
Object
$param_Object_1)
RMIConnection
RMIServerImpl.
newClient
(
Object
credentials)
Creates a new client connection.
Set
<
ObjectInstance
>
RMIConnection.
queryMBeans
(
ObjectName
name,
MarshalledObject
query,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.queryMBeans(ObjectName, QueryExp)
.
Set
RMIConnectionImpl_Stub.
queryMBeans
(
ObjectName
$param_ObjectName_1,
MarshalledObject
$param_MarshalledObject_2,
Subject
$param_Subject_3)
Set
<
ObjectInstance
>
RMIConnectionImpl.
queryMBeans
(
ObjectName
name,
MarshalledObject
query,
Subject
delegationSubject)
Set
<
ObjectName
>
RMIConnection.
queryNames
(
ObjectName
name,
MarshalledObject
query,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.queryNames(ObjectName, QueryExp)
.
Set
RMIConnectionImpl_Stub.
queryNames
(
ObjectName
$param_ObjectName_1,
MarshalledObject
$param_MarshalledObject_2,
Subject
$param_Subject_3)
Set
<
ObjectName
>
RMIConnectionImpl.
queryNames
(
ObjectName
name,
MarshalledObject
query,
Subject
delegationSubject)
void
RMIConnection.
removeNotificationListener
(
ObjectName
name,
ObjectName
listener,
MarshalledObject
filter,
MarshalledObject
handback,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.removeNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)
.
void
RMIConnection.
removeNotificationListener
(
ObjectName
name,
ObjectName
listener,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.removeNotificationListener(ObjectName, ObjectName)
.
void
RMIConnectionImpl_Stub.
removeNotificationListener
(
ObjectName
$param_ObjectName_1,
ObjectName
$param_ObjectName_2,
MarshalledObject
$param_MarshalledObject_3,
MarshalledObject
$param_MarshalledObject_4,
Subject
$param_Subject_5)
void
RMIConnectionImpl_Stub.
removeNotificationListener
(
ObjectName
$param_ObjectName_1,
ObjectName
$param_ObjectName_2,
Subject
$param_Subject_3)
void
RMIConnectionImpl.
removeNotificationListener
(
ObjectName
name,
ObjectName
listener,
MarshalledObject
filter,
MarshalledObject
handback,
Subject
delegationSubject)
void
RMIConnectionImpl.
removeNotificationListener
(
ObjectName
name,
ObjectName
listener,
Subject
delegationSubject)
void
RMIConnection.
removeNotificationListeners
(
ObjectName
name,
Integer
[] listenerIDs,
Subject
delegationSubject)
Handles the
removeNotificationListener(ObjectName, NotificationListener)
and
removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)
methods.
void
RMIConnectionImpl_Stub.
removeNotificationListeners
(
ObjectName
$param_ObjectName_1,
Integer
[] $param_arrayOf_Integer_2,
Subject
$param_Subject_3)
void
RMIConnectionImpl.
removeNotificationListeners
(
ObjectName
name,
Integer
[] listenerIDs,
Subject
delegationSubject)
void
RMIConnection.
setAttribute
(
ObjectName
name,
MarshalledObject
attribute,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.setAttribute(ObjectName, Attribute)
.
void
RMIConnectionImpl_Stub.
setAttribute
(
ObjectName
$param_ObjectName_1,
MarshalledObject
$param_MarshalledObject_2,
Subject
$param_Subject_3)
void
RMIConnectionImpl.
setAttribute
(
ObjectName
name,
MarshalledObject
attribute,
Subject
delegationSubject)
AttributeList
RMIConnection.
setAttributes
(
ObjectName
name,
MarshalledObject
attributes,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.setAttributes(ObjectName, AttributeList)
.
AttributeList
RMIConnectionImpl_Stub.
setAttributes
(
ObjectName
$param_ObjectName_1,
MarshalledObject
$param_MarshalledObject_2,
Subject
$param_Subject_3)
AttributeList
RMIConnectionImpl.
setAttributes
(
ObjectName
name,
MarshalledObject
attributes,
Subject
delegationSubject)
void
RMIConnectorServer.
start
()
Activates the connector server, that is starts listening for
 client connections.
void
RMIConnectorServer.
stop
()
Deactivates the connector server, that is, stops listening for
 client connections.
JMXConnector
RMIConnectorServer.
toJMXConnector
(
Map
<
String
,
?> env)
Returns a client stub for this connector server.
Remote
RMIJRMPServerImpl.
toStub
()
Returns a serializable stub for this
RMIServer
object.
abstract
Remote
RMIServerImpl.
toStub
()
Returns a remotable stub for this server object.
void
RMIConnection.
unregisterMBean
(
ObjectName
name,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.unregisterMBean(ObjectName)
.
void
RMIConnectionImpl_Stub.
unregisterMBean
(
ObjectName
$param_ObjectName_1,
Subject
$param_Subject_2)
void
RMIConnectionImpl.
unregisterMBean
(
ObjectName
name,
Subject
delegationSubject)
Constructors in
javax.management.remote.rmi
that throw
IOException
Modifier
Constructor
Description
RMIConnectorServer
(
JMXServiceURL
url,
Map
<
String
,
?> environment)
Makes an
RMIConnectorServer
.
RMIConnectorServer
(
JMXServiceURL
url,
Map
<
String
,
?> environment,
MBeanServer
mbeanServer)
Makes an
RMIConnectorServer
for the given MBean
 server.
RMIConnectorServer
(
JMXServiceURL
url,
Map
<
String
,
?> environment,
RMIServerImpl
rmiServerImpl,
MBeanServer
mbeanServer)
Makes an
RMIConnectorServer
for the given MBean
 server.
RMIJRMPServerImpl
(int port,
RMIClientSocketFactory
csf,
RMIServerSocketFactory
ssf,
Map
<
String
,
?> env)
Creates a new
RMIServer
object that will be exported
 on the given port using the given socket factories.
Uses of
IOException
in
javax.naming.ldap
Methods in
javax.naming.ldap
that throw
IOException
Modifier and Type
Method
Description
abstract void
StartTlsResponse.
close
()
Closes the TLS connection gracefully and reverts back to the underlying
 connection.
abstract
SSLSession
StartTlsResponse.
negotiate
()
Negotiates a TLS session using the default SSL socket factory.
abstract
SSLSession
StartTlsResponse.
negotiate
(
SSLSocketFactory
factory)
Negotiates a TLS session using an SSL socket factory.
Constructors in
javax.naming.ldap
that throw
IOException
Modifier
Constructor
Description
PagedResultsControl
(int pageSize,
 boolean criticality)
Constructs a control to set the number of entries to be returned per
 page of results.
PagedResultsControl
(int pageSize,
 byte[] cookie,
 boolean criticality)
Constructs a control to set the number of entries to be returned per
 page of results.
PagedResultsResponseControl
(
String
id,
 boolean criticality,
 byte[] value)
Constructs a paged-results response control.
SortControl
(
String
[] sortBy,
 boolean criticality)
Constructs a control to sort on a list of attributes in ascending order.
SortControl
(
String
sortBy,
 boolean criticality)
Constructs a control to sort on a single attribute in ascending order.
SortControl
(
SortKey
[] sortBy,
 boolean criticality)
Constructs a control to sort on a list of sort keys.
SortResponseControl
(
String
id,
 boolean criticality,
 byte[] value)
Constructs a control to indicate the outcome of a sort request.
Uses of
IOException
in
javax.net
Methods in
javax.net
that throw
IOException
Modifier and Type
Method
Description
ServerSocket
ServerSocketFactory.
createServerSocket
()
Returns an unbound server socket.
abstract
ServerSocket
ServerSocketFactory.
createServerSocket
(int port)
Returns a server socket bound to the specified port.
abstract
ServerSocket
ServerSocketFactory.
createServerSocket
(int port,
 int backlog)
Returns a server socket bound to the specified port, and uses the
 specified connection backlog.
abstract
ServerSocket
ServerSocketFactory.
createServerSocket
(int port,
 int backlog,
InetAddress
ifAddress)
Returns a server socket bound to the specified port,
 with a specified listen backlog and local IP.
Socket
SocketFactory.
createSocket
()
Creates an unconnected socket.
abstract
Socket
SocketFactory.
createSocket
(
String
host,
 int port)
Creates a socket and connects it to the specified remote host
 at the specified remote port.
abstract
Socket
SocketFactory.
createSocket
(
String
host,
 int port,
InetAddress
localHost,
 int localPort)
Creates a socket and connects it to the specified remote host
 on the specified remote port.
abstract
Socket
SocketFactory.
createSocket
(
InetAddress
host,
 int port)
Creates a socket and connects it to the specified port number
 at the specified address.
abstract
Socket
SocketFactory.
createSocket
(
InetAddress
address,
 int port,
InetAddress
localAddress,
 int localPort)
Creates a socket and connect it to the specified remote address
 on the specified remote port.
Uses of
IOException
in
javax.net.ssl
Subclasses of
IOException
in
javax.net.ssl
Modifier and Type
Class
Description
class
SSLException
Indicates some kind of error detected by an SSL subsystem.
class
SSLHandshakeException
Indicates that the client and server could not negotiate the
 desired level of security.
class
SSLKeyException
Reports a bad SSL key.
class
SSLPeerUnverifiedException
Indicates that the peer's identity has not been verified.
class
SSLProtocolException
Reports an error in the operation of the SSL protocol.
Methods in
javax.net.ssl
that throw
IOException
Modifier and Type
Method
Description
Socket
SSLSocketFactory.
createSocket
(
Socket
s,
InputStream
consumed,
 boolean autoClose)
Creates a server mode
Socket
layered over an
 existing connected socket, and is able to read data which has
 already been consumed/removed from the
Socket
's
 underlying
InputStream
.
abstract
Socket
SSLSocketFactory.
createSocket
(
Socket
s,
String
host,
 int port,
 boolean autoClose)
Returns a socket layered over an existing socket connected to the named
 host, at the given port.
abstract void
SSLSocket.
startHandshake
()
Starts an SSL handshake on this connection.
Constructors in
javax.net.ssl
that throw
IOException
Modifier
Constructor
Description
protected
SSLServerSocket
()
Used only by subclasses.
protected
SSLServerSocket
(int port)
Used only by subclasses.
protected
SSLServerSocket
(int port,
 int backlog)
Used only by subclasses.
protected
SSLServerSocket
(int port,
 int backlog,
InetAddress
address)
Used only by subclasses.
protected
SSLSocket
(
String
host,
 int port)
Used only by subclasses.
protected
SSLSocket
(
String
host,
 int port,
InetAddress
clientAddress,
 int clientPort)
Used only by subclasses.
protected
SSLSocket
(
InetAddress
address,
 int port)
Used only by subclasses.
protected
SSLSocket
(
InetAddress
address,
 int port,
InetAddress
clientAddress,
 int clientPort)
Used only by subclasses.
Uses of
IOException
in
javax.print
Methods in
javax.print
that throw
IOException
Modifier and Type
Method
Description
Doc
MultiDoc.
getDoc
()
Obtain the current doc object.
Object
Doc.
getPrintData
()
Obtains the print data representation object that contains this doc
 object's piece of print data in the format corresponding to the supported
 doc flavor.
Object
SimpleDoc.
getPrintData
()
Obtains the print data representation object that contains this doc
 object's piece of print data in the format corresponding to the supported
 doc flavor.
Reader
Doc.
getReaderForText
()
Obtains a reader for extracting character print data from this doc.
Reader
SimpleDoc.
getReaderForText
()
Obtains a reader for extracting character print data from this doc.
InputStream
Doc.
getStreamForBytes
()
Obtains an input stream for extracting byte print data from this doc.
InputStream
SimpleDoc.
getStreamForBytes
()
Obtains an input stream for extracting byte print data from this doc.
MultiDoc
MultiDoc.
next
()
Go to the multidoc object that contains the next doc object in the
 sequence of doc objects.
Uses of
IOException
in
javax.rmi.ssl
Methods in
javax.rmi.ssl
that throw
IOException
Modifier and Type
Method
Description
ServerSocket
SslRMIServerSocketFactory.
createServerSocket
(int port)
Creates a server socket that accepts SSL connections
 configured according to this factory's SSL socket configuration
 parameters.
Socket
SslRMIClientSocketFactory.
createSocket
(
String
host,
 int port)
Creates an SSL socket.
Uses of
IOException
in
javax.security.auth.callback
Methods in
javax.security.auth.callback
that throw
IOException
Modifier and Type
Method
Description
void
CallbackHandler.
handle
(
Callback
[] callbacks)
Retrieve or display the information requested in the
 provided Callbacks.
Uses of
IOException
in
javax.security.sasl
Subclasses of
IOException
in
javax.security.sasl
Modifier and Type
Class
Description
class
AuthenticationException
This exception is thrown by a SASL mechanism implementation
 to indicate that the SASL
 exchange has failed due to reasons related to authentication, such as
 an invalid identity, passphrase, or key.
class
SaslException
This class represents an error that has occurred when using SASL.
Uses of
IOException
in
javax.sound.midi
Methods in
javax.sound.midi
that throw
IOException
Modifier and Type
Method
Description
static
MidiFileFormat
MidiSystem.
getMidiFileFormat
(
File
file)
Obtains the MIDI file format of the specified
File
.
static
MidiFileFormat
MidiSystem.
getMidiFileFormat
(
InputStream
stream)
Obtains the MIDI file format of the data in the specified input stream.
static
MidiFileFormat
MidiSystem.
getMidiFileFormat
(
URL
url)
Obtains the MIDI file format of the data in the specified URL.
static
Sequence
MidiSystem.
getSequence
(
File
file)
Obtains a MIDI sequence from the specified
File
.
static
Sequence
MidiSystem.
getSequence
(
InputStream
stream)
Obtains a MIDI sequence from the specified input stream.
static
Sequence
MidiSystem.
getSequence
(
URL
url)
Obtains a MIDI sequence from the specified URL.
static
Soundbank
MidiSystem.
getSoundbank
(
File
file)
Constructs a
Soundbank
by reading it from the specified
File
.
static
Soundbank
MidiSystem.
getSoundbank
(
InputStream
stream)
Constructs a MIDI sound bank by reading it from the specified stream.
static
Soundbank
MidiSystem.
getSoundbank
(
URL
url)
Constructs a
Soundbank
by reading it from the specified URL.
void
Sequencer.
setSequence
(
InputStream
stream)
Sets the current sequence on which the sequencer operates.
static int
MidiSystem.
write
(
Sequence
in,
 int type,
File
out)
Writes a stream of bytes representing a file of the MIDI file type
 indicated to the external file provided.
static int
MidiSystem.
write
(
Sequence
in,
 int fileType,
OutputStream
out)
Writes a stream of bytes representing a file of the MIDI file type
 indicated to the output stream provided.
Uses of
IOException
in
javax.sound.midi.spi
Methods in
javax.sound.midi.spi
that throw
IOException
Modifier and Type
Method
Description
abstract
MidiFileFormat
MidiFileReader.
getMidiFileFormat
(
File
file)
Obtains the MIDI file format of the
File
provided.
abstract
MidiFileFormat
MidiFileReader.
getMidiFileFormat
(
InputStream
stream)
Obtains the MIDI file format of the input stream provided.
abstract
MidiFileFormat
MidiFileReader.
getMidiFileFormat
(
URL
url)
Obtains the MIDI file format of the
URL
provided.
abstract
Sequence
MidiFileReader.
getSequence
(
File
file)
Obtains a MIDI sequence from the
File
provided.
abstract
Sequence
MidiFileReader.
getSequence
(
InputStream
stream)
Obtains a MIDI sequence from the input stream provided.
abstract
Sequence
MidiFileReader.
getSequence
(
URL
url)
Obtains a MIDI sequence from the
URL
provided.
abstract
Soundbank
SoundbankReader.
getSoundbank
(
File
file)
Obtains a soundbank object from the
File
provided.
abstract
Soundbank
SoundbankReader.
getSoundbank
(
InputStream
stream)
Obtains a soundbank object from the
InputStream
provided.
abstract
Soundbank
SoundbankReader.
getSoundbank
(
URL
url)
Obtains a soundbank object from the
URL
provided.
abstract int
MidiFileWriter.
write
(
Sequence
in,
 int fileType,
File
out)
Writes a stream of bytes representing a MIDI file of the file type
 indicated to the external file provided.
abstract int
MidiFileWriter.
write
(
Sequence
in,
 int fileType,
OutputStream
out)
Writes a stream of bytes representing a MIDI file of the file type
 indicated to the output stream provided.
Uses of
IOException
in
javax.sound.sampled
Methods in
javax.sound.sampled
that throw
IOException
Modifier and Type
Method
Description
int
AudioInputStream.
available
()
Returns the maximum number of bytes that can be read (or skipped over)
 from this audio input stream without blocking.
void
AudioInputStream.
close
()
Closes this audio input stream and releases any system resources
 associated with the stream.
static
AudioFileFormat
AudioSystem.
getAudioFileFormat
(
File
file)
Obtains the audio file format of the specified
File
.
static
AudioFileFormat
AudioSystem.
getAudioFileFormat
(
InputStream
stream)
Obtains the audio file format of the provided input stream.
static
AudioFileFormat
AudioSystem.
getAudioFileFormat
(
URL
url)
Obtains the audio file format of the specified
URL
.
static
AudioInputStream
AudioSystem.
getAudioInputStream
(
File
file)
Obtains an audio input stream from the provided
File
.
static
AudioInputStream
AudioSystem.
getAudioInputStream
(
InputStream
stream)
Obtains an audio input stream from the provided input stream.
static
AudioInputStream
AudioSystem.
getAudioInputStream
(
URL
url)
Obtains an audio input stream from the
URL
provided.
void
Clip.
open
(
AudioInputStream
stream)
Opens the clip with the format and audio data present in the provided
 audio input stream.
int
AudioInputStream.
read
()
Reads the next byte of data from the audio input stream.
int
AudioInputStream.
read
(byte[] b)
Reads some number of bytes from the audio input stream and stores them
 into the buffer array
b
.
int
AudioInputStream.
read
(byte[] b,
 int off,
 int len)
Reads up to a specified maximum number of bytes of data from the audio
 stream, putting them into the given byte array.
void
AudioInputStream.
reset
()
Repositions this audio input stream to the position it had at the time
 its
mark
method was last invoked.
long
AudioInputStream.
skip
(long n)
Skips over and discards a specified number of bytes from this audio input
 stream.
static int
AudioSystem.
write
(
AudioInputStream
stream,
AudioFileFormat.Type
fileType,
File
out)
Writes a stream of bytes representing an audio file of the specified file
 type to the external file provided.
static int
AudioSystem.
write
(
AudioInputStream
stream,
AudioFileFormat.Type
fileType,
OutputStream
out)
Writes a stream of bytes representing an audio file of the specified file
 type to the output stream provided.
Uses of
IOException
in
javax.sound.sampled.spi
Methods in
javax.sound.sampled.spi
that throw
IOException
Modifier and Type
Method
Description
abstract
AudioFileFormat
AudioFileReader.
getAudioFileFormat
(
File
file)
Obtains the audio file format of the
File
provided.
abstract
AudioFileFormat
AudioFileReader.
getAudioFileFormat
(
InputStream
stream)
Obtains the audio file format of the input stream provided.
abstract
AudioFileFormat
AudioFileReader.
getAudioFileFormat
(
URL
url)
Obtains the audio file format of the
URL
provided.
abstract
AudioInputStream
AudioFileReader.
getAudioInputStream
(
File
file)
Obtains an audio input stream from the
File
provided.
abstract
AudioInputStream
AudioFileReader.
getAudioInputStream
(
InputStream
stream)
Obtains an audio input stream from the input stream provided.
abstract
AudioInputStream
AudioFileReader.
getAudioInputStream
(
URL
url)
Obtains an audio input stream from the
URL
provided.
abstract int
AudioFileWriter.
write
(
AudioInputStream
stream,
AudioFileFormat.Type
fileType,
File
out)
Writes a stream of bytes representing an audio file of the file format
 indicated to the external file provided.
abstract int
AudioFileWriter.
write
(
AudioInputStream
stream,
AudioFileFormat.Type
fileType,
OutputStream
out)
Writes a stream of bytes representing an audio file of the file type
 indicated to the output stream provided.
Uses of
IOException
in
javax.sql.rowset
Methods in
javax.sql.rowset
that throw
IOException
Modifier and Type
Method
Description
void
WebRowSet.
readXml
(
InputStream
iStream)
Reads a stream based XML input to populate this
WebRowSet
object.
void
WebRowSet.
writeXml
(
OutputStream
oStream)
Writes the data, properties, and metadata for this
WebRowSet
object
 to the given
OutputStream
object in XML format.
void
WebRowSet.
writeXml
(
ResultSet
rs,
OutputStream
oStream)
Populates this
WebRowSet
object with
 the contents of the given
ResultSet
object and writes its
 data, properties, and metadata
 to the given
OutputStream
object in XML format.
Uses of
IOException
in
javax.swing
Methods in
javax.swing
that throw
IOException
Modifier and Type
Method
Description
void
ProgressMonitorInputStream.
close
()
Overrides
FilterInputStream.close
to close the progress monitor as well as the stream.
protected
InputStream
JEditorPane.
getStream
(
URL
page)
Fetches a stream for the given URL, which is about to
 be loaded by the
setPage
method.
void
JEditorPane.
read
(
InputStream
in,
Object
desc)
This method initializes from a stream.
int
ProgressMonitorInputStream.
read
()
Overrides
FilterInputStream.read
to update the progress monitor after the read.
int
ProgressMonitorInputStream.
read
(byte[] b)
Overrides
FilterInputStream.read
to update the progress monitor after the read.
int
ProgressMonitorInputStream.
read
(byte[] b,
 int off,
 int len)
Overrides
FilterInputStream.read
to update the progress monitor after the read.
void
ProgressMonitorInputStream.
reset
()
Overrides
FilterInputStream.reset
to reset the progress monitor as well as the stream.
void
JEditorPane.
setPage
(
String
url)
Sets the current URL being displayed.
void
JEditorPane.
setPage
(
URL
page)
Sets the current URL being displayed.
long
ProgressMonitorInputStream.
skip
(long n)
Overrides
FilterInputStream.skip
to update the progress monitor after the skip.
Constructors in
javax.swing
that throw
IOException
Modifier
Constructor
Description
JEditorPane
(
String
url)
Creates a
JEditorPane
based on a string containing
 a URL specification.
JEditorPane
(
URL
initialPage)
Creates a
JEditorPane
based on a specified URL for input.
Uses of
IOException
in
javax.swing.filechooser
Methods in
javax.swing.filechooser
that throw
IOException
Modifier and Type
Method
Description
abstract
File
FileSystemView.
createNewFolder
(
File
containingDir)
Creates a new folder with a default folder name.
Uses of
IOException
in
javax.swing.plaf.synth
Methods in
javax.swing.plaf.synth
that throw
IOException
Modifier and Type
Method
Description
void
SynthLookAndFeel.
load
(
URL
url)
Deprecated, for removal: This API element is subject to removal in a future version.
Use
SynthLookAndFeel.load(InputStream, Class)
or
setStyleFactory(SynthStyleFactory)
instead
Uses of
IOException
in
javax.swing.text
Subclasses of
IOException
in
javax.swing.text
Modifier and Type
Class
Description
class
ChangedCharSetException
ChangedCharSetException as the name indicates is an exception
 thrown when the charset is changed.
Methods in
javax.swing.text
that throw
IOException
Modifier and Type
Method
Description
protected void
AbstractWriter.
indent
()
Does indentation.
protected void
AbstractWriter.
output
(char[] content,
 int start,
 int length)
The last stop in writing out content.
void
DefaultEditorKit.
read
(
InputStream
in,
Document
doc,
 int pos)
Inserts content from the given stream which is expected
 to be in a format appropriate for this kind of content
 handler.
void
DefaultEditorKit.
read
(
Reader
in,
Document
doc,
 int pos)
Inserts content from the given stream, which will be
 treated as plain text.
abstract void
EditorKit.
read
(
InputStream
in,
Document
doc,
 int pos)
Inserts content from the given stream which is expected
 to be in a format appropriate for this kind of content
 handler.
abstract void
EditorKit.
read
(
Reader
in,
Document
doc,
 int pos)
Inserts content from the given stream which is expected
 to be in a format appropriate for this kind of content
 handler.
void
JTextComponent.
read
(
Reader
in,
Object
desc)
Initializes from a stream.
void
StyleContext.
readAttributes
(
ObjectInputStream
in,
MutableAttributeSet
a)
Context-specific handling of reading in attributes
static void
StyleContext.
readAttributeSet
(
ObjectInputStream
in,
MutableAttributeSet
a)
Reads a set of attributes from the given object input
 stream that have been previously written out with
writeAttributeSet
.
protected void
AbstractWriter.
text
(
Element
elem)
Writes out text.
protected abstract void
AbstractWriter.
write
()
This abstract method needs to be implemented
 by subclasses.
protected void
AbstractWriter.
write
(char ch)
Writes out a character.
protected void
AbstractWriter.
write
(char[] chars,
 int startIndex,
 int length)
All write methods call into this one.
protected void
AbstractWriter.
write
(
String
content)
Writes out a string.
void
DefaultEditorKit.
write
(
OutputStream
out,
Document
doc,
 int pos,
 int len)
Writes content from a document to the given stream
 in a format appropriate for this kind of content handler.
void
DefaultEditorKit.
write
(
Writer
out,
Document
doc,
 int pos,
 int len)
Writes content from a document to the given stream
 as plain text.
abstract void
EditorKit.
write
(
OutputStream
out,
Document
doc,
 int pos,
 int len)
Writes content from a document to the given stream
 in a format appropriate for this kind of content handler.
abstract void
EditorKit.
write
(
Writer
out,
Document
doc,
 int pos,
 int len)
Writes content from a document to the given stream
 in a format appropriate for this kind of content handler.
void
JTextComponent.
write
(
Writer
out)
Stores the contents of the model into the given
 stream.
protected void
AbstractWriter.
writeAttributes
(
AttributeSet
attr)
Writes out the set of attributes as " <name>=<value>"
 pairs.
void
StyleContext.
writeAttributes
(
ObjectOutputStream
out,
AttributeSet
a)
Context-specific handling of writing out attributes
static void
StyleContext.
writeAttributeSet
(
ObjectOutputStream
out,
AttributeSet
a)
Writes a set of attributes to the given object stream
 for the purpose of serialization.
protected void
AbstractWriter.
writeLineSeparator
()
Writes the line separator.
Uses of
IOException
in
javax.swing.text.html
Methods in
javax.swing.text.html
that throw
IOException
Modifier and Type
Method
Description
protected void
HTMLWriter.
closeOutUnwantedEmbeddedTags
(
AttributeSet
attr)
Searches the attribute set and for each tag
 that is stored in the tag vector.
protected void
HTMLWriter.
comment
(
Element
elem)
Writes out comments.
protected void
HTMLWriter.
emptyTag
(
Element
elem)
Writes out all empty elements (all tags that have no
 corresponding end tag).
protected void
MinimalHTMLWriter.
endFontTag
()
This is no longer used, instead <span> will be written out.
protected void
HTMLWriter.
endTag
(
Element
elem)
Writes out an end tag for the element.
void
HTMLDocument.
insertAfterEnd
(
Element
elem,
String
htmlText)
Inserts the HTML specified as a string after the end of the
 given element.
void
HTMLDocument.
insertAfterStart
(
Element
elem,
String
htmlText)
Inserts the HTML specified as a string at the start
 of the element.
void
HTMLDocument.
insertBeforeEnd
(
Element
elem,
String
htmlText)
Inserts the HTML specified as a string at the end of
 the element.
void
HTMLDocument.
insertBeforeStart
(
Element
elem,
String
htmlText)
Inserts the HTML specified as a string before the start of
 the given element.
void
HTMLEditorKit.
insertHTML
(
HTMLDocument
doc,
 int offset,
String
html,
 int popDepth,
 int pushDepth,
HTML.Tag
insertTag)
Inserts HTML into an existing document.
void
StyleSheet.
loadRules
(
Reader
in,
URL
ref)
Loads a set of rules that have been specified in terms of
 CSS1 grammar.
protected void
HTMLWriter.
output
(char[] chars,
 int start,
 int length)
This method is overridden to map any character entities, such as
 < to &lt;.
abstract void
HTMLEditorKit.Parser.
parse
(
Reader
r,
HTMLEditorKit.ParserCallback
cb,
 boolean ignoreCharSet)
Parse the given stream and drive the given callback
 with the results of the parse.
void
HTMLEditorKit.
read
(
Reader
in,
Document
doc,
 int pos)
Inserts content from the given stream.
protected void
HTMLWriter.
selectContent
(
AttributeSet
attr)
Writes out the content of the SELECT form element.
void
HTMLDocument.
setInnerHTML
(
Element
elem,
String
htmlText)
Replaces the children of the given element with the contents
 specified as an HTML string.
void
HTMLDocument.
setOuterHTML
(
Element
elem,
String
htmlText)
Replaces the given element in the parent with the contents
 specified as an HTML string.
protected void
MinimalHTMLWriter.
startFontTag
(
String
style)
This is no longer used, instead <span> will be written out.
protected void
HTMLWriter.
startTag
(
Element
elem)
Writes out a start tag for the element.
protected void
HTMLWriter.
text
(
Element
elem)
Writes out text.
protected void
MinimalHTMLWriter.
text
(
Element
elem)
Writes out text.
protected void
HTMLWriter.
textAreaContent
(
AttributeSet
attr)
Writes out text that is contained in a TEXTAREA form
 element.
void
HTMLEditorKit.
write
(
Writer
out,
Document
doc,
 int pos,
 int len)
Write content from a document to the given stream
 in a format appropriate for this kind of content handler.
void
HTMLWriter.
write
()
Iterates over the
 Element tree and controls the writing out of
 all the tags and its attributes.
void
MinimalHTMLWriter.
write
()
Generates HTML output
 from a StyledDocument.
protected void
HTMLWriter.
writeAttributes
(
AttributeSet
attr)
Writes out the attribute set.
protected void
MinimalHTMLWriter.
writeAttributes
(
AttributeSet
attr)
Writes out all the attributes for the
 following types:
  StyleConstants.ParagraphConstants,
  StyleConstants.CharacterConstants,
  StyleConstants.FontConstants,
  StyleConstants.ColorConstants.
protected void
MinimalHTMLWriter.
writeBody
()
Iterates over the elements in the document
 and processes elements based on whether they are
 branch elements or leaf elements.
protected void
MinimalHTMLWriter.
writeComponent
(
Element
elem)
Responsible for handling Component Elements;
 deliberately unimplemented.
protected void
MinimalHTMLWriter.
writeContent
(
Element
elem,
 boolean needsIndenting)
Writes out the attribute set
 in an HTML-compliant manner.
protected void
HTMLWriter.
writeEmbeddedTags
(
AttributeSet
attr)
Searches for embedded tags in the AttributeSet
 and writes them out.
protected void
MinimalHTMLWriter.
writeEndParagraph
()
Emits an end tag for a <p>
 tag.
protected void
MinimalHTMLWriter.
writeEndTag
(
String
endTag)
Writes out an end tag appropriately
 indented.
protected void
MinimalHTMLWriter.
writeHeader
()
Writes out the <head> and <style>
 tags, and then invokes writeStyles() to write
 out all the named styles as the content of the
 <style> tag.
protected void
MinimalHTMLWriter.
writeHTMLTags
(
AttributeSet
attr)
Generates
 bold <b>, italic <i>, and <u> tags for the
 text based on its attribute settings.
protected void
MinimalHTMLWriter.
writeImage
(
Element
elem)
Responsible for handling Icon Elements;
 deliberately unimplemented.
protected void
MinimalHTMLWriter.
writeLeaf
(
Element
elem)
Responsible for writing out other non-text leaf
 elements.
protected void
HTMLWriter.
writeLineSeparator
()
Writes the line separator.
protected void
MinimalHTMLWriter.
writeNonHTMLAttributes
(
AttributeSet
attr)
Writes out the remaining
 character-level attributes (attributes other than bold,
 italic, and underline) in an HTML-compliant way.
protected void
HTMLWriter.
writeOption
(
Option
option)
Writes out the content of the Option form element.
protected void
MinimalHTMLWriter.
writeStartParagraph
(
Element
elem)
Emits the start tag for a paragraph.
protected void
MinimalHTMLWriter.
writeStartTag
(
String
tag)
Writes out a start tag appropriately
 indented.
protected void
MinimalHTMLWriter.
writeStyles
()
Writes out all the named styles as the
 content of the <style> tag.
Uses of
IOException
in
javax.swing.text.html.parser
Methods in
javax.swing.text.html.parser
that throw
IOException
Modifier and Type
Method
Description
static
DTD
DTD.
getDTD
(
String
name)
Returns a DTD with the specified
name
.
void
DocumentParser.
parse
(
Reader
in,
HTMLEditorKit.ParserCallback
callback,
 boolean ignoreCharSet)
Parse an HTML stream, given a DTD.
void
Parser.
parse
(
Reader
in)
Parse an HTML stream, given a DTD.
void
ParserDelegator.
parse
(
Reader
r,
HTMLEditorKit.ParserCallback
cb,
 boolean ignoreCharSet)
String
Parser.
parseDTDMarkup
()
Parses the Document Type Declaration markup declaration.
protected boolean
Parser.
parseMarkupDeclarations
(
StringBuffer
strBuff)
Parse markup declarations.
void
DTD.
read
(
DataInputStream
in)
Recreates a DTD from an archived format.
Uses of
IOException
in
javax.swing.text.rtf
Methods in
javax.swing.text.rtf
that throw
IOException
Modifier and Type
Method
Description
void
RTFEditorKit.
read
(
InputStream
in,
Document
doc,
 int pos)
Insert content from the given stream which is expected
 to be in a format appropriate for this kind of content
 handler.
void
RTFEditorKit.
read
(
Reader
in,
Document
doc,
 int pos)
Insert content from the given stream, which will be
 treated as plain text.
void
RTFEditorKit.
write
(
OutputStream
out,
Document
doc,
 int pos,
 int len)
Write content from a document to the given stream
 in a format appropriate for this kind of content handler.
void
RTFEditorKit.
write
(
Writer
out,
Document
doc,
 int pos,
 int len)
Write content from a document to the given stream
 as plain text.
Uses of
IOException
in
javax.tools
Methods in
javax.tools
that throw
IOException
Modifier and Type
Method
Description
void
ForwardingJavaFileManager.
close
()
void
JavaFileManager.
close
()
Releases any resources opened by this file manager directly or
 indirectly.
boolean
ForwardingJavaFileManager.
contains
(
JavaFileManager.Location
location,
FileObject
fo)
default boolean
JavaFileManager.
contains
(
JavaFileManager.Location
location,
FileObject
fo)
Determines whether or not a given file object is "contained in" a specified location.
void
ForwardingJavaFileManager.
flush
()
void
JavaFileManager.
flush
()
Flushes any resources opened for output by this file manager
 directly or indirectly.
CharSequence
FileObject.
getCharContent
(boolean ignoreEncodingErrors)
Returns the character content of this file object, if available.
CharSequence
ForwardingFileObject.
getCharContent
(boolean ignoreEncodingErrors)
CharSequence
SimpleJavaFileObject.
getCharContent
(boolean ignoreEncodingErrors)
This implementation always throws
UnsupportedOperationException
.
FileObject
ForwardingJavaFileManager.
getFileForInput
(
JavaFileManager.Location
location,
String
packageName,
String
relativeName)
FileObject
JavaFileManager.
getFileForInput
(
JavaFileManager.Location
location,
String
packageName,
String
relativeName)
Returns a
file object
for input
 representing the specified
relative
 name
in the specified package in the given package-oriented location.
FileObject
ForwardingJavaFileManager.
getFileForOutput
(
JavaFileManager.Location
location,
String
packageName,
String
relativeName,
FileObject
sibling)
FileObject
JavaFileManager.
getFileForOutput
(
JavaFileManager.Location
location,
String
packageName,
String
relativeName,
FileObject
sibling)
Returns a
file object
for output
 representing the specified
relative
 name
in the specified package in the given location.
FileObject
ForwardingJavaFileManager.
getFileForOutputForOriginatingFiles
(
JavaFileManager.Location
location,
String
packageName,
String
relativeName,
FileObject
... originatingFiles)
Returns a
file object
for output
 representing the specified
relative
 name
in the specified package in the given location.
default
FileObject
JavaFileManager.
getFileForOutputForOriginatingFiles
(
JavaFileManager.Location
location,
String
packageName,
String
relativeName,
FileObject
... originatingFiles)
Returns a
file object
for output
 representing the specified
relative
 name
in the specified package in the given location.
JavaFileObject
ForwardingJavaFileManager.
getJavaFileForInput
(
JavaFileManager.Location
location,
String
className,
JavaFileObject.Kind
kind)
JavaFileObject
JavaFileManager.
getJavaFileForInput
(
JavaFileManager.Location
location,
String
className,
JavaFileObject.Kind
kind)
Returns a
file object
for input
 representing the specified class of the specified kind in the
 given package-oriented location.
JavaFileObject
ForwardingJavaFileManager.
getJavaFileForOutput
(
JavaFileManager.Location
location,
String
className,
JavaFileObject.Kind
kind,
FileObject
sibling)
JavaFileObject
JavaFileManager.
getJavaFileForOutput
(
JavaFileManager.Location
location,
String
className,
JavaFileObject.Kind
kind,
FileObject
sibling)
Returns a
file object
for output
 representing the specified class of the specified kind in the
 given package-oriented location.
JavaFileObject
ForwardingJavaFileManager.
getJavaFileForOutputForOriginatingFiles
(
JavaFileManager.Location
location,
String
className,
JavaFileObject.Kind
kind,
FileObject
... originatingFiles)
Returns a
file object
for output
 representing the specified class of the specified kind in the
 given package-oriented location.
default
JavaFileObject
JavaFileManager.
getJavaFileForOutputForOriginatingFiles
(
JavaFileManager.Location
location,
String
className,
JavaFileObject.Kind
kind,
FileObject
... originatingFiles)
Returns a
file object
for output
 representing the specified class of the specified kind in the
 given package-oriented location.
JavaFileManager.Location
ForwardingJavaFileManager.
getLocationForModule
(
JavaFileManager.Location
location,
String
moduleName)
JavaFileManager.Location
ForwardingJavaFileManager.
getLocationForModule
(
JavaFileManager.Location
location,
JavaFileObject
fo)
default
JavaFileManager.Location
JavaFileManager.
getLocationForModule
(
JavaFileManager.Location
location,
String
moduleName)
Gets a location for a named module within a location, which may be either
 a module-oriented location or an output location.
default
JavaFileManager.Location
JavaFileManager.
getLocationForModule
(
JavaFileManager.Location
location,
JavaFileObject
fo)
Gets a location for the module containing a specific file
 to be found within a location, which may be either
 a module-oriented location or an output location.
<S>
ServiceLoader
<S>
ForwardingJavaFileManager.
getServiceLoader
(
JavaFileManager.Location
location,
Class
<S> service)
default <S>
ServiceLoader
<S>
JavaFileManager.
getServiceLoader
(
JavaFileManager.Location
location,
Class
<S> service)
Get a service loader for a specific service class from a given location.
String
ForwardingJavaFileManager.
inferModuleName
(
JavaFileManager.Location
location)
default
String
JavaFileManager.
inferModuleName
(
JavaFileManager.Location
location)
Infer the name of the module from its location, as returned by
getLocationForModule
or
listModuleLocations
.
Iterable
<
JavaFileObject
>
ForwardingJavaFileManager.
list
(
JavaFileManager.Location
location,
String
packageName,
Set
<
JavaFileObject.Kind
> kinds,
 boolean recurse)
Iterable
<
JavaFileObject
>
JavaFileManager.
list
(
JavaFileManager.Location
location,
String
packageName,
Set
<
JavaFileObject.Kind
> kinds,
 boolean recurse)
Lists all file objects matching the given criteria in the given
 package-oriented location.
Iterable
<
Set
<
JavaFileManager.Location
>>
ForwardingJavaFileManager.
listLocationsForModules
(
JavaFileManager.Location
location)
default
Iterable
<
Set
<
JavaFileManager.Location
>>
JavaFileManager.
listLocationsForModules
(
JavaFileManager.Location
location)
Lists the locations for all the modules in a module-oriented location or an output location.
InputStream
FileObject.
openInputStream
()
Returns an InputStream for this file object.
InputStream
ForwardingFileObject.
openInputStream
()
InputStream
SimpleJavaFileObject.
openInputStream
()
This implementation always throws
UnsupportedOperationException
.
OutputStream
FileObject.
openOutputStream
()
Returns an OutputStream for this file object.
OutputStream
ForwardingFileObject.
openOutputStream
()
OutputStream
SimpleJavaFileObject.
openOutputStream
()
This implementation always throws
UnsupportedOperationException
.
Reader
FileObject.
openReader
(boolean ignoreEncodingErrors)
Returns a reader for this object.
Reader
ForwardingFileObject.
openReader
(boolean ignoreEncodingErrors)
Reader
SimpleJavaFileObject.
openReader
(boolean ignoreEncodingErrors)
Wraps the result of
SimpleJavaFileObject.getCharContent(boolean)
in a Reader.
Writer
FileObject.
openWriter
()
Returns a Writer for this file object.
Writer
ForwardingFileObject.
openWriter
()
Writer
SimpleJavaFileObject.
openWriter
()
Wraps the result of openOutputStream in a Writer.
void
StandardJavaFileManager.
setLocation
(
JavaFileManager.Location
location,
Iterable
<? extends
File
> files)
Associates the given search path with the given location.
default void
StandardJavaFileManager.
setLocationForModule
(
JavaFileManager.Location
location,
String
moduleName,
Collection
<? extends
Path
> paths)
Associates the given search path with the given module and location,
 which must be a module-oriented or output location.
default void
StandardJavaFileManager.
setLocationFromPaths
(
JavaFileManager.Location
location,
Collection
<? extends
Path
> paths)
Associates the given search path with the given location.
Uses of
IOException
in
javax.xml.parsers
Methods in
javax.xml.parsers
that throw
IOException
Modifier and Type
Method
Description
Document
DocumentBuilder.
parse
(
File
f)
Parse the content of the given file as an XML document
 and return a new DOM
Document
object.
Document
DocumentBuilder.
parse
(
InputStream
is)
Parse the content of the given
InputStream
as an XML
 document and return a new DOM
Document
object.
Document
DocumentBuilder.
parse
(
InputStream
is,
String
systemId)
Parse the content of the given
InputStream
as an
 XML document and return a new DOM
Document
object.
Document
DocumentBuilder.
parse
(
String
uri)
Parse the content of the given URI as an XML document
 and return a new DOM
Document
object.
abstract
Document
DocumentBuilder.
parse
(
InputSource
is)
Parse the content of the given input source as an XML document
 and return a new DOM
Document
object.
void
SAXParser.
parse
(
File
f,
HandlerBase
hb)
Parse the content of the file specified as XML using the
 specified
HandlerBase
.
void
SAXParser.
parse
(
File
f,
DefaultHandler
dh)
Parse the content of the file specified as XML using the
 specified
DefaultHandler
.
void
SAXParser.
parse
(
InputStream
is,
HandlerBase
hb)
Parse the content of the given
InputStream
instance as XML using the specified
HandlerBase
.
void
SAXParser.
parse
(
InputStream
is,
HandlerBase
hb,
String
systemId)
Parse the content of the given
InputStream
instance as XML using the specified
HandlerBase
.
void
SAXParser.
parse
(
InputStream
is,
DefaultHandler
dh)
Parse the content of the given
InputStream
instance as XML using the specified
DefaultHandler
.
void
SAXParser.
parse
(
InputStream
is,
DefaultHandler
dh,
String
systemId)
Parse the content of the given
InputStream
instance as XML using the specified
DefaultHandler
.
void
SAXParser.
parse
(
String
uri,
HandlerBase
hb)
Parse the content described by the giving Uniform Resource
 Identifier (URI) as XML using the specified
HandlerBase
.
void
SAXParser.
parse
(
String
uri,
DefaultHandler
dh)
Parse the content described by the giving Uniform Resource
 Identifier (URI) as XML using the specified
DefaultHandler
.
void
SAXParser.
parse
(
InputSource
is,
HandlerBase
hb)
Parse the content given
InputSource
as XML using the specified
HandlerBase
.
void
SAXParser.
parse
(
InputSource
is,
DefaultHandler
dh)
Parse the content given
InputSource
as XML using the specified
DefaultHandler
.
Uses of
IOException
in
javax.xml.validation
Methods in
javax.xml.validation
that throw
IOException
Modifier and Type
Method
Description
void
Validator.
validate
(
Source
source)
Validates the specified input.
abstract void
Validator.
validate
(
Source
source,
Result
result)
Validates the specified input and send the augmented validation
 result to the specified output.
Uses of
IOException
in
jdk.jfr
Methods in
jdk.jfr
that throw
IOException
Modifier and Type
Method
Description
static
Configuration
Configuration.
create
(
Reader
reader)
Reads a configuration from a character stream.
static
Configuration
Configuration.
create
(
Path
path)
Reads a configuration from a file.
void
Recording.
dump
(
Path
destination)
Writes recording data to a file.
static
Configuration
Configuration.
getConfiguration
(
String
name)
Returns a predefined configuration.
InputStream
Recording.
getStream
(
Instant
start,
Instant
end)
Creates a data stream for a specified interval.
void
Recording.
setDestination
(
Path
destination)
Sets a location where data is written on recording stop, or
null
if data is not to be dumped.
Uses of
IOException
in
jdk.jfr.consumer
Methods in
jdk.jfr.consumer
that throw
IOException
Modifier and Type
Method
Description
void
RecordingFile.
close
()
Closes this recording file and releases any system resources that are
 associated with it.
void
RecordingStream.
dump
(
Path
destination)
Writes recording data to a file.
static
EventStream
EventStream.
openFile
(
Path
file)
Creates an event stream from a file.
static
EventStream
EventStream.
openRepository
()
Creates a stream from the repository of the current Java Virtual Machine
 (JVM).
static
EventStream
EventStream.
openRepository
(
Path
directory)
Creates an event stream from a disk repository.
static
List
<
RecordedEvent
>
RecordingFile.
readAllEvents
(
Path
path)
Returns a list of all events in a file.
RecordedEvent
RecordingFile.
readEvent
()
Reads the next event in the recording.
List
<
EventType
>
RecordingFile.
readEventTypes
()
Returns a list of all event types in this recording.
void
RecordingFile.
write
(
Path
destination,
Predicate
<
RecordedEvent
> filter)
Filter out events and write them to a new file.
Constructors in
jdk.jfr.consumer
that throw
IOException
Modifier
Constructor
Description
RecordingFile
(
Path
file)
Creates a recording file.
Uses of
IOException
in
jdk.jshell.execution
Methods in
jdk.jshell.execution
that throw
IOException
Modifier and Type
Method
Description
static void
Util.
forwardExecutionControlAndIO
(
ExecutionControl
ec,
InputStream
inStream,
OutputStream
outStream,
Map
<
String
,
Consumer
<
OutputStream
>> outputStreamMap,
Map
<
String
,
Consumer
<
InputStream
>> inputStreamMap)
Forward commands from the input to the specified
ExecutionControl
instance, then responses back on the output.
ExecutionControl
JdiExecutionControlProvider.
generate
(
ExecutionEnv
env,
Map
<
String
,
String
> parameters)
static
ExecutionControl
Util.
remoteInputOutput
(
InputStream
input,
OutputStream
output,
Map
<
String
,
OutputStream
> outputStreamMap,
Map
<
String
,
InputStream
> inputStreamMap,
BiFunction
<
ObjectInput
,
ObjectOutput
,
ExecutionControl
> factory)
Creates an ExecutionControl for given packetized input and output.
Uses of
IOException
in
jdk.management.jfr
Methods in
jdk.management.jfr
that throw
IOException
Modifier and Type
Method
Description
void
FlightRecorderMXBean.
closeRecording
(long recordingId)
Closes the recording with the specified ID and releases any system
 resources that are associated with the recording.
void
FlightRecorderMXBean.
closeStream
(long streamId)
Closes the recording stream with the specified ID and releases any system
 resources that are associated with the stream.
void
FlightRecorderMXBean.
copyTo
(long recordingId,
String
outputFile)
Writes recording data to the specified file.
void
RemoteRecordingStream.
dump
(
Path
destination)
Writes recording data to a file.
long
FlightRecorderMXBean.
openStream
(long recordingId,
Map
<
String
,
String
> streamOptions)
Opens a data stream for the recording with the specified ID, or
0
to get data irrespective of recording.
byte[]
FlightRecorderMXBean.
readStream
(long streamId)
Reads a portion of data from the stream with the specified ID, or returns
null
if no more data is available.
Constructors in
jdk.management.jfr
that throw
IOException
Modifier
Constructor
Description
RemoteRecordingStream
(
MBeanServerConnection
connection)
Creates an event stream that operates against a
MBeanServerConnection
that has a registered
FlightRecorderMXBean
.
RemoteRecordingStream
(
MBeanServerConnection
connection,
Path
directory)
Creates an event stream that operates against a
MBeanServerConnection
that has a registered
FlightRecorderMXBean
.
Uses of
IOException
in
jdk.net
Methods in
jdk.net
that throw
IOException
Modifier and Type
Method
Description
static <T> T
Sockets.
getOption
(
DatagramSocket
s,
SocketOption
<T> name)
Deprecated.
use
DatagramSocket.getOption(SocketOption)
instead.
static <T> T
Sockets.
getOption
(
ServerSocket
s,
SocketOption
<T> name)
Deprecated.
use
ServerSocket.getOption(SocketOption)
instead.
static <T> T
Sockets.
getOption
(
Socket
s,
SocketOption
<T> name)
Deprecated.
use
Socket.getOption(SocketOption)
instead.
static <T> void
Sockets.
setOption
(
DatagramSocket
s,
SocketOption
<T> name,
 T value)
Deprecated.
use
DatagramSocket.setOption(SocketOption, Object)
instead.
static <T> void
Sockets.
setOption
(
ServerSocket
s,
SocketOption
<T> name,
 T value)
Deprecated.
use
ServerSocket.setOption(SocketOption, Object)
instead.
static <T> void
Sockets.
setOption
(
Socket
s,
SocketOption
<T> name,
 T value)
Deprecated.
use
Socket.setOption(SocketOption, Object)
instead.
Uses of
IOException
in
jdk.nio
Methods in
jdk.nio
that throw
IOException
Modifier and Type
Method
Description
void
Channels.SelectableChannelCloser.
implCloseChannel
(
SelectableChannel
sc)
Closes a selectable channel.
void
Channels.SelectableChannelCloser.
implReleaseChannel
(
SelectableChannel
sc)
Release the file descriptor and any resources for a selectable
 channel that closed while registered with one or more
Selector
s.
Uses of
IOException
in
org.xml.sax
Methods in
org.xml.sax
that throw
IOException
Modifier and Type
Method
Description
void
Parser.
parse
(
String
systemId)
Deprecated.
Parse an XML document from a system identifier (URI).
void
Parser.
parse
(
InputSource
source)
Deprecated.
Parse an XML document.
void
XMLReader.
parse
(
String
systemId)
Parse an XML document from a system identifier (URI).
void
XMLReader.
parse
(
InputSource
input)
Parse an XML document.
InputSource
EntityResolver.
resolveEntity
(
String
publicId,
String
systemId)
Allow the application to resolve external entities.
Uses of
IOException
in
org.xml.sax.ext
Methods in
org.xml.sax.ext
that throw
IOException
Modifier and Type
Method
Description
InputSource
DefaultHandler2.
getExternalSubset
(
String
name,
String
baseURI)
Tells the parser that if no external subset has been declared
 in the document text, none should be used.
InputSource
EntityResolver2.
getExternalSubset
(
String
name,
String
baseURI)
Allows applications to provide an external subset for documents
 that don't explicitly define one.
InputSource
DefaultHandler2.
resolveEntity
(
String
publicId,
String
systemId)
Invokes
EntityResolver2.resolveEntity()
with null entity name and base URI.
InputSource
DefaultHandler2.
resolveEntity
(
String
name,
String
publicId,
String
baseURI,
String
systemId)
Tells the parser to resolve the systemId against the baseURI
 and read the entity text from that resulting absolute URI.
InputSource
EntityResolver2.
resolveEntity
(
String
name,
String
publicId,
String
baseURI,
String
systemId)
Allows applications to map references to external entities into input
 sources, or tell the parser it should use conventional URI resolution.
Uses of
IOException
in
org.xml.sax.helpers
Methods in
org.xml.sax.helpers
that throw
IOException
Modifier and Type
Method
Description
void
ParserAdapter.
parse
(
String
systemId)
Parse an XML document.
void
ParserAdapter.
parse
(
InputSource
input)
Parse an XML document.
void
XMLFilterImpl.
parse
(
String
systemId)
Parse a document.
void
XMLFilterImpl.
parse
(
InputSource
input)
Parse a document.
void
XMLReaderAdapter.
parse
(
String
systemId)
Parse the document.
void
XMLReaderAdapter.
parse
(
InputSource
input)
Parse the document.
InputSource
DefaultHandler.
resolveEntity
(
String
publicId,
String
systemId)
Resolve an external entity.
InputSource
XMLFilterImpl.
resolveEntity
(
String
publicId,
String
systemId)
Filter an external entity resolution.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.