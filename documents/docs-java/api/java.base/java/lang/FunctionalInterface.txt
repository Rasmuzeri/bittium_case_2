FunctionalInterface (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Field
Required
Optional
Detail:
Field
Element
Summary:
Field |
Required |
Optional
Detail:
Field |
Element
SEARCH
Module
java.base
Package
java.lang
Annotation Interface FunctionalInterface
@Documented
@Retention
(
RUNTIME
)
@Target
(
TYPE
)
public @interface
FunctionalInterface
An informative annotation type used to indicate that an interface
 type declaration is intended to be a
functional interface
as
 defined by the Java Language Specification.

 Conceptually, a functional interface has exactly one abstract
 method.  Since
default methods
have an implementation, they are not abstract.  If
 an interface declares an abstract method overriding one of the
 public methods of
java.lang.Object
, that also does
not
count toward the interface's abstract method count
 since any implementation of the interface will have an
 implementation from
java.lang.Object
or elsewhere.
Note that instances of functional interfaces can be created with
 lambda expressions, method references, or constructor references.
If a type is annotated with this annotation type, compilers are
 required to generate an error message unless:
The type is an interface type and not an annotation type, enum, or class.
The annotated type satisfies the requirements of a functional interface.
However, the compiler will treat any interface meeting the
 definition of a functional interface as a functional interface
 regardless of whether or not a
FunctionalInterface
annotation is present on the interface declaration.
See
Java Language Specification
:
4.3.2 The Class Object
9.8 Functional Interfaces
9.4.3 Interface Method Body
9.6.4.9 @FunctionalInterface
Since:
1.8
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.