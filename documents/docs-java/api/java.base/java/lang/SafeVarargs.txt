SafeVarargs (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Field
Required
Optional
Detail:
Field
Element
Summary:
Field |
Required |
Optional
Detail:
Field |
Element
SEARCH
Module
java.base
Package
java.lang
Annotation Interface SafeVarargs
@Documented
@Retention
(
RUNTIME
)
@Target
({
CONSTRUCTOR
,
METHOD
})
public @interface
SafeVarargs
A programmer assertion that the body of the annotated method or
 constructor does not perform potentially unsafe operations on its
 varargs parameter.  Applying this annotation to a method or
 constructor suppresses unchecked warnings about a
non-reifiable
variable arity (vararg) type and suppresses
 unchecked warnings about parameterized array creation at call
 sites.
In addition to the usage restrictions imposed by its
@Target
meta-annotation, compilers are required to implement
 additional usage restrictions on this annotation type; it is a
 compile-time error if a method or constructor declaration is
 annotated with a
@SafeVarargs
annotation, and either:
the declaration is a fixed arity method or constructor
the declaration is a variable arity method that is neither
static
nor
final
nor
private
.
Compilers are encouraged to issue warnings when this annotation
 type is applied to a method or constructor declaration where:
The variable arity parameter has a reifiable element type,
 which includes primitive types,
Object
, and
String
.
 (The unchecked warnings this annotation type suppresses already do
 not occur for a reifiable element type.)
The body of the method or constructor declaration performs
 potentially unsafe operations, such as an assignment to an element
 of the variable arity parameter's array that generates an unchecked
 warning.  Some unsafe operations do not trigger an unchecked
 warning.  For example, the aliasing in
@SafeVarargs // Not actually safe!
 static void m(List<String>... stringLists) {
   Object[] array = stringLists;
   List<Integer> tmpList = Arrays.asList(42);
   array[0] = tmpList; // Semantically invalid, but compiles without warnings
   String s = stringLists[0].get(0); // Oh no, ClassCastException at runtime!
 }
leads to a
ClassCastException
at runtime.
Future versions of the platform may mandate compiler errors for
 such unsafe operations.
See
Java Language Specification
:
4.7 Reifiable Types
8.4.1 Formal Parameters
9.6.4.7 @SafeVarargs
Since:
1.7
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.