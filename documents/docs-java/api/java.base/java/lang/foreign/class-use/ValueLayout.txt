Uses of Interface java.lang.foreign.ValueLayout (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Interface
java.lang.foreign.ValueLayout
Packages that use
ValueLayout
PREVIEW
Package
Description
java.lang.foreign
Provides low-level access to memory and functions outside the Java runtime.
java.lang.invoke
The
java.lang.invoke
package provides low-level primitives for interacting
 with the Java Virtual Machine.
Uses of
ValueLayout
PREVIEW
in
java.lang.foreign
Subinterfaces of
ValueLayout
PREVIEW
in
java.lang.foreign
Modifier and Type
Interface
Description
interface
AddressLayout
PREVIEW
Preview.
A value layout used to model the address of some region of memory.
static interface
ValueLayout.OfBoolean
PREVIEW
Preview.
A value layout whose carrier is
boolean.class
.
static interface
ValueLayout.OfByte
PREVIEW
Preview.
A value layout whose carrier is
byte.class
.
static interface
ValueLayout.OfChar
PREVIEW
Preview.
A value layout whose carrier is
char.class
.
static interface
ValueLayout.OfDouble
PREVIEW
Preview.
A value layout whose carrier is
double.class
.
static interface
ValueLayout.OfFloat
PREVIEW
Preview.
A value layout whose carrier is
float.class
.
static interface
ValueLayout.OfInt
PREVIEW
Preview.
A value layout whose carrier is
int.class
.
static interface
ValueLayout.OfLong
PREVIEW
Preview.
A value layout whose carrier is
long.class
.
static interface
ValueLayout.OfShort
PREVIEW
Preview.
A value layout whose carrier is
short.class
.
Methods in
java.lang.foreign
that return
ValueLayout
PREVIEW
Modifier and Type
Method
Description
ValueLayout
PREVIEW
ValueLayout.
withByteAlignment
(long byteAlignment)
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
ValueLayout
PREVIEW
ValueLayout.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
ValueLayout
PREVIEW
ValueLayout.
withOrder
(
ByteOrder
order)
Returns a value layout with the same characteristics as this layout, but with the given byte order.
ValueLayout
PREVIEW
ValueLayout.
withoutName
()
Returns a memory layout with the same characteristics as this layout, but with no name.
Methods in
java.lang.foreign
with parameters of type
ValueLayout
PREVIEW
Modifier and Type
Method
Description
static void
MemorySegment.
copy
(
MemorySegment
PREVIEW
srcSegment,
ValueLayout
PREVIEW
srcElementLayout,
 long srcOffset,
MemorySegment
PREVIEW
dstSegment,
ValueLayout
PREVIEW
dstElementLayout,
 long dstOffset,
 long elementCount)
Performs a bulk copy from source segment to destination segment.
static void
MemorySegment.
copy
(
MemorySegment
PREVIEW
srcSegment,
ValueLayout
PREVIEW
srcLayout,
 long srcOffset,
Object
dstArray,
 int dstIndex,
 int elementCount)
Copies a number of elements from a source memory segment to a destination array.
static void
MemorySegment.
copy
(
Object
srcArray,
 int srcIndex,
MemorySegment
PREVIEW
dstSegment,
ValueLayout
PREVIEW
dstLayout,
 long dstOffset,
 int elementCount)
Copies a number of elements from a source array to a destination memory segment.
Uses of
ValueLayout
PREVIEW
in
java.lang.invoke
Methods in
java.lang.invoke
with parameters of type
ValueLayout
PREVIEW
Modifier and Type
Method
Description
static
VarHandle
MethodHandles.
memorySegmentViewVarHandle
(
ValueLayout
PREVIEW
layout)
Preview.
Creates a var handle object, which can be used to dereference a
memory segment
PREVIEW
at a given byte offset, using the provided value layout.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.