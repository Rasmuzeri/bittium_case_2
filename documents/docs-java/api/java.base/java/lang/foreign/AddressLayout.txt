AddressLayout (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested
|
Field
|
Constr |
Method
Detail:
Field |
Constr |
Method
SEARCH
Module
java.base
Package
java.lang.foreign
Interface AddressLayout
All Superinterfaces:
MemoryLayout
PREVIEW
,
ValueLayout
PREVIEW
public sealed interface
AddressLayout
extends
ValueLayout
PREVIEW
AddressLayout
is a preview API of the Java platform.
Programs can only use
AddressLayout
when preview features are enabled.
Preview features may be removed in a future release, or upgraded to permanent features of the Java platform.
A value layout used to model the address of some region of memory. The carrier associated with an address layout is
MemorySegment.class
. The size and alignment of an address layout are platform-dependent
 (e.g. on a 64-bit platform, the size and alignment of an address layout are set to 8 bytes).
An address layout may optionally feature a
target layout
. An address layout with
 target layout
T
can be used to model the address of a region of memory whose layout is
T
.
 For instance, an address layout with target layout
ValueLayout.JAVA_INT
PREVIEW
can be used to model the address
 of a region of memory that is 4 bytes long. Specifying a target layout can be useful in the following situations:
When accessing a memory segment that has been obtained by reading an address from another
     memory segment, e.g. using
MemorySegment.getAtIndex(AddressLayout, long)
PREVIEW
;
When creating a downcall method handle, using
Linker.downcallHandle(FunctionDescriptor, Option...)
PREVIEW
;
When creating an upcall stub, using
Linker.upcallStub(MethodHandle, FunctionDescriptor, Arena, Option...)
PREVIEW
.
Since:
19
See Also:
ValueLayout.ADDRESS
PREVIEW
ValueLayout.ADDRESS_UNALIGNED
PREVIEW
Nested Class Summary
Nested classes/interfaces declared in interface java.lang.foreign.
MemoryLayout
PREVIEW
MemoryLayout.PathElement
PREVIEW
Nested classes/interfaces declared in interface java.lang.foreign.
ValueLayout
PREVIEW
ValueLayout.OfBoolean
PREVIEW
,
ValueLayout.OfByte
PREVIEW
,
ValueLayout.OfChar
PREVIEW
,
ValueLayout.OfDouble
PREVIEW
,
ValueLayout.OfFloat
PREVIEW
,
ValueLayout.OfInt
PREVIEW
,
ValueLayout.OfLong
PREVIEW
,
ValueLayout.OfShort
PREVIEW
Field Summary
Fields declared in interface java.lang.foreign.
ValueLayout
PREVIEW
ADDRESS
,
ADDRESS_UNALIGNED
,
JAVA_BOOLEAN
,
JAVA_BYTE
,
JAVA_CHAR
,
JAVA_CHAR_UNALIGNED
,
JAVA_DOUBLE
,
JAVA_DOUBLE_UNALIGNED
,
JAVA_FLOAT
,
JAVA_FLOAT_UNALIGNED
,
JAVA_INT
,
JAVA_INT_UNALIGNED
,
JAVA_LONG
,
JAVA_LONG_UNALIGNED
,
JAVA_SHORT
,
JAVA_SHORT_UNALIGNED
Method Summary
All Methods
Instance Methods
Abstract Methods
Modifier and Type
Method
Description
Optional
<
MemoryLayout
PREVIEW
>
targetLayout
()
Returns the target layout associated with this address layout (if any).
AddressLayout
PREVIEW
withByteAlignment
(long byteAlignment)
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
AddressLayout
PREVIEW
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
AddressLayout
PREVIEW
withOrder
(
ByteOrder
order)
Returns a value layout with the same characteristics as this layout, but with the given byte order.
AddressLayout
PREVIEW
withoutName
()
Returns a memory layout with the same characteristics as this layout, but with no name.
AddressLayout
PREVIEW
withoutTargetLayout
()
Returns an address layout with the same carrier, alignment constraint, name and order as this address layout,
 but with no target layout.
AddressLayout
PREVIEW
withTargetLayout
(
MemoryLayout
PREVIEW
layout)
Returns an address layout with the same carrier, alignment constraint, name and order as this address layout,
 but associated with the specified target layout.
Methods declared in interface java.lang.foreign.
MemoryLayout
PREVIEW
byteAlignment
,
byteOffset
,
byteOffsetHandle
,
byteSize
,
equals
,
hashCode
,
name
,
select
,
sliceHandle
,
toString
,
varHandle
Methods declared in interface java.lang.foreign.
ValueLayout
PREVIEW
arrayElementVarHandle
,
carrier
,
order
Method Details
withName
AddressLayout
PREVIEW
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
Specified by:
withName
in interface
MemoryLayout
PREVIEW
Specified by:
withName
in interface
ValueLayout
PREVIEW
Parameters:
name
- the layout name.
Returns:
a memory layout with the same characteristics as this layout, but with the given name
See Also:
MemoryLayout.name()
PREVIEW
withoutName
AddressLayout
PREVIEW
withoutName
()
Returns a memory layout with the same characteristics as this layout, but with no name.
Specified by:
withoutName
in interface
MemoryLayout
PREVIEW
Specified by:
withoutName
in interface
ValueLayout
PREVIEW
Returns:
a memory layout with the same characteristics as this layout, but with no name
See Also:
MemoryLayout.name()
PREVIEW
withByteAlignment
AddressLayout
PREVIEW
withByteAlignment
(long byteAlignment)
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
Specified by:
withByteAlignment
in interface
MemoryLayout
PREVIEW
Specified by:
withByteAlignment
in interface
ValueLayout
PREVIEW
Parameters:
byteAlignment
- the layout alignment constraint, expressed in bytes.
Returns:
a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes)
withOrder
AddressLayout
PREVIEW
withOrder
(
ByteOrder
order)
Returns a value layout with the same characteristics as this layout, but with the given byte order.
Specified by:
withOrder
in interface
ValueLayout
PREVIEW
Parameters:
order
- the desired byte order.
Returns:
a value layout with the same characteristics as this layout, but with the given byte order
withTargetLayout
AddressLayout
PREVIEW
withTargetLayout
(
MemoryLayout
PREVIEW
layout)
Returns an address layout with the same carrier, alignment constraint, name and order as this address layout,
 but associated with the specified target layout. The returned address layout allows raw addresses to be accessed
 as
memory segments
PREVIEW
whose size is set to the size of the specified layout. Moreover,
 if the accessed raw address is not compatible with the alignment constraint in the provided layout,
IllegalArgumentException
will be thrown.
API Note:
This method can also be used to create an address layout which, when used, creates native memory
 segments with maximal size (e.g.
Long.MAX_VALUE
). This can be done by using a target sequence
 layout with unspecified size, as follows:
Copy
AddressLayout addressLayout   = ...
 AddressLayout unboundedLayout = addressLayout.withTargetLayout(
         MemoryLayout.sequenceLayout(ValueLayout.JAVA_BYTE));
This method is
restricted
.
 Restricted methods are unsafe, and, if used incorrectly, their use might crash
 the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on
 restricted methods, and use safe and supported functionalities, where possible.
Parameters:
layout
- the target layout.
Returns:
an address layout with same characteristics as this layout, but with the provided target layout.
Throws:
IllegalCallerException
- If the caller is in a module that does not have native access enabled.
See Also:
targetLayout()
withoutTargetLayout
AddressLayout
PREVIEW
withoutTargetLayout
()
Returns an address layout with the same carrier, alignment constraint, name and order as this address layout,
 but with no target layout.
API Note:
This can be useful to compare two address layouts that have different target layouts, but are otherwise equal.
Returns:
an address layout with same characteristics as this layout, but with no target layout.
See Also:
targetLayout()
targetLayout
Optional
<
MemoryLayout
PREVIEW
>
targetLayout
()
Returns the target layout associated with this address layout (if any)..
Returns:
the target layout associated with this address layout (if any)
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.