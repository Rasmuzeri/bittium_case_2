Uses of Class java.lang.Long (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Class
java.lang.Long
Packages that use
Long
Package
Description
java.lang
Provides classes that are fundamental to the design of the Java
 programming language.
java.nio.channels
Defines channels, which represent connections to entities that are capable of
 performing I/O operations, such as files and sockets; defines selectors, for
 multiplexed, non-blocking I/O operations.
java.time.chrono
Generic API for calendar systems other than the default ISO.
java.time.format
Provides classes to print and parse dates and times.
java.time.temporal
Access to date and time using fields and units, and date time adjusters.
java.util
Contains the collections framework, some internationalization support classes,
 a service loader, properties, random number generation, string parsing
 and scanning classes, base64 encoding and decoding, a bit array, and
 several miscellaneous utility classes.
java.util.stream
Classes to support functional-style operations on streams of elements, such
 as map-reduce transformations on collections.
javax.management.openmbean
Provides the open data types and Open MBean descriptor classes.
javax.management.timer
Provides the definition of the Timer MBean.
jdk.incubator.vector
Incubating Feature.
Will be removed in a future release.
Uses of
Long
in
java.lang
Fields in
java.lang
with type parameters of type
Long
Modifier and Type
Field
Description
static final
Class
<
Long
>
Long.
TYPE
The
Class
instance representing the primitive type
long
.
Methods in
java.lang
that return
Long
Modifier and Type
Method
Description
static
Long
Long.
decode
(
String
nm)
Decodes a
String
into a
Long
.
static
Long
Long.
getLong
(
String
nm)
Determines the
long
value of the system property
 with the specified name.
static
Long
Long.
getLong
(
String
nm,
 long val)
Determines the
long
value of the system property
 with the specified name.
static
Long
Long.
getLong
(
String
nm,
Long
val)
Returns the
long
value of the system property with
 the specified name.
Long
Long.
resolveConstantDesc
(
MethodHandles.Lookup
lookup)
Resolves this instance as a
ConstantDesc
, the result of which is
 the instance itself.
static
Long
Long.
valueOf
(long l)
Returns a
Long
instance representing the specified
long
value.
static
Long
Long.
valueOf
(
String
s)
Returns a
Long
object holding the value
 of the specified
String
.
static
Long
Long.
valueOf
(
String
s,
 int radix)
Returns a
Long
object holding the value
 extracted from the specified
String
when parsed
 with the radix given by the second argument.
Methods in
java.lang
that return types with arguments of type
Long
Modifier and Type
Method
Description
Optional
<
Long
>
Long.
describeConstable
()
Returns an
Optional
containing the nominal descriptor for this
 instance, which is the instance itself.
Methods in
java.lang
with parameters of type
Long
Modifier and Type
Method
Description
int
Long.
compareTo
(
Long
anotherLong)
Compares two
Long
objects numerically.
static
Long
Long.
getLong
(
String
nm,
Long
val)
Returns the
long
value of the system property with
 the specified name.
Uses of
Long
in
java.nio.channels
Method parameters in
java.nio.channels
with type arguments of type
Long
Modifier and Type
Method
Description
abstract <A> void
AsynchronousSocketChannel.
read
(
ByteBuffer
[] dsts,
 int offset,
 int length,
 long timeout,
TimeUnit
unit,
 A attachment,
CompletionHandler
<
Long
,
? super A> handler)
Reads a sequence of bytes from this channel into a subsequence of the
 given buffers.
abstract <A> void
AsynchronousSocketChannel.
write
(
ByteBuffer
[] srcs,
 int offset,
 int length,
 long timeout,
TimeUnit
unit,
 A attachment,
CompletionHandler
<
Long
,
? super A> handler)
Writes a sequence of bytes to this channel from a subsequence of the given
 buffers.
Uses of
Long
in
java.time.chrono
Method parameters in
java.time.chrono
with type arguments of type
Long
Modifier and Type
Method
Description
ChronoLocalDate
AbstractChronology.
resolveDate
(
Map
<
TemporalField
,
Long
> fieldValues,
ResolverStyle
resolverStyle)
Resolves parsed
ChronoField
values into a date during parsing.
ChronoLocalDate
Chronology.
resolveDate
(
Map
<
TemporalField
,
Long
> fieldValues,
ResolverStyle
resolverStyle)
Resolves parsed
ChronoField
values into a date during parsing.
HijrahDate
HijrahChronology.
resolveDate
(
Map
<
TemporalField
,
Long
> fieldValues,
ResolverStyle
resolverStyle)
LocalDate
IsoChronology.
resolveDate
(
Map
<
TemporalField
,
Long
> fieldValues,
ResolverStyle
resolverStyle)
Resolves parsed
ChronoField
values into a date during parsing.
JapaneseDate
JapaneseChronology.
resolveDate
(
Map
<
TemporalField
,
Long
> fieldValues,
ResolverStyle
resolverStyle)
MinguoDate
MinguoChronology.
resolveDate
(
Map
<
TemporalField
,
Long
> fieldValues,
ResolverStyle
resolverStyle)
ThaiBuddhistDate
ThaiBuddhistChronology.
resolveDate
(
Map
<
TemporalField
,
Long
> fieldValues,
ResolverStyle
resolverStyle)
Uses of
Long
in
java.time.format
Method parameters in
java.time.format
with type arguments of type
Long
Modifier and Type
Method
Description
DateTimeFormatterBuilder
DateTimeFormatterBuilder.
appendText
(
TemporalField
field,
Map
<
Long
,
String
> textLookup)
Appends the text of a date-time field to the formatter using the specified
 map to supply the text.
Uses of
Long
in
java.time.temporal
Method parameters in
java.time.temporal
with type arguments of type
Long
Modifier and Type
Method
Description
default
TemporalAccessor
TemporalField.
resolve
(
Map
<
TemporalField
,
Long
> fieldValues,
TemporalAccessor
partialTemporal,
ResolverStyle
resolverStyle)
Resolves this field to provide a simpler alternative or a date.
Uses of
Long
in
java.util
Methods in
java.util
that return
Long
Modifier and Type
Method
Description
default
Long
PrimitiveIterator.OfLong.
next
()
Returns the next element in the iteration.
Method parameters in
java.util
with type arguments of type
Long
Modifier and Type
Method
Description
default void
PrimitiveIterator.OfLong.
forEachRemaining
(
Consumer
<? super
Long
> action)
Performs the given action for each remaining element until all elements
 have been processed or the action throws an exception.
default void
Spliterator.OfLong.
forEachRemaining
(
Consumer
<? super
Long
> action)
Performs the given action for each remaining element, sequentially in
 the current thread, until all elements have been processed or the action
 throws an exception.
default boolean
Spliterator.OfLong.
tryAdvance
(
Consumer
<? super
Long
> action)
If a remaining element exists: performs the given action on it,
 returning
true
; else returns
false
.
Uses of
Long
in
java.util.stream
Methods in
java.util.stream
that return types with arguments of type
Long
Modifier and Type
Method
Description
Stream
<
Long
>
LongStream.
boxed
()
Returns a
Stream
consisting of the elements of this stream,
 each boxed to a
Long
.
static <T>
Collector
<T,
?,
Long
>
Collectors.
counting
()
Returns a
Collector
accepting elements of type
T
that
 counts the number of input elements.
static <T>
Collector
<T,
?,
Long
>
Collectors.
summingLong
(
ToLongFunction
<? super T> mapper)
Returns a
Collector
that produces the sum of a long-valued
 function applied to the input elements.
Uses of
Long
in
javax.management.openmbean
Fields in
javax.management.openmbean
with type parameters of type
Long
Modifier and Type
Field
Description
static final
SimpleType
<
Long
>
SimpleType.
LONG
The
SimpleType
instance describing values whose
 Java class name is
java.lang.Long
.
Uses of
Long
in
javax.management.timer
Methods in
javax.management.timer
that return
Long
Modifier and Type
Method
Description
Long
Timer.
getNbOccurences
(
Integer
id)
Gets a copy of the remaining number of occurrences associated to a timer notification.
Long
TimerMBean.
getNbOccurences
(
Integer
id)
Gets a copy of the remaining number of occurrences associated to a timer notification.
Long
Timer.
getPeriod
(
Integer
id)
Gets a copy of the period (in milliseconds) associated to a timer notification.
Long
TimerMBean.
getPeriod
(
Integer
id)
Gets a copy of the period (in milliseconds) associated to a timer notification.
Uses of
Long
in
jdk.incubator.vector
Fields in
jdk.incubator.vector
with type parameters of type
Long
Modifier and Type
Field
Description
static final
VectorOperators.Conversion
<
Byte
,
Long
>
VectorOperators.
B2L
Convert
byteVal
to
(long)byteVal
.
static final
VectorOperators.Conversion
<
Double
,
Long
>
VectorOperators.
D2L
Convert
doubleVal
to
(long)doubleVal
.
static final
VectorOperators.Conversion
<
Float
,
Long
>
VectorOperators.
F2L
Convert
floatVal
to
(long)floatVal
.
static final
VectorOperators.Conversion
<
Integer
,
Long
>
VectorOperators.
I2L
Convert
intVal
to
(long)intVal
.
static final
VectorOperators.Conversion
<
Long
,
Byte
>
VectorOperators.
L2B
Convert
longVal
to
(byte)longVal
.
static final
VectorOperators.Conversion
<
Long
,
Double
>
VectorOperators.
L2D
Convert
longVal
to
(double)longVal
.
static final
VectorOperators.Conversion
<
Long
,
Float
>
VectorOperators.
L2F
Convert
longVal
to
(float)longVal
.
static final
VectorOperators.Conversion
<
Long
,
Integer
>
VectorOperators.
L2I
Convert
longVal
to
(int)longVal
.
static final
VectorOperators.Conversion
<
Long
,
Short
>
VectorOperators.
L2S
Convert
longVal
to
(short)longVal
.
static final
VectorOperators.Conversion
<
Double
,
Long
>
VectorOperators.
REINTERPRET_D2L
Reinterpret bits of
doubleVal
as
long
.
static final
VectorOperators.Conversion
<
Long
,
Double
>
VectorOperators.
REINTERPRET_L2D
Reinterpret bits of
longVal
as
double
.
static final
VectorOperators.Conversion
<
Short
,
Long
>
VectorOperators.
S2L
Convert
shortVal
to
(long)shortVal
.
static final
VectorSpecies
<
Long
>
LongVector.
SPECIES_128
Species representing
LongVector
s of
VectorShape.S_128_BIT
.
static final
VectorSpecies
<
Long
>
LongVector.
SPECIES_256
Species representing
LongVector
s of
VectorShape.S_256_BIT
.
static final
VectorSpecies
<
Long
>
LongVector.
SPECIES_512
Species representing
LongVector
s of
VectorShape.S_512_BIT
.
static final
VectorSpecies
<
Long
>
LongVector.
SPECIES_64
Species representing
LongVector
s of
VectorShape.S_64_BIT
.
static final
VectorSpecies
<
Long
>
LongVector.
SPECIES_MAX
Species representing
LongVector
s of
VectorShape.S_Max_BIT
.
static final
VectorSpecies
<
Long
>
LongVector.
SPECIES_PREFERRED
Preferred species for
LongVector
s.
static final
VectorOperators.Conversion
<
Byte
,
Long
>
VectorOperators.
ZERO_EXTEND_B2L
Zero-extend
byteVal
to
long
.
static final
VectorOperators.Conversion
<
Integer
,
Long
>
VectorOperators.
ZERO_EXTEND_I2L
Zero-extend
intVal
to
long
.
static final
VectorOperators.Conversion
<
Short
,
Long
>
VectorOperators.
ZERO_EXTEND_S2L
Zero-extend
shortVal
to
long
.
Methods in
jdk.incubator.vector
that return types with arguments of type
Long
Modifier and Type
Method
Description
abstract
VectorMask
<
Long
>
LongVector.
compare
(
VectorOperators.Comparison
op,
 long e)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation.
final
VectorMask
<
Long
>
LongVector.
compare
(
VectorOperators.Comparison
op,
 long e,
VectorMask
<
Long
> m)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
abstract
VectorMask
<
Long
>
LongVector.
compare
(
VectorOperators.Comparison
op,
Vector
<
Long
> v)
Tests this vector by comparing it with another input vector,
 according to the given comparison operation.
final
VectorMask
<
Long
>
LongVector.
eq
(long e)
Tests if this vector is equal to an input scalar.
final
VectorMask
<
Long
>
LongVector.
eq
(
Vector
<
Long
> v)
Tests if this vector is equal to another input vector.
final
VectorMask
<
Long
>
LongVector.
lt
(long e)
Tests if this vector is less than an input scalar.
final
VectorMask
<
Long
>
LongVector.
lt
(
Vector
<
Long
> v)
Tests if this vector is less than another input vector.
abstract
VectorMask
<
Long
>
LongVector.
test
(
VectorOperators.Test
op)
Tests the lanes of this vector
 according to the given operation.
abstract
VectorMask
<
Long
>
LongVector.
test
(
VectorOperators.Test
op,
VectorMask
<
Long
> m)
Test selected lanes of this vector,
 according to the given operation.
Method parameters in
jdk.incubator.vector
with type arguments of type
Long
Modifier and Type
Method
Description
final
LongVector
LongVector.
add
(long e,
VectorMask
<
Long
> m)
Adds this vector to the broadcast of an input scalar,
 selecting lane elements controlled by a mask.
final
LongVector
LongVector.
add
(
Vector
<
Long
> v)
Adds this vector to a second input vector.
final
LongVector
LongVector.
add
(
Vector
<
Long
> v,
VectorMask
<
Long
> m)
Adds this vector to a second input vector, selecting lanes
 under the control of a mask.
final
LongVector
LongVector.
add
(
Vector
<
Long
> v,
VectorMask
<
Long
> m)
Adds this vector to a second input vector, selecting lanes
 under the control of a mask.
final
LongVector
LongVector.
and
(
Vector
<
Long
> v)
Computes the bitwise logical conjunction (
&
)
 of this vector and a second input vector.
final
LongVector
LongVector.
bitwiseBlend
(long bits,
Vector
<
Long
> mask)
Blends together the bits of a vector and a scalar under
 the control of another vector, which supplies mask bits.
final
LongVector
LongVector.
bitwiseBlend
(
Vector
<
Long
> bits,
 long mask)
Blends together the bits of two vectors under
 the control of a scalar, which supplies mask bits.
final
LongVector
LongVector.
bitwiseBlend
(
Vector
<
Long
> bits,
Vector
<
Long
> mask)
Blends together the bits of two vectors under
 the control of a third, which supplies mask bits.
final
LongVector
LongVector.
blend
(long e,
VectorMask
<
Long
> m)
Replaces selected lanes of this vector with
 a scalar value
 under the control of a mask.
abstract
LongVector
LongVector.
blend
(
Vector
<
Long
> v,
VectorMask
<
Long
> m)
Replaces selected lanes of this vector with
 corresponding lanes from a second input vector
 under the control of a mask.
abstract
LongVector
LongVector.
blend
(
Vector
<
Long
> v,
VectorMask
<
Long
> m)
Replaces selected lanes of this vector with
 corresponding lanes from a second input vector
 under the control of a mask.
static
LongVector
LongVector.
broadcast
(
VectorSpecies
<
Long
> species,
 long e)
Returns a vector of the given species
 where all lane elements are set to
 the primitive value
e
.
final
VectorMask
<
Long
>
LongVector.
compare
(
VectorOperators.Comparison
op,
 long e,
VectorMask
<
Long
> m)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
abstract
VectorMask
<
Long
>
LongVector.
compare
(
VectorOperators.Comparison
op,
Vector
<
Long
> v)
Tests this vector by comparing it with another input vector,
 according to the given comparison operation.
abstract
LongVector
LongVector.
compress
(
VectorMask
<
Long
> m)
Compresses the lane elements of this vector selecting lanes
 under the control of a specific mask.
final
LongVector
LongVector.
div
(long e,
VectorMask
<
Long
> m)
Divides this vector by the broadcast of an input scalar,
 selecting lane elements controlled by a mask.
final
LongVector
LongVector.
div
(
Vector
<
Long
> v)
Divides this vector by a second input vector.
final
LongVector
LongVector.
div
(
Vector
<
Long
> v,
VectorMask
<
Long
> m)
Divides this vector by a second input vector
 under the control of a mask.
final
LongVector
LongVector.
div
(
Vector
<
Long
> v,
VectorMask
<
Long
> m)
Divides this vector by a second input vector
 under the control of a mask.
final
VectorMask
<
Long
>
LongVector.
eq
(
Vector
<
Long
> v)
Tests if this vector is equal to another input vector.
abstract
LongVector
LongVector.
expand
(
VectorMask
<
Long
> m)
Expands the lane elements of this vector
 under the control of a specific mask.
static
LongVector
LongVector.
fromArray
(
VectorSpecies
<
Long
> species,
 long[] a,
 int offset)
Loads a vector from an array of type
long[]
starting at an offset.
static
LongVector
LongVector.
fromArray
(
VectorSpecies
<
Long
> species,
 long[] a,
 int offset,
 int[] indexMap,
 int mapOffset)
Gathers a new vector composed of elements from an array of type
long[]
,
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
static
LongVector
LongVector.
fromArray
(
VectorSpecies
<
Long
> species,
 long[] a,
 int offset,
 int[] indexMap,
 int mapOffset,
VectorMask
<
Long
> m)
Gathers a new vector composed of elements from an array of type
long[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
static
LongVector
LongVector.
fromArray
(
VectorSpecies
<
Long
> species,
 long[] a,
 int offset,
 int[] indexMap,
 int mapOffset,
VectorMask
<
Long
> m)
Gathers a new vector composed of elements from an array of type
long[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
static
LongVector
LongVector.
fromArray
(
VectorSpecies
<
Long
> species,
 long[] a,
 int offset,
VectorMask
<
Long
> m)
Loads a vector from an array of type
long[]
starting at an offset and using a mask.
static
LongVector
LongVector.
fromArray
(
VectorSpecies
<
Long
> species,
 long[] a,
 int offset,
VectorMask
<
Long
> m)
Loads a vector from an array of type
long[]
starting at an offset and using a mask.
static
LongVector
LongVector.
fromMemorySegment
(
VectorSpecies
<
Long
> species,
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo)
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment.
static
LongVector
LongVector.
fromMemorySegment
(
VectorSpecies
<
Long
> species,
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo,
VectorMask
<
Long
> m)
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment
 and using a mask.
static
LongVector
LongVector.
fromMemorySegment
(
VectorSpecies
<
Long
> species,
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo,
VectorMask
<
Long
> m)
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment
 and using a mask.
final void
LongVector.
intoArray
(long[] a,
 int offset,
 int[] indexMap,
 int mapOffset,
VectorMask
<
Long
> m)
Scatters this vector into an array of type
long[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
final void
LongVector.
intoArray
(long[] a,
 int offset,
VectorMask
<
Long
> m)
Stores this vector into an array of type
long[]
starting at offset and using a mask.
final void
LongVector.
intoMemorySegment
(
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo,
VectorMask
<
Long
> m)
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order and a mask.
final
LongVector
LongVector.
lanewise
(
VectorOperators.Binary
op,
 long e,
VectorMask
<
Long
> m)
Combines the lane values of this vector
 with the value of a broadcast scalar,
 with selection of lane elements controlled by a mask.
abstract
LongVector
LongVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Long
> v)
Combines the corresponding lane values of this vector
 with those of a second input vector.
abstract
LongVector
LongVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Long
> v,
VectorMask
<
Long
> m)
Combines the corresponding lane values of this vector
 with those of a second input vector,
 with selection of lane elements controlled by a mask.
abstract
LongVector
LongVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Long
> v,
VectorMask
<
Long
> m)
Combines the corresponding lane values of this vector
 with those of a second input vector,
 with selection of lane elements controlled by a mask.
final
LongVector
LongVector.
lanewise
(
VectorOperators.Ternary
op,
 long e1,
 long e2,
VectorMask
<
Long
> m)
Combines the lane values of this vector
 with the values of two broadcast scalars,
 with selection of lane elements controlled by a mask.
final
LongVector
LongVector.
lanewise
(
VectorOperators.Ternary
op,
 long e1,
Vector
<
Long
> v2)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar.
final
LongVector
LongVector.
lanewise
(
VectorOperators.Ternary
op,
 long e1,
Vector
<
Long
> v2,
VectorMask
<
Long
> m)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar,
 with selection of lane elements controlled by a mask.
final
LongVector
LongVector.
lanewise
(
VectorOperators.Ternary
op,
 long e1,
Vector
<
Long
> v2,
VectorMask
<
Long
> m)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar,
 with selection of lane elements controlled by a mask.
final
LongVector
LongVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Long
> v1,
 long e2)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar.
final
LongVector
LongVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Long
> v1,
 long e2,
VectorMask
<
Long
> m)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar,
 with selection of lane elements controlled by a mask.
final
LongVector
LongVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Long
> v1,
 long e2,
VectorMask
<
Long
> m)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar,
 with selection of lane elements controlled by a mask.
abstract
LongVector
LongVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Long
> v1,
Vector
<
Long
> v2)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector.
abstract
LongVector
LongVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Long
> v1,
Vector
<
Long
> v2,
VectorMask
<
Long
> m)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector,
 with selection of lane elements controlled by a mask.
abstract
LongVector
LongVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Long
> v1,
Vector
<
Long
> v2,
VectorMask
<
Long
> m)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector,
 with selection of lane elements controlled by a mask.
abstract
LongVector
LongVector.
lanewise
(
VectorOperators.Unary
op,
VectorMask
<
Long
> m)
Operates on the lane values of this vector,
 with selection of lane elements controlled by a mask.
final
VectorMask
<
Long
>
LongVector.
lt
(
Vector
<
Long
> v)
Tests if this vector is less than another input vector.
final
LongVector
LongVector.
max
(
Vector
<
Long
> v)
Computes the larger of this vector and a second input vector.
final
LongVector
LongVector.
min
(
Vector
<
Long
> v)
Computes the smaller of this vector and a second input vector.
final
LongVector
LongVector.
mul
(long e,
VectorMask
<
Long
> m)
Multiplies this vector by the broadcast of an input scalar,
 selecting lane elements controlled by a mask.
final
LongVector
LongVector.
mul
(
Vector
<
Long
> v)
Multiplies this vector by a second input vector.
final
LongVector
LongVector.
mul
(
Vector
<
Long
> v,
VectorMask
<
Long
> m)
Multiplies this vector by a second input vector
 under the control of a mask.
final
LongVector
LongVector.
mul
(
Vector
<
Long
> v,
VectorMask
<
Long
> m)
Multiplies this vector by a second input vector
 under the control of a mask.
final
LongVector
LongVector.
or
(
Vector
<
Long
> v)
Computes the bitwise logical disjunction (
|
)
 of this vector and a second input vector.
abstract
LongVector
LongVector.
rearrange
(
VectorShuffle
<
Long
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle.
abstract
LongVector
LongVector.
rearrange
(
VectorShuffle
<
Long
> s,
Vector
<
Long
> v)
Rearranges the lane elements of two vectors, selecting lanes
 under the control of a specific shuffle, using both normal and
 exceptional indexes in the shuffle to steer data.
abstract
LongVector
LongVector.
rearrange
(
VectorShuffle
<
Long
> s,
Vector
<
Long
> v)
Rearranges the lane elements of two vectors, selecting lanes
 under the control of a specific shuffle, using both normal and
 exceptional indexes in the shuffle to steer data.
abstract
LongVector
LongVector.
rearrange
(
VectorShuffle
<
Long
> s,
VectorMask
<
Long
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle and a mask.
abstract
LongVector
LongVector.
rearrange
(
VectorShuffle
<
Long
> s,
VectorMask
<
Long
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle and a mask.
abstract long
LongVector.
reduceLanes
(
VectorOperators.Associative
op,
VectorMask
<
Long
> m)
Returns a value accumulated from selected lanes of this vector,
 controlled by a mask.
abstract
LongVector
LongVector.
selectFrom
(
Vector
<
Long
> v)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector
v
.
abstract
LongVector
LongVector.
selectFrom
(
Vector
<
Long
> s,
VectorMask
<
Long
> m)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector, under the control
 of a mask.
abstract
LongVector
LongVector.
selectFrom
(
Vector
<
Long
> s,
VectorMask
<
Long
> m)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector, under the control
 of a mask.
abstract
LongVector
LongVector.
slice
(int origin,
Vector
<
Long
> v1)
Slices a segment of adjacent lanes, starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
final
LongVector
LongVector.
slice
(int origin,
Vector
<
Long
> w,
VectorMask
<
Long
> m)
Slices a segment of adjacent lanes
 under the control of a mask,
 starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
final
LongVector
LongVector.
slice
(int origin,
Vector
<
Long
> w,
VectorMask
<
Long
> m)
Slices a segment of adjacent lanes
 under the control of a mask,
 starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
final
LongVector
LongVector.
sub
(long e,
VectorMask
<
Long
> m)
Subtracts an input scalar from this vector
 under the control of a mask.
final
LongVector
LongVector.
sub
(
Vector
<
Long
> v)
Subtracts a second input vector from this vector.
final
LongVector
LongVector.
sub
(
Vector
<
Long
> v,
VectorMask
<
Long
> m)
Subtracts a second input vector from this vector
 under the control of a mask.
final
LongVector
LongVector.
sub
(
Vector
<
Long
> v,
VectorMask
<
Long
> m)
Subtracts a second input vector from this vector
 under the control of a mask.
abstract
VectorMask
<
Long
>
LongVector.
test
(
VectorOperators.Test
op,
VectorMask
<
Long
> m)
Test selected lanes of this vector,
 according to the given operation.
abstract
LongVector
LongVector.
unslice
(int origin,
Vector
<
Long
> w,
 int part)
Reverses a
slice()
, inserting
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
abstract
LongVector
LongVector.
unslice
(int origin,
Vector
<
Long
> w,
 int part,
VectorMask
<
Long
> m)
Reverses a
slice()
, inserting
 (under the control of a mask)
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
abstract
LongVector
LongVector.
unslice
(int origin,
Vector
<
Long
> w,
 int part,
VectorMask
<
Long
> m)
Reverses a
slice()
, inserting
 (under the control of a mask)
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
static
LongVector
LongVector.
zero
(
VectorSpecies
<
Long
> species)
Returns a vector of the given species
 where all lane elements are set to
 zero, the default primitive value.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.