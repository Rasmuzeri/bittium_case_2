Uses of Class java.lang.String (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Class
java.lang.String
Packages that use
String
Package
Description
com.sun.java.accessibility.util
Provides a collection of interfaces and classes that compose the Java Accessibility
 Utilities.
com.sun.jdi
This is the core package of the Java Debug
 Interface (JDI), it defines mirrors for values, types, and the target
 VirtualMachine itself - as well bootstrapping facilities.
com.sun.jdi.connect
This package defines connections between the virtual machine
 using the JDI and the target virtual machine.
com.sun.jdi.connect.spi
This package comprises the interfaces and classes used to
 develop new
TransportService
implementations.
com.sun.jdi.event
This package defines JDI events and event processing.
com.sun.jdi.request
This package is used to request that a JDI
 event be sent under specified conditions.
com.sun.management
This package contains the JDK's extension to
 the standard implementation of the
java.lang.management
API and also defines the management
 interface for some other components of the platform.
com.sun.net.httpserver
Provides a simple high-level Http server API, which can be used to build
   embedded HTTP servers.
com.sun.nio.sctp
A Java API for Stream Control Transport Protocol.
com.sun.security.auth
Provides implementations of
Principal
.
com.sun.security.auth.login
Provides an implementation of
Configuration
.
com.sun.security.auth.module
Provides implementations of
LoginModule
.
com.sun.security.jgss
This package defines classes and interfaces for the JDK extensions
 to the GSS-API.
com.sun.source.doctree
Provides interfaces to represent documentation comments as abstract syntax
 trees (AST).
com.sun.source.tree
Provides interfaces to represent source code as abstract syntax
 trees (AST).
com.sun.source.util
Provides utilities for operations on abstract syntax trees (AST).
com.sun.tools.attach
Provides the API to attach to a Java virtual machine.
com.sun.tools.attach.spi
Only developers who are defining new attach providers should need to make
 direct use of this package.
com.sun.tools.javac
This package provides a legacy entry point for the
javac
tool.
com.sun.tools.jconsole
This package contains the JConsole API.
java.applet
Provides the classes necessary to create an applet and the classes an applet
 uses to communicate with its applet context.
java.awt
Contains all of the classes for creating user interfaces and for painting
 graphics and images.
java.awt.color
Provides classes for color spaces.
java.awt.datatransfer
Provides interfaces and classes for transferring data between and within
 applications.
java.awt.desktop
Provides interfaces and classes for interaction with various desktop
 capabilities.
java.awt.dnd
Drag and Drop is a direct manipulation gesture found in many Graphical User
 Interface systems that provides a mechanism to transfer information between
 two entities logically associated with presentation elements in the GUI.
java.awt.event
Provides interfaces and classes for dealing with different types of events
 fired by AWT components.
java.awt.font
Provides classes and interface relating to fonts.
java.awt.geom
Provides the Java 2D classes for defining and performing operations on
 objects related to two-dimensional geometry.
java.awt.im.spi
Provides interfaces that enable the development of input methods that can be
 used with any Java runtime environment.
java.awt.image
Provides classes for creating and modifying images.
java.awt.image.renderable
Provides classes and interfaces for producing rendering-independent images.
java.awt.print
Provides classes and interfaces for a general printing API.
java.beans
Contains classes related to developing
beans
-- components based on
 the JavaBeans architecture.
java.beans.beancontext
Provides classes and interfaces relating to bean context.
java.io
Provides for system input and output through data streams,
 serialization and the file system.
java.lang
Provides classes that are fundamental to the design of the Java
 programming language.
java.lang.annotation
Provides library support for the Java programming language
 annotation facility.
java.lang.constant
Classes and interfaces to represent
nominal descriptors
for run-time
 entities such as classes or method handles, and classfile entities such as
 constant pool entries or
invokedynamic
call sites.
java.lang.foreign
Provides low-level access to memory and functions outside the Java runtime.
java.lang.instrument
Provides services that allow Java programming language agents to instrument
 programs running on the Java Virtual Machine (JVM).
java.lang.invoke
The
java.lang.invoke
package provides low-level primitives for interacting
 with the Java Virtual Machine.
java.lang.management
Provides the management interfaces for monitoring and management of the
Java virtual machine and other components in the Java runtime.
java.lang.module
Classes to support module descriptors and creating configurations of modules
 by means of resolution and service binding.
java.lang.reflect
Provides classes and interfaces for obtaining reflective information about
 classes and objects.
java.lang.runtime
The
java.lang.runtime
package provides low-level runtime support
 for the Java language.
java.math
Provides classes for performing arbitrary-precision integer
 arithmetic (
BigInteger
) and arbitrary-precision decimal
 arithmetic (
BigDecimal
).
java.net
Provides the classes for implementing networking applications.
java.net.http
HTTP Client and WebSocket APIs
java.net.spi
Service-provider classes for the
java.net
package.
java.nio
Defines buffers, which are containers for data, and provides an
 overview of the other NIO packages.
java.nio.channels
Defines channels, which represent connections to entities that are capable of
 performing I/O operations, such as files and sockets; defines selectors, for
 multiplexed, non-blocking I/O operations.
java.nio.charset
Defines charsets, decoders, and encoders, for translating between
 bytes and Unicode characters.
java.nio.charset.spi
Service-provider classes for the
java.nio.charset
package.
java.nio.file
Defines interfaces and classes for the Java virtual machine to access files,
 file attributes, and file systems.
java.nio.file.attribute
Interfaces and classes providing access to file and file system attributes.
java.nio.file.spi
Service-provider classes for the
java.nio.file
package.
java.rmi
Provides the RMI package.
java.rmi.dgc
Provides classes and interface for RMI distributed
 garbage-collection (DGC).
java.rmi.registry
Provides a class and two interfaces for the RMI registry.
java.rmi.server
Provides classes and interfaces for supporting the server side of RMI.
java.security
Provides the classes and interfaces for the security framework.
java.security.cert
Provides classes and interfaces for parsing and managing
 certificates, certificate revocation lists (CRLs), and
 certification paths.
java.security.spec
Provides classes and interfaces for key specifications and algorithm
 parameter specifications.
java.sql
Provides the API for accessing and processing data stored in a
 data source (usually a relational database) using the
 Java programming language.
java.text
Provides classes and interfaces for handling text, dates, numbers,
 and messages in a manner independent of natural languages.
java.time
The main API for dates, times, instants, and durations.
java.time.chrono
Generic API for calendar systems other than the default ISO.
java.time.format
Provides classes to print and parse dates and times.
java.time.temporal
Access to date and time using fields and units, and date time adjusters.
java.time.zone
Support for time-zones and their rules.
java.util
Contains the collections framework, some internationalization support classes,
 a service loader, properties, random number generation, string parsing
 and scanning classes, base64 encoding and decoding, a bit array, and
 several miscellaneous utility classes.
java.util.concurrent
Utility classes commonly useful in concurrent programming.
java.util.concurrent.atomic
A small toolkit of classes that support lock-free thread-safe
 programming on single variables.
java.util.concurrent.locks
Interfaces and classes providing a framework for locking and waiting
 for conditions that is distinct from built-in synchronization and
 monitors.
java.util.jar
Provides classes for reading and writing the JAR (Java ARchive)
 file format, which is based on the standard ZIP file format with an
 optional manifest file.
java.util.logging
Provides the classes and interfaces of
 the Java 2 platform's core logging facilities.
java.util.prefs
This package allows applications to store and retrieve user and system
 preference and configuration data.
java.util.random
This package contains classes and interfaces that support a generic API
 for random number generation.
java.util.regex
Classes for matching character sequences against patterns specified
 by regular expressions.
java.util.spi
Service provider classes for the classes in the java.util package.
java.util.stream
Classes to support functional-style operations on streams of elements, such
 as map-reduce transformations on collections.
java.util.zip
Provides classes for reading and writing the standard ZIP and GZIP file
 formats.
javax.accessibility
Defines a contract between user-interface components and an assistive
 technology that provides access to those components.
javax.annotation.processing
Facilities for declaring annotation processors and for
 allowing annotation processors to communicate with an annotation processing
 tool environment.
javax.crypto
Provides the classes and interfaces for cryptographic
 operations.
javax.crypto.spec
Provides classes and interfaces for key specifications and
 algorithm parameter specifications.
javax.imageio
The main package of the Java Image I/O API.
javax.imageio.event
A package of the Java Image I/O API dealing with synchronous notification of
 events during the reading and writing of images.
javax.imageio.metadata
A package of the Java Image I/O API dealing with reading and writing
 metadata.
javax.imageio.plugins.jpeg
Classes supporting the built-in JPEG plug-in.
javax.imageio.plugins.tiff
Public classes used by the built-in TIFF plug-ins.
javax.imageio.spi
A package of the Java Image I/O API containing the plug-in interfaces for
 readers, writers, transcoders, and streams, and a runtime registry.
javax.imageio.stream
A package of the Java Image I/O API dealing with low-level I/O from files and
 streams.
javax.lang.model
Types and hierarchies of packages comprising a Java language model, a model of the declarations and types of the Java
 programming language.
javax.lang.model.element
Interfaces used to model elements of the Java programming language.
javax.lang.model.type
Interfaces used to model Java programming language types.
javax.lang.model.util
Utilities to assist in the processing of
program elements
and
types
.
javax.management
Provides the core classes for the Java Management Extensions.
javax.management.loading
Provides the classes which implement advanced dynamic
        loading.
javax.management.modelmbean
Provides the definition of the ModelMBean classes.
javax.management.monitor
Provides the definition of the monitor classes.
javax.management.openmbean
Provides the open data types and Open MBean descriptor classes.
javax.management.relation
Provides the definition of the Relation Service.
javax.management.remote
Interfaces for remote access to
        JMX MBean servers.
javax.management.remote.rmi
The RMI connector is a connector for the JMX Remote API that
      uses RMI to transmit client requests to a remote MBean server.
javax.management.timer
Provides the definition of the Timer MBean.
javax.naming
Provides the classes and interfaces for accessing naming services.
javax.naming.directory
Extends the
javax.naming
package to provide functionality
for accessing directory services.
javax.naming.event
Provides support for event notification when accessing naming and
directory services.
javax.naming.ldap
Provides support for LDAPv3 extended operations and controls.
javax.naming.ldap.spi
javax.naming.spi
Provides the means for dynamically plugging in support for accessing
naming and directory services through the
javax.naming
and related packages.
javax.net
Provides classes for networking applications.
javax.net.ssl
Provides classes for the secure socket package.
javax.print
Provides the principal classes and interfaces for the Java Print
 Service API.
javax.print.attribute
Provides classes and interfaces that describe the types of Java Print
 Service attributes and how they can be collected into attribute sets.
javax.print.attribute.standard
Package
javax.print.attribute.standard
contains classes for specific
 printing attributes.
javax.print.event
Package
javax.print.event
contains event classes and listener
 interfaces.
javax.rmi.ssl
Provides implementations of
RMIClientSocketFactory
and
RMIServerSocketFactory
over
 the Secure Sockets Layer (SSL) or Transport Layer Security (TLS) protocols.
javax.script
The scripting API consists of interfaces and classes that define
Java Scripting Engines and provides
a framework for their use in Java applications.
javax.security.auth
This package provides a framework for authentication and
 authorization.
javax.security.auth.callback
This package provides the classes necessary for services
 to interact with applications in order to retrieve
 information (authentication data including usernames
 or passwords, for example) or to display information
 (error and warning messages, for example).
javax.security.auth.kerberos
This package contains utility classes related to the Kerberos network
 authentication protocol.
javax.security.auth.login
This package provides a pluggable authentication framework.
javax.security.auth.spi
This package provides the interface to be used for
 implementing pluggable authentication modules.
javax.security.auth.x500
This package contains the classes that should be used to store
 X500 Principal and X500 Private Credentials in a
Subject
.
javax.security.cert
Provides classes for public key certificates.
javax.security.sasl
Contains class and interfaces for supporting SASL.
javax.smartcardio
Java™ Smart Card I/O API.
javax.sound.midi
Provides interfaces and classes for I/O, sequencing, and synthesis of MIDI
 (Musical Instrument Digital Interface) data.
javax.sound.sampled
Provides interfaces and classes for capture, processing, and playback of
 sampled audio data.
javax.sql
Provides the API for server side data source access and processing from
 the Java programming language.
javax.sql.rowset
Standard interfaces and base classes for JDBC
RowSet
implementations.
javax.sql.rowset.serial
Provides utility classes to allow serializable mappings between SQL types
 and data types in the Java programming language.
javax.sql.rowset.spi
The standard classes and interfaces that a third party vendor has to
 use in its implementation of a synchronization provider.
javax.swing
Provides a set of "lightweight" (all-Java language) components
 that, to the maximum degree possible, work the same on all platforms.
javax.swing.border
Provides classes and interface for drawing specialized borders around a Swing
 component.
javax.swing.colorchooser
Contains classes and interfaces used by the
JColorChooser
component.
javax.swing.event
Provides for events fired by Swing components.
javax.swing.filechooser
Contains classes and interfaces used by the
JFileChooser
component.
javax.swing.plaf
Provides one interface and many abstract classes that Swing uses to provide
 its pluggable look-and-feel capabilities.
javax.swing.plaf.basic
Provides user interface objects built according to the Basic look and feel.
javax.swing.plaf.metal
Provides user interface objects built according to the Java look and feel
 (once codenamed
Metal
), which is the default look and feel.
javax.swing.plaf.multi
Provides user interface objects that combine two or more look and feels.
javax.swing.plaf.nimbus
Provides user interface objects built according to the cross-platform Nimbus
 look and feel.
javax.swing.plaf.synth
Synth is a skinnable look and feel in which all painting is delegated.
javax.swing.table
Provides classes and interfaces for dealing with
javax.swing.JTable
.
javax.swing.text
Provides classes and interfaces that deal with editable and noneditable text
 components.
javax.swing.text.html
Provides the class
HTMLEditorKit
and supporting classes for creating
 HTML text editors.
javax.swing.text.html.parser
Provides the default HTML parser, along with support classes.
javax.swing.text.rtf
Provides a class (
RTFEditorKit
) for creating Rich-Text-Format text
 editors.
javax.swing.tree
Provides classes and interfaces for dealing with
javax.swing.JTree
.
javax.swing.undo
Allows developers to provide support for undo/redo in applications such as
 text editors.
javax.tools
Provides interfaces for tools which can be invoked from a program,
 for example, compilers.
javax.transaction.xa
Provides the API that defines the contract between the transaction manager
 and the resource manager, which allows the transaction manager to enlist
 and delist resource objects (supplied by the resource manager driver) in
 JTA transactions.
javax.xml
Defines constants for XML processing.
javax.xml.catalog
Provides the classes for implementing
XML Catalogs OASIS Standard V1.1, 7 October 2005
.
javax.xml.crypto
Common classes for XML cryptography.
javax.xml.crypto.dom
DOM-specific classes for the
javax.xml.crypto
package.
javax.xml.crypto.dsig
Classes for generating and validating XML digital
 signatures.
javax.xml.crypto.dsig.keyinfo
Classes for parsing and processing
KeyInfo
elements and structures.
javax.xml.crypto.dsig.spec
Parameter classes for XML digital signatures.
javax.xml.datatype
Defines XML/Java Type Mappings.
javax.xml.namespace
Defines XML Namespace processing.
javax.xml.parsers
Provides the classes for processing XML documents with a SAX (Simple API for XML)
 parser or a DOM (Document Object Model) Document builder.
javax.xml.stream
Defines interfaces and classes for the Streaming API for XML (StAX).
javax.xml.stream.events
Defines event interfaces for the Streaming API for XML (StAX).
javax.xml.stream.util
Provides utility classes for the Streaming API for XML (StAX).
javax.xml.transform
Defines the generic APIs for processing transformation instructions,
 and performing a transformation from source to result.
javax.xml.transform.dom
Provides DOM specific transformation classes.
javax.xml.transform.sax
Provides SAX specific transformation classes.
javax.xml.transform.stax
Provides StAX specific transformation classes.
javax.xml.transform.stream
Provides stream and URI specific transformation classes.
javax.xml.validation
Provides an API for validation of XML documents.
javax.xml.xpath
Provides an
object-model neutral
API for the
 evaluation of XPath expressions and access to the evaluation
 environment.
jdk.dynalink
Contains interfaces and classes that are used to link an
invokedynamic
call site.
jdk.dynalink.beans
Contains the linker for ordinary Java objects.
jdk.dynalink.linker
Contains interfaces and classes needed by language runtimes to implement
 their own language-specific object models and type conversions.
jdk.dynalink.linker.support
Contains classes that make it more convenient for language runtimes to
 implement their own language-specific object models and type conversions
 by providing basic implementations of some classes as well as various
 utilities.
jdk.incubator.vector
Incubating Feature.
Will be removed in a future release.
jdk.javadoc.doclet
The Doclet API provides an environment which, in conjunction with
 the Language Model API and Compiler Tree API, allows clients
 to inspect the source-level structures of programs and
 libraries, including API comments embedded in the source.
jdk.jfr
This package provides classes to create events and control Flight Recorder.
jdk.jfr.consumer
This package contains classes for consuming Flight Recorder data.
jdk.jshell
Provides interfaces for creating tools, such as a Read-Eval-Print Loop (REPL),
 which interactively evaluate "snippets" of Java programming language code.
jdk.jshell.execution
Provides implementation support for building JShell execution engines.
jdk.jshell.spi
Defines the Service Provider Interface for pluggable JShell execution engines.
jdk.jshell.tool
Provides a mechanism to launch an instance of a Java shell tool.
jdk.management.jfr
This package contains classes to control and monitor Flight Recorder over Java Management Extensions (JMX).
jdk.net
Platform specific socket options for the
java.net
and
java.nio.channels
socket classes.
jdk.security.jarsigner
This package defines APIs for signing jar files.
netscape.javascript
Provides Java code the ability to access the JavaScript engine and the
 HTML DOM in the web browser.
org.ietf.jgss
This package presents a framework that allows application developers to
 make use of security services like authentication, data integrity and
 data confidentiality from a variety of underlying security mechanisms
 like Kerberos, using a unified API.
org.w3c.dom
Provides the interfaces for the Document Object Model (DOM).
org.w3c.dom.bootstrap
Provides a factory for obtaining instances of
DOMImplementation
.
org.w3c.dom.css
Provides interfaces for DOM Level 2 Style Specification.
org.w3c.dom.events
Provides interfaces for DOM Level 2 Events.
org.w3c.dom.html
Provides interfaces for DOM Level 2 HTML Specification.
org.w3c.dom.ls
Provides interfaces for DOM Level 3 Load and Save.
org.w3c.dom.ranges
Provides interfaces for DOM Level 2 Range.
org.w3c.dom.stylesheets
Provides interfaces for DOM Level 2 Style Specification.
org.w3c.dom.xpath
Provides interfaces for DOM Level 3 XPath Specification.
org.xml.sax
Provides the interfaces for the Simple API for XML (SAX).
org.xml.sax.ext
Provides interfaces to SAX2 facilities that
 conformant SAX drivers won't necessarily support.
org.xml.sax.helpers
Provides helper classes, including
 support for bootstrapping SAX-based applications.
Uses of
String
in
com.sun.java.accessibility.util
Methods in
com.sun.java.accessibility.util
that return
String
Modifier and Type
Method
Description
String
Translator.
getAccessibleDescription
()
Get the accessible description of this object.
String
Translator.
getAccessibleName
()
Get the accessible name of this object.
String
AccessibilityListenerList.
toString
()
Return a string representation of the
AccessibilityListenerList
.
Methods in
com.sun.java.accessibility.util
with parameters of type
String
Modifier and Type
Method
Description
void
Translator.
setAccessibleDescription
(
String
s)
Set the accessible description of this object.
void
Translator.
setAccessibleName
(
String
s)
Set the name of this object.
Uses of
String
in
com.sun.jdi
Methods in
com.sun.jdi
that return
String
Modifier and Type
Method
Description
String
PathSearchingVirtualMachine.
baseDirectory
()
Get the base directory used for path searching.
String
ClassNotLoadedException.
className
()
String
ArrayType.
componentSignature
()
Gets the JNI signature of the components of this
 array class.
String
ArrayType.
componentTypeName
()
Returns a text representation of the component
 type of this array.
String
ReferenceType.
defaultStratum
()
Returns the default stratum for this reference type.
String
VirtualMachine.
description
()
Returns text information on the target VM and the
 debugger support that mirrors it.
String
LocalVariable.
genericSignature
()
Gets the generic signature for this variable if there is one.
String
ReferenceType.
genericSignature
()
Gets the generic signature for this type if there is one.
String
TypeComponent.
genericSignature
()
Gets the generic signature for this TypeComponent if there is one.
String
VirtualMachine.
getDefaultStratum
()
Return this VM's default stratum.
String
LocalVariable.
name
()
Gets the name of the local variable.
String
ModuleReference.
name
()
Returns the module name.
String
ReferenceType.
name
()
Returns the name of this
ReferenceType
object.
String
ThreadGroupReference.
name
()
Returns the name of this thread group.
String
ThreadReference.
name
()
Returns the name of this thread.
String
Type.
name
()
Returns the name of this type.
String
TypeComponent.
name
()
Gets the name of this type component.
String
VirtualMachine.
name
()
Returns the name of the target VM as reported by the
 property
java.vm.name
.
String
Method.
returnTypeName
()
Returns a text representation of the return type,
 as specified in the declaration of this method.
String
LocalVariable.
signature
()
Gets the
type signature
of the local variable.
String
Type.
signature
()
Returns the type signature for this type.
String
TypeComponent.
signature
()
Gets the
type signature
for this type component.
String
ReferenceType.
sourceDebugExtension
()
Get the source debug extension of this type.
String
Location.
sourceName
()
Gets an identifying name for the source corresponding to
 this location.
String
Location.
sourceName
(
String
stratum)
Gets an identifying name for the source corresponding to
 this location.
String
ReferenceType.
sourceName
()
Gets an identifying name for the source corresponding to the
 declaration of this type.
String
Location.
sourcePath
()
Gets the path to the source corresponding to this
 location.
String
Location.
sourcePath
(
String
stratum)
Gets the path to the source corresponding to this
 location.
String
Mirror.
toString
()
Returns a String describing this mirror
String
Field.
typeName
()
Returns a text representation of the type
 of this field.
String
LocalVariable.
typeName
()
Returns a text representation of the type
 of this variable.
String
StringReference.
value
()
Returns the StringReference as a String.
String
VirtualMachine.
version
()
Returns the version of the Java Runtime Environment in the target
 VM as reported by the property
java.version
.
Methods in
com.sun.jdi
that return types with arguments of type
String
Modifier and Type
Method
Description
List
<
String
>
Method.
argumentTypeNames
()
Returns a list containing a text representation of the type
 of each formal parameter of this method.
List
<
String
>
ReferenceType.
availableStrata
()
Return the available strata for this reference type.
List
<
String
>
PathSearchingVirtualMachine.
bootClassPath
()
Get the boot class path for this virtual machine.
List
<
String
>
PathSearchingVirtualMachine.
classPath
()
Get the class path for this virtual machine.
List
<
String
>
ReferenceType.
sourceNames
(
String
stratum)
Gets the identifying names for all the source corresponding to the
 declaration of this type.
List
<
String
>
ReferenceType.
sourcePaths
(
String
stratum)
Gets the paths to the source corresponding to the
 declaration of this type.
Methods in
com.sun.jdi
with parameters of type
String
Modifier and Type
Method
Description
List
<
Location
>
Method.
allLineLocations
(
String
stratum,
String
sourceName)
Returns a list containing a
Location
object for
 each executable source line in this method.
List
<
Location
>
ReferenceType.
allLineLocations
(
String
stratum,
String
sourceName)
Returns a list containing a
Location
object
 for each executable source line in this reference type.
List
<
ReferenceType
>
VirtualMachine.
classesByName
(
String
className)
Returns the loaded reference types that
 match a given name.
Method
ClassType.
concreteMethodByName
(
String
name,
String
signature)
Returns a single non-abstract
Method
visible from
 this class that has the given name and signature.
Field
ReferenceType.
fieldByName
(
String
fieldName)
Finds the visible
Field
with the given
 non-ambiguous name.
int
Location.
lineNumber
(
String
stratum)
The line number of this Location.
List
<
Location
>
Method.
locationsOfLine
(
String
stratum,
String
sourceName,
 int lineNumber)
Returns a List containing all
Location
objects
 that map to the given line number and source name.
List
<
Location
>
ReferenceType.
locationsOfLine
(
String
stratum,
String
sourceName,
 int lineNumber)
Returns a List containing all
Location
objects
 that map to the given line number.
List
<
Method
>
ReferenceType.
methodsByName
(
String
name)
Returns a List containing each visible
Method
that
 has the given name.
List
<
Method
>
ReferenceType.
methodsByName
(
String
name,
String
signature)
Returns a List containing each visible
Method
that
 has the given name and signature.
StringReference
VirtualMachine.
mirrorOf
(
String
value)
Creates a string in this virtual machine.
void
VirtualMachine.
setDefaultStratum
(
String
stratum)
Set this VM's default stratum (see
Location
for a
 discussion of strata).
String
Location.
sourceName
(
String
stratum)
Gets an identifying name for the source corresponding to
 this location.
List
<
String
>
ReferenceType.
sourceNames
(
String
stratum)
Gets the identifying names for all the source corresponding to the
 declaration of this type.
String
Location.
sourcePath
(
String
stratum)
Gets the path to the source corresponding to this
 location.
List
<
String
>
ReferenceType.
sourcePaths
(
String
stratum)
Gets the paths to the source corresponding to the
 declaration of this type.
List
<
LocalVariable
>
Method.
variablesByName
(
String
name)
Returns a list containing each
LocalVariable
of a
 given name in this method.
LocalVariable
StackFrame.
visibleVariableByName
(
String
name)
Finds a
LocalVariable
that matches the given name and is
 visible at the current frame location.
Constructors in
com.sun.jdi
with parameters of type
String
Modifier
Constructor
Description
AbsentInformationException
(
String
s)
ClassNotLoadedException
(
String
className)
ClassNotLoadedException
(
String
className,
String
message)
ClassNotPreparedException
(
String
s)
IncompatibleThreadStateException
(
String
s)
InconsistentDebugInfoException
(
String
s)
InternalException
(
String
s)
InternalException
(
String
s,
 int errorCode)
InvalidCodeIndexException
(
String
s)
Deprecated.
InvalidLineNumberException
(
String
s)
Deprecated.
InvalidModuleException
(
String
msg)
Constructs an
InvalidModuleException
with the given detail
 message.
InvalidStackFrameException
(
String
s)
InvalidTypeException
(
String
s)
JDIPermission
(
String
name)
The
JDIPermission
class represents access rights to the
VirtualMachineManager
JDIPermission
(
String
name,
String
actions)
Constructs a new JDIPermission object.
NativeMethodException
(
String
message)
ObjectCollectedException
(
String
s)
OpaqueFrameException
(
String
message)
Constructs a OpaqueFrameException with the given detail message.
VMCannotBeModifiedException
(
String
s)
VMDisconnectedException
(
String
message)
VMMismatchException
(
String
s)
VMOutOfMemoryException
(
String
s)
Uses of
String
in
com.sun.jdi.connect
Methods in
com.sun.jdi.connect
that return
String
Modifier and Type
Method
Description
String
Connector.Argument.
description
()
Returns a human-readable description of this argument
 and its purpose.
String
Connector.
description
()
Returns a human-readable description of this connector
 and its purpose.
String
Connector.Argument.
label
()
Returns a short human-readable label for this argument.
String
Connector.Argument.
name
()
Returns a short, unique identifier for the argument.
String
Connector.
name
()
Returns a short identifier for the connector.
String
Transport.
name
()
Returns a short identifier for the transport.
String
ListeningConnector.
startListening
(
Map
<
String
,
? extends
Connector.Argument
> arguments)
Listens for one or more connections initiated by target VMs.
String
Connector.BooleanArgument.
stringValueOf
(boolean value)
Return the string representation of the
value
parameter.
String
Connector.IntegerArgument.
stringValueOf
(int value)
Return the string representation of the
value
parameter.
String
Connector.Argument.
value
()
Returns the current value of the argument.
Methods in
com.sun.jdi.connect
that return types with arguments of type
String
Modifier and Type
Method
Description
List
<
String
>
IllegalConnectorArgumentsException.
argumentNames
()
Return a
List
containing the names of the
 invalid or inconsistent arguments.
List
<
String
>
Connector.SelectedArgument.
choices
()
Return the possible values for the argument
Map
<
String
,
Connector.Argument
>
Connector.
defaultArguments
()
Returns the arguments accepted by this Connector and their
 default values.
Methods in
com.sun.jdi.connect
with parameters of type
String
Modifier and Type
Method
Description
boolean
Connector.Argument.
isValid
(
String
value)
Performs basic sanity check of argument.
boolean
Connector.BooleanArgument.
isValid
(
String
value)
Performs basic sanity check of argument.
boolean
Connector.IntegerArgument.
isValid
(
String
value)
Performs basic sanity check of argument.
boolean
Connector.SelectedArgument.
isValid
(
String
value)
Performs basic sanity check of argument.
boolean
Connector.StringArgument.
isValid
(
String
value)
Performs basic sanity check of argument.
void
Connector.Argument.
setValue
(
String
value)
Sets the value of the argument.
Method parameters in
com.sun.jdi.connect
with type arguments of type
String
Modifier and Type
Method
Description
VirtualMachine
ListeningConnector.
accept
(
Map
<
String
,
? extends
Connector.Argument
> arguments)
Waits for a target VM to attach to this connector.
VirtualMachine
AttachingConnector.
attach
(
Map
<
String
,
? extends
Connector.Argument
> arguments)
Attaches to a running application and returns a
 mirror of its VM.
VirtualMachine
LaunchingConnector.
launch
(
Map
<
String
,
? extends
Connector.Argument
> arguments)
Launches an application and connects to its VM.
String
ListeningConnector.
startListening
(
Map
<
String
,
? extends
Connector.Argument
> arguments)
Listens for one or more connections initiated by target VMs.
void
ListeningConnector.
stopListening
(
Map
<
String
,
? extends
Connector.Argument
> arguments)
Cancels listening for connections.
Constructors in
com.sun.jdi.connect
with parameters of type
String
Modifier
Constructor
Description
IllegalConnectorArgumentsException
(
String
s,
String
name)
Construct an
IllegalConnectorArgumentsException
with the specified detail message and the name of the argument
 which is invalid or inconsistent.
IllegalConnectorArgumentsException
(
String
s,
List
<
String
> names)
Construct an
IllegalConnectorArgumentsException
with the specified detail message and a
List
of
 names of arguments which are invalid or inconsistent.
TransportTimeoutException
(
String
message)
Constructs a
TransportTimeoutException
with the
 specified detail message.
VMStartException
(
String
message,
Process
process)
Constructor parameters in
com.sun.jdi.connect
with type arguments of type
String
Modifier
Constructor
Description
IllegalConnectorArgumentsException
(
String
s,
List
<
String
> names)
Construct an
IllegalConnectorArgumentsException
with the specified detail message and a
List
of
 names of arguments which are invalid or inconsistent.
Uses of
String
in
com.sun.jdi.connect.spi
Methods in
com.sun.jdi.connect.spi
that return
String
Modifier and Type
Method
Description
abstract
String
TransportService.ListenKey.
address
()
Returns a string representation of the listen key.
abstract
String
TransportService.
description
()
Returns a description of the transport service.
abstract
String
TransportService.
name
()
Returns a name to identify the transport service.
Methods in
com.sun.jdi.connect.spi
with parameters of type
String
Modifier and Type
Method
Description
abstract
Connection
TransportService.
attach
(
String
address,
 long attachTimeout,
 long handshakeTimeout)
Attaches to the specified address.
abstract
TransportService.ListenKey
TransportService.
startListening
(
String
address)
Listens on the specified address for inbound connections.
Constructors in
com.sun.jdi.connect.spi
with parameters of type
String
Modifier
Constructor
Description
ClosedConnectionException
(
String
message)
Constructs a
ClosedConnectionException
with the
 specified detail message.
Uses of
String
in
com.sun.jdi.event
Methods in
com.sun.jdi.event
that return
String
Modifier and Type
Method
Description
String
ClassUnloadEvent.
className
()
Returns the
name of the class
that has been unloaded.
String
ClassUnloadEvent.
classSignature
()
Returns the
type signature of the class
that has been unloaded.
Uses of
String
in
com.sun.jdi.request
Methods in
com.sun.jdi.request
with parameters of type
String
Modifier and Type
Method
Description
void
ClassPrepareRequest.
addClassExclusionFilter
(
String
classPattern)
Restricts the events generated by this request to the
 preparation of reference types whose name does
not
match
 this restricted regular expression.
void
ClassUnloadRequest.
addClassExclusionFilter
(
String
classPattern)
Restricts the events generated by this request to the
 unloading of reference types whose name does
not
match
 a restricted regular expression.
void
ExceptionRequest.
addClassExclusionFilter
(
String
classPattern)
Restricts the events generated by this request to those
 whose location is in a class whose name does
not
match a
 restricted regular expression.
void
MethodEntryRequest.
addClassExclusionFilter
(
String
classPattern)
Restricts the events generated by this request to those
 whose method is in a class whose name does
not
match this restricted
 regular expression, e.g.
void
MethodExitRequest.
addClassExclusionFilter
(
String
classPattern)
Restricts the events generated by this request to those
 whose method is in a class whose name does
not
match this
 restricted regular expression.
void
MonitorContendedEnteredRequest.
addClassExclusionFilter
(
String
classPattern)
Restricts the events generated by this request to those
 whose method is in a class whose name does
not
match this restricted
 regular expression, e.g.
void
MonitorContendedEnterRequest.
addClassExclusionFilter
(
String
classPattern)
Restricts the events generated by this request to those
 whose method is in a class whose name does
not
match this restricted
 regular expression, e.g.
void
MonitorWaitedRequest.
addClassExclusionFilter
(
String
classPattern)
Restricts the events generated by this request to those
 in which the name of the class of the monitor object does
not
match this restricted
 regular expression, e.g.
void
MonitorWaitRequest.
addClassExclusionFilter
(
String
classPattern)
Restricts the events generated by this request to those
 in which the name of the class of the monitor object does
not
match this restricted
 regular expression, e.g.
void
StepRequest.
addClassExclusionFilter
(
String
classPattern)
Restricts the events generated by this request to those
 whose location is in a class whose name does
not
match a
 restricted regular expression.
void
WatchpointRequest.
addClassExclusionFilter
(
String
classPattern)
Restricts the events generated by this request to those
 whose location is in a class whose name does
not
match this
 restricted regular expression.
void
ClassPrepareRequest.
addClassFilter
(
String
classPattern)
Restricts the events generated by this request to the
 preparation of reference types whose name matches this restricted
 regular expression.
void
ClassUnloadRequest.
addClassFilter
(
String
classPattern)
Restricts the events generated by this request to the
 unloading of reference types whose name matches a restricted
 regular expression.
void
ExceptionRequest.
addClassFilter
(
String
classPattern)
Restricts the events generated by this request to those
 whose location is in a class whose name matches a restricted
 regular expression.
void
MethodEntryRequest.
addClassFilter
(
String
classPattern)
Restricts the events generated by this request to those
 whose method is in a class whose name matches this restricted
 regular expression.
void
MethodExitRequest.
addClassFilter
(
String
classPattern)
Restricts the events generated by this request to those
 whose method is in a class whose name matches a restricted
 regular expression.
void
MonitorContendedEnteredRequest.
addClassFilter
(
String
classPattern)
Restricts the events generated by this request to those
 whose method is in a class whose name matches this restricted
 regular expression.
void
MonitorContendedEnterRequest.
addClassFilter
(
String
classPattern)
Restricts the events generated by this request to those
 whose method is in a class whose name matches this restricted
 regular expression.
void
MonitorWaitedRequest.
addClassFilter
(
String
classPattern)
Restricts the events generated by this request to those
 in which the name of the class of the monitor object matches this restricted
 regular expression.
void
MonitorWaitRequest.
addClassFilter
(
String
classPattern)
Restricts the events generated by this request to those
 in which the name of the class of the monitor object matches this restricted
 regular expression.
void
StepRequest.
addClassFilter
(
String
classPattern)
Restricts the events generated by this request to those
 whose location is in a class whose name matches a restricted
 regular expression.
void
WatchpointRequest.
addClassFilter
(
String
classPattern)
Restricts the events generated by this request to those
 whose location is in a class whose name matches a restricted
 regular expression.
void
ClassPrepareRequest.
addSourceNameFilter
(
String
sourceNamePattern)
Restricts the events generated by this request to the
 preparation of reference types for which the restricted regular
 expression 'sourceNamePattern' matches one of the 'sourceNames' for
 the reference type being prepared.
Constructors in
com.sun.jdi.request
with parameters of type
String
Modifier
Constructor
Description
DuplicateRequestException
(
String
s)
InvalidRequestStateException
(
String
s)
Uses of
String
in
com.sun.management
Fields in
com.sun.management
declared as
String
Modifier and Type
Field
Description
static final
String
GarbageCollectionNotificationInfo.
GARBAGE_COLLECTION_NOTIFICATION
Notification type denoting that
 the Java virtual machine has completed a garbage collection cycle.
Methods in
com.sun.management
that return
String
Modifier and Type
Method
Description
String
GarbageCollectionNotificationInfo.
getGcAction
()
Returns the action performed by the garbage collector
String
GarbageCollectionNotificationInfo.
getGcCause
()
Returns the cause of the garbage collection
String
GarbageCollectionNotificationInfo.
getGcName
()
Returns the name of the garbage collector used to perform the collection
String
VMOption.
getName
()
Returns the name of this VM option.
String
VMOption.
getValue
()
Returns the value of this VM option at the time when
 this
VMOption
was created.
String
GcInfo.
toString
()
Methods in
com.sun.management
that return types with arguments of type
String
Modifier and Type
Method
Description
Map
<
String
,
MemoryUsage
>
GcInfo.
getMemoryUsageAfterGc
()
Returns the memory usage of all memory pools
 at the end of this GC.
Map
<
String
,
MemoryUsage
>
GcInfo.
getMemoryUsageBeforeGc
()
Returns the memory usage of all memory pools
 at the beginning of this GC.
Methods in
com.sun.management
with parameters of type
String
Modifier and Type
Method
Description
boolean
GcInfo.
containsKey
(
String
key)
void
HotSpotDiagnosticMXBean.
dumpHeap
(
String
outputFile,
 boolean live)
Dumps the heap to the
outputFile
file in the same
 format as the hprof heap dump.
default void
HotSpotDiagnosticMXBean.
dumpThreads
(
String
outputFile,
HotSpotDiagnosticMXBean.ThreadDumpFormat
format)
Generate a thread dump to the given file in the given format.
Object
GcInfo.
get
(
String
key)
Object
[]
GcInfo.
getAll
(
String
[] keys)
VMOption
HotSpotDiagnosticMXBean.
getVMOption
(
String
name)
Returns a
VMOption
object for a VM option of the given
 name.
void
HotSpotDiagnosticMXBean.
setVMOption
(
String
name,
String
value)
Sets a VM option of the given name to the specified value.
static
HotSpotDiagnosticMXBean.ThreadDumpFormat
HotSpotDiagnosticMXBean.ThreadDumpFormat.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
VMOption.Origin
VMOption.Origin.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Constructors in
com.sun.management
with parameters of type
String
Modifier
Constructor
Description
GarbageCollectionNotificationInfo
(
String
gcName,
String
gcAction,
String
gcCause,
GcInfo
gcInfo)
Constructs a
GarbageCollectionNotificationInfo
object.
VMOption
(
String
name,
String
value,
 boolean writeable,
VMOption.Origin
origin)
Constructs a
VMOption
.
Uses of
String
in
com.sun.net.httpserver
Fields in
com.sun.net.httpserver
declared as
String
Modifier and Type
Field
Description
protected final
String
BasicAuthenticator.
realm
The HTTP Basic authentication realm.
Methods in
com.sun.net.httpserver
that return
String
Modifier and Type
Method
Description
abstract
String
Filter.
description
()
Returns a short description of this
Filter
.
String
[]
HttpsParameters.
getCipherSuites
()
Returns a copy of the array of ciphersuites or
null
if none
 have been set.
String
Headers.
getFirst
(
String
key)
Returns the first value from the
List
of
String
values
 for the given
key
, or
null
if no mapping for the
key
exists.
String
HttpPrincipal.
getName
()
Returns the contents of this principal in the form
realm:username
.
abstract
String
HttpContext.
getPath
()
Returns the path this context was created with.
abstract
String
HttpExchange.
getProtocol
()
Returns the protocol string from the request in the form
protocol/majorVersion.minorVersion
.
String
[]
HttpsParameters.
getProtocols
()
Returns a copy of the array of protocols or
null
if none have been
 set.
String
BasicAuthenticator.
getRealm
()
Returns the realm this
BasicAuthenticator
was created with.
String
HttpPrincipal.
getRealm
()
Returns the
realm
this object was created with.
abstract
String
HttpExchange.
getRequestMethod
()
Returns the request method.
String
Request.
getRequestMethod
()
Returns the request method.
String
HttpPrincipal.
getUsername
()
Returns the
username
this object was created with.
String
HttpPrincipal.
toString
()
Returns the same string as
HttpPrincipal.getName()
.
Methods in
com.sun.net.httpserver
that return types with arguments of type
String
Modifier and Type
Method
Description
Set
<
Map.Entry
<
String
,
List
<
String
>>>
Headers.
entrySet
()
Set
<
Map.Entry
<
String
,
List
<
String
>>>
Headers.
entrySet
()
List
<
String
>
Headers.
get
(
Object
key)
abstract
Map
<
String
,
Object
>
HttpContext.
getAttributes
()
Returns a mutable
Map
, which can be used to pass configuration
 and other data to
Filter
modules and to the context's exchange
 handler.
Set
<
String
>
Headers.
keySet
()
List
<
String
>
Headers.
put
(
String
key,
List
<
String
> value)
List
<
String
>
Headers.
remove
(
Object
key)
Collection
<
List
<
String
>>
Headers.
values
()
Methods in
com.sun.net.httpserver
with parameters of type
String
Modifier and Type
Method
Description
static
Filter
Filter.
adaptRequest
(
String
description,
UnaryOperator
<
Request
> requestOperator)
Returns a
pre-processing Filter
that inspects and possibly adapts the request state.
void
Headers.
add
(
String
key,
String
value)
Adds the given
value
to the list of headers for the given
key
.
static
Filter
Filter.
afterHandler
(
String
description,
Consumer
<
HttpExchange
> operation)
Returns a post-processing
Filter
with the given description and
 operation.
static
Filter
Filter.
beforeHandler
(
String
description,
Consumer
<
HttpExchange
> operation)
Returns a pre-processing
Filter
with the given description and
 operation.
abstract boolean
BasicAuthenticator.
checkCredentials
(
String
username,
String
password)
Called for each incoming request to verify the
 given name and password in the context of this
 authenticator's realm.
static
HttpServer
HttpServer.
create
(
InetSocketAddress
addr,
 int backlog,
String
path,
HttpHandler
handler,
Filter
... filters)
Creates an
HttpServer
instance with an initial context.
static
HttpsServer
HttpsServer.
create
(
InetSocketAddress
addr,
 int backlog,
String
path,
HttpHandler
handler,
Filter
... filters)
Creates an
HttpsServer
instance with an initial context.
abstract
HttpContext
HttpServer.
createContext
(
String
path)
Creates a HttpContext without initially specifying a handler.
abstract
HttpContext
HttpServer.
createContext
(
String
path,
HttpHandler
handler)
Creates a
HttpContext
.
abstract
Object
HttpExchange.
getAttribute
(
String
name)
Filter
modules may store arbitrary objects with
HttpExchange
instances as an out-of-band communication mechanism.
String
Headers.
getFirst
(
String
key)
Returns the first value from the
List
of
String
values
 for the given
key
, or
null
if no mapping for the
key
exists.
static
Headers
Headers.
of
(
String
... headers)
Returns an immutable
Headers
with the given name value pairs as
 its set of headers.
static
HttpHandler
HttpHandlers.
of
(int statusCode,
Headers
headers,
String
body)
Returns an
HttpHandler
that sends a response comprising the given
statusCode
,
headers
, and
body
.
List
<
String
>
Headers.
put
(
String
key,
List
<
String
> value)
abstract void
HttpServer.
removeContext
(
String
path)
Removes the context identified by the given path from the server.
void
Headers.
set
(
String
key,
String
value)
Sets the given
value
as the sole header value for the given
key
.
abstract void
HttpExchange.
setAttribute
(
String
name,
Object
value)
Filter
modules may store arbitrary objects with
HttpExchange
instances as an out-of-band communication mechanism.
void
HttpsParameters.
setCipherSuites
(
String
[] cipherSuites)
Sets the array of ciphersuites.
void
HttpsParameters.
setProtocols
(
String
[] protocols)
Sets the array of protocols.
static
SimpleFileServer.OutputLevel
SimpleFileServer.OutputLevel.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
default
Request
Request.
with
(
String
headerName,
List
<
String
> headerValues)
Returns an identical
Request
with an additional header.
Method parameters in
com.sun.net.httpserver
with type arguments of type
String
Modifier and Type
Method
Description
static
Headers
Headers.
of
(
Map
<
String
,
List
<
String
>> headers)
Returns an immutable
Headers
from the given
headers
with
 the same header names and values.
static
Headers
Headers.
of
(
Map
<
String
,
List
<
String
>> headers)
Returns an immutable
Headers
from the given
headers
with
 the same header names and values.
List
<
String
>
Headers.
put
(
String
key,
List
<
String
> value)
void
Headers.
putAll
(
Map
<? extends
String
,
? extends
List
<
String
>> t)
void
Headers.
putAll
(
Map
<? extends
String
,
? extends
List
<
String
>> t)
default
Request
Request.
with
(
String
headerName,
List
<
String
> headerValues)
Returns an identical
Request
with an additional header.
Constructors in
com.sun.net.httpserver
with parameters of type
String
Modifier
Constructor
Description
BasicAuthenticator
(
String
realm)
Creates a
BasicAuthenticator
for the given HTTP realm.
BasicAuthenticator
(
String
realm,
Charset
charset)
Creates a
BasicAuthenticator
for the given HTTP realm and using the
 given
Charset
to decode the Basic authentication credentials
 (username and password).
HttpPrincipal
(
String
username,
String
realm)
Creates a
HttpPrincipal
from the given
username
and
realm
.
Constructor parameters in
com.sun.net.httpserver
with type arguments of type
String
Modifier
Constructor
Description
Headers
(
Map
<
String
,
List
<
String
>> headers)
Creates a mutable
Headers
from the given
headers
with
 the same header names and values.
Headers
(
Map
<
String
,
List
<
String
>> headers)
Creates a mutable
Headers
from the given
headers
with
 the same header names and values.
Uses of
String
in
com.sun.nio.sctp
Methods in
com.sun.nio.sctp
that return
String
Modifier and Type
Method
Description
String
SctpStandardSocketOptions.InitMaxStreams.
toString
()
Returns a string representation of this init max streams, including
 the maximum in and out bound streams.
Methods in
com.sun.nio.sctp
with parameters of type
String
Modifier and Type
Method
Description
static
AssociationChangeNotification.AssocChangeEvent
AssociationChangeNotification.AssocChangeEvent.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
HandlerResult
HandlerResult.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
PeerAddressChangeNotification.AddressChangeEvent
PeerAddressChangeNotification.AddressChangeEvent.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Constructors in
com.sun.nio.sctp
with parameters of type
String
Modifier
Constructor
Description
IllegalReceiveException
(
String
msg)
Constructs an instance of this class with the specified message.
IllegalUnbindException
(
String
msg)
Constructs an instance of this class with the specified detailed message.
InvalidStreamException
(
String
msg)
Constructs an instance of this class with the specified detailed message.
Uses of
String
in
com.sun.security.auth
Methods in
com.sun.security.auth
that return
String
Modifier and Type
Method
Description
String
LdapPrincipal.
getName
()
Returns the name originally used to create this principal.
String
NTDomainPrincipal.
getName
()
Return the Windows NT domain name for this
NTDomainPrincipal
.
String
NTSid.
getName
()
Return a string version of this
NTSid
.
String
NTUserPrincipal.
getName
()
Return the Windows NT username for this
NTPrincipal
.
String
UnixNumericGroupPrincipal.
getName
()
Return the user's group identification number (GID) for this
UnixNumericGroupPrincipal
.
String
UnixNumericUserPrincipal.
getName
()
Return the user identification number (UID) for this
UnixNumericUserPrincipal
.
String
UnixPrincipal.
getName
()
Return the Unix username for this
UnixPrincipal
.
String
UserPrincipal.
getName
()
Returns the name of this principal.
String
LdapPrincipal.
toString
()
Creates a string representation of this principal's name in the format
 defined by
RFC 2253
.
String
NTDomainPrincipal.
toString
()
Return a string representation of this
NTDomainPrincipal
.
String
NTNumericCredential.
toString
()
Return a string representation of this
NTNumericCredential
.
String
NTSid.
toString
()
Return a string representation of this
NTSid
.
String
NTSidDomainPrincipal.
toString
()
Return a string representation of this
NTSidDomainPrincipal
.
String
NTSidGroupPrincipal.
toString
()
Return a string representation of this
NTSidGroupPrincipal
.
String
NTSidPrimaryGroupPrincipal.
toString
()
Return a string representation of this
NTSidPrimaryGroupPrincipal
.
String
NTSidUserPrincipal.
toString
()
Return a string representation of this
NTSidUserPrincipal
.
String
NTUserPrincipal.
toString
()
Return a string representation of this
NTPrincipal
.
String
UnixNumericGroupPrincipal.
toString
()
Return a string representation of this
UnixNumericGroupPrincipal
.
String
UnixNumericUserPrincipal.
toString
()
Return a string representation of this
UnixNumericUserPrincipal
.
String
UnixPrincipal.
toString
()
Return a string representation of this
UnixPrincipal
.
String
UserPrincipal.
toString
()
Returns a string representation of this principal.
Constructors in
com.sun.security.auth
with parameters of type
String
Modifier
Constructor
Description
LdapPrincipal
(
String
name)
Creates an LDAP principal.
NTDomainPrincipal
(
String
name)
Create an
NTDomainPrincipal
with a Windows NT domain name.
NTSid
(
String
stringSid)
Create an
NTSid
with a Windows NT SID.
NTSidDomainPrincipal
(
String
name)
Create an
NTSidDomainPrincipal
with a Windows NT SID.
NTSidGroupPrincipal
(
String
name)
Create an
NTSidGroupPrincipal
with a Windows NT group name.
NTSidPrimaryGroupPrincipal
(
String
name)
Create an
NTSidPrimaryGroupPrincipal
with a Windows NT
 group SID.
NTSidUserPrincipal
(
String
name)
Create an
NTSidUserPrincipal
with a Windows NT SID.
NTUserPrincipal
(
String
name)
Create an
NTUserPrincipal
with a Windows NT username.
UnixNumericGroupPrincipal
(
String
name,
 boolean primaryGroup)
Create a
UnixNumericGroupPrincipal
using a
String
representation of the user's
 group identification number (GID).
UnixNumericUserPrincipal
(
String
name)
Create a
UnixNumericUserPrincipal
using a
String
representation of the
 user's identification number (UID).
UnixPrincipal
(
String
name)
Create a UnixPrincipal with a Unix username.
UserPrincipal
(
String
name)
Creates a principal.
Uses of
String
in
com.sun.security.auth.login
Methods in
com.sun.security.auth.login
with parameters of type
String
Modifier and Type
Method
Description
AppConfigurationEntry
[]
ConfigFile.
getAppConfigurationEntry
(
String
applicationName)
Retrieve an entry from the
Configuration
using an application
 name as an index.
Uses of
String
in
com.sun.security.auth.module
Fields in
com.sun.security.auth.module
declared as
String
Modifier and Type
Field
Description
final
String
JndiLoginModule.
GROUP_PROVIDER
Directory service/path where this module can access the relevant
 group information.
final
String
JndiLoginModule.
USER_PROVIDER
Directory service/path where this module can access the relevant
 user information.
protected
String
UnixSystem.
username
The current username.
Methods in
com.sun.security.auth.module
that return
String
Modifier and Type
Method
Description
String
NTSystem.
getDomain
()
Get the domain for the current NT user.
String
NTSystem.
getDomainSID
()
Get a printable SID for the current NT user's domain.
String
[]
NTSystem.
getGroupIDs
()
Get the printable group SIDs for the current NT user.
String
NTSystem.
getName
()
Get the username for the current NT user.
String
NTSystem.
getPrimaryGroupID
()
Get a printable primary group SID for the current NT user.
String
UnixSystem.
getUsername
()
Get the username for the current Unix user.
String
NTSystem.
getUserSID
()
Get a printable SID for the current NT user.
Method parameters in
com.sun.security.auth.module
with type arguments of type
String
Modifier and Type
Method
Description
void
JndiLoginModule.
initialize
(
Subject
subject,
CallbackHandler
callbackHandler,
Map
<
String
,
?> sharedState,
Map
<
String
,
?> options)
Initialize this
LoginModule
.
void
KeyStoreLoginModule.
initialize
(
Subject
subject,
CallbackHandler
callbackHandler,
Map
<
String
,
?> sharedState,
Map
<
String
,
?> options)
Initialize this
LoginModule
.
void
Krb5LoginModule.
initialize
(
Subject
subject,
CallbackHandler
callbackHandler,
Map
<
String
,
?> sharedState,
Map
<
String
,
?> options)
Initialize this
LoginModule
.
void
LdapLoginModule.
initialize
(
Subject
subject,
CallbackHandler
callbackHandler,
Map
<
String
,
?> sharedState,
Map
<
String
,
?> options)
Initialize this
LoginModule
.
void
NTLoginModule.
initialize
(
Subject
subject,
CallbackHandler
callbackHandler,
Map
<
String
,
?> sharedState,
Map
<
String
,
?> options)
Initialize this
LoginModule
.
void
UnixLoginModule.
initialize
(
Subject
subject,
CallbackHandler
callbackHandler,
Map
<
String
,
?> sharedState,
Map
<
String
,
?> options)
Initialize this
LoginModule
.
Uses of
String
in
com.sun.security.jgss
Methods in
com.sun.security.jgss
with parameters of type
String
Modifier and Type
Method
Description
static
InquireType
InquireType.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Constructors in
com.sun.security.jgss
with parameters of type
String
Modifier
Constructor
Description
InquireSecContextPermission
(
String
name)
Constructs a new
InquireSecContextPermission
object with
 the specified name.
Uses of
String
in
com.sun.source.doctree
Fields in
com.sun.source.doctree
declared as
String
Modifier and Type
Field
Description
final
String
DocTree.Kind.
tagName
The name of the tag, if any, associated with this kind of node.
Methods in
com.sun.source.doctree
that return
String
Modifier and Type
Method
Description
String
CommentTree.
getBody
()
Returns the text of the comment.
String
EscapeTree.
getBody
()
Returns the text.
String
TextTree.
getBody
()
Returns the text.
String
ReferenceTree.
getSignature
()
Returns the signature of the Java language element being referenced,
 as found in
@see
and similar nodes.
String
BlockTagTree.
getTagName
()
Returns the name of the tag.
String
InlineTagTree.
getTagName
()
Returns the name of the tag.
String
DocTypeTree.
getText
()
Returns the text of the doctype declaration.
Methods in
com.sun.source.doctree
with parameters of type
String
Modifier and Type
Method
Description
static
AttributeTree.ValueKind
AttributeTree.ValueKind.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
DocTree.Kind
DocTree.Kind.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Uses of
String
in
com.sun.source.tree
Methods in
com.sun.source.tree
that return types with arguments of type
String
Modifier and Type
Method
Description
List
<
String
>
StringTemplateTree.
getFragments
()
Returns string fragments.
Methods in
com.sun.source.tree
with parameters of type
String
Modifier and Type
Method
Description
static
CaseTree.CaseKind
CaseTree.CaseKind.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
LambdaExpressionTree.BodyKind
LambdaExpressionTree.BodyKind.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
MemberReferenceTree.ReferenceMode
MemberReferenceTree.ReferenceMode.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
ModuleTree.ModuleKind
ModuleTree.ModuleKind.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
Tree.Kind
Tree.Kind.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Uses of
String
in
com.sun.source.util
Methods in
com.sun.source.util
that return
String
Modifier and Type
Method
Description
abstract
String
DocTrees.
getCharacters
(
EntityTree
tree)
Returns a string containing the characters for the entity in a given entity tree,
 or
null
if the tree does not represent a valid series of characters.
abstract
String
Trees.
getDocComment
(
TreePath
path)
Returns the doc comment, if any, for the
Tree
node identified by a given
TreePath
.
String
Plugin.
getName
()
Returns the user-friendly name of this plug-in.
Methods in
com.sun.source.util
with parameters of type
String
Modifier and Type
Method
Description
abstract
DocCommentTree
DocTrees.
getDocCommentTree
(
Element
e,
String
relativePath)
Returns the doc comment tree of the given file whose path is
 specified relative to the given element.
void
Plugin.
init
(
JavacTask
task,
String
... args)
Initializes the plug-in for a given compilation task.
CommentTree
DocTreeFactory.
newCommentTree
(
String
text)
Creates a new
CommentTree
, to represent an HTML comment.
DocTypeTree
DocTreeFactory.
newDocTypeTree
(
String
text)
Creates a new
DocTypeTree
, to represent a
DOCTYPE
HTML declaration.
ErroneousTree
DocTreeFactory.
newErroneousTree
(
String
text,
Diagnostic
<
JavaFileObject
> diag)
Creates a new
ErroneousTree
object, to represent some unparseable input.
ReferenceTree
DocTreeFactory.
newReferenceTree
(
String
signature)
Creates a new
ReferenceTree
object, to represent a reference to an API element.
TextTree
DocTreeFactory.
newTextTree
(
String
text)
Creates a new
TextTree
object, to represent some plain text.
static
TaskEvent.Kind
TaskEvent.Kind.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Uses of
String
in
com.sun.tools.attach
Methods in
com.sun.tools.attach
that return
String
Modifier and Type
Method
Description
String
VirtualMachineDescriptor.
displayName
()
Return the
display name
component of this descriptor.
final
String
VirtualMachine.
id
()
Returns the identifier for this Java virtual machine.
String
VirtualMachineDescriptor.
id
()
Return the identifier component of this descriptor.
abstract
String
VirtualMachine.
startLocalManagementAgent
()
Starts the local JMX management agent in the target virtual machine.
String
VirtualMachine.
toString
()
Returns the string representation of the
VirtualMachine
.
String
VirtualMachineDescriptor.
toString
()
Returns the string representation of the
VirtualMachineDescriptor
.
Methods in
com.sun.tools.attach
with parameters of type
String
Modifier and Type
Method
Description
static
VirtualMachine
VirtualMachine.
attach
(
String
id)
Attaches to a Java virtual machine.
void
VirtualMachine.
loadAgent
(
String
agent)
Loads an agent.
abstract void
VirtualMachine.
loadAgent
(
String
agent,
String
options)
Loads an agent.
void
VirtualMachine.
loadAgentLibrary
(
String
agentLibrary)
Loads an agent library.
abstract void
VirtualMachine.
loadAgentLibrary
(
String
agentLibrary,
String
options)
Loads an agent library.
void
VirtualMachine.
loadAgentPath
(
String
agentPath)
Load a native agent library by full pathname.
abstract void
VirtualMachine.
loadAgentPath
(
String
agentPath,
String
options)
Load a native agent library by full pathname.
Constructors in
com.sun.tools.attach
with parameters of type
String
Modifier
Constructor
Description
AgentInitializationException
(
String
s)
Constructs an
AgentInitializationException
with
 the specified detail message.
AgentInitializationException
(
String
s,
 int returnValue)
Constructs an
AgentInitializationException
with
 the specified detail message and the return value from the
 execution of the agent's
Agent_OnAttach
function.
AgentLoadException
(
String
s)
Constructs an
AgentLoadException
with
 the specified detail message.
AttachNotSupportedException
(
String
s)
Constructs an
AttachNotSupportedException
with
 the specified detail message.
AttachOperationFailedException
(
String
message)
Constructs an
AttachOperationFailedException
with
 the specified detail message.
AttachPermission
(
String
name)
Constructs a new AttachPermission object.
AttachPermission
(
String
name,
String
actions)
Constructs a new AttachPermission object.
protected
VirtualMachine
(
AttachProvider
provider,
String
id)
Initializes a new instance of this class.
VirtualMachineDescriptor
(
AttachProvider
provider,
String
id)
Creates a virtual machine descriptor from the given components.
VirtualMachineDescriptor
(
AttachProvider
provider,
String
id,
String
displayName)
Creates a virtual machine descriptor from the given components.
Uses of
String
in
com.sun.tools.attach.spi
Methods in
com.sun.tools.attach.spi
that return
String
Modifier and Type
Method
Description
abstract
String
AttachProvider.
name
()
Return this provider's name.
abstract
String
AttachProvider.
type
()
Return this provider's type.
Methods in
com.sun.tools.attach.spi
with parameters of type
String
Modifier and Type
Method
Description
abstract
VirtualMachine
AttachProvider.
attachVirtualMachine
(
String
id)
Attaches to a Java virtual machine.
Uses of
String
in
com.sun.tools.javac
Methods in
com.sun.tools.javac
with parameters of type
String
Modifier and Type
Method
Description
static int
Main.
compile
(
String
[] args)
Programmatic interface to the Java Programming Language
 compiler, javac.
static int
Main.
compile
(
String
[] args,
PrintWriter
out)
Programmatic interface to the Java Programming Language
 compiler, javac.
static void
Main.
main
(
String
[] args)
Main entry point for the launcher.
Uses of
String
in
com.sun.tools.jconsole
Fields in
com.sun.tools.jconsole
declared as
String
Modifier and Type
Field
Description
static final
String
JConsoleContext.
CONNECTION_STATE_PROPERTY
The
ConnectionState
bound property name.
Methods in
com.sun.tools.jconsole
that return types with arguments of type
String
Modifier and Type
Method
Description
abstract
Map
<
String
,
JPanel
>
JConsolePlugin.
getTabs
()
Returns the tabs to be added in JConsole window.
Methods in
com.sun.tools.jconsole
with parameters of type
String
Modifier and Type
Method
Description
static
JConsoleContext.ConnectionState
JConsoleContext.ConnectionState.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Uses of
String
in
java.applet
Methods in
java.applet
that return
String
Modifier and Type
Method
Description
String
Applet.
getAppletInfo
()
Deprecated, for removal: This API element is subject to removal in a future version.
Returns information about this applet.
String
Applet.
getParameter
(
String
name)
Deprecated, for removal: This API element is subject to removal in a future version.
Returns the value of the named parameter in the HTML tag.
String
AppletStub.
getParameter
(
String
name)
Deprecated, for removal: This API element is subject to removal in a future version.
Returns the value of the named parameter in the HTML tag.
String
[][]
Applet.
getParameterInfo
()
Deprecated, for removal: This API element is subject to removal in a future version.
Returns information about the parameters that are understood by this
 applet.
Methods in
java.applet
that return types with arguments of type
String
Modifier and Type
Method
Description
Iterator
<
String
>
AppletContext.
getStreamKeys
()
Deprecated, for removal: This API element is subject to removal in a future version.
Finds all the keys of the streams in this applet context.
Methods in
java.applet
with parameters of type
String
Modifier and Type
Method
Description
Applet
AppletContext.
getApplet
(
String
name)
Deprecated, for removal: This API element is subject to removal in a future version.
Finds and returns the applet in the document represented by this applet
 context with the given name.
AudioClip
Applet.
getAudioClip
(
URL
url,
String
name)
Deprecated, for removal: This API element is subject to removal in a future version.
Returns the
AudioClip
object specified by the
URL
and
name
arguments.
Image
Applet.
getImage
(
URL
url,
String
name)
Deprecated, for removal: This API element is subject to removal in a future version.
Returns an
Image
object that can then be painted on the screen.
String
Applet.
getParameter
(
String
name)
Deprecated, for removal: This API element is subject to removal in a future version.
Returns the value of the named parameter in the HTML tag.
String
AppletStub.
getParameter
(
String
name)
Deprecated, for removal: This API element is subject to removal in a future version.
Returns the value of the named parameter in the HTML tag.
InputStream
AppletContext.
getStream
(
String
key)
Deprecated, for removal: This API element is subject to removal in a future version.
Returns the stream to which specified key is associated within this
 applet context.
void
Applet.
play
(
URL
url,
String
name)
Deprecated, for removal: This API element is subject to removal in a future version.
Plays the audio clip given the
URL
and a specifier that is
 relative to it.
void
AppletContext.
setStream
(
String
key,
InputStream
stream)
Deprecated, for removal: This API element is subject to removal in a future version.
Associates the specified stream with the specified key in this applet
 context.
void
AppletContext.
showDocument
(
URL
url,
String
target)
Deprecated, for removal: This API element is subject to removal in a future version.
Requests that the browser or applet viewer show the Web page indicated by
 the
url
argument.
void
Applet.
showStatus
(
String
msg)
Deprecated, for removal: This API element is subject to removal in a future version.
Requests that the argument string be displayed in the "status window".
void
AppletContext.
showStatus
(
String
status)
Deprecated, for removal: This API element is subject to removal in a future version.
Requests that the argument string be displayed in the "status window".
Uses of
String
in
java.awt
Fields in
java.awt
declared as
String
Modifier and Type
Field
Description
static final
String
BorderLayout.
AFTER_LAST_LINE
Synonym for PAGE_END.
static final
String
BorderLayout.
AFTER_LINE_ENDS
Synonym for LINE_END.
static final
String
BorderLayout.
BEFORE_FIRST_LINE
Synonym for PAGE_START.
static final
String
BorderLayout.
BEFORE_LINE_BEGINS
Synonym for LINE_START.
static final
String
BorderLayout.
CENTER
The center layout constraint (middle of container).
static final
String
Font.
DIALOG
A String constant for the canonical family name of the
 logical font "Dialog".
static final
String
Font.
DIALOG_INPUT
A String constant for the canonical family name of the
 logical font "DialogInput".
static final
String
BorderLayout.
EAST
The east layout constraint (right side of container).
static final
String
BorderLayout.
LINE_END
The component goes at the end of the line direction for the
 layout.
static final
String
BorderLayout.
LINE_START
The component goes at the beginning of the line direction for the
 layout.
static final
String
Font.
MONOSPACED
A String constant for the canonical family name of the
 logical font "Monospaced".
protected
String
Cursor.
name
The user-visible name of the cursor.
protected
String
Font.
name
The logical name of this
Font
, as passed to the
 constructor.
static final
String
BorderLayout.
NORTH
The north layout constraint (top of container).
static final
String
BorderLayout.
PAGE_END
The component comes after the last line of the layout's content.
static final
String
BorderLayout.
PAGE_START
The component comes before the first line of the layout's content.
static final
String
Font.
SANS_SERIF
A String constant for the canonical family name of the
 logical font "SansSerif".
static final
String
Font.
SERIF
A String constant for the canonical family name of the
 logical font "Serif".
static final
String
BorderLayout.
SOUTH
The south layout constraint (bottom of container).
static final
String
BorderLayout.
WEST
The west layout constraint (left side of container).
Fields in
java.awt
with type parameters of type
String
Modifier and Type
Field
Description
protected final
Map
<
String
,
Object
>
Toolkit.
desktopProperties
The desktop properties.
Methods in
java.awt
that return
String
Modifier and Type
Method
Description
String
Button.AccessibleAWTButton.
getAccessibleActionDescription
(int i)
Return a description of the specified action of the object.
String
Checkbox.AccessibleAWTCheckbox.
getAccessibleActionDescription
(int i)
Return a description of the specified action of the object.
String
CheckboxMenuItem.AccessibleAWTCheckboxMenuItem.
getAccessibleActionDescription
(int i)
Return a description of the specified action of the object.
String
Choice.AccessibleAWTChoice.
getAccessibleActionDescription
(int i)
Returns a description of the specified action of the object.
String
MenuItem.AccessibleAWTMenuItem.
getAccessibleActionDescription
(int i)
Return a description of the specified action of the object.
String
Component.AccessibleAWTComponent.
getAccessibleDescription
()
Gets the accessible description of this object.
String
MenuComponent.AccessibleAWTMenuComponent.
getAccessibleDescription
()
Gets the accessible description of this object.
String
Button.AccessibleAWTButton.
getAccessibleName
()
Get the accessible name of this object.
String
Component.AccessibleAWTComponent.
getAccessibleName
()
Gets the accessible name of this object.
String
Label.AccessibleAWTLabel.
getAccessibleName
()
Get the accessible name of this object.
String
MenuComponent.AccessibleAWTMenuComponent.
getAccessibleName
()
Gets the accessible name of this object.
String
MenuItem.AccessibleAWTMenuItem.
getAccessibleName
()
Get the accessible name of this object.
String
Button.
getActionCommand
()
Returns the command name of the action event fired by this button.
String
MenuItem.
getActionCommand
()
Gets the command name of the action event that is fired
 by this menu item.
String
TrayIcon.
getActionCommand
()
Returns the command name of the action event fired by this tray icon.
String
TextComponent.AccessibleAWTTextComponent.
getAfterIndex
(int part,
 int index)
Returns the String after a given index.
String
TextComponent.AccessibleAWTTextComponent.
getAtIndex
(int part,
 int index)
Returns the String at a given index.
abstract
String
[]
GraphicsEnvironment.
getAvailableFontFamilyNames
()
Returns an array containing the names of all font families in this
GraphicsEnvironment
localized for the default locale,
 as returned by
Locale.getDefault()
.
abstract
String
[]
GraphicsEnvironment.
getAvailableFontFamilyNames
(
Locale
l)
Returns an array containing the names of all font families in this
GraphicsEnvironment
localized for the specified locale.
String
TextComponent.AccessibleAWTTextComponent.
getBeforeIndex
(int part,
 int index)
Returns the String before a given index.
String
FileDialog.
getDirectory
()
Gets the directory of this file dialog.
String
Font.
getFamily
()
Returns the family name of this
Font
.
String
Font.
getFamily
(
Locale
l)
Returns the family name of this
Font
, localized for
 the specified locale.
String
FileDialog.
getFile
()
Gets the selected file of this file dialog.
String
JobAttributes.
getFileName
()
Specifies the file name for the output file for jobs using these
 attributes.
abstract
String
[]
Toolkit.
getFontList
()
Deprecated.
see
GraphicsEnvironment.getAvailableFontFamilyNames()
String
Font.
getFontName
()
Returns the font face name of this
Font
.
String
Font.
getFontName
(
Locale
l)
Returns the font face name of the
Font
, localized
 for the specified locale.
abstract
String
GraphicsDevice.
getIDstring
()
Returns the identification string associated with this
GraphicsDevice
.
String
Choice.
getItem
(int index)
Gets the string at the specified index in this
Choice
menu.
String
List.
getItem
(int index)
Gets the item associated with the specified index.
String
[]
List.
getItems
()
Gets the items in the list.
String
Button.
getLabel
()
Gets the label of this button.
String
Checkbox.
getLabel
()
Gets the label of this check box.
String
MenuItem.
getLabel
()
Gets the label for this menu item.
String
HeadlessException.
getMessage
()
Returns the detail message string of this
HeadlessException
.
String
Component.
getName
()
Gets the name of the component.
String
Cursor.
getName
()
Returns the name of this cursor.
String
Font.
getName
()
Returns the logical name of this
Font
.
String
MenuComponent.
getName
()
Gets the name of the menu component.
String
JobAttributes.
getPrinter
()
Returns the destination printer for jobs using these attributes.
static
String
Toolkit.
getProperty
(
String
key,
String
defaultValue)
Gets a property with the specified key and default.
String
Font.
getPSName
()
Returns the postscript name of this
Font
.
String
Choice.
getSelectedItem
()
Gets a representation of the current choice as a string.
String
List.
getSelectedItem
()
Gets the selected item on this scrolling list.
String
[]
List.
getSelectedItems
()
Gets the selected items on this scrolling list.
String
TextComponent.AccessibleAWTTextComponent.
getSelectedText
()
Returns the portion of the text that is selected.
String
TextComponent.
getSelectedText
()
Returns the selected text from the text that is
 presented by this text component.
String
Label.
getText
()
Gets the text of this label.
String
TextComponent.
getText
()
Returns the text that is presented by this text component.
String
Dialog.
getTitle
()
Gets the title of the dialog.
String
Frame.
getTitle
()
Gets the title of the frame.
String
TrayIcon.
getToolTip
()
Returns the tooltip string associated with this
TrayIcon
.
final
String
Window.
getWarningString
()
Gets the warning string that is displayed with this window.
String
AWTEvent.
paramString
()
Returns a string representing the state of this
Event
.
protected
String
Button.
paramString
()
Returns a string representing the state of this
Button
.
protected
String
Checkbox.
paramString
()
Returns a string representing the state of this
Checkbox
.
String
CheckboxMenuItem.
paramString
()
Returns a string representing the state of this
CheckBoxMenuItem
.
protected
String
Choice.
paramString
()
Returns a string representing the state of this
Choice
menu.
protected
String
Component.
paramString
()
Returns a string representing the state of this component.
protected
String
Container.
paramString
()
Returns a string representing the state of this
Container
.
protected
String
Dialog.
paramString
()
Returns a string representing the state of this dialog.
protected
String
Event.
paramString
()
Deprecated.
NOTE:
The
Event
class is obsolete and is
 available only for backwards compatibility.
protected
String
FileDialog.
paramString
()
Returns a string representing the state of this
FileDialog
window.
protected
String
Frame.
paramString
()
Returns a string representing the state of this
Frame
.
protected
String
Label.
paramString
()
Returns a string representing the state of this
Label
.
protected
String
List.
paramString
()
Returns the parameter string representing the state of this
 scrolling list.
String
Menu.
paramString
()
Returns a string representing the state of this
Menu
.
protected
String
MenuComponent.
paramString
()
Returns a string representing the state of this
MenuComponent
.
String
MenuItem.
paramString
()
Returns a string representing the state of this
MenuItem
.
protected
String
MenuShortcut.
paramString
()
Returns the parameter string representing the state of this
 MenuShortcut.
protected
String
Scrollbar.
paramString
()
Returns a string representing the state of this
Scrollbar
.
String
ScrollPane.
paramString
()
Returns a string representing the state of this
ScrollPane
.
String
ScrollPaneAdjustable.
paramString
()
Returns a string representing the state of this scrollbar.
protected
String
TextArea.
paramString
()
Returns a string representing the state of this
TextArea
.
protected
String
TextComponent.
paramString
()
Returns a string representing the state of this
TextComponent
.
protected
String
TextField.
paramString
()
Returns a string representing the state of this
TextField
.
String
AWTEvent.
toString
()
Returns a String representation of this object.
String
AWTKeyStroke.
toString
()
Returns a string that displays and identifies this object's properties.
String
BorderLayout.
toString
()
Returns a string representation of the state of this border layout.
String
CardLayout.
toString
()
Returns a string representation of the state of this card layout.
String
CheckboxGroup.
toString
()
Returns a string representation of this check box group,
 including the value of its current selection.
String
Color.
toString
()
Returns a string representation of this
Color
.
String
Component.
toString
()
Returns a string representation of this component and its values.
String
Cursor.
toString
()
Returns a string representation of this cursor.
String
Dimension.
toString
()
Returns a string representation of the values of this
Dimension
object's
height
and
width
fields.
String
Event.
toString
()
Deprecated.
NOTE:
The
Event
class is obsolete and is
 available only for backwards compatibility.
String
FlowLayout.
toString
()
Returns a string representation of this
FlowLayout
object and its values.
String
Font.
toString
()
Converts this
Font
object to a
String
representation.
String
FontMetrics.
toString
()
Returns a representation of this
FontMetrics
object's values as a
String
.
String
Graphics.
toString
()
Returns a
String
object representing this
Graphics
object's value.
String
GridBagLayout.
toString
()
Returns a string representation of this grid bag layout's values.
String
GridLayout.
toString
()
Returns the string representation of this grid layout's values.
String
Insets.
toString
()
Returns a string representation of this
Insets
object.
String
JobAttributes.
toString
()
Returns a string representation of this JobAttributes.
String
MenuComponent.
toString
()
Returns a representation of this menu component as a string.
String
MenuShortcut.
toString
()
Returns an internationalized description of the MenuShortcut.
String
PageAttributes.
toString
()
Returns a string representation of this PageAttributes.
String
Point.
toString
()
Returns a string representation of this point and its location
 in the
(x,y)
coordinate space.
String
Rectangle.
toString
()
Returns a
String
representing this
Rectangle
and its values.
String
RenderingHints.
toString
()
Returns a rather long string representation of the hashmap
 which contains the mappings of keys to values for this
RenderingHints
object.
String
Robot.
toString
()
Returns a string representation of this Robot.
String
ScrollPaneAdjustable.
toString
()
Returns a string representation of this scrollbar and its values.
String
SystemColor.
toString
()
Returns a string representation of this
Color
's values.
Methods in
java.awt
with parameters of type
String
Modifier and Type
Method
Description
void
Choice.
add
(
String
item)
Adds an item to this
Choice
menu.
Component
Container.
add
(
String
name,
Component
comp)
Adds the specified component to this container.
void
List.
add
(
String
item)
Adds the specified item to the end of scrolling list.
void
List.
add
(
String
item,
 int index)
Adds the specified item to the scrolling list
 at the position indicated by the index.
void
Menu.
add
(
String
label)
Adds an item with the specified label to this menu.
void
Choice.
addItem
(
String
item)
Obsolete as of Java 2 platform v1.1.
void
List.
addItem
(
String
item)
Deprecated.
replaced by
add(String)
.
void
List.
addItem
(
String
item,
 int index)
Deprecated.
replaced by
add(String, int)
.
void
BorderLayout.
addLayoutComponent
(
String
name,
Component
comp)
Deprecated.
replaced by
addLayoutComponent(Component, Object)
.
void
CardLayout.
addLayoutComponent
(
String
name,
Component
comp)
Deprecated.
replaced by
addLayoutComponent(Component, Object)
.
void
FlowLayout.
addLayoutComponent
(
String
name,
Component
comp)
Adds the specified component to the layout.
void
GridBagLayout.
addLayoutComponent
(
String
name,
Component
comp)
Has no effect, since this layout manager does not use a per-component string.
void
GridLayout.
addLayoutComponent
(
String
name,
Component
comp)
Adds the specified component with the specified name to the layout.
void
LayoutManager.
addLayoutComponent
(
String
name,
Component
comp)
If the layout manager uses a per-component string,
 adds the component
comp
to the layout,
 associating it
 with the string specified by
name
.
void
Component.
addPropertyChangeListener
(
String
propertyName,
PropertyChangeListener
listener)
Adds a PropertyChangeListener to the listener list for a specific
 property.
void
Container.
addPropertyChangeListener
(
String
propertyName,
PropertyChangeListener
listener)
Adds a PropertyChangeListener to the listener list for a specific
 property.
void
KeyboardFocusManager.
addPropertyChangeListener
(
String
propertyName,
PropertyChangeListener
listener)
Adds a PropertyChangeListener to the listener list for a specific
 property.
void
SystemTray.
addPropertyChangeListener
(
String
propertyName,
PropertyChangeListener
listener)
Adds a
PropertyChangeListener
to the list of listeners for the
 specific property.
void
Toolkit.
addPropertyChangeListener
(
String
name,
PropertyChangeListener
pcl)
Adds the specified property change listener for the named desktop
 property.
void
Window.
addPropertyChangeListener
(
String
propertyName,
PropertyChangeListener
listener)
Adds a PropertyChangeListener to the listener list for a specific
 property.
void
KeyboardFocusManager.
addVetoableChangeListener
(
String
propertyName,
VetoableChangeListener
listener)
Adds a VetoableChangeListener to the listener list for a specific
 property.
void
TextArea.
append
(
String
str)
Appends the given text to the text area's current text.
void
TextArea.
appendText
(
String
str)
Deprecated.
As of JDK version 1.1,
 replaced by
append(String)
.
void
Window.
applyResourceBundle
(
String
rbName)
Deprecated.
As of J2SE 1.4, replaced by
Component.applyComponentOrientation
.
int
Font.
canDisplayUpTo
(
String
str)
Indicates whether or not this
Font
can display a
 specified
String
.
Cursor
Toolkit.
createCustomCursor
(
Image
cursor,
Point
hotSpot,
String
name)
Creates a new custom cursor object.
GlyphVector
Font.
createGlyphVector
(
FontRenderContext
frc,
String
str)
Creates a
GlyphVector
by
 mapping characters to glyphs one-to-one based on the
 Unicode cmap in this
Font
.
abstract
Image
Toolkit.
createImage
(
String
filename)
Returns an image which gets pixel data from the specified file.
static
Color
Color.
decode
(
String
nm)
Converts a
String
to an integer and returns the
 specified opaque
Color
.
static
Font
Font.
decode
(
String
str)
Returns the
Font
that the
str
argument describes.
void
TrayIcon.
displayMessage
(
String
caption,
String
text,
TrayIcon.MessageType
messageType)
Displays a popup message near the tray icon.
abstract void
Graphics.
drawString
(
String
str,
 int x,
 int y)
Draws the text given by the specified string, using this
 graphics context's current font and color.
abstract void
Graphics2D.
drawString
(
String
str,
 float x,
 float y)
Renders the text specified by the specified
String
,
 using the current text attribute state in the
Graphics2D
context.
abstract void
Graphics2D.
drawString
(
String
str,
 int x,
 int y)
Renders the text of the specified
String
, using the
 current text attribute state in the
Graphics2D
context.
protected void
Component.
firePropertyChange
(
String
propertyName,
 boolean oldValue,
 boolean newValue)
Support for reporting bound property changes for boolean properties.
void
Component.
firePropertyChange
(
String
propertyName,
 byte oldValue,
 byte newValue)
Reports a bound property change.
void
Component.
firePropertyChange
(
String
propertyName,
 char oldValue,
 char newValue)
Reports a bound property change.
void
Component.
firePropertyChange
(
String
propertyName,
 double oldValue,
 double newValue)
Reports a bound property change.
void
Component.
firePropertyChange
(
String
propertyName,
 float oldValue,
 float newValue)
Reports a bound property change.
protected void
Component.
firePropertyChange
(
String
propertyName,
 int oldValue,
 int newValue)
Support for reporting bound property changes for integer properties.
void
Component.
firePropertyChange
(
String
propertyName,
 long oldValue,
 long newValue)
Reports a bound property change.
void
Component.
firePropertyChange
(
String
propertyName,
 short oldValue,
 short newValue)
Reports a bound property change.
protected void
Component.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Support for reporting bound property changes for Object properties.
protected void
KeyboardFocusManager.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Fires a PropertyChangeEvent in response to a change in a bound property.
protected void
KeyboardFocusManager.
fireVetoableChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Fires a PropertyChangeEvent in response to a change in a vetoable
 property.
static
AWTKeyStroke
AWTKeyStroke.
getAWTKeyStroke
(
String
s)
Parses a string and returns an
AWTKeyStroke
.
static
Color
Color.
getColor
(
String
nm)
Finds a color in the system properties.
static
Color
Color.
getColor
(
String
nm,
 int v)
Finds a color in the system properties.
static
Color
Color.
getColor
(
String
nm,
Color
v)
Finds a color in the system properties.
final
Object
Toolkit.
getDesktopProperty
(
String
propertyName)
Obtains a value for the specified desktop property.
static
Font
Font.
getFont
(
String
nm)
Returns a
Font
object from the system properties list.
static
Font
Font.
getFont
(
String
nm,
Font
font)
Gets the specified
Font
from the system properties
 list.
abstract
Image
Toolkit.
getImage
(
String
filename)
Returns an image which gets pixel data from the specified file,
 whose format can be either GIF, JPEG or PNG.
LineMetrics
Font.
getLineMetrics
(
String
str,
 int beginIndex,
 int limit,
FontRenderContext
frc)
Returns a
LineMetrics
object created with the
 specified arguments.
LineMetrics
Font.
getLineMetrics
(
String
str,
FontRenderContext
frc)
Returns a
LineMetrics
object created with the specified
String
and
FontRenderContext
.
LineMetrics
FontMetrics.
getLineMetrics
(
String
str,
 int beginIndex,
 int limit,
Graphics
context)
Returns the
LineMetrics
object for the specified
String
in the specified
Graphics
context.
LineMetrics
FontMetrics.
getLineMetrics
(
String
str,
Graphics
context)
Returns the
LineMetrics
object for the specified
String
in the specified
Graphics
context.
PrintJob
Toolkit.
getPrintJob
(
Frame
frame,
String
jobtitle,
JobAttributes
jobAttributes,
PageAttributes
pageAttributes)
Gets a
PrintJob
object which is the result of initiating
 a print operation on the toolkit's platform.
abstract
PrintJob
Toolkit.
getPrintJob
(
Frame
frame,
String
jobtitle,
Properties
props)
Gets a
PrintJob
object which is the result of initiating
 a print operation on the toolkit's platform.
abstract
Object
Image.
getProperty
(
String
name,
ImageObserver
observer)
Gets a property of this image by name.
static
String
Toolkit.
getProperty
(
String
key,
String
defaultValue)
Gets a property with the specified key and default.
PropertyChangeListener
[]
Component.
getPropertyChangeListeners
(
String
propertyName)
Returns an array of all the listeners which have been associated
 with the named property.
PropertyChangeListener
[]
KeyboardFocusManager.
getPropertyChangeListeners
(
String
propertyName)
Returns an array of all the
PropertyChangeListener
s
 associated with the named property.
PropertyChangeListener
[]
SystemTray.
getPropertyChangeListeners
(
String
propertyName)
Returns an array of all the listeners that have been associated
 with the named property.
PropertyChangeListener
[]
Toolkit.
getPropertyChangeListeners
(
String
propertyName)
Returns an array of all property change listeners
 associated with the specified name of a desktop property.
Rectangle2D
Font.
getStringBounds
(
String
str,
 int beginIndex,
 int limit,
FontRenderContext
frc)
Returns the logical bounds of the specified
String
in
 the specified
FontRenderContext
.
Rectangle2D
Font.
getStringBounds
(
String
str,
FontRenderContext
frc)
Returns the logical bounds of the specified
String
in
 the specified
FontRenderContext
.
Rectangle2D
FontMetrics.
getStringBounds
(
String
str,
 int beginIndex,
 int limit,
Graphics
context)
Returns the bounds of the specified
String
in the
 specified
Graphics
context.
Rectangle2D
FontMetrics.
getStringBounds
(
String
str,
Graphics
context)
Returns the bounds of the specified
String
in the
 specified
Graphics
context.
static
Cursor
Cursor.
getSystemCustomCursor
(
String
name)
Returns a system-specific custom cursor object matching the
 specified name.
VetoableChangeListener
[]
KeyboardFocusManager.
getVetoableChangeListeners
(
String
propertyName)
Returns an array of all the
VetoableChangeListener
s
 associated with the named property.
void
Choice.
insert
(
String
item,
 int index)
Inserts the item into this choice at the specified position.
void
Menu.
insert
(
String
label,
 int index)
Inserts a menu item with the specified label into this menu
 at the specified position.
void
TextArea.
insert
(
String
str,
 int pos)
Inserts the specified text at the specified position
 in this text area.
void
TextArea.
insertText
(
String
str,
 int pos)
Deprecated.
As of JDK version 1.1,
 replaced by
insert(String, int)
.
protected
Object
Toolkit.
lazilyLoadDesktopProperty
(
String
name)
An opportunity to lazily evaluate desktop property values.
void
Choice.
remove
(
String
item)
Removes the first occurrence of
item
from the
Choice
menu.
void
List.
remove
(
String
item)
Removes the first occurrence of an item from the list.
void
Component.
removePropertyChangeListener
(
String
propertyName,
PropertyChangeListener
listener)
Removes a
PropertyChangeListener
from the listener
 list for a specific property.
void
KeyboardFocusManager.
removePropertyChangeListener
(
String
propertyName,
PropertyChangeListener
listener)
Removes a PropertyChangeListener from the listener list for a specific
 property.
void
SystemTray.
removePropertyChangeListener
(
String
propertyName,
PropertyChangeListener
listener)
Removes a
PropertyChangeListener
from the listener list
 for a specific property.
void
Toolkit.
removePropertyChangeListener
(
String
name,
PropertyChangeListener
pcl)
Removes the specified property change listener for the named
 desktop property.
void
KeyboardFocusManager.
removeVetoableChangeListener
(
String
propertyName,
VetoableChangeListener
listener)
Removes a VetoableChangeListener from the listener list for a specific
 property.
void
List.
replaceItem
(
String
newValue,
 int index)
Replaces the item at the specified index in the scrolling list
 with the new string.
void
TextArea.
replaceRange
(
String
str,
 int start,
 int end)
Replaces text between the indicated start and end positions
 with the specified replacement text.
void
TextArea.
replaceText
(
String
str,
 int start,
 int end)
Deprecated.
As of JDK version 1.1,
 replaced by
replaceRange(String, int, int)
.
protected static void
AWTEventMulticaster.
save
(
ObjectOutputStream
s,
String
k,
EventListener
l)
Saves a Serializable listener chain to a serialization stream.
protected void
AWTEventMulticaster.
saveInternal
(
ObjectOutputStream
s,
String
k)
Serialization support.
void
Choice.
select
(
String
str)
Sets the selected item in this
Choice
menu
 to be the item whose name is equal to the specified string.
void
Button.
setActionCommand
(
String
command)
Sets the command name for the action event fired
 by this button.
void
MenuItem.
setActionCommand
(
String
command)
Sets the command name of the action event that is fired
 by this menu item.
void
TrayIcon.
setActionCommand
(
String
command)
Sets the command name for the action event fired by this tray
 icon.
protected final void
Toolkit.
setDesktopProperty
(
String
name,
Object
newValue)
Sets the named desktop property to the specified value and fires a
 property change event to notify any listeners that the value has changed.
void
FileDialog.
setDirectory
(
String
dir)
Sets the directory of this file dialog window to be the
 specified directory.
void
FileDialog.
setFile
(
String
file)
Sets the selected file for this file dialog window to be the
 specified file.
void
JobAttributes.
setFileName
(
String
fileName)
Specifies the file name for the output file for jobs using these
 attributes.
void
Taskbar.
setIconBadge
(
String
badge)
Affixes a small system-provided badge to this application's icon.
void
Button.
setLabel
(
String
label)
Sets the button's label to be the specified string.
void
Checkbox.
setLabel
(
String
label)
Sets this check box's label to be the string argument.
void
MenuItem.
setLabel
(
String
label)
Sets the label for this menu item to the specified label.
void
Component.
setName
(
String
name)
Sets the name of the component to the specified string.
void
MenuComponent.
setName
(
String
name)
Sets the name of the component to the specified string.
void
JobAttributes.
setPrinter
(
String
printer)
Specifies the destination printer for jobs using these attributes.
void
Label.
setText
(
String
text)
Sets the text for this label to the specified text.
void
TextComponent.
setText
(
String
t)
Sets the text that is presented by this
 text component to be the specified text.
void
TextField.
setText
(
String
t)
Sets the text that is presented by this
 text component to be the specified text.
void
Dialog.
setTitle
(
String
title)
Sets the title of the Dialog.
void
FileDialog.
setTitle
(
String
title)
Sets the title of the Dialog.
void
Frame.
setTitle
(
String
title)
Sets the title for this frame to the specified string.
void
TrayIcon.
setToolTip
(
String
tooltip)
Sets the tooltip string for this
TrayIcon
.
void
CardLayout.
show
(
Container
parent,
String
name)
Flips to the component that was added to this layout with the
 specified
name
, using
addLayoutComponent
.
int
FontMetrics.
stringWidth
(
String
str)
Returns the total advance width for showing the specified
String
in this
Font
.
static
Component.BaselineResizeBehavior
Component.BaselineResizeBehavior.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
Desktop.Action
Desktop.Action.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
Dialog.ModalExclusionType
Dialog.ModalExclusionType.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
Dialog.ModalityType
Dialog.ModalityType.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
GraphicsDevice.WindowTranslucency
GraphicsDevice.WindowTranslucency.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
MultipleGradientPaint.ColorSpaceType
MultipleGradientPaint.ColorSpaceType.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
MultipleGradientPaint.CycleMethod
MultipleGradientPaint.CycleMethod.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
Taskbar.Feature
Taskbar.Feature.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
Taskbar.State
Taskbar.State.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
TrayIcon.MessageType
TrayIcon.MessageType.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
Window.Type
Window.Type.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Constructors in
java.awt
with parameters of type
String
Modifier
Constructor
Description
AWTError
(
String
msg)
Constructs an instance of
AWTError
with the specified
 detail message.
AWTException
(
String
msg)
Constructs an instance of
AWTException
with the
 specified detail message.
AWTPermission
(
String
name)
Creates a new
AWTPermission
with the specified name.
AWTPermission
(
String
name,
String
actions)
Creates a new
AWTPermission
object with the specified name.
Button
(
String
label)
Constructs a button with the specified label.
Checkbox
(
String
label)
Creates a check box with the specified label.
Checkbox
(
String
label,
 boolean state)
Creates a check box with the specified label
 and sets the specified state.
Checkbox
(
String
label,
 boolean state,
CheckboxGroup
group)
Constructs a Checkbox with the specified label, set to the
 specified state, and in the specified check box group.
Checkbox
(
String
label,
CheckboxGroup
group,
 boolean state)
Creates a check box with the specified label, in the specified
 check box group, and set to the specified state.
CheckboxMenuItem
(
String
label)
Create a check box menu item with the specified label.
CheckboxMenuItem
(
String
label,
 boolean state)
Create a check box menu item with the specified label and state.
protected
Cursor
(
String
name)
Creates a new custom cursor object with the specified name.
Dialog
(
Dialog
owner,
String
title)
Constructs an initially invisible, modeless
Dialog
with the specified owner
Dialog
and title.
Dialog
(
Dialog
owner,
String
title,
 boolean modal)
Constructs an initially invisible
Dialog
with the
 specified owner
Dialog
, title, and modality.
Dialog
(
Dialog
owner,
String
title,
 boolean modal,
GraphicsConfiguration
gc)
Constructs an initially invisible
Dialog
with the
 specified owner
Dialog
, title, modality and
GraphicsConfiguration
.
Dialog
(
Frame
owner,
String
title)
Constructs an initially invisible, modeless
Dialog
with
 the specified owner
Frame
and title.
Dialog
(
Frame
owner,
String
title,
 boolean modal)
Constructs an initially invisible
Dialog
with the
 specified owner
Frame
, title and modality.
Dialog
(
Frame
owner,
String
title,
 boolean modal,
GraphicsConfiguration
gc)
Constructs an initially invisible
Dialog
with the specified owner
Frame
, title, modality, and
GraphicsConfiguration
.
Dialog
(
Window
owner,
String
title)
Constructs an initially invisible, modeless
Dialog
with
 the specified owner
Window
and title.
Dialog
(
Window
owner,
String
title,
Dialog.ModalityType
modalityType)
Constructs an initially invisible
Dialog
with the
 specified owner
Window
, title and modality.
Dialog
(
Window
owner,
String
title,
Dialog.ModalityType
modalityType,
GraphicsConfiguration
gc)
Constructs an initially invisible
Dialog
with the
 specified owner
Window
, title, modality and
GraphicsConfiguration
.
FileDialog
(
Dialog
parent,
String
title)
Creates a file dialog window with the specified title for loading
 a file.
FileDialog
(
Dialog
parent,
String
title,
 int mode)
Creates a file dialog window with the specified title for loading
 or saving a file.
FileDialog
(
Frame
parent,
String
title)
Creates a file dialog window with the specified title for loading
 a file.
FileDialog
(
Frame
parent,
String
title,
 int mode)
Creates a file dialog window with the specified title for loading
 or saving a file.
Font
(
String
name,
 int style,
 int size)
Creates a new
Font
from the specified name, style and
 point size.
FontFormatException
(
String
reason)
Report a FontFormatException for the reason specified.
Frame
(
String
title)
Constructs a new, initially invisible
Frame
object
 with the specified title.
Frame
(
String
title,
GraphicsConfiguration
gc)
Constructs a new, initially invisible
Frame
object
 with the specified title and a
GraphicsConfiguration
.
HeadlessException
(
String
msg)
Create a new instance with the specified detailed error message.
IllegalComponentStateException
(
String
s)
Constructs an IllegalComponentStateException with the specified detail
 message.
JobAttributes
(int copies,
JobAttributes.DefaultSelectionType
defaultSelection,
JobAttributes.DestinationType
destination,
JobAttributes.DialogType
dialog,
String
fileName,
 int maxPage,
 int minPage,
JobAttributes.MultipleDocumentHandlingType
multipleDocumentHandling,
 int[][] pageRanges,
String
printer,
JobAttributes.SidesType
sides)
Constructs a
JobAttributes
instance with the
 specified values for every attribute.
Label
(
String
text)
Constructs a new label with the specified string of text,
 left justified.
Label
(
String
text,
 int alignment)
Constructs a new label that presents the specified string of
 text with the specified alignment.
Menu
(
String
label)
Constructs a new menu with the specified label.
Menu
(
String
label,
 boolean tearOff)
Constructs a new menu with the specified label,
 indicating whether the menu can be torn off.
MenuItem
(
String
label)
Constructs a new MenuItem with the specified label
 and no keyboard shortcut.
MenuItem
(
String
label,
MenuShortcut
s)
Create a menu item with an associated keyboard shortcut.
PopupMenu
(
String
label)
Creates a new popup menu with the specified name.
TextArea
(
String
text)
Constructs a new text area with the specified text.
TextArea
(
String
text,
 int rows,
 int columns)
Constructs a new text area with the specified text,
 and with the specified number of rows and columns.
TextArea
(
String
text,
 int rows,
 int columns,
 int scrollbars)
Constructs a new text area with the specified text,
 and with the rows, columns, and scroll bar visibility
 as specified.
TextField
(
String
text)
Constructs a new text field initialized with the specified text.
TextField
(
String
text,
 int columns)
Constructs a new text field initialized with the specified text
 to be displayed, and wide enough to hold the specified
 number of columns.
TrayIcon
(
Image
image,
String
tooltip)
Creates a
TrayIcon
with the specified image and
 tooltip text.
TrayIcon
(
Image
image,
String
tooltip,
PopupMenu
popup)
Creates a
TrayIcon
with the specified image,
 tooltip and popup menu.
Uses of
String
in
java.awt.color
Methods in
java.awt.color
that return
String
Modifier and Type
Method
Description
String
ColorSpace.
getName
(int component)
Returns the name of the component given the component index.
Methods in
java.awt.color
with parameters of type
String
Modifier and Type
Method
Description
static
ICC_Profile
ICC_Profile.
getInstance
(
String
fileName)
Constructs an
ICC_Profile
corresponding to the data in a file.
void
ICC_Profile.
write
(
String
fileName)
Write this
ICC_Profile
to a file.
Constructors in
java.awt.color
with parameters of type
String
Modifier
Constructor
Description
CMMException
(
String
s)
Constructs a
CMMException
with the specified detail message.
ProfileDataException
(
String
s)
Constructs a
ProfileDataException
with the specified detail
 message.
Uses of
String
in
java.awt.datatransfer
Fields in
java.awt.datatransfer
declared as
String
Modifier and Type
Field
Description
static final
String
DataFlavor.
javaJVMLocalObjectMimeType
To transfer a reference to an arbitrary Java object reference that has no
 associated MIME Content-type, across a
Transferable
interface
 WITHIN THE SAME JVM, a
DataFlavor
with this type/subtype is used,
 with a
representationClass
equal to the type of the
 class/interface being passed across the
Transferable
.
static final
String
DataFlavor.
javaRemoteObjectMimeType
In order to pass a live link to a Remote object via a Drag and Drop
ACTION_LINK
operation a Mime Content Type of
 application/x-java-remote-object should be used, where the representation
 class of the
DataFlavor
represents the type of the
Remote
interface to be transferred.
static final
String
DataFlavor.
javaSerializedObjectMimeType
A MIME Content-Type of application/x-java-serialized-object represents a
 graph of Java object(s) that have been made persistent.
Methods in
java.awt.datatransfer
that return
String
Modifier and Type
Method
Description
static
String
SystemFlavorMap.
decodeJavaMIMEType
(
String
nat)
Decodes a
String
native for use as a Java MIME type.
static
String
SystemFlavorMap.
encodeDataFlavor
(
DataFlavor
flav)
Encodes a
DataFlavor
for use as a
String
native.
static
String
SystemFlavorMap.
encodeJavaMIMEType
(
String
mimeType)
Encodes a MIME type for use as a
String
native.
final
String
DataFlavor.
getDefaultRepresentationClassAsString
()
Returns the name of the default representation class.
String
DataFlavor.
getHumanPresentableName
()
Returns the human presentable name for the data format that this
DataFlavor
represents.
String
DataFlavor.
getMimeType
()
Returns the MIME type string for this
DataFlavor
.
String
Clipboard.
getName
()
Returns the name of this clipboard object.
String
DataFlavor.
getParameter
(
String
paramName)
Returns the human presentable name for this
DataFlavor
if
paramName
equals "humanPresentableName".
String
DataFlavor.
getPrimaryType
()
Returns the primary MIME type for this
DataFlavor
.
String
DataFlavor.
getSubType
()
Returns the sub MIME type of this
DataFlavor
.
protected
String
DataFlavor.
normalizeMimeType
(
String
mimeType)
Deprecated.
This method is never invoked by this implementation from 1.1
             onwards
protected
String
DataFlavor.
normalizeMimeTypeParameter
(
String
parameterName,
String
parameterValue)
Deprecated.
This method is never invoked by this implementation from 1.1
             onwards
String
DataFlavor.
toString
()
String representation of this
DataFlavor
and its parameters.
Methods in
java.awt.datatransfer
that return types with arguments of type
String
Modifier and Type
Method
Description
Map
<
String
,
DataFlavor
>
FlavorMap.
getFlavorsForNatives
(
String
[] natives)
Returns a
Map
of the specified
String
natives to their
 corresponding
DataFlavor
.
Map
<
String
,
DataFlavor
>
SystemFlavorMap.
getFlavorsForNatives
(
String
[] natives)
Returns a
Map
of the specified
String
natives to their
 most preferred
DataFlavor
.
List
<
String
>
FlavorTable.
getNativesForFlavor
(
DataFlavor
flav)
Returns a
List
of
String
natives to which the specified
DataFlavor
corresponds.
List
<
String
>
SystemFlavorMap.
getNativesForFlavor
(
DataFlavor
flav)
Returns a
List
of
String
natives to which the specified
DataFlavor
can be translated by the data transfer subsystem.
Map
<
DataFlavor
,
String
>
FlavorMap.
getNativesForFlavors
(
DataFlavor
[] flavors)
Returns a
Map
of the specified
DataFlavor
s to their
 corresponding
String
native.
Map
<
DataFlavor
,
String
>
SystemFlavorMap.
getNativesForFlavors
(
DataFlavor
[] flavors)
Returns a
Map
of the specified
DataFlavor
s to their most
 preferred
String
native.
Methods in
java.awt.datatransfer
with parameters of type
String
Modifier and Type
Method
Description
void
SystemFlavorMap.
addFlavorForUnencodedNative
(
String
nat,
DataFlavor
flav)
Adds a mapping from a single
String
native to a single
DataFlavor
.
void
SystemFlavorMap.
addUnencodedNativeForFlavor
(
DataFlavor
flav,
String
nat)
Adds a mapping from the specified
DataFlavor
(and all
DataFlavor
s equal to the specified
DataFlavor
) to the
 specified
String
native.
static
DataFlavor
SystemFlavorMap.
decodeDataFlavor
(
String
nat)
Decodes a
String
native for use as a
DataFlavor
.
static
String
SystemFlavorMap.
decodeJavaMIMEType
(
String
nat)
Decodes a
String
native for use as a Java MIME type.
static
String
SystemFlavorMap.
encodeJavaMIMEType
(
String
mimeType)
Encodes a MIME type for use as a
String
native.
boolean
DataFlavor.
equals
(
String
s)
Deprecated.
As inconsistent with
hashCode()
contract, use
DataFlavor.isMimeTypeEqual(String)
instead.
List
<
DataFlavor
>
FlavorTable.
getFlavorsForNative
(
String
nat)
Returns a
List
of
DataFlavor
s to which the specified
String
corresponds.
List
<
DataFlavor
>
SystemFlavorMap.
getFlavorsForNative
(
String
nat)
Returns a
List
of
DataFlavor
s to which the specified
String
native can be translated by the data transfer subsystem.
Map
<
String
,
DataFlavor
>
FlavorMap.
getFlavorsForNatives
(
String
[] natives)
Returns a
Map
of the specified
String
natives to their
 corresponding
DataFlavor
.
Map
<
String
,
DataFlavor
>
SystemFlavorMap.
getFlavorsForNatives
(
String
[] natives)
Returns a
Map
of the specified
String
natives to their
 most preferred
DataFlavor
.
String
DataFlavor.
getParameter
(
String
paramName)
Returns the human presentable name for this
DataFlavor
if
paramName
equals "humanPresentableName".
static boolean
SystemFlavorMap.
isJavaMIMEType
(
String
str)
Returns whether the specified
String
is an encoded Java MIME
 type.
boolean
DataFlavor.
isMimeTypeEqual
(
String
mimeType)
Returns whether the string representation of the MIME type passed in is
 equivalent to the MIME type of this
DataFlavor
.
protected
String
DataFlavor.
normalizeMimeType
(
String
mimeType)
Deprecated.
This method is never invoked by this implementation from 1.1
             onwards
protected
String
DataFlavor.
normalizeMimeTypeParameter
(
String
parameterName,
String
parameterValue)
Deprecated.
This method is never invoked by this implementation from 1.1
             onwards
void
SystemFlavorMap.
setFlavorsForNative
(
String
nat,
DataFlavor
[] flavors)
Discards the current mappings for the specified
String
native,
 and creates new mappings to the specified
DataFlavor
s.
void
DataFlavor.
setHumanPresentableName
(
String
humanPresentableName)
Sets the human presentable name for the data format that this
DataFlavor
represents.
void
SystemFlavorMap.
setNativesForFlavor
(
DataFlavor
flav,
String
[] natives)
Discards the current mappings for the specified
DataFlavor
and
 all
DataFlavor
s equal to the specified
DataFlavor
, and
 creates new mappings to the specified
String
natives.
protected static final
Class
<?>
DataFlavor.
tryToLoadClass
(
String
className,
ClassLoader
fallback)
Tries to load a class from: the bootstrap loader, the system loader, the
 context loader (if one is present) and finally the loader specified.
Constructors in
java.awt.datatransfer
with parameters of type
String
Modifier
Constructor
Description
Clipboard
(
String
name)
Creates a clipboard object.
DataFlavor
(
Class
<?> representationClass,
String
humanPresentableName)
Constructs a
DataFlavor
that represents a Java class.
DataFlavor
(
String
mimeType)
Constructs a
DataFlavor
from a
mimeType
string.
DataFlavor
(
String
mimeType,
String
humanPresentableName)
Constructs a
DataFlavor
that represents a
MimeType
.
DataFlavor
(
String
mimeType,
String
humanPresentableName,
ClassLoader
classLoader)
Constructs a
DataFlavor
that represents a
MimeType
.
MimeTypeParseException
(
String
s)
Constructs a MimeTypeParseException with the specified detail message.
StringSelection
(
String
data)
Creates a
Transferable
capable of transferring the specified
String
.
Uses of
String
in
java.awt.desktop
Methods in
java.awt.desktop
that return
String
Modifier and Type
Method
Description
String
OpenFilesEvent.
getSearchTerm
()
Gets the search term.
Methods in
java.awt.desktop
with parameters of type
String
Modifier and Type
Method
Description
static
QuitStrategy
QuitStrategy.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
UserSessionEvent.Reason
UserSessionEvent.Reason.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Constructors in
java.awt.desktop
with parameters of type
String
Modifier
Constructor
Description
OpenFilesEvent
(
List
<
File
> files,
String
searchTerm)
Constructs an
OpenFilesEvent
.
Uses of
String
in
java.awt.dnd
Constructors in
java.awt.dnd
with parameters of type
String
Modifier
Constructor
Description
InvalidDnDOperationException
(
String
msg)
Create an Exception with its own descriptive message
Uses of
String
in
java.awt.event
Methods in
java.awt.event
that return
String
Modifier and Type
Method
Description
String
ActionEvent.
getActionCommand
()
Returns the command string associated with this action.
static
String
KeyEvent.
getKeyModifiersText
(int modifiers)
Deprecated.
It is recommended that extended modifier keys and
InputEvent.getModifiersExText(int)
be used instead
static
String
KeyEvent.
getKeyText
(int keyCode)
Returns a String describing the keyCode, such as "HOME", "F1" or "A".
static
String
InputEvent.
getModifiersExText
(int modifiers)
Returns a String describing the extended modifier keys and
 mouse buttons, such as "Shift", "Button1", or "Ctrl+Shift".
static
String
MouseEvent.
getMouseModifiersText
(int modifiers)
Returns a
String
instance describing the modifier keys and
 mouse buttons that were down during the event, such as "Shift",
 or "Ctrl+Shift".
String
ActionEvent.
paramString
()
Returns a parameter string identifying this action event.
String
ComponentEvent.
paramString
()
Returns a parameter string identifying this event.
String
ContainerEvent.
paramString
()
Returns a parameter string identifying this event.
String
FocusEvent.
paramString
()
Returns a parameter string identifying this event.
String
HierarchyEvent.
paramString
()
Returns a parameter string identifying this event.
String
InputMethodEvent.
paramString
()
Returns a parameter string identifying this event.
String
InvocationEvent.
paramString
()
Returns a parameter string identifying this event.
String
ItemEvent.
paramString
()
Returns a parameter string identifying this item event.
String
KeyEvent.
paramString
()
Returns a parameter string identifying this event.
String
MouseEvent.
paramString
()
Returns a parameter string identifying this event.
String
MouseWheelEvent.
paramString
()
Returns a parameter string identifying this event.
String
TextEvent.
paramString
()
Returns a parameter string identifying this text event.
String
WindowEvent.
paramString
()
Returns a parameter string identifying this event.
Methods in
java.awt.event
with parameters of type
String
Modifier and Type
Method
Description
static
FocusEvent.Cause
FocusEvent.Cause.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Constructors in
java.awt.event
with parameters of type
String
Modifier
Constructor
Description
ActionEvent
(
Object
source,
 int id,
String
command)
Constructs an
ActionEvent
object.
ActionEvent
(
Object
source,
 int id,
String
command,
 int modifiers)
Constructs an
ActionEvent
object with modifier keys.
ActionEvent
(
Object
source,
 int id,
String
command,
 long when,
 int modifiers)
Constructs an
ActionEvent
object with the specified
 modifier keys and timestamp.
Uses of
String
in
java.awt.font
Methods in
java.awt.font
that return
String
Modifier and Type
Method
Description
String
[]
MultipleMaster.
getDesignAxisNames
()
Returns the name for each design axis.
String
NumericShaper.
toString
()
Returns a
String
that describes this shaper.
String
TextHitInfo.
toString
()
Returns a
String
representing the hit for debugging
 use only.
String
TextLayout.
toString
()
Returns debugging information for this
TextLayout
.
Methods in
java.awt.font
with parameters of type
String
Modifier and Type
Method
Description
byte[]
OpenType.
getFontTable
(
String
strSfntTag)
Returns the table as an array of bytes for a specified tag.
byte[]
OpenType.
getFontTable
(
String
strSfntTag,
 int offset,
 int count)
Returns a subset of the table as an array of bytes
 for a specified tag.
int
OpenType.
getFontTableSize
(
String
strSfntTag)
Returns the size of the table for a specified tag.
static
NumericShaper.Range
NumericShaper.Range.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Constructors in
java.awt.font
with parameters of type
String
Modifier
Constructor
Description
protected
TextAttribute
(
String
name)
Constructs a
TextAttribute
with the specified name.
TextLayout
(
String
string,
Font
font,
FontRenderContext
frc)
Constructs a
TextLayout
from a
String
and a
Font
.
TextLayout
(
String
string,
Map
<? extends
AttributedCharacterIterator.Attribute
,
?> attributes,
FontRenderContext
frc)
Constructs a
TextLayout
from a
String
and an attribute set.
Uses of
String
in
java.awt.geom
Methods in
java.awt.geom
that return
String
Modifier and Type
Method
Description
String
AffineTransform.
toString
()
Returns a
String
that represents the value of this
Object
.
String
Point2D.Double.
toString
()
Returns a
String
that represents the value
 of this
Point2D
.
String
Point2D.Float.
toString
()
Returns a
String
that represents the value
 of this
Point2D
.
String
Rectangle2D.Double.
toString
()
Returns the
String
representation of this
Rectangle2D
.
String
Rectangle2D.Float.
toString
()
Returns the
String
representation of this
Rectangle2D
.
Constructors in
java.awt.geom
with parameters of type
String
Modifier
Constructor
Description
IllegalPathStateException
(
String
s)
Constructs an
IllegalPathStateException
with the
 specified detail message.
NoninvertibleTransformException
(
String
s)
Constructs an instance of
NoninvertibleTransformException
with the specified detail message.
Uses of
String
in
java.awt.im.spi
Methods in
java.awt.im.spi
that return
String
Modifier and Type
Method
Description
String
InputMethodDescriptor.
getInputMethodDisplayName
(
Locale
inputLocale,
Locale
displayLanguage)
Returns the user-visible name of the corresponding
 input method for the given input locale in the language in which
 the name will be displayed.
Methods in
java.awt.im.spi
with parameters of type
String
Modifier and Type
Method
Description
JFrame
InputMethodContext.
createInputMethodJFrame
(
String
title,
 boolean attachToInputContext)
Creates a top-level Swing JFrame for use by the input method.
Window
InputMethodContext.
createInputMethodWindow
(
String
title,
 boolean attachToInputContext)
Creates a top-level window for use by the input method.
Uses of
String
in
java.awt.image
Methods in
java.awt.image
that return
String
Modifier and Type
Method
Description
String
[]
BufferedImage.
getPropertyNames
()
Returns an array of names recognized by
getProperty(String)
or
null
, if no property names are recognized.
String
[]
RenderedImage.
getPropertyNames
()
Returns an array of names recognized by
getProperty(String)
or
null
, if no property names are recognized.
String
BufferedImage.
toString
()
Returns a
String
representation of this
BufferedImage
object and its values.
String
ColorModel.
toString
()
Returns the
String
representation of the contents of
 this
ColorModel
object.
String
DirectColorModel.
toString
()
Returns a
String
that represents this
DirectColorModel
.
String
IndexColorModel.
toString
()
Returns the
String
representation of the contents of
 this
ColorModel
object.
Methods in
java.awt.image
with parameters of type
String
Modifier and Type
Method
Description
Object
AbstractMultiResolutionImage.
getProperty
(
String
name,
ImageObserver
observer)
This method simply delegates to the same method on the base image and
 it is equivalent to:
getBaseImage().getProperty(name, observer)
.
Object
BufferedImage.
getProperty
(
String
name)
Returns a property of the image by name.
Object
BufferedImage.
getProperty
(
String
name,
ImageObserver
observer)
Returns a property of the image by name.
Object
RenderedImage.
getProperty
(
String
name)
Gets a property from the property set of this image.
Constructors in
java.awt.image
with parameters of type
String
Modifier
Constructor
Description
ImagingOpException
(
String
s)
Constructs an
ImagingOpException
object with the
 specified message.
RasterFormatException
(
String
s)
Constructs a new
RasterFormatException
with the
 specified message.
Uses of
String
in
java.awt.image.renderable
Fields in
java.awt.image.renderable
declared as
String
Modifier and Type
Field
Description
static final
String
RenderableImage.
HINTS_OBSERVED
String constant that can be used to identify a property on
 a RenderedImage obtained via the createRendering or
 createScaledRendering methods.
Methods in
java.awt.image.renderable
that return
String
Modifier and Type
Method
Description
String
[]
ContextualRenderedImageFactory.
getPropertyNames
()
Returns a list of names recognized by getProperty.
String
[]
RenderableImage.
getPropertyNames
()
Returns a list of names recognized by getProperty.
String
[]
RenderableImageOp.
getPropertyNames
()
Return a list of names recognized by getProperty.
Methods in
java.awt.image.renderable
with parameters of type
String
Modifier and Type
Method
Description
Object
ContextualRenderedImageFactory.
getProperty
(
ParameterBlock
paramBlock,
String
name)
Gets the appropriate instance of the property specified by the name
 parameter.
Object
RenderableImage.
getProperty
(
String
name)
Gets a property from the property set of this image.
Object
RenderableImageOp.
getProperty
(
String
name)
Gets a property from the property set of this image.
Uses of
String
in
java.awt.print
Methods in
java.awt.print
that return
String
Modifier and Type
Method
Description
abstract
String
PrinterJob.
getJobName
()
Gets the name of the document to be printed.
abstract
String
PrinterJob.
getUserName
()
Gets the name of the printing user.
Methods in
java.awt.print
with parameters of type
String
Modifier and Type
Method
Description
static
StreamPrintServiceFactory
[]
PrinterJob.
lookupStreamPrintServices
(
String
mimeType)
A convenience method which locates factories for stream print
 services which can image 2D graphics.
abstract void
PrinterJob.
setJobName
(
String
jobName)
Sets the name of the document to be printed.
Constructors in
java.awt.print
with parameters of type
String
Modifier
Constructor
Description
PrinterAbortException
(
String
msg)
Constructs a new
PrinterAbortException
with
 the specified detail message.
PrinterException
(
String
msg)
Constructs a new
PrinterException
object
 with the specified detail message.
Uses of
String
in
java.beans
Fields in
java.beans
declared as
String
Modifier and Type
Field
Description
static final
String
DesignMode.
PROPERTYNAME
The standard value of the propertyName as fired from a BeanContext or
 other source of PropertyChangeEvents.
Methods in
java.beans
that return
String
Modifier and Type
Method
Description
static
String
Introspector.
decapitalize
(
String
name)
Utility method to take a string and convert it to normal Java variable
 name capitalization.
String
EventHandler.
getAction
()
Returns the name of the target's writable property
 that this event handler will set,
 or the name of the method that this event handler
 will invoke on the target.
String
PropertyEditor.
getAsText
()
Gets the property value as text.
String
PropertyEditorSupport.
getAsText
()
Gets the property value as a string suitable for presentation
 to a human to edit.
static
String
[]
Introspector.
getBeanInfoSearchPath
()
Gets the list of package names that will be used for
          finding BeanInfo classes.
String
FeatureDescriptor.
getDisplayName
()
Gets the localized display name of this feature.
static
String
[]
PropertyEditorManager.
getEditorSearchPath
()
Gets the package names that will be searched for property editors.
String
EventHandler.
getEventPropertyName
()
Returns the property of the event that should be
 used in the action applied to the target.
String
PropertyEditor.
getJavaInitializationString
()
Returns a fragment of Java code that can be used to set a property
 to match the editors current state.
String
PropertyEditorSupport.
getJavaInitializationString
()
This method is intended for use when generating Java code to set
 the value of the property.
String
EventHandler.
getListenerMethodName
()
Returns the name of the method that will trigger the action.
String
Statement.
getMethodName
()
Returns the name of the method to invoke.
String
FeatureDescriptor.
getName
()
Gets the programmatic name of this feature.
String
PropertyChangeEvent.
getPropertyName
()
Gets the programmatic name of the property that was changed.
String
PropertyChangeListenerProxy.
getPropertyName
()
Returns the name of the named property associated with the listener.
String
VetoableChangeListenerProxy.
getPropertyName
()
Returns the name of the named property associated with the listener.
String
FeatureDescriptor.
getShortDescription
()
Gets the short description of this feature.
String
[]
PropertyEditor.
getTags
()
If the property value must be one of a set of known tagged values,
 then this method should return an array of the tags.
String
[]
PropertyEditorSupport.
getTags
()
If the property value must be one of a set of known tagged values,
 then this method should return an array of the tag values.
String
Expression.
toString
()
Prints the value of this expression using a Java-style syntax.
String
FeatureDescriptor.
toString
()
Returns a string representation of the object.
String
PropertyChangeEvent.
toString
()
Returns a string representation of the object.
String
Statement.
toString
()
Prints the value of this statement using a Java-style syntax.
Methods in
java.beans
that return types with arguments of type
String
Modifier and Type
Method
Description
Enumeration
<
String
>
FeatureDescriptor.
attributeNames
()
Gets an enumeration of the locale-independent names of this
 feature.
Methods in
java.beans
with parameters of type
String
Modifier and Type
Method
Description
void
PropertyChangeSupport.
addPropertyChangeListener
(
String
propertyName,
PropertyChangeListener
listener)
Add a PropertyChangeListener for a specific property.
void
VetoableChangeSupport.
addVetoableChangeListener
(
String
propertyName,
VetoableChangeListener
listener)
Add a VetoableChangeListener for a specific property.
static <T> T
EventHandler.
create
(
Class
<T> listenerInterface,
Object
target,
String
action)
Creates an implementation of
listenerInterface
in which
all
of the methods in the listener interface apply
 the handler's
action
to the
target
.
static <T> T
EventHandler.
create
(
Class
<T> listenerInterface,
Object
target,
String
action,
String
eventPropertyName)
/**
 Creates an implementation of
listenerInterface
in which
all
of the methods pass the value of the event
 expression,
eventPropertyName
, to the final method in the
 statement,
action
, which is applied to the
target
.
static <T> T
EventHandler.
create
(
Class
<T> listenerInterface,
Object
target,
String
action,
String
eventPropertyName,
String
listenerMethodName)
Creates an implementation of
listenerInterface
in which
 the method named
listenerMethodName
passes the value of the event expression,
eventPropertyName
,
 to the final method in the statement,
action
, which
 is applied to the
target
.
static
String
Introspector.
decapitalize
(
String
name)
Utility method to take a string and convert it to normal Java variable
 name capitalization.
void
PropertyChangeSupport.
fireIndexedPropertyChange
(
String
propertyName,
 int index,
 boolean oldValue,
 boolean newValue)
Reports a boolean bound indexed property update to listeners
 that have been registered to track updates of
 all properties or a property with the specified name.
void
PropertyChangeSupport.
fireIndexedPropertyChange
(
String
propertyName,
 int index,
 int oldValue,
 int newValue)
Reports an integer bound indexed property update to listeners
 that have been registered to track updates of
 all properties or a property with the specified name.
void
PropertyChangeSupport.
fireIndexedPropertyChange
(
String
propertyName,
 int index,
Object
oldValue,
Object
newValue)
Reports a bound indexed property update to listeners
 that have been registered to track updates of
 all properties or a property with the specified name.
void
PropertyChangeSupport.
firePropertyChange
(
String
propertyName,
 boolean oldValue,
 boolean newValue)
Reports a boolean bound property update to listeners
 that have been registered to track updates of
 all properties or a property with the specified name.
void
PropertyChangeSupport.
firePropertyChange
(
String
propertyName,
 int oldValue,
 int newValue)
Reports an integer bound property update to listeners
 that have been registered to track updates of
 all properties or a property with the specified name.
void
PropertyChangeSupport.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Reports a bound property update to listeners
 that have been registered to track updates of
 all properties or a property with the specified name.
void
VetoableChangeSupport.
fireVetoableChange
(
String
propertyName,
 boolean oldValue,
 boolean newValue)
Reports a boolean constrained property update to listeners
 that have been registered to track updates of
 all properties or a property with the specified name.
void
VetoableChangeSupport.
fireVetoableChange
(
String
propertyName,
 int oldValue,
 int newValue)
Reports an integer constrained property update to listeners
 that have been registered to track updates of
 all properties or a property with the specified name.
void
VetoableChangeSupport.
fireVetoableChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Reports a constrained property update to listeners
 that have been registered to track updates of
 all properties or a property with the specified name.
PropertyChangeListener
[]
PropertyChangeSupport.
getPropertyChangeListeners
(
String
propertyName)
Returns an array of all the listeners which have been associated
 with the named property.
Object
FeatureDescriptor.
getValue
(
String
attributeName)
Retrieve a named attribute with this feature.
VetoableChangeListener
[]
VetoableChangeSupport.
getVetoableChangeListeners
(
String
propertyName)
Returns an array of all the listeners which have been associated
 with the named property.
boolean
PropertyChangeSupport.
hasListeners
(
String
propertyName)
Check if there are any listeners for a specific property, including
 those registered on all properties.
boolean
VetoableChangeSupport.
hasListeners
(
String
propertyName)
Check if there are any listeners for a specific property, including
 those registered on all properties.
static
Object
Beans.
instantiate
(
ClassLoader
cls,
String
beanName)
Instantiate a JavaBean.
static
Object
Beans.
instantiate
(
ClassLoader
cls,
String
beanName,
BeanContext
beanContext)
Instantiate a JavaBean.
static
Object
Beans.
instantiate
(
ClassLoader
cls,
String
beanName,
BeanContext
beanContext,
AppletInitializer
initializer)
Deprecated, for removal: This API element is subject to removal in a future version.
It is recommended to use
Beans.instantiate(ClassLoader, String, BeanContext)
,
 because the Applet API is deprecated.
Image
SimpleBeanInfo.
loadImage
(
String
resourceName)
This is a utility method to help in loading icon images.
void
PropertyChangeSupport.
removePropertyChangeListener
(
String
propertyName,
PropertyChangeListener
listener)
Remove a PropertyChangeListener for a specific property.
void
VetoableChangeSupport.
removeVetoableChangeListener
(
String
propertyName,
VetoableChangeListener
listener)
Remove a VetoableChangeListener for a specific property.
void
PropertyEditor.
setAsText
(
String
text)
Set the property value by parsing a given String.
void
PropertyEditorSupport.
setAsText
(
String
text)
Sets the property value by parsing a given String.
static void
Introspector.
setBeanInfoSearchPath
(
String
[] path)
Change the list of package names that will be used for
          finding BeanInfo classes.
void
FeatureDescriptor.
setDisplayName
(
String
displayName)
Sets the localized display name of this feature.
static void
PropertyEditorManager.
setEditorSearchPath
(
String
[] path)
Change the list of package names that will be used for
          finding property editors.
void
FeatureDescriptor.
setName
(
String
name)
Sets the programmatic name of this feature.
void
FeatureDescriptor.
setShortDescription
(
String
text)
You can associate a short descriptive string with a feature.
void
FeatureDescriptor.
setValue
(
String
attributeName,
Object
value)
Associate a named attribute with this feature.
Constructors in
java.beans
with parameters of type
String
Modifier
Constructor
Description
DefaultPersistenceDelegate
(
String
[] constructorPropertyNames)
Creates a default persistence delegate for a class with a
 constructor whose arguments are the values of the property
 names as specified by
constructorPropertyNames
.
EventHandler
(
Object
target,
String
action,
String
eventPropertyName,
String
listenerMethodName)
Creates a new
EventHandler
object;
 you generally use one of the
create
methods
 instead of invoking this constructor directly.
EventSetDescriptor
(
Class
<?> sourceClass,
String
eventSetName,
Class
<?> listenerType,
String
listenerMethodName)
Creates an
EventSetDescriptor
assuming that you are
 following the most simple standard design pattern where a named
 event "fred" is (1) delivered as a call on the single method of
 interface FredListener, (2) has a single argument of type FredEvent,
 and (3) where the FredListener may be registered with a call on an
 addFredListener method of the source component and removed with a
 call on a removeFredListener method.
EventSetDescriptor
(
Class
<?> sourceClass,
String
eventSetName,
Class
<?> listenerType,
String
[] listenerMethodNames,
String
addListenerMethodName,
String
removeListenerMethodName)
Creates an
EventSetDescriptor
from scratch using
 string names.
EventSetDescriptor
(
Class
<?> sourceClass,
String
eventSetName,
Class
<?> listenerType,
String
[] listenerMethodNames,
String
addListenerMethodName,
String
removeListenerMethodName,
String
getListenerMethodName)
This constructor creates an EventSetDescriptor from scratch using
 string names.
EventSetDescriptor
(
String
eventSetName,
Class
<?> listenerType,
MethodDescriptor
[] listenerMethodDescriptors,
Method
addListenerMethod,
Method
removeListenerMethod)
Creates an
EventSetDescriptor
from scratch using
java.lang.reflect.MethodDescriptor
and
java.lang.Class
objects.
EventSetDescriptor
(
String
eventSetName,
Class
<?> listenerType,
Method
[] listenerMethods,
Method
addListenerMethod,
Method
removeListenerMethod)
Creates an
EventSetDescriptor
from scratch using
java.lang.reflect.Method
and
java.lang.Class
objects.
EventSetDescriptor
(
String
eventSetName,
Class
<?> listenerType,
Method
[] listenerMethods,
Method
addListenerMethod,
Method
removeListenerMethod,
Method
getListenerMethod)
This constructor creates an EventSetDescriptor from scratch using
 java.lang.reflect.Method and java.lang.Class objects.
Expression
(
Object
value,
Object
target,
String
methodName,
Object
[] arguments)
Creates a new
Expression
object with the specified value
 for the specified target object to invoke the  method
 specified by the name and by the array of arguments.
Expression
(
Object
target,
String
methodName,
Object
[] arguments)
Creates a new
Expression
object
 for the specified target object to invoke the method
 specified by the name and by the array of arguments.
IndexedPropertyChangeEvent
(
Object
source,
String
propertyName,
Object
oldValue,
Object
newValue,
 int index)
Constructs a new
IndexedPropertyChangeEvent
object.
IndexedPropertyDescriptor
(
String
propertyName,
Class
<?> beanClass)
This constructor constructs an IndexedPropertyDescriptor for a property
 that follows the standard Java conventions by having getFoo and setFoo
 accessor methods, for both indexed access and array access.
IndexedPropertyDescriptor
(
String
propertyName,
Class
<?> beanClass,
String
readMethodName,
String
writeMethodName,
String
indexedReadMethodName,
String
indexedWriteMethodName)
This constructor takes the name of a simple property, and method
 names for reading and writing the property, both indexed
 and non-indexed.
IndexedPropertyDescriptor
(
String
propertyName,
Method
readMethod,
Method
writeMethod,
Method
indexedReadMethod,
Method
indexedWriteMethod)
This constructor takes the name of a simple property, and Method
 objects for reading and writing the property.
IntrospectionException
(
String
mess)
Constructs an
IntrospectionException
with a
 detailed message.
PropertyChangeEvent
(
Object
source,
String
propertyName,
Object
oldValue,
Object
newValue)
Constructs a new
PropertyChangeEvent
.
PropertyChangeListenerProxy
(
String
propertyName,
PropertyChangeListener
listener)
Constructor which binds the
PropertyChangeListener
to a specific property.
PropertyDescriptor
(
String
propertyName,
Class
<?> beanClass)
Constructs a PropertyDescriptor for a property that follows
 the standard Java convention by having getFoo and setFoo
 accessor methods.
PropertyDescriptor
(
String
propertyName,
Class
<?> beanClass,
String
readMethodName,
String
writeMethodName)
This constructor takes the name of a simple property, and method
 names for reading and writing the property.
PropertyDescriptor
(
String
propertyName,
Method
readMethod,
Method
writeMethod)
This constructor takes the name of a simple property, and Method
 objects for reading and writing the property.
PropertyVetoException
(
String
mess,
PropertyChangeEvent
evt)
Constructs a
PropertyVetoException
with a
 detailed message.
Statement
(
Object
target,
String
methodName,
Object
[] arguments)
Creates a new
Statement
object
 for the specified target object to invoke the method
 specified by the name and by the array of arguments.
VetoableChangeListenerProxy
(
String
propertyName,
VetoableChangeListener
listener)
Constructor which binds the
VetoableChangeListener
to a specific property.
XMLEncoder
(
OutputStream
out,
String
charset,
 boolean declaration,
 int indentation)
Creates a new XML encoder to write out
JavaBeans
to the stream
out
using the given
charset
starting from the given
indentation
.
Uses of
String
in
java.beans.beancontext
Methods in
java.beans.beancontext
with parameters of type
String
Modifier and Type
Method
Description
void
BeanContextChild.
addPropertyChangeListener
(
String
name,
PropertyChangeListener
pcl)
Adds a
PropertyChangeListener
to this
BeanContextChild
in order to receive a
PropertyChangeEvent
whenever the specified property has changed.
void
BeanContextChildSupport.
addPropertyChangeListener
(
String
name,
PropertyChangeListener
pcl)
Add a PropertyChangeListener for a specific property.
void
BeanContextChild.
addVetoableChangeListener
(
String
name,
VetoableChangeListener
vcl)
Adds a
VetoableChangeListener
to
 this
BeanContextChild
to receive events whenever the specified property changes.
void
BeanContextChildSupport.
addVetoableChangeListener
(
String
name,
VetoableChangeListener
vcl)
Add a VetoableChangeListener for a specific property.
void
BeanContextChildSupport.
firePropertyChange
(
String
name,
Object
oldValue,
Object
newValue)
Report a bound property update to any registered listeners.
void
BeanContextChildSupport.
fireVetoableChange
(
String
name,
Object
oldValue,
Object
newValue)
Report a vetoable property update to any registered listeners.
URL
BeanContext.
getResource
(
String
name,
BeanContextChild
bcc)
Analogous to
java.lang.ClassLoader.getResource()
, this
 method allows a
BeanContext
implementation to interpose
 behavior between the child
Component
and underlying
ClassLoader
.
URL
BeanContextSupport.
getResource
(
String
name,
BeanContextChild
bcc)
InputStream
BeanContext.
getResourceAsStream
(
String
name,
BeanContextChild
bcc)
Analogous to
java.lang.ClassLoader.getResourceAsStream()
,
 this method allows a
BeanContext
implementation
 to interpose behavior between the child
Component
and underlying
ClassLoader
.
InputStream
BeanContextSupport.
getResourceAsStream
(
String
name,
BeanContextChild
bcc)
Object
BeanContext.
instantiateChild
(
String
beanName)
Instantiate the javaBean named as a
 child of this
BeanContext
.
Object
BeanContextSupport.
instantiateChild
(
String
beanName)
The instantiateChild method is a convenience hook
 in BeanContext to simplify
 the task of instantiating a Bean, nested,
 into a
BeanContext
.
void
BeanContextChild.
removePropertyChangeListener
(
String
name,
PropertyChangeListener
pcl)
Removes a
PropertyChangeListener
from this
BeanContextChild
so that it no longer
 receives
PropertyChangeEvents
when the
 specified property is changed.
void
BeanContextChildSupport.
removePropertyChangeListener
(
String
name,
PropertyChangeListener
pcl)
Remove a PropertyChangeListener for a specific property.
void
BeanContextChild.
removeVetoableChangeListener
(
String
name,
VetoableChangeListener
vcl)
Removes a
VetoableChangeListener
from this
BeanContextChild
so that it no longer receives
 events when the specified property changes.
void
BeanContextChildSupport.
removeVetoableChangeListener
(
String
name,
VetoableChangeListener
vcl)
Removes a
VetoableChangeListener
.
Uses of
String
in
java.io
Fields in
java.io
declared as
String
Modifier and Type
Field
Description
protected
String
StringBufferInputStream.
buffer
Deprecated.
The string from which bytes are read.
String
InvalidClassException.
classname
Name of the invalid class.
static final
String
File.
pathSeparator
The system-dependent path-separator character, represented as a string
 for convenience.
static final
String
File.
separator
The system-dependent default name-separator character, represented as a
 string for convenience.
String
StreamTokenizer.
sval
If the current token is a word token, this field contains a
 string giving the characters of the word token.
Methods in
java.io
that return
String
Modifier and Type
Method
Description
String
File.
getAbsolutePath
()
Returns the absolute pathname string of this abstract pathname.
String
FilePermission.
getActions
()
Returns the "canonical string representation" of the actions.
String
File.
getCanonicalPath
()
Returns the canonical pathname string of this abstract pathname.
String
InputStreamReader.
getEncoding
()
Returns the name of the character encoding being used by this stream.
String
OutputStreamWriter.
getEncoding
()
Returns the name of the character encoding being used by this stream.
String
InvalidClassException.
getMessage
()
Produce the message and include the classname, if present.
String
WriteAbortedException.
getMessage
()
Produce the message and include the message from the nested
 exception, if there is one.
String
File.
getName
()
Returns the name of the file or directory denoted by this abstract
 pathname.
String
ObjectStreamClass.
getName
()
Returns the name of the class described by this descriptor.
String
ObjectStreamField.
getName
()
Get the name of this field.
String
File.
getParent
()
Returns the pathname string of this abstract pathname's parent, or
null
if this pathname does not name a parent directory.
String
File.
getPath
()
Converts this abstract pathname into a pathname string.
String
ObjectStreamField.
getTypeString
()
Return the JVM type signature.
String
[]
File.
list
()
Returns an array of strings naming the files and directories in the
 directory denoted by this abstract pathname.
String
[]
File.
list
(
FilenameFilter
filter)
Returns an array of strings naming the files and directories in the
 directory denoted by this abstract pathname that satisfy the specified
 filter.
String
BufferedReader.
readLine
()
Reads a line of text.
String
Console.
readLine
()
Reads a single line of text from the console.
String
Console.
readLine
(
String
fmt,
Object
... args)
Provides a formatted prompt, then reads a single line of text from the
 console.
String
DataInput.
readLine
()
Reads the next line of text from the input stream.
final
String
DataInputStream.
readLine
()
Deprecated.
This method does not properly convert bytes to characters.
String
LineNumberReader.
readLine
()
Read a line of text.
String
ObjectInputStream.
readLine
()
Deprecated.
This method does not properly convert bytes to characters.
final
String
RandomAccessFile.
readLine
()
Reads the next line of text from this file.
String
DataInput.
readUTF
()
Reads in a string that has been encoded using a
modified UTF-8
format.
final
String
DataInputStream.
readUTF
()
See the general contract of the
readUTF
method of
DataInput
.
static final
String
DataInputStream.
readUTF
(
DataInput
in)
Reads from the
 stream
in
a representation
 of a Unicode  character string encoded in
modified UTF-8
format;
 this string of characters is then returned as a
String
.
String
ObjectInputStream.
readUTF
()
Reads a String in
modified UTF-8
format.
final
String
RandomAccessFile.
readUTF
()
Reads in a string from this file.
String
ByteArrayOutputStream.
toString
()
Converts the buffer's contents into a string decoding bytes using the
 default charset.
String
ByteArrayOutputStream.
toString
(int hibyte)
Deprecated.
This method does not properly convert bytes into characters.
String
ByteArrayOutputStream.
toString
(
String
charsetName)
Converts the buffer's contents into a string by decoding the bytes using
 the named
charset
.
String
ByteArrayOutputStream.
toString
(
Charset
charset)
Converts the buffer's contents into a string by decoding the bytes using
 the specified
charset
.
String
CharArrayWriter.
toString
()
Converts input data to a string.
String
File.
toString
()
Returns the pathname string of this abstract pathname.
String
ObjectStreamClass.
toString
()
Return a string describing this ObjectStreamClass.
String
ObjectStreamField.
toString
()
Return a string that describes this field.
String
StreamTokenizer.
toString
()
Returns the string representation of the current stream token and
 the line number it occurs on.
String
StringWriter.
toString
()
Return the buffer's current value as a string.
Methods in
java.io
that return types with arguments of type
String
Modifier and Type
Method
Description
Stream
<
String
>
BufferedReader.
lines
()
Returns a
Stream
, the elements of which are lines read from
 this
BufferedReader
.
Methods in
java.io
with parameters of type
String
Modifier and Type
Method
Description
boolean
FilenameFilter.
accept
(
File
dir,
String
name)
Tests if a specified file should be included in a file list.
static
ObjectInputFilter
ObjectInputFilter.Config.
createFilter
(
String
pattern)
Returns an ObjectInputFilter from a string of patterns.
static
File
File.
createTempFile
(
String
prefix,
String
suffix)
Creates an empty file in the default temporary-file directory, using
 the given prefix and suffix to generate its name.
static
File
File.
createTempFile
(
String
prefix,
String
suffix,
File
directory)
Creates a new empty file in the specified directory, using the
 given prefix and suffix strings to generate its name.
abstract boolean
ObjectInputStream.GetField.
defaulted
(
String
name)
Return true if the named field is defaulted and has no value in this
 stream.
Console
Console.
format
(
String
fmt,
Object
... args)
Writes a formatted string to this console's output stream using
 the specified format string and arguments.
PrintStream
PrintStream.
format
(
String
format,
Object
... args)
Writes a formatted string to this output stream using the specified
 format string and arguments.
PrintStream
PrintStream.
format
(
Locale
l,
String
format,
Object
... args)
Writes a formatted string to this output stream using the specified
 format string and arguments.
PrintWriter
PrintWriter.
format
(
String
format,
Object
... args)
Writes a formatted string to this writer using the specified format
 string and arguments.
PrintWriter
PrintWriter.
format
(
Locale
l,
String
format,
Object
... args)
Writes a formatted string to this writer using the specified format
 string and arguments.
abstract boolean
ObjectInputStream.GetField.
get
(
String
name,
 boolean val)
Get the value of the named boolean field from the persistent field.
abstract byte
ObjectInputStream.GetField.
get
(
String
name,
 byte val)
Get the value of the named byte field from the persistent field.
abstract char
ObjectInputStream.GetField.
get
(
String
name,
 char val)
Get the value of the named char field from the persistent field.
abstract double
ObjectInputStream.GetField.
get
(
String
name,
 double val)
Get the value of the named double field from the persistent field.
abstract float
ObjectInputStream.GetField.
get
(
String
name,
 float val)
Get the value of the named float field from the persistent field.
abstract int
ObjectInputStream.GetField.
get
(
String
name,
 int val)
Get the value of the named int field from the persistent field.
abstract long
ObjectInputStream.GetField.
get
(
String
name,
 long val)
Get the value of the named long field from the persistent field.
abstract short
ObjectInputStream.GetField.
get
(
String
name,
 short val)
Get the value of the named short field from the persistent field.
abstract
Object
ObjectInputStream.GetField.
get
(
String
name,
Object
val)
Get the value of the named Object field from the persistent field.
ObjectStreamField
ObjectStreamClass.
getField
(
String
name)
Get the field of this class by name.
void
PrintStream.
print
(
String
s)
Prints a string.
void
PrintWriter.
print
(
String
s)
Prints a string.
Console
Console.
printf
(
String
format,
Object
... args)
A convenience method to write a formatted string to this console's
 output stream using the specified format string and arguments.
PrintStream
PrintStream.
printf
(
String
format,
Object
... args)
A convenience method to write a formatted string to this output stream
 using the specified format string and arguments.
PrintStream
PrintStream.
printf
(
Locale
l,
String
format,
Object
... args)
A convenience method to write a formatted string to this output stream
 using the specified format string and arguments.
PrintWriter
PrintWriter.
printf
(
String
format,
Object
... args)
A convenience method to write a formatted string to this writer using
 the specified format string and arguments.
PrintWriter
PrintWriter.
printf
(
Locale
l,
String
format,
Object
... args)
A convenience method to write a formatted string to this writer using
 the specified format string and arguments.
void
PrintStream.
println
(
String
x)
Prints a String and then terminates the line.
void
PrintWriter.
println
(
String
x)
Prints a String and then terminates the line.
abstract void
ObjectOutputStream.PutField.
put
(
String
name,
 boolean val)
Put the value of the named boolean field into the persistent field.
abstract void
ObjectOutputStream.PutField.
put
(
String
name,
 byte val)
Put the value of the named byte field into the persistent field.
abstract void
ObjectOutputStream.PutField.
put
(
String
name,
 char val)
Put the value of the named char field into the persistent field.
abstract void
ObjectOutputStream.PutField.
put
(
String
name,
 double val)
Put the value of the named double field into the persistent field.
abstract void
ObjectOutputStream.PutField.
put
(
String
name,
 float val)
Put the value of the named float field into the persistent field.
abstract void
ObjectOutputStream.PutField.
put
(
String
name,
 int val)
Put the value of the named int field into the persistent field.
abstract void
ObjectOutputStream.PutField.
put
(
String
name,
 long val)
Put the value of the named long field into the persistent field.
abstract void
ObjectOutputStream.PutField.
put
(
String
name,
 short val)
Put the value of the named short field into the persistent field.
abstract void
ObjectOutputStream.PutField.
put
(
String
name,
Object
val)
Put the value of the named Object field into the persistent field.
String
Console.
readLine
(
String
fmt,
Object
... args)
Provides a formatted prompt, then reads a single line of text from the
 console.
char[]
Console.
readPassword
(
String
fmt,
Object
... args)
Provides a formatted prompt, then reads a password or passphrase from
 the console with echoing disabled.
protected
Class
<?>
ObjectInputStream.
resolveProxyClass
(
String
[] interfaces)
Returns a proxy class that implements the interfaces named in a proxy
 class descriptor; subclasses may implement this method to read custom
 data from the stream along with the descriptors for dynamic proxy
 classes, allowing them to use an alternate loading mechanism for the
 interfaces and the proxy class.
String
ByteArrayOutputStream.
toString
(
String
charsetName)
Converts the buffer's contents into a string by decoding the bytes using
 the named
charset
.
static
ObjectInputFilter.Status
ObjectInputFilter.Status.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
void
BufferedWriter.
write
(
String
s,
 int off,
 int len)
Writes a portion of a String.
void
CharArrayWriter.
write
(
String
str,
 int off,
 int len)
Write a portion of a string to the buffer.
void
FilterWriter.
write
(
String
str,
 int off,
 int len)
Writes a portion of a string.
void
OutputStreamWriter.
write
(
String
str,
 int off,
 int len)
Writes a portion of a string.
void
PrintWriter.
write
(
String
s)
Writes a string.
void
PrintWriter.
write
(
String
s,
 int off,
 int len)
Writes a portion of a string.
void
StringWriter.
write
(
String
str)
Write a string.
void
StringWriter.
write
(
String
str,
 int off,
 int len)
Write a portion of a string.
void
Writer.
write
(
String
str)
Writes a string.
void
Writer.
write
(
String
str,
 int off,
 int len)
Writes a portion of a string.
void
DataOutput.
writeBytes
(
String
s)
Writes a string to the output stream.
final void
DataOutputStream.
writeBytes
(
String
s)
Writes out the string to the underlying output stream as a
 sequence of bytes.
void
ObjectOutputStream.
writeBytes
(
String
str)
Writes a String as a sequence of bytes.
final void
RandomAccessFile.
writeBytes
(
String
s)
Writes the string to the file as a sequence of bytes.
void
DataOutput.
writeChars
(
String
s)
Writes every character in the string
s
,
 to the output stream, in order,
 two bytes per character.
final void
DataOutputStream.
writeChars
(
String
s)
Writes a string to the underlying output stream as a sequence of
 characters.
void
ObjectOutputStream.
writeChars
(
String
str)
Writes a String as a sequence of chars.
final void
RandomAccessFile.
writeChars
(
String
s)
Writes a string to the file as a sequence of characters.
void
DataOutput.
writeUTF
(
String
s)
Writes two bytes of length information
 to the output stream, followed
 by the
modified UTF-8
representation
 of  every character in the string
s
.
final void
DataOutputStream.
writeUTF
(
String
str)
Writes a string to the underlying output stream using
modified UTF-8
encoding in a machine-independent manner.
void
ObjectOutputStream.
writeUTF
(
String
str)
Primitive data write of this String in
modified UTF-8
format.
final void
RandomAccessFile.
writeUTF
(
String
str)
Writes a string to the file using
modified UTF-8
encoding in a machine-independent manner.
Constructors in
java.io
with parameters of type
String
Modifier
Constructor
Description
CharConversionException
(
String
s)
This provides a detailed message.
EOFException
(
String
s)
Constructs an
EOFException
with the specified detail
 message.
File
(
File
parent,
String
child)
Creates a new
File
instance from a parent abstract
 pathname and a child pathname string.
File
(
String
pathname)
Creates a new
File
instance by converting the given
 pathname string into an abstract pathname.
File
(
String
parent,
String
child)
Creates a new
File
instance from a parent pathname string
 and a child pathname string.
FileInputStream
(
String
name)
Creates a
FileInputStream
by
 opening a connection to an actual file,
 the file named by the path name
name
in the file system.
FileNotFoundException
(
String
s)
Constructs a
FileNotFoundException
with the
 specified detail message.
FileOutputStream
(
String
name)
Creates a file output stream to write to the file with the
 specified name.
FileOutputStream
(
String
name,
 boolean append)
Creates a file output stream to write to the file with the specified
 name.
FilePermission
(
String
path,
String
actions)
Creates a new FilePermission object with the specified actions.
FileReader
(
String
fileName)
Creates a new
FileReader
, given the name of the file to read,
 using the
default charset
.
FileReader
(
String
fileName,
Charset
charset)
Creates a new
FileReader
, given the name of the file to read
 and the
charset
.
FileWriter
(
String
fileName)
Constructs a
FileWriter
given a file name, using the
default charset
FileWriter
(
String
fileName,
 boolean append)
Constructs a
FileWriter
given a file name and a boolean indicating
 whether to append the data written, using the
default charset
.
FileWriter
(
String
fileName,
Charset
charset)
Constructs a
FileWriter
given a file name and
charset
.
FileWriter
(
String
fileName,
Charset
charset,
 boolean append)
Constructs a
FileWriter
given a file name,
charset
and a boolean indicating
 whether to append the data written.
InputStreamReader
(
InputStream
in,
String
charsetName)
Creates an InputStreamReader that uses the named charset.
InterruptedIOException
(
String
s)
Constructs an
InterruptedIOException
with the
 specified detail message.
InvalidClassException
(
String
reason)
Report an InvalidClassException for the reason specified.
InvalidClassException
(
String
cname,
String
reason)
Constructs an InvalidClassException object.
InvalidClassException
(
String
cname,
String
reason,
Throwable
cause)
Report an InvalidClassException for the reason and cause specified.
InvalidClassException
(
String
reason,
Throwable
cause)
Report an InvalidClassException for the reason and cause specified.
InvalidObjectException
(
String
reason)
Constructs an
InvalidObjectException
.
InvalidObjectException
(
String
reason,
Throwable
cause)
Constructs an
InvalidObjectException
with the given
 reason and cause.
IOException
(
String
message)
Constructs an
IOException
with the specified detail message.
IOException
(
String
message,
Throwable
cause)
Constructs an
IOException
with the specified detail message
 and cause.
NotActiveException
(
String
reason)
Constructor to create a new NotActiveException with the reason given.
NotSerializableException
(
String
classname)
Constructs a NotSerializableException object with message string.
protected
ObjectStreamException
(
String
message)
Create an ObjectStreamException with the specified argument.
protected
ObjectStreamException
(
String
message,
Throwable
cause)
Create an ObjectStreamException with the specified message and
 cause.
ObjectStreamField
(
String
name,
Class
<?> type)
Create a Serializable field with the specified type.
ObjectStreamField
(
String
name,
Class
<?> type,
 boolean unshared)
Creates an ObjectStreamField representing a serializable field with the
 given name and type.
OutputStreamWriter
(
OutputStream
out,
String
charsetName)
Creates an OutputStreamWriter that uses the named charset.
PrintStream
(
File
file,
String
csn)
Creates a new print stream, without automatic line flushing, with the
 specified file and charset.
PrintStream
(
OutputStream
out,
 boolean autoFlush,
String
encoding)
Creates a new print stream, with the specified OutputStream, line
 flushing, and character encoding.
PrintStream
(
String
fileName)
Creates a new print stream, without automatic line flushing, with the
 specified file name.
PrintStream
(
String
fileName,
String
csn)
Creates a new print stream, without automatic line flushing, with the
 specified file name and charset.
PrintStream
(
String
fileName,
Charset
charset)
Creates a new print stream, without automatic line flushing, with the
 specified file name and charset.
PrintWriter
(
File
file,
String
csn)
Creates a new PrintWriter, without automatic line flushing, with the
 specified file and charset.
PrintWriter
(
String
fileName)
Creates a new PrintWriter, without automatic line flushing, with the
 specified file name.
PrintWriter
(
String
fileName,
String
csn)
Creates a new PrintWriter, without automatic line flushing, with the
 specified file name and charset.
PrintWriter
(
String
fileName,
Charset
charset)
Creates a new PrintWriter, without automatic line flushing, with the
 specified file name and charset.
RandomAccessFile
(
File
file,
String
mode)
Creates a random access file stream to read from, and optionally to
 write to, the file specified by the
File
argument.
RandomAccessFile
(
String
name,
String
mode)
Creates a random access file stream to read from, and optionally
 to write to, a file with the specified name.
SerializablePermission
(
String
name)
Creates a new SerializablePermission with the specified name.
SerializablePermission
(
String
name,
String
actions)
Creates a new SerializablePermission object with the specified name.
StreamCorruptedException
(
String
reason)
Create a StreamCorruptedException and list a reason why thrown.
StringBufferInputStream
(
String
s)
Deprecated.
Creates a string input stream to read data from the specified string.
StringReader
(
String
s)
Creates a new string reader.
SyncFailedException
(
String
desc)
Constructs an SyncFailedException with a detail message.
UncheckedIOException
(
String
message,
IOException
cause)
Constructs an instance of this class.
UnsupportedEncodingException
(
String
s)
Constructs an UnsupportedEncodingException with a detail message.
UTFDataFormatException
(
String
s)
Constructs a
UTFDataFormatException
with the
 specified detail message.
WriteAbortedException
(
String
s,
Exception
ex)
Constructs a WriteAbortedException with a string describing
 the exception and the exception causing the abort.
Uses of
String
in
java.lang
Fields in
java.lang
with type parameters of type
String
Modifier and Type
Field
Description
static final
Comparator
<
String
>
String.
CASE_INSENSITIVE_ORDER
A Comparator that orders
String
objects as by
compareToIgnoreCase
.
static final
StringTemplate.Processor
PREVIEW
<
String
,
RuntimeException
>
StringTemplate.
STR
This
StringTemplate.Processor
PREVIEW
instance is conventionally used for the string interpolation
 of a supplied
StringTemplate
PREVIEW
.
Methods in
java.lang
that return
String
Modifier and Type
Method
Description
static
String
System.
clearProperty
(
String
key)
Removes the system property indicated by the specified key.
String
String.
concat
(
String
str)
Concatenates the specified string to the end of this string.
String
EnumConstantNotPresentException.
constantName
()
Returns the name of the missing enum constant.
static
String
String.
copyValueOf
(char[] data)
Equivalent to
valueOf(char[])
.
static
String
String.
copyValueOf
(char[] data,
 int offset,
 int count)
Equivalent to
valueOf(char[], int, int)
.
String
Class.
descriptorString
()
Returns the descriptor string of the entity (class, interface, array class,
 primitive type, or
void
) represented by this
Class
object.
protected
String
ClassLoader.
findLibrary
(
String
libname)
Returns the absolute path name of a native library.
static
String
String.
format
(
String
format,
Object
... args)
Returns a formatted string using the specified format string and
 arguments.
static
String
String.
format
(
Locale
l,
String
format,
Object
... args)
Returns a formatted string using the specified locale, format string,
 and arguments.
String
String.
formatted
(
Object
... args)
Formats using this string as the format string, and the supplied
 arguments.
String
Class.
getCanonicalName
()
Returns the canonical name of the underlying class as
 defined by
The Java Language Specification
.
String
StackTraceElement.
getClassLoaderName
()
Returns the name of the class loader of the class containing the
 execution point represented by this stack trace element.
String
StackTraceElement.
getClassName
()
Returns the fully qualified name of the class containing the
 execution point represented by this stack trace element.
String
StackWalker.StackFrame.
getClassName
()
Gets the
binary name
of the declaring class of the method represented by this stack frame.
default
String
StackWalker.StackFrame.
getDescriptor
()
Returns the
descriptor
of the method represented by
 this stack frame as defined by
The Java Virtual Machine Specification
.
static
String
System.
getenv
(
String
name)
Gets the value of the specified environment variable.
String
StackTraceElement.
getFileName
()
Returns the name of the source file containing the execution point
 represented by this stack trace element.
String
StackWalker.StackFrame.
getFileName
()
Returns the name of the source file containing the execution point
 represented by this stack frame.
String
Package.
getImplementationTitle
()
Return the title of this package.
String
Package.
getImplementationVendor
()
Returns the vendor that implemented this package,
null
is returned if it is not known.
String
Package.
getImplementationVersion
()
Return the version of this implementation.
String
Throwable.
getLocalizedMessage
()
Creates a localized description of this throwable.
String
NullPointerException.
getMessage
()
Returns the detail message string of this throwable.
String
Throwable.
getMessage
()
Returns the detail message string of this throwable.
String
StackTraceElement.
getMethodName
()
Returns the name of the method containing the execution point
 represented by this stack trace element.
String
StackWalker.StackFrame.
getMethodName
()
Gets the name of the method represented by this stack frame.
String
StackTraceElement.
getModuleName
()
Returns the module name of the module containing the execution point
 represented by this stack trace element.
String
StackTraceElement.
getModuleVersion
()
Returns the module version of the module containing the execution point
 represented by this stack trace element.
static
String
Character.
getName
(int codePoint)
Returns the name of the specified character
codePoint
, or null if the code point is
unassigned
.
String
Class.
getName
()
Returns the  name of the entity (class, interface, array class,
 primitive type, or void) represented by this
Class
object.
String
ClassLoader.
getName
()
Returns the name of this class loader or
null
if
 this class loader is not named.
String
Module.
getName
()
Returns the module name or
null
if this module is an unnamed
 module.
String
Package.
getName
()
Return the name of this package.
String
System.Logger.
getName
()
Returns the name of this logger.
final
String
System.Logger.Level.
getName
()
Returns the name of this level.
final
String
Thread.
getName
()
Returns this thread's name.
final
String
ThreadGroup.
getName
()
Returns the name of this thread group.
String
Class.
getPackageName
()
Returns the fully qualified package name.
static
String
System.
getProperty
(
String
key)
Gets the system property indicated by the specified key.
static
String
System.
getProperty
(
String
key,
String
def)
Gets the system property indicated by the specified key.
String
Class.
getSimpleName
()
Returns the simple name of the underlying class as given in the
 source code.
String
Package.
getSpecificationTitle
()
Return the title of the specification that this package implements.
String
Package.
getSpecificationVendor
()
Return the name of the organization, vendor,
 or company that owns and maintains the specification
 of the classes that implement this package.
String
Package.
getSpecificationVersion
()
Returns the version number of the specification
 that this package implements.
String
Class.
getTypeName
()
Return an informative string for the name of this class or interface.
String
String.
indent
(int n)
Adjusts the indentation of each line of this string based on the value of
n
, and normalizes line termination characters.
String
String.
intern
()
Returns a canonical representation for the string object.
default
String
StringTemplate.
interpolate
()
Returns the string interpolation of the fragments and values for this
StringTemplate
PREVIEW
.
static
String
StringTemplate.
interpolate
(
List
<
String
> fragments,
List
<?> values)
Creates a string that interleaves the elements of values between the
 elements of fragments.
static
String
String.
join
(
CharSequence
delimiter,
CharSequence
... elements)
Returns a new String composed of copies of the
CharSequence elements
joined together with a copy of
 the specified
delimiter
.
static
String
String.
join
(
CharSequence
delimiter,
Iterable
<? extends
CharSequence
> elements)
Returns a new
String
composed of copies of the
CharSequence elements
joined together with a copy of the
 specified
delimiter
.
static
String
System.
lineSeparator
()
Returns the system-dependent line separator string.
static
String
System.
mapLibraryName
(
String
libname)
Maps a library name into a platform-specific string representing
 a native library.
final
String
Enum.
name
()
Returns the name of this enum constant, exactly as declared in its
 enum declaration.
String
String.
repeat
(int count)
Returns a string whose value is the concatenation of this
 string repeated
count
times.
String
String.
replace
(char oldChar,
 char newChar)
Returns a string resulting from replacing all occurrences of
oldChar
in this string with
newChar
.
String
String.
replace
(
CharSequence
target,
CharSequence
replacement)
Replaces each substring of this string that matches the literal target
 sequence with the specified literal replacement sequence.
String
String.
replaceAll
(
String
regex,
String
replacement)
Replaces each substring of this string that matches the given
regular expression
with the
 given replacement.
String
String.
replaceFirst
(
String
regex,
String
replacement)
Replaces the first substring of this string that matches the given
regular expression
with the
 given replacement.
String
String.
resolveConstantDesc
(
MethodHandles.Lookup
lookup)
Resolves this instance as a
ConstantDesc
, the result of which is
 the instance itself.
static
String
System.
setProperty
(
String
key,
String
value)
Sets the system property indicated by the specified key.
String
[]
String.
split
(
String
regex)
Splits this string around matches of the given
regular expression
.
String
[]
String.
split
(
String
regex,
 int limit)
Splits this string around matches of the given
regular expression
.
String
[]
String.
splitWithDelimiters
(
String
regex,
 int limit)
Splits this string around matches of the given regular expression and
 returns both the strings and the matching delimiters.
String
String.
strip
()
Returns a string whose value is this string, with all leading
 and trailing
white space
removed.
String
String.
stripIndent
()
Returns a string whose value is this string, with incidental
white space
removed from
 the beginning and end of every line.
String
String.
stripLeading
()
Returns a string whose value is this string, with all leading
white space
removed.
String
String.
stripTrailing
()
Returns a string whose value is this string, with all trailing
white space
removed.
String
String.
substring
(int beginIndex)
Returns a string that is a substring of this string.
String
String.
substring
(int beginIndex,
 int endIndex)
Returns a string that is a substring of this string.
String
StringBuffer.
substring
(int start)
String
StringBuffer.
substring
(int start,
 int end)
static
String
Integer.
toBinaryString
(int i)
Returns a string representation of the integer argument as an
 unsigned integer in base 2.
static
String
Long.
toBinaryString
(long i)
Returns a string representation of the
long
argument as an unsigned integer in base 2.
String
Class.
toGenericString
()
Returns a string describing this
Class
, including
 information about modifiers and type parameters.
static
String
Double.
toHexString
(double d)
Returns a hexadecimal string representation of the
double
argument.
static
String
Float.
toHexString
(float f)
Returns a hexadecimal string representation of the
float
argument.
static
String
Integer.
toHexString
(int i)
Returns a string representation of the integer argument as an
 unsigned integer in base 16.
static
String
Long.
toHexString
(long i)
Returns a string representation of the
long
argument as an unsigned integer in base 16.
String
String.
toLowerCase
()
Converts all of the characters in this
String
to lower
 case using the rules of the default locale.
String
String.
toLowerCase
(
Locale
locale)
Converts all of the characters in this
String
to lower
 case using the rules of the given
Locale
.
static
String
Integer.
toOctalString
(int i)
Returns a string representation of the integer argument as an
 unsigned integer in base 8.
static
String
Long.
toOctalString
(long i)
Returns a string representation of the
long
argument as an unsigned integer in base 8.
String
Boolean.
toString
()
Returns a
String
object representing this Boolean's
 value.
static
String
Boolean.
toString
(boolean b)
Returns a
String
object representing the specified
 boolean.
String
Byte.
toString
()
Returns a
String
object representing this
Byte
's value.
static
String
Byte.
toString
(byte b)
Returns a new
String
object representing the
 specified
byte
.
final
String
Character.Subset.
toString
()
Returns the name of this subset.
String
Character.
toString
()
Returns a
String
object representing this
Character
's value.
static
String
Character.
toString
(char c)
Returns a
String
object representing the
 specified
char
.
static
String
Character.
toString
(int codePoint)
Returns a
String
object representing the
 specified character (Unicode code point).
String
CharSequence.
toString
()
Returns a string containing the characters in this sequence in the same
 order as this sequence.
String
Class.
toString
()
Converts the object to a string.
String
Double.
toString
()
Returns a string representation of this
Double
object.
static
String
Double.
toString
(double d)
Returns a string representation of the
double
argument.
String
Enum.
toString
()
Returns the name of this enum constant, as contained in the
 declaration.
String
Float.
toString
()
Returns a string representation of this
Float
object.
static
String
Float.
toString
(float f)
Returns a string representation of the
float
argument.
String
Integer.
toString
()
Returns a
String
object representing this
Integer
's value.
static
String
Integer.
toString
(int i)
Returns a
String
object representing the
 specified integer.
static
String
Integer.
toString
(int i,
 int radix)
Returns a string representation of the first argument in the
 radix specified by the second argument.
String
Long.
toString
()
Returns a
String
object representing this
Long
's value.
static
String
Long.
toString
(long i)
Returns a
String
object representing the specified
long
.
static
String
Long.
toString
(long i,
 int radix)
Returns a string representation of the first argument in the
 radix specified by the second argument.
String
Module.
toString
()
Returns the string representation of this module.
String
ModuleLayer.
toString
()
Returns a string describing this module layer.
String
Object.
toString
()
Returns a string representation of the object.
String
Package.
toString
()
Returns the string representation of this Package.
abstract
String
Record.
toString
()
Returns a string representation of the record.
String
Runtime.Version.
toString
()
Returns a string representation of this version.
String
Short.
toString
()
Returns a
String
object representing this
Short
's value.
static
String
Short.
toString
(short s)
Returns a new
String
object representing the
 specified
short
.
String
StackTraceElement.
toString
()
Returns a string representation of this stack trace element.
String
String.
toString
()
This object (which is already a string!)
String
StringBuffer.
toString
()
String
StringBuilder.
toString
()
static
String
StringTemplate.
toString
(
StringTemplate
PREVIEW
stringTemplate)
Produces a diagnostic string that describes the fragments and values of the supplied
StringTemplate
PREVIEW
.
String
Thread.
toString
()
Returns a string representation of this thread.
String
ThreadGroup.
toString
()
Returns a string representation of this Thread group.
String
Throwable.
toString
()
Returns a short description of this throwable.
static
String
Integer.
toUnsignedString
(int i)
Returns a string representation of the argument as an unsigned
 decimal value.
static
String
Integer.
toUnsignedString
(int i,
 int radix)
Returns a string representation of the first argument as an
 unsigned integer value in the radix specified by the second
 argument.
static
String
Long.
toUnsignedString
(long i)
Returns a string representation of the argument as an unsigned
 decimal value.
static
String
Long.
toUnsignedString
(long i,
 int radix)
Returns a string representation of the first argument as an
 unsigned integer value in the radix specified by the second
 argument.
String
String.
toUpperCase
()
Converts all of the characters in this
String
to upper
 case using the rules of the default locale.
String
String.
toUpperCase
(
Locale
locale)
Converts all of the characters in this
String
to upper
 case using the rules of the given
Locale
.
String
String.
translateEscapes
()
Returns a string whose value is this string, with escape sequences
 translated as if in a string literal.
String
String.
trim
()
Returns a string whose value is this string, with all leading
 and trailing space removed, where space is defined
 as any character whose codepoint is less than or equal to
'U+0020'
(the space character).
String
TypeNotPresentException.
typeName
()
Returns the fully qualified name of the unavailable type.
static
String
String.
valueOf
(boolean b)
Returns the string representation of the
boolean
argument.
static
String
String.
valueOf
(char c)
Returns the string representation of the
char
argument.
static
String
String.
valueOf
(char[] data)
Returns the string representation of the
char
array
 argument.
static
String
String.
valueOf
(char[] data,
 int offset,
 int count)
Returns the string representation of a specific subarray of the
char
array argument.
static
String
String.
valueOf
(double d)
Returns the string representation of the
double
argument.
static
String
String.
valueOf
(float f)
Returns the string representation of the
float
argument.
static
String
String.
valueOf
(int i)
Returns the string representation of the
int
argument.
static
String
String.
valueOf
(long l)
Returns the string representation of the
long
argument.
static
String
String.
valueOf
(
Object
obj)
Returns the string representation of the
Object
argument.
Methods in
java.lang
that return types with arguments of type
String
Modifier and Type
Method
Description
List
<
String
>
ProcessBuilder.
command
()
Returns this process builder's operating system program and
 arguments.
Optional
<
String
>
ProcessHandle.Info.
command
()
Returns the executable pathname of the process.
Optional
<
String
>
ProcessHandle.Info.
commandLine
()
Returns the command line of the process.
Optional
<
String
>
String.
describeConstable
()
Returns an
Optional
containing the nominal descriptor for this
 instance, which is the instance itself.
Map
<
String
,
String
>
ProcessBuilder.
environment
()
Returns a string map view of this process builder's environment.
Map
<
String
,
String
>
ProcessBuilder.
environment
()
Returns a string map view of this process builder's environment.
List
<
String
>
StringTemplate.
fragments
()
Returns a list of fragment literals for this
StringTemplate
PREVIEW
.
static
Map
<
String
,
String
>
System.
getenv
()
Returns an unmodifiable string map view of the current system environment.
static
Map
<
String
,
String
>
System.
getenv
()
Returns an unmodifiable string map view of the current system environment.
Set
<
String
>
Module.
getPackages
()
Returns the set of package names for the packages in this module.
Stream
<
String
>
String.
lines
()
Returns a stream of lines extracted from this string,
 separated by line terminators.
Optional
<
String
>
Runtime.Version.
optional
()
Returns
optional
additional identifying build
 information.
Optional
<
String
>
Runtime.Version.
pre
()
Returns the optional
pre-release
information.
Optional
<
String
>
ProcessHandle.Info.
user
()
Return the user of the process.
Methods in
java.lang
with parameters of type
String
Modifier and Type
Method
Description
Module
Module.
addExports
(
String
pn,
Module
other)
If the caller's module is this module then update this module to export
 the given package to the given module.
ModuleLayer.Controller
ModuleLayer.Controller.
addExports
(
Module
source,
String
pn,
Module
target)
Updates module
source
in the layer to export a package to
 module
target
.
Module
Module.
addOpens
(
String
pn,
Module
other)
If this module has
opened
a package to at least the caller
 module then update this module to open the package to the given module.
ModuleLayer.Controller
ModuleLayer.Controller.
addOpens
(
Module
source,
String
pn,
Module
target)
Updates module
source
in the layer to open a package to
 module
target
.
StringBuffer
StringBuffer.
append
(
String
str)
StringBuilder
StringBuilder.
append
(
String
str)
void
SecurityManager.
checkAccept
(
String
host,
 int port)
Deprecated, for removal: This API element is subject to removal in a future version.
Throws a
SecurityException
if the
 calling thread is not permitted to accept a socket connection from
 the specified host and port number.
void
SecurityManager.
checkConnect
(
String
host,
 int port)
Deprecated, for removal: This API element is subject to removal in a future version.
Throws a
SecurityException
if the
 calling thread is not allowed to open a socket connection to the
 specified host and port number.
void
SecurityManager.
checkConnect
(
String
host,
 int port,
Object
context)
Deprecated, for removal: This API element is subject to removal in a future version.
Throws a
SecurityException
if the
 specified security context is not allowed to open a socket
 connection to the specified host and port number.
void
SecurityManager.
checkDelete
(
String
file)
Deprecated, for removal: This API element is subject to removal in a future version.
Throws a
SecurityException
if the
 calling thread is not allowed to delete the specified file.
void
SecurityManager.
checkExec
(
String
cmd)
Deprecated, for removal: This API element is subject to removal in a future version.
Throws a
SecurityException
if the
 calling thread is not allowed to create a subprocess.
void
SecurityManager.
checkLink
(
String
lib)
Deprecated, for removal: This API element is subject to removal in a future version.
Throws a
SecurityException
if the
 calling thread is not allowed to dynamic link the library code
 specified by the string argument file.
void
SecurityManager.
checkPackageAccess
(
String
pkg)
Deprecated, for removal: This API element is subject to removal in a future version.
Throws a
SecurityException
if the calling thread is not allowed
 to access the specified package.
void
SecurityManager.
checkPackageDefinition
(
String
pkg)
Deprecated, for removal: This API element is subject to removal in a future version.
Throws a
SecurityException
if the calling thread is not
 allowed to define classes in the specified package.
void
SecurityManager.
checkPropertyAccess
(
String
key)
Deprecated, for removal: This API element is subject to removal in a future version.
Throws a
SecurityException
if the
 calling thread is not allowed to access the system property with
 the specified
key
name.
void
SecurityManager.
checkRead
(
String
file)
Deprecated, for removal: This API element is subject to removal in a future version.
Throws a
SecurityException
if the
 calling thread is not allowed to read the file specified by the
 string argument.
void
SecurityManager.
checkRead
(
String
file,
Object
context)
Deprecated, for removal: This API element is subject to removal in a future version.
Throws a
SecurityException
if the
 specified security context is not allowed to read the file
 specified by the string argument.
void
SecurityManager.
checkSecurityAccess
(
String
target)
Deprecated, for removal: This API element is subject to removal in a future version.
Determines whether the permission with the specified permission target
 name should be granted or denied.
void
SecurityManager.
checkWrite
(
String
file)
Deprecated, for removal: This API element is subject to removal in a future version.
Throws a
SecurityException
if the
 calling thread is not allowed to write to the file specified by
 the string argument.
static
String
System.
clearProperty
(
String
key)
Removes the system property indicated by the specified key.
static int
Character.
codePointOf
(
String
name)
Returns the code point value of the Unicode character specified by
 the given character name.
ProcessBuilder
ProcessBuilder.
command
(
String
... command)
Sets this process builder's operating system program and
 arguments.
int
String.
compareTo
(
String
anotherString)
Compares two strings lexicographically.
int
String.
compareToIgnoreCase
(
String
str)
Compares two strings lexicographically, ignoring case
 differences.
String
String.
concat
(
String
str)
Concatenates the specified string to the end of this string.
static
Byte
Byte.
decode
(
String
nm)
Decodes a
String
into a
Byte
.
static
Integer
Integer.
decode
(
String
nm)
Decodes a
String
into an
Integer
.
static
Long
Long.
decode
(
String
nm)
Decodes a
String
into a
Long
.
static
Short
Short.
decode
(
String
nm)
Decodes a
String
into a
Short
.
protected final
Class
<?>
ClassLoader.
defineClass
(
String
name,
 byte[] b,
 int off,
 int len)
Converts an array of bytes into an instance of class
Class
.
protected final
Class
<?>
ClassLoader.
defineClass
(
String
name,
 byte[] b,
 int off,
 int len,
ProtectionDomain
protectionDomain)
Converts an array of bytes into an instance of class
Class
,
 with a given
ProtectionDomain
.
protected final
Class
<?>
ClassLoader.
defineClass
(
String
name,
ByteBuffer
b,
ProtectionDomain
protectionDomain)
Converts a
ByteBuffer
into an instance
 of class
Class
, with the given
ProtectionDomain
.
protected
Package
ClassLoader.
definePackage
(
String
name,
String
specTitle,
String
specVersion,
String
specVendor,
String
implTitle,
String
implVersion,
String
implVendor,
URL
sealBase)
Defines a package by
name
in this
ClassLoader
.
boolean
String.
endsWith
(
String
suffix)
Tests if this string ends with the specified suffix.
boolean
String.
equalsIgnoreCase
(
String
anotherString)
Compares this
String
to another
String
, ignoring case
 considerations.
Process
Runtime.
exec
(
String
command)
Deprecated.
This method is error-prone and should not be used, the corresponding method
Runtime.exec(String[])
or
ProcessBuilder
should be used instead.
Process
Runtime.
exec
(
String
[] cmdarray)
Executes the specified command and arguments in a separate process.
Process
Runtime.
exec
(
String
[] cmdarray,
String
[] envp)
Executes the specified command and arguments in a separate process
 with the specified environment.
Process
Runtime.
exec
(
String
[] cmdarray,
String
[] envp,
File
dir)
Executes the specified command and arguments in a separate process with
 the specified environment and working directory.
Process
Runtime.
exec
(
String
command,
String
[] envp)
Deprecated.
This method is error-prone and should not be used, the corresponding method
Runtime.exec(String[], String[])
or
ProcessBuilder
should be used instead.
Process
Runtime.
exec
(
String
command,
String
[] envp,
File
dir)
Deprecated.
This method is error-prone and should not be used, the corresponding method
Runtime.exec(String[], String[], File)
or
ProcessBuilder
should be used instead.
protected
Class
<?>
ClassLoader.
findClass
(
String
name)
Finds the class with the specified
binary name
.
protected
Class
<?>
ClassLoader.
findClass
(
String
moduleName,
String
name)
Finds the class with the given
binary name
in a module defined to this class loader.
protected
String
ClassLoader.
findLibrary
(
String
libname)
Returns the absolute path name of a native library.
protected final
Class
<?>
ClassLoader.
findLoadedClass
(
String
name)
Returns the class with the given
binary name
if this
 loader has been recorded by the Java virtual machine as an initiating
 loader of a class with that
binary name
.
ClassLoader
ModuleLayer.
findLoader
(
String
name)
Returns the
ClassLoader
for the module with the given name.
Optional
<
Module
>
ModuleLayer.
findModule
(
String
name)
Returns the module with the given name in this layer, or if not in this
 layer, the
parent
layers.
protected
URL
ClassLoader.
findResource
(
String
name)
Finds the resource with the given name.
protected
URL
ClassLoader.
findResource
(
String
moduleName,
String
name)
Returns a URL to a resource in a module defined to this class loader.
protected
Enumeration
<
URL
>
ClassLoader.
findResources
(
String
name)
Returns an enumeration of
URL
objects
 representing all the resources with the given name.
protected final
Class
<?>
ClassLoader.
findSystemClass
(
String
name)
Finds a class with the specified
binary name
,
 loading it if necessary.
static
String
String.
format
(
String
format,
Object
... args)
Returns a formatted string using the specified format string and
 arguments.
static
String
String.
format
(
Locale
l,
String
format,
Object
... args)
Returns a formatted string using the specified locale, format string,
 and arguments.
static final
Character.UnicodeBlock
Character.UnicodeBlock.
forName
(
String
blockName)
Returns the UnicodeBlock with the given name.
static final
Character.UnicodeScript
Character.UnicodeScript.
forName
(
String
scriptName)
Returns the UnicodeScript constant with the given Unicode script
 name or the script name alias.
static
Class
<?>
Class.
forName
(
Module
module,
String
name)
Returns the
Class
with the given
binary name
in the given module.
static
Class
<?>
Class.
forName
(
String
className)
Returns the
Class
object associated with the class or
 interface with the given string name.
static
Class
<?>
Class.
forName
(
String
name,
 boolean initialize,
ClassLoader
loader)
Returns the
Class
object associated with the class or
 interface with the given string name, using the given class loader.
static boolean
Boolean.
getBoolean
(
String
name)
Returns
true
if and only if the system property named
 by the argument exists and is equal to, ignoring case, the
 string
"true"
.
byte[]
String.
getBytes
(
String
charsetName)
Encodes this
String
into a sequence of bytes using the named
 charset, storing the result into a new byte array.
protected
Object
ClassLoader.
getClassLoadingLock
(
String
className)
Returns the lock object for class loading operations.
Field
Class.
getDeclaredField
(
String
name)
Returns a
Field
object that reflects the specified declared
 field of the class or interface represented by this
Class
object.
Method
Class.
getDeclaredMethod
(
String
name,
Class
<?>... parameterTypes)
Returns a
Method
object that reflects the specified
 declared method of the class or interface represented by this
Class
object.
final
Package
ClassLoader.
getDefinedPackage
(
String
name)
Returns a
Package
of the given
name
that
 has been defined by this class loader.
static
String
System.
getenv
(
String
name)
Gets the value of the specified environment variable.
Field
Class.
getField
(
String
name)
Returns a
Field
object that reflects the specified public member
 field of the class or interface represented by this
Class
object.
static
Integer
Integer.
getInteger
(
String
nm)
Determines the integer value of the system property with the
 specified name.
static
Integer
Integer.
getInteger
(
String
nm,
 int val)
Determines the integer value of the system property with the
 specified name.
static
Integer
Integer.
getInteger
(
String
nm,
Integer
val)
Returns the integer value of the system property with the
 specified name.
System.Logger
System.LoggerFinder.
getLocalizedLogger
(
String
name,
ResourceBundle
bundle,
Module
module)
Returns a localizable instance of
Logger
for the given
module
.
static
System.Logger
System.
getLogger
(
String
name)
Returns an instance of
Logger
for the caller's
 use.
static
System.Logger
System.
getLogger
(
String
name,
ResourceBundle
bundle)
Returns a localizable instance of
Logger
for the caller's use.
abstract
System.Logger
System.LoggerFinder.
getLogger
(
String
name,
Module
module)
Returns an instance of
Logger
for the given
module
.
static
Long
Long.
getLong
(
String
nm)
Determines the
long
value of the system property
 with the specified name.
static
Long
Long.
getLong
(
String
nm,
 long val)
Determines the
long
value of the system property
 with the specified name.
static
Long
Long.
getLong
(
String
nm,
Long
val)
Returns the
long
value of the system property with
 the specified name.
Method
Class.
getMethod
(
String
name,
Class
<?>... parameterTypes)
Returns a
Method
object that reflects the specified public
 member method of the class or interface represented by this
Class
object.
protected
Package
ClassLoader.
getPackage
(
String
name)
Deprecated.
If multiple class loaders delegate to each other and define classes
 with the same package name, and one such loader relies on the lookup
 behavior of
getPackage
to return a
Package
from
 a parent loader, then the properties exposed by the
Package
may not be as expected in the rest of the program.
static
Package
Package.
getPackage
(
String
name)
Deprecated.
If multiple class loaders delegate to each other and define classes
 with the same package name, and one such loader relies on the lookup
 behavior of
getPackage
to return a
Package
from
 a parent loader, then the properties exposed by the
Package
may not be as expected in the rest of the program.
static
String
System.
getProperty
(
String
key)
Gets the system property indicated by the specified key.
static
String
System.
getProperty
(
String
key,
String
def)
Gets the system property indicated by the specified key.
URL
Class.
getResource
(
String
name)
Finds a resource with a given name.
URL
ClassLoader.
getResource
(
String
name)
Finds the resource with the given name.
InputStream
Class.
getResourceAsStream
(
String
name)
Finds a resource with a given name.
InputStream
ClassLoader.
getResourceAsStream
(
String
name)
Returns an input stream for reading the specified resource.
InputStream
Module.
getResourceAsStream
(
String
name)
Returns an input stream for reading a resource in this module.
Enumeration
<
URL
>
ClassLoader.
getResources
(
String
name)
Finds all the resources with the given name.
static
URL
ClassLoader.
getSystemResource
(
String
name)
Find a resource of the specified name from the search path used to load
 classes.
static
InputStream
ClassLoader.
getSystemResourceAsStream
(
String
name)
Open for reading, a resource of the specified name from the search path
 used to load classes.
static
Enumeration
<
URL
>
ClassLoader.
getSystemResources
(
String
name)
Finds all resources of the specified name from the search path used to
 load classes.
int
String.
indexOf
(
String
str)
Returns the index within this string of the first occurrence of the
 specified substring.
int
String.
indexOf
(
String
str,
 int fromIndex)
Returns the index within this string of the first occurrence of the
 specified substring, starting at the specified index.
int
String.
indexOf
(
String
str,
 int beginIndex,
 int endIndex)
Returns the index of the first occurrence of the specified substring
 within the specified index range of
this
string.
int
StringBuffer.
indexOf
(
String
str)
int
StringBuffer.
indexOf
(
String
str,
 int fromIndex)
int
StringBuilder.
indexOf
(
String
str)
int
StringBuilder.
indexOf
(
String
str,
 int fromIndex)
StringBuffer
StringBuffer.
insert
(int offset,
String
str)
StringBuilder
StringBuilder.
insert
(int offset,
String
str)
boolean
Package.
isCompatibleWith
(
String
desired)
Compare this package's specification version with a
 desired version.
boolean
Module.
isExported
(
String
pn)
Returns
true
if this module exports the given package
 unconditionally.
boolean
Module.
isExported
(
String
pn,
Module
other)
Returns
true
if this module exports the given package to at
 least the given module.
boolean
Module.
isOpen
(
String
pn)
Returns
true
if this module has
opened
a package
 unconditionally.
boolean
Module.
isOpen
(
String
pn,
Module
other)
Returns
true
if this module has
opened
a package to at
 least the given module.
int
String.
lastIndexOf
(
String
str)
Returns the index within this string of the last occurrence of the
 specified substring.
int
String.
lastIndexOf
(
String
str,
 int fromIndex)
Returns the index within this string of the last occurrence of the
 specified substring, searching backward starting at the specified index.
int
StringBuffer.
lastIndexOf
(
String
str)
int
StringBuffer.
lastIndexOf
(
String
str,
 int fromIndex)
int
StringBuilder.
lastIndexOf
(
String
str)
int
StringBuilder.
lastIndexOf
(
String
str,
 int fromIndex)
void
Runtime.
load
(
String
filename)
Loads the native library specified by the filename argument.
static void
System.
load
(
String
filename)
Loads the native library specified by the filename argument.
Class
<?>
ClassLoader.
loadClass
(
String
name)
Loads the class with the specified
binary name
.
protected
Class
<?>
ClassLoader.
loadClass
(
String
name,
 boolean resolve)
Loads the class with the specified
binary name
.
void
Runtime.
loadLibrary
(
String
libname)
Loads the native library specified by the
libname
argument.
static void
System.
loadLibrary
(
String
libname)
Loads the native library specified by the
libname
argument.
default void
System.Logger.
log
(
System.Logger.Level
level,
String
msg)
Logs a message.
default void
System.Logger.
log
(
System.Logger.Level
level,
String
format,
Object
... params)
Logs a message with an optional list of parameters.
default void
System.Logger.
log
(
System.Logger.Level
level,
String
msg,
Throwable
thrown)
Logs a message associated with a given throwable.
void
System.Logger.
log
(
System.Logger.Level
level,
ResourceBundle
bundle,
String
format,
Object
... params)
Logs a message with resource bundle and an optional list of
 parameters.
void
System.Logger.
log
(
System.Logger.Level
level,
ResourceBundle
bundle,
String
msg,
Throwable
thrown)
Logs a localized message associated with a given throwable.
static
String
System.
mapLibraryName
(
String
libname)
Maps a library name into a platform-specific string representing
 a native library.
boolean
String.
matches
(
String
regex)
Tells whether or not this string matches the given
regular expression
.
Thread.Builder
Thread.Builder.
name
(
String
name)
Sets the thread name.
Thread.Builder
Thread.Builder.
name
(
String
prefix,
 long start)
Sets the thread name to be the concatenation of a string prefix and
 the string representation of a counter value.
Thread.Builder.OfPlatform
Thread.Builder.OfPlatform.
name
(
String
name)
Thread.Builder.OfPlatform
Thread.Builder.OfPlatform.
name
(
String
prefix,
 long start)
Thread.Builder.OfVirtual
Thread.Builder.OfVirtual.
name
(
String
name)
Thread.Builder.OfVirtual
Thread.Builder.OfVirtual.
name
(
String
prefix,
 long start)
static <E extends
Enum
<E>>
Enum.EnumDesc
<E>
Enum.EnumDesc.
of
(
ClassDesc
enumClass,
String
constantName)
Returns a nominal descriptor for the specified
enum
class and name
static
StringTemplate
PREVIEW
StringTemplate.
of
(
String
string)
Returns a
StringTemplate
PREVIEW
as if constructed by invoking
StringTemplate.of(List.of(string), List.of())
.
static
Runtime.Version
Runtime.Version.
parse
(
String
s)
Parses the given string as a valid
version string
containing a
version number
followed by pre-release and
 build information.
static boolean
Boolean.
parseBoolean
(
String
s)
Parses the string argument as a boolean.
static byte
Byte.
parseByte
(
String
s)
Parses the string argument as a signed decimal
byte
.
static byte
Byte.
parseByte
(
String
s,
 int radix)
Parses the string argument as a signed
byte
in the
 radix specified by the second argument.
static double
Double.
parseDouble
(
String
s)
Returns a new
double
initialized to the value
 represented by the specified
String
, as performed
 by the
valueOf
method of class
Double
.
static float
Float.
parseFloat
(
String
s)
Returns a new
float
initialized to the value
 represented by the specified
String
, as performed
 by the
valueOf
method of class
Float
.
static int
Integer.
parseInt
(
String
s)
Parses the string argument as a signed decimal integer.
static int
Integer.
parseInt
(
String
s,
 int radix)
Parses the string argument as a signed integer in the radix
 specified by the second argument.
static long
Long.
parseLong
(
String
s)
Parses the string argument as a signed decimal
long
.
static long
Long.
parseLong
(
String
s,
 int radix)
Parses the string argument as a signed
long
in the
 radix specified by the second argument.
static short
Short.
parseShort
(
String
s)
Parses the string argument as a signed decimal
short
.
static short
Short.
parseShort
(
String
s,
 int radix)
Parses the string argument as a signed
short
in the
 radix specified by the second argument.
static int
Integer.
parseUnsignedInt
(
String
s)
Parses the string argument as an unsigned decimal integer.
static int
Integer.
parseUnsignedInt
(
String
s,
 int radix)
Parses the string argument as an unsigned integer in the radix
 specified by the second argument.
static long
Long.
parseUnsignedLong
(
String
s)
Parses the string argument as an unsigned decimal
long
.
static long
Long.
parseUnsignedLong
(
String
s,
 int radix)
Parses the string argument as an unsigned
long
in the
 radix specified by the second argument.
boolean
String.
regionMatches
(boolean ignoreCase,
 int toffset,
String
other,
 int ooffset,
 int len)
Tests if two string regions are equal.
boolean
String.
regionMatches
(int toffset,
String
other,
 int ooffset,
 int len)
Tests if two string regions are equal.
StringBuffer
StringBuffer.
replace
(int start,
 int end,
String
str)
StringBuilder
StringBuilder.
replace
(int start,
 int end,
String
str)
String
String.
replaceAll
(
String
regex,
String
replacement)
Replaces each substring of this string that matches the given
regular expression
with the
 given replacement.
String
String.
replaceFirst
(
String
regex,
String
replacement)
Replaces the first substring of this string that matches the given
regular expression
with the
 given replacement.
Stream
<
URL
>
ClassLoader.
resources
(
String
name)
Returns a stream whose elements are the URLs of all the resources with
 the given name.
void
ClassLoader.
setClassAssertionStatus
(
String
className,
 boolean enabled)
Sets the desired assertion status for the named top-level class in this
 class loader and any nested classes contained therein.
final void
Thread.
setName
(
String
name)
Changes the name of this thread to be equal to the argument
name
.
void
ClassLoader.
setPackageAssertionStatus
(
String
packageName,
 boolean enabled)
Sets the package default assertion status for the named package.
static
String
System.
setProperty
(
String
key,
String
value)
Sets the system property indicated by the specified key.
String
[]
String.
split
(
String
regex)
Splits this string around matches of the given
regular expression
.
String
[]
String.
split
(
String
regex,
 int limit)
Splits this string around matches of the given
regular expression
.
String
[]
String.
splitWithDelimiters
(
String
regex,
 int limit)
Splits this string around matches of the given regular expression and
 returns both the strings and the matching delimiters.
boolean
String.
startsWith
(
String
prefix)
Tests if this string starts with the specified prefix.
boolean
String.
startsWith
(
String
prefix,
 int toffset)
Tests if the substring of this string beginning at the
 specified index starts with the specified prefix.
static
Boolean
Boolean.
valueOf
(
String
s)
Returns a
Boolean
with a value represented by the
 specified string.
static
Byte
Byte.
valueOf
(
String
s)
Returns a
Byte
object holding the value
 given by the specified
String
.
static
Byte
Byte.
valueOf
(
String
s,
 int radix)
Returns a
Byte
object holding the value
 extracted from the specified
String
when parsed
 with the radix given by the second argument.
static
Character.UnicodeScript
Character.UnicodeScript.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
Double
Double.
valueOf
(
String
s)
Returns a
Double
object holding the
double
value represented by the argument string
s
.
static <T extends
Enum
<T>>
T
Enum.
valueOf
(
Class
<T> enumClass,
String
name)
Returns the enum constant of the specified enum class with the
 specified name.
static
Float
Float.
valueOf
(
String
s)
Returns a
Float
object holding the
float
value represented by the argument string
s
.
static
Integer
Integer.
valueOf
(
String
s)
Returns an
Integer
object holding the
 value of the specified
String
.
static
Integer
Integer.
valueOf
(
String
s,
 int radix)
Returns an
Integer
object holding the value
 extracted from the specified
String
when parsed
 with the radix given by the second argument.
static
Long
Long.
valueOf
(
String
s)
Returns a
Long
object holding the value
 of the specified
String
.
static
Long
Long.
valueOf
(
String
s,
 int radix)
Returns a
Long
object holding the value
 extracted from the specified
String
when parsed
 with the radix given by the second argument.
static
ProcessBuilder.Redirect.Type
ProcessBuilder.Redirect.Type.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
Short
Short.
valueOf
(
String
s)
Returns a
Short
object holding the
 value given by the specified
String
.
static
Short
Short.
valueOf
(
String
s,
 int radix)
Returns a
Short
object holding the value
 extracted from the specified
String
when parsed
 with the radix given by the second argument.
static
StackWalker.Option
StackWalker.Option.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
System.Logger.Level
System.Logger.Level.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
Thread.State
Thread.State.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Method parameters in
java.lang
with type arguments of type
String
Modifier and Type
Method
Description
ProcessBuilder
ProcessBuilder.
command
(
List
<
String
> command)
Sets this process builder's operating system program and
 arguments.
ModuleLayer
ModuleLayer.
defineModules
(
Configuration
cf,
Function
<
String
,
ClassLoader
> clf)
Creates a new module layer, with this layer as its parent, by defining the
 modules in the given
Configuration
to the Java virtual machine.
static
ModuleLayer.Controller
ModuleLayer.
defineModules
(
Configuration
cf,
List
<
ModuleLayer
> parentLayers,
Function
<
String
,
ClassLoader
> clf)
Creates a new module layer by defining the modules in the given
Configuration
to the Java virtual machine.
static
String
StringTemplate.
interpolate
(
List
<
String
> fragments,
List
<?> values)
Creates a string that interleaves the elements of values between the
 elements of fragments.
MethodHandle
StringTemplate.Processor.Linkage.
linkage
(
List
<
String
> fragments,
MethodType
type)
This method creates a
MethodHandle
that when invoked with arguments of
 those specified in
type
returns a result that equals that returned by
 the template processor's process method.
default void
System.Logger.
log
(
System.Logger.Level
level,
Supplier
<
String
> msgSupplier)
Logs a lazily supplied message.
default void
System.Logger.
log
(
System.Logger.Level
level,
Supplier
<
String
> msgSupplier,
Throwable
thrown)
Logs a lazily supplied message associated with a given throwable.
static
StringTemplate
PREVIEW
StringTemplate.
of
(
List
<
String
> fragments,
List
<?> values)
Returns a StringTemplate with the given fragments and values.
<R> R
String.
transform
(
Function
<? super
String
,
? extends R> f)
This method allows the application of a function to
this
string.
Constructors in
java.lang
with parameters of type
String
Modifier
Constructor
Description
AbstractMethodError
(
String
s)
Constructs an
AbstractMethodError
with the specified
 detail message.
ArithmeticException
(
String
s)
Constructs an
ArithmeticException
with the specified
 detail message.
ArrayIndexOutOfBoundsException
(
String
s)
Constructs an
ArrayIndexOutOfBoundsException
class with the
 specified detail message.
ArrayStoreException
(
String
s)
Constructs an
ArrayStoreException
with the specified
 detail message.
AssertionError
(
String
message,
Throwable
cause)
Constructs a new
AssertionError
with the specified
 detail message and cause.
Boolean
(
String
s)
Deprecated, for removal: This API element is subject to removal in a future version.
It is rarely appropriate to use this constructor.
BootstrapMethodError
(
String
s)
Constructs a
BootstrapMethodError
with the specified
 detail message.
BootstrapMethodError
(
String
s,
Throwable
cause)
Constructs a
BootstrapMethodError
with the specified
 detail message and cause.
Byte
(
String
s)
Deprecated, for removal: This API element is subject to removal in a future version.
It is rarely appropriate to use this constructor.
ClassCastException
(
String
s)
Constructs a
ClassCastException
with the specified
 detail message.
ClassCircularityError
(
String
s)
Constructs a
ClassCircularityError
with the specified detail
 message.
ClassFormatError
(
String
s)
Constructs a
ClassFormatError
with the specified
 detail message.
protected
ClassLoader
(
String
name,
ClassLoader
parent)
Creates a new class loader of the specified name and using the
 specified parent class loader for delegation.
ClassNotFoundException
(
String
s)
Constructs a
ClassNotFoundException
with the
 specified detail message.
ClassNotFoundException
(
String
s,
Throwable
ex)
Constructs a
ClassNotFoundException
with the
 specified detail message and optional exception that was
 raised while loading the class.
CloneNotSupportedException
(
String
s)
Constructs a
CloneNotSupportedException
with the
 specified detail message.
Double
(
String
s)
Deprecated, for removal: This API element is subject to removal in a future version.
It is rarely appropriate to use this constructor.
protected
Enum
(
String
name,
 int ordinal)
Sole constructor.
EnumConstantNotPresentException
(
Class
<? extends
Enum
> enumType,
String
constantName)
Constructs an
EnumConstantNotPresentException
for the
 specified constant.
Error
(
String
message)
Constructs a new error with the specified detail message.
Error
(
String
message,
Throwable
cause)
Constructs a new error with the specified detail message and
 cause.
protected
Error
(
String
message,
Throwable
cause,
 boolean enableSuppression,
 boolean writableStackTrace)
Constructs a new error with the specified detail message,
 cause, suppression enabled or disabled, and writable stack
 trace enabled or disabled.
Exception
(
String
message)
Constructs a new exception with the specified detail message.
Exception
(
String
message,
Throwable
cause)
Constructs a new exception with the specified detail message and
 cause.
protected
Exception
(
String
message,
Throwable
cause,
 boolean enableSuppression,
 boolean writableStackTrace)
Constructs a new exception with the specified detail message,
 cause, suppression enabled or disabled, and writable stack
 trace enabled or disabled.
ExceptionInInitializerError
(
String
s)
Constructs an
ExceptionInInitializerError
with the specified detail
 message string.
Float
(
String
s)
Deprecated, for removal: This API element is subject to removal in a future version.
It is rarely appropriate to use this constructor.
IllegalAccessError
(
String
s)
Constructs an
IllegalAccessError
with the specified
 detail message.
IllegalAccessException
(
String
s)
Constructs an
IllegalAccessException
with a detail message.
IllegalArgumentException
(
String
s)
Constructs an
IllegalArgumentException
with the
 specified detail message.
IllegalArgumentException
(
String
message,
Throwable
cause)
Constructs a new exception with the specified detail message and
 cause.
IllegalCallerException
(
String
s)
Constructs an IllegalCallerException with the specified detail
 message.
IllegalCallerException
(
String
message,
Throwable
cause)
Constructs a new exception with the specified detail message and
 cause.
IllegalMonitorStateException
(
String
s)
Constructs an
IllegalMonitorStateException
with the
 specified detail message.
IllegalStateException
(
String
s)
Constructs an IllegalStateException with the specified detail
 message.
IllegalStateException
(
String
message,
Throwable
cause)
Constructs a new exception with the specified detail message and
 cause.
IllegalThreadStateException
(
String
s)
Constructs an
IllegalThreadStateException
with the
 specified detail message.
IncompatibleClassChangeError
(
String
s)
Constructs an
IncompatibleClassChangeError
with the
 specified detail message.
IndexOutOfBoundsException
(
String
s)
Constructs an
IndexOutOfBoundsException
with the specified detail
 message.
InstantiationError
(
String
s)
Constructs an
InstantiationError
with the specified
 detail message.
InstantiationException
(
String
s)
Constructs an
InstantiationException
with the
 specified detail message.
Integer
(
String
s)
Deprecated, for removal: This API element is subject to removal in a future version.
It is rarely appropriate to use this constructor.
InternalError
(
String
message)
Constructs an
InternalError
with the specified
 detail message.
InternalError
(
String
message,
Throwable
cause)
Constructs an
InternalError
with the specified detail
 message and cause.
InterruptedException
(
String
s)
Constructs an
InterruptedException
with the
 specified detail message.
LayerInstantiationException
(
String
msg)
Constructs a
LayerInstantiationException
with the given detail
 message.
LayerInstantiationException
(
String
msg,
Throwable
cause)
Constructs a
LayerInstantiationException
with the given detail
 message and cause.
LinkageError
(
String
s)
Constructs a
LinkageError
with the specified detail
 message.
LinkageError
(
String
s,
Throwable
cause)
Constructs a
LinkageError
with the specified detail
 message and cause.
Long
(
String
s)
Deprecated, for removal: This API element is subject to removal in a future version.
It is rarely appropriate to use this constructor.
MatchException
(
String
message,
Throwable
cause)
Constructs an
MatchException
with the specified detail message and
 cause.
NegativeArraySizeException
(
String
s)
Constructs a
NegativeArraySizeException
with the
 specified detail message.
NoClassDefFoundError
(
String
s)
Constructs a
NoClassDefFoundError
with the specified
 detail message.
NoSuchFieldError
(
String
s)
Constructs a
NoSuchFieldError
with the specified
 detail message.
NoSuchFieldException
(
String
s)
Constructor with a detail message.
NoSuchMethodError
(
String
s)
Constructs a
NoSuchMethodError
with the
 specified detail message.
NoSuchMethodException
(
String
s)
Constructs a
NoSuchMethodException
with a detail message.
NullPointerException
(
String
s)
Constructs a
NullPointerException
with the specified
 detail message.
NumberFormatException
(
String
s)
Constructs a
NumberFormatException
with the
 specified detail message.
OutOfMemoryError
(
String
s)
Constructs an
OutOfMemoryError
with the specified
 detail message.
ProcessBuilder
(
String
... command)
Constructs a process builder with the specified operating
 system program and arguments.
ReflectiveOperationException
(
String
message)
Constructs a new exception with the specified detail message.
ReflectiveOperationException
(
String
message,
Throwable
cause)
Constructs a new exception with the specified detail message
 and cause.
RuntimeException
(
String
message)
Constructs a new runtime exception with the specified detail message.
RuntimeException
(
String
message,
Throwable
cause)
Constructs a new runtime exception with the specified detail message and
 cause.
protected
RuntimeException
(
String
message,
Throwable
cause,
 boolean enableSuppression,
 boolean writableStackTrace)
Constructs a new runtime exception with the specified detail
 message, cause, suppression enabled or disabled, and writable
 stack trace enabled or disabled.
RuntimePermission
(
String
name)
Creates a new RuntimePermission with the specified name.
RuntimePermission
(
String
name,
String
actions)
Creates a new RuntimePermission object with the specified name.
SecurityException
(
String
s)
Constructs a
SecurityException
with the specified
 detail message.
SecurityException
(
String
message,
Throwable
cause)
Creates a
SecurityException
with the specified
 detail message and cause.
Short
(
String
s)
Deprecated, for removal: This API element is subject to removal in a future version.
It is rarely appropriate to use this constructor.
StackOverflowError
(
String
s)
Constructs a
StackOverflowError
with the specified
 detail message.
StackTraceElement
(
String
declaringClass,
String
methodName,
String
fileName,
 int lineNumber)
Creates a stack trace element representing the specified execution
 point.
StackTraceElement
(
String
classLoaderName,
String
moduleName,
String
moduleVersion,
String
declaringClass,
String
methodName,
String
fileName,
 int lineNumber)
Creates a stack trace element representing the specified execution
 point.
String
(byte[] bytes,
 int offset,
 int length,
String
charsetName)
Constructs a new
String
by decoding the specified subarray of
 bytes using the specified charset.
String
(byte[] bytes,
String
charsetName)
Constructs a new
String
by decoding the specified array of bytes
 using the specified
charset
.
String
(
String
original)
Initializes a newly created
String
object so that it represents
 the same sequence of characters as the argument; in other words, the
 newly created string is a copy of the argument string.
StringBuffer
(
String
str)
Constructs a string buffer initialized to the contents of the
 specified string.
StringBuilder
(
String
str)
Constructs a string builder initialized to the contents of the
 specified string.
StringIndexOutOfBoundsException
(
String
s)
Constructs a
StringIndexOutOfBoundsException
with the specified
 detail message.
protected
Subset
(
String
name)
Constructs a new
Subset
instance.
Thread
(
Runnable
task,
String
name)
Initializes a new platform
Thread
.
Thread
(
String
name)
Initializes a new platform
Thread
.
Thread
(
ThreadGroup
group,
Runnable
task,
String
name)
Initializes a new platform
Thread
so that it has
task
as its run object, has the specified
name
as its name,
 and belongs to the thread group referred to by
group
.
Thread
(
ThreadGroup
group,
Runnable
task,
String
name,
 long stackSize)
Initializes a new platform
Thread
so that it has
task
as its run object, has the specified
name
as its name,
 and belongs to the thread group referred to by
group
, and has
 the specified
stack size
.
Thread
(
ThreadGroup
group,
Runnable
task,
String
name,
 long stackSize,
 boolean inheritInheritableThreadLocals)
Initializes a new platform
Thread
so that it has
task
as its run object, has the specified
name
as its name,
 belongs to the thread group referred to by
group
, has
 the specified
stackSize
, and inherits initial values for
inheritable thread-local
variables
 if
inheritThreadLocals
is
true
.
Thread
(
ThreadGroup
group,
String
name)
Initializes a new platform
Thread
.
ThreadGroup
(
String
name)
Constructs a new thread group.
ThreadGroup
(
ThreadGroup
parent,
String
name)
Creates a new thread group.
Throwable
(
String
message)
Constructs a new throwable with the specified detail message.
Throwable
(
String
message,
Throwable
cause)
Constructs a new throwable with the specified detail message and
 cause.
protected
Throwable
(
String
message,
Throwable
cause,
 boolean enableSuppression,
 boolean writableStackTrace)
Constructs a new throwable with the specified detail message,
 cause,
suppression
enabled or
 disabled, and writable stack trace enabled or disabled.
TypeNotPresentException
(
String
typeName,
Throwable
cause)
Constructs a
TypeNotPresentException
for the named type
 with the specified cause.
UnknownError
(
String
s)
Constructs an
UnknownError
with the specified detail
 message.
UnsatisfiedLinkError
(
String
s)
Constructs an
UnsatisfiedLinkError
with the
 specified detail message.
UnsupportedClassVersionError
(
String
s)
Constructs a
UnsupportedClassVersionError
with
 the specified detail message.
UnsupportedOperationException
(
String
message)
Constructs an UnsupportedOperationException with the specified
 detail message.
UnsupportedOperationException
(
String
message,
Throwable
cause)
Constructs a new exception with the specified detail message and
 cause.
VerifyError
(
String
s)
Constructs an
VerifyError
with the specified detail message.
VirtualMachineError
(
String
message)
Constructs a
VirtualMachineError
with the specified
 detail message.
VirtualMachineError
(
String
message,
Throwable
cause)
Constructs a
VirtualMachineError
with the specified
 detail message and cause.
WrongThreadException
(
String
s)
Constructs a WrongThreadException with the given detail message.
WrongThreadException
(
String
message,
Throwable
cause)
Constructs a WrongThreadException with the given detail message and cause.
Constructor parameters in
java.lang
with type arguments of type
String
Modifier
Constructor
Description
ProcessBuilder
(
List
<
String
> command)
Constructs a process builder with the specified operating
 system program and arguments.
Uses of
String
in
java.lang.annotation
Methods in
java.lang.annotation
that return
String
Modifier and Type
Method
Description
String
IncompleteAnnotationException.
elementName
()
Returns the name of the missing element.
String
AnnotationTypeMismatchException.
foundType
()
Returns the type of data found in the incorrectly typed element.
String
Annotation.
toString
()
Returns a string representation of this annotation.
Methods in
java.lang.annotation
with parameters of type
String
Modifier and Type
Method
Description
static
ElementType
ElementType.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
RetentionPolicy
RetentionPolicy.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Constructors in
java.lang.annotation
with parameters of type
String
Modifier
Constructor
Description
AnnotationFormatError
(
String
message)
Constructs a new
AnnotationFormatError
with the specified
 detail message.
AnnotationFormatError
(
String
message,
Throwable
cause)
Constructs a new
AnnotationFormatError
with the specified
 detail message and cause.
AnnotationTypeMismatchException
(
Method
element,
String
foundType)
Constructs an AnnotationTypeMismatchException for the specified
 annotation type element and found data type.
IncompleteAnnotationException
(
Class
<? extends
Annotation
> annotationType,
String
elementName)
Constructs an IncompleteAnnotationException to indicate that
 the named element was missing from the specified annotation interface.
Uses of
String
in
java.lang.constant
Fields in
java.lang.constant
declared as
String
Modifier and Type
Field
Description
static final
String
ConstantDescs.
CLASS_INIT_NAME
The special name of class initialization methods, "<clinit>".
static final
String
ConstantDescs.
DEFAULT_NAME
Invocation name to use when no name is needed, such as the name of a
 constructor, or the invocation name of a dynamic constant or dynamic
 callsite when the bootstrap is known to ignore the invocation name.
static final
String
ConstantDescs.
INIT_NAME
The special name of instance initialization methods, "<init>".
Methods in
java.lang.constant
that return
String
Modifier and Type
Method
Description
String
DynamicConstantDesc.
constantName
()
Returns the name that would appear in the
NameAndType
operand
 of the
LDC
for this constant.
String
ClassDesc.
descriptorString
()
Returns a field type descriptor string for this type
String
MethodTypeDesc.
descriptorString
()
Returns the method type descriptor string.
default
String
MethodTypeDesc.
displayDescriptor
()
Returns a human-readable descriptor for this method type, using the
 canonical names for parameter and return types.
default
String
ClassDesc.
displayName
()
Returns a human-readable name for the type described by this descriptor.
String
PackageDesc.
internalName
()
Returns the fully qualified (slash-separated) package name in internal form
 of this
PackageDesc
.
String
DynamicCallSiteDesc.
invocationName
()
Returns the invocation name that would appear in the
NameAndType
operand of the
invokedynamic
.
String
DirectMethodHandleDesc.
lookupDescriptor
()
Returns the lookup descriptor of the method handle described by this descriptor,
 after adjusting for the invocation mode.
String
DirectMethodHandleDesc.
methodName
()
Returns the name of the method or field described by this nominal descriptor.
String
ModuleDesc.
name
()
Returns the module name of this
ModuleDesc
.
default
String
PackageDesc.
name
()
Returns the fully qualified (dot-separated) package name
 of this
PackageDesc
.
default
String
ClassDesc.
packageName
()
Returns the package name of this
ClassDesc
, if it describes
 a class or interface type.
String
DynamicCallSiteDesc.
toString
()
Returns a compact textual description of this call site description,
 including the bootstrap method, the invocation name and type, and
 the static bootstrap arguments.
String
DynamicConstantDesc.
toString
()
Returns a compact textual description of this constant description,
 including the bootstrap method, the constant name and type, and
 the static bootstrap arguments.
Methods in
java.lang.constant
with parameters of type
String
Modifier and Type
Method
Description
default
ClassDesc
ClassDesc.
nested
(
String
nestedName)
Returns a
ClassDesc
for a nested class of the class or
 interface type described by this
ClassDesc
.
default
ClassDesc
ClassDesc.
nested
(
String
firstNestedName,
String
... moreNestedNames)
Returns a
ClassDesc
for a nested class of the class or
 interface type described by this
ClassDesc
.
static
ClassDesc
ClassDesc.
of
(
String
name)
Returns a
ClassDesc
for a class or interface type,
 given the name of the class or interface, such as
"java.lang.String"
.
static
ClassDesc
ClassDesc.
of
(
String
packageName,
String
className)
Returns a
ClassDesc
for a class or interface type,
 given a package name and the unqualified (simple) name for the
 class or interface.
static
DynamicCallSiteDesc
DynamicCallSiteDesc.
of
(
DirectMethodHandleDesc
bootstrapMethod,
String
invocationName,
MethodTypeDesc
invocationType)
Creates a nominal descriptor for an
invokedynamic
call site whose
 bootstrap method has no static arguments.
static
DynamicCallSiteDesc
DynamicCallSiteDesc.
of
(
DirectMethodHandleDesc
bootstrapMethod,
String
invocationName,
MethodTypeDesc
invocationType,
ConstantDesc
... bootstrapArgs)
Creates a nominal descriptor for an
invokedynamic
call site.
static
DirectMethodHandleDesc
MethodHandleDesc.
of
(
DirectMethodHandleDesc.Kind
kind,
ClassDesc
owner,
String
name,
String
lookupDescriptor)
Creates a
MethodHandleDesc
corresponding to an invocation of a
 declared method, invocation of a constructor, or access to a field.
static
ModuleDesc
ModuleDesc.
of
(
String
name)
Returns a
ModuleDesc
for a module,
 given the name of the module.
static
PackageDesc
PackageDesc.
of
(
String
name)
Returns a
PackageDesc
for a package,
 given the name of the package, such as
"java.lang"
.
static
DirectMethodHandleDesc
ConstantDescs.
ofCallsiteBootstrap
(
ClassDesc
owner,
String
name,
ClassDesc
returnType,
ClassDesc
... paramTypes)
Returns a
MethodHandleDesc
corresponding to a bootstrap method for
 an
invokedynamic
callsite, which is a static method whose leading
 parameter types are
Lookup
,
String
, and
MethodType
.
static <T>
ConstantDesc
DynamicConstantDesc.
ofCanonical
(
DirectMethodHandleDesc
bootstrapMethod,
String
constantName,
ClassDesc
constantType,
ConstantDesc
[] bootstrapArgs)
Returns a nominal descriptor for a dynamic constant, transforming it into
 a more specific type if the constant bootstrap is a well-known one and a
 more specific nominal descriptor type (e.g., ClassDesc) is available.
static
DirectMethodHandleDesc
ConstantDescs.
ofConstantBootstrap
(
ClassDesc
owner,
String
name,
ClassDesc
returnType,
ClassDesc
... paramTypes)
Returns a
MethodHandleDesc
corresponding to a bootstrap method for a
 dynamic constant, which is a static method whose leading arguments are
Lookup
,
String
, and
Class
.
static
ClassDesc
ClassDesc.
ofDescriptor
(
String
descriptor)
Returns a
ClassDesc
given a descriptor string for a class,
 interface, array, or primitive type.
static
MethodTypeDesc
MethodTypeDesc.
ofDescriptor
(
String
descriptor)
Creates a
MethodTypeDesc
given a method descriptor string.
static
DirectMethodHandleDesc
MethodHandleDesc.
ofField
(
DirectMethodHandleDesc.Kind
kind,
ClassDesc
owner,
String
fieldName,
ClassDesc
fieldType)
Creates a
MethodHandleDesc
corresponding to a method handle
 that accesses a field.
static
ClassDesc
ClassDesc.
ofInternalName
(
String
name)
Returns a
ClassDesc
for a class or interface type,
 given the name of the class or interface in internal form,
 such as
"java/lang/String"
.
static
PackageDesc
PackageDesc.
ofInternalName
(
String
name)
Returns a
PackageDesc
for a package,
 given the name of the package in internal form,
 such as
"java/lang"
.
static
DirectMethodHandleDesc
MethodHandleDesc.
ofMethod
(
DirectMethodHandleDesc.Kind
kind,
ClassDesc
owner,
String
name,
MethodTypeDesc
lookupMethodType)
Creates a
MethodHandleDesc
corresponding to an invocation of a
 declared method or constructor.
static <T>
DynamicConstantDesc
<T>
DynamicConstantDesc.
ofNamed
(
DirectMethodHandleDesc
bootstrapMethod,
String
constantName,
ClassDesc
constantType,
ConstantDesc
... bootstrapArgs)
Returns a nominal descriptor for a dynamic constant.
static
DirectMethodHandleDesc.Kind
DirectMethodHandleDesc.Kind.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
DynamicCallSiteDesc
DynamicCallSiteDesc.
withNameAndType
(
String
invocationName,
MethodTypeDesc
invocationType)
Returns a nominal descriptor for an
invokedynamic
call site whose
 bootstrap and bootstrap arguments are the same as this one, but with the
 specified invocationName and invocation invocationType
Constructors in
java.lang.constant
with parameters of type
String
Modifier
Constructor
Description
protected
DynamicConstantDesc
(
DirectMethodHandleDesc
bootstrapMethod,
String
constantName,
ClassDesc
constantType,
ConstantDesc
... bootstrapArgs)
Creates a nominal descriptor for a dynamic constant.
Uses of
String
in
java.lang.foreign
Methods in
java.lang.foreign
that return
String
Modifier and Type
Method
Description
default
String
MemorySegment.
getUtf8String
(long offset)
Reads a UTF-8 encoded, null-terminated string from this segment at the given offset.
String
MemoryLayout.
toString
()
Returns the string representation of this layout.
Methods in
java.lang.foreign
that return types with arguments of type
String
Modifier and Type
Method
Description
Optional
<
String
>
MemoryLayout.
name
()
Returns the name (if any) associated with this layout.
Methods in
java.lang.foreign
with parameters of type
String
Modifier and Type
Method
Description
default
MemorySegment
PREVIEW
SegmentAllocator.
allocateUtf8String
(
String
str)
Converts a Java string into a UTF-8 encoded, null-terminated C string,
 storing the result into a memory segment.
static
Linker.Option
PREVIEW
Linker.Option.
captureCallState
(
String
... capturedState)
Returns a linker option used to save portions of the execution state immediately after
          calling a foreign function associated with a downcall method handle,
          before it can be overwritten by the Java runtime, or read through conventional means.
Optional
<
MemorySegment
PREVIEW
>
SymbolLookup.
find
(
String
name)
Returns the address of the symbol with the given name.
static
MemoryLayout.PathElement
PREVIEW
MemoryLayout.PathElement.
groupElement
(
String
name)
Returns a path element which selects a member layout with the given name in a group layout.
static
SymbolLookup
PREVIEW
SymbolLookup.
libraryLookup
(
String
name,
Arena
PREVIEW
arena)
Loads a library with the given name (if not already loaded) and creates a symbol lookup for symbols in that library.
default void
MemorySegment.
setUtf8String
(long offset,
String
str)
Writes the given string into this segment at the given offset, converting it to a null-terminated byte sequence using UTF-8 encoding.
AddressLayout
PREVIEW
AddressLayout.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
GroupLayout
PREVIEW
GroupLayout.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
MemoryLayout
PREVIEW
MemoryLayout.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
PaddingLayout
PREVIEW
PaddingLayout.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
SequenceLayout
PREVIEW
SequenceLayout.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
StructLayout
PREVIEW
StructLayout.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
UnionLayout
PREVIEW
UnionLayout.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
ValueLayout.OfBoolean
PREVIEW
ValueLayout.OfBoolean.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
ValueLayout.OfByte
PREVIEW
ValueLayout.OfByte.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
ValueLayout.OfChar
PREVIEW
ValueLayout.OfChar.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
ValueLayout.OfDouble
PREVIEW
ValueLayout.OfDouble.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
ValueLayout.OfFloat
PREVIEW
ValueLayout.OfFloat.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
ValueLayout.OfInt
PREVIEW
ValueLayout.OfInt.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
ValueLayout.OfLong
PREVIEW
ValueLayout.OfLong.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
ValueLayout.OfShort
PREVIEW
ValueLayout.OfShort.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
ValueLayout
PREVIEW
ValueLayout.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
Uses of
String
in
java.lang.instrument
Methods in
java.lang.instrument
with parameters of type
String
Modifier and Type
Method
Description
void
Instrumentation.
setNativeMethodPrefix
(
ClassFileTransformer
transformer,
String
prefix)
This method modifies the failure handling of
 native method resolution by allowing retry
 with a prefix applied to the name.
default byte[]
ClassFileTransformer.
transform
(
ClassLoader
loader,
String
className,
Class
<?> classBeingRedefined,
ProtectionDomain
protectionDomain,
 byte[] classfileBuffer)
Transforms the given class file and returns a new replacement class file.
default byte[]
ClassFileTransformer.
transform
(
Module
module,
ClassLoader
loader,
String
className,
Class
<?> classBeingRedefined,
ProtectionDomain
protectionDomain,
 byte[] classfileBuffer)
Transforms the given class file and returns a new replacement class file.
Method parameters in
java.lang.instrument
with type arguments of type
String
Modifier and Type
Method
Description
void
Instrumentation.
redefineModule
(
Module
module,
Set
<
Module
> extraReads,
Map
<
String
,
Set
<
Module
>> extraExports,
Map
<
String
,
Set
<
Module
>> extraOpens,
Set
<
Class
<?>> extraUses,
Map
<
Class
<?>,
List
<
Class
<?>>> extraProvides)
Redefine a module to expand the set of modules that it reads, the set of
 packages that it exports or opens, or the services that it uses or
 provides.
Constructors in
java.lang.instrument
with parameters of type
String
Modifier
Constructor
Description
IllegalClassFormatException
(
String
s)
Constructs an
IllegalClassFormatException
with the
 specified detail message.
UnmodifiableClassException
(
String
s)
Constructs an
UnmodifiableClassException
with the
 specified detail message.
UnmodifiableModuleException
(
String
msg)
Constructs an
UnmodifiableModuleException
with the
 specified detail message.
Uses of
String
in
java.lang.invoke
Methods in
java.lang.invoke
that return
String
Modifier and Type
Method
Description
String
MethodType.
descriptorString
()
Returns the descriptor string for this method type.
String
TypeDescriptor.
descriptorString
()
Returns the descriptor string for this
TypeDescriptor
object.
String
SerializedLambda.
getCapturingClass
()
Get the name of the class that captured this lambda.
String
SerializedLambda.
getFunctionalInterfaceClass
()
Get the name of the invoked type to which this
 lambda has been converted
String
SerializedLambda.
getFunctionalInterfaceMethodName
()
Get the name of the primary method for the functional interface
 to which this lambda has been converted.
String
SerializedLambda.
getFunctionalInterfaceMethodSignature
()
Get the signature of the primary method for the functional
 interface to which this lambda has been converted.
String
SerializedLambda.
getImplClass
()
Get the name of the class containing the implementation
 method.
String
SerializedLambda.
getImplMethodName
()
Get the name of the implementation method.
String
SerializedLambda.
getImplMethodSignature
()
Get the signature of the implementation method.
final
String
SerializedLambda.
getInstantiatedMethodType
()
Get the signature of the primary functional interface method
 after type variables are substituted with their instantiation
 from the capture site.
String
MethodHandleInfo.
getName
()
Returns the name of the cracked method handle's underlying member.
String
VarHandle.AccessMode.
methodName
()
Returns the
VarHandle
signature-polymorphic method name
 associated with this
AccessMode
value.
static
String
MethodHandleInfo.
referenceKindToString
(int referenceKind)
Returns the descriptive name of the given reference kind,
 as defined in the
table above
.
String
MethodType.
toMethodDescriptorString
()
Returns the descriptor string for this method type.
String
MethodHandle.
toString
()
Returns a string representation of the method handle,
 starting with the string
"MethodHandle"
and
 ending with the string representation of the method handle's type.
static
String
MethodHandleInfo.
toString
(int kind,
Class
<?> defc,
String
name,
MethodType
type)
Returns a string representation for a
MethodHandleInfo
,
 given the four parts of its symbolic reference.
String
MethodHandles.Lookup.
toString
()
Displays the name of the class from which lookups are to be made,
 followed by "/" and the name of the
previous lookup class
if present.
String
MethodType.
toString
()
Returns a string representation of the method type,
 of the form
"(PT0,PT1...)RT"
.
final
String
VarHandle.
toString
()
Returns a compact textual description of this
VarHandle
,
 including the type of variable described, and a description of its coordinates.
String
VarHandle.VarHandleDesc.
toString
()
Returns a compact textual description of this constant description.
Methods in
java.lang.invoke
with parameters of type
String
Modifier and Type
Method
Description
static
CallSite
LambdaMetafactory.
altMetafactory
(
MethodHandles.Lookup
caller,
String
interfaceMethodName,
MethodType
factoryType,
Object
... args)
Facilitates the creation of simple "function objects" that implement one
 or more interfaces by delegation to a provided
MethodHandle
,
 after appropriate type adaptation and partial evaluation of arguments.
static
VarHandle
ConstantBootstraps.
arrayVarHandle
(
MethodHandles.Lookup
lookup,
String
name,
Class
<
VarHandle
> type,
Class
<?> arrayClass)
Finds a
VarHandle
for an array type.
MethodHandle
MethodHandles.Lookup.
bind
(
Object
receiver,
String
name,
MethodType
type)
Produces an early-bound method handle for a non-static method.
static <T> T
MethodHandles.
classData
(
MethodHandles.Lookup
caller,
String
name,
Class
<T> type)
Returns the
class data
associated with the lookup class
 of the given
caller
lookup object, or
null
.
static <T> T
MethodHandles.
classDataAt
(
MethodHandles.Lookup
caller,
String
name,
Class
<T> type,
 int index)
Returns the element at the specified index in the
class data
,
 if the class data associated with the lookup class
 of the given
caller
lookup object is a
List
.
static <E extends
Enum
<E>>
E
ConstantBootstraps.
enumConstant
(
MethodHandles.Lookup
lookup,
String
name,
Class
<E> type)
Returns an
enum
constant of the type specified by
type
with the name specified by
name
.
static
Object
ConstantBootstraps.
explicitCast
(
MethodHandles.Lookup
lookup,
String
name,
Class
<?> dstType,
Object
value)
Applies a conversion from a source type to a destination type.
static
VarHandle
ConstantBootstraps.
fieldVarHandle
(
MethodHandles.Lookup
lookup,
String
name,
Class
<
VarHandle
> type,
Class
<?> declaringClass,
Class
<?> fieldType)
Finds a
VarHandle
for an instance field.
Class
<?>
MethodHandles.Lookup.
findClass
(
String
targetName)
Looks up a class by name from the lookup context defined by this
Lookup
object,
as if resolved
by an
ldc
instruction.
MethodHandle
MethodHandles.Lookup.
findGetter
(
Class
<?> refc,
String
name,
Class
<?> type)
Produces a method handle giving read access to a non-static field.
MethodHandle
MethodHandles.Lookup.
findSetter
(
Class
<?> refc,
String
name,
Class
<?> type)
Produces a method handle giving write access to a non-static field.
MethodHandle
MethodHandles.Lookup.
findSpecial
(
Class
<?> refc,
String
name,
MethodType
type,
Class
<?> specialCaller)
Produces an early-bound method handle for a virtual method.
MethodHandle
MethodHandles.Lookup.
findStatic
(
Class
<?> refc,
String
name,
MethodType
type)
Produces a method handle for a static method.
MethodHandle
MethodHandles.Lookup.
findStaticGetter
(
Class
<?> refc,
String
name,
Class
<?> type)
Produces a method handle giving read access to a static field.
MethodHandle
MethodHandles.Lookup.
findStaticSetter
(
Class
<?> refc,
String
name,
Class
<?> type)
Produces a method handle giving write access to a static field.
VarHandle
MethodHandles.Lookup.
findStaticVarHandle
(
Class
<?> decl,
String
name,
Class
<?> type)
Produces a VarHandle giving access to a static field
name
of
 type
type
declared in a class of type
decl
.
VarHandle
MethodHandles.Lookup.
findVarHandle
(
Class
<?> recv,
String
name,
Class
<?> type)
Produces a VarHandle giving access to a non-static field
name
of type
type
declared in a class of type
recv
.
MethodHandle
MethodHandles.Lookup.
findVirtual
(
Class
<?> refc,
String
name,
MethodType
type)
Produces a method handle for a virtual method.
static
MethodType
MethodType.
fromMethodDescriptorString
(
String
descriptor,
ClassLoader
loader)
Finds or creates an instance of a method type of the given method descriptor
 (JVMS
4.3.3
).
static
Object
ConstantBootstraps.
getStaticFinal
(
MethodHandles.Lookup
lookup,
String
name,
Class
<?> type)
Returns the value of a static final field declared in the class which
 is the same as the field's type (or, for primitive-valued fields,
 declared in the wrapper class.)
static
Object
ConstantBootstraps.
getStaticFinal
(
MethodHandles.Lookup
lookup,
String
name,
Class
<?> type,
Class
<?> declaringClass)
Returns the value of a static final field.
static
Object
ConstantBootstraps.
invoke
(
MethodHandles.Lookup
lookup,
String
name,
Class
<?> type,
MethodHandle
handle,
Object
... args)
Returns the result of invoking a method handle with the provided
 arguments.
static
CallSite
StringConcatFactory.
makeConcat
(
MethodHandles.Lookup
lookup,
String
name,
MethodType
concatType)
Facilitates the creation of optimized String concatenation methods, that
 can be used to efficiently concatenate a known number of arguments of
 known types, possibly after type adaptation and partial evaluation of
 arguments.
static
CallSite
StringConcatFactory.
makeConcatWithConstants
(
MethodHandles.Lookup
lookup,
String
name,
MethodType
concatType,
String
recipe,
Object
... constants)
Facilitates the creation of optimized String concatenation methods, that
 can be used to efficiently concatenate a known number of arguments of
 known types, possibly after type adaptation and partial evaluation of
 arguments.
static
CallSite
LambdaMetafactory.
metafactory
(
MethodHandles.Lookup
caller,
String
interfaceMethodName,
MethodType
factoryType,
MethodType
interfaceMethodType,
MethodHandle
implementation,
MethodType
dynamicMethodType)
Facilitates the creation of simple "function objects" that implement one
 or more interfaces by delegation to a provided
MethodHandle
,
 after appropriate type adaptation and partial evaluation of arguments.
static
Object
ConstantBootstraps.
nullConstant
(
MethodHandles.Lookup
lookup,
String
name,
Class
<?> type)
Returns a
null
object reference for the reference type specified
 by
type
.
static
VarHandle.VarHandleDesc
VarHandle.VarHandleDesc.
ofField
(
ClassDesc
declaringClass,
String
name,
ClassDesc
fieldType)
Returns a
VarHandle.VarHandleDesc
corresponding to a
VarHandle
for an instance field.
static
VarHandle.VarHandleDesc
VarHandle.VarHandleDesc.
ofStaticField
(
ClassDesc
declaringClass,
String
name,
ClassDesc
fieldType)
Returns a
VarHandle.VarHandleDesc
corresponding to a
VarHandle
for a static field.
static
Class
<?>
ConstantBootstraps.
primitiveClass
(
MethodHandles.Lookup
lookup,
String
name,
Class
<?> type)
Returns a
Class
mirror for the primitive type whose type
 descriptor is specified by
name
.
static
VarHandle
ConstantBootstraps.
staticFieldVarHandle
(
MethodHandles.Lookup
lookup,
String
name,
Class
<
VarHandle
> type,
Class
<?> declaringClass,
Class
<?> fieldType)
Finds a
VarHandle
for a static field.
static
String
MethodHandleInfo.
toString
(int kind,
Class
<?> defc,
String
name,
MethodType
type)
Returns a string representation for a
MethodHandleInfo
,
 given the four parts of its symbolic reference.
static
VarHandle.AccessMode
VarHandle.AccessMode.
valueFromMethodName
(
String
methodName)
Returns the
AccessMode
value associated with the specified
VarHandle
signature-polymorphic method name.
static
MethodHandles.Lookup.ClassOption
MethodHandles.Lookup.ClassOption.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
VarHandle.AccessMode
VarHandle.AccessMode.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Method parameters in
java.lang.invoke
with type arguments of type
String
Modifier and Type
Method
Description
static
MethodHandle
StringConcatFactory.
makeConcatWithTemplate
(
List
<
String
> fragments,
List
<
Class
<?>> ptypes)
Preview.
Simplified concatenation method to facilitate
StringTemplate
PREVIEW
concatenation.
static
List
<
MethodHandle
>
StringConcatFactory.
makeConcatWithTemplateCluster
(
List
<
String
> fragments,
List
<
Class
<?>> ptypes,
 int maxSlots)
Preview.
This method breaks up large concatenations into separate
MethodHandles
based on the number of slots required
 per
MethodHandle
.
static
MethodHandle
StringConcatFactory.
makeConcatWithTemplateGetters
(
List
<
String
> fragments,
List
<
MethodHandle
> getters,
 int maxSlots)
Preview.
This method creates a
MethodHandle
expecting one input, the
 receiver of the supplied getters.
Constructors in
java.lang.invoke
with parameters of type
String
Modifier
Constructor
Description
LambdaConversionException
(
String
message)
Constructs a
LambdaConversionException
with a message.
LambdaConversionException
(
String
message,
Throwable
cause)
Constructs a
LambdaConversionException
with a message and cause.
LambdaConversionException
(
String
message,
Throwable
cause,
 boolean enableSuppression,
 boolean writableStackTrace)
Constructs a
LambdaConversionException
with a message,
 cause, and other settings.
SerializedLambda
(
Class
<?> capturingClass,
String
functionalInterfaceClass,
String
functionalInterfaceMethodName,
String
functionalInterfaceMethodSignature,
 int implMethodKind,
String
implClass,
String
implMethodName,
String
implMethodSignature,
String
instantiatedMethodType,
Object
[] capturedArgs)
Create a
SerializedLambda
from the low-level information present
 at the lambda factory site.
StringConcatException
(
String
msg)
Constructs an exception with a message
StringConcatException
(
String
msg,
Throwable
cause)
Constructs an exception with a message and a linked throwable
WrongMethodTypeException
(
String
s)
Constructs a
WrongMethodTypeException
with the specified
 detail message.
Uses of
String
in
java.lang.management
Fields in
java.lang.management
declared as
String
Modifier and Type
Field
Description
static final
String
ManagementFactory.
CLASS_LOADING_MXBEAN_NAME
String representation of the
ObjectName
for the
ClassLoadingMXBean
.
static final
String
ManagementFactory.
COMPILATION_MXBEAN_NAME
String representation of the
ObjectName
for the
CompilationMXBean
.
static final
String
ManagementFactory.
GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE
The domain name and the type key property in
 the
ObjectName
for a
GarbageCollectorMXBean
.
static final
String
MemoryNotificationInfo.
MEMORY_COLLECTION_THRESHOLD_EXCEEDED
Notification type denoting that
 the memory usage of a memory pool is greater than or equal to its
collection usage threshold
after the Java virtual machine
 has expended effort in recycling unused objects in that
 memory pool.
static final
String
ManagementFactory.
MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE
The domain name and the type key property in
 the
ObjectName
for a
MemoryManagerMXBean
.
static final
String
ManagementFactory.
MEMORY_MXBEAN_NAME
String representation of the
ObjectName
for the
MemoryMXBean
.
static final
String
ManagementFactory.
MEMORY_POOL_MXBEAN_DOMAIN_TYPE
The domain name and the type key property in
 the
ObjectName
for a
MemoryPoolMXBean
.
static final
String
MemoryNotificationInfo.
MEMORY_THRESHOLD_EXCEEDED
Notification type denoting that
 the memory usage of a memory pool has
 reached or exceeded its
usage threshold
value.
static final
String
ManagementFactory.
OPERATING_SYSTEM_MXBEAN_NAME
String representation of the
ObjectName
for the
OperatingSystemMXBean
.
static final
String
ManagementFactory.
RUNTIME_MXBEAN_NAME
String representation of the
ObjectName
for the
RuntimeMXBean
.
static final
String
ManagementFactory.
THREAD_MXBEAN_NAME
String representation of the
ObjectName
for the
ThreadMXBean
.
Methods in
java.lang.management
that return
String
Modifier and Type
Method
Description
String
OperatingSystemMXBean.
getArch
()
Returns the operating system architecture.
String
RuntimeMXBean.
getBootClassPath
()
Returns the boot class path that is used by the bootstrap class loader
 to search for class files.
String
LockInfo.
getClassName
()
Returns the fully qualified name of the class of the lock object.
String
RuntimeMXBean.
getClassPath
()
Returns the Java class path that is used by the system class loader
 to search for class files.
String
RuntimeMXBean.
getLibraryPath
()
Returns the Java library path.
String
ThreadInfo.
getLockName
()
Returns the
string representation
of an object for which the thread associated with this
ThreadInfo
is blocked waiting.
String
ThreadInfo.
getLockOwnerName
()
Returns the name of the thread which owns the object
 for which the thread associated with this
ThreadInfo
is blocked waiting.
String
PlatformLoggingMXBean.
getLoggerLevel
(
String
loggerName)
Gets the name of the log
level
associated with the specified logger.
String
RuntimeMXBean.
getManagementSpecVersion
()
Returns the version of the specification for the management interface
 implemented by the running Java virtual machine.
String
[]
MemoryPoolMXBean.
getMemoryManagerNames
()
Returns the name of memory managers that manages this memory pool.
String
[]
MemoryManagerMXBean.
getMemoryPoolNames
()
Returns the name of memory pools that this memory manager manages.
String
BufferPoolMXBean.
getName
()
Returns the name representing this buffer pool.
String
CompilationMXBean.
getName
()
Returns the name of the Just-in-time (JIT) compiler.
String
MemoryManagerMXBean.
getName
()
Returns the name representing this memory manager.
String
MemoryPoolMXBean.
getName
()
Returns the name representing this memory pool.
String
OperatingSystemMXBean.
getName
()
Returns the operating system name.
String
RuntimeMXBean.
getName
()
Returns the name representing the running Java virtual machine.
String
PlatformLoggingMXBean.
getParentLoggerName
(
String
loggerName)
Returns the name of the
parent
for the specified logger.
String
MemoryNotificationInfo.
getPoolName
()
Returns the name of the memory pool that triggers this notification.
String
RuntimeMXBean.
getSpecName
()
Returns the Java virtual machine specification name.
String
RuntimeMXBean.
getSpecVendor
()
Returns the Java virtual machine specification vendor.
String
RuntimeMXBean.
getSpecVersion
()
Returns the Java virtual machine specification version.
String
ThreadInfo.
getThreadName
()
Returns the name of the thread associated with this
ThreadInfo
.
String
OperatingSystemMXBean.
getVersion
()
Returns the operating system version.
String
RuntimeMXBean.
getVmName
()
Returns the Java virtual machine implementation name.
String
RuntimeMXBean.
getVmVendor
()
Returns the Java virtual machine implementation vendor.
String
RuntimeMXBean.
getVmVersion
()
Returns the Java virtual machine implementation version.
String
LockInfo.
toString
()
Returns a string representation of a lock.
String
MemoryType.
toString
()
Returns the string representation of this
MemoryType
.
String
MemoryUsage.
toString
()
Returns a descriptive representation of this memory usage.
String
ThreadInfo.
toString
()
Returns a string representation of this thread info.
Methods in
java.lang.management
that return types with arguments of type
String
Modifier and Type
Method
Description
List
<
String
>
RuntimeMXBean.
getInputArguments
()
Returns the input arguments passed to the Java virtual machine
 which does not include the arguments to the
main
method.
List
<
String
>
PlatformLoggingMXBean.
getLoggerNames
()
Returns the list of the currently registered
logger
names.
Map
<
String
,
String
>
RuntimeMXBean.
getSystemProperties
()
Returns a map of names and values of all system properties.
Map
<
String
,
String
>
RuntimeMXBean.
getSystemProperties
()
Returns a map of names and values of all system properties.
Methods in
java.lang.management
with parameters of type
String
Modifier and Type
Method
Description
String
PlatformLoggingMXBean.
getLoggerLevel
(
String
loggerName)
Gets the name of the log
level
associated with the specified logger.
String
PlatformLoggingMXBean.
getParentLoggerName
(
String
loggerName)
Returns the name of the
parent
for the specified logger.
static <T> T
ManagementFactory.
newPlatformMXBeanProxy
(
MBeanServerConnection
connection,
String
mxbeanName,
Class
<T> mxbeanInterface)
Returns a proxy for a platform MXBean interface of a
 given
MXBean name
that forwards its method calls through the given
MBeanServerConnection
.
void
PlatformLoggingMXBean.
setLoggerLevel
(
String
loggerName,
String
levelName)
Sets the specified logger to the specified new
level
.
static
MemoryType
MemoryType.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Constructors in
java.lang.management
with parameters of type
String
Modifier
Constructor
Description
LockInfo
(
String
className,
 int identityHashCode)
Constructs a
LockInfo
object.
ManagementPermission
(
String
name)
Constructs a ManagementPermission with the specified name.
ManagementPermission
(
String
name,
String
actions)
Constructs a new ManagementPermission object.
MemoryNotificationInfo
(
String
poolName,
MemoryUsage
usage,
 long count)
Constructs a
MemoryNotificationInfo
object.
MonitorInfo
(
String
className,
 int identityHashCode,
 int stackDepth,
StackTraceElement
stackFrame)
Construct a
MonitorInfo
object.
Uses of
String
in
java.lang.module
Methods in
java.lang.module
that return
String
Modifier and Type
Method
Description
String
ModuleDescriptor.
name
()
Returns the module name.
String
ModuleDescriptor.Requires.
name
()
Return the module name.
String
ResolvedModule.
name
()
Returns the module name.
String
ModuleDescriptor.Provides.
service
()
Returns the fully qualified class name of the service type.
String
ModuleDescriptor.Exports.
source
()
Returns the package name.
String
ModuleDescriptor.Opens.
source
()
Returns the package name.
String
ModuleDescriptor.
toNameAndVersion
()
Returns a string containing the module name and, if present, its
 version.
String
Configuration.
toString
()
Returns a string describing this configuration.
String
ModuleDescriptor.Exports.
toString
()
Returns a string describing the exported package.
String
ModuleDescriptor.Opens.
toString
()
Returns a string describing the open package.
String
ModuleDescriptor.Provides.
toString
()
Returns a string describing this
Provides
.
String
ModuleDescriptor.Requires.
toString
()
Returns a string describing this module dependence.
String
ModuleDescriptor.
toString
()
Returns a string describing the module.
String
ModuleDescriptor.Version.
toString
()
Returns the string from which this version was parsed.
String
ResolvedModule.
toString
()
Returns a string describing this resolved module.
Methods in
java.lang.module
that return types with arguments of type
String
Modifier and Type
Method
Description
Stream
<
String
>
ModuleReader.
list
()
Lists the contents of the module, returning a stream of elements that
 are the names of all resources in the module.
Optional
<
String
>
ModuleDescriptor.
mainClass
()
Returns the module main class.
Set
<
String
>
ModuleDescriptor.
packages
()
Returns the set of packages in the module.
List
<
String
>
ModuleDescriptor.Provides.
providers
()
Returns the list of the fully qualified class names of the providers
 or provider factories.
Optional
<
String
>
ModuleDescriptor.Requires.
rawCompiledVersion
()
Returns the string with the possibly-unparseable version of the module
 if recorded at compile-time.
Optional
<
String
>
ModuleDescriptor.
rawVersion
()
Returns the string with the possibly-unparseable version of the
 module.
Set
<
String
>
ModuleDescriptor.Exports.
targets
()
For a qualified export, returns the non-empty and immutable set
 of the module names to which the package is exported.
Set
<
String
>
ModuleDescriptor.Opens.
targets
()
For a qualified
Opens
, returns the non-empty and immutable set
 of the module names to which the package is open.
Set
<
String
>
ModuleDescriptor.
uses
()
Returns the set of service dependences.
Methods in
java.lang.module
with parameters of type
String
Modifier and Type
Method
Description
ModuleDescriptor.Builder
ModuleDescriptor.Builder.
exports
(
String
pn)
Adds an exported package.
ModuleDescriptor.Builder
ModuleDescriptor.Builder.
exports
(
String
pn,
Set
<
String
> targets)
Adds an exported package.
ModuleDescriptor.Builder
ModuleDescriptor.Builder.
exports
(
Set
<
ModuleDescriptor.Exports.Modifier
> ms,
String
pn)
Adds an exported package with the given (and possibly empty) set of
 modifiers.
ModuleDescriptor.Builder
ModuleDescriptor.Builder.
exports
(
Set
<
ModuleDescriptor.Exports.Modifier
> ms,
String
pn,
Set
<
String
> targets)
Adds an exported package with the given (and possibly empty) set of
 modifiers.
Optional
<
ModuleReference
>
ModuleFinder.
find
(
String
name)
Finds a reference to a module of a given name.
Optional
<
URI
>
ModuleReader.
find
(
String
name)
Finds a resource, returning a URI to the resource in the module.
Optional
<
ResolvedModule
>
Configuration.
findModule
(
String
name)
Finds a resolved module in this configuration, or if not in this
 configuration, the
parent
configurations.
ModuleDescriptor.Builder
ModuleDescriptor.Builder.
mainClass
(
String
mc)
Sets the module main class.
static
ModuleDescriptor.Builder
ModuleDescriptor.
newAutomaticModule
(
String
name)
Instantiates a builder to build a module descriptor for an automatic
 module.
static
ModuleDescriptor.Builder
ModuleDescriptor.
newModule
(
String
name)
Instantiates a builder to build a module descriptor for a
normal
module.
static
ModuleDescriptor.Builder
ModuleDescriptor.
newModule
(
String
name,
Set
<
ModuleDescriptor.Modifier
> ms)
Instantiates a builder to build a module descriptor.
static
ModuleDescriptor.Builder
ModuleDescriptor.
newOpenModule
(
String
name)
Instantiates a builder to build a module descriptor for an open module.
default
Optional
<
InputStream
>
ModuleReader.
open
(
String
name)
Opens a resource, returning an input stream to read the resource in
 the module.
ModuleDescriptor.Builder
ModuleDescriptor.Builder.
opens
(
String
pn)
Adds an open package.
ModuleDescriptor.Builder
ModuleDescriptor.Builder.
opens
(
String
pn,
Set
<
String
> targets)
Adds an open package.
ModuleDescriptor.Builder
ModuleDescriptor.Builder.
opens
(
Set
<
ModuleDescriptor.Opens.Modifier
> ms,
String
pn)
Adds an open package with the given (and possibly empty) set of
 modifiers.
ModuleDescriptor.Builder
ModuleDescriptor.Builder.
opens
(
Set
<
ModuleDescriptor.Opens.Modifier
> ms,
String
pn,
Set
<
String
> targets)
Adds an open package with the given (and possibly empty) set of
 modifiers.
static
ModuleDescriptor.Version
ModuleDescriptor.Version.
parse
(
String
v)
Parses the given string as a version string.
ModuleDescriptor.Builder
ModuleDescriptor.Builder.
provides
(
String
service,
List
<
String
> providers)
Provides implementations of a service.
default
Optional
<
ByteBuffer
>
ModuleReader.
read
(
String
name)
Reads a resource, returning a byte buffer with the contents of the
 resource.
ModuleDescriptor.Builder
ModuleDescriptor.Builder.
requires
(
String
mn)
Adds a dependence on a module with an empty set of modifiers.
ModuleDescriptor.Builder
ModuleDescriptor.Builder.
requires
(
Set
<
ModuleDescriptor.Requires.Modifier
> ms,
String
mn)
Adds a dependence on a module with the given (and possibly empty)
 set of modifiers.
ModuleDescriptor.Builder
ModuleDescriptor.Builder.
requires
(
Set
<
ModuleDescriptor.Requires.Modifier
> ms,
String
mn,
ModuleDescriptor.Version
compiledVersion)
Adds a dependence on a module with the given (and possibly empty)
 set of modifiers.
ModuleDescriptor.Builder
ModuleDescriptor.Builder.
uses
(
String
service)
Adds a service dependence.
static
ModuleDescriptor.Exports.Modifier
ModuleDescriptor.Exports.Modifier.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
ModuleDescriptor.Modifier
ModuleDescriptor.Modifier.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
ModuleDescriptor.Opens.Modifier
ModuleDescriptor.Opens.Modifier.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
ModuleDescriptor.Requires.Modifier
ModuleDescriptor.Requires.Modifier.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
ModuleDescriptor.Builder
ModuleDescriptor.Builder.
version
(
String
vs)
Sets the module version.
Method parameters in
java.lang.module
with type arguments of type
String
Modifier and Type
Method
Description
ModuleDescriptor.Builder
ModuleDescriptor.Builder.
exports
(
String
pn,
Set
<
String
> targets)
Adds an exported package.
ModuleDescriptor.Builder
ModuleDescriptor.Builder.
opens
(
String
pn,
Set
<
String
> targets)
Adds an open package.
ModuleDescriptor.Builder
ModuleDescriptor.Builder.
packages
(
Set
<
String
> pns)
Adds packages to the module.
ModuleDescriptor.Builder
ModuleDescriptor.Builder.
provides
(
String
service,
List
<
String
> providers)
Provides implementations of a service.
static
ModuleDescriptor
ModuleDescriptor.
read
(
InputStream
in,
Supplier
<
Set
<
String
>> packageFinder)
Reads the binary form of a module declaration from an input stream
 as a module descriptor.
static
ModuleDescriptor
ModuleDescriptor.
read
(
ByteBuffer
bb,
Supplier
<
Set
<
String
>> packageFinder)
Reads the binary form of a module declaration from a byte buffer
 as a module descriptor.
Configuration
Configuration.
resolve
(
ModuleFinder
before,
ModuleFinder
after,
Collection
<
String
> roots)
Resolves a collection of root modules, with this configuration as its
 parent, to create a new configuration.
static
Configuration
Configuration.
resolve
(
ModuleFinder
before,
List
<
Configuration
> parents,
ModuleFinder
after,
Collection
<
String
> roots)
Resolves a collection of root modules to create a configuration.
Configuration
Configuration.
resolveAndBind
(
ModuleFinder
before,
ModuleFinder
after,
Collection
<
String
> roots)
Resolves a collection of root modules, with service binding, and with
 this configuration as its parent, to create a new configuration.
static
Configuration
Configuration.
resolveAndBind
(
ModuleFinder
before,
List
<
Configuration
> parents,
ModuleFinder
after,
Collection
<
String
> roots)
Resolves a collection of root modules, with service binding, to create
 configuration.
Constructors in
java.lang.module
with parameters of type
String
Modifier
Constructor
Description
FindException
(
String
msg)
Constructs a
FindException
with the given detail
 message.
FindException
(
String
msg,
Throwable
cause)
Constructs a
FindException
with the given detail message
 and cause.
InvalidModuleDescriptorException
(
String
msg)
Constructs an
InvalidModuleDescriptorException
with the
 specified detail message.
ResolutionException
(
String
msg)
Constructs a
ResolutionException
with the given detail
 message.
ResolutionException
(
String
msg,
Throwable
cause)
Constructs a
ResolutionException
with the given detail message
 and cause.
Uses of
String
in
java.lang.reflect
Methods in
java.lang.reflect
that return
String
Modifier and Type
Method
Description
String
RecordComponent.
getGenericSignature
()
Returns a
String
that describes the generic type signature for
 this record component.
String
Constructor.
getName
()
Returns the name of this constructor, as a string.
abstract
String
Executable.
getName
()
Returns the name of the executable represented by this object.
String
Field.
getName
()
Returns the name of the field represented by this
Field
object.
String
Member.
getName
()
Returns the simple name of the underlying member or constructor
 represented by this Member.
String
Method.
getName
()
Returns the name of the method represented by this
Method
object, as a
String
.
String
Parameter.
getName
()
Returns the name of the parameter.
String
RecordComponent.
getName
()
Returns the name of this record component.
String
TypeVariable.
getName
()
Returns the name of this type variable, as it occurs in the source code.
default
String
Type.
getTypeName
()
Returns a string describing this type, including information
 about any type parameters.
String
Constructor.
toGenericString
()
Returns a string describing this
Constructor
,
 including type parameters.
abstract
String
Executable.
toGenericString
()
Returns a string describing this
Executable
, including
 any type parameters.
String
Field.
toGenericString
()
Returns a string describing this
Field
, including
 its generic type.
String
Method.
toGenericString
()
Returns a string describing this
Method
, including type
 parameters.
String
Constructor.
toString
()
Returns a string describing this
Constructor
.
String
Field.
toString
()
Returns a string describing this
Field
.
String
Method.
toString
()
Returns a string describing this
Method
.
static
String
Modifier.
toString
(int mod)
Return a string describing the access modifier flags in
 the specified modifier.
String
Parameter.
toString
()
Returns a string describing this parameter.
String
RecordComponent.
toString
()
Returns a string describing this record component.
Methods in
java.lang.reflect
with parameters of type
String
Modifier and Type
Method
Description
static
AccessFlag.Location
AccessFlag.Location.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
AccessFlag
AccessFlag.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
ClassFileFormatVersion
ClassFileFormatVersion.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Constructors in
java.lang.reflect
with parameters of type
String
Modifier
Constructor
Description
GenericSignatureFormatError
(
String
message)
Constructs a new
GenericSignatureFormatError
with the
 specified message.
InaccessibleObjectException
(
String
msg)
Constructs an
InaccessibleObjectException
with the given detail
 message.
InvocationTargetException
(
Throwable
target,
String
s)
Constructs a InvocationTargetException with a target exception
 and a detail message.
MalformedParameterizedTypeException
(
String
message)
Constructs a
MalformedParameterizedTypeException
with
 the given detail message.
MalformedParametersException
(
String
reason)
Create a
MalformedParametersException
.
ReflectPermission
(
String
name)
Constructs a ReflectPermission with the specified name.
ReflectPermission
(
String
name,
String
actions)
Constructs a ReflectPermission with the specified name and actions.
UndeclaredThrowableException
(
Throwable
undeclaredThrowable,
String
s)
Constructs an
UndeclaredThrowableException
with the
 specified
Throwable
and a detail message.
Uses of
String
in
java.lang.runtime
Methods in
java.lang.runtime
with parameters of type
String
Modifier and Type
Method
Description
static
Object
ObjectMethods.
bootstrap
(
MethodHandles.Lookup
lookup,
String
methodName,
TypeDescriptor
type,
Class
<?> recordClass,
String
names,
MethodHandle
... getters)
Bootstrap method to generate the
Object.equals(Object)
,
Object.hashCode()
, and
Object.toString()
methods, based
 on a description of the component names and accessor methods, for either
invokedynamic
call sites or dynamic constant pool entries.
static
CallSite
SwitchBootstraps.
enumSwitch
(
MethodHandles.Lookup
lookup,
String
invocationName,
MethodType
invocationType,
Object
... labels)
Bootstrap method for linking an
invokedynamic
call site that
 implements a
switch
on a target of an enum type.
static
CallSite
TemplateRuntime.
newLargeStringTemplate
(
MethodHandles.Lookup
lookup,
String
name,
MethodType
type)
String template bootstrap method for creating large string templates,
 i.e., when the number of value slots exceeds
StringConcatFactory.MAX_INDY_CONCAT_ARG_SLOTS
PREVIEW
.
static
CallSite
TemplateRuntime.
newStringTemplate
(
MethodHandles.Lookup
lookup,
String
name,
MethodType
type,
String
... fragments)
String template bootstrap method for creating string templates.
static
CallSite
TemplateRuntime.
processStringTemplate
(
MethodHandles.Lookup
lookup,
String
name,
MethodType
type,
MethodHandle
processorGetter,
String
... fragments)
String template bootstrap method for static final processors.
static
CallSite
SwitchBootstraps.
typeSwitch
(
MethodHandles.Lookup
lookup,
String
invocationName,
MethodType
invocationType,
Object
... labels)
Bootstrap method for linking an
invokedynamic
call site that
 implements a
switch
on a target of a reference type.
Uses of
String
in
java.math
Methods in
java.math
that return
String
Modifier and Type
Method
Description
String
BigDecimal.
toEngineeringString
()
Returns a string representation of this
BigDecimal
,
 using engineering notation if an exponent is needed.
String
BigDecimal.
toPlainString
()
Returns a string representation of this
BigDecimal
without an exponent field.
String
BigDecimal.
toString
()
Returns the string representation of this
BigDecimal
,
 using scientific notation if an exponent is needed.
String
BigInteger.
toString
()
Returns the decimal String representation of this BigInteger.
String
BigInteger.
toString
(int radix)
Returns the String representation of this BigInteger in the
 given radix.
String
MathContext.
toString
()
Returns the string representation of this
MathContext
.
Methods in
java.math
with parameters of type
String
Modifier and Type
Method
Description
static
RoundingMode
RoundingMode.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Constructors in
java.math
with parameters of type
String
Modifier
Constructor
Description
BigDecimal
(
String
val)
Translates the string representation of a
BigDecimal
into a
BigDecimal
.
BigDecimal
(
String
val,
MathContext
mc)
Translates the string representation of a
BigDecimal
into a
BigDecimal
, accepting the same strings as the
BigDecimal(String)
constructor, with rounding
 according to the context settings.
BigInteger
(
String
val)
Translates the decimal String representation of a BigInteger
 into a BigInteger.
BigInteger
(
String
val,
 int radix)
Translates the String representation of a BigInteger in the
 specified radix into a BigInteger.
MathContext
(
String
val)
Constructs a new
MathContext
from a string.
Uses of
String
in
java.net
Fields in
java.net
declared as
String
Modifier and Type
Field
Description
protected
String
HttpURLConnection.
method
The HTTP method (GET,POST,PUT,etc.).
protected
String
HttpURLConnection.
responseMessage
The HTTP response message.
Methods in
java.net
that return
String
Modifier and Type
Method
Description
static
String
URLDecoder.
decode
(
String
s)
Deprecated.
The resulting string may vary depending on the
          default charset.
static
String
URLDecoder.
decode
(
String
s,
String
enc)
Decodes an
application/x-www-form-urlencoded
string using
 a specific encoding scheme.
static
String
URLDecoder.
decode
(
String
s,
Charset
charset)
Decodes an
application/x-www-form-urlencoded
string using
 a specific
Charset
.
static
String
URLEncoder.
encode
(
String
s)
Deprecated.
The resulting string may vary depending on the
             default charset.
static
String
URLEncoder.
encode
(
String
s,
String
enc)
Translates a string into
application/x-www-form-urlencoded
format using a specific encoding scheme.
static
String
URLEncoder.
encode
(
String
s,
Charset
charset)
Translates a string into
application/x-www-form-urlencoded
format using a specific
Charset
.
String
SocketPermission.
getActions
()
Returns the canonical string representation of the actions.
String
URLPermission.
getActions
()
Returns the normalized method list and request
 header list, in the form:
String
URI.
getAuthority
()
Returns the decoded authority component of this URI.
String
URL.
getAuthority
()
Gets the authority part of this
URL
.
String
InetAddress.
getCanonicalHostName
()
Gets the fully qualified domain name for this IP address.
abstract
String
SecureCacheResponse.
getCipherSuite
()
Returns the cipher suite in use on the original connection that
 retrieved the network resource.
String
HttpCookie.
getComment
()
Returns the comment describing the purpose of this cookie, or
null
if the cookie has no comment.
String
HttpCookie.
getCommentURL
()
Returns the comment URL describing the purpose of this cookie, or
null
if the cookie has no comment URL.
String
URLConnection.
getContentEncoding
()
Returns the value of the
content-encoding
header field.
String
URLConnection.
getContentType
()
Returns the value of the
content-type
header field.
String
FileNameMap.
getContentTypeFor
(
String
fileName)
Gets the MIME type for the specified file name.
static
String
URLConnection.
getDefaultRequestProperty
(
String
key)
Deprecated.
The instance specific getRequestProperty method
 should be used after an appropriate instance of URLConnection
 is obtained.
String
NetworkInterface.
getDisplayName
()
Get the display name of this network interface.
String
HttpCookie.
getDomain
()
Returns the domain name set for this cookie.
String
JarURLConnection.
getEntryName
()
Return the entry name for this connection.
String
URL.
getFile
()
Gets the file name of this
URL
.
String
URI.
getFragment
()
Returns the decoded fragment component of this URI.
String
HttpURLConnection.
getHeaderField
(int n)
Returns the value for the
n
th
header field.
String
URLConnection.
getHeaderField
(int n)
Returns the value for the
n
th
header field.
String
URLConnection.
getHeaderField
(
String
name)
Returns the value of the named header field.
String
HttpURLConnection.
getHeaderFieldKey
(int n)
Returns the key for the
n
th
header field.
String
URLConnection.
getHeaderFieldKey
(int n)
Returns the key for the
n
th
header field.
String
URI.
getHost
()
Returns the host component of this URI.
String
URL.
getHost
()
Gets the host name of this
URL
, if applicable.
String
Inet4Address.
getHostAddress
()
Returns the IP address string in textual presentation form.
String
Inet6Address.
getHostAddress
()
Returns the IP address string in textual presentation.
String
InetAddress.
getHostAddress
()
Returns the IP address string in textual presentation.
String
InetAddress.
getHostName
()
Gets the host name for this IP address.
final
String
InetSocketAddress.
getHostName
()
Gets the
hostname
.
final
String
InetSocketAddress.
getHostString
()
Returns the hostname, or the String form of the address if it
 doesn't have a hostname (it was created using a literal).
String
URISyntaxException.
getInput
()
Returns the input string.
String
HttpRetryException.
getLocation
()
Returns the value of the Location header field if the
 error resulted from redirection.
String
URISyntaxException.
getMessage
()
Returns a string describing the parse error.
String
HttpCookie.
getName
()
Returns the name of the cookie.
String
NetworkInterface.
getName
()
Get the name of this network interface.
String
HttpCookie.
getPath
()
Returns the path on the server to which the browser returns this cookie.
String
URI.
getPath
()
Returns the decoded path component of this URI.
String
URL.
getPath
()
Gets the path part of this
URL
.
String
HttpCookie.
getPortlist
()
Returns the port list attribute of the cookie
String
URL.
getProtocol
()
Gets the protocol name of this
URL
.
String
URI.
getQuery
()
Returns the decoded query component of this URI.
String
URL.
getQuery
()
Gets the query part of this
URL
.
String
URI.
getRawAuthority
()
Returns the raw authority component of this URI.
String
URI.
getRawFragment
()
Returns the raw fragment component of this URI.
String
URI.
getRawPath
()
Returns the raw path component of this URI.
String
URI.
getRawQuery
()
Returns the raw query component of this URI.
String
URI.
getRawSchemeSpecificPart
()
Returns the raw scheme-specific part of this URI.
String
URI.
getRawUserInfo
()
Returns the raw user-information component of this URI.
String
HttpRetryException.
getReason
()
Returns a string explaining why the http request could
 not be retried.
String
URISyntaxException.
getReason
()
Returns a string explaining why the input string could not be parsed.
String
URL.
getRef
()
Gets the anchor (also known as the "reference") of this
URL
.
protected final
String
Authenticator.
getRequestingHost
()
Gets the
hostname
of the
 site or proxy requesting authentication, or
null
if not available.
protected final
String
Authenticator.
getRequestingPrompt
()
Gets the prompt string given by the requestor.
protected final
String
Authenticator.
getRequestingProtocol
()
Give the protocol that's requesting the connection.
protected final
String
Authenticator.
getRequestingScheme
()
Gets the scheme of the requestor (the HTTP scheme
 for an HTTP firewall, for example).
String
HttpURLConnection.
getRequestMethod
()
Get the request method.
String
URLConnection.
getRequestProperty
(
String
key)
Returns the value of the named general request property for this
 connection.
String
HttpURLConnection.
getResponseMessage
()
Gets the HTTP response message, if any, returned along with the
 response code from a server.
String
URI.
getScheme
()
Returns the scheme component of this URI.
String
URI.
getSchemeSpecificPart
()
Returns the decoded scheme-specific part of this URI.
String
URI.
getUserInfo
()
Returns the decoded user-information component of this URI.
String
URL.
getUserInfo
()
Gets the userInfo part of this
URL
.
String
PasswordAuthentication.
getUserName
()
Returns the user name.
String
HttpCookie.
getValue
()
Returns the value of the cookie.
static
String
URLConnection.
guessContentTypeFromName
(
String
fname)
Tries to determine the content type of an object, based
 on the specified "file" component of a URL.
static
String
URLConnection.
guessContentTypeFromStream
(
InputStream
is)
Tries to determine the type of an input stream based on the
 characters at the beginning of the input stream.
String
ProtocolFamily.
name
()
Returns the name of the protocol family.
String
SocketOption.
name
()
Returns the name of the socket option.
static
String
IDN.
toASCII
(
String
input)
Translates a string from Unicode to ASCII Compatible Encoding (ACE),
 as defined by the ToASCII operation of
RFC 3490
.
static
String
IDN.
toASCII
(
String
input,
 int flag)
Translates a string from Unicode to ASCII Compatible Encoding (ACE),
 as defined by the ToASCII operation of
RFC 3490
.
String
URI.
toASCIIString
()
Returns the content of this URI as a US-ASCII string.
String
URL.
toExternalForm
()
Constructs a string representation of this
URL
.
protected
String
URLStreamHandler.
toExternalForm
(
URL
u)
Converts a
URL
of a specific protocol to a
String
.
String
HttpCookie.
toString
()
Constructs a cookie header string representation of this cookie,
 which is in the format defined by corresponding cookie specification,
 but without the leading "Cookie:" token.
String
InetAddress.
toString
()
Converts this IP address to a
String
.
String
InetSocketAddress.
toString
()
Constructs a string representation of this InetSocketAddress.
String
InterfaceAddress.
toString
()
Converts this Interface address to a
String
.
String
Proxy.
toString
()
Constructs a string representation of this Proxy.
String
ServerSocket.
toString
()
Returns the implementation address and implementation port of
 this socket as a
String
.
String
Socket.
toString
()
Converts this socket to a
String
.
String
SocketImpl.
toString
()
Returns the address and port of this socket as a
String
.
String
UnixDomainSocketAddress.
toString
()
Returns a string representation of this
UnixDomainSocketAddress
.
String
URI.
toString
()
Returns the content of this URI as a string.
String
URL.
toString
()
Constructs a string representation of this
URL
.
String
URLConnection.
toString
()
Returns a
String
representation of this URL connection.
static
String
IDN.
toUnicode
(
String
input)
Translates a string from ASCII Compatible Encoding (ACE) to Unicode,
 as defined by the ToUnicode operation of
RFC 3490
.
static
String
IDN.
toUnicode
(
String
input,
 int flag)
Translates a string from ASCII Compatible Encoding (ACE) to Unicode,
 as defined by the ToUnicode operation of
RFC 3490
.
Methods in
java.net
that return types with arguments of type
String
Modifier and Type
Method
Description
abstract
Map
<
String
,
List
<
String
>>
CookieHandler.
get
(
URI
uri,
Map
<
String
,
List
<
String
>> requestHeaders)
Gets all the applicable cookies from a cookie cache for the
 specified uri in the request header.
abstract
Map
<
String
,
List
<
String
>>
CookieHandler.
get
(
URI
uri,
Map
<
String
,
List
<
String
>> requestHeaders)
Gets all the applicable cookies from a cookie cache for the
 specified uri in the request header.
Map
<
String
,
List
<
String
>>
CookieManager.
get
(
URI
uri,
Map
<
String
,
List
<
String
>> requestHeaders)
Map
<
String
,
List
<
String
>>
CookieManager.
get
(
URI
uri,
Map
<
String
,
List
<
String
>> requestHeaders)
Map
<
String
,
List
<
String
>>
URLConnection.
getHeaderFields
()
Returns an unmodifiable Map of the header fields.
Map
<
String
,
List
<
String
>>
URLConnection.
getHeaderFields
()
Returns an unmodifiable Map of the header fields.
abstract
Map
<
String
,
List
<
String
>>
CacheResponse.
getHeaders
()
Returns the response headers as a Map.
abstract
Map
<
String
,
List
<
String
>>
CacheResponse.
getHeaders
()
Returns the response headers as a Map.
Map
<
String
,
List
<
String
>>
URLConnection.
getRequestProperties
()
Returns an unmodifiable Map of general request
 properties for this connection.
Map
<
String
,
List
<
String
>>
URLConnection.
getRequestProperties
()
Returns an unmodifiable Map of general request
 properties for this connection.
Methods in
java.net
with parameters of type
String
Modifier and Type
Method
Description
void
URLConnection.
addRequestProperty
(
String
key,
String
value)
Adds a general request property specified by a
 key-value pair.
protected abstract void
SocketImpl.
connect
(
String
host,
 int port)
Connects this socket to the specified port on the named host.
static
URI
URI.
create
(
String
str)
Creates a URI by parsing the given string.
ContentHandler
ContentHandlerFactory.
createContentHandler
(
String
mimetype)
Creates a new
ContentHandler
to read an object from
 a
URLStreamHandler
.
static
InetSocketAddress
InetSocketAddress.
createUnresolved
(
String
host,
 int port)
Creates an unresolved socket address from a hostname and a port number.
URLStreamHandler
URLStreamHandlerFactory.
createURLStreamHandler
(
String
protocol)
Creates a new
URLStreamHandler
instance with the specified
 protocol.
static
String
URLDecoder.
decode
(
String
s)
Deprecated.
The resulting string may vary depending on the
          default charset.
static
String
URLDecoder.
decode
(
String
s,
String
enc)
Decodes an
application/x-www-form-urlencoded
string using
 a specific encoding scheme.
static
String
URLDecoder.
decode
(
String
s,
Charset
charset)
Decodes an
application/x-www-form-urlencoded
string using
 a specific
Charset
.
protected
Package
URLClassLoader.
definePackage
(
String
name,
Manifest
man,
URL
url)
Defines a new package by name in this
URLClassLoader
.
static boolean
HttpCookie.
domainMatches
(
String
domain,
String
host)
The utility method to check whether a host name is in a domain or not.
static
String
URLEncoder.
encode
(
String
s)
Deprecated.
The resulting string may vary depending on the
             default charset.
static
String
URLEncoder.
encode
(
String
s,
String
enc)
Translates a string into
application/x-www-form-urlencoded
format using a specific encoding scheme.
static
String
URLEncoder.
encode
(
String
s,
Charset
charset)
Translates a string into
application/x-www-form-urlencoded
format using a specific
Charset
.
protected
Class
<?>
URLClassLoader.
findClass
(
String
name)
Finds and loads the class with the specified name from the URL search
 path.
URL
URLClassLoader.
findResource
(
String
name)
Finds the resource with the specified name on the URL search path.
Enumeration
<
URL
>
URLClassLoader.
findResources
(
String
name)
Returns an Enumeration of URLs representing all of the resources
 on the URL search path having the specified name.
abstract
CacheResponse
ResponseCache.
get
(
URI
uri,
String
rqstMethod,
Map
<
String
,
List
<
String
>> rqstHeaders)
Retrieve the cached response based on the requesting uri,
 request method and request headers.
static
InetAddress
[]
InetAddress.
getAllByName
(
String
host)
Given the name of a host, returns an array of its IP addresses,
 based on the configured system
resolver
.
static
Inet6Address
Inet6Address.
getByAddress
(
String
host,
 byte[] addr,
 int scope_id)
Create an Inet6Address in the exact manner of
InetAddress.getByAddress(String,byte[])
except that the IPv6 scope_id is
 set to the given numeric value.
static
Inet6Address
Inet6Address.
getByAddress
(
String
host,
 byte[] addr,
NetworkInterface
nif)
Create an Inet6Address in the exact manner of
InetAddress.getByAddress(String,byte[])
except that the IPv6 scope_id is
 set to the value corresponding to the given interface for the address
 type specified in
addr
.
static
InetAddress
InetAddress.
getByAddress
(
String
host,
 byte[] addr)
Creates an InetAddress based on the provided host name and IP address.
static
InetAddress
InetAddress.
getByName
(
String
host)
Determines the IP address of a host, given the host's name.
static
NetworkInterface
NetworkInterface.
getByName
(
String
name)
Searches for the network interface with the specified name.
String
FileNameMap.
getContentTypeFor
(
String
fileName)
Gets the MIME type for the specified file name.
static
String
URLConnection.
getDefaultRequestProperty
(
String
key)
Deprecated.
The instance specific getRequestProperty method
 should be used after an appropriate instance of URLConnection
 is obtained.
static boolean
URLConnection.
getDefaultUseCaches
(
String
protocol)
Returns the default value of the
useCaches
flag for the given protocol.
String
URLConnection.
getHeaderField
(
String
name)
Returns the value of the named header field.
long
URLConnection.
getHeaderFieldDate
(
String
name,
 long defaultValue)
Returns the value of the named field parsed as date.
int
URLConnection.
getHeaderFieldInt
(
String
name,
 int defaultValue)
Returns the value of the named field parsed as a number.
long
URLConnection.
getHeaderFieldLong
(
String
name,
 long defaultValue)
Returns the value of the named field parsed as a number.
String
URLConnection.
getRequestProperty
(
String
key)
Returns the value of the named general request property for this
 connection.
InputStream
URLClassLoader.
getResourceAsStream
(
String
name)
Returns an input stream for reading the specified resource.
static
String
URLConnection.
guessContentTypeFromName
(
String
fname)
Tries to determine the content type of an object, based
 on the specified "file" component of a URL.
static
UnixDomainSocketAddress
UnixDomainSocketAddress.
of
(
String
pathname)
Creates a UnixDomainSocketAddress from the given path string.
static
List
<
HttpCookie
>
HttpCookie.
parse
(
String
header)
Constructs cookies from set-cookie or set-cookie2 header string.
protected void
URLStreamHandler.
parseURL
(
URL
u,
String
spec,
 int start,
 int limit)
Parses the string representation of a
URL
into a
URL
object.
static
PasswordAuthentication
Authenticator.
requestPasswordAuthentication
(
String
host,
InetAddress
addr,
 int port,
String
protocol,
String
prompt,
String
scheme)
Ask the authenticator that has been registered with the system
 for a password.
static
PasswordAuthentication
Authenticator.
requestPasswordAuthentication
(
String
host,
InetAddress
addr,
 int port,
String
protocol,
String
prompt,
String
scheme,
URL
url,
Authenticator.RequestorType
reqType)
Ask the authenticator that has been registered with the system
 for a password.
static
PasswordAuthentication
Authenticator.
requestPasswordAuthentication
(
Authenticator
authenticator,
String
host,
InetAddress
addr,
 int port,
String
protocol,
String
prompt,
String
scheme,
URL
url,
Authenticator.RequestorType
reqType)
Ask the given
authenticator
for a password.
static
PasswordAuthentication
Authenticator.
requestPasswordAuthentication
(
InetAddress
addr,
 int port,
String
protocol,
String
prompt,
String
scheme)
Ask the authenticator that has been registered with the system
 for a password.
PasswordAuthentication
Authenticator.
requestPasswordAuthenticationInstance
(
String
host,
InetAddress
addr,
 int port,
String
protocol,
String
prompt,
String
scheme,
URL
url,
Authenticator.RequestorType
reqType)
Ask this authenticator for a password.
URI
URI.
resolve
(
String
str)
Constructs a new URI by parsing the given string and then resolving it
 against this URI.
void
HttpCookie.
setComment
(
String
purpose)
Specifies a comment that describes a cookie's purpose.
void
HttpCookie.
setCommentURL
(
String
purpose)
Specifies a comment URL that describes a cookie's purpose.
static void
URLConnection.
setDefaultRequestProperty
(
String
key,
String
value)
Deprecated.
The instance specific setRequestProperty method
 should be used after an appropriate instance of URLConnection
 is obtained.
static void
URLConnection.
setDefaultUseCaches
(
String
protocol,
 boolean defaultVal)
Sets the default value of the
useCaches
field for the named
 protocol to the given value.
void
HttpCookie.
setDomain
(
String
pattern)
Specifies the domain within which this cookie should be presented.
void
HttpCookie.
setPath
(
String
uri)
Specifies a path for the cookie to which the client should return
 the cookie.
void
HttpCookie.
setPortlist
(
String
ports)
Specify the portlist of the cookie, which restricts the port(s)
 to which a cookie may be sent back in a Cookie header.
void
HttpURLConnection.
setRequestMethod
(
String
method)
Set the method for the URL request, one of:
 
  GET
  POST
  HEAD
  OPTIONS
  PUT
  DELETE
  TRACE
  are legal, subject to protocol restrictions.
void
URLConnection.
setRequestProperty
(
String
key,
String
value)
Sets the general request property.
protected void
URLStreamHandler.
setURL
(
URL
u,
String
protocol,
String
host,
 int port,
String
file,
String
ref)
Deprecated.
Use setURL(URL, String, String, int, String, String, String,
             String);
protected void
URLStreamHandler.
setURL
(
URL
u,
String
protocol,
String
host,
 int port,
String
authority,
String
userInfo,
String
path,
String
query,
String
ref)
Sets the fields of the
URL
argument to the indicated values.
void
HttpCookie.
setValue
(
String
newValue)
Assigns a new value to a cookie after the cookie is created.
static
String
IDN.
toASCII
(
String
input)
Translates a string from Unicode to ASCII Compatible Encoding (ACE),
 as defined by the ToASCII operation of
RFC 3490
.
static
String
IDN.
toASCII
(
String
input,
 int flag)
Translates a string from Unicode to ASCII Compatible Encoding (ACE),
 as defined by the ToASCII operation of
RFC 3490
.
static
String
IDN.
toUnicode
(
String
input)
Translates a string from ASCII Compatible Encoding (ACE) to Unicode,
 as defined by the ToUnicode operation of
RFC 3490
.
static
String
IDN.
toUnicode
(
String
input,
 int flag)
Translates a string from ASCII Compatible Encoding (ACE) to Unicode,
 as defined by the ToUnicode operation of
RFC 3490
.
static
Authenticator.RequestorType
Authenticator.RequestorType.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
Proxy.Type
Proxy.Type.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
StandardProtocolFamily
StandardProtocolFamily.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Method parameters in
java.net
with type arguments of type
String
Modifier and Type
Method
Description
abstract
Map
<
String
,
List
<
String
>>
CookieHandler.
get
(
URI
uri,
Map
<
String
,
List
<
String
>> requestHeaders)
Gets all the applicable cookies from a cookie cache for the
 specified uri in the request header.
abstract
Map
<
String
,
List
<
String
>>
CookieHandler.
get
(
URI
uri,
Map
<
String
,
List
<
String
>> requestHeaders)
Gets all the applicable cookies from a cookie cache for the
 specified uri in the request header.
Map
<
String
,
List
<
String
>>
CookieManager.
get
(
URI
uri,
Map
<
String
,
List
<
String
>> requestHeaders)
Map
<
String
,
List
<
String
>>
CookieManager.
get
(
URI
uri,
Map
<
String
,
List
<
String
>> requestHeaders)
abstract
CacheResponse
ResponseCache.
get
(
URI
uri,
String
rqstMethod,
Map
<
String
,
List
<
String
>> rqstHeaders)
Retrieve the cached response based on the requesting uri,
 request method and request headers.
abstract
CacheResponse
ResponseCache.
get
(
URI
uri,
String
rqstMethod,
Map
<
String
,
List
<
String
>> rqstHeaders)
Retrieve the cached response based on the requesting uri,
 request method and request headers.
abstract void
CookieHandler.
put
(
URI
uri,
Map
<
String
,
List
<
String
>> responseHeaders)
Sets all the applicable cookies, examples are response header
 fields that are named Set-Cookie2, present in the response
 headers into a cookie cache.
abstract void
CookieHandler.
put
(
URI
uri,
Map
<
String
,
List
<
String
>> responseHeaders)
Sets all the applicable cookies, examples are response header
 fields that are named Set-Cookie2, present in the response
 headers into a cookie cache.
void
CookieManager.
put
(
URI
uri,
Map
<
String
,
List
<
String
>> responseHeaders)
void
CookieManager.
put
(
URI
uri,
Map
<
String
,
List
<
String
>> responseHeaders)
Constructors in
java.net
with parameters of type
String
Modifier
Constructor
Description
BindException
(
String
msg)
Constructs a new BindException with the specified detail
 message as to why the bind error occurred.
ConnectException
(
String
msg)
Constructs a new ConnectException with the specified detail
 message as to why the connect error occurred.
HttpCookie
(
String
name,
String
value)
Constructs a cookie with a specified name and value.
HttpRetryException
(
String
detail,
 int code)
Constructs a new
HttpRetryException
from the
 specified response code and exception detail message
HttpRetryException
(
String
detail,
 int code,
String
location)
Constructs a new
HttpRetryException
with detail message
 responseCode and the contents of the Location response header field.
InetSocketAddress
(
String
hostname,
 int port)
Creates a socket address from a hostname and a port number.
MalformedURLException
(
String
msg)
Constructs a
MalformedURLException
with the
 specified detail message.
NetPermission
(
String
name)
Creates a new NetPermission with the specified name.
NetPermission
(
String
name,
String
actions)
Creates a new NetPermission object with the specified name.
NoRouteToHostException
(
String
msg)
Constructs a new NoRouteToHostException with the specified detail
 message as to why the remote host cannot be reached.
PasswordAuthentication
(
String
userName,
 char[] password)
Creates a new
PasswordAuthentication
object from the given
 user name and password.
PortUnreachableException
(
String
msg)
Constructs a new
PortUnreachableException
with a
 detail message.
ProtocolException
(
String
message)
Constructs a new
ProtocolException
with the
 specified detail message.
Socket
(
String
host,
 int port)
Creates a stream socket and connects it to the specified port
 number on the named host.
Socket
(
String
host,
 int port,
 boolean stream)
Deprecated.
Use DatagramSocket instead for UDP transport.
Socket
(
String
host,
 int port,
InetAddress
localAddr,
 int localPort)
Creates a socket and connects it to the specified remote host on
 the specified remote port.
SocketException
(
String
msg)
Constructs a new
SocketException
with the
 specified detail message.
SocketException
(
String
msg,
Throwable
cause)
Constructs a new
SocketException
with the
 specified detail message and cause.
SocketPermission
(
String
host,
String
action)
Creates a new SocketPermission object with the specified actions.
SocketTimeoutException
(
String
msg)
Constructs a new SocketTimeoutException with a detail
 message.
UnknownHostException
(
String
message)
Constructs a new
UnknownHostException
with the
 specified detail message.
UnknownServiceException
(
String
msg)
Constructs a new
UnknownServiceException
with the
 specified detail message.
URI
(
String
str)
Constructs a URI by parsing the given string.
URI
(
String
scheme,
String
ssp,
String
fragment)
Constructs a URI from the given components.
URI
(
String
scheme,
String
userInfo,
String
host,
 int port,
String
path,
String
query,
String
fragment)
Constructs a hierarchical URI from the given components.
URI
(
String
scheme,
String
host,
String
path,
String
fragment)
Constructs a hierarchical URI from the given components.
URI
(
String
scheme,
String
authority,
String
path,
String
query,
String
fragment)
Constructs a hierarchical URI from the given components.
URISyntaxException
(
String
input,
String
reason)
Constructs an instance from the given input string and reason.
URISyntaxException
(
String
input,
String
reason,
 int index)
Constructs an instance from the given input string, reason, and error
 index.
URL
(
String
spec)
Deprecated.
Use
URI.toURL()
to construct an instance of URL.
URL
(
String
protocol,
String
host,
 int port,
String
file)
Deprecated.
Use
URI.toURL()
to construct an instance of URL.
URL
(
String
protocol,
String
host,
 int port,
String
file,
URLStreamHandler
handler)
Deprecated.
Use
URL.of(URI, URLStreamHandler)
to construct an instance of URL
 associated with a custom protocol handler.
URL
(
String
protocol,
String
host,
String
file)
Deprecated.
Use
URI.toURL()
to construct an instance of URL.
URL
(
URL
context,
String
spec)
Deprecated.
Use
URI.toURL()
to construct an instance of URL.
URL
(
URL
context,
String
spec,
URLStreamHandler
handler)
Deprecated.
Use
URL.of(URI, URLStreamHandler)
to construct an instance of URL
 associated with a custom protocol handler.
URLClassLoader
(
String
name,
URL
[] urls,
ClassLoader
parent)
Constructs a new named
URLClassLoader
for the specified URLs.
URLClassLoader
(
String
name,
URL
[] urls,
ClassLoader
parent,
URLStreamHandlerFactory
factory)
Constructs a new named
URLClassLoader
for the specified URLs,
 parent class loader, and URLStreamHandlerFactory.
URLPermission
(
String
url)
Creates a URLPermission with the given url string and unrestricted
 methods and request headers by invoking the two argument
 constructor as follows: URLPermission(url, "*:*")
URLPermission
(
String
url,
String
actions)
Creates a new URLPermission from a url string and which permits the given
 request methods and user-settable request headers.
Uses of
String
in
java.net.http
Methods in
java.net.http
with type parameters of type
String
Modifier and Type
Method
Description
static <S extends
Flow.Subscriber
<? super
String
>,
T>
HttpResponse.BodyHandler
<T>
HttpResponse.BodyHandlers.
fromLineSubscriber
(S subscriber,
Function
<? super S,
? extends T> finisher,
String
lineSeparator)
Returns a response body handler that returns a
BodySubscriber
<T>
obtained from
BodySubscribers.fromLineSubscriber(subscriber, finisher, charset, lineSeparator)
,
 with the given
subscriber
,
finisher
function, and line separator.
static <S extends
Flow.Subscriber
<? super
String
>,
T>
HttpResponse.BodySubscriber
<T>
HttpResponse.BodySubscribers.
fromLineSubscriber
(S subscriber,
Function
<? super S,
? extends T> finisher,
Charset
charset,
String
lineSeparator)
Returns a body subscriber that forwards all response body to the
 given
Flow.Subscriber
, line by line.
Methods in
java.net.http
that return
String
Modifier and Type
Method
Description
String
WebSocket.
getSubprotocol
()
Returns the subprotocol used by this WebSocket.
abstract
String
HttpRequest.
method
()
Returns the request method for this request.
String
HttpHeaders.
toString
()
Returns this HTTP headers as a string.
Methods in
java.net.http
that return types with arguments of type
String
Modifier and Type
Method
Description
List
<
String
>
HttpHeaders.
allValues
(
String
name)
Returns an unmodifiable List of all of the header string values of the
 given named header.
Optional
<
String
>
HttpHeaders.
firstValue
(
String
name)
Returns an
Optional
containing the first header string value of
 the given named (and possibly multi-valued) header.
Map
<
String
,
List
<
String
>>
HttpHeaders.
map
()
Returns an unmodifiable multi Map view of this HttpHeaders.
Map
<
String
,
List
<
String
>>
HttpHeaders.
map
()
Returns an unmodifiable multi Map view of this HttpHeaders.
static
HttpResponse.BodyHandler
<
Stream
<
String
>>
HttpResponse.BodyHandlers.
ofLines
()
Returns a
BodyHandler<Stream<String>>
that returns a
BodySubscriber
<Stream<String>>
obtained
 from
BodySubscribers.ofLines(charset)
.
static
HttpResponse.BodySubscriber
<
Stream
<
String
>>
HttpResponse.BodySubscribers.
ofLines
(
Charset
charset)
Returns a
BodySubscriber
which streams the response body as
 a
Stream
<String>
, where each string in the stream
 corresponds to a line as defined by
BufferedReader.lines()
.
static
HttpResponse.BodyHandler
<
String
>
HttpResponse.BodyHandlers.
ofString
()
Returns a
BodyHandler<String>
that returns a
BodySubscriber
<String>
obtained from
BodySubscribers.ofString(Charset)
.
static
HttpResponse.BodyHandler
<
String
>
HttpResponse.BodyHandlers.
ofString
(
Charset
charset)
Returns a
BodyHandler<String>
that returns a
BodySubscriber
<String>
obtained from
BodySubscribers.ofString(Charset)
.
static
HttpResponse.BodySubscriber
<
String
>
HttpResponse.BodySubscribers.
ofString
(
Charset
charset)
Returns a body subscriber which stores the response body as a
String
converted using the given
Charset
.
Methods in
java.net.http
with parameters of type
String
Modifier and Type
Method
Description
List
<
String
>
HttpHeaders.
allValues
(
String
name)
Returns an unmodifiable List of all of the header string values of the
 given named header.
Optional
<
String
>
HttpHeaders.
firstValue
(
String
name)
Returns an
Optional
containing the first header string value of
 the given named (and possibly multi-valued) header.
OptionalLong
HttpHeaders.
firstValueAsLong
(
String
name)
Returns an
OptionalLong
containing the first header string value
 of the named header field.
static <S extends
Flow.Subscriber
<? super
String
>,
T>
HttpResponse.BodyHandler
<T>
HttpResponse.BodyHandlers.
fromLineSubscriber
(S subscriber,
Function
<? super S,
? extends T> finisher,
String
lineSeparator)
Returns a response body handler that returns a
BodySubscriber
<T>
obtained from
BodySubscribers.fromLineSubscriber(subscriber, finisher, charset, lineSeparator)
,
 with the given
subscriber
,
finisher
function, and line separator.
static <S extends
Flow.Subscriber
<? super
String
>,
T>
HttpResponse.BodySubscriber
<T>
HttpResponse.BodySubscribers.
fromLineSubscriber
(S subscriber,
Function
<? super S,
? extends T> finisher,
Charset
charset,
String
lineSeparator)
Returns a body subscriber that forwards all response body to the
 given
Flow.Subscriber
, line by line.
HttpRequest.Builder
HttpRequest.Builder.
header
(
String
name,
String
value)
Adds the given name value pair to the set of headers for this request.
WebSocket.Builder
WebSocket.Builder.
header
(
String
name,
String
value)
Adds the given name-value pair to the list of additional HTTP headers
 sent during the opening handshake.
HttpRequest.Builder
HttpRequest.Builder.
headers
(
String
... headers)
Adds the given name value pairs to the set of headers for this
 request.
HttpRequest.Builder
HttpRequest.Builder.
method
(
String
method,
HttpRequest.BodyPublisher
bodyPublisher)
Sets the request method and request body of this builder to the
 given values.
static
HttpRequest.BodyPublisher
HttpRequest.BodyPublishers.
ofString
(
String
body)
Returns a request body publisher whose body is the given
String
, converted using the
UTF_8
character set.
static
HttpRequest.BodyPublisher
HttpRequest.BodyPublishers.
ofString
(
String
s,
Charset
charset)
Returns a request body publisher whose body is the given
String
, converted using the given character set.
default
CompletionStage
<?>
WebSocket.Listener.
onClose
(
WebSocket
webSocket,
 int statusCode,
String
reason)
Receives a Close message indicating the WebSocket's input has been
 closed.
CompletableFuture
<
WebSocket
>
WebSocket.
sendClose
(int statusCode,
String
reason)
Initiates an orderly closure of this WebSocket's output by
 sending a Close message with the given status code and the reason.
HttpRequest.Builder
HttpRequest.Builder.
setHeader
(
String
name,
String
value)
Sets the given name value pair to the set of headers for this
 request.
WebSocket.Builder
WebSocket.Builder.
subprotocols
(
String
mostPreferred,
String
... lesserPreferred)
Sets a request for the given subprotocols.
static
HttpClient.Redirect
HttpClient.Redirect.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
HttpClient.Version
HttpClient.Version.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Method parameters in
java.net.http
with type arguments of type
String
Modifier and Type
Method
Description
static
HttpResponse.BodyHandler
<
Void
>
HttpResponse.BodyHandlers.
fromLineSubscriber
(
Flow.Subscriber
<? super
String
> subscriber)
Returns a response body handler that returns a
BodySubscriber
<Void>
obtained from
BodySubscribers.fromLineSubscriber(subscriber, s -> null, charset, null)
,
 with the given
subscriber
.
static
HttpResponse.BodySubscriber
<
Void
>
HttpResponse.BodySubscribers.
fromLineSubscriber
(
Flow.Subscriber
<? super
String
> subscriber)
Returns a body subscriber that forwards all response body to the
 given
Flow.Subscriber
, line by line.
static
HttpRequest.Builder
HttpRequest.
newBuilder
(
HttpRequest
request,
BiPredicate
<
String
,
String
> filter)
Creates a
Builder
whose initial state is copied from an existing
HttpRequest
.
static
HttpRequest.Builder
HttpRequest.
newBuilder
(
HttpRequest
request,
BiPredicate
<
String
,
String
> filter)
Creates a
Builder
whose initial state is copied from an existing
HttpRequest
.
static
HttpHeaders
HttpHeaders.
of
(
Map
<
String
,
List
<
String
>> headerMap,
BiPredicate
<
String
,
String
> filter)
Returns an HTTP headers from the given map.
static
HttpHeaders
HttpHeaders.
of
(
Map
<
String
,
List
<
String
>> headerMap,
BiPredicate
<
String
,
String
> filter)
Returns an HTTP headers from the given map.
static
HttpHeaders
HttpHeaders.
of
(
Map
<
String
,
List
<
String
>> headerMap,
BiPredicate
<
String
,
String
> filter)
Returns an HTTP headers from the given map.
static
HttpHeaders
HttpHeaders.
of
(
Map
<
String
,
List
<
String
>> headerMap,
BiPredicate
<
String
,
String
> filter)
Returns an HTTP headers from the given map.
Constructors in
java.net.http
with parameters of type
String
Modifier
Constructor
Description
HttpConnectTimeoutException
(
String
message)
Constructs an
HttpConnectTimeoutException
with the given detail
 message.
HttpTimeoutException
(
String
message)
Constructs an
HttpTimeoutException
with the given detail message.
Uses of
String
in
java.net.spi
Methods in
java.net.spi
that return
String
Modifier and Type
Method
Description
String
InetAddressResolver.
lookupByAddress
(byte[] addr)
Lookup the host name corresponding to the raw IP address provided.
String
InetAddressResolverProvider.Configuration.
lookupLocalHostName
()
Reads the localhost name from the system configuration.
abstract
String
InetAddressResolverProvider.
name
()
Returns the name of this provider, or
null
if unnamed.
Methods in
java.net.spi
with parameters of type
String
Modifier and Type
Method
Description
Stream
<
InetAddress
>
InetAddressResolver.
lookupByName
(
String
host,
InetAddressResolver.LookupPolicy
lookupPolicy)
Given the name of a host, returns a stream of IP addresses of the requested
 address family associated with a provided hostname.
Uses of
String
in
java.nio
Methods in
java.nio
that return
String
Modifier and Type
Method
Description
String
ByteBuffer.
toString
()
Returns a string summarizing the state of this buffer.
String
ByteOrder.
toString
()
Constructs a string describing this object.
String
CharBuffer.
toString
()
Returns a string containing the characters in this buffer.
String
DoubleBuffer.
toString
()
Returns a string summarizing the state of this buffer.
String
FloatBuffer.
toString
()
Returns a string summarizing the state of this buffer.
String
IntBuffer.
toString
()
Returns a string summarizing the state of this buffer.
String
LongBuffer.
toString
()
Returns a string summarizing the state of this buffer.
String
ShortBuffer.
toString
()
Returns a string summarizing the state of this buffer.
Methods in
java.nio
with parameters of type
String
Modifier and Type
Method
Description
final
CharBuffer
CharBuffer.
put
(
String
src)
Relative bulk
put
method
(optional operation)
.
CharBuffer
CharBuffer.
put
(
String
src,
 int start,
 int end)
Relative bulk
put
method
(optional operation)
.
Uses of
String
in
java.nio.channels
Methods in
java.nio.channels
that return
String
Modifier and Type
Method
Description
String
FileChannel.MapMode.
toString
()
Returns a string describing this file-mapping mode.
final
String
FileLock.
toString
()
Returns a string describing the range, type, and validity of this lock.
Methods in
java.nio.channels
with parameters of type
String
Modifier and Type
Method
Description
static
Reader
Channels.
newReader
(
ReadableByteChannel
ch,
String
csName)
Constructs a reader that decodes bytes from the given channel according
 to the named charset.
static
Writer
Channels.
newWriter
(
WritableByteChannel
ch,
String
csName)
Constructs a writer that encodes characters according to the named
 charset and writes the resulting bytes to the given channel.
Uses of
String
in
java.nio.charset
Methods in
java.nio.charset
that return
String
Modifier and Type
Method
Description
String
Charset.
displayName
()
Returns this charset's human-readable name for the default locale.
String
Charset.
displayName
(
Locale
locale)
Returns this charset's human-readable name for the given locale.
String
IllegalCharsetNameException.
getCharsetName
()
Retrieves the illegal charset name.
String
UnsupportedCharsetException.
getCharsetName
()
Retrieves the name of the unsupported charset.
String
MalformedInputException.
getMessage
()
Returns the message.
String
UnmappableCharacterException.
getMessage
()
Returns the message.
final
String
Charset.
name
()
Returns this charset's canonical name.
final
String
CharsetDecoder.
replacement
()
Returns this decoder's replacement value.
final
String
Charset.
toString
()
Returns a string describing this charset.
String
CoderResult.
toString
()
Returns a string describing this coder result.
String
CodingErrorAction.
toString
()
Returns a string describing this action.
Methods in
java.nio.charset
that return types with arguments of type
String
Modifier and Type
Method
Description
final
Set
<
String
>
Charset.
aliases
()
Returns a set containing this charset's aliases.
static
SortedMap
<
String
,
Charset
>
Charset.
availableCharsets
()
Constructs a sorted map from canonical charset names to charset objects.
Methods in
java.nio.charset
with parameters of type
String
Modifier and Type
Method
Description
final
ByteBuffer
Charset.
encode
(
String
str)
Convenience method that encodes a string into bytes in this charset.
static
Charset
Charset.
forName
(
String
charsetName)
Returns a charset object for the named charset.
static
Charset
Charset.
forName
(
String
charsetName,
Charset
fallback)
Returns a charset object for the named charset.
protected void
CharsetDecoder.
implReplaceWith
(
String
newReplacement)
Reports a change to this decoder's replacement value.
static boolean
Charset.
isSupported
(
String
charsetName)
Tells whether the named charset is supported.
final
CharsetDecoder
CharsetDecoder.
replaceWith
(
String
newReplacement)
Changes this decoder's replacement value.
Constructors in
java.nio.charset
with parameters of type
String
Modifier
Constructor
Description
protected
Charset
(
String
canonicalName,
String
[] aliases)
Initializes a new charset with the given canonical name and alias
 set.
IllegalCharsetNameException
(
String
charsetName)
Constructs an instance of this class.
UnsupportedCharsetException
(
String
charsetName)
Constructs an instance of this class.
Uses of
String
in
java.nio.charset.spi
Methods in
java.nio.charset.spi
with parameters of type
String
Modifier and Type
Method
Description
abstract
Charset
CharsetProvider.
charsetForName
(
String
charsetName)
Retrieves a charset for the given charset name.
Uses of
String
in
java.nio.file
Methods in
java.nio.file
that return
String
Modifier and Type
Method
Description
String
FileSystemException.
getFile
()
Returns the file used to create this exception.
String
InvalidPathException.
getInput
()
Returns the input string.
String
FileSystemException.
getMessage
()
Returns the detail message string.
String
InvalidPathException.
getMessage
()
Returns a string describing the error.
String
FileSystemException.
getOtherFile
()
Returns the other file used to create this exception.
String
FileSystemException.
getReason
()
Returns the string explaining why the file system operation failed.
String
InvalidPathException.
getReason
()
Returns a string explaining why the input string was rejected.
abstract
String
FileSystem.
getSeparator
()
Returns the name separator, represented as a string.
abstract
String
FileStore.
name
()
Returns the name of this file store.
String
WatchEvent.Kind.
name
()
Returns the name of the event kind.
String
WatchEvent.Modifier.
name
()
Returns the name of the modifier.
static
String
Files.
probeContentType
(
Path
path)
Probes the content type of a file.
static
String
Files.
readString
(
Path
path)
Reads all content from a file into a string, decoding from bytes to characters
 using the
UTF-8
charset
.
static
String
Files.
readString
(
Path
path,
Charset
cs)
Reads all characters from a file into a string, decoding from bytes to characters
 using the specified
charset
.
String
Path.
toString
()
Returns the string representation of this path.
abstract
String
FileStore.
type
()
Returns the
type
of this file store.
Methods in
java.nio.file
that return types with arguments of type
String
Modifier and Type
Method
Description
static
Stream
<
String
>
Files.
lines
(
Path
path)
Read all lines from a file as a
Stream
.
static
Stream
<
String
>
Files.
lines
(
Path
path,
Charset
cs)
Read all lines from a file as a
Stream
.
static
List
<
String
>
Files.
readAllLines
(
Path
path)
Read all lines from a file.
static
List
<
String
>
Files.
readAllLines
(
Path
path,
Charset
cs)
Read all lines from a file.
static
Map
<
String
,
Object
>
Files.
readAttributes
(
Path
path,
String
attributes,
LinkOption
... options)
Reads a set of file attributes as a bulk operation.
abstract
Set
<
String
>
FileSystem.
supportedFileAttributeViews
()
Returns the set of the
names
of the file
 attribute views supported by this
FileSystem
.
Methods in
java.nio.file
with parameters of type
String
Modifier and Type
Method
Description
static
Path
Files.
createTempDirectory
(
String
prefix,
FileAttribute
<?>... attrs)
Creates a new directory in the default temporary-file directory, using
 the given prefix to generate its name.
static
Path
Files.
createTempDirectory
(
Path
dir,
String
prefix,
FileAttribute
<?>... attrs)
Creates a new directory in the specified directory, using the given
 prefix to generate its name.
static
Path
Files.
createTempFile
(
String
prefix,
String
suffix,
FileAttribute
<?>... attrs)
Creates an empty file in the default temporary-file directory, using
 the given prefix and suffix to generate its name.
static
Path
Files.
createTempFile
(
Path
dir,
String
prefix,
String
suffix,
FileAttribute
<?>... attrs)
Creates a new empty file in the specified directory, using the given
 prefix and suffix strings to generate its name.
default boolean
Path.
endsWith
(
String
other)
Tests if this path ends with a
Path
, constructed by converting
 the given path string, in exactly the manner specified by the
endsWith(Path)
method.
static
Path
Paths.
get
(
String
first,
String
... more)
Converts a path string, or a sequence of strings that when joined form
 a path string, to a
Path
.
static
Object
Files.
getAttribute
(
Path
path,
String
attribute,
LinkOption
... options)
Reads the value of a file attribute.
abstract
Object
FileStore.
getAttribute
(
String
attribute)
Reads the value of a file store attribute.
abstract
Path
FileSystem.
getPath
(
String
first,
String
... more)
Converts a path string, or a sequence of strings that when joined form
 a path string, to a
Path
.
abstract
PathMatcher
FileSystem.
getPathMatcher
(
String
syntaxAndPattern)
Returns a
PathMatcher
that performs match operations on the
String
representation of
Path
objects by interpreting a
 given pattern.
static
DirectoryStream
<
Path
>
Files.
newDirectoryStream
(
Path
dir,
String
glob)
Opens a directory, returning a
DirectoryStream
to iterate over
 the entries in the directory.
static
Path
Path.
of
(
String
first,
String
... more)
Returns a
Path
by converting a path string, or a sequence of
 strings that when joined form a path string.
static
Map
<
String
,
Object
>
Files.
readAttributes
(
Path
path,
String
attributes,
LinkOption
... options)
Reads a set of file attributes as a bulk operation.
default
Path
Path.
resolve
(
String
other)
Converts a given path string to a
Path
and resolves it against
 this
Path
in exactly the manner specified by the
resolve
method.
default
Path
Path.
resolveSibling
(
String
other)
Converts a given path string to a
Path
and resolves it against
 this path's
parent
path in exactly the manner
 specified by the
resolveSibling
method.
static
Path
Files.
setAttribute
(
Path
path,
String
attribute,
Object
value,
LinkOption
... options)
Sets the value of a file attribute.
default boolean
Path.
startsWith
(
String
other)
Tests if this path starts with a
Path
, constructed by converting
 the given path string, in exactly the manner specified by the
startsWith(Path)
method.
abstract boolean
FileStore.
supportsFileAttributeView
(
String
name)
Tells whether or not this file store supports the file attributes
 identified by the given file attribute view.
static
AccessMode
AccessMode.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
FileVisitOption
FileVisitOption.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
FileVisitResult
FileVisitResult.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
LinkOption
LinkOption.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
StandardCopyOption
StandardCopyOption.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
StandardOpenOption
StandardOpenOption.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Method parameters in
java.nio.file
with type arguments of type
String
Modifier and Type
Method
Description
static
FileSystem
FileSystems.
newFileSystem
(
URI
uri,
Map
<
String
,
?> env)
Constructs a new file system that is identified by a
URI
static
FileSystem
FileSystems.
newFileSystem
(
URI
uri,
Map
<
String
,
?> env,
ClassLoader
loader)
Constructs a new file system that is identified by a
URI
static
FileSystem
FileSystems.
newFileSystem
(
Path
path,
Map
<
String
,
?> env)
Constructs a new
FileSystem
to access the contents of a file as a
 file system.
static
FileSystem
FileSystems.
newFileSystem
(
Path
path,
Map
<
String
,
?> env,
ClassLoader
loader)
Constructs a new
FileSystem
to access the contents of a file as a
 file system.
Constructors in
java.nio.file
with parameters of type
String
Modifier
Constructor
Description
AccessDeniedException
(
String
file)
Constructs an instance of this class.
AccessDeniedException
(
String
file,
String
other,
String
reason)
Constructs an instance of this class.
AtomicMoveNotSupportedException
(
String
source,
String
target,
String
reason)
Constructs an instance of this class.
DirectoryNotEmptyException
(
String
dir)
Constructs an instance of this class.
FileAlreadyExistsException
(
String
file)
Constructs an instance of this class.
FileAlreadyExistsException
(
String
file,
String
other,
String
reason)
Constructs an instance of this class.
FileSystemAlreadyExistsException
(
String
msg)
Constructs an instance of this class.
FileSystemException
(
String
file)
Constructs an instance of this class.
FileSystemException
(
String
file,
String
other,
String
reason)
Constructs an instance of this class.
FileSystemLoopException
(
String
file)
Constructs an instance of this class.
FileSystemNotFoundException
(
String
msg)
Constructs an instance of this class.
InvalidPathException
(
String
input,
String
reason)
Constructs an instance from the given input string and reason.
InvalidPathException
(
String
input,
String
reason,
 int index)
Constructs an instance from the given input string, reason, and error
 index.
LinkPermission
(
String
name)
Constructs a
LinkPermission
with the specified name.
LinkPermission
(
String
name,
String
actions)
Constructs a
LinkPermission
with the specified name.
NoSuchFileException
(
String
file)
Constructs an instance of this class.
NoSuchFileException
(
String
file,
String
other,
String
reason)
Constructs an instance of this class.
NotDirectoryException
(
String
file)
Constructs an instance of this class.
NotLinkException
(
String
file)
Constructs an instance of this class.
NotLinkException
(
String
file,
String
other,
String
reason)
Constructs an instance of this class.
ProviderMismatchException
(
String
msg)
Constructs an instance of this class.
ProviderNotFoundException
(
String
msg)
Constructs an instance of this class.
Uses of
String
in
java.nio.file.attribute
Methods in
java.nio.file.attribute
that return
String
Modifier and Type
Method
Description
String
UserPrincipalNotFoundException.
getName
()
Returns the user principal name if this exception was created with the
 user principal name that was not found, otherwise
null
.
String
AclFileAttributeView.
name
()
Returns the name of the attribute view.
String
AttributeView.
name
()
Returns the name of the attribute view.
String
BasicFileAttributeView.
name
()
Returns the name of the attribute view.
String
DosFileAttributeView.
name
()
Returns the name of the attribute view.
String
FileAttribute.
name
()
Returns the attribute name.
String
FileOwnerAttributeView.
name
()
Returns the name of the attribute view.
String
PosixFileAttributeView.
name
()
Returns the name of the attribute view.
String
UserDefinedFileAttributeView.
name
()
Returns the name of this attribute view.
String
AclEntry.
toString
()
Returns the string representation of this ACL entry.
String
FileTime.
toString
()
Returns the string representation of this
FileTime
.
static
String
PosixFilePermissions.
toString
(
Set
<
PosixFilePermission
> perms)
Returns the
String
representation of a set of permissions.
Methods in
java.nio.file.attribute
that return types with arguments of type
String
Modifier and Type
Method
Description
List
<
String
>
UserDefinedFileAttributeView.
list
()
Returns a list containing the names of the user-defined attributes.
Methods in
java.nio.file.attribute
with parameters of type
String
Modifier and Type
Method
Description
void
UserDefinedFileAttributeView.
delete
(
String
name)
Deletes a user-defined attribute.
static
Set
<
PosixFilePermission
>
PosixFilePermissions.
fromString
(
String
perms)
Returns the set of permissions corresponding to a given
String
representation.
abstract
GroupPrincipal
UserPrincipalLookupService.
lookupPrincipalByGroupName
(
String
group)
Lookup a group principal by group name.
abstract
UserPrincipal
UserPrincipalLookupService.
lookupPrincipalByName
(
String
name)
Lookup a user principal by name.
int
UserDefinedFileAttributeView.
read
(
String
name,
ByteBuffer
dst)
Read the value of a user-defined attribute into a buffer.
int
UserDefinedFileAttributeView.
size
(
String
name)
Returns the size of the value of a user-defined attribute.
static
AclEntryFlag
AclEntryFlag.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
AclEntryPermission
AclEntryPermission.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
AclEntryType
AclEntryType.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
PosixFilePermission
PosixFilePermission.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
int
UserDefinedFileAttributeView.
write
(
String
name,
ByteBuffer
src)
Writes the value of a user-defined attribute from a buffer.
Constructors in
java.nio.file.attribute
with parameters of type
String
Modifier
Constructor
Description
UserPrincipalNotFoundException
(
String
name)
Constructs an instance of this class.
Uses of
String
in
java.nio.file.spi
Methods in
java.nio.file.spi
that return
String
Modifier and Type
Method
Description
abstract
String
FileSystemProvider.
getScheme
()
Returns the URI scheme that identifies this provider.
abstract
String
FileTypeDetector.
probeContentType
(
Path
path)
Probes the given file to guess its content type.
Methods in
java.nio.file.spi
that return types with arguments of type
String
Modifier and Type
Method
Description
abstract
Map
<
String
,
Object
>
FileSystemProvider.
readAttributes
(
Path
path,
String
attributes,
LinkOption
... options)
Reads a set of file attributes as a bulk operation.
Methods in
java.nio.file.spi
with parameters of type
String
Modifier and Type
Method
Description
abstract
Map
<
String
,
Object
>
FileSystemProvider.
readAttributes
(
Path
path,
String
attributes,
LinkOption
... options)
Reads a set of file attributes as a bulk operation.
abstract void
FileSystemProvider.
setAttribute
(
Path
path,
String
attribute,
Object
value,
LinkOption
... options)
Sets the value of a file attribute.
Method parameters in
java.nio.file.spi
with type arguments of type
String
Modifier and Type
Method
Description
abstract
FileSystem
FileSystemProvider.
newFileSystem
(
URI
uri,
Map
<
String
,
?> env)
Constructs a new
FileSystem
object identified by a URI.
FileSystem
FileSystemProvider.
newFileSystem
(
Path
path,
Map
<
String
,
?> env)
Constructs a new
FileSystem
to access the contents of a file as a
 file system.
Uses of
String
in
java.rmi
Methods in
java.rmi
that return
String
Modifier and Type
Method
Description
String
RemoteException.
getMessage
()
Returns the detail message, including the message from the cause, if
 any, of this exception.
static
String
[]
Naming.
list
(
String
name)
Returns an array of the names bound in the registry.
Methods in
java.rmi
with parameters of type
String
Modifier and Type
Method
Description
static void
Naming.
bind
(
String
name,
Remote
obj)
Binds the specified
name
to a remote object.
static
String
[]
Naming.
list
(
String
name)
Returns an array of the names bound in the registry.
static
Remote
Naming.
lookup
(
String
name)
Returns a reference, a stub, for the remote object associated
 with the specified
name
.
static void
Naming.
rebind
(
String
name,
Remote
obj)
Rebinds the specified name to a new remote object.
static void
Naming.
unbind
(
String
name)
Destroys the binding for the specified name that is associated
 with a remote object.
Constructors in
java.rmi
with parameters of type
String
Modifier
Constructor
Description
AccessException
(
String
s)
Constructs an
AccessException
with the specified
 detail message.
AccessException
(
String
s,
Exception
ex)
Constructs an
AccessException
with the specified
 detail message and nested exception.
AlreadyBoundException
(
String
s)
Constructs an
AlreadyBoundException
with the specified
 detail message.
ConnectException
(
String
s)
Constructs a
ConnectException
with the specified
 detail message.
ConnectException
(
String
s,
Exception
ex)
Constructs a
ConnectException
with the specified
 detail message and nested exception.
ConnectIOException
(
String
s)
Constructs a
ConnectIOException
with the specified
 detail message.
ConnectIOException
(
String
s,
Exception
ex)
Constructs a
ConnectIOException
with the specified
 detail message and nested exception.
MarshalException
(
String
s)
Constructs a
MarshalException
with the specified
 detail message.
MarshalException
(
String
s,
Exception
ex)
Constructs a
MarshalException
with the specified
 detail message and nested exception.
NoSuchObjectException
(
String
s)
Constructs a
NoSuchObjectException
with the specified
 detail message.
NotBoundException
(
String
s)
Constructs a
NotBoundException
with the specified
 detail message.
RemoteException
(
String
s)
Constructs a
RemoteException
with the specified
 detail message.
RemoteException
(
String
s,
Throwable
cause)
Constructs a
RemoteException
with the specified detail
 message and cause.
RMISecurityException
(
String
name)
Deprecated.
no replacement
RMISecurityException
(
String
name,
String
arg)
Deprecated.
no replacement
ServerError
(
String
s,
Error
err)
Constructs a
ServerError
with the specified
 detail message and nested error.
ServerException
(
String
s)
Constructs a
ServerException
with the specified
 detail message.
ServerException
(
String
s,
Exception
ex)
Constructs a
ServerException
with the specified
 detail message and nested exception.
ServerRuntimeException
(
String
s,
Exception
ex)
Deprecated.
no replacement
StubNotFoundException
(
String
s)
Constructs a
StubNotFoundException
with the specified
 detail message.
StubNotFoundException
(
String
s,
Exception
ex)
Constructs a
StubNotFoundException
with the specified
 detail message and nested exception.
UnexpectedException
(
String
s)
Constructs an
UnexpectedException
with the specified
 detail message.
UnexpectedException
(
String
s,
Exception
ex)
Constructs a
UnexpectedException
with the specified
 detail message and nested exception.
UnknownHostException
(
String
s)
Constructs an
UnknownHostException
with the specified
 detail message.
UnknownHostException
(
String
s,
Exception
ex)
Constructs an
UnknownHostException
with the specified
 detail message and nested exception.
UnmarshalException
(
String
s)
Constructs an
UnmarshalException
with the specified
 detail message.
UnmarshalException
(
String
s,
Exception
ex)
Constructs an
UnmarshalException
with the specified
 detail message and nested exception.
Uses of
String
in
java.rmi.dgc
Methods in
java.rmi.dgc
that return
String
Modifier and Type
Method
Description
String
VMID.
toString
()
Return string representation of this VMID.
Uses of
String
in
java.rmi.registry
Methods in
java.rmi.registry
that return
String
Modifier and Type
Method
Description
String
[]
Registry.
list
()
Returns an array of the names bound in this registry.
Methods in
java.rmi.registry
with parameters of type
String
Modifier and Type
Method
Description
void
Registry.
bind
(
String
name,
Remote
obj)
Binds a remote reference to the specified
name
in
 this registry.
static
Registry
LocateRegistry.
getRegistry
(
String
host)
Returns a reference to the remote object
Registry
on the
 specified
host
on the default registry port of 1099.
static
Registry
LocateRegistry.
getRegistry
(
String
host,
 int port)
Returns a reference to the remote object
Registry
on the
 specified
host
and
port
.
static
Registry
LocateRegistry.
getRegistry
(
String
host,
 int port,
RMIClientSocketFactory
csf)
Returns a locally created remote reference to the remote object
Registry
on the specified
host
and
port
.
Remote
Registry.
lookup
(
String
name)
Returns the remote reference bound to the specified
name
in this registry.
void
Registry.
rebind
(
String
name,
Remote
obj)
Replaces the binding for the specified
name
in
 this registry with the supplied remote reference.
Registry
RegistryHandler.
registryStub
(
String
host,
 int port)
Deprecated.
no replacement.
void
Registry.
unbind
(
String
name)
Removes the binding for the specified
name
in
 this registry.
Uses of
String
in
java.rmi.server
Fields in
java.rmi.server
declared as
String
Modifier and Type
Field
Description
static final
String
LoaderHandler.
packagePrefix
Deprecated.
package of system
LoaderHandler
implementation.
static final
String
RemoteRef.
packagePrefix
Initialize the server package prefix: assumes that the
 implementation of server ref classes (e.g., UnicastRef,
 UnicastServerRef) are located in the package defined by the
 prefix.
Methods in
java.rmi.server
that return
String
Modifier and Type
Method
Description
static
String
RMIClassLoader.
getClassAnnotation
(
Class
<?> cl)
Returns the annotation string (representing a location for
 the class definition) that RMI will use to annotate the class
 descriptor when marshalling objects of the given class.
abstract
String
RMIClassLoaderSpi.
getClassAnnotation
(
Class
<?> cl)
Provides the implementation for
RMIClassLoader.getClassAnnotation(Class)
.
static
String
RemoteServer.
getClientHost
()
Returns a string representation of the client host for the
 remote method invocation being processed in the current thread.
String
ServerRef.
getClientHost
()
Deprecated.
Returns the hostname of the current client.
String
ServerCloneException.
getMessage
()
Returns the detail message, including the message from the cause, if
 any, of this exception.
String
Operation.
getOperation
()
Deprecated.
no replacement
String
RemoteRef.
getRefClass
(
ObjectOutput
out)
Returns the class name of the ref type to be serialized onto
 the stream 'out'.
String
RemoteRef.
remoteToString
()
Returns a String that represents the reference of this remote
 object.
String
LogStream.
toString
()
Deprecated.
no replacement
String
ObjID.
toString
()
Returns a string representation of this object identifier.
String
Operation.
toString
()
Deprecated.
no replacement
String
RemoteObject.
toString
()
Returns a String that represents the value of this remote object.
String
UID.
toString
()
Returns a string representation of this
UID
.
Methods in
java.rmi.server
with parameters of type
String
Modifier and Type
Method
Description
Socket
RMIClientSocketFactory.
createSocket
(
String
host,
 int port)
Create a client socket connected to the specified host and port.
abstract
Socket
RMISocketFactory.
createSocket
(
String
host,
 int port)
Creates a client socket connected to the specified host and port.
static
ClassLoader
RMIClassLoader.
getClassLoader
(
String
codebase)
Returns a class loader that loads classes from the given codebase
 URL path.
abstract
ClassLoader
RMIClassLoaderSpi.
getClassLoader
(
String
codebase)
Provides the implementation for
RMIClassLoader.getClassLoader(String)
.
Class
<?>
LoaderHandler.
loadClass
(
String
name)
Deprecated.
no replacement
Class
<?>
LoaderHandler.
loadClass
(
URL
codebase,
String
name)
Deprecated.
no replacement
static
Class
<?>
RMIClassLoader.
loadClass
(
String
name)
Deprecated.
replaced by
loadClass(String,String)
method
static
Class
<?>
RMIClassLoader.
loadClass
(
String
codebase,
String
name)
Loads a class from a codebase URL path.
static
Class
<?>
RMIClassLoader.
loadClass
(
String
codebase,
String
name,
ClassLoader
defaultLoader)
Loads a class from a codebase URL path, optionally using the
 supplied loader.
static
Class
<?>
RMIClassLoader.
loadClass
(
URL
codebase,
String
name)
Loads a class from a codebase URL.
abstract
Class
<?>
RMIClassLoaderSpi.
loadClass
(
String
codebase,
String
name,
ClassLoader
defaultLoader)
Provides the implementation for
RMIClassLoader.loadClass(URL,String)
,
RMIClassLoader.loadClass(String,String)
, and
RMIClassLoader.loadClass(String,String,ClassLoader)
.
static
Class
<?>
RMIClassLoader.
loadProxyClass
(
String
codebase,
String
[] interfaces,
ClassLoader
defaultLoader)
Loads a dynamic proxy class (see
Proxy
)
 that implements a set of interfaces with the given names
 from a codebase URL path.
abstract
Class
<?>
RMIClassLoaderSpi.
loadProxyClass
(
String
codebase,
String
[] interfaces,
ClassLoader
defaultLoader)
Provides the implementation for
RMIClassLoader.loadProxyClass(String,String[],ClassLoader)
.
static
LogStream
LogStream.
log
(
String
name)
Deprecated.
no replacement
static int
LogStream.
parseLevel
(
String
s)
Deprecated.
no replacement
Constructors in
java.rmi.server
with parameters of type
String
Modifier
Constructor
Description
ExportException
(
String
s)
Constructs an
ExportException
with the specified
 detail message.
ExportException
(
String
s,
Exception
ex)
Constructs an
ExportException
with the specified
 detail message and nested exception.
Operation
(
String
op)
Deprecated.
no replacement
ServerCloneException
(
String
s)
Constructs a
ServerCloneException
with the specified
 detail message.
ServerCloneException
(
String
s,
Exception
cause)
Constructs a
ServerCloneException
with the specified
 detail message and cause.
ServerNotActiveException
(
String
s)
Constructs an
ServerNotActiveException
with the specified
 detail message.
SkeletonMismatchException
(
String
s)
Deprecated.
no replacement
SkeletonNotFoundException
(
String
s)
Deprecated.
Constructs a
SkeletonNotFoundException
with the specified
 detail message.
SkeletonNotFoundException
(
String
s,
Exception
ex)
Deprecated.
Constructs a
SkeletonNotFoundException
with the specified
 detail message and nested exception.
SocketSecurityException
(
String
s)
Deprecated.
Constructs an
SocketSecurityException
with the specified
 detail message.
SocketSecurityException
(
String
s,
Exception
ex)
Deprecated.
Constructs an
SocketSecurityException
with the specified
 detail message and nested exception.
Uses of
String
in
java.security
Methods in
java.security
that return
String
Modifier and Type
Method
Description
abstract
String
KeyStoreSpi.
engineGetCertificateAlias
(
Certificate
cert)
Returns the (alias) name of the first keystore entry whose certificate
 matches the given certificate.
protected abstract
String
AlgorithmParametersSpi.
engineToString
()
Returns a formatted string describing the parameters.
String
AllPermission.
getActions
()
Returns the canonical string representation of the actions.
String
BasicPermission.
getActions
()
Returns the canonical string representation of the actions,
 which currently is the empty string "", since there are no actions for
 a
BasicPermission
.
abstract
String
Permission.
getActions
()
Returns the actions as a
String
.
String
UnresolvedPermission.
getActions
()
Returns the canonical string representation of the actions,
 which currently is the empty string "", since there are no actions for
 an
UnresolvedPermission
.
final
String
AlgorithmParameterGenerator.
getAlgorithm
()
Returns the standard name of the algorithm this parameter
 generator is associated with.
final
String
AlgorithmParameters.
getAlgorithm
()
Returns the name of the algorithm associated with this parameter object.
String
Key.
getAlgorithm
()
Returns the standard algorithm name for this key.
final
String
KeyFactory.
getAlgorithm
()
Gets the name of the algorithm
 associated with this
KeyFactory
.
String
KeyPairGenerator.
getAlgorithm
()
Returns the standard name of the algorithm for this key pair generator.
final
String
MessageDigest.
getAlgorithm
()
Returns a string that identifies the algorithm, independent of
 implementation details.
final
String
Provider.Service.
getAlgorithm
()
Return the name of the algorithm of this service.
String
SecureRandom.
getAlgorithm
()
Returns the name of the algorithm implemented by this
SecureRandom
object.
final
String
Signature.
getAlgorithm
()
Returns the name of the algorithm for this
Signature
object.
String
SignedObject.
getAlgorithm
()
Retrieves the name of the signature algorithm.
static
String
Security.
getAlgorithmProperty
(
String
algName,
String
propName)
Deprecated.
This method used to return the value of a proprietary
 property in the master file of the "SUN" Cryptographic Service
 Provider in order to determine how to parse algorithm-specific
 parameters.
final
String
Provider.Service.
getAttribute
(
String
name)
Return the value of the specified attribute or
null
if this
 attribute is not set for this Service.
final
String
KeyStore.
getCertificateAlias
(
Certificate
cert)
Returns the (alias) name of the first keystore entry whose certificate
 matches the given certificate.
final
String
Provider.Service.
getClassName
()
Return the name of the class implementing this service.
static final
String
KeyStore.
getDefaultType
()
Returns the default keystore type as specified by the
keystore.type
security property, or the string
 "jks" (acronym for "Java keystore")
 if no such property exists.
String
Certificate.
getFormat
()
Deprecated, for removal: This API element is subject to removal in a future version.
Returns the name of the coding format.
String
Key.
getFormat
()
Returns the name of the primary encoding format of this key,
 or
null
if this key does not support encoding.
String
Identity.
getInfo
()
Deprecated, for removal: This API element is subject to removal in a future version.
Returns general information previously specified for this
Identity
.
String
Provider.
getInfo
()
Returns a human-readable description of the
Provider
and its
 services.
final
String
Identity.
getName
()
Deprecated, for removal: This API element is subject to removal in a future version.
Returns this identity's name.
String
KeyStore.Entry.Attribute.
getName
()
Returns the attribute's name.
final
String
Permission.
getName
()
Returns the name of this
Permission
.
String
PKCS12Attribute.
getName
()
Returns the attribute's ASN.1 Object Identifier represented as a
 list of dot-separated integers.
String
Principal.
getName
()
Returns the name of this
Principal
.
String
Provider.
getName
()
Returns the name of this
Provider
.
static
String
Security.
getProperty
(
String
key)
Gets a security property value.
String
KeyStore.PasswordProtection.
getProtectionAlgorithm
()
Gets the name of the protection algorithm.
final
String
KeyStore.
getType
()
Returns the type of this keystore.
String
Policy.
getType
()
Deprecated, for removal: This API element is subject to removal in a future version.
Return the type of this
Policy
.
final
String
Provider.Service.
getType
()
Get the type of this service.
String
UnresolvedPermission.
getUnresolvedActions
()
Get the actions for the underlying permission that
 has not been resolved.
String
UnresolvedPermission.
getUnresolvedName
()
Get the target name of the underlying permission that
 has not been resolved.
String
UnresolvedPermission.
getUnresolvedType
()
Get the type (class name) of the underlying permission that
 has not been resolved.
String
KeyStore.Entry.Attribute.
getValue
()
Returns the attribute's value.
String
PKCS12Attribute.
getValue
()
Returns the attribute's ASN.1 DER-encoded value as a string.
String
Provider.
getVersionStr
()
Returns the version string for this
Provider
.
final
String
AlgorithmParameters.
toString
()
Returns a formatted string describing the parameters.
String
Certificate.
toString
(boolean detailed)
Deprecated, for removal: This API element is subject to removal in a future version.
Returns a string that represents the contents of the certificate.
String
CodeSigner.
toString
()
Returns a string describing this code signer.
String
CodeSource.
toString
()
Returns a string describing this
CodeSource
, telling its
 URL and certificates.
String
DigestInputStream.
toString
()
Prints a string representation of this digest input stream and
 its associated message digest object.
String
DigestOutputStream.
toString
()
Prints a string representation of this digest output stream and
 its associated message digest object.
String
DrbgParameters.Instantiation.
toString
()
Returns a Human-readable string representation of this
Instantiation
.
String
Identity.
toString
()
Deprecated, for removal: This API element is subject to removal in a future version.
Returns a short string describing this
Identity
, telling its
 name and its scope (if any).
String
Identity.
toString
(boolean detailed)
Deprecated, for removal: This API element is subject to removal in a future version.
Returns a string representation of this
Identity
, with
 optionally more details than that provided by the
toString
method without any arguments.
String
IdentityScope.
toString
()
Deprecated, for removal: This API element is subject to removal in a future version.
Returns a string representation of this identity scope, including
 its name, its scope name, and the number of identities in this
 identity scope.
String
KeyStore.PrivateKeyEntry.
toString
()
Returns a string representation of this PrivateKeyEntry.
String
KeyStore.SecretKeyEntry.
toString
()
Returns a string representation of this SecretKeyEntry.
String
KeyStore.TrustedCertificateEntry.
toString
()
Returns a string representation of this TrustedCertificateEntry.
String
MessageDigest.
toString
()
Returns a string representation of this message digest object.
String
Permission.
toString
()
Returns a string describing this
Permission
.
String
PermissionCollection.
toString
()
Returns a string describing this
PermissionCollection
object,
 providing information about all the permissions it contains.
String
PKCS12Attribute.
toString
()
Returns a string representation of this
PKCS12Attribute
.
String
Principal.
toString
()
Returns a string representation of this
Principal
.
String
ProtectionDomain.
toString
()
Convert a
ProtectionDomain
to a
String
.
String
Provider.Service.
toString
()
Return a
String
representation of this service.
String
Provider.
toString
()
Returns a string with the name and the version string
 of this
Provider
.
String
SecureRandom.
toString
()
Returns a Human-readable string representation of this
SecureRandom
.
String
SecureRandomSpi.
toString
()
Returns a Human-readable string representation of this
SecureRandom
.
String
Signature.
toString
()
Returns a string representation of this
Signature
object,
 providing information that includes the state of the object
 and the name of the algorithm used.
String
Signer.
toString
()
Deprecated, for removal: This API element is subject to removal in a future version.
Returns a string of information about the
Signer
.
String
Timestamp.
toString
()
Returns a string describing this
Timestamp
.
String
UnresolvedPermission.
toString
()
Returns a string describing this
UnresolvedPermission
.
Methods in
java.security
that return types with arguments of type
String
Modifier and Type
Method
Description
final
Enumeration
<
String
>
KeyStore.
aliases
()
Lists all the alias names of this keystore.
abstract
Enumeration
<
String
>
KeyStoreSpi.
engineAliases
()
Lists all the alias names of this keystore.
static
Set
<
String
>
Security.
getAlgorithms
(
String
serviceName)
Returns a Set of
String
objects containing the names of all
 available algorithms or types for the specified Java cryptographic
 service (e.g.,
Signature
,
MessageDigest
,
Cipher
,
Mac
,
KeyStore
).
Map
<
String
,
KeyStore.ProtectionParameter
>
DomainLoadStoreParameter.
getProtectionParams
()
Gets the keystore protection parameters for keystores in this
 domain.
Methods in
java.security
with parameters of type
String
Modifier and Type
Method
Description
Provider
Provider.
configure
(
String
configArg)
Apply the supplied configuration argument to this
Provider
instance and return the configured
Provider
.
final boolean
KeyStore.
containsAlias
(
String
alias)
Checks if the given alias exists in this keystore.
protected final
Class
<?>
SecureClassLoader.
defineClass
(
String
name,
 byte[] b,
 int off,
 int len,
CodeSource
cs)
Converts an array of bytes into an instance of class
Class
,
 with an optional CodeSource.
protected final
Class
<?>
SecureClassLoader.
defineClass
(
String
name,
ByteBuffer
b,
CodeSource
cs)
Converts a
ByteBuffer
into an instance of class
Class
, with an optional CodeSource.
final void
KeyStore.
deleteEntry
(
String
alias)
Deletes the entry identified by the given alias from this keystore.
abstract boolean
KeyStoreSpi.
engineContainsAlias
(
String
alias)
Checks if the given alias exists in this keystore.
abstract void
KeyStoreSpi.
engineDeleteEntry
(
String
alias)
Deletes the entry identified by the given alias from this keystore.
boolean
KeyStoreSpi.
engineEntryInstanceOf
(
String
alias,
Class
<? extends
KeyStore.Entry
> entryClass)
Determines if the keystore
Entry
for the specified
alias
is an instance or subclass of the specified
entryClass
.
Set
<
KeyStore.Entry.Attribute
>
KeyStoreSpi.
engineGetAttributes
(
String
alias)
Retrieves the attributes associated with the given alias.
abstract
Certificate
KeyStoreSpi.
engineGetCertificate
(
String
alias)
Returns the certificate associated with the given alias.
abstract
Certificate
[]
KeyStoreSpi.
engineGetCertificateChain
(
String
alias)
Returns the certificate chain associated with the given alias.
abstract
Date
KeyStoreSpi.
engineGetCreationDate
(
String
alias)
Returns the creation date of the entry identified by the given alias.
protected abstract byte[]
AlgorithmParametersSpi.
engineGetEncoded
(
String
format)
Returns the parameters encoded in the specified format.
KeyStore.Entry
KeyStoreSpi.
engineGetEntry
(
String
alias,
KeyStore.ProtectionParameter
protParam)
Gets a
KeyStore.Entry
for the specified alias
 with the specified protection parameter.
abstract
Key
KeyStoreSpi.
engineGetKey
(
String
alias,
 char[] password)
Returns the key associated with the given alias, using the given
 password to recover it.
protected abstract
Object
SignatureSpi.
engineGetParameter
(
String
param)
Deprecated.
protected abstract void
AlgorithmParametersSpi.
engineInit
(byte[] params,
String
format)
Imports the parameters from
params
and
 decodes them according to the specified decoding format.
abstract boolean
KeyStoreSpi.
engineIsCertificateEntry
(
String
alias)
Returns
true
if the entry identified by the given alias
 was created by a call to
setCertificateEntry
,
 or created by a call to
setEntry
with a
TrustedCertificateEntry
.
abstract boolean
KeyStoreSpi.
engineIsKeyEntry
(
String
alias)
Returns
true
if the entry identified by the given alias
 was created by a call to
setKeyEntry
,
 or created by a call to
setEntry
with a
PrivateKeyEntry
or a
SecretKeyEntry
.
abstract void
KeyStoreSpi.
engineSetCertificateEntry
(
String
alias,
Certificate
cert)
Assigns the given certificate to the given alias.
void
KeyStoreSpi.
engineSetEntry
(
String
alias,
KeyStore.Entry
entry,
KeyStore.ProtectionParameter
protParam)
Saves a
KeyStore.Entry
under the specified alias.
abstract void
KeyStoreSpi.
engineSetKeyEntry
(
String
alias,
 byte[] key,
Certificate
[] chain)
Assigns the given key (that has already been protected) to the given
 alias.
abstract void
KeyStoreSpi.
engineSetKeyEntry
(
String
alias,
Key
key,
 char[] password,
Certificate
[] chain)
Assigns the given key to the given alias, protecting it with the given
 password.
protected abstract void
SignatureSpi.
engineSetParameter
(
String
param,
Object
value)
Deprecated.
Replaced by
engineSetParameter
.
final boolean
KeyStore.
entryInstanceOf
(
String
alias,
Class
<? extends
KeyStore.Entry
> entryClass)
Determines if the keystore
Entry
for the specified
alias
is an instance or subclass of the specified
entryClass
.
static
String
Security.
getAlgorithmProperty
(
String
algName,
String
propName)
Deprecated.
This method used to return the value of a proprietary
 property in the master file of the "SUN" Cryptographic Service
 Provider in order to determine how to parse algorithm-specific
 parameters.
static
Set
<
String
>
Security.
getAlgorithms
(
String
serviceName)
Returns a Set of
String
objects containing the names of all
 available algorithms or types for the specified Java cryptographic
 service (e.g.,
Signature
,
MessageDigest
,
Cipher
,
Mac
,
KeyStore
).
final
String
Provider.Service.
getAttribute
(
String
name)
Return the value of the specified attribute or
null
if this
 attribute is not set for this Service.
final
Set
<
KeyStore.Entry.Attribute
>
KeyStore.
getAttributes
(
String
alias)
Retrieves the attributes associated with the given alias.
final
Certificate
KeyStore.
getCertificate
(
String
alias)
Returns the certificate associated with the given alias.
final
Certificate
[]
KeyStore.
getCertificateChain
(
String
alias)
Returns the certificate chain associated with the given alias.
final
Date
KeyStore.
getCreationDate
(
String
alias)
Returns the creation date of the entry identified by the given alias.
final byte[]
AlgorithmParameters.
getEncoded
(
String
format)
Returns the parameters encoded in the specified scheme.
final
KeyStore.Entry
KeyStore.
getEntry
(
String
alias,
KeyStore.ProtectionParameter
protParam)
Gets a keystore
Entry
for the specified alias
 with the specified protection parameter.
abstract
Identity
IdentityScope.
getIdentity
(
String
name)
Deprecated, for removal: This API element is subject to removal in a future version.
Returns the
Identity
in this scope with the specified
 name (if any).
static
AlgorithmParameterGenerator
AlgorithmParameterGenerator.
getInstance
(
String
algorithm)
Returns an
AlgorithmParameterGenerator
object for generating
 a set of parameters to be used with the specified algorithm.
static
AlgorithmParameterGenerator
AlgorithmParameterGenerator.
getInstance
(
String
algorithm,
String
provider)
Returns an
AlgorithmParameterGenerator
object for generating
 a set of parameters to be used with the specified algorithm.
static
AlgorithmParameterGenerator
AlgorithmParameterGenerator.
getInstance
(
String
algorithm,
Provider
provider)
Returns an
AlgorithmParameterGenerator
object for generating
 a set of parameters to be used with the specified algorithm.
static
AlgorithmParameters
AlgorithmParameters.
getInstance
(
String
algorithm)
Returns a parameter object for the specified algorithm.
static
AlgorithmParameters
AlgorithmParameters.
getInstance
(
String
algorithm,
String
provider)
Returns a parameter object for the specified algorithm.
static
AlgorithmParameters
AlgorithmParameters.
getInstance
(
String
algorithm,
Provider
provider)
Returns a parameter object for the specified algorithm.
static
KeyFactory
KeyFactory.
getInstance
(
String
algorithm)
Returns a
KeyFactory
object that converts
 public/private keys of the specified algorithm.
static
KeyFactory
KeyFactory.
getInstance
(
String
algorithm,
String
provider)
Returns a
KeyFactory
object that converts
 public/private keys of the specified algorithm.
static
KeyFactory
KeyFactory.
getInstance
(
String
algorithm,
Provider
provider)
Returns a
KeyFactory
object that converts
 public/private keys of the specified algorithm.
static
KeyPairGenerator
KeyPairGenerator.
getInstance
(
String
algorithm)
Returns a
KeyPairGenerator
object that generates public/private
 key pairs for the specified algorithm.
static
KeyPairGenerator
KeyPairGenerator.
getInstance
(
String
algorithm,
String
provider)
Returns a
KeyPairGenerator
object that generates public/private
 key pairs for the specified algorithm.
static
KeyPairGenerator
KeyPairGenerator.
getInstance
(
String
algorithm,
Provider
provider)
Returns a
KeyPairGenerator
object that generates public/private
 key pairs for the specified algorithm.
static
KeyStore
KeyStore.
getInstance
(
String
type)
Returns a
KeyStore
object of the specified type.
static
KeyStore
KeyStore.
getInstance
(
String
type,
String
provider)
Returns a
KeyStore
object of the specified type.
static
KeyStore
KeyStore.
getInstance
(
String
type,
Provider
provider)
Returns a
KeyStore
object of the specified type.
static
MessageDigest
MessageDigest.
getInstance
(
String
algorithm)
Returns a
MessageDigest
object that implements the specified
 digest algorithm.
static
MessageDigest
MessageDigest.
getInstance
(
String
algorithm,
String
provider)
Returns a
MessageDigest
object that implements the specified
 digest algorithm.
static
MessageDigest
MessageDigest.
getInstance
(
String
algorithm,
Provider
provider)
Returns a
MessageDigest
object that implements the specified
 digest algorithm.
static
Policy
Policy.
getInstance
(
String
type,
Policy.Parameters
params)
Deprecated, for removal: This API element is subject to removal in a future version.
Returns a Policy object of the specified type.
static
Policy
Policy.
getInstance
(
String
type,
Policy.Parameters
params,
String
provider)
Deprecated, for removal: This API element is subject to removal in a future version.
Returns a
Policy
object of the specified type.
static
Policy
Policy.
getInstance
(
String
type,
Policy.Parameters
params,
Provider
provider)
Deprecated, for removal: This API element is subject to removal in a future version.
Returns a
Policy
object of the specified type.
static
SecureRandom
SecureRandom.
getInstance
(
String
algorithm)
Returns a
SecureRandom
object that implements the specified
 Random Number Generator (RNG) algorithm.
static
SecureRandom
SecureRandom.
getInstance
(
String
algorithm,
String
provider)
Returns a
SecureRandom
object that implements the specified
 Random Number Generator (RNG) algorithm.
static
SecureRandom
SecureRandom.
getInstance
(
String
algorithm,
Provider
provider)
Returns a
SecureRandom
object that implements the specified
 Random Number Generator (RNG) algorithm.
static
SecureRandom
SecureRandom.
getInstance
(
String
algorithm,
SecureRandomParameters
params)
Returns a
SecureRandom
object that implements the specified
 Random Number Generator (RNG) algorithm and supports the specified
SecureRandomParameters
request.
static
SecureRandom
SecureRandom.
getInstance
(
String
algorithm,
SecureRandomParameters
params,
String
provider)
Returns a
SecureRandom
object that implements the specified
 Random Number Generator (RNG) algorithm and supports the specified
SecureRandomParameters
request.
static
SecureRandom
SecureRandom.
getInstance
(
String
algorithm,
SecureRandomParameters
params,
Provider
provider)
Returns a
SecureRandom
object that implements the specified
 Random Number Generator (RNG) algorithm and supports the specified
SecureRandomParameters
request.
static
Signature
Signature.
getInstance
(
String
algorithm)
Returns a
Signature
object that implements the specified
 signature algorithm.
static
Signature
Signature.
getInstance
(
String
algorithm,
String
provider)
Returns a
Signature
object that implements the specified
 signature algorithm.
static
Signature
Signature.
getInstance
(
String
algorithm,
Provider
provider)
Returns a
Signature
object that implements the specified
 signature algorithm.
final
Key
KeyStore.
getKey
(
String
alias,
 char[] password)
Returns the key associated with the given alias, using the given
 password to recover it.
final
Object
Signature.
getParameter
(
String
param)
Deprecated.
static
String
Security.
getProperty
(
String
key)
Gets a security property value.
abstract
KeyStore.ProtectionParameter
KeyStore.Builder.
getProtectionParameter
(
String
alias)
Returns the
ProtectionParameter
that should be used to obtain
 the
Entry
with the given alias.
static
Provider
Security.
getProvider
(
String
name)
Returns the provider installed with the specified name, if
 any.
static
Provider
[]
Security.
getProviders
(
String
filter)
Returns an array containing all installed providers that satisfy the
 specified selection criterion, or
null
if no such providers
 have been installed.
Provider.Service
Provider.
getService
(
String
type,
String
algorithm)
Get the service describing this Provider's implementation of the
 specified type of this algorithm or alias.
final void
AlgorithmParameters.
init
(byte[] params,
String
format)
Imports the parameters from
params
and decodes them
 according to the specified decoding scheme.
final boolean
KeyStore.
isCertificateEntry
(
String
alias)
Returns
true
if the entry identified by the given alias
 was created by a call to
setCertificateEntry
,
 or created by a call to
setEntry
with a
TrustedCertificateEntry
.
final boolean
KeyStore.
isKeyEntry
(
String
alias)
Returns
true
if the entry identified by the given alias
 was created by a call to
setKeyEntry
,
 or created by a call to
setEntry
with a
PrivateKeyEntry
or a
SecretKeyEntry
.
static
KeyStore.Builder
KeyStore.Builder.
newInstance
(
String
type,
Provider
provider,
File
file,
KeyStore.ProtectionParameter
protection)
Returns a new
Builder
object.
static
KeyStore.Builder
KeyStore.Builder.
newInstance
(
String
type,
Provider
provider,
KeyStore.ProtectionParameter
protection)
Returns a new
Builder
object.
boolean
AlgorithmConstraints.
permits
(
Set
<
CryptoPrimitive
> primitives,
String
algorithm,
AlgorithmParameters
parameters)
Determines whether an algorithm is granted permission for the
 specified cryptographic primitives.
boolean
AlgorithmConstraints.
permits
(
Set
<
CryptoPrimitive
> primitives,
String
algorithm,
Key
key,
AlgorithmParameters
parameters)
Determines whether an algorithm and the corresponding key are granted
 permission for the specified cryptographic primitives.
static void
Security.
removeProvider
(
String
name)
Removes the provider with the specified name.
final void
KeyStore.
setCertificateEntry
(
String
alias,
Certificate
cert)
Assigns the given trusted certificate to the given alias.
final void
KeyStore.
setEntry
(
String
alias,
KeyStore.Entry
entry,
KeyStore.ProtectionParameter
protParam)
Saves a keystore
Entry
under the specified alias.
void
Identity.
setInfo
(
String
info)
Deprecated, for removal: This API element is subject to removal in a future version.
Specifies a general information string for this
Identity
.
final void
KeyStore.
setKeyEntry
(
String
alias,
 byte[] key,
Certificate
[] chain)
Assigns the given key (that has already been protected) to the given
 alias.
final void
KeyStore.
setKeyEntry
(
String
alias,
Key
key,
 char[] password,
Certificate
[] chain)
Assigns the given key to the given alias, protecting it with the given
 password.
final void
Signature.
setParameter
(
String
param,
Object
value)
Deprecated.
Use
setParameter
.
static void
Security.
setProperty
(
String
key,
String
datum)
Sets a security property value.
static
CryptoPrimitive
CryptoPrimitive.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
DrbgParameters.Capability
DrbgParameters.Capability.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
KeyRep.Type
KeyRep.Type.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Method parameters in
java.security
with type arguments of type
String
Modifier and Type
Method
Description
static
Provider
[]
Security.
getProviders
(
Map
<
String
,
String
> filter)
Returns an array containing all installed providers that satisfy the
 specified selection criteria, or
null
if no such providers have
 been installed.
static
Provider
[]
Security.
getProviders
(
Map
<
String
,
String
> filter)
Returns an array containing all installed providers that satisfy the
 specified selection criteria, or
null
if no such providers have
 been installed.
Constructors in
java.security
with parameters of type
String
Modifier
Constructor
Description
AccessControlException
(
String
s)
Deprecated, for removal: This API element is subject to removal in a future version.
Constructs an
AccessControlException
with the
 specified, detailed message.
AccessControlException
(
String
s,
Permission
p)
Deprecated, for removal: This API element is subject to removal in a future version.
Constructs an
AccessControlException
with the
 specified, detailed message, and the requested permission that caused
 the exception.
protected
AlgorithmParameterGenerator
(
AlgorithmParameterGeneratorSpi
paramGenSpi,
Provider
provider,
String
algorithm)
Creates an
AlgorithmParameterGenerator
object.
protected
AlgorithmParameters
(
AlgorithmParametersSpi
paramSpi,
Provider
provider,
String
algorithm)
Creates an
AlgorithmParameters
object.
AllPermission
(
String
name,
String
actions)
Creates a new
AllPermission
object.
protected
AuthProvider
(
String
name,
 double version,
String
info)
Deprecated.
use
AuthProvider(String, String, String)
instead.
protected
AuthProvider
(
String
name,
String
versionStr,
String
info)
Constructs a provider with the specified name, version string,
 and information.
BasicPermission
(
String
name)
Creates a new
BasicPermission
with the specified name.
BasicPermission
(
String
name,
String
actions)
Creates a new
BasicPermission
object with the specified name.
DigestException
(
String
msg)
Constructs a
DigestException
with the specified detail
 message.
DigestException
(
String
message,
Throwable
cause)
Creates a
DigestException
with the specified
 detail message and cause.
GeneralSecurityException
(
String
msg)
Constructs a
GeneralSecurityException
with the specified detail
 message.
GeneralSecurityException
(
String
message,
Throwable
cause)
Creates a
GeneralSecurityException
with the specified
 detail message and cause.
Identity
(
String
name)
Deprecated, for removal: This API element is subject to removal in a future version.
Constructs an
Identity
with the specified name and no scope.
Identity
(
String
name,
IdentityScope
scope)
Deprecated, for removal: This API element is subject to removal in a future version.
Constructs an
Identity
with the specified name and scope.
IdentityScope
(
String
name)
Deprecated, for removal: This API element is subject to removal in a future version.
Constructs a new identity scope with the specified name.
IdentityScope
(
String
name,
IdentityScope
scope)
Deprecated, for removal: This API element is subject to removal in a future version.
Constructs a new identity scope with the specified name and scope.
InvalidAlgorithmParameterException
(
String
msg)
Constructs an
InvalidAlgorithmParameterException
with the
 specified detail message.
InvalidAlgorithmParameterException
(
String
message,
Throwable
cause)
Creates an
InvalidAlgorithmParameterException
with the
 specified detail message and cause.
InvalidKeyException
(
String
msg)
Constructs an
InvalidKeyException
with the specified detail
 message.
InvalidKeyException
(
String
message,
Throwable
cause)
Creates an
InvalidKeyException
with the specified
 detail message and cause.
InvalidParameterException
(
String
msg)
Constructs an
InvalidParameterException
with the specified
 detail message.
InvalidParameterException
(
String
msg,
Throwable
cause)
Constructs an
InvalidParameterException
with the specified
 detail message and cause.
KeyException
(
String
msg)
Constructs a
KeyException
with the specified detail message.
KeyException
(
String
message,
Throwable
cause)
Creates a
KeyException
with the specified
 detail message and cause.
protected
KeyFactory
(
KeyFactorySpi
keyFacSpi,
Provider
provider,
String
algorithm)
Creates a
KeyFactory
object.
KeyManagementException
(
String
msg)
Constructs a
KeyManagementException
with the specified detail
 message.
KeyManagementException
(
String
message,
Throwable
cause)
Creates a
KeyManagementException
with the specified
 detail message and cause.
protected
KeyPairGenerator
(
String
algorithm)
Creates a
KeyPairGenerator
object for the specified algorithm.
KeyRep
(
KeyRep.Type
type,
String
algorithm,
String
format,
 byte[] encoded)
Construct the alternate Key class.
protected
KeyStore
(
KeyStoreSpi
keyStoreSpi,
Provider
provider,
String
type)
Creates a
KeyStore
object of the given type, and encapsulates
 the given provider implementation (SPI object) in it.
KeyStoreException
(
String
msg)
Constructs a
KeyStoreException
with the specified detail
 message.
KeyStoreException
(
String
message,
Throwable
cause)
Creates a
KeyStoreException
with the specified
 detail message and cause.
protected
MessageDigest
(
String
algorithm)
Creates a message digest with the specified algorithm name.
NoSuchAlgorithmException
(
String
msg)
Constructs a
NoSuchAlgorithmException
with the specified
 detail message.
NoSuchAlgorithmException
(
String
message,
Throwable
cause)
Creates a
NoSuchAlgorithmException
with the specified
 detail message and cause.
NoSuchProviderException
(
String
msg)
Constructs a
NoSuchProviderException
with the specified detail
 message.
PasswordProtection
(char[] password,
String
protectionAlgorithm,
AlgorithmParameterSpec
protectionParameters)
Creates a password parameter and specifies the protection algorithm
 and associated parameters to use when encrypting a keystore entry.
Permission
(
String
name)
Constructs a permission with the specified name.
PKCS12Attribute
(
String
name,
String
value)
Constructs a PKCS12 attribute from its name and value.
protected
Provider
(
String
name,
 double version,
String
info)
Deprecated.
use
Provider(String, String, String)
instead.
protected
Provider
(
String
name,
String
versionStr,
String
info)
Constructs a
Provider
with the specified name, version string,
 and information.
ProviderException
(
String
s)
Constructs a
ProviderException
with the specified detail
 message.
ProviderException
(
String
message,
Throwable
cause)
Creates a
ProviderException
with the specified
 detail message and cause.
protected
SecureClassLoader
(
String
name,
ClassLoader
parent)
Creates a new
SecureClassLoader
of the specified name and
 using the specified parent class loader for delegation.
SecurityPermission
(
String
name)
Creates a new
SecurityPermission
with the specified name.
SecurityPermission
(
String
name,
String
actions)
Creates a new
SecurityPermission
object with the specified name.
Service
(
Provider
provider,
String
type,
String
algorithm,
String
className,
List
<
String
> aliases,
Map
<
String
,
String
> attributes)
Construct a new service.
protected
Signature
(
String
algorithm)
Creates a
Signature
object for the specified algorithm.
SignatureException
(
String
msg)
Constructs a
SignatureException
with the specified detail
 message.
SignatureException
(
String
message,
Throwable
cause)
Creates a
SignatureException
with the specified
 detail message and cause.
Signer
(
String
name)
Deprecated, for removal: This API element is subject to removal in a future version.
Creates a
Signer
with the specified identity name.
Signer
(
String
name,
IdentityScope
scope)
Deprecated, for removal: This API element is subject to removal in a future version.
Creates a
Signer
with the specified identity name and scope.
UnrecoverableEntryException
(
String
msg)
Constructs an
UnrecoverableEntryException
with the specified
 detail message, which provides more information about why this exception
 has been thrown.
UnrecoverableKeyException
(
String
msg)
Constructs an
UnrecoverableKeyException
with the specified detail
 message, which provides more information about why this exception
 has been thrown.
UnresolvedPermission
(
String
type,
String
name,
String
actions,
Certificate
[] certs)
Creates a new
UnresolvedPermission
containing the permission
 information needed later to actually create a Permission of the
 specified class, when the permission is resolved.
Constructor parameters in
java.security
with type arguments of type
String
Modifier
Constructor
Description
DomainLoadStoreParameter
(
URI
configuration,
Map
<
String
,
KeyStore.ProtectionParameter
> protectionParams)
Constructs a
DomainLoadStoreParameter
for a keystore domain with
 the parameters used to protect keystore data.
Service
(
Provider
provider,
String
type,
String
algorithm,
String
className,
List
<
String
> aliases,
Map
<
String
,
String
> attributes)
Construct a new service.
Service
(
Provider
provider,
String
type,
String
algorithm,
String
className,
List
<
String
> aliases,
Map
<
String
,
String
> attributes)
Construct a new service.
Service
(
Provider
provider,
String
type,
String
algorithm,
String
className,
List
<
String
> aliases,
Map
<
String
,
String
> attributes)
Construct a new service.
Uses of
String
in
java.security.cert
Methods in
java.security.cert
that return
String
Modifier and Type
Method
Description
final
String
CertPathBuilder.
getAlgorithm
()
Returns the name of the algorithm of this
CertPathBuilder
.
final
String
CertPathValidator.
getAlgorithm
()
Returns the algorithm name of this
CertPathValidator
.
final
String
TrustAnchor.
getCAName
()
Returns the name of the most-trusted CA in RFC 2253
String
format.
static final
String
CertPathBuilder.
getDefaultType
()
Returns the default
CertPathBuilder
type as specified by
 the
certpathbuilder.type
security property, or the string
 "PKIX" if no such property exists.
static final
String
CertPathValidator.
getDefaultType
()
Returns the default
CertPathValidator
type as specified by
 the
certpathvalidator.type
security property, or the string
 "PKIX" if no such property exists.
static final
String
CertStore.
getDefaultType
()
Returns the default
CertStore
type as specified by the
certstore.type
security property, or the string
 "LDAP" if no such property exists.
String
Extension.
getId
()
Gets the extensions's object identifier.
String
X509CertSelector.
getIssuerAsString
()
Deprecated.
Use
X509CertSelector.getIssuer()
or
X509CertSelector.getIssuerAsBytes()
instead.
final
String
PolicyQualifierInfo.
getPolicyQualifierId
()
Returns the
policyQualifierId
field of this
PolicyQualifierInfo
.
String
LDAPCertStoreParameters.
getServerName
()
Returns the DNS name of the LDAP server.
abstract
String
X509Certificate.
getSigAlgName
()
Gets the signature algorithm name for the certificate
 signature algorithm.
abstract
String
X509CRL.
getSigAlgName
()
Gets the signature algorithm name for the CRL
 signature algorithm.
abstract
String
X509Certificate.
getSigAlgOID
()
Gets the signature algorithm OID string from the certificate.
abstract
String
X509CRL.
getSigAlgOID
()
Gets the signature algorithm OID string from the CRL.
String
PKIXParameters.
getSigProvider
()
Returns the signature provider's name, or
null
if not set.
String
X509CertSelector.
getSubjectAsString
()
Deprecated.
Use
X509CertSelector.getSubject()
or
X509CertSelector.getSubjectAsBytes()
instead.
String
X509CertSelector.
getSubjectPublicKeyAlgID
()
Returns the subjectPublicKeyAlgID criterion.
final
String
Certificate.
getType
()
Returns the type of this certificate.
final
String
CertificateFactory.
getType
()
Returns the name of the certificate type associated with this
 certificate factory.
String
CertPath.
getType
()
Returns the type of
Certificate
s in this certification
 path.
final
String
CertStore.
getType
()
Returns the type of this
CertStore
.
final
String
CRL.
getType
()
Returns the type of this CRL.
String
PolicyNode.
getValidPolicy
()
Returns the valid policy represented by this node.
abstract
String
Certificate.
toString
()
Returns a string representation of this certificate.
String
CertPath.
toString
()
Returns a string representation of this certification path.
String
CollectionCertStoreParameters.
toString
()
Returns a formatted string describing the parameters.
abstract
String
CRL.
toString
()
Returns a string representation of this CRL.
String
LDAPCertStoreParameters.
toString
()
Returns a formatted string describing the parameters.
String
PKIXBuilderParameters.
toString
()
Returns a formatted string describing the parameters.
String
PKIXCertPathBuilderResult.
toString
()
Return a printable representation of this
PKIXCertPathBuilderResult
.
String
PKIXCertPathValidatorResult.
toString
()
Return a printable representation of this
PKIXCertPathValidatorResult
.
String
PKIXParameters.
toString
()
Returns a formatted string describing the parameters.
String
PolicyQualifierInfo.
toString
()
Return a printable representation of this
PolicyQualifierInfo
.
String
TrustAnchor.
toString
()
Returns a formatted string describing the
TrustAnchor
.
String
URICertStoreParameters.
toString
()
Returns a formatted string describing the parameters
 including the URI used to construct this object.
String
X509CertSelector.
toString
()
Return a printable representation of the
CertSelector
.
abstract
String
X509CRLEntry.
toString
()
Returns a string representation of this CRL entry.
String
X509CRLSelector.
toString
()
Returns a printable representation of the
X509CRLSelector
.
Methods in
java.security.cert
that return types with arguments of type
String
Modifier and Type
Method
Description
Iterator
<
String
>
CertificateFactorySpi.
engineGetCertPathEncodings
()
Returns an iteration of the
CertPath
encodings supported
 by this certificate factory, with the default encoding first.
final
Iterator
<
String
>
CertificateFactory.
getCertPathEncodings
()
Returns an iteration of the
CertPath
encodings supported
 by this certificate factory, with the default encoding first.
Set
<
String
>
X509Extension.
getCriticalExtensionOIDs
()
Gets a Set of the OID strings for the extension(s) marked
 CRITICAL in the certificate/CRL managed by the object
 implementing this interface.
abstract
Iterator
<
String
>
CertPath.
getEncodings
()
Returns an iteration of the encodings supported by this certification
 path, with the default encoding first.
Set
<
String
>
PolicyNode.
getExpectedPolicies
()
Returns the set of expected policies that would satisfy this
 node's valid policy in the next certificate to be processed.
List
<
String
>
X509Certificate.
getExtendedKeyUsage
()
Gets an unmodifiable list of Strings representing the OBJECT
 IDENTIFIERs of the
ExtKeyUsageSyntax
field of the
 extended key usage extension, (OID = 2.5.29.37).
Set
<
String
>
X509CertSelector.
getExtendedKeyUsage
()
Returns the extendedKeyUsage criterion.
Map
<
String
,
Extension
>
CertificateRevokedException.
getExtensions
()
Returns a map of X.509 extensions containing additional information
 about the revoked certificate, such as the Invalidity Date
 Extension.
Set
<
String
>
PKIXParameters.
getInitialPolicies
()
Returns an immutable
Set
of initial
 policy identifiers (OID strings), indicating that any one of these
 policies would be acceptable to the certificate user for the purposes of
 certification path processing.
Set
<
String
>
X509Extension.
getNonCriticalExtensionOIDs
()
Gets a Set of the OID strings for the extension(s) marked
 NON-CRITICAL in the certificate/CRL managed by the object
 implementing this interface.
Set
<
String
>
X509CertSelector.
getPolicy
()
Returns the policy criterion.
abstract
Set
<
String
>
PKIXCertPathChecker.
getSupportedExtensions
()
Returns an immutable
Set
of X.509 certificate extensions
 that this
PKIXCertPathChecker
supports (i.e. recognizes, is
 able to process), or
null
if no extensions are supported.
Methods in
java.security.cert
with parameters of type
String
Modifier and Type
Method
Description
void
X509CRLSelector.
addIssuerName
(
String
name)
Deprecated.
Use
X509CRLSelector.addIssuer(X500Principal)
or
X509CRLSelector.addIssuerName(byte[])
instead.
void
X509CertSelector.
addPathToName
(int type,
String
name)
Adds a name to the pathToNames criterion.
void
X509CertSelector.
addSubjectAlternativeName
(int type,
String
name)
Adds a name to the subjectAlternativeNames criterion.
CertPath
CertificateFactorySpi.
engineGenerateCertPath
(
InputStream
inStream,
String
encoding)
Generates a
CertPath
object and initializes it with
 the data read from the
InputStream
inStream.
final
CertPath
CertificateFactory.
generateCertPath
(
InputStream
inStream,
String
encoding)
Generates a
CertPath
object and initializes it with
 the data read from the
InputStream
inStream.
abstract byte[]
CertPath.
getEncoded
(
String
encoding)
Returns the encoded form of this certification path, using the
 specified encoding.
byte[]
X509Extension.
getExtensionValue
(
String
oid)
Gets the DER-encoded OCTET string for the extension value
 (
extnValue
) identified by the passed-in
oid
String.
static final
CertificateFactory
CertificateFactory.
getInstance
(
String
type)
Returns a certificate factory object that implements the
 specified certificate type.
static final
CertificateFactory
CertificateFactory.
getInstance
(
String
type,
String
provider)
Returns a certificate factory object for the specified
 certificate type.
static final
CertificateFactory
CertificateFactory.
getInstance
(
String
type,
Provider
provider)
Returns a certificate factory object for the specified
 certificate type.
static
CertPathBuilder
CertPathBuilder.
getInstance
(
String
algorithm)
Returns a
CertPathBuilder
object that implements the
 specified algorithm.
static
CertPathBuilder
CertPathBuilder.
getInstance
(
String
algorithm,
String
provider)
Returns a
CertPathBuilder
object that implements the
 specified algorithm.
static
CertPathBuilder
CertPathBuilder.
getInstance
(
String
algorithm,
Provider
provider)
Returns a
CertPathBuilder
object that implements the
 specified algorithm.
static
CertPathValidator
CertPathValidator.
getInstance
(
String
algorithm)
Returns a
CertPathValidator
object that implements the
 specified algorithm.
static
CertPathValidator
CertPathValidator.
getInstance
(
String
algorithm,
String
provider)
Returns a
CertPathValidator
object that implements the
 specified algorithm.
static
CertPathValidator
CertPathValidator.
getInstance
(
String
algorithm,
Provider
provider)
Returns a
CertPathValidator
object that implements the
 specified algorithm.
static
CertStore
CertStore.
getInstance
(
String
type,
CertStoreParameters
params)
Returns a
CertStore
object that implements the specified
CertStore
type and is initialized with the specified
 parameters.
static
CertStore
CertStore.
getInstance
(
String
type,
CertStoreParameters
params,
String
provider)
Returns a
CertStore
object that implements the specified
CertStore
type.
static
CertStore
CertStore.
getInstance
(
String
type,
CertStoreParameters
params,
Provider
provider)
Returns a
CertStore
object that implements the specified
CertStore
type.
void
X509CertSelector.
setIssuer
(
String
issuerDN)
Deprecated.
Use
X509CertSelector.setIssuer(X500Principal)
or
X509CertSelector.setIssuer(byte[])
instead.
void
PKIXParameters.
setSigProvider
(
String
sigProvider)
Sets the signature provider's name.
void
X509CertSelector.
setSubject
(
String
subjectDN)
Deprecated.
Use
X509CertSelector.setSubject(X500Principal)
or
X509CertSelector.setSubject(byte[])
instead.
void
X509CertSelector.
setSubjectPublicKeyAlgID
(
String
oid)
Sets the subjectPublicKeyAlgID criterion.
static
CertPathValidatorException.BasicReason
CertPathValidatorException.BasicReason.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
CRLReason
CRLReason.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
PKIXReason
PKIXReason.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
PKIXRevocationChecker.Option
PKIXRevocationChecker.Option.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
abstract void
Certificate.
verify
(
PublicKey
key,
String
sigProvider)
Verifies that this certificate was signed using the
 private key that corresponds to the specified public key.
abstract void
X509CRL.
verify
(
PublicKey
key,
String
sigProvider)
Verifies that this CRL was signed using the
 private key that corresponds to the given public key.
Method parameters in
java.security.cert
with type arguments of type
String
Modifier and Type
Method
Description
abstract void
PKIXCertPathChecker.
check
(
Certificate
cert,
Collection
<
String
> unresolvedCritExts)
Performs the check(s) on the specified certificate using its internal
 state and removes any critical extensions that it processes from the
 specified collection of OID strings that represent the unresolved
 critical extensions.
void
X509CertSelector.
setExtendedKeyUsage
(
Set
<
String
> keyPurposeSet)
Sets the extendedKeyUsage criterion.
void
PKIXParameters.
setInitialPolicies
(
Set
<
String
> initialPolicies)
Sets the
Set
of initial policy identifiers
 (OID strings), indicating that any one of these
 policies would be acceptable to the certificate user for the purposes of
 certification path processing.
void
X509CertSelector.
setPolicy
(
Set
<
String
> certPolicySet)
Sets the policy constraint.
Constructors in
java.security.cert
with parameters of type
String
Modifier
Constructor
Description
protected
Certificate
(
String
type)
Creates a certificate of the specified type.
CertificateEncodingException
(
String
message)
Constructs a CertificateEncodingException with the specified detail
 message.
CertificateEncodingException
(
String
message,
Throwable
cause)
Creates a
CertificateEncodingException
with the specified
 detail message and cause.
CertificateException
(
String
msg)
Constructs a certificate exception with the given detail
 message.
CertificateException
(
String
message,
Throwable
cause)
Creates a
CertificateException
with the specified
 detail message and cause.
CertificateExpiredException
(
String
message)
Constructs a CertificateExpiredException with the specified detail
 message.
protected
CertificateFactory
(
CertificateFactorySpi
certFacSpi,
Provider
provider,
String
type)
Creates a CertificateFactory object of the given type, and encapsulates
 the given provider implementation (SPI object) in it.
CertificateNotYetValidException
(
String
message)
Constructs a CertificateNotYetValidException with the specified detail
 message.
CertificateParsingException
(
String
message)
Constructs a CertificateParsingException with the specified detail
 message.
CertificateParsingException
(
String
message,
Throwable
cause)
Creates a
CertificateParsingException
with the specified
 detail message and cause.
protected
CertificateRep
(
String
type,
 byte[] data)
Construct the alternate
Certificate
class with the
Certificate
type and
Certificate
encoding bytes.
protected
CertPath
(
String
type)
Creates a
CertPath
of the specified type.
protected
CertPathBuilder
(
CertPathBuilderSpi
builderSpi,
Provider
provider,
String
algorithm)
Creates a
CertPathBuilder
object of the given algorithm,
 and encapsulates the given provider implementation (SPI object) in it.
CertPathBuilderException
(
String
msg)
Creates a
CertPathBuilderException
with the given
 detail message.
CertPathBuilderException
(
String
msg,
Throwable
cause)
Creates a
CertPathBuilderException
with the specified
 detail message and cause.
protected
CertPathRep
(
String
type,
 byte[] data)
Creates a
CertPathRep
with the specified
 type and encoded form of a certification path.
protected
CertPathValidator
(
CertPathValidatorSpi
validatorSpi,
Provider
provider,
String
algorithm)
Creates a
CertPathValidator
object of the given algorithm,
 and encapsulates the given provider implementation (SPI object) in it.
CertPathValidatorException
(
String
msg)
Creates a
CertPathValidatorException
with the given
 detail message.
CertPathValidatorException
(
String
msg,
Throwable
cause)
Creates a
CertPathValidatorException
with the specified
 detail message and cause.
CertPathValidatorException
(
String
msg,
Throwable
cause,
CertPath
certPath,
 int index)
Creates a
CertPathValidatorException
with the specified
 detail message, cause, certification path, and index.
CertPathValidatorException
(
String
msg,
Throwable
cause,
CertPath
certPath,
 int index,
CertPathValidatorException.Reason
reason)
Creates a
CertPathValidatorException
with the specified
 detail message, cause, certification path, index, and reason.
protected
CertStore
(
CertStoreSpi
storeSpi,
Provider
provider,
String
type,
CertStoreParameters
params)
Creates a
CertStore
object of the given type, and
 encapsulates the given provider implementation (SPI object) in it.
CertStoreException
(
String
msg)
Creates a
CertStoreException
with the given detail
 message.
CertStoreException
(
String
msg,
Throwable
cause)
Creates a
CertStoreException
with the specified detail
 message and cause.
protected
CRL
(
String
type)
Creates a CRL of the specified type.
CRLException
(
String
message)
Constructs a CRLException with the specified detail
 message.
CRLException
(
String
message,
Throwable
cause)
Creates a
CRLException
with the specified
 detail message and cause.
LDAPCertStoreParameters
(
String
serverName)
Creates an instance of
LDAPCertStoreParameters
with the
 specified server name and a default port of 389.
LDAPCertStoreParameters
(
String
serverName,
 int port)
Creates an instance of
LDAPCertStoreParameters
with the
 specified parameter values.
TrustAnchor
(
String
caName,
PublicKey
pubKey,
 byte[] nameConstraints)
Creates an instance of
TrustAnchor
where the
 most-trusted CA is specified as a distinguished name and public key.
Constructor parameters in
java.security.cert
with type arguments of type
String
Modifier
Constructor
Description
CertificateRevokedException
(
Date
revocationDate,
CRLReason
reason,
X500Principal
authority,
Map
<
String
,
Extension
> extensions)
Constructs a
CertificateRevokedException
with
 the specified revocation date, reason code, authority name, and map
 of extensions.
Uses of
String
in
java.security.spec
Methods in
java.security.spec
that return
String
Modifier and Type
Method
Description
String
EncodedKeySpec.
getAlgorithm
()
Returns the name of the algorithm of the encoded key.
String
MGF1ParameterSpec.
getDigestAlgorithm
()
Returns the algorithm name of the message digest used by the mask
 generation function.
String
PSSParameterSpec.
getDigestAlgorithm
()
Returns the message digest algorithm name.
abstract
String
EncodedKeySpec.
getFormat
()
Returns the name of the encoding format associated with this
 key specification.
final
String
PKCS8EncodedKeySpec.
getFormat
()
Returns the name of the encoding format associated with this
 key specification.
final
String
X509EncodedKeySpec.
getFormat
()
Returns the name of the encoding format associated with this
 key specification.
String
PSSParameterSpec.
getMGFAlgorithm
()
Returns the mask generation function algorithm name.
String
NamedParameterSpec.
getName
()
Returns the standard name that determines the algorithm parameters.
Constructors in
java.security.spec
with parameters of type
String
Modifier
Constructor
Description
ECGenParameterSpec
(
String
stdName)
Creates a parameter specification for EC parameter
 generation using a standard (or predefined) name
stdName
in order to generate the corresponding
 (precomputed) elliptic curve domain parameters.
protected
EncodedKeySpec
(byte[] encodedKey,
String
algorithm)
Creates a new
EncodedKeySpec
with the given encoded key.
InvalidKeySpecException
(
String
msg)
Constructs an InvalidKeySpecException with the specified detail
 message.
InvalidKeySpecException
(
String
message,
Throwable
cause)
Creates an
InvalidKeySpecException
with the specified
 detail message and cause.
InvalidParameterSpecException
(
String
msg)
Constructs an InvalidParameterSpecException with the specified detail
 message.
MGF1ParameterSpec
(
String
mdName)
Constructs a parameter set for mask generation function MGF1
 as defined in the PKCS #1 standard.
NamedParameterSpec
(
String
stdName)
Creates a parameter specification using a standard (or predefined)
 name
stdName
.
PKCS8EncodedKeySpec
(byte[] encodedKey,
String
algorithm)
Creates a new
PKCS8EncodedKeySpec
with the given encoded key and
 algorithm.
PSSParameterSpec
(
String
mdName,
String
mgfName,
AlgorithmParameterSpec
mgfSpec,
 int saltLen,
 int trailerField)
Creates a new
PSSParameterSpec
as defined in
 the PKCS #1 standard using the specified message digest,
 mask generation function, parameters for mask generation
 function, salt length, and trailer field values.
X509EncodedKeySpec
(byte[] encodedKey,
String
algorithm)
Creates a new
X509EncodedKeySpec
with the given encoded key.
Uses of
String
in
java.sql
Fields in
java.sql
declared as
String
Modifier and Type
Field
Description
String
[]
DriverPropertyInfo.
choices
An array of possible values if the value for the field
DriverPropertyInfo.value
may be selected
 from a particular set of values; otherwise null.
String
DriverPropertyInfo.
description
A brief description of the property, which may be null.
String
DriverPropertyInfo.
name
The name of the property.
String
DriverPropertyInfo.
value
The
value
field specifies the current value of
 the property, based on a combination of the information
 supplied to the method
getPropertyInfo
, the
 Java environment, and the driver-supplied default values.
Methods in
java.sql
that return
String
Modifier and Type
Method
Description
default
String
Statement.
enquoteIdentifier
(
String
identifier,
 boolean alwaysQuote)
Returns a SQL identifier.
default
String
Statement.
enquoteLiteral
(
String
val)
Returns a
String
enclosed in single quotes.
default
String
Statement.
enquoteNCharLiteral
(
String
val)
Returns a
String
representing a National Character Set Literal
 enclosed in single quotes and prefixed with a upper case letter N.
String
Array.
getBaseTypeName
()
Retrieves the SQL type name of the elements in
 the array designated by this
Array
object.
String
Ref.
getBaseTypeName
()
Retrieves the fully-qualified SQL name of the SQL structured type that
 this
Ref
object references.
String
Connection.
getCatalog
()
Retrieves this
Connection
object's current catalog name.
String
ResultSetMetaData.
getCatalogName
(int column)
Gets the designated column's table's catalog name.
String
DatabaseMetaData.
getCatalogSeparator
()
Retrieves the
String
that this database uses as the
 separator between a catalog and table name.
String
DatabaseMetaData.
getCatalogTerm
()
Retrieves the database vendor's preferred term for "catalog".
String
Connection.
getClientInfo
(
String
name)
Returns the value of the client info property specified by name.
String
ResultSetMetaData.
getColumnClassName
(int column)
Returns the fully-qualified name of the Java class whose instances
 are manufactured if the method
ResultSet.getObject
is called to retrieve a value
 from the column.
String
ResultSetMetaData.
getColumnLabel
(int column)
Gets the designated column's suggested title for use in printouts and
 displays.
String
ResultSetMetaData.
getColumnName
(int column)
Get the designated column's name.
String
ResultSetMetaData.
getColumnTypeName
(int column)
Retrieves the designated column's database-specific type name.
String
ResultSet.
getCursorName
()
Retrieves the name of the SQL cursor used by this
ResultSet
object.
String
DatabaseMetaData.
getDatabaseProductName
()
Retrieves the name of this database product.
String
DatabaseMetaData.
getDatabaseProductVersion
()
Retrieves the version number of this database product.
String
DatabaseMetaData.
getDriverName
()
Retrieves the name of this JDBC driver.
String
DatabaseMetaData.
getDriverVersion
()
Retrieves the version number of this JDBC driver as a
String
.
String
DatabaseMetaData.
getExtraNameCharacters
()
Retrieves all the "extra" characters that can be used in unquoted
 identifier names (those beyond a-z, A-Z, 0-9 and _).
String
DatabaseMetaData.
getIdentifierQuoteString
()
Retrieves the string used to quote SQL identifiers.
String
JDBCType.
getName
()
Returns the
SQLType
name that represents a SQL data type.
String
SQLType.
getName
()
Returns the
SQLType
name that represents a SQL data type.
String
CallableStatement.
getNString
(int parameterIndex)
Retrieves the value of the designated
NCHAR
,
NVARCHAR
or
LONGNVARCHAR
parameter as
 a
String
in the Java programming language.
String
CallableStatement.
getNString
(
String
parameterName)
Retrieves the value of the designated
NCHAR
,
NVARCHAR
or
LONGNVARCHAR
parameter as
 a
String
in the Java programming language.
String
ResultSet.
getNString
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
String
in the Java programming language.
String
ResultSet.
getNString
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
String
in the Java programming language.
String
DatabaseMetaData.
getNumericFunctions
()
Retrieves a comma-separated list of math functions available with
 this database.
String
ParameterMetaData.
getParameterClassName
(int param)
Retrieves the fully-qualified name of the Java class whose instances
 should be passed to the method
PreparedStatement.setObject
.
String
ParameterMetaData.
getParameterTypeName
(int param)
Retrieves the designated parameter's database-specific type name.
String
DatabaseMetaData.
getProcedureTerm
()
Retrieves the database vendor's preferred term for "procedure".
String
Savepoint.
getSavepointName
()
Retrieves the name of the savepoint that this
Savepoint
object represents.
String
Connection.
getSchema
()
Retrieves this
Connection
object's current schema name.
String
ResultSetMetaData.
getSchemaName
(int column)
Get the designated column's table's schema.
String
DatabaseMetaData.
getSchemaTerm
()
Retrieves the database vendor's preferred term for "schema".
String
DatabaseMetaData.
getSearchStringEscape
()
Retrieves the string that can be used to escape wildcard characters.
String
DatabaseMetaData.
getSQLKeywords
()
Retrieves a comma-separated list of all of this database's SQL keywords
 that are NOT also SQL:2003 keywords.
String
SQLException.
getSQLState
()
Retrieves the SQLState for this
SQLException
object.
String
SQLData.
getSQLTypeName
()
Returns the fully-qualified
 name of the SQL user-defined type that this object represents.
String
Struct.
getSQLTypeName
()
Retrieves the SQL type name of the SQL structured type
 that this
Struct
object represents.
String
CallableStatement.
getString
(int parameterIndex)
Retrieves the value of the designated JDBC
CHAR
,
VARCHAR
, or
LONGVARCHAR
parameter as a
String
in the Java programming language.
String
CallableStatement.
getString
(
String
parameterName)
Retrieves the value of a JDBC
CHAR
,
VARCHAR
,
 or
LONGVARCHAR
parameter as a
String
in
 the Java programming language.
String
ResultSet.
getString
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
String
in the Java programming language.
String
ResultSet.
getString
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
String
in the Java programming language.
String
SQLXML.
getString
()
Returns a string representation of the XML value designated by this SQLXML instance.
String
DatabaseMetaData.
getStringFunctions
()
Retrieves a comma-separated list of string functions available with
 this database.
String
Clob.
getSubString
(long pos,
 int length)
Retrieves a copy of the specified substring
 in the
CLOB
value
 designated by this
Clob
object.
String
DatabaseMetaData.
getSystemFunctions
()
Retrieves a comma-separated list of system functions available with
 this database.
String
ResultSetMetaData.
getTableName
(int column)
Gets the designated column's table name.
String
DatabaseMetaData.
getTimeDateFunctions
()
Retrieves a comma-separated list of the time and date functions available
 with this database.
String
DatabaseMetaData.
getURL
()
Retrieves the URL for this DBMS.
String
DatabaseMetaData.
getUserName
()
Retrieves the user name as known to this database.
String
JDBCType.
getVendor
()
Returns the name of the vendor that supports this data type.
String
SQLType.
getVendor
()
Returns the name of the vendor that supports this data type.
String
Connection.
nativeSQL
(
String
sql)
Converts the given SQL statement into the system's native SQL grammar.
String
SQLInput.
readNString
()
Reads the next attribute in the stream and returns it as a
String
in the Java programming language.
String
SQLInput.
readString
()
Reads the next attribute in the stream and returns it as a
String
in the Java programming language.
String
Date.
toString
()
Formats a date in the date escape format yyyy-mm-dd.
String
RowId.
toString
()
Returns a String representing the value of the SQL ROWID designated by this
java.sql.RowId
object.
String
Time.
toString
()
Formats a time in JDBC time escape format.
String
Timestamp.
toString
()
Formats a timestamp in JDBC timestamp escape format.
Methods in
java.sql
that return types with arguments of type
String
Modifier and Type
Method
Description
Map
<
String
,
ClientInfoStatus
>
SQLClientInfoException.
getFailedProperties
()
Returns the list of client info properties that could not be set.
Map
<
String
,
Class
<?>>
Connection.
getTypeMap
()
Retrieves the
Map
object associated with this
Connection
object.
Methods in
java.sql
with parameters of type
String
Modifier and Type
Method
Description
boolean
Driver.
acceptsURL
(
String
url)
Retrieves whether the driver thinks that it can open a connection
 to the given URL.
void
Statement.
addBatch
(
String
sql)
Adds the given SQL command to the current list of commands for this
Statement
object.
Connection
Driver.
connect
(
String
url,
Properties
info)
Attempts to make a database connection to the given URL.
Array
Connection.
createArrayOf
(
String
typeName,
Object
[] elements)
Factory method for creating Array objects.
Struct
Connection.
createStruct
(
String
typeName,
Object
[] attributes)
Factory method for creating Struct objects.
default
String
Statement.
enquoteIdentifier
(
String
identifier,
 boolean alwaysQuote)
Returns a SQL identifier.
default
String
Statement.
enquoteLiteral
(
String
val)
Returns a
String
enclosed in single quotes.
default
String
Statement.
enquoteNCharLiteral
(
String
val)
Returns a
String
representing a National Character Set Literal
 enclosed in single quotes and prefixed with a upper case letter N.
boolean
Statement.
execute
(
String
sql)
Executes the given SQL statement, which may return multiple results.
boolean
Statement.
execute
(
String
sql,
 int autoGeneratedKeys)
Executes the given SQL statement, which may return multiple results,
 and signals the driver that any
 auto-generated keys should be made available
 for retrieval.
boolean
Statement.
execute
(
String
sql,
 int[] columnIndexes)
Executes the given SQL statement, which may return multiple results,
 and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.
boolean
Statement.
execute
(
String
sql,
String
[] columnNames)
Executes the given SQL statement, which may return multiple results,
 and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.
default long
Statement.
executeLargeUpdate
(
String
sql)
Executes the given SQL statement, which may be an
INSERT
,
UPDATE
, or
DELETE
statement or an
 SQL statement that returns nothing, such as an SQL DDL statement.
default long
Statement.
executeLargeUpdate
(
String
sql,
 int autoGeneratedKeys)
Executes the given SQL statement and signals the driver with the
 given flag about whether the
 auto-generated keys produced by this
Statement
object
 should be made available for retrieval.
default long
Statement.
executeLargeUpdate
(
String
sql,
 int[] columnIndexes)
Executes the given SQL statement and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.
default long
Statement.
executeLargeUpdate
(
String
sql,
String
[] columnNames)
Executes the given SQL statement and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.
ResultSet
Statement.
executeQuery
(
String
sql)
Executes the given SQL statement, which returns a single
ResultSet
object.
int
Statement.
executeUpdate
(
String
sql)
Executes the given SQL statement, which may be an
INSERT
,
UPDATE
, or
DELETE
statement or an
 SQL statement that returns nothing, such as an SQL DDL statement.
int
Statement.
executeUpdate
(
String
sql,
 int autoGeneratedKeys)
Executes the given SQL statement and signals the driver with the
 given flag about whether the
 auto-generated keys produced by this
Statement
object
 should be made available for retrieval.
int
Statement.
executeUpdate
(
String
sql,
 int[] columnIndexes)
Executes the given SQL statement and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.
int
Statement.
executeUpdate
(
String
sql,
String
[] columnNames)
Executes the given SQL statement and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.
int
ResultSet.
findColumn
(
String
columnLabel)
Maps the given
ResultSet
column label to its
ResultSet
column index.
Array
CallableStatement.
getArray
(
String
parameterName)
Retrieves the value of a JDBC
ARRAY
parameter as an
Array
object in the Java programming language.
Array
ResultSet.
getArray
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as an
Array
object
 in the Java programming language.
InputStream
ResultSet.
getAsciiStream
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a stream of
 ASCII characters.
ResultSet
DatabaseMetaData.
getAttributes
(
String
catalog,
String
schemaPattern,
String
typeNamePattern,
String
attributeNamePattern)
Retrieves a description of the given attribute of the given type
 for a user-defined type (UDT) that is available in the given schema
 and catalog.
ResultSet
DatabaseMetaData.
getBestRowIdentifier
(
String
catalog,
String
schema,
String
table,
 int scope,
 boolean nullable)
Retrieves a description of a table's optimal set of columns that
 uniquely identifies a row.
BigDecimal
CallableStatement.
getBigDecimal
(
String
parameterName)
Retrieves the value of a JDBC
NUMERIC
parameter as a
java.math.BigDecimal
object with as many digits to the
 right of the decimal point as the value contains.
BigDecimal
ResultSet.
getBigDecimal
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.math.BigDecimal
with full precision.
BigDecimal
ResultSet.
getBigDecimal
(
String
columnLabel,
 int scale)
Deprecated.
Use
getBigDecimal(int columnIndex)
or
getBigDecimal(String columnLabel)
InputStream
ResultSet.
getBinaryStream
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a stream of uninterpreted
byte
s.
Blob
CallableStatement.
getBlob
(
String
parameterName)
Retrieves the value of a JDBC
BLOB
parameter as a
Blob
object in the Java programming language.
Blob
ResultSet.
getBlob
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
Blob
object
 in the Java programming language.
boolean
CallableStatement.
getBoolean
(
String
parameterName)
Retrieves the value of a JDBC
BIT
or
BOOLEAN
parameter as a
boolean
in the Java programming language.
boolean
ResultSet.
getBoolean
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
boolean
in the Java programming language.
byte
CallableStatement.
getByte
(
String
parameterName)
Retrieves the value of a JDBC
TINYINT
parameter as a
byte
in the Java programming language.
byte
ResultSet.
getByte
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
byte
in the Java programming language.
byte[]
CallableStatement.
getBytes
(
String
parameterName)
Retrieves the value of a JDBC
BINARY
or
VARBINARY
parameter as an array of
byte
values in the Java
 programming language.
byte[]
ResultSet.
getBytes
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
byte
array in the Java programming language.
Reader
CallableStatement.
getCharacterStream
(
String
parameterName)
Retrieves the value of the designated parameter as a
java.io.Reader
object in the Java programming language.
Reader
ResultSet.
getCharacterStream
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.io.Reader
object.
String
Connection.
getClientInfo
(
String
name)
Returns the value of the client info property specified by name.
Clob
CallableStatement.
getClob
(
String
parameterName)
Retrieves the value of a JDBC
CLOB
parameter as a
java.sql.Clob
object in the Java programming language.
Clob
ResultSet.
getClob
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
Clob
object
 in the Java programming language.
ResultSet
DatabaseMetaData.
getColumnPrivileges
(
String
catalog,
String
schema,
String
table,
String
columnNamePattern)
Retrieves a description of the access rights for a table's columns.
ResultSet
DatabaseMetaData.
getColumns
(
String
catalog,
String
schemaPattern,
String
tableNamePattern,
String
columnNamePattern)
Retrieves a description of table columns available in
 the specified catalog.
static
Connection
DriverManager.
getConnection
(
String
url)
Attempts to establish a connection to the given database URL.
static
Connection
DriverManager.
getConnection
(
String
url,
String
user,
String
password)
Attempts to establish a connection to the given database URL.
static
Connection
DriverManager.
getConnection
(
String
url,
Properties
info)
Attempts to establish a connection to the given database URL.
ResultSet
DatabaseMetaData.
getCrossReference
(
String
parentCatalog,
String
parentSchema,
String
parentTable,
String
foreignCatalog,
String
foreignSchema,
String
foreignTable)
Retrieves a description of the foreign key columns in the given foreign key
 table that reference the primary key or the columns representing a unique constraint of the  parent table (could be the same or a different table).
Date
CallableStatement.
getDate
(
String
parameterName)
Retrieves the value of a JDBC
DATE
parameter as a
java.sql.Date
object.
Date
CallableStatement.
getDate
(
String
parameterName,
Calendar
cal)
Retrieves the value of a JDBC
DATE
parameter as a
java.sql.Date
object, using
 the given
Calendar
object
 to construct the date.
Date
ResultSet.
getDate
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
java.sql.Date
object in the Java programming language.
Date
ResultSet.
getDate
(
String
columnLabel,
Calendar
cal)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.sql.Date
object
 in the Java programming language.
double
CallableStatement.
getDouble
(
String
parameterName)
Retrieves the value of a JDBC
DOUBLE
parameter as a
double
in the Java programming language.
double
ResultSet.
getDouble
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
double
in the Java programming language.
static
Driver
DriverManager.
getDriver
(
String
url)
Attempts to locate a driver that understands the given URL.
ResultSet
DatabaseMetaData.
getExportedKeys
(
String
catalog,
String
schema,
String
table)
Retrieves a description of the foreign key columns that reference the
 given table's primary key columns (the foreign keys exported by a
 table).
float
CallableStatement.
getFloat
(
String
parameterName)
Retrieves the value of a JDBC
FLOAT
parameter as a
float
in the Java programming language.
float
ResultSet.
getFloat
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
float
in the Java programming language.
ResultSet
DatabaseMetaData.
getFunctionColumns
(
String
catalog,
String
schemaPattern,
String
functionNamePattern,
String
columnNamePattern)
Retrieves a description of the given catalog's system or user
 function parameters and return type.
ResultSet
DatabaseMetaData.
getFunctions
(
String
catalog,
String
schemaPattern,
String
functionNamePattern)
Retrieves a description of the  system and user functions available
 in the given catalog.
ResultSet
DatabaseMetaData.
getImportedKeys
(
String
catalog,
String
schema,
String
table)
Retrieves a description of the primary key columns that are
 referenced by the given table's foreign key columns (the primary keys
 imported by a table).
ResultSet
DatabaseMetaData.
getIndexInfo
(
String
catalog,
String
schema,
String
table,
 boolean unique,
 boolean approximate)
Retrieves a description of the given table's indices and statistics.
int
CallableStatement.
getInt
(
String
parameterName)
Retrieves the value of a JDBC
INTEGER
parameter as an
int
in the Java programming language.
int
ResultSet.
getInt
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 an
int
in the Java programming language.
long
CallableStatement.
getLong
(
String
parameterName)
Retrieves the value of a JDBC
BIGINT
parameter as a
long
in the Java programming language.
long
ResultSet.
getLong
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
long
in the Java programming language.
Reader
CallableStatement.
getNCharacterStream
(
String
parameterName)
Retrieves the value of the designated parameter as a
java.io.Reader
object in the Java programming language.
Reader
ResultSet.
getNCharacterStream
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.io.Reader
object.
NClob
CallableStatement.
getNClob
(
String
parameterName)
Retrieves the value of a JDBC
NCLOB
parameter as a
java.sql.NClob
object in the Java programming language.
NClob
ResultSet.
getNClob
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
NClob
object
 in the Java programming language.
String
CallableStatement.
getNString
(
String
parameterName)
Retrieves the value of the designated
NCHAR
,
NVARCHAR
or
LONGNVARCHAR
parameter as
 a
String
in the Java programming language.
String
ResultSet.
getNString
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
String
in the Java programming language.
Object
CallableStatement.
getObject
(
String
parameterName)
Retrieves the value of a parameter as an
Object
in the Java
 programming language.
<T> T
CallableStatement.
getObject
(
String
parameterName,
Class
<T> type)
Returns an object representing the value of OUT parameter
parameterName
and will convert from the
 SQL type of the parameter to the requested Java data type, if the
 conversion is supported.
Object
CallableStatement.
getObject
(
String
parameterName,
Map
<
String
,
Class
<?>> map)
Returns an object representing the value of OUT parameter
parameterName
and uses
map
for the custom
 mapping of the parameter value.
Object
ResultSet.
getObject
(
String
columnLabel)
Gets the value of the designated column in the current row
 of this
ResultSet
object as
 an
Object
in the Java programming language.
<T> T
ResultSet.
getObject
(
String
columnLabel,
Class
<T> type)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object and will convert from the
 SQL type of the column to the requested Java data type, if the
 conversion is supported.
Object
ResultSet.
getObject
(
String
columnLabel,
Map
<
String
,
Class
<?>> map)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as an
Object
in the Java programming language.
ResultSet
DatabaseMetaData.
getPrimaryKeys
(
String
catalog,
String
schema,
String
table)
Retrieves a description of the given table's primary key columns.
ResultSet
DatabaseMetaData.
getProcedureColumns
(
String
catalog,
String
schemaPattern,
String
procedureNamePattern,
String
columnNamePattern)
Retrieves a description of the given catalog's stored procedure parameter
 and result columns.
ResultSet
DatabaseMetaData.
getProcedures
(
String
catalog,
String
schemaPattern,
String
procedureNamePattern)
Retrieves a description of the stored procedures available in the given
 catalog.
DriverPropertyInfo
[]
Driver.
getPropertyInfo
(
String
url,
Properties
info)
Gets information about the possible properties for this driver.
ResultSet
DatabaseMetaData.
getPseudoColumns
(
String
catalog,
String
schemaPattern,
String
tableNamePattern,
String
columnNamePattern)
Retrieves a description of the pseudo or hidden columns available
 in a given table within the specified catalog and schema.
Ref
CallableStatement.
getRef
(
String
parameterName)
Retrieves the value of a JDBC
REF(<structured-type>)
parameter as a
Ref
object in the Java programming language.
Ref
ResultSet.
getRef
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
Ref
object
 in the Java programming language.
RowId
CallableStatement.
getRowId
(
String
parameterName)
Retrieves the value of the designated JDBC
ROWID
parameter as a
java.sql.RowId
object.
RowId
ResultSet.
getRowId
(
String
columnLabel)
Retrieves the value of the designated column in the current row of this
ResultSet
object as a
java.sql.RowId
object in the Java
 programming language.
ResultSet
DatabaseMetaData.
getSchemas
(
String
catalog,
String
schemaPattern)
Retrieves the schema names available in this database.
short
CallableStatement.
getShort
(
String
parameterName)
Retrieves the value of a JDBC
SMALLINT
parameter as a
short
in the Java programming language.
short
ResultSet.
getShort
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
short
in the Java programming language.
SQLXML
CallableStatement.
getSQLXML
(
String
parameterName)
Retrieves the value of the designated
SQL XML
parameter as a
java.sql.SQLXML
object in the Java programming language.
SQLXML
ResultSet.
getSQLXML
(
String
columnLabel)
Retrieves the value of the designated column in  the current row of
  this
ResultSet
as a
java.sql.SQLXML
object in the Java programming language.
String
CallableStatement.
getString
(
String
parameterName)
Retrieves the value of a JDBC
CHAR
,
VARCHAR
,
 or
LONGVARCHAR
parameter as a
String
in
 the Java programming language.
String
ResultSet.
getString
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
String
in the Java programming language.
ResultSet
DatabaseMetaData.
getSuperTables
(
String
catalog,
String
schemaPattern,
String
tableNamePattern)
Retrieves a description of the table hierarchies defined in a particular
 schema in this database.
ResultSet
DatabaseMetaData.
getSuperTypes
(
String
catalog,
String
schemaPattern,
String
typeNamePattern)
Retrieves a description of the user-defined type (UDT) hierarchies defined in a
 particular schema in this database.
ResultSet
DatabaseMetaData.
getTablePrivileges
(
String
catalog,
String
schemaPattern,
String
tableNamePattern)
Retrieves a description of the access rights for each table available
 in a catalog.
ResultSet
DatabaseMetaData.
getTables
(
String
catalog,
String
schemaPattern,
String
tableNamePattern,
String
[] types)
Retrieves a description of the tables available in the given catalog.
Time
CallableStatement.
getTime
(
String
parameterName)
Retrieves the value of a JDBC
TIME
parameter as a
java.sql.Time
object.
Time
CallableStatement.
getTime
(
String
parameterName,
Calendar
cal)
Retrieves the value of a JDBC
TIME
parameter as a
java.sql.Time
object, using
 the given
Calendar
object
 to construct the time.
Time
ResultSet.
getTime
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
java.sql.Time
object in the Java programming language.
Time
ResultSet.
getTime
(
String
columnLabel,
Calendar
cal)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.sql.Time
object
 in the Java programming language.
Timestamp
CallableStatement.
getTimestamp
(
String
parameterName)
Retrieves the value of a JDBC
TIMESTAMP
parameter as a
java.sql.Timestamp
object.
Timestamp
CallableStatement.
getTimestamp
(
String
parameterName,
Calendar
cal)
Retrieves the value of a JDBC
TIMESTAMP
parameter as a
java.sql.Timestamp
object, using
 the given
Calendar
object to construct
 the
Timestamp
object.
Timestamp
ResultSet.
getTimestamp
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
java.sql.Timestamp
object in the Java programming language.
Timestamp
ResultSet.
getTimestamp
(
String
columnLabel,
Calendar
cal)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.sql.Timestamp
object
 in the Java programming language.
ResultSet
DatabaseMetaData.
getUDTs
(
String
catalog,
String
schemaPattern,
String
typeNamePattern,
 int[] types)
Retrieves a description of the user-defined types (UDTs) defined
 in a particular schema.
InputStream
ResultSet.
getUnicodeStream
(
String
columnLabel)
Deprecated.
use
getCharacterStream
instead
URL
CallableStatement.
getURL
(
String
parameterName)
Retrieves the value of a JDBC
DATALINK
parameter as a
java.net.URL
object.
URL
ResultSet.
getURL
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.net.URL
object in the Java programming language.
ResultSet
DatabaseMetaData.
getVersionColumns
(
String
catalog,
String
schema,
String
table)
Retrieves a description of a table's columns that are automatically
 updated when any value in a row is updated.
default boolean
Statement.
isSimpleIdentifier
(
String
identifier)
Retrieves whether
identifier
is a simple SQL identifier.
String
Connection.
nativeSQL
(
String
sql)
Converts the given SQL statement into the system's native SQL grammar.
ConnectionBuilder
ConnectionBuilder.
password
(
String
password)
Specifies the password to be used when creating a connection
long
Clob.
position
(
String
searchstr,
 long start)
Retrieves the character position at which the specified substring
searchstr
appears in the SQL
CLOB
value
 represented by this
Clob
object.
CallableStatement
Connection.
prepareCall
(
String
sql)
Creates a
CallableStatement
object for calling
 database stored procedures.
CallableStatement
Connection.
prepareCall
(
String
sql,
 int resultSetType,
 int resultSetConcurrency)
Creates a
CallableStatement
object that will generate
ResultSet
objects with the given type and concurrency.
CallableStatement
Connection.
prepareCall
(
String
sql,
 int resultSetType,
 int resultSetConcurrency,
 int resultSetHoldability)
Creates a
CallableStatement
object that will generate
ResultSet
objects with the given type and concurrency.
PreparedStatement
Connection.
prepareStatement
(
String
sql)
Creates a
PreparedStatement
object for sending
 parameterized SQL statements to the database.
PreparedStatement
Connection.
prepareStatement
(
String
sql,
 int autoGeneratedKeys)
Creates a default
PreparedStatement
object that has
 the capability to retrieve auto-generated keys.
PreparedStatement
Connection.
prepareStatement
(
String
sql,
 int[] columnIndexes)
Creates a default
PreparedStatement
object capable
 of returning the auto-generated keys designated by the given array.
PreparedStatement
Connection.
prepareStatement
(
String
sql,
 int resultSetType,
 int resultSetConcurrency)
Creates a
PreparedStatement
object that will generate
ResultSet
objects with the given type and concurrency.
PreparedStatement
Connection.
prepareStatement
(
String
sql,
 int resultSetType,
 int resultSetConcurrency,
 int resultSetHoldability)
Creates a
PreparedStatement
object that will generate
ResultSet
objects with the given type, concurrency,
 and holdability.
PreparedStatement
Connection.
prepareStatement
(
String
sql,
String
[] columnNames)
Creates a default
PreparedStatement
object capable
 of returning the auto-generated keys designated by the given array.
static void
DriverManager.
println
(
String
message)
Prints a message to the current JDBC log stream.
void
SQLData.
readSQL
(
SQLInput
stream,
String
typeName)
Populates this object with data read from the database.
void
CallableStatement.
registerOutParameter
(int parameterIndex,
 int sqlType,
String
typeName)
Registers the designated output parameter.
default void
CallableStatement.
registerOutParameter
(int parameterIndex,
SQLType
sqlType,
String
typeName)
Registers the designated output parameter.
void
CallableStatement.
registerOutParameter
(
String
parameterName,
 int sqlType)
Registers the OUT parameter named
parameterName
to the JDBC type
sqlType
.
void
CallableStatement.
registerOutParameter
(
String
parameterName,
 int sqlType,
 int scale)
Registers the parameter named
parameterName
to be of JDBC type
sqlType
.
void
CallableStatement.
registerOutParameter
(
String
parameterName,
 int sqlType,
String
typeName)
Registers the designated output parameter.
default void
CallableStatement.
registerOutParameter
(
String
parameterName,
SQLType
sqlType)
Registers the OUT parameter named
parameterName
to the JDBC type
sqlType
.
default void
CallableStatement.
registerOutParameter
(
String
parameterName,
SQLType
sqlType,
 int scale)
Registers the parameter named
parameterName
to be of JDBC type
sqlType
.
default void
CallableStatement.
registerOutParameter
(
String
parameterName,
SQLType
sqlType,
String
typeName)
Registers the designated output parameter.
void
CallableStatement.
setAsciiStream
(
String
parameterName,
InputStream
x)
Sets the designated parameter to the given input stream.
void
CallableStatement.
setAsciiStream
(
String
parameterName,
InputStream
x,
 int length)
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
void
CallableStatement.
setAsciiStream
(
String
parameterName,
InputStream
x,
 long length)
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
void
CallableStatement.
setBigDecimal
(
String
parameterName,
BigDecimal
x)
Sets the designated parameter to the given
java.math.BigDecimal
value.
void
CallableStatement.
setBinaryStream
(
String
parameterName,
InputStream
x)
Sets the designated parameter to the given input stream.
void
CallableStatement.
setBinaryStream
(
String
parameterName,
InputStream
x,
 int length)
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
void
CallableStatement.
setBinaryStream
(
String
parameterName,
InputStream
x,
 long length)
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
void
CallableStatement.
setBlob
(
String
parameterName,
InputStream
inputStream)
Sets the designated parameter to an
InputStream
object.
void
CallableStatement.
setBlob
(
String
parameterName,
InputStream
inputStream,
 long length)
Sets the designated parameter to an
InputStream
object.
void
CallableStatement.
setBlob
(
String
parameterName,
Blob
x)
Sets the designated parameter to the given
java.sql.Blob
object.
void
CallableStatement.
setBoolean
(
String
parameterName,
 boolean x)
Sets the designated parameter to the given Java
boolean
value.
void
CallableStatement.
setByte
(
String
parameterName,
 byte x)
Sets the designated parameter to the given Java
byte
value.
void
CallableStatement.
setBytes
(
String
parameterName,
 byte[] x)
Sets the designated parameter to the given Java array of bytes.
void
Connection.
setCatalog
(
String
catalog)
Sets the given catalog name in order to select
 a subspace of this
Connection
object's database
 in which to work.
void
CallableStatement.
setCharacterStream
(
String
parameterName,
Reader
reader)
Sets the designated parameter to the given
Reader
object.
void
CallableStatement.
setCharacterStream
(
String
parameterName,
Reader
reader,
 int length)
Sets the designated parameter to the given
Reader
object, which is the given number of characters long.
void
CallableStatement.
setCharacterStream
(
String
parameterName,
Reader
reader,
 long length)
Sets the designated parameter to the given
Reader
object, which is the given number of characters long.
void
Connection.
setClientInfo
(
String
name,
String
value)
Sets the value of the client info property specified by name to the
 value specified by value.
void
CallableStatement.
setClob
(
String
parameterName,
Reader
reader)
Sets the designated parameter to a
Reader
object.
void
CallableStatement.
setClob
(
String
parameterName,
Reader
reader,
 long length)
Sets the designated parameter to a
Reader
object.
void
CallableStatement.
setClob
(
String
parameterName,
Clob
x)
Sets the designated parameter to the given
java.sql.Clob
object.
void
Statement.
setCursorName
(
String
name)
Sets the SQL cursor name to the given
String
, which
 will be used by subsequent
Statement
object
execute
methods.
void
CallableStatement.
setDate
(
String
parameterName,
Date
x)
Sets the designated parameter to the given
java.sql.Date
value
 using the default time zone of the virtual machine that is running
 the application.
void
CallableStatement.
setDate
(
String
parameterName,
Date
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Date
value,
 using the given
Calendar
object.
void
CallableStatement.
setDouble
(
String
parameterName,
 double x)
Sets the designated parameter to the given Java
double
value.
void
CallableStatement.
setFloat
(
String
parameterName,
 float x)
Sets the designated parameter to the given Java
float
value.
void
CallableStatement.
setInt
(
String
parameterName,
 int x)
Sets the designated parameter to the given Java
int
value.
void
CallableStatement.
setLong
(
String
parameterName,
 long x)
Sets the designated parameter to the given Java
long
value.
void
CallableStatement.
setNCharacterStream
(
String
parameterName,
Reader
value)
Sets the designated parameter to a
Reader
object.
void
CallableStatement.
setNCharacterStream
(
String
parameterName,
Reader
value,
 long length)
Sets the designated parameter to a
Reader
object.
void
CallableStatement.
setNClob
(
String
parameterName,
Reader
reader)
Sets the designated parameter to a
Reader
object.
void
CallableStatement.
setNClob
(
String
parameterName,
Reader
reader,
 long length)
Sets the designated parameter to a
Reader
object.
void
CallableStatement.
setNClob
(
String
parameterName,
NClob
value)
Sets the designated parameter to a
java.sql.NClob
object.
void
CallableStatement.
setNString
(
String
parameterName,
String
value)
Sets the designated parameter to the given
String
object.
void
PreparedStatement.
setNString
(int parameterIndex,
String
value)
Sets the designated parameter to the given
String
object.
void
CallableStatement.
setNull
(
String
parameterName,
 int sqlType)
Sets the designated parameter to SQL
NULL
.
void
CallableStatement.
setNull
(
String
parameterName,
 int sqlType,
String
typeName)
Sets the designated parameter to SQL
NULL
.
void
PreparedStatement.
setNull
(int parameterIndex,
 int sqlType,
String
typeName)
Sets the designated parameter to SQL
NULL
.
void
CallableStatement.
setObject
(
String
parameterName,
Object
x)
Sets the value of the designated parameter with the given object.
void
CallableStatement.
setObject
(
String
parameterName,
Object
x,
 int targetSqlType)
Sets the value of the designated parameter with the given object.
void
CallableStatement.
setObject
(
String
parameterName,
Object
x,
 int targetSqlType,
 int scale)
Sets the value of the designated parameter with the given object.
default void
CallableStatement.
setObject
(
String
parameterName,
Object
x,
SQLType
targetSqlType)
Sets the value of the designated parameter with the given object.
default void
CallableStatement.
setObject
(
String
parameterName,
Object
x,
SQLType
targetSqlType,
 int scaleOrLength)
Sets the value of the designated parameter with the given object.
void
CallableStatement.
setRowId
(
String
parameterName,
RowId
x)
Sets the designated parameter to the given
java.sql.RowId
object.
Savepoint
Connection.
setSavepoint
(
String
name)
Creates a savepoint with the given name in the current transaction
 and returns the new
Savepoint
object that represents it.
void
Connection.
setSchema
(
String
schema)
Sets the given schema name to access.
void
CallableStatement.
setShort
(
String
parameterName,
 short x)
Sets the designated parameter to the given Java
short
value.
void
CallableStatement.
setSQLXML
(
String
parameterName,
SQLXML
xmlObject)
Sets the designated parameter to the given
java.sql.SQLXML
object.
void
CallableStatement.
setString
(
String
parameterName,
String
x)
Sets the designated parameter to the given Java
String
value.
int
Clob.
setString
(long pos,
String
str)
Writes the given Java
String
to the
CLOB
value that this
Clob
object designates at the position
pos
.
int
Clob.
setString
(long pos,
String
str,
 int offset,
 int len)
Writes
len
characters of
str
, starting
 at character
offset
, to the
CLOB
value
 that this
Clob
represents.
void
PreparedStatement.
setString
(int parameterIndex,
String
x)
Sets the designated parameter to the given Java
String
value.
void
SQLXML.
setString
(
String
value)
Sets the XML value designated by this SQLXML instance to the given String representation.
void
CallableStatement.
setTime
(
String
parameterName,
Time
x)
Sets the designated parameter to the given
java.sql.Time
value.
void
CallableStatement.
setTime
(
String
parameterName,
Time
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Time
value,
 using the given
Calendar
object.
void
CallableStatement.
setTimestamp
(
String
parameterName,
Timestamp
x)
Sets the designated parameter to the given
java.sql.Timestamp
value.
void
CallableStatement.
setTimestamp
(
String
parameterName,
Timestamp
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Timestamp
value,
 using the given
Calendar
object.
void
CallableStatement.
setURL
(
String
parameterName,
URL
val)
Sets the designated parameter to the given
java.net.URL
object.
void
ResultSet.
updateArray
(
String
columnLabel,
Array
x)
Updates the designated column with a
java.sql.Array
value.
void
ResultSet.
updateAsciiStream
(
String
columnLabel,
InputStream
x)
Updates the designated column with an ascii stream value.
void
ResultSet.
updateAsciiStream
(
String
columnLabel,
InputStream
x,
 int length)
Updates the designated column with an ascii stream value, which will have
 the specified number of bytes.
void
ResultSet.
updateAsciiStream
(
String
columnLabel,
InputStream
x,
 long length)
Updates the designated column with an ascii stream value, which will have
 the specified number of bytes.
void
ResultSet.
updateBigDecimal
(
String
columnLabel,
BigDecimal
x)
Updates the designated column with a
java.sql.BigDecimal
value.
void
ResultSet.
updateBinaryStream
(
String
columnLabel,
InputStream
x)
Updates the designated column with a binary stream value.
void
ResultSet.
updateBinaryStream
(
String
columnLabel,
InputStream
x,
 int length)
Updates the designated column with a binary stream value, which will have
 the specified number of bytes.
void
ResultSet.
updateBinaryStream
(
String
columnLabel,
InputStream
x,
 long length)
Updates the designated column with a binary stream value, which will have
 the specified number of bytes.
void
ResultSet.
updateBlob
(
String
columnLabel,
InputStream
inputStream)
Updates the designated column using the given input stream.
void
ResultSet.
updateBlob
(
String
columnLabel,
InputStream
inputStream,
 long length)
Updates the designated column using the given input stream, which
 will have the specified number of bytes.
void
ResultSet.
updateBlob
(
String
columnLabel,
Blob
x)
Updates the designated column with a
java.sql.Blob
value.
void
ResultSet.
updateBoolean
(
String
columnLabel,
 boolean x)
Updates the designated column with a
boolean
value.
void
ResultSet.
updateByte
(
String
columnLabel,
 byte x)
Updates the designated column with a
byte
value.
void
ResultSet.
updateBytes
(
String
columnLabel,
 byte[] x)
Updates the designated column with a byte array value.
void
ResultSet.
updateCharacterStream
(
String
columnLabel,
Reader
reader)
Updates the designated column with a character stream value.
void
ResultSet.
updateCharacterStream
(
String
columnLabel,
Reader
reader,
 int length)
Updates the designated column with a character stream value, which will have
 the specified number of bytes.
void
ResultSet.
updateCharacterStream
(
String
columnLabel,
Reader
reader,
 long length)
Updates the designated column with a character stream value, which will have
 the specified number of bytes.
void
ResultSet.
updateClob
(
String
columnLabel,
Reader
reader)
Updates the designated column using the given
Reader
object.
void
ResultSet.
updateClob
(
String
columnLabel,
Reader
reader,
 long length)
Updates the designated column using the given
Reader
object, which is the given number of characters long.
void
ResultSet.
updateClob
(
String
columnLabel,
Clob
x)
Updates the designated column with a
java.sql.Clob
value.
void
ResultSet.
updateDate
(
String
columnLabel,
Date
x)
Updates the designated column with a
java.sql.Date
value.
void
ResultSet.
updateDouble
(
String
columnLabel,
 double x)
Updates the designated column with a
double
value.
void
ResultSet.
updateFloat
(
String
columnLabel,
 float x)
Updates the designated column with a
float
value.
void
ResultSet.
updateInt
(
String
columnLabel,
 int x)
Updates the designated column with an
int
value.
void
ResultSet.
updateLong
(
String
columnLabel,
 long x)
Updates the designated column with a
long
value.
void
ResultSet.
updateNCharacterStream
(
String
columnLabel,
Reader
reader)
Updates the designated column with a character stream value.
void
ResultSet.
updateNCharacterStream
(
String
columnLabel,
Reader
reader,
 long length)
Updates the designated column with a character stream value, which will have
 the specified number of bytes.
void
ResultSet.
updateNClob
(
String
columnLabel,
Reader
reader)
Updates the designated column using the given
Reader
object.
void
ResultSet.
updateNClob
(
String
columnLabel,
Reader
reader,
 long length)
Updates the designated column using the given
Reader
object, which is the given number of characters long.
void
ResultSet.
updateNClob
(
String
columnLabel,
NClob
nClob)
Updates the designated column with a
java.sql.NClob
value.
void
ResultSet.
updateNString
(int columnIndex,
String
nString)
Updates the designated column with a
String
value.
void
ResultSet.
updateNString
(
String
columnLabel,
String
nString)
Updates the designated column with a
String
value.
void
ResultSet.
updateNull
(
String
columnLabel)
Updates the designated column with a
null
value.
void
ResultSet.
updateObject
(
String
columnLabel,
Object
x)
Updates the designated column with an
Object
value.
void
ResultSet.
updateObject
(
String
columnLabel,
Object
x,
 int scaleOrLength)
Updates the designated column with an
Object
value.
default void
ResultSet.
updateObject
(
String
columnLabel,
Object
x,
SQLType
targetSqlType)
Updates the designated column with an
Object
value.
default void
ResultSet.
updateObject
(
String
columnLabel,
Object
x,
SQLType
targetSqlType,
 int scaleOrLength)
Updates the designated column with an
Object
value.
void
ResultSet.
updateRef
(
String
columnLabel,
Ref
x)
Updates the designated column with a
java.sql.Ref
value.
void
ResultSet.
updateRowId
(
String
columnLabel,
RowId
x)
Updates the designated column with a
RowId
value.
void
ResultSet.
updateShort
(
String
columnLabel,
 short x)
Updates the designated column with a
short
value.
void
ResultSet.
updateSQLXML
(
String
columnLabel,
SQLXML
xmlObject)
Updates the designated column with a
java.sql.SQLXML
value.
void
ResultSet.
updateString
(int columnIndex,
String
x)
Updates the designated column with a
String
value.
void
ResultSet.
updateString
(
String
columnLabel,
String
x)
Updates the designated column with a
String
value.
void
ResultSet.
updateTime
(
String
columnLabel,
Time
x)
Updates the designated column with a
java.sql.Time
value.
void
ResultSet.
updateTimestamp
(
String
columnLabel,
Timestamp
x)
Updates the designated column with a
java.sql.Timestamp
value.
ConnectionBuilder
ConnectionBuilder.
user
(
String
username)
Specifies the username to be used when creating a connection
static
ClientInfoStatus
ClientInfoStatus.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
Date
Date.
valueOf
(
String
s)
Converts a string in JDBC date escape format to
 a
Date
value.
static
JDBCType
JDBCType.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
PseudoColumnUsage
PseudoColumnUsage.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
RowIdLifetime
RowIdLifetime.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
Time
Time.
valueOf
(
String
s)
Converts a string in JDBC time escape format to a
Time
value.
static
Timestamp
Timestamp.
valueOf
(
String
s)
Converts a
String
object in JDBC timestamp escape format to a
Timestamp
value.
void
SQLOutput.
writeNString
(
String
x)
Writes the next attribute to the stream as a
String
in the Java programming language.
void
SQLOutput.
writeString
(
String
x)
Writes the next attribute to the stream as a
String
in the Java programming language.
Method parameters in
java.sql
with type arguments of type
String
Modifier and Type
Method
Description
Object
Array.
getArray
(long index,
 int count,
Map
<
String
,
Class
<?>> map)
Retrieves a slice of the SQL
ARRAY
value
 designated by this
Array
object, beginning with the specified
index
and containing up to
count
successive elements of the SQL array.
Object
Array.
getArray
(
Map
<
String
,
Class
<?>> map)
Retrieves the contents of the SQL
ARRAY
value designated by this
Array
object.
Object
[]
Struct.
getAttributes
(
Map
<
String
,
Class
<?>> map)
Produces the ordered values of the attributes of the SQL
 structured type that this
Struct
object represents.
Object
CallableStatement.
getObject
(int parameterIndex,
Map
<
String
,
Class
<?>> map)
Returns an object representing the value of OUT parameter
parameterIndex
and uses
map
for the custom
 mapping of the parameter value.
Object
CallableStatement.
getObject
(
String
parameterName,
Map
<
String
,
Class
<?>> map)
Returns an object representing the value of OUT parameter
parameterName
and uses
map
for the custom
 mapping of the parameter value.
Object
Ref.
getObject
(
Map
<
String
,
Class
<?>> map)
Retrieves the referenced object and maps it to a Java type
 using the given type map.
Object
ResultSet.
getObject
(int columnIndex,
Map
<
String
,
Class
<?>> map)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as an
Object
in the Java programming language.
Object
ResultSet.
getObject
(
String
columnLabel,
Map
<
String
,
Class
<?>> map)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as an
Object
in the Java programming language.
ResultSet
Array.
getResultSet
(long index,
 int count,
Map
<
String
,
Class
<?>> map)
Retrieves a result set holding the elements of the subarray that
 starts at index
index
and contains up to
count
successive elements.
ResultSet
Array.
getResultSet
(
Map
<
String
,
Class
<?>> map)
Retrieves a result set that contains the elements of the SQL
ARRAY
value designated by this
Array
object.
void
Connection.
setTypeMap
(
Map
<
String
,
Class
<?>> map)
Installs the given
TypeMap
object as the type map for
 this
Connection
object.
Constructors in
java.sql
with parameters of type
String
Modifier
Constructor
Description
BatchUpdateException
(
String
reason,
 int[] updateCounts)
Constructs a
BatchUpdateException
object initialized with a given
reason
and
updateCounts
.
BatchUpdateException
(
String
reason,
 int[] updateCounts,
Throwable
cause)
Constructs a
BatchUpdateException
object initialized with
 a given
reason
,
cause
and
updateCounts
.
BatchUpdateException
(
String
reason,
String
SQLState,
 int[] updateCounts)
Constructs a
BatchUpdateException
object initialized with a given
reason
,
SQLState
and
updateCounts
.
BatchUpdateException
(
String
reason,
String
SQLState,
 int[] updateCounts,
Throwable
cause)
Constructs a
BatchUpdateException
object initialized with
 a given
reason
,
SQLState
,
cause
, and
updateCounts
.
BatchUpdateException
(
String
reason,
String
SQLState,
 int vendorCode,
 int[] updateCounts)
Constructs a
BatchUpdateException
object initialized with a given
reason
,
SQLState
,
vendorCode
and
updateCounts
.
BatchUpdateException
(
String
reason,
String
SQLState,
 int vendorCode,
 int[] updateCounts,
Throwable
cause)
Constructs a
BatchUpdateException
object initialized with
 a given
reason
,
SQLState
,
vendorCode
cause
and
updateCounts
.
BatchUpdateException
(
String
reason,
String
SQLState,
 int vendorCode,
 long[] updateCounts,
Throwable
cause)
Constructs a
BatchUpdateException
object initialized with
 a given
reason
,
SQLState
,
vendorCode
cause
and
updateCounts
.
DriverPropertyInfo
(
String
name,
String
value)
Constructs a
DriverPropertyInfo
object with a  given
 name and value.
SQLClientInfoException
(
String
reason,
String
SQLState,
 int vendorCode,
Map
<
String
,
ClientInfoStatus
> failedProperties)
Constructs a
SQLClientInfoException
object initialized with a
 given
reason
,
SQLState
,
vendorCode
and
failedProperties
.
SQLClientInfoException
(
String
reason,
String
SQLState,
 int vendorCode,
Map
<
String
,
ClientInfoStatus
> failedProperties,
Throwable
cause)
Constructs a
SQLClientInfoException
object initialized with a
 given
reason
,
SQLState
,
cause
,
vendorCode
and
failedProperties
.
SQLClientInfoException
(
String
reason,
String
SQLState,
Map
<
String
,
ClientInfoStatus
> failedProperties)
Constructs a
SQLClientInfoException
object initialized with a
 given
reason
,
SQLState
and
failedProperties
.
SQLClientInfoException
(
String
reason,
String
SQLState,
Map
<
String
,
ClientInfoStatus
> failedProperties,
Throwable
cause)
Constructs a
SQLClientInfoException
object initialized with a
 given
reason
,
SQLState
,
cause
and
failedProperties
.
SQLClientInfoException
(
String
reason,
Map
<
String
,
ClientInfoStatus
> failedProperties)
Constructs a
SQLClientInfoException
object initialized with a
 given
reason
and
failedProperties
.
SQLClientInfoException
(
String
reason,
Map
<
String
,
ClientInfoStatus
> failedProperties,
Throwable
cause)
Constructs a
SQLClientInfoException
object initialized with a
 given
reason
,
cause
and
failedProperties
.
SQLDataException
(
String
reason)
Constructs a
SQLDataException
object with a given
reason
.
SQLDataException
(
String
reason,
String
SQLState)
Constructs a
SQLDataException
object with a given
reason
and
SQLState
.
SQLDataException
(
String
reason,
String
SQLState,
 int vendorCode)
Constructs a
SQLDataException
object with a given
reason
,
SQLState
and
vendorCode
.
SQLDataException
(
String
reason,
String
SQLState,
 int vendorCode,
Throwable
cause)
Constructs a
SQLDataException
object with a given
reason
,
SQLState
,
vendorCode
and
cause
.
SQLDataException
(
String
reason,
String
SQLState,
Throwable
cause)
Constructs a
SQLDataException
object with a given
reason
,
SQLState
and
cause
.
SQLDataException
(
String
reason,
Throwable
cause)
Constructs a
SQLDataException
object with a given
reason
and
cause
.
SQLException
(
String
reason)
Constructs a
SQLException
object with a given
reason
.
SQLException
(
String
reason,
String
SQLState)
Constructs a
SQLException
object with a given
reason
and
SQLState
.
SQLException
(
String
reason,
String
SQLState,
 int vendorCode)
Constructs a
SQLException
object with a given
reason
,
SQLState
and
vendorCode
.
SQLException
(
String
reason,
String
sqlState,
 int vendorCode,
Throwable
cause)
Constructs a
SQLException
object with a given
reason
,
SQLState
,
vendorCode
and
cause
.
SQLException
(
String
reason,
String
sqlState,
Throwable
cause)
Constructs a
SQLException
object with a given
reason
,
SQLState
and
cause
.
SQLException
(
String
reason,
Throwable
cause)
Constructs a
SQLException
object with a given
reason
and
cause
.
SQLFeatureNotSupportedException
(
String
reason)
Constructs a
SQLFeatureNotSupportedException
object
 with a given
reason
.
SQLFeatureNotSupportedException
(
String
reason,
String
SQLState)
Constructs a
SQLFeatureNotSupportedException
object
 with a given
reason
and
SQLState
.
SQLFeatureNotSupportedException
(
String
reason,
String
SQLState,
 int vendorCode)
Constructs a
SQLFeatureNotSupportedException
object
  with a given
reason
,
SQLState
and
vendorCode
.
SQLFeatureNotSupportedException
(
String
reason,
String
SQLState,
 int vendorCode,
Throwable
cause)
Constructs a
SQLFeatureNotSupportedException
object
 with a given
reason
,
SQLState
,
vendorCode
and
cause
.
SQLFeatureNotSupportedException
(
String
reason,
String
SQLState,
Throwable
cause)
Constructs a
SQLFeatureNotSupportedException
object
 with a given
reason
,
SQLState
and
cause
.
SQLFeatureNotSupportedException
(
String
reason,
Throwable
cause)
Constructs a
SQLFeatureNotSupportedException
object
 with a given
reason
and
cause
.
SQLIntegrityConstraintViolationException
(
String
reason)
Constructs a
SQLIntegrityConstraintViolationException
with a given
reason
.
SQLIntegrityConstraintViolationException
(
String
reason,
String
SQLState)
Constructs a
SQLIntegrityConstraintViolationException
object with a given
reason
and
SQLState
.
SQLIntegrityConstraintViolationException
(
String
reason,
String
SQLState,
 int vendorCode)
Constructs a
SQLIntegrityConstraintViolationException
object
 with a given
reason
,
SQLState
and
vendorCode
.
SQLIntegrityConstraintViolationException
(
String
reason,
String
SQLState,
 int vendorCode,
Throwable
cause)
Constructs a
SQLIntegrityConstraintViolationException
object
 with a given
reason
,
SQLState
,
vendorCode
and
cause
.
SQLIntegrityConstraintViolationException
(
String
reason,
String
SQLState,
Throwable
cause)
Constructs a
SQLIntegrityConstraintViolationException
object
  with a given
reason
,
SQLState
and
cause
.
SQLIntegrityConstraintViolationException
(
String
reason,
Throwable
cause)
Constructs a
SQLIntegrityConstraintViolationException
object
 with a given
reason
and
cause
.
SQLInvalidAuthorizationSpecException
(
String
reason)
Constructs a
SQLInvalidAuthorizationSpecException
object
  with a given
reason
.
SQLInvalidAuthorizationSpecException
(
String
reason,
String
SQLState)
Constructs a
SQLInvalidAuthorizationSpecException
object
 with a given
reason
and
SQLState
.
SQLInvalidAuthorizationSpecException
(
String
reason,
String
SQLState,
 int vendorCode)
Constructs a
SQLInvalidAuthorizationSpecException
object
 with a given
reason
,
SQLState
and
vendorCode
.
SQLInvalidAuthorizationSpecException
(
String
reason,
String
SQLState,
 int vendorCode,
Throwable
cause)
Constructs a
SQLInvalidAuthorizationSpecException
object
 with a given
reason
,
SQLState
,
vendorCode
and
cause
.
SQLInvalidAuthorizationSpecException
(
String
reason,
String
SQLState,
Throwable
cause)
Constructs a
SQLInvalidAuthorizationSpecException
object
  with a given
reason
,
SQLState
and
cause
.
SQLInvalidAuthorizationSpecException
(
String
reason,
Throwable
cause)
Constructs a
SQLInvalidAuthorizationSpecException
object
  with a given
reason
and
cause
.
SQLNonTransientConnectionException
(
String
reason)
Constructs a
SQLNonTransientConnectionException
object
  with a given
reason
.
SQLNonTransientConnectionException
(
String
reason,
String
SQLState)
Constructs a
SQLNonTransientConnectionException
object
 with a given
reason
and
SQLState
.
SQLNonTransientConnectionException
(
String
reason,
String
SQLState,
 int vendorCode)
Constructs a
SQLNonTransientConnectionException
object
 with a given
reason
,
SQLState
and
vendorCode
.
SQLNonTransientConnectionException
(
String
reason,
String
SQLState,
 int vendorCode,
Throwable
cause)
Constructs a
SQLNonTransientConnectionException
object
 with a given
reason
,
SQLState
,
vendorCode
and
cause
.
SQLNonTransientConnectionException
(
String
reason,
String
SQLState,
Throwable
cause)
Constructs a
SQLNonTransientConnectionException
object
 with a given
reason
,
SQLState
and
cause
.
SQLNonTransientConnectionException
(
String
reason,
Throwable
cause)
Constructs a
SQLNonTransientConnectionException
object
 with a given
reason
and
cause
.
SQLNonTransientException
(
String
reason)
Constructs a
SQLNonTransientException
object
 with a given
reason
.
SQLNonTransientException
(
String
reason,
String
SQLState)
Constructs a
SQLNonTransientException
object
 with a given
reason
and
SQLState
.
SQLNonTransientException
(
String
reason,
String
SQLState,
 int vendorCode)
Constructs a
SQLNonTransientException
object
 with a given
reason
,
SQLState
and
vendorCode
.
SQLNonTransientException
(
String
reason,
String
SQLState,
 int vendorCode,
Throwable
cause)
Constructs a
SQLNonTransientException
object
 with a given
reason
,
SQLState
,
vendorCode
and
cause
.
SQLNonTransientException
(
String
reason,
String
SQLState,
Throwable
cause)
Constructs a
SQLNonTransientException
object
 with a given
reason
,
SQLState
and
cause
.
SQLNonTransientException
(
String
reason,
Throwable
cause)
Constructs a
SQLNonTransientException
object
 with a given
reason
and
cause
.
SQLPermission
(
String
name)
Creates a new
SQLPermission
object with the specified name.
SQLPermission
(
String
name,
String
actions)
Creates a new
SQLPermission
object with the specified name.
SQLRecoverableException
(
String
reason)
Constructs a
SQLRecoverableException
object
  with a given
reason
.
SQLRecoverableException
(
String
reason,
String
SQLState)
Constructs a
SQLRecoverableException
object
 with a given
reason
and
SQLState
.
SQLRecoverableException
(
String
reason,
String
SQLState,
 int vendorCode)
Constructs a
SQLRecoverableException
object
  with a given
reason
,
SQLState
and
vendorCode
.
SQLRecoverableException
(
String
reason,
String
SQLState,
 int vendorCode,
Throwable
cause)
Constructs a
SQLRecoverableException
object
 with a given
reason
,
SQLState
,
vendorCode
and
cause
.
SQLRecoverableException
(
String
reason,
String
SQLState,
Throwable
cause)
Constructs a
SQLRecoverableException
object
 with a given
reason
,
SQLState
and
cause
.
SQLRecoverableException
(
String
reason,
Throwable
cause)
Constructs a
SQLRecoverableException
object
 with a given
reason
and
cause
.
SQLSyntaxErrorException
(
String
reason)
Constructs a
SQLSyntaxErrorException
object
 with a given
reason
.
SQLSyntaxErrorException
(
String
reason,
String
SQLState)
Constructs a
SQLSyntaxErrorException
object
 with a given
reason
and
SQLState
.
SQLSyntaxErrorException
(
String
reason,
String
SQLState,
 int vendorCode)
Constructs a
SQLSyntaxErrorException
object
  with a given
reason
,
SQLState
and
vendorCode
.
SQLSyntaxErrorException
(
String
reason,
String
SQLState,
 int vendorCode,
Throwable
cause)
Constructs a
SQLSyntaxErrorException
object
 with a given
reason
,
SQLState
,
vendorCode
and
cause
.
SQLSyntaxErrorException
(
String
reason,
String
SQLState,
Throwable
cause)
Constructs a
SQLSyntaxErrorException
object
 with a given
reason
,
SQLState
and
cause
.
SQLSyntaxErrorException
(
String
reason,
Throwable
cause)
Constructs a
SQLSyntaxErrorException
object
 with a given
reason
and
cause
.
SQLTimeoutException
(
String
reason)
Constructs a
SQLTimeoutException
object
 with a given
reason
.
SQLTimeoutException
(
String
reason,
String
SQLState)
Constructs a
SQLTimeoutException
object
 with a given
reason
and
SQLState
.
SQLTimeoutException
(
String
reason,
String
SQLState,
 int vendorCode)
Constructs a
SQLTimeoutException
object
 with a given
reason
,
SQLState
and
vendorCode
.
SQLTimeoutException
(
String
reason,
String
SQLState,
 int vendorCode,
Throwable
cause)
Constructs a
SQLTimeoutException
object
 with a given
reason
,
SQLState
,
vendorCode
and
cause
.
SQLTimeoutException
(
String
reason,
String
SQLState,
Throwable
cause)
Constructs a
SQLTimeoutException
object
  with a given
reason
,
SQLState
and
cause
.
SQLTimeoutException
(
String
reason,
Throwable
cause)
Constructs a
SQLTimeoutException
object
 with a given
reason
and
cause
.
SQLTransactionRollbackException
(
String
reason)
Constructs a
SQLTransactionRollbackException
object
 with a given
reason
.
SQLTransactionRollbackException
(
String
reason,
String
SQLState)
Constructs a
SQLTransactionRollbackException
object
 with a given
reason
and
SQLState
.
SQLTransactionRollbackException
(
String
reason,
String
SQLState,
 int vendorCode)
Constructs a
SQLTransactionRollbackException
object
 with a given
reason
,
SQLState
and
vendorCode
.
SQLTransactionRollbackException
(
String
reason,
String
SQLState,
 int vendorCode,
Throwable
cause)
Constructs a
SQLTransactionRollbackException
object
 with a given
reason
,
SQLState
,
vendorCode
and
cause
.
SQLTransactionRollbackException
(
String
reason,
String
SQLState,
Throwable
cause)
Constructs a
SQLTransactionRollbackException
object
 with a given
reason
,
SQLState
and
cause
.
SQLTransactionRollbackException
(
String
reason,
Throwable
cause)
Constructs a
SQLTransactionRollbackException
object
 with a given
reason
and
cause
.
SQLTransientConnectionException
(
String
reason)
Constructs a
SQLTransientConnectionException
object
 with a given
reason
.
SQLTransientConnectionException
(
String
reason,
String
SQLState)
Constructs a
SQLTransientConnectionException
object
 with a given
reason
and
SQLState
.
SQLTransientConnectionException
(
String
reason,
String
SQLState,
 int vendorCode)
Constructs a
SQLTransientConnectionException
object
 with a given
reason
,
SQLState
and
vendorCode
.
SQLTransientConnectionException
(
String
reason,
String
SQLState,
 int vendorCode,
Throwable
cause)
Constructs a
SQLTransientConnectionException
object
 with a given
reason
,
SQLState
,
vendorCode
and
cause
.
SQLTransientConnectionException
(
String
reason,
String
SQLState,
Throwable
cause)
Constructs a
SQLTransientConnectionException
object
 with a given
reason
,
SQLState
and
cause
.
SQLTransientConnectionException
(
String
reason,
Throwable
cause)
Constructs a
SQLTransientConnectionException
object
 with a given
reason
and
cause
.
SQLTransientException
(
String
reason)
Constructs a
SQLTransientException
object
  with a given
reason
.
SQLTransientException
(
String
reason,
String
SQLState)
Constructs a
SQLTransientException
object
 with a given
reason
and
SQLState
.
SQLTransientException
(
String
reason,
String
SQLState,
 int vendorCode)
Constructs a
SQLTransientException
object
  with a given
reason
,
SQLState
and
vendorCode
.
SQLTransientException
(
String
reason,
String
SQLState,
 int vendorCode,
Throwable
cause)
Constructs a
SQLTransientException
object
 with a given
reason
,
SQLState
,
vendorCode
and
cause
.
SQLTransientException
(
String
reason,
String
SQLState,
Throwable
cause)
Constructs a
SQLTransientException
object
 with a given
reason
,
SQLState
and
cause
.
SQLTransientException
(
String
reason,
Throwable
cause)
Constructs a
SQLTransientException
object
 with a given
reason
and
cause
.
SQLWarning
(
String
reason)
Constructs a
SQLWarning
object
 with a given
reason
.
SQLWarning
(
String
reason,
String
SQLState)
Constructs a
SQLWarning
object
 with a given
reason
and
SQLState
.
SQLWarning
(
String
reason,
String
SQLState,
 int vendorCode)
Constructs a
SQLWarning
object
  with a given
reason
,
SQLState
and
vendorCode
.
SQLWarning
(
String
reason,
String
SQLState,
 int vendorCode,
Throwable
cause)
Constructs a
SQLWarning
object
 with a given
reason
,
SQLState
,
vendorCode
and
cause
.
SQLWarning
(
String
reason,
String
SQLState,
Throwable
cause)
Constructs a
SQLWarning
object
 with a given
reason
,
SQLState
and
cause
.
SQLWarning
(
String
reason,
Throwable
cause)
Constructs a
SQLWarning
object
 with a given
reason
and
cause
.
Constructor parameters in
java.sql
with type arguments of type
String
Modifier
Constructor
Description
SQLClientInfoException
(
String
reason,
String
SQLState,
 int vendorCode,
Map
<
String
,
ClientInfoStatus
> failedProperties)
Constructs a
SQLClientInfoException
object initialized with a
 given
reason
,
SQLState
,
vendorCode
and
failedProperties
.
SQLClientInfoException
(
String
reason,
String
SQLState,
 int vendorCode,
Map
<
String
,
ClientInfoStatus
> failedProperties,
Throwable
cause)
Constructs a
SQLClientInfoException
object initialized with a
 given
reason
,
SQLState
,
cause
,
vendorCode
and
failedProperties
.
SQLClientInfoException
(
String
reason,
String
SQLState,
Map
<
String
,
ClientInfoStatus
> failedProperties)
Constructs a
SQLClientInfoException
object initialized with a
 given
reason
,
SQLState
and
failedProperties
.
SQLClientInfoException
(
String
reason,
String
SQLState,
Map
<
String
,
ClientInfoStatus
> failedProperties,
Throwable
cause)
Constructs a
SQLClientInfoException
object initialized with a
 given
reason
,
SQLState
,
cause
and
failedProperties
.
SQLClientInfoException
(
String
reason,
Map
<
String
,
ClientInfoStatus
> failedProperties)
Constructs a
SQLClientInfoException
object initialized with a
 given
reason
and
failedProperties
.
SQLClientInfoException
(
String
reason,
Map
<
String
,
ClientInfoStatus
> failedProperties,
Throwable
cause)
Constructs a
SQLClientInfoException
object initialized with a
 given
reason
,
cause
and
failedProperties
.
SQLClientInfoException
(
Map
<
String
,
ClientInfoStatus
> failedProperties)
Constructs a
SQLClientInfoException
object initialized with a
 given
failedProperties
.
SQLClientInfoException
(
Map
<
String
,
ClientInfoStatus
> failedProperties,
Throwable
cause)
Constructs a
SQLClientInfoException
object initialized with
 a given
cause
and
failedProperties
.
Uses of
String
in
java.text
Methods in
java.text
that return
String
Modifier and Type
Method
Description
final
String
DateFormat.
format
(
Date
date)
Formats a
Date
into a date-time string.
final
String
Format.
format
(
Object
obj)
Formats an object to produce a string.
static
String
MessageFormat.
format
(
String
pattern,
Object
... arguments)
Creates a MessageFormat with the given pattern and uses it
 to format the given arguments.
final
String
NumberFormat.
format
(double number)
Specialization of format.
final
String
NumberFormat.
format
(long number)
Specialization of format.
String
[]
DateFormatSymbols.
getAmPmStrings
()
Gets ampm strings.
String
DecimalFormatSymbols.
getCurrencySymbol
()
Returns the currency symbol for the currency of these
 DecimalFormatSymbols in their locale.
String
[]
DateFormatSymbols.
getEras
()
Gets era strings.
String
DecimalFormatSymbols.
getExponentSeparator
()
Returns the string used to separate the mantissa from the exponent.
String
DecimalFormatSymbols.
getInfinity
()
Gets the string used to represent infinity.
String
DecimalFormatSymbols.
getInternationalCurrencySymbol
()
Returns the ISO 4217 currency code of the currency of these
 DecimalFormatSymbols.
String
DateFormatSymbols.
getLocalPatternChars
()
Gets localized date-time pattern characters.
String
[]
DateFormatSymbols.
getMonths
()
Gets month strings.
protected
String
AttributedCharacterIterator.Attribute.
getName
()
Returns the name of the attribute.
String
DecimalFormatSymbols.
getNaN
()
Gets the string used to represent "not a number".
String
DecimalFormat.
getNegativePrefix
()
Get the negative prefix.
String
DecimalFormat.
getNegativeSuffix
()
Get the negative suffix.
String
DecimalFormat.
getPositivePrefix
()
Get the positive prefix.
String
DecimalFormat.
getPositiveSuffix
()
Get the positive suffix.
String
RuleBasedCollator.
getRules
()
Gets the table-based rules for the collation object.
String
[]
DateFormatSymbols.
getShortMonths
()
Gets short month strings.
String
[]
DateFormatSymbols.
getShortWeekdays
()
Gets short weekday strings.
String
CollationKey.
getSourceString
()
Returns the String that this CollationKey represents.
String
[]
DateFormatSymbols.
getWeekdays
()
Gets weekday strings.
String
[][]
DateFormatSymbols.
getZoneStrings
()
Gets time zone strings.
static
String
Normalizer.
normalize
(
CharSequence
src,
Normalizer.Form
form)
Normalize a sequence of char values.
String
DecimalFormat.
toLocalizedPattern
()
Synthesizes a localized pattern string that represents the current
 state of this Format object.
String
SimpleDateFormat.
toLocalizedPattern
()
Returns a localized pattern string describing this date format.
String
ChoiceFormat.
toPattern
()
Gets the pattern.
String
DecimalFormat.
toPattern
()
Synthesizes a pattern string that represents the current state
 of this Format object.
String
MessageFormat.
toPattern
()
Returns a pattern representing the current state of the message format.
String
SimpleDateFormat.
toPattern
()
Returns a pattern string describing this date format.
String
Annotation.
toString
()
Returns the String representation of this Annotation.
String
AttributedCharacterIterator.Attribute.
toString
()
Returns a string representation of the object.
String
Bidi.
toString
()
Display the bidi internal state, used in debugging.
String
FieldPosition.
toString
()
Return a string representation of this FieldPosition.
String
ParsePosition.
toString
()
Return a string representation of this ParsePosition.
Methods in
java.text
with parameters of type
String
Modifier and Type
Method
Description
void
DecimalFormat.
applyLocalizedPattern
(
String
pattern)
Apply the given pattern to this Format object.
void
SimpleDateFormat.
applyLocalizedPattern
(
String
pattern)
Applies the given localized pattern string to this date format.
void
ChoiceFormat.
applyPattern
(
String
newPattern)
Sets the pattern.
void
DecimalFormat.
applyPattern
(
String
pattern)
Apply the given pattern to this Format object.
void
MessageFormat.
applyPattern
(
String
pattern)
Sets the pattern used by this message format.
void
SimpleDateFormat.
applyPattern
(
String
pattern)
Applies the given pattern string to this date format.
abstract int
Collator.
compare
(
String
source,
String
target)
Compares the source string to the target string according to the
 collation rules for this Collator.
int
RuleBasedCollator.
compare
(
String
source,
String
target)
Compares the character data stored in two different strings based on the
 collation rules.
boolean
Collator.
equals
(
String
source,
String
target)
Convenience method for comparing the equality of two strings based on
 this Collator's collation rules.
static
String
MessageFormat.
format
(
String
pattern,
Object
... arguments)
Creates a MessageFormat with the given pattern and uses it
 to format the given arguments.
CollationElementIterator
RuleBasedCollator.
getCollationElementIterator
(
String
source)
Returns a CollationElementIterator for the given String.
abstract
CollationKey
Collator.
getCollationKey
(
String
source)
Transforms the String into a series of bits that can be compared bitwise
 to other CollationKeys.
CollationKey
RuleBasedCollator.
getCollationKey
(
String
source)
Transforms the string into a series of characters that can be compared
 with CollationKey.compareTo.
Number
ChoiceFormat.
parse
(
String
text,
ParsePosition
status)
Parses a Number from the input text.
Number
CompactNumberFormat.
parse
(
String
text,
ParsePosition
pos)
Parses a compact number from a string to produce a
Number
.
Date
DateFormat.
parse
(
String
source)
Parses text from the beginning of the given string to produce a date.
abstract
Date
DateFormat.
parse
(
String
source,
ParsePosition
pos)
Parse a date/time string according to the given parse position.
Number
DecimalFormat.
parse
(
String
text,
ParsePosition
pos)
Parses text from a string to produce a
Number
.
Object
[]
MessageFormat.
parse
(
String
source)
Parses text from the beginning of the given string to produce an object
 array.
Object
[]
MessageFormat.
parse
(
String
source,
ParsePosition
pos)
Parses the string.
Number
NumberFormat.
parse
(
String
source)
Parses text from the beginning of the given string to produce a number.
abstract
Number
NumberFormat.
parse
(
String
source,
ParsePosition
parsePosition)
Returns a Long if possible (e.g., within the range [Long.MIN_VALUE,
 Long.MAX_VALUE] and with no decimals), otherwise a Double.
Date
SimpleDateFormat.
parse
(
String
text,
ParsePosition
pos)
Parses text from a string to produce a
Date
.
Object
DateFormat.
parseObject
(
String
source,
ParsePosition
pos)
Parses text from a string to produce a
Date
.
Object
Format.
parseObject
(
String
source)
Parses text from the beginning of the given string to produce an object.
abstract
Object
Format.
parseObject
(
String
source,
ParsePosition
pos)
Parses text from a string to produce an object.
Object
MessageFormat.
parseObject
(
String
source,
ParsePosition
pos)
Parses text from a string to produce an object array.
final
Object
NumberFormat.
parseObject
(
String
source,
ParsePosition
pos)
Parses text from a string to produce a
Number
.
void
DateFormatSymbols.
setAmPmStrings
(
String
[] newAmpms)
Sets ampm strings.
void
ChoiceFormat.
setChoices
(double[] limits,
String
[] formats)
Set the choices to be used in formatting.
void
DecimalFormatSymbols.
setCurrencySymbol
(
String
currency)
Sets the currency symbol for the currency of these
 DecimalFormatSymbols in their locale.
void
DateFormatSymbols.
setEras
(
String
[] newEras)
Sets era strings.
void
DecimalFormatSymbols.
setExponentSeparator
(
String
exp)
Sets the string used to separate the mantissa from the exponent.
void
DecimalFormatSymbols.
setInfinity
(
String
infinity)
Sets the string used to represent infinity.
void
DecimalFormatSymbols.
setInternationalCurrencySymbol
(
String
currencyCode)
Sets the ISO 4217 currency code of the currency of these
 DecimalFormatSymbols.
void
DateFormatSymbols.
setLocalPatternChars
(
String
newLocalPatternChars)
Sets localized date-time pattern characters.
void
DateFormatSymbols.
setMonths
(
String
[] newMonths)
Sets month strings.
void
DecimalFormatSymbols.
setNaN
(
String
NaN)
Sets the string used to represent "not a number".
void
DecimalFormat.
setNegativePrefix
(
String
newValue)
Set the negative prefix.
void
DecimalFormat.
setNegativeSuffix
(
String
newValue)
Set the negative suffix.
void
DecimalFormat.
setPositivePrefix
(
String
newValue)
Set the positive prefix.
void
DecimalFormat.
setPositiveSuffix
(
String
newValue)
Set the positive suffix.
void
DateFormatSymbols.
setShortMonths
(
String
[] newShortMonths)
Sets short month strings.
void
DateFormatSymbols.
setShortWeekdays
(
String
[] newShortWeekdays)
Sets short weekday strings.
void
BreakIterator.
setText
(
String
newText)
Set a new text string to be scanned.
void
CollationElementIterator.
setText
(
String
source)
Set a new string over which to iterate.
void
StringCharacterIterator.
setText
(
String
text)
Reset this iterator to point to a new string.
void
DateFormatSymbols.
setWeekdays
(
String
[] newWeekdays)
Sets weekday strings.
void
DateFormatSymbols.
setZoneStrings
(
String
[][] newZoneStrings)
Sets time zone strings.
static
Normalizer.Form
Normalizer.Form.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
NumberFormat.Style
NumberFormat.Style.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Constructors in
java.text
with parameters of type
String
Modifier
Constructor
Description
protected
Attribute
(
String
name)
Constructs an
Attribute
with the given name.
AttributedString
(
String
text)
Constructs an AttributedString instance with the given text.
AttributedString
(
String
text,
Map
<? extends
AttributedCharacterIterator.Attribute
,
?> attributes)
Constructs an AttributedString instance with the given text and attributes.
Bidi
(
String
paragraph,
 int flags)
Create Bidi from the given paragraph of text and base direction.
ChoiceFormat
(double[] limits,
String
[] formats)
Constructs with the limits and the corresponding formats.
ChoiceFormat
(
String
newPattern)
Constructs with limits and corresponding formats based on the pattern.
protected
CollationKey
(
String
source)
CollationKey constructor.
CompactNumberFormat
(
String
decimalPattern,
DecimalFormatSymbols
symbols,
String
[] compactPatterns)
Creates a
CompactNumberFormat
using the given decimal pattern,
 decimal format symbols and compact patterns.
CompactNumberFormat
(
String
decimalPattern,
DecimalFormatSymbols
symbols,
String
[] compactPatterns,
String
pluralRules)
Creates a
CompactNumberFormat
using the given decimal pattern,
 decimal format symbols, compact patterns, and plural rules.
DecimalFormat
(
String
pattern)
Creates a DecimalFormat using the given pattern and the symbols
 for the default
FORMAT
locale.
DecimalFormat
(
String
pattern,
DecimalFormatSymbols
symbols)
Creates a DecimalFormat using the given pattern and symbols.
protected
Field
(
String
name,
 int calendarField)
Creates a
Field
.
protected
Field
(
String
name)
Creates a Field with the specified name.
protected
Field
(
String
name)
Creates a Field with the specified name.
protected
Field
(
String
name)
Creates a Field instance with the specified
 name.
MessageFormat
(
String
pattern)
Constructs a MessageFormat for the default
FORMAT
locale and the
 specified pattern.
MessageFormat
(
String
pattern,
Locale
locale)
Constructs a MessageFormat for the specified locale and
 pattern.
ParseException
(
String
s,
 int errorOffset)
Constructs a ParseException with the specified detail message and
 offset.
RuleBasedCollator
(
String
rules)
RuleBasedCollator constructor.
SimpleDateFormat
(
String
pattern)
Constructs a
SimpleDateFormat
using the given pattern and
 the default date format symbols for the default
FORMAT
locale.
SimpleDateFormat
(
String
pattern,
DateFormatSymbols
formatSymbols)
Constructs a
SimpleDateFormat
using the given pattern and
 date format symbols.
SimpleDateFormat
(
String
pattern,
Locale
locale)
Constructs a
SimpleDateFormat
using the given pattern and
 the default date format symbols for the given locale.
StringCharacterIterator
(
String
text)
Constructs an iterator with an initial index of 0.
StringCharacterIterator
(
String
text,
 int pos)
Constructs an iterator with the specified initial index.
StringCharacterIterator
(
String
text,
 int begin,
 int end,
 int pos)
Constructs an iterator over the given range of the given string, with the
 index set at the specified position.
Uses of
String
in
java.time
Fields in
java.time
with type parameters of type
String
Modifier and Type
Field
Description
static final
Map
<
String
,
String
>
ZoneId.
SHORT_IDS
A map of zone overrides to enable the short time-zone names to be used.
static final
Map
<
String
,
String
>
ZoneId.
SHORT_IDS
A map of zone overrides to enable the short time-zone names to be used.
Methods in
java.time
that return
String
Modifier and Type
Method
Description
String
LocalDate.
format
(
DateTimeFormatter
formatter)
Formats this date using the specified formatter.
String
LocalDateTime.
format
(
DateTimeFormatter
formatter)
Formats this date-time using the specified formatter.
String
LocalTime.
format
(
DateTimeFormatter
formatter)
Formats this time using the specified formatter.
String
MonthDay.
format
(
DateTimeFormatter
formatter)
Formats this month-day using the specified formatter.
String
OffsetDateTime.
format
(
DateTimeFormatter
formatter)
Formats this date-time using the specified formatter.
String
OffsetTime.
format
(
DateTimeFormatter
formatter)
Formats this time using the specified formatter.
String
Year.
format
(
DateTimeFormatter
formatter)
Formats this year using the specified formatter.
String
YearMonth.
format
(
DateTimeFormatter
formatter)
Formats this year-month using the specified formatter.
String
ZonedDateTime.
format
(
DateTimeFormatter
formatter)
Formats this date-time using the specified formatter.
String
DayOfWeek.
getDisplayName
(
TextStyle
style,
Locale
locale)
Gets the textual representation, such as 'Mon' or 'Friday'.
String
Month.
getDisplayName
(
TextStyle
style,
Locale
locale)
Gets the textual representation, such as 'Jan' or 'December'.
String
ZoneId.
getDisplayName
(
TextStyle
style,
Locale
locale)
Gets the textual representation of the zone, such as 'British Time' or
 '+02:00'.
abstract
String
ZoneId.
getId
()
Gets the unique time-zone ID.
String
ZoneOffset.
getId
()
Gets the normalized zone offset ID.
String
Duration.
toString
()
A string representation of this duration using ISO-8601 seconds
 based representation, such as
PT8H6M12.345S
.
String
Instant.
toString
()
A string representation of this instant using ISO-8601 representation.
String
LocalDate.
toString
()
Outputs this date as a
String
, such as
2007-12-03
.
String
LocalDateTime.
toString
()
Outputs this date-time as a
String
, such as
2007-12-03T10:15:30
.
String
LocalTime.
toString
()
Outputs this time as a
String
, such as
10:15
.
String
MonthDay.
toString
()
Outputs this month-day as a
String
, such as
--12-03
.
String
OffsetDateTime.
toString
()
Outputs this date-time as a
String
, such as
2007-12-03T10:15:30+01:00
.
String
OffsetTime.
toString
()
Outputs this time as a
String
, such as
10:15:30+01:00
.
String
Period.
toString
()
Outputs this period as a
String
, such as
P6Y3M1D
.
String
Year.
toString
()
Outputs this year as a
String
.
String
YearMonth.
toString
()
Outputs this year-month as a
String
, such as
2007-12
.
String
ZonedDateTime.
toString
()
Outputs this date-time as a
String
, such as
2007-12-03T10:15:30+01:00[Europe/Paris]
.
String
ZoneId.
toString
()
Outputs this zone as a
String
, using the ID.
String
ZoneOffset.
toString
()
Outputs this offset as a
String
, using the normalized ID.
Methods in
java.time
that return types with arguments of type
String
Modifier and Type
Method
Description
static
Set
<
String
>
ZoneId.
getAvailableZoneIds
()
Gets the set of available zone IDs.
Methods in
java.time
with parameters of type
String
Modifier and Type
Method
Description
static
ZoneId
ZoneId.
of
(
String
zoneId)
Obtains an instance of
ZoneId
from an ID ensuring that the
 ID is valid and available for use.
static
ZoneId
ZoneId.
of
(
String
zoneId,
Map
<
String
,
String
> aliasMap)
Obtains an instance of
ZoneId
using its ID using a map
 of aliases to supplement the standard zone IDs.
static
ZoneOffset
ZoneOffset.
of
(
String
offsetId)
Obtains an instance of
ZoneOffset
using the ID.
static
ZoneId
ZoneId.
ofOffset
(
String
prefix,
ZoneOffset
offset)
Obtains an instance of
ZoneId
wrapping an offset.
static
DayOfWeek
DayOfWeek.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
Month
Month.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Method parameters in
java.time
with type arguments of type
String
Modifier and Type
Method
Description
static
ZoneId
ZoneId.
of
(
String
zoneId,
Map
<
String
,
String
> aliasMap)
Obtains an instance of
ZoneId
using its ID using a map
 of aliases to supplement the standard zone IDs.
static
ZoneId
ZoneId.
of
(
String
zoneId,
Map
<
String
,
String
> aliasMap)
Obtains an instance of
ZoneId
using its ID using a map
 of aliases to supplement the standard zone IDs.
Constructors in
java.time
with parameters of type
String
Modifier
Constructor
Description
DateTimeException
(
String
message)
Constructs a new date-time exception with the specified message.
DateTimeException
(
String
message,
Throwable
cause)
Constructs a new date-time exception with the specified message and cause.
Uses of
String
in
java.time.chrono
Methods in
java.time.chrono
that return
String
Modifier and Type
Method
Description
default
String
ChronoLocalDate.
format
(
DateTimeFormatter
formatter)
Formats this date using the specified formatter.
default
String
ChronoLocalDateTime.
format
(
DateTimeFormatter
formatter)
Formats this date-time using the specified formatter.
default
String
ChronoZonedDateTime.
format
(
DateTimeFormatter
formatter)
Formats this date-time using the specified formatter.
String
Chronology.
getCalendarType
()
Gets the calendar type of the calendar system.
String
HijrahChronology.
getCalendarType
()
Gets the calendar type of the Islamic calendar.
String
IsoChronology.
getCalendarType
()
Gets the calendar type of the underlying calendar system - 'iso8601'.
String
JapaneseChronology.
getCalendarType
()
Gets the calendar type of the underlying calendar system - 'japanese'.
String
MinguoChronology.
getCalendarType
()
Gets the calendar type of the underlying calendar system - 'roc'.
String
ThaiBuddhistChronology.
getCalendarType
()
Gets the calendar type of the underlying calendar system - 'buddhist'.
default
String
Chronology.
getDisplayName
(
TextStyle
style,
Locale
locale)
Gets the textual representation of this chronology.
default
String
Era.
getDisplayName
(
TextStyle
style,
Locale
locale)
Gets the textual representation of this era.
String
HijrahEra.
getDisplayName
(
TextStyle
style,
Locale
locale)
Gets the textual representation of this era.
String
JapaneseEra.
getDisplayName
(
TextStyle
style,
Locale
locale)
Gets the textual representation of this era.
String
MinguoEra.
getDisplayName
(
TextStyle
style,
Locale
locale)
Gets the textual representation of this era.
String
ThaiBuddhistEra.
getDisplayName
(
TextStyle
style,
Locale
locale)
Gets the textual representation of this era.
String
Chronology.
getId
()
Gets the ID of the chronology.
String
HijrahChronology.
getId
()
Gets the ID of the chronology.
String
IsoChronology.
getId
()
Gets the ID of the chronology - 'ISO'.
String
JapaneseChronology.
getId
()
Gets the ID of the chronology - 'Japanese'.
String
MinguoChronology.
getId
()
Gets the ID of the chronology - 'Minguo'.
String
ThaiBuddhistChronology.
getId
()
Gets the ID of the chronology - 'ThaiBuddhist'.
String
AbstractChronology.
toString
()
Outputs this chronology as a
String
, using the chronology ID.
String
ChronoLocalDate.
toString
()
Outputs this date as a
String
.
String
ChronoLocalDateTime.
toString
()
Outputs this date-time as a
String
.
String
Chronology.
toString
()
Outputs this chronology as a
String
.
String
ChronoPeriod.
toString
()
Outputs this period as a
String
.
String
ChronoZonedDateTime.
toString
()
Outputs this date-time as a
String
.
Methods in
java.time.chrono
with parameters of type
String
Modifier and Type
Method
Description
static
Chronology
Chronology.
of
(
String
id)
Obtains an instance of
Chronology
from a chronology ID or
 calendar system type.
static
HijrahEra
HijrahEra.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
IsoEra
IsoEra.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
JapaneseEra
JapaneseEra.
valueOf
(
String
japaneseEra)
Returns the
JapaneseEra
with the name.
static
MinguoEra
MinguoEra.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
ThaiBuddhistEra
ThaiBuddhistEra.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Uses of
String
in
java.time.format
Methods in
java.time.format
that return
String
Modifier and Type
Method
Description
String
DateTimeFormatter.
format
(
TemporalAccessor
temporal)
Formats a date-time object using this formatter.
static
String
DateTimeFormatterBuilder.
getLocalizedDateTimePattern
(
String
requestedTemplate,
Chronology
chrono,
Locale
locale)
Returns the formatting pattern for the requested template for a locale and chronology.
static
String
DateTimeFormatterBuilder.
getLocalizedDateTimePattern
(
FormatStyle
dateStyle,
FormatStyle
timeStyle,
Chronology
chrono,
Locale
locale)
Gets the formatting pattern for date and time styles for a locale and chronology.
String
DateTimeParseException.
getParsedString
()
Returns the string that was being parsed.
String
DateTimeFormatter.
toString
()
Returns a description of the underlying formatters.
String
DecimalStyle.
toString
()
Returns a string describing this DecimalStyle.
Methods in
java.time.format
with parameters of type
String
Modifier and Type
Method
Description
DateTimeFormatterBuilder
DateTimeFormatterBuilder.
appendLiteral
(
String
literal)
Appends a string literal to the formatter.
DateTimeFormatterBuilder
DateTimeFormatterBuilder.
appendLocalized
(
String
requestedTemplate)
Appends a localized pattern to the formatter using the requested template.
DateTimeFormatterBuilder
DateTimeFormatterBuilder.
appendOffset
(
String
pattern,
String
noOffsetText)
Appends the zone offset, such as '+01:00', to the formatter.
DateTimeFormatterBuilder
DateTimeFormatterBuilder.
appendPattern
(
String
pattern)
Appends the elements defined by the specified pattern to the builder.
static
String
DateTimeFormatterBuilder.
getLocalizedDateTimePattern
(
String
requestedTemplate,
Chronology
chrono,
Locale
locale)
Returns the formatting pattern for the requested template for a locale and chronology.
static
DateTimeFormatter
DateTimeFormatter.
ofLocalizedPattern
(
String
requestedTemplate)
Creates a locale specific formatter derived from the requested template for
 the ISO chronology.
static
DateTimeFormatter
DateTimeFormatter.
ofPattern
(
String
pattern)
Creates a formatter using the specified pattern.
static
DateTimeFormatter
DateTimeFormatter.
ofPattern
(
String
pattern,
Locale
locale)
Creates a formatter using the specified pattern and locale.
static
FormatStyle
FormatStyle.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
ResolverStyle
ResolverStyle.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
SignStyle
SignStyle.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
TextStyle
TextStyle.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Method parameters in
java.time.format
with type arguments of type
String
Modifier and Type
Method
Description
DateTimeFormatterBuilder
DateTimeFormatterBuilder.
appendText
(
TemporalField
field,
Map
<
Long
,
String
> textLookup)
Appends the text of a date-time field to the formatter using the specified
 map to supply the text.
Constructors in
java.time.format
with parameters of type
String
Modifier
Constructor
Description
DateTimeParseException
(
String
message,
CharSequence
parsedData,
 int errorIndex)
Constructs a new exception with the specified message.
DateTimeParseException
(
String
message,
CharSequence
parsedData,
 int errorIndex,
Throwable
cause)
Constructs a new exception with the specified message and cause.
Uses of
String
in
java.time.temporal
Methods in
java.time.temporal
that return
String
Modifier and Type
Method
Description
default
String
TemporalField.
getDisplayName
(
Locale
locale)
Gets the display name for the field in the requested locale.
String
ChronoField.
toString
()
String
ChronoUnit.
toString
()
String
TemporalField.
toString
()
Gets a descriptive name for the field.
String
TemporalUnit.
toString
()
Gets a descriptive name for the unit.
String
ValueRange.
toString
()
Outputs this range as a
String
.
String
WeekFields.
toString
()
A string representation of this
WeekFields
instance.
Methods in
java.time.temporal
with parameters of type
String
Modifier and Type
Method
Description
static
ChronoField
ChronoField.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
ChronoUnit
ChronoUnit.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Constructors in
java.time.temporal
with parameters of type
String
Modifier
Constructor
Description
UnsupportedTemporalTypeException
(
String
message)
Constructs a new UnsupportedTemporalTypeException with the specified message.
UnsupportedTemporalTypeException
(
String
message,
Throwable
cause)
Constructs a new UnsupportedTemporalTypeException with the specified message and cause.
Uses of
String
in
java.time.zone
Methods in
java.time.zone
that return
String
Modifier and Type
Method
Description
String
ZoneOffsetTransition.
toString
()
Returns a string describing this object.
String
ZoneOffsetTransitionRule.
toString
()
Returns a string describing this object.
String
ZoneRules.
toString
()
Returns a string describing this object.
Methods in
java.time.zone
that return types with arguments of type
String
Modifier and Type
Method
Description
static
Set
<
String
>
ZoneRulesProvider.
getAvailableZoneIds
()
Gets the set of available zone IDs.
static
NavigableMap
<
String
,
ZoneRules
>
ZoneRulesProvider.
getVersions
(
String
zoneId)
Gets the history of rules for the zone ID.
protected abstract
NavigableMap
<
String
,
ZoneRules
>
ZoneRulesProvider.
provideVersions
(
String
zoneId)
SPI method to get the history of rules for the zone ID.
protected abstract
Set
<
String
>
ZoneRulesProvider.
provideZoneIds
()
SPI method to get the available zone IDs.
Methods in
java.time.zone
with parameters of type
String
Modifier and Type
Method
Description
static
ZoneRules
ZoneRulesProvider.
getRules
(
String
zoneId,
 boolean forCaching)
Gets the rules for the zone ID.
static
NavigableMap
<
String
,
ZoneRules
>
ZoneRulesProvider.
getVersions
(
String
zoneId)
Gets the history of rules for the zone ID.
protected abstract
ZoneRules
ZoneRulesProvider.
provideRules
(
String
zoneId,
 boolean forCaching)
SPI method to get the rules for the zone ID.
protected abstract
NavigableMap
<
String
,
ZoneRules
>
ZoneRulesProvider.
provideVersions
(
String
zoneId)
SPI method to get the history of rules for the zone ID.
static
ZoneOffsetTransitionRule.TimeDefinition
ZoneOffsetTransitionRule.TimeDefinition.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Constructors in
java.time.zone
with parameters of type
String
Modifier
Constructor
Description
ZoneRulesException
(
String
message)
Constructs a new date-time exception with the specified message.
ZoneRulesException
(
String
message,
Throwable
cause)
Constructs a new date-time exception with the specified message and cause.
Uses of
String
in
java.util
Fields in
java.util
with type parameters of type
String
Modifier and Type
Field
Description
static final
List
<
String
>
ResourceBundle.Control.
FORMAT_CLASS
The class-only format
List
containing
"java.class"
.
static final
List
<
String
>
ResourceBundle.Control.
FORMAT_DEFAULT
The default format
List
, which contains the strings
"java.class"
and
"java.properties"
, in
 this order.
static final
List
<
String
>
ResourceBundle.Control.
FORMAT_PROPERTIES
The properties-only format
List
containing
"java.properties"
.
Methods in
java.util
that return
String
Modifier and Type
Method
Description
static
String
Locale.
caseFoldLanguageTag
(
String
languageTag)
Returns a case folded IETF BCP 47 language tag.
static
String
Arrays.
deepToString
(
Object
[] a)
Returns a string representation of the "deep contents" of the specified
 array.
String
HexFormat.
delimiter
()
Returns the delimiter between hexadecimal values in formatted hexadecimal strings.
String
Base64.Encoder.
encodeToString
(byte[] src)
Encodes the specified byte array into a String using the
Base64
encoding scheme.
String
Scanner.
findInLine
(
String
pattern)
Attempts to find the next occurrence of a pattern constructed from the
 specified string, ignoring delimiters.
String
Scanner.
findInLine
(
Pattern
pattern)
Attempts to find the next occurrence of the specified pattern ignoring
 delimiters.
String
Scanner.
findWithinHorizon
(
String
pattern,
 int horizon)
Attempts to find the next occurrence of a pattern constructed from the
 specified string, ignoring delimiters.
String
Scanner.
findWithinHorizon
(
Pattern
pattern,
 int horizon)
Attempts to find the next occurrence of the specified pattern.
String
HexFormat.
formatHex
(byte[] bytes)
Returns a hexadecimal string formatted from a byte array.
String
HexFormat.
formatHex
(byte[] bytes,
 int fromIndex,
 int toIndex)
Returns a hexadecimal string formatted from a byte array range.
String
PropertyPermission.
getActions
()
Returns the "canonical string representation" of the actions.
static
String
[]
TimeZone.
getAvailableIDs
()
Gets all the available IDs supported.
static
String
[]
TimeZone.
getAvailableIDs
(int rawOffset)
Gets the available IDs according to the given time zone offset in milliseconds.
String
ResourceBundle.
getBaseBundleName
()
Returns the base name of this bundle, if known, or
null
if unknown.
String
Calendar.
getCalendarType
()
Returns the calendar type of this
Calendar
.
String
GregorianCalendar.
getCalendarType
()
Returns
"gregory"
as the calendar type.
String
MissingResourceException.
getClassName
()
Gets parameter passed by constructor.
String
UnknownFormatConversionException.
getConversion
()
Returns the unknown conversion.
String
Locale.
getCountry
()
Returns the country/region code for this locale, which should
 either be the empty string, an uppercase ISO 3166 2-letter code,
 or a UN M.49 3-digit code.
String
Currency.
getCurrencyCode
()
Gets the ISO 4217 currency code of this currency.
final
String
Locale.
getDisplayCountry
()
Returns a name for the locale's country that is appropriate for display to the
 user.
String
Locale.
getDisplayCountry
(
Locale
inLocale)
Returns a name for the locale's country that is appropriate for display to the
 user.
final
String
Locale.
getDisplayLanguage
()
Returns a name for the locale's language that is appropriate for display to the
 user.
String
Locale.
getDisplayLanguage
(
Locale
inLocale)
Returns a name for the locale's language that is appropriate for display to the
 user.
String
Calendar.
getDisplayName
(int field,
 int style,
Locale
locale)
Returns the string representation of the calendar
field
value in the given
style
and
locale
.
String
Currency.
getDisplayName
()
Gets the name that is suitable for displaying this currency for
 the default
DISPLAY
locale.
String
Currency.
getDisplayName
(
Locale
locale)
Gets the name that is suitable for displaying this currency for
 the specified locale.
final
String
Locale.
getDisplayName
()
Returns a name for the locale that is appropriate for display to the
 user.
String
Locale.
getDisplayName
(
Locale
inLocale)
Returns a name for the locale that is appropriate for display
 to the user.
final
String
TimeZone.
getDisplayName
()
Returns a long standard time name of this
TimeZone
suitable for
 presentation to the user in the default locale.
final
String
TimeZone.
getDisplayName
(boolean daylight,
 int style)
Returns a name in the specified
style
of this
TimeZone
suitable for presentation to the user in the default locale.
String
TimeZone.
getDisplayName
(boolean daylight,
 int style,
Locale
locale)
Returns a name in the specified
style
of this
TimeZone
suitable for presentation to the user in the specified
locale
.
final
String
TimeZone.
getDisplayName
(
Locale
locale)
Returns a long standard time name of this
TimeZone
suitable for
 presentation to the user in the specified
locale
.
String
Locale.
getDisplayScript
()
Returns a name for the locale's script that is appropriate for display to
 the user.
String
Locale.
getDisplayScript
(
Locale
inLocale)
Returns a name for the locale's script that is appropriate
 for display to the user.
final
String
Locale.
getDisplayVariant
()
Returns a name for the locale's variant code that is appropriate for display to the
 user.
String
Locale.
getDisplayVariant
(
Locale
inLocale)
Returns a name for the locale's variant code that is appropriate for display to the
 user.
String
Locale.
getExtension
(char key)
Returns the extension (or private use) value associated with
 the specified key, or null if there is no extension
 associated with the key.
String
DuplicateFormatFlagsException.
getFlags
()
Returns the set of flags which contains a duplicate flag.
String
FormatFlagsConversionMismatchException.
getFlags
()
Returns the incompatible flag.
String
IllegalFormatFlagsException.
getFlags
()
Returns the set of flags which contains an illegal combination.
String
UnknownFormatFlagsException.
getFlags
()
Returns the set of flags which contains an unknown flag.
String
MissingFormatArgumentException.
getFormatSpecifier
()
Returns the unmatched format specifier.
String
MissingFormatWidthException.
getFormatSpecifier
()
Returns the format specifier which does not have a width.
String
TimeZone.
getID
()
Gets the ID of this time zone.
String
Locale.
getISO3Country
()
Returns a three-letter abbreviation of this locale's country.
String
Locale.
getISO3Language
()
Returns a three-letter abbreviation of this locale's language.
static
String
[]
Locale.
getISOCountries
()
Returns a list of all 2-letter country codes defined in ISO 3166.
static
String
[]
Locale.
getISOLanguages
()
Returns a list of all 2-letter language codes defined in ISO 639.
String
MissingResourceException.
getKey
()
Gets parameter passed by constructor.
String
Locale.
getLanguage
()
Returns the language code of this Locale.
String
Currency.
getNumericCodeAsString
()
Returns the 3 digit ISO 4217 numeric code of this currency as a
String
.
String
Properties.
getProperty
(
String
key)
Searches for the property with the specified key in this property list.
String
Properties.
getProperty
(
String
key,
String
defaultValue)
Searches for the property with the specified key in this property list.
String
Locale.LanguageRange.
getRange
()
Returns the language range of this
LanguageRange
.
String
Locale.
getScript
()
Returns the script for this locale, which should
 either be the empty string or an ISO 15924 4-letter script
 code.
final
String
ResourceBundle.
getString
(
String
key)
Gets a string for the given key from this resource bundle or one of its parents.
final
String
[]
ResourceBundle.
getStringArray
(
String
key)
Gets a string array for the given key from this resource bundle or one of its parents.
String
Currency.
getSymbol
()
Gets the symbol of this currency for the default
DISPLAY
locale.
String
Currency.
getSymbol
(
Locale
locale)
Gets the symbol of this currency for the specified locale.
String
Locale.
getUnicodeLocaleType
(
String
key)
Returns the Unicode locale type associated with the specified Unicode locale key
 for this locale.
String
Locale.
getVariant
()
Returns the variant code for this locale.
static
String
Locale.
lookupTag
(
List
<
Locale.LanguageRange
> priorityList,
Collection
<
String
> tags)
Returns the best-matching language tag using the lookup mechanism
 defined in RFC 4647.
String
Scanner.
next
()
Finds and returns the next complete token from this scanner.
String
Scanner.
next
(
String
pattern)
Returns the next token if it matches the pattern constructed from the
 specified string.
String
Scanner.
next
(
Pattern
pattern)
Returns the next token if it matches the specified pattern.
String
Scanner.
nextLine
()
Advances this scanner past the current line and returns the input
 that was skipped.
String
StringTokenizer.
nextToken
()
Returns the next token from this string tokenizer.
String
StringTokenizer.
nextToken
(
String
delim)
Returns the next token in this string tokenizer's string.
String
HexFormat.
prefix
()
Returns the prefix used for each hexadecimal value in formatted hexadecimal strings.
final
String
FormatProcessor.
process
(
StringTemplate
PREVIEW
stringTemplate)
Constructs a
String
based on the fragments, format
 specifications found in the fragments and values in the
 supplied
StringTemplate
PREVIEW
object.
String
HexFormat.
suffix
()
Returns the suffix used for each hexadecimal value in formatted hexadecimal strings.
String
ResourceBundle.Control.
toBundleName
(
String
baseName,
Locale
locale)
Converts the given
baseName
and
locale
to the bundle name.
String
Date.
toGMTString
()
Deprecated.
As of JDK version 1.1,
 replaced by
DateFormat.format(Date date)
, using a
 GMT
TimeZone
.
String
HexFormat.
toHexDigits
(byte value)
Returns the two hexadecimal characters for the
byte
value.
String
HexFormat.
toHexDigits
(char value)
Returns the four hexadecimal characters for the
char
value.
String
HexFormat.
toHexDigits
(int value)
Returns the eight hexadecimal characters for the
int
value.
String
HexFormat.
toHexDigits
(long value)
Returns the sixteen hexadecimal characters for the
long
value.
String
HexFormat.
toHexDigits
(long value,
 int digits)
Returns up to sixteen hexadecimal characters for the
long
value.
String
HexFormat.
toHexDigits
(short value)
Returns the four hexadecimal characters for the
short
value.
static
String
Objects.
toIdentityString
(
Object
o)
Returns a string equivalent to the string returned by
Object.toString
if that method and
hashCode
are not
 overridden.
String
Locale.
toLanguageTag
()
Returns a well-formed IETF BCP 47 language tag representing
 this locale.
String
Date.
toLocaleString
()
Deprecated.
As of JDK version 1.1,
 replaced by
DateFormat.format(Date date)
.
final
String
ResourceBundle.Control.
toResourceName
(
String
bundleName,
String
suffix)
Converts the given
bundleName
to the form required
 by the
ClassLoader.getResource
method by replacing all occurrences of
'.'
in
bundleName
with
'/'
and appending a
'.'
and the given file
suffix
.
String
AbstractCollection.
toString
()
Returns a string representation of this collection.
String
AbstractMap.SimpleEntry.
toString
()
Returns a String representation of this map entry.
String
AbstractMap.SimpleImmutableEntry.
toString
()
Returns a String representation of this map entry.
String
AbstractMap.
toString
()
Returns a string representation of this map.
static
String
Arrays.
toString
(boolean[] a)
Returns a string representation of the contents of the specified array.
static
String
Arrays.
toString
(byte[] a)
Returns a string representation of the contents of the specified array.
static
String
Arrays.
toString
(char[] a)
Returns a string representation of the contents of the specified array.
static
String
Arrays.
toString
(double[] a)
Returns a string representation of the contents of the specified array.
static
String
Arrays.
toString
(float[] a)
Returns a string representation of the contents of the specified array.
static
String
Arrays.
toString
(int[] a)
Returns a string representation of the contents of the specified array.
static
String
Arrays.
toString
(long[] a)
Returns a string representation of the contents of the specified array.
static
String
Arrays.
toString
(short[] a)
Returns a string representation of the contents of the specified array.
static
String
Arrays.
toString
(
Object
[] a)
Returns a string representation of the contents of the specified array.
String
BitSet.
toString
()
Returns a string representation of this bit set.
String
Calendar.
toString
()
Return a string representation of this calendar.
String
Currency.
toString
()
Returns the ISO 4217 currency code of this currency.
String
Date.
toString
()
Converts this
Date
object to a
String
of the form:
String
DoubleSummaryStatistics.
toString
()
Returns a non-empty string representation of this object suitable for
 debugging.
String
EventObject.
toString
()
Returns a String representation of this EventObject.
String
Formatter.
toString
()
Returns the result of invoking
toString()
on the destination
 for the output.
String
Hashtable.
toString
()
Returns a string representation of this
Hashtable
object
 in the form of a set of entries, enclosed in braces and separated
 by the ASCII characters "
,
" (comma and space).
String
HexFormat.
toString
()
Returns a description of the formatter parameters for uppercase,
 delimiter, prefix, and suffix.
String
IntSummaryStatistics.
toString
()
Returns a non-empty string representation of this object suitable for
 debugging.
String
Locale.LanguageRange.
toString
()
Returns an informative string representation of this
LanguageRange
object, consisting of language range and weight if the range is
 weighted and the weight is less than the max weight.
final
String
Locale.
toString
()
Returns a string representation of this
Locale
object, consisting of language, country, variant, script,
 and extensions as below:
 
 language + "_" + country + "_" + (variant + "_#" | "#") + script + "_" + extensions
 

 Language is always lower case, country is always upper case, script is always title
 case, and extensions are always lower case.
String
LongSummaryStatistics.
toString
()
Returns a non-empty string representation of this object suitable for
 debugging.
static
String
Objects.
toString
(
Object
o)
Returns the result of calling
toString
for a non-
null
argument and
"null"
for a
null
argument.
static
String
Objects.
toString
(
Object
o,
String
nullDefault)
Returns the result of calling
toString
on the first
 argument if the first argument is not
null
and returns
 the second argument otherwise.
String
Optional.
toString
()
Returns a non-empty string representation of this
Optional
suitable for debugging.
String
OptionalDouble.
toString
()
Returns a non-empty string representation of this
OptionalDouble
suitable for debugging.
String
OptionalInt.
toString
()
Returns a non-empty string representation of this
OptionalInt
suitable for debugging.
String
OptionalLong.
toString
()
Returns a non-empty string representation of this
OptionalLong
suitable for debugging.
String
Scanner.
toString
()
Returns the string representation of this
Scanner
.
String
ServiceLoader.
toString
()
Returns a string describing this service.
String
SimpleTimeZone.
toString
()
Returns a string representation of this time zone.
String
StringJoiner.
toString
()
Returns the current value, consisting of the
prefix
, the values
 added so far separated by the
delimiter
, and the
suffix
,
 unless no elements have been added in which case, the
prefix + suffix
or the
emptyValue
characters are returned.
String
UUID.
toString
()
Returns a
String
object representing this
UUID
.
String
Vector.
toString
()
Returns a string representation of this Vector, containing
 the String representation of each element.
Methods in
java.util
that return types with arguments of type
String
Modifier and Type
Method
Description
static
List
<
String
>
Locale.
filterTags
(
List
<
Locale.LanguageRange
> priorityList,
Collection
<
String
> tags)
Returns a list of matching languages tags using the basic filtering
 mechanism defined in RFC 4647.
static
List
<
String
>
Locale.
filterTags
(
List
<
Locale.LanguageRange
> priorityList,
Collection
<
String
> tags,
Locale.FilteringMode
mode)
Returns a list of matching languages tags using the basic filtering
 mechanism defined in RFC 4647.
static
Set
<
String
>
Calendar.
getAvailableCalendarTypes
()
Returns an unmodifiable
Set
containing all calendar types
 supported by
Calendar
in the runtime environment.
Map
<
String
,
Integer
>
Calendar.
getDisplayNames
(int field,
 int style,
Locale
locale)
Returns a
Map
containing all names of the calendar
field
in the given
style
and
locale
and their corresponding field values.
List
<
String
>
ResourceBundle.Control.
getFormats
(
String
baseName)
Returns a
List
of
String
s containing
 formats to be used to load resource bundles for the given
baseName
.
static
Set
<
String
>
Locale.
getISOCountries
(
Locale.IsoCountryCode
type)
Returns a
Set
of ISO3166 country codes for the specified type.
Enumeration
<
String
>
ListResourceBundle.
getKeys
()
Returns an
Enumeration
of the keys contained in
 this
ResourceBundle
and its parent bundles.
Enumeration
<
String
>
PropertyResourceBundle.
getKeys
()
Returns an
Enumeration
of the keys contained in
 this
ResourceBundle
and its parent bundles.
abstract
Enumeration
<
String
>
ResourceBundle.
getKeys
()
Returns an enumeration of the keys.
Set
<
String
>
Locale.
getUnicodeLocaleAttributes
()
Returns the set of unicode locale attributes associated with
 this locale, or the empty set if it has no attributes.
Set
<
String
>
Locale.
getUnicodeLocaleKeys
()
Returns the set of Unicode locale keys defined by this locale, or the empty set if
 this locale has none.
protected
Set
<
String
>
ListResourceBundle.
handleKeySet
()
Returns a
Set
of the keys contained
only
in this
ResourceBundle
.
protected
Set
<
String
>
PropertyResourceBundle.
handleKeySet
()
Returns a
Set
of the keys contained
only
in this
ResourceBundle
.
protected
Set
<
String
>
ResourceBundle.
handleKeySet
()
Returns a
Set
of the keys contained
only
in this
ResourceBundle
.
Set
<
String
>
ResourceBundle.
keySet
()
Returns a
Set
of all keys contained in this
ResourceBundle
and its parent bundles.
Set
<
String
>
Properties.
stringPropertyNames
()
Returns an unmodifiable set of keys from this property list
 where the key and its corresponding value are strings,
 including distinct keys in the default property list if a key
 of the same name has not already been found from the main
 properties list.
Stream
<
String
>
Scanner.
tokens
()
Returns a stream of delimiter-separated tokens from this scanner.
Methods in
java.util
with parameters of type
String
Modifier and Type
Method
Description
Locale.Builder
Locale.Builder.
addUnicodeLocaleAttribute
(
String
attribute)
Adds a unicode locale attribute, if not already present, otherwise
 has no effect.
static
String
Locale.
caseFoldLanguageTag
(
String
languageTag)
Returns a case folded IETF BCP 47 language tag.
boolean
ResourceBundle.
containsKey
(
String
key)
Determines whether the given
key
is contained in
 this
ResourceBundle
or its parent bundles.
byte[]
Base64.Decoder.
decode
(
String
src)
Decodes a Base64 encoded String into a newly-allocated byte array
 using the
Base64
encoding scheme.
Stream
<
MatchResult
>
Scanner.
findAll
(
String
patString)
Returns a stream of match results that match the provided pattern string.
String
Scanner.
findInLine
(
String
pattern)
Attempts to find the next occurrence of a pattern constructed from the
 specified string, ignoring delimiters.
String
Scanner.
findWithinHorizon
(
String
pattern,
 int horizon)
Attempts to find the next occurrence of a pattern constructed from the
 specified string, ignoring delimiters.
static
Locale
Locale.
forLanguageTag
(
String
languageTag)
Returns a locale for the specified IETF BCP 47 language tag string.
Formatter
Formatter.
format
(
String
format,
Object
... args)
Writes a formatted string to this object's destination using the
 specified format string and arguments.
Formatter
Formatter.
format
(
Locale
l,
String
format,
Object
... args)
Writes a formatted string to this object's destination using the
 specified locale, format string, and arguments.
static
UUID
UUID.
fromString
(
String
name)
Creates a
UUID
from the string standard representation as
 described in the
UUID.toString()
method.
static final
ResourceBundle
ResourceBundle.
getBundle
(
String
baseName)
Gets a resource bundle using the specified base name, the default locale,
 and the caller module.
static
ResourceBundle
ResourceBundle.
getBundle
(
String
baseName,
Module
module)
Gets a resource bundle using the specified base name and the default locale
 on behalf of the specified module.
static final
ResourceBundle
ResourceBundle.
getBundle
(
String
baseName,
Locale
locale)
Gets a resource bundle using the specified base name and locale,
 and the caller module.
static
ResourceBundle
ResourceBundle.
getBundle
(
String
baseName,
Locale
locale,
ClassLoader
loader)
Gets a resource bundle using the specified base name, locale, and class
 loader.
static
ResourceBundle
ResourceBundle.
getBundle
(
String
baseName,
Locale
targetLocale,
ClassLoader
loader,
ResourceBundle.Control
control)
Returns a resource bundle using the specified base name, target
 locale, class loader and control.
static
ResourceBundle
ResourceBundle.
getBundle
(
String
baseName,
Locale
targetLocale,
Module
module)
Gets a resource bundle using the specified base name and locale
 on behalf of the specified module.
static final
ResourceBundle
ResourceBundle.
getBundle
(
String
baseName,
Locale
targetLocale,
ResourceBundle.Control
control)
Returns a resource bundle using the specified base name, target
 locale and control, and the caller's class loader.
static final
ResourceBundle
ResourceBundle.
getBundle
(
String
baseName,
ResourceBundle.Control
control)
Returns a resource bundle using the specified base name, the
 default locale and the specified control.
List
<
Locale
>
ResourceBundle.Control.
getCandidateLocales
(
String
baseName,
Locale
locale)
Returns a
List
of
Locale
s as candidate
 locales for
baseName
and
locale
.
Locale
ResourceBundle.Control.
getFallbackLocale
(
String
baseName,
Locale
locale)
Returns a
Locale
to be used as a fallback locale for
 further resource bundle searches by the
ResourceBundle.getBundle
factory method.
List
<
String
>
ResourceBundle.Control.
getFormats
(
String
baseName)
Returns a
List
of
String
s containing
 formats to be used to load resource bundles for the given
baseName
.
static
Currency
Currency.
getInstance
(
String
currencyCode)
Returns the
Currency
instance for the given currency code.
final
Object
ResourceBundle.
getObject
(
String
key)
Gets an object for the given key from this resource bundle or one of its parents.
String
Properties.
getProperty
(
String
key)
Searches for the property with the specified key in this property list.
String
Properties.
getProperty
(
String
key,
String
defaultValue)
Searches for the property with the specified key in this property list.
final
String
ResourceBundle.
getString
(
String
key)
Gets a string for the given key from this resource bundle or one of its parents.
final
String
[]
ResourceBundle.
getStringArray
(
String
key)
Gets a string array for the given key from this resource bundle or one of its parents.
long
ResourceBundle.Control.
getTimeToLive
(
String
baseName,
Locale
locale)
Returns the time-to-live (TTL) value for resource bundles that
 are loaded under this
ResourceBundle.Control
.
static
TimeZone
TimeZone.
getTimeZone
(
String
ID)
Gets the
TimeZone
for the given ID.
String
Locale.
getUnicodeLocaleType
(
String
key)
Returns the Unicode locale type associated with the specified Unicode locale key
 for this locale.
final
Object
ListResourceBundle.
handleGetObject
(
String
key)
Object
PropertyResourceBundle.
handleGetObject
(
String
key)
protected abstract
Object
ResourceBundle.
handleGetObject
(
String
key)
Gets an object for the given key from this resource bundle.
boolean
Scanner.
hasNext
(
String
pattern)
Returns true if the next token matches the pattern constructed from the
 specified string.
boolean
ResourceBundle.Control.
needsReload
(
String
baseName,
Locale
locale,
String
format,
ClassLoader
loader,
ResourceBundle
bundle,
 long loadTime)
Determines if the expired
bundle
in the cache needs
 to be reloaded based on the loading time given by
loadTime
or some other criteria.
ResourceBundle
ResourceBundle.Control.
newBundle
(
String
baseName,
Locale
locale,
String
format,
ClassLoader
loader,
 boolean reload)
Instantiates a resource bundle for the given bundle name of the
 given format and locale, using the given class loader if
 necessary.
String
Scanner.
next
(
String
pattern)
Returns the next token if it matches the pattern constructed from the
 specified string.
String
StringTokenizer.
nextToken
(
String
delim)
Returns the next token in this string tokenizer's string.
static
Locale
Locale.
of
(
String
language)
Obtains a locale from a language code.
static
Locale
Locale.
of
(
String
language,
String
country)
Obtains a locale from language and country.
static
Locale
Locale.
of
(
String
language,
String
country,
String
variant)
Obtains a locale from language, country and variant.
static
HexFormat
HexFormat.
ofDelimiter
(
String
delimiter)
Returns a hexadecimal formatter with the delimiter and lowercase characters.
static long
Date.
parse
(
String
s)
Deprecated.
As of JDK version 1.1,
 replaced by
DateFormat.parse(String s)
.
static
List
<
Locale.LanguageRange
>
Locale.LanguageRange.
parse
(
String
ranges)
Parses the given
ranges
to generate a Language Priority List.
static
List
<
Locale.LanguageRange
>
Locale.LanguageRange.
parse
(
String
ranges,
Map
<
String
,
List
<
String
>> map)
Parses the given
ranges
to generate a Language Priority
 List, and then customizes the list using the given
map
.
Locale.Builder
Locale.Builder.
removeUnicodeLocaleAttribute
(
String
attribute)
Removes a unicode locale attribute, if present, otherwise has no
 effect.
static <T> T
Objects.
requireNonNull
(T obj,
String
message)
Checks that the specified object reference is not
null
and
 throws a customized
NullPointerException
if it is.
void
Properties.
save
(
OutputStream
out,
String
comments)
Deprecated.
This method does not throw an IOException if an I/O error
 occurs while saving the property list.
Calendar.Builder
Calendar.Builder.
setCalendarType
(
String
type)
Sets the calendar type parameter to the given
type
.
Locale.Builder
Locale.Builder.
setExtension
(char key,
String
value)
Sets the extension for the given key.
void
TimeZone.
setID
(
String
ID)
Sets the time zone ID.
Locale.Builder
Locale.Builder.
setLanguage
(
String
language)
Sets the language.
Locale.Builder
Locale.Builder.
setLanguageTag
(
String
languageTag)
Resets the Builder to match the provided IETF BCP 47
 language tag.
Object
Properties.
setProperty
(
String
key,
String
value)
Calls the
Hashtable
method
put
.
Locale.Builder
Locale.Builder.
setRegion
(
String
region)
Sets the region.
Locale.Builder
Locale.Builder.
setScript
(
String
script)
Sets the script.
Locale.Builder
Locale.Builder.
setUnicodeLocaleKeyword
(
String
key,
String
type)
Sets the Unicode locale keyword type for the given key.
Locale.Builder
Locale.Builder.
setVariant
(
String
variant)
Sets the variant.
Scanner
Scanner.
skip
(
String
pattern)
Skips input that matches a pattern constructed from the specified
 string.
void
Properties.
store
(
OutputStream
out,
String
comments)
Writes this property list (key and element pairs) in this
Properties
table to the output stream in a format suitable
 for loading into a
Properties
table using the
load(InputStream)
method.
void
Properties.
store
(
Writer
writer,
String
comments)
Writes this property list (key and element pairs) in this
Properties
table to the output character stream in a
 format suitable for using the
load(Reader)
method.
void
Properties.
storeToXML
(
OutputStream
os,
String
comment)
Emits an XML document representing all of the properties contained
 in this table.
void
Properties.
storeToXML
(
OutputStream
os,
String
comment,
String
encoding)
Emits an XML document representing all of the properties contained
 in this table, using the specified encoding.
void
Properties.
storeToXML
(
OutputStream
os,
String
comment,
Charset
charset)
Emits an XML document representing all of the properties contained
 in this table, using the specified encoding.
String
ResourceBundle.Control.
toBundleName
(
String
baseName,
Locale
locale)
Converts the given
baseName
and
locale
to the bundle name.
final
String
ResourceBundle.Control.
toResourceName
(
String
bundleName,
String
suffix)
Converts the given
bundleName
to the form required
 by the
ClassLoader.getResource
method by replacing all occurrences of
'.'
in
bundleName
with
'/'
and appending a
'.'
and the given file
suffix
.
static
String
Objects.
toString
(
Object
o,
String
nullDefault)
Returns the result of calling
toString
on the first
 argument if the first argument is not
null
and returns
 the second argument otherwise.
Scanner
Scanner.
useDelimiter
(
String
pattern)
Sets this scanner's delimiting pattern to a pattern constructed from
 the specified
String
.
static
Formatter.BigDecimalLayoutForm
Formatter.BigDecimalLayoutForm.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
Locale.Category
Locale.Category.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
Locale.FilteringMode
Locale.FilteringMode.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
Locale.IsoCountryCode
Locale.IsoCountryCode.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
HexFormat
HexFormat.
withDelimiter
(
String
delimiter)
Returns a copy of this
HexFormat
with the delimiter.
HexFormat
HexFormat.
withPrefix
(
String
prefix)
Returns a copy of this
HexFormat
with the prefix.
HexFormat
HexFormat.
withSuffix
(
String
suffix)
Returns a copy of this
HexFormat
with the suffix.
Method parameters in
java.util
with type arguments of type
String
Modifier and Type
Method
Description
static
List
<
String
>
Locale.
filterTags
(
List
<
Locale.LanguageRange
> priorityList,
Collection
<
String
> tags)
Returns a list of matching languages tags using the basic filtering
 mechanism defined in RFC 4647.
static
List
<
String
>
Locale.
filterTags
(
List
<
Locale.LanguageRange
> priorityList,
Collection
<
String
> tags,
Locale.FilteringMode
mode)
Returns a list of matching languages tags using the basic filtering
 mechanism defined in RFC 4647.
static final
ResourceBundle.Control
ResourceBundle.Control.
getControl
(
List
<
String
> formats)
Returns a
ResourceBundle.Control
in which the
getFormats
method returns the specified
formats
.
static final
ResourceBundle.Control
ResourceBundle.Control.
getNoFallbackControl
(
List
<
String
> formats)
Returns a
ResourceBundle.Control
in which the
getFormats
method returns the specified
formats
and the
getFallbackLocale
method returns
null
.
MethodHandle
FormatProcessor.
linkage
(
List
<
String
> fragments,
MethodType
type)
Constructs a
MethodHandle
that when supplied with the values from
 a
StringTemplate
PREVIEW
will produce a result equivalent to that provided by
FormatProcessor.process(StringTemplate)
PREVIEW
.
static
String
Locale.
lookupTag
(
List
<
Locale.LanguageRange
> priorityList,
Collection
<
String
> tags)
Returns the best-matching language tag using the lookup mechanism
 defined in RFC 4647.
static
List
<
Locale.LanguageRange
>
Locale.LanguageRange.
mapEquivalents
(
List
<
Locale.LanguageRange
> priorityList,
Map
<
String
,
List
<
String
>> map)
Generates a new customized Language Priority List using the given
priorityList
and
map
.
static
List
<
Locale.LanguageRange
>
Locale.LanguageRange.
mapEquivalents
(
List
<
Locale.LanguageRange
> priorityList,
Map
<
String
,
List
<
String
>> map)
Generates a new customized Language Priority List using the given
priorityList
and
map
.
static
List
<
Locale.LanguageRange
>
Locale.LanguageRange.
parse
(
String
ranges,
Map
<
String
,
List
<
String
>> map)
Parses the given
ranges
to generate a Language Priority
 List, and then customizes the list using the given
map
.
static
List
<
Locale.LanguageRange
>
Locale.LanguageRange.
parse
(
String
ranges,
Map
<
String
,
List
<
String
>> map)
Parses the given
ranges
to generate a Language Priority
 List, and then customizes the list using the given
map
.
static <T> T
Objects.
requireNonNull
(T obj,
Supplier
<
String
> messageSupplier)
Checks that the specified object reference is not
null
and
 throws a customized
NullPointerException
if it is.
Constructors in
java.util
with parameters of type
String
Modifier
Constructor
Description
ConcurrentModificationException
(
String
message)
Constructs a
ConcurrentModificationException
with the
 specified detail message.
ConcurrentModificationException
(
String
message,
Throwable
cause)
Constructs a new exception with the specified detail message and
 cause.
Date
(
String
s)
Deprecated.
As of JDK version 1.1,
 replaced by
DateFormat.parse(String s)
.
DuplicateFormatFlagsException
(
String
f)
Constructs an instance of this class with the specified flags.
FormatFlagsConversionMismatchException
(
String
f,
 char c)
Constructs an instance of this class with the specified flag
 and conversion.
Formatter
(
File
file,
String
csn)
Constructs a new formatter with the specified file and charset.
Formatter
(
File
file,
String
csn,
Locale
l)
Constructs a new formatter with the specified file, charset, and
 locale.
Formatter
(
OutputStream
os,
String
csn)
Constructs a new formatter with the specified output stream and
 charset.
Formatter
(
OutputStream
os,
String
csn,
Locale
l)
Constructs a new formatter with the specified output stream, charset,
 and locale.
Formatter
(
String
fileName)
Constructs a new formatter with the specified file name.
Formatter
(
String
fileName,
String
csn)
Constructs a new formatter with the specified file name and charset.
Formatter
(
String
fileName,
String
csn,
Locale
l)
Constructs a new formatter with the specified file name, charset, and
 locale.
Formatter
(
String
fileName,
Charset
charset,
Locale
l)
Constructs a new formatter with the specified file name, charset, and
 locale.
IllegalFormatFlagsException
(
String
f)
Constructs an instance of this class with the specified flags.
IllformedLocaleException
(
String
message)
Constructs a new
IllformedLocaleException
with the
 given message and -1 as the error index.
IllformedLocaleException
(
String
message,
 int errorIndex)
Constructs a new
IllformedLocaleException
with the
 given message and the error index.
InputMismatchException
(
String
s)
Constructs an
InputMismatchException
, saving a reference
 to the error message string
s
for later retrieval by the
getMessage
method.
InvalidPropertiesFormatException
(
String
message)
Constructs an InvalidPropertiesFormatException with the specified
 detail message.
LanguageRange
(
String
range)
Constructs a
LanguageRange
using the given
range
.
LanguageRange
(
String
range,
 double weight)
Constructs a
LanguageRange
using the given
range
and
weight
.
Locale
(
String
language)
Deprecated.
Locale constructors have been deprecated.
Locale
(
String
language,
String
country)
Deprecated.
Locale constructors have been deprecated.
Locale
(
String
language,
String
country,
String
variant)
Deprecated.
Locale constructors have been deprecated.
MissingFormatArgumentException
(
String
s)
Constructs an instance of this class with the unmatched format
 specifier.
MissingFormatWidthException
(
String
s)
Constructs an instance of this class with the specified format
 specifier.
MissingResourceException
(
String
s,
String
className,
String
key)
Constructs a MissingResourceException with the specified information.
NoSuchElementException
(
String
s)
Constructs a
NoSuchElementException
, saving a reference
 to the error message string
s
for later retrieval by the
getMessage
method.
NoSuchElementException
(
String
s,
Throwable
cause)
Constructs a
NoSuchElementException
with the specified detail
 message and cause.
PropertyPermission
(
String
name,
String
actions)
Creates a new PropertyPermission object with the specified name.
Scanner
(
File
source,
String
charsetName)
Constructs a new
Scanner
that produces values scanned
 from the specified file.
Scanner
(
InputStream
source,
String
charsetName)
Constructs a new
Scanner
that produces values scanned
 from the specified input stream.
Scanner
(
String
source)
Constructs a new
Scanner
that produces values scanned
 from the specified string.
Scanner
(
ReadableByteChannel
source,
String
charsetName)
Constructs a new
Scanner
that produces values scanned
 from the specified channel.
Scanner
(
Path
source,
String
charsetName)
Constructs a new
Scanner
that produces values scanned
 from the specified file.
ServiceConfigurationError
(
String
msg)
Constructs a new instance with the specified message.
ServiceConfigurationError
(
String
msg,
Throwable
cause)
Constructs a new instance with the specified message and cause.
SimpleTimeZone
(int rawOffset,
String
ID)
Constructs a SimpleTimeZone with the given base time zone offset from GMT
 and time zone ID with no daylight saving time schedule.
SimpleTimeZone
(int rawOffset,
String
ID,
 int startMonth,
 int startDay,
 int startDayOfWeek,
 int startTime,
 int endMonth,
 int endDay,
 int endDayOfWeek,
 int endTime)
Constructs a SimpleTimeZone with the given base time zone offset from
 GMT, time zone ID, and rules for starting and ending the daylight
 time.
SimpleTimeZone
(int rawOffset,
String
ID,
 int startMonth,
 int startDay,
 int startDayOfWeek,
 int startTime,
 int endMonth,
 int endDay,
 int endDayOfWeek,
 int endTime,
 int dstSavings)
Constructs a SimpleTimeZone with the given base time zone offset from
 GMT, time zone ID, and rules for starting and ending the daylight
 time.
SimpleTimeZone
(int rawOffset,
String
ID,
 int startMonth,
 int startDay,
 int startDayOfWeek,
 int startTime,
 int startTimeMode,
 int endMonth,
 int endDay,
 int endDayOfWeek,
 int endTime,
 int endTimeMode,
 int dstSavings)
Constructs a SimpleTimeZone with the given base time zone offset from
 GMT, time zone ID, and rules for starting and ending the daylight
 time.
StringTokenizer
(
String
str)
Constructs a string tokenizer for the specified string.
StringTokenizer
(
String
str,
String
delim)
Constructs a string tokenizer for the specified string.
StringTokenizer
(
String
str,
String
delim,
 boolean returnDelims)
Constructs a string tokenizer for the specified string.
Timer
(
String
name)
Creates a new timer whose associated thread has the specified name.
Timer
(
String
name,
 boolean isDaemon)
Creates a new timer whose associated thread has the specified name,
 and may be specified to
run as a daemon
.
TooManyListenersException
(
String
s)
Constructs a TooManyListenersException with the specified detail message.
UnknownFormatConversionException
(
String
s)
Constructs an instance of this class with the unknown conversion.
UnknownFormatFlagsException
(
String
f)
Constructs an instance of this class with the specified flags.
Uses of
String
in
java.util.concurrent
Methods in
java.util.concurrent
that return
String
Modifier and Type
Method
Description
String
CompletableFuture.
toString
()
Returns a string identifying this CompletableFuture, as well as
 its completion state.
String
ConcurrentHashMap.
toString
()
Returns a string representation of this map.
String
CopyOnWriteArrayList.
toString
()
Returns a string representation of this list.
String
CountDownLatch.
toString
()
Returns a string identifying this latch, as well as its state.
String
ForkJoinPool.
toString
()
Returns a string identifying this pool, as well as its state,
 including indications of run state, parallelism level, and
 worker and task counts.
String
FutureTask.
toString
()
Returns a string representation of this FutureTask.
String
Phaser.
toString
()
Returns a string identifying this phaser, as well as its
 state.
String
Semaphore.
toString
()
Returns a string identifying this semaphore, as well as its state.
String
SynchronousQueue.
toString
()
Always returns
"[]"
.
String
ThreadPoolExecutor.
toString
()
Returns a string identifying this pool, as well as its state,
 including indications of run state and estimated worker and
 task counts.
Methods in
java.util.concurrent
with parameters of type
String
Modifier and Type
Method
Description
static
Future.State
Future.State.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
StructuredTaskScope.Subtask.State
PREVIEW
StructuredTaskScope.Subtask.State.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
TimeUnit
TimeUnit.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Constructors in
java.util.concurrent
with parameters of type
String
Modifier
Constructor
Description
BrokenBarrierException
(
String
message)
Constructs a
BrokenBarrierException
with the specified
 detail message.
CancellationException
(
String
message)
Constructs a
CancellationException
with the specified detail
 message.
protected
CompletionException
(
String
message)
Constructs a
CompletionException
with the specified detail
 message.
CompletionException
(
String
message,
Throwable
cause)
Constructs a
CompletionException
with the specified detail
 message and cause.
protected
ExecutionException
(
String
message)
Constructs an
ExecutionException
with the specified detail
 message.
ExecutionException
(
String
message,
Throwable
cause)
Constructs an
ExecutionException
with the specified detail
 message and cause.
RejectedExecutionException
(
String
message)
Constructs a
RejectedExecutionException
with the
 specified detail message.
RejectedExecutionException
(
String
message,
Throwable
cause)
Constructs a
RejectedExecutionException
with the
 specified detail message and cause.
ShutdownOnFailure
(
String
name,
ThreadFactory
factory)
Constructs a new
ShutdownOnFailure
with the given name and thread factory.
ShutdownOnSuccess
(
String
name,
ThreadFactory
factory)
Constructs a new
ShutdownOnSuccess
with the given name and thread factory.
StructuredTaskScope
(
String
name,
ThreadFactory
factory)
Creates a structured task scope with the given name and thread factory.
StructureViolationException
(
String
message)
Constructs a
StructureViolationException
with the specified
 detail message.
TimeoutException
(
String
message)
Constructs a
TimeoutException
with the specified detail
 message.
Uses of
String
in
java.util.concurrent.atomic
Methods in
java.util.concurrent.atomic
that return
String
Modifier and Type
Method
Description
String
AtomicBoolean.
toString
()
Returns the String representation of the current value.
String
AtomicInteger.
toString
()
Returns the String representation of the current value.
String
AtomicIntegerArray.
toString
()
Returns the String representation of the current values of array.
String
AtomicLong.
toString
()
Returns the String representation of the current value.
String
AtomicLongArray.
toString
()
Returns the String representation of the current values of array.
String
AtomicReference.
toString
()
Returns the String representation of the current value.
String
AtomicReferenceArray.
toString
()
Returns the String representation of the current values of array.
String
DoubleAccumulator.
toString
()
Returns the String representation of the current value.
String
DoubleAdder.
toString
()
Returns the String representation of the
DoubleAdder.sum()
.
String
LongAccumulator.
toString
()
Returns the String representation of the current value.
String
LongAdder.
toString
()
Returns the String representation of the
LongAdder.sum()
.
Methods in
java.util.concurrent.atomic
with parameters of type
String
Modifier and Type
Method
Description
static <U>
AtomicIntegerFieldUpdater
<U>
AtomicIntegerFieldUpdater.
newUpdater
(
Class
<U> tclass,
String
fieldName)
Creates and returns an updater for objects with the given field.
static <U>
AtomicLongFieldUpdater
<U>
AtomicLongFieldUpdater.
newUpdater
(
Class
<U> tclass,
String
fieldName)
Creates and returns an updater for objects with the given field.
static <U,
W>
AtomicReferenceFieldUpdater
<U,
W>
AtomicReferenceFieldUpdater.
newUpdater
(
Class
<U> tclass,
Class
<W> vclass,
String
fieldName)
Creates and returns an updater for objects with the given field.
Uses of
String
in
java.util.concurrent.locks
Methods in
java.util.concurrent.locks
that return
String
Modifier and Type
Method
Description
String
AbstractQueuedLongSynchronizer.
toString
()
Returns a string identifying this synchronizer, as well as its state.
String
AbstractQueuedSynchronizer.
toString
()
Returns a string identifying this synchronizer, as well as its state.
String
ReentrantLock.
toString
()
Returns a string identifying this lock, as well as its lock state.
String
ReentrantReadWriteLock.ReadLock.
toString
()
Returns a string identifying this lock, as well as its lock state.
String
ReentrantReadWriteLock.
toString
()
Returns a string identifying this lock, as well as its lock state.
String
ReentrantReadWriteLock.WriteLock.
toString
()
Returns a string identifying this lock, as well as its lock
 state.
String
StampedLock.
toString
()
Returns a string identifying this lock, as well as its lock
 state.
Uses of
String
in
java.util.jar
Fields in
java.util.jar
declared as
String
Modifier and Type
Field
Description
static final
String
JarFile.
MANIFEST_NAME
The JAR manifest file name.
Methods in
java.util.jar
that return
String
Modifier and Type
Method
Description
String
JarEntry.
getRealName
()
Returns the real name of this
JarEntry
.
String
Attributes.
getValue
(
String
name)
Returns the value of the specified attribute name, specified as
 a string, or null if the attribute was not found.
String
Attributes.
getValue
(
Attributes.Name
name)
Returns the value of the specified Attributes.Name, or null if the
 attribute was not found.
String
Attributes.
putValue
(
String
name,
String
value)
Associates the specified value with the specified attribute name,
 specified as a String.
String
Attributes.Name.
toString
()
Returns the attribute name as a String.
Methods in
java.util.jar
that return types with arguments of type
String
Modifier and Type
Method
Description
Map
<
String
,
Attributes
>
Manifest.
getEntries
()
Returns a Map of the entries contained in this Manifest.
Methods in
java.util.jar
with parameters of type
String
Modifier and Type
Method
Description
protected
ZipEntry
JarInputStream.
createZipEntry
(
String
name)
Creates a new
JarEntry
(
ZipEntry
) for the
 specified JAR file entry name.
Attributes
Manifest.
getAttributes
(
String
name)
Returns the Attributes for the specified entry name.
ZipEntry
JarFile.
getEntry
(
String
name)
Returns the
ZipEntry
for the given base entry name or
null
if not found.
JarEntry
JarFile.
getJarEntry
(
String
name)
Returns the
JarEntry
for the given base entry name or
null
if not found.
String
Attributes.
getValue
(
String
name)
Returns the value of the specified attribute name, specified as
 a string, or null if the attribute was not found.
String
Attributes.
putValue
(
String
name,
String
value)
Associates the specified value with the specified attribute name,
 specified as a String.
Constructors in
java.util.jar
with parameters of type
String
Modifier
Constructor
Description
JarEntry
(
String
name)
Creates a new
JarEntry
for the specified JAR file
 entry name.
JarException
(
String
s)
Constructs a JarException with the specified detail message.
JarFile
(
String
name)
Creates a new
JarFile
to read from the specified
 file
name
.
JarFile
(
String
name,
 boolean verify)
Creates a new
JarFile
to read from the specified
 file
name
.
Name
(
String
name)
Constructs a new attribute name using the given string name.
Uses of
String
in
java.util.logging
Fields in
java.util.logging
declared as
String
Modifier and Type
Field
Description
static final
String
Logger.
GLOBAL_LOGGER_NAME
GLOBAL_LOGGER_NAME is a name for the global logger.
static final
String
LogManager.
LOGGING_MXBEAN_NAME
String representation of the
ObjectName
for the management interface
 for the logging facility.
Methods in
java.util.logging
that return
String
Modifier and Type
Method
Description
abstract
String
Formatter.
format
(
LogRecord
record)
Format the given log record and return the formatted string.
String
SimpleFormatter.
format
(
LogRecord
record)
Format the given LogRecord.
String
XMLFormatter.
format
(
LogRecord
record)
Format the given message to XML.
String
Formatter.
formatMessage
(
LogRecord
record)
Localize and format the message string from a log record.
String
Handler.
getEncoding
()
Return the character encoding for this
Handler
.
String
Formatter.
getHead
(
Handler
h)
Return the header string for a set of formatted records.
String
XMLFormatter.
getHead
(
Handler
h)
Return the header string for a set of XML formatted records.
String
Level.
getLocalizedName
()
Return the localized string name of the Level, for
 the current default locale.
String
LoggingMXBean.
getLoggerLevel
(
String
loggerName)
Deprecated.
Gets the name of the log level associated with the specified logger.
String
LogRecord.
getLoggerName
()
Get the source Logger's name.
String
LogRecord.
getMessage
()
Get the "raw" log message, before localization or formatting.
String
Level.
getName
()
Return the non-localized string name of the Level.
String
Logger.
getName
()
Get the name for this logger.
String
LoggingMXBean.
getParentLoggerName
(
String
loggerName)
Deprecated.
Returns the name of the parent for the specified logger.
String
LogManager.
getProperty
(
String
name)
Get the value of a logging property.
String
Level.
getResourceBundleName
()
Return the level's localization resource bundle name, or
 null if no localization bundle is defined.
String
Logger.
getResourceBundleName
()
Retrieve the localization resource bundle name for this
 logger.
String
LogRecord.
getResourceBundleName
()
Get the localization resource bundle name
String
LogRecord.
getSourceClassName
()
Get the  name of the class that (allegedly) issued the logging request.
String
LogRecord.
getSourceMethodName
()
Get the  name of the method that (allegedly) issued the logging request.
String
Formatter.
getTail
(
Handler
h)
Return the tail string for a set of formatted records.
String
XMLFormatter.
getTail
(
Handler
h)
Return the tail string for a set of XML formatted records.
final
String
Level.
toString
()
Returns a string representation of this Level.
Methods in
java.util.logging
that return types with arguments of type
String
Modifier and Type
Method
Description
List
<
String
>
LoggingMXBean.
getLoggerNames
()
Deprecated.
Returns the list of currently registered logger names.
Enumeration
<
String
>
LogManager.
getLoggerNames
()
Get an enumeration of known logger names.
Methods in
java.util.logging
with parameters of type
String
Modifier and Type
Method
Description
void
Logger.
config
(
String
msg)
Log a CONFIG message.
void
Logger.
entering
(
String
sourceClass,
String
sourceMethod)
Log a method entry.
void
Logger.
entering
(
String
sourceClass,
String
sourceMethod,
Object
param1)
Log a method entry, with one parameter.
void
Logger.
entering
(
String
sourceClass,
String
sourceMethod,
Object
[] params)
Log a method entry, with an array of parameters.
void
ErrorManager.
error
(
String
msg,
Exception
ex,
 int code)
The error method is called when a Handler failure occurs.
void
Logger.
exiting
(
String
sourceClass,
String
sourceMethod)
Log a method return.
void
Logger.
exiting
(
String
sourceClass,
String
sourceMethod,
Object
result)
Log a method return, with result object.
void
Logger.
fine
(
String
msg)
Log a FINE message.
void
Logger.
finer
(
String
msg)
Log a FINER message.
void
Logger.
finest
(
String
msg)
Log a FINEST message.
static
Logger
Logger.
getAnonymousLogger
(
String
resourceBundleName)
Create an anonymous Logger.
static
Logger
Logger.
getLogger
(
String
name)
Find or create a logger for a named subsystem.
static
Logger
Logger.
getLogger
(
String
name,
String
resourceBundleName)
Find or create a logger for a named subsystem.
Logger
LogManager.
getLogger
(
String
name)
Method to find a named logger.
String
LoggingMXBean.
getLoggerLevel
(
String
loggerName)
Deprecated.
Gets the name of the log level associated with the specified logger.
String
LoggingMXBean.
getParentLoggerName
(
String
loggerName)
Deprecated.
Returns the name of the parent for the specified logger.
String
LogManager.
getProperty
(
String
name)
Get the value of a logging property.
void
Logger.
info
(
String
msg)
Log an INFO message.
void
Logger.
log
(
Level
level,
String
msg)
Log a message, with no arguments.
void
Logger.
log
(
Level
level,
String
msg,
Object
param1)
Log a message, with one object parameter.
void
Logger.
log
(
Level
level,
String
msg,
Object
[] params)
Log a message, with an array of object arguments.
void
Logger.
log
(
Level
level,
String
msg,
Throwable
thrown)
Log a message, with associated Throwable information.
void
Logger.
logp
(
Level
level,
String
sourceClass,
String
sourceMethod,
String
msg)
Log a message, specifying source class and method,
 with no arguments.
void
Logger.
logp
(
Level
level,
String
sourceClass,
String
sourceMethod,
String
msg,
Object
param1)
Log a message, specifying source class and method,
 with a single object parameter to the log message.
void
Logger.
logp
(
Level
level,
String
sourceClass,
String
sourceMethod,
String
msg,
Object
[] params)
Log a message, specifying source class and method,
 with an array of object arguments.
void
Logger.
logp
(
Level
level,
String
sourceClass,
String
sourceMethod,
String
msg,
Throwable
thrown)
Log a message, specifying source class and method,
 with associated Throwable information.
void
Logger.
logp
(
Level
level,
String
sourceClass,
String
sourceMethod,
Throwable
thrown,
Supplier
<
String
> msgSupplier)
Log a lazily constructed message, specifying source class and method,
 with associated Throwable information.
void
Logger.
logp
(
Level
level,
String
sourceClass,
String
sourceMethod,
Supplier
<
String
> msgSupplier)
Log a lazily constructed message, specifying source class and method,
 with no arguments.
void
Logger.
logrb
(
Level
level,
String
sourceClass,
String
sourceMethod,
String
bundleName,
String
msg)
Deprecated.
Use
Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Object...)
instead.
void
Logger.
logrb
(
Level
level,
String
sourceClass,
String
sourceMethod,
String
bundleName,
String
msg,
Object
param1)
Deprecated.
Use
Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Object...)
instead
void
Logger.
logrb
(
Level
level,
String
sourceClass,
String
sourceMethod,
String
bundleName,
String
msg,
Object
[] params)
Deprecated.
Use
Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Object...)
instead.
void
Logger.
logrb
(
Level
level,
String
sourceClass,
String
sourceMethod,
String
bundleName,
String
msg,
Throwable
thrown)
Deprecated.
Use
Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Throwable)
instead.
void
Logger.
logrb
(
Level
level,
String
sourceClass,
String
sourceMethod,
ResourceBundle
bundle,
String
msg,
Object
... params)
Log a message, specifying source class, method, and resource bundle,
 with an optional list of message parameters.
void
Logger.
logrb
(
Level
level,
String
sourceClass,
String
sourceMethod,
ResourceBundle
bundle,
String
msg,
Throwable
thrown)
Log a message, specifying source class, method, and resource bundle,
 with associated Throwable information.
void
Logger.
logrb
(
Level
level,
ResourceBundle
bundle,
String
msg,
Object
... params)
Log a message, specifying source class, method, and resource bundle,
 with an optional list of message parameters.
void
Logger.
logrb
(
Level
level,
ResourceBundle
bundle,
String
msg,
Throwable
thrown)
Log a message, specifying source class, method, and resource bundle,
 with associated Throwable information.
static
Level
Level.
parse
(
String
name)
Parse a level name string into a Level.
protected void
Handler.
reportError
(
String
msg,
Exception
ex,
 int code)
Protected convenience method to report an error to this Handler's
 ErrorManager.
void
Handler.
setEncoding
(
String
encoding)
Set the character encoding used by this
Handler
.
void
StreamHandler.
setEncoding
(
String
encoding)
Set (or change) the character encoding used by this
Handler
.
void
LoggingMXBean.
setLoggerLevel
(
String
loggerName,
String
levelName)
Deprecated.
Sets the specified logger to the specified new level.
void
LogRecord.
setLoggerName
(
String
name)
Set the source Logger's name.
void
LogRecord.
setMessage
(
String
message)
Set the "raw" log message, before localization or formatting.
void
LogRecord.
setResourceBundleName
(
String
name)
Set the localization resource bundle name.
void
LogRecord.
setSourceClassName
(
String
sourceClassName)
Set the name of the class that (allegedly) issued the logging request.
void
LogRecord.
setSourceMethodName
(
String
sourceMethodName)
Set the name of the method that (allegedly) issued the logging request.
void
Logger.
severe
(
String
msg)
Log a SEVERE message.
void
Logger.
throwing
(
String
sourceClass,
String
sourceMethod,
Throwable
thrown)
Log throwing an exception.
void
Logger.
warning
(
String
msg)
Log a WARNING message.
Method parameters in
java.util.logging
with type arguments of type
String
Modifier and Type
Method
Description
void
Logger.
config
(
Supplier
<
String
> msgSupplier)
Log a CONFIG message, which is only to be constructed if the logging
 level is such that the message will actually be logged.
void
Logger.
fine
(
Supplier
<
String
> msgSupplier)
Log a FINE message, which is only to be constructed if the logging
 level is such that the message will actually be logged.
void
Logger.
finer
(
Supplier
<
String
> msgSupplier)
Log a FINER message, which is only to be constructed if the logging
 level is such that the message will actually be logged.
void
Logger.
finest
(
Supplier
<
String
> msgSupplier)
Log a FINEST message, which is only to be constructed if the logging
 level is such that the message will actually be logged.
void
Logger.
info
(
Supplier
<
String
> msgSupplier)
Log a INFO message, which is only to be constructed if the logging
 level is such that the message will actually be logged.
void
Logger.
log
(
Level
level,
Throwable
thrown,
Supplier
<
String
> msgSupplier)
Log a lazily constructed message, with associated Throwable information.
void
Logger.
log
(
Level
level,
Supplier
<
String
> msgSupplier)
Log a message, which is only to be constructed if the logging level
 is such that the message will actually be logged.
void
Logger.
logp
(
Level
level,
String
sourceClass,
String
sourceMethod,
Throwable
thrown,
Supplier
<
String
> msgSupplier)
Log a lazily constructed message, specifying source class and method,
 with associated Throwable information.
void
Logger.
logp
(
Level
level,
String
sourceClass,
String
sourceMethod,
Supplier
<
String
> msgSupplier)
Log a lazily constructed message, specifying source class and method,
 with no arguments.
void
Logger.
severe
(
Supplier
<
String
> msgSupplier)
Log a SEVERE message, which is only to be constructed if the logging
 level is such that the message will actually be logged.
void
LogManager.
updateConfiguration
(
InputStream
ins,
Function
<
String
,
BiFunction
<
String
,
String
,
String
>> mapper)
Updates the logging configuration.
void
LogManager.
updateConfiguration
(
InputStream
ins,
Function
<
String
,
BiFunction
<
String
,
String
,
String
>> mapper)
Updates the logging configuration.
void
LogManager.
updateConfiguration
(
InputStream
ins,
Function
<
String
,
BiFunction
<
String
,
String
,
String
>> mapper)
Updates the logging configuration.
void
LogManager.
updateConfiguration
(
InputStream
ins,
Function
<
String
,
BiFunction
<
String
,
String
,
String
>> mapper)
Updates the logging configuration.
void
LogManager.
updateConfiguration
(
Function
<
String
,
BiFunction
<
String
,
String
,
String
>> mapper)
Updates the logging configuration.
void
LogManager.
updateConfiguration
(
Function
<
String
,
BiFunction
<
String
,
String
,
String
>> mapper)
Updates the logging configuration.
void
LogManager.
updateConfiguration
(
Function
<
String
,
BiFunction
<
String
,
String
,
String
>> mapper)
Updates the logging configuration.
void
LogManager.
updateConfiguration
(
Function
<
String
,
BiFunction
<
String
,
String
,
String
>> mapper)
Updates the logging configuration.
void
Logger.
warning
(
Supplier
<
String
> msgSupplier)
Log a WARNING message, which is only to be constructed if the logging
 level is such that the message will actually be logged.
Constructors in
java.util.logging
with parameters of type
String
Modifier
Constructor
Description
FileHandler
(
String
pattern)
Initialize a
FileHandler
to write to the given filename.
FileHandler
(
String
pattern,
 boolean append)
Initialize a
FileHandler
to write to the given filename,
 with optional append.
FileHandler
(
String
pattern,
 int limit,
 int count)
Initialize a
FileHandler
to write to a set of files.
FileHandler
(
String
pattern,
 int limit,
 int count,
 boolean append)
Initialize a
FileHandler
to write to a set of files
 with optional append.
FileHandler
(
String
pattern,
 long limit,
 int count,
 boolean append)
Initialize a
FileHandler
to write to a set of files
 with optional append.
protected
Level
(
String
name,
 int value)
Create a named Level with a given integer value.
protected
Level
(
String
name,
 int value,
String
resourceBundleName)
Create a named Level with a given integer value and a
 given localization resource name.
protected
Logger
(
String
name,
String
resourceBundleName)
Protected method to construct a logger for a named subsystem.
LoggingPermission
(
String
name,
String
actions)
Creates a new LoggingPermission object.
LogRecord
(
Level
level,
String
msg)
Construct a LogRecord with the given level and message values.
SocketHandler
(
String
host,
 int port)
Construct a
SocketHandler
using a specified host and port.
Uses of
String
in
java.util.prefs
Methods in
java.util.prefs
that return
String
Modifier and Type
Method
Description
String
AbstractPreferences.
absolutePath
()
Implements the
absolutePath
method as per the specification in
Preferences.absolutePath()
.
abstract
String
Preferences.
absolutePath
()
Returns this preference node's absolute path name.
String
[]
AbstractPreferences.
childrenNames
()
Implements the
children
method as per the specification in
Preferences.childrenNames()
.
abstract
String
[]
Preferences.
childrenNames
()
Returns the names of the children of this preference node, relative to
 this node.
protected abstract
String
[]
AbstractPreferences.
childrenNamesSpi
()
Returns the names of the children of this preference node.
String
AbstractPreferences.
get
(
String
key,
String
def)
Implements the
get
method as per the specification in
Preferences.get(String,String)
.
abstract
String
Preferences.
get
(
String
key,
String
def)
Returns the value associated with the specified key in this preference
 node.
String
PreferenceChangeEvent.
getKey
()
Returns the key of the preference that was changed.
String
PreferenceChangeEvent.
getNewValue
()
Returns the new value for the preference.
protected abstract
String
AbstractPreferences.
getSpi
(
String
key)
Return the value associated with the specified key at this preference
 node, or
null
if there is no association for this key, or the
 association cannot be determined at this time.
String
[]
AbstractPreferences.
keys
()
Implements the
keys
method as per the specification in
Preferences.keys()
.
abstract
String
[]
Preferences.
keys
()
Returns all of the keys that have an associated value in this
 preference node.
protected abstract
String
[]
AbstractPreferences.
keysSpi
()
Returns all of the keys that have an associated value in this
 preference node.
String
AbstractPreferences.
name
()
Implements the
name
method as per the specification in
Preferences.name()
.
abstract
String
Preferences.
name
()
Returns this preference node's name, relative to its parent.
String
AbstractPreferences.
toString
()
Returns the absolute path name of this preferences node.
abstract
String
Preferences.
toString
()
Returns a string representation of this preferences node,
 as if computed by the expression:
(this.isUserNode() ? "User" :
 "System") + " Preference Node: " + this.absolutePath()
.
Methods in
java.util.prefs
with parameters of type
String
Modifier and Type
Method
Description
protected abstract
AbstractPreferences
AbstractPreferences.
childSpi
(
String
name)
Returns the named child of this preference node, creating it if it does
 not already exist.
String
AbstractPreferences.
get
(
String
key,
String
def)
Implements the
get
method as per the specification in
Preferences.get(String,String)
.
abstract
String
Preferences.
get
(
String
key,
String
def)
Returns the value associated with the specified key in this preference
 node.
boolean
AbstractPreferences.
getBoolean
(
String
key,
 boolean def)
Implements the
getBoolean
method as per the specification in
Preferences.getBoolean(String,boolean)
.
abstract boolean
Preferences.
getBoolean
(
String
key,
 boolean def)
Returns the boolean value represented by the string associated with the
 specified key in this preference node.
byte[]
AbstractPreferences.
getByteArray
(
String
key,
 byte[] def)
Implements the
getByteArray
method as per the specification in
Preferences.getByteArray(String,byte[])
.
abstract byte[]
Preferences.
getByteArray
(
String
key,
 byte[] def)
Returns the byte array value represented by the string associated with
 the specified key in this preference node.
protected
AbstractPreferences
AbstractPreferences.
getChild
(
String
nodeName)
Returns the named child if it exists, or
null
if it does not.
double
AbstractPreferences.
getDouble
(
String
key,
 double def)
Implements the
getDouble
method as per the specification in
Preferences.getDouble(String,double)
.
abstract double
Preferences.
getDouble
(
String
key,
 double def)
Returns the double value represented by the string associated with the
 specified key in this preference node.
float
AbstractPreferences.
getFloat
(
String
key,
 float def)
Implements the
getFloat
method as per the specification in
Preferences.getFloat(String,float)
.
abstract float
Preferences.
getFloat
(
String
key,
 float def)
Returns the float value represented by the string associated with the
 specified key in this preference node.
int
AbstractPreferences.
getInt
(
String
key,
 int def)
Implements the
getInt
method as per the specification in
Preferences.getInt(String,int)
.
abstract int
Preferences.
getInt
(
String
key,
 int def)
Returns the int value represented by the string associated with the
 specified key in this preference node.
long
AbstractPreferences.
getLong
(
String
key,
 long def)
Implements the
getLong
method as per the specification in
Preferences.getLong(String,long)
.
abstract long
Preferences.
getLong
(
String
key,
 long def)
Returns the long value represented by the string associated with the
 specified key in this preference node.
protected abstract
String
AbstractPreferences.
getSpi
(
String
key)
Return the value associated with the specified key at this preference
 node, or
null
if there is no association for this key, or the
 association cannot be determined at this time.
Preferences
AbstractPreferences.
node
(
String
path)
Implements the
node
method as per the specification in
Preferences.node(String)
.
abstract
Preferences
Preferences.
node
(
String
pathName)
Returns the named preference node in the same tree as this node,
 creating it and any of its ancestors if they do not already exist.
boolean
AbstractPreferences.
nodeExists
(
String
path)
Implements the
nodeExists
method as per the specification in
Preferences.nodeExists(String)
.
abstract boolean
Preferences.
nodeExists
(
String
pathName)
Returns true if the named preference node exists in the same tree
 as this node.
void
AbstractPreferences.
put
(
String
key,
String
value)
Implements the
put
method as per the specification in
Preferences.put(String,String)
.
abstract void
Preferences.
put
(
String
key,
String
value)
Associates the specified value with the specified key in this
 preference node.
void
AbstractPreferences.
putBoolean
(
String
key,
 boolean value)
Implements the
putBoolean
method as per the specification in
Preferences.putBoolean(String,boolean)
.
abstract void
Preferences.
putBoolean
(
String
key,
 boolean value)
Associates a string representing the specified boolean value with the
 specified key in this preference node.
void
AbstractPreferences.
putByteArray
(
String
key,
 byte[] value)
Implements the
putByteArray
method as per the specification in
Preferences.putByteArray(String,byte[])
.
abstract void
Preferences.
putByteArray
(
String
key,
 byte[] value)
Associates a string representing the specified byte array with the
 specified key in this preference node.
void
AbstractPreferences.
putDouble
(
String
key,
 double value)
Implements the
putDouble
method as per the specification in
Preferences.putDouble(String,double)
.
abstract void
Preferences.
putDouble
(
String
key,
 double value)
Associates a string representing the specified double value with the
 specified key in this preference node.
void
AbstractPreferences.
putFloat
(
String
key,
 float value)
Implements the
putFloat
method as per the specification in
Preferences.putFloat(String,float)
.
abstract void
Preferences.
putFloat
(
String
key,
 float value)
Associates a string representing the specified float value with the
 specified key in this preference node.
void
AbstractPreferences.
putInt
(
String
key,
 int value)
Implements the
putInt
method as per the specification in
Preferences.putInt(String,int)
.
abstract void
Preferences.
putInt
(
String
key,
 int value)
Associates a string representing the specified int value with the
 specified key in this preference node.
void
AbstractPreferences.
putLong
(
String
key,
 long value)
Implements the
putLong
method as per the specification in
Preferences.putLong(String,long)
.
abstract void
Preferences.
putLong
(
String
key,
 long value)
Associates a string representing the specified long value with the
 specified key in this preference node.
protected abstract void
AbstractPreferences.
putSpi
(
String
key,
String
value)
Put the given key-value association into this preference node.
void
AbstractPreferences.
remove
(
String
key)
Implements the
remove(String)
method as per the specification
 in
Preferences.remove(String)
.
abstract void
Preferences.
remove
(
String
key)
Removes the value associated with the specified key in this preference
 node, if any.
protected abstract void
AbstractPreferences.
removeSpi
(
String
key)
Remove the association (if any) for the specified key at this
 preference node.
Constructors in
java.util.prefs
with parameters of type
String
Modifier
Constructor
Description
protected
AbstractPreferences
(
AbstractPreferences
parent,
String
name)
Creates a preference node with the specified parent and the specified
 name relative to its parent.
BackingStoreException
(
String
s)
Constructs a BackingStoreException with the specified detail message.
InvalidPreferencesFormatException
(
String
message)
Constructs an InvalidPreferencesFormatException with the specified
 detail message.
InvalidPreferencesFormatException
(
String
message,
Throwable
cause)
Constructs an InvalidPreferencesFormatException with the specified
 detail message and cause.
PreferenceChangeEvent
(
Preferences
node,
String
key,
String
newValue)
Constructs a new
PreferenceChangeEvent
instance.
Uses of
String
in
java.util.random
Methods in
java.util.random
that return
String
Modifier and Type
Method
Description
String
RandomGeneratorFactory.
group
()
Return the group name of the
algorithm
used by the random number generator.
String
RandomGeneratorFactory.
name
()
Return the name of the
algorithm
used by the random number generator.
Methods in
java.util.random
with parameters of type
String
Modifier and Type
Method
Description
static
RandomGenerator.ArbitrarilyJumpableGenerator
RandomGenerator.ArbitrarilyJumpableGenerator.
of
(
String
name)
Returns an instance of
RandomGenerator.ArbitrarilyJumpableGenerator
that
 utilizes the
name
algorithm
.
static
RandomGenerator.JumpableGenerator
RandomGenerator.JumpableGenerator.
of
(
String
name)
Returns an instance of
RandomGenerator.JumpableGenerator
that utilizes the
name
algorithm
.
static
RandomGenerator.LeapableGenerator
RandomGenerator.LeapableGenerator.
of
(
String
name)
Returns an instance of
RandomGenerator.LeapableGenerator
that utilizes the
name
algorithm
.
static
RandomGenerator
RandomGenerator.
of
(
String
name)
Returns an instance of
RandomGenerator
that utilizes the
name
algorithm
.
static
RandomGenerator.SplittableGenerator
RandomGenerator.SplittableGenerator.
of
(
String
name)
Returns an instance of
RandomGenerator.SplittableGenerator
that utilizes the
name
algorithm
.
static
RandomGenerator.StreamableGenerator
RandomGenerator.StreamableGenerator.
of
(
String
name)
Returns an instance of
RandomGenerator.StreamableGenerator
that utilizes the
name
algorithm
.
static <T extends
RandomGenerator
>
RandomGeneratorFactory
<T>
RandomGeneratorFactory.
of
(
String
name)
Returns a
RandomGeneratorFactory
that can produce instances of
RandomGenerator
that utilize the
name
algorithm
.
Uses of
String
in
java.util.regex
Methods in
java.util.regex
that return
String
Modifier and Type
Method
Description
String
PatternSyntaxException.
getDescription
()
Retrieves the description of the error.
String
PatternSyntaxException.
getMessage
()
Returns a multi-line string containing the description of the syntax
 error and its index, the erroneous regular-expression pattern, and a
 visual indication of the error index within the pattern.
String
PatternSyntaxException.
getPattern
()
Retrieves the erroneous regular-expression pattern.
String
Matcher.
group
()
Returns the input subsequence matched by the previous match.
String
Matcher.
group
(int group)
Returns the input subsequence captured by the given group during the
 previous match operation.
String
Matcher.
group
(
String
name)
Returns the input subsequence captured by the given
named-capturing group
during the
 previous match operation.
String
MatchResult.
group
()
Returns the input subsequence matched by the previous match.
String
MatchResult.
group
(int group)
Returns the input subsequence captured by the given group during the
 previous match operation.
default
String
MatchResult.
group
(
String
name)
Returns the input subsequence captured by the given
named-capturing group
during the
 previous match operation.
String
Pattern.
pattern
()
Returns the regular expression from which this pattern was compiled.
static
String
Pattern.
quote
(
String
s)
Returns a literal pattern
String
for the specified
String
.
static
String
Matcher.
quoteReplacement
(
String
s)
Returns a literal replacement
String
for the specified
String
.
String
Matcher.
replaceAll
(
String
replacement)
Replaces every subsequence of the input sequence that matches the
 pattern with the given replacement string.
String
Matcher.
replaceAll
(
Function
<
MatchResult
,
String
> replacer)
Replaces every subsequence of the input sequence that matches the
 pattern with the result of applying the given replacer function to the
 match result of this matcher corresponding to that subsequence.
String
Matcher.
replaceFirst
(
String
replacement)
Replaces the first subsequence of the input sequence that matches the
 pattern with the given replacement string.
String
Matcher.
replaceFirst
(
Function
<
MatchResult
,
String
> replacer)
Replaces the first subsequence of the input sequence that matches the
 pattern with the result of applying the given replacer function to the
 match result of this matcher corresponding to that subsequence.
String
[]
Pattern.
split
(
CharSequence
input)
Splits the given input sequence around matches of this pattern.
String
[]
Pattern.
split
(
CharSequence
input,
 int limit)
Splits the given input sequence around matches of this pattern.
String
[]
Pattern.
splitWithDelimiters
(
CharSequence
input,
 int limit)
Splits the given input sequence around matches of this pattern and
 returns both the strings and the matching delimiters.
String
Matcher.
toString
()
Returns the string representation of this matcher.
String
Pattern.
toString
()
Returns the string representation of this pattern.
Methods in
java.util.regex
that return types with arguments of type
String
Modifier and Type
Method
Description
Predicate
<
String
>
Pattern.
asMatchPredicate
()
Creates a predicate that tests if this pattern matches a given input string.
Predicate
<
String
>
Pattern.
asPredicate
()
Creates a predicate that tests if this pattern is found in a given input
 string.
Map
<
String
,
Integer
>
Matcher.
namedGroups
()
Returns an unmodifiable map from capturing group names to group numbers.
default
Map
<
String
,
Integer
>
MatchResult.
namedGroups
()
Returns an unmodifiable map from capturing group names to group numbers.
Map
<
String
,
Integer
>
Pattern.
namedGroups
()
Returns an unmodifiable map from capturing group names to group numbers.
Stream
<
String
>
Pattern.
splitAsStream
(
CharSequence
input)
Creates a stream from the given input sequence around matches of this
 pattern.
Methods in
java.util.regex
with parameters of type
String
Modifier and Type
Method
Description
Matcher
Matcher.
appendReplacement
(
StringBuffer
sb,
String
replacement)
Implements a non-terminal append-and-replace step.
Matcher
Matcher.
appendReplacement
(
StringBuilder
sb,
String
replacement)
Implements a non-terminal append-and-replace step.
static
Pattern
Pattern.
compile
(
String
regex)
Compiles the given regular expression into a pattern.
static
Pattern
Pattern.
compile
(
String
regex,
 int flags)
Compiles the given regular expression into a pattern with the given
 flags.
int
Matcher.
end
(
String
name)
Returns the offset after the last character of the subsequence
 captured by the given
named-capturing
 group
during the previous match operation.
default int
MatchResult.
end
(
String
name)
Returns the offset after the last character of the subsequence
 captured by the given
named-capturing
 group
during the previous match operation.
String
Matcher.
group
(
String
name)
Returns the input subsequence captured by the given
named-capturing group
during the
 previous match operation.
default
String
MatchResult.
group
(
String
name)
Returns the input subsequence captured by the given
named-capturing group
during the
 previous match operation.
static boolean
Pattern.
matches
(
String
regex,
CharSequence
input)
Compiles the given regular expression and attempts to match the given
 input against it.
static
String
Pattern.
quote
(
String
s)
Returns a literal pattern
String
for the specified
String
.
static
String
Matcher.
quoteReplacement
(
String
s)
Returns a literal replacement
String
for the specified
String
.
String
Matcher.
replaceAll
(
String
replacement)
Replaces every subsequence of the input sequence that matches the
 pattern with the given replacement string.
String
Matcher.
replaceFirst
(
String
replacement)
Replaces the first subsequence of the input sequence that matches the
 pattern with the given replacement string.
int
Matcher.
start
(
String
name)
Returns the start index of the subsequence captured by the given
named-capturing group
during the
 previous match operation.
default int
MatchResult.
start
(
String
name)
Returns the start index of the subsequence captured by the given
named-capturing group
during the
 previous match operation.
Method parameters in
java.util.regex
with type arguments of type
String
Modifier and Type
Method
Description
String
Matcher.
replaceAll
(
Function
<
MatchResult
,
String
> replacer)
Replaces every subsequence of the input sequence that matches the
 pattern with the result of applying the given replacer function to the
 match result of this matcher corresponding to that subsequence.
String
Matcher.
replaceFirst
(
Function
<
MatchResult
,
String
> replacer)
Replaces the first subsequence of the input sequence that matches the
 pattern with the result of applying the given replacer function to the
 match result of this matcher corresponding to that subsequence.
Constructors in
java.util.regex
with parameters of type
String
Modifier
Constructor
Description
PatternSyntaxException
(
String
desc,
String
regex,
 int index)
Constructs a new instance of this class.
Uses of
String
in
java.util.spi
Methods in
java.util.spi
that return
String
Modifier and Type
Method
Description
abstract
String
LocaleNameProvider.
getDisplayCountry
(
String
countryCode,
Locale
locale)
Returns a localized name for the given
IETF BCP47
region code (either ISO 3166 country code or UN M.49 area
 codes) and the given locale that is appropriate for display to the user.
abstract
String
LocaleNameProvider.
getDisplayLanguage
(
String
languageCode,
Locale
locale)
Returns a localized name for the given
IETF BCP47
language code and the given locale that is appropriate for
 display to the user.
abstract
String
CalendarNameProvider.
getDisplayName
(
String
calendarType,
 int field,
 int value,
 int style,
Locale
locale)
Returns the string representation (display name) of the calendar
field value
in the given
style
and
locale
.
String
CurrencyNameProvider.
getDisplayName
(
String
currencyCode,
Locale
locale)
Returns a name for the currency that is appropriate for display to the
 user.
abstract
String
TimeZoneNameProvider.
getDisplayName
(
String
ID,
 boolean daylight,
 int style,
Locale
locale)
Returns a name for the given time zone ID that's suitable for
 presentation to the user in the specified locale.
String
LocaleNameProvider.
getDisplayScript
(
String
scriptCode,
Locale
locale)
Returns a localized name for the given
IETF BCP47
script code and the given locale that is appropriate for
 display to the user.
String
LocaleNameProvider.
getDisplayUnicodeExtensionKey
(
String
key,
Locale
locale)
Returns a localized name for the given
Unicode extension
key,
 and the given locale that is appropriate for display to the user.
String
LocaleNameProvider.
getDisplayUnicodeExtensionType
(
String
type,
String
key,
Locale
locale)
Returns a localized name for the given
Unicode extension
type,
 and the given locale that is appropriate for display to the user.
abstract
String
LocaleNameProvider.
getDisplayVariant
(
String
variant,
Locale
locale)
Returns a localized name for the given variant code and the given locale that
 is appropriate for display to the user.
String
TimeZoneNameProvider.
getGenericDisplayName
(
String
ID,
 int style,
Locale
locale)
Returns a generic name for the given time zone
ID
that's suitable
 for presentation to the user in the specified
locale
.
abstract
String
CurrencyNameProvider.
getSymbol
(
String
currencyCode,
Locale
locale)
Gets the symbol of the given currency code for the specified locale.
String
ToolProvider.
name
()
Returns the name of this tool provider.
protected
String
AbstractResourceBundleProvider.
toBundleName
(
String
baseName,
Locale
locale)
Returns the bundle name for the given
baseName
and
locale
that this provider provides.
Methods in
java.util.spi
that return types with arguments of type
String
Modifier and Type
Method
Description
default
Optional
<
String
>
ToolProvider.
description
()
Returns a short description of the tool, or an empty
Optional
if no description is available.
abstract
Map
<
String
,
Integer
>
CalendarNameProvider.
getDisplayNames
(
String
calendarType,
 int field,
 int style,
Locale
locale)
Returns a
Map
containing all string representations (display
 names) of the
Calendar
field
in the given
style
and
locale
and their corresponding field values.
Methods in
java.util.spi
with parameters of type
String
Modifier and Type
Method
Description
static
Optional
<
ToolProvider
>
ToolProvider.
findFirst
(
String
name)
Returns the first instance of a
ToolProvider
with the given name,
 as loaded by
ServiceLoader
using the system class loader.
ResourceBundle
AbstractResourceBundleProvider.
getBundle
(
String
baseName,
Locale
locale)
Returns a
ResourceBundle
for the given
baseName
and
locale
.
ResourceBundle
ResourceBundleProvider.
getBundle
(
String
baseName,
Locale
locale)
Returns a
ResourceBundle
for the given bundle name and locale.
ResourceBundle.Control
ResourceBundleControlProvider.
getControl
(
String
baseName)
Returns a
ResourceBundle.Control
instance that is used
 to handle resource bundle loading for the given
baseName
.
abstract
String
LocaleNameProvider.
getDisplayCountry
(
String
countryCode,
Locale
locale)
Returns a localized name for the given
IETF BCP47
region code (either ISO 3166 country code or UN M.49 area
 codes) and the given locale that is appropriate for display to the user.
abstract
String
LocaleNameProvider.
getDisplayLanguage
(
String
languageCode,
Locale
locale)
Returns a localized name for the given
IETF BCP47
language code and the given locale that is appropriate for
 display to the user.
abstract
String
CalendarNameProvider.
getDisplayName
(
String
calendarType,
 int field,
 int value,
 int style,
Locale
locale)
Returns the string representation (display name) of the calendar
field value
in the given
style
and
locale
.
String
CurrencyNameProvider.
getDisplayName
(
String
currencyCode,
Locale
locale)
Returns a name for the currency that is appropriate for display to the
 user.
abstract
String
TimeZoneNameProvider.
getDisplayName
(
String
ID,
 boolean daylight,
 int style,
Locale
locale)
Returns a name for the given time zone ID that's suitable for
 presentation to the user in the specified locale.
abstract
Map
<
String
,
Integer
>
CalendarNameProvider.
getDisplayNames
(
String
calendarType,
 int field,
 int style,
Locale
locale)
Returns a
Map
containing all string representations (display
 names) of the
Calendar
field
in the given
style
and
locale
and their corresponding field values.
String
LocaleNameProvider.
getDisplayScript
(
String
scriptCode,
Locale
locale)
Returns a localized name for the given
IETF BCP47
script code and the given locale that is appropriate for
 display to the user.
String
LocaleNameProvider.
getDisplayUnicodeExtensionKey
(
String
key,
Locale
locale)
Returns a localized name for the given
Unicode extension
key,
 and the given locale that is appropriate for display to the user.
String
LocaleNameProvider.
getDisplayUnicodeExtensionType
(
String
type,
String
key,
Locale
locale)
Returns a localized name for the given
Unicode extension
type,
 and the given locale that is appropriate for display to the user.
abstract
String
LocaleNameProvider.
getDisplayVariant
(
String
variant,
Locale
locale)
Returns a localized name for the given variant code and the given locale that
 is appropriate for display to the user.
String
TimeZoneNameProvider.
getGenericDisplayName
(
String
ID,
 int style,
Locale
locale)
Returns a generic name for the given time zone
ID
that's suitable
 for presentation to the user in the specified
locale
.
abstract
String
CurrencyNameProvider.
getSymbol
(
String
currencyCode,
Locale
locale)
Gets the symbol of the given currency code for the specified locale.
default int
ToolProvider.
run
(
PrintStream
out,
PrintStream
err,
String
... args)
Runs an instance of the tool, returning zero for a successful run.
int
ToolProvider.
run
(
PrintWriter
out,
PrintWriter
err,
String
... args)
Runs an instance of the tool, returning zero for a successful run.
protected
String
AbstractResourceBundleProvider.
toBundleName
(
String
baseName,
Locale
locale)
Returns the bundle name for the given
baseName
and
locale
that this provider provides.
Constructors in
java.util.spi
with parameters of type
String
Modifier
Constructor
Description
protected
AbstractResourceBundleProvider
(
String
... formats)
Constructs an
AbstractResourceBundleProvider
with the specified
formats
.
Uses of
String
in
java.util.stream
Methods in
java.util.stream
that return types with arguments of type
String
Modifier and Type
Method
Description
static
Collector
<
CharSequence
,
?,
String
>
Collectors.
joining
()
Returns a
Collector
that concatenates the input elements into a
String
, in encounter order.
static
Collector
<
CharSequence
,
?,
String
>
Collectors.
joining
(
CharSequence
delimiter)
Returns a
Collector
that concatenates the input elements,
 separated by the specified delimiter, in encounter order.
static
Collector
<
CharSequence
,
?,
String
>
Collectors.
joining
(
CharSequence
delimiter,
CharSequence
prefix,
CharSequence
suffix)
Returns a
Collector
that concatenates the input elements,
 separated by the specified delimiter, with the specified prefix and
 suffix, in encounter order.
Methods in
java.util.stream
with parameters of type
String
Modifier and Type
Method
Description
static
Collector.Characteristics
Collector.Characteristics.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Uses of
String
in
java.util.zip
Methods in
java.util.zip
that return
String
Modifier and Type
Method
Description
String
ZipEntry.
getComment
()
Returns the comment string for the entry.
String
ZipFile.
getComment
()
Returns the zip file comment, or null if none.
String
ZipEntry.
getName
()
Returns the name of the entry.
String
ZipFile.
getName
()
Returns the path name of the ZIP file.
String
ZipEntry.
toString
()
Returns a string representation of the ZIP entry.
Methods in
java.util.zip
with parameters of type
String
Modifier and Type
Method
Description
protected
ZipEntry
ZipInputStream.
createZipEntry
(
String
name)
Creates a new
ZipEntry
object for the specified
 entry name.
ZipEntry
ZipFile.
getEntry
(
String
name)
Returns the zip file entry for the specified name, or null
 if not found.
void
ZipEntry.
setComment
(
String
comment)
Sets the optional comment string for the entry.
void
ZipOutputStream.
setComment
(
String
comment)
Sets the ZIP file comment.
Constructors in
java.util.zip
with parameters of type
String
Modifier
Constructor
Description
DataFormatException
(
String
s)
Constructs a DataFormatException with the specified detail message.
ZipEntry
(
String
name)
Creates a new zip entry with the specified name.
ZipError
(
String
s)
Constructs a ZipError with the given detail message.
ZipException
(
String
s)
Constructs a
ZipException
with the specified detail
 message.
ZipFile
(
String
name)
Opens a zip file for reading.
ZipFile
(
String
name,
Charset
charset)
Opens a zip file for reading.
Uses of
String
in
javax.accessibility
Fields in
javax.accessibility
declared as
String
Modifier and Type
Field
Description
static final
String
AccessibleContext.
ACCESSIBLE_ACTION_PROPERTY
Constant used to indicate that the supported set of actions has changed.
static final
String
AccessibleContext.
ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY
Constant used to determine when the active descendant of a component has
 changed.
static final
String
AccessibleContext.
ACCESSIBLE_CARET_PROPERTY
Constant used to determine when the
accessibleText
caret has
 changed.
static final
String
AccessibleContext.
ACCESSIBLE_CHILD_PROPERTY
Constant used to determine when
Accessible
children are
 added/removed from the object.
static final
String
AccessibleContext.
ACCESSIBLE_COMPONENT_BOUNDS_CHANGED
PropertyChangeEvent
which indicates that a change has occurred in
 a component's bounds.
static final
String
AccessibleContext.
ACCESSIBLE_DESCRIPTION_PROPERTY
Constant used to determine when the
AccessibleContext.accessibleDescription
property has changed.
static final
String
AccessibleContext.
ACCESSIBLE_HYPERTEXT_OFFSET
Constant used to indicate that a hypertext element has received focus.
static final
String
AccessibleContext.
ACCESSIBLE_INVALIDATE_CHILDREN
PropertyChangeEvent
which indicates that a significant change has
 occurred to the children of a component like a tree or text.
static final
String
AccessibleContext.
ACCESSIBLE_NAME_PROPERTY
Constant used to determine when the
AccessibleContext.accessibleName
property has
 changed.
static final
String
AccessibleContext.
ACCESSIBLE_SELECTION_PROPERTY
Constant used to determine when the
accessibleSelection
has
 changed.
static final
String
AccessibleContext.
ACCESSIBLE_STATE_PROPERTY
Constant used to determine when the
accessibleStateSet
property
 has changed.
static final
String
AccessibleContext.
ACCESSIBLE_TABLE_CAPTION_CHANGED
Constant used to indicate that the table caption has changed.
static final
String
AccessibleContext.
ACCESSIBLE_TABLE_COLUMN_DESCRIPTION_CHANGED
Constant used to indicate that the column description has changed.
static final
String
AccessibleContext.
ACCESSIBLE_TABLE_COLUMN_HEADER_CHANGED
Constant used to indicate that the column header has changed.
static final
String
AccessibleContext.
ACCESSIBLE_TABLE_MODEL_CHANGED
Constant used to indicate that table data has changed.
static final
String
AccessibleContext.
ACCESSIBLE_TABLE_ROW_DESCRIPTION_CHANGED
Constant used to indicate that the row description has changed.
static final
String
AccessibleContext.
ACCESSIBLE_TABLE_ROW_HEADER_CHANGED
Constant used to indicate that the row header has changed.
static final
String
AccessibleContext.
ACCESSIBLE_TABLE_SUMMARY_CHANGED
Constant used to indicate that the table summary has changed.
static final
String
AccessibleContext.
ACCESSIBLE_TEXT_ATTRIBUTES_CHANGED
PropertyChangeEvent
which indicates that text attributes have
 changed.
static final
String
AccessibleContext.
ACCESSIBLE_TEXT_PROPERTY
PropertyChangeEvent
which indicates that text has changed.
static final
String
AccessibleContext.
ACCESSIBLE_VALUE_PROPERTY
Constant used to determine when the
accessibleValue
property has
 changed.
static final
String
AccessibleContext.
ACCESSIBLE_VISIBLE_DATA_PROPERTY
Constant used to determine when the visual appearance of the object has
 changed.
protected
String
AccessibleContext.
accessibleDescription
A localized String containing the description of the object.
protected
String
AccessibleContext.
accessibleName
A localized String containing the name of the object.
static final
String
AccessibleRelation.
CHILD_NODE_OF
Indicates that an object is a child node of one or more objects.
static final
String
AccessibleRelation.
CHILD_NODE_OF_PROPERTY
Indicates the
CHILD_NODE_OF
relation between two or more objects
 has changed.
static final
String
AccessibleAction.
CLICK
An action which causes a component to execute its default action.
static final
String
AccessibleRelation.
CONTROLLED_BY
Indicates an object is controlled by one or more target objects.
static final
String
AccessibleRelation.
CONTROLLED_BY_PROPERTY
Identifies that the target object that is doing the controlling has
 changed.
static final
String
AccessibleRelation.
CONTROLLER_FOR
Indicates an object is a controller for one or more target objects.
static final
String
AccessibleRelation.
CONTROLLER_FOR_PROPERTY
Identifies that the controller for the target object has changed.
static final
String
AccessibleAction.
DECREMENT
An action which decrements a value.
static final
String
AccessibleRelation.
EMBEDDED_BY
Indicates that an object is embedded in one or more objects.
static final
String
AccessibleRelation.
EMBEDDED_BY_PROPERTY
Indicates the
EMBEDDED_BY
relation between two or more objects
 has changed.
static final
String
AccessibleRelation.
EMBEDS
Indicates that an object has one or more objects embedded in it.
static final
String
AccessibleRelation.
EMBEDS_PROPERTY
Indicates the
EMBEDS
relation between two or more objects has
 changed.
static final
String
AccessibleRelation.
FLOWS_FROM
Indicates an object is logically contiguous with a second object where
 the second object occurs before the object.
static final
String
AccessibleRelation.
FLOWS_FROM_PROPERTY
Indicates the
FLOWS_FROM
relation between two objects has
 changed.
static final
String
AccessibleRelation.
FLOWS_TO
Indicates an object is logically contiguous with a second object where
 the second object occurs after the object.
static final
String
AccessibleRelation.
FLOWS_TO_PROPERTY
Indicates the
FLOWS_TO
relation between two objects has changed.
static final
String
AccessibleAction.
INCREMENT
An action which increments a value.
protected
String
AccessibleBundle.
key
The locale independent name of the state.
static final
String
AccessibleRelation.
LABEL_FOR
Indicates an object is a label for one or more target objects.
static final
String
AccessibleRelation.
LABEL_FOR_PROPERTY
Identifies that the target group for a label has changed.
static final
String
AccessibleRelation.
LABELED_BY
Indicates an object is labeled by one or more target objects.
static final
String
AccessibleRelation.
LABELED_BY_PROPERTY
Identifies that the objects that are doing the labeling have changed.
static final
String
AccessibleRelation.
MEMBER_OF
Indicates an object is a member of a group of one or more target objects.
static final
String
AccessibleRelation.
MEMBER_OF_PROPERTY
Identifies that group membership has changed.
static final
String
AccessibleRelation.
PARENT_WINDOW_OF
Indicates that an object is a parent window of one or more objects.
static final
String
AccessibleRelation.
PARENT_WINDOW_OF_PROPERTY
Indicates the
PARENT_WINDOW_OF
relation between two or more
 objects has changed.
static final
String
AccessibleRelation.
SUBWINDOW_OF
Indicates that an object is a subwindow of one or more objects.
static final
String
AccessibleRelation.
SUBWINDOW_OF_PROPERTY
Indicates the
SUBWINDOW_OF
relation between two or more objects
 has changed.
String
AccessibleTextSequence.
text
The text.
static final
String
AccessibleAction.
TOGGLE_EXPAND
An action which causes a tree node to collapse if expanded and expand if
 collapsed.
static final
String
AccessibleAction.
TOGGLE_POPUP
An action which causes a popup to become visible if it is hidden and
 hidden if it is visible.
Methods in
javax.accessibility
that return
String
Modifier and Type
Method
Description
String
AccessibleAction.
getAccessibleActionDescription
(int i)
Returns a description of the specified action of the object.
abstract
String
AccessibleHyperlink.
getAccessibleActionDescription
(int i)
Returns a string description of this particular link action.
String
AccessibleContext.
getAccessibleDescription
()
Gets the
accessibleDescription
property of this object.
String
AccessibleIcon.
getAccessibleIconDescription
()
Gets the description of the icon.
String
AccessibleContext.
getAccessibleName
()
Gets the
accessibleName
property of this object.
String
AccessibleText.
getAfterIndex
(int part,
 int index)
Returns the
String
after a given index.
String
AccessibleText.
getAtIndex
(int part,
 int index)
Returns the
String
at a given index.
String
AccessibleText.
getBeforeIndex
(int part,
 int index)
Returns the
String
before a given index.
String
AccessibleRelation.
getKey
()
Returns the key for this relation.
abstract
String
AccessibilityProvider.
getName
()
Returns the name of this service provider.
String
AccessibleText.
getSelectedText
()
Returns the portion of the text that is selected.
String
AccessibleEditableText.
getTextRange
(int startIndex,
 int endIndex)
Returns the text string between two indices.
String
AccessibleExtendedText.
getTextRange
(int startIndex,
 int endIndex)
Returns the text between two indices.
String
AccessibleExtendedComponent.
getTitledBorderText
()
Returns the titled border text.
String
AccessibleExtendedComponent.
getToolTipText
()
Returns the tool tip text.
String
AccessibleBundle.
toDisplayString
()
Gets localized string describing the key using the default locale.
protected
String
AccessibleBundle.
toDisplayString
(
String
name,
Locale
locale)
Obtains the key as a localized string.
String
AccessibleBundle.
toDisplayString
(
Locale
locale)
Obtains the key as a localized string.
String
AccessibleBundle.
toString
()
Gets localized string describing the key using the default locale.
String
AccessibleRelationSet.
toString
()
Creates a localized string representing all the relations in the set
 using the default locale.
String
AccessibleStateSet.
toString
()
Creates a localized string representing all the states in the set using
 the default locale.
Methods in
javax.accessibility
with parameters of type
String
Modifier and Type
Method
Description
boolean
AccessibleRelationSet.
contains
(
String
key)
Returns whether the relation set contains a relation that matches the
 specified key.
void
AccessibleContext.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Support for reporting bound property changes.
AccessibleRelation
AccessibleRelationSet.
get
(
String
key)
Returns the relation that matches the specified key.
void
AccessibleEditableText.
insertTextAtIndex
(int index,
String
s)
Inserts the specified string at the given index.
void
AccessibleEditableText.
replaceText
(int startIndex,
 int endIndex,
String
s)
Replaces the text between two indices with the specified string.
void
AccessibleContext.
setAccessibleDescription
(
String
s)
Sets the accessible description of this object.
void
AccessibleIcon.
setAccessibleIconDescription
(
String
description)
Sets the description of the icon.
void
AccessibleContext.
setAccessibleName
(
String
s)
Sets the localized accessible name of this object.
void
AccessibleEditableText.
setTextContents
(
String
s)
Sets the text contents to the specified string.
protected
String
AccessibleBundle.
toDisplayString
(
String
name,
Locale
locale)
Obtains the key as a localized string.
Constructors in
javax.accessibility
with parameters of type
String
Modifier
Constructor
Description
AccessibleRelation
(
String
key)
Create a new
AccessibleRelation
using the given locale
 independent key.
AccessibleRelation
(
String
key,
Object
target)
Creates a new
AccessibleRelation
using the given locale
 independent key.
AccessibleRelation
(
String
key,
Object
[] target)
Creates a new
AccessibleRelation
using the given locale
 independent key.
protected
AccessibleRole
(
String
key)
Creates a new
AccessibleRole
using the given locale independent
 key.
protected
AccessibleState
(
String
key)
Creates a new
AccessibleState
using the given locale independent
 key.
AccessibleTextSequence
(int start,
 int end,
String
txt)
Constructs an
AccessibleTextSequence
with the given parameters.
Uses of
String
in
javax.annotation.processing
Methods in
javax.annotation.processing
that return
String
Modifier and Type
Method
Description
String
Completion.
getMessage
()
Returns an informative message about the completion.
String
Completion.
getValue
()
Returns the text of the suggested completion.
Methods in
javax.annotation.processing
that return types with arguments of type
String
Modifier and Type
Method
Description
Map
<
String
,
String
>
ProcessingEnvironment.
getOptions
()
Returns the processor-specific options passed to the annotation
 processing tool.
Map
<
String
,
String
>
ProcessingEnvironment.
getOptions
()
Returns the processor-specific options passed to the annotation
 processing tool.
Set
<
String
>
AbstractProcessor.
getSupportedAnnotationTypes
()
If the processor class is annotated with
SupportedAnnotationTypes
, return an unmodifiable set with the
 same set of strings as the annotation.
Set
<
String
>
Processor.
getSupportedAnnotationTypes
()
Returns the names of the annotation interfaces supported by this
 processor.
Set
<
String
>
AbstractProcessor.
getSupportedOptions
()
If the processor class is annotated with
SupportedOptions
, return an unmodifiable set with the same set
 of strings as the annotation.
Set
<
String
>
Processor.
getSupportedOptions
()
Returns the options recognized by this processor.
Methods in
javax.annotation.processing
with parameters of type
String
Modifier and Type
Method
Description
Iterable
<? extends
Completion
>
AbstractProcessor.
getCompletions
(
Element
element,
AnnotationMirror
annotation,
ExecutableElement
member,
String
userText)
Returns an empty iterable of completions.
Iterable
<? extends
Completion
>
Processor.
getCompletions
(
Element
element,
AnnotationMirror
annotation,
ExecutableElement
member,
String
userText)
Returns to the tool infrastructure an iterable of suggested
 completions to an annotation.
static
Completion
Completions.
of
(
String
value)
Returns a completion of the value and an empty message.
static
Completion
Completions.
of
(
String
value,
String
message)
Returns a completion of the value and message.
Constructors in
javax.annotation.processing
with parameters of type
String
Modifier
Constructor
Description
FilerException
(
String
s)
Constructs an exception with the specified detail message.
Uses of
String
in
javax.crypto
Methods in
javax.crypto
that return
String
Modifier and Type
Method
Description
String
EncryptedPrivateKeyInfo.
getAlgName
()
Returns the encryption algorithm.
final
String
Cipher.
getAlgorithm
()
Returns the algorithm name of this
Cipher
object.
String
KEM.
getAlgorithm
()
Returns the name of the algorithm for this
KEM
object.
final
String
KeyAgreement.
getAlgorithm
()
Returns the algorithm name of this
KeyAgreement
object.
final
String
KeyGenerator.
getAlgorithm
()
Returns the algorithm name of this
KeyGenerator
object.
final
String
Mac.
getAlgorithm
()
Returns the algorithm name of this
Mac
object.
final
String
SealedObject.
getAlgorithm
()
Returns the algorithm that was used to seal this object.
final
String
SecretKeyFactory.
getAlgorithm
()
Returns the algorithm name of this
SecretKeyFactory
object.
final
String
ExemptionMechanism.
getName
()
Returns the exemption mechanism name of this
ExemptionMechanism
object.
String
KEM.Decapsulator.
providerName
()
Returns the name of the provider.
String
KEM.Encapsulator.
providerName
()
Returns the name of the provider.
String
Cipher.
toString
()
Returns a
String
representation of this
Cipher
object.
Methods in
javax.crypto
with parameters of type
String
Modifier and Type
Method
Description
SecretKey
KEM.Decapsulator.
decapsulate
(byte[] encapsulation,
 int from,
 int to,
String
algorithm)
The key decapsulation function.
KEM.Encapsulated
KEM.Encapsulator.
encapsulate
(int from,
 int to,
String
algorithm)
The key encapsulation function.
SecretKey
KEMSpi.DecapsulatorSpi.
engineDecapsulate
(byte[] encapsulation,
 int from,
 int to,
String
algorithm)
The key decapsulation function.
KEM.Encapsulated
KEMSpi.EncapsulatorSpi.
engineEncapsulate
(int from,
 int to,
String
algorithm)
The key encapsulation function.
protected abstract
SecretKey
KeyAgreementSpi.
engineGenerateSecret
(
String
algorithm)
Creates the shared secret and returns it as a secret key object
 of the requested algorithm type.
protected abstract void
CipherSpi.
engineSetMode
(
String
mode)
Sets the mode of this cipher.
protected abstract void
CipherSpi.
engineSetPadding
(
String
padding)
Sets the padding mechanism of this cipher.
protected
Key
CipherSpi.
engineUnwrap
(byte[] wrappedKey,
String
wrappedKeyAlgorithm,
 int wrappedKeyType)
Unwrap a previously wrapped key.
final
SecretKey
KeyAgreement.
generateSecret
(
String
algorithm)
Creates the shared secret and returns it as a
SecretKey
object of the specified algorithm.
static final
Cipher
Cipher.
getInstance
(
String
transformation)
Returns a
Cipher
object that implements the specified
 transformation.
static final
Cipher
Cipher.
getInstance
(
String
transformation,
String
provider)
Returns a
Cipher
object that implements the specified
 transformation.
static final
Cipher
Cipher.
getInstance
(
String
transformation,
Provider
provider)
Returns a
Cipher
object that implements the specified
 transformation.
static final
ExemptionMechanism
ExemptionMechanism.
getInstance
(
String
algorithm)
Returns an
ExemptionMechanism
object that implements the
 specified exemption mechanism algorithm.
static final
ExemptionMechanism
ExemptionMechanism.
getInstance
(
String
algorithm,
String
provider)
Returns an
ExemptionMechanism
object that implements the
 specified exemption mechanism algorithm.
static final
ExemptionMechanism
ExemptionMechanism.
getInstance
(
String
algorithm,
Provider
provider)
Returns an
ExemptionMechanism
object that implements the
 specified exemption mechanism algorithm.
static
KEM
KEM.
getInstance
(
String
algorithm)
Returns a
KEM
object that implements the specified algorithm.
static
KEM
KEM.
getInstance
(
String
algorithm,
String
provider)
Returns a
KEM
object that implements the specified algorithm
 from the specified security provider.
static
KEM
KEM.
getInstance
(
String
algorithm,
Provider
provider)
Returns a
KEM
object that implements the specified algorithm
 from the specified security provider.
static final
KeyAgreement
KeyAgreement.
getInstance
(
String
algorithm)
Returns a
KeyAgreement
object that implements the
 specified key agreement algorithm.
static final
KeyAgreement
KeyAgreement.
getInstance
(
String
algorithm,
String
provider)
Returns a
KeyAgreement
object that implements the
 specified key agreement algorithm.
static final
KeyAgreement
KeyAgreement.
getInstance
(
String
algorithm,
Provider
provider)
Returns a
KeyAgreement
object that implements the
 specified key agreement algorithm.
static final
KeyGenerator
KeyGenerator.
getInstance
(
String
algorithm)
Returns a
KeyGenerator
object that generates secret keys
 for the specified algorithm.
static final
KeyGenerator
KeyGenerator.
getInstance
(
String
algorithm,
String
provider)
Returns a
KeyGenerator
object that generates secret keys
 for the specified algorithm.
static final
KeyGenerator
KeyGenerator.
getInstance
(
String
algorithm,
Provider
provider)
Returns a
KeyGenerator
object that generates secret keys
 for the specified algorithm.
static final
Mac
Mac.
getInstance
(
String
algorithm)
Returns a
Mac
object that implements the
 specified MAC algorithm.
static final
Mac
Mac.
getInstance
(
String
algorithm,
String
provider)
Returns a
Mac
object that implements the
 specified MAC algorithm.
static final
Mac
Mac.
getInstance
(
String
algorithm,
Provider
provider)
Returns a
Mac
object that implements the
 specified MAC algorithm.
static final
SecretKeyFactory
SecretKeyFactory.
getInstance
(
String
algorithm)
Returns a
SecretKeyFactory
object that converts
 secret keys of the specified algorithm.
static final
SecretKeyFactory
SecretKeyFactory.
getInstance
(
String
algorithm,
String
provider)
Returns a
SecretKeyFactory
object that converts
 secret keys of the specified algorithm.
static final
SecretKeyFactory
SecretKeyFactory.
getInstance
(
String
algorithm,
Provider
provider)
Returns a
SecretKeyFactory
object that converts
 secret keys of the specified algorithm.
PKCS8EncodedKeySpec
EncryptedPrivateKeyInfo.
getKeySpec
(
Key
decryptKey,
String
providerName)
Extract the enclosed PKCS8EncodedKeySpec object from the
 encrypted data and return it.
static final int
Cipher.
getMaxAllowedKeyLength
(
String
transformation)
Returns the maximum key length for the specified transformation
 according to the installed JCE jurisdiction policy files.
static final
AlgorithmParameterSpec
Cipher.
getMaxAllowedParameterSpec
(
String
transformation)
Returns an {code AlgorithmParameterSpec} object which contains
 the maximum
Cipher
parameter value according to the
 jurisdiction policy file.
final
Object
SealedObject.
getObject
(
Key
key,
String
provider)
Retrieves the original (encapsulated) object.
final
Key
Cipher.
unwrap
(byte[] wrappedKey,
String
wrappedKeyAlgorithm,
 int wrappedKeyType)
Unwrap a previously wrapped key.
Constructors in
javax.crypto
with parameters of type
String
Modifier
Constructor
Description
AEADBadTagException
(
String
msg)
Constructs an
AEADBadTagException
with the specified
 detail message.
BadPaddingException
(
String
msg)
Constructs a
BadPaddingException
with the specified
 detail message.
protected
Cipher
(
CipherSpi
cipherSpi,
Provider
provider,
String
transformation)
Creates a
Cipher
object.
DecapsulateException
(
String
message)
Creates a
DecapsulateException
with the specified
 detail message.
DecapsulateException
(
String
message,
Throwable
cause)
Creates a
DecapsulateException
with the specified
 detail message and cause.
EncryptedPrivateKeyInfo
(
String
algName,
 byte[] encryptedData)
Constructs an
EncryptedPrivateKeyInfo
from the
 encryption algorithm name and the encrypted data.
protected
ExemptionMechanism
(
ExemptionMechanismSpi
exmechSpi,
Provider
provider,
String
mechanism)
Creates an
ExemptionMechanism
object.
ExemptionMechanismException
(
String
msg)
Constructs an
ExemptionMechanismException
with the specified
 detailed message.
IllegalBlockSizeException
(
String
msg)
Constructs an
IllegalBlockSizeException
with the specified
 detail message.
protected
KeyAgreement
(
KeyAgreementSpi
keyAgreeSpi,
Provider
provider,
String
algorithm)
Creates a
KeyAgreement
object.
protected
KeyGenerator
(
KeyGeneratorSpi
keyGenSpi,
Provider
provider,
String
algorithm)
Creates a
KeyGenerator
object.
protected
Mac
(
MacSpi
macSpi,
Provider
provider,
String
algorithm)
Creates a MAC object.
NoSuchPaddingException
(
String
msg)
Constructs a
NoSuchPaddingException
with the specified
 detail message.
protected
SecretKeyFactory
(
SecretKeyFactorySpi
keyFacSpi,
Provider
provider,
String
algorithm)
Creates a
SecretKeyFactory
object.
ShortBufferException
(
String
msg)
Constructs a
ShortBufferException
with the specified
 detail message.
Uses of
String
in
javax.crypto.spec
Methods in
javax.crypto.spec
that return
String
Modifier and Type
Method
Description
String
PSource.
getAlgorithm
()
Returns the PSource algorithm name.
String
SecretKeySpec.
getAlgorithm
()
Returns the name of the algorithm associated with this secret key.
String
OAEPParameterSpec.
getDigestAlgorithm
()
Returns the message digest algorithm name.
String
SecretKeySpec.
getFormat
()
Returns the name of the encoding format for this secret key.
String
OAEPParameterSpec.
getMGFAlgorithm
()
Returns the mask generation function algorithm name.
Constructors in
javax.crypto.spec
with parameters of type
String
Modifier
Constructor
Description
OAEPParameterSpec
(
String
mdName,
String
mgfName,
AlgorithmParameterSpec
mgfSpec,
PSource
pSrc)
Constructs a parameter set for OAEP padding as defined in
 the PKCS #1 standard using the specified message digest
 algorithm
mdName
, mask generation function
 algorithm
mgfName
, parameters for the mask
 generation function
mgfSpec
, and source of
 the encoding input P
pSrc
.
protected
PSource
(
String
pSrcName)
Constructs a source of the encoding input P for OAEP
 padding as defined in the PKCS #1 standard using the
 specified PSource algorithm.
SecretKeySpec
(byte[] key,
 int offset,
 int len,
String
algorithm)
Constructs a secret key from the given byte array, using the first
len
bytes of
key
, starting at
offset
inclusive.
SecretKeySpec
(byte[] key,
String
algorithm)
Constructs a secret key from the given byte array.
Uses of
String
in
javax.imageio
Fields in
javax.imageio
declared as
String
Modifier and Type
Field
Description
protected
String
ImageWriteParam.
compressionType
A
String
containing the name of the current
 compression type, or
null
if none is set.
protected
String
[]
ImageWriteParam.
compressionTypes
An array of
String
s containing the names of the
 available compression types.
Methods in
javax.imageio
that return
String
Modifier and Type
Method
Description
String
[]
ImageWriteParam.
getCompressionQualityDescriptions
()
Returns an array of
String
s that may be used along
 with
getCompressionQualityValues
as part of a user
 interface for setting or displaying the compression quality
 level.
String
ImageWriteParam.
getCompressionType
()
Returns the currently set compression type, or
null
if none has been set.
String
[]
ImageWriteParam.
getCompressionTypes
()
Returns a list of available compression types, as an array or
String
s, or
null
if a compression
 type may not be chosen using these interfaces.
String
ImageReader.
getFormatName
()
Returns a
String
identifying the format of the
 input source.
String
ImageWriteParam.
getLocalizedCompressionTypeName
()
Returns a localized version of the name of the current
 compression type, using the
Locale
returned by
getLocale
.
static
String
[]
ImageIO.
getReaderFileSuffixes
()
Returns an array of
String
s listing all of the
 file suffixes associated with the formats understood
 by the current set of registered readers.
static
String
[]
ImageIO.
getReaderFormatNames
()
Returns an array of
String
s listing all of the
 informal format names understood by the current set of registered
 readers.
static
String
[]
ImageIO.
getReaderMIMETypes
()
Returns an array of
String
s listing all of the
 MIME types understood by the current set of registered
 readers.
static
String
[]
ImageIO.
getWriterFileSuffixes
()
Returns an array of
String
s listing all of the
 file suffixes associated with the formats understood
 by the current set of registered writers.
static
String
[]
ImageIO.
getWriterFormatNames
()
Returns an array of
String
s listing all of the
 informal format names understood by the current set of registered
 writers.
static
String
[]
ImageIO.
getWriterMIMETypes
()
Returns an array of
String
s listing all of the
 MIME types understood by the current set of registered
 writers.
Methods in
javax.imageio
with parameters of type
String
Modifier and Type
Method
Description
IIOMetadata
ImageReader.
getImageMetadata
(int imageIndex,
String
formatName,
Set
<
String
> nodeNames)
Returns an
IIOMetadata
object representing the
 metadata associated with the given image, or
null
if the reader does not support reading metadata or none
 is available.
static
Iterator
<
ImageReader
>
ImageIO.
getImageReadersByFormatName
(
String
formatName)
Returns an
Iterator
containing all currently
 registered
ImageReader
s that claim to be able to
 decode the named format.
static
Iterator
<
ImageReader
>
ImageIO.
getImageReadersByMIMEType
(
String
MIMEType)
Returns an
Iterator
containing all currently
 registered
ImageReader
s that claim to be able to
 decode files with the given MIME type.
static
Iterator
<
ImageReader
>
ImageIO.
getImageReadersBySuffix
(
String
fileSuffix)
Returns an
Iterator
containing all currently
 registered
ImageReader
s that claim to be able to
 decode files with the given suffix.
static
Iterator
<
ImageWriter
>
ImageIO.
getImageWriters
(
ImageTypeSpecifier
type,
String
formatName)
Returns an
Iterator
containing all currently
 registered
ImageWriter
s that claim to be able to
 encode images of the given layout (specified using an
ImageTypeSpecifier
) in the given format.
static
Iterator
<
ImageWriter
>
ImageIO.
getImageWritersByFormatName
(
String
formatName)
Returns an
Iterator
containing all currently
 registered
ImageWriter
s that claim to be able to
 encode the named format.
static
Iterator
<
ImageWriter
>
ImageIO.
getImageWritersByMIMEType
(
String
MIMEType)
Returns an
Iterator
containing all currently
 registered
ImageWriter
s that claim to be able to
 encode files with the given MIME type.
static
Iterator
<
ImageWriter
>
ImageIO.
getImageWritersBySuffix
(
String
fileSuffix)
Returns an
Iterator
containing all currently
 registered
ImageWriter
s that claim to be able to
 encode files with the given suffix.
IIOMetadata
ImageReader.
getStreamMetadata
(
String
formatName,
Set
<
String
> nodeNames)
Returns an
IIOMetadata
object representing the
 metadata associated with the input source as a whole (i.e.,
 not associated with any particular image).
protected void
ImageReader.
processWarningOccurred
(
String
warning)
Broadcasts a warning message to all registered
IIOReadWarningListener
s by calling their
warningOccurred
method.
protected void
ImageReader.
processWarningOccurred
(
String
baseName,
String
keyword)
Broadcasts a localized warning message to all registered
IIOReadWarningListener
s by calling their
warningOccurred
method with a string taken
 from a
ResourceBundle
.
protected void
ImageWriter.
processWarningOccurred
(int imageIndex,
String
warning)
Broadcasts a warning message to all registered
IIOWriteWarningListener
s by calling their
warningOccurred
method.
protected void
ImageWriter.
processWarningOccurred
(int imageIndex,
String
baseName,
String
keyword)
Broadcasts a localized warning message to all registered
IIOWriteWarningListener
s by calling their
warningOccurred
method with a string taken
 from a
ResourceBundle
.
void
ImageWriteParam.
setCompressionType
(
String
compressionType)
Sets the compression type to one of the values indicated by
getCompressionTypes
.
static boolean
ImageIO.
write
(
RenderedImage
im,
String
formatName,
File
output)
Writes an image using an arbitrary
ImageWriter
that supports the given format to a
File
.
static boolean
ImageIO.
write
(
RenderedImage
im,
String
formatName,
OutputStream
output)
Writes an image using an arbitrary
ImageWriter
that supports the given format to an
OutputStream
.
static boolean
ImageIO.
write
(
RenderedImage
im,
String
formatName,
ImageOutputStream
output)
Writes an image using an arbitrary
ImageWriter
that supports the given format to an
ImageOutputStream
.
Method parameters in
javax.imageio
with type arguments of type
String
Modifier and Type
Method
Description
IIOMetadata
ImageReader.
getImageMetadata
(int imageIndex,
String
formatName,
Set
<
String
> nodeNames)
Returns an
IIOMetadata
object representing the
 metadata associated with the given image, or
null
if the reader does not support reading metadata or none
 is available.
IIOMetadata
ImageReader.
getStreamMetadata
(
String
formatName,
Set
<
String
> nodeNames)
Returns an
IIOMetadata
object representing the
 metadata associated with the input source as a whole (i.e.,
 not associated with any particular image).
Constructors in
javax.imageio
with parameters of type
String
Modifier
Constructor
Description
IIOException
(
String
message)
Constructs an
IIOException
with a given message
String
.
IIOException
(
String
message,
Throwable
cause)
Constructs an
IIOException
with a given message
String
and a
Throwable
that was its
 underlying cause.
Uses of
String
in
javax.imageio.event
Methods in
javax.imageio.event
with parameters of type
String
Modifier and Type
Method
Description
void
IIOReadWarningListener.
warningOccurred
(
ImageReader
source,
String
warning)
Reports the occurrence of a non-fatal error in decoding.
void
IIOWriteWarningListener.
warningOccurred
(
ImageWriter
source,
 int imageIndex,
String
warning)
Reports the occurrence of a non-fatal error in encoding.
Uses of
String
in
javax.imageio.metadata
Fields in
javax.imageio.metadata
declared as
String
Modifier and Type
Field
Description
protected
String
[]
IIOMetadata.
extraMetadataFormatClassNames
An array of names of classes implementing
IIOMetadataFormat
and representing the metadata formats, other than the standard and
 native formats, that are supported by this plug-in,
 initialized to
null
and set via the constructor.
protected
String
[]
IIOMetadata.
extraMetadataFormatNames
An array of names of formats, other than the standard and
 native formats, that are supported by this plug-in,
 initialized to
null
and set via the constructor.
protected
String
IIOMetadata.
nativeMetadataFormatClassName
The name of the class implementing
IIOMetadataFormat
and representing the native metadata format, initialized to
null
and set via the constructor.
protected
String
IIOMetadata.
nativeMetadataFormatName
The name of the native metadata format for this object,
 initialized to
null
and set via the constructor.
static final
String
IIOMetadataFormatImpl.
standardMetadataFormatName
A
String
constant containing the standard format
 name,
"javax_imageio_1.0"
.
Methods in
javax.imageio.metadata
that return
String
Modifier and Type
Method
Description
String
IIOMetadataNode.
getAttribute
(
String
name)
Retrieves an attribute value by name.
String
IIOMetadataFormat.
getAttributeDefaultValue
(
String
elementName,
String
attrName)
Returns the default value of the named attribute, if it is not
 explicitly present within the named element, as a
String
, or
null
if no default value
 is available.
String
IIOMetadataFormatImpl.
getAttributeDefaultValue
(
String
elementName,
String
attrName)
String
IIOMetadataFormat.
getAttributeDescription
(
String
elementName,
String
attrName,
Locale
locale)
Returns a
String
containing a description of the
 named attribute, or
null
.
String
IIOMetadataFormatImpl.
getAttributeDescription
(
String
elementName,
String
attrName,
Locale
locale)
Returns a
String
containing a description of the
 named attribute, or
null
.
String
[]
IIOMetadataFormat.
getAttributeEnumerations
(
String
elementName,
String
attrName)
Returns an array of
String
s containing the legal
 enumerated values for the given attribute within the named
 element.
String
[]
IIOMetadataFormatImpl.
getAttributeEnumerations
(
String
elementName,
String
attrName)
String
IIOMetadataFormat.
getAttributeMaxValue
(
String
elementName,
String
attrName)
Returns the maximum legal value for the attribute.
String
IIOMetadataFormatImpl.
getAttributeMaxValue
(
String
elementName,
String
attrName)
String
IIOMetadataFormat.
getAttributeMinValue
(
String
elementName,
String
attrName)
Returns the minimum legal value for the attribute.
String
IIOMetadataFormatImpl.
getAttributeMinValue
(
String
elementName,
String
attrName)
String
[]
IIOMetadataFormat.
getAttributeNames
(
String
elementName)
Returns an array of
String
s listing the names of
 the attributes that may be associated with the named element.
String
[]
IIOMetadataFormatImpl.
getAttributeNames
(
String
elementName)
String
IIOMetadataNode.
getAttributeNS
(
String
namespaceURI,
String
localName)
Equivalent to
getAttribute(localName)
.
String
IIOMetadataNode.
getBaseURI
()
This DOM Level 3 method is not supported for
IIOMetadataNode
and will throw a
DOMException
.
String
[]
IIOMetadataFormat.
getChildNames
(
String
elementName)
Returns an array of
String
s indicating the names
 of the element which are allowed to be children of the named
 element, in the order in which they should appear.
String
[]
IIOMetadataFormatImpl.
getChildNames
(
String
elementName)
String
IIOMetadataFormat.
getElementDescription
(
String
elementName,
Locale
locale)
Returns a
String
containing a description of the
 named element, or
null
.
String
IIOMetadataFormatImpl.
getElementDescription
(
String
elementName,
Locale
locale)
Returns a
String
containing a description of the
 named element, or
null
.
String
[]
IIOMetadata.
getExtraMetadataFormatNames
()
Returns an array of
String
s containing the names
 of additional metadata formats, other than the native and standard
 formats, recognized by this plug-in's
getAsTree
,
setFromTree
, and
mergeTree
methods.
String
IIOMetadataNode.
getLocalName
()
Equivalent to
getNodeName
.
String
[]
IIOMetadata.
getMetadataFormatNames
()
Returns an array of
String
s containing the names
 of all metadata formats, including the native and standard
 formats, recognized by this plug-in's
getAsTree
,
setFromTree
, and
mergeTree
methods.
String
IIOMetadataNode.
getNamespaceURI
()
Returns
null
, since namespaces are not supported.
String
IIOMetadata.
getNativeMetadataFormatName
()
Returns the name of the "native" metadata format for this
 plug-in, which typically allows for lossless encoding and
 transmission of the metadata stored in the format handled by
 this plug-in.
String
IIOMetadataNode.
getNodeName
()
Returns the node name associated with this node.
String
IIOMetadataNode.
getNodeValue
()
Returns the value associated with this node.
String
IIOMetadataNode.
getPrefix
()
Returns
null
, since namespaces are not supported.
protected
String
IIOMetadataFormatImpl.
getResourceBaseName
()
Returns the currently set base name for locating
ResourceBundle
s.
String
IIOMetadataFormat.
getRootName
()
Returns the name of the root element of the format.
String
IIOMetadataFormatImpl.
getRootName
()
String
IIOMetadataNode.
getTagName
()
Equivalent to
getNodeName
.
String
IIOMetadataNode.
getTextContent
()
This DOM Level 3 method is not supported for
IIOMetadataNode
and will throw a
DOMException
.
String
IIOMetadataNode.
lookupNamespaceURI
(
String
prefix)
This DOM Level 3 method is not supported for
IIOMetadataNode
and will throw a
DOMException
.
String
IIOMetadataNode.
lookupPrefix
(
String
namespaceURI)
This DOM Level 3 method is not supported for
IIOMetadataNode
and will throw a
DOMException
.
Methods in
javax.imageio.metadata
with parameters of type
String
Modifier and Type
Method
Description
protected void
IIOMetadataFormatImpl.
addAttribute
(
String
elementName,
String
attrName,
 int dataType,
 boolean required,
 int listMinLength,
 int listMaxLength)
Adds a new attribute to a previously defined element that will
 be defined by a list of values.
protected void
IIOMetadataFormatImpl.
addAttribute
(
String
elementName,
String
attrName,
 int dataType,
 boolean required,
String
defaultValue)
Adds a new attribute to a previously defined element that may
 be set to an arbitrary value.
protected void
IIOMetadataFormatImpl.
addAttribute
(
String
elementName,
String
attrName,
 int dataType,
 boolean required,
String
defaultValue,
String
minValue,
String
maxValue,
 boolean minInclusive,
 boolean maxInclusive)
Adds a new attribute to a previously defined element that will
 be defined by a range of values.
protected void
IIOMetadataFormatImpl.
addAttribute
(
String
elementName,
String
attrName,
 int dataType,
 boolean required,
String
defaultValue,
List
<
String
> enumeratedValues)
Adds a new attribute to a previously defined element that will
 be defined by a set of enumerated values.
protected void
IIOMetadataFormatImpl.
addBooleanAttribute
(
String
elementName,
String
attrName,
 boolean hasDefaultValue,
 boolean defaultValue)
Adds a new attribute to a previously defined element that will
 be defined by the enumerated values
TRUE
and
FALSE
, with a datatype of
DATATYPE_BOOLEAN
.
protected void
IIOMetadataFormatImpl.
addChildElement
(
String
elementName,
String
parentName)
Adds an existing element to the list of legal children for a
 given parent node type.
protected void
IIOMetadataFormatImpl.
addElement
(
String
elementName,
String
parentName,
 int childPolicy)
Adds a new element type to this metadata document format with a
 child policy other than
CHILD_POLICY_REPEAT
.
protected void
IIOMetadataFormatImpl.
addElement
(
String
elementName,
String
parentName,
 int minChildren,
 int maxChildren)
Adds a new element type to this metadata document format with a
 child policy of
CHILD_POLICY_REPEAT
.
protected void
IIOMetadataFormatImpl.
addObjectValue
(
String
elementName,
Class
<?> classType,
 int arrayMinLength,
 int arrayMaxLength)
Allows an
Object
reference of a given class type
 to be stored in nodes implementing the named element.
protected <T> void
IIOMetadataFormatImpl.
addObjectValue
(
String
elementName,
Class
<T> classType,
 boolean required,
 T defaultValue)
Allows an
Object
reference of a given class type
 to be stored in nodes implementing the named element.
protected <T> void
IIOMetadataFormatImpl.
addObjectValue
(
String
elementName,
Class
<T> classType,
 boolean required,
 T defaultValue,
List
<? extends T> enumeratedValues)
Allows an
Object
reference of a given class type
 to be stored in nodes implementing the named element.
protected <T extends
Object
&
Comparable
<? super T>>
void
IIOMetadataFormatImpl.
addObjectValue
(
String
elementName,
Class
<T> classType,
 T defaultValue,
Comparable
<? super T> minValue,
Comparable
<? super T> maxValue,
 boolean minInclusive,
 boolean maxInclusive)
Allows an
Object
reference of a given class type
 to be stored in nodes implementing the named element.
boolean
IIOMetadataFormat.
canNodeAppear
(
String
elementName,
ImageTypeSpecifier
imageType)
Returns
true
if the element (and the subtree below
 it) is allowed to appear in a metadata document for an image of
 the given type, defined by an
ImageTypeSpecifier
.
abstract
Node
IIOMetadata.
getAsTree
(
String
formatName)
Returns an XML DOM
Node
object that represents the
 root of a tree of metadata contained within this object
 according to the conventions defined by a given metadata
 format.
String
IIOMetadataNode.
getAttribute
(
String
name)
Retrieves an attribute value by name.
int
IIOMetadataFormat.
getAttributeDataType
(
String
elementName,
String
attrName)
Returns one of the constants starting with
DATATYPE_
, indicating the format and
 interpretation of the value of the given attribute within the
 named element.
int
IIOMetadataFormatImpl.
getAttributeDataType
(
String
elementName,
String
attrName)
String
IIOMetadataFormat.
getAttributeDefaultValue
(
String
elementName,
String
attrName)
Returns the default value of the named attribute, if it is not
 explicitly present within the named element, as a
String
, or
null
if no default value
 is available.
String
IIOMetadataFormatImpl.
getAttributeDefaultValue
(
String
elementName,
String
attrName)
String
IIOMetadataFormat.
getAttributeDescription
(
String
elementName,
String
attrName,
Locale
locale)
Returns a
String
containing a description of the
 named attribute, or
null
.
String
IIOMetadataFormatImpl.
getAttributeDescription
(
String
elementName,
String
attrName,
Locale
locale)
Returns a
String
containing a description of the
 named attribute, or
null
.
String
[]
IIOMetadataFormat.
getAttributeEnumerations
(
String
elementName,
String
attrName)
Returns an array of
String
s containing the legal
 enumerated values for the given attribute within the named
 element.
String
[]
IIOMetadataFormatImpl.
getAttributeEnumerations
(
String
elementName,
String
attrName)
int
IIOMetadataFormat.
getAttributeListMaxLength
(
String
elementName,
String
attrName)
Returns the maximum number of list items that may be used to
 define this attribute.
int
IIOMetadataFormatImpl.
getAttributeListMaxLength
(
String
elementName,
String
attrName)
int
IIOMetadataFormat.
getAttributeListMinLength
(
String
elementName,
String
attrName)
Returns the minimum number of list items that may be used to
 define this attribute.
int
IIOMetadataFormatImpl.
getAttributeListMinLength
(
String
elementName,
String
attrName)
String
IIOMetadataFormat.
getAttributeMaxValue
(
String
elementName,
String
attrName)
Returns the maximum legal value for the attribute.
String
IIOMetadataFormatImpl.
getAttributeMaxValue
(
String
elementName,
String
attrName)
String
IIOMetadataFormat.
getAttributeMinValue
(
String
elementName,
String
attrName)
Returns the minimum legal value for the attribute.
String
IIOMetadataFormatImpl.
getAttributeMinValue
(
String
elementName,
String
attrName)
String
[]
IIOMetadataFormat.
getAttributeNames
(
String
elementName)
Returns an array of
String
s listing the names of
 the attributes that may be associated with the named element.
String
[]
IIOMetadataFormatImpl.
getAttributeNames
(
String
elementName)
Attr
IIOMetadataNode.
getAttributeNode
(
String
name)
Attr
IIOMetadataNode.
getAttributeNodeNS
(
String
namespaceURI,
String
localName)
Equivalent to
getAttributeNode(localName)
.
String
IIOMetadataNode.
getAttributeNS
(
String
namespaceURI,
String
localName)
Equivalent to
getAttribute(localName)
.
int
IIOMetadataFormat.
getAttributeValueType
(
String
elementName,
String
attrName)
Returns one of the constants starting with
VALUE_
,
 indicating whether the values of the given attribute within the
 named element are arbitrary, constrained to lie within a
 specified range, constrained to be one of a set of enumerated
 values, or are a whitespace-separated list of arbitrary values.
int
IIOMetadataFormatImpl.
getAttributeValueType
(
String
elementName,
String
attrName)
String
[]
IIOMetadataFormat.
getChildNames
(
String
elementName)
Returns an array of
String
s indicating the names
 of the element which are allowed to be children of the named
 element, in the order in which they should appear.
String
[]
IIOMetadataFormatImpl.
getChildNames
(
String
elementName)
int
IIOMetadataFormat.
getChildPolicy
(
String
elementName)
Returns one of the constants starting with
CHILD_POLICY_
, indicating the legal pattern of
 children for the named element.
int
IIOMetadataFormatImpl.
getChildPolicy
(
String
elementName)
String
IIOMetadataFormat.
getElementDescription
(
String
elementName,
Locale
locale)
Returns a
String
containing a description of the
 named element, or
null
.
String
IIOMetadataFormatImpl.
getElementDescription
(
String
elementName,
Locale
locale)
Returns a
String
containing a description of the
 named element, or
null
.
int
IIOMetadataFormat.
getElementMaxChildren
(
String
elementName)
Returns the maximum number of children of the named element
 with child policy
CHILD_POLICY_REPEAT
.
int
IIOMetadataFormatImpl.
getElementMaxChildren
(
String
elementName)
int
IIOMetadataFormat.
getElementMinChildren
(
String
elementName)
Returns the minimum number of children of the named element
 with child policy
CHILD_POLICY_REPEAT
.
int
IIOMetadataFormatImpl.
getElementMinChildren
(
String
elementName)
NodeList
IIOMetadataNode.
getElementsByTagName
(
String
name)
NodeList
IIOMetadataNode.
getElementsByTagNameNS
(
String
namespaceURI,
String
localName)
Equivalent to
getElementsByTagName(localName)
.
Object
IIOMetadataNode.
getFeature
(
String
feature,
String
version)
This DOM Level 3 method is not supported for
IIOMetadataNode
and will throw a
DOMException
.
IIOMetadataFormat
IIOMetadata.
getMetadataFormat
(
String
formatName)
Returns an
IIOMetadataFormat
object describing the
 given metadata format, or
null
if no description
 is available.
int
IIOMetadataFormat.
getObjectArrayMaxLength
(
String
elementName)
Returns the maximum number of array elements that may be used
 to define the
Object
reference within the named
 element.
int
IIOMetadataFormatImpl.
getObjectArrayMaxLength
(
String
elementName)
int
IIOMetadataFormat.
getObjectArrayMinLength
(
String
elementName)
Returns the minimum number of array elements that may be used
 to define the
Object
reference within the named
 element.
int
IIOMetadataFormatImpl.
getObjectArrayMinLength
(
String
elementName)
Class
<?>
IIOMetadataFormat.
getObjectClass
(
String
elementName)
Returns the
Class
type of the
Object
reference stored within the element.
Class
<?>
IIOMetadataFormatImpl.
getObjectClass
(
String
elementName)
Object
IIOMetadataFormat.
getObjectDefaultValue
(
String
elementName)
Returns an
Object
s containing the default
 value for the
Object
reference within
 the named element.
Object
IIOMetadataFormatImpl.
getObjectDefaultValue
(
String
elementName)
Object
[]
IIOMetadataFormat.
getObjectEnumerations
(
String
elementName)
Returns an array of
Object
s containing the legal
 enumerated values for the
Object
reference within
 the named element.
Object
[]
IIOMetadataFormatImpl.
getObjectEnumerations
(
String
elementName)
Comparable
<?>
IIOMetadataFormat.
getObjectMaxValue
(
String
elementName)
Returns the maximum legal value for the
Object
reference within the named element.
Comparable
<?>
IIOMetadataFormatImpl.
getObjectMaxValue
(
String
elementName)
Comparable
<?>
IIOMetadataFormat.
getObjectMinValue
(
String
elementName)
Returns the minimum legal value for the
Object
reference within the named element.
Comparable
<?>
IIOMetadataFormatImpl.
getObjectMinValue
(
String
elementName)
int
IIOMetadataFormat.
getObjectValueType
(
String
elementName)
Returns one of the enumerated values starting with
VALUE_
, indicating the type of values
 (enumeration, range, or array) that are allowed for the
Object
reference.
int
IIOMetadataFormatImpl.
getObjectValueType
(
String
elementName)
Object
IIOMetadataNode.
getUserData
(
String
key)
This DOM Level 3 method is not supported for
IIOMetadataNode
and will throw a
DOMException
.
boolean
IIOMetadataNode.
hasAttribute
(
String
name)
boolean
IIOMetadataNode.
hasAttributeNS
(
String
namespaceURI,
String
localName)
Equivalent to
hasAttribute(localName)
.
boolean
IIOMetadataFormat.
isAttributeRequired
(
String
elementName,
String
attrName)
Returns
true
if the named attribute must be
 present within the named element.
boolean
IIOMetadataFormatImpl.
isAttributeRequired
(
String
elementName,
String
attrName)
boolean
IIOMetadataNode.
isDefaultNamespace
(
String
namespaceURI)
This DOM Level 3 method is not supported for
IIOMetadataNode
and will throw a
DOMException
.
boolean
IIOMetadataNode.
isSupported
(
String
feature,
String
version)
Returns
false
since DOM features are not
 supported.
String
IIOMetadataNode.
lookupNamespaceURI
(
String
prefix)
This DOM Level 3 method is not supported for
IIOMetadataNode
and will throw a
DOMException
.
String
IIOMetadataNode.
lookupPrefix
(
String
namespaceURI)
This DOM Level 3 method is not supported for
IIOMetadataNode
and will throw a
DOMException
.
abstract void
IIOMetadata.
mergeTree
(
String
formatName,
Node
root)
Alters the internal state of this
IIOMetadata
object from a tree of XML DOM
Node
s whose syntax
 is defined by the given metadata format.
protected void
IIOMetadataFormatImpl.
removeAttribute
(
String
elementName,
String
attrName)
Removes an attribute from a previously defined element.
void
IIOMetadataNode.
removeAttribute
(
String
name)
void
IIOMetadataNode.
removeAttributeNS
(
String
namespaceURI,
String
localName)
Equivalent to
removeAttribute(localName)
.
protected void
IIOMetadataFormatImpl.
removeElement
(
String
elementName)
Removes an element from the format.
protected void
IIOMetadataFormatImpl.
removeObjectValue
(
String
elementName)
Disallows an
Object
reference from being stored in
 nodes implementing the named element.
void
IIOMetadataNode.
setAttribute
(
String
name,
String
value)
void
IIOMetadataNode.
setAttributeNS
(
String
namespaceURI,
String
qualifiedName,
String
value)
Equivalent to
setAttribute(qualifiedName, value)
.
void
IIOMetadata.
setFromTree
(
String
formatName,
Node
root)
Sets the internal state of this
IIOMetadata
object
 from a tree of XML DOM
Node
s whose syntax is
 defined by the given metadata format.
void
IIOMetadataNode.
setIdAttribute
(
String
name,
 boolean isId)
This DOM Level 3 method is not supported for
IIOMetadataNode
and will throw a
DOMException
.
void
IIOMetadataNode.
setIdAttributeNS
(
String
namespaceURI,
String
localName,
 boolean isId)
This DOM Level 3 method is not supported for
IIOMetadataNode
and will throw a
DOMException
.
void
IIOMetadataNode.
setNodeValue
(
String
nodeValue)
Sets the
String
value associated with this node.
void
IIOMetadataNode.
setPrefix
(
String
prefix)
Does nothing, since namespaces are not supported.
protected void
IIOMetadataFormatImpl.
setResourceBaseName
(
String
resourceBaseName)
Sets a new base name for locating
ResourceBundle
s
 containing descriptions of elements and attributes for this
 format.
void
IIOMetadataNode.
setTextContent
(
String
textContent)
This DOM Level 3 method is not supported for
IIOMetadataNode
and will throw a
DOMException
.
Object
IIOMetadataNode.
setUserData
(
String
key,
Object
data,
UserDataHandler
handler)
This DOM Level 3 method is not supported for
IIOMetadataNode
and will throw a
DOMException
.
Method parameters in
javax.imageio.metadata
with type arguments of type
String
Modifier and Type
Method
Description
protected void
IIOMetadataFormatImpl.
addAttribute
(
String
elementName,
String
attrName,
 int dataType,
 boolean required,
String
defaultValue,
List
<
String
> enumeratedValues)
Adds a new attribute to a previously defined element that will
 be defined by a set of enumerated values.
Constructors in
javax.imageio.metadata
with parameters of type
String
Modifier
Constructor
Description
IIOInvalidTreeException
(
String
message,
Throwable
cause,
Node
offendingNode)
Constructs an
IIOInvalidTreeException
with a
 message string, a reference to an exception that caused this
 exception, and a reference to the
Node
that caused
 the parsing error.
IIOInvalidTreeException
(
String
message,
Node
offendingNode)
Constructs an
IIOInvalidTreeException
with a
 message string and a reference to the
Node
that
 caused the parsing error.
protected
IIOMetadata
(boolean standardMetadataFormatSupported,
String
nativeMetadataFormatName,
String
nativeMetadataFormatClassName,
String
[] extraMetadataFormatNames,
String
[] extraMetadataFormatClassNames)
Constructs an
IIOMetadata
object with the given
 format names and format class names, as well as a boolean
 indicating whether the standard format is supported.
IIOMetadataFormatImpl
(
String
rootName,
 int childPolicy)
Constructs a blank
IIOMetadataFormatImpl
instance,
 with a given root element name and child policy (other than
CHILD_POLICY_REPEAT
).
IIOMetadataFormatImpl
(
String
rootName,
 int minChildren,
 int maxChildren)
Constructs a blank
IIOMetadataFormatImpl
instance,
 with a given root element name and a child policy of
CHILD_POLICY_REPEAT
.
IIOMetadataNode
(
String
nodeName)
Constructs an
IIOMetadataNode
with a given node
 name.
Uses of
String
in
javax.imageio.plugins.jpeg
Methods in
javax.imageio.plugins.jpeg
that return
String
Modifier and Type
Method
Description
String
JPEGHuffmanTable.
toString
()
Returns a
String
representing this Huffman table.
String
JPEGQTable.
toString
()
Returns a
String
representing this quantization table.
Uses of
String
in
javax.imageio.plugins.tiff
Fields in
javax.imageio.plugins.tiff
declared as
String
Modifier and Type
Field
Description
static final
String
ExifGPSTagSet.
DEST_DISTANCE_REF_KILOMETERS
A value to be used with the "GPSDestDistanceRef" tag.
static final
String
ExifGPSTagSet.
DEST_DISTANCE_REF_KNOTS
A value to be used with the "GPSDestDistanceRef" tag.
static final
String
ExifGPSTagSet.
DEST_DISTANCE_REF_MILES
A value to be used with the "GPSDestDistanceRef" tag.
static final
String
ExifGPSTagSet.
DIRECTION_REF_MAGNETIC
A value to be used with the "GPSTrackRef", "GPSImgDirectionRef",
 and "GPSDestBearingRef" tags.
static final
String
ExifGPSTagSet.
DIRECTION_REF_TRUE
A value to be used with the "GPSTrackRef", "GPSImgDirectionRef",
 and "GPSDestBearingRef" tags.
static final
String
ExifTIFFTagSet.
EXIF_VERSION_2_1
A value to be used with the "ExifVersion" tag to indicate Exif version
 2.1.
static final
String
ExifTIFFTagSet.
EXIF_VERSION_2_2
A value to be used with the "ExifVersion" tag to indicate Exif version
 2.2.
static final
String
ExifGPSTagSet.
GPS_VERSION_2_2
A value to be used with the "GPSVersionID" tag to indicate GPS version
 2.2.
static final
String
ExifInteroperabilityTagSet.
INTEROPERABILITY_INDEX_R98
A value to be used with the "InteroperabilityIndex" tag.
static final
String
ExifInteroperabilityTagSet.
INTEROPERABILITY_INDEX_THM
A value to be used with the "InteroperabilityIndex" tag.
static final
String
ExifGPSTagSet.
LATITUDE_REF_NORTH
A value to be used with the "GPSLatitudeRef" and
 "GPSDestLatitudeRef" tags.
static final
String
ExifGPSTagSet.
LATITUDE_REF_SOUTH
A value to be used with the "GPSLatitudeRef" and
 "GPSDestLatitudeRef" tags.
static final
String
ExifGPSTagSet.
LONGITUDE_REF_EAST
A value to be used with the "GPSLongitudeRef" and
 "GPSDestLongitudeRef" tags.
static final
String
ExifGPSTagSet.
LONGITUDE_REF_WEST
A value to be used with the "GPSLongitudeRef" and
 "GPSDestLongitudeRef" tags.
static final
String
ExifGPSTagSet.
MEASURE_MODE_2D
A value to be used with the "GPSMeasureMode" tag.
static final
String
ExifGPSTagSet.
MEASURE_MODE_3D
A value to be used with the "GPSMeasureMode" tag.
static final
String
ExifGPSTagSet.
SPEED_REF_KILOMETERS_PER_HOUR
A value to be used with the "GPSSpeedRef" tag.
static final
String
ExifGPSTagSet.
SPEED_REF_KNOTS
A value to be used with the "GPSSpeedRef" tag.
static final
String
ExifGPSTagSet.
SPEED_REF_MILES_PER_HOUR
A value to be used with the "GPSSpeedRef" tag.
static final
String
ExifGPSTagSet.
STATUS_MEASUREMENT_IN_PROGRESS
A value to be used with the "GPSStatus" tag.
static final
String
ExifGPSTagSet.
STATUS_MEASUREMENT_INTEROPERABILITY
A value to be used with the "GPSStatus" tag.
static final
String
TIFFTag.
UNKNOWN_TAG_NAME
The name assigned to a tag with an unknown tag number.
Methods in
javax.imageio.plugins.tiff
that return
String
Modifier and Type
Method
Description
String
TIFFField.
getAsString
(int index)
Returns a
TIFFTag.TIFF_ASCII
value as a
String
.
String
TIFFTag.
getName
()
Returns the name of the tag, as it will appear in image metadata.
static
String
TIFFField.
getTypeName
(int dataType)
Returns the name of the supplied data type constant.
String
TIFFField.
getValueAsString
(int index)
Returns a
String
containing a human-readable
 version of the data item.
String
TIFFTag.
getValueName
(int value)
Returns the mnemonic name associated with a particular value
 that this tag's data may take on, or
null
if
 no name is present.
Methods in
javax.imageio.plugins.tiff
that return types with arguments of type
String
Modifier and Type
Method
Description
SortedSet
<
String
>
TIFFTagSet.
getTagNames
()
Retrieves an unmodifiable lexicographically increasing set of tag names.
Methods in
javax.imageio.plugins.tiff
with parameters of type
String
Modifier and Type
Method
Description
protected void
TIFFTag.
addValueName
(int value,
String
name)
Adds a mnemonic name for a particular value that this tag's data may take
 on.
TIFFTag
TIFFTagSet.
getTag
(
String
tagName)
Returns the
TIFFTag
having the given tag name, or
null
if the named tag does not belong to this tag set.
static int
TIFFField.
getTypeByName
(
String
typeName)
Returns the data type constant corresponding to the supplied data
 type name.
Constructors in
javax.imageio.plugins.tiff
with parameters of type
String
Modifier
Constructor
Description
TIFFTag
(
String
name,
 int number,
 int dataTypes)
Constructs  a
TIFFTag
with  a  given  name,  tag number,
 and set  of  legal  data  types.
TIFFTag
(
String
name,
 int number,
 int dataTypes,
 int count)
Constructs a
TIFFTag
with a given name, tag number, set
 of legal data types, and value count.
TIFFTag
(
String
name,
 int number,
TIFFTagSet
tagSet)
Constructs a
TIFFTag
with a given name, tag number and
TIFFTagSet
to which it refers.
Uses of
String
in
javax.imageio.spi
Fields in
javax.imageio.spi
declared as
String
Modifier and Type
Field
Description
protected
String
[]
ImageReaderWriterSpi.
extraImageMetadataFormatClassNames
An array of
String
s containing the class names of
 any additional image metadata formats supported by this
 plug-in, initially
null
.
protected
String
[]
ImageReaderWriterSpi.
extraImageMetadataFormatNames
An array of
String
s containing the names of any
 additional image metadata formats supported by this plug-in,
 initially
null
.
protected
String
[]
ImageReaderWriterSpi.
extraStreamMetadataFormatClassNames
An array of
String
s containing the class names of
 any additional stream metadata formats supported by this plug-in,
 initially
null
.
protected
String
[]
ImageReaderWriterSpi.
extraStreamMetadataFormatNames
An array of
String
s containing the names of any
 additional stream metadata formats supported by this plug-in,
 initially
null
.
protected
String
[]
ImageReaderWriterSpi.
MIMETypes
An array of strings to be returned from
getMIMETypes
, initially
null
.
protected
String
[]
ImageReaderWriterSpi.
names
An array of strings to be returned from
getFormatNames
, initially
null
.
protected
String
ImageReaderWriterSpi.
nativeImageMetadataFormatClassName
A
String
containing the class name of the
 native stream metadata format supported by this plug-in,
 initially
null
.
protected
String
ImageReaderWriterSpi.
nativeImageMetadataFormatName
A
String
containing the name of the
 native stream metadata format supported by this plug-in,
 initially
null
.
protected
String
ImageReaderWriterSpi.
nativeStreamMetadataFormatClassName
A
String
containing the class name of the native
 stream metadata format supported by this plug-in, initially
null
.
protected
String
ImageReaderWriterSpi.
nativeStreamMetadataFormatName
A
String
containing the name of the native stream
 metadata format supported by this plug-in, initially
null
.
protected
String
ImageReaderWriterSpi.
pluginClassName
A
String
containing the name of the associated
 plug-in class, initially
null
.
protected
String
[]
ImageWriterSpi.
readerSpiNames
An array of strings to be returned from
getImageReaderSpiNames
, initially
null
.
protected
String
[]
ImageReaderWriterSpi.
suffixes
An array of strings to be returned from
getFileSuffixes
, initially
null
.
protected
String
IIOServiceProvider.
vendorName
A
String
to be returned from
getVendorName
, initially
null
.
protected
String
IIOServiceProvider.
version
A
String
to be returned from
getVersion
, initially null.
protected
String
[]
ImageReaderSpi.
writerSpiNames
An array of strings to be returned from
getImageWriterSpiNames
, initially
null
.
Methods in
javax.imageio.spi
that return
String
Modifier and Type
Method
Description
abstract
String
IIOServiceProvider.
getDescription
(
Locale
locale)
Returns a brief, human-readable description of this service
 provider and its associated implementation.
String
[]
ImageReaderWriterSpi.
getExtraImageMetadataFormatNames
()
Returns an array of
String
s containing the names
 of additional document formats, other than the native and
 standard formats, recognized by the
getAsTree
and
setFromTree
methods on
 the image metadata objects produced or consumed by this
 plug-in.
String
[]
ImageReaderWriterSpi.
getExtraStreamMetadataFormatNames
()
Returns an array of
String
s containing the names
 of additional document formats, other than the native and
 standard formats, recognized by the
getAsTree
and
setFromTree
methods on
 the stream metadata objects produced or consumed by this
 plug-in.
String
[]
ImageReaderWriterSpi.
getFileSuffixes
()
Returns an array of
String
s containing a list of
 file suffixes associated with the formats that are generally
 usable by the
ImageReader
or
ImageWriter
implementation associated with this
 service provider.
String
[]
ImageReaderWriterSpi.
getFormatNames
()
Returns an array of
String
s containing
 human-readable names for the formats that are generally usable
 by the
ImageReader
or
ImageWriter
implementation associated with this service provider.
String
[]
ImageWriterSpi.
getImageReaderSpiNames
()
Returns an array of
String
s containing all the
 fully qualified names of all the
ImageReaderSpi
classes that can understand the internal metadata
 representation used by the
ImageWriter
associated
 with this service provider, or
null
if there are
 no such
ImageReaders
specified.
String
[]
ImageReaderSpi.
getImageWriterSpiNames
()
Returns an array of
String
s containing the fully
 qualified names of all the
ImageWriterSpi
classes
 that can understand the internal metadata representation used
 by the
ImageReader
associated with this service
 provider, or
null
if there are no such
ImageWriter
s specified.
String
[]
ImageReaderWriterSpi.
getMIMETypes
()
Returns an array of
String
s containing a list of
 MIME types associated with the formats that are generally
 usable by the
ImageReader
or
ImageWriter
implementation associated with this
 service provider.
String
ImageReaderWriterSpi.
getNativeImageMetadataFormatName
()
Returns the name of the "native" image metadata format for
 this plug-in, which typically allows for lossless encoding and
 transmission of the image metadata stored in the format handled by
 this plug-in.
String
ImageReaderWriterSpi.
getNativeStreamMetadataFormatName
()
Returns the name of the "native" stream metadata format for
 this plug-in, which typically allows for lossless encoding and
 transmission of the stream metadata stored in the format handled by
 this plug-in.
String
ImageReaderWriterSpi.
getPluginClassName
()
Returns the fully-qualified class name of the
ImageReader
or
ImageWriter
plug-in
 associated with this service provider.
abstract
String
ImageTranscoderSpi.
getReaderServiceProviderName
()
Returns the fully qualified class name of an
ImageReaderSpi
class that generates
IIOMetadata
objects that may be used as input to
 this transcoder.
String
IIOServiceProvider.
getVendorName
()
Returns the name of the vendor responsible for creating this
 service provider and its associated implementation.
String
IIOServiceProvider.
getVersion
()
Returns a string describing the version
 number of this service provider and its associated
 implementation.
abstract
String
ImageTranscoderSpi.
getWriterServiceProviderName
()
Returns the fully qualified class name of an
ImageWriterSpi
class that generates
IIOMetadata
objects that may be used as input to
 this transcoder.
Methods in
javax.imageio.spi
with parameters of type
String
Modifier and Type
Method
Description
IIOMetadataFormat
ImageReaderWriterSpi.
getImageMetadataFormat
(
String
formatName)
Returns an
IIOMetadataFormat
object describing the
 given image metadata format, or
null
if no
 description is available.
IIOMetadataFormat
ImageReaderWriterSpi.
getStreamMetadataFormat
(
String
formatName)
Returns an
IIOMetadataFormat
object describing the
 given stream metadata format, or
null
if no
 description is available.
Constructors in
javax.imageio.spi
with parameters of type
String
Modifier
Constructor
Description
IIOServiceProvider
(
String
vendorName,
String
version)
Constructs an
IIOServiceProvider
with a given
 vendor name and version identifier.
ImageInputStreamSpi
(
String
vendorName,
String
version,
Class
<?> inputClass)
Constructs an
ImageInputStreamSpi
with a given set
 of values.
ImageOutputStreamSpi
(
String
vendorName,
String
version,
Class
<?> outputClass)
Constructs an
ImageOutputStreamSpi
with a given
 set of values.
ImageReaderSpi
(
String
vendorName,
String
version,
String
[] names,
String
[] suffixes,
String
[] MIMETypes,
String
readerClassName,
Class
<?>[] inputTypes,
String
[] writerSpiNames,
 boolean supportsStandardStreamMetadataFormat,
String
nativeStreamMetadataFormatName,
String
nativeStreamMetadataFormatClassName,
String
[] extraStreamMetadataFormatNames,
String
[] extraStreamMetadataFormatClassNames,
 boolean supportsStandardImageMetadataFormat,
String
nativeImageMetadataFormatName,
String
nativeImageMetadataFormatClassName,
String
[] extraImageMetadataFormatNames,
String
[] extraImageMetadataFormatClassNames)
Constructs an
ImageReaderSpi
with a given
 set of values.
ImageReaderWriterSpi
(
String
vendorName,
String
version,
String
[] names,
String
[] suffixes,
String
[] MIMETypes,
String
pluginClassName,
 boolean supportsStandardStreamMetadataFormat,
String
nativeStreamMetadataFormatName,
String
nativeStreamMetadataFormatClassName,
String
[] extraStreamMetadataFormatNames,
String
[] extraStreamMetadataFormatClassNames,
 boolean supportsStandardImageMetadataFormat,
String
nativeImageMetadataFormatName,
String
nativeImageMetadataFormatClassName,
String
[] extraImageMetadataFormatNames,
String
[] extraImageMetadataFormatClassNames)
Constructs an
ImageReaderWriterSpi
with a given
 set of values.
ImageTranscoderSpi
(
String
vendorName,
String
version)
Constructs an
ImageTranscoderSpi
with a given set
 of values.
ImageWriterSpi
(
String
vendorName,
String
version,
String
[] names,
String
[] suffixes,
String
[] MIMETypes,
String
writerClassName,
Class
<?>[] outputTypes,
String
[] readerSpiNames,
 boolean supportsStandardStreamMetadataFormat,
String
nativeStreamMetadataFormatName,
String
nativeStreamMetadataFormatClassName,
String
[] extraStreamMetadataFormatNames,
String
[] extraStreamMetadataFormatClassNames,
 boolean supportsStandardImageMetadataFormat,
String
nativeImageMetadataFormatName,
String
nativeImageMetadataFormatClassName,
String
[] extraImageMetadataFormatNames,
String
[] extraImageMetadataFormatClassNames)
Constructs an
ImageWriterSpi
with a given
 set of values.
Uses of
String
in
javax.imageio.stream
Methods in
javax.imageio.stream
that return
String
Modifier and Type
Method
Description
String
ImageInputStream.
readLine
()
Reads the next line of text from the input stream.
String
ImageInputStreamImpl.
readLine
()
String
ImageInputStream.
readUTF
()
Reads in a string that has been encoded using a
modified UTF-8
format.
String
ImageInputStreamImpl.
readUTF
()
Methods in
javax.imageio.stream
with parameters of type
String
Modifier and Type
Method
Description
void
ImageOutputStream.
writeBytes
(
String
s)
Writes a string to the output stream.
void
ImageOutputStreamImpl.
writeBytes
(
String
s)
void
ImageOutputStream.
writeChars
(
String
s)
Writes a string to the output stream.
void
ImageOutputStreamImpl.
writeChars
(
String
s)
void
ImageOutputStream.
writeUTF
(
String
s)
Writes two bytes of length information to the output stream in
 network byte order, followed by the
modified UTF-8
representation of every character in the string
s
.
void
ImageOutputStreamImpl.
writeUTF
(
String
s)
Uses of
String
in
javax.lang.model
Methods in
javax.lang.model
with parameters of type
String
Modifier and Type
Method
Description
static
SourceVersion
SourceVersion.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Constructors in
javax.lang.model
with parameters of type
String
Modifier
Constructor
Description
protected
UnknownEntityException
(
String
message)
Creates a new
UnknownEntityException
with the specified
 detail message.
Uses of
String
in
javax.lang.model.element
Methods in
javax.lang.model.element
that return
String
Modifier and Type
Method
Description
String
AnnotationValue.
toString
()
Returns a string representation of this value.
String
Modifier.
toString
()
Returns this modifier's name as defined in
The
 Java Language Specification
.
Methods in
javax.lang.model.element
with parameters of type
String
Modifier and Type
Method
Description
static
ElementKind
ElementKind.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
Modifier
Modifier.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
ModuleElement.DirectiveKind
ModuleElement.DirectiveKind.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
NestingKind
NestingKind.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
R
AnnotationValueVisitor.
visitString
(
String
s,
P
p)
Visits a string value in an annotation.
Uses of
String
in
javax.lang.model.type
Methods in
javax.lang.model.type
that return
String
Modifier and Type
Method
Description
String
TypeMirror.
toString
()
Returns an informative string representation of this type.
Methods in
javax.lang.model.type
with parameters of type
String
Modifier and Type
Method
Description
static
TypeKind
TypeKind.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Uses of
String
in
javax.lang.model.util
Methods in
javax.lang.model.util
that return
String
Modifier and Type
Method
Description
String
Elements.
getConstantExpression
(
Object
value)
Returns the text of a
constant expression
representing a
 primitive value or a string.
String
Elements.
getDocComment
(
Element
e)
Returns the text of the documentation ("Javadoc")
 comment of an element.
Methods in
javax.lang.model.util
with parameters of type
String
Modifier and Type
Method
Description
static
Elements.Origin
Elements.Origin.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
R
SimpleAnnotationValueVisitor6.
visitString
(
String
s,
P
p)
Visits a string value in an annotation.
Uses of
String
in
javax.management
Fields in
javax.management
declared as
String
Modifier and Type
Field
Description
static final
String
AttributeChangeNotification.
ATTRIBUTE_CHANGE
Notification type which indicates that the observed MBean attribute value has changed.
static final
String
JMX.
DEFAULT_VALUE_FIELD
The name of the
defaultValue
field.
protected
String
MBeanFeatureInfo.
description
The human-readable description of the feature.
static final
String
JMX.
IMMUTABLE_INFO_FIELD
The name of the
immutableInfo
field.
static final
String
JMX.
INTERFACE_CLASS_NAME_FIELD
The name of the
interfaceClassName
field.
static final
String
JMX.
LEGAL_VALUES_FIELD
The name of the
legalValues
field.
static final
String
JMX.
MAX_VALUE_FIELD
The name of the
maxValue
field.
static final
String
JMX.
MIN_VALUE_FIELD
The name of the
minValue
field.
static final
String
JMX.
MXBEAN_FIELD
The name of the
mxbean
field.
protected
String
MBeanFeatureInfo.
name
The name of the feature.
static final
String
JMX.
OPEN_TYPE_FIELD
The name of the
openType
field.
static final
String
JMX.
ORIGINAL_TYPE_FIELD
The name of the
originalType
field.
static final
String
MBeanServerNotification.
REGISTRATION_NOTIFICATION
Notification type denoting that an MBean has been registered.
static final
String
MBeanServerNotification.
UNREGISTRATION_NOTIFICATION
Notification type denoting that an MBean has been unregistered.
Methods in
javax.management
that return
String
Modifier and Type
Method
Description
String
MBeanPermission.
getActions
()
Returns the "canonical string representation" of the actions.
String
AttributeChangeNotification.
getAttributeName
()
Gets the name of the attribute which has changed.
String
AttributeValueExp.
getAttributeName
()
Returns a string representation of the name of the attribute.
String
AttributeChangeNotification.
getAttributeType
()
Gets the type of the attribute which has changed.
String
ObjectName.
getCanonicalKeyPropertyListString
()
Returns a string representation of the list of key properties,
 in which the key properties are sorted in lexical order.
String
ObjectName.
getCanonicalName
()
Returns the canonical form of the name; that is, a string
 representation where the properties are sorted in lexical
 order.
String
MBeanInfo.
getClassName
()
Returns the name of the Java class of the MBean described by
 this
MBeanInfo
.
String
ObjectInstance.
getClassName
()
Returns the class part.
protected
String
StandardMBean.
getClassName
(
MBeanInfo
info)
Customization hook:
 Get the className that will be used in the MBeanInfo returned by
 this MBean.
String
MBeanServer.
getDefaultDomain
()
String
MBeanServerConnection.
getDefaultDomain
()
Returns the default domain used for naming the MBean.
String
MBeanFeatureInfo.
getDescription
()
Returns the human-readable description of the feature.
String
MBeanInfo.
getDescription
()
Returns a human readable description of the MBean.
protected
String
StandardMBean.
getDescription
(
MBeanAttributeInfo
info)
Customization hook:
 Get the description that will be used in the MBeanAttributeInfo
 returned by this MBean.
protected
String
StandardMBean.
getDescription
(
MBeanConstructorInfo
info)
Customization hook:
 Get the description that will be used in the MBeanConstructorInfo
 returned by this MBean.
protected
String
StandardMBean.
getDescription
(
MBeanConstructorInfo
ctor,
MBeanParameterInfo
param,
 int sequence)
Customization hook:
 Get the description that will be used for the
sequence
MBeanParameterInfo of the MBeanConstructorInfo returned by this MBean.
protected
String
StandardMBean.
getDescription
(
MBeanFeatureInfo
info)
Customization hook:
 Get the description that will be used in the MBeanFeatureInfo
 returned by this MBean.
protected
String
StandardMBean.
getDescription
(
MBeanInfo
info)
Customization hook:
 Get the description that will be used in the MBeanInfo returned by
 this MBean.
protected
String
StandardMBean.
getDescription
(
MBeanOperationInfo
info)
Customization hook:
 Get the description that will be used in the MBeanOperationInfo
 returned by this MBean.
protected
String
StandardMBean.
getDescription
(
MBeanOperationInfo
op,
MBeanParameterInfo
param,
 int sequence)
Customization hook:
 Get the description that will be used for the
sequence
MBeanParameterInfo of the MBeanOperationInfo returned by this MBean.
String
ObjectName.
getDomain
()
Returns the domain part.
String
[]
MBeanServer.
getDomains
()
String
[]
MBeanServerConnection.
getDomains
()
Returns the list of domains in which any MBean is currently
 registered.
String
[]
Descriptor.
getFieldNames
()
Returns all the field names in the descriptor.
final
String
[]
ImmutableDescriptor.
getFieldNames
()
String
[]
Descriptor.
getFields
()
Returns all of the fields contained in this descriptor as a string array.
final
String
[]
ImmutableDescriptor.
getFields
()
String
MBeanServerDelegate.
getImplementationName
()
Returns the JMX implementation name (the name of this product).
String
MBeanServerDelegateMBean.
getImplementationName
()
Returns the JMX implementation name (the name of this product).
String
MBeanServerDelegate.
getImplementationVendor
()
Returns the JMX implementation vendor (the vendor of this product).
String
MBeanServerDelegateMBean.
getImplementationVendor
()
Returns the JMX implementation vendor (the vendor of this product).
String
MBeanServerDelegate.
getImplementationVersion
()
Returns the JMX implementation version (the version of this product).
String
MBeanServerDelegateMBean.
getImplementationVersion
()
Returns the JMX implementation version (the version of this product).
String
ObjectName.
getKeyProperty
(
String
property)
Obtains the value associated with a key in a key property.
String
ObjectName.
getKeyPropertyListString
()
Returns a string representation of the list of key
 properties specified at creation time.
String
MBeanServerDelegate.
getMBeanServerId
()
Returns the MBean server agent identity.
String
MBeanServerDelegateMBean.
getMBeanServerId
()
Returns the MBean server agent identity.
String
Notification.
getMessage
()
Get the notification message.
String
Attribute.
getName
()
Returns a String containing the  name of the attribute.
String
MBeanFeatureInfo.
getName
()
Returns the name of the feature.
String
[]
MBeanNotificationInfo.
getNotifTypes
()
Returns the array of strings (in dot notation) containing the
 notification types that the MBean may emit.
protected
String
StandardMBean.
getParameterName
(
MBeanConstructorInfo
ctor,
MBeanParameterInfo
param,
 int sequence)
Customization hook:
 Get the name that will be used for the
sequence
MBeanParameterInfo of the MBeanConstructorInfo returned by this MBean.
protected
String
StandardMBean.
getParameterName
(
MBeanOperationInfo
op,
MBeanParameterInfo
param,
 int sequence)
Customization hook:
 Get the name that will be used for the
sequence
MBeanParameterInfo of the MBeanOperationInfo returned by this MBean.
String
MBeanOperationInfo.
getReturnType
()
Returns the type of the method's return value.
String
MBeanServerDelegate.
getSpecificationName
()
Returns the full name of the JMX specification implemented
 by this product.
String
MBeanServerDelegateMBean.
getSpecificationName
()
Returns the full name of the JMX specification implemented
 by this product.
String
MBeanServerDelegate.
getSpecificationVendor
()
Returns the vendor of the JMX specification implemented
 by this product.
String
MBeanServerDelegateMBean.
getSpecificationVendor
()
Returns the vendor of the JMX specification implemented
 by this product.
String
MBeanServerDelegate.
getSpecificationVersion
()
Returns the version of the JMX specification implemented
 by this product.
String
MBeanServerDelegateMBean.
getSpecificationVersion
()
Returns the version of the JMX specification implemented
 by this product.
String
MBeanAttributeInfo.
getType
()
Returns the class name of the attribute.
String
MBeanParameterInfo.
getType
()
Returns the type or class name of the data.
String
Notification.
getType
()
Get the notification type.
String
StringValueExp.
getValue
()
Returns the string represented by the
StringValueExp
instance.
static
String
ObjectName.
quote
(
String
s)
Returns a quoted form of the given String, suitable for
 inclusion in an ObjectName.
String
Attribute.
toString
()
Returns a String object representing this Attribute's value.
String
AttributeValueExp.
toString
()
Returns the string representing its value.
String
BadAttributeValueExpException.
toString
()
Returns the string representing the object.
String
BadBinaryOpValueExpException.
toString
()
Returns the string representing the object.
String
BadStringOperationException.
toString
()
Returns the string representing the object.
String
Notification.
toString
()
Returns a String representation of this notification.
String
ObjectInstance.
toString
()
Returns a string representing this ObjectInstance object.
String
ObjectName.
toString
()
Returns a string representation of the object name.
String
StringValueExp.
toString
()
Returns the string representing the object.
static
String
ObjectName.
unquote
(
String
q)
Returns an unquoted form of the given String.
Methods in
javax.management
that return types with arguments of type
String
Modifier and Type
Method
Description
Vector
<
String
>
AttributeChangeNotificationFilter.
getEnabledAttributes
()
Gets all the enabled attribute names for this filter.
Vector
<
String
>
NotificationFilterSupport.
getEnabledTypes
()
Gets all the enabled notification types for this filter.
Hashtable
<
String
,
String
>
ObjectName.
getKeyPropertyList
()
Returns the key properties as a Hashtable.
Hashtable
<
String
,
String
>
ObjectName.
getKeyPropertyList
()
Returns the key properties as a Hashtable.
Methods in
javax.management
with parameters of type
String
Modifier and Type
Method
Description
static
AttributeValueExp
Query.
attr
(
String
name)
Returns a new attribute expression.
static
AttributeValueExp
Query.
attr
(
String
className,
String
name)
Returns a new qualified attribute expression.
ObjectInstance
MBeanServer.
createMBean
(
String
className,
ObjectName
name)
Instantiates and registers an MBean in the MBean server.
ObjectInstance
MBeanServer.
createMBean
(
String
className,
ObjectName
name,
Object
[] params,
String
[] signature)
Instantiates and registers an MBean in the MBean server.
ObjectInstance
MBeanServer.
createMBean
(
String
className,
ObjectName
name,
ObjectName
loaderName)
Instantiates and registers an MBean in the MBean server.
ObjectInstance
MBeanServer.
createMBean
(
String
className,
ObjectName
name,
ObjectName
loaderName,
Object
[] params,
String
[] signature)
Instantiates and registers an MBean in the MBean server.
ObjectInstance
MBeanServerConnection.
createMBean
(
String
className,
ObjectName
name)
Instantiates and registers an MBean in the MBean server.
ObjectInstance
MBeanServerConnection.
createMBean
(
String
className,
ObjectName
name,
Object
[] params,
String
[] signature)
Instantiates and registers an MBean in the MBean server.
ObjectInstance
MBeanServerConnection.
createMBean
(
String
className,
ObjectName
name,
ObjectName
loaderName)
Instantiates and registers an MBean in the MBean server.
ObjectInstance
MBeanServerConnection.
createMBean
(
String
className,
ObjectName
name,
ObjectName
loaderName,
Object
[] params,
String
[] signature)
Instantiates and registers an MBean in the MBean server.
static
MBeanServer
MBeanServerFactory.
createMBeanServer
(
String
domain)
Return a new object implementing the
MBeanServer
interface with the specified default domain name.
default
ObjectInputStream
MBeanServer.
deserialize
(
String
className,
 byte[] data)
Deprecated.
Use
MBeanServer.getClassLoaderRepository()
to obtain the
 class loader repository and use it to deserialize.
default
ObjectInputStream
MBeanServer.
deserialize
(
String
className,
ObjectName
loaderName,
 byte[] data)
Deprecated.
Use
getClassLoader
to obtain
 the class loader for deserialization.
void
AttributeChangeNotificationFilter.
disableAttribute
(
String
name)
Disables all the attribute change notifications the attribute name of which equals
 the specified attribute name to be sent to the listener.
void
NotificationFilterSupport.
disableType
(
String
prefix)
Removes the given prefix from the prefix list.
void
AttributeChangeNotificationFilter.
enableAttribute
(
String
name)
Enables all the attribute change notifications the attribute name of which equals
 the specified name to be sent to the listener.
void
NotificationFilterSupport.
enableType
(
String
prefix)
Enables all the notifications the type of which starts with the specified prefix
 to be sent to the listener.
static
ArrayList
<
MBeanServer
>
MBeanServerFactory.
findMBeanServer
(
String
agentId)
Return a list of registered MBeanServer objects.
Object
DynamicMBean.
getAttribute
(
String
attribute)
Obtain the value of a specific attribute of the Dynamic MBean.
Object
MBeanServer.
getAttribute
(
ObjectName
name,
String
attribute)
Object
MBeanServerConnection.
getAttribute
(
ObjectName
name,
String
attribute)
Gets the value of a specific attribute of a named MBean.
Object
StandardMBean.
getAttribute
(
String
attribute)
AttributeList
DynamicMBean.
getAttributes
(
String
[] attributes)
Get the values of several attributes of the Dynamic MBean.
AttributeList
MBeanServer.
getAttributes
(
ObjectName
name,
String
[] attributes)
AttributeList
MBeanServerConnection.
getAttributes
(
ObjectName
name,
String
[] attributes)
Retrieves the values of several attributes of a named MBean.
AttributeList
StandardMBean.
getAttributes
(
String
[] attributes)
Object
Descriptor.
getFieldValue
(
String
fieldName)
Returns the value for a specific field name, or null if no value
 is present for that name.
final
Object
ImmutableDescriptor.
getFieldValue
(
String
fieldName)
Object
[]
Descriptor.
getFieldValues
(
String
... fieldNames)
Returns all the field values in the descriptor as an array of Objects.
final
Object
[]
ImmutableDescriptor.
getFieldValues
(
String
... fieldNames)
static
ObjectName
ObjectName.
getInstance
(
String
name)
Return an instance of ObjectName that can be used anywhere
 an object obtained with
new
 ObjectName(name)
can be used.
static
ObjectName
ObjectName.
getInstance
(
String
domain,
String
key,
String
value)
Return an instance of ObjectName that can be used anywhere
 an object obtained with
new ObjectName(domain, key, value)
can be used.
static
ObjectName
ObjectName.
getInstance
(
String
domain,
Hashtable
<
String
,
String
> table)
Return an instance of ObjectName that can be used anywhere
 an object obtained with
new ObjectName(domain, table)
can be used.
String
ObjectName.
getKeyProperty
(
String
property)
Obtains the value associated with a key in a key property.
Object
MBeanServer.
instantiate
(
String
className)
Instantiates an object using the list of all class loaders
 registered in the MBean server's
Class Loader
 Repository
.
Object
MBeanServer.
instantiate
(
String
className,
Object
[] params,
String
[] signature)
Instantiates an object using the list of all class loaders
 registered in the MBean server
Class Loader
 Repository
.
Object
MBeanServer.
instantiate
(
String
className,
ObjectName
loaderName)
Instantiates an object using the class Loader specified by its
ObjectName
.
Object
MBeanServer.
instantiate
(
String
className,
ObjectName
loaderName,
Object
[] params,
String
[] signature)
Instantiates an object.
Object
DynamicMBean.
invoke
(
String
actionName,
Object
[] params,
String
[] signature)
Allows an action to be invoked on the Dynamic MBean.
Object
MBeanServer.
invoke
(
ObjectName
name,
String
operationName,
Object
[] params,
String
[] signature)
Object
MBeanServerConnection.
invoke
(
ObjectName
name,
String
operationName,
Object
[] params,
String
[] signature)
Invokes an operation on an MBean.
Object
StandardMBean.
invoke
(
String
actionName,
Object
[] params,
String
[] signature)
boolean
MBeanServer.
isInstanceOf
(
ObjectName
name,
String
className)
boolean
MBeanServerConnection.
isInstanceOf
(
ObjectName
name,
String
className)
Returns true if the MBean specified is an instance of the
 specified class, false otherwise.
boolean
ObjectName.
isPropertyValuePattern
(
String
property)
Checks whether the value associated with a key in a key
 property is a pattern.
static
Class
<?>
DefaultLoaderRepository.
loadClass
(
String
className)
Deprecated.
Go through the list of class loaders and try to load the requested class.
static
Class
<?>
DefaultLoaderRepository.
loadClassWithout
(
ClassLoader
loader,
String
className)
Deprecated.
Go through the list of class loaders but exclude the given class loader, then try to load
 the requested class.
MBeanServer
MBeanServerBuilder.
newMBeanServer
(
String
defaultDomain,
MBeanServer
outer,
MBeanServerDelegate
delegate)
This method creates a new MBeanServer implementation object.
static
MBeanServer
MBeanServerFactory.
newMBeanServer
(
String
domain)
Return a new object implementing the MBeanServer interface
 with the specified default domain name, without keeping an
 internal reference to this new object.
static
String
ObjectName.
quote
(
String
s)
Returns a quoted form of the given String, suitable for
 inclusion in an ObjectName.
void
Descriptor.
removeField
(
String
fieldName)
Removes a field from the descriptor.
final void
ImmutableDescriptor.
removeField
(
String
fieldName)
Removes a field from the descriptor.
void
Descriptor.
setField
(
String
fieldName,
Object
fieldValue)
Sets the value for a specific field name.
final void
ImmutableDescriptor.
setField
(
String
fieldName,
Object
fieldValue)
This operation is unsupported since this class is immutable.
void
Descriptor.
setFields
(
String
[] fieldNames,
Object
[] fieldValues)
Sets all fields in the field names array to the new value with
 the same index in the field values array.
final void
ImmutableDescriptor.
setFields
(
String
[] fieldNames,
Object
[] fieldValues)
This operation is unsupported since this class is immutable.
static
String
ObjectName.
unquote
(
String
q)
Returns an unquoted form of the given String.
static
StringValueExp
Query.
value
(
String
val)
Returns a new string expression.
Method parameters in
javax.management
with type arguments of type
String
Modifier and Type
Method
Description
static
ObjectName
ObjectName.
getInstance
(
String
domain,
Hashtable
<
String
,
String
> table)
Return an instance of ObjectName that can be used anywhere
 an object obtained with
new ObjectName(domain, table)
can be used.
static
ObjectName
ObjectName.
getInstance
(
String
domain,
Hashtable
<
String
,
String
> table)
Return an instance of ObjectName that can be used anywhere
 an object obtained with
new ObjectName(domain, table)
can be used.
Constructors in
javax.management
with parameters of type
String
Modifier
Constructor
Description
Attribute
(
String
name,
Object
value)
Constructs an Attribute object which associates the given attribute name with the given value.
AttributeChangeNotification
(
Object
source,
 long sequenceNumber,
 long timeStamp,
String
msg,
String
attributeName,
String
attributeType,
Object
oldValue,
Object
newValue)
Constructs an attribute change notification object.
AttributeNotFoundException
(
String
message)
Constructor that allows a specific error message to be specified.
AttributeValueExp
(
String
attr)
Creates a new
AttributeValueExp
representing the
 specified object attribute, named attr.
BadStringOperationException
(
String
message)
Constructs a
BadStringOperationException
with the specified detail
 message.
ImmutableDescriptor
(
String
... fields)
Construct a descriptor containing the given fields.
ImmutableDescriptor
(
String
[] fieldNames,
Object
[] fieldValues)
Construct a descriptor containing the given fields and values.
InstanceAlreadyExistsException
(
String
message)
Constructor that allows a specific error message to be specified.
InstanceNotFoundException
(
String
message)
Constructor that allows a specific error message to be specified.
IntrospectionException
(
String
message)
Constructor that allows a specific error message to be specified.
InvalidAttributeValueException
(
String
message)
Constructor that allows a specific error message to be specified.
JMException
(
String
msg)
Constructor that allows a specific error message to be specified.
JMRuntimeException
(
String
message)
Constructor that allows a specific error message to be specified.
ListenerNotFoundException
(
String
message)
Constructor that allows a specific error message to be specified.
MalformedObjectNameException
(
String
message)
Constructor that allows a specific error message to be specified.
MBeanAttributeInfo
(
String
name,
String
description,
Method
getter,
Method
setter)
This constructor takes the name of a simple attribute, and Method
 objects for reading and writing the attribute.
MBeanAttributeInfo
(
String
name,
String
type,
String
description,
 boolean isReadable,
 boolean isWritable,
 boolean isIs)
Constructs an
MBeanAttributeInfo
object.
MBeanAttributeInfo
(
String
name,
String
type,
String
description,
 boolean isReadable,
 boolean isWritable,
 boolean isIs,
Descriptor
descriptor)
Constructs an
MBeanAttributeInfo
object.
MBeanConstructorInfo
(
String
description,
Constructor
<?> constructor)
Constructs an
MBeanConstructorInfo
object.
MBeanConstructorInfo
(
String
name,
String
description,
MBeanParameterInfo
[] signature)
Constructs an
MBeanConstructorInfo
object.
MBeanConstructorInfo
(
String
name,
String
description,
MBeanParameterInfo
[] signature,
Descriptor
descriptor)
Constructs an
MBeanConstructorInfo
object.
MBeanException
(
Exception
e,
String
message)
Creates an
MBeanException
that wraps the actual
java.lang.Exception
with
 a detail message.
MBeanFeatureInfo
(
String
name,
String
description)
Constructs an
MBeanFeatureInfo
object.
MBeanFeatureInfo
(
String
name,
String
description,
Descriptor
descriptor)
Constructs an
MBeanFeatureInfo
object.
MBeanInfo
(
String
className,
String
description,
MBeanAttributeInfo
[] attributes,
MBeanConstructorInfo
[] constructors,
MBeanOperationInfo
[] operations,
MBeanNotificationInfo
[] notifications)
Constructs an
MBeanInfo
.
MBeanInfo
(
String
className,
String
description,
MBeanAttributeInfo
[] attributes,
MBeanConstructorInfo
[] constructors,
MBeanOperationInfo
[] operations,
MBeanNotificationInfo
[] notifications,
Descriptor
descriptor)
Constructs an
MBeanInfo
.
MBeanNotificationInfo
(
String
[] notifTypes,
String
name,
String
description)
Constructs an
MBeanNotificationInfo
object.
MBeanNotificationInfo
(
String
[] notifTypes,
String
name,
String
description,
Descriptor
descriptor)
Constructs an
MBeanNotificationInfo
object.
MBeanOperationInfo
(
String
description,
Method
method)
Constructs an
MBeanOperationInfo
object.
MBeanOperationInfo
(
String
name,
String
description,
MBeanParameterInfo
[] signature,
String
type,
 int impact)
Constructs an
MBeanOperationInfo
object.
MBeanOperationInfo
(
String
name,
String
description,
MBeanParameterInfo
[] signature,
String
type,
 int impact,
Descriptor
descriptor)
Constructs an
MBeanOperationInfo
object.
MBeanParameterInfo
(
String
name,
String
type,
String
description)
Constructs an
MBeanParameterInfo
object.
MBeanParameterInfo
(
String
name,
String
type,
String
description,
Descriptor
descriptor)
Constructs an
MBeanParameterInfo
object.
MBeanPermission
(
String
name,
String
actions)
Create a new MBeanPermission object with the specified target name
 and actions.
MBeanPermission
(
String
className,
String
member,
ObjectName
objectName,
String
actions)
Create a new MBeanPermission object with the specified target name
 (class name, member, object name) and actions.
MBeanRegistrationException
(
Exception
e,
String
message)
Creates an
MBeanRegistrationException
that wraps
 the actual
java.lang.Exception
with a detailed
 message.
MBeanServerNotification
(
String
type,
Object
source,
 long sequenceNumber,
ObjectName
objectName)
Creates an MBeanServerNotification object specifying object names of
 the MBeans that caused the notification and the specified notification
 type.
MBeanServerPermission
(
String
name)
Create a new MBeanServerPermission with the given name.
MBeanServerPermission
(
String
name,
String
actions)
Create a new MBeanServerPermission with the given name.
MBeanTrustPermission
(
String
name)
Create a new MBeanTrustPermission with the given name.
MBeanTrustPermission
(
String
name,
String
actions)
Create a new MBeanTrustPermission with the given name.
NotCompliantMBeanException
(
String
message)
Constructor that allows a specific error message to be specified.
Notification
(
String
type,
Object
source,
 long sequenceNumber)
Creates a Notification object.
Notification
(
String
type,
Object
source,
 long sequenceNumber,
 long timeStamp)
Creates a Notification object.
Notification
(
String
type,
Object
source,
 long sequenceNumber,
 long timeStamp,
String
message)
Creates a Notification object.
Notification
(
String
type,
Object
source,
 long sequenceNumber,
String
message)
Creates a Notification object.
ObjectInstance
(
String
objectName,
String
className)
Allows an object instance to be created given a string representation of
 an object name and the full class name, including the package name.
ObjectInstance
(
ObjectName
objectName,
String
className)
Allows an object instance to be created given an object name and
 the full class name, including the package name.
ObjectName
(
String
name)
Construct an object name from the given string.
ObjectName
(
String
domain,
String
key,
String
value)
Construct an object name with exactly one key property.
ObjectName
(
String
domain,
Hashtable
<
String
,
String
> table)
Construct an object name with several key properties from a Hashtable.
OperationsException
(
String
message)
Constructor that allows a specific error message to be specified.
ReflectionException
(
Exception
e,
String
message)
Creates a
ReflectionException
that wraps the actual
java.lang.Exception
with
 a detail message.
RuntimeErrorException
(
Error
e,
String
message)
Constructor that allows a specific error message to be specified.
RuntimeMBeanException
(
RuntimeException
e,
String
message)
Creates a
RuntimeMBeanException
that wraps the actual
java.lang.RuntimeException
with
 a detailed message.
RuntimeOperationsException
(
RuntimeException
e,
String
message)
Creates a
RuntimeOperationsException
that wraps the actual
java.lang.RuntimeException
with a detailed message.
ServiceNotFoundException
(
String
message)
Constructor that allows a specific error message to be specified.
StringValueExp
(
String
val)
Creates a new
StringValueExp
representing the
 given string.
Constructor parameters in
javax.management
with type arguments of type
String
Modifier
Constructor
Description
ImmutableDescriptor
(
Map
<
String
,
?> fields)
Construct a descriptor where the names and values of the fields
 are the keys and values of the given Map.
ObjectName
(
String
domain,
Hashtable
<
String
,
String
> table)
Construct an object name with several key properties from a Hashtable.
ObjectName
(
String
domain,
Hashtable
<
String
,
String
> table)
Construct an object name with several key properties from a Hashtable.
Uses of
String
in
javax.management.loading
Methods in
javax.management.loading
that return
String
Modifier and Type
Method
Description
protected
String
MLet.
findLibrary
(
String
libname)
Deprecated, for removal: This API element is subject to removal in a future version.
Returns the absolute path name of a native library.
String
MLetContent.
getCode
()
Deprecated, for removal: This API element is subject to removal in a future version.
Gets the value of the
CODE
attribute of the
MLET
tag.
String
MLetContent.
getJarFiles
()
Deprecated, for removal: This API element is subject to removal in a future version.
Gets the list of
.jar
files specified by the
ARCHIVE
attribute of the
MLET
tag.
String
MLet.
getLibraryDirectory
()
Deprecated, for removal: This API element is subject to removal in a future version.
Gets the current directory used by the library loader for
 storing native libraries before they are loaded into memory.
String
MLetMBean.
getLibraryDirectory
()
Deprecated, for removal: This API element is subject to removal in a future version.
Gets the current directory used by the library loader for
 storing native libraries before they are loaded into memory.
String
MLetContent.
getName
()
Deprecated, for removal: This API element is subject to removal in a future version.
Gets the value of the
NAME
attribute of the
MLET
tag.
String
MLetContent.
getSerializedObject
()
Deprecated, for removal: This API element is subject to removal in a future version.
Gets the value of the
OBJECT
attribute of the
MLET
tag.
String
MLetContent.
getVersion
()
Deprecated, for removal: This API element is subject to removal in a future version.
Gets the value of the
VERSION
attribute of the
MLET
tag.
Methods in
javax.management.loading
that return types with arguments of type
String
Modifier and Type
Method
Description
Map
<
String
,
String
>
MLetContent.
getAttributes
()
Deprecated, for removal: This API element is subject to removal in a future version.
Gets the attributes of the
MLET
tag.
Map
<
String
,
String
>
MLetContent.
getAttributes
()
Deprecated, for removal: This API element is subject to removal in a future version.
Gets the attributes of the
MLET
tag.
List
<
String
>
MLetContent.
getParameterTypes
()
Deprecated, for removal: This API element is subject to removal in a future version.
Gets the list of values of the
TYPE
attribute in
 each nested <PARAM> tag within the
MLET
tag.
List
<
String
>
MLetContent.
getParameterValues
()
Deprecated, for removal: This API element is subject to removal in a future version.
Gets the list of values of the
VALUE
attribute in
 each nested <PARAM> tag within the
MLET
tag.
Methods in
javax.management.loading
with parameters of type
String
Modifier and Type
Method
Description
void
MLet.
addURL
(
String
url)
Deprecated, for removal: This API element is subject to removal in a future version.
Appends the specified URL to the list of URLs to search for classes and
 resources.
void
MLetMBean.
addURL
(
String
url)
Deprecated, for removal: This API element is subject to removal in a future version.
Appends the specified URL to the list of URLs to search for classes and
 resources.
protected
URL
MLet.
check
(
String
version,
URL
codebase,
String
jarfile,
MLetContent
mlet)
Deprecated, for removal: This API element is subject to removal in a future version.
This method is to be overridden when extending this service to
 support caching and versioning.
protected
Class
<?>
MLet.
findClass
(
String
name)
Deprecated, for removal: This API element is subject to removal in a future version.
This is the main method for class loaders that is being redefined.
protected
String
MLet.
findLibrary
(
String
libname)
Deprecated, for removal: This API element is subject to removal in a future version.
Returns the absolute path name of a native library.
Set
<
Object
>
MLet.
getMBeansFromURL
(
String
url)
Deprecated, for removal: This API element is subject to removal in a future version.
Loads a text file containing MLET tags that define the MBeans to
 be added to the MBean server.
Set
<
Object
>
MLetMBean.
getMBeansFromURL
(
String
url)
Deprecated, for removal: This API element is subject to removal in a future version.
Loads a text file containing MLET tags that define the MBeans
 to be added to the MBean server.
URL
MLetMBean.
getResource
(
String
name)
Deprecated, for removal: This API element is subject to removal in a future version.
Finds the resource with the given name.
InputStream
MLetMBean.
getResourceAsStream
(
String
name)
Deprecated, for removal: This API element is subject to removal in a future version.
Returns an input stream for reading the specified resource.
Enumeration
<
URL
>
MLetMBean.
getResources
(
String
name)
Deprecated, for removal: This API element is subject to removal in a future version.
Finds all the resources with the given name.
Class
<?>
ClassLoaderRepository.
loadClass
(
String
className)
Load the given class name through the list of class loaders.
static
Class
<?>
DefaultLoaderRepository.
loadClass
(
String
className)
Deprecated.
Go through the list of class loaders and try to load the requested
 class.
Class
<?>
MLet.
loadClass
(
String
name,
ClassLoaderRepository
clr)
Deprecated, for removal: This API element is subject to removal in a future version.
Load a class, using the given
ClassLoaderRepository
if
 the class is not found in this MLet's URLs.
Class
<?>
ClassLoaderRepository.
loadClassBefore
(
ClassLoader
stop,
String
className)
Load the given class name through the list of class loaders,
 stopping at the given one.
Class
<?>
ClassLoaderRepository.
loadClassWithout
(
ClassLoader
exclude,
String
className)
Load the given class name through the list of class loaders,
 excluding the given one.
static
Class
<?>
DefaultLoaderRepository.
loadClassWithout
(
ClassLoader
loader,
String
className)
Deprecated.
Go through the list of class loaders but exclude the given
 class loader, then try to load
 the requested class.
void
MLet.
setLibraryDirectory
(
String
libdir)
Deprecated, for removal: This API element is subject to removal in a future version.
Sets the directory used by the library loader for storing
 native libraries before they are loaded into memory.
void
MLetMBean.
setLibraryDirectory
(
String
libdir)
Deprecated, for removal: This API element is subject to removal in a future version.
Sets the directory used by the library loader for storing
 native libraries before they are loaded into memory.
Constructor parameters in
javax.management.loading
with type arguments of type
String
Modifier
Constructor
Description
MLetContent
(
URL
url,
Map
<
String
,
String
> attributes,
List
<
String
> types,
List
<
String
> values)
Deprecated, for removal: This API element is subject to removal in a future version.
Creates an
MLet
instance initialized with attributes read
 from an
MLET
tag in an MLet text file.
MLetContent
(
URL
url,
Map
<
String
,
String
> attributes,
List
<
String
> types,
List
<
String
> values)
Deprecated, for removal: This API element is subject to removal in a future version.
Creates an
MLet
instance initialized with attributes read
 from an
MLET
tag in an MLet text file.
MLetContent
(
URL
url,
Map
<
String
,
String
> attributes,
List
<
String
> types,
List
<
String
> values)
Deprecated, for removal: This API element is subject to removal in a future version.
Creates an
MLet
instance initialized with attributes read
 from an
MLET
tag in an MLet text file.
Uses of
String
in
javax.management.modelmbean
Methods in
javax.management.modelmbean
that return
String
Modifier and Type
Method
Description
String
ModelMBeanInfo.
getClassName
()
Returns the name of the Java class of the MBean described by
 this
MBeanInfo
.
String
ModelMBeanInfo.
getDescription
()
Returns a human readable description of the MBean.
String
[]
DescriptorSupport.
getFieldNames
()
String
[]
DescriptorSupport.
getFields
()
String
DescriptorSupport.
toString
()
Returns a human readable string representing the
 descriptor.
String
ModelMBeanAttributeInfo.
toString
()
Returns a human-readable version of the
 ModelMBeanAttributeInfo instance.
String
ModelMBeanConstructorInfo.
toString
()
Returns a string containing the entire contents of the ModelMBeanConstructorInfo in human readable form.
String
ModelMBeanNotificationInfo.
toString
()
Returns a human readable string containing
 ModelMBeanNotificationInfo.
String
ModelMBeanOperationInfo.
toString
()
Returns a string containing the entire contents of the
 ModelMBeanOperationInfo in human readable form.
String
DescriptorSupport.
toXMLString
()
Returns an XML String representing the descriptor.
Methods in
javax.management.modelmbean
with parameters of type
String
Modifier and Type
Method
Description
void
ModelMBeanNotificationBroadcaster.
addAttributeChangeNotificationListener
(
NotificationListener
listener,
String
attributeName,
Object
handback)
Registers an object which implements the NotificationListener interface as a listener.
void
RequiredModelMBean.
addAttributeChangeNotificationListener
(
NotificationListener
inlistener,
String
inAttributeName,
Object
inhandback)
ModelMBeanAttributeInfo
ModelMBeanInfo.
getAttribute
(
String
inName)
Returns a ModelMBeanAttributeInfo requested by name.
ModelMBeanAttributeInfo
ModelMBeanInfoSupport.
getAttribute
(
String
inName)
Object
RequiredModelMBean.
getAttribute
(
String
attrName)
Returns the value of a specific attribute defined for this
 ModelMBean.
AttributeList
RequiredModelMBean.
getAttributes
(
String
[] attrNames)
Returns the values of several attributes in the ModelMBean.
ModelMBeanConstructorInfo
ModelMBeanInfoSupport.
getConstructor
(
String
inName)
Returns the ModelMBeanConstructorInfo requested by name.
Descriptor
ModelMBeanInfo.
getDescriptor
(
String
inDescriptorName,
String
inDescriptorType)
Returns a Descriptor requested by name and descriptorType.
Descriptor
ModelMBeanInfoSupport.
getDescriptor
(
String
inDescriptorName)
Returns a Descriptor requested by name.
Descriptor
ModelMBeanInfoSupport.
getDescriptor
(
String
inDescriptorName,
String
inDescriptorType)
Descriptor
[]
ModelMBeanInfo.
getDescriptors
(
String
inDescriptorType)
Returns a Descriptor array consisting of all
 Descriptors for the ModelMBeanInfo of type inDescriptorType.
Descriptor
[]
ModelMBeanInfoSupport.
getDescriptors
(
String
inDescriptorType)
Object
DescriptorSupport.
getFieldValue
(
String
fieldName)
Object
[]
DescriptorSupport.
getFieldValues
(
String
... fieldNames)
ModelMBeanNotificationInfo
ModelMBeanInfo.
getNotification
(
String
inName)
Returns a ModelMBeanNotificationInfo requested by name.
ModelMBeanNotificationInfo
ModelMBeanInfoSupport.
getNotification
(
String
inName)
ModelMBeanOperationInfo
ModelMBeanInfo.
getOperation
(
String
inName)
Returns a ModelMBeanOperationInfo requested by name.
ModelMBeanOperationInfo
ModelMBeanInfoSupport.
getOperation
(
String
inName)
Object
RequiredModelMBean.
invoke
(
String
opName,
Object
[] opArgs,
String
[] sig)
Invokes a method on or through a RequiredModelMBean and returns
 the result of the method execution.
void
ModelMBeanNotificationBroadcaster.
removeAttributeChangeNotificationListener
(
NotificationListener
listener,
String
attributeName)
Removes a listener for attributeChangeNotifications from the RequiredModelMBean.
void
RequiredModelMBean.
removeAttributeChangeNotificationListener
(
NotificationListener
inlistener,
String
inAttributeName)
void
DescriptorSupport.
removeField
(
String
fieldName)
void
ModelMBeanNotificationBroadcaster.
sendNotification
(
String
ntfyText)
Sends a Notification which contains the text string that is passed in
 to the registered Notification listeners on the ModelMBean.
void
RequiredModelMBean.
sendNotification
(
String
ntfyText)
void
ModelMBeanInfo.
setDescriptor
(
Descriptor
inDescriptor,
String
inDescriptorType)
Sets descriptors in the info array of type inDescriptorType
 for the ModelMBean.
void
ModelMBeanInfoSupport.
setDescriptor
(
Descriptor
inDescriptor,
String
inDescriptorType)
void
DescriptorSupport.
setField
(
String
fieldName,
Object
fieldValue)
void
DescriptorSupport.
setFields
(
String
[] fieldNames,
Object
[] fieldValues)
void
ModelMBean.
setManagedResource
(
Object
mr,
String
mr_type)
Sets the instance handle of the object against which to
 execute all methods in this ModelMBean management interface
 (MBeanInfo and Descriptors).
void
RequiredModelMBean.
setManagedResource
(
Object
mr,
String
mr_type)
Sets the instance handle of the object against which to
 execute all methods in this ModelMBean management interface
 (MBeanInfo and Descriptors).
Constructors in
javax.management.modelmbean
with parameters of type
String
Modifier
Constructor
Description
DescriptorSupport
(
String
inStr)
Descriptor constructor taking an XML String.
DescriptorSupport
(
String
... fields)
Constructor taking fields in the
fieldName=fieldValue
format.
DescriptorSupport
(
String
[] fieldNames,
Object
[] fieldValues)
Constructor taking field names and field values.
InvalidTargetObjectTypeException
(
Exception
e,
String
s)
Constructor taking an exception and a string.
InvalidTargetObjectTypeException
(
String
s)
Constructor from a string.
ModelMBeanAttributeInfo
(
String
name,
String
description,
Method
getter,
Method
setter)
Constructs a ModelMBeanAttributeInfo object with a default
 descriptor.
ModelMBeanAttributeInfo
(
String
name,
String
description,
Method
getter,
Method
setter,
Descriptor
descriptor)
Constructs a ModelMBeanAttributeInfo object.
ModelMBeanAttributeInfo
(
String
name,
String
type,
String
description,
 boolean isReadable,
 boolean isWritable,
 boolean isIs)
Constructs a ModelMBeanAttributeInfo object with a default descriptor.
ModelMBeanAttributeInfo
(
String
name,
String
type,
String
description,
 boolean isReadable,
 boolean isWritable,
 boolean isIs,
Descriptor
descriptor)
Constructs a ModelMBeanAttributeInfo object.
ModelMBeanConstructorInfo
(
String
description,
Constructor
<?> constructorMethod)
Constructs a ModelMBeanConstructorInfo object with a default
 descriptor.
ModelMBeanConstructorInfo
(
String
description,
Constructor
<?> constructorMethod,
Descriptor
descriptor)
Constructs a ModelMBeanConstructorInfo object.
ModelMBeanConstructorInfo
(
String
name,
String
description,
MBeanParameterInfo
[] signature)
Constructs a ModelMBeanConstructorInfo object with a default descriptor.
ModelMBeanConstructorInfo
(
String
name,
String
description,
MBeanParameterInfo
[] signature,
Descriptor
descriptor)
Constructs a ModelMBeanConstructorInfo object.
ModelMBeanInfoSupport
(
String
className,
String
description,
ModelMBeanAttributeInfo
[] attributes,
ModelMBeanConstructorInfo
[] constructors,
ModelMBeanOperationInfo
[] operations,
ModelMBeanNotificationInfo
[] notifications)
Creates a ModelMBeanInfoSupport with the provided information,
 but the descriptor is a default.
ModelMBeanInfoSupport
(
String
className,
String
description,
ModelMBeanAttributeInfo
[] attributes,
ModelMBeanConstructorInfo
[] constructors,
ModelMBeanOperationInfo
[] operations,
ModelMBeanNotificationInfo
[] notifications,
Descriptor
mbeandescriptor)
Creates a ModelMBeanInfoSupport with the provided information
 and the descriptor given in parameter.
ModelMBeanNotificationInfo
(
String
[] notifTypes,
String
name,
String
description)
Constructs a ModelMBeanNotificationInfo object with a default
 descriptor.
ModelMBeanNotificationInfo
(
String
[] notifTypes,
String
name,
String
description,
Descriptor
descriptor)
Constructs a ModelMBeanNotificationInfo object.
ModelMBeanOperationInfo
(
String
description,
Method
operationMethod)
Constructs a ModelMBeanOperationInfo object with a default
 descriptor.
ModelMBeanOperationInfo
(
String
description,
Method
operationMethod,
Descriptor
descriptor)
Constructs a ModelMBeanOperationInfo object.
ModelMBeanOperationInfo
(
String
name,
String
description,
MBeanParameterInfo
[] signature,
String
type,
 int impact)
Constructs a ModelMBeanOperationInfo object with a default descriptor.
ModelMBeanOperationInfo
(
String
name,
String
description,
MBeanParameterInfo
[] signature,
String
type,
 int impact,
Descriptor
descriptor)
Constructs a ModelMBeanOperationInfo object.
XMLParseException
(
Exception
e,
String
s)
Constructor taking a string and an exception.
XMLParseException
(
String
s)
Constructor taking a string.
Uses of
String
in
javax.management.monitor
Fields in
javax.management.monitor
declared as
String
Modifier and Type
Field
Description
protected
String
Monitor.
dbgTag
Deprecated.
No replacement.
static final
String
MonitorNotification.
OBSERVED_ATTRIBUTE_ERROR
Notification type denoting that the observed attribute is not contained in the observed object.
static final
String
MonitorNotification.
OBSERVED_ATTRIBUTE_TYPE_ERROR
Notification type denoting that the type of the observed attribute is not correct.
static final
String
MonitorNotification.
OBSERVED_OBJECT_ERROR
Notification type denoting that the observed object is not registered in the MBean server.
static final
String
MonitorNotification.
RUNTIME_ERROR
Notification type denoting that a non-predefined error type has occurred when trying to get the value of the observed attribute.
static final
String
MonitorNotification.
STRING_TO_COMPARE_VALUE_DIFFERED
Notification type denoting that the observed attribute has differed from the "string to compare" value.
static final
String
MonitorNotification.
STRING_TO_COMPARE_VALUE_MATCHED
Notification type denoting that the observed attribute has matched the "string to compare" value.
static final
String
MonitorNotification.
THRESHOLD_ERROR
Notification type denoting that the type of the thresholds, offset or modulus is not correct.
static final
String
MonitorNotification.
THRESHOLD_HIGH_VALUE_EXCEEDED
Notification type denoting that the observed attribute has exceeded the threshold high value.
static final
String
MonitorNotification.
THRESHOLD_LOW_VALUE_EXCEEDED
Notification type denoting that the observed attribute has exceeded the threshold low value.
static final
String
MonitorNotification.
THRESHOLD_VALUE_EXCEEDED
Notification type denoting that the observed attribute has reached the threshold value.
Methods in
javax.management.monitor
that return
String
Modifier and Type
Method
Description
String
StringMonitor.
getDerivedGauge
()
Deprecated.
As of JMX 1.2, replaced by
StringMonitor.getDerivedGauge(ObjectName)
String
StringMonitor.
getDerivedGauge
(
ObjectName
object)
Gets the derived gauge of the specified object, if this object is
 contained in the set of observed MBeans, or
null
otherwise.
String
StringMonitorMBean.
getDerivedGauge
()
Deprecated.
As of JMX 1.2, replaced by
StringMonitorMBean.getDerivedGauge(ObjectName)
String
StringMonitorMBean.
getDerivedGauge
(
ObjectName
object)
Gets the derived gauge for the specified MBean.
String
Monitor.
getObservedAttribute
()
Gets the attribute being observed.
String
MonitorMBean.
getObservedAttribute
()
Gets the attribute being observed.
String
MonitorNotification.
getObservedAttribute
()
Gets the observed attribute of this monitor notification.
String
StringMonitor.
getStringToCompare
()
Gets the string to compare with the observed attribute common
 to all observed MBeans.
String
StringMonitorMBean.
getStringToCompare
()
Gets the string to compare with the observed attribute.
Methods in
javax.management.monitor
with parameters of type
String
Modifier and Type
Method
Description
void
Monitor.
setObservedAttribute
(
String
attribute)
Sets the attribute to observe.
void
MonitorMBean.
setObservedAttribute
(
String
attribute)
Sets the attribute to observe.
void
StringMonitor.
setStringToCompare
(
String
value)
Sets the string to compare with the observed attribute common
 to all observed MBeans.
void
StringMonitorMBean.
setStringToCompare
(
String
value)
Sets the string to compare with the observed attribute.
Constructors in
javax.management.monitor
with parameters of type
String
Modifier
Constructor
Description
MonitorSettingException
(
String
message)
Constructor that allows an error message to be specified.
Uses of
String
in
javax.management.openmbean
Fields in
javax.management.openmbean
declared as
String
Modifier and Type
Field
Description
static final
String
[]
OpenType.
ALLOWED_CLASSNAMES
Deprecated.
Use
ALLOWED_CLASSNAMES_LIST
instead.
Fields in
javax.management.openmbean
with type parameters of type
String
Modifier and Type
Field
Description
static final
List
<
String
>
OpenType.
ALLOWED_CLASSNAMES_LIST
List of the fully qualified names of the Java classes allowed for open
 data values.
static final
SimpleType
<
String
>
SimpleType.
STRING
The
SimpleType
instance describing values whose
 Java class name is
java.lang.String
.
Methods in
javax.management.openmbean
that return
String
Modifier and Type
Method
Description
String
OpenMBeanInfo.
getClassName
()
Returns the fully qualified Java class name of the open MBean
 instances this
OpenMBeanInfo
describes.
String
OpenType.
getClassName
()
Returns the fully qualified Java class name of the open data values
 this open type describes.
String
CompositeType.
getDescription
(
String
itemName)
Returns the description of the item whose name is
itemName
,
 or
null
if this
CompositeType
instance does not define any item
 whose name is
itemName
.
String
OpenMBeanConstructorInfo.
getDescription
()
Returns a human readable description of the constructor
 described by this
OpenMBeanConstructorInfo
instance.
String
OpenMBeanInfo.
getDescription
()
Returns a human readable description of the type of open MBean
 instances this
OpenMBeanInfo
describes.
String
OpenMBeanOperationInfo.
getDescription
()
Returns a human readable description of the operation
 described by this
OpenMBeanOperationInfo
instance.
String
OpenMBeanParameterInfo.
getDescription
()
Returns a human readable description of the parameter
 described by this
OpenMBeanParameterInfo
instance.
String
OpenType.
getDescription
()
Returns the text description of this
OpenType
instance.
String
OpenMBeanConstructorInfo.
getName
()
Returns the name of the constructor
 described by this
OpenMBeanConstructorInfo
instance.
String
OpenMBeanOperationInfo.
getName
()
Returns the name of the operation
 described by this
OpenMBeanOperationInfo
instance.
String
OpenMBeanParameterInfo.
getName
()
Returns the name of the parameter
 described by this
OpenMBeanParameterInfo
instance.
String
OpenMBeanOperationInfo.
getReturnType
()
Returns the fully qualified Java class name of the values
 returned by the operation described by this
OpenMBeanOperationInfo
instance.
String
OpenType.
getTypeName
()
Returns the name of this
OpenType
instance.
String
ArrayType.
toString
()
Returns a string representation of this
ArrayType
instance.
String
CompositeData.
toString
()
Returns a string representation of this
CompositeData
instance.
String
CompositeDataSupport.
toString
()
Returns a string representation of this
CompositeDataSupport
instance.
String
CompositeType.
toString
()
Returns a string representation of this
CompositeType
instance.
String
OpenMBeanAttributeInfo.
toString
()
Returns a string representation of this
OpenMBeanAttributeInfo
instance.
String
OpenMBeanAttributeInfoSupport.
toString
()
Returns a string representation of this
OpenMBeanAttributeInfoSupport
instance.
String
OpenMBeanConstructorInfo.
toString
()
Returns a string representation of this
OpenMBeanConstructorInfo
instance.
String
OpenMBeanConstructorInfoSupport.
toString
()
Returns a string representation of this
OpenMBeanConstructorInfoSupport
instance.
String
OpenMBeanInfo.
toString
()
Returns a string representation of this
OpenMBeanInfo
instance.
String
OpenMBeanInfoSupport.
toString
()
Returns a string representation of this
OpenMBeanInfoSupport
instance.
String
OpenMBeanOperationInfo.
toString
()
Returns a string representation of this
OpenMBeanOperationInfo
instance.
String
OpenMBeanOperationInfoSupport.
toString
()
Returns a string representation of this
OpenMBeanOperationInfoSupport
instance.
String
OpenMBeanParameterInfo.
toString
()
Returns a string representation of this
OpenMBeanParameterInfo
instance.
String
OpenMBeanParameterInfoSupport.
toString
()
Returns a string representation of this
OpenMBeanParameterInfoSupport
instance.
abstract
String
OpenType.
toString
()
Returns a string representation of this open type instance.
String
SimpleType.
toString
()
Returns a string representation of this
SimpleType
instance.
String
TabularData.
toString
()
Returns a string representation of this
TabularData
instance.
String
TabularDataSupport.
toString
()
Returns a string representation of this
TabularDataSupport
instance.
String
TabularType.
toString
()
Returns a string representation of this
TabularType
instance.
Methods in
javax.management.openmbean
that return types with arguments of type
String
Modifier and Type
Method
Description
List
<
String
>
TabularType.
getIndexNames
()
Returns, in the same order as was given to this instance's
 constructor, an unmodifiable List of the names of the items the
 values of which are used to uniquely index each row element of
 tabular data values described by this
TabularType
instance.
Set
<
String
>
CompositeType.
keySet
()
Returns an unmodifiable Set view of all the item names defined by this
CompositeType
instance.
Methods in
javax.management.openmbean
with parameters of type
String
Modifier and Type
Method
Description
boolean
CompositeData.
containsKey
(
String
key)
Returns
true
if and only if this
CompositeData
instance contains
 an item whose name is
key
.
boolean
CompositeDataSupport.
containsKey
(
String
key)
Returns
true
if and only if this
CompositeData
instance contains
 an item whose name is
key
.
boolean
CompositeType.
containsKey
(
String
itemName)
Returns
true
if this
CompositeType
instance defines an item
 whose name is
itemName
.
Object
CompositeData.
get
(
String
key)
Returns the value of the item whose name is
key
.
Object
CompositeDataSupport.
get
(
String
key)
Returns the value of the item whose name is
key
.
Object
[]
CompositeData.
getAll
(
String
[] keys)
Returns an array of the values of the items whose names
 are specified by
keys
, in the same order as
keys
.
Object
[]
CompositeDataSupport.
getAll
(
String
[] keys)
Returns an array of the values of the items whose names are specified by
keys
, in the same order as
keys
.
String
CompositeType.
getDescription
(
String
itemName)
Returns the description of the item whose name is
itemName
,
 or
null
if this
CompositeType
instance does not define any item
 whose name is
itemName
.
OpenType
<?>
CompositeType.
getType
(
String
itemName)
Returns the
open type
of the item whose name is
itemName
,
 or
null
if this
CompositeType
instance does not define any item
 whose name is
itemName
.
Constructors in
javax.management.openmbean
with parameters of type
String
Modifier
Constructor
Description
CompositeDataSupport
(
CompositeType
compositeType,
String
[] itemNames,
Object
[] itemValues)
Constructs a
CompositeDataSupport
instance with the specified
compositeType
, whose item values
 are specified by
itemValues[]
, in the same order as in
itemNames[]
.
CompositeType
(
String
typeName,
String
description,
String
[] itemNames,
String
[] itemDescriptions,
OpenType
<?>[] itemTypes)
Constructs a
CompositeType
instance, checking for the validity of the given parameters.
InvalidKeyException
(
String
msg)
An InvalidKeyException with a detail message.
InvalidOpenTypeException
(
String
msg)
An InvalidOpenTypeException with a detail message.
KeyAlreadyExistsException
(
String
msg)
A KeyAlreadyExistsException with a detail message.
OpenDataException
(
String
msg)
An OpenDataException with a detail message.
OpenMBeanAttributeInfoSupport
(
String
name,
String
description,
OpenType
<?> openType,
 boolean isReadable,
 boolean isWritable,
 boolean isIs)
Constructs an
OpenMBeanAttributeInfoSupport
instance,
 which describes the attribute of an open MBean with the
 specified
name
,
openType
and
description
, and the specified read/write access properties.
OpenMBeanAttributeInfoSupport
(
String
name,
String
description,
OpenType
<?> openType,
 boolean isReadable,
 boolean isWritable,
 boolean isIs,
Descriptor
descriptor)
Constructs an
OpenMBeanAttributeInfoSupport
instance,
 which describes the attribute of an open MBean with the
 specified
name
,
openType
,
description
, read/write access properties, and
Descriptor
.
OpenMBeanAttributeInfoSupport
(
String
name,
String
description,
OpenType
<T> openType,
 boolean isReadable,
 boolean isWritable,
 boolean isIs,
 T defaultValue)
Constructs an
OpenMBeanAttributeInfoSupport
instance,
 which describes the attribute of an open MBean with the
 specified
name
,
openType
,
description
and
defaultValue
, and the specified read/write access
 properties.
OpenMBeanAttributeInfoSupport
(
String
name,
String
description,
OpenType
<T> openType,
 boolean isReadable,
 boolean isWritable,
 boolean isIs,
 T defaultValue,
Comparable
<T> minValue,
Comparable
<T> maxValue)
Constructs an
OpenMBeanAttributeInfoSupport
instance,
 which describes the attribute of an open MBean, with the
 specified
name
,
openType
,
description
,
defaultValue
,
minValue
and
maxValue
.
OpenMBeanAttributeInfoSupport
(
String
name,
String
description,
OpenType
<T> openType,
 boolean isReadable,
 boolean isWritable,
 boolean isIs,
 T defaultValue,
 T[] legalValues)
Constructs an
OpenMBeanAttributeInfoSupport
instance,
 which describes the attribute of an open MBean with the
 specified
name
,
openType
,
description
,
defaultValue
and
legalValues
, and the specified
 read/write access properties.
OpenMBeanConstructorInfoSupport
(
String
name,
String
description,
OpenMBeanParameterInfo
[] signature)
Constructs an
OpenMBeanConstructorInfoSupport
instance, which describes the constructor of a class of open
 MBeans with the specified
name
,
description
and
signature
.
OpenMBeanConstructorInfoSupport
(
String
name,
String
description,
OpenMBeanParameterInfo
[] signature,
Descriptor
descriptor)
Constructs an
OpenMBeanConstructorInfoSupport
instance, which describes the constructor of a class of open
 MBeans with the specified
name
,
description
,
signature
, and
descriptor
.
OpenMBeanInfoSupport
(
String
className,
String
description,
OpenMBeanAttributeInfo
[] openAttributes,
OpenMBeanConstructorInfo
[] openConstructors,
OpenMBeanOperationInfo
[] openOperations,
MBeanNotificationInfo
[] notifications)
Constructs an
OpenMBeanInfoSupport
instance, which
 describes a class of open MBeans with the specified
className
,
description
,
openAttributes
,
openConstructors
,
openOperations
and
notifications
.
OpenMBeanInfoSupport
(
String
className,
String
description,
OpenMBeanAttributeInfo
[] openAttributes,
OpenMBeanConstructorInfo
[] openConstructors,
OpenMBeanOperationInfo
[] openOperations,
MBeanNotificationInfo
[] notifications,
Descriptor
descriptor)
Constructs an
OpenMBeanInfoSupport
instance, which
 describes a class of open MBeans with the specified
className
,
description
,
openAttributes
,
openConstructors
,
openOperations
,
notifications
, and
descriptor
.
OpenMBeanOperationInfoSupport
(
String
name,
String
description,
OpenMBeanParameterInfo
[] signature,
OpenType
<?> returnOpenType,
 int impact)
Constructs an
OpenMBeanOperationInfoSupport
instance, which describes the operation of a class of open
 MBeans, with the specified
name
,
description
,
signature
,
returnOpenType
and
impact
.
OpenMBeanOperationInfoSupport
(
String
name,
String
description,
OpenMBeanParameterInfo
[] signature,
OpenType
<?> returnOpenType,
 int impact,
Descriptor
descriptor)
Constructs an
OpenMBeanOperationInfoSupport
instance, which describes the operation of a class of open
 MBeans, with the specified
name
,
description
,
signature
,
returnOpenType
,
impact
, and
descriptor
.
OpenMBeanParameterInfoSupport
(
String
name,
String
description,
OpenType
<?> openType)
Constructs an
OpenMBeanParameterInfoSupport
instance,
 which describes the parameter used in one or more operations or
 constructors of a class of open MBeans, with the specified
name
,
openType
and
description
.
OpenMBeanParameterInfoSupport
(
String
name,
String
description,
OpenType
<?> openType,
Descriptor
descriptor)
Constructs an
OpenMBeanParameterInfoSupport
instance,
 which describes the parameter used in one or more operations or
 constructors of a class of open MBeans, with the specified
name
,
openType
,
description
,
 and
descriptor
.
OpenMBeanParameterInfoSupport
(
String
name,
String
description,
OpenType
<T> openType,
 T defaultValue)
Constructs an
OpenMBeanParameterInfoSupport
instance,
 which describes the parameter used in one or more operations or
 constructors of a class of open MBeans, with the specified
name
,
openType
,
description
and
defaultValue
.
OpenMBeanParameterInfoSupport
(
String
name,
String
description,
OpenType
<T> openType,
 T defaultValue,
Comparable
<T> minValue,
Comparable
<T> maxValue)
Constructs an
OpenMBeanParameterInfoSupport
instance,
 which describes the parameter used in one or more operations or
 constructors of a class of open MBeans, with the specified
name
,
openType
,
description
,
defaultValue
,
minValue
and
maxValue
.
OpenMBeanParameterInfoSupport
(
String
name,
String
description,
OpenType
<T> openType,
 T defaultValue,
 T[] legalValues)
Constructs an
OpenMBeanParameterInfoSupport
instance,
 which describes the parameter used in one or more operations or
 constructors of a class of open MBeans, with the specified
name
,
openType
,
description
,
defaultValue
and
legalValues
.
protected
OpenType
(
String
className,
String
typeName,
String
description)
Constructs an
OpenType
instance (actually a subclass instance as
OpenType
is abstract),
 checking for the validity of the given parameters.
TabularType
(
String
typeName,
String
description,
CompositeType
rowType,
String
[] indexNames)
Constructs a
TabularType
instance, checking for the validity of the given parameters.
Constructor parameters in
javax.management.openmbean
with type arguments of type
String
Modifier
Constructor
Description
CompositeDataSupport
(
CompositeType
compositeType,
Map
<
String
,
?> items)
Constructs a
CompositeDataSupport
instance with the specified
compositeType
,
 whose item names and corresponding values
 are given by the mappings in the map
items
.
Uses of
String
in
javax.management.relation
Fields in
javax.management.relation
declared as
String
Modifier and Type
Field
Description
static final
String
RelationNotification.
RELATION_BASIC_CREATION
Type for the creation of an internal relation.
static final
String
RelationNotification.
RELATION_BASIC_REMOVAL
Type for the removal from the Relation Service of an internal relation.
static final
String
RelationNotification.
RELATION_BASIC_UPDATE
Type for an update of an internal relation.
static final
String
RelationNotification.
RELATION_MBEAN_CREATION
Type for the relation MBean added into the Relation Service.
static final
String
RelationNotification.
RELATION_MBEAN_REMOVAL
Type for the removal from the Relation Service of a relation MBean.
static final
String
RelationNotification.
RELATION_MBEAN_UPDATE
Type for the update of a relation MBean.
Methods in
javax.management.relation
that return
String
Modifier and Type
Method
Description
String
RoleInfo.
getDescription
()
Returns description text for the role.
String
RoleInfo.
getName
()
Returns the name of the role.
String
RoleInfo.
getRefMBeanClassName
()
Returns name of type of MBean expected to be referenced in
 corresponding role.
String
Relation.
getRelationId
()
Returns relation identifier (used to uniquely identify the relation
 inside the Relation Service).
String
RelationNotification.
getRelationId
()
Returns the relation identifier of created/removed/updated relation.
String
RelationSupport.
getRelationId
()
Returns relation identifier (used to uniquely identify the relation
 inside the Relation Service).
String
Relation.
getRelationTypeName
()
Returns name of associated relation type.
String
RelationNotification.
getRelationTypeName
()
Returns the relation type name of created/removed/updated relation.
String
RelationService.
getRelationTypeName
(
String
relationId)
Returns name of associated relation type for given relation.
String
RelationServiceMBean.
getRelationTypeName
(
String
relationId)
Returns name of associated relation type for given relation.
String
RelationSupport.
getRelationTypeName
()
Returns name of associated relation type.
String
RelationType.
getRelationTypeName
()
Returns the relation type name.
String
RelationTypeSupport.
getRelationTypeName
()
Returns the relation type name.
String
RelationNotification.
getRoleName
()
Returns name of updated role of updated relation (only for role update).
String
Role.
getRoleName
()
Retrieves role name.
String
RoleUnresolved.
getRoleName
()
Retrieves role name.
String
RelationService.
isRelation
(
ObjectName
objectName)
Returns the relation id associated to the given ObjectName if the
 MBean has been added as a relation in the Relation Service.
String
RelationServiceMBean.
isRelation
(
ObjectName
objectName)
Returns the relation id associated to the given ObjectName if the
 MBean has been added as a relation in the Relation Service.
static
String
Role.
roleValueToString
(
List
<
ObjectName
> roleValue)
Returns a string for the given role value.
String
Role.
toString
()
Returns a string describing the role.
String
RoleInfo.
toString
()
Returns a string describing the role info.
String
RoleUnresolved.
toString
()
Return a string describing this object.
Methods in
javax.management.relation
that return types with arguments of type
String
Modifier and Type
Method
Description
Map
<
ObjectName
,
List
<
String
>>
RelationService.
findAssociatedMBeans
(
ObjectName
mbeanName,
String
relationTypeName,
String
roleName)
Retrieves the MBeans associated to given one in a relation.
Map
<
ObjectName
,
List
<
String
>>
RelationServiceMBean.
findAssociatedMBeans
(
ObjectName
mbeanName,
String
relationTypeName,
String
roleName)
Retrieves the MBeans associated to given one in a relation.
Map
<
String
,
List
<
String
>>
RelationService.
findReferencingRelations
(
ObjectName
mbeanName,
String
relationTypeName,
String
roleName)
Retrieves the relations where a given MBean is referenced.
Map
<
String
,
List
<
String
>>
RelationService.
findReferencingRelations
(
ObjectName
mbeanName,
String
relationTypeName,
String
roleName)
Retrieves the relations where a given MBean is referenced.
Map
<
String
,
List
<
String
>>
RelationServiceMBean.
findReferencingRelations
(
ObjectName
mbeanName,
String
relationTypeName,
String
roleName)
Retrieves the relations where a given MBean is referenced.
Map
<
String
,
List
<
String
>>
RelationServiceMBean.
findReferencingRelations
(
ObjectName
mbeanName,
String
relationTypeName,
String
roleName)
Retrieves the relations where a given MBean is referenced.
List
<
String
>
RelationService.
findRelationsOfType
(
String
relationTypeName)
Returns the relation ids for relations of the given type.
List
<
String
>
RelationServiceMBean.
findRelationsOfType
(
String
relationTypeName)
Returns the relation ids for relations of the given type.
List
<
String
>
RelationService.
getAllRelationIds
()
Returns all the relation ids for all the relations handled by the
 Relation Service.
List
<
String
>
RelationServiceMBean.
getAllRelationIds
()
Returns all the relation ids for all the relations handled by the
 Relation Service.
List
<
String
>
RelationService.
getAllRelationTypeNames
()
Retrieves names of all known relation types.
List
<
String
>
RelationServiceMBean.
getAllRelationTypeNames
()
Retrieves names of all known relation types.
Map
<
ObjectName
,
List
<
String
>>
Relation.
getReferencedMBeans
()
Retrieves MBeans referenced in the various roles of the relation.
Map
<
ObjectName
,
List
<
String
>>
RelationService.
getReferencedMBeans
(
String
relationId)
Retrieves MBeans referenced in the various roles of the relation.
Map
<
ObjectName
,
List
<
String
>>
RelationServiceMBean.
getReferencedMBeans
(
String
relationId)
Retrieves MBeans referenced in the various roles of the relation.
Map
<
ObjectName
,
List
<
String
>>
RelationSupport.
getReferencedMBeans
()
Retrieves MBeans referenced in the various roles of the relation.
Methods in
javax.management.relation
with parameters of type
String
Modifier and Type
Method
Description
Integer
RelationService.
checkRoleReading
(
String
roleName,
String
relationTypeName)
Checks if given Role can be read in a relation of the given type.
Integer
RelationServiceMBean.
checkRoleReading
(
String
roleName,
String
relationTypeName)
Checks if given Role can be read in a relation of the given type.
Integer
RelationService.
checkRoleWriting
(
Role
role,
String
relationTypeName,
Boolean
initFlag)
Checks if given Role can be set in a relation of given type.
Integer
RelationServiceMBean.
checkRoleWriting
(
Role
role,
String
relationTypeName,
Boolean
initFlag)
Checks if given Role can be set in a relation of given type.
void
RelationService.
createRelation
(
String
relationId,
String
relationTypeName,
RoleList
roleList)
Creates a simple relation (represented by a RelationSupport object) of
 given relation type, and adds it in the Relation Service.
void
RelationServiceMBean.
createRelation
(
String
relationId,
String
relationTypeName,
RoleList
roleList)
Creates a simple relation (represented by a RelationSupport object) of
 given relation type, and adds it in the Relation Service.
void
RelationService.
createRelationType
(
String
relationTypeName,
RoleInfo
[] roleInfoArray)
Creates a relation type (a RelationTypeSupport object) with given
 role infos (provided by the RoleInfo objects), and adds it in the
 Relation Service.
void
RelationServiceMBean.
createRelationType
(
String
relationTypeName,
RoleInfo
[] roleInfoArray)
Creates a relation type (RelationTypeSupport object) with given
 role infos (provided by the RoleInfo objects), and adds it in the
 Relation Service.
Map
<
ObjectName
,
List
<
String
>>
RelationService.
findAssociatedMBeans
(
ObjectName
mbeanName,
String
relationTypeName,
String
roleName)
Retrieves the MBeans associated to given one in a relation.
Map
<
ObjectName
,
List
<
String
>>
RelationServiceMBean.
findAssociatedMBeans
(
ObjectName
mbeanName,
String
relationTypeName,
String
roleName)
Retrieves the MBeans associated to given one in a relation.
Map
<
String
,
List
<
String
>>
RelationService.
findReferencingRelations
(
ObjectName
mbeanName,
String
relationTypeName,
String
roleName)
Retrieves the relations where a given MBean is referenced.
Map
<
String
,
List
<
String
>>
RelationServiceMBean.
findReferencingRelations
(
ObjectName
mbeanName,
String
relationTypeName,
String
roleName)
Retrieves the relations where a given MBean is referenced.
List
<
String
>
RelationService.
findRelationsOfType
(
String
relationTypeName)
Returns the relation ids for relations of the given type.
List
<
String
>
RelationServiceMBean.
findRelationsOfType
(
String
relationTypeName)
Returns the relation ids for relations of the given type.
RoleResult
RelationService.
getAllRoles
(
String
relationId)
Returns all roles present in the relation.
RoleResult
RelationServiceMBean.
getAllRoles
(
String
relationId)
Returns all roles present in the relation.
Map
<
ObjectName
,
List
<
String
>>
RelationService.
getReferencedMBeans
(
String
relationId)
Retrieves MBeans referenced in the various roles of the relation.
Map
<
ObjectName
,
List
<
String
>>
RelationServiceMBean.
getReferencedMBeans
(
String
relationId)
Retrieves MBeans referenced in the various roles of the relation.
String
RelationService.
getRelationTypeName
(
String
relationId)
Returns name of associated relation type for given relation.
String
RelationServiceMBean.
getRelationTypeName
(
String
relationId)
Returns name of associated relation type for given relation.
List
<
ObjectName
>
Relation.
getRole
(
String
roleName)
Retrieves role value for given role name.
List
<
ObjectName
>
RelationService.
getRole
(
String
relationId,
String
roleName)
Retrieves role value for given role name in given relation.
List
<
ObjectName
>
RelationServiceMBean.
getRole
(
String
relationId,
String
roleName)
Retrieves role value for given role name in given relation.
List
<
ObjectName
>
RelationSupport.
getRole
(
String
roleName)
Retrieves role value for given role name.
Integer
Relation.
getRoleCardinality
(
String
roleName)
Returns the number of MBeans currently referenced in the given role.
Integer
RelationService.
getRoleCardinality
(
String
relationId,
String
roleName)
Retrieves the number of MBeans currently referenced in the given role.
Integer
RelationServiceMBean.
getRoleCardinality
(
String
relationId,
String
roleName)
Retrieves the number of MBeans currently referenced in the
 given role.
Integer
RelationSupport.
getRoleCardinality
(
String
roleName)
Returns the number of MBeans currently referenced in the given role.
RoleInfo
RelationService.
getRoleInfo
(
String
relationTypeName,
String
roleInfoName)
Retrieves role info for given role name of a given relation type.
RoleInfo
RelationServiceMBean.
getRoleInfo
(
String
relationTypeName,
String
roleInfoName)
Retrieves role info for given role of a given relation type.
RoleInfo
RelationType.
getRoleInfo
(
String
roleInfoName)
Returns the role info (RoleInfo object) for the given role info name
 (null if not found).
RoleInfo
RelationTypeSupport.
getRoleInfo
(
String
roleInfoName)
Returns the role info (RoleInfo object) for the given role info name
 (null if not found).
List
<
RoleInfo
>
RelationService.
getRoleInfos
(
String
relationTypeName)
Retrieves list of role infos (RoleInfo objects) of a given relation
 type.
List
<
RoleInfo
>
RelationServiceMBean.
getRoleInfos
(
String
relationTypeName)
Retrieves list of role infos (RoleInfo objects) of a given relation
 type.
RoleResult
Relation.
getRoles
(
String
[] roleNameArray)
Retrieves values of roles with given names.
RoleResult
RelationService.
getRoles
(
String
relationId,
String
[] roleNameArray)
Retrieves values of roles with given names in given relation.
RoleResult
RelationServiceMBean.
getRoles
(
String
relationId,
String
[] roleNameArray)
Retrieves values of roles with given names in given relation.
RoleResult
RelationSupport.
getRoles
(
String
[] roleNameArray)
Retrieves values of roles with given names.
void
Relation.
handleMBeanUnregistration
(
ObjectName
objectName,
String
roleName)
Callback used by the Relation Service when a MBean referenced in a role
 is unregistered.
void
RelationSupport.
handleMBeanUnregistration
(
ObjectName
objectName,
String
roleName)
Callback used by the Relation Service when a MBean referenced in a role
 is unregistered.
Boolean
RelationService.
hasRelation
(
String
relationId)
Checks if there is a relation identified in Relation Service with given
 relation id.
Boolean
RelationServiceMBean.
hasRelation
(
String
relationId)
Checks if there is a relation identified in Relation Service with given
 relation id.
ObjectName
RelationService.
isRelationMBean
(
String
relationId)
If the relation is represented by an MBean (created by the user and
 added as a relation in the Relation Service), returns the ObjectName of
 the MBean.
ObjectName
RelationServiceMBean.
isRelationMBean
(
String
relationId)
If the relation is represented by an MBean (created by the user and
 added as a relation in the Relation Service), returns the ObjectName of
 the MBean.
void
RelationService.
removeRelation
(
String
relationId)
Removes given relation from the Relation Service.
void
RelationServiceMBean.
removeRelation
(
String
relationId)
Removes given relation from the Relation Service.
void
RelationService.
removeRelationType
(
String
relationTypeName)
Removes given relation type from Relation Service.
void
RelationServiceMBean.
removeRelationType
(
String
relationTypeName)
Removes given relation type from Relation Service.
void
RelationService.
sendRelationCreationNotification
(
String
relationId)
Sends a notification (RelationNotification) for a relation creation.
void
RelationServiceMBean.
sendRelationCreationNotification
(
String
relationId)
Sends a notification (RelationNotification) for a relation creation.
void
RelationService.
sendRelationRemovalNotification
(
String
relationId,
List
<
ObjectName
> unregMBeanList)
Sends a notification (RelationNotification) for a relation removal.
void
RelationServiceMBean.
sendRelationRemovalNotification
(
String
relationId,
List
<
ObjectName
> unregMBeanList)
Sends a notification (RelationNotification) for a relation removal.
void
RelationService.
sendRoleUpdateNotification
(
String
relationId,
Role
newRole,
List
<
ObjectName
> oldValue)
Sends a notification (RelationNotification) for a role update in the
 given relation.
void
RelationServiceMBean.
sendRoleUpdateNotification
(
String
relationId,
Role
newRole,
List
<
ObjectName
> oldRoleValue)
Sends a notification (RelationNotification) for a role update in the
 given relation.
void
RelationService.
setRole
(
String
relationId,
Role
role)
Sets the given role in given relation.
void
RelationServiceMBean.
setRole
(
String
relationId,
Role
role)
Sets the given role in given relation.
void
Role.
setRoleName
(
String
roleName)
Sets role name.
void
RoleUnresolved.
setRoleName
(
String
name)
Sets role name.
RoleResult
RelationService.
setRoles
(
String
relationId,
RoleList
roleList)
Sets the given roles in given relation.
RoleResult
RelationServiceMBean.
setRoles
(
String
relationId,
RoleList
roleList)
Sets the given roles in given relation.
void
RelationService.
updateRoleMap
(
String
relationId,
Role
newRole,
List
<
ObjectName
> oldValue)
Handles update of the Relation Service role map for the update of given
 role in given relation.
void
RelationServiceMBean.
updateRoleMap
(
String
relationId,
Role
newRole,
List
<
ObjectName
> oldRoleValue)
Handles update of the Relation Service role map for the update of given
 role in given relation.
Constructors in
javax.management.relation
with parameters of type
String
Modifier
Constructor
Description
InvalidRelationIdException
(
String
message)
Constructor with given message put in exception.
InvalidRelationServiceException
(
String
message)
Constructor with given message put in exception.
InvalidRelationTypeException
(
String
message)
Constructor with given message put in exception.
InvalidRoleInfoException
(
String
message)
Constructor with given message put in exception.
InvalidRoleValueException
(
String
message)
Constructor with given message put in exception.
RelationException
(
String
message)
Constructor with given message put in exception.
RelationNotFoundException
(
String
message)
Constructor with given message put in exception.
RelationNotification
(
String
notifType,
Object
sourceObj,
 long sequence,
 long timeStamp,
String
message,
String
id,
String
typeName,
ObjectName
objectName,
String
name,
List
<
ObjectName
> newValue,
List
<
ObjectName
> oldValue)
Creates a notification for a role update in a relation.
RelationNotification
(
String
notifType,
Object
sourceObj,
 long sequence,
 long timeStamp,
String
message,
String
id,
String
typeName,
ObjectName
objectName,
List
<
ObjectName
> unregMBeanList)
Creates a notification for either a relation creation (RelationSupport
 object created internally in the Relation Service, or an MBean added as a
 relation) or for a relation removal from the Relation Service.
RelationServiceNotRegisteredException
(
String
message)
Constructor with given message put in exception.
RelationSupport
(
String
relationId,
ObjectName
relationServiceName,
String
relationTypeName,
RoleList
list)
Creates a
RelationSupport
object.
RelationSupport
(
String
relationId,
ObjectName
relationServiceName,
MBeanServer
relationServiceMBeanServer,
String
relationTypeName,
RoleList
list)
Creates a
RelationSupport
object.
RelationTypeNotFoundException
(
String
message)
Constructor with given message put in exception.
protected
RelationTypeSupport
(
String
relationTypeName)
Constructor to be used for subclasses.
RelationTypeSupport
(
String
relationTypeName,
RoleInfo
[] roleInfoArray)
Constructor where all role definitions are dynamically created and
 passed as parameter.
Role
(
String
roleName,
List
<
ObjectName
> roleValue)
Make a new Role object.
RoleInfo
(
String
roleName,
String
mbeanClassName)
Constructor.
RoleInfo
(
String
roleName,
String
mbeanClassName,
 boolean read,
 boolean write)
Constructor.
RoleInfo
(
String
roleName,
String
mbeanClassName,
 boolean read,
 boolean write,
 int min,
 int max,
String
descr)
Constructor.
RoleInfoNotFoundException
(
String
message)
Constructor with given message put in exception.
RoleNotFoundException
(
String
message)
Constructor with given message put in exception.
RoleUnresolved
(
String
name,
List
<
ObjectName
> value,
 int pbType)
Constructor.
Uses of
String
in
javax.management.remote
Fields in
javax.management.remote
declared as
String
Modifier and Type
Field
Description
static final
String
JMXConnectorServer.
AUTHENTICATOR
Name of the attribute that specifies the authenticator for a
 connector server.
static final
String
JMXConnectionNotification.
CLOSED
Notification type string for a connection-closed notification.
static final
String
JMXConnector.
CREDENTIALS
Name of the attribute that specifies the credentials to send
 to the connector server during connection.
static final
String
JMXConnectorFactory.
DEFAULT_CLASS_LOADER
Name of the attribute that specifies the default class
 loader.
static final
String
JMXConnectorServerFactory.
DEFAULT_CLASS_LOADER
Name of the attribute that specifies the default class
 loader.
static final
String
JMXConnectorServerFactory.
DEFAULT_CLASS_LOADER_NAME
Name of the attribute that specifies the default class
 loader MBean name.
static final
String
JMXConnectionNotification.
FAILED
Notification type string for a connection-failed notification.
static final
String
JMXConnectionNotification.
NOTIFS_LOST
Notification type string for a connection that has possibly
 lost notifications.
static final
String
JMXConnectionNotification.
OPENED
Notification type string for a connection-opened notification.
static final
String
JMXConnectorFactory.
PROTOCOL_PROVIDER_CLASS_LOADER
Name of the attribute that specifies the class
 loader for loading protocol providers.
static final
String
JMXConnectorServerFactory.
PROTOCOL_PROVIDER_CLASS_LOADER
Name of the attribute that specifies the class
 loader for loading protocol providers.
static final
String
JMXConnectorFactory.
PROTOCOL_PROVIDER_PACKAGES
Name of the attribute that specifies the provider packages
 that are consulted when looking for the handler for a protocol.
static final
String
JMXConnectorServerFactory.
PROTOCOL_PROVIDER_PACKAGES
Name of the attribute that specifies the provider packages
 that are consulted when looking for the handler for a protocol.
Methods in
javax.management.remote
that return
String
Modifier and Type
Method
Description
String
JMXConnectionNotification.
getConnectionId
()
The connection ID to which this notification pertains.
String
JMXConnector.
getConnectionId
()
Gets this connection's ID from the connector server.
String
[]
JMXConnectorServer.
getConnectionIds
()
String
[]
JMXConnectorServerMBean.
getConnectionIds
()
The list of IDs for currently-open connections to this
 connector server.
String
JMXServiceURL.
getHost
()
The host part of the Service URL.
String
JMXPrincipal.
getName
()
Returns the name of this principal.
String
JMXServiceURL.
getProtocol
()
The protocol part of the Service URL.
String
JMXServiceURL.
getURLPath
()
The URL Path part of the Service URL.
String
JMXPrincipal.
toString
()
Returns a string representation of this
JMXPrincipal
.
String
JMXServiceURL.
toString
()
The string representation of this Service URL.
String
NotificationResult.
toString
()
Returns a string representation of the object.
String
TargetedNotification.
toString
()
Returns a textual representation of this Targeted Notification.
Methods in
javax.management.remote
that return types with arguments of type
String
Modifier and Type
Method
Description
Map
<
String
,
?>
JMXConnectorServerMBean.
getAttributes
()
The attributes for this connector server.
Methods in
javax.management.remote
with parameters of type
String
Modifier and Type
Method
Description
protected void
JMXConnectorServer.
connectionClosed
(
String
connectionId,
String
message,
Object
userData)
Called by a subclass when a client connection is closed
 normally.
protected void
JMXConnectorServer.
connectionFailed
(
String
connectionId,
String
message,
Object
userData)
Called by a subclass when a client connection fails.
protected void
JMXConnectorServer.
connectionOpened
(
String
connectionId,
String
message,
Object
userData)
Called by a subclass when a new client connection is opened.
Method parameters in
javax.management.remote
with type arguments of type
String
Modifier and Type
Method
Description
void
JMXConnector.
connect
(
Map
<
String
,
?> env)
Establishes the connection to the connector server.
static
JMXConnector
JMXConnectorFactory.
connect
(
JMXServiceURL
serviceURL,
Map
<
String
,
?> environment)
Creates a connection to the connector server at the given
 address.
static
JMXConnector
JMXConnectorFactory.
newJMXConnector
(
JMXServiceURL
serviceURL,
Map
<
String
,
?> environment)
Creates a connector client for the connector server at the
 given address.
JMXConnector
JMXConnectorProvider.
newJMXConnector
(
JMXServiceURL
serviceURL,
Map
<
String
,
?> environment)
Creates a new connector client that is ready to connect
 to the connector server at the given address.
static
JMXConnectorServer
JMXConnectorServerFactory.
newJMXConnectorServer
(
JMXServiceURL
serviceURL,
Map
<
String
,
?> environment,
MBeanServer
mbeanServer)
Creates a connector server at the given address.
JMXConnectorServer
JMXConnectorServerProvider.
newJMXConnectorServer
(
JMXServiceURL
serviceURL,
Map
<
String
,
?> environment,
MBeanServer
mbeanServer)
Creates a new connector server at the given address.
JMXConnector
JMXConnectorServer.
toJMXConnector
(
Map
<
String
,
?> env)
Returns a client stub for this connector server.
JMXConnector
JMXConnectorServerMBean.
toJMXConnector
(
Map
<
String
,
?> env)
Returns a client stub for this connector server.
Constructors in
javax.management.remote
with parameters of type
String
Modifier
Constructor
Description
JMXConnectionNotification
(
String
type,
Object
source,
String
connectionId,
 long sequenceNumber,
String
message,
Object
userData)
Constructs a new connection notification.
JMXPrincipal
(
String
name)
Creates a JMXPrincipal for a given identity.
JMXProviderException
(
String
message)
Constructs a
JMXProviderException
with the
 specified detail message.
JMXProviderException
(
String
message,
Throwable
cause)
Constructs a
JMXProviderException
with the
 specified detail message and nested exception.
JMXServerErrorException
(
String
s,
Error
err)
Constructs a
JMXServerErrorException
with the specified
 detail message and nested error.
JMXServiceURL
(
String
serviceURL)
Constructs a
JMXServiceURL
by parsing a Service URL
 string.
JMXServiceURL
(
String
protocol,
String
host,
 int port)
Constructs a
JMXServiceURL
with the given protocol,
 host, and port.
JMXServiceURL
(
String
protocol,
String
host,
 int port,
String
urlPath)
Constructs a
JMXServiceURL
with the given parts.
SubjectDelegationPermission
(
String
name)
Creates a new SubjectDelegationPermission with the specified name.
SubjectDelegationPermission
(
String
name,
String
actions)
Creates a new SubjectDelegationPermission object with the
 specified name.
Uses of
String
in
javax.management.remote.rmi
Fields in
javax.management.remote.rmi
declared as
String
Modifier and Type
Field
Description
static final
String
RMIConnectorServer.
CREDENTIALS_FILTER_PATTERN
Name of the attribute that specifies an
ObjectInputFilter
pattern string to filter classes acceptable
 for
RMIServer.newClient()
remote method call.
static final
String
RMIConnectorServer.
JNDI_REBIND_ATTRIBUTE
Name of the attribute that specifies whether the
RMIServer
stub that represents an RMI connector server should
 override an existing stub at the same address.
static final
String
RMIConnectorServer.
RMI_CLIENT_SOCKET_FACTORY_ATTRIBUTE
Name of the attribute that specifies the
RMIClientSocketFactory
for the RMI objects created in
 conjunction with this connector.
static final
String
RMIConnectorServer.
RMI_SERVER_SOCKET_FACTORY_ATTRIBUTE
Name of the attribute that specifies the
RMIServerSocketFactory
for the RMI objects created in
 conjunction with this connector.
static final
String
RMIConnectorServer.
SERIAL_FILTER_PATTERN
This attribute defines a pattern from which to create a
ObjectInputFilter
that will be used when deserializing
 objects sent to the
JMXConnectorServer
by any client.
Methods in
javax.management.remote.rmi
that return
String
Modifier and Type
Method
Description
String
RMIConnection.
getConnectionId
()
Returns the connection ID.
String
RMIConnectionImpl_Stub.
getConnectionId
()
String
RMIConnectionImpl.
getConnectionId
()
String
RMIConnector.
getConnectionId
()
String
RMIConnection.
getDefaultDomain
(
Subject
delegationSubject)
Handles the method
MBeanServerConnection.getDefaultDomain()
.
String
RMIConnectionImpl_Stub.
getDefaultDomain
(
Subject
$param_Subject_1)
String
RMIConnectionImpl.
getDefaultDomain
(
Subject
delegationSubject)
String
[]
RMIConnection.
getDomains
(
Subject
delegationSubject)
Handles the method
MBeanServerConnection.getDomains()
.
String
[]
RMIConnectionImpl_Stub.
getDomains
(
Subject
$param_Subject_1)
String
[]
RMIConnectionImpl.
getDomains
(
Subject
delegationSubject)
protected
String
RMIJRMPServerImpl.
getProtocol
()
protected abstract
String
RMIServerImpl.
getProtocol
()
Returns the protocol string for this object.
String
RMIServer.
getVersion
()
The version of the RMI Connector Protocol understood by this
 connector server.
String
RMIServerImpl_Stub.
getVersion
()
String
RMIServerImpl.
getVersion
()
String
RMIConnectionImpl.
toString
()
Returns a string representation of this object.
String
RMIConnector.
toString
()
Returns a string representation of this object.
Methods in
javax.management.remote.rmi
that return types with arguments of type
String
Modifier and Type
Method
Description
Map
<
String
,
?>
RMIConnectorServer.
getAttributes
()
Methods in
javax.management.remote.rmi
with parameters of type
String
Modifier and Type
Method
Description
ObjectInstance
RMIConnection.
createMBean
(
String
className,
ObjectName
name,
MarshalledObject
params,
String
[] signature,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.createMBean(String, ObjectName, Object[], String[])
.
ObjectInstance
RMIConnection.
createMBean
(
String
className,
ObjectName
name,
ObjectName
loaderName,
MarshalledObject
params,
String
[] signature,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.createMBean(String, ObjectName, ObjectName, Object[], String[])
.
ObjectInstance
RMIConnection.
createMBean
(
String
className,
ObjectName
name,
ObjectName
loaderName,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.createMBean(String, ObjectName, ObjectName)
.
ObjectInstance
RMIConnection.
createMBean
(
String
className,
ObjectName
name,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.createMBean(String, ObjectName)
.
ObjectInstance
RMIConnectionImpl_Stub.
createMBean
(
String
$param_String_1,
ObjectName
$param_ObjectName_2,
MarshalledObject
$param_MarshalledObject_3,
String
[] $param_arrayOf_String_4,
Subject
$param_Subject_5)
ObjectInstance
RMIConnectionImpl_Stub.
createMBean
(
String
$param_String_1,
ObjectName
$param_ObjectName_2,
ObjectName
$param_ObjectName_3,
MarshalledObject
$param_MarshalledObject_4,
String
[] $param_arrayOf_String_5,
Subject
$param_Subject_6)
ObjectInstance
RMIConnectionImpl_Stub.
createMBean
(
String
$param_String_1,
ObjectName
$param_ObjectName_2,
ObjectName
$param_ObjectName_3,
Subject
$param_Subject_4)
ObjectInstance
RMIConnectionImpl_Stub.
createMBean
(
String
$param_String_1,
ObjectName
$param_ObjectName_2,
Subject
$param_Subject_3)
ObjectInstance
RMIConnectionImpl.
createMBean
(
String
className,
ObjectName
name,
MarshalledObject
params,
String
[] signature,
Subject
delegationSubject)
ObjectInstance
RMIConnectionImpl.
createMBean
(
String
className,
ObjectName
name,
ObjectName
loaderName,
MarshalledObject
params,
String
[] signature,
Subject
delegationSubject)
ObjectInstance
RMIConnectionImpl.
createMBean
(
String
className,
ObjectName
name,
ObjectName
loaderName,
Subject
delegationSubject)
ObjectInstance
RMIConnectionImpl.
createMBean
(
String
className,
ObjectName
name,
Subject
delegationSubject)
Object
RMIConnection.
getAttribute
(
ObjectName
name,
String
attribute,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.getAttribute(ObjectName, String)
.
Object
RMIConnectionImpl_Stub.
getAttribute
(
ObjectName
$param_ObjectName_1,
String
$param_String_2,
Subject
$param_Subject_3)
Object
RMIConnectionImpl.
getAttribute
(
ObjectName
name,
String
attribute,
Subject
delegationSubject)
AttributeList
RMIConnection.
getAttributes
(
ObjectName
name,
String
[] attributes,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.getAttributes(ObjectName, String[])
.
AttributeList
RMIConnectionImpl_Stub.
getAttributes
(
ObjectName
$param_ObjectName_1,
String
[] $param_arrayOf_String_2,
Subject
$param_Subject_3)
AttributeList
RMIConnectionImpl.
getAttributes
(
ObjectName
name,
String
[] attributes,
Subject
delegationSubject)
Object
RMIConnection.
invoke
(
ObjectName
name,
String
operationName,
MarshalledObject
params,
String
[] signature,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.invoke(ObjectName, String, Object[], String[])
.
Object
RMIConnectionImpl_Stub.
invoke
(
ObjectName
$param_ObjectName_1,
String
$param_String_2,
MarshalledObject
$param_MarshalledObject_3,
String
[] $param_arrayOf_String_4,
Subject
$param_Subject_5)
Object
RMIConnectionImpl.
invoke
(
ObjectName
name,
String
operationName,
MarshalledObject
params,
String
[] signature,
Subject
delegationSubject)
boolean
RMIConnection.
isInstanceOf
(
ObjectName
name,
String
className,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.isInstanceOf(ObjectName, String)
.
boolean
RMIConnectionImpl_Stub.
isInstanceOf
(
ObjectName
$param_ObjectName_1,
String
$param_String_2,
Subject
$param_Subject_3)
boolean
RMIConnectionImpl.
isInstanceOf
(
ObjectName
name,
String
className,
Subject
delegationSubject)
protected
RMIConnection
RMIJRMPServerImpl.
makeClient
(
String
connectionId,
Subject
subject)
Creates a new client connection as an RMI object exported
 through JRMP.
protected abstract
RMIConnection
RMIServerImpl.
makeClient
(
String
connectionId,
Subject
subject)
Creates a new client connection.
Method parameters in
javax.management.remote.rmi
with type arguments of type
String
Modifier and Type
Method
Description
void
RMIConnector.
connect
(
Map
<
String
,
?> environment)
JMXConnector
RMIConnectorServer.
toJMXConnector
(
Map
<
String
,
?> env)
Returns a client stub for this connector server.
Constructors in
javax.management.remote.rmi
with parameters of type
String
Modifier
Constructor
Description
RMIConnectionImpl
(
RMIServerImpl
rmiServer,
String
connectionId,
ClassLoader
defaultClassLoader,
Subject
subject,
Map
<
String
,
?> env)
Constructs a new
RMIConnection
.
Constructor parameters in
javax.management.remote.rmi
with type arguments of type
String
Modifier
Constructor
Description
RMIConnectionImpl
(
RMIServerImpl
rmiServer,
String
connectionId,
ClassLoader
defaultClassLoader,
Subject
subject,
Map
<
String
,
?> env)
Constructs a new
RMIConnection
.
RMIConnector
(
JMXServiceURL
url,
Map
<
String
,
?> environment)
Constructs an
RMIConnector
that will connect
 the RMI connector server with the given address.
RMIConnector
(
RMIServer
rmiServer,
Map
<
String
,
?> environment)
Constructs an
RMIConnector
using the given RMI stub.
RMIConnectorServer
(
JMXServiceURL
url,
Map
<
String
,
?> environment)
Makes an
RMIConnectorServer
.
RMIConnectorServer
(
JMXServiceURL
url,
Map
<
String
,
?> environment,
MBeanServer
mbeanServer)
Makes an
RMIConnectorServer
for the given MBean
 server.
RMIConnectorServer
(
JMXServiceURL
url,
Map
<
String
,
?> environment,
RMIServerImpl
rmiServerImpl,
MBeanServer
mbeanServer)
Makes an
RMIConnectorServer
for the given MBean
 server.
RMIJRMPServerImpl
(int port,
RMIClientSocketFactory
csf,
RMIServerSocketFactory
ssf,
Map
<
String
,
?> env)
Creates a new
RMIServer
object that will be exported
 on the given port using the given socket factories.
RMIServerImpl
(
Map
<
String
,
?> env)
Constructs a new
RMIServerImpl
.
Uses of
String
in
javax.management.timer
Methods in
javax.management.timer
that return
String
Modifier and Type
Method
Description
String
Timer.
getNotificationMessage
(
Integer
id)
Gets the timer notification detailed message corresponding to the specified identifier.
String
TimerMBean.
getNotificationMessage
(
Integer
id)
Gets the timer notification detailed message corresponding to the specified identifier.
String
Timer.
getNotificationType
(
Integer
id)
Gets the timer notification type corresponding to the specified identifier.
String
TimerMBean.
getNotificationType
(
Integer
id)
Gets the timer notification type corresponding to the specified identifier.
Methods in
javax.management.timer
with parameters of type
String
Modifier and Type
Method
Description
Integer
Timer.
addNotification
(
String
type,
String
message,
Object
userData,
Date
date)
Creates a new timer notification with the specified
type
,
message
and
userData
and inserts it into the list of notifications with a given date
 and a null period and number of occurrences.
Integer
Timer.
addNotification
(
String
type,
String
message,
Object
userData,
Date
date,
 long period)
Creates a new timer notification with the specified
type
,
message
and
userData
and inserts it into the list of notifications with a given date
 and period and a null number of occurrences.
Integer
Timer.
addNotification
(
String
type,
String
message,
Object
userData,
Date
date,
 long period,
 long nbOccurences)
Creates a new timer notification with the specified
type
,
message
and
userData
and inserts it into the list of notifications with a given date,
 period and number of occurrences.
Integer
Timer.
addNotification
(
String
type,
String
message,
Object
userData,
Date
date,
 long period,
 long nbOccurences,
 boolean fixedRate)
Creates a new timer notification with the specified
type
,
message
and
userData
and inserts it into the list of notifications with a given date,
 period and number of occurrences.
Integer
TimerMBean.
addNotification
(
String
type,
String
message,
Object
userData,
Date
date)
Creates a new timer notification with the specified
type
,
message
and
userData
and inserts it into the list of notifications with a given date
 and a null period and number of occurrences.
Integer
TimerMBean.
addNotification
(
String
type,
String
message,
Object
userData,
Date
date,
 long period)
Creates a new timer notification with the specified
type
,
message
and
userData
and inserts it into the list of notifications with a given date
 and period and a null number of occurrences.
Integer
TimerMBean.
addNotification
(
String
type,
String
message,
Object
userData,
Date
date,
 long period,
 long nbOccurences)
Creates a new timer notification with the specified
type
,
message
and
userData
and inserts it into the list of notifications with a given date,
 period and number of occurrences.
Integer
TimerMBean.
addNotification
(
String
type,
String
message,
Object
userData,
Date
date,
 long period,
 long nbOccurences,
 boolean fixedRate)
Creates a new timer notification with the specified
type
,
message
and
userData
and inserts it into the list of notifications with a given date,
 period and number of occurrences.
Vector
<
Integer
>
Timer.
getNotificationIDs
(
String
type)
Gets all the identifiers of timer notifications corresponding to the specified type.
Vector
<
Integer
>
TimerMBean.
getNotificationIDs
(
String
type)
Gets all the identifiers of timer notifications corresponding to the specified type.
void
Timer.
removeNotifications
(
String
type)
Removes all the timer notifications corresponding to the specified type from the list of notifications.
void
TimerMBean.
removeNotifications
(
String
type)
Removes all the timer notifications corresponding to the specified type from the list of notifications.
Constructors in
javax.management.timer
with parameters of type
String
Modifier
Constructor
Description
TimerNotification
(
String
type,
Object
source,
 long sequenceNumber,
 long timeStamp,
String
msg,
Integer
id)
Creates a timer notification object.
Uses of
String
in
javax.naming
Fields in
javax.naming
declared as
String
Modifier and Type
Field
Description
protected
String
RefAddr.
addrType
Contains the type of this address.
static final
String
Context.
APPLET
Deprecated, for removal: This API element is subject to removal in a future version.
An environment property with this name is ignored
             while constructing an initial context.
static final
String
Context.
AUTHORITATIVE
Constant that holds the name of the environment property for
 specifying the authoritativeness of the service requested.
static final
String
Context.
BATCHSIZE
Constant that holds the name of the environment property for
 specifying the batch size to use when returning data via the
 service's protocol.
protected
String
Reference.
classFactory
Contains the name of the factory class for creating
 an instance of the object to which this Reference refers.
protected
String
Reference.
classFactoryLocation
Contains the location of the factory class.
protected
String
Reference.
className
Contains the fully-qualified name of the class of the object to which
 this Reference refers.
static final
String
Context.
DNS_URL
Constant that holds the name of the environment property
 for specifying the DNS host and domain names to use for the
 JNDI URL context (for example, "dns://somehost/wiz.com").
static final
String
Context.
INITIAL_CONTEXT_FACTORY
Constant that holds the name of the environment property
 for specifying the initial context factory to use.
static final
String
Context.
LANGUAGE
Constant that holds the name of the environment property for
 specifying the preferred language to use with the service.
protected
String
LinkException.
linkExplanation
Contains the exception of why resolution of the link failed.
static final
String
Context.
OBJECT_FACTORIES
Constant that holds the name of the environment property
 for specifying the list of object factories to use.
static final
String
Context.
PROVIDER_URL
Constant that holds the name of the environment property
 for specifying configuration information for the service provider
 to use.
static final
String
Context.
REFERRAL
Constant that holds the name of the environment property for
 specifying how referrals encountered by the service provider
 are to be processed.
static final
String
Context.
SECURITY_AUTHENTICATION
Constant that holds the name of the environment property for
 specifying the security level to use.
static final
String
Context.
SECURITY_CREDENTIALS
Constant that holds the name of the environment property for
 specifying the credentials of the principal for authenticating
 the caller to the service.
static final
String
Context.
SECURITY_PRINCIPAL
Constant that holds the name of the environment property for
 specifying the identity of the principal for authenticating
 the caller to the service.
static final
String
Context.
SECURITY_PROTOCOL
Constant that holds the name of the environment property for
 specifying the security protocol to use.
static final
String
Context.
STATE_FACTORIES
Constant that holds the name of the environment property
 for specifying the list of state factories to use.
static final
String
Context.
URL_PKG_PREFIXES
Constant that holds the name of the environment property
 for specifying the list of package prefixes to use when
 loading in URL context factories.
Methods in
javax.naming
that return
String
Modifier and Type
Method
Description
String
Context.
composeName
(
String
name,
String
prefix)
Composes the name of this context with a name relative to
 this context.
String
InitialContext.
composeName
(
String
name,
String
prefix)
Composes the name of this context with a name relative to
 this context.
String
CompositeName.
get
(int posn)
Retrieves a component of this composite name.
String
CompoundName.
get
(int posn)
Retrieves a component of this compound name.
String
Name.
get
(int posn)
Retrieves a component of this name.
String
Binding.
getClassName
()
Retrieves the class name of the object bound to the name of this binding.
String
NameClassPair.
getClassName
()
Retrieves the class name of the object bound to the name of this binding.
String
Reference.
getClassName
()
Retrieves the class name of the object to which this reference refers.
String
NamingException.
getExplanation
()
Retrieves the explanation associated with this exception.
String
Reference.
getFactoryClassLocation
()
Retrieves the location of the factory of the object
 to which this reference refers.
String
Reference.
getFactoryClassName
()
Retrieves the class name of the factory of the object
 to which this reference refers.
String
LinkException.
getLinkExplanation
()
Retrieves the explanation associated with the problem encountered
 when resolving a link.
String
LinkRef.
getLinkName
()
Retrieves the name of this link.
String
NameClassPair.
getName
()
Retrieves the name of this binding.
String
Context.
getNameInNamespace
()
Retrieves the full name of this context within its own namespace.
String
InitialContext.
getNameInNamespace
()
String
NameClassPair.
getNameInNamespace
()
Retrieves the full name of this binding.
String
RefAddr.
getType
()
Retrieves the address type of this address.
String
BinaryRefAddr.
toString
()
Generates the string representation of this address.
String
Binding.
toString
()
Generates the string representation of this binding.
String
CompositeName.
toString
()
Generates the string representation of this composite name.
String
CompoundName.
toString
()
Generates the string representation of this compound name, using
 the syntax rules of the compound name.
String
LinkException.
toString
()
Generates the string representation of this exception.
String
LinkException.
toString
(boolean detail)
Generates the string representation of this exception.
String
NameClassPair.
toString
()
Generates the string representation of this name/class pair.
String
NamingException.
toString
()
Generates the string representation of this exception.
String
NamingException.
toString
(boolean detail)
Generates the string representation in more detail.
String
RefAddr.
toString
()
Generates the string representation of this address.
String
Reference.
toString
()
Generates the string representation of this reference.
Methods in
javax.naming
that return types with arguments of type
String
Modifier and Type
Method
Description
Enumeration
<
String
>
CompositeName.
getAll
()
Retrieves the components of this composite name as an enumeration
 of strings.
Enumeration
<
String
>
CompoundName.
getAll
()
Retrieves the components of this compound name as an enumeration
 of strings.
Enumeration
<
String
>
Name.
getAll
()
Retrieves the components of this name as an enumeration
 of strings.
Methods in
javax.naming
with parameters of type
String
Modifier and Type
Method
Description
Name
CompositeName.
add
(int posn,
String
comp)
Adds a single component at a specified position within this
 composite name.
Name
CompositeName.
add
(
String
comp)
Adds a single component to the end of this composite name.
Name
CompoundName.
add
(int posn,
String
comp)
Adds a single component at a specified position within this
 compound name.
Name
CompoundName.
add
(
String
comp)
Adds a single component to the end of this compound name.
Name
Name.
add
(int posn,
String
comp)
Adds a single component at a specified position within this name.
Name
Name.
add
(
String
comp)
Adds a single component to the end of this name.
Object
Context.
addToEnvironment
(
String
propName,
Object
propVal)
Adds a new environment property to the environment of this
 context.
Object
InitialContext.
addToEnvironment
(
String
propName,
Object
propVal)
void
NamingException.
appendRemainingComponent
(
String
name)
Add name as the last component in remaining name.
void
Context.
bind
(
String
name,
Object
obj)
Binds a name to an object.
void
InitialContext.
bind
(
String
name,
Object
obj)
String
Context.
composeName
(
String
name,
String
prefix)
Composes the name of this context with a name relative to
 this context.
String
InitialContext.
composeName
(
String
name,
String
prefix)
Composes the name of this context with a name relative to
 this context.
Context
Context.
createSubcontext
(
String
name)
Creates and binds a new context.
Context
InitialContext.
createSubcontext
(
String
name)
void
Context.
destroySubcontext
(
String
name)
Destroys the named context and removes it from the namespace.
void
InitialContext.
destroySubcontext
(
String
name)
static <T> T
InitialContext.
doLookup
(
String
name)
A static method to retrieve the named object.
RefAddr
Reference.
get
(
String
addrType)
Retrieves the first address that has the address type 'addrType'.
NameParser
Context.
getNameParser
(
String
name)
Retrieves the parser associated with the named context.
NameParser
InitialContext.
getNameParser
(
String
name)
protected
Context
InitialContext.
getURLOrDefaultInitCtx
(
String
name)
Retrieves a context for resolving the string name
name
.
NamingEnumeration
<
NameClassPair
>
Context.
list
(
String
name)
Enumerates the names bound in the named context, along with the
 class names of objects bound to them.
NamingEnumeration
<
NameClassPair
>
InitialContext.
list
(
String
name)
NamingEnumeration
<
Binding
>
Context.
listBindings
(
String
name)
Enumerates the names bound in the named context, along with the
 objects bound to them.
NamingEnumeration
<
Binding
>
InitialContext.
listBindings
(
String
name)
Object
Context.
lookup
(
String
name)
Retrieves the named object.
Object
InitialContext.
lookup
(
String
name)
Object
Context.
lookupLink
(
String
name)
Retrieves the named object, following links except
 for the terminal atomic component of the name.
Object
InitialContext.
lookupLink
(
String
name)
Name
NameParser.
parse
(
String
name)
Parses a name into its components.
void
Context.
rebind
(
String
name,
Object
obj)
Binds a name to an object, overwriting any existing binding.
void
InitialContext.
rebind
(
String
name,
Object
obj)
Object
Context.
removeFromEnvironment
(
String
propName)
Removes an environment property from the environment of this
 context.
Object
InitialContext.
removeFromEnvironment
(
String
propName)
void
Context.
rename
(
String
oldName,
String
newName)
Binds a new name to the object bound to an old name, and unbinds
 the old name.
void
InitialContext.
rename
(
String
oldName,
String
newName)
void
NameClassPair.
setClassName
(
String
name)
Sets the class name of this binding.
void
LinkException.
setLinkExplanation
(
String
msg)
Sets the explanation associated with the problem encountered
 when resolving a link.
void
NameClassPair.
setName
(
String
name)
Sets the name of this binding.
void
NameClassPair.
setNameInNamespace
(
String
fullName)
Sets the full name of this binding.
void
Context.
unbind
(
String
name)
Unbinds the named object.
void
InitialContext.
unbind
(
String
name)
Constructors in
javax.naming
with parameters of type
String
Modifier
Constructor
Description
AuthenticationException
(
String
explanation)
Constructs a new instance of AuthenticationException using the
 explanation supplied.
AuthenticationNotSupportedException
(
String
explanation)
Constructs a new instance of AuthenticationNotSupportedException using
 an explanation.
BinaryRefAddr
(
String
addrType,
 byte[] src)
Constructs a new instance of BinaryRefAddr using its address type and a byte
 array for contents.
BinaryRefAddr
(
String
addrType,
 byte[] src,
 int offset,
 int count)
Constructs a new instance of BinaryRefAddr using its address type and
 a region of a byte array for contents.
Binding
(
String
name,
Object
obj)
Constructs an instance of a Binding given its name and object.
Binding
(
String
name,
Object
obj,
 boolean isRelative)
Constructs an instance of a Binding given its name, object, and whether
 the name is relative.
Binding
(
String
name,
String
className,
Object
obj)
Constructs an instance of a Binding given its name, class name, and object.
Binding
(
String
name,
String
className,
Object
obj,
 boolean isRelative)
Constructs an instance of a Binding given its
 name, class name, object, and whether the name is relative.
CannotProceedException
(
String
explanation)
Constructs a new instance of CannotProceedException using an
 explanation.
CommunicationException
(
String
explanation)
Constructs a new instance of CommunicationException using the
 arguments supplied.
CompositeName
(
String
n)
Constructs a new composite name instance by parsing the string n
 using the composite name syntax (left-to-right, slash separated).
CompoundName
(
String
n,
Properties
syntax)
Constructs a new compound name instance by parsing the string n
 using the syntax specified by the syntax properties supplied.
ConfigurationException
(
String
explanation)
Constructs a new instance of ConfigurationException using an
 explanation.
ContextNotEmptyException
(
String
explanation)
Constructs a new instance of ContextNotEmptyException using an
 explanation.
InsufficientResourcesException
(
String
explanation)
Constructs a new instance of InsufficientResourcesException using an
 explanation.
InterruptedNamingException
(
String
explanation)
Constructs an instance of InterruptedNamingException using an
 explanation of the problem.
InvalidNameException
(
String
explanation)
Constructs an instance of InvalidNameException using an
 explanation of the problem.
LimitExceededException
(
String
explanation)
Constructs a new instance of LimitExceededException using an
 explanation.
LinkException
(
String
explanation)
Constructs a new instance of LinkException with an explanation.
LinkLoopException
(
String
explanation)
Constructs a new instance of LinkLoopException with an explanation.
LinkRef
(
String
linkName)
Constructs a LinkRef for a string name.
MalformedLinkException
(
String
explanation)
Constructs a new instance of MalformedLinkException with an explanation.
NameAlreadyBoundException
(
String
explanation)
Constructs a new instance of NameAlreadyBoundException using the
 explanation supplied.
NameClassPair
(
String
name,
String
className)
Constructs an instance of a NameClassPair given its
 name and class name.
NameClassPair
(
String
name,
String
className,
 boolean isRelative)
Constructs an instance of a NameClassPair given its
 name, class name, and whether it is relative to the listing context.
NameNotFoundException
(
String
explanation)
Constructs a new instance of NameNotFoundException using the
 explanation supplied.
NamingException
(
String
explanation)
Constructs a new NamingException with an explanation.
NamingSecurityException
(
String
explanation)
Constructs a new instance of NamingSecurityException using the
 explanation supplied.
NoInitialContextException
(
String
explanation)
Constructs an instance of NoInitialContextException with an
 explanation.
NoPermissionException
(
String
explanation)
Constructs a new instance of NoPermissionException using an
 explanation.
NotContextException
(
String
explanation)
Constructs a new instance of NotContextException using an
 explanation.
OperationNotSupportedException
(
String
explanation)
Constructs a new instance of OperationNotSupportedException using an
 explanation.
PartialResultException
(
String
explanation)
Constructs a new instance of the exception using the explanation
 message specified.
protected
RefAddr
(
String
addrType)
Constructs a new instance of RefAddr using its address type.
Reference
(
String
className)
Constructs a new reference for an object with class name 'className'.
Reference
(
String
className,
String
factory,
String
factoryLocation)
Constructs a new reference for an object with class name 'className',
 and the class name and location of the object's factory.
Reference
(
String
className,
RefAddr
addr)
Constructs a new reference for an object with class name 'className' and
 an address.
Reference
(
String
className,
RefAddr
addr,
String
factory,
String
factoryLocation)
Constructs a new reference for an object with class name 'className',
 the class name and location of the object's factory, and the address for
 the object.
protected
ReferralException
(
String
explanation)
Constructs a new instance of ReferralException using the
 explanation supplied.
ServiceUnavailableException
(
String
explanation)
Constructs a new instance of ServiceUnavailableException using an
 explanation.
SizeLimitExceededException
(
String
explanation)
Constructs a new instance of SizeLimitExceededException using an
 explanation.
StringRefAddr
(
String
addrType,
String
addr)
Constructs a new instance of StringRefAddr using its address type
 and contents.
TimeLimitExceededException
(
String
explanation)
Constructs a new instance of TimeLimitExceededException
 using the argument supplied.
Constructor parameters in
javax.naming
with type arguments of type
String
Modifier
Constructor
Description
protected
CompositeName
(
Enumeration
<
String
> comps)
Constructs a new composite name instance using the components
 specified by 'comps'.
protected
CompoundName
(
Enumeration
<
String
> comps,
Properties
syntax)
Constructs a new compound name instance using the components
 specified in comps and syntax.
Uses of
String
in
javax.naming.directory
Fields in
javax.naming.directory
declared as
String
Modifier and Type
Field
Description
protected
String
BasicAttribute.
attrID
Holds the attribute's id.
Methods in
javax.naming.directory
that return
String
Modifier and Type
Method
Description
String
Attribute.
getID
()
Retrieves the id of this attribute.
String
BasicAttribute.
getID
()
String
[]
SearchControls.
getReturningAttributes
()
Retrieves the attributes that will be returned as part of the search.
String
AttributeModificationException.
toString
()
The string representation of this exception consists of
 information about where the error occurred, and
 the first unexecuted modification.
String
BasicAttribute.
toString
()
Generates the string representation of this attribute.
String
BasicAttributes.
toString
()
Generates the string representation of this attribute set.
String
ModificationItem.
toString
()
Generates the string representation of this modification item,
 which consists of the modification operation and its related attribute.
String
SearchResult.
toString
()
Generates the string representation of this SearchResult.
Methods in
javax.naming.directory
that return types with arguments of type
String
Modifier and Type
Method
Description
NamingEnumeration
<
String
>
Attributes.
getIDs
()
Retrieves an enumeration of the ids of the attributes in the
 attribute set.
NamingEnumeration
<
String
>
BasicAttributes.
getIDs
()
Methods in
javax.naming.directory
with parameters of type
String
Modifier and Type
Method
Description
void
DirContext.
bind
(
String
name,
Object
obj,
Attributes
attrs)
Binds a name to an object, along with associated attributes.
void
InitialDirContext.
bind
(
String
name,
Object
obj,
Attributes
attrs)
DirContext
DirContext.
createSubcontext
(
String
name,
Attributes
attrs)
Creates and binds a new context, along with associated attributes.
DirContext
InitialDirContext.
createSubcontext
(
String
name,
Attributes
attrs)
Attribute
Attributes.
get
(
String
attrID)
Retrieves the attribute with the given attribute id from the
 attribute set.
Attribute
BasicAttributes.
get
(
String
attrID)
Attributes
DirContext.
getAttributes
(
String
name)
Retrieves all of the attributes associated with a named object.
Attributes
DirContext.
getAttributes
(
String
name,
String
[] attrIds)
Retrieves selected attributes associated with a named object.
Attributes
DirContext.
getAttributes
(
Name
name,
String
[] attrIds)
Retrieves selected attributes associated with a named object.
Attributes
InitialDirContext.
getAttributes
(
String
name)
Attributes
InitialDirContext.
getAttributes
(
String
name,
String
[] attrIds)
Attributes
InitialDirContext.
getAttributes
(
Name
name,
String
[] attrIds)
DirContext
DirContext.
getSchema
(
String
name)
Retrieves the schema associated with the named object.
DirContext
InitialDirContext.
getSchema
(
String
name)
DirContext
DirContext.
getSchemaClassDefinition
(
String
name)
Retrieves a context containing the schema objects of the
 named object's class definitions.
DirContext
InitialDirContext.
getSchemaClassDefinition
(
String
name)
void
DirContext.
modifyAttributes
(
String
name,
 int mod_op,
Attributes
attrs)
Modifies the attributes associated with a named object.
void
DirContext.
modifyAttributes
(
String
name,
ModificationItem
[] mods)
Modifies the attributes associated with a named object using
 an ordered list of modifications.
void
InitialDirContext.
modifyAttributes
(
String
name,
 int mod_op,
Attributes
attrs)
void
InitialDirContext.
modifyAttributes
(
String
name,
ModificationItem
[] mods)
Attribute
Attributes.
put
(
String
attrID,
Object
val)
Adds a new attribute to the attribute set.
Attribute
BasicAttributes.
put
(
String
attrID,
Object
val)
void
DirContext.
rebind
(
String
name,
Object
obj,
Attributes
attrs)
Binds a name to an object, along with associated attributes,
 overwriting any existing binding.
void
InitialDirContext.
rebind
(
String
name,
Object
obj,
Attributes
attrs)
Attribute
Attributes.
remove
(
String
attrID)
Removes the attribute with the attribute id 'attrID' from
 the attribute set.
Attribute
BasicAttributes.
remove
(
String
attrID)
NamingEnumeration
<
SearchResult
>
DirContext.
search
(
String
name,
String
filterExpr,
Object
[] filterArgs,
SearchControls
cons)
Searches in the named context or object for entries that satisfy the
 given search filter.
NamingEnumeration
<
SearchResult
>
DirContext.
search
(
String
name,
String
filter,
SearchControls
cons)
Searches in the named context or object for entries that satisfy the
 given search filter.
NamingEnumeration
<
SearchResult
>
DirContext.
search
(
String
name,
Attributes
matchingAttributes)
Searches in a single context for objects that contain a
 specified set of attributes.
NamingEnumeration
<
SearchResult
>
DirContext.
search
(
String
name,
Attributes
matchingAttributes,
String
[] attributesToReturn)
Searches in a single context for objects that contain a
 specified set of attributes, and retrieves selected attributes.
NamingEnumeration
<
SearchResult
>
DirContext.
search
(
Name
name,
String
filterExpr,
Object
[] filterArgs,
SearchControls
cons)
Searches in the named context or object for entries that satisfy the
 given search filter.
NamingEnumeration
<
SearchResult
>
DirContext.
search
(
Name
name,
String
filter,
SearchControls
cons)
Searches in the named context or object for entries that satisfy the
 given search filter.
NamingEnumeration
<
SearchResult
>
DirContext.
search
(
Name
name,
Attributes
matchingAttributes,
String
[] attributesToReturn)
Searches in a single context for objects that contain a
 specified set of attributes, and retrieves selected attributes.
NamingEnumeration
<
SearchResult
>
InitialDirContext.
search
(
String
name,
String
filterExpr,
Object
[] filterArgs,
SearchControls
cons)
NamingEnumeration
<
SearchResult
>
InitialDirContext.
search
(
String
name,
String
filter,
SearchControls
cons)
NamingEnumeration
<
SearchResult
>
InitialDirContext.
search
(
String
name,
Attributes
matchingAttributes)
NamingEnumeration
<
SearchResult
>
InitialDirContext.
search
(
String
name,
Attributes
matchingAttributes,
String
[] attributesToReturn)
NamingEnumeration
<
SearchResult
>
InitialDirContext.
search
(
Name
name,
String
filterExpr,
Object
[] filterArgs,
SearchControls
cons)
NamingEnumeration
<
SearchResult
>
InitialDirContext.
search
(
Name
name,
String
filter,
SearchControls
cons)
NamingEnumeration
<
SearchResult
>
InitialDirContext.
search
(
Name
name,
Attributes
matchingAttributes,
String
[] attributesToReturn)
void
SearchControls.
setReturningAttributes
(
String
[] attrs)
Specifies the attributes that will be returned as part of the search.
Constructors in
javax.naming.directory
with parameters of type
String
Modifier
Constructor
Description
AttributeInUseException
(
String
explanation)
Constructs a new instance of AttributeInUseException with
 an explanation.
AttributeModificationException
(
String
explanation)
Constructs a new instance of AttributeModificationException using
 an explanation.
BasicAttribute
(
String
id)
Constructs a new instance of an unordered attribute with no value.
BasicAttribute
(
String
id,
 boolean ordered)
Constructs a new instance of a possibly ordered attribute with no value.
BasicAttribute
(
String
id,
Object
value)
Constructs a new instance of an unordered attribute with a single value.
BasicAttribute
(
String
id,
Object
value,
 boolean ordered)
Constructs a new instance of a possibly ordered attribute with a
 single value.
BasicAttributes
(
String
attrID,
Object
val)
Constructs a new instance of Attributes with one attribute.
BasicAttributes
(
String
attrID,
Object
val,
 boolean ignoreCase)
Constructs a new instance of Attributes with one attribute.
InvalidAttributeIdentifierException
(
String
explanation)
Constructs a new instance of InvalidAttributeIdentifierException using the
 explanation supplied.
InvalidAttributesException
(
String
explanation)
Constructs a new instance of InvalidAttributesException using an
 explanation.
InvalidAttributeValueException
(
String
explanation)
Constructs a new instance of InvalidAttributeValueException using
 an explanation.
InvalidSearchControlsException
(
String
msg)
Constructs a new instance of InvalidSearchControlsException
 with an explanation.
InvalidSearchFilterException
(
String
msg)
Constructs a new instance of InvalidSearchFilterException
 with an explanation.
NoSuchAttributeException
(
String
explanation)
Constructs a new instance of NoSuchAttributeException using
 an explanation.
SchemaViolationException
(
String
explanation)
Constructs a new instance of SchemaViolationException
 using the explanation supplied.
SearchControls
(int scope,
 long countlim,
 int timelim,
String
[] attrs,
 boolean retobj,
 boolean deref)
Constructs a search constraints using arguments.
SearchResult
(
String
name,
Object
obj,
Attributes
attrs)
Constructs a search result using the result's name, its bound object, and
 its attributes.
SearchResult
(
String
name,
Object
obj,
Attributes
attrs,
 boolean isRelative)
Constructs a search result using the result's name, its bound object, and
 its attributes, and whether the name is relative.
SearchResult
(
String
name,
String
className,
Object
obj,
Attributes
attrs)
Constructs a search result using the result's name, its class name,
 its bound object, and its attributes.
SearchResult
(
String
name,
String
className,
Object
obj,
Attributes
attrs,
 boolean isRelative)
Constructs a search result using the result's name, its class name,
 its bound object, its attributes, and whether the name is relative.
Uses of
String
in
javax.naming.event
Methods in
javax.naming.event
with parameters of type
String
Modifier and Type
Method
Description
void
EventContext.
addNamingListener
(
String
target,
 int scope,
NamingListener
l)
Adds a listener for receiving naming events fired
 when the object named by the string target name and scope changes.
void
EventDirContext.
addNamingListener
(
String
target,
String
filter,
Object
[] filterArgs,
SearchControls
ctls,
NamingListener
l)
Adds a listener for receiving naming events fired when
 objects identified by the search filter
filter
and filter arguments at the
 object named by the string target name are modified.
void
EventDirContext.
addNamingListener
(
String
target,
String
filter,
SearchControls
ctls,
NamingListener
l)
Adds a listener for receiving naming events fired when
 objects identified by the search filter
filter
at the
 object named by the string target name are modified.
void
EventDirContext.
addNamingListener
(
Name
target,
String
filter,
Object
[] filterArgs,
SearchControls
ctls,
NamingListener
l)
Adds a listener for receiving naming events fired
 when objects identified by the search filter
filter
and
 filter arguments at the object named by the target are modified.
void
EventDirContext.
addNamingListener
(
Name
target,
String
filter,
SearchControls
ctls,
NamingListener
l)
Adds a listener for receiving naming events fired
 when objects identified by the search filter
filter
at
 the object named by target are modified.
Uses of
String
in
javax.naming.ldap
Fields in
javax.naming.ldap
declared as
String
Modifier and Type
Field
Description
static final
String
LdapContext.
CONTROL_FACTORIES
Constant that holds the name of the environment property
 for specifying the list of control factories to use.
protected
String
BasicControl.
id
The control's object identifier string.
static final
String
ManageReferralControl.
OID
The ManageReferral control's assigned object identifier
 is 2.16.840.1.113730.3.4.2.
static final
String
PagedResultsControl.
OID
The paged-results control's assigned object identifier
 is 1.2.840.113556.1.4.319.
static final
String
PagedResultsResponseControl.
OID
The paged-results response control's assigned object identifier
 is 1.2.840.113556.1.4.319.
static final
String
SortControl.
OID
The server-side sort control's assigned object identifier
 is 1.2.840.113556.1.4.473.
static final
String
SortResponseControl.
OID
The server-side sort response control's assigned object identifier
 is 1.2.840.113556.1.4.474.
static final
String
StartTlsRequest.
OID
The StartTLS extended request's assigned object identifier
 is 1.3.6.1.4.1.1466.20037.
static final
String
StartTlsResponse.
OID
The StartTLS extended response's assigned object identifier
 is 1.3.6.1.4.1.1466.20037.
Methods in
javax.naming.ldap
that return
String
Modifier and Type
Method
Description
static
String
Rdn.
escapeValue
(
Object
val)
Given the value of an attribute, returns a string escaped according
 to the rules specified in
RFC 2253
.
String
LdapName.
get
(int posn)
Retrieves a component of this LDAP name as a string.
String
SortKey.
getAttributeID
()
Retrieves the attribute ID of the sort key.
String
SortResponseControl.
getAttributeID
()
Retrieves the ID of the attribute that caused the sort to fail.
String
BasicControl.
getID
()
Retrieves the control's object identifier string.
String
Control.
getID
()
Retrieves the object identifier assigned for the LDAP control.
String
ExtendedRequest.
getID
()
Retrieves the object identifier of the request.
String
ExtendedResponse.
getID
()
Retrieves the object identifier of the response.
String
StartTlsRequest.
getID
()
Retrieves the StartTLS request's object identifier string.
String
StartTlsResponse.
getID
()
Retrieves the StartTLS response's object identifier string.
String
SortKey.
getMatchingRuleID
()
Retrieves the matching rule ID used to order the attribute values.
String
[]
UnsolicitedNotification.
getReferrals
()
Retrieves the referral(s) sent by the server.
String
Rdn.
getType
()
Retrieves one of this Rdn's type.
String
LdapName.
toString
()
Returns a string representation of this LDAP name in a format
 defined by
RFC 2253
and described in the class description.
String
Rdn.
toString
()
Returns this Rdn as a string represented in a format defined by
RFC 2253
and described
 in the class description for
LdapName
.
Methods in
javax.naming.ldap
that return types with arguments of type
String
Modifier and Type
Method
Description
Enumeration
<
String
>
LdapName.
getAll
()
Retrieves the components of this name as an enumeration
 of strings.
Methods in
javax.naming.ldap
with parameters of type
String
Modifier and Type
Method
Description
Name
LdapName.
add
(int posn,
String
comp)
Adds a single component at a specified position within this
 LDAP name.
Name
LdapName.
add
(
String
comp)
Adds a single component to the end of this LDAP name.
ExtendedResponse
ExtendedRequest.
createExtendedResponse
(
String
id,
 byte[] berValue,
 int offset,
 int length)
Creates the response object that corresponds to this request.
ExtendedResponse
StartTlsRequest.
createExtendedResponse
(
String
id,
 byte[] berValue,
 int offset,
 int length)
Creates an extended response object that corresponds to the
 LDAP StartTLS extended request.
abstract void
StartTlsResponse.
setEnabledCipherSuites
(
String
[] suites)
Overrides the default list of cipher suites enabled for use on the
 TLS connection.
static
Object
Rdn.
unescapeValue
(
String
val)
Given an attribute value string formatted according to the rules
 specified in
RFC 2253
,
 returns the unformatted value.
Constructors in
javax.naming.ldap
with parameters of type
String
Modifier
Constructor
Description
BasicControl
(
String
id)
Constructs a non-critical control.
BasicControl
(
String
id,
 boolean criticality,
 byte[] value)
Constructs a control using the supplied arguments.
LdapName
(
String
name)
Constructs an LDAP name from the given distinguished name.
protected
LdapReferralException
(
String
explanation)
Constructs a new instance of LdapReferralException using the
 explanation supplied.
PagedResultsResponseControl
(
String
id,
 boolean criticality,
 byte[] value)
Constructs a paged-results response control.
Rdn
(
String
rdnString)
Constructs an Rdn from the given string.
Rdn
(
String
type,
Object
value)
Constructs an Rdn from the given attribute type and
 value.
SortControl
(
String
[] sortBy,
 boolean criticality)
Constructs a control to sort on a list of attributes in ascending order.
SortControl
(
String
sortBy,
 boolean criticality)
Constructs a control to sort on a single attribute in ascending order.
SortKey
(
String
attrID)
Creates the default sort key for an attribute.
SortKey
(
String
attrID,
 boolean ascendingOrder,
String
matchingRuleID)
Creates a sort key for an attribute.
SortResponseControl
(
String
id,
 boolean criticality,
 byte[] value)
Constructs a control to indicate the outcome of a sort request.
Uses of
String
in
javax.naming.ldap.spi
Methods in
javax.naming.ldap.spi
that return
String
Modifier and Type
Method
Description
String
LdapDnsProviderResult.
getDomainName
()
Returns the domain name resolved from the LDAP URL.
Methods in
javax.naming.ldap.spi
that return types with arguments of type
String
Modifier and Type
Method
Description
List
<
String
>
LdapDnsProviderResult.
getEndpoints
()
Returns the possibly empty list of individual server endpoints resolved
 from the LDAP URL.
Methods in
javax.naming.ldap.spi
with parameters of type
String
Modifier and Type
Method
Description
abstract
Optional
<
LdapDnsProviderResult
>
LdapDnsProvider.
lookupEndpoints
(
String
url,
Map
<?,
?> env)
Lookup the endpoints and domain name for the given
Context
provider URL
and environment.
Constructors in
javax.naming.ldap.spi
with parameters of type
String
Modifier
Constructor
Description
LdapDnsProviderResult
(
String
domainName,
List
<
String
> endpoints)
Construct an LdapDnsProviderResult consisting of a resolved domain name
 and the LDAP server endpoints that serve the domain.
Constructor parameters in
javax.naming.ldap.spi
with type arguments of type
String
Modifier
Constructor
Description
LdapDnsProviderResult
(
String
domainName,
List
<
String
> endpoints)
Construct an LdapDnsProviderResult consisting of a resolved domain name
 and the LDAP server endpoints that serve the domain.
Uses of
String
in
javax.naming.spi
Fields in
javax.naming.spi
declared as
String
Modifier and Type
Field
Description
static final
String
NamingManager.
CPE
Constant that holds the name of the environment property into
 which
getContinuationContext()
stores the value of its
CannotProceedException
parameter.
Methods in
javax.naming.spi
with parameters of type
String
Modifier and Type
Method
Description
void
ResolveResult.
appendRemainingComponent
(
String
name)
Adds a single component to the end of remaining name.
static
Context
NamingManager.
getURLContext
(
String
scheme,
Hashtable
<?,
?> environment)
Creates a context for the given URL scheme id.
ResolveResult
Resolver.
resolveToClass
(
String
name,
Class
<? extends
Context
> contextType)
Partially resolves a name.
Constructors in
javax.naming.spi
with parameters of type
String
Modifier
Constructor
Description
ResolveResult
(
Object
robj,
String
rcomp)
Constructs a new instance of ResolveResult consisting of
 the resolved object and the remaining unresolved component.
Uses of
String
in
javax.net
Methods in
javax.net
with parameters of type
String
Modifier and Type
Method
Description
abstract
Socket
SocketFactory.
createSocket
(
String
host,
 int port)
Creates a socket and connects it to the specified remote host
 at the specified remote port.
abstract
Socket
SocketFactory.
createSocket
(
String
host,
 int port,
InetAddress
localHost,
 int localPort)
Creates a socket and connects it to the specified remote host
 on the specified remote port.
Uses of
String
in
javax.net.ssl
Methods in
javax.net.ssl
that return
String
Modifier and Type
Method
Description
String
X509KeyManager.
chooseClientAlias
(
String
[] keyType,
Principal
[] issuers,
Socket
socket)
Choose an alias to authenticate the client side of a secure
 socket given the public key type and the list of
 certificate issuer authorities recognized by the peer (if any).
String
X509ExtendedKeyManager.
chooseEngineClientAlias
(
String
[] keyType,
Principal
[] issuers,
SSLEngine
engine)
Choose an alias to authenticate the client side of an
SSLEngine
connection given the public key type
 and the list of certificate issuer authorities recognized by
 the peer (if any).
String
X509ExtendedKeyManager.
chooseEngineServerAlias
(
String
keyType,
Principal
[] issuers,
SSLEngine
engine)
Choose an alias to authenticate the server side of an
SSLEngine
connection given the public key type
 and the list of certificate issuer authorities recognized by
 the peer (if any).
String
X509KeyManager.
chooseServerAlias
(
String
keyType,
Principal
[] issuers,
Socket
socket)
Choose an alias to authenticate the server side of a secure
 socket given the public key type and the list of
 certificate issuer authorities recognized by the peer (if any).
final
String
KeyManagerFactory.
getAlgorithm
()
Returns the algorithm name of this
KeyManagerFactory
object.
final
String
TrustManagerFactory.
getAlgorithm
()
Returns the algorithm name of this
TrustManagerFactory
object.
String
SSLEngine.
getApplicationProtocol
()
Returns the most recent application protocol value negotiated for this
 connection.
String
SSLSocket.
getApplicationProtocol
()
Returns the most recent application protocol value negotiated for this
 connection.
String
[]
SSLParameters.
getApplicationProtocols
()
Returns a prioritized array of application-layer protocol names that
 can be negotiated over the SSL/TLS/DTLS protocols.
String
SNIHostName.
getAsciiName
()
Returns the
StandardCharsets.US_ASCII
-compliant hostname of
 this
SNIHostName
object.
String
HandshakeCompletedEvent.
getCipherSuite
()
Returns the cipher suite in use by the session which was produced
 by the handshake.
abstract
String
HttpsURLConnection.
getCipherSuite
()
Returns the cipher suite in use on this connection.
String
SSLSession.
getCipherSuite
()
Returns the name of the SSL cipher suite which is used for all
 connections in the session.
String
[]
SSLParameters.
getCipherSuites
()
Returns a copy of the array of ciphersuites or null if none
 have been set.
String
[]
X509KeyManager.
getClientAliases
(
String
keyType,
Principal
[] issuers)
Get the matching aliases for authenticating the client side of a secure
 socket given the public key type and the list of
 certificate issuer authorities recognized by the peer (if any).
static final
String
KeyManagerFactory.
getDefaultAlgorithm
()
Obtains the default KeyManagerFactory algorithm name.
static final
String
TrustManagerFactory.
getDefaultAlgorithm
()
Obtains the default TrustManagerFactory algorithm name.
abstract
String
[]
SSLServerSocketFactory.
getDefaultCipherSuites
()
Returns the list of cipher suites which are enabled by default.
abstract
String
[]
SSLSocketFactory.
getDefaultCipherSuites
()
Returns the list of cipher suites which are enabled by default.
abstract
String
[]
SSLEngine.
getEnabledCipherSuites
()
Returns the names of the SSL cipher suites which are currently
 enabled for use on this engine.
abstract
String
[]
SSLServerSocket.
getEnabledCipherSuites
()
Returns the list of cipher suites which are currently enabled
 for use by newly accepted connections.
abstract
String
[]
SSLSocket.
getEnabledCipherSuites
()
Returns the names of the SSL cipher suites which are currently
 enabled for use on this connection.
abstract
String
[]
SSLEngine.
getEnabledProtocols
()
Returns the names of the protocol versions which are currently
 enabled for use with this
SSLEngine
.
abstract
String
[]
SSLServerSocket.
getEnabledProtocols
()
Returns the names of the protocols which are currently
 enabled for use by the newly accepted connections.
abstract
String
[]
SSLSocket.
getEnabledProtocols
()
Returns the names of the protocol versions which are currently
 enabled for use on this connection.
String
SSLParameters.
getEndpointIdentificationAlgorithm
()
Gets the endpoint identification algorithm.
String
SSLEngine.
getHandshakeApplicationProtocol
()
Returns the application protocol value negotiated on a SSL/TLS
 handshake currently in progress.
String
SSLSocket.
getHandshakeApplicationProtocol
()
Returns the application protocol value negotiated on a SSL/TLS
 handshake currently in progress.
abstract
String
[]
ExtendedSSLSession.
getLocalSupportedSignatureAlgorithms
()
Obtains an array of supported signature algorithms that the local side
 is willing to use.
String
SSLSessionBindingEvent.
getName
()
Returns the name to which the object is being bound, or the name
 from which the object is being unbound.
String
[]
SSLParameters.
getNamedGroups
()
Returns a prioritized array of key exchange named groups names that
 can be used over the SSL/TLS/DTLS protocols.
String
SSLEngine.
getPeerHost
()
Returns the host name of the peer.
String
SSLSession.
getPeerHost
()
Returns the host name of the peer in this session.
abstract
String
[]
ExtendedSSLSession.
getPeerSupportedSignatureAlgorithms
()
Obtains an array of supported signature algorithms that the peer is
 able to use.
final
String
SSLContext.
getProtocol
()
Returns the protocol name of this
SSLContext
object.
String
SSLSession.
getProtocol
()
Returns the standard name of the protocol used for all
 connections in the session.
String
[]
SSLParameters.
getProtocols
()
Returns a copy of the array of protocols or null if none
 have been set.
String
[]
X509KeyManager.
getServerAliases
(
String
keyType,
Principal
[] issuers)
Get the matching aliases for authenticating the server side of a secure
 socket given the public key type and the list of
 certificate issuer authorities recognized by the peer (if any).
String
[]
SSLParameters.
getSignatureSchemes
()
Returns a prioritized array of signature scheme names that can be used
 over the SSL/TLS/DTLS protocols.
abstract
String
[]
SSLEngine.
getSupportedCipherSuites
()
Returns the names of the cipher suites which could be enabled for use
 on this engine.
abstract
String
[]
SSLServerSocket.
getSupportedCipherSuites
()
Returns the names of the cipher suites which could be enabled for use
 on an SSL connection.
abstract
String
[]
SSLServerSocketFactory.
getSupportedCipherSuites
()
Returns the names of the cipher suites which could be enabled for use
 on an SSL connection created by this factory.
abstract
String
[]
SSLSocket.
getSupportedCipherSuites
()
Returns the names of the cipher suites which could be enabled for use
 on this connection.
abstract
String
[]
SSLSocketFactory.
getSupportedCipherSuites
()
Returns the names of the cipher suites which could be enabled for use
 on an SSL connection.
abstract
String
[]
SSLEngine.
getSupportedProtocols
()
Returns the names of the protocols which could be enabled for use
 with this
SSLEngine
.
abstract
String
[]
SSLServerSocket.
getSupportedProtocols
()
Returns the names of the protocols which could be enabled for use.
abstract
String
[]
SSLSocket.
getSupportedProtocols
()
Returns the names of the protocols which could be enabled for use
 on an SSL connection.
String
[]
SSLSession.
getValueNames
()
Returns an array of the names of all the application layer
 data objects bound into the Session.
String
SNIHostName.
toString
()
Returns a string representation of the object, including the DNS
 hostname in this
SNIHostName
object.
String
SNIServerName.
toString
()
Returns a string representation of this server name, including the server
 name type and the encoded server name value in this
SNIServerName
object.
String
SSLEngineResult.
toString
()
Returns a String representation of this object.
Methods in
javax.net.ssl
that return types with arguments of type
String
Modifier and Type
Method
Description
BiFunction
<
SSLEngine
,
List
<
String
>,
String
>
SSLEngine.
getHandshakeApplicationProtocolSelector
()
Retrieves the callback function that selects an application protocol
 value during a SSL/TLS/DTLS handshake.
BiFunction
<
SSLEngine
,
List
<
String
>,
String
>
SSLEngine.
getHandshakeApplicationProtocolSelector
()
Retrieves the callback function that selects an application protocol
 value during a SSL/TLS/DTLS handshake.
BiFunction
<
SSLSocket
,
List
<
String
>,
String
>
SSLSocket.
getHandshakeApplicationProtocolSelector
()
Retrieves the callback function that selects an application protocol
 value during a SSL/TLS/DTLS handshake.
BiFunction
<
SSLSocket
,
List
<
String
>,
String
>
SSLSocket.
getHandshakeApplicationProtocolSelector
()
Retrieves the callback function that selects an application protocol
 value during a SSL/TLS/DTLS handshake.
Methods in
javax.net.ssl
with parameters of type
String
Modifier and Type
Method
Description
abstract void
X509ExtendedTrustManager.
checkClientTrusted
(
X509Certificate
[] chain,
String
authType,
Socket
socket)
Given the partial or complete certificate chain provided by the
 peer, build and validate the certificate path based on the
 authentication type and ssl parameters.
abstract void
X509ExtendedTrustManager.
checkClientTrusted
(
X509Certificate
[] chain,
String
authType,
SSLEngine
engine)
Given the partial or complete certificate chain provided by the
 peer, build and validate the certificate path based on the
 authentication type and ssl parameters.
void
X509TrustManager.
checkClientTrusted
(
X509Certificate
[] chain,
String
authType)
Given the partial or complete certificate chain provided by the
 peer, build a certificate path to a trusted root and return if
 it can be validated and is trusted for client SSL
 authentication based on the authentication type.
abstract void
X509ExtendedTrustManager.
checkServerTrusted
(
X509Certificate
[] chain,
String
authType,
Socket
socket)
Given the partial or complete certificate chain provided by the
 peer, build and validate the certificate path based on the
 authentication type and ssl parameters.
abstract void
X509ExtendedTrustManager.
checkServerTrusted
(
X509Certificate
[] chain,
String
authType,
SSLEngine
engine)
Given the partial or complete certificate chain provided by the
 peer, build and validate the certificate path based on the
 authentication type and ssl parameters.
void
X509TrustManager.
checkServerTrusted
(
X509Certificate
[] chain,
String
authType)
Given the partial or complete certificate chain provided by the
 peer, build a certificate path to a trusted root and return if
 it can be validated and is trusted for server SSL
 authentication based on the authentication type.
String
X509KeyManager.
chooseClientAlias
(
String
[] keyType,
Principal
[] issuers,
Socket
socket)
Choose an alias to authenticate the client side of a secure
 socket given the public key type and the list of
 certificate issuer authorities recognized by the peer (if any).
String
X509ExtendedKeyManager.
chooseEngineClientAlias
(
String
[] keyType,
Principal
[] issuers,
SSLEngine
engine)
Choose an alias to authenticate the client side of an
SSLEngine
connection given the public key type
 and the list of certificate issuer authorities recognized by
 the peer (if any).
String
X509ExtendedKeyManager.
chooseEngineServerAlias
(
String
keyType,
Principal
[] issuers,
SSLEngine
engine)
Choose an alias to authenticate the server side of an
SSLEngine
connection given the public key type
 and the list of certificate issuer authorities recognized by
 the peer (if any).
String
X509KeyManager.
chooseServerAlias
(
String
keyType,
Principal
[] issuers,
Socket
socket)
Choose an alias to authenticate the server side of a secure
 socket given the public key type and the list of
 certificate issuer authorities recognized by the peer (if any).
static
SNIMatcher
SNIHostName.
createSNIMatcher
(
String
regex)
Creates an
SNIMatcher
object for
SNIHostName
s.
abstract
Socket
SSLSocketFactory.
createSocket
(
Socket
s,
String
host,
 int port,
 boolean autoClose)
Returns a socket layered over an existing socket connected to the named
 host, at the given port.
final
SSLEngine
SSLContext.
createSSLEngine
(
String
peerHost,
 int peerPort)
Creates a new
SSLEngine
using this context using
 advisory peer information.
protected abstract
SSLEngine
SSLContextSpi.
engineCreateSSLEngine
(
String
host,
 int port)
Creates a
SSLEngine
using this context.
X509Certificate
[]
X509KeyManager.
getCertificateChain
(
String
alias)
Returns the certificate chain associated with the given alias.
String
[]
X509KeyManager.
getClientAliases
(
String
keyType,
Principal
[] issuers)
Get the matching aliases for authenticating the client side of a secure
 socket given the public key type and the list of
 certificate issuer authorities recognized by the peer (if any).
static final
KeyManagerFactory
KeyManagerFactory.
getInstance
(
String
algorithm)
Returns a
KeyManagerFactory
object that acts as a
 factory for key managers.
static final
KeyManagerFactory
KeyManagerFactory.
getInstance
(
String
algorithm,
String
provider)
Returns a
KeyManagerFactory
object that acts as a
 factory for key managers.
static final
KeyManagerFactory
KeyManagerFactory.
getInstance
(
String
algorithm,
Provider
provider)
Returns a
KeyManagerFactory
object that acts as a
 factory for key managers.
static
SSLContext
SSLContext.
getInstance
(
String
protocol)
Returns a
SSLContext
object that implements the
 specified secure socket protocol.
static
SSLContext
SSLContext.
getInstance
(
String
protocol,
String
provider)
Returns a
SSLContext
object that implements the
 specified secure socket protocol.
static
SSLContext
SSLContext.
getInstance
(
String
protocol,
Provider
provider)
Returns a
SSLContext
object that implements the
 specified secure socket protocol.
static final
TrustManagerFactory
TrustManagerFactory.
getInstance
(
String
algorithm)
Returns a
TrustManagerFactory
object that acts as a
 factory for trust managers.
static final
TrustManagerFactory
TrustManagerFactory.
getInstance
(
String
algorithm,
String
provider)
Returns a
TrustManagerFactory
object that acts as a
 factory for trust managers.
static final
TrustManagerFactory
TrustManagerFactory.
getInstance
(
String
algorithm,
Provider
provider)
Returns a
TrustManagerFactory
object that acts as a
 factory for trust managers.
PrivateKey
X509KeyManager.
getPrivateKey
(
String
alias)
Returns the key associated with the given alias.
String
[]
X509KeyManager.
getServerAliases
(
String
keyType,
Principal
[] issuers)
Get the matching aliases for authenticating the server side of a secure
 socket given the public key type and the list of
 certificate issuer authorities recognized by the peer (if any).
Object
SSLSession.
getValue
(
String
name)
Returns the object bound to the given name in the session's
 application layer data.
void
SSLSession.
putValue
(
String
name,
Object
value)
Binds the specified
value
object into the
 session's application layer data
 with the given
name
.
void
SSLSession.
removeValue
(
String
name)
Removes the object bound to the given name in the session's
 application layer data.
void
SSLParameters.
setApplicationProtocols
(
String
[] protocols)
Sets the prioritized array of application-layer protocol names that
 can be negotiated over the SSL/TLS/DTLS protocols.
void
SSLParameters.
setCipherSuites
(
String
[] cipherSuites)
Sets the array of ciphersuites.
abstract void
SSLEngine.
setEnabledCipherSuites
(
String
[] suites)
Sets the cipher suites enabled for use on this engine.
abstract void
SSLServerSocket.
setEnabledCipherSuites
(
String
[] suites)
Sets the cipher suites enabled for use by accepted connections.
abstract void
SSLSocket.
setEnabledCipherSuites
(
String
[] suites)
Sets the cipher suites enabled for use on this connection.
abstract void
SSLEngine.
setEnabledProtocols
(
String
[] protocols)
Set the protocol versions enabled for use on this engine.
abstract void
SSLServerSocket.
setEnabledProtocols
(
String
[] protocols)
Controls which particular protocols are enabled for use by
 accepted connections.
abstract void
SSLSocket.
setEnabledProtocols
(
String
[] protocols)
Sets the protocol versions enabled for use on this connection.
void
SSLParameters.
setEndpointIdentificationAlgorithm
(
String
algorithm)
Sets the endpoint identification algorithm.
void
SSLParameters.
setNamedGroups
(
String
[] namedGroups)
Sets the prioritized array of key exchange named groups names that
 can be used over the SSL/TLS/DTLS protocols.
void
SSLParameters.
setProtocols
(
String
[] protocols)
Sets the array of protocols.
void
SSLParameters.
setSignatureSchemes
(
String
[] signatureSchemes)
Sets the prioritized array of signature scheme names that
 can be used over the SSL/TLS/DTLS protocols.
static
SSLEngineResult.HandshakeStatus
SSLEngineResult.HandshakeStatus.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
SSLEngineResult.Status
SSLEngineResult.Status.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
boolean
HostnameVerifier.
verify
(
String
hostname,
SSLSession
session)
Verify that the host name is an acceptable match with
 the server's authentication scheme.
Method parameters in
javax.net.ssl
with type arguments of type
String
Modifier and Type
Method
Description
void
SSLEngine.
setHandshakeApplicationProtocolSelector
(
BiFunction
<
SSLEngine
,
List
<
String
>,
String
> selector)
Registers a callback function that selects an application protocol
 value for a SSL/TLS/DTLS handshake.
void
SSLEngine.
setHandshakeApplicationProtocolSelector
(
BiFunction
<
SSLEngine
,
List
<
String
>,
String
> selector)
Registers a callback function that selects an application protocol
 value for a SSL/TLS/DTLS handshake.
void
SSLSocket.
setHandshakeApplicationProtocolSelector
(
BiFunction
<
SSLSocket
,
List
<
String
>,
String
> selector)
Registers a callback function that selects an application protocol
 value for a SSL/TLS/DTLS handshake.
void
SSLSocket.
setHandshakeApplicationProtocolSelector
(
BiFunction
<
SSLSocket
,
List
<
String
>,
String
> selector)
Registers a callback function that selects an application protocol
 value for a SSL/TLS/DTLS handshake.
Constructors in
javax.net.ssl
with parameters of type
String
Modifier
Constructor
Description
protected
KeyManagerFactory
(
KeyManagerFactorySpi
factorySpi,
Provider
provider,
String
algorithm)
Creates a KeyManagerFactory object.
SNIHostName
(
String
hostname)
Creates an
SNIHostName
using the specified hostname.
protected
SSLContext
(
SSLContextSpi
contextSpi,
Provider
provider,
String
protocol)
Creates an SSLContext object.
protected
SSLEngine
(
String
peerHost,
 int peerPort)
Constructor for an
SSLEngine
.
SSLException
(
String
reason)
Constructs an exception reporting an error found by
 an SSL subsystem.
SSLException
(
String
message,
Throwable
cause)
Creates a
SSLException
with the specified
 detail message and cause.
SSLHandshakeException
(
String
reason)
Constructs an exception reporting an error found by
 an SSL subsystem during handshaking.
SSLHandshakeException
(
String
message,
Throwable
cause)
Creates a
SSLHandshakeException
with the specified detail
 message and cause.
SSLKeyException
(
String
reason)
Constructs an exception reporting a key management error
 found by an SSL subsystem.
SSLKeyException
(
String
message,
Throwable
cause)
Creates a
SSLKeyException
with the specified detail
 message and cause.
SSLParameters
(
String
[] cipherSuites)
Constructs SSLParameters from the specified array of ciphersuites.
SSLParameters
(
String
[] cipherSuites,
String
[] protocols)
Constructs SSLParameters from the specified array of ciphersuites
 and protocols.
SSLPeerUnverifiedException
(
String
reason)
Constructs an exception reporting that the SSL peer's
 identity has not been verified.
SSLPeerUnverifiedException
(
String
message,
Throwable
cause)
Creates a
SSLPeerUnverifiedException
with the specified detail
 message and cause.
SSLPermission
(
String
name)
Creates a new SSLPermission with the specified name.
SSLPermission
(
String
name,
String
actions)
Creates a new SSLPermission object with the specified name.
SSLProtocolException
(
String
reason)
Constructs an exception reporting an SSL protocol error
 detected by an SSL subsystem.
SSLProtocolException
(
String
message,
Throwable
cause)
Creates a
SSLProtocolException
with the specified detail
 message and cause.
SSLSessionBindingEvent
(
SSLSession
session,
String
name)
Constructs a new SSLSessionBindingEvent.
protected
SSLSocket
(
String
host,
 int port)
Used only by subclasses.
protected
SSLSocket
(
String
host,
 int port,
InetAddress
clientAddress,
 int clientPort)
Used only by subclasses.
protected
TrustManagerFactory
(
TrustManagerFactorySpi
factorySpi,
Provider
provider,
String
algorithm)
Creates a TrustManagerFactory object.
Uses of
String
in
javax.print
Fields in
javax.print
declared as
String
Modifier and Type
Field
Description
static final
String
ServiceUIFactory.
DIALOG_UI
Denotes a UI implemented as an AWT dialog.
static final
String
DocFlavor.
hostEncoding
A string representing the host operating system encoding.
static final
String
ServiceUIFactory.
JCOMPONENT_UI
Denotes a UI implemented as a Swing component.
static final
String
ServiceUIFactory.
JDIALOG_UI
Denotes a UI implemented as a Swing dialog.
static final
String
ServiceUIFactory.
PANEL_UI
Denotes a UI implemented as an AWT panel.
Methods in
javax.print
that return
String
Modifier and Type
Method
Description
String
DocFlavor.
getMediaSubtype
()
Returns this doc flavor object's media subtype (from the MIME type).
String
DocFlavor.
getMediaType
()
Returns this doc flavor object's media type (from the MIME type).
String
DocFlavor.
getMimeType
()
Returns this doc flavor object's MIME type string based on the canonical
 form.
String
PrintService.
getName
()
Returns a string name for this print service which may be used by
 applications to request a particular print service.
abstract
String
StreamPrintService.
getOutputFormat
()
Returns the document format emitted by this print service.
abstract
String
StreamPrintServiceFactory.
getOutputFormat
()
Queries the factory for the document format that is emitted by printers
 obtained from this factory.
String
DocFlavor.
getParameter
(
String
paramName)
Returns a
String
representing a MIME parameter.
String
DocFlavor.
getRepresentationClassName
()
Returns the name of this doc flavor object's representation class.
abstract
String
[]
ServiceUIFactory.
getUIClassNamesForRole
(int role)
Given a UI role obtained from this factory obtain the UI types available
 from this factory which implement this role.
String
DocFlavor.
toString
()
Converts this
DocFlavor
to a string.
Methods in
javax.print
with parameters of type
String
Modifier and Type
Method
Description
String
DocFlavor.
getParameter
(
String
paramName)
Returns a
String
representing a MIME parameter.
abstract
Object
ServiceUIFactory.
getUI
(int role,
String
ui)
Get a UI object which may be cast to the requested UI type by the
 application and used in its user interface.
static
StreamPrintServiceFactory
[]
StreamPrintServiceFactory.
lookupStreamPrintServiceFactories
(
DocFlavor
flavor,
String
outputMimeType)
Locates factories for print services that can be used with a print job to
 output a stream of data in the format specified by
outputMimeType
.
Constructors in
javax.print
with parameters of type
String
Modifier
Constructor
Description
BYTE_ARRAY
(
String
mimeType)
Constructs a new doc flavor with the given MIME type and a print data
 representation class name of
"[B"
(byte array).
CHAR_ARRAY
(
String
mimeType)
Constructs a new doc flavor with the given MIME type and a print data
 representation class name of
"[C"
(character array).
DocFlavor
(
String
mimeType,
String
className)
Constructs a new doc flavor object from the given MIME type and
 representation class name.
INPUT_STREAM
(
String
mimeType)
Constructs a new doc flavor with the given MIME type and a print data
 representation class name of
"java.io.InputStream"
(byte
 stream).
PrintException
(
String
s)
Construct a print exception with the given detail message.
PrintException
(
String
s,
Exception
e)
Construct a print exception with the given detail message and chained
 exception.
READER
(
String
mimeType)
Constructs a new doc flavor with the given MIME type and a print data
 representation class name of
"java.io.Reader"
(character
 stream).
SERVICE_FORMATTED
(
String
className)
Constructs a new doc flavor with a MIME type of
"application/x-java-jvm-local-objectref"
indicating service
 formatted print data and the given print data representation class
 name.
STRING
(
String
mimeType)
Constructs a new doc flavor with the given MIME type and a print data
 representation class name of
"java.lang.String"
.
URL
(
String
mimeType)
Constructs a new doc flavor with the given MIME type and a print data
 representation class name of
"java.net.URL"
.
Uses of
String
in
javax.print.attribute
Methods in
javax.print.attribute
that return
String
Modifier and Type
Method
Description
String
Attribute.
getName
()
Get the name of the category of which this attribute value is an
 instance.
protected
String
[]
EnumSyntax.
getStringTable
()
Returns the string table for this enumeration value's enumeration class.
String
TextSyntax.
getValue
()
Returns this text attribute's text string.
String
DateTimeSyntax.
toString
()
Returns a string value corresponding to this date-time attribute.
String
EnumSyntax.
toString
()
Returns a string value corresponding to this enumeration value.
String
IntegerSyntax.
toString
()
Returns a string value corresponding to this integer attribute.
String
ResolutionSyntax.
toString
()
Returns a string version of this resolution attribute.
String
ResolutionSyntax.
toString
(int units,
String
unitsName)
Returns a string version of this resolution attribute in the given units.
String
SetOfIntegerSyntax.
toString
()
Returns a string value corresponding to this set-of-integer attribute.
String
Size2DSyntax.
toString
()
Returns a string version of this two-dimensional size attribute.
String
Size2DSyntax.
toString
(int units,
String
unitsName)
Returns a string version of this two-dimensional size attribute in the
 given units.
String
TextSyntax.
toString
()
Returns a
String
identifying this text attribute.
String
URISyntax.
toString
()
Returns a
String
identifying this
URI
attribute.
Methods in
javax.print.attribute
with parameters of type
String
Modifier and Type
Method
Description
String
ResolutionSyntax.
toString
(int units,
String
unitsName)
Returns a string version of this resolution attribute in the given units.
String
Size2DSyntax.
toString
(int units,
String
unitsName)
Returns a string version of this two-dimensional size attribute in the
 given units.
Constructors in
javax.print.attribute
with parameters of type
String
Modifier
Constructor
Description
protected
SetOfIntegerSyntax
(
String
members)
Construct a new set-of-integer attribute with the given members in string
 form.
protected
TextSyntax
(
String
value,
Locale
locale)
Constructs a
TextAttribute
with the specified string and locale.
UnmodifiableSetException
(
String
message)
Constructs an
UnmodifiableSetException
with the specified detail
 message.
Uses of
String
in
javax.print.attribute.standard
Methods in
javax.print.attribute.standard
that return
String
Modifier and Type
Method
Description
final
String
Chromaticity.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
ColorSupported.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
Compression.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
Copies.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
CopiesSupported.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
DateTimeAtCompleted.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
DateTimeAtCreation.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
DateTimeAtProcessing.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
Destination.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
DialogOwner.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
DialogTypeSelection.
getName
()
Gets the name of the category of which this attribute value is an
 instance.
final
String
DocumentName.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
Fidelity.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
Finishings.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
JobHoldUntil.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
JobImpressions.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
JobImpressionsCompleted.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
JobImpressionsSupported.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
JobKOctets.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
JobKOctetsProcessed.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
JobKOctetsSupported.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
JobMediaSheets.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
JobMediaSheetsCompleted.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
JobMediaSheetsSupported.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
JobMessageFromOperator.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
JobName.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
JobOriginatingUserName.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
JobPriority.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
JobPrioritySupported.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
JobSheets.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
JobState.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
JobStateReason.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
JobStateReasons.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
Media.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
MediaPrintableArea.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
MediaSize.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
MultipleDocumentHandling.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
NumberOfDocuments.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
NumberOfInterveningJobs.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
NumberUp.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
NumberUpSupported.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
OrientationRequested.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
OutputDeviceAssigned.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
PageRanges.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
PagesPerMinute.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
PagesPerMinuteColor.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
PDLOverrideSupported.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
PresentationDirection.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
PrinterInfo.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
PrinterIsAcceptingJobs.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
PrinterLocation.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
PrinterMakeAndModel.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
PrinterMessageFromOperator.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
PrinterMoreInfo.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
PrinterMoreInfoManufacturer.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
PrinterName.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
PrinterResolution.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
PrinterState.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
PrinterStateReason.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
PrinterStateReasons.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
PrinterURI.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
PrintQuality.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
QueuedJobCount.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
ReferenceUriSchemesSupported.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
RequestingUserName.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
Severity.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
SheetCollate.
getName
()
Get the name of the category of which this attribute value is an
 instance.
final
String
Sides.
getName
()
Get the name of the category of which this attribute value is an
 instance.
protected
String
[]
Chromaticity.
getStringTable
()
Returns the string table for class
Chromaticity
.
protected
String
[]
ColorSupported.
getStringTable
()
Returns the string table for class
ColorSupported
.
protected
String
[]
Compression.
getStringTable
()
Returns the string table for class
Compression
.
protected
String
[]
DialogTypeSelection.
getStringTable
()
Returns the string table for class
DialogTypeSelection
.
protected
String
[]
Fidelity.
getStringTable
()
Returns the string table for class
Fidelity
.
protected
String
[]
Finishings.
getStringTable
()
Returns the string table for class
Finishings
.
protected
String
[]
JobSheets.
getStringTable
()
Returns the string table for class
JobSheets
.
protected
String
[]
JobState.
getStringTable
()
Returns the string table for class
JobState
.
protected
String
[]
JobStateReason.
getStringTable
()
Returns the string table for class
JobStateReason
.
protected
String
[]
MediaName.
getStringTable
()
Returns the string table for class
MediaTray
.
protected
String
[]
MediaSizeName.
getStringTable
()
Returns the string table for class
MediaSizeName
.
protected
String
[]
MediaTray.
getStringTable
()
Returns the string table for class
MediaTray
.
protected
String
[]
MultipleDocumentHandling.
getStringTable
()
Returns the string table for class
MultipleDocumentHandling
.
protected
String
[]
OrientationRequested.
getStringTable
()
Returns the string table for class
OrientationRequested
.
protected
String
[]
PDLOverrideSupported.
getStringTable
()
Returns the string table for class
PDLOverrideSupported
.
protected
String
[]
PresentationDirection.
getStringTable
()
Returns the string table for class
PresentationDirection
.
protected
String
[]
PrinterIsAcceptingJobs.
getStringTable
()
Returns the string table for class
PrinterIsAcceptingJobs
.
protected
String
[]
PrinterState.
getStringTable
()
Returns the string table for class
PrinterState
.
protected
String
[]
PrinterStateReason.
getStringTable
()
Returns the string table for class
PrinterStateReason
.
protected
String
[]
PrintQuality.
getStringTable
()
Returns the string table for class
PrintQuality
.
protected
String
[]
ReferenceUriSchemesSupported.
getStringTable
()
Returns the string table for class
ReferenceUriSchemesSupported
.
protected
String
[]
Severity.
getStringTable
()
Returns the string table for class
Severity
.
protected
String
[]
SheetCollate.
getStringTable
()
Returns the string table for class
SheetCollate
.
protected
String
[]
Sides.
getStringTable
()
Returns the string table for class
Sides
.
String
MediaPrintableArea.
toString
()
Returns a string version of this rectangular size attribute in mm.
String
MediaPrintableArea.
toString
(int units,
String
unitsName)
Returns a string version of this rectangular size attribute in the given
 units.
Methods in
javax.print.attribute.standard
with parameters of type
String
Modifier and Type
Method
Description
String
MediaPrintableArea.
toString
(int units,
String
unitsName)
Returns a string version of this rectangular size attribute in the given
 units.
Constructors in
javax.print.attribute.standard
with parameters of type
String
Modifier
Constructor
Description
DocumentName
(
String
documentName,
Locale
locale)
Constructs a new document name attribute with the given document name and
 locale.
JobMessageFromOperator
(
String
message,
Locale
locale)
Constructs a new job message from operator attribute with the given
 message and locale.
JobName
(
String
jobName,
Locale
locale)
Constructs a new job name attribute with the given job name and locale.
JobOriginatingUserName
(
String
userName,
Locale
locale)
Constructs a new job originating user name attribute with the given user
 name and locale.
OutputDeviceAssigned
(
String
deviceName,
Locale
locale)
Constructs a new output device assigned attribute with the given device
 name and locale.
PageRanges
(
String
members)
Construct a new page ranges attribute with the given members in string
 form.
PrinterInfo
(
String
info,
Locale
locale)
Constructs a new printer info attribute with the given information string
 and locale.
PrinterLocation
(
String
location,
Locale
locale)
Constructs a new printer location attribute with the given location and
 locale.
PrinterMakeAndModel
(
String
makeAndModel,
Locale
locale)
Constructs a new printer make and model attribute with the given make and
 model string and locale.
PrinterMessageFromOperator
(
String
message,
Locale
locale)
Constructs a new printer message from operator attribute with the given
 message and locale.
PrinterName
(
String
printerName,
Locale
locale)
Constructs a new printer name attribute with the given name and locale.
RequestingUserName
(
String
userName,
Locale
locale)
Constructs a new requesting user name attribute with the given user name
 and locale.
Uses of
String
in
javax.print.event
Methods in
javax.print.event
that return
String
Modifier and Type
Method
Description
String
PrintEvent.
toString
()
Returns a string representation of this
PrintEvent
.
Uses of
String
in
javax.rmi.ssl
Methods in
javax.rmi.ssl
that return
String
Modifier and Type
Method
Description
final
String
[]
SslRMIServerSocketFactory.
getEnabledCipherSuites
()
Returns the names of the cipher suites enabled on SSL
 connections accepted by server sockets created by this factory,
 or
null
if this factory uses the cipher suites
 that are enabled by default.
final
String
[]
SslRMIServerSocketFactory.
getEnabledProtocols
()
Returns the names of the protocol versions enabled on SSL
 connections accepted by server sockets created by this factory,
 or
null
if this factory uses the protocol versions
 that are enabled by default.
Methods in
javax.rmi.ssl
with parameters of type
String
Modifier and Type
Method
Description
Socket
SslRMIClientSocketFactory.
createSocket
(
String
host,
 int port)
Creates an SSL socket.
Constructors in
javax.rmi.ssl
with parameters of type
String
Modifier
Constructor
Description
SslRMIServerSocketFactory
(
String
[] enabledCipherSuites,
String
[] enabledProtocols,
 boolean needClientAuth)
Creates a new
SslRMIServerSocketFactory
with
 the specified SSL socket configuration.
SslRMIServerSocketFactory
(
SSLContext
context,
String
[] enabledCipherSuites,
String
[] enabledProtocols,
 boolean needClientAuth)
Creates a new
SslRMIServerSocketFactory
with the
 specified
SSLContext
and SSL socket configuration.
Uses of
String
in
javax.script
Fields in
javax.script
declared as
String
Modifier and Type
Field
Description
static final
String
ScriptEngine.
ARGV
Reserved key for a named value that passes
 an array of positional arguments to a script.
static final
String
ScriptEngine.
ENGINE
Reserved key for a named value that is
 the name of the
ScriptEngine
implementation.
static final
String
ScriptEngine.
ENGINE_VERSION
Reserved key for a named value that identifies
 the version of the
ScriptEngine
implementation.
static final
String
ScriptEngine.
FILENAME
Reserved key for a named value that is
 the name of the file being executed.
static final
String
ScriptEngine.
LANGUAGE
Reserved key for a named value that is
 the full name of Scripting Language supported by the implementation.
static final
String
ScriptEngine.
LANGUAGE_VERSION
Reserved key for the named value that identifies
 the version of the scripting language supported by the implementation.
static final
String
ScriptEngine.
NAME
Reserved key for a named value that identifies
 the short name of the scripting language.
Methods in
javax.script
that return
String
Modifier and Type
Method
Description
String
ScriptEngineFactory.
getEngineName
()
Returns the full  name of the
ScriptEngine
.
String
ScriptEngineFactory.
getEngineVersion
()
Returns the version of the
ScriptEngine
.
String
ScriptException.
getFileName
()
Get the source of the script causing the error.
String
ScriptEngineFactory.
getLanguageName
()
Returns the name of the scripting language supported by this
ScriptEngine
.
String
ScriptEngineFactory.
getLanguageVersion
()
Returns the version of the scripting language supported by this
ScriptEngine
.
String
ScriptException.
getMessage
()
Returns a message containing the String passed to a constructor as well as
 line and column numbers and filename if any of these are known.
String
ScriptEngineFactory.
getMethodCallSyntax
(
String
obj,
String
m,
String
... args)
Returns a String which can be used to invoke a method of a  Java object using the syntax
 of the supported scripting language.
String
ScriptEngineFactory.
getOutputStatement
(
String
toDisplay)
Returns a String that can be used as a statement to display the specified String  using
 the syntax of the supported scripting language.
String
ScriptEngineFactory.
getProgram
(
String
... statements)
Returns a valid scripting language executable program with given statements.
Methods in
javax.script
that return types with arguments of type
String
Modifier and Type
Method
Description
Set
<
Map.Entry
<
String
,
Object
>>
SimpleBindings.
entrySet
()
Returns a
Set
view of the mappings contained in this map.
List
<
String
>
ScriptEngineFactory.
getExtensions
()
Returns an immutable list of filename extensions, which generally identify scripts
 written in the language supported by this
ScriptEngine
.
List
<
String
>
ScriptEngineFactory.
getMimeTypes
()
Returns an immutable list of mimetypes, associated with scripts that
 can be executed by the engine.
List
<
String
>
ScriptEngineFactory.
getNames
()
Returns an immutable list of  short names for the
ScriptEngine
, which may be used to
 identify the
ScriptEngine
by the
ScriptEngineManager
.
Set
<
String
>
SimpleBindings.
keySet
()
Returns a
Set
view of the keys contained in this map.
Methods in
javax.script
with parameters of type
String
Modifier and Type
Method
Description
CompiledScript
Compilable.
compile
(
String
script)
Compiles the script (source represented as a
String
) for
 later execution.
Object
AbstractScriptEngine.
eval
(
String
script)
Same as
eval(Reader)
except that the abstract
eval(String, ScriptContext)
is used.
Object
AbstractScriptEngine.
eval
(
String
script,
Bindings
bindings)
Same as
eval(Reader, Bindings)
except that the abstract
eval(String, ScriptContext)
is used.
Object
ScriptEngine.
eval
(
String
script)
Executes the specified script.
Object
ScriptEngine.
eval
(
String
script,
Bindings
n)
Executes the script using the
Bindings
argument as the
ENGINE_SCOPE
Bindings
of the
ScriptEngine
during the script execution.
Object
ScriptEngine.
eval
(
String
script,
ScriptContext
context)
Causes the immediate execution of the script whose source is the String
 passed as the first argument.
Object
AbstractScriptEngine.
get
(
String
key)
Gets the value for the specified key in the
ENGINE_SCOPE
of the
 protected
context
field.
Object
ScriptEngine.
get
(
String
key)
Retrieves a value set in the state of this engine.
Object
ScriptEngineManager.
get
(
String
key)
Gets the value for the specified key in the Global Scope
Object
ScriptContext.
getAttribute
(
String
name)
Retrieves the value of the attribute with the given name in
 the scope occurring earliest in the search order.
Object
ScriptContext.
getAttribute
(
String
name,
 int scope)
Gets the value of an attribute in a given scope.
Object
SimpleScriptContext.
getAttribute
(
String
name)
Retrieves the value of the attribute with the given name in
 the scope occurring earliest in the search order.
Object
SimpleScriptContext.
getAttribute
(
String
name,
 int scope)
Gets the value of an attribute in a given scope.
int
ScriptContext.
getAttributesScope
(
String
name)
Get the lowest scope in which an attribute is defined.
int
SimpleScriptContext.
getAttributesScope
(
String
name)
Get the lowest scope in which an attribute is defined.
ScriptEngine
ScriptEngineManager.
getEngineByExtension
(
String
extension)
Look up and create a
ScriptEngine
for a given extension.
ScriptEngine
ScriptEngineManager.
getEngineByMimeType
(
String
mimeType)
Look up and create a
ScriptEngine
for a given mime type.
ScriptEngine
ScriptEngineManager.
getEngineByName
(
String
shortName)
Looks up and creates a
ScriptEngine
for a given  name.
String
ScriptEngineFactory.
getMethodCallSyntax
(
String
obj,
String
m,
String
... args)
Returns a String which can be used to invoke a method of a  Java object using the syntax
 of the supported scripting language.
String
ScriptEngineFactory.
getOutputStatement
(
String
toDisplay)
Returns a String that can be used as a statement to display the specified String  using
 the syntax of the supported scripting language.
Object
ScriptEngineFactory.
getParameter
(
String
key)
Returns the value of an attribute whose meaning may be implementation-specific.
String
ScriptEngineFactory.
getProgram
(
String
... statements)
Returns a valid scripting language executable program with given statements.
Object
Invocable.
invokeFunction
(
String
name,
Object
... args)
Used to call top-level procedures and functions defined in scripts.
Object
Invocable.
invokeMethod
(
Object
thiz,
String
name,
Object
... args)
Calls a method on a script object compiled during a previous script execution,
 which is retained in the state of the
ScriptEngine
.
void
AbstractScriptEngine.
put
(
String
key,
Object
value)
Sets the specified value with the specified key in the
ENGINE_SCOPE
Bindings
of the protected
context
field.
Object
Bindings.
put
(
String
name,
Object
value)
Set a named value.
void
ScriptEngine.
put
(
String
key,
Object
value)
Sets a key/value pair in the state of the ScriptEngine that may either create
 a Java Language Binding to be used in the execution of scripts or be used in some
 other way, depending on whether the key is reserved.
void
ScriptEngineManager.
put
(
String
key,
Object
value)
Sets the specified key/value pair in the Global Scope.
Object
SimpleBindings.
put
(
String
name,
Object
value)
Sets the specified key/value in the underlying
map
field.
void
ScriptEngineManager.
registerEngineExtension
(
String
extension,
ScriptEngineFactory
factory)
Registers a
ScriptEngineFactory
to handle an extension.
void
ScriptEngineManager.
registerEngineMimeType
(
String
type,
ScriptEngineFactory
factory)
Registers a
ScriptEngineFactory
to handle a mime type.
void
ScriptEngineManager.
registerEngineName
(
String
name,
ScriptEngineFactory
factory)
Registers a
ScriptEngineFactory
to handle a language
 name.
Object
ScriptContext.
removeAttribute
(
String
name,
 int scope)
Remove an attribute in a given scope.
Object
SimpleScriptContext.
removeAttribute
(
String
name,
 int scope)
Remove an attribute in a given scope.
void
ScriptContext.
setAttribute
(
String
name,
Object
value,
 int scope)
Sets the value of an attribute in a given scope.
void
SimpleScriptContext.
setAttribute
(
String
name,
Object
value,
 int scope)
Sets the value of an attribute in a given scope.
Method parameters in
javax.script
with type arguments of type
String
Modifier and Type
Method
Description
void
Bindings.
putAll
(
Map
<? extends
String
,
? extends
Object
> toMerge)
Adds all the mappings in a given
Map
to this
Bindings
.
void
SimpleBindings.
putAll
(
Map
<? extends
String
,
? extends
Object
> toMerge)
putAll
is implemented using
Map.putAll
.
Constructors in
javax.script
with parameters of type
String
Modifier
Constructor
Description
ScriptException
(
String
s)
Creates a
ScriptException
with a String to be used in its message.
ScriptException
(
String
message,
String
fileName,
 int lineNumber)
Creates a
ScriptException
with message, filename and linenumber to
 be used in error messages.
ScriptException
(
String
message,
String
fileName,
 int lineNumber,
 int columnNumber)
ScriptException
constructor specifying message, filename, line number
 and column number.
Constructor parameters in
javax.script
with type arguments of type
String
Modifier
Constructor
Description
SimpleBindings
(
Map
<
String
,
Object
> m)
Constructor uses an existing
Map
to store the values.
Uses of
String
in
javax.security.auth
Methods in
javax.security.auth
that return
String
Modifier and Type
Method
Description
String
PrivateCredentialPermission.
getActions
()
Returns the "canonical string representation" of the actions.
String
PrivateCredentialPermission.
getCredentialClass
()
Returns the Class name of the Credential associated with this
PrivateCredentialPermission
.
String
[][]
PrivateCredentialPermission.
getPrincipals
()
Returns the
Principal
classes and names
 associated with this
PrivateCredentialPermission
.
String
Subject.
toString
()
Return the String representation of this
Subject
.
Constructors in
javax.security.auth
with parameters of type
String
Modifier
Constructor
Description
AuthPermission
(
String
name)
Creates a new AuthPermission with the specified name.
AuthPermission
(
String
name,
String
actions)
Creates a new AuthPermission object with the specified name.
DestroyFailedException
(
String
msg)
Constructs a DestroyFailedException with the specified detail
 message.
PrivateCredentialPermission
(
String
name,
String
actions)
Creates a new
PrivateCredentialPermission
with the specified
name
.
RefreshFailedException
(
String
msg)
Constructs a RefreshFailedException with the specified detail
 message.
Uses of
String
in
javax.security.auth.callback
Methods in
javax.security.auth.callback
that return
String
Modifier and Type
Method
Description
String
[]
ChoiceCallback.
getChoices
()
Get the list of choices.
String
NameCallback.
getDefaultName
()
Get the default name.
String
TextInputCallback.
getDefaultText
()
Get the default text.
String
TextOutputCallback.
getMessage
()
Get the message to be displayed.
String
NameCallback.
getName
()
Get the retrieved name.
String
[]
ConfirmationCallback.
getOptions
()
Get the confirmation options.
String
ChoiceCallback.
getPrompt
()
Get the prompt.
String
ConfirmationCallback.
getPrompt
()
Get the prompt.
String
NameCallback.
getPrompt
()
Get the prompt.
String
PasswordCallback.
getPrompt
()
Get the prompt.
String
TextInputCallback.
getPrompt
()
Get the prompt.
String
TextInputCallback.
getText
()
Get the retrieved text.
Methods in
javax.security.auth.callback
with parameters of type
String
Modifier and Type
Method
Description
void
NameCallback.
setName
(
String
name)
Set the retrieved name.
void
TextInputCallback.
setText
(
String
text)
Set the retrieved text.
Constructors in
javax.security.auth.callback
with parameters of type
String
Modifier
Constructor
Description
ChoiceCallback
(
String
prompt,
String
[] choices,
 int defaultChoice,
 boolean multipleSelectionsAllowed)
Construct a
ChoiceCallback
with a prompt,
 a list of choices, a default choice, and a boolean specifying
 whether multiple selections from the list of choices are allowed.
ConfirmationCallback
(int messageType,
String
[] options,
 int defaultOption)
Construct a
ConfirmationCallback
with a
 message type, a list of options and a default option.
ConfirmationCallback
(
String
prompt,
 int messageType,
 int optionType,
 int defaultOption)
Construct a
ConfirmationCallback
with a prompt,
 message type, an option type and a default option.
ConfirmationCallback
(
String
prompt,
 int messageType,
String
[] options,
 int defaultOption)
Construct a
ConfirmationCallback
with a prompt,
 message type, a list of options and a default option.
NameCallback
(
String
prompt)
Construct a
NameCallback
with a prompt.
NameCallback
(
String
prompt,
String
defaultName)
Construct a
NameCallback
with a prompt
 and default name.
PasswordCallback
(
String
prompt,
 boolean echoOn)
Construct a
PasswordCallback
with a prompt
 and a boolean specifying whether the password should be displayed
 as it is being typed.
TextInputCallback
(
String
prompt)
Construct a
TextInputCallback
with a prompt.
TextInputCallback
(
String
prompt,
String
defaultText)
Construct a
TextInputCallback
with a prompt
 and default input value.
TextOutputCallback
(int messageType,
String
message)
Construct a TextOutputCallback with a message type and message
 to be displayed.
UnsupportedCallbackException
(
Callback
callback,
String
msg)
Constructs a UnsupportedCallbackException with the specified detail
 message.
Uses of
String
in
javax.security.auth.kerberos
Methods in
javax.security.auth.kerberos
that return
String
Modifier and Type
Method
Description
String
ServicePermission.
getActions
()
Returns the canonical string representation of the actions.
String
EncryptionKey.
getAlgorithm
()
Returns the standard algorithm name for this key.
final
String
KerberosKey.
getAlgorithm
()
Returns the standard algorithm name for this key.
String
EncryptionKey.
getFormat
()
Returns the name of the encoding format for this key.
final
String
KerberosKey.
getFormat
()
Returns the name of the encoding format for this secret key.
String
KerberosPrincipal.
getName
()
The returned string corresponds to the single-string
 representation of a Kerberos Principal name as specified in
 Section 2.1 of
RFC 1964
.
String
KerberosPrincipal.
getRealm
()
Returns the realm component of this Kerberos principal.
String
EncryptionKey.
toString
()
Returns an informative textual representation of this
EncryptionKey
.
String
KerberosCredMessage.
toString
()
Returns an informative textual representation of this
KerberosCredMessage
.
String
KerberosKey.
toString
()
Returns an informative textual representation of this
KerberosKey
.
String
KerberosPrincipal.
toString
()
Returns an informative textual representation of this
KerberosPrincipal
.
String
KerberosTicket.
toString
()
Returns an informative textual representation of this
KerberosTicket
.
String
KeyTab.
toString
()
Returns an informative textual representation of this
KeyTab
.
Constructors in
javax.security.auth.kerberos
with parameters of type
String
Modifier
Constructor
Description
DelegationPermission
(
String
principals)
Create a new
DelegationPermission
with the specified subordinate and target principals.
DelegationPermission
(
String
principals,
String
actions)
Create a new
DelegationPermission
with the specified subordinate and target principals.
KerberosKey
(
KerberosPrincipal
principal,
 char[] password,
String
algorithm)
Constructs a
KerberosKey
from a principal's password using the
 specified algorithm name.
KerberosPrincipal
(
String
name)
Constructs a
KerberosPrincipal
from the provided string input.
KerberosPrincipal
(
String
name,
 int nameType)
Constructs a
KerberosPrincipal
from the provided string and
 name type input.
ServicePermission
(
String
servicePrincipal,
String
action)
Create a new
ServicePermission
with the specified
servicePrincipal
and
action
.
Uses of
String
in
javax.security.auth.login
Methods in
javax.security.auth.login
that return
String
Modifier and Type
Method
Description
String
AppConfigurationEntry.
getLoginModuleName
()
Get the class name of the configured
LoginModule
.
String
Configuration.
getType
()
Return the type of this Configuration.
String
AppConfigurationEntry.LoginModuleControlFlag.
toString
()
Return a String representation of this controlFlag.
Methods in
javax.security.auth.login
that return types with arguments of type
String
Modifier and Type
Method
Description
Map
<
String
,
?>
AppConfigurationEntry.
getOptions
()
Get the options configured for this
LoginModule
.
Methods in
javax.security.auth.login
with parameters of type
String
Modifier and Type
Method
Description
protected abstract
AppConfigurationEntry
[]
ConfigurationSpi.
engineGetAppConfigurationEntry
(
String
name)
Retrieve the AppConfigurationEntries for the specified
name
.
abstract
AppConfigurationEntry
[]
Configuration.
getAppConfigurationEntry
(
String
name)
Retrieve the AppConfigurationEntries for the specified
name
from this Configuration.
static
Configuration
Configuration.
getInstance
(
String
type,
Configuration.Parameters
params)
Returns a Configuration object of the specified type.
static
Configuration
Configuration.
getInstance
(
String
type,
Configuration.Parameters
params,
String
provider)
Returns a Configuration object of the specified type.
static
Configuration
Configuration.
getInstance
(
String
type,
Configuration.Parameters
params,
Provider
provider)
Returns a Configuration object of the specified type.
Constructors in
javax.security.auth.login
with parameters of type
String
Modifier
Constructor
Description
AccountException
(
String
msg)
Constructs a AccountException with the specified detail message.
AccountExpiredException
(
String
msg)
Constructs a AccountExpiredException with the specified detail
 message.
AccountLockedException
(
String
msg)
Constructs a AccountLockedException with the specified
 detail message.
AccountNotFoundException
(
String
msg)
Constructs a AccountNotFoundException with the specified
 detail message.
AppConfigurationEntry
(
String
loginModuleName,
AppConfigurationEntry.LoginModuleControlFlag
controlFlag,
Map
<
String
,
?> options)
Default constructor for this class.
CredentialException
(
String
msg)
Constructs a CredentialException with the specified detail message.
CredentialExpiredException
(
String
msg)
Constructs a CredentialExpiredException with the specified detail
 message.
CredentialNotFoundException
(
String
msg)
Constructs a CredentialNotFoundException with the specified
 detail message.
FailedLoginException
(
String
msg)
Constructs a FailedLoginException with the specified detail
 message.
LoginContext
(
String
name)
Instantiate a new
LoginContext
object with a name.
LoginContext
(
String
name,
CallbackHandler
callbackHandler)
Instantiate a new
LoginContext
object with a name
 and a
CallbackHandler
object.
LoginContext
(
String
name,
Subject
subject)
Instantiate a new
LoginContext
object with a name
 and a
Subject
object.
LoginContext
(
String
name,
Subject
subject,
CallbackHandler
callbackHandler)
Instantiate a new
LoginContext
object with a name,
 a
Subject
to be authenticated, and a
CallbackHandler
object.
LoginContext
(
String
name,
Subject
subject,
CallbackHandler
callbackHandler,
Configuration
config)
Instantiate a new
LoginContext
object with a name,
 a
Subject
to be authenticated,
 a
CallbackHandler
object, and a login
Configuration
.
LoginException
(
String
msg)
Constructs a LoginException with the specified detail message.
Constructor parameters in
javax.security.auth.login
with type arguments of type
String
Modifier
Constructor
Description
AppConfigurationEntry
(
String
loginModuleName,
AppConfigurationEntry.LoginModuleControlFlag
controlFlag,
Map
<
String
,
?> options)
Default constructor for this class.
Uses of
String
in
javax.security.auth.spi
Method parameters in
javax.security.auth.spi
with type arguments of type
String
Modifier and Type
Method
Description
void
LoginModule.
initialize
(
Subject
subject,
CallbackHandler
callbackHandler,
Map
<
String
,
?> sharedState,
Map
<
String
,
?> options)
Initialize this
LoginModule
.
Uses of
String
in
javax.security.auth.x500
Fields in
javax.security.auth.x500
declared as
String
Modifier and Type
Field
Description
static final
String
X500Principal.
CANONICAL
Canonical String format of Distinguished Names.
static final
String
X500Principal.
RFC1779
RFC 1779 String format of Distinguished Names.
static final
String
X500Principal.
RFC2253
RFC 2253 String format of Distinguished Names.
Methods in
javax.security.auth.x500
that return
String
Modifier and Type
Method
Description
String
X500PrivateCredential.
getAlias
()
Returns the KeyStore alias.
String
X500Principal.
getName
()
Returns a string representation of the X.500 distinguished name using
 the format defined in RFC 2253.
String
X500Principal.
getName
(
String
format)
Returns a string representation of the X.500 distinguished name
 using the specified format.
String
X500Principal.
getName
(
String
format,
Map
<
String
,
String
> oidMap)
Returns a string representation of the X.500 distinguished name
 using the specified format.
String
X500Principal.
toString
()
Return a user-friendly string representation of this
X500Principal
.
Methods in
javax.security.auth.x500
with parameters of type
String
Modifier and Type
Method
Description
String
X500Principal.
getName
(
String
format)
Returns a string representation of the X.500 distinguished name
 using the specified format.
String
X500Principal.
getName
(
String
format,
Map
<
String
,
String
> oidMap)
Returns a string representation of the X.500 distinguished name
 using the specified format.
Method parameters in
javax.security.auth.x500
with type arguments of type
String
Modifier and Type
Method
Description
String
X500Principal.
getName
(
String
format,
Map
<
String
,
String
> oidMap)
Returns a string representation of the X.500 distinguished name
 using the specified format.
String
X500Principal.
getName
(
String
format,
Map
<
String
,
String
> oidMap)
Returns a string representation of the X.500 distinguished name
 using the specified format.
Constructors in
javax.security.auth.x500
with parameters of type
String
Modifier
Constructor
Description
X500Principal
(
String
name)
Creates an
X500Principal
from a string representation of
 an X.500 distinguished name (ex:
 "CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US").
X500Principal
(
String
name,
Map
<
String
,
String
> keywordMap)
Creates an
X500Principal
from a string representation of
 an X.500 distinguished name (ex:
 "CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US").
X500PrivateCredential
(
X509Certificate
cert,
PrivateKey
key,
String
alias)
Creates an X500PrivateCredential that associates an X.509 certificate,
 a private key and the KeyStore alias.
Constructor parameters in
javax.security.auth.x500
with type arguments of type
String
Modifier
Constructor
Description
X500Principal
(
String
name,
Map
<
String
,
String
> keywordMap)
Creates an
X500Principal
from a string representation of
 an X.500 distinguished name (ex:
 "CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US").
X500Principal
(
String
name,
Map
<
String
,
String
> keywordMap)
Creates an
X500Principal
from a string representation of
 an X.500 distinguished name (ex:
 "CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US").
Uses of
String
in
javax.security.cert
Methods in
javax.security.cert
that return
String
Modifier and Type
Method
Description
abstract
String
X509Certificate.
getSigAlgName
()
Deprecated, for removal: This API element is subject to removal in a future version.
Gets the signature algorithm name for the certificate
 signature algorithm.
abstract
String
X509Certificate.
getSigAlgOID
()
Deprecated, for removal: This API element is subject to removal in a future version.
Gets the signature algorithm OID string from the certificate.
abstract
String
Certificate.
toString
()
Deprecated, for removal: This API element is subject to removal in a future version.
Returns a string representation of this certificate.
Methods in
javax.security.cert
with parameters of type
String
Modifier and Type
Method
Description
abstract void
Certificate.
verify
(
PublicKey
key,
String
sigProvider)
Deprecated, for removal: This API element is subject to removal in a future version.
Verifies that this certificate was signed using the
 private key that corresponds to the specified public key.
Constructors in
javax.security.cert
with parameters of type
String
Modifier
Constructor
Description
CertificateEncodingException
(
String
message)
Deprecated, for removal: This API element is subject to removal in a future version.
Constructs a CertificateEncodingException with the specified detail
 message.
CertificateException
(
String
msg)
Deprecated, for removal: This API element is subject to removal in a future version.
Constructs a certificate exception with the given detail
 message.
CertificateExpiredException
(
String
message)
Deprecated, for removal: This API element is subject to removal in a future version.
Constructs a CertificateExpiredException with the specified detail
 message.
CertificateNotYetValidException
(
String
message)
Deprecated, for removal: This API element is subject to removal in a future version.
Constructs a CertificateNotYetValidException with the specified detail
 message.
CertificateParsingException
(
String
message)
Deprecated, for removal: This API element is subject to removal in a future version.
Constructs a CertificateParsingException with the specified detail
 message.
Uses of
String
in
javax.security.sasl
Fields in
javax.security.sasl
declared as
String
Modifier and Type
Field
Description
static final
String
Sasl.
BOUND_SERVER_NAME
The name of a property that specifies the bound server name for
 an unbound server.
static final
String
Sasl.
CREDENTIALS
The name of a property that specifies the credentials to use.
static final
String
Sasl.
MAX_BUFFER
The name of a property that specifies the maximum size of the receive
 buffer in bytes of
SaslClient
/
SaslServer
.
static final
String
Sasl.
POLICY_FORWARD_SECRECY
The name of a property that specifies whether mechanisms that implement
 forward secrecy between sessions are required.
static final
String
Sasl.
POLICY_NOACTIVE
The name of a property that specifies whether
 mechanisms susceptible to active (non-dictionary) attacks
 are not permitted.
static final
String
Sasl.
POLICY_NOANONYMOUS
The name of a property that specifies whether mechanisms that accept
 anonymous login are not permitted.
static final
String
Sasl.
POLICY_NODICTIONARY
The name of a property that specifies whether
 mechanisms susceptible to passive dictionary attacks are not permitted.
static final
String
Sasl.
POLICY_NOPLAINTEXT
The name of a property that specifies
 whether mechanisms susceptible to simple plain passive attacks (e.g.,
 "PLAIN") are not permitted.
static final
String
Sasl.
POLICY_PASS_CREDENTIALS
The name of a property that specifies whether
 mechanisms that pass client credentials are required.
static final
String
Sasl.
QOP
The name of a property that specifies the quality-of-protection to use.
static final
String
Sasl.
RAW_SEND_SIZE
The name of a property that specifies the maximum size of the raw send
 buffer in bytes of
SaslClient
/
SaslServer
.
static final
String
Sasl.
REUSE
The name of a property that specifies whether to reuse previously
 authenticated session information.
static final
String
Sasl.
SERVER_AUTH
The name of a property that specifies whether the
 server must authenticate to the client.
static final
String
Sasl.
STRENGTH
The name of a property that specifies the cipher strength to use.
Methods in
javax.security.sasl
that return
String
Modifier and Type
Method
Description
String
AuthorizeCallback.
getAuthenticationID
()
Returns the authentication id to check.
String
AuthorizeCallback.
getAuthorizationID
()
Returns the authorization id to check.
String
SaslServer.
getAuthorizationID
()
Reports the authorization ID in effect for the client of this
 session.
String
AuthorizeCallback.
getAuthorizedID
()
Returns the id of the authorized user.
String
SaslClient.
getMechanismName
()
Returns the IANA-registered mechanism name of this SASL client.
String
SaslServer.
getMechanismName
()
Returns the IANA-registered mechanism name of this SASL server.
String
[]
SaslClientFactory.
getMechanismNames
(
Map
<
String
,
?> props)
Returns an array of names of mechanisms that match the specified
 mechanism selection policies.
String
[]
SaslServerFactory.
getMechanismNames
(
Map
<
String
,
?> props)
Returns an array of names of mechanisms that match the specified
 mechanism selection policies.
String
SaslException.
toString
()
Returns the string representation of this exception.
Methods in
javax.security.sasl
with parameters of type
String
Modifier and Type
Method
Description
static
SaslClient
Sasl.
createSaslClient
(
String
[] mechanisms,
String
authorizationId,
String
protocol,
String
serverName,
Map
<
String
,
?> props,
CallbackHandler
cbh)
Creates a
SaslClient
using the parameters supplied.
SaslClient
SaslClientFactory.
createSaslClient
(
String
[] mechanisms,
String
authorizationId,
String
protocol,
String
serverName,
Map
<
String
,
?> props,
CallbackHandler
cbh)
Creates a SaslClient using the parameters supplied.
static
SaslServer
Sasl.
createSaslServer
(
String
mechanism,
String
protocol,
String
serverName,
Map
<
String
,
?> props,
CallbackHandler
cbh)
Creates a
SaslServer
for the specified mechanism.
SaslServer
SaslServerFactory.
createSaslServer
(
String
mechanism,
String
protocol,
String
serverName,
Map
<
String
,
?> props,
CallbackHandler
cbh)
Creates a
SaslServer
using the parameters supplied.
Object
SaslClient.
getNegotiatedProperty
(
String
propName)
Retrieves the negotiated property.
Object
SaslServer.
getNegotiatedProperty
(
String
propName)
Retrieves the negotiated property.
void
AuthorizeCallback.
setAuthorizedID
(
String
id)
Sets the id of the authorized entity.
Method parameters in
javax.security.sasl
with type arguments of type
String
Modifier and Type
Method
Description
static
SaslClient
Sasl.
createSaslClient
(
String
[] mechanisms,
String
authorizationId,
String
protocol,
String
serverName,
Map
<
String
,
?> props,
CallbackHandler
cbh)
Creates a
SaslClient
using the parameters supplied.
SaslClient
SaslClientFactory.
createSaslClient
(
String
[] mechanisms,
String
authorizationId,
String
protocol,
String
serverName,
Map
<
String
,
?> props,
CallbackHandler
cbh)
Creates a SaslClient using the parameters supplied.
static
SaslServer
Sasl.
createSaslServer
(
String
mechanism,
String
protocol,
String
serverName,
Map
<
String
,
?> props,
CallbackHandler
cbh)
Creates a
SaslServer
for the specified mechanism.
SaslServer
SaslServerFactory.
createSaslServer
(
String
mechanism,
String
protocol,
String
serverName,
Map
<
String
,
?> props,
CallbackHandler
cbh)
Creates a
SaslServer
using the parameters supplied.
String
[]
SaslClientFactory.
getMechanismNames
(
Map
<
String
,
?> props)
Returns an array of names of mechanisms that match the specified
 mechanism selection policies.
String
[]
SaslServerFactory.
getMechanismNames
(
Map
<
String
,
?> props)
Returns an array of names of mechanisms that match the specified
 mechanism selection policies.
Constructors in
javax.security.sasl
with parameters of type
String
Modifier
Constructor
Description
AuthenticationException
(
String
detail)
Constructs a new instance of
AuthenticationException
with a detailed message.
AuthenticationException
(
String
detail,
Throwable
ex)
Constructs a new instance of
AuthenticationException
with a detailed message
 and a root exception.
AuthorizeCallback
(
String
authnID,
String
authzID)
Constructs an instance of
AuthorizeCallback
.
RealmCallback
(
String
prompt)
Constructs a
RealmCallback
with a prompt.
RealmCallback
(
String
prompt,
String
defaultRealmInfo)
Constructs a
RealmCallback
with a prompt and default
 realm information.
RealmChoiceCallback
(
String
prompt,
String
[] choices,
 int defaultChoice,
 boolean multiple)
Constructs a
RealmChoiceCallback
with a prompt, a list of
 choices and a default choice.
SaslException
(
String
detail)
Constructs a new instance of
SaslException
with a detailed message.
SaslException
(
String
detail,
Throwable
ex)
Constructs a new instance of
SaslException
with a detailed message
 and a root exception.
Uses of
String
in
javax.smartcardio
Methods in
javax.smartcardio
that return
String
Modifier and Type
Method
Description
String
CardPermission.
getActions
()
Returns the canonical string representation of the actions.
static
String
TerminalFactory.
getDefaultType
()
Get the default TerminalFactory type.
abstract
String
CardTerminal.
getName
()
Returns the unique name of this terminal.
abstract
String
Card.
getProtocol
()
Returns the protocol in use for this card.
String
TerminalFactory.
getType
()
Returns the type of this TerminalFactory.
String
ATR.
toString
()
Returns a string representation of this ATR.
String
CommandAPDU.
toString
()
Returns a string representation of this command APDU.
String
ResponseAPDU.
toString
()
Returns a string representation of this response APDU.
String
TerminalFactory.
toString
()
Returns a string representation of this TerminalFactory.
Methods in
javax.smartcardio
with parameters of type
String
Modifier and Type
Method
Description
abstract
Card
CardTerminal.
connect
(
String
protocol)
Establishes a connection to the card.
static
TerminalFactory
TerminalFactory.
getInstance
(
String
type,
Object
params)
Returns a TerminalFactory of the specified type that is initialized
 with the specified parameters.
static
TerminalFactory
TerminalFactory.
getInstance
(
String
type,
Object
params,
String
provider)
Returns a TerminalFactory of the specified type that is initialized
 with the specified parameters.
static
TerminalFactory
TerminalFactory.
getInstance
(
String
type,
Object
params,
Provider
provider)
Returns a TerminalFactory of the specified type that is initialized
 with the specified parameters.
CardTerminal
CardTerminals.
getTerminal
(
String
name)
Returns the terminal with the specified name or null if no such
 terminal exists.
static
CardTerminals.State
CardTerminals.State.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Constructors in
javax.smartcardio
with parameters of type
String
Modifier
Constructor
Description
CardException
(
String
message)
Constructs a new CardException with the specified detail message.
CardException
(
String
message,
Throwable
cause)
Constructs a new CardException with the specified detail message and cause.
CardNotPresentException
(
String
message)
Constructs a new CardNotPresentException with the specified detail message.
CardNotPresentException
(
String
message,
Throwable
cause)
Constructs a new CardNotPresentException with the specified detail message and cause.
CardPermission
(
String
terminalName,
String
actions)
Constructs a new CardPermission with the specified actions.
Uses of
String
in
javax.sound.midi
Methods in
javax.sound.midi
that return
String
Modifier and Type
Method
Description
final
String
MidiDevice.Info.
getDescription
()
Obtains the description of the device.
String
Soundbank.
getDescription
()
Obtains a textual description of the sound bank, suitable for display.
final
String
MidiDevice.Info.
getName
()
Obtains the name of the device.
String
Soundbank.
getName
()
Obtains the name of the sound bank.
String
SoundbankResource.
getName
()
Obtains the name of the resource.
final
String
MidiDevice.Info.
getVendor
()
Obtains the name of the company who supplies the device.
String
Soundbank.
getVendor
()
Obtains a
string
naming the company that provides the sound bank.
final
String
MidiDevice.Info.
getVersion
()
Obtains the version of the device.
String
Soundbank.
getVersion
()
Obtains the version string for the sound bank.
final
String
MidiDevice.Info.
toString
()
Returns a string representation of the info object.
final
String
Sequencer.SyncMode.
toString
()
Returns mode's name as the string representation of the
 synchronization mode.
Methods in
javax.sound.midi
that return types with arguments of type
String
Modifier and Type
Method
Description
Map
<
String
,
Object
>
MidiFileFormat.
properties
()
Obtain an unmodifiable map of properties.
Methods in
javax.sound.midi
with parameters of type
String
Modifier and Type
Method
Description
Object
MidiFileFormat.
getProperty
(
String
key)
Obtain the property value specified by the key.
Constructors in
javax.sound.midi
with parameters of type
String
Modifier
Constructor
Description
protected
Info
(
String
name,
String
vendor,
String
description,
String
version)
Constructs a device info object.
protected
Instrument
(
Soundbank
soundbank,
Patch
patch,
String
name,
Class
<?> dataClass)
Constructs a new MIDI instrument from the specified
Patch
.
InvalidMidiDataException
(
String
message)
Constructs an
InvalidMidiDataException
with the specified detail
 message.
MidiUnavailableException
(
String
message)
Constructs a
MidiUnavailableException
with the specified detail
 message.
protected
SoundbankResource
(
Soundbank
soundBank,
String
name,
Class
<?> dataClass)
Constructs a new
SoundbankResource
from the given sound bank and
 wavetable index.
protected
SyncMode
(
String
name)
Constructs a synchronization mode.
Constructor parameters in
javax.sound.midi
with type arguments of type
String
Modifier
Constructor
Description
MidiFileFormat
(int type,
 float divisionType,
 int resolution,
 int bytes,
 long microseconds,
Map
<
String
,
Object
> properties)
Construct a
MidiFileFormat
with a set of properties.
Uses of
String
in
javax.sound.sampled
Methods in
javax.sound.sampled
that return
String
Modifier and Type
Method
Description
final
String
Mixer.Info.
getDescription
()
Obtains the description of the mixer.
String
AudioFileFormat.Type.
getExtension
()
Obtains the common file name extension for this file type.
String
FloatControl.
getMaxLabel
()
Obtains the label for the maximum value, such as "Right" or "Full".
String
FloatControl.
getMidLabel
()
Obtains the label for the mid-point value, such as "Center" or "Default".
String
FloatControl.
getMinLabel
()
Obtains the label for the minimum value, such as "Left" or "Off".
final
String
Mixer.Info.
getName
()
Obtains the name of the mixer.
String
Port.Info.
getName
()
Obtains the name of the port.
String
ReverbType.
getName
()
Obtains the name of this reverb type.
String
BooleanControl.
getStateLabel
(boolean state)
Obtains the label for the specified state.
String
FloatControl.
getUnits
()
Obtains the label for the units in which the control's values are
 expressed, such as "dB" or "frames per second."
final
String
Mixer.Info.
getVendor
()
Obtains the vendor of the mixer.
final
String
Mixer.Info.
getVersion
()
Obtains the version of the mixer.
String
AudioFileFormat.
toString
()
Returns a string representation of the audio file format.
final
String
AudioFileFormat.Type.
toString
()
Returns type's name as the string representation of the file type.
final
String
AudioFormat.Encoding.
toString
()
Returns encoding's name as the string representation of the encoding.
String
AudioFormat.
toString
()
Returns a string that describes the audio format, such as: "PCM SIGNED
 22050 Hz 16 bit mono big-endian".
String
BooleanControl.
toString
()
Returns a string representation of the boolean control.
String
CompoundControl.
toString
()
Returns a string representation of the compound control.
String
Control.
toString
()
Returns a string representation of the control.
final
String
Control.Type.
toString
()
Returns type's name as the string representation of the control type.
String
DataLine.Info.
toString
()
Returns a string representation of the info object.
String
EnumControl.
toString
()
Returns a string representation of the enumerated control.
String
FloatControl.
toString
()
Returns a string representation of the float control.
String
Line.Info.
toString
()
Returns a string representation of the info object.
String
LineEvent.
toString
()
Returns a string representation of the event.
String
LineEvent.Type.
toString
()
Returns type's name as the string representation of the event type.
final
String
Mixer.Info.
toString
()
Returns a string representation of the info object.
final
String
Port.Info.
toString
()
Returns a string representation of the info object.
final
String
ReverbType.
toString
()
Returns a string representation of the reverb type, including its name
 and its parameter settings.
Methods in
javax.sound.sampled
that return types with arguments of type
String
Modifier and Type
Method
Description
Map
<
String
,
Object
>
AudioFileFormat.
properties
()
Obtain an unmodifiable map of properties.
Map
<
String
,
Object
>
AudioFormat.
properties
()
Obtain an unmodifiable map of properties.
Methods in
javax.sound.sampled
with parameters of type
String
Modifier and Type
Method
Description
Object
AudioFileFormat.
getProperty
(
String
key)
Obtain the property value specified by the key.
Object
AudioFormat.
getProperty
(
String
key)
Obtain the property value specified by the key.
Constructors in
javax.sound.sampled
with parameters of type
String
Modifier
Constructor
Description
AudioPermission
(
String
name)
Creates a new
AudioPermission
object that has the specified
 symbolic name, such as "play" or "record".
AudioPermission
(
String
name,
String
actions)
Creates a new
AudioPermission
object that has the specified
 symbolic name, such as "play" or "record".
protected
BooleanControl
(
BooleanControl.Type
type,
 boolean initialValue,
String
trueStateLabel,
String
falseStateLabel)
Constructs a new boolean control object with the given parameters.
Encoding
(
String
name)
Constructs a new encoding.
protected
FloatControl
(
FloatControl.Type
type,
 float minimum,
 float maximum,
 float precision,
 int updatePeriod,
 float initialValue,
String
units)
Constructs a new float control object with the given parameters.
protected
FloatControl
(
FloatControl.Type
type,
 float minimum,
 float maximum,
 float precision,
 int updatePeriod,
 float initialValue,
String
units,
String
minLabel,
String
midLabel,
String
maxLabel)
Constructs a new float control object with the given parameters.
protected
Info
(
String
name,
String
vendor,
String
description,
String
version)
Constructs a mixer's info object, passing it the given textual
 information.
Info
(
Class
<?> lineClass,
String
name,
 boolean isSource)
Constructs a port's info object from the information given.
LineUnavailableException
(
String
message)
Constructs a
LineUnavailableException
that has the specified
 detail message.
protected
ReverbType
(
String
name,
 int earlyReflectionDelay,
 float earlyReflectionIntensity,
 int lateReflectionDelay,
 float lateReflectionIntensity,
 int decayTime)
Constructs a new reverb type that has the specified reverberation
 parameter values.
Type
(
String
name,
String
extension)
Constructs a file type.
protected
Type
(
String
name)
Constructs a new boolean control type.
protected
Type
(
String
name)
Constructs a new compound control type.
protected
Type
(
String
name)
Constructs a new control type with the name specified.
protected
Type
(
String
name)
Constructs a new enumerated control type.
protected
Type
(
String
name)
Constructs a new float control type.
protected
Type
(
String
name)
Constructs a new event type.
UnsupportedAudioFileException
(
String
message)
Constructs an
UnsupportedAudioFileException
that has the
 specified detail message.
Constructor parameters in
javax.sound.sampled
with type arguments of type
String
Modifier
Constructor
Description
AudioFileFormat
(
AudioFileFormat.Type
type,
AudioFormat
format,
 int frameLength,
Map
<
String
,
Object
> properties)
Construct an audio file format object with a set of defined properties.
AudioFormat
(
AudioFormat.Encoding
encoding,
 float sampleRate,
 int sampleSizeInBits,
 int channels,
 int frameSize,
 float frameRate,
 boolean bigEndian,
Map
<
String
,
Object
> properties)
Constructs an
AudioFormat
with the given parameters.
Uses of
String
in
javax.sql
Methods in
javax.sql
that return
String
Modifier and Type
Method
Description
String
RowSet.
getCommand
()
Retrieves this
RowSet
object's command property.
String
RowSet.
getDataSourceName
()
Retrieves the logical name that identifies the data source for this
RowSet
object.
String
RowSet.
getPassword
()
Retrieves the password used to create a database connection.
String
RowSet.
getUrl
()
Retrieves the url property this
RowSet
object will use to
 create a connection if it uses the
DriverManager
instead of a
DataSource
object to establish the connection.
String
RowSet.
getUsername
()
Retrieves the username used to create a database connection for this
RowSet
object.
Methods in
javax.sql
that return types with arguments of type
String
Modifier and Type
Method
Description
Map
<
String
,
Class
<?>>
RowSet.
getTypeMap
()
Retrieves the
Map
object associated with this
RowSet
object, which specifies the custom mapping
 of SQL user-defined types, if any.
Methods in
javax.sql
with parameters of type
String
Modifier and Type
Method
Description
Connection
DataSource.
getConnection
(
String
username,
String
password)
Attempts to establish a connection with the data source that
 this
DataSource
object represents.
PooledConnection
ConnectionPoolDataSource.
getPooledConnection
(
String
user,
String
password)
Attempts to establish a physical database connection that can
 be used as a pooled connection.
XAConnection
XADataSource.
getXAConnection
(
String
user,
String
password)
Attempts to establish a physical database connection, using the given
 user name and password.
PooledConnectionBuilder
PooledConnectionBuilder.
password
(
String
password)
Specifies the password to be used when creating a connection
XAConnectionBuilder
XAConnectionBuilder.
password
(
String
password)
Specifies the password to be used when creating a connection
void
RowSet.
setAsciiStream
(
String
parameterName,
InputStream
x)
Sets the designated parameter to the given input stream.
void
RowSet.
setAsciiStream
(
String
parameterName,
InputStream
x,
 int length)
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
void
RowSet.
setBigDecimal
(
String
parameterName,
BigDecimal
x)
Sets the designated parameter to the given
java.math.BigDecimal
value.
void
RowSet.
setBinaryStream
(
String
parameterName,
InputStream
x)
Sets the designated parameter to the given input stream.
void
RowSet.
setBinaryStream
(
String
parameterName,
InputStream
x,
 int length)
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
void
RowSet.
setBlob
(
String
parameterName,
InputStream
inputStream)
Sets the designated parameter to a
InputStream
object.
void
RowSet.
setBlob
(
String
parameterName,
InputStream
inputStream,
 long length)
Sets the designated parameter to a
InputStream
object.
void
RowSet.
setBlob
(
String
parameterName,
Blob
x)
Sets the designated parameter to the given
java.sql.Blob
object.
void
RowSet.
setBoolean
(
String
parameterName,
 boolean x)
Sets the designated parameter to the given Java
boolean
value.
void
RowSet.
setByte
(
String
parameterName,
 byte x)
Sets the designated parameter to the given Java
byte
value.
void
RowSet.
setBytes
(
String
parameterName,
 byte[] x)
Sets the designated parameter to the given Java array of bytes.
void
RowSetMetaData.
setCatalogName
(int columnIndex,
String
catalogName)
Sets the designated column's table's catalog name, if any, to the given
String
.
void
RowSet.
setCharacterStream
(
String
parameterName,
Reader
reader)
Sets the designated parameter to the given
Reader
object.
void
RowSet.
setCharacterStream
(
String
parameterName,
Reader
reader,
 int length)
Sets the designated parameter to the given
Reader
object, which is the given number of characters long.
void
RowSet.
setClob
(
String
parameterName,
Reader
reader)
Sets the designated parameter to a
Reader
object.
void
RowSet.
setClob
(
String
parameterName,
Reader
reader,
 long length)
Sets the designated parameter to a
Reader
object.
void
RowSet.
setClob
(
String
parameterName,
Clob
x)
Sets the designated parameter to the given
java.sql.Clob
object.
void
RowSetMetaData.
setColumnLabel
(int columnIndex,
String
label)
Sets the suggested column title for use in printouts and
 displays, if any, to the given
String
.
void
RowSetMetaData.
setColumnName
(int columnIndex,
String
columnName)
Sets the name of the designated column to the given
String
.
void
RowSetMetaData.
setColumnTypeName
(int columnIndex,
String
typeName)
Sets the designated column's type name that is specific to the
 data source, if any, to the given
String
.
void
RowSet.
setCommand
(
String
cmd)
Sets this
RowSet
object's command property to the given
 SQL query.
void
RowSet.
setDataSourceName
(
String
name)
Sets the data source name property for this
RowSet
object to the
 given
String
.
void
RowSet.
setDate
(
String
parameterName,
Date
x)
Sets the designated parameter to the given
java.sql.Date
value
 using the default time zone of the virtual machine that is running
 the application.
void
RowSet.
setDate
(
String
parameterName,
Date
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Date
value,
 using the given
Calendar
object.
void
RowSet.
setDouble
(
String
parameterName,
 double x)
Sets the designated parameter to the given Java
double
value.
void
RowSet.
setFloat
(
String
parameterName,
 float x)
Sets the designated parameter to the given Java
float
value.
void
RowSet.
setInt
(
String
parameterName,
 int x)
Sets the designated parameter to the given Java
int
value.
void
RowSet.
setLong
(
String
parameterName,
 long x)
Sets the designated parameter to the given Java
long
value.
void
RowSet.
setNCharacterStream
(
String
parameterName,
Reader
value)
Sets the designated parameter to a
Reader
object.
void
RowSet.
setNCharacterStream
(
String
parameterName,
Reader
value,
 long length)
Sets the designated parameter to a
Reader
object.
void
RowSet.
setNClob
(
String
parameterName,
Reader
reader)
Sets the designated parameter to a
Reader
object.
void
RowSet.
setNClob
(
String
parameterName,
Reader
reader,
 long length)
Sets the designated parameter to a
Reader
object.
void
RowSet.
setNClob
(
String
parameterName,
NClob
value)
Sets the designated parameter to a
java.sql.NClob
object.
void
RowSet.
setNString
(int parameterIndex,
String
value)
Sets the designated parameter to the given
String
object.
void
RowSet.
setNString
(
String
parameterName,
String
value)
Sets the designated parameter to the given
String
object.
void
RowSet.
setNull
(int paramIndex,
 int sqlType,
String
typeName)
Sets the designated parameter in this
RowSet
object's SQL
 command to SQL
NULL
.
void
RowSet.
setNull
(
String
parameterName,
 int sqlType)
Sets the designated parameter to SQL
NULL
.
void
RowSet.
setNull
(
String
parameterName,
 int sqlType,
String
typeName)
Sets the designated parameter to SQL
NULL
.
void
RowSet.
setObject
(
String
parameterName,
Object
x)
Sets the value of the designated parameter with the given object.
void
RowSet.
setObject
(
String
parameterName,
Object
x,
 int targetSqlType)
Sets the value of the designated parameter with the given object.
void
RowSet.
setObject
(
String
parameterName,
Object
x,
 int targetSqlType,
 int scale)
Sets the value of the designated parameter with the given object.
void
RowSet.
setPassword
(
String
password)
Sets the database password for this
RowSet
object to
 the given
String
.
void
RowSet.
setRowId
(
String
parameterName,
RowId
x)
Sets the designated parameter to the given
java.sql.RowId
object.
void
RowSetMetaData.
setSchemaName
(int columnIndex,
String
schemaName)
Sets the name of the designated column's table's schema, if any, to
 the given
String
.
void
RowSet.
setShort
(
String
parameterName,
 short x)
Sets the designated parameter to the given Java
short
value.
void
RowSet.
setSQLXML
(
String
parameterName,
SQLXML
xmlObject)
Sets the designated parameter to the given
java.sql.SQLXML
object.
void
RowSet.
setString
(int parameterIndex,
String
x)
Sets the designated parameter in this
RowSet
object's command
 to the given Java
String
value.
void
RowSet.
setString
(
String
parameterName,
String
x)
Sets the designated parameter to the given Java
String
value.
void
RowSetMetaData.
setTableName
(int columnIndex,
String
tableName)
Sets the designated column's table name, if any, to the given
String
.
void
RowSet.
setTime
(
String
parameterName,
Time
x)
Sets the designated parameter to the given
java.sql.Time
value.
void
RowSet.
setTime
(
String
parameterName,
Time
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Time
value,
 using the given
Calendar
object.
void
RowSet.
setTimestamp
(
String
parameterName,
Timestamp
x)
Sets the designated parameter to the given
java.sql.Timestamp
value.
void
RowSet.
setTimestamp
(
String
parameterName,
Timestamp
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Timestamp
value,
 using the given
Calendar
object.
void
RowSet.
setUrl
(
String
url)
Sets the URL this
RowSet
object will use when it uses the
DriverManager
to create a connection.
void
RowSet.
setUsername
(
String
name)
Sets the username property for this
RowSet
object to the
 given
String
.
PooledConnectionBuilder
PooledConnectionBuilder.
user
(
String
username)
Specifies the username to be used when creating a connection
XAConnectionBuilder
XAConnectionBuilder.
user
(
String
username)
Specifies the username to be used when creating a connection
Method parameters in
javax.sql
with type arguments of type
String
Modifier and Type
Method
Description
void
RowSet.
setTypeMap
(
Map
<
String
,
Class
<?>> map)
Installs the given
java.util.Map
object as the default
 type map for this
RowSet
object.
Uses of
String
in
javax.sql.rowset
Fields in
javax.sql.rowset
declared as
String
Modifier and Type
Field
Description
static final
String
WebRowSet.
PUBLIC_XML_SCHEMA
The public identifier for the XML Schema definition that defines the XML
 tags and their valid values for a
WebRowSet
implementation.
static final
String
WebRowSet.
SCHEMA_SYSTEM_ID
The URL for the XML Schema definition file that defines the XML tags and
 their valid values for a
WebRowSet
implementation.
Methods in
javax.sql.rowset
that return
String
Modifier and Type
Method
Description
String
RowSetMetaDataImpl.
getCatalogName
(int columnIndex)
Retrieves the catalog name of the table from which the value
 in the designated column was derived.
String
RowSetMetaDataImpl.
getColumnClassName
(int columnIndex)
Retrieves the fully-qualified name of the class in the Java
 programming language to which a value in the designated column
 will be mapped.
String
RowSetMetaDataImpl.
getColumnLabel
(int columnIndex)
Retrieves the suggested column title for the designated
 column for use in printouts and displays.
String
RowSetMetaDataImpl.
getColumnName
(int columnIndex)
Retrieves the name of the designated column.
String
RowSetMetaDataImpl.
getColumnTypeName
(int columnIndex)
Retrieves the DBMS-specific type name for values stored in the
 designated column.
String
BaseRowSet.
getCommand
()
Retrieves the SQL query that is the command for this
RowSet
object.
String
BaseRowSet.
getDataSourceName
()
Returns the logical name that when supplied to a naming service
 that uses the Java Naming and Directory Interface (JNDI) API, will
 retrieve a
javax.sql.DataSource
object.
String
[]
Joinable.
getMatchColumnNames
()
Retrieves the names of the match columns that were set for this
RowSet
object with the method
setMatchColumn(String [] columnNames)
.
String
BaseRowSet.
getPassword
()
Returns the password used to create a database connection for this
RowSet
object.
String
[]
JoinRowSet.
getRowSetNames
()
Returns a
String
array containing the names of the
RowSet
objects added to this
JoinRowSet
object.
String
RowSetMetaDataImpl.
getSchemaName
(int columnIndex)
Retrieves the schema name of the table from which the value
 in the designated column was derived.
String
CachedRowSet.
getTableName
()
Returns an identifier for the object (table) that was used to
 create this
CachedRowSet
object.
String
RowSetMetaDataImpl.
getTableName
(int columnIndex)
Retrieves the name of the table from which the value
 in the designated column was derived.
String
BaseRowSet.
getUrl
()
Retrieves the JDBC URL that this
RowSet
object's
javax.sql.Reader
object uses to make a connection
 with a relational database using a JDBC technology-enabled driver.
String
BaseRowSet.
getUsername
()
Returns the user name used to create a database connection.
String
JoinRowSet.
getWhereClause
()
Return a SQL-like description of the WHERE clause being used
 in a JoinRowSet object.
Methods in
javax.sql.rowset
that return types with arguments of type
String
Modifier and Type
Method
Description
Map
<
String
,
Class
<?>>
BaseRowSet.
getTypeMap
()
Retrieves the type map associated with the
Connection
object for this
RowSet
object.
Methods in
javax.sql.rowset
with parameters of type
String
Modifier and Type
Method
Description
void
JoinRowSet.
addRowSet
(
RowSet
[] rowset,
String
[] columnName)
Adds one or more
RowSet
objects contained in the given
 array of
RowSet
objects to this
JoinRowSet
object and sets the match column for
 each of the
RowSet
objects to the match columns
 in the given array of column names.
void
JoinRowSet.
addRowSet
(
RowSet
rowset,
String
columnName)
Adds
rowset
to this
JoinRowSet
object and
 sets the designated column as the match column.
boolean
CachedRowSet.
columnUpdated
(
String
columnName)
Indicates whether the designated column in the current row of this
CachedRowSet
object has been updated.
boolean
Predicate.
evaluate
(
Object
value,
String
columnName)
This method is called by the
FilteredRowSet
object
 to check whether the value lies between the filtering criteria set
 using the setFilter method.
static
RowSetFactory
RowSetProvider.
newFactory
(
String
factoryClassName,
ClassLoader
cl)
Creates  a new instance of a
RowSetFactory
from the
 specified factory class name.
void
BaseRowSet.
setAsciiStream
(
String
parameterName,
InputStream
x)
Sets the designated parameter to the given input stream.
void
BaseRowSet.
setAsciiStream
(
String
parameterName,
InputStream
x,
 int length)
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
void
BaseRowSet.
setBigDecimal
(
String
parameterName,
BigDecimal
x)
Sets the designated parameter to the given
java.math.BigDecimal
value.
void
BaseRowSet.
setBinaryStream
(
String
parameterName,
InputStream
x)
Sets the designated parameter to the given input stream.
void
BaseRowSet.
setBinaryStream
(
String
parameterName,
InputStream
x,
 int length)
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
void
BaseRowSet.
setBlob
(
String
parameterName,
InputStream
inputStream)
Sets the designated parameter to a
InputStream
object.
void
BaseRowSet.
setBlob
(
String
parameterName,
InputStream
inputStream,
 long length)
Sets the designated parameter to a
InputStream
object.
void
BaseRowSet.
setBlob
(
String
parameterName,
Blob
x)
Sets the designated parameter to the given
java.sql.Blob
object.
void
BaseRowSet.
setBoolean
(
String
parameterName,
 boolean x)
Sets the designated parameter to the given Java
boolean
value.
void
BaseRowSet.
setByte
(
String
parameterName,
 byte x)
Sets the designated parameter to the given Java
byte
value.
void
BaseRowSet.
setBytes
(
String
parameterName,
 byte[] x)
Sets the designated parameter to the given Java array of bytes.
void
RowSetMetaDataImpl.
setCatalogName
(int columnIndex,
String
catalogName)
Sets the catalog name of the table from which the designated
 column was derived to
catalogName
.
void
BaseRowSet.
setCharacterStream
(
String
parameterName,
Reader
reader)
Sets the designated parameter to the given
Reader
object.
void
BaseRowSet.
setCharacterStream
(
String
parameterName,
Reader
reader,
 int length)
Sets the designated parameter to the given
Reader
object, which is the given number of characters long.
void
BaseRowSet.
setClob
(
String
parameterName,
Reader
reader)
Sets the designated parameter to a
Reader
object.
void
BaseRowSet.
setClob
(
String
parameterName,
Reader
reader,
 long length)
Sets the designated parameter to a
Reader
object.
void
BaseRowSet.
setClob
(
String
parameterName,
Clob
x)
Sets the designated parameter to the given
java.sql.Clob
object.
void
RowSetMetaDataImpl.
setColumnLabel
(int columnIndex,
String
label)
Sets the suggested column label for use in printouts and
 displays, if any, to
label
.
void
RowSetMetaDataImpl.
setColumnName
(int columnIndex,
String
columnName)
Sets the column name of the designated column to the given name.
void
RowSetMetaDataImpl.
setColumnTypeName
(int columnIndex,
String
typeName)
Sets the type name used by the data source for values stored in the
 designated column to the given type name.
void
BaseRowSet.
setCommand
(
String
cmd)
Sets this
RowSet
object's
command
property to
 the given
String
object and clears the parameters, if any,
 that were set for the previous command.
void
BaseRowSet.
setDataSourceName
(
String
name)
Sets the
DataSource
name property for this
RowSet
object to the given logical name and sets this
RowSet
object's
 Url property to
null
.
void
BaseRowSet.
setDate
(
String
parameterName,
Date
x)
Sets the designated parameter to the given
java.sql.Date
value
 using the default time zone of the virtual machine that is running
 the application.
void
BaseRowSet.
setDate
(
String
parameterName,
Date
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Date
value,
 using the given
Calendar
object.
void
BaseRowSet.
setDouble
(
String
parameterName,
 double x)
Sets the designated parameter to the given Java
double
value.
void
BaseRowSet.
setFloat
(
String
parameterName,
 float x)
Sets the designated parameter to the given Java
float
value.
void
BaseRowSet.
setInt
(
String
parameterName,
 int x)
Sets the designated parameter to the given Java
int
value.
void
BaseRowSet.
setLong
(
String
parameterName,
 long x)
Sets the designated parameter to the given Java
long
value.
void
Joinable.
setMatchColumn
(
String
columnName)
Sets the designated column as the match column for this
RowSet
object.
void
Joinable.
setMatchColumn
(
String
[] columnNames)
Sets the designated columns as the match column for this
RowSet
object.
void
BaseRowSet.
setNCharacterStream
(
String
parameterName,
Reader
value)
Sets the designated parameter to a
Reader
object.
void
BaseRowSet.
setNCharacterStream
(
String
parameterName,
Reader
value,
 long length)
Sets the designated parameter to a
Reader
object.
void
BaseRowSet.
setNClob
(
String
parameterName,
Reader
reader)
Sets the designated parameter to a
Reader
object.
void
BaseRowSet.
setNClob
(
String
parameterName,
Reader
reader,
 long length)
Sets the designated parameter to a
Reader
object.
void
BaseRowSet.
setNClob
(
String
parameterName,
NClob
value)
Sets the designated parameter to a
java.sql.NClob
object.
void
BaseRowSet.
setNString
(int parameterIndex,
String
value)
Sets the designated parameter to the given
String
object.
void
BaseRowSet.
setNString
(
String
parameterName,
String
value)
Sets the designated parameter to the given
String
object.
void
BaseRowSet.
setNull
(int parameterIndex,
 int sqlType,
String
typeName)
Sets the designated parameter to SQL
NULL
.
void
BaseRowSet.
setNull
(
String
parameterName,
 int sqlType)
Sets the designated parameter to SQL
NULL
.
void
BaseRowSet.
setNull
(
String
parameterName,
 int sqlType,
String
typeName)
Sets the designated parameter to SQL
NULL
.
void
BaseRowSet.
setObject
(
String
parameterName,
Object
x)
Sets the value of the designated parameter with the given object.
void
BaseRowSet.
setObject
(
String
parameterName,
Object
x,
 int targetSqlType)
Sets the value of the designated parameter with the given object.
void
BaseRowSet.
setObject
(
String
parameterName,
Object
x,
 int targetSqlType,
 int scale)
Sets the value of the designated parameter with the given object.
void
BaseRowSet.
setPassword
(
String
pass)
Sets the password used to create a database connection for this
RowSet
object to the given
String
object.
void
BaseRowSet.
setRowId
(
String
parameterName,
RowId
x)
Sets the designated parameter to the given
java.sql.RowId
object.
void
RowSetMetaDataImpl.
setSchemaName
(int columnIndex,
String
schemaName)
Sets the designated column's table's schema name, if any, to
schemaName
.
void
BaseRowSet.
setShort
(
String
parameterName,
 short x)
Sets the designated parameter to the given Java
short
value.
void
BaseRowSet.
setSQLXML
(
String
parameterName,
SQLXML
xmlObject)
Sets the designated parameter to the given
java.sql.SQLXML
object.
void
BaseRowSet.
setString
(int parameterIndex,
String
x)
Sets the designated parameter to the given
String
value.
void
BaseRowSet.
setString
(
String
parameterName,
String
x)
Sets the designated parameter to the given Java
String
value.
void
CachedRowSet.
setSyncProvider
(
String
provider)
Sets the
SyncProvider
object for this
CachedRowSet
object to the one specified.
void
CachedRowSet.
setTableName
(
String
tabName)
Sets the identifier for the table from which this
CachedRowSet
object was derived to the given table name.
void
RowSetMetaDataImpl.
setTableName
(int columnIndex,
String
tableName)
Sets the name of the table from which the designated column
 was derived to the given table name.
void
BaseRowSet.
setTime
(
String
parameterName,
Time
x)
Sets the designated parameter to the given
java.sql.Time
value.
void
BaseRowSet.
setTime
(
String
parameterName,
Time
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Time
value,
 using the given
Calendar
object.
void
BaseRowSet.
setTimestamp
(
String
parameterName,
Timestamp
x)
Sets the designated parameter to the given
java.sql.Timestamp
value.
void
BaseRowSet.
setTimestamp
(
String
parameterName,
Timestamp
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Timestamp
value,
 using the given
Calendar
object.
void
BaseRowSet.
setUrl
(
String
url)
Sets the Url property for this
RowSet
object
 to the given
String
object and sets the dataSource name
 property to
null
.
void
BaseRowSet.
setUsername
(
String
name)
Sets the username property for this
RowSet
object
 to the given user name.
Collection
<?>
CachedRowSet.
toCollection
(
String
column)
Converts the designated column in this
CachedRowSet
object
 to a
Collection
object.
void
Joinable.
unsetMatchColumn
(
String
columnName)
Unsets the designated column as the match column for this
RowSet
object.
void
Joinable.
unsetMatchColumn
(
String
[] columnName)
Unsets the designated columns as the match columns for this
RowSet
object.
Method parameters in
javax.sql.rowset
with type arguments of type
String
Modifier and Type
Method
Description
void
BaseRowSet.
setTypeMap
(
Map
<
String
,
Class
<?>> map)
Installs the given
java.util.Map
object as the type map
 associated with the
Connection
object for this
RowSet
object.
Constructors in
javax.sql.rowset
with parameters of type
String
Modifier
Constructor
Description
RowSetWarning
(
String
reason)
Constructs a
RowSetWarning
object
 with the given value for the reason; SQLState defaults to null,
 and vendorCode defaults to 0.
RowSetWarning
(
String
reason,
String
SQLState)
Constructs a
RowSetWarning
object initialized with the
 given values for the reason and SQLState.
RowSetWarning
(
String
reason,
String
SQLState,
 int vendorCode)
Constructs a fully specified
RowSetWarning
object initialized
 with the given values for the reason, SQLState and vendorCode.
Uses of
String
in
javax.sql.rowset.serial
Methods in
javax.sql.rowset.serial
that return
String
Modifier and Type
Method
Description
String
SerialArray.
getBaseTypeName
()
Retrieves the DBMS-specific type name for the elements in this
SerialArray
object.
String
SerialRef.
getBaseTypeName
()
Returns a string describing the base type name of the
Ref
.
String
SerialStruct.
getSQLTypeName
()
Retrieves the SQL type name for this
SerialStruct
object.
String
SerialClob.
getSubString
(long pos,
 int length)
Returns a copy of the substring contained in this
SerialClob
object, starting at the given position
 and continuing for the specified number or characters.
String
SQLInputImpl.
readNString
()
Reads the next attribute in the stream and returns it as a
String
in the Java programming language.
String
SQLInputImpl.
readString
()
Retrieves the next attribute in this
SQLInputImpl
object as
 a
String
in the Java programming language.
Methods in
javax.sql.rowset.serial
with parameters of type
String
Modifier and Type
Method
Description
long
SerialClob.
position
(
String
searchStr,
 long start)
Returns the position in this
SerialClob
object
 where the given
String
object begins, starting
 the search at the specified position.
int
SerialClob.
setString
(long pos,
String
str)
Writes the given Java
String
to the
CLOB
value that this
SerialClob
object represents, at the position
pos
.
int
SerialClob.
setString
(long pos,
String
str,
 int offset,
 int length)
Writes
len
characters of
str
, starting
 at character
offset
, to the
CLOB
value
 that this
Clob
represents.
void
SQLOutputImpl.
writeNString
(
String
x)
Writes the next attribute to the stream as a
String
in the Java programming language.
void
SQLOutputImpl.
writeString
(
String
x)
Writes a
String
in the Java programming language
 to this
SQLOutputImpl
object.
Method parameters in
javax.sql.rowset.serial
with type arguments of type
String
Modifier and Type
Method
Description
Object
SerialArray.
getArray
(long index,
 int count,
Map
<
String
,
Class
<?>> map)
Returns a new array that is a copy of a slice
 of this
SerialArray
object, starting with the
 element at the given index and containing the given number
 of consecutive elements.
Object
SerialArray.
getArray
(
Map
<
String
,
Class
<?>> map)
Returns a new array that is a copy of this
SerialArray
object, using the given type map for the custom
 mapping of each element when the elements are SQL UDTs.
Object
[]
SerialStruct.
getAttributes
(
Map
<
String
,
Class
<?>> map)
Retrieves the attributes for the SQL structured type that
 this
SerialStruct
represents as an array of
Object
values, using the given type map for
 custom mapping if appropriate.
Object
SerialRef.
getObject
(
Map
<
String
,
Class
<?>> map)
Returns an
Object
representing the SQL structured type
 to which this
SerialRef
object refers.
ResultSet
SerialArray.
getResultSet
(long index,
 int count,
Map
<
String
,
Class
<?>> map)
Retrieves a result set holding the elements of the subarray that starts at
 Retrieves a
ResultSet
object that contains a subarray of the
 elements in this
SerialArray
object, starting at
 index
index
and containing up to
count
successive
 elements.
ResultSet
SerialArray.
getResultSet
(
Map
<
String
,
Class
<?>> map)
Retrieves a
ResultSet
object that contains all of
 the elements of the SQL
ARRAY
value represented by this
SerialArray
object.
Constructors in
javax.sql.rowset.serial
with parameters of type
String
Modifier
Constructor
Description
SerialException
(
String
msg)
Creates a new
SerialException
with the
 specified message.
Constructor parameters in
javax.sql.rowset.serial
with type arguments of type
String
Modifier
Constructor
Description
SerialArray
(
Array
array,
Map
<
String
,
Class
<?>> map)
Constructs a new
SerialArray
object from the given
Array
object, using the given type map for the custom
 mapping of each element when the elements are SQL UDTs.
SerialStruct
(
SQLData
in,
Map
<
String
,
Class
<?>> map)
Constructs a
SerialStruct
object from the
 given
SQLData
object, using the given type
 map to custom map it to a class in the Java programming
 language.
SerialStruct
(
Struct
in,
Map
<
String
,
Class
<?>> map)
Constructs a
SerialStruct
object from the given
Struct
object, using the given
java.util.Map
object for custom mapping the SQL structured type or any of its
 attributes that are SQL structured types.
SQLInputImpl
(
Object
[] attributes,
Map
<
String
,
Class
<?>> map)
Creates an
SQLInputImpl
object initialized with the
 given array of attributes and the given type map.
SQLOutputImpl
(
Vector
<?> attributes,
Map
<
String
,
?> map)
Creates a new
SQLOutputImpl
object
 initialized with the given vector of attributes and
 type map.
Uses of
String
in
javax.sql.rowset.spi
Fields in
javax.sql.rowset.spi
declared as
String
Modifier and Type
Field
Description
static final
String
SyncFactory.
ROWSET_SYNC_PROVIDER
The standard property-id for a synchronization provider implementation
 name.
static final
String
SyncFactory.
ROWSET_SYNC_PROVIDER_VERSION
The standard property-id for a synchronization provider implementation
 version tag.
static final
String
SyncFactory.
ROWSET_SYNC_VENDOR
The standard property-id for a synchronization provider implementation
 vendor name.
Methods in
javax.sql.rowset.spi
that return
String
Modifier and Type
Method
Description
abstract
String
SyncProvider.
getProviderID
()
Returns the unique identifier for this
SyncProvider
object.
abstract
String
SyncProvider.
getVendor
()
Returns the vendor name of this
SyncProvider
instance
abstract
String
SyncProvider.
getVersion
()
Returns the release version of this
SyncProvider
instance.
Methods in
javax.sql.rowset.spi
with parameters of type
String
Modifier and Type
Method
Description
Object
SyncResolver.
getConflictValue
(
String
columnName)
Retrieves the value in the designated column in the current row of this
SyncResolver
object, which is the value in the data source
 that caused a conflict.
static
SyncProvider
SyncFactory.
getInstance
(
String
providerID)
Returns the
SyncProvider
instance identified by
providerID
.
static void
SyncFactory.
registerProvider
(
String
providerID)
Adds the given synchronization provider to the factory register.
void
SyncResolver.
setResolvedValue
(
String
columnName,
Object
obj)
Sets
obj
as the value in column
columnName
in the current row of the
RowSet
object that is being synchronized.
static void
SyncFactory.
unregisterProvider
(
String
providerID)
Removes the designated currently registered synchronization provider from the
 Factory SPI register.
Constructors in
javax.sql.rowset.spi
with parameters of type
String
Modifier
Constructor
Description
SyncFactoryException
(
String
msg)
Constructs an
SyncFactoryException
with the specified
 detail message.
SyncProviderException
(
String
msg)
Constructs a
SyncProviderException
object with the specified
 detail message.
Uses of
String
in
javax.swing
Fields in
javax.swing
declared as
String
Modifier and Type
Field
Description
static final
String
Action.
ACCELERATOR_KEY
The key used for storing a
KeyStroke
to be used as the
 accelerator for the action.
static final
String
JFileChooser.
ACCEPT_ALL_FILE_FILTER_USED_CHANGED_PROPERTY
Identifies whether the AcceptAllFileFilter is used or not.
static final
String
JFileChooser.
ACCESSORY_CHANGED_PROPERTY
Says that a different accessory component is in use
 (for example, to preview files).
static final
String
Action.
ACTION_COMMAND_KEY
The key used to determine the command
String
for the
ActionEvent
that will be created when an
Action
is going to be notified as the result of
 residing in a
Keymap
associated with a
JComponent
.
protected
String
DefaultButtonModel.
actionCommand
The action command string fired by the button.
protected
String
JComboBox.
actionCommand
This protected field is implementation specific.
static final
String
JTree.
ANCHOR_SELECTION_PATH_PROPERTY
Bound property name for anchor selection path.
static final
String
JFileChooser.
APPROVE_BUTTON_MNEMONIC_CHANGED_PROPERTY
Identifies change in the mnemonic for the approve (yes, ok) button.
static final
String
JFileChooser.
APPROVE_BUTTON_TEXT_CHANGED_PROPERTY
Identifies change in the text on the approve (yes, ok) button.
static final
String
JFileChooser.
APPROVE_BUTTON_TOOL_TIP_TEXT_CHANGED_PROPERTY
Identifies change in the tooltip text for the approve (yes, ok)
 button.
static final
String
JFileChooser.
APPROVE_SELECTION
Instruction to approve the current selection
 (same as pressing yes or ok).
static final
String
SpringLayout.
BASELINE
Specifies the baseline of a component.
static final
String
AbstractButton.
BORDER_PAINTED_CHANGED_PROPERTY
Identifies a change to having the border drawn,
 or having it not drawn.
static final
String
JCheckBox.
BORDER_PAINTED_FLAT_CHANGED_PROPERTY
Identifies a change to the flat property.
static final
String
JSplitPane.
BOTTOM
Used to add a
Component
below the other
Component
.
static final
String
JFileChooser.
CANCEL_SELECTION
Instruction to cancel the current selection.
static final
String
JTree.
CELL_EDITOR_PROPERTY
Bound property name for
cellEditor
.
static final
String
JTree.
CELL_RENDERER_PROPERTY
Bound property name for
cellRenderer
.
static final
String
JFileChooser.
CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY
Identifies a change in the list of predefined file filters
 the user can choose from.
static final
String
JColorChooser.
CHOOSER_PANELS_PROPERTY
The chooserPanel array property name.
static final
String
ScrollPaneConstants.
COLUMN_HEADER
Identifies the area at the top the viewport between the
 upper left corner and the upper right corner.
static final
String
AbstractButton.
CONTENT_AREA_FILLED_CHANGED_PROPERTY
Identifies a change to having the button paint the content area.
static final
String
JInternalFrame.
CONTENT_PANE_PROPERTY
Bound property name.
static final
String
JSplitPane.
CONTINUOUS_LAYOUT_PROPERTY
Bound property name for continuousLayout.
static final
String
JFileChooser.
CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY
Instruction to display the control buttons.
static final
String
Action.
DEFAULT
Not currently used.
static final
String
JFileChooser.
DIALOG_TITLE_CHANGED_PROPERTY
Identifies a change in the dialog title.
static final
String
JFileChooser.
DIALOG_TYPE_CHANGED_PROPERTY
Identifies a change in the type of files displayed (files only,
 directories only, or both files and directories).
static final
String
JFileChooser.
DIRECTORY_CHANGED_PROPERTY
Identifies user's directory change.
static final
String
AbstractButton.
DISABLED_ICON_CHANGED_PROPERTY
Identifies a change to the icon used when the button has
 been disabled.
static final
String
AbstractButton.
DISABLED_SELECTED_ICON_CHANGED_PROPERTY
Identifies a change to the icon used when the button has been
 disabled and selected.
static final
String
Action.
DISPLAYED_MNEMONIC_INDEX_KEY
The key used for storing an
Integer
that corresponds
 to the index in the text (identified by the
NAME
property) that the decoration for a mnemonic should be rendered at.
static final
String
JSplitPane.
DIVIDER
Used to add a
Component
that will represent the divider.
static final
String
JSplitPane.
DIVIDER_LOCATION_PROPERTY
Bound property for the dividerLocation.
static final
String
JSplitPane.
DIVIDER_SIZE_PROPERTY
Bound property name for border.
static final
String
SpringLayout.
EAST
Specifies the right edge of a component's bounding rectangle.
static final
String
JTree.
EDITABLE_PROPERTY
Bound property name for
editable
.
static final
String
JTree.
EXPANDS_SELECTED_PATHS_PROPERTY
Bound property name for expands selected paths property
static final
String
JFileChooser.
FILE_FILTER_CHANGED_PROPERTY
User changed the kind of files to display.
static final
String
JFileChooser.
FILE_HIDING_CHANGED_PROPERTY
Identifies a change in the display-hidden-files property.
static final
String
JFileChooser.
FILE_SELECTION_MODE_CHANGED_PROPERTY
Identifies a change in the kind of selection (single,
 multiple, etc.).
static final
String
JFileChooser.
FILE_SYSTEM_VIEW_CHANGED_PROPERTY
Says that a different object is being used to find available drives
 on the system.
static final
String
JFileChooser.
FILE_VIEW_CHANGED_PROPERTY
Says that a different object is being used to retrieve file
 information.
static final
String
FocusManager.
FOCUS_MANAGER_CLASS_PROPERTY
This field is obsolete, and its use is discouraged since its
 specification is incompatible with the 1.4 focus APIs.
static final
String
AbstractButton.
FOCUS_PAINTED_CHANGED_PROPERTY
Identifies a change to having the border highlighted when focused,
 or not.
static final
String
JInternalFrame.
FRAME_ICON_PROPERTY
Bound property name.
static final
String
JInternalFrame.
GLASS_PANE_PROPERTY
Bound property name.
static final
String
SpringLayout.
HEIGHT
Specifies the height of a component's bounding rectangle.
static final
String
JEditorPane.
HONOR_DISPLAY_PROPERTIES
Key for a client property used to indicate whether
 the default font and foreground color from the component are
 used if a font or foreground color is not specified in the styled
 text.
static final
String
AbstractButton.
HORIZONTAL_ALIGNMENT_CHANGED_PROPERTY
Identifies a change in the button's horizontal alignment.
static final
String
SpringLayout.
HORIZONTAL_CENTER
Specifies the horizontal center of a component's bounding rectangle.
static final
String
ScrollPaneConstants.
HORIZONTAL_SCROLLBAR
Identifies a horizontal scrollbar.
static final
String
ScrollPaneConstants.
HORIZONTAL_SCROLLBAR_POLICY
Identifies the horizontal scroll bar policy property.
static final
String
AbstractButton.
HORIZONTAL_TEXT_POSITION_CHANGED_PROPERTY
Identifies a change in the button's horizontal text position.
static final
String
AbstractButton.
ICON_CHANGED_PROPERTY
Identifies a change to the icon that represents the button.
static final
String
JOptionPane.
ICON_PROPERTY
Bound property name for
icon
.
static final
String
JOptionPane.
INITIAL_SELECTION_VALUE_PROPERTY
Bound property name for
initialSelectionValue
.
static final
String
JOptionPane.
INITIAL_VALUE_PROPERTY
Bound property name for
initialValue
.
static final
String
JOptionPane.
INPUT_VALUE_PROPERTY
Bound property name for
inputValue
.
static final
String
JTree.
INVOKES_STOP_CELL_EDITING_PROPERTY
Bound property name for
messagesStopCellEditing
.
static final
String
JInternalFrame.
IS_CLOSED_PROPERTY
Constrained property name indicating that the internal frame is closed.
static final
String
JInternalFrame.
IS_ICON_PROPERTY
Constrained property name indicating that the internal frame is iconified.
static final
String
JInternalFrame.
IS_MAXIMUM_PROPERTY
Constrained property name indicating that the internal frame is maximized.
static final
String
JInternalFrame.
IS_SELECTED_PROPERTY
Constrained property name indicated that this frame has
 selected status.
static final
String
Action.
LARGE_ICON_KEY
The key used for storing an
Icon
.
static final
String
JTree.
LARGE_MODEL_PROPERTY
Bound property name for
largeModel
.
static final
String
JSplitPane.
LAST_DIVIDER_LOCATION_PROPERTY
Bound property for lastLocation.
static final
String
JLayeredPane.
LAYER_PROPERTY
Bound property
static final
String
JInternalFrame.
LAYERED_PANE_PROPERTY
Bound property name.
static final
String
JTree.
LEAD_SELECTION_PATH_PROPERTY
Bound property name for
leadSelectionPath
.
static final
String
JSplitPane.
LEFT
Used to add a
Component
to the left of the other
Component
.
static final
String
Action.
LONG_DESCRIPTION
The key used for storing a longer
String
description for the action, could be used for context-sensitive help.
static final
String
ScrollPaneConstants.
LOWER_LEADING_CORNER
Identifies the lower leading edge corner of the viewport.
static final
String
ScrollPaneConstants.
LOWER_LEFT_CORNER
Identifies the lower left corner of the viewport.
static final
String
ScrollPaneConstants.
LOWER_RIGHT_CORNER
Identifies the lower right corner of the viewport.
static final
String
ScrollPaneConstants.
LOWER_TRAILING_CORNER
Identifies the lower trailing edge corner of the viewport.
static final
String
AbstractButton.
MARGIN_CHANGED_PROPERTY
Identifies a change in the button's margins.
static final
String
JInternalFrame.
MENU_BAR_PROPERTY
Bound property name.
static final
String
JOptionPane.
MESSAGE_PROPERTY
Bound property name for
message
.
static final
String
JOptionPane.
MESSAGE_TYPE_PROPERTY
Bound property name for
type
.
static final
String
AbstractButton.
MNEMONIC_CHANGED_PROPERTY
Identifies a change to the button's mnemonic.
static final
String
Action.
MNEMONIC_KEY
The key used for storing an
Integer
that corresponds to
 one of the
KeyEvent
key codes.
static final
String
AbstractButton.
MODEL_CHANGED_PROPERTY
Identifies a change in the button model.
static final
String
JFileChooser.
MULTI_SELECTION_ENABLED_CHANGED_PROPERTY
Enables multiple-file selections.
static final
String
Action.
NAME
The key used for storing the
String
name
 for the action, used for a menu or button.
static final
String
SpringLayout.
NORTH
Specifies the top edge of a component's bounding rectangle.
static final
String
JTextField.
notifyAction
Name of the action to send notification that the
 contents of the field have been accepted.
static final
String
JSplitPane.
ONE_TOUCH_EXPANDABLE_PROPERTY
Bound property for oneTouchExpandable.
static final
String
JOptionPane.
OPTION_TYPE_PROPERTY
Bound property name for
optionType
.
static final
String
JOptionPane.
OPTIONS_PROPERTY
Bound property name for
option
.
static final
String
JSplitPane.
ORIENTATION_PROPERTY
Bound property name for orientation (horizontal or vertical).
static final
String
AbstractButton.
PRESSED_ICON_CHANGED_PROPERTY
Identifies a change to the icon used when the button has been
 pressed.
static final
String
JColorChooser.
PREVIEW_PANEL_PROPERTY
The preview panel property name.
protected
String
JProgressBar.
progressString
An optional string that can be displayed on the progress bar.
static final
String
JSplitPane.
RESIZE_WEIGHT_PROPERTY
Bound property for weight.
static final
String
JSplitPane.
RIGHT
Used to add a
Component
to the right of the other
Component
.
static final
String
AbstractButton.
ROLLOVER_ENABLED_CHANGED_PROPERTY
Identifies a change from rollover enabled to disabled or back
 to enabled.
static final
String
AbstractButton.
ROLLOVER_ICON_CHANGED_PROPERTY
Identifies a change to the icon used when the cursor is over
 the button.
static final
String
AbstractButton.
ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY
Identifies a change to the icon used when the cursor is
 over the button and it has been selected.
static final
String
JInternalFrame.
ROOT_PANE_PROPERTY
Bound property name.
static final
String
JTree.
ROOT_VISIBLE_PROPERTY
Bound property name for
rootVisible
.
static final
String
ScrollPaneConstants.
ROW_HEADER
Identifies the area along the left side of the viewport between the
 upper left corner and the lower left corner.
static final
String
JTree.
ROW_HEIGHT_PROPERTY
Bound property name for
rowHeight
.
static final
String
JTree.
SCROLLS_ON_EXPAND_PROPERTY
Bound property name for
scrollsOnExpand
.
static final
String
JFileChooser.
SELECTED_FILE_CHANGED_PROPERTY
Identifies change in user's single-file selection.
static final
String
JFileChooser.
SELECTED_FILES_CHANGED_PROPERTY
Identifies change in user's multiple-file selection.
static final
String
AbstractButton.
SELECTED_ICON_CHANGED_PROPERTY
Identifies a change to the icon used when the button has
 been selected.
static final
String
Action.
SELECTED_KEY
The key used for storing a
Boolean
that corresponds
 to the selected state.
static final
String
JColorChooser.
SELECTION_MODEL_PROPERTY
The selection model property name.
static final
String
JTree.
SELECTION_MODEL_PROPERTY
Bound property name for selectionModel.
static final
String
JOptionPane.
SELECTION_VALUES_PROPERTY
Bound property name for
selectionValues
.
static final
String
Action.
SHORT_DESCRIPTION
The key used for storing a short
String
description for the action, used for tooltip text.
static final
String
JTree.
SHOWS_ROOT_HANDLES_PROPERTY
Bound property name for
showsRootHandles
.
static final
String
Action.
SMALL_ICON
The key used for storing a small
Icon
, such
 as
ImageIcon
.
static final
String
SpringLayout.
SOUTH
Specifies the bottom edge of a component's bounding rectangle.
static final
String
AbstractButton.
TEXT_CHANGED_PROPERTY
Identifies a change in the button's text.
protected
String
JInternalFrame.
title
The title displayed in this internal frame's title bar.
static final
String
JInternalFrame.
TITLE_PROPERTY
Bound property name.
static final
String
JTree.
TOGGLE_CLICK_COUNT_PROPERTY
Bound property name for
toggleClickCount
.
static final
String
JComponent.
TOOL_TIP_TEXT_KEY
The comment to display when the cursor is over the component,
 also known as a "value tip", "flyover help", or "flyover label".
static final
String
JSplitPane.
TOP
Used to add a
Component
above the other
Component
.
static final
String
JTree.
TREE_MODEL_PROPERTY
Bound property name for
treeModel
.
static final
String
ScrollPaneConstants.
UPPER_LEADING_CORNER
Identifies the upper leading edge corner of the viewport.
static final
String
ScrollPaneConstants.
UPPER_LEFT_CORNER
Identifies the upper left corner of the viewport.
static final
String
ScrollPaneConstants.
UPPER_RIGHT_CORNER
Identifies the upper right corner of the viewport.
static final
String
ScrollPaneConstants.
UPPER_TRAILING_CORNER
Identifies the upper trailing edge corner of the viewport.
static final
String
JOptionPane.
VALUE_PROPERTY
Bound property name for
value
.
static final
String
AbstractButton.
VERTICAL_ALIGNMENT_CHANGED_PROPERTY
Identifies a change in the button's vertical alignment.
static final
String
SpringLayout.
VERTICAL_CENTER
Specifies the vertical center of a component's bounding rectangle.
static final
String
ScrollPaneConstants.
VERTICAL_SCROLLBAR
Identifies a vertical scrollbar.
static final
String
ScrollPaneConstants.
VERTICAL_SCROLLBAR_POLICY
Identifies the vertical scroll bar policy property.
static final
String
AbstractButton.
VERTICAL_TEXT_POSITION_CHANGED_PROPERTY
Identifies a change in the button's vertical text position.
static final
String
ScrollPaneConstants.
VIEWPORT
Identifies a "viewport" or display area, within which
 scrolled contents are visible.
static final
String
JTree.
VISIBLE_ROW_COUNT_PROPERTY
Bound property name for
visibleRowCount
.
static final
String
JEditorPane.
W3C_LENGTH_UNITS
Key for a client property used to indicate whether
w3c compliant
length units are used for html rendering.
static final
String
JOptionPane.
WANTS_INPUT_PROPERTY
Bound property name for
wantsInput
.
static final
String
SpringLayout.
WEST
Specifies the left edge of a component's bounding rectangle.
static final
String
SpringLayout.
WIDTH
Specifies the width of a component's bounding rectangle.
Methods in
javax.swing
that return
String
Modifier and Type
Method
Description
String
JTree.
convertValueToText
(
Object
value,
 boolean selected,
 boolean expanded,
 boolean leaf,
 int row,
 boolean hasFocus)
Called by the renderers to convert the specified value to
 text.
String
AbstractButton.AccessibleAbstractButton.
getAccessibleActionDescription
(int i)
Return a description of the specified action of the object.
String
JComboBox.AccessibleJComboBox.
getAccessibleActionDescription
(int i)
Return a description of the specified action of the object.
String
JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink.
getAccessibleActionDescription
(int i)
Return a String description of this particular
 link action.
String
JList.AccessibleJList.AccessibleJListChild.
getAccessibleActionDescription
(int i)
Returns a description of the specified action of the object.
String
JSlider.AccessibleJSlider.
getAccessibleActionDescription
(int i)
Returns a description of the specified action of the object.
String
JSpinner.AccessibleJSpinner.
getAccessibleActionDescription
(int i)
Returns a description of the specified action of the object.
String
JTree.AccessibleJTree.AccessibleJTreeNode.
getAccessibleActionDescription
(int i)
Return a description of the specified action of the tree node.
String
JComponent.AccessibleJComponent.
getAccessibleDescription
()
Gets the accessible description of this object.
String
JEditorPane.AccessibleJEditorPane.
getAccessibleDescription
()
Gets the accessibleDescription property of this object.
String
JTable.AccessibleJTable.AccessibleJTableCell.
getAccessibleDescription
()
Gets the accessible description of this object.
String
JToolTip.AccessibleJToolTip.
getAccessibleDescription
()
Get the accessible description of this object.
String
JTree.AccessibleJTree.AccessibleJTreeNode.
getAccessibleDescription
()
Get the accessible description of this object.
String
ProgressMonitor.AccessibleProgressMonitor.
getAccessibleDescription
()
Gets the accessibleDescription property of this object.
String
ImageIcon.AccessibleImageIcon.
getAccessibleIconDescription
()
Gets the description of the icon.
String
AbstractButton.AccessibleAbstractButton.
getAccessibleName
()
Returns the accessible name of this object.
String
JComponent.AccessibleJComponent.
getAccessibleName
()
Gets the accessible name of this object.
String
JDialog.AccessibleJDialog.
getAccessibleName
()
Get the accessible name of this object.
String
JFrame.AccessibleJFrame.
getAccessibleName
()
Get the accessible name of this object.
String
JInternalFrame.AccessibleJInternalFrame.
getAccessibleName
()
Get the accessible name of this object.
String
JLabel.AccessibleJLabel.
getAccessibleName
()
Get the accessible name of this object.
String
JTabbedPane.AccessibleJTabbedPane.
getAccessibleName
()
Returns the accessible name of this object, or
null
if
 there is no accessible name.
String
JTable.AccessibleJTable.AccessibleJTableCell.
getAccessibleName
()
Gets the accessible name of this object.
String
JTree.AccessibleJTree.AccessibleJTreeNode.
getAccessibleName
()
Get the accessible name of this object.
String
ProgressMonitor.AccessibleProgressMonitor.
getAccessibleName
()
Gets the accessibleName property of this object.
String
AbstractButton.
getActionCommand
()
Returns the action command for this button.
String
ButtonModel.
getActionCommand
()
Returns the action command string for the button.
String
DefaultButtonModel.
getActionCommand
()
Returns the action command string for the button.
String
JComboBox.
getActionCommand
()
Returns the action command that is included in the event sent to
 action listeners.
String
Timer.
getActionCommand
()
Returns the string that will be delivered as the action command
 in
ActionEvent
s fired by this timer.
String
AbstractButton.AccessibleAbstractButton.
getAfterIndex
(int part,
 int index)
Returns the String after a given index.
String
JLabel.AccessibleJLabel.
getAfterIndex
(int part,
 int index)
Returns the String after a given index.
String
JPasswordField.AccessibleJPasswordField.
getAfterIndex
(int part,
 int index)
Returns the
String
after a given
index
.
String
JSpinner.AccessibleJSpinner.
getAfterIndex
(int part,
 int index)
Returns the String after a given index.
String
ProgressMonitor.AccessibleProgressMonitor.
getAfterIndex
(int part,
 int index)
Returns the String after a given index.
String
JFileChooser.
getApproveButtonText
()
Returns the text used in the
ApproveButton
in the
FileChooserUI
.
String
JFileChooser.
getApproveButtonToolTipText
()
Returns the tooltip text used in the
ApproveButton
.
String
AbstractButton.AccessibleAbstractButton.
getAtIndex
(int part,
 int index)
Returns the String at a given index.
String
JLabel.AccessibleJLabel.
getAtIndex
(int part,
 int index)
Returns the String at a given index.
String
JPasswordField.AccessibleJPasswordField.
getAtIndex
(int part,
 int index)
Returns the
String
at a given
index
.
String
JSpinner.AccessibleJSpinner.
getAtIndex
(int part,
 int index)
Returns the String at a given index.
String
ProgressMonitor.AccessibleProgressMonitor.
getAtIndex
(int part,
 int index)
Returns the String at a given index.
String
AbstractButton.AccessibleAbstractButton.
getBeforeIndex
(int part,
 int index)
Returns the String before a given index.
String
JLabel.AccessibleJLabel.
getBeforeIndex
(int part,
 int index)
Returns the String before a given index.
String
JPasswordField.AccessibleJPasswordField.
getBeforeIndex
(int part,
 int index)
Returns the
String
before a given
index
.
String
JSpinner.AccessibleJSpinner.
getBeforeIndex
(int part,
 int index)
Returns the String before a given index.
String
ProgressMonitor.AccessibleProgressMonitor.
getBeforeIndex
(int part,
 int index)
Returns the String before a given index.
protected
String
JComponent.AccessibleJComponent.
getBorderTitle
(
Border
b)
Recursively search through the border hierarchy (if it exists)
 for a TitledBorder with a non-null title.
String
UIManager.LookAndFeelInfo.
getClassName
()
Returns the name of the class that implements this look and feel.
String
JTable.
getColumnName
(int column)
Returns the name of the column appearing in the view at
 column position
column
.
final
String
JEditorPane.
getContentType
()
Gets the type of content that this editor
 is currently set to deal with.
static
String
UIManager.
getCrossPlatformLookAndFeelClassName
()
Returns the name of the
LookAndFeel
class that implements
 the default cross platform look and feel -- the Java
 Look and Feel (JLF).
String
ImageIcon.
getDescription
()
Gets the description of the image.
String
JFileChooser.
getDescription
(
File
f)
Returns the file description.
abstract
String
LookAndFeel.
getDescription
()
Return a one line description of this look and feel implementation,
 e.g.
String
JFileChooser.
getDialogTitle
()
Gets the string that goes in the
JFileChooser
's titlebar.
static
String
JEditorPane.
getEditorKitClassNameForContentType
(
String
type)
Returns the currently registered
EditorKit
class name for the
 type
type
.
abstract
String
LookAndFeel.
getID
()
Return a string that identifies this look and feel.
String
AbstractButton.
getLabel
()
Deprecated.
- Replaced by
getText
String
JPopupMenu.
getLabel
()
Returns the popup menu's label
String
JEditorPane.JEditorPaneAccessibleHypertextSupport.
getLinkText
(int linkIndex)
Returns the contiguous text within the document that
 is associated with this hyperlink.
String
JFileChooser.
getName
(
File
f)
Returns the filename.
abstract
String
LookAndFeel.
getName
()
Return a short string that identifies this look and feel, e.g.
String
UIManager.LookAndFeelInfo.
getName
()
Returns the name of the look and feel in a form suitable
 for a menu or other presentation
String
ProgressMonitor.
getNote
()
Specifies the additional note that is displayed along with the
 progress message.
String
AbstractButton.AccessibleAbstractButton.
getSelectedText
()
Returns the portion of the text that is selected.
String
JLabel.AccessibleJLabel.
getSelectedText
()
Returns the portion of the text that is selected.
String
JSpinner.AccessibleJSpinner.
getSelectedText
()
Returns the portion of the text that is selected.
String
ProgressMonitor.AccessibleProgressMonitor.
getSelectedText
()
Returns the portion of the text that is selected.
String
JProgressBar.
getString
()
Returns a
String
representation of the current progress.
String
UIDefaults.
getString
(
Object
key)
If the value of
key
is a
String
return it,
 otherwise return
null
.
String
UIDefaults.
getString
(
Object
key,
Locale
l)
If the value of
key
for the given
Locale
is a
String
return it, otherwise return
null
.
static
String
UIManager.
getString
(
Object
key)
Returns a string from the defaults.
static
String
UIManager.
getString
(
Object
key,
Locale
l)
Returns a string from the defaults that is appropriate for the
 given locale.
String
RowFilter.Entry.
getStringValue
(int index)
Returns the string value at the specified index.
String
DefaultRowSorter.ModelWrapper.
getStringValueAt
(int row,
 int column)
Returns the value as a
String
at the specified
 index.
static
String
UIManager.
getSystemLookAndFeelClassName
()
Returns the name of the
LookAndFeel
class that implements
 the native system look and feel if there is one, otherwise
 the name of the default cross platform
LookAndFeel
class.
String
AbstractButton.
getText
()
Returns the button's text.
String
JEditorPane.
getText
()
Returns the text contained in this
TextComponent
in terms of the
 content type of this editor.
String
JLabel.
getText
()
Returns the text string that the label displays.
String
JPasswordField.
getText
()
Deprecated.
As of Java 2 platform v1.2,
 replaced by
getPassword
.
String
JPasswordField.
getText
(int offs,
 int len)
Deprecated.
As of Java 2 platform v1.2,
 replaced by
getPassword
.
String
JPasswordField.AccessibleJPasswordField.
getTextRange
(int startIndex,
 int endIndex)
Returns the text between two
indices
.
String
JSpinner.AccessibleJSpinner.
getTextRange
(int startIndex,
 int endIndex)
Returns the text string between two indices.
String
JToolTip.
getTipText
()
Returns the text that is shown when the tool tip is displayed.
String
JInternalFrame.
getTitle
()
Returns the title of the
JInternalFrame
.
String
JTabbedPane.
getTitleAt
(int index)
Returns the tab title at
index
.
String
AbstractButton.AccessibleAbstractButton.
getTitledBorderText
()
Returns the titled border text
String
JComponent.AccessibleJComponent.
getTitledBorderText
()
Returns the titled border text
String
JLabel.AccessibleJLabel.
getTitledBorderText
()
Returns the titled border text
String
AbstractButton.AccessibleAbstractButton.
getToolTipText
()
Returns the tool tip text
String
JComponent.AccessibleJComponent.
getToolTipText
()
Returns the tool tip text
String
JComponent.
getToolTipText
()
Returns the tooltip string that has been set with
setToolTipText
.
String
JComponent.
getToolTipText
(
MouseEvent
event)
Returns the string to be used as the tooltip for
event
.
String
JLabel.AccessibleJLabel.
getToolTipText
()
Returns the tool tip text
String
JList.
getToolTipText
(
MouseEvent
event)
Returns the tooltip text to be used for the given event.
String
JTabbedPane.
getToolTipText
(
MouseEvent
event)
Returns the tooltip text for the component determined by the
 mouse event location.
String
JTable.
getToolTipText
(
MouseEvent
event)
Overrides
JComponent
's
getToolTipText
method in order to allow the renderer's tips to be used
 if it has text set.
String
JTree.
getToolTipText
(
MouseEvent
event)
Overrides
JComponent
's
getToolTipText
method in order to allow
 renderer's tips to be used if it has text set.
String
JTabbedPane.
getToolTipTextAt
(int index)
Returns the tab tooltip text at
index
.
String
JFileChooser.
getTypeDescription
(
File
f)
Returns the file type.
String
JButton.
getUIClassID
()
Returns a string that specifies the name of the L&F class
 that renders this component.
String
JCheckBox.
getUIClassID
()
Returns a string that specifies the name of the L&F class
 that renders this component.
String
JCheckBoxMenuItem.
getUIClassID
()
Returns the name of the L&F class
 that renders this component.
String
JColorChooser.
getUIClassID
()
Returns the name of the L&F class that renders this component.
String
JComboBox.
getUIClassID
()
Returns the name of the L&F class that renders this component.
String
JComponent.
getUIClassID
()
Returns the
UIDefaults
key used to
 look up the name of the
swing.plaf.ComponentUI
class that defines the look and feel
 for this component.
String
JDesktopPane.
getUIClassID
()
Returns the name of the L&F class that renders this component.
String
JEditorPane.
getUIClassID
()
Gets the class ID for the UI.
String
JFileChooser.
getUIClassID
()
Returns a string that specifies the name of the L&F class
 that renders this component.
String
JFormattedTextField.
getUIClassID
()
Gets the class ID for a UI.
String
JInternalFrame.
getUIClassID
()
Returns the name of the look-and-feel
 class that renders this component.
String
JInternalFrame.JDesktopIcon.
getUIClassID
()
Returns the name of the look-and-feel
 class that renders this component.
String
JLabel.
getUIClassID
()
Returns a string that specifies the name of the l&f class
 that renders this component.
String
JList.
getUIClassID
()
Returns
"ListUI"
, the
UIDefaults
key used to look
 up the name of the
javax.swing.plaf.ListUI
class that defines
 the look and feel for this component.
String
JMenu.
getUIClassID
()
Returns the name of the L&F class that renders this component.
String
JMenuBar.
getUIClassID
()
Returns the name of the L&F class that renders this component.
String
JMenuItem.
getUIClassID
()
Returns the suffix used to construct the name of the L&F class used to
 render this component.
String
JOptionPane.
getUIClassID
()
Returns the name of the UI class that implements the
 L&F for this component.
String
JPanel.
getUIClassID
()
Returns a string that specifies the name of the L&F class
 that renders this component.
String
JPasswordField.
getUIClassID
()
Returns the name of the L&F class that renders this component.
String
JPopupMenu.
getUIClassID
()
Returns the name of the L&F class that renders this component.
String
JPopupMenu.Separator.
getUIClassID
()
Returns the name of the L&F class that renders this component.
String
JProgressBar.
getUIClassID
()
Returns the name of the look-and-feel class that renders this component.
String
JRadioButton.
getUIClassID
()
Returns the name of the L&F class
 that renders this component.
String
JRadioButtonMenuItem.
getUIClassID
()
Returns the name of the L&F class that renders this component.
String
JRootPane.
getUIClassID
()
Returns a string that specifies the name of the L&F class
 that renders this component.
String
JScrollBar.
getUIClassID
()
Returns the name of the LookAndFeel class for this component.
String
JScrollPane.
getUIClassID
()
Returns the suffix used to construct the name of the L&F class used to
 render this component.
String
JSeparator.
getUIClassID
()
Returns the name of the L&F class that renders this component.
String
JSlider.
getUIClassID
()
Returns the name of the L&F class that renders this component.
String
JSpinner.
getUIClassID
()
Returns the suffix used to construct the name of the look and feel
 (L&F) class used to render this component.
String
JSplitPane.
getUIClassID
()
Returns the name of the L&F class that renders this component.
String
JTabbedPane.
getUIClassID
()
Returns the name of the UI class that implements the
 L&F for this component.
String
JTable.
getUIClassID
()
Returns the suffix used to construct the name of the L&F class used to
 render this component.
String
JTextArea.
getUIClassID
()
Returns the class ID for the UI.
String
JTextField.
getUIClassID
()
Gets the class ID for a UI.
String
JTextPane.
getUIClassID
()
Returns the class ID for the UI.
String
JToggleButton.
getUIClassID
()
Returns a string that specifies the name of the l&f class
 that renders this component.
String
JToolBar.
getUIClassID
()
Returns the name of the L&F class that renders this component.
String
JToolBar.Separator.
getUIClassID
()
Returns the name of the L&F class that renders this component.
String
JToolTip.
getUIClassID
()
Returns the name of the L&F class that renders this component.
String
JTree.
getUIClassID
()
Returns the name of the L&F class that renders this component.
String
JViewport.
getUIClassID
()
Returns a string that specifies the name of the L&F class
 that renders this component.
final
String
JInternalFrame.
getWarningString
()
Gets the warning string that is displayed with this internal frame.
static
String
SwingUtilities.
layoutCompoundLabel
(
FontMetrics
fm,
String
text,
Icon
icon,
 int verticalAlignment,
 int horizontalAlignment,
 int verticalTextPosition,
 int horizontalTextPosition,
Rectangle
viewR,
Rectangle
iconR,
Rectangle
textR,
 int textIconGap)
Compute and return the location of the icons origin, the
 location of origin of the text baseline, and a possibly clipped
 version of the compound labels string.
static
String
SwingUtilities.
layoutCompoundLabel
(
JComponent
c,
FontMetrics
fm,
String
text,
Icon
icon,
 int verticalAlignment,
 int horizontalAlignment,
 int verticalTextPosition,
 int horizontalTextPosition,
Rectangle
viewR,
Rectangle
iconR,
Rectangle
textR,
 int textIconGap)
Compute and return the location of the icons origin, the
 location of origin of the text baseline, and a possibly clipped
 version of the compound labels string.
protected
String
AbstractButton.
paramString
()
Returns a string representation of this
AbstractButton
.
protected
String
JApplet.
paramString
()
Deprecated, for removal: This API element is subject to removal in a future version.
Returns a string representation of this JApplet.
protected
String
JButton.
paramString
()
Returns a string representation of this
JButton
.
protected
String
JCheckBox.
paramString
()
Returns a string representation of this JCheckBox.
protected
String
JCheckBoxMenuItem.
paramString
()
Returns a string representation of this JCheckBoxMenuItem.
protected
String
JColorChooser.
paramString
()
Returns a string representation of this
JColorChooser
.
protected
String
JComboBox.
paramString
()
Returns a string representation of this
JComboBox
.
protected
String
JComponent.
paramString
()
Returns a string representation of this
JComponent
.
protected
String
JDesktopPane.
paramString
()
Returns a string representation of this
JDesktopPane
.
protected
String
JDialog.
paramString
()
Returns a string representation of this
JDialog
.
protected
String
JEditorPane.
paramString
()
Returns a string representation of this
JEditorPane
.
protected
String
JFileChooser.
paramString
()
Returns a string representation of this
JFileChooser
.
protected
String
JFrame.
paramString
()
Returns a string representation of this
JFrame
.
protected
String
JInternalFrame.
paramString
()
Returns a string representation of this
JInternalFrame
.
protected
String
JLabel.
paramString
()
Returns a string representation of this JLabel.
protected
String
JLayeredPane.
paramString
()
Returns a string representation of this JLayeredPane.
protected
String
JList.
paramString
()
Returns a
String
representation of this
JList
.
protected
String
JMenu.
paramString
()
Returns a string representation of this
JMenu
.
protected
String
JMenuBar.
paramString
()
Returns a string representation of this
JMenuBar
.
protected
String
JMenuItem.
paramString
()
Returns a string representation of this
JMenuItem
.
protected
String
JOptionPane.
paramString
()
Returns a string representation of this
JOptionPane
.
protected
String
JPanel.
paramString
()
Returns a string representation of this JPanel.
protected
String
JPasswordField.
paramString
()
Returns a string representation of this
JPasswordField
.
protected
String
JPopupMenu.
paramString
()
Returns a string representation of this
JPopupMenu
.
protected
String
JProgressBar.
paramString
()
Returns a string representation of this
JProgressBar
.
protected
String
JRadioButton.
paramString
()
Returns a string representation of this JRadioButton.
protected
String
JRadioButtonMenuItem.
paramString
()
Returns a string representation of this
JRadioButtonMenuItem
.
protected
String
JRootPane.
paramString
()
Returns a string representation of this
JRootPane
.
protected
String
JScrollBar.
paramString
()
Returns a string representation of this JScrollBar.
protected
String
JScrollPane.
paramString
()
Returns a string representation of this
JScrollPane
.
protected
String
JSeparator.
paramString
()
Returns a string representation of this
JSeparator
.
protected
String
JSlider.
paramString
()
Returns a string representation of this JSlider.
protected
String
JSplitPane.
paramString
()
Returns a string representation of this
JSplitPane
.
protected
String
JTabbedPane.
paramString
()
Returns a string representation of this
JTabbedPane
.
protected
String
JTable.
paramString
()
Returns a string representation of this table.
protected
String
JTextArea.
paramString
()
Returns a string representation of this JTextArea.
protected
String
JTextField.
paramString
()
Returns a string representation of this
JTextField
.
protected
String
JTextPane.
paramString
()
Returns a string representation of this
JTextPane
.
protected
String
JToggleButton.
paramString
()
Returns a string representation of this JToggleButton.
protected
String
JToolBar.
paramString
()
Returns a string representation of this
JToolBar
.
protected
String
JToolTip.
paramString
()
Returns a string representation of this
JToolTip
.
protected
String
JTree.
paramString
()
Returns a string representation of this
JTree
.
protected
String
JViewport.
paramString
()
Returns a string representation of this
JViewport
.
protected
String
JWindow.
paramString
()
Returns a string representation of this
JWindow
.
static
String
JOptionPane.
showInputDialog
(
Component
parentComponent,
Object
message)
Shows a question-message dialog requesting input from the user
 parented to
parentComponent
.
static
String
JOptionPane.
showInputDialog
(
Component
parentComponent,
Object
message,
Object
initialSelectionValue)
Shows a question-message dialog requesting input from the user and
 parented to
parentComponent
.
static
String
JOptionPane.
showInputDialog
(
Component
parentComponent,
Object
message,
String
title,
 int messageType)
Shows a dialog requesting input from the user parented to
parentComponent
with the dialog having the title
title
and message type
messageType
.
static
String
JOptionPane.
showInputDialog
(
Object
message)
Shows a question-message dialog requesting input from the user.
static
String
JOptionPane.
showInputDialog
(
Object
message,
Object
initialSelectionValue)
Shows a question-message dialog requesting input from the user, with
 the input value initialized to
initialSelectionValue
.
static
String
JOptionPane.
showInternalInputDialog
(
Component
parentComponent,
Object
message)
Shows an internal question-message dialog requesting input from
 the user parented to
parentComponent
.
static
String
JOptionPane.
showInternalInputDialog
(
Component
parentComponent,
Object
message,
String
title,
 int messageType)
Shows an internal dialog requesting input from the user parented
 to
parentComponent
with the dialog having the title
title
and message type
messageType
.
String
DefaultBoundedRangeModel.
toString
()
Returns a string that displays all of the
BoundedRangeModel
properties.
String
DefaultListModel.
toString
()
Returns a string that displays and identifies this
 object's properties.
String
DefaultListSelectionModel.
toString
()
Returns a string that displays and identifies this
 object's properties.
String
GroupLayout.
toString
()
Returns a string representation of this
GroupLayout
.
String
ImageIcon.
toString
()
Returns a string representation of this image.
String
JList.DropLocation.
toString
()
Returns a string representation of this drop location.
String
JTable.DropLocation.
toString
()
Returns a string representation of this drop location.
String
JTree.DropLocation.
toString
()
Returns a string representation of this drop location.
String
LookAndFeel.
toString
()
Returns a string that displays and identifies this
 object's properties.
String
RepaintManager.
toString
()
Returns a string that displays and identifies this
 object's properties.
String
SizeRequirements.
toString
()
Returns a string describing the minimum, preferred, and maximum
 size requirements, along with the alignment.
String
TransferHandler.DropLocation.
toString
()
Returns a string representation of this drop location.
String
UIManager.LookAndFeelInfo.
toString
()
Returns a string that displays and identifies this
 object's properties.
abstract
String
JFormattedTextField.AbstractFormatter.
valueToString
(
Object
value)
Returns the string value to display for
value
.
Methods in
javax.swing
with parameters of type
String
Modifier and Type
Method
Description
protected void
AbstractButton.
actionPropertyChanged
(
Action
action,
String
propertyName)
Updates the button's state in response to property changes in the
 associated action.
protected void
JComboBox.
actionPropertyChanged
(
Action
action,
String
propertyName)
Updates the combobox's state in response to property changes in
 associated action.
protected void
JMenuItem.
actionPropertyChanged
(
Action
action,
String
propertyName)
Updates the button's state in response to property changes in the
 associated action.
protected void
JTextField.
actionPropertyChanged
(
Action
action,
String
propertyName)
Updates the textfield's state in response to property changes in
 associated action.
JMenuItem
JMenu.
add
(
String
s)
Creates a new menu item with the specified text and appends
 it to the end of this menu.
JMenuItem
JPopupMenu.
add
(
String
s)
Creates a new menu item with the specified text and appends
 it to the end of this menu.
Component
JTabbedPane.
add
(
String
title,
Component
component)
Adds a
component
with the specified tab title.
void
BoxLayout.
addLayoutComponent
(
String
name,
Component
comp)
Not used by this class.
void
GroupLayout.
addLayoutComponent
(
String
name,
Component
component)
Notification that a
Component
has been added to
 the parent container.
void
JRootPane.RootLayout.
addLayoutComponent
(
String
name,
Component
comp)
void
JSpinner.DefaultEditor.
addLayoutComponent
(
String
name,
Component
child)
This
LayoutManager
method does nothing.
void
OverlayLayout.
addLayoutComponent
(
String
name,
Component
comp)
Adds the specified component to the layout.
void
ScrollPaneLayout.
addLayoutComponent
(
String
s,
Component
c)
Adds the specified component to the layout.
void
SpringLayout.
addLayoutComponent
(
String
name,
Component
c)
Has no effect,
 since this layout manager does not
 use a per-component string.
void
ViewportLayout.
addLayoutComponent
(
String
name,
Component
c)
Adds the specified component to the layout.
void
UIDefaults.
addResourceBundle
(
String
bundleName)
Adds a resource bundle to the list of resource bundles that are
 searched for localized values.
Style
JTextPane.
addStyle
(
String
nm,
Style
parent)
Adds a new style into the logical style hierarchy.
void
JTabbedPane.
addTab
(
String
title,
Component
component)
Adds a
component
represented by a
title
and no icon.
void
JTabbedPane.
addTab
(
String
title,
Icon
icon,
Component
component)
Adds a
component
represented by a
title
and/or
icon
, either of which can be
null
.
void
JTabbedPane.
addTab
(
String
title,
Icon
icon,
Component
component,
String
tip)
Adds a
component
and
tip
represented by a
title
and/or
icon
,
 either of which can be
null
.
void
JTextArea.
append
(
String
str)
Appends the given text to the end of the document.
protected int
AbstractButton.
checkHorizontalKey
(int key,
String
exception)
Verify that the
key
argument is a legal value for the
horizontalAlignment
and
horizontalTextPosition
properties.
protected int
JLabel.
checkHorizontalKey
(int key,
String
message)
Verify that key is a legal value for the horizontalAlignment properties.
protected int
AbstractButton.
checkVerticalKey
(int key,
String
exception)
Verify that the
key
argument is a legal value for the
 vertical properties.
protected int
JLabel.
checkVerticalKey
(int key,
String
message)
Verify that key is a legal value for the
 verticalAlignment or verticalTextPosition properties.
static int
SwingUtilities.
computeStringWidth
(
FontMetrics
fm,
String
str)
Compute the width of the string using a font with the specified
 "metrics" (sizes).
static
JDialog
JColorChooser.
createDialog
(
Component
c,
String
title,
 boolean modal,
JColorChooser
chooserPane,
ActionListener
okListener,
ActionListener
cancelListener)
Creates and returns a new dialog containing the specified
ColorChooser
pane along with "OK", "Cancel", and "Reset"
 buttons.
JDialog
JOptionPane.
createDialog
(
Component
parentComponent,
String
title)
Creates and returns a new
JDialog
wrapping
this
centered on the
parentComponent
in the
parentComponent
's frame.
JDialog
JOptionPane.
createDialog
(
String
title)
Creates and returns a new parentless
JDialog
with the specified title.
static
EditorKit
JEditorPane.
createEditorKitForContentType
(
String
type)
Creates a handler for the given type from the default registry
 of editor kits.
JInternalFrame
JOptionPane.
createInternalFrame
(
Component
parentComponent,
String
title)
Creates and returns an instance of
JInternalFrame
.
static
LookAndFeel
UIManager.
createLookAndFeel
(
String
name)
Creates a supported built-in Java
LookAndFeel
specified
 by the given
L&F name
name.
static
TitledBorder
BorderFactory.
createTitledBorder
(
String
title)
Creates a new titled border with the specified title,
 the default border type (determined by the current look and feel),
 the default text position (determined by the current look and feel),
 the default justification (leading), and the default
 font and text color (determined by the current look and feel).
static
TitledBorder
BorderFactory.
createTitledBorder
(
Border
border,
String
title)
Adds a title to an existing border,
 with default positioning (determined by the current look and feel),
 default justification (leading) and the default
 font and text color (determined by the current look and feel).
static
TitledBorder
BorderFactory.
createTitledBorder
(
Border
border,
String
title,
 int titleJustification,
 int titlePosition)
Adds a title to an existing border, with the specified
 positioning and using the default
 font and text color (determined by the current look and feel).
static
TitledBorder
BorderFactory.
createTitledBorder
(
Border
border,
String
title,
 int titleJustification,
 int titlePosition,
Font
titleFont)
Adds a title to an existing border, with the specified
 positioning and font, and using the default text color
 (determined by the current look and feel).
static
TitledBorder
BorderFactory.
createTitledBorder
(
Border
border,
String
title,
 int titleJustification,
 int titlePosition,
Font
titleFont,
Color
titleColor)
Adds a title to an existing border, with the specified
 positioning, font and color.
void
DebugGraphics.
drawString
(
String
aString,
 int x,
 int y)
Overrides
Graphics.drawString
.
protected void
JFileChooser.
fireActionPerformed
(
String
command)
Notifies all listeners that have registered interest for
 notification on this event type.
protected void
AbstractAction.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Supports reporting bound property changes.
void
DefaultListCellRenderer.
firePropertyChange
(
String
propertyName,
 boolean oldValue,
 boolean newValue)
Overridden for performance reasons.
void
DefaultListCellRenderer.
firePropertyChange
(
String
propertyName,
 byte oldValue,
 byte newValue)
Overridden for performance reasons.
void
DefaultListCellRenderer.
firePropertyChange
(
String
propertyName,
 char oldValue,
 char newValue)
Overridden for performance reasons.
void
DefaultListCellRenderer.
firePropertyChange
(
String
propertyName,
 double oldValue,
 double newValue)
Overridden for performance reasons.
void
DefaultListCellRenderer.
firePropertyChange
(
String
propertyName,
 float oldValue,
 float newValue)
Overridden for performance reasons.
void
DefaultListCellRenderer.
firePropertyChange
(
String
propertyName,
 int oldValue,
 int newValue)
Overridden for performance reasons.
void
DefaultListCellRenderer.
firePropertyChange
(
String
propertyName,
 long oldValue,
 long newValue)
Overridden for performance reasons.
void
DefaultListCellRenderer.
firePropertyChange
(
String
propertyName,
 short oldValue,
 short newValue)
Overridden for performance reasons.
protected void
DefaultListCellRenderer.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Overridden for performance reasons.
void
JComponent.
firePropertyChange
(
String
propertyName,
 boolean oldValue,
 boolean newValue)
Support for reporting bound property changes for boolean properties.
void
JComponent.
firePropertyChange
(
String
propertyName,
 int oldValue,
 int newValue)
Support for reporting bound property changes for integer properties.
protected void
JViewport.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Notifies listeners of a property change.
final void
SwingWorker.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Reports a bound property update to any registered listeners.
protected void
UIDefaults.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Support for reporting bound property changes.
protected void
JComponent.
fireVetoableChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Supports reporting constrained property changes.
static
Container
SwingUtilities.
getAncestorNamed
(
String
name,
Component
comp)
Convenience method for searching above
comp
in the
 component hierarchy and returns the first object of
name
it
 finds.
Spring
SpringLayout.Constraints.
getConstraint
(
String
edgeName)
Returns the value of the specified edge, which may be
 a derived value, or even
null
.
Spring
SpringLayout.
getConstraint
(
String
edgeName,
Component
c)
Returns the spring controlling the distance between
 the specified edge of
 the component and the top or left edge of its parent.
Component
JScrollPane.
getCorner
(
String
key)
Returns the component at the specified corner.
Component
ScrollPaneLayout.
getCorner
(
String
key)
Returns the
Component
at the specified corner.
static
Object
LookAndFeel.
getDesktopPropertyValue
(
String
systemPropertyName,
Object
fallbackValue)
Returns the value of the specified system desktop property by
 invoking
Toolkit.getDefaultToolkit().getDesktopProperty()
.
static
String
JEditorPane.
getEditorKitClassNameForContentType
(
String
type)
Returns the currently registered
EditorKit
class name for the
 type
type
.
EditorKit
JEditorPane.
getEditorKitForContentType
(
String
type)
Fetches the editor kit to use for the given type
 of content.
static
KeyStroke
KeyStroke.
getKeyStroke
(
String
s)
Parses a string and returns a
KeyStroke
.
int
JList.
getNextMatch
(
String
prefix,
 int startIndex,
Position.Bias
bias)
Returns the next list element whose
toString
value
 starts with the given prefix.
TreePath
JTree.
getNextMatch
(
String
prefix,
 int startingRow,
Position.Bias
bias)
Returns the TreePath to the next tree element that
 begins with a prefix.
Style
JTextPane.
getStyle
(
String
nm)
Fetches a named non-
null
style previously added.
Class
<? extends
ComponentUI
>
UIDefaults.
getUIClass
(
String
uiClassID)
Returns the L&F class that renders this component.
Class
<? extends
ComponentUI
>
UIDefaults.
getUIClass
(
String
uiClassID,
ClassLoader
uiClassLoader)
The value of
get(uidClassID)
must be the
String
name of a
 class that implements the corresponding
ComponentUI
class.
protected void
UIDefaults.
getUIError
(
String
msg)
If
getUI()
fails for any reason,
 it calls this method before returning
null
.
Object
AbstractAction.
getValue
(
String
key)
Gets the
Object
associated with the specified key.
Object
Action.
getValue
(
String
key)
Gets one of this object's properties
 using the associated key.
int
JTabbedPane.
indexOfTab
(
String
title)
Returns the first tab index with a given
title
,  or
 -1 if no tab has this title.
protected void
AbstractButton.
init
(
String
text,
Icon
icon)
Initialization of the
AbstractButton
.
protected void
JMenuItem.
init
(
String
text,
Icon
icon)
Initializes the menu item with the specified text and icon.
void
JMenu.
insert
(
String
s,
 int pos)
Inserts a new menu item with the specified text at a
 given position.
void
JTextArea.
insert
(
String
str,
 int pos)
Inserts the specified text at the specified position.
void
JTabbedPane.
insertTab
(
String
title,
Icon
icon,
Component
component,
String
tip,
 int index)
Inserts a new tab for the given component, at the given index,
 represented by the given title and/or icon, either of which may
 be
null
.
void
JSpinner.AccessibleJSpinner.
insertTextAtIndex
(int index,
String
s)
Inserts the specified string at the given index/
static void
LookAndFeel.
installBorder
(
JComponent
c,
String
defaultBorderName)
Convenience method for setting a component's border property with
 a value from the defaults.
static void
LookAndFeel.
installColors
(
JComponent
c,
String
defaultBgName,
String
defaultFgName)
Convenience method for setting a component's foreground
 and background color properties with values from the
 defaults.
static void
LookAndFeel.
installColorsAndFont
(
JComponent
c,
String
defaultBgName,
String
defaultFgName,
String
defaultFontName)
Convenience method for setting a component's foreground,
 background and font properties with values from the
 defaults.
static void
UIManager.
installLookAndFeel
(
String
name,
String
className)
Adds the specified look and feel to the set of available look
 and feels.
static void
LookAndFeel.
installProperty
(
JComponent
c,
String
propertyName,
Object
propertyValue)
Convenience method for installing a property with the specified name
 and value on a component if that property has not already been set
 by the developer.
static
String
SwingUtilities.
layoutCompoundLabel
(
FontMetrics
fm,
String
text,
Icon
icon,
 int verticalAlignment,
 int horizontalAlignment,
 int verticalTextPosition,
 int horizontalTextPosition,
Rectangle
viewR,
Rectangle
iconR,
Rectangle
textR,
 int textIconGap)
Compute and return the location of the icons origin, the
 location of origin of the text baseline, and a possibly clipped
 version of the compound labels string.
static
String
SwingUtilities.
layoutCompoundLabel
(
JComponent
c,
FontMetrics
fm,
String
text,
Icon
icon,
 int verticalAlignment,
 int horizontalAlignment,
 int verticalTextPosition,
 int horizontalTextPosition,
Rectangle
viewR,
Rectangle
iconR,
Rectangle
textR,
 int textIconGap)
Compute and return the location of the icons origin, the
 location of origin of the text baseline, and a possibly clipped
 version of the compound labels string.
static
Object
LookAndFeel.
makeIcon
(
Class
<?> baseClass,
String
gifFile)
Creates and returns a
UIDefault.LazyValue
that loads an
 image.
void
SpringLayout.
putConstraint
(
String
e1,
Component
c1,
 int pad,
String
e2,
Component
c2)
Links edge
e1
of component
c1
to
 edge
e2
of component
c2
,
 with a fixed distance between the edges.
void
SpringLayout.
putConstraint
(
String
e1,
Component
c1,
Spring
s,
String
e2,
Component
c2)
Links edge
e1
of component
c1
to
 edge
e2
of component
c2
.
void
AbstractAction.
putValue
(
String
key,
Object
newValue)
Sets the
Value
associated with the specified key.
void
Action.
putValue
(
String
key,
Object
value)
Sets one of this object's properties
 using the associated key.
static <M,
I>
RowFilter
<M,
I>
RowFilter.
regexFilter
(
String
regex,
 int... indices)
Returns a
RowFilter
that uses a regular
 expression to determine which entries to include.
static void
JEditorPane.
registerEditorKitForContentType
(
String
type,
String
classname)
Establishes the default bindings of
type
to
classname
.
static void
JEditorPane.
registerEditorKitForContentType
(
String
type,
String
classname,
ClassLoader
loader)
Establishes the default bindings of
type
to
classname
.
void
JComponent.
registerKeyboardAction
(
ActionListener
anAction,
String
aCommand,
KeyStroke
aKeyStroke,
 int aCondition)
This method is now obsolete, please use a combination of
getActionMap()
and
getInputMap()
for
 similar behavior.
void
UIDefaults.
removeResourceBundle
(
String
bundleName)
Removes a resource bundle from the list of resource bundles that are
 searched for localized defaults.
void
JTextPane.
removeStyle
(
String
nm)
Removes a named non-
null
style previously added to
 the document.
void
JTextArea.
replaceRange
(
String
str,
 int start,
 int end)
Replaces text from the indicated start to end position with the
 new text specified.
void
JEditorPane.
replaceSelection
(
String
content)
Replaces the currently selected content with new content
 represented by the given string.
void
JTextPane.
replaceSelection
(
String
content)
Replaces the currently selected content with new content
 represented by the given string.
void
JSpinner.AccessibleJSpinner.
replaceText
(int startIndex,
 int endIndex,
String
s)
Replaces the text between two indices with the specified
 string.
void
JEditorPane.
scrollToReference
(
String
reference)
Scrolls the view to the given reference location
 (that is, the value returned by the
URL.getRef
method for the URL being displayed).
void
JList.AccessibleJList.AccessibleJListChild.
setAccessibleDescription
(
String
s)
void
JTable.AccessibleJTable.AccessibleJTableCell.
setAccessibleDescription
(
String
s)
Sets the accessible description of this object.
void
JTree.AccessibleJTree.AccessibleJTreeNode.
setAccessibleDescription
(
String
s)
Set the accessible description of this object.
void
ImageIcon.AccessibleImageIcon.
setAccessibleIconDescription
(
String
description)
Sets the description of the icon.
void
JList.AccessibleJList.AccessibleJListChild.
setAccessibleName
(
String
s)
void
JTable.AccessibleJTable.AccessibleJTableCell.
setAccessibleName
(
String
s)
Sets the localized accessible name of this object.
void
JTree.AccessibleJTree.AccessibleJTreeNode.
setAccessibleName
(
String
s)
Set the localized accessible name of this object.
void
AbstractButton.
setActionCommand
(
String
actionCommand)
Sets the action command for this button.
void
ButtonModel.
setActionCommand
(
String
s)
Sets the action command string that gets sent as part of the
ActionEvent
when the button is triggered.
void
DefaultButtonModel.
setActionCommand
(
String
actionCommand)
Sets the action command string that gets sent as part of the
ActionEvent
when the button is triggered.
void
JComboBox.
setActionCommand
(
String
aCommand)
Sets the action command that should be included in the event
 sent to action listeners.
void
JTextField.
setActionCommand
(
String
command)
Sets the command string used for action events.
void
Timer.
setActionCommand
(
String
command)
Sets the string that will be delivered as the action command
 in
ActionEvent
s fired by this timer.
void
JFileChooser.
setApproveButtonText
(
String
approveButtonText)
Sets the text used in the
ApproveButton
in the
FileChooserUI
.
void
JFileChooser.
setApproveButtonToolTipText
(
String
toolTipText)
Sets the tooltip text used in the
ApproveButton
.
void
SpringLayout.Constraints.
setConstraint
(
String
edgeName,
Spring
s)
Sets the spring controlling the specified edge.
final void
JEditorPane.
setContentType
(
String
type)
Sets the type of content that this editor
 handles.
void
JScrollPane.
setCorner
(
String
key,
Component
corner)
Adds a child that will appear in one of the scroll panes
 corners, if there's room.
void
ImageIcon.
setDescription
(
String
description)
Sets the description of the image.
void
JFileChooser.
setDialogTitle
(
String
dialogTitle)
Sets the string that goes in the
JFileChooser
window's
 title bar.
void
JEditorPane.
setEditorKitForContentType
(
String
type,
EditorKit
k)
Directly sets the editor kit to use for the given type.
void
AbstractButton.
setLabel
(
String
label)
Deprecated.
- Replaced by
setText(text)
void
JPopupMenu.
setLabel
(
String
label)
Sets the popup menu's label.
static void
UIManager.
setLookAndFeel
(
String
className)
Loads the
LookAndFeel
specified by the given class
 name, using the current thread's context class loader, and
 passes it to
setLookAndFeel(LookAndFeel)
.
void
ProgressMonitor.
setNote
(
String
note)
Specifies the additional note that is displayed along with the
 progress message.
void
JEditorPane.
setPage
(
String
url)
Sets the current URL being displayed.
void
JProgressBar.
setString
(
String
s)
Sets the value of the progress string.
void
AbstractButton.
setText
(
String
text)
Sets the button's text.
void
JEditorPane.
setText
(
String
t)
Sets the text of this
TextComponent
to the specified
 content,
 which is expected to be in the format of the content type of
 this editor.
void
JLabel.
setText
(
String
text)
Defines the single line of text this component will display.
void
JPasswordField.
setText
(
String
t)
void
JSpinner.AccessibleJSpinner.
setTextContents
(
String
s)
Sets the text contents to the specified string.
void
JToolTip.
setTipText
(
String
tipText)
Sets the text to show when the tool tip is displayed.
void
JInternalFrame.
setTitle
(
String
title)
Sets the
JInternalFrame
title.
void
JTabbedPane.
setTitleAt
(int index,
String
title)
Sets the title at
index
to
title
which
 can be
null
.
void
JComponent.
setToolTipText
(
String
text)
Registers the text to display in a tool tip.
void
JTabbedPane.
setToolTipTextAt
(int index,
String
toolTipText)
Sets the tooltip text at
index
to
toolTipText
which can be
null
.
static int
JOptionPane.
showConfirmDialog
(
Component
parentComponent,
Object
message,
String
title,
 int optionType)
Brings up a dialog where the number of choices is determined
 by the
optionType
parameter.
static int
JOptionPane.
showConfirmDialog
(
Component
parentComponent,
Object
message,
String
title,
 int optionType,
 int messageType)
Brings up a dialog where the number of choices is determined
 by the
optionType
parameter, where the
messageType
parameter determines the icon to display.
static int
JOptionPane.
showConfirmDialog
(
Component
parentComponent,
Object
message,
String
title,
 int optionType,
 int messageType,
Icon
icon)
Brings up a dialog with a specified icon, where the number of
 choices is determined by the
optionType
parameter.
static
Color
JColorChooser.
showDialog
(
Component
component,
String
title,
Color
initialColor)
Shows a modal color-chooser dialog and blocks until the
 dialog is hidden.
static
Color
JColorChooser.
showDialog
(
Component
component,
String
title,
Color
initialColor,
 boolean colorTransparencySelectionEnabled)
Shows a modal color-chooser dialog and blocks until the
 dialog is hidden.
int
JFileChooser.
showDialog
(
Component
parent,
String
approveButtonText)
Pops a custom file chooser dialog with a custom approve button.
static
String
JOptionPane.
showInputDialog
(
Component
parentComponent,
Object
message,
String
title,
 int messageType)
Shows a dialog requesting input from the user parented to
parentComponent
with the dialog having the title
title
and message type
messageType
.
static
Object
JOptionPane.
showInputDialog
(
Component
parentComponent,
Object
message,
String
title,
 int messageType,
Icon
icon,
Object
[] selectionValues,
Object
initialSelectionValue)
Prompts the user for input in a blocking dialog where the
 initial selection, possible selections, and all other options can
 be specified.
static int
JOptionPane.
showInternalConfirmDialog
(
Component
parentComponent,
Object
message,
String
title,
 int optionType)
Brings up a internal dialog panel where the number of choices
 is determined by the
optionType
parameter.
static int
JOptionPane.
showInternalConfirmDialog
(
Component
parentComponent,
Object
message,
String
title,
 int optionType,
 int messageType)
Brings up an internal dialog panel where the number of choices
 is determined by the
optionType
parameter, where
 the
messageType
parameter determines the icon to display.
static int
JOptionPane.
showInternalConfirmDialog
(
Component
parentComponent,
Object
message,
String
title,
 int optionType,
 int messageType,
Icon
icon)
Brings up an internal dialog panel with a specified icon, where
 the number of choices is determined by the
optionType
parameter.
static
String
JOptionPane.
showInternalInputDialog
(
Component
parentComponent,
Object
message,
String
title,
 int messageType)
Shows an internal dialog requesting input from the user parented
 to
parentComponent
with the dialog having the title
title
and message type
messageType
.
static
Object
JOptionPane.
showInternalInputDialog
(
Component
parentComponent,
Object
message,
String
title,
 int messageType,
Icon
icon,
Object
[] selectionValues,
Object
initialSelectionValue)
Prompts the user for input in a blocking internal dialog where
 the initial selection, possible selections, and all other
 options can be specified.
static void
JOptionPane.
showInternalMessageDialog
(
Component
parentComponent,
Object
message,
String
title,
 int messageType)
Brings up an internal dialog panel that displays a message
 using a default icon determined by the
messageType
parameter.
static void
JOptionPane.
showInternalMessageDialog
(
Component
parentComponent,
Object
message,
String
title,
 int messageType,
Icon
icon)
Brings up an internal dialog panel displaying a message,
 specifying all parameters.
static int
JOptionPane.
showInternalOptionDialog
(
Component
parentComponent,
Object
message,
String
title,
 int optionType,
 int messageType,
Icon
icon,
Object
[] options,
Object
initialValue)
Brings up an internal dialog panel with a specified icon, where
 the initial choice is determined by the
initialValue
parameter and the number of choices is determined by the
optionType
parameter.
static void
JOptionPane.
showMessageDialog
(
Component
parentComponent,
Object
message,
String
title,
 int messageType)
Brings up a dialog that displays a message using a default
 icon determined by the
messageType
parameter.
static void
JOptionPane.
showMessageDialog
(
Component
parentComponent,
Object
message,
String
title,
 int messageType,
Icon
icon)
Brings up a dialog displaying a message, specifying all parameters.
static int
JOptionPane.
showOptionDialog
(
Component
parentComponent,
Object
message,
String
title,
 int optionType,
 int messageType,
Icon
icon,
Object
[] options,
Object
initialValue)
Brings up a dialog with a specified icon, where the initial
 choice is determined by the
initialValue
parameter and
 the number of choices is determined by the
optionType
parameter.
abstract
Object
JFormattedTextField.AbstractFormatter.
stringToValue
(
String
text)
Parses
text
returning an arbitrary Object.
static
DropMode
DropMode.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
GroupLayout.Alignment
GroupLayout.Alignment.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
JTable.PrintMode
JTable.PrintMode.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
LayoutStyle.ComponentPlacement
LayoutStyle.ComponentPlacement.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
RowFilter.ComparisonType
RowFilter.ComparisonType.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
SortOrder
SortOrder.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
SwingWorker.StateValue
SwingWorker.StateValue.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Constructors in
javax.swing
with parameters of type
String
Modifier
Constructor
Description
AbstractAction
(
String
name)
Creates an
Action
with the specified name.
AbstractAction
(
String
name,
Icon
icon)
Creates an
Action
with the specified name and small icon.
DateEditor
(
JSpinner
spinner,
String
dateFormatPattern)
Construct a
JSpinner
editor that supports displaying
 and editing the value of a
SpinnerDateModel
with a
JFormattedTextField
.
ImageIcon
(byte[] imageData,
String
description)
Creates an ImageIcon from an array of bytes which were
 read from an image file containing a supported image format,
 such as GIF, JPEG, or (as of 1.3) PNG.
ImageIcon
(
Image
image,
String
description)
Creates an ImageIcon from the image.
ImageIcon
(
String
filename)
Creates an ImageIcon from the specified file.
ImageIcon
(
String
filename,
String
description)
Creates an ImageIcon from the specified file.
ImageIcon
(
URL
location,
String
description)
Creates an ImageIcon from the specified URL.
JButton
(
String
text)
Creates a button with text.
JButton
(
String
text,
Icon
icon)
Creates a button with initial text and an icon.
JCheckBox
(
String
text)
Creates an initially unselected check box with text.
JCheckBox
(
String
text,
 boolean selected)
Creates a check box with text and specifies whether
 or not it is initially selected.
JCheckBox
(
String
text,
Icon
icon)
Creates an initially unselected check box with
 the specified text and icon.
JCheckBox
(
String
text,
Icon
icon,
 boolean selected)
Creates a check box with text and icon,
 and specifies whether or not it is initially selected.
JCheckBoxMenuItem
(
String
text)
Creates an initially unselected check box menu item with text.
JCheckBoxMenuItem
(
String
text,
 boolean b)
Creates a check box menu item with the specified text and selection state.
JCheckBoxMenuItem
(
String
text,
Icon
icon)
Creates an initially unselected check box menu item with the specified text and icon.
JCheckBoxMenuItem
(
String
text,
Icon
icon,
 boolean b)
Creates a check box menu item with the specified text, icon, and selection state.
JDialog
(
Dialog
owner,
String
title)
Creates a modeless dialog with the specified title and
 with the specified owner dialog.
JDialog
(
Dialog
owner,
String
title,
 boolean modal)
Creates a dialog with the specified title, modality
 and the specified owner
Dialog
.
JDialog
(
Dialog
owner,
String
title,
 boolean modal,
GraphicsConfiguration
gc)
Creates a dialog with the specified title, owner
Dialog
,
 modality and
GraphicsConfiguration
.
JDialog
(
Frame
owner,
String
title)
Creates a modeless dialog with the specified title and
 with the specified owner frame.
JDialog
(
Frame
owner,
String
title,
 boolean modal)
Creates a dialog with the specified title, owner
Frame
and modality.
JDialog
(
Frame
owner,
String
title,
 boolean modal,
GraphicsConfiguration
gc)
Creates a dialog with the specified title,
 owner
Frame
, modality and
GraphicsConfiguration
.
JDialog
(
Window
owner,
String
title)
Creates a modeless dialog with the specified title and owner
Window
.
JDialog
(
Window
owner,
String
title,
Dialog.ModalityType
modalityType)
Creates a dialog with the specified title, owner
Window
and
 modality.
JDialog
(
Window
owner,
String
title,
Dialog.ModalityType
modalityType,
GraphicsConfiguration
gc)
Creates a dialog with the specified title, owner
Window
,
 modality and
GraphicsConfiguration
.
JEditorPane
(
String
url)
Creates a
JEditorPane
based on a string containing
 a URL specification.
JEditorPane
(
String
type,
String
text)
Creates a
JEditorPane
that has been initialized
 to the given text.
JFileChooser
(
String
currentDirectoryPath)
Constructs a
JFileChooser
using the given path.
JFileChooser
(
String
currentDirectoryPath,
FileSystemView
fsv)
Constructs a
JFileChooser
using the given current directory
 path and
FileSystemView
.
JFrame
(
String
title)
Creates a new, initially invisible
Frame
with the
 specified title.
JFrame
(
String
title,
GraphicsConfiguration
gc)
Creates a
JFrame
with the specified title and the
 specified
GraphicsConfiguration
of a screen device.
JInternalFrame
(
String
title)
Creates a non-resizable, non-closable, non-maximizable,
 non-iconifiable
JInternalFrame
with the specified title.
JInternalFrame
(
String
title,
 boolean resizable)
Creates a non-closable, non-maximizable, non-iconifiable
JInternalFrame
with the specified title
 and resizability.
JInternalFrame
(
String
title,
 boolean resizable,
 boolean closable)
Creates a non-maximizable, non-iconifiable
JInternalFrame
with the specified title, resizability, and
 closability.
JInternalFrame
(
String
title,
 boolean resizable,
 boolean closable,
 boolean maximizable)
Creates a non-iconifiable
JInternalFrame
with the specified title,
 resizability, closability, and maximizability.
JInternalFrame
(
String
title,
 boolean resizable,
 boolean closable,
 boolean maximizable,
 boolean iconifiable)
Creates a
JInternalFrame
with the specified title,
 resizability, closability, maximizability, and iconifiability.
JLabel
(
String
text)
Creates a
JLabel
instance with the specified text.
JLabel
(
String
text,
 int horizontalAlignment)
Creates a
JLabel
instance with the specified
 text and horizontal alignment.
JLabel
(
String
text,
Icon
icon,
 int horizontalAlignment)
Creates a
JLabel
instance with the specified
 text, image, and horizontal alignment.
JMenu
(
String
s)
Constructs a new
JMenu
with the supplied string
 as its text.
JMenu
(
String
s,
 boolean b)
Constructs a new
JMenu
with the supplied string as
 its text and specified as a tear-off menu or not.
JMenuItem
(
String
text)
Creates a
JMenuItem
with the specified text.
JMenuItem
(
String
text,
 int mnemonic)
Creates a
JMenuItem
with the specified text and
 keyboard mnemonic.
JMenuItem
(
String
text,
Icon
icon)
Creates a
JMenuItem
with the specified text and icon.
JPasswordField
(
String
text)
Constructs a new
JPasswordField
initialized
 with the specified text.
JPasswordField
(
String
text,
 int columns)
Constructs a new
JPasswordField
initialized with
 the specified text and columns.
JPasswordField
(
Document
doc,
String
txt,
 int columns)
Constructs a new
JPasswordField
that uses the
 given text storage model and the given number of columns.
JPopupMenu
(
String
label)
Constructs a
JPopupMenu
with the specified title.
JRadioButton
(
String
text)
Creates an unselected radio button with the specified text.
JRadioButton
(
String
text,
 boolean selected)
Creates a radio button with the specified text
 and selection state.
JRadioButton
(
String
text,
Icon
icon)
Creates a radio button that has the specified text and image,
 and that is initially unselected.
JRadioButton
(
String
text,
Icon
icon,
 boolean selected)
Creates a radio button that has the specified text, image,
 and selection state.
JRadioButtonMenuItem
(
String
text)
Creates a
JRadioButtonMenuItem
with text.
JRadioButtonMenuItem
(
String
text,
 boolean selected)
Creates a radio button menu item with the specified text
 and selection state.
JRadioButtonMenuItem
(
String
text,
Icon
icon)
Creates a radio button menu item with the specified text
 and
Icon
.
JRadioButtonMenuItem
(
String
text,
Icon
icon,
 boolean selected)
Creates a radio button menu item that has the specified
 text, image, and selection state.
JTextArea
(
String
text)
Constructs a new TextArea with the specified text displayed.
JTextArea
(
String
text,
 int rows,
 int columns)
Constructs a new TextArea with the specified text and number
 of rows and columns.
JTextArea
(
Document
doc,
String
text,
 int rows,
 int columns)
Constructs a new JTextArea with the specified number of rows
 and columns, and the given model.
JTextField
(
String
text)
Constructs a new
TextField
initialized with the
 specified text.
JTextField
(
String
text,
 int columns)
Constructs a new
TextField
initialized with the
 specified text and columns.
JTextField
(
Document
doc,
String
text,
 int columns)
Constructs a new
JTextField
that uses the given text
 storage model and the given number of columns.
JToggleButton
(
String
text)
Creates an unselected toggle button with the specified text.
JToggleButton
(
String
text,
 boolean selected)
Creates a toggle button with the specified text
 and selection state.
JToggleButton
(
String
text,
Icon
icon)
Creates a toggle button that has the specified text and image,
 and that is initially unselected.
JToggleButton
(
String
text,
Icon
icon,
 boolean selected)
Creates a toggle button with the specified text, image, and
 selection state.
JToolBar
(
String
name)
Creates a new tool bar with the specified
name
.
JToolBar
(
String
name,
 int orientation)
Creates a new tool bar with a specified
name
and
orientation
.
LookAndFeelInfo
(
String
name,
String
className)
Constructs a
UIManager
s
LookAndFeelInfo
object.
NumberEditor
(
JSpinner
spinner,
String
decimalFormatPattern)
Construct a
JSpinner
editor that supports displaying
 and editing the value of a
SpinnerNumberModel
with a
JFormattedTextField
.
ProgressMonitor
(
Component
parentComponent,
Object
message,
String
note,
 int min,
 int max)
Constructs a graphic object that shows progress, typically by filling
 in a rectangular bar as the process nears completion.
ProxyLazyValue
(
String
c)
Creates a
LazyValue
which will construct an instance
 when asked.
ProxyLazyValue
(
String
c,
Object
[] o)
Creates a
LazyValue
which will construct an instance
 when asked.
ProxyLazyValue
(
String
c,
String
m)
Creates a
LazyValue
which will construct an instance
 when asked.
ProxyLazyValue
(
String
c,
String
m,
Object
[] o)
Creates a
LazyValue
which will construct an instance
 when asked.
TransferHandler
(
String
property)
Constructs a transfer handler that can transfer a Java Bean property
 from one component to another via the clipboard or a drag and drop
 operation.
UnsupportedLookAndFeelException
(
String
s)
Constructs an UnsupportedLookAndFeelException object.
Uses of
String
in
javax.swing.border
Fields in
javax.swing.border
declared as
String
Modifier and Type
Field
Description
protected
String
TitledBorder.
title
The title the border should display.
Methods in
javax.swing.border
that return
String
Modifier and Type
Method
Description
String
TitledBorder.
getTitle
()
Returns the title of the titled border.
Methods in
javax.swing.border
with parameters of type
String
Modifier and Type
Method
Description
void
TitledBorder.
setTitle
(
String
title)
Sets the title of the titled border.
Constructors in
javax.swing.border
with parameters of type
String
Modifier
Constructor
Description
TitledBorder
(
String
title)
Creates a TitledBorder instance.
TitledBorder
(
Border
border,
String
title)
Creates a TitledBorder instance with the specified border
 and title.
TitledBorder
(
Border
border,
String
title,
 int titleJustification,
 int titlePosition)
Creates a TitledBorder instance with the specified border,
 title, title-justification, and title-position.
TitledBorder
(
Border
border,
String
title,
 int titleJustification,
 int titlePosition,
Font
titleFont)
Creates a TitledBorder instance with the specified border,
 title, title-justification, title-position, and title-font.
TitledBorder
(
Border
border,
String
title,
 int titleJustification,
 int titlePosition,
Font
titleFont,
Color
titleColor)
Creates a TitledBorder instance with the specified border,
 title, title-justification, title-position, title-font, and
 title-color.
Uses of
String
in
javax.swing.colorchooser
Fields in
javax.swing.colorchooser
declared as
String
Modifier and Type
Field
Description
static final
String
AbstractColorChooserPanel.
TRANSPARENCY_ENABLED_PROPERTY
Identifies that the transparency of the color (alpha value) can be
 selected
Methods in
javax.swing.colorchooser
that return
String
Modifier and Type
Method
Description
abstract
String
AbstractColorChooserPanel.
getDisplayName
()
Returns a string containing the display name of the panel.
Uses of
String
in
javax.swing.event
Methods in
javax.swing.event
that return
String
Modifier and Type
Method
Description
String
HyperlinkEvent.
getDescription
()
Get the description of the link as a string.
String
InternalFrameEvent.
paramString
()
Returns a parameter string identifying this event.
String
DocumentEvent.EventType.
toString
()
Converts the type to a string.
String
EventListenerList.
toString
()
Returns a string representation of the EventListenerList.
String
HyperlinkEvent.EventType.
toString
()
Converts the type to a string.
String
ListDataEvent.
toString
()
Returns a string representation of this ListDataEvent.
String
ListSelectionEvent.
toString
()
Returns a
String
that displays and identifies this
 object's properties.
String
TreeModelEvent.
toString
()
Returns a string that displays and identifies this object's
 properties.
Methods in
javax.swing.event
with parameters of type
String
Modifier and Type
Method
Description
static
RowSorterEvent.Type
RowSorterEvent.Type.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Constructors in
javax.swing.event
with parameters of type
String
Modifier
Constructor
Description
HyperlinkEvent
(
Object
source,
HyperlinkEvent.EventType
type,
URL
u,
String
desc)
Creates a new object representing a hypertext link event.
HyperlinkEvent
(
Object
source,
HyperlinkEvent.EventType
type,
URL
u,
String
desc,
Element
sourceElement)
Creates a new object representing a hypertext link event.
HyperlinkEvent
(
Object
source,
HyperlinkEvent.EventType
type,
URL
u,
String
desc,
Element
sourceElement,
InputEvent
inputEvent)
Creates a new object representing a hypertext link event.
Uses of
String
in
javax.swing.filechooser
Methods in
javax.swing.filechooser
that return
String
Modifier and Type
Method
Description
abstract
String
FileFilter.
getDescription
()
The description of this filter.
String
FileNameExtensionFilter.
getDescription
()
The description of this filter.
String
FileView.
getDescription
(
File
f)
A human readable description of the file.
String
[]
FileNameExtensionFilter.
getExtensions
()
Returns the set of file name extensions files are tested against.
String
FileView.
getName
(
File
f)
The name of the file.
String
FileSystemView.
getSystemDisplayName
(
File
f)
Name of a file, directory, or folder as it would be displayed in
 a system file browser.
String
FileSystemView.
getSystemTypeDescription
(
File
f)
Type description for a file, directory, or folder as it would be displayed in
 a system file browser.
String
FileView.
getTypeDescription
(
File
f)
A human readable description of the type of the file.
String
FileNameExtensionFilter.
toString
()
Returns a string representation of the
FileNameExtensionFilter
.
Methods in
javax.swing.filechooser
with parameters of type
String
Modifier and Type
Method
Description
File
FileSystemView.
createFileObject
(
File
dir,
String
filename)
Returns a File object constructed in dir from the given filename.
File
FileSystemView.
createFileObject
(
String
path)
Returns a File object constructed from the given path string.
File
FileSystemView.
getChild
(
File
parent,
String
fileName)
Returns a
File
object which is normally constructed with
new
 File(parent, fileName)
except when the parent and child are both
 special folders, in which case the
File
is a wrapper containing
 a ShellFolder object.
Constructors in
javax.swing.filechooser
with parameters of type
String
Modifier
Constructor
Description
FileNameExtensionFilter
(
String
description,
String
... extensions)
Creates a
FileNameExtensionFilter
with the specified
 description and file name extensions.
Uses of
String
in
javax.swing.plaf
Methods in
javax.swing.plaf
that return
String
Modifier and Type
Method
Description
abstract
String
FileChooserUI.
getApproveButtonText
(
JFileChooser
fc)
Returns approve button text.
abstract
String
FileChooserUI.
getDialogTitle
(
JFileChooser
fc)
Returns the dialog title.
String
TextUI.
getToolTipText
(
JTextComponent
t,
Point
pt)
Deprecated.
replaced by
TextUI.getToolTipText2D(JTextComponent, Point2D)
String
TextUI.
getToolTipText2D
(
JTextComponent
t,
Point2D
pt)
Returns the string to be used as the tooltip at the passed in location.
Methods in
javax.swing.plaf
with parameters of type
String
Modifier and Type
Method
Description
void
LayerUI.
addPropertyChangeListener
(
String
propertyName,
PropertyChangeListener
listener)
Adds a PropertyChangeListener to the listener list for a specific
 property.
protected void
LayerUI.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Support for reporting bound property changes for Object properties.
PropertyChangeListener
[]
LayerUI.
getPropertyChangeListeners
(
String
propertyName)
Returns an array of all the listeners which have been associated
 with the named property.
void
LayerUI.
removePropertyChangeListener
(
String
propertyName,
PropertyChangeListener
listener)
Removes a
PropertyChangeListener
from the listener
 list for a specific property.
Constructors in
javax.swing.plaf
with parameters of type
String
Modifier
Constructor
Description
FontUIResource
(
String
name,
 int style,
 int size)
Constructs a
FontUIResource
.
TitledBorderUIResource
(
String
title)
Constructs a
TitledBorderUIResource
.
TitledBorderUIResource
(
Border
border,
String
title)
Constructs a
TitledBorderUIResource
.
TitledBorderUIResource
(
Border
border,
String
title,
 int titleJustification,
 int titlePosition)
Constructs a
TitledBorderUIResource
.
TitledBorderUIResource
(
Border
border,
String
title,
 int titleJustification,
 int titlePosition,
Font
titleFont)
Constructs a
TitledBorderUIResource
.
TitledBorderUIResource
(
Border
border,
String
title,
 int titleJustification,
 int titlePosition,
Font
titleFont,
Color
titleColor)
Constructs a
TitledBorderUIResource
.
Uses of
String
in
javax.swing.plaf.basic
Fields in
javax.swing.plaf.basic
declared as
String
Modifier and Type
Field
Description
protected
String
BasicMenuItemUI.
acceleratorDelimiter
Accelerator delimiter string, such as
'+'
in
'Ctrl+C'
.
protected
String
BasicFileChooserUI.
cancelButtonText
Cancel button text
protected
String
BasicFileChooserUI.
cancelButtonToolTipText
Cancel button tool tip text
protected static final
String
BasicInternalFrameTitlePane.
CLOSE_CMD
The close button text property.
protected
String
BasicToolBarUI.
constraintBeforeFloating
The layout before floating.
protected
String
BasicFileChooserUI.
directoryOpenButtonText
The label text displayed on the approve button when a directory
 is selected and the current selection mode is FILES_ONLY.
protected
String
BasicFileChooserUI.
directoryOpenButtonToolTipText
The tooltip text displayed on the approve button when a directory
 is selected and the current selection mode is FILES_ONLY.
static final
String
BasicHTML.
documentBaseKey
Key stored as a client property to indicate the base that relative
 references are resolved against.
protected
String
BasicFileChooserUI.
helpButtonText
Help button text
protected
String
BasicFileChooserUI.
helpButtonToolTipText
Help button tool tip text
protected static final
String
BasicInternalFrameTitlePane.
ICONIFY_CMD
The minimize button text property.
protected static final
String
BasicInternalFrameTitlePane.
MAXIMIZE_CMD
The maximize button text property.
protected static final
String
BasicInternalFrameTitlePane.
MOVE_CMD
The move button text property.
protected static final
String
BasicSplitPaneUI.
NON_CONTINUOUS_DIVIDER
The divider used for non-continuous layout is added to the split pane
 with this object.
protected
String
BasicFileChooserUI.
openButtonText
Open button text
protected
String
BasicFileChooserUI.
openButtonToolTipText
Open button tool tip text
static final
String
BasicHTML.
propertyKey
Key to use for the html renderer when stored as a
 client property of a JComponent.
protected static final
String
BasicInternalFrameTitlePane.
RESTORE_CMD
The restore button text property.
protected
String
BasicFileChooserUI.
saveButtonText
Save button text
protected
String
BasicFileChooserUI.
saveButtonToolTipText
Save button tool tip text
protected static final
String
BasicInternalFrameTitlePane.
SIZE_CMD
The size button text property.
protected
String
BasicFileChooserUI.
updateButtonText
Update button text
protected
String
BasicFileChooserUI.
updateButtonToolTipText
Update button tool tip text
Methods in
javax.swing.plaf.basic
that return
String
Modifier and Type
Method
Description
String
BasicFileChooserUI.
getApproveButtonText
(
JFileChooser
fc)
Returns approve button text.
String
BasicFileChooserUI.
getApproveButtonToolTipText
(
JFileChooser
fc)
Returns the approve button tool tip.
static
String
BasicGraphicsUtils.
getClippedString
(
JComponent
c,
FontMetrics
fm,
String
string,
 int availTextWidth)
Clips the passed in string to the space provided.
String
BasicFileChooserUI.AcceptAllFileFilter.
getDescription
()
The description of this filter.
String
BasicFileChooserUI.
getDialogTitle
(
JFileChooser
fc)
Returns the title of this dialog
String
BasicFileChooserUI.
getDirectoryName
()
Returns the directory name.
String
BasicFileChooserUI.
getFileName
()
Returns the file name.
protected
String
BasicTextUI.
getKeymapName
()
Fetches the name of the keymap that will be installed/used
 by default for this UI.
protected
String
BasicButtonUI.
getPropertyPrefix
()
Returns the property prefix.
String
BasicCheckBoxUI.
getPropertyPrefix
()
protected
String
BasicEditorPaneUI.
getPropertyPrefix
()
Fetches the name used as a key to lookup properties through the
 UIManager.
protected
String
BasicFormattedTextFieldUI.
getPropertyPrefix
()
Fetches the name used as a key to lookup properties through the
 UIManager.
protected
String
BasicMenuItemUI.
getPropertyPrefix
()
Returns a property prefix.
protected
String
BasicPasswordFieldUI.
getPropertyPrefix
()
Fetches the name used as a key to look up properties through the
 UIManager.
protected
String
BasicTextAreaUI.
getPropertyPrefix
()
Fetches the name used as a key to look up properties through the
 UIManager.
protected
String
BasicTextFieldUI.
getPropertyPrefix
()
Fetches the name used as a key to lookup properties through the
 UIManager.
protected
String
BasicTextPaneUI.
getPropertyPrefix
()
Fetches the name used as a key to lookup properties through the
 UIManager.
protected abstract
String
BasicTextUI.
getPropertyPrefix
()
Gets the name used as a key to look up properties through the
 UIManager.
protected
String
BasicInternalFrameTitlePane.
getTitle
(
String
text,
FontMetrics
fm,
 int availTextWidth)
Returns the title.
String
BasicTextUI.
getToolTipText
(
JTextComponent
t,
Point
pt)
Returns the string to be used as the tooltip at the passed in location.
protected
String
BasicLabelUI.
layoutCL
(
JLabel
label,
FontMetrics
fontMetrics,
String
text,
Icon
icon,
Rectangle
viewR,
Rectangle
iconR,
Rectangle
textR)
Forwards the call to SwingUtilities.layoutCompoundLabel().
Methods in
javax.swing.plaf.basic
with parameters of type
String
Modifier and Type
Method
Description
void
BasicComboBoxUI.ComboBoxLayoutManager.
addLayoutComponent
(
String
name,
Component
comp)
void
BasicInternalFrameTitlePane.TitlePaneLayout.
addLayoutComponent
(
String
name,
Component
c)
void
BasicInternalFrameUI.InternalFrameLayout.
addLayoutComponent
(
String
name,
Component
c)
If the layout manager uses a per-component string,
 adds the component
comp
to the layout,
 associating it
 with the string specified by
name
.
void
BasicOptionPaneUI.ButtonAreaLayout.
addLayoutComponent
(
String
string,
Component
comp)
void
BasicScrollBarUI.
addLayoutComponent
(
String
name,
Component
child)
void
BasicSplitPaneDivider.DividerLayout.
addLayoutComponent
(
String
string,
Component
c)
void
BasicSplitPaneUI.BasicHorizontalLayoutManager.
addLayoutComponent
(
String
place,
Component
component)
Adds the component at place.
void
BasicTabbedPaneUI.TabbedPaneLayout.
addLayoutComponent
(
String
name,
Component
comp)
protected void
BasicOptionPaneUI.
burstStringInto
(
Container
c,
String
d,
 int maxll)
Recursively creates new
JLabel
instances to represent
d
.
static
View
BasicHTML.
createHTMLView
(
JComponent
c,
String
html)
Create an html renderer for the given component and
 string of html.
static void
BasicGraphicsUtils.
drawString
(
Graphics
g,
String
text,
 int underlinedChar,
 int x,
 int y)
Draw a string with the graphics
g
at location (x,y)
 just like
g.drawString
would.
static void
BasicGraphicsUtils.
drawString
(
JComponent
c,
Graphics2D
g,
String
string,
 float x,
 float y)
Draws the given string at the specified location using text properties
 and anti-aliasing hints from the provided component.
static void
BasicGraphicsUtils.
drawStringUnderlineCharAt
(
Graphics
g,
String
text,
 int underlinedIndex,
 int x,
 int y)
Draw a string with the graphics
g
at location
 (
x
,
y
)
 just like
g.drawString
would.
static void
BasicGraphicsUtils.
drawStringUnderlineCharAt
(
JComponent
c,
Graphics2D
g,
String
string,
 int underlinedIndex,
 float x,
 float y)
Draws the given string at the specified location underlining
 the specified character.
protected void
BasicDirectoryModel.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Support for reporting bound property changes for boolean properties.
static
String
BasicGraphicsUtils.
getClippedString
(
JComponent
c,
FontMetrics
fm,
String
string,
 int availTextWidth)
Clips the passed in string to the space provided.
protected
Point
BasicProgressBarUI.
getStringPlacement
(
Graphics
g,
String
progressString,
 int x,
 int y,
 int width,
 int height)
Designate the place where the progress string will be painted.
static float
BasicGraphicsUtils.
getStringWidth
(
JComponent
c,
FontMetrics
fm,
String
string)
Returns the width of the passed in string using text properties
 and anti-aliasing hints from the provided component.
protected
String
BasicInternalFrameTitlePane.
getTitle
(
String
text,
FontMetrics
fm,
 int availTextWidth)
Returns the title.
static boolean
BasicHTML.
isHTMLString
(
String
s)
Check the given string to see if it should trigger the
 html rendering logic in a non-text component that supports
 html rendering.
protected
String
BasicLabelUI.
layoutCL
(
JLabel
label,
FontMetrics
fontMetrics,
String
text,
Icon
icon,
Rectangle
viewR,
Rectangle
iconR,
Rectangle
textR)
Forwards the call to SwingUtilities.layoutCompoundLabel().
protected void
BasicTabbedPaneUI.
layoutLabel
(int tabPlacement,
FontMetrics
metrics,
 int tabIndex,
String
title,
Icon
icon,
Rectangle
tabRect,
Rectangle
iconRect,
Rectangle
textRect,
 boolean isSelected)
Lays out a label.
protected void
BasicLookAndFeel.
loadSystemColors
(
UIDefaults
table,
String
[] systemColors,
 boolean useNative)
Populates
table
with the
name-color
pairs in
systemColors
.
protected void
BasicLabelUI.
paintDisabledText
(
JLabel
l,
Graphics
g,
String
s,
 int textX,
 int textY)
Paint clippedText at textX, textY with background.lighter() and then
 shifted down and to the right by one pixel with background.darker().
protected void
BasicLabelUI.
paintEnabledText
(
JLabel
l,
Graphics
g,
String
s,
 int textX,
 int textY)
Paint clippedText at textX, textY with the labels foreground color.
protected void
BasicButtonUI.
paintText
(
Graphics
g,
AbstractButton
b,
Rectangle
textRect,
String
text)
Method which renders the text of the current button.
protected void
BasicButtonUI.
paintText
(
Graphics
g,
JComponent
c,
Rectangle
textRect,
String
text)
Method which renders the text of the current button.
protected void
BasicMenuItemUI.
paintText
(
Graphics
g,
JMenuItem
menuItem,
Rectangle
textRect,
String
text)
Renders the text of the current menu item.
protected void
BasicTabbedPaneUI.
paintText
(
Graphics
g,
 int tabPlacement,
Font
font,
FontMetrics
metrics,
 int tabIndex,
String
title,
Rectangle
textRect,
 boolean isSelected)
Paints text.
void
BasicFileChooserUI.
setDirectoryName
(
String
dirname)
Sets the directory name.
void
BasicFileChooserUI.
setFileName
(
String
filename)
Sets the file name.
static void
BasicHTML.
updateRenderer
(
JComponent
c,
String
text)
Stash the HTML render for the given text into the client
 properties of the given JComponent.
Constructors in
javax.swing.plaf.basic
with parameters of type
String
Modifier
Constructor
Description
TreeCancelEditingAction
(
String
name)
Constructs a new instance of
TreeCancelEditingAction
.
TreeHomeAction
(int direction,
String
name)
Constructs a new instance of
TreeHomeAction
.
TreeIncrementAction
(int direction,
String
name)
Constructs a new instance of
TreeIncrementAction
.
TreePageAction
(int direction,
String
name)
Constructs a new instance of
TreePageAction
.
TreeToggleAction
(
String
name)
Constructs a new instance of
TreeToggleAction
.
TreeTraverseAction
(int direction,
String
name)
Constructs a new instance of
TreeTraverseAction
.
Uses of
String
in
javax.swing.plaf.metal
Fields in
javax.swing.plaf.metal
declared as
String
Modifier and Type
Field
Description
static final
String
MetalScrollBarUI.
FREE_STANDING_PROP
The property
JScrollBar.isFreeStanding
.
protected static
String
MetalInternalFrameUI.
IS_PALETTE
The property
JInternalFrame.isPalette
.
protected final
String
MetalSliderUI.
SLIDER_FILL
Property for
JSlider.isFilled
.
Methods in
javax.swing.plaf.metal
that return
String
Modifier and Type
Method
Description
String
MetalToolTipUI.
getAcceleratorString
()
Returns the accelerator string.
String
MetalLookAndFeel.
getDescription
()
Returns a short description of this look and feel.
String
MetalFileChooserUI.
getDirectoryName
()
Returns the directory name.
String
MetalLookAndFeel.
getID
()
Returns an identifier for this look and feel.
String
DefaultMetalTheme.
getName
()
Returns the name of this theme.
String
MetalLookAndFeel.
getName
()
Returns the name of this look and feel.
abstract
String
MetalTheme.
getName
()
Returns the name of this theme.
String
OceanTheme.
getName
()
Return the name of this theme, "Ocean".
String
MetalCheckBoxUI.
getPropertyPrefix
()
Methods in
javax.swing.plaf.metal
with parameters of type
String
Modifier and Type
Method
Description
protected void
MetalLabelUI.
paintDisabledText
(
JLabel
l,
Graphics
g,
String
s,
 int textX,
 int textY)
Just paint the text gray (Label.disabledForeground) rather than
 in the labels foreground color.
void
MetalFileChooserUI.
setDirectoryName
(
String
dirname)
Sets the directory name.
Uses of
String
in
javax.swing.plaf.multi
Methods in
javax.swing.plaf.multi
that return
String
Modifier and Type
Method
Description
String
MultiFileChooserUI.
getApproveButtonText
(
JFileChooser
a)
Invokes the
getApproveButtonText
method on each UI handled by this object.
String
MultiLookAndFeel.
getDescription
()
Returns a one-line description of this look and feel.
String
MultiFileChooserUI.
getDialogTitle
(
JFileChooser
a)
Invokes the
getDialogTitle
method on each UI handled by this object.
String
MultiLookAndFeel.
getID
()
Returns a string, suitable for use by applications/services,
 that identifies this look and feel.
String
MultiLookAndFeel.
getName
()
Returns a string, suitable for use in menus,
 that identifies this look and feel.
String
MultiTextUI.
getToolTipText
(
JTextComponent
a,
Point
b)
Invokes the
getToolTipText
method on each UI handled by this object.
Uses of
String
in
javax.swing.plaf.nimbus
Fields in
javax.swing.plaf.nimbus
declared as
String
Modifier and Type
Field
Description
static final
String
NimbusStyle.
LARGE_KEY
Large key
static final
String
NimbusStyle.
MINI_KEY
Mini key
static final
String
NimbusStyle.
SMALL_KEY
Small key
Methods in
javax.swing.plaf.nimbus
that return
String
Modifier and Type
Method
Description
String
NimbusLookAndFeel.
getDescription
()
Returns a textual description of this look and feel.
String
NimbusLookAndFeel.
getID
()
Return a string that identifies this look and feel.
String
NimbusLookAndFeel.
getName
()
Return a short string that identifies this look and feel.
Methods in
javax.swing.plaf.nimbus
with parameters of type
String
Modifier and Type
Method
Description
protected final
Color
AbstractRegionPainter.
decodeColor
(
String
key,
 float hOffset,
 float sOffset,
 float bOffset,
 int aOffset)
Decodes and returns a color, which is derived from a base color in UI
 defaults.
protected final
Color
AbstractRegionPainter.
getComponentColor
(
JComponent
c,
String
property,
Color
defaultColor,
 float saturationOffset,
 float brightnessOffset,
 int alphaOffset)
Get a color property from the given JComponent.
Color
NimbusLookAndFeel.
getDerivedColor
(
String
uiDefaultParentName,
 float hOffset,
 float sOffset,
 float bOffset,
 int aOffset,
 boolean uiResource)
Get a derived color, derived colors are shared instances and is color
 value will change when its parent UIDefault color changes.
void
NimbusLookAndFeel.
register
(
Region
region,
String
prefix)
Registers a third party component with the NimbusLookAndFeel.
static
AbstractRegionPainter.PaintContext.CacheMode
AbstractRegionPainter.PaintContext.CacheMode.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Constructors in
javax.swing.plaf.nimbus
with parameters of type
String
Modifier
Constructor
Description
protected
State
(
String
name)
Create a new custom State.
Uses of
String
in
javax.swing.plaf.synth
Methods in
javax.swing.plaf.synth
that return
String
Modifier and Type
Method
Description
String
SynthLookAndFeel.
getDescription
()
Returns a textual description of SynthLookAndFeel.
String
SynthLookAndFeel.
getID
()
Return a string that identifies this look and feel.
String
Region.
getName
()
Returns the name of the region.
String
SynthLookAndFeel.
getName
()
Return a short string that identifies this look and feel.
protected
String
SynthFormattedTextFieldUI.
getPropertyPrefix
()
Fetches the name used as a key to lookup properties through the
 UIManager.
protected
String
SynthPasswordFieldUI.
getPropertyPrefix
()
Fetches the name used as a key to look up properties through the
 UIManager.
protected
String
SynthTextPaneUI.
getPropertyPrefix
()
Fetches the name used as a key to lookup properties through the
 UIManager.
String
SynthStyle.
getString
(
SynthContext
context,
Object
key,
String
defaultValue)
Convenience method to get a specific style property whose value is
 a String.
String
SynthGraphicsUtils.
layoutText
(
SynthContext
ss,
FontMetrics
fm,
String
text,
Icon
icon,
 int hAlign,
 int vAlign,
 int hTextPosition,
 int vTextPosition,
Rectangle
viewR,
Rectangle
iconR,
Rectangle
textR,
 int iconTextGap)
Lays out text and an icon returning, by reference, the location to
 place the icon and text.
String
ColorType.
toString
()
Returns the textual description of this
ColorType
.
String
Region.
toString
()
Returns the name of the Region.
Methods in
javax.swing.plaf.synth
with parameters of type
String
Modifier and Type
Method
Description
int
SynthGraphicsUtils.
computeStringWidth
(
SynthContext
ss,
Font
font,
FontMetrics
metrics,
String
text)
Returns the size of the passed in string.
Dimension
SynthGraphicsUtils.
getMaximumSize
(
SynthContext
ss,
Font
font,
String
text,
Icon
icon,
 int hAlign,
 int vAlign,
 int hTextPosition,
 int vTextPosition,
 int iconTextGap,
 int mnemonicIndex)
Returns the maximum size needed to properly render an icon and text.
Dimension
SynthGraphicsUtils.
getMinimumSize
(
SynthContext
ss,
Font
font,
String
text,
Icon
icon,
 int hAlign,
 int vAlign,
 int hTextPosition,
 int vTextPosition,
 int iconTextGap,
 int mnemonicIndex)
Returns the minimum size needed to properly render an icon and text.
Dimension
SynthGraphicsUtils.
getPreferredSize
(
SynthContext
ss,
Font
font,
String
text,
Icon
icon,
 int hAlign,
 int vAlign,
 int hTextPosition,
 int vTextPosition,
 int iconTextGap,
 int mnemonicIndex)
Returns the preferred size needed to properly render an icon and text.
String
SynthStyle.
getString
(
SynthContext
context,
Object
key,
String
defaultValue)
Convenience method to get a specific style property whose value is
 a String.
String
SynthGraphicsUtils.
layoutText
(
SynthContext
ss,
FontMetrics
fm,
String
text,
Icon
icon,
 int hAlign,
 int vAlign,
 int hTextPosition,
 int vTextPosition,
Rectangle
viewR,
Rectangle
iconR,
Rectangle
textR,
 int iconTextGap)
Lays out text and an icon returning, by reference, the location to
 place the icon and text.
void
SynthGraphicsUtils.
paintText
(
SynthContext
ss,
Graphics
g,
String
text,
 int x,
 int y,
 int mnemonicIndex)
Paints text at the specified location.
void
SynthGraphicsUtils.
paintText
(
SynthContext
ss,
Graphics
g,
String
text,
Rectangle
bounds,
 int mnemonicIndex)
Paints text at the specified location.
void
SynthGraphicsUtils.
paintText
(
SynthContext
ss,
Graphics
g,
String
text,
Icon
icon,
 int hAlign,
 int vAlign,
 int hTextPosition,
 int vTextPosition,
 int iconTextGap,
 int mnemonicIndex,
 int textOffset)
Paints an icon and text.
protected void
SynthProgressBarUI.
paintText
(
SynthContext
context,
Graphics
g,
String
title)
Paints the component's text.
Constructors in
javax.swing.plaf.synth
with parameters of type
String
Modifier
Constructor
Description
protected
ColorType
(
String
description)
Creates a new ColorType with the specified description.
protected
Region
(
String
name,
String
ui,
 boolean subregion)
Creates a Region with the specified name.
Uses of
String
in
javax.swing.table
Fields in
javax.swing.table
declared as
String
Modifier and Type
Field
Description
static final
String
TableColumn.
CELL_RENDERER_PROPERTY
Obsolete as of Java 2 platform v1.3.
static final
String
TableColumn.
COLUMN_WIDTH_PROPERTY
Obsolete as of Java 2 platform v1.3.
static final
String
TableColumn.
HEADER_RENDERER_PROPERTY
Obsolete as of Java 2 platform v1.3.
static final
String
TableColumn.
HEADER_VALUE_PROPERTY
Obsolete as of Java 2 platform v1.3.
Methods in
javax.swing.table
that return
String
Modifier and Type
Method
Description
String
AbstractTableModel.
getColumnName
(int column)
Returns a default name for the column using spreadsheet conventions:
  A, B, C, ...
String
DefaultTableModel.
getColumnName
(int column)
Returns the column name.
String
TableModel.
getColumnName
(int columnIndex)
Returns the name of the column at
columnIndex
.
String
JTableHeader.
getToolTipText
(
MouseEvent
event)
Allows the renderer's tips to be used if there is text set.
String
JTableHeader.
getUIClassID
()
Returns the suffix used to construct the name of the look and feel
 (L&F) class used to render this component.
protected
String
JTableHeader.
paramString
()
Returns a string representation of this
JTableHeader
.
abstract
String
TableStringConverter.
toString
(
TableModel
model,
 int row,
 int column)
Returns the string representation of the value at the specified
 location.
Methods in
javax.swing.table
with parameters of type
String
Modifier and Type
Method
Description
int
AbstractTableModel.
findColumn
(
String
columnName)
Returns a column given its name.
void
DefaultTableCellRenderer.
firePropertyChange
(
String
propertyName,
 boolean oldValue,
 boolean newValue)
Overridden for performance reasons.
protected void
DefaultTableCellRenderer.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Overridden for performance reasons.
void
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry.
setAccessibleDescription
(
String
s)
void
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry.
setAccessibleName
(
String
s)
Uses of
String
in
javax.swing.text
Fields in
javax.swing.text
declared as
String
Modifier and Type
Field
Description
String
JTextComponent.KeyBinding.
actionName
The name of the action for the key.
static final
String
DefaultEditorKit.
backwardAction
Name of the Action for moving the caret
 logically backward one position.
protected static final
String
AbstractDocument.
BAD_LOCATION
Error message to indicate a bad location.
static final
String
DefaultEditorKit.
beepAction
Name of the action to create a beep.
static final
String
DefaultEditorKit.
beginAction
Name of the
Action
for moving the caret
 to the beginning of the document.
static final
String
DefaultEditorKit.
beginLineAction
Name of the
Action
for moving the caret
 to the beginning of a line.
static final
String
DefaultEditorKit.
beginLineUpAction
Name of the
Action
for moving the caret
 to the beginning of the current line or up to the
 beginning of the previous line if the caret is
 already at the beginning of the line.
static final
String
DefaultEditorKit.
beginParagraphAction
Name of the
Action
for moving the caret
 to the beginning of a paragraph.
static final
String
DefaultEditorKit.
beginWordAction
Name of the
Action
for moving the caret
 to the beginning of a word.
static final
String
AbstractDocument.
BidiElementName
Name of elements used to hold a unidirectional run
static final
String
StyleConstants.
ComponentElementName
Name of elements used to represent components.
static final
String
AbstractDocument.
ContentElementName
Name of elements used to represent content
static final
String
DefaultEditorKit.
copyAction
Name of the action to copy the selected region
 and place the contents into the system clipboard.
static final
String
DefaultEditorKit.
cutAction
Name of the action to cut the selected region
 and place the contents into the system clipboard.
static final
String
JTextComponent.
DEFAULT_KEYMAP
The default keymap that will be shared by all
JTextComponent
instances unless they
 have had a different keymap set.
static final
String
StyleContext.
DEFAULT_STYLE
The name given to the default logical style attached
 to paragraphs.
static final
String
DefaultEditorKit.
defaultKeyTypedAction
Name of the action that is executed by default if
 a
key typed event
is received and there
 is no keymap entry.
static final
String
DefaultEditorKit.
deleteNextCharAction
Name of the action to delete the character of content that
 follows the current caret position.
static final
String
DefaultEditorKit.
deleteNextWordAction
Name of the action to delete the word that
 follows the beginning of the selection.
static final
String
DefaultEditorKit.
deletePrevCharAction
Name of the action to delete the character of content that
 precedes the current caret position.
static final
String
DefaultEditorKit.
deletePrevWordAction
Name of the action to delete the word that
 precedes the beginning of the selection.
static final
String
DefaultEditorKit.
downAction
Name of the Action for moving the caret
 logically downward one position.
static final
String
AbstractDocument.
ElementNameAttribute
Name of the attribute used to specify element
 names.
static final
String
DefaultEditorKit.
endAction
Name of the
Action
for moving the caret
 to the end of the document.
static final
String
DefaultEditorKit.
endLineAction
Name of the
Action
for moving the caret
 to the end of a line.
static final
String
DefaultEditorKit.
endLineDownAction
Name of the
Action
for moving the caret
 to the end of the current line or down to the
 end of the next line if the caret is already
 at the end of the line.
static final
String
DefaultEditorKit.
EndOfLineStringProperty
When reading a document if a CRLF is encountered a property
 with this name is added and the value will be "\r\n".
static final
String
DefaultEditorKit.
endParagraphAction
Name of the
Action
for moving the caret
 to the end of a paragraph.
static final
String
DefaultEditorKit.
endWordAction
Name of the Action for moving the caret
 to the end of a word.
static final
String
JTextComponent.
FOCUS_ACCELERATOR_KEY
The bound property name for the focus accelerator.
static final
String
DefaultEditorKit.
forwardAction
Name of the Action for moving the caret
 logically forward one position.
static final
String
StyleConstants.
IconElementName
Name of elements used to represent icons.
static final
String
DefaultEditorKit.
insertBreakAction
Name of the action to place a line/paragraph break into
 the document.
static final
String
DefaultEditorKit.
insertContentAction
Name of the action to place content into the associated
 document.
static final
String
DefaultEditorKit.
insertTabAction
Name of the action to place a tab character into
 the document.
static final
String
PlainDocument.
lineLimitAttribute
Name of the attribute that specifies the maximum
 length of a line, if there is a maximum length.
static final
String
DefaultEditorKit.
nextWordAction
Name of the
Action
for moving the caret to the
 beginning of the next word.
static final
String
DefaultEditorKit.
pageDownAction
Name of the action to page down vertically.
static final
String
DefaultEditorKit.
pageUpAction
Name of the action to page up vertically.
static final
String
AbstractDocument.
ParagraphElementName
Name of elements used to represent paragraphs
static final
String
DefaultEditorKit.
pasteAction
Name of the action to paste the contents of the
 system clipboard into the selected region, or before the
 caret if nothing is selected.
static final
String
DefaultEditorKit.
previousWordAction
Name of the
Action
for moving the caret to the
 beginning of the previous word.
static final
String
DefaultEditorKit.
readOnlyAction
Name of the action to set the editor into read-only
 mode.
static final
String
AbstractDocument.
SectionElementName
Name of elements used to hold sections (lines/paragraphs).
static final
String
DefaultEditorKit.
selectAllAction
Name of the Action for selecting the entire document
static final
String
DefaultEditorKit.
selectionBackwardAction
Name of the Action for extending the selection
 by moving the caret logically backward one position.
static final
String
DefaultEditorKit.
selectionBeginAction
Name of the
Action
for moving the caret
 to the beginning of the document.
static final
String
DefaultEditorKit.
selectionBeginLineAction
Name of the
Action
for moving the caret
 to the beginning of a line, extending the selection.
static final
String
DefaultEditorKit.
selectionBeginParagraphAction
Name of the
Action
for moving the caret
 to the beginning of a paragraph, extending the selection.
static final
String
DefaultEditorKit.
selectionBeginWordAction
Name of the
Action
for moving the caret
 to the beginning of a word, extending the selection.
static final
String
DefaultEditorKit.
selectionDownAction
Name of the Action for moving the caret
 logically downward one position, extending the selection.
static final
String
DefaultEditorKit.
selectionEndAction
Name of the Action for moving the caret
 to the end of the document.
static final
String
DefaultEditorKit.
selectionEndLineAction
Name of the
Action
for moving the caret
 to the end of a line, extending the selection.
static final
String
DefaultEditorKit.
selectionEndParagraphAction
Name of the
Action
for moving the caret
 to the end of a paragraph, extending the selection.
static final
String
DefaultEditorKit.
selectionEndWordAction
Name of the Action for moving the caret
 to the end of a word, extending the selection.
static final
String
DefaultEditorKit.
selectionForwardAction
Name of the Action for extending the selection
 by moving the caret logically forward one position.
static final
String
DefaultEditorKit.
selectionNextWordAction
Name of the
Action
for moving the selection to the
 beginning of the next word, extending the selection.
static final
String
DefaultEditorKit.
selectionPreviousWordAction
Name of the
Action
for moving the selection to the
 beginning of the previous word, extending the selection.
static final
String
DefaultEditorKit.
selectionUpAction
Name of the Action for moving the caret
 logically upward one position, extending the selection.
static final
String
DefaultEditorKit.
selectLineAction
Name of the Action for selecting a line around the caret.
static final
String
DefaultEditorKit.
selectParagraphAction
Name of the Action for selecting a paragraph around the caret.
static final
String
DefaultEditorKit.
selectWordAction
Name of the Action for selecting a word around the caret.
static final
String
Document.
StreamDescriptionProperty
The property name for the description of the stream
 used to initialize the document.
static final
String
PlainDocument.
tabSizeAttribute
Name of the attribute that specifies the tab
 size for tabs contained in the content.
static final
String
Document.
TitleProperty
The property name for the title of the document, if
 there is one.
static final
String
DefaultEditorKit.
upAction
Name of the Action for moving the caret
 logically upward one position.
static final
String
DefaultEditorKit.
writableAction
Name of the action to set the editor into writeable
 mode.
Methods in
javax.swing.text
that return
String
Modifier and Type
Method
Description
String
JTextComponent.AccessibleJTextComponent.
getAccessibleActionDescription
(int i)
Returns a description of the specified action of the object.
String
JTextComponent.AccessibleJTextComponent.
getAfterIndex
(int part,
 int index)
Returns the String after a given index.
String
JTextComponent.AccessibleJTextComponent.
getAtIndex
(int part,
 int index)
Returns the String at a given index.
String
JTextComponent.AccessibleJTextComponent.
getBeforeIndex
(int part,
 int index)
Returns the String before a given index.
String
ChangedCharSetException.
getCharSetSpec
()
Returns the char set specification.
String
DefaultEditorKit.
getContentType
()
Gets the MIME type of the data that this
 kit represents support for.
abstract
String
EditorKit.
getContentType
()
Gets the MIME type of the data that this
 kit represents support for.
static
String
StyleConstants.
getFontFamily
(
AttributeSet
a)
Gets the font family setting from the attribute list.
String
MaskFormatter.
getInvalidCharacters
()
Returns the characters that are not valid for input.
String
AbstractWriter.
getLineSeparator
()
Returns the string used to represent newlines.
String
MaskFormatter.
getMask
()
Returns the formatting mask.
String
AbstractDocument.AbstractElement.
getName
()
Gets the name of the element.
String
AbstractDocument.BranchElement.
getName
()
Gets the element name.
String
AbstractDocument.LeafElement.
getName
()
Gets the element name.
String
DefaultStyledDocument.SectionElement.
getName
()
Gets the name of the element.
String
Element.
getName
()
Fetches the name of the element.
String
Keymap.
getName
()
Fetches the name of the set of key-bindings.
String
Style.
getName
()
Fetches the name of the style.
String
StyleContext.NamedStyle.
getName
()
Fetches the name of the style.
String
MaskFormatter.
getPlaceholder
()
Returns the String to use if the value does not completely fill
 in the mask.
String
AbstractDocument.DefaultDocumentEvent.
getPresentationName
()
Provides a localized, human readable description of this edit
 suitable for use in, say, a change log.
String
AbstractDocument.DefaultDocumentEvent.
getRedoPresentationName
()
Provides a localized, human readable description of the redoable
 form of this edit, e.g. for use as a Redo menu item.
String
JTextComponent.AccessibleJTextComponent.
getSelectedText
()
Returns the portion of the text that is selected.
String
JTextComponent.
getSelectedText
()
Returns the selected text contained in this
TextComponent
.
String
AbstractDocument.Content.
getString
(int where,
 int len)
Fetches a string of characters contained in the sequence.
String
GapContent.
getString
(int where,
 int len)
Retrieves a portion of the content.
String
StringContent.
getString
(int where,
 int len)
Retrieves a portion of the content.
String
AbstractDocument.
getText
(int offset,
 int length)
Gets a sequence of text from the document.
protected
String
AbstractWriter.
getText
(
Element
elem)
Returns the text associated with the element.
String
Document.
getText
(int offset,
 int length)
Fetches the text contained within the given portion
 of the document.
String
JTextComponent.
getText
()
Returns the text contained in this
TextComponent
.
String
JTextComponent.
getText
(int offs,
 int len)
Fetches a portion of the text represented by the
 component.
String
JTextComponent.AccessibleJTextComponent.
getTextRange
(int startIndex,
 int endIndex)
Returns the text string between two indices.
String
JTextComponent.
getToolTipText
(
MouseEvent
event)
Returns the string to be used as the tooltip for
event
.
String
View.
getToolTipText
(float x,
 float y,
Shape
allocation)
Returns the tooltip text at the specified location.
String
AbstractDocument.DefaultDocumentEvent.
getUndoPresentationName
()
Provides a localized, human readable description of the undoable
 form of this edit, e.g. for use as an Undo menu item.
String
MaskFormatter.
getValidCharacters
()
Returns the valid characters that can be input.
protected
String
JTextComponent.
paramString
()
Returns a string representation of this
JTextComponent
.
String
AbstractDocument.BranchElement.
toString
()
Converts the element to a string.
String
AbstractDocument.DefaultDocumentEvent.
toString
()
Returns a string description of the change event.
String
AbstractDocument.LeafElement.
toString
()
Converts the element to a string.
String
DefaultStyledDocument.ElementSpec.
toString
()
Converts the element to a string.
String
JTextComponent.DropLocation.
toString
()
Returns a string representation of this drop location.
String
Position.Bias.
toString
()
string representation
String
Segment.
toString
()
Converts a segment into a String.
String
SimpleAttributeSet.
toString
()
Converts the attribute set to a String.
String
StyleConstants.
toString
()
Returns the string representation.
String
StyleContext.NamedStyle.
toString
()
Converts the style to a string.
String
StyleContext.SmallAttributeSet.
toString
()
Returns a string showing the key/value pairs.
String
StyleContext.
toString
()
Converts a StyleContext to a String.
String
TabSet.
toString
()
Returns the string representation of the set of tabs.
String
DefaultFormatter.
valueToString
(
Object
value)
Converts the passed in Object into a String by way of the
toString
method.
String
InternationalFormatter.
valueToString
(
Object
value)
Returns a String representation of the Object
value
.
String
MaskFormatter.
valueToString
(
Object
value)
Returns a String representation of the Object
value
based on the mask.
Methods in
javax.swing.text
with parameters of type
String
Modifier and Type
Method
Description
static
Keymap
JTextComponent.
addKeymap
(
String
nm,
Keymap
parent)
Adds a new keymap into the keymap hierarchy.
Style
DefaultStyledDocument.
addStyle
(
String
nm,
Style
parent)
Adds a new style into the logical style hierarchy.
Style
StyleContext.
addStyle
(
String
nm,
Style
parent)
Adds a new style into the style hierarchy.
Style
StyledDocument.
addStyle
(
String
nm,
Style
parent)
Adds a new style into the logical style hierarchy.
Font
StyleContext.
getFont
(
String
family,
 int style,
 int size)
Gets a new font.
static
Keymap
JTextComponent.
getKeymap
(
String
nm)
Fetches a named keymap previously added to the document.
Style
DefaultStyledDocument.
getStyle
(
String
nm)
Fetches a named style previously added.
Style
StyleContext.
getStyle
(
String
nm)
Fetches a named style previously added to the document
Style
StyledDocument.
getStyle
(
String
nm)
Fetches a named style previously added.
UndoableEdit
AbstractDocument.Content.
insertString
(int where,
String
str)
Inserts a string of characters into the sequence.
void
AbstractDocument.
insertString
(int offs,
String
str,
AttributeSet
a)
Inserts some content into the document.
void
Document.
insertString
(int offset,
String
str,
AttributeSet
a)
Inserts a string of content.
abstract void
DocumentFilter.FilterBypass.
insertString
(int offset,
String
string,
AttributeSet
attr)
Inserts the specified text, bypassing the
 DocumentFilter.
void
DocumentFilter.
insertString
(
DocumentFilter.FilterBypass
fb,
 int offset,
String
string,
AttributeSet
attr)
Invoked prior to insertion of text into the
 specified Document.
UndoableEdit
GapContent.
insertString
(int where,
String
str)
Inserts a string into the content.
void
PlainDocument.
insertString
(int offs,
String
str,
AttributeSet
a)
Inserts some content into the document.
UndoableEdit
StringContent.
insertString
(int where,
String
str)
Inserts a string into the content.
void
JTextComponent.AccessibleJTextComponent.
insertTextAtIndex
(int index,
String
s)
Inserts the specified string at the given index
static
Keymap
JTextComponent.
removeKeymap
(
String
nm)
Removes a named keymap previously added to the document.
void
DefaultStyledDocument.
removeStyle
(
String
nm)
Removes a named style previously added to the document.
void
StyleContext.
removeStyle
(
String
nm)
Removes a named style previously added to the document.
void
StyledDocument.
removeStyle
(
String
nm)
Removes a named style previously added to the document.
void
AbstractDocument.
replace
(int offset,
 int length,
String
text,
AttributeSet
attrs)
Deletes the region of text from
offset
to
offset + length
, and replaces it with
text
.
abstract void
DocumentFilter.FilterBypass.
replace
(int offset,
 int length,
String
string,
AttributeSet
attrs)
Deletes the region of text from
offset
to
offset + length
, and replaces it with
text
.
void
DocumentFilter.
replace
(
DocumentFilter.FilterBypass
fb,
 int offset,
 int length,
String
text,
AttributeSet
attrs)
Invoked prior to replacing a region of text in the
 specified Document.
void
JTextComponent.
replaceSelection
(
String
content)
Replaces the currently selected content with new content
 represented by the given string.
void
JTextComponent.AccessibleJTextComponent.
replaceText
(int startIndex,
 int endIndex,
String
s)
Replaces the text between two indices with the specified
 string.
static void
StyleConstants.
setFontFamily
(
MutableAttributeSet
a,
String
fam)
Sets the font attribute.
void
MaskFormatter.
setInvalidCharacters
(
String
invalidCharacters)
Allows for further restricting of the characters that can be input.
void
AbstractWriter.
setLineSeparator
(
String
value)
Sets the String used to represent newlines.
void
MaskFormatter.
setMask
(
String
mask)
Sets the mask dictating the legal characters.
void
StyleContext.NamedStyle.
setName
(
String
name)
Changes the name of the style.
void
MaskFormatter.
setPlaceholder
(
String
placeholder)
Sets the string to use if the value does not completely fill in
 the mask.
void
JTextComponent.
setText
(
String
t)
Sets the text of this
TextComponent
to the specified text.
void
JTextComponent.AccessibleJTextComponent.
setTextContents
(
String
s)
Sets the text contents to the specified string.
void
MaskFormatter.
setValidCharacters
(
String
validCharacters)
Allows for further restricting of the characters that can be input.
Object
DefaultFormatter.
stringToValue
(
String
string)
Converts the passed in String into an instance of
getValueClass
by way of the constructor that
 takes a String argument.
Object
InternationalFormatter.
stringToValue
(
String
text)
Returns the
Object
representation of the
String
text
.
Object
MaskFormatter.
stringToValue
(
String
value)
Parses the text, returning the appropriate Object representation of
 the String
value
.
protected void
AbstractWriter.
write
(
String
content)
Writes out a string.
Constructors in
javax.swing.text
with parameters of type
String
Modifier
Constructor
Description
AlignmentAction
(
String
nm,
 int a)
Creates a new AlignmentAction.
BadLocationException
(
String
s,
 int offs)
Creates a new BadLocationException object.
ChangedCharSetException
(
String
charSetSpec,
 boolean charSetKey)
Constructs a
ChangedCharSetException
.
FontFamilyAction
(
String
nm,
String
family)
Creates a new FontFamilyAction.
FontSizeAction
(
String
nm,
 int size)
Creates a new FontSizeAction.
ForegroundAction
(
String
nm,
Color
fg)
Creates a new ForegroundAction.
KeyBinding
(
KeyStroke
key,
String
actionName)
Creates a new key binding.
MaskFormatter
(
String
mask)
Creates a
MaskFormatter
with the specified mask.
NamedStyle
(
String
name,
Style
parent)
Creates a new named style.
StyledTextAction
(
String
nm)
Creates a new StyledTextAction from a string action name.
TextAction
(
String
name)
Creates a new JTextAction object.
Uses of
String
in
javax.swing.text.html
Fields in
javax.swing.text.html
declared as
String
Modifier and Type
Field
Description
static final
String
HTMLDocument.
AdditionalComments
Document property key value.
static final
String
HTMLEditorKit.
BOLD_ACTION
The bold action identifier
static final
String
HTMLEditorKit.
COLOR_ACTION
The Color choice action identifier
     The color is passed as an argument
static final
String
HTMLEditorKit.
DEFAULT_CSS
Default Cascading Style Sheet file that sets
 up the tag views.
static final
String
HTMLEditorKit.
FONT_CHANGE_BIGGER
The  font size increase to next value action identifier
static final
String
HTMLEditorKit.
FONT_CHANGE_SMALLER
The font size decrease to next value action identifier
protected
String
HTMLEditorKit.InsertHTMLTextAction.
html
HTML to insert.
static final
String
HTMLEditorKit.
IMG_ALIGN_BOTTOM
Align images at the bottom.
static final
String
HTMLEditorKit.
IMG_ALIGN_MIDDLE
Align images in the middle.
static final
String
HTMLEditorKit.
IMG_ALIGN_TOP
Align images at the top.
static final
String
HTMLEditorKit.
IMG_BORDER
Align images at the border.
static final
String
HTMLEditorKit.
ITALIC_ACTION
The italic action identifier
static final
String
HTMLEditorKit.
LOGICAL_STYLE_ACTION
The logical style choice action identifier
     The logical style is passed in as an argument
static final
String
HTML.
NULL_ATTRIBUTE_VALUE
NULL_ATTRIBUTE_VALUE
used in cases where the value for the attribute has not
  been specified.
static final
String
HTMLEditorKit.
PARA_INDENT_LEFT
The paragraph left indent action identifier
static final
String
HTMLEditorKit.
PARA_INDENT_RIGHT
The paragraph right indent action identifier
static final
String
FormView.
RESET
Deprecated.
As of 1.3, value comes from UIManager UIManager property
             FormView.resetButtonText
static final
String
FormView.
SUBMIT
Deprecated.
As of 1.3, value now comes from UIManager property
             FormView.submitButtonText
Methods in
javax.swing.text.html
that return
String
Modifier and Type
Method
Description
String
ImageView.
getAltText
()
Returns the text to display if the image cannot be loaded.
String
HTMLEditorKit.
getContentType
()
Get the MIME type of the data that this
 kit represents support for.
String
FormSubmitEvent.
getData
()
Gets the form submission data.
String
CSS.Attribute.
getDefaultValue
()
Fetch the default value for the attribute.
String
Option.
getLabel
()
Fetch the label associated with the option.
String
HTMLDocument.BlockElement.
getName
()
Gets the name of the element.
String
HTMLDocument.RunElement.
getName
()
Gets the name of the element.
String
HTMLFrameHyperlinkEvent.
getTarget
()
returns the target for the link.
String
ImageView.
getToolTipText
(float x,
 float y,
Shape
allocation)
For images the tooltip text comes from text specified with the
ALT
attribute.
String
Option.
getValue
()
Convenient method to return the string associated
 with the
value
attribute.
String
CSS.Attribute.
toString
()
The string representation of the attribute.
String
HTML.Attribute.
toString
()
Returns the string representation of this attribute.
String
HTML.Tag.
toString
()
Returns the string representation of the
 tag.
String
Option.
toString
()
String representation is the label.
Methods in
javax.swing.text.html
with parameters of type
String
Modifier and Type
Method
Description
void
StyleSheet.
addCSSAttribute
(
MutableAttributeSet
attr,
CSS.Attribute
key,
String
value)
Adds a CSS attribute to the given set.
boolean
StyleSheet.
addCSSAttributeFromHTML
(
MutableAttributeSet
attr,
CSS.Attribute
key,
String
value)
Adds a CSS attribute to the given set.
void
StyleSheet.
addRule
(
String
rule)
Adds a set of rules to the sheet.
static final
CSS.Attribute
CSS.
getAttribute
(
String
name)
Translates a string to a
CSS.Attribute
object.
static
HTML.Attribute
HTML.
getAttributeKey
(
String
attName)
Fetches an attribute constant for a well-known attribute name
 (i.e. one of the attributes in the set {FACE, COMMENT, SIZE,
 COLOR, CLEAR, BACKGROUND, BGCOLOR, TEXT, LINK, VLINK, ALINK,
 WIDTH, HEIGHT, ALIGN, NAME, HREF, REL, REV, TITLE, TARGET,
 SHAPE, COORDS, ISMAP, NOHREF, ALT, ID, SRC, HSPACE, VSPACE,
 USEMAP, LOWSRC, CODEBASE, CODE, ARCHIVE, VALUE, VALUETYPE,
 TYPE, CLASS, STYLE, LANG, DIR, DECLARE, CLASSID, DATA, CODETYPE,
 STANDBY, BORDER, SHAPES, NOSHADE, COMPACT, START, ACTION, METHOD,
 ENCTYPE, CHECKED, MAXLENGTH, MULTIPLE, SELECTED, ROWS, COLS,
 DUMMY, CELLSPACING, CELLPADDING, VALIGN, HALIGN, NOWRAP, ROWSPAN,
 COLSPAN, PROMPT, HTTPEQUIV, CONTENT, LANGUAGE, VERSION, N,
 FRAMEBORDER, MARGINWIDTH, MARGINHEIGHT, SCROLLING, NORESIZE,
 MEDIA, ENDTAG}).
AttributeSet
StyleSheet.
getDeclaration
(
String
decl)
Translates a CSS declaration to an AttributeSet that represents
 the CSS declaration.
Element
HTMLDocument.
getElement
(
String
id)
Returns the element that has the given id
Attribute
.
float
StyleSheet.
getPointSize
(
String
size)
Given a string such as "+2", "-2", or "2",
  returns a point size value.
Style
StyleSheet.
getRule
(
String
selector)
Fetches the rule that best matches the selector given
 in string form.
static
HTML.Tag
HTML.
getTag
(
String
tagName)
Fetches a tag constant for a well-known tag name (i.e. one of
 the tags in the set {A, ADDRESS, APPLET, AREA, B,
 BASE, BASEFONT, BIG,
 BLOCKQUOTE, BODY, BR, CAPTION, CENTER, CITE, CODE,
 DD, DFN, DIR, DIV, DL, DT, EM, FONT, FORM, FRAME,
 FRAMESET, H1, H2, H3, H4, H5, H6, HEAD, HR, HTML,
 I, IMG, INPUT, ISINDEX, KBD, LI, LINK, MAP, MENU,
 META, NOBR, NOFRAMES, OBJECT, OL, OPTION, P, PARAM,
 PRE, SAMP, SCRIPT, SELECT, SMALL, SPAN, STRIKE, S,
 STRONG, STYLE, SUB, SUP, TABLE, TD, TEXTAREA,
 TH, TITLE, TR, TT, U, UL, VAR}.
void
HTMLDocument.HTMLReader.
handleEndOfLineString
(
String
eol)
This is invoked after the stream has been parsed, but before
flush
.
void
HTMLEditorKit.ParserCallback.
handleEndOfLineString
(
String
eol)
This is invoked after the stream has been parsed, but before
flush
.
void
HTMLEditorKit.ParserCallback.
handleError
(
String
errorMsg,
 int pos)
Callback from the parser.
protected void
FormView.
imageSubmit
(
String
imageData)
This method is called to submit a form in response
 to a click on an image -- an <INPUT> form
 element of type "image".
void
HTMLDocument.
insertAfterEnd
(
Element
elem,
String
htmlText)
Inserts the HTML specified as a string after the end of the
 given element.
void
HTMLDocument.
insertAfterStart
(
Element
elem,
String
htmlText)
Inserts the HTML specified as a string at the start
 of the element.
protected void
HTMLEditorKit.InsertHTMLTextAction.
insertAtBoundary
(
JEditorPane
editor,
HTMLDocument
doc,
 int offset,
Element
insertElement,
String
html,
HTML.Tag
parentTag,
HTML.Tag
addTag)
This is invoked when inserting at a boundary.
protected void
HTMLEditorKit.InsertHTMLTextAction.
insertAtBoundry
(
JEditorPane
editor,
HTMLDocument
doc,
 int offset,
Element
insertElement,
String
html,
HTML.Tag
parentTag,
HTML.Tag
addTag)
Deprecated.
As of Java 2 platform v1.3, use insertAtBoundary
void
HTMLDocument.
insertBeforeEnd
(
Element
elem,
String
htmlText)
Inserts the HTML specified as a string at the end of
 the element.
void
HTMLDocument.
insertBeforeStart
(
Element
elem,
String
htmlText)
Inserts the HTML specified as a string before the start of
 the given element.
void
HTMLEditorKit.
insertHTML
(
HTMLDocument
doc,
 int offset,
String
html,
 int popDepth,
 int pushDepth,
HTML.Tag
insertTag)
Inserts HTML into an existing document.
protected void
HTMLEditorKit.InsertHTMLTextAction.
insertHTML
(
JEditorPane
editor,
HTMLDocument
doc,
 int offset,
String
html,
 int popDepth,
 int pushDepth,
HTML.Tag
addTag)
A cover for HTMLEditorKit.insertHTML.
void
StyleSheet.
removeStyle
(
String
nm)
Removes a named style previously added to the document.
void
StyleSheet.
setBaseFontSize
(
String
size)
Sets the base font size from the passed in String.
void
HTMLDocument.
setInnerHTML
(
Element
elem,
String
htmlText)
Replaces the children of the given element with the contents
 specified as an HTML string.
void
Option.
setLabel
(
String
label)
Sets the label to be used for the option.
void
HTMLDocument.
setOuterHTML
(
Element
elem,
String
htmlText)
Replaces the given element in the parent with the contents
 specified as an HTML string.
protected void
MinimalHTMLWriter.
startFontTag
(
String
style)
This is no longer used, instead <span> will be written out.
Color
StyleSheet.
stringToColor
(
String
string)
Converts a color string such as "RED" or "#NNNNNN" to a Color.
protected void
FormView.
submitData
(
String
data)
This method is responsible for submitting the form data.
static
FormSubmitEvent.MethodType
FormSubmitEvent.MethodType.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
protected void
MinimalHTMLWriter.
writeEndTag
(
String
endTag)
Writes out an end tag appropriately
 indented.
protected void
MinimalHTMLWriter.
writeStartTag
(
String
tag)
Writes out a start tag appropriately
 indented.
Constructors in
javax.swing.text.html
with parameters of type
String
Modifier
Constructor
Description
HTMLFrameHyperlinkEvent
(
Object
source,
HyperlinkEvent.EventType
type,
URL
targetURL,
String
targetFrame)
Creates a new object representing a html frame
 hypertext link event.
HTMLFrameHyperlinkEvent
(
Object
source,
HyperlinkEvent.EventType
type,
URL
targetURL,
String
desc,
String
targetFrame)
Creates a new object representing a hypertext link event.
HTMLFrameHyperlinkEvent
(
Object
source,
HyperlinkEvent.EventType
type,
URL
targetURL,
String
desc,
Element
sourceElement,
InputEvent
inputEvent,
String
targetFrame)
Creates a new object representing a hypertext link event.
HTMLFrameHyperlinkEvent
(
Object
source,
HyperlinkEvent.EventType
type,
URL
targetURL,
String
desc,
Element
sourceElement,
String
targetFrame)
Creates a new object representing a hypertext link event.
HTMLFrameHyperlinkEvent
(
Object
source,
HyperlinkEvent.EventType
type,
URL
targetURL,
Element
sourceElement,
String
targetFrame)
Creates a new object representing a hypertext link event.
HTMLTextAction
(
String
name)
Creates a new HTMLTextAction from a string action name.
InsertHTMLTextAction
(
String
name,
String
html,
HTML.Tag
parentTag,
HTML.Tag
addTag)
Creates a new InsertHTMLTextAction.
InsertHTMLTextAction
(
String
name,
String
html,
HTML.Tag
parentTag,
HTML.Tag
addTag,
HTML.Tag
alternateParentTag,
HTML.Tag
alternateAddTag)
Creates a new InsertHTMLTextAction.
protected
Tag
(
String
id)
Creates a new
Tag
with the specified
id
,
 and with
causesBreak
and
isBlock
set to
false
.
protected
Tag
(
String
id,
 boolean causesBreak,
 boolean isBlock)
Creates a new
Tag
with the specified
id
;
causesBreak
and
isBlock
are defined
 by the user.
UnknownTag
(
String
id)
Creates a new
UnknownTag
with the specified
id
.
Uses of
String
in
javax.swing.text.html.parser
Fields in
javax.swing.text.html.parser
declared as
String
Modifier and Type
Field
Description
String
AttributeList.
name
The attribute name
String
DTD.
name
the name of the DTD
String
Element.
name
The name of the element
String
Entity.
name
The name of the entity.
String
AttributeList.
value
The default attribute value
Fields in
javax.swing.text.html.parser
with type parameters of type
String
Modifier and Type
Field
Description
Hashtable
<
String
,
Element
>
DTD.
elementHash
The hash table contains the name of element and
 the corresponding element.
Methods in
javax.swing.text.html.parser
that return
String
Modifier and Type
Method
Description
String
AttributeList.
getName
()
Returns the attribute name.
String
DTD.
getName
()
Gets the name of the DTD.
String
Element.
getName
()
Get the name of the element.
String
Entity.
getName
()
Gets the name of the entity.
String
Entity.
getString
()
Returns the data as a
String
.
String
AttributeList.
getValue
()
Returns default attribute value.
String
Parser.
parseDTDMarkup
()
Parses the Document Type Declaration markup declaration.
String
AttributeList.
toString
()
String
ContentModel.
toString
()
Convert to a string.
String
DTD.
toString
()
Returns a string representation of this DTD.
String
Element.
toString
()
Convert to a string.
static
String
AttributeList.
type2name
(int tp)
Converts a type to the attribute name
Methods in
javax.swing.text.html.parser
with parameters of type
String
Modifier and Type
Method
Description
protected static
DTD
ParserDelegator.
createDTD
(
DTD
dtd,
String
name)
Recreates a DTD from an archived format with the specified
name
.
protected
AttributeList
DTD.
defAttributeList
(
String
name,
 int type,
 int modifier,
String
value,
String
values,
AttributeList
atts)
Creates and returns an
AttributeList
responding to a new attribute.
protected
Element
DTD.
defElement
(
String
name,
 int type,
 boolean omitStart,
 boolean omitEnd,
ContentModel
content,
String
[] exclusions,
String
[] inclusions,
AttributeList
atts)
Creates and returns an
Element
.
Entity
DTD.
defEntity
(
String
name,
 int type,
 int ch)
Creates and returns a character
Entity
.
protected
Entity
DTD.
defEntity
(
String
name,
 int type,
String
str)
Creates and returns an
Entity
.
void
DTD.
defineAttributes
(
String
name,
AttributeList
atts)
Defines attributes for an
Element
.
Element
DTD.
defineElement
(
String
name,
 int type,
 boolean omitStart,
 boolean omitEnd,
ContentModel
content,
BitSet
exclusions,
BitSet
inclusions,
AttributeList
atts)
Returns the
Element
which matches the
 specified parameters.
Entity
DTD.
defineEntity
(
String
name,
 int type,
 char[] data)
Defines an entity.
protected void
Parser.
error
(
String
err)
Invokes the error handler with the 1st, 2nd and 3rd error message argument "?".
protected void
Parser.
error
(
String
err,
String
arg1)
Invokes the error handler with the 2nd and 3rd error message argument "?".
protected void
Parser.
error
(
String
err,
String
arg1,
String
arg2)
Invokes the error handler with the 3rd error message argument "?".
protected void
Parser.
error
(
String
err,
String
arg1,
String
arg2,
String
arg3)
Invokes the error handler.
AttributeList
Element.
getAttribute
(
String
name)
Get an attribute by name.
AttributeList
Element.
getAttributeByValue
(
String
value)
Get an attribute by value.
static
DTD
DTD.
getDTD
(
String
name)
Returns a DTD with the specified
name
.
Element
DTD.
getElement
(
String
name)
Gets an element by name.
Entity
DTD.
getEntity
(
String
name)
Gets an entity by name.
protected void
Parser.
handleError
(int ln,
String
msg)
An error has occurred.
static int
AttributeList.
name2type
(
String
nm)
Converts an attribute name to the type
static int
Element.
name2type
(
String
nm)
Converts
nm
to type.
static int
Entity.
name2type
(
String
nm)
Converts
nm
string to the corresponding
 entity type.
static void
DTD.
putDTDHash
(
String
name,
DTD
dtd)
Put a name and appropriate DTD to hashtable.
Constructors in
javax.swing.text.html.parser
with parameters of type
String
Modifier
Constructor
Description
AttributeList
(
String
name)
Create an attribute list element.
AttributeList
(
String
name,
 int type,
 int modifier,
String
value,
Vector
<?> values,
AttributeList
next)
Create an attribute list element.
protected
DTD
(
String
name)
Creates a new DTD with the specified name.
Entity
(
String
name,
 int type,
 char[] data)
Creates an entity.
Uses of
String
in
javax.swing.text.rtf
Methods in
javax.swing.text.rtf
that return
String
Modifier and Type
Method
Description
String
RTFEditorKit.
getContentType
()
Get the MIME type of the data that this
 kit represents support for.
Uses of
String
in
javax.swing.tree
Fields in
javax.swing.tree
declared as
String
Modifier and Type
Field
Description
static final
String
DefaultTreeSelectionModel.
SELECTION_MODE_PROPERTY
Property name for selectionMode.
Methods in
javax.swing.tree
that return
String
Modifier and Type
Method
Description
String
DefaultMutableTreeNode.
toString
()
Returns the result of sending
toString()
to this node's
 user object, or the empty string if the node has no user object.
String
DefaultTreeSelectionModel.
toString
()
Returns a string that displays and identifies this
 object's properties.
String
TreePath.
toString
()
Returns a string that displays and identifies this
 object's properties.
Methods in
javax.swing.tree
with parameters of type
String
Modifier and Type
Method
Description
void
DefaultTreeCellRenderer.
firePropertyChange
(
String
propertyName,
 boolean oldValue,
 boolean newValue)
Overridden for performance reasons.
void
DefaultTreeCellRenderer.
firePropertyChange
(
String
propertyName,
 byte oldValue,
 byte newValue)
Overridden for performance reasons.
void
DefaultTreeCellRenderer.
firePropertyChange
(
String
propertyName,
 char oldValue,
 char newValue)
Overridden for performance reasons.
void
DefaultTreeCellRenderer.
firePropertyChange
(
String
propertyName,
 double oldValue,
 double newValue)
Overridden for performance reasons.
void
DefaultTreeCellRenderer.
firePropertyChange
(
String
propertyName,
 float oldValue,
 float newValue)
Overridden for performance reasons.
void
DefaultTreeCellRenderer.
firePropertyChange
(
String
propertyName,
 int oldValue,
 int newValue)
Overridden for performance reasons.
void
DefaultTreeCellRenderer.
firePropertyChange
(
String
propertyName,
 long oldValue,
 long newValue)
Overridden for performance reasons.
void
DefaultTreeCellRenderer.
firePropertyChange
(
String
propertyName,
 short oldValue,
 short newValue)
Overridden for performance reasons.
protected void
DefaultTreeCellRenderer.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Overridden for performance reasons.
Constructors in
javax.swing.tree
with parameters of type
String
Modifier
Constructor
Description
ExpandVetoException
(
TreeExpansionEvent
event,
String
message)
Constructs an ExpandVetoException object with the specified message.
Uses of
String
in
javax.swing.undo
Fields in
javax.swing.undo
declared as
String
Modifier and Type
Field
Description
protected static final
String
StateEdit.
RCSID
Obsolete RCS version identity.
static final
String
StateEditable.
RCSID
Resource ID for this class.
protected static final
String
AbstractUndoableEdit.
RedoName
String returned by
getRedoPresentationName
;
 as of Java 2 platform v1.3.1 this field is no longer used.
protected static final
String
AbstractUndoableEdit.
UndoName
String returned by
getUndoPresentationName
;
 as of Java 2 platform v1.3.1 this field is no longer used.
protected
String
StateEdit.
undoRedoName
The undo/redo presentation name
Methods in
javax.swing.undo
that return
String
Modifier and Type
Method
Description
String
AbstractUndoableEdit.
getPresentationName
()
This default implementation returns "".
String
CompoundEdit.
getPresentationName
()
Returns
getPresentationName
from the
 last
UndoableEdit
added to
edits
.
String
StateEdit.
getPresentationName
()
Gets the presentation name for this edit
String
UndoableEdit.
getPresentationName
()
Returns a localized, human-readable description of this edit, suitable
 for use in a change log, for example.
String
AbstractUndoableEdit.
getRedoPresentationName
()
Retrieves the value from the defaults table with key
AbstractUndoableEdit.redoText
and returns
 that value followed by a space, followed by
getPresentationName
.
String
CompoundEdit.
getRedoPresentationName
()
Returns
getRedoPresentationName
from the last
UndoableEdit
added to
edits
.
String
UndoableEdit.
getRedoPresentationName
()
Returns a localized, human-readable description of the redoable form of
 this edit, suitable for use as a Redo menu item, for example.
String
UndoManager.
getRedoPresentationName
()
Returns a description of the redoable form of this edit.
String
UndoManager.
getUndoOrRedoPresentationName
()
Convenience method that returns either
getUndoPresentationName
or
getRedoPresentationName
.
String
AbstractUndoableEdit.
getUndoPresentationName
()
Retrieves the value from the defaults table with key
AbstractUndoableEdit.undoText
and returns
 that value followed by a space, followed by
getPresentationName
.
String
CompoundEdit.
getUndoPresentationName
()
Returns
getUndoPresentationName
from the last
UndoableEdit
added to
edits
.
String
UndoableEdit.
getUndoPresentationName
()
Returns a localized, human-readable description of the undoable form of
 this edit, suitable for use as an Undo menu item, for example.
String
UndoManager.
getUndoPresentationName
()
Returns a description of the undoable form of this edit.
String
AbstractUndoableEdit.
toString
()
Returns a string that displays and identifies this
 object's properties.
String
CompoundEdit.
toString
()
Returns a string that displays and identifies this
 object's properties.
String
UndoableEditSupport.
toString
()
Returns a string that displays and identifies this
 object's properties.
String
UndoManager.
toString
()
Returns a string that displays and identifies this
 object's properties.
Methods in
javax.swing.undo
with parameters of type
String
Modifier and Type
Method
Description
protected void
StateEdit.
init
(
StateEditable
anObject,
String
name)
Initialize the state edit.
Constructors in
javax.swing.undo
with parameters of type
String
Modifier
Constructor
Description
StateEdit
(
StateEditable
anObject,
String
name)
Create and return a new StateEdit with a presentation name.
Uses of
String
in
javax.tools
Fields in
javax.tools
declared as
String
Modifier and Type
Field
Description
final
String
JavaFileObject.Kind.
extension
The extension which (by convention) is normally used for
 this kind of file object.
Methods in
javax.tools
that return
String
Modifier and Type
Method
Description
String
Diagnostic.
getCode
()
Returns a diagnostic code indicating the type of diagnostic.
String
Diagnostic.
getMessage
(
Locale
locale)
Returns a localized message for the given locale.
String
DocumentationTool.Location.
getName
()
String
FileObject.
getName
()
Returns a user-friendly name for this file object.
String
ForwardingFileObject.
getName
()
String
JavaFileManager.Location.
getName
()
Returns the name of this location.
String
SimpleJavaFileObject.
getName
()
String
StandardLocation.
getName
()
String
ForwardingJavaFileManager.
inferBinaryName
(
JavaFileManager.Location
location,
JavaFileObject
file)
String
JavaFileManager.
inferBinaryName
(
JavaFileManager.Location
location,
JavaFileObject
file)
Infers a binary name of a file object based on a package-oriented location.
String
ForwardingJavaFileManager.
inferModuleName
(
JavaFileManager.Location
location)
default
String
JavaFileManager.
inferModuleName
(
JavaFileManager.Location
location)
Infer the name of the module from its location, as returned by
getLocationForModule
or
listModuleLocations
.
default
String
Tool.
name
()
Returns the name of this tool, or an empty string if no name is provided.
Methods in
javax.tools
with parameters of type
String
Modifier and Type
Method
Description
FileObject
ForwardingJavaFileManager.
getFileForInput
(
JavaFileManager.Location
location,
String
packageName,
String
relativeName)
FileObject
JavaFileManager.
getFileForInput
(
JavaFileManager.Location
location,
String
packageName,
String
relativeName)
Returns a
file object
for input
 representing the specified
relative
 name
in the specified package in the given package-oriented location.
FileObject
ForwardingJavaFileManager.
getFileForOutput
(
JavaFileManager.Location
location,
String
packageName,
String
relativeName,
FileObject
sibling)
FileObject
JavaFileManager.
getFileForOutput
(
JavaFileManager.Location
location,
String
packageName,
String
relativeName,
FileObject
sibling)
Returns a
file object
for output
 representing the specified
relative
 name
in the specified package in the given location.
FileObject
ForwardingJavaFileManager.
getFileForOutputForOriginatingFiles
(
JavaFileManager.Location
location,
String
packageName,
String
relativeName,
FileObject
... originatingFiles)
Returns a
file object
for output
 representing the specified
relative
 name
in the specified package in the given location.
default
FileObject
JavaFileManager.
getFileForOutputForOriginatingFiles
(
JavaFileManager.Location
location,
String
packageName,
String
relativeName,
FileObject
... originatingFiles)
Returns a
file object
for output
 representing the specified
relative
 name
in the specified package in the given location.
JavaFileObject
ForwardingJavaFileManager.
getJavaFileForInput
(
JavaFileManager.Location
location,
String
className,
JavaFileObject.Kind
kind)
JavaFileObject
JavaFileManager.
getJavaFileForInput
(
JavaFileManager.Location
location,
String
className,
JavaFileObject.Kind
kind)
Returns a
file object
for input
 representing the specified class of the specified kind in the
 given package-oriented location.
JavaFileObject
ForwardingJavaFileManager.
getJavaFileForOutput
(
JavaFileManager.Location
location,
String
className,
JavaFileObject.Kind
kind,
FileObject
sibling)
JavaFileObject
JavaFileManager.
getJavaFileForOutput
(
JavaFileManager.Location
location,
String
className,
JavaFileObject.Kind
kind,
FileObject
sibling)
Returns a
file object
for output
 representing the specified class of the specified kind in the
 given package-oriented location.
JavaFileObject
ForwardingJavaFileManager.
getJavaFileForOutputForOriginatingFiles
(
JavaFileManager.Location
location,
String
className,
JavaFileObject.Kind
kind,
FileObject
... originatingFiles)
Returns a
file object
for output
 representing the specified class of the specified kind in the
 given package-oriented location.
default
JavaFileObject
JavaFileManager.
getJavaFileForOutputForOriginatingFiles
(
JavaFileManager.Location
location,
String
className,
JavaFileObject.Kind
kind,
FileObject
... originatingFiles)
Returns a
file object
for output
 representing the specified class of the specified kind in the
 given package-oriented location.
Iterable
<? extends
JavaFileObject
>
StandardJavaFileManager.
getJavaFileObjects
(
String
... names)
Returns file objects representing the given file names.
JavaFileManager.Location
ForwardingJavaFileManager.
getLocationForModule
(
JavaFileManager.Location
location,
String
moduleName)
default
JavaFileManager.Location
JavaFileManager.
getLocationForModule
(
JavaFileManager.Location
location,
String
moduleName)
Gets a location for a named module within a location, which may be either
 a module-oriented location or an output location.
Path
StandardJavaFileManager.PathFactory.
getPath
(
String
first,
String
... more)
Converts a path string, or a sequence of strings that when joined form a path string, to a Path.
boolean
ForwardingJavaFileManager.
handleOption
(
String
current,
Iterator
<
String
> remaining)
boolean
JavaFileManager.
handleOption
(
String
current,
Iterator
<
String
> remaining)
Handles one option.
boolean
ForwardingJavaFileObject.
isNameCompatible
(
String
simpleName,
JavaFileObject.Kind
kind)
boolean
JavaFileObject.
isNameCompatible
(
String
simpleName,
JavaFileObject.Kind
kind)
Checks if this file object is compatible with the specified
 simple name and kind.
boolean
SimpleJavaFileObject.
isNameCompatible
(
String
simpleName,
JavaFileObject.Kind
kind)
This implementation compares the path of its URI to the given
 simple name.
int
ForwardingJavaFileManager.
isSupportedOption
(
String
option)
int
OptionChecker.
isSupportedOption
(
String
option)
Determines if the given option is supported and if so, the
 number of arguments the option takes.
Iterable
<
JavaFileObject
>
ForwardingJavaFileManager.
list
(
JavaFileManager.Location
location,
String
packageName,
Set
<
JavaFileObject.Kind
> kinds,
 boolean recurse)
Iterable
<
JavaFileObject
>
JavaFileManager.
list
(
JavaFileManager.Location
location,
String
packageName,
Set
<
JavaFileObject.Kind
> kinds,
 boolean recurse)
Lists all file objects matching the given criteria in the given
 package-oriented location.
static
JavaFileManager.Location
StandardLocation.
locationFor
(
String
name)
Returns a location object with the given name.
int
Tool.
run
(
InputStream
in,
OutputStream
out,
OutputStream
err,
String
... arguments)
Run the tool with the given I/O channels and arguments.
default void
StandardJavaFileManager.
setLocationForModule
(
JavaFileManager.Location
location,
String
moduleName,
Collection
<? extends
Path
> paths)
Associates the given search path with the given module and location,
 which must be a module-oriented or output location.
static
Diagnostic.Kind
Diagnostic.Kind.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
DocumentationTool.Location
DocumentationTool.Location.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
JavaFileObject.Kind
JavaFileObject.Kind.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
StandardLocation
StandardLocation.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Method parameters in
javax.tools
with type arguments of type
String
Modifier and Type
Method
Description
void
DocumentationTool.DocumentationTask.
addModules
(
Iterable
<
String
> moduleNames)
Adds root modules to be taken into account during module
 resolution.
void
JavaCompiler.CompilationTask.
addModules
(
Iterable
<
String
> moduleNames)
Adds root modules to be taken into account during module
 resolution.
Iterable
<? extends
JavaFileObject
>
StandardJavaFileManager.
getJavaFileObjectsFromStrings
(
Iterable
<
String
> names)
Returns file objects representing the given file names.
DocumentationTool.DocumentationTask
DocumentationTool.
getTask
(
Writer
out,
JavaFileManager
fileManager,
DiagnosticListener
<? super
JavaFileObject
> diagnosticListener,
Class
<?> docletClass,
Iterable
<
String
> options,
Iterable
<? extends
JavaFileObject
> compilationUnits)
Creates a future for a documentation task with the given
 components and arguments.
JavaCompiler.CompilationTask
JavaCompiler.
getTask
(
Writer
out,
JavaFileManager
fileManager,
DiagnosticListener
<? super
JavaFileObject
> diagnosticListener,
Iterable
<
String
> options,
Iterable
<
String
> classes,
Iterable
<? extends
JavaFileObject
> compilationUnits)
Creates a future for a compilation task with the given
 components and arguments.
boolean
ForwardingJavaFileManager.
handleOption
(
String
current,
Iterator
<
String
> remaining)
boolean
JavaFileManager.
handleOption
(
String
current,
Iterator
<
String
> remaining)
Handles one option.
Uses of
String
in
javax.transaction.xa
Constructors in
javax.transaction.xa
with parameters of type
String
Modifier
Constructor
Description
XAException
(
String
s)
Create an XAException with a given string.
Uses of
String
in
javax.xml
Fields in
javax.xml
declared as
String
Modifier and Type
Field
Description
static final
String
XMLConstants.
ACCESS_EXTERNAL_DTD
Property: accessExternalDTD
static final
String
XMLConstants.
ACCESS_EXTERNAL_SCHEMA
Property: accessExternalSchema
static final
String
XMLConstants.
ACCESS_EXTERNAL_STYLESHEET
Property: accessExternalStylesheet
static final
String
XMLConstants.
DEFAULT_NS_PREFIX
Prefix to use to represent the default XML Namespace.
static final
String
XMLConstants.
FEATURE_SECURE_PROCESSING
Feature for secure processing.
static final
String
XMLConstants.
NULL_NS_URI
Namespace URI to use to represent that there is no Namespace.
static final
String
XMLConstants.
RELAXNG_NS_URI
RELAX NG Namespace URI.
static final
String
XMLConstants.
USE_CATALOG
Feature: useCatalog
static final
String
XMLConstants.
W3C_XML_SCHEMA_INSTANCE_NS_URI
W3C XML Schema Instance Namespace URI.
static final
String
XMLConstants.
W3C_XML_SCHEMA_NS_URI
W3C XML Schema Namespace URI.
static final
String
XMLConstants.
W3C_XPATH_DATATYPE_NS_URI
W3C XPath Datatype Namespace URI.
static final
String
XMLConstants.
XML_DTD_NS_URI
XML Document Type Declaration Namespace URI as an arbitrary value.
static final
String
XMLConstants.
XML_NS_PREFIX
The official XML Namespace prefix.
static final
String
XMLConstants.
XML_NS_URI
The official XML Namespace name URI.
static final
String
XMLConstants.
XMLNS_ATTRIBUTE
The official XML attribute used for specifying XML Namespace
 declarations.
static final
String
XMLConstants.
XMLNS_ATTRIBUTE_NS_URI
The official XML attribute used for specifying XML Namespace
 declarations,
XMLConstants.XMLNS_ATTRIBUTE
, Namespace name URI.
Uses of
String
in
javax.xml.catalog
Methods in
javax.xml.catalog
that return
String
Modifier and Type
Method
Description
String
CatalogFeatures.Feature.
defaultValue
()
Returns the default value of the property.
String
CatalogFeatures.
get
(
CatalogFeatures.Feature
cf)
Returns the value of the specified feature.
String
CatalogFeatures.Feature.
getPropertyName
()
Returns the name of the corresponding System Property.
String
Catalog.
matchPublic
(
String
publicId)
Attempts to find a matching entry in the catalog by publicId.
String
Catalog.
matchSystem
(
String
systemId)
Attempts to find a matching entry in the catalog by systemId.
String
Catalog.
matchURI
(
String
uri)
Attempts to find a matching entry in the catalog by the uri element.
Methods in
javax.xml.catalog
with parameters of type
String
Modifier and Type
Method
Description
String
Catalog.
matchPublic
(
String
publicId)
Attempts to find a matching entry in the catalog by publicId.
String
Catalog.
matchSystem
(
String
systemId)
Attempts to find a matching entry in the catalog by systemId.
String
Catalog.
matchURI
(
String
uri)
Attempts to find a matching entry in the catalog by the uri element.
Source
CatalogResolver.
resolve
(
String
href,
String
base)
Implements URIResolver.
InputSource
CatalogResolver.
resolveEntity
(
String
publicId,
String
systemId)
Implements
EntityResolver
.
InputStream
CatalogResolver.
resolveEntity
(
String
publicId,
String
systemId,
String
baseUri,
String
namespace)
Implements
XMLResolver
.
LSInput
CatalogResolver.
resolveResource
(
String
type,
String
namespaceUri,
String
publicId,
String
systemId,
String
baseUri)
Implements
LSResourceResolver
.
static
CatalogFeatures.Feature
CatalogFeatures.Feature.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
CatalogFeatures.Builder
CatalogFeatures.Builder.
with
(
CatalogFeatures.Feature
feature,
String
value)
Sets the value to a specified Feature.
Constructors in
javax.xml.catalog
with parameters of type
String
Modifier
Constructor
Description
CatalogException
(
String
message)
Constructs a new CatalogException with the specified detail message.
CatalogException
(
String
message,
Throwable
cause)
Constructs a new CatalogException with the specified detail message and
 cause.
Uses of
String
in
javax.xml.crypto
Methods in
javax.xml.crypto
that return
String
Modifier and Type
Method
Description
String
AlgorithmMethod.
getAlgorithm
()
Returns the algorithm URI of this
AlgorithmMethod
.
String
XMLCryptoContext.
getBaseURI
()
Returns the base URI.
String
XMLCryptoContext.
getDefaultNamespacePrefix
()
Returns the default namespace prefix.
String
OctetStreamData.
getMimeType
()
Returns the MIME type associated with the data object represented by this
OctetStreamData
.
String
XMLCryptoContext.
getNamespacePrefix
(
String
namespaceURI,
String
defaultPrefix)
Returns the namespace prefix that the specified namespace URI is
 associated with.
String
URIReference.
getType
()
Returns the type of data referenced by this URI.
String
OctetStreamData.
getURI
()
Returns the URI String identifying the data object represented by this
OctetStreamData
.
String
URIReference.
getURI
()
Returns the URI of the referenced data object.
String
XMLCryptoContext.
putNamespacePrefix
(
String
namespaceURI,
String
prefix)
Maps the specified namespace URI to the specified prefix.
String
KeySelector.Purpose.
toString
()
Returns a string representation of this purpose ("sign",
 "verify", "encrypt", or "decrypt").
Methods in
javax.xml.crypto
with parameters of type
String
Modifier and Type
Method
Description
String
XMLCryptoContext.
getNamespacePrefix
(
String
namespaceURI,
String
defaultPrefix)
Returns the namespace prefix that the specified namespace URI is
 associated with.
Object
XMLCryptoContext.
getProperty
(
String
name)
Returns the value of the specified property.
boolean
XMLStructure.
isFeatureSupported
(
String
feature)
Indicates whether a specified feature is supported.
String
XMLCryptoContext.
putNamespacePrefix
(
String
namespaceURI,
String
prefix)
Maps the specified namespace URI to the specified prefix.
void
XMLCryptoContext.
setBaseURI
(
String
baseURI)
Sets the base URI.
void
XMLCryptoContext.
setDefaultNamespacePrefix
(
String
defaultPrefix)
Sets the default namespace prefix.
Object
XMLCryptoContext.
setProperty
(
String
name,
Object
value)
Sets the specified property.
Constructors in
javax.xml.crypto
with parameters of type
String
Modifier
Constructor
Description
KeySelectorException
(
String
message)
Constructs a new
KeySelectorException
with the specified
 detail message.
KeySelectorException
(
String
message,
Throwable
cause)
Constructs a new
KeySelectorException
with the
 specified detail message and cause.
MarshalException
(
String
message)
Constructs a new
MarshalException
with the specified
 detail message.
MarshalException
(
String
message,
Throwable
cause)
Constructs a new
MarshalException
with the
 specified detail message and cause.
NoSuchMechanismException
(
String
message)
Constructs a new
NoSuchMechanismException
with the
 specified detail message.
NoSuchMechanismException
(
String
message,
Throwable
cause)
Constructs a new
NoSuchMechanismException
with the
 specified detail message and cause.
OctetStreamData
(
InputStream
octetStream,
String
uri,
String
mimeType)
Creates a new
OctetStreamData
.
URIReferenceException
(
String
message)
Constructs a new
URIReferenceException
with the specified
 detail message.
URIReferenceException
(
String
message,
Throwable
cause)
Constructs a new
URIReferenceException
with the
 specified detail message and cause.
URIReferenceException
(
String
message,
Throwable
cause,
URIReference
uriReference)
Constructs a new
URIReferenceException
with the
 specified detail message, cause and
URIReference
.
Uses of
String
in
javax.xml.crypto.dom
Methods in
javax.xml.crypto.dom
that return
String
Modifier and Type
Method
Description
String
DOMCryptoContext.
getBaseURI
()
String
DOMCryptoContext.
getDefaultNamespacePrefix
()
String
DOMCryptoContext.
getNamespacePrefix
(
String
namespaceURI,
String
defaultPrefix)
This implementation uses an internal
HashMap
to get the prefix
 that the specified URI maps to.
String
DOMCryptoContext.
putNamespacePrefix
(
String
namespaceURI,
String
prefix)
This implementation uses an internal
HashMap
to map the URI
 to the specified prefix.
Methods in
javax.xml.crypto.dom
that return types with arguments of type
String
Modifier and Type
Method
Description
Iterator
<
Map.Entry
<
String
,
Element
>>
DOMCryptoContext.
iterator
()
Returns a read-only iterator over the set of Id/Element mappings of
 this
DOMCryptoContext
.
Methods in
javax.xml.crypto.dom
with parameters of type
String
Modifier and Type
Method
Description
Element
DOMCryptoContext.
getElementById
(
String
idValue)
Returns the
Element
with the specified ID attribute value.
String
DOMCryptoContext.
getNamespacePrefix
(
String
namespaceURI,
String
defaultPrefix)
This implementation uses an internal
HashMap
to get the prefix
 that the specified URI maps to.
Object
DOMCryptoContext.
getProperty
(
String
name)
This implementation uses an internal
HashMap
to get the object
 that the specified name maps to.
boolean
DOMStructure.
isFeatureSupported
(
String
feature)
String
DOMCryptoContext.
putNamespacePrefix
(
String
namespaceURI,
String
prefix)
This implementation uses an internal
HashMap
to map the URI
 to the specified prefix.
void
DOMCryptoContext.
setBaseURI
(
String
baseURI)
void
DOMCryptoContext.
setDefaultNamespacePrefix
(
String
defaultPrefix)
void
DOMCryptoContext.
setIdAttributeNS
(
Element
element,
String
namespaceURI,
String
localName)
Registers the element's attribute specified by the namespace URI and
 local name to be of type ID.
Object
DOMCryptoContext.
setProperty
(
String
name,
Object
value)
This implementation uses an internal
HashMap
to map the name
 to the specified object.
Uses of
String
in
javax.xml.crypto.dsig
Fields in
javax.xml.crypto.dsig
declared as
String
Modifier and Type
Field
Description
static final
String
Transform.
BASE64
The
Base64
transform algorithm URI.
static final
String
SignatureMethod.
DSA_SHA1
The
DSA-SHA1
(DSS) signature method algorithm URI.
static final
String
SignatureMethod.
DSA_SHA256
The
DSA-SHA256
(DSS) signature method algorithm URI.
static final
String
SignatureMethod.
ECDSA_SHA1
The
ECDSA-SHA1
(FIPS 180-4) signature method algorithm URI.
static final
String
SignatureMethod.
ECDSA_SHA224
The
ECDSA-SHA224
(FIPS 180-4) signature method algorithm URI.
static final
String
SignatureMethod.
ECDSA_SHA256
The
ECDSA-SHA256
(FIPS 180-4) signature method algorithm URI.
static final
String
SignatureMethod.
ECDSA_SHA384
The
ECDSA-SHA384
(FIPS 180-4) signature method algorithm URI.
static final
String
SignatureMethod.
ECDSA_SHA512
The
ECDSA-SHA512
(FIPS 180-4) signature method algorithm URI.
static final
String
SignatureMethod.
ED25519
The
ED25519
signature method algorithm URI.
static final
String
SignatureMethod.
ED448
The
ED448
signature method algorithm URI.
static final
String
Transform.
ENVELOPED
The
Enveloped Signature
transform algorithm URI.
static final
String
CanonicalizationMethod.
EXCLUSIVE
The
Exclusive
 Canonical XML (without comments)
canonicalization method algorithm
 URI.
static final
String
CanonicalizationMethod.
EXCLUSIVE_WITH_COMMENTS
The
Exclusive Canonical XML with comments
canonicalization method
 algorithm URI.
static final
String
SignatureMethod.
HMAC_SHA1
The
HMAC-SHA1
MAC signature method algorithm URI
static final
String
SignatureMethod.
HMAC_SHA224
The
HMAC-SHA224
MAC signature method algorithm URI.
static final
String
SignatureMethod.
HMAC_SHA256
The
HMAC-SHA256
MAC signature method algorithm URI.
static final
String
SignatureMethod.
HMAC_SHA384
The
HMAC-SHA384
MAC signature method algorithm URI.
static final
String
SignatureMethod.
HMAC_SHA512
The
HMAC-SHA512
MAC signature method algorithm URI.
static final
String
CanonicalizationMethod.
INCLUSIVE
The
Canonical
 XML (without comments)
canonicalization method algorithm URI.
static final
String
CanonicalizationMethod.
INCLUSIVE_11
The
Canonical XML 1.1
 (without comments)
canonicalization method algorithm URI.
static final
String
CanonicalizationMethod.
INCLUSIVE_11_WITH_COMMENTS
The
Canonical XML 1.1 with comments
canonicalization method algorithm
 URI.
static final
String
CanonicalizationMethod.
INCLUSIVE_WITH_COMMENTS
The
Canonical XML with comments
canonicalization method algorithm URI.
static final
String
DigestMethod.
RIPEMD160
The
RIPEMD-160
digest method algorithm URI.
static final
String
SignatureMethod.
RSA_PSS
The
RSASSA-PSS
signature method algorithm URI.
static final
String
SignatureMethod.
RSA_SHA1
The
RSA-SHA1
(PKCS #1) signature method algorithm URI.
static final
String
SignatureMethod.
RSA_SHA224
The
RSA-SHA224
(PKCS #1) signature method algorithm URI.
static final
String
SignatureMethod.
RSA_SHA256
The
RSA-SHA256
(PKCS #1) signature method algorithm URI.
static final
String
SignatureMethod.
RSA_SHA384
The
RSA-SHA384
(PKCS #1) signature method algorithm URI.
static final
String
SignatureMethod.
RSA_SHA512
The
RSA-SHA512
(PKCS #1) signature method algorithm URI.
static final
String
DigestMethod.
SHA1
The
SHA1
digest method algorithm URI.
static final
String
SignatureMethod.
SHA1_RSA_MGF1
The
SHA1-RSA-MGF1
(PKCS #1) signature method algorithm URI.
static final
String
DigestMethod.
SHA224
The
SHA224
digest method algorithm URI.
static final
String
SignatureMethod.
SHA224_RSA_MGF1
The
SHA224-RSA-MGF1
(PKCS #1) signature method algorithm URI.
static final
String
DigestMethod.
SHA256
The
SHA256
digest method algorithm URI.
static final
String
SignatureMethod.
SHA256_RSA_MGF1
The
SHA256-RSA-MGF1
(PKCS #1) signature method algorithm URI.
static final
String
DigestMethod.
SHA3_224
The
SHA3-224
digest method algorithm URI.
static final
String
DigestMethod.
SHA3_256
The
SHA3-256
digest method algorithm URI.
static final
String
DigestMethod.
SHA3_384
The
SHA3-384
digest method algorithm URI.
static final
String
DigestMethod.
SHA3_512
The
SHA3-512
digest method algorithm URI.
static final
String
DigestMethod.
SHA384
The
SHA384
digest method algorithm URI.
static final
String
SignatureMethod.
SHA384_RSA_MGF1
The
SHA384-RSA-MGF1
(PKCS #1) signature method algorithm URI.
static final
String
DigestMethod.
SHA512
The
SHA512
digest method algorithm URI.
static final
String
SignatureMethod.
SHA512_RSA_MGF1
The
SHA512-RSA-MGF1
(PKCS #1) signature method algorithm URI.
static final
String
Manifest.
TYPE
URI that identifies the
Manifest
element (this can be
 specified as the value of the
type
parameter of the
Reference
class to identify the referent's type).
static final
String
SignatureProperties.
TYPE
URI that identifies the
SignatureProperties
element (this
 can be specified as the value of the
type
parameter of the
Reference
class to identify the referent's type).
static final
String
XMLObject.
TYPE
URI that identifies the
Object
element (this can be
 specified as the value of the
type
parameter of the
Reference
class to identify the referent's type).
static final
String
XMLSignature.
XMLNS
The XML Namespace URI of the W3C Recommendation for XML-Signature
 Syntax and Processing.
static final
String
Transform.
XPATH
The
XPath
transform algorithm URI.
static final
String
Transform.
XPATH2
The
XPath Filter 2
transform algorithm URI.
static final
String
Transform.
XSLT
The
XSLT
transform algorithm URI.
Methods in
javax.xml.crypto.dsig
that return
String
Modifier and Type
Method
Description
final
String
TransformService.
getAlgorithm
()
Returns the URI of the algorithm supported by this
TransformService
.
String
XMLObject.
getEncoding
()
Returns the encoding URI of this
XMLObject
.
String
Manifest.
getId
()
Returns the Id of this
Manifest
.
String
Reference.
getId
()
Returns the optional
Id
attribute of this
Reference
, which permits this reference to be
 referenced from elsewhere.
String
SignatureProperties.
getId
()
Returns the Id of this
SignatureProperties
.
String
SignatureProperty.
getId
()
Returns the Id of this
SignatureProperty
.
String
SignedInfo.
getId
()
Returns the optional
Id
attribute of this
SignedInfo
.
String
XMLObject.
getId
()
Returns the Id of this
XMLObject
.
String
XMLSignature.
getId
()
Returns the optional Id of this
XMLSignature
.
String
XMLSignature.SignatureValue.
getId
()
Returns the optional
Id
attribute of this
SignatureValue
, which permits this element to be
 referenced from elsewhere.
final
String
TransformService.
getMechanismType
()
Returns the mechanism type supported by this
TransformService
.
final
String
XMLSignatureFactory.
getMechanismType
()
Returns the type of the XML processing mechanism and representation
 supported by this
XMLSignatureFactory
(ex: "DOM").
String
XMLObject.
getMimeType
()
Returns the mime type of this
XMLObject
.
String
SignatureProperty.
getTarget
()
Returns the target URI of this
SignatureProperty
.
Methods in
javax.xml.crypto.dsig
with parameters of type
String
Modifier and Type
Method
Description
static
TransformService
TransformService.
getInstance
(
String
algorithm,
String
mechanismType)
Returns a
TransformService
that supports the specified
 algorithm URI (ex:
Transform.XPATH2
) and mechanism type
 (ex: DOM).
static
TransformService
TransformService.
getInstance
(
String
algorithm,
String
mechanismType,
String
provider)
Returns a
TransformService
that supports the specified
 algorithm URI (ex:
Transform.XPATH2
) and mechanism type
 (ex: DOM) as supplied by the specified provider.
static
TransformService
TransformService.
getInstance
(
String
algorithm,
String
mechanismType,
Provider
provider)
Returns a
TransformService
that supports the specified
 algorithm URI (ex:
Transform.XPATH2
) and mechanism type
 (ex: DOM) as supplied by the specified provider.
static
XMLSignatureFactory
XMLSignatureFactory.
getInstance
(
String
mechanismType)
Returns an
XMLSignatureFactory
that supports the
 specified XML processing mechanism and representation type (ex: "DOM").
static
XMLSignatureFactory
XMLSignatureFactory.
getInstance
(
String
mechanismType,
String
provider)
Returns an
XMLSignatureFactory
that supports the
 requested XML processing mechanism and representation type (ex: "DOM"),
 as supplied by the specified provider.
static
XMLSignatureFactory
XMLSignatureFactory.
getInstance
(
String
mechanismType,
Provider
provider)
Returns an
XMLSignatureFactory
that supports the
 requested XML processing mechanism and representation type (ex: "DOM"),
 as supplied by the specified provider.
abstract boolean
XMLSignatureFactory.
isFeatureSupported
(
String
feature)
Indicates whether a specified feature is supported.
abstract
CanonicalizationMethod
XMLSignatureFactory.
newCanonicalizationMethod
(
String
algorithm,
C14NMethodParameterSpec
params)
Creates a
CanonicalizationMethod
for the specified
 algorithm URI and parameters.
abstract
CanonicalizationMethod
XMLSignatureFactory.
newCanonicalizationMethod
(
String
algorithm,
XMLStructure
params)
Creates a
CanonicalizationMethod
for the specified
 algorithm URI and parameters.
abstract
DigestMethod
XMLSignatureFactory.
newDigestMethod
(
String
algorithm,
DigestMethodParameterSpec
params)
Creates a
DigestMethod
for the specified algorithm URI
 and parameters.
abstract
Manifest
XMLSignatureFactory.
newManifest
(
List
<? extends
Reference
> references,
String
id)
Creates a
Manifest
containing the specified
 list of
Reference
s and optional id.
abstract
Reference
XMLSignatureFactory.
newReference
(
String
uri,
DigestMethod
dm)
Creates a
Reference
with the specified URI and digest
 method.
abstract
Reference
XMLSignatureFactory.
newReference
(
String
uri,
DigestMethod
dm,
List
<? extends
Transform
> transforms,
String
type,
String
id)
Creates a
Reference
with the specified parameters.
abstract
Reference
XMLSignatureFactory.
newReference
(
String
uri,
DigestMethod
dm,
List
<? extends
Transform
> transforms,
String
type,
String
id,
 byte[] digestValue)
Creates a
Reference
with the specified parameters and
 pre-calculated digest value.
abstract
Reference
XMLSignatureFactory.
newReference
(
String
uri,
DigestMethod
dm,
List
<? extends
Transform
> appliedTransforms,
Data
result,
List
<? extends
Transform
> transforms,
String
type,
String
id)
Creates a
Reference
with the specified parameters.
abstract
SignatureMethod
XMLSignatureFactory.
newSignatureMethod
(
String
algorithm,
SignatureMethodParameterSpec
params)
Creates a
SignatureMethod
for the specified algorithm URI
 and parameters.
abstract
SignatureProperties
XMLSignatureFactory.
newSignatureProperties
(
List
<? extends
SignatureProperty
> properties,
String
id)
Creates a
SignatureProperties
containing the specified
 list of
SignatureProperty
s and optional id.
abstract
SignatureProperty
XMLSignatureFactory.
newSignatureProperty
(
List
<? extends
XMLStructure
> content,
String
target,
String
id)
Creates a
SignatureProperty
containing the specified
 list of
XMLStructure
s, target URI and optional id.
abstract
SignedInfo
XMLSignatureFactory.
newSignedInfo
(
CanonicalizationMethod
cm,
SignatureMethod
sm,
List
<? extends
Reference
> references,
String
id)
Creates a
SignedInfo
with the specified parameters.
abstract
Transform
XMLSignatureFactory.
newTransform
(
String
algorithm,
TransformParameterSpec
params)
Creates a
Transform
for the specified algorithm URI
 and parameters.
abstract
Transform
XMLSignatureFactory.
newTransform
(
String
algorithm,
XMLStructure
params)
Creates a
Transform
for the specified algorithm URI
 and parameters.
abstract
XMLObject
XMLSignatureFactory.
newXMLObject
(
List
<? extends
XMLStructure
> content,
String
id,
String
mimeType,
String
encoding)
Creates an
XMLObject
from the specified parameters.
abstract
XMLSignature
XMLSignatureFactory.
newXMLSignature
(
SignedInfo
si,
KeyInfo
ki,
List
<? extends
XMLObject
> objects,
String
id,
String
signatureValueId)
Creates an
XMLSignature
and initializes it with the
 specified parameters.
Constructors in
javax.xml.crypto.dsig
with parameters of type
String
Modifier
Constructor
Description
TransformException
(
String
message)
Constructs a new
TransformException
with the specified
 detail message.
TransformException
(
String
message,
Throwable
cause)
Constructs a new
TransformException
with the
 specified detail message and cause.
XMLSignatureException
(
String
message)
Constructs a new
XMLSignatureException
with the specified
 detail message.
XMLSignatureException
(
String
message,
Throwable
cause)
Constructs a new
XMLSignatureException
with the
 specified detail message and cause.
Uses of
String
in
javax.xml.crypto.dsig.keyinfo
Fields in
javax.xml.crypto.dsig.keyinfo
declared as
String
Modifier and Type
Field
Description
static final
String
KeyValue.
DSA_TYPE
URI identifying the DSA KeyValue KeyInfo type:
 http://www.w3.org/2000/09/xmldsig#DSAKeyValue.
static final
String
KeyValue.
EC_TYPE
URI identifying the EC KeyValue KeyInfo type:
 http://www.w3.org/2009/xmldsig11#ECKeyValue.
static final
String
X509Data.
RAW_X509_CERTIFICATE_TYPE
URI identifying the binary (ASN.1 DER) X.509 Certificate KeyInfo type:
 http://www.w3.org/2000/09/xmldsig#rawX509Certificate.
static final
String
KeyValue.
RSA_TYPE
URI identifying the RSA KeyValue KeyInfo type:
 http://www.w3.org/2000/09/xmldsig#RSAKeyValue.
static final
String
PGPData.
TYPE
URI identifying the PGPData KeyInfo type:
 http://www.w3.org/2000/09/xmldsig#PGPData.
static final
String
X509Data.
TYPE
URI identifying the X509Data KeyInfo type:
 http://www.w3.org/2000/09/xmldsig#X509Data.
Methods in
javax.xml.crypto.dsig.keyinfo
that return
String
Modifier and Type
Method
Description
String
KeyInfo.
getId
()
Return the optional Id attribute of this
KeyInfo
, which
 may be useful for referencing this
KeyInfo
from other
 XML structures.
String
X509IssuerSerial.
getIssuerName
()
Returns the X.500 distinguished name of this
X509IssuerSerial
in
RFC 2253
String format.
final
String
KeyInfoFactory.
getMechanismType
()
Returns the type of the XML processing mechanism and representation
 supported by this
KeyInfoFactory
(ex: "DOM")
String
KeyName.
getName
()
Returns the name of this
KeyName
.
String
RetrievalMethod.
getURI
()
Returns the URI of the referenced
KeyInfo
information.
Methods in
javax.xml.crypto.dsig.keyinfo
with parameters of type
String
Modifier and Type
Method
Description
static
KeyInfoFactory
KeyInfoFactory.
getInstance
(
String
mechanismType)
Returns a
KeyInfoFactory
that supports the
 specified XML processing mechanism and representation type (ex: "DOM").
static
KeyInfoFactory
KeyInfoFactory.
getInstance
(
String
mechanismType,
String
provider)
Returns a
KeyInfoFactory
that supports the
 requested XML processing mechanism and representation type (ex: "DOM"),
 as supplied by the specified provider.
static
KeyInfoFactory
KeyInfoFactory.
getInstance
(
String
mechanismType,
Provider
provider)
Returns a
KeyInfoFactory
that supports the
 requested XML processing mechanism and representation type (ex: "DOM"),
 as supplied by the specified provider.
abstract boolean
KeyInfoFactory.
isFeatureSupported
(
String
feature)
Indicates whether a specified feature is supported.
abstract
KeyInfo
KeyInfoFactory.
newKeyInfo
(
List
<? extends
XMLStructure
> content,
String
id)
Creates a
KeyInfo
containing the specified list of key
 information types and optional id.
abstract
KeyName
KeyInfoFactory.
newKeyName
(
String
name)
Creates a
KeyName
from the specified name.
abstract
RetrievalMethod
KeyInfoFactory.
newRetrievalMethod
(
String
uri)
Creates a
RetrievalMethod
from the specified URI.
abstract
RetrievalMethod
KeyInfoFactory.
newRetrievalMethod
(
String
uri,
String
type,
List
<? extends
Transform
> transforms)
Creates a
RetrievalMethod
from the specified parameters.
abstract
X509IssuerSerial
KeyInfoFactory.
newX509IssuerSerial
(
String
issuerName,
BigInteger
serialNumber)
Creates an
X509IssuerSerial
from the specified X.500 issuer
 distinguished name and serial number.
Uses of
String
in
javax.xml.crypto.dsig.spec
Fields in
javax.xml.crypto.dsig.spec
declared as
String
Modifier and Type
Field
Description
static final
String
ExcC14NParameterSpec.
DEFAULT
Indicates the default namespace ("#default").
Methods in
javax.xml.crypto.dsig.spec
that return
String
Modifier and Type
Method
Description
String
XPathType.
getExpression
()
Returns the XPath expression to be evaluated.
String
XPathFilterParameterSpec.
getXPath
()
Returns the XPath expression to be evaluated.
String
XPathType.Filter.
toString
()
Returns the string form of the operation.
Methods in
javax.xml.crypto.dsig.spec
that return types with arguments of type
String
Modifier and Type
Method
Description
Map
<
String
,
String
>
XPathFilterParameterSpec.
getNamespaceMap
()
Returns a map of namespace prefixes.
Map
<
String
,
String
>
XPathFilterParameterSpec.
getNamespaceMap
()
Returns a map of namespace prefixes.
Map
<
String
,
String
>
XPathType.
getNamespaceMap
()
Returns a map of namespace prefixes.
Map
<
String
,
String
>
XPathType.
getNamespaceMap
()
Returns a map of namespace prefixes.
List
<
String
>
ExcC14NParameterSpec.
getPrefixList
()
Returns the inclusive namespace prefix list.
Constructors in
javax.xml.crypto.dsig.spec
with parameters of type
String
Modifier
Constructor
Description
XPathFilterParameterSpec
(
String
xPath)
Creates an
XPathFilterParameterSpec
with the specified
 XPath expression.
XPathFilterParameterSpec
(
String
xPath,
Map
<
String
,
String
> namespaceMap)
Creates an
XPathFilterParameterSpec
with the specified
 XPath expression and namespace map.
XPathType
(
String
expression,
XPathType.Filter
filter)
Creates an
XPathType
instance with the specified XPath
 expression and filter.
XPathType
(
String
expression,
XPathType.Filter
filter,
Map
<
String
,
String
> namespaceMap)
Creates an
XPathType
instance with the specified XPath
 expression, filter, and namespace map.
Constructor parameters in
javax.xml.crypto.dsig.spec
with type arguments of type
String
Modifier
Constructor
Description
ExcC14NParameterSpec
(
List
<
String
> prefixList)
Creates a
ExcC14NParameterSpec
with the specified list
 of prefixes.
XPathFilterParameterSpec
(
String
xPath,
Map
<
String
,
String
> namespaceMap)
Creates an
XPathFilterParameterSpec
with the specified
 XPath expression and namespace map.
XPathFilterParameterSpec
(
String
xPath,
Map
<
String
,
String
> namespaceMap)
Creates an
XPathFilterParameterSpec
with the specified
 XPath expression and namespace map.
XPathType
(
String
expression,
XPathType.Filter
filter,
Map
<
String
,
String
> namespaceMap)
Creates an
XPathType
instance with the specified XPath
 expression, filter, and namespace map.
XPathType
(
String
expression,
XPathType.Filter
filter,
Map
<
String
,
String
> namespaceMap)
Creates an
XPathType
instance with the specified XPath
 expression, filter, and namespace map.
Uses of
String
in
javax.xml.datatype
Fields in
javax.xml.datatype
declared as
String
Modifier and Type
Field
Description
static final
String
DatatypeFactory.
DATATYPEFACTORY_IMPLEMENTATION_CLASS
Default implementation class name as defined in
JSR 206: Java(TM) API for XML Processing (JAXP) 1.3
.
static final
String
DatatypeFactory.
DATATYPEFACTORY_PROPERTY
Default property name as defined in JSR 206: Java(TM) API for XML Processing (JAXP) 1.3.
Methods in
javax.xml.datatype
that return
String
Modifier and Type
Method
Description
String
DatatypeConstants.Field.
toString
()
Returns a field name in English.
String
Duration.
toString
()
Returns a
String
representation of this
Duration Object
.
String
XMLGregorianCalendar.
toString
()
Returns a
String
representation of this
XMLGregorianCalendar
Object
.
abstract
String
XMLGregorianCalendar.
toXMLFormat
()
Return the lexical representation of
this
instance.
Methods in
javax.xml.datatype
with parameters of type
String
Modifier and Type
Method
Description
abstract
Duration
DatatypeFactory.
newDuration
(
String
lexicalRepresentation)
Obtain a new instance of a
Duration
specifying the
Duration
as its string representation, "PnYnMnDTnHnMnS",
 as defined in XML Schema 1.0 section 3.2.6.1.
Duration
DatatypeFactory.
newDurationDayTime
(
String
lexicalRepresentation)
Create a
Duration
of type
xdt:dayTimeDuration
by parsing its
String
representation,
 "
PnDTnHnMnS
",
XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration
.
Duration
DatatypeFactory.
newDurationYearMonth
(
String
lexicalRepresentation)
Create a
Duration
of type
xdt:yearMonthDuration
by parsing its
String
representation,
 "
PnYnM
",
XQuery 1.0 and XPath 2.0 Data Model, xdt:yearMonthDuration
.
static
DatatypeFactory
DatatypeFactory.
newInstance
(
String
factoryClassName,
ClassLoader
classLoader)
Obtain a new instance of a
DatatypeFactory
from class name.
abstract
XMLGregorianCalendar
DatatypeFactory.
newXMLGregorianCalendar
(
String
lexicalRepresentation)
Create a new XMLGregorianCalendar by parsing the String as a lexical representation.
Constructors in
javax.xml.datatype
with parameters of type
String
Modifier
Constructor
Description
DatatypeConfigurationException
(
String
message)
Create a new
DatatypeConfigurationException
with
 the specified detail message.
DatatypeConfigurationException
(
String
message,
Throwable
cause)
Create a new
DatatypeConfigurationException
with
 the specified detail message and cause.
Uses of
String
in
javax.xml.namespace
Methods in
javax.xml.namespace
that return
String
Modifier and Type
Method
Description
String
QName.
getLocalPart
()
Get the local part of this
QName
.
String
NamespaceContext.
getNamespaceURI
(
String
prefix)
Get Namespace URI bound to a prefix in the current scope.
String
QName.
getNamespaceURI
()
Get the Namespace URI of this
QName
.
String
NamespaceContext.
getPrefix
(
String
namespaceURI)
Get prefix bound to Namespace URI in the current scope.
String
QName.
getPrefix
()
Get the prefix of this
QName
.
String
QName.
toString
()
String
representation of this
QName
.
Methods in
javax.xml.namespace
that return types with arguments of type
String
Modifier and Type
Method
Description
Iterator
<
String
>
NamespaceContext.
getPrefixes
(
String
namespaceURI)
Get all prefixes bound to a Namespace URI in the current
 scope.
Methods in
javax.xml.namespace
with parameters of type
String
Modifier and Type
Method
Description
String
NamespaceContext.
getNamespaceURI
(
String
prefix)
Get Namespace URI bound to a prefix in the current scope.
String
NamespaceContext.
getPrefix
(
String
namespaceURI)
Get prefix bound to Namespace URI in the current scope.
Iterator
<
String
>
NamespaceContext.
getPrefixes
(
String
namespaceURI)
Get all prefixes bound to a Namespace URI in the current
 scope.
static
QName
QName.
valueOf
(
String
qNameAsString)
QName
derived from parsing the formatted
String
.
Constructors in
javax.xml.namespace
with parameters of type
String
Modifier
Constructor
Description
QName
(
String
localPart)
QName
constructor specifying the local part.
QName
(
String
namespaceURI,
String
localPart)
QName
constructor specifying the Namespace URI
 and local part.
QName
(
String
namespaceURI,
String
localPart,
String
prefix)
QName
constructor specifying the Namespace URI,
 local part and prefix.
Uses of
String
in
javax.xml.parsers
Methods in
javax.xml.parsers
that return
String
Modifier and Type
Method
Description
String
FactoryConfigurationError.
getMessage
()
Return the message (if any) for this error .
Methods in
javax.xml.parsers
with parameters of type
String
Modifier and Type
Method
Description
abstract
Object
DocumentBuilderFactory.
getAttribute
(
String
name)
Allows the user to retrieve specific attributes on the underlying
 implementation.
abstract boolean
DocumentBuilderFactory.
getFeature
(
String
name)
Get the state of the named feature.
abstract boolean
SAXParserFactory.
getFeature
(
String
name)
Returns the particular property requested for in the underlying
 implementation of org.xml.sax.XMLReader.
abstract
Object
SAXParser.
getProperty
(
String
name)
Returns the particular property requested for in the underlying
 implementation of
XMLReader
.
static
DocumentBuilderFactory
DocumentBuilderFactory.
newInstance
(
String
factoryClassName,
ClassLoader
classLoader)
Obtain a new instance of a
DocumentBuilderFactory
from class name.
static
SAXParserFactory
SAXParserFactory.
newInstance
(
String
factoryClassName,
ClassLoader
classLoader)
Obtain a new instance of a
SAXParserFactory
from class name.
static
DocumentBuilderFactory
DocumentBuilderFactory.
newNSInstance
(
String
factoryClassName,
ClassLoader
classLoader)
Creates a new NamespaceAware instance of a
DocumentBuilderFactory
from the class name.
static
SAXParserFactory
SAXParserFactory.
newNSInstance
(
String
factoryClassName,
ClassLoader
classLoader)
Creates a new NamespaceAware instance of a
SAXParserFactory
from
 the class name.
Document
DocumentBuilder.
parse
(
InputStream
is,
String
systemId)
Parse the content of the given
InputStream
as an
 XML document and return a new DOM
Document
object.
Document
DocumentBuilder.
parse
(
String
uri)
Parse the content of the given URI as an XML document
 and return a new DOM
Document
object.
void
SAXParser.
parse
(
InputStream
is,
HandlerBase
hb,
String
systemId)
Parse the content of the given
InputStream
instance as XML using the specified
HandlerBase
.
void
SAXParser.
parse
(
InputStream
is,
DefaultHandler
dh,
String
systemId)
Parse the content of the given
InputStream
instance as XML using the specified
DefaultHandler
.
void
SAXParser.
parse
(
String
uri,
HandlerBase
hb)
Parse the content described by the giving Uniform Resource
 Identifier (URI) as XML using the specified
HandlerBase
.
void
SAXParser.
parse
(
String
uri,
DefaultHandler
dh)
Parse the content described by the giving Uniform Resource
 Identifier (URI) as XML using the specified
DefaultHandler
.
abstract void
DocumentBuilderFactory.
setAttribute
(
String
name,
Object
value)
Allows the user to set specific attributes on the underlying
 implementation.
abstract void
DocumentBuilderFactory.
setFeature
(
String
name,
 boolean value)
Set a feature for this
DocumentBuilderFactory
and
DocumentBuilder
s created by this factory.
abstract void
SAXParserFactory.
setFeature
(
String
name,
 boolean value)
Sets the particular feature in the underlying implementation of
 org.xml.sax.XMLReader.
abstract void
SAXParser.
setProperty
(
String
name,
Object
value)
Sets the particular property in the underlying implementation of
XMLReader
.
Constructors in
javax.xml.parsers
with parameters of type
String
Modifier
Constructor
Description
FactoryConfigurationError
(
Exception
e,
String
msg)
Create a new
FactoryConfigurationError
with the
 given
Exception
base cause and detail message.
FactoryConfigurationError
(
String
msg)
Create a new
FactoryConfigurationError
with
 the
String
specified as an error message.
ParserConfigurationException
(
String
msg)
Create a new
ParserConfigurationException
with
 the
String
specified as an error message.
Uses of
String
in
javax.xml.stream
Fields in
javax.xml.stream
declared as
String
Modifier and Type
Field
Description
static final
String
XMLInputFactory.
ALLOCATOR
The property used to set/get the implementation of the allocator
static final
String
XMLInputFactory.
IS_COALESCING
The property that requires the parser to coalesce adjacent character data sections
static final
String
XMLInputFactory.
IS_NAMESPACE_AWARE
The property used to turn on/off namespace support,
 this is to support XML 1.0 documents,
 only the true setting must be supported
static final
String
XMLOutputFactory.
IS_REPAIRING_NAMESPACES
Property used to set prefix defaulting on the output side
static final
String
XMLInputFactory.
IS_REPLACING_ENTITY_REFERENCES
Requires the parser to replace internal
 entity references with their replacement
 text and report them as characters
static final
String
XMLInputFactory.
IS_SUPPORTING_EXTERNAL_ENTITIES
The property that requires the parser to resolve external parsed entities
static final
String
XMLInputFactory.
IS_VALIDATING
The property used to turn on/off implementation specific validation
static final
String
XMLInputFactory.
REPORTER
The property used to
 set/get the implementation of the XMLReporter interface
static final
String
XMLInputFactory.
RESOLVER
The property used to set/get the implementation of the XMLResolver
static final
String
XMLInputFactory.
SUPPORT_DTD
The property that requires the parser to support DTDs
Methods in
javax.xml.stream
that return
String
Modifier and Type
Method
Description
String
XMLStreamReader.
getAttributeLocalName
(int index)
Returns the localName of the attribute at the provided
 index
String
XMLStreamReader.
getAttributeNamespace
(int index)
Returns the namespace of the attribute at the provided
 index
String
XMLStreamReader.
getAttributePrefix
(int index)
Returns the prefix of this attribute at the
 provided index
String
XMLStreamReader.
getAttributeType
(int index)
Returns the XML type of the attribute at the provided
 index
String
XMLStreamReader.
getAttributeValue
(int index)
Returns the value of the attribute at the
 index
String
XMLStreamReader.
getAttributeValue
(
String
namespaceURI,
String
localName)
Returns the normalized attribute value of the
 attribute with the namespace and localName
 If the namespaceURI is null the namespace
 is not checked for equality
String
XMLStreamReader.
getCharacterEncodingScheme
()
Returns the character encoding declared on the xml declaration
 Returns null if none was declared
String
XMLEventReader.
getElementText
()
Reads the content of a text-only element.
String
XMLStreamReader.
getElementText
()
Reads the content of a text-only element, an exception is thrown if this is
 not a text-only element.
String
XMLStreamReader.
getEncoding
()
Return input encoding if known or null if unknown.
String
XMLStreamReader.
getLocalName
()
Returns the (local) name of the current event.
String
FactoryConfigurationError.
getMessage
()
Report the message associated with this error
String
XMLStreamReader.
getNamespacePrefix
(int index)
Returns the prefix for the namespace declared at the
 index.
String
XMLStreamReader.
getNamespaceURI
()
If the current event is a START_ELEMENT or END_ELEMENT  this method
 returns the URI of the prefix or the default namespace.
String
XMLStreamReader.
getNamespaceURI
(int index)
Returns the uri for the namespace declared at the
 index.
String
XMLStreamReader.
getNamespaceURI
(
String
prefix)
Return the uri for the given prefix.
String
XMLStreamReader.
getPIData
()
Get the data section of a processing instruction
String
XMLStreamReader.
getPITarget
()
Get the target of a processing instruction
String
XMLEventWriter.
getPrefix
(
String
uri)
Gets the prefix the uri is bound to
String
XMLStreamReader.
getPrefix
()
Returns the prefix of the current event or null if the event does not have a prefix
String
XMLStreamWriter.
getPrefix
(
String
uri)
Gets the prefix the uri is bound to.
String
Location.
getPublicId
()
Returns the public ID of the XML
String
Location.
getSystemId
()
Returns the system ID of the XML
String
XMLStreamReader.
getText
()
Returns the current value of the parse event as a string,
 this returns the string value of a CHARACTERS event,
 returns the value of a COMMENT, the replacement value
 for an ENTITY_REFERENCE, the string value of a CDATA section,
 the string value for a SPACE event,
 or the String value of the internal subset of the DTD.
String
XMLStreamReader.
getVersion
()
Get the xml version declared on the xml declaration
 Returns null if none was declared
Methods in
javax.xml.stream
with parameters of type
String
Modifier and Type
Method
Description
abstract
Attribute
XMLEventFactory.
createAttribute
(
String
localName,
String
value)
Create a new Attribute
abstract
Attribute
XMLEventFactory.
createAttribute
(
String
prefix,
String
namespaceURI,
String
localName,
String
value)
Create a new Attribute
abstract
Attribute
XMLEventFactory.
createAttribute
(
QName
name,
String
value)
Create a new Attribute
abstract
Characters
XMLEventFactory.
createCData
(
String
content)
Create a Characters event with the CData flag set to true
abstract
Characters
XMLEventFactory.
createCharacters
(
String
content)
Create a Characters event, this method does not check if the content
 is all whitespace.
abstract
Comment
XMLEventFactory.
createComment
(
String
text)
Create a comment.
abstract
DTD
XMLEventFactory.
createDTD
(
String
dtd)
Create a document type definition event
 This string contains the entire document type declaration that matches
 the doctypedecl in the XML 1.0 specification
abstract
EndElement
XMLEventFactory.
createEndElement
(
String
prefix,
String
namespaceUri,
String
localName)
Create a new EndElement
abstract
EndElement
XMLEventFactory.
createEndElement
(
String
prefix,
String
namespaceUri,
String
localName,
Iterator
<? extends
Namespace
> namespaces)
Create a new EndElement
abstract
EntityReference
XMLEventFactory.
createEntityReference
(
String
name,
EntityDeclaration
declaration)
Creates a new instance of a EntityReference event
abstract
Characters
XMLEventFactory.
createIgnorableSpace
(
String
content)
Create an ignorable space
abstract
Namespace
XMLEventFactory.
createNamespace
(
String
namespaceURI)
Create a new default Namespace
abstract
Namespace
XMLEventFactory.
createNamespace
(
String
prefix,
String
namespaceUri)
Create a new Namespace
abstract
ProcessingInstruction
XMLEventFactory.
createProcessingInstruction
(
String
target,
String
data)
Create a processing instruction
abstract
Characters
XMLEventFactory.
createSpace
(
String
content)
Create a Characters event with the isSpace flag set to true
abstract
StartDocument
XMLEventFactory.
createStartDocument
(
String
encoding)
Creates a new instance of a StartDocument event
abstract
StartDocument
XMLEventFactory.
createStartDocument
(
String
encoding,
String
version)
Creates a new instance of a StartDocument event
abstract
StartDocument
XMLEventFactory.
createStartDocument
(
String
encoding,
String
version,
 boolean standalone)
Creates a new instance of a StartDocument event
abstract
StartElement
XMLEventFactory.
createStartElement
(
String
prefix,
String
namespaceUri,
String
localName)
Create a new StartElement.
abstract
StartElement
XMLEventFactory.
createStartElement
(
String
prefix,
String
namespaceUri,
String
localName,
Iterator
<? extends
Attribute
> attributes,
Iterator
<? extends
Namespace
> namespaces)
Create a new StartElement.
abstract
StartElement
XMLEventFactory.
createStartElement
(
String
prefix,
String
namespaceUri,
String
localName,
Iterator
<? extends
Attribute
> attributes,
Iterator
<? extends
Namespace
> namespaces,
NamespaceContext
context)
Create a new StartElement.
abstract
XMLEventReader
XMLInputFactory.
createXMLEventReader
(
InputStream
stream,
String
encoding)
Create a new XMLEventReader from a java.io.InputStream
abstract
XMLEventReader
XMLInputFactory.
createXMLEventReader
(
String
systemId,
InputStream
stream)
Create a new XMLEventReader from a java.io.InputStream
abstract
XMLEventReader
XMLInputFactory.
createXMLEventReader
(
String
systemId,
Reader
reader)
Create a new XMLEventReader from a reader.
abstract
XMLEventWriter
XMLOutputFactory.
createXMLEventWriter
(
OutputStream
stream,
String
encoding)
Create a new XMLEventWriter that writes to a stream
abstract
XMLStreamReader
XMLInputFactory.
createXMLStreamReader
(
InputStream
stream,
String
encoding)
Create a new XMLStreamReader from a java.io.InputStream.
abstract
XMLStreamReader
XMLInputFactory.
createXMLStreamReader
(
String
systemId,
InputStream
stream)
Create a new XMLStreamReader from a java.io.InputStream.
abstract
XMLStreamReader
XMLInputFactory.
createXMLStreamReader
(
String
systemId,
Reader
reader)
Create a new XMLStreamReader from a java.io.InputStream.
abstract
XMLStreamWriter
XMLOutputFactory.
createXMLStreamWriter
(
OutputStream
stream,
String
encoding)
Create a new XMLStreamWriter that writes to a stream
String
XMLStreamReader.
getAttributeValue
(
String
namespaceURI,
String
localName)
Returns the normalized attribute value of the
 attribute with the namespace and localName
 If the namespaceURI is null the namespace
 is not checked for equality
String
XMLStreamReader.
getNamespaceURI
(
String
prefix)
Return the uri for the given prefix.
String
XMLEventWriter.
getPrefix
(
String
uri)
Gets the prefix the uri is bound to
String
XMLStreamWriter.
getPrefix
(
String
uri)
Gets the prefix the uri is bound to.
Object
XMLEventReader.
getProperty
(
String
name)
Get the value of a feature/property from the underlying implementation
abstract
Object
XMLInputFactory.
getProperty
(
String
name)
Get the value of a feature/property from the underlying implementation
abstract
Object
XMLOutputFactory.
getProperty
(
String
name)
Get a feature/property on the underlying implementation
Object
XMLStreamReader.
getProperty
(
String
name)
Get the value of a feature/property from the underlying implementation
Object
XMLStreamWriter.
getProperty
(
String
name)
Get the value of a feature/property from the underlying implementation
abstract boolean
XMLInputFactory.
isPropertySupported
(
String
name)
Query the set of properties that this factory supports.
abstract boolean
XMLOutputFactory.
isPropertySupported
(
String
name)
Query the set of properties that this factory supports.
static
XMLEventFactory
XMLEventFactory.
newFactory
(
String
factoryId,
ClassLoader
classLoader)
Create a new instance of the factory.
static
XMLInputFactory
XMLInputFactory.
newFactory
(
String
factoryId,
ClassLoader
classLoader)
Create a new instance of the factory.
static
XMLOutputFactory
XMLOutputFactory.
newFactory
(
String
factoryId,
ClassLoader
classLoader)
Create a new instance of the factory.
static
XMLEventFactory
XMLEventFactory.
newInstance
(
String
factoryId,
ClassLoader
classLoader)
Deprecated.
This method has been deprecated to maintain API consistency.
static
XMLInputFactory
XMLInputFactory.
newInstance
(
String
factoryId,
ClassLoader
classLoader)
Deprecated.
This method has been deprecated to maintain API consistency.
static
XMLInputFactory
XMLOutputFactory.
newInstance
(
String
factoryId,
ClassLoader
classLoader)
Deprecated.
This method has been deprecated because it returns an
              instance of XMLInputFactory, which is of the wrong class.
void
XMLReporter.
report
(
String
message,
String
errorType,
Object
relatedInformation,
Location
location)
Report the desired message in an application specific format.
void
XMLStreamReader.
require
(int type,
String
namespaceURI,
String
localName)
Test if the current event is of the given type and if the namespace and name match the current
 namespace and name of the current event.
Object
XMLResolver.
resolveEntity
(
String
publicID,
String
systemID,
String
baseURI,
String
namespace)
Retrieves a resource.
void
XMLEventWriter.
setDefaultNamespace
(
String
uri)
Binds a URI to the default namespace
 This URI is bound
 in the scope of the current START_ELEMENT / END_ELEMENT pair.
void
XMLStreamWriter.
setDefaultNamespace
(
String
uri)
Binds a URI to the default namespace
 This URI is bound
 in the scope of the current START_ELEMENT / END_ELEMENT pair.
void
XMLEventWriter.
setPrefix
(
String
prefix,
String
uri)
Sets the prefix the uri is bound to.
void
XMLStreamWriter.
setPrefix
(
String
prefix,
String
uri)
Sets the prefix the uri is bound to.
abstract void
XMLInputFactory.
setProperty
(
String
name,
Object
value)
Allows the user to set specific feature/property on the underlying
 implementation.
abstract void
XMLOutputFactory.
setProperty
(
String
name,
Object
value)
Allows the user to set specific features/properties on the underlying implementation.
void
XMLStreamWriter.
writeAttribute
(
String
localName,
String
value)
Writes an attribute to the output stream without
 a prefix.
void
XMLStreamWriter.
writeAttribute
(
String
namespaceURI,
String
localName,
String
value)
Writes an attribute to the output stream
void
XMLStreamWriter.
writeAttribute
(
String
prefix,
String
namespaceURI,
String
localName,
String
value)
Writes an attribute to the output stream
void
XMLStreamWriter.
writeCData
(
String
data)
Writes a CData section
void
XMLStreamWriter.
writeCharacters
(
String
text)
Write text to the output
void
XMLStreamWriter.
writeComment
(
String
data)
Writes an xml comment with the data enclosed
void
XMLStreamWriter.
writeDefaultNamespace
(
String
namespaceURI)
Writes the default namespace to the stream
void
XMLStreamWriter.
writeDTD
(
String
dtd)
Write a DTD section.
void
XMLStreamWriter.
writeEmptyElement
(
String
localName)
Writes an empty element tag to the output
void
XMLStreamWriter.
writeEmptyElement
(
String
namespaceURI,
String
localName)
Writes an empty element tag to the output
void
XMLStreamWriter.
writeEmptyElement
(
String
prefix,
String
localName,
String
namespaceURI)
Writes an empty element tag to the output
void
XMLStreamWriter.
writeEntityRef
(
String
name)
Writes an entity reference
void
XMLStreamWriter.
writeNamespace
(
String
prefix,
String
namespaceURI)
Writes a namespace to the output stream
 If the prefix argument to this method is the empty string,
 "xmlns", or null this method will delegate to writeDefaultNamespace
void
XMLStreamWriter.
writeProcessingInstruction
(
String
target)
Writes a processing instruction
void
XMLStreamWriter.
writeProcessingInstruction
(
String
target,
String
data)
Writes a processing instruction
void
XMLStreamWriter.
writeStartDocument
(
String
version)
Write the XML Declaration.
void
XMLStreamWriter.
writeStartDocument
(
String
encoding,
String
version)
Write the XML Declaration.
void
XMLStreamWriter.
writeStartElement
(
String
localName)
Writes a start tag to the output.
void
XMLStreamWriter.
writeStartElement
(
String
namespaceURI,
String
localName)
Writes a start tag to the output
void
XMLStreamWriter.
writeStartElement
(
String
prefix,
String
localName,
String
namespaceURI)
Writes a start tag to the output
Constructors in
javax.xml.stream
with parameters of type
String
Modifier
Constructor
Description
FactoryConfigurationError
(
Exception
e,
String
msg)
Construct an exception with a nested inner exception
 and a message
FactoryConfigurationError
(
String
msg)
Construct an exception with associated message
FactoryConfigurationError
(
String
msg,
Exception
e)
Construct an exception with a nested inner exception
 and a message
XMLStreamException
(
String
msg)
Construct an exception with the associated message.
XMLStreamException
(
String
msg,
Throwable
th)
Construct an exception with the associated message and exception
XMLStreamException
(
String
msg,
Location
location)
Construct an exception with the associated message, exception and location.
XMLStreamException
(
String
msg,
Location
location,
Throwable
th)
Construct an exception with the associated message, exception and location.
Uses of
String
in
javax.xml.stream.events
Methods in
javax.xml.stream.events
that return
String
Modifier and Type
Method
Description
String
EntityDeclaration.
getBaseURI
()
Get the base URI for this reference
 or null if this information is not available
String
StartDocument.
getCharacterEncodingScheme
()
Returns the encoding style of the XML data
String
Characters.
getData
()
Get the character data of this event
String
ProcessingInstruction.
getData
()
The data section of the processing instruction
String
DTD.
getDocumentTypeDeclaration
()
Returns the entire Document Type Declaration as a string, including the
 internal DTD subset.
String
Attribute.
getDTDType
()
Gets the type of this attribute, default is
 the String "CDATA".
String
EntityDeclaration.
getName
()
The entity's name
String
EntityReference.
getName
()
The name of the entity
String
NotationDeclaration.
getName
()
The notation name.
String
Namespace.
getNamespaceURI
()
Gets the uri bound to the prefix of this namespace
String
StartElement.
getNamespaceURI
(
String
prefix)
Gets the value that the prefix is bound to in the
 context of this element.
String
EntityDeclaration.
getNotationName
()
The name of the associated notation.
String
Namespace.
getPrefix
()
Gets the prefix, returns "" if this is a default
 namespace declaration.
String
EntityDeclaration.
getPublicId
()
The entity's public identifier, or null if none was given
String
NotationDeclaration.
getPublicId
()
The notation's public identifier, or null if none was given.
String
EntityDeclaration.
getReplacementText
()
The replacement text of the entity.
String
EntityDeclaration.
getSystemId
()
The entity's system identifier.
String
NotationDeclaration.
getSystemId
()
The notation's system identifier, or null if none was given.
String
StartDocument.
getSystemId
()
Returns the system ID of the XML data
String
ProcessingInstruction.
getTarget
()
The target section of the processing instruction
String
Comment.
getText
()
Return the string data of the comment, returns empty string if it
 does not exist.
String
Attribute.
getValue
()
Gets the normalized value of this attribute.
String
StartDocument.
getVersion
()
Returns the version of XML of this XML stream
Methods in
javax.xml.stream.events
with parameters of type
String
Modifier and Type
Method
Description
String
StartElement.
getNamespaceURI
(
String
prefix)
Gets the value that the prefix is bound to in the
 context of this element.
Uses of
String
in
javax.xml.stream.util
Methods in
javax.xml.stream.util
that return
String
Modifier and Type
Method
Description
String
StreamReaderDelegate.
getAttributeLocalName
(int index)
String
StreamReaderDelegate.
getAttributeNamespace
(int index)
String
StreamReaderDelegate.
getAttributePrefix
(int index)
String
StreamReaderDelegate.
getAttributeType
(int index)
String
StreamReaderDelegate.
getAttributeValue
(int index)
String
StreamReaderDelegate.
getAttributeValue
(
String
namespaceUri,
String
localName)
String
StreamReaderDelegate.
getCharacterEncodingScheme
()
String
EventReaderDelegate.
getElementText
()
String
StreamReaderDelegate.
getElementText
()
String
StreamReaderDelegate.
getEncoding
()
String
StreamReaderDelegate.
getLocalName
()
String
StreamReaderDelegate.
getNamespacePrefix
(int index)
String
StreamReaderDelegate.
getNamespaceURI
()
String
StreamReaderDelegate.
getNamespaceURI
(int index)
String
StreamReaderDelegate.
getNamespaceURI
(
String
prefix)
String
StreamReaderDelegate.
getPIData
()
String
StreamReaderDelegate.
getPITarget
()
String
StreamReaderDelegate.
getPrefix
()
String
StreamReaderDelegate.
getText
()
String
StreamReaderDelegate.
getVersion
()
Methods in
javax.xml.stream.util
with parameters of type
String
Modifier and Type
Method
Description
String
StreamReaderDelegate.
getAttributeValue
(
String
namespaceUri,
String
localName)
String
StreamReaderDelegate.
getNamespaceURI
(
String
prefix)
Object
EventReaderDelegate.
getProperty
(
String
name)
Object
StreamReaderDelegate.
getProperty
(
String
name)
void
StreamReaderDelegate.
require
(int type,
String
namespaceURI,
String
localName)
Uses of
String
in
javax.xml.transform
Fields in
javax.xml.transform
declared as
String
Modifier and Type
Field
Description
static final
String
OutputKeys.
CDATA_SECTION_ELEMENTS
cdata-section-elements =
expanded names
.
static final
String
OutputKeys.
DOCTYPE_PUBLIC
doctype-public =
string
.
static final
String
OutputKeys.
DOCTYPE_SYSTEM
doctype-system =
string
.
static final
String
OutputKeys.
ENCODING
encoding =
string
.
static final
String
OutputKeys.
INDENT
indent = "yes" | "no".
static final
String
OutputKeys.
MEDIA_TYPE
media-type =
string
.
static final
String
OutputKeys.
METHOD
method = "xml" | "html" | "text" |
expanded name
.
static final
String
OutputKeys.
OMIT_XML_DECLARATION
omit-xml-declaration = "yes" | "no".
static final
String
Result.
PI_DISABLE_OUTPUT_ESCAPING
The name of the processing instruction that is sent if the
 result tree disables output escaping.
static final
String
Result.
PI_ENABLE_OUTPUT_ESCAPING
The name of the processing instruction that is sent
 if the result tree enables output escaping at some point after having
 received a PI_DISABLE_OUTPUT_ESCAPING processing instruction.
static final
String
OutputKeys.
STANDALONE
standalone = "yes" | "no".
static final
String
OutputKeys.
VERSION
version =
nmtoken
.
Methods in
javax.xml.transform
that return
String
Modifier and Type
Method
Description
String
TransformerException.
getLocationAsString
()
Get the location information as a string.
String
TransformerFactoryConfigurationError.
getMessage
()
Return the message (if any) for this error .
String
TransformerException.
getMessageAndLocation
()
Get the error message with location information
 appended.
abstract
String
Transformer.
getOutputProperty
(
String
name)
Get an output property that is in effect for the transformer.
String
SourceLocator.
getPublicId
()
Return the public identifier for the current document event.
String
Result.
getSystemId
()
Get the system identifier that was set with setSystemId.
String
Source.
getSystemId
()
Get the system identifier that was set with setSystemId.
String
SourceLocator.
getSystemId
()
Return the system identifier for the current document event.
Methods in
javax.xml.transform
with parameters of type
String
Modifier and Type
Method
Description
abstract
Source
TransformerFactory.
getAssociatedStylesheet
(
Source
source,
String
media,
String
title,
String
charset)
Get the stylesheet specification(s) associated with the
 XML
Source
document via the
xml-stylesheet processing instruction
that match the given criteria.
abstract
Object
TransformerFactory.
getAttribute
(
String
name)
Allows the user to retrieve specific attributes on the underlying
 implementation.
abstract boolean
TransformerFactory.
getFeature
(
String
name)
Look up the value of a feature.
abstract
String
Transformer.
getOutputProperty
(
String
name)
Get an output property that is in effect for the transformer.
abstract
Object
Transformer.
getParameter
(
String
name)
Get a parameter that was explicitly set with setParameter.
static
TransformerFactory
TransformerFactory.
newInstance
(
String
factoryClassName,
ClassLoader
classLoader)
Obtain a new instance of a
TransformerFactory
from factory class name.
Source
URIResolver.
resolve
(
String
href,
String
base)
Called by the processor when it encounters
 an xsl:include, xsl:import, or document() function.
abstract void
TransformerFactory.
setAttribute
(
String
name,
Object
value)
Allows the user to set specific attributes on the underlying
 implementation.
abstract void
TransformerFactory.
setFeature
(
String
name,
 boolean value)
Set a feature for this
TransformerFactory
and
Transformer
s
 or
Template
s created by this factory.
abstract void
Transformer.
setOutputProperty
(
String
name,
String
value)
Set an output property that will be in effect for the
 transformation.
abstract void
Transformer.
setParameter
(
String
name,
Object
value)
Add a parameter for the transformation.
void
Result.
setSystemId
(
String
systemId)
Set the system identifier for this Result.
void
Source.
setSystemId
(
String
systemId)
Set the system identifier for this Source.
Constructors in
javax.xml.transform
with parameters of type
String
Modifier
Constructor
Description
TransformerConfigurationException
(
String
msg)
Create a new
TransformerConfigurationException
with
 the
String
specified as an error message.
TransformerConfigurationException
(
String
msg,
Throwable
e)
Create a new
TransformerConfigurationException
with the
 given
Exception
base cause and detail message.
TransformerConfigurationException
(
String
message,
SourceLocator
locator)
Create a new TransformerConfigurationException from a message and a Locator.
TransformerConfigurationException
(
String
message,
SourceLocator
locator,
Throwable
e)
Wrap an existing exception in a TransformerConfigurationException.
TransformerException
(
String
message)
Create a new TransformerException.
TransformerException
(
String
message,
Throwable
e)
Wrap an existing exception in a TransformerException.
TransformerException
(
String
message,
SourceLocator
locator)
Create a new TransformerException from a message and a Locator.
TransformerException
(
String
message,
SourceLocator
locator,
Throwable
e)
Wrap an existing exception in a TransformerException.
TransformerFactoryConfigurationError
(
Exception
e,
String
msg)
Create a new
TransformerFactoryConfigurationError
with the
 given
Exception
base cause and detail message.
TransformerFactoryConfigurationError
(
String
msg)
Create a new
TransformerFactoryConfigurationError
with
 the
String
specified as an error message.
Uses of
String
in
javax.xml.transform.dom
Fields in
javax.xml.transform.dom
declared as
String
Modifier and Type
Field
Description
static final
String
DOMResult.
FEATURE
If
TransformerFactory.getFeature(java.lang.String)
returns
true
when passed this value as an argument,
 the
Transformer
supports
Result
output of this type.
static final
String
DOMSource.
FEATURE
If
TransformerFactory.getFeature(java.lang.String)
returns true when passed this value as an argument,
 the Transformer supports Source input of this type.
Methods in
javax.xml.transform.dom
that return
String
Modifier and Type
Method
Description
String
DOMResult.
getSystemId
()
Get the System Identifier.
String
DOMSource.
getSystemId
()
Get the base ID (URL or system ID) from where URLs
 will be resolved.
Methods in
javax.xml.transform.dom
with parameters of type
String
Modifier and Type
Method
Description
void
DOMResult.
setSystemId
(
String
systemId)
Set the systemId that may be used in association with the node.
void
DOMSource.
setSystemId
(
String
systemID)
Set the base ID (URL or system ID) from where URLs
 will be resolved.
Constructors in
javax.xml.transform.dom
with parameters of type
String
Modifier
Constructor
Description
DOMResult
(
Node
node,
String
systemId)
Use a DOM node to create a new output target with the specified System ID.
DOMResult
(
Node
node,
Node
nextSibling,
String
systemId)
Use a DOM node to create a new output target specifying the child
 node where the result nodes should be inserted before and
 the specified System ID.
DOMSource
(
Node
node,
String
systemID)
Create a new input source with a DOM node, and with the
 system ID also passed in as the base URI.
Uses of
String
in
javax.xml.transform.sax
Fields in
javax.xml.transform.sax
declared as
String
Modifier and Type
Field
Description
static final
String
SAXResult.
FEATURE
If
TransformerFactory.getFeature(java.lang.String)
returns true when passed this value as an argument,
 the Transformer supports Result output of this type.
static final
String
SAXSource.
FEATURE
If
TransformerFactory.getFeature(java.lang.String)
returns true when passed this value as an argument,
 the Transformer supports Source input of this type.
static final
String
SAXTransformerFactory.
FEATURE
If
TransformerFactory.getFeature(java.lang.String)
returns true when passed this value as an argument,
 the TransformerFactory returned from
TransformerFactory.newInstance()
may
 be safely cast to a SAXTransformerFactory.
static final
String
SAXTransformerFactory.
FEATURE_XMLFILTER
If
TransformerFactory.getFeature(java.lang.String)
returns true when passed this value as an argument,
 the
SAXTransformerFactory.newXMLFilter(Source src)
and
SAXTransformerFactory.newXMLFilter(Templates templates)
methods are supported.
Methods in
javax.xml.transform.sax
that return
String
Modifier and Type
Method
Description
String
SAXResult.
getSystemId
()
Get the system identifier that was set with setSystemId.
String
SAXSource.
getSystemId
()
Get the base ID (URI or system ID) from where URIs
 will be resolved.
String
TemplatesHandler.
getSystemId
()
Get the base ID (URI or system ID) from where relative
 URLs will be resolved.
String
TransformerHandler.
getSystemId
()
Get the base ID (URI or system ID) from where relative
 URLs will be resolved.
Methods in
javax.xml.transform.sax
with parameters of type
String
Modifier and Type
Method
Description
void
SAXResult.
setSystemId
(
String
systemId)
Method setSystemId Set the systemID that may be used in association
 with the
ContentHandler
.
void
SAXSource.
setSystemId
(
String
systemId)
Set the system identifier for this Source.
void
TemplatesHandler.
setSystemId
(
String
systemID)
Set the base ID (URI or system ID) for the Templates object
 created by this builder.
void
TransformerHandler.
setSystemId
(
String
systemID)
Set the base ID (URI or system ID) from where relative
 URLs will be resolved.
Uses of
String
in
javax.xml.transform.stax
Fields in
javax.xml.transform.stax
declared as
String
Modifier and Type
Field
Description
static final
String
StAXResult.
FEATURE
If
TransformerFactory.getFeature(String name)
returns true when passed this value as an argument,
 the Transformer supports Result output of this type.
static final
String
StAXSource.
FEATURE
If
TransformerFactory.getFeature(String name)
returns true when passed this value as an argument,
 the Transformer supports Source input of this type.
Methods in
javax.xml.transform.stax
that return
String
Modifier and Type
Method
Description
String
StAXResult.
getSystemId
()
The returned system identifier is always
null
.
String
StAXSource.
getSystemId
()
Get the system identifier used by this
StAXSource
.
Methods in
javax.xml.transform.stax
with parameters of type
String
Modifier and Type
Method
Description
void
StAXResult.
setSystemId
(
String
systemId)
In the context of a
StAXResult
, it is not appropriate
 to explicitly set the system identifier.
void
StAXSource.
setSystemId
(
String
systemId)
In the context of a
StAXSource
, it is not appropriate
 to explicitly set the system identifier.
Uses of
String
in
javax.xml.transform.stream
Fields in
javax.xml.transform.stream
declared as
String
Modifier and Type
Field
Description
static final
String
StreamResult.
FEATURE
If
TransformerFactory.getFeature(java.lang.String)
returns true when passed this value as an argument,
 the Transformer supports Result output of this type.
static final
String
StreamSource.
FEATURE
If
TransformerFactory.getFeature(java.lang.String)
returns true when passed this value as an argument,
 the Transformer supports Source input of this type.
Methods in
javax.xml.transform.stream
that return
String
Modifier and Type
Method
Description
String
StreamSource.
getPublicId
()
Get the public identifier that was set with setPublicId.
String
StreamResult.
getSystemId
()
Get the system identifier that was set with setSystemId.
String
StreamSource.
getSystemId
()
Get the system identifier that was set with setSystemId.
Methods in
javax.xml.transform.stream
with parameters of type
String
Modifier and Type
Method
Description
void
StreamSource.
setPublicId
(
String
publicId)
Set the public identifier for this Source.
void
StreamResult.
setSystemId
(
String
systemId)
Set the systemID that may be used in association
 with the byte or character stream, or, if neither is set, use
 this value as a writeable URI (probably a file name).
void
StreamSource.
setSystemId
(
String
systemId)
Set the system identifier for this Source.
Constructors in
javax.xml.transform.stream
with parameters of type
String
Modifier
Constructor
Description
StreamResult
(
String
systemId)
Construct a StreamResult from a URL.
StreamSource
(
InputStream
inputStream,
String
systemId)
Construct a StreamSource from a byte stream.
StreamSource
(
Reader
reader,
String
systemId)
Construct a StreamSource from a character reader.
StreamSource
(
String
systemId)
Construct a StreamSource from a URL.
Uses of
String
in
javax.xml.validation
Methods in
javax.xml.validation
with parameters of type
String
Modifier and Type
Method
Description
boolean
SchemaFactory.
getFeature
(
String
name)
Look up the value of a feature flag.
boolean
Validator.
getFeature
(
String
name)
Look up the value of a feature flag.
boolean
ValidatorHandler.
getFeature
(
String
name)
Look up the value of a feature flag.
Object
SchemaFactory.
getProperty
(
String
name)
Look up the value of a property.
Object
Validator.
getProperty
(
String
name)
Look up the value of a property.
Object
ValidatorHandler.
getProperty
(
String
name)
Look up the value of a property.
abstract boolean
SchemaFactory.
isSchemaLanguageSupported
(
String
schemaLanguage)
Is specified schema supported by this
SchemaFactory
?
abstract
SchemaFactory
SchemaFactoryLoader.
newFactory
(
String
schemaLanguage)
Creates a new
SchemaFactory
object for the specified
 schema language.
static
SchemaFactory
SchemaFactory.
newInstance
(
String
schemaLanguage)
Obtains a new instance of a
SchemaFactory
that supports
 the specified schema language.
static
SchemaFactory
SchemaFactory.
newInstance
(
String
schemaLanguage,
String
factoryClassName,
ClassLoader
classLoader)
Obtain a new instance of a
SchemaFactory
from class name.
void
SchemaFactory.
setFeature
(
String
name,
 boolean value)
Set a feature for this
SchemaFactory
,
Schema
s created by this factory, and by extension,
Validator
s and
ValidatorHandler
s created by
 those
Schema
s.
void
Validator.
setFeature
(
String
name,
 boolean value)
Set the value of a feature flag.
void
ValidatorHandler.
setFeature
(
String
name,
 boolean value)
Set a feature for this
ValidatorHandler
.
void
SchemaFactory.
setProperty
(
String
name,
Object
object)
Set the value of a property.
void
Validator.
setProperty
(
String
name,
Object
object)
Set the value of a property.
void
ValidatorHandler.
setProperty
(
String
name,
Object
object)
Set the value of a property.
Constructors in
javax.xml.validation
with parameters of type
String
Modifier
Constructor
Description
SchemaFactoryConfigurationError
(
String
message)
Create a new
SchemaFactoryConfigurationError
with
 the
String
specified as an error message.
SchemaFactoryConfigurationError
(
String
message,
Throwable
cause)
Create a new
SchemaFactoryConfigurationError
with the
 given
Throwable
base cause and detail message.
Uses of
String
in
javax.xml.xpath
Fields in
javax.xml.xpath
declared as
String
Modifier and Type
Field
Description
static final
String
XPathFactory.
DEFAULT_OBJECT_MODEL_URI
Default Object Model URI.
static final
String
XPathFactory.
DEFAULT_PROPERTY_NAME
The default property name according to the JAXP spec.
static final
String
XPathConstants.
DOM_OBJECT_MODEL
The URI for the DOM object model, "http://java.sun.com/jaxp/xpath/dom".
Methods in
javax.xml.xpath
that return
String
Modifier and Type
Method
Description
String
XPath.
evaluate
(
String
expression,
Object
item)
Evaluate an XPath expression in the specified context and return the result as a
String
.
String
XPath.
evaluate
(
String
expression,
InputSource
source)
Evaluate an XPath expression in the context of the specified
InputSource
and return the result as a
String
.
String
XPathExpression.
evaluate
(
Object
item)
Evaluate the compiled XPath expression in the specified context and return the result as a
String
.
String
XPathExpression.
evaluate
(
InputSource
source)
Evaluate the compiled XPath expression in the context
 of the specified
InputSource
and return the result as a
String
.
String
XPathFactory.
getProperty
(
String
name)
Returns the value of the specified property.
Methods in
javax.xml.xpath
with parameters of type
String
Modifier and Type
Method
Description
XPathExpression
XPath.
compile
(
String
expression)
Compile an XPath expression for later evaluation.
String
XPath.
evaluate
(
String
expression,
Object
item)
Evaluate an XPath expression in the specified context and return the result as a
String
.
Object
XPath.
evaluate
(
String
expression,
Object
item,
QName
returnType)
Evaluate an
XPath
expression in the specified context and
 return the result as the specified type.
String
XPath.
evaluate
(
String
expression,
InputSource
source)
Evaluate an XPath expression in the context of the specified
InputSource
and return the result as a
String
.
Object
XPath.
evaluate
(
String
expression,
InputSource
source,
QName
returnType)
Evaluate an XPath expression in the context of the specified
InputSource
and return the result as the specified type.
default
XPathEvaluationResult
<?>
XPath.
evaluateExpression
(
String
expression,
Object
item)
Evaluate an XPath expression in the specified context.
default <T> T
XPath.
evaluateExpression
(
String
expression,
Object
item,
Class
<T> type)
Evaluate an XPath expression in the specified context and return
 the result with the type specified through the
class type
default
XPathEvaluationResult
<?>
XPath.
evaluateExpression
(
String
expression,
InputSource
source)
Evaluate an XPath expression in the specified context.
default <T> T
XPath.
evaluateExpression
(
String
expression,
InputSource
source,
Class
<T> type)
Evaluate an XPath expression in the context of the specified
source
and return the result as specified.
abstract boolean
XPathFactory.
getFeature
(
String
name)
Get the state of the named feature.
String
XPathFactory.
getProperty
(
String
name)
Returns the value of the specified property.
abstract boolean
XPathFactory.
isObjectModelSupported
(
String
objectModel)
Is specified object model supported by this
XPathFactory
?
static
XPathFactory
XPathFactory.
newInstance
(
String
uri)
Obtains a new
XPathFactory
instance using the specified object model.
static
XPathFactory
XPathFactory.
newInstance
(
String
uri,
String
factoryClassName,
ClassLoader
classLoader)
Obtain a new instance of a
XPathFactory
from a factory class name.
abstract void
XPathFactory.
setFeature
(
String
name,
 boolean value)
Sets a feature for this
XPathFactory
.
void
XPathFactory.
setProperty
(
String
name,
String
value)
Sets a property for this
XPathFactory
.
static
XPathEvaluationResult.XPathResultType
XPathEvaluationResult.XPathResultType.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Constructors in
javax.xml.xpath
with parameters of type
String
Modifier
Constructor
Description
XPathException
(
String
message)
Constructs a new
XPathException
with the specified detail
message
.
XPathExpressionException
(
String
message)
Constructs a new
XPathExpressionException
with the specified detail
message
.
XPathFactoryConfigurationException
(
String
message)
Constructs a new
XPathFactoryConfigurationException
with the specified detail
message
.
XPathFunctionException
(
String
message)
Constructs a new
XPathFunctionException
with the specified detail
message
.
Uses of
String
in
jdk.dynalink
Fields in
jdk.dynalink
declared as
String
Modifier and Type
Field
Description
static final
String
SecureLookupSupplier.
GET_LOOKUP_PERMISSION_NAME
The name of a runtime permission required to successfully invoke the
SecureLookupSupplier.getLookup()
method.
Methods in
jdk.dynalink
that return
String
Modifier and Type
Method
Description
String
CallSiteDescriptor.
toString
()
Returns the string representation of this call site descriptor, of the
 format
name(parameterTypes)returnType@lookup
.
String
NamedOperation.
toString
()
Returns the string representation of this named operation.
String
NamespaceOperation.
toString
()
Returns the string representation of this namespace operation.
Methods in
jdk.dynalink
with parameters of type
String
Modifier and Type
Method
Description
final
NamedOperation
NamedOperation.
changeName
(
String
newName)
Finds or creates a named operation that differs from this one only in the name.
static
StandardNamespace
StandardNamespace.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
StandardOperation
StandardOperation.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Constructors in
jdk.dynalink
with parameters of type
String
Modifier
Constructor
Description
NoSuchDynamicMethodException
(
String
message)
Creates a new NoSuchDynamicMethodException
Uses of
String
in
jdk.dynalink.beans
Methods in
jdk.dynalink.beans
that return types with arguments of type
String
Modifier and Type
Method
Description
static
Set
<
String
>
BeansLinker.
getInstanceMethodNames
(
Class
<?> clazz)
Returns a set of names of all instance methods of a class.
static
Set
<
String
>
BeansLinker.
getReadableInstancePropertyNames
(
Class
<?> clazz)
Returns a set of names of all readable instance properties of a class.
static
Set
<
String
>
BeansLinker.
getReadableStaticPropertyNames
(
Class
<?> clazz)
Returns a set of names of all readable static properties of a class.
static
Set
<
String
>
BeansLinker.
getStaticMethodNames
(
Class
<?> clazz)
Returns a set of names of all static methods of a class.
static
Set
<
String
>
BeansLinker.
getWritableInstancePropertyNames
(
Class
<?> clazz)
Returns a set of names of all writable instance properties of a class.
static
Set
<
String
>
BeansLinker.
getWritableStaticPropertyNames
(
Class
<?> clazz)
Returns a set of names of all writable static properties of a class.
Methods in
jdk.dynalink.beans
with parameters of type
String
Modifier and Type
Method
Description
static
Object
BeansLinker.
getConstructorMethod
(
Class
<?> clazz,
String
signature)
Return the dynamic method of constructor of the given class and the given
 signature.
Uses of
String
in
jdk.dynalink.linker
Fields in
jdk.dynalink.linker
declared as
String
Modifier and Type
Field
Description
static final
String
GuardingDynamicLinkerExporter.
AUTOLOAD_PERMISSION_NAME
The name of the runtime permission for creating instances of this class.
Methods in
jdk.dynalink.linker
with parameters of type
String
Modifier and Type
Method
Description
static
ConversionComparator.Comparison
ConversionComparator.Comparison.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Uses of
String
in
jdk.dynalink.linker.support
Methods in
jdk.dynalink.linker.support
with parameters of type
String
Modifier and Type
Method
Description
MethodHandle
Lookup.
findGetter
(
Class
<?> refc,
String
name,
Class
<?> type)
Performs a
MethodHandles.Lookup.findGetter(Class, String, Class)
,
 converting any encountered
IllegalAccessException
into an
IllegalAccessError
and
NoSuchFieldException
into a
NoSuchFieldError
.
static
MethodHandle
Lookup.
findOwnSpecial
(
MethodHandles.Lookup
lookup,
String
name,
Class
<?> rtype,
Class
<?>... ptypes)
Given a lookup, finds using
Lookup.findSpecial(Class, String, MethodType)
a method on that lookup's class.
MethodHandle
Lookup.
findOwnSpecial
(
String
name,
Class
<?> rtype,
Class
<?>... ptypes)
Finds using
Lookup.findSpecial(Class, String, MethodType)
a method on
 that lookup's class.
static
MethodHandle
Lookup.
findOwnStatic
(
MethodHandles.Lookup
lookup,
String
name,
Class
<?> rtype,
Class
<?>... ptypes)
Given a lookup, finds using
Lookup.findStatic(Class, String, MethodType)
a method on that lookup's class.
MethodHandle
Lookup.
findOwnStatic
(
String
name,
Class
<?> rtype,
Class
<?>... ptypes)
Finds using
Lookup.findStatic(Class, String, MethodType)
a method on
 that lookup's class.
MethodHandle
Lookup.
findSpecial
(
Class
<?> declaringClass,
String
name,
MethodType
type)
Performs a
MethodHandles.Lookup.findSpecial(Class, String, MethodType, Class)
on the underlying lookup.
MethodHandle
Lookup.
findStatic
(
Class
<?> declaringClass,
String
name,
MethodType
type)
Performs a
MethodHandles.Lookup.findStatic(Class, String, MethodType)
on the underlying lookup.
MethodHandle
Lookup.
findVirtual
(
Class
<?> declaringClass,
String
name,
MethodType
type)
Performs a
MethodHandles.Lookup.findVirtual(Class, String, MethodType)
on the underlying lookup.
static
Class
<?>
TypeUtilities.
getPrimitiveTypeByName
(
String
name)
Given a name of a primitive type returns the class representing it.
Uses of
String
in
jdk.incubator.vector
Methods in
jdk.incubator.vector
that return
String
Modifier and Type
Method
Description
String
VectorOperators.Operator.
name
()
Returns the symbolic name of this operator,
 as a constant in
VectorOperators
.
String
VectorOperators.Operator.
operatorName
()
Returns the Java operator symbol or method
 name corresponding to this operator.
final
String
ByteVector.
toString
()
Returns a string representation of this vector, of the form
"[0,1,2...]"
, reporting the lane values of this vector,
 in lane order.
final
String
DoubleVector.
toString
()
Returns a string representation of this vector, of the form
"[0,1,2...]"
, reporting the lane values of this vector,
 in lane order.
final
String
FloatVector.
toString
()
Returns a string representation of this vector, of the form
"[0,1,2...]"
, reporting the lane values of this vector,
 in lane order.
final
String
IntVector.
toString
()
Returns a string representation of this vector, of the form
"[0,1,2...]"
, reporting the lane values of this vector,
 in lane order.
final
String
LongVector.
toString
()
Returns a string representation of this vector, of the form
"[0,1,2...]"
, reporting the lane values of this vector,
 in lane order.
final
String
ShortVector.
toString
()
Returns a string representation of this vector, of the form
"[0,1,2...]"
, reporting the lane values of this vector,
 in lane order.
abstract
String
Vector.
toString
()
Returns a string representation of this vector, of the form
"[0,1,2...]"
, reporting the lane values of this
 vector, in lane order.
final
String
VectorMask.
toString
()
Returns a string representation of this mask, of the form
"Mask[T.TT...]"
, reporting the mask bit
 settings (as 'T' or '.' characters) in lane order.
final
String
VectorShuffle.
toString
()
Returns a string representation of this shuffle, of the form
"Shuffle[0,1,2...]"
, reporting the source indexes
 in lane order.
String
VectorSpecies.
toString
()
Returns a string of the form "Species[ETYPE, VLENGTH, SHAPE]",
 where
ETYPE
is the primitive
lane type
,
VLENGTH
is the
vector lane count
associated with the species, and
SHAPE
is the
vector shape
associated with the species.
Methods in
jdk.incubator.vector
with parameters of type
String
Modifier and Type
Method
Description
static
VectorShape
VectorShape.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Uses of
String
in
jdk.javadoc.doclet
Methods in
jdk.javadoc.doclet
that return
String
Modifier and Type
Method
Description
String
Doclet.Option.
getDescription
()
Returns the description of the option.
String
Doclet.
getName
()
Returns a name identifying the doclet.
String
StandardDoclet.
getName
()
String
Taglet.
getName
()
Returns the name of the tag supported by this taglet.
String
Doclet.Option.
getParameters
()
Returns the parameters of the option.
String
Taglet.
toString
(
List
<? extends
DocTree
> tags,
Element
element)
Returns the string representation of a series of instances of
 this tag to be included in the generated output.
Methods in
jdk.javadoc.doclet
that return types with arguments of type
String
Modifier and Type
Method
Description
List
<
String
>
Doclet.Option.
getNames
()
Returns the list of names that may be used to identify the option.
Methods in
jdk.javadoc.doclet
with parameters of type
String
Modifier and Type
Method
Description
default void
Reporter.
print
(
Diagnostic.Kind
kind,
DocTreePath
path,
 int start,
 int pos,
 int end,
String
message)
Prints a diagnostic message related to a position within a range of characters in a tree node.
void
Reporter.
print
(
Diagnostic.Kind
kind,
DocTreePath
path,
String
message)
Prints a diagnostic message related to a tree node in a documentation comment.
void
Reporter.
print
(
Diagnostic.Kind
kind,
String
message)
Prints a diagnostic message.
void
Reporter.
print
(
Diagnostic.Kind
kind,
Element
element,
String
message)
Prints a diagnostic message related to an element.
default void
Reporter.
print
(
Diagnostic.Kind
kind,
FileObject
file,
 int start,
 int pos,
 int end,
String
message)
Prints a diagnostic message related to a position within a range of characters in a file.
boolean
Doclet.Option.
process
(
String
option,
List
<
String
> arguments)
Processes the option and arguments as needed.
static
Doclet.Option.Kind
Doclet.Option.Kind.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
DocletEnvironment.ModuleMode
DocletEnvironment.ModuleMode.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
Taglet.Location
Taglet.Location.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
Method parameters in
jdk.javadoc.doclet
with type arguments of type
String
Modifier and Type
Method
Description
boolean
Doclet.Option.
process
(
String
option,
List
<
String
> arguments)
Processes the option and arguments as needed.
Uses of
String
in
jdk.jfr
Fields in
jdk.jfr
declared as
String
Modifier and Type
Field
Description
static final
String
DataAmount.
BITS
Unit for bits
static final
String
DataAmount.
BYTES
Unit for bytes
static final
String
Timespan.
MICROSECONDS
Unit for microseconds.
static final
String
Timespan.
MILLISECONDS
Unit for milliseconds.
static final
String
Timestamp.
MILLISECONDS_SINCE_EPOCH
The unit for the difference, measured in milliseconds, between the current
 time and midnight, January 1, 1970 UTC.
static final
String
Enabled.
NAME
Setting name
"enabled"
, signifies that the event should be
 recorded.
static final
String
Period.
NAME
Settings name
"period"
for configuring periodic events
static final
String
StackTrace.
NAME
Settings name
"stackTrace"
to be used for enabling event stack traces.
static final
String
Threshold.
NAME
Setting name
"threshold"
for configuring event thresholds.
static final
String
Timespan.
NANOSECONDS
Unit for nanoseconds.
static final
String
Timespan.
SECONDS
Unit for seconds.
static final
String
Timespan.
TICKS
Unit for ticks.
static final
String
Timestamp.
TICKS
The unit for the number of ticks that have transpired since some arbitrary
 starting date.
Methods in
jdk.jfr
that return
String
Modifier and Type
Method
Description
abstract
String
SettingControl.
combine
(
Set
<
String
> settingValues)
Combines the setting values for all running recordings into one value when
 multiple recordings are running at the same time,
String
Configuration.
getContents
()
Returns a textual representation of the configuration (for example, the
 contents of a JFC file).
String
SettingDescriptor.
getContentType
()
Returns a textual identifier that specifies how a value that is represented by
 this
SettingDescriptor
object is interpreted or formatted.
String
ValueDescriptor.
getContentType
()
Returns a textual identifier that specifies how a value represented by
 this
ValueDescriptor
is interpreted or formatted.
String
SettingDescriptor.
getDefaultValue
()
Returns the default value for this setting descriptor.
String
Configuration.
getDescription
()
Returns a short sentence that describes the configuration (for example
"Low
 overhead configuration safe for continuous use in production
 environments"
)
String
EventType.
getDescription
()
Returns a short sentence that describes the event class.
String
SettingDescriptor.
getDescription
()
Returns a sentence that describes the setting (for example
"Record event with duration
 above or equal to threshold"
).
String
ValueDescriptor.
getDescription
()
Returns a sentence describing the value (for example,
"Maximum
 throughput in the transaction system. Value is reset after each new
 batch."
).
String
Configuration.
getLabel
()
Returns a human-readable name (for example,
"Continuous" or "Profiling"
}.
String
EventType.
getLabel
()
Returns a human-readable name (for example,
"CPU Load"
).
String
SettingDescriptor.
getLabel
()
Returns a human-readable name that describes the setting (for example,
"Threshold"
).
String
ValueDescriptor.
getLabel
()
Returns a human-readable name that describes the value (for example,
"Maximum Throughput"
).
String
Configuration.
getName
()
Returns an identifying name (for example,
"default" or "profile")
.
String
EventType.
getName
()
Returns an identifier for the event (for example,
"jdk.CPULoad"
).
String
Recording.
getName
()
Returns the name of this recording.
String
SettingDescriptor.
getName
()
Returns the name of the setting (for example,
"threshold"
).
String
ValueDescriptor.
getName
()
Returns the name of the value (for example,
"maxThroughput"
).
String
Configuration.
getProvider
()
Returns who created the configuration (for example
"OpenJDK"
).
String
AnnotationElement.
getTypeName
()
Returns the fully qualified name of the annotation type that corresponds to
 this
AnnotationElement
(for example,
"jdk.jfr.Label"
).
String
SettingDescriptor.
getTypeName
()
Returns the fully qualified class name of the type that is associated with this
 setting descriptor.
String
ValueDescriptor.
getTypeName
()
Returns the fully qualified class name of the type that is associated with
 this value descriptor.
abstract
String
SettingControl.
getValue
()
Returns the currently used value for this setting, not
null
.
Methods in
jdk.jfr
that return types with arguments of type
String
Modifier and Type
Method
Description
List
<
String
>
EventType.
getCategoryNames
()
Returns the list of human-readable names that makes up the categories for
 this event type (for example,
"Java Application"
,
"Statistics"
).
Map
<
String
,
String
>
Configuration.
getSettings
()
Returns the settings that specifies how a recording is configured.
Map
<
String
,
String
>
Configuration.
getSettings
()
Returns the settings that specifies how a recording is configured.
Map
<
String
,
String
>
Recording.
getSettings
()
Returns settings used by this recording.
Map
<
String
,
String
>
Recording.
getSettings
()
Returns settings used by this recording.
Methods in
jdk.jfr
with parameters of type
String
Modifier and Type
Method
Description
EventSettings
Recording.
disable
(
String
name)
Disables event with the specified name.
EventSettings
Recording.
enable
(
String
name)
Enables the event with the specified name.
static
Configuration
Configuration.
getConfiguration
(
String
name)
Returns a predefined configuration.
ValueDescriptor
EventType.
getField
(
String
name)
Returns the field with the specified name, or
null
if it doesn't
 exist.
Object
AnnotationElement.
getValue
(
String
name)
Returns a value for this
AnnotationElement
.
boolean
AnnotationElement.
hasValue
(
String
name)
Returns
true
if an annotation value with the specified name exists in
 this
AnnotationElement
.
void
Recording.
setName
(
String
name)
Sets a human-readable name (for example,
"My Recording"
).
abstract void
SettingControl.
setValue
(
String
settingValue)
Sets the value for this setting.
static
RecordingState
RecordingState.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
abstract
EventSettings
EventSettings.
with
(
String
name,
String
value)
Sets a setting value for the event that is associated with this event setting.
Method parameters in
jdk.jfr
with type arguments of type
String
Modifier and Type
Method
Description
abstract
String
SettingControl.
combine
(
Set
<
String
> settingValues)
Combines the setting values for all running recordings into one value when
 multiple recordings are running at the same time,
void
Recording.
setSettings
(
Map
<
String
,
String
> settings)
Replaces all settings for this recording.
void
Recording.
setSettings
(
Map
<
String
,
String
> settings)
Replaces all settings for this recording.
Constructors in
jdk.jfr
with parameters of type
String
Modifier
Constructor
Description
FlightRecorderPermission
(
String
name)
Constructs a
FlightRecorderPermission
with the specified name.
ValueDescriptor
(
Class
<?> type,
String
name)
Constructs a value descriptor, useful for dynamically creating event types and
 annotations.
ValueDescriptor
(
Class
<?> type,
String
name,
List
<
AnnotationElement
> annotations)
Constructs a value descriptor, useful for dynamically creating event types and
 annotations.
Constructor parameters in
jdk.jfr
with type arguments of type
String
Modifier
Constructor
Description
AnnotationElement
(
Class
<? extends
Annotation
> annotationType,
Map
<
String
,
Object
> values)
Creates an annotation element to use for dynamically defined events.
Recording
(
Map
<
String
,
String
> settings)
Creates a recording with settings from a map of name-value pairs.
Recording
(
Map
<
String
,
String
> settings)
Creates a recording with settings from a map of name-value pairs.
Uses of
String
in
jdk.jfr.consumer
Methods in
jdk.jfr.consumer
that return
String
Modifier and Type
Method
Description
String
RecordedMethod.
getDescriptor
()
Returns the method descriptor for this method (for example,
"(Ljava/lang/String;)V"
).
String
RecordedThread.
getJavaName
()
Returns the Java thread name, or
null
if doesn't exist.
String
RecordedClass.
getName
()
Returns the fully qualified name of the class (for example,
"java.lang.String"
).
String
RecordedClassLoader.
getName
()
Returns the name of the class loader (for example, "boot", "platform", and
 "app").
String
RecordedMethod.
getName
()
Returns the name of this method, for example
"toString"
.
String
RecordedThreadGroup.
getName
()
Returns the name of the thread group, or
null
if doesn't exist.
String
RecordedThread.
getOSName
()
Returns the thread name used by the operating system.
final
String
RecordedObject.
getString
(
String
name)
Returns the value of a field of type
String
.
String
RecordedFrame.
getType
()
Returns the frame type for the execution point that is represented by this
 recorded frame (for example,
"Interpreted"
,
"JIT compiled"
or
"Inlined"
).
final
String
RecordedObject.
toString
()
Returns a textual representation of this object.
Methods in
jdk.jfr.consumer
with parameters of type
String
Modifier and Type
Method
Description
EventSettings
RecordingStream.
disable
(
String
name)
Disables event with the specified name.
EventSettings
RecordingStream.
enable
(
String
name)
Enables the event with the specified name.
final boolean
RecordedObject.
getBoolean
(
String
name)
Returns the value of a field of type
boolean
.
final byte
RecordedObject.
getByte
(
String
name)
Returns the value of a field of type
byte
.
final char
RecordedObject.
getChar
(
String
name)
Returns the value of a field of type
char
.
final
RecordedClass
RecordedObject.
getClass
(
String
name)
Returns the value of a field of type
Class
.
final double
RecordedObject.
getDouble
(
String
name)
Returns the value of a field of type
double
or of another primitive
 type that is convertible to type
double
by a widening conversion.
final
Duration
RecordedObject.
getDuration
(
String
name)
Returns the value of a timespan field.
final float
RecordedObject.
getFloat
(
String
name)
Returns the value of a field of type
float
or of another primitive
 type convertible to type
float
by a widening conversion.
final
Instant
RecordedObject.
getInstant
(
String
name)
Returns the value of a timestamp field.
final int
RecordedObject.
getInt
(
String
name)
Returns the value of a field of type
int
or of another primitive type
 that is convertible to type
int
by a widening conversion.
final long
RecordedObject.
getLong
(
String
name)
Returns the value of a field of type
long
or of another primitive
 type that is convertible to type
long
by a widening conversion.
final short
RecordedObject.
getShort
(
String
name)
Returns the value of a field of type
short
or of another primitive
 type convertible to type
short
by a widening conversion.
final
String
RecordedObject.
getString
(
String
name)
Returns the value of a field of type
String
.
final
RecordedThread
RecordedObject.
getThread
(
String
name)
Returns the value of a field of type
Thread
.
final <T> T
RecordedObject.
getValue
(
String
name)
Returns the value of the field with the given name.
boolean
RecordedObject.
hasField
(
String
name)
Returns
true
if a field with the given name exists,
false
otherwise.
void
EventStream.
onEvent
(
String
eventName,
Consumer
<
RecordedEvent
> action)
Registers an action to perform on all events matching a name.
void
RecordingStream.
onEvent
(
String
eventName,
Consumer
<
RecordedEvent
> action)
Method parameters in
jdk.jfr.consumer
with type arguments of type
String
Modifier and Type
Method
Description
void
RecordingStream.
setSettings
(
Map
<
String
,
String
> settings)
Replaces all settings for this recording stream.
void
RecordingStream.
setSettings
(
Map
<
String
,
String
> settings)
Replaces all settings for this recording stream.
Uses of
String
in
jdk.jshell
Methods in
jdk.jshell
that return
String
Modifier and Type
Method
Description
abstract
String
SourceCodeAnalysis.
analyzeType
(
String
code,
 int cursor)
Infer the type of the given expression.
String
SourceCodeAnalysis.Suggestion.
continuation
()
The candidate continuation of the given user's input.
String
SourceCodeAnalysis.SnippetWrapper.
fullClassName
()
Returns the fully qualified class name of the
SourceCodeAnalysis.SnippetWrapper.wrapped()
class.
String
ImportSnippet.
fullname
()
The qualified name of the import.
abstract
String
Diag.
getCode
()
Returns a diagnostic code indicating the type of diagnostic.
String
EvalException.
getExceptionClassName
()
Returns the name of the Throwable subclass which was thrown in the
 executing client.
abstract
String
Diag.
getMessage
(
Locale
locale)
Returns a localized message for the given locale.
String
Snippet.
id
()
The unique identifier for the snippet.
String
SourceCodeAnalysis.Documentation.
javadoc
()
The javadoc of the given element.
String
ExpressionSnippet.
name
()
Variable name which is the value of the expression.
String
ImportSnippet.
name
()
The identifying name of the import.
String
PersistentSnippet.
name
()
Name of the Snippet.
String
MethodSnippet.
parameterTypes
()
A String representation of the parameter types of the method.
String
JShellConsole.
readLine
(
String
prompt)
Provides a prompt, then reads a single line of text from the
 console.
String
SourceCodeAnalysis.CompletionInfo.
remaining
()
Input remaining after the complete part of the source.
String
MethodSnippet.
signature
()
The full type signature of the method, including return type.
String
SourceCodeAnalysis.Documentation.
signature
()
The signature of the given element.
String
Snippet.
source
()
Return the source code of the snippet.
String
SourceCodeAnalysis.CompletionInfo.
source
()
Source code for the first Snippet of code input.
String
SourceCodeAnalysis.SnippetWrapper.
source
()
Returns the input that is wrapped.
String
SnippetEvent.
toString
()
Return a string representation of the event
final
String
SourceCodeAnalysis.Highlight.
toString
()
Returns a string representation of this record class.
String
ExpressionSnippet.
typeName
()
Type of the expression
String
VarSnippet.
typeName
()
A String representation of the type of the variable.
String
SnippetEvent.
value
()
The result value of successful run.
String
JShell.
varValue
(
VarSnippet
snippet)
Get the current value of a variable.
String
SourceCodeAnalysis.SnippetWrapper.
wrapped
()
Returns a Java class definition that wraps the
SourceCodeAnalysis.SnippetWrapper.source()
or, if an import, the import source.
Methods in
jdk.jshell
that return types with arguments of type
String
Modifier and Type
Method
Description
List
<
String
>
SourceCodeAnalysis.QualifiedNames.
getNames
()
Known qualified names for the given simple name in the original code.
Stream
<
String
>
JShell.
unresolvedDependencies
(
DeclarationSnippet
snippet)
For
RECOVERABLE_DEFINED
or
RECOVERABLE_NOT_DEFINED
declarations, the names of current unresolved dependencies for
 the snippet.
Methods in
jdk.jshell
with parameters of type
String
Modifier and Type
Method
Description
void
JShell.
addToClasspath
(
String
path)
The specified path is added to the end of the classpath used in eval().
abstract
SourceCodeAnalysis.CompletionInfo
SourceCodeAnalysis.
analyzeCompletion
(
String
input)
Given an input string, find the first snippet of code (one statement,
 definition, import, or expression) and evaluate if it is complete.
abstract
String
SourceCodeAnalysis.
analyzeType
(
String
code,
 int cursor)
Infer the type of the given expression.
JShell.Builder
JShell.Builder.
compilerOptions
(
String
... options)
Adds compiler options.
abstract
List
<
SourceCodeAnalysis.Suggestion
>
SourceCodeAnalysis.
completionSuggestions
(
String
input,
 int cursor,
 int[] anchor)
Compute possible follow-ups for the given input.
abstract
List
<
SourceCodeAnalysis.Documentation
>
SourceCodeAnalysis.
documentation
(
String
input,
 int cursor,
 boolean computeJavadoc)
Compute documentation for the given user's input.
List
<
SnippetEvent
>
JShell.
eval
(
String
input)
Evaluate the input String, including definition and/or execution, if
 applicable.
JShell.Builder
JShell.Builder.
executionEngine
(
String
executionControlSpec)
Sets the custom engine for execution.
abstract
List
<
SourceCodeAnalysis.Highlight
>
SourceCodeAnalysis.
highlights
(
String
snippet)
Returns a collection of
Highlight
s which can be used to color
 the given snippet.
abstract
SourceCodeAnalysis.QualifiedNames
SourceCodeAnalysis.
listQualifiedNames
(
String
code,
 int cursor)
List qualified names known for the simple name in the given code immediately
 to the left of the given cursor position.
String
JShellConsole.
readLine
(
String
prompt)
Provides a prompt, then reads a single line of text from the
 console.
char[]
JShellConsole.
readPassword
(
String
prompt)
Provides a prompt, then reads a password or passphrase from
 the console with echoing disabled.
JShell.Builder
JShell.Builder.
remoteVMOptions
(
String
... options)
Sets additional VM options for launching the VM.
abstract
List
<
Snippet
>
SourceCodeAnalysis.
sourceToSnippets
(
String
input)
Converts the source code of a snippet into a
Snippet
object (or
 list of
Snippet
objects in the case of some var declarations,
 e.g.: int x, y, z;).
static
Snippet.Kind
Snippet.Kind.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
Snippet.Status
Snippet.Status.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
Snippet.SubKind
Snippet.SubKind.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
SourceCodeAnalysis.Attribute
SourceCodeAnalysis.Attribute.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
static
SourceCodeAnalysis.Completeness
SourceCodeAnalysis.Completeness.
valueOf
(
String
name)
Returns the enum constant of this class with the specified name.
abstract
List
<
SourceCodeAnalysis.SnippetWrapper
>
SourceCodeAnalysis.
wrappers
(
String
input)
Returns the wrapper information for the snippet within the
 input source string.
Method parameters in
jdk.jshell
with type arguments of type
String
Modifier and Type
Method
Description
JShell.Builder
JShell.Builder.
executionEngine
(
ExecutionControlProvider
executionControlProvider,
Map
<
String
,
String
> executionControlParameters)
Sets the custom engine for execution.
JShell.Builder
JShell.Builder.
executionEngine
(
ExecutionControlProvider
executionControlProvider,
Map
<
String
,
String
> executionControlParameters)
Sets the custom engine for execution.
JShell.Builder
JShell.Builder.
idGenerator
(
BiFunction
<
Snippet
,
Integer
,
String
> generator)
Sets the generator of identifying names for Snippets.
JShell.Builder
JShell.Builder.
tempVariableNameGenerator
(
Supplier
<
String
> generator)
Sets a generator of temp variable names for
VarSnippet
of
Snippet.SubKind.TEMP_VAR_EXPRESSION_SUBKIND
.
Uses of
String
in
jdk.jshell.execution
Fields in
jdk.jshell.execution
declared as
String
Modifier and Type
Field
Description
static final
String
JdiExecutionControlProvider.
PARAM_HOST_NAME
The local hostname to connect to.
static final
String
JdiExecutionControlProvider.
PARAM_LAUNCH
Should JDI-controlled launching be used?
static final
String
JdiExecutionControlProvider.
PARAM_REMOTE_AGENT
The remote agent to launch.
static final
String
JdiExecutionControlProvider.
PARAM_TIMEOUT
Milliseconds before connect timeout.
Methods in
jdk.jshell.execution
that return
String
Modifier and Type
Method
Description
protected
String
DirectExecutionControl.
invoke
(
Method
doitMethod)
Invoke the specified "doit-method", a static method with no parameters.
String
DirectExecutionControl.
invoke
(
String
className,
String
methodName)
String
JdiDefaultExecutionControl.
invoke
(
String
classname,
String
methodname)
String
StreamingExecutionControl.
invoke
(
String
classname,
String
methodname)
String
FailOverExecutionControlProvider.
name
()
The unique name of this
ExecutionControlProvider
.
String
JdiExecutionControlProvider.
name
()
The unique name of this
ExecutionControlProvider
.
String
LocalExecutionControlProvider.
name
()
The unique name of this
ExecutionControlProvider
.
protected
String
DirectExecutionControl.
throwConvertedInvocationException
(
Throwable
cause)
Converts incoming exceptions in user code into instances of subtypes of
ExecutionControl.ExecutionControlException
and throws the
 converted exception.
protected
String
DirectExecutionControl.
throwConvertedOtherException
(
Throwable
ex)
Converts incoming exceptions in agent code into instances of subtypes of
ExecutionControl.ExecutionControlException
and throws the
 converted exception.
protected static
String
DirectExecutionControl.
valueString
(
Object
value)
Converts the
Object
value from
ExecutionControl.invoke(String, String)
or
ExecutionControl.varValue(String, String)
to
String
.
String
DirectExecutionControl.
varValue
(
String
className,
String
varName)
String
RemoteExecutionControl.
varValue
(
String
className,
String
varName)
String
StreamingExecutionControl.
varValue
(
String
classname,
String
varname)
Methods in
jdk.jshell.execution
that return types with arguments of type
String
Modifier and Type
Method
Description
Map
<
String
,
String
>
FailOverExecutionControlProvider.
defaultParameters
()
Create and return the default parameter map for this
ExecutionControlProvider
.
Map
<
String
,
String
>
FailOverExecutionControlProvider.
defaultParameters
()
Create and return the default parameter map for this
ExecutionControlProvider
.
Map
<
String
,
String
>
JdiExecutionControlProvider.
defaultParameters
()
Create and return the default parameter map for this
ExecutionControlProvider
.
Map
<
String
,
String
>
JdiExecutionControlProvider.
defaultParameters
()
Create and return the default parameter map for this
ExecutionControlProvider
.
Map
<
String
,
String
>
LocalExecutionControlProvider.
defaultParameters
()
Create and return the default parameter map for
LocalExecutionControlProvider
.
Map
<
String
,
String
>
LocalExecutionControlProvider.
defaultParameters
()
Create and return the default parameter map for
LocalExecutionControlProvider
.
Methods in
jdk.jshell.execution
with parameters of type
String
Modifier and Type
Method
Description
void
DirectExecutionControl.
addToClasspath
(
String
cp)
void
LoaderDelegate.
addToClasspath
(
String
path)
Adds the path to the execution class path.
void
StreamingExecutionControl.
addToClasspath
(
String
path)
Object
DirectExecutionControl.
extensionCommand
(
String
command,
Object
arg)
Object
StreamingExecutionControl.
extensionCommand
(
String
command,
Object
arg)
protected
Class
<?>
DirectExecutionControl.
findClass
(
String
name)
Finds the class with the specified binary name.
Class
<?>
LoaderDelegate.
findClass
(
String
name)
Finds the class with the specified binary name.
String
DirectExecutionControl.
invoke
(
String
className,
String
methodName)
String
JdiDefaultExecutionControl.
invoke
(
String
classname,
String
methodname)
String
StreamingExecutionControl.
invoke
(
String
classname,
String
methodname)
static void
RemoteExecutionControl.
main
(
String
[] args)
Launch the agent, connecting to the JShell-core over the socket specified
 in the command-line argument.
protected
ReferenceType
JdiExecutionControl.
referenceType
(
VirtualMachine
vm,
String
name)
Returns the JDI
ReferenceType
corresponding to the specified
 class name.
String
DirectExecutionControl.
varValue
(
String
className,
String
varName)
String
RemoteExecutionControl.
varValue
(
String
className,
String
varName)
String
StreamingExecutionControl.
varValue
(
String
classname,
String
varname)
Method parameters in
jdk.jshell.execution
with type arguments of type
String
Modifier and Type
Method
Description
static void
Util.
detectJdiExitEvent
(
VirtualMachine
vm,
Consumer
<
String
> unbiddenExitHandler)
Monitor the JDI event stream for
VMDeathEvent
and
VMDisconnectEvent
.
static void
Util.
forwardExecutionControlAndIO
(
ExecutionControl
ec,
InputStream
inStream,
OutputStream
outStream,
Map
<
String
,
Consumer
<
OutputStream
>> outputStreamMap,
Map
<
String
,
Consumer
<
InputStream
>> inputStreamMap)
Forward commands from the input to the specified
ExecutionControl
instance, then responses back on the output.
ExecutionControl
FailOverExecutionControlProvider.
generate
(
ExecutionEnv
env,
Map
<
String
,
String
> parameters)
Create and return a locally executing
ExecutionControl
instance.
ExecutionControl
FailOverExecutionControlProvider.
generate
(
ExecutionEnv
env,
Map
<
String
,
String
> parameters)
Create and return a locally executing
ExecutionControl
instance.
ExecutionControl
JdiExecutionControlProvider.
generate
(
ExecutionEnv
env,
Map
<
String
,
String
> parameters)
ExecutionControl
JdiExecutionControlProvider.
generate
(
ExecutionEnv
env,
Map
<
String
,
String
> parameters)
ExecutionControl
LocalExecutionControlProvider.
generate
(
ExecutionEnv
env,
Map
<
String
,
String
> parameters)
Create and return a locally executing
ExecutionControl
instance.
ExecutionControl
LocalExecutionControlProvider.
generate
(
ExecutionEnv
env,
Map
<
String
,
String
> parameters)
Create and return a locally executing
ExecutionControl
instance.
static
ExecutionControl
Util.
remoteInputOutput
(
InputStream
input,
OutputStream
output,
Map
<
String
,
OutputStream
> outputStreamMap,
Map
<
String
,
InputStream
> inputStreamMap,
BiFunction
<
ObjectInput
,
ObjectOutput
,
ExecutionControl
> factory)
Creates an ExecutionControl for given packetized input and output.
Constructors in
jdk.jshell.execution
with parameters of type
String
Modifier
Constructor
Description
JdiInitiator
(int port,
List
<
String
> remoteVMOptions,
String
remoteAgent,
 boolean isLaunch,
String
host,
 int timeout,
Map
<
String
,
String
> customConnectorArgs)
Start the remote agent and establish a JDI connection to it.
Constructor parameters in
jdk.jshell.execution
with type arguments of type
String
Modifier
Constructor
Description
JdiInitiator
(int port,
List
<
String
> remoteVMOptions,
String
remoteAgent,
 boolean isLaunch,
String
host,
 int timeout,
Map
<
String
,
String
> customConnectorArgs)
Start the remote agent and establish a JDI connection to it.
JdiInitiator
(int port,
List
<
String
> remoteVMOptions,
String
remoteAgent,
 boolean isLaunch,
String
host,
 int timeout,
Map
<
String
,
String
> customConnectorArgs)
Start the remote agent and establish a JDI connection to it.
JdiInitiator
(int port,
List
<
String
> remoteVMOptions,
String
remoteAgent,
 boolean isLaunch,
String
host,
 int timeout,
Map
<
String
,
String
> customConnectorArgs)
Start the remote agent and establish a JDI connection to it.
Uses of
String
in
jdk.jshell.spi
Methods in
jdk.jshell.spi
that return
String
Modifier and Type
Method
Description
String
ExecutionControl.UserException.
causeExceptionClass
()
Returns the class of the user exception.
String
ExecutionControl.
invoke
(
String
className,
String
methodName)
Invokes an executable Snippet by calling a method on the specified
 wrapper class.
String
ExecutionControl.ClassBytecodes.
name
()
The class name.
String
ExecutionControlProvider.
name
()
The unique name of this
ExecutionControlProvider
.
String
ExecutionControl.
varValue
(
String
className,
String
varName)
Returns the value of a variable.
Methods in
jdk.jshell.spi
that return types with arguments of type
String
Modifier and Type
Method
Description
default
Map
<
String
,
String
>
ExecutionControlProvider.
defaultParameters
()
Create and return the default parameter map for this
ExecutionControlProvider
.
default
Map
<
String
,
String
>
ExecutionControlProvider.
defaultParameters
()
Create and return the default parameter map for this
ExecutionControlProvider
.
List
<
String
>
ExecutionEnv.
extraRemoteVMOptions
()
Returns the additional VM options to be used when launching the remote
 JVM.
Methods in
jdk.jshell.spi
with parameters of type
String
Modifier and Type
Method
Description
void
ExecutionControl.
addToClasspath
(
String
path)
Adds the path to the execution class path.
Object
ExecutionControl.
extensionCommand
(
String
command,
Object
arg)
Run a non-standard command (or a standard command from a newer version).
static
ExecutionControl
ExecutionControl.
generate
(
ExecutionEnv
env,
String
spec)
Search for a provider, then create and return the
ExecutionControl
instance.
static
ExecutionControl
ExecutionControl.
generate
(
ExecutionEnv
env,
String
name,
Map
<
String
,
String
> parameters)
Search for a provider, then create and return the
ExecutionControl
instance.
String
ExecutionControl.
invoke
(
String
className,
String
methodName)
Invokes an executable Snippet by calling a method on the specified
 wrapper class.
String
ExecutionControl.
varValue
(
String
className,
String
varName)
Returns the value of a variable.
Method parameters in
jdk.jshell.spi
with type arguments of type
String
Modifier and Type
Method
Description
static
ExecutionControl
ExecutionControl.
generate
(
ExecutionEnv
env,
String
name,
Map
<
String
,
String
> parameters)
Search for a provider, then create and return the
ExecutionControl
instance.
static
ExecutionControl
ExecutionControl.
generate
(
ExecutionEnv
env,
String
name,
Map
<
String
,
String
> parameters)
Search for a provider, then create and return the
ExecutionControl
instance.
ExecutionControl
ExecutionControlProvider.
generate
(
ExecutionEnv
env,
Map
<
String
,
String
> parameters)
Create and return the
ExecutionControl
instance.
ExecutionControl
ExecutionControlProvider.
generate
(
ExecutionEnv
env,
Map
<
String
,
String
> parameters)
Create and return the
ExecutionControl
instance.
Constructors in
jdk.jshell.spi
with parameters of type
String
Modifier
Constructor
Description
ClassBytecodes
(
String
name,
 byte[] bytecodes)
Creates a name/bytecode pair.
ClassInstallException
(
String
message,
 boolean[] installed)
EngineTerminationException
(
String
message)
ExecutionControlException
(
String
message)
InternalException
(
String
message)
NotImplementedException
(
String
message)
UserException
(
String
message,
String
causeExceptionClass,
StackTraceElement
[] stackElements)
Uses of
String
in
jdk.jshell.tool
Methods in
jdk.jshell.tool
with parameters of type
String
Modifier and Type
Method
Description
void
JavaShellToolBuilder.
run
(
String
... arguments)
Run an instance of the Java shell tool as configured by the other methods
 in this interface.
default int
JavaShellToolBuilder.
start
(
String
... arguments)
Run an instance of the Java shell tool as configured by the other methods
 in this interface.
Method parameters in
jdk.jshell.tool
with type arguments of type
String
Modifier and Type
Method
Description
JavaShellToolBuilder
JavaShellToolBuilder.
env
(
Map
<
String
,
String
> vars)
Set the source for environment variables.
JavaShellToolBuilder
JavaShellToolBuilder.
env
(
Map
<
String
,
String
> vars)
Set the source for environment variables.
JavaShellToolBuilder
JavaShellToolBuilder.
persistence
(
Map
<
String
,
String
> prefsMap)
Set the storage mechanism for persistent information which includes
 input history and retained settings.
JavaShellToolBuilder
JavaShellToolBuilder.
persistence
(
Map
<
String
,
String
> prefsMap)
Set the storage mechanism for persistent information which includes
 input history and retained settings.
Uses of
String
in
jdk.management.jfr
Fields in
jdk.management.jfr
declared as
String
Modifier and Type
Field
Description
static final
String
FlightRecorderMXBean.
MXBEAN_NAME
String representation of the
ObjectName
for the
FlightRecorderMXBean
.
Methods in
jdk.management.jfr
that return
String
Modifier and Type
Method
Description
String
ConfigurationInfo.
getContents
()
Returns the textual representation of the configuration associated with
 this
ConfigurationInfo
, typically the contents of the
 configuration file that was used to create the configuration.
String
SettingDescriptorInfo.
getContentType
()
Returns the content type of the setting associated this
SettingDescriptorInfo
(for example,
"jdk.jfr.Timespan"
).
String
SettingDescriptorInfo.
getDefaultValue
()
Returns the default value of the setting associated this
SettingDescriptorInfo
(for example,
"20 ms"
).
String
ConfigurationInfo.
getDescription
()
Returns a short sentence that describes the configuration associated with
 this
ConfigurationInfo
(for example,
"Low
 overhead configuration safe for continuous use in production
 environments"
.
String
EventTypeInfo.
getDescription
()
Returns a short sentence or two describing the event type associated with
 this
EventTypeInfo
, for example
"Garbage collection performed by the JVM""
.
String
SettingDescriptorInfo.
getDescription
()
Returns the description of the setting associated this
SettingDescriptorInfo
(for example,
"The duration an event must exceed to be be recorded"
).
String
RecordingInfo.
getDestination
()
Returns destination path where data, for the recording associated with
 this
RecordingInfo
, should be written when the recording stops,
 or
null
if the recording should not be written.
String
ConfigurationInfo.
getLabel
()
Returns the human-readable name (for example,
"Continuous"
or
"Profiling"
) for
 the configuration associated with this
ConfigurationInfo
String
EventTypeInfo.
getLabel
()
Returns the label, a human-readable name, associated with the event type
 for this
EventTypeInfo
(for example,
"Garbage Collection"
).
String
SettingDescriptorInfo.
getLabel
()
Returns the human-readable name of the setting associated with this
SettingDescriptorInfo
(for example,
"Threshold"
).
String
ConfigurationInfo.
getName
()
Returns the name of the configuration associated with this
ConfigurationInfo
(for example,
"default"
).
String
EventTypeInfo.
getName
()
Returns the name for the event type associated with this
EventTypeInfo
(for example,
"jdk.GarbageCollection"
).
String
RecordingInfo.
getName
()
Returns the name of the recording associated with this
RecordingInfo
.
String
SettingDescriptorInfo.
getName
()
Returns the name of the setting associated with this
SettingDescriptorInfo
(for example,
"threshold"
).
String
ConfigurationInfo.
getProvider
()
Returns the provider of the configuration associated with this
ConfigurationInfo
(for example,
"OpenJDK"
).
String
RecordingInfo.
getState
()
Returns a
String
representation of state of the recording
 associated with this
RecordingInfo
.
String
SettingDescriptorInfo.
getTypeName
()
Returns the type name of the setting associated this
SettingDescriptorInfo
(for example,
"jdk.settings.Threshold"
).
String
ConfigurationInfo.
toString
()
Returns a description of the configuration that is associated with this
ConfigurationInfo
.
String
EventTypeInfo.
toString
()
Returns a description of this
EventTypeInfo
.
String
RecordingInfo.
toString
()
Returns a string description of the recording associated with this
RecordingInfo
String
SettingDescriptorInfo.
toString
()
Returns a
String
description of this
SettingDescriptorInfo
.
Methods in
jdk.management.jfr
that return types with arguments of type
String
Modifier and Type
Method
Description
List
<
String
>
EventTypeInfo.
getCategoryNames
()
Returns the list of human-readable names that makes up the category for this
EventTypeInfo
(for example,
"Java Virtual Machine"
or
"Garbage Collector"
).
Map
<
String
,
String
>
FlightRecorderMXBean.
getRecordingOptions
(long recordingId)
Returns a map that contains the options for the recording with the
 specified ID (for example, the destination file or time span to keep
 recorded data).
Map
<
String
,
String
>
FlightRecorderMXBean.
getRecordingOptions
(long recordingId)
Returns a map that contains the options for the recording with the
 specified ID (for example, the destination file or time span to keep
 recorded data).
Map
<
String
,
String
>
FlightRecorderMXBean.
getRecordingSettings
(long recordingId)
Returns a
Map
that contains the settings for the recording with the specified ID,
 (for example, the event thresholds)
Map
<
String
,
String
>
FlightRecorderMXBean.
getRecordingSettings
(long recordingId)
Returns a
Map
that contains the settings for the recording with the specified ID,
 (for example, the event thresholds)
Map
<
String
,
String
>
ConfigurationInfo.
getSettings
()
Returns the settings for the configuration associated with this
ConfigurationInfo
.
Map
<
String
,
String
>
ConfigurationInfo.
getSettings
()
Returns the settings for the configuration associated with this
ConfigurationInfo
.
Map
<
String
,
String
>
RecordingInfo.
getSettings
()
Returns the settings for the recording associated with this
RecordingInfo
.
Map
<
String
,
String
>
RecordingInfo.
getSettings
()
Returns the settings for the recording associated with this
RecordingInfo
.
Methods in
jdk.management.jfr
with parameters of type
String
Modifier and Type
Method
Description
void
FlightRecorderMXBean.
copyTo
(long recordingId,
String
outputFile)
Writes recording data to the specified file.
EventSettings
RemoteRecordingStream.
disable
(
String
name)
Disables event with the specified name.
EventSettings
RemoteRecordingStream.
enable
(
String
name)
Enables the event with the specified name.
void
RemoteRecordingStream.
onEvent
(
String
eventName,
Consumer
<
RecordedEvent
> action)
void
FlightRecorderMXBean.
setConfiguration
(long recordingId,
String
contents)
Sets a configuration as a string representation for the recording with the
 specified ID.
void
FlightRecorderMXBean.
setPredefinedConfiguration
(long recordingId,
String
configurationName)
Sets a predefined configuration for the recording with the specified ID.
Method parameters in
jdk.management.jfr
with type arguments of type
String
Modifier and Type
Method
Description
long
FlightRecorderMXBean.
openStream
(long recordingId,
Map
<
String
,
String
> streamOptions)
Opens a data stream for the recording with the specified ID, or
0
to get data irrespective of recording.
long
FlightRecorderMXBean.
openStream
(long recordingId,
Map
<
String
,
String
> streamOptions)
Opens a data stream for the recording with the specified ID, or
0
to get data irrespective of recording.
void
FlightRecorderMXBean.
setRecordingOptions
(long recordingId,
Map
<
String
,
String
> options)
Configures the recording options (for example, destination file and time span
 to keep data).
void
FlightRecorderMXBean.
setRecordingOptions
(long recordingId,
Map
<
String
,
String
> options)
Configures the recording options (for example, destination file and time span
 to keep data).
void
FlightRecorderMXBean.
setRecordingSettings
(long recordingId,
Map
<
String
,
String
> settings)
Sets and replaces all previous settings for the specified recording.
void
FlightRecorderMXBean.
setRecordingSettings
(long recordingId,
Map
<
String
,
String
> settings)
Sets and replaces all previous settings for the specified recording.
void
RemoteRecordingStream.
setSettings
(
Map
<
String
,
String
> settings)
Replaces all settings for this recording stream.
void
RemoteRecordingStream.
setSettings
(
Map
<
String
,
String
> settings)
Replaces all settings for this recording stream.
Uses of
String
in
jdk.net
Methods in
jdk.net
that return
String
Modifier and Type
Method
Description
final
String
UnixDomainPrincipal.
toString
()
Returns a string representation of this record class.
Constructors in
jdk.net
with parameters of type
String
Modifier
Constructor
Description
NetworkPermission
(
String
name)
Creates a NetworkPermission with the given target name.
NetworkPermission
(
String
name,
String
actions)
Creates a NetworkPermission with the given target name.
Uses of
String
in
jdk.security.jarsigner
Methods in
jdk.security.jarsigner
that return
String
Modifier and Type
Method
Description
static
String
JarSigner.Builder.
getDefaultDigestAlgorithm
()
Gets the default digest algorithm.
static
String
JarSigner.Builder.
getDefaultSignatureAlgorithm
(
PrivateKey
key)
Gets the default signature algorithm for a private key.
String
JarSigner.
getDigestAlgorithm
()
Returns the digest algorithm for this
JarSigner
.
String
JarSigner.
getProperty
(
String
key)
Returns the value of an additional implementation-specific property
 indicated by the specified key.
String
JarSigner.
getSignatureAlgorithm
()
Returns the signature algorithm for this
JarSigner
.
String
JarSigner.
getSignerName
()
Returns the signer name of this
JarSigner
.
Methods in
jdk.security.jarsigner
with parameters of type
String
Modifier and Type
Method
Description
JarSigner.Builder
JarSigner.Builder.
digestAlgorithm
(
String
algorithm)
Sets the digest algorithm.
JarSigner.Builder
JarSigner.Builder.
digestAlgorithm
(
String
algorithm,
Provider
provider)
Sets the digest algorithm from the specified provider.
String
JarSigner.
getProperty
(
String
key)
Returns the value of an additional implementation-specific property
 indicated by the specified key.
JarSigner.Builder
JarSigner.Builder.
setProperty
(
String
key,
String
value)
Sets an additional implementation-specific property indicated by
 the specified key.
JarSigner.Builder
JarSigner.Builder.
signatureAlgorithm
(
String
algorithm)
Sets the signature algorithm.
JarSigner.Builder
JarSigner.Builder.
signatureAlgorithm
(
String
algorithm,
Provider
provider)
Sets the signature algorithm from the specified provider.
JarSigner.Builder
JarSigner.Builder.
signerName
(
String
name)
Sets the signer name.
Method parameters in
jdk.security.jarsigner
with type arguments of type
String
Modifier and Type
Method
Description
JarSigner.Builder
JarSigner.Builder.
eventHandler
(
BiConsumer
<
String
,
String
> handler)
Sets en event handler that will be triggered when a
JarEntry
is to be added, signed, or updated during the signing process.
JarSigner.Builder
JarSigner.Builder.
eventHandler
(
BiConsumer
<
String
,
String
> handler)
Sets en event handler that will be triggered when a
JarEntry
is to be added, signed, or updated during the signing process.
Constructors in
jdk.security.jarsigner
with parameters of type
String
Modifier
Constructor
Description
JarSignerException
(
String
message,
Throwable
cause)
Constructs a new
JarSignerException
with the specified detail
 message and cause.
Uses of
String
in
netscape.javascript
Methods in
netscape.javascript
with parameters of type
String
Modifier and Type
Method
Description
abstract
Object
JSObject.
call
(
String
methodName,
Object
... args)
Calls a JavaScript method.
abstract
Object
JSObject.
eval
(
String
s)
Evaluates a JavaScript expression.
abstract
Object
JSObject.
getMember
(
String
name)
Retrieves a named member of a JavaScript object.
abstract void
JSObject.
removeMember
(
String
name)
Removes a named member of a JavaScript object.
abstract void
JSObject.
setMember
(
String
name,
Object
value)
Sets a named member of a JavaScript object.
Constructors in
netscape.javascript
with parameters of type
String
Modifier
Constructor
Description
JSException
(
String
s)
Construct a new JavaScript exception with the specified detail message.
Uses of
String
in
org.ietf.jgss
Methods in
org.ietf.jgss
that return
String
Modifier and Type
Method
Description
String
GSSException.
getMajorString
()
Returns a string explaining the GSS-API level major error code in
 this exception.
String
GSSException.
getMessage
()
Returns a textual representation of both the major and the minor
 status codes.
String
GSSException.
getMinorString
()
Returns a string explaining the mechanism specific error code.
String
MessageProp.
getMinorString
()
Retrieves a string explaining the minor status code.
String
GSSException.
toString
()
Returns a textual representation of both the major and the minor
 status codes.
String
GSSName.
toString
()
Returns a textual representation of the
GSSName
object.
String
Oid.
toString
()
Returns a string representation of the oid's integer components
 in dot separated notation.
Methods in
org.ietf.jgss
with parameters of type
String
Modifier and Type
Method
Description
abstract
GSSName
GSSManager.
createName
(
String
nameStr,
Oid
nameType)
Factory method to convert a string name from the
 specified namespace to a GSSName object.
abstract
GSSName
GSSManager.
createName
(
String
nameStr,
Oid
nameType,
Oid
mech)
Factory method to convert a string name from the
 specified namespace to a GSSName object and canonicalize it at the
 same time for a mechanism.
void
GSSException.
setMinor
(int minorCode,
String
message)
Used by the exception thrower to set the mechanism
 level minor error code and its string explanation.
void
MessageProp.
setSupplementaryStates
(boolean duplicate,
 boolean old,
 boolean unseq,
 boolean gap,
 int minorStatus,
String
minorString)
This method sets the state for the supplementary information flags
 and the minor status in MessageProp.
Constructors in
org.ietf.jgss
with parameters of type
String
Modifier
Constructor
Description
GSSException
(int majorCode,
 int minorCode,
String
minorString)
Creates a GSSException object with the specified major code, minor
 code, and minor code textual explanation.
Oid
(
String
strOid)
Constructs an Oid object from a string representation of its
 integer components.
Uses of
String
in
org.w3c.dom
Methods in
org.w3c.dom
that return
String
Modifier and Type
Method
Description
String
Element.
getAttribute
(
String
name)
Retrieves an attribute value by name.
String
Element.
getAttributeNS
(
String
namespaceURI,
String
localName)
Retrieves an attribute value by local name and namespace URI.
String
Node.
getBaseURI
()
The absolute base URI of this node or
null
if the
 implementation wasn't able to obtain an absolute URI.
String
CharacterData.
getData
()
The character data of the node that implements this interface.
String
ProcessingInstruction.
getData
()
The content of this processing instruction.
String
Document.
getDocumentURI
()
The location of the document or
null
if undefined or if
 the
Document
was created using
DOMImplementation.createDocument
.
String
Document.
getInputEncoding
()
An attribute specifying the encoding used for this document at the time
 of the parsing.
String
Entity.
getInputEncoding
()
An attribute specifying the encoding used for this entity at the time
 of parsing, when it is an external parsed entity.
String
DocumentType.
getInternalSubset
()
The internal subset as a string, or
null
if there is none.
String
Node.
getLocalName
()
Returns the local part of the qualified name of this node.
String
DOMError.
getMessage
()
An implementation specific string describing the error that occurred.
String
Attr.
getName
()
Returns the name of this attribute.
String
DocumentType.
getName
()
The name of DTD; i.e., the name immediately following the
DOCTYPE
keyword.
String
NameList.
getName
(int index)
Returns the
index
th name item in the collection.
String
NameList.
getNamespaceURI
(int index)
Returns the
index
th namespaceURI item in the collection.
String
Node.
getNamespaceURI
()
The namespace URI of this node, or
null
if it is
 unspecified (see ).
String
Node.
getNodeName
()
The name of this node, depending on its type; see the table above.
String
Node.
getNodeValue
()
The value of this node, depending on its type; see the table above.
String
Entity.
getNotationName
()
For unparsed entities, the name of the notation for the entity.
String
Node.
getPrefix
()
The namespace prefix of this node, or
null
if it is
 unspecified.
String
DocumentType.
getPublicId
()
The public identifier of the external subset.
String
Entity.
getPublicId
()
The public identifier associated with the entity if specified, and
null
otherwise.
String
Notation.
getPublicId
()
The public identifier of this notation.
String
DocumentType.
getSystemId
()
The system identifier of the external subset.
String
Entity.
getSystemId
()
The system identifier associated with the entity if specified, and
null
otherwise.
String
Notation.
getSystemId
()
The system identifier of this notation.
String
Element.
getTagName
()
The name of the element.
String
ProcessingInstruction.
getTarget
()
The target of this processing instruction.
String
Node.
getTextContent
()
This attribute returns the text content of this node and its
 descendants.
String
DOMError.
getType
()
A
DOMString
indicating which related data is expected in
relatedData
.
String
TypeInfo.
getTypeName
()
The name of a type declared for the associated element or attribute,
 or
null
if unknown.
String
TypeInfo.
getTypeNamespace
()
The namespace of the type declared for the associated element or
 attribute or
null
if the element does not have
 declaration or if no namespace information is available.
String
DOMLocator.
getUri
()
The URI this locator is pointing to, or
null
if no URI is
 available.
String
Attr.
getValue
()
On retrieval, the value of the attribute is returned as a string.
String
Text.
getWholeText
()
Returns all text of
Text
nodes logically-adjacent text
 nodes to this node, concatenated in document order.
String
Document.
getXmlEncoding
()
An attribute specifying, as part of the
XML declaration
, the encoding of this document.
String
Entity.
getXmlEncoding
()
An attribute specifying, as part of the text declaration, the encoding
 of this entity, when it is an external parsed entity.
String
Document.
getXmlVersion
()
An attribute specifying, as part of the
XML declaration
, the version number of this document.
String
Entity.
getXmlVersion
()
An attribute specifying, as part of the text declaration, the version
 number of this entity, when it is an external parsed entity.
String
DOMStringList.
item
(int index)
Returns the
index
th item in the collection.
String
Node.
lookupNamespaceURI
(
String
prefix)
Look up the namespace URI associated to the given prefix, starting from
 this node.
String
Node.
lookupPrefix
(
String
namespaceURI)
Look up the prefix associated to the given namespace URI, starting from
 this node.
String
CharacterData.
substringData
(int offset,
 int count)
Extracts a range of data from the node.
Methods in
org.w3c.dom
with parameters of type
String
Modifier and Type
Method
Description
void
CharacterData.
appendData
(
String
arg)
Append the string to the end of the character data of the node.
boolean
DOMConfiguration.
canSetParameter
(
String
name,
Object
value)
Check if setting a parameter to a specific value is supported.
boolean
DOMStringList.
contains
(
String
str)
Test if a string is part of this
DOMStringList
.
boolean
NameList.
contains
(
String
str)
Test if a name is part of this
NameList
.
boolean
NameList.
containsNS
(
String
namespaceURI,
String
name)
Test if the pair namespaceURI/name is part of this
NameList
.
Attr
Document.
createAttribute
(
String
name)
Creates an
Attr
of the given name.
Attr
Document.
createAttributeNS
(
String
namespaceURI,
String
qualifiedName)
Creates an attribute of the given qualified name and namespace URI.
CDATASection
Document.
createCDATASection
(
String
data)
Creates a
CDATASection
node whose value is the specified
 string.
Comment
Document.
createComment
(
String
data)
Creates a
Comment
node given the specified string.
Document
DOMImplementation.
createDocument
(
String
namespaceURI,
String
qualifiedName,
DocumentType
doctype)
Creates a DOM Document object of the specified type with its document
 element.
DocumentType
DOMImplementation.
createDocumentType
(
String
qualifiedName,
String
publicId,
String
systemId)
Creates an empty
DocumentType
node.
Element
Document.
createElement
(
String
tagName)
Creates an element of the type specified.
Element
Document.
createElementNS
(
String
namespaceURI,
String
qualifiedName)
Creates an element of the given qualified name and namespace URI.
EntityReference
Document.
createEntityReference
(
String
name)
Creates an
EntityReference
object.
ProcessingInstruction
Document.
createProcessingInstruction
(
String
target,
String
data)
Creates a
ProcessingInstruction
node given the specified
 name and data strings.
Text
Document.
createTextNode
(
String
data)
Creates a
Text
node given the specified string.
String
Element.
getAttribute
(
String
name)
Retrieves an attribute value by name.
Attr
Element.
getAttributeNode
(
String
name)
Retrieves an attribute node by name.
Attr
Element.
getAttributeNodeNS
(
String
namespaceURI,
String
localName)
Retrieves an
Attr
node by local name and namespace URI.
String
Element.
getAttributeNS
(
String
namespaceURI,
String
localName)
Retrieves an attribute value by local name and namespace URI.
DOMImplementation
DOMImplementationSource.
getDOMImplementation
(
String
features)
A method to request the first DOM implementation that supports the
 specified features.
DOMImplementationList
DOMImplementationSource.
getDOMImplementationList
(
String
features)
A method to request a list of DOM implementations that support the
 specified features and versions, as specified in .
Element
Document.
getElementById
(
String
elementId)
Returns the
Element
that has an ID attribute with the
 given value.
NodeList
Document.
getElementsByTagName
(
String
tagname)
Returns a
NodeList
of all the
Elements
in
 document order with a given tag name and are contained in the
 document.
NodeList
Element.
getElementsByTagName
(
String
name)
Returns a
NodeList
of all descendant
Elements
with a given tag name, in document order.
NodeList
Document.
getElementsByTagNameNS
(
String
namespaceURI,
String
localName)
Returns a
NodeList
of all the
Elements
with a
 given local name and namespace URI in document order.
NodeList
Element.
getElementsByTagNameNS
(
String
namespaceURI,
String
localName)
Returns a
NodeList
of all the descendant
Elements
with a given local name and namespace URI in
 document order.
Object
DOMImplementation.
getFeature
(
String
feature,
String
version)
This method returns a specialized object which implements the
 specialized APIs of the specified feature and version, as specified
 in
DOM Features
.
Object
Node.
getFeature
(
String
feature,
String
version)
This method returns a specialized object which implements the
 specialized APIs of the specified feature and version, as specified
 in .
Node
NamedNodeMap.
getNamedItem
(
String
name)
Retrieves a node specified by name.
Node
NamedNodeMap.
getNamedItemNS
(
String
namespaceURI,
String
localName)
Retrieves a node specified by local name and namespace URI.
Object
DOMConfiguration.
getParameter
(
String
name)
Return the value of a parameter if known.
Object
Node.
getUserData
(
String
key)
Retrieves the object associated to a key on a this node.
void
UserDataHandler.
handle
(short operation,
String
key,
Object
data,
Node
src,
Node
dst)
This method is called whenever the node for which this handler is
 registered is imported or cloned.
boolean
Element.
hasAttribute
(
String
name)
Returns
true
when an attribute with a given name is
 specified on this element or has a default value,
false
otherwise.
boolean
Element.
hasAttributeNS
(
String
namespaceURI,
String
localName)
Returns
true
when an attribute with a given local name and
 namespace URI is specified on this element or has a default value,
false
otherwise.
boolean
DOMImplementation.
hasFeature
(
String
feature,
String
version)
Test if the DOM implementation implements a specific feature and
 version, as specified in
DOM Features
.
void
CharacterData.
insertData
(int offset,
String
arg)
Insert a string at the specified 16-bit unit offset.
boolean
Node.
isDefaultNamespace
(
String
namespaceURI)
This method checks if the specified
namespaceURI
is the
 default namespace or not.
boolean
TypeInfo.
isDerivedFrom
(
String
typeNamespaceArg,
String
typeNameArg,
 int derivationMethod)
This method returns if there is a derivation between the reference
 type definition, i.e. the
TypeInfo
on which the method
 is being called, and the other type definition, i.e. the one passed
 as parameters.
boolean
Node.
isSupported
(
String
feature,
String
version)
Tests whether the DOM implementation implements a specific feature and
 that feature is supported by this node, as specified in .
String
Node.
lookupNamespaceURI
(
String
prefix)
Look up the namespace URI associated to the given prefix, starting from
 this node.
String
Node.
lookupPrefix
(
String
namespaceURI)
Look up the prefix associated to the given namespace URI, starting from
 this node.
void
Element.
removeAttribute
(
String
name)
Removes an attribute by name.
void
Element.
removeAttributeNS
(
String
namespaceURI,
String
localName)
Removes an attribute by local name and namespace URI.
Node
NamedNodeMap.
removeNamedItem
(
String
name)
Removes a node specified by name.
Node
NamedNodeMap.
removeNamedItemNS
(
String
namespaceURI,
String
localName)
Removes a node specified by local name and namespace URI.
Node
Document.
renameNode
(
Node
n,
String
namespaceURI,
String
qualifiedName)
Rename an existing node of type
ELEMENT_NODE
or
ATTRIBUTE_NODE
.
void
CharacterData.
replaceData
(int offset,
 int count,
String
arg)
Replace the characters starting at the specified 16-bit unit offset
 with the specified string.
Text
Text.
replaceWholeText
(
String
content)
Replaces the text of the current node and all logically-adjacent text
 nodes with the specified text.
void
Element.
setAttribute
(
String
name,
String
value)
Adds a new attribute.
void
Element.
setAttributeNS
(
String
namespaceURI,
String
qualifiedName,
String
value)
Adds a new attribute.
void
CharacterData.
setData
(
String
data)
The character data of the node that implements this interface.
void
ProcessingInstruction.
setData
(
String
data)
The content of this processing instruction.
void
Document.
setDocumentURI
(
String
documentURI)
The location of the document or
null
if undefined or if
 the
Document
was created using
DOMImplementation.createDocument
.
void
Element.
setIdAttribute
(
String
name,
 boolean isId)
If the parameter
isId
is
true
, this method
 declares the specified attribute to be a user-determined ID attribute
 .
void
Element.
setIdAttributeNS
(
String
namespaceURI,
String
localName,
 boolean isId)
If the parameter
isId
is
true
, this method
 declares the specified attribute to be a user-determined ID attribute
 .
void
Node.
setNodeValue
(
String
nodeValue)
The value of this node, depending on its type; see the table above.
void
DOMConfiguration.
setParameter
(
String
name,
Object
value)
Set the value of a parameter.
void
Node.
setPrefix
(
String
prefix)
The namespace prefix of this node, or
null
if it is
 unspecified.
void
Node.
setTextContent
(
String
textContent)
This attribute returns the text content of this node and its
 descendants.
Object
Node.
setUserData
(
String
key,
Object
data,
UserDataHandler
handler)
Associate an object to a key on this node.
void
Attr.
setValue
(
String
value)
On retrieval, the value of the attribute is returned as a string.
void
Document.
setXmlVersion
(
String
xmlVersion)
An attribute specifying, as part of the
XML declaration
, the version number of this document.
Constructors in
org.w3c.dom
with parameters of type
String
Modifier
Constructor
Description
DOMException
(short code,
String
message)
Uses of
String
in
org.w3c.dom.bootstrap
Fields in
org.w3c.dom.bootstrap
declared as
String
Modifier and Type
Field
Description
static final
String
DOMImplementationRegistry.
PROPERTY
The system property to specify the
 DOMImplementationSource class names.
Methods in
org.w3c.dom.bootstrap
with parameters of type
String
Modifier and Type
Method
Description
DOMImplementation
DOMImplementationRegistry.
getDOMImplementation
(
String
features)
Return the first implementation that has the desired
 features, or
null
if none is found.
DOMImplementationList
DOMImplementationRegistry.
getDOMImplementationList
(
String
features)
Return a list of implementations that support the
 desired features.
Uses of
String
in
org.w3c.dom.css
Methods in
org.w3c.dom.css
that return
String
Modifier and Type
Method
Description
String
CSS2Properties.
getAzimuth
()
See the azimuth property definition in CSS2.
String
CSS2Properties.
getBackground
()
See the background property definition in CSS2.
String
CSS2Properties.
getBackgroundAttachment
()
See the background-attachment property definition in CSS2.
String
CSS2Properties.
getBackgroundColor
()
See the background-color property definition in CSS2.
String
CSS2Properties.
getBackgroundImage
()
See the background-image property definition in CSS2.
String
CSS2Properties.
getBackgroundPosition
()
See the background-position property definition in CSS2.
String
CSS2Properties.
getBackgroundRepeat
()
See the background-repeat property definition in CSS2.
String
CSS2Properties.
getBorder
()
See the border property definition in CSS2.
String
CSS2Properties.
getBorderBottom
()
See the border-bottom property definition in CSS2.
String
CSS2Properties.
getBorderBottomColor
()
See the border-bottom-color property definition in CSS2.
String
CSS2Properties.
getBorderBottomStyle
()
See the border-bottom-style property definition in CSS2.
String
CSS2Properties.
getBorderBottomWidth
()
See the border-bottom-width property definition in CSS2.
String
CSS2Properties.
getBorderCollapse
()
See the border-collapse property definition in CSS2.
String
CSS2Properties.
getBorderColor
()
See the border-color property definition in CSS2.
String
CSS2Properties.
getBorderLeft
()
See the border-left property definition in CSS2.
String
CSS2Properties.
getBorderLeftColor
()
See the border-left-color property definition in CSS2.
String
CSS2Properties.
getBorderLeftStyle
()
See the border-left-style property definition in CSS2.
String
CSS2Properties.
getBorderLeftWidth
()
See the border-left-width property definition in CSS2.
String
CSS2Properties.
getBorderRight
()
See the border-right property definition in CSS2.
String
CSS2Properties.
getBorderRightColor
()
See the border-right-color property definition in CSS2.
String
CSS2Properties.
getBorderRightStyle
()
See the border-right-style property definition in CSS2.
String
CSS2Properties.
getBorderRightWidth
()
See the border-right-width property definition in CSS2.
String
CSS2Properties.
getBorderSpacing
()
See the border-spacing property definition in CSS2.
String
CSS2Properties.
getBorderStyle
()
See the border-style property definition in CSS2.
String
CSS2Properties.
getBorderTop
()
See the border-top property definition in CSS2.
String
CSS2Properties.
getBorderTopColor
()
See the border-top-color property definition in CSS2.
String
CSS2Properties.
getBorderTopStyle
()
See the border-top-style property definition in CSS2.
String
CSS2Properties.
getBorderTopWidth
()
See the border-top-width property definition in CSS2.
String
CSS2Properties.
getBorderWidth
()
See the border-width property definition in CSS2.
String
CSS2Properties.
getBottom
()
See the bottom property definition in CSS2.
String
CSS2Properties.
getCaptionSide
()
See the caption-side property definition in CSS2.
String
CSS2Properties.
getClear
()
See the clear property definition in CSS2.
String
CSS2Properties.
getClip
()
See the clip property definition in CSS2.
String
CSS2Properties.
getColor
()
See the color property definition in CSS2.
String
CSS2Properties.
getContent
()
See the content property definition in CSS2.
String
CSS2Properties.
getCounterIncrement
()
See the counter-increment property definition in CSS2.
String
CSS2Properties.
getCounterReset
()
See the counter-reset property definition in CSS2.
String
CSS2Properties.
getCssFloat
()
See the float property definition in CSS2.
String
CSSRule.
getCssText
()
The parsable textual representation of the rule.
String
CSSStyleDeclaration.
getCssText
()
The parsable textual representation of the declaration block
 (excluding the surrounding curly braces).
String
CSSValue.
getCssText
()
A string representation of the current value.
String
CSS2Properties.
getCue
()
See the cue property definition in CSS2.
String
CSS2Properties.
getCueAfter
()
See the cue-after property definition in CSS2.
String
CSS2Properties.
getCueBefore
()
See the cue-before property definition in CSS2.
String
CSS2Properties.
getCursor
()
See the cursor property definition in CSS2.
String
CSS2Properties.
getDirection
()
See the direction property definition in CSS2.
String
CSS2Properties.
getDisplay
()
See the display property definition in CSS2.
String
CSS2Properties.
getElevation
()
See the elevation property definition in CSS2.
String
CSS2Properties.
getEmptyCells
()
See the empty-cells property definition in CSS2.
String
CSSCharsetRule.
getEncoding
()
The encoding information used in this
@charset
rule.
String
CSS2Properties.
getFont
()
See the font property definition in CSS2.
String
CSS2Properties.
getFontFamily
()
See the font-family property definition in CSS2.
String
CSS2Properties.
getFontSize
()
See the font-size property definition in CSS2.
String
CSS2Properties.
getFontSizeAdjust
()
See the font-size-adjust property definition in CSS2.
String
CSS2Properties.
getFontStretch
()
See the font-stretch property definition in CSS2.
String
CSS2Properties.
getFontStyle
()
See the font-style property definition in CSS2.
String
CSS2Properties.
getFontVariant
()
See the font-variant property definition in CSS2.
String
CSS2Properties.
getFontWeight
()
See the font-weight property definition in CSS2.
String
CSS2Properties.
getHeight
()
See the height property definition in CSS2.
String
CSSImportRule.
getHref
()
The location of the style sheet to be imported.
String
Counter.
getIdentifier
()
This attribute is used for the identifier of the counter.
String
CSS2Properties.
getLeft
()
See the left property definition in CSS2.
String
CSS2Properties.
getLetterSpacing
()
See the letter-spacing property definition in CSS2.
String
CSS2Properties.
getLineHeight
()
See the line-height property definition in CSS2.
String
Counter.
getListStyle
()
This attribute is used for the style of the list.
String
CSS2Properties.
getListStyle
()
See the list-style property definition in CSS2.
String
CSS2Properties.
getListStyleImage
()
See the list-style-image property definition in CSS2.
String
CSS2Properties.
getListStylePosition
()
See the list-style-position property definition in CSS2.
String
CSS2Properties.
getListStyleType
()
See the list-style-type property definition in CSS2.
String
CSS2Properties.
getMargin
()
See the margin property definition in CSS2.
String
CSS2Properties.
getMarginBottom
()
See the margin-bottom property definition in CSS2.
String
CSS2Properties.
getMarginLeft
()
See the margin-left property definition in CSS2.
String
CSS2Properties.
getMarginRight
()
See the margin-right property definition in CSS2.
String
CSS2Properties.
getMarginTop
()
See the margin-top property definition in CSS2.
String
CSS2Properties.
getMarkerOffset
()
See the marker-offset property definition in CSS2.
String
CSS2Properties.
getMarks
()
See the marks property definition in CSS2.
String
CSS2Properties.
getMaxHeight
()
See the max-height property definition in CSS2.
String
CSS2Properties.
getMaxWidth
()
See the max-width property definition in CSS2.
String
CSS2Properties.
getMinHeight
()
See the min-height property definition in CSS2.
String
CSS2Properties.
getMinWidth
()
See the min-width property definition in CSS2.
String
CSS2Properties.
getOrphans
()
See the orphans property definition in CSS2.
String
CSS2Properties.
getOutline
()
See the outline property definition in CSS2.
String
CSS2Properties.
getOutlineColor
()
See the outline-color property definition in CSS2.
String
CSS2Properties.
getOutlineStyle
()
See the outline-style property definition in CSS2.
String
CSS2Properties.
getOutlineWidth
()
See the outline-width property definition in CSS2.
String
CSS2Properties.
getOverflow
()
See the overflow property definition in CSS2.
String
CSS2Properties.
getPadding
()
See the padding property definition in CSS2.
String
CSS2Properties.
getPaddingBottom
()
See the padding-bottom property definition in CSS2.
String
CSS2Properties.
getPaddingLeft
()
See the padding-left property definition in CSS2.
String
CSS2Properties.
getPaddingRight
()
See the padding-right property definition in CSS2.
String
CSS2Properties.
getPaddingTop
()
See the padding-top property definition in CSS2.
String
CSS2Properties.
getPage
()
See the page property definition in CSS2.
String
CSS2Properties.
getPageBreakAfter
()
See the page-break-after property definition in CSS2.
String
CSS2Properties.
getPageBreakBefore
()
See the page-break-before property definition in CSS2.
String
CSS2Properties.
getPageBreakInside
()
See the page-break-inside property definition in CSS2.
String
CSS2Properties.
getPause
()
See the pause property definition in CSS2.
String
CSS2Properties.
getPauseAfter
()
See the pause-after property definition in CSS2.
String
CSS2Properties.
getPauseBefore
()
See the pause-before property definition in CSS2.
String
CSS2Properties.
getPitch
()
See the pitch property definition in CSS2.
String
CSS2Properties.
getPitchRange
()
See the pitch-range property definition in CSS2.
String
CSS2Properties.
getPlayDuring
()
See the play-during property definition in CSS2.
String
CSS2Properties.
getPosition
()
See the position property definition in CSS2.
String
CSSStyleDeclaration.
getPropertyPriority
(
String
propertyName)
Used to retrieve the priority of a CSS property (e.g. the
"important"
qualifier) if the priority has been
 explicitly set in this declaration block.
String
CSSStyleDeclaration.
getPropertyValue
(
String
propertyName)
Used to retrieve the value of a CSS property if it has been explicitly
 set within this declaration block.
String
CSS2Properties.
getQuotes
()
See the quotes property definition in CSS2.
String
CSS2Properties.
getRichness
()
See the richness property definition in CSS2.
String
CSS2Properties.
getRight
()
See the right property definition in CSS2.
String
CSSPageRule.
getSelectorText
()
The parsable textual representation of the page selector for the rule.
String
CSSStyleRule.
getSelectorText
()
The textual representation of the selector for the rule set.
String
Counter.
getSeparator
()
This attribute is used for the separator of the nested counters.
String
CSS2Properties.
getSize
()
See the size property definition in CSS2.
String
CSS2Properties.
getSpeak
()
See the speak property definition in CSS2.
String
CSS2Properties.
getSpeakHeader
()
See the speak-header property definition in CSS2.
String
CSS2Properties.
getSpeakNumeral
()
See the speak-numeral property definition in CSS2.
String
CSS2Properties.
getSpeakPunctuation
()
See the speak-punctuation property definition in CSS2.
String
CSS2Properties.
getSpeechRate
()
See the speech-rate property definition in CSS2.
String
CSS2Properties.
getStress
()
See the stress property definition in CSS2.
String
CSSPrimitiveValue.
getStringValue
()
This method is used to get the string value.
String
CSS2Properties.
getTableLayout
()
See the table-layout property definition in CSS2.
String
CSS2Properties.
getTextAlign
()
See the text-align property definition in CSS2.
String
CSS2Properties.
getTextDecoration
()
See the text-decoration property definition in CSS2.
String
CSS2Properties.
getTextIndent
()
See the text-indent property definition in CSS2.
String
CSS2Properties.
getTextShadow
()
See the text-shadow property definition in CSS2.
String
CSS2Properties.
getTextTransform
()
See the text-transform property definition in CSS2.
String
CSS2Properties.
getTop
()
See the top property definition in CSS2.
String
CSS2Properties.
getUnicodeBidi
()
See the unicode-bidi property definition in CSS2.
String
CSS2Properties.
getVerticalAlign
()
See the vertical-align property definition in CSS2.
String
CSS2Properties.
getVisibility
()
See the visibility property definition in CSS2.
String
CSS2Properties.
getVoiceFamily
()
See the voice-family property definition in CSS2.
String
CSS2Properties.
getVolume
()
See the volume property definition in CSS2.
String
CSS2Properties.
getWhiteSpace
()
See the white-space property definition in CSS2.
String
CSS2Properties.
getWidows
()
See the widows property definition in CSS2.
String
CSS2Properties.
getWidth
()
See the width property definition in CSS2.
String
CSS2Properties.
getWordSpacing
()
See the word-spacing property definition in CSS2.
String
CSS2Properties.
getZIndex
()
See the z-index property definition in CSS2.
String
CSSStyleDeclaration.
item
(int index)
Used to retrieve the properties that have been explicitly set in this
 declaration block.
String
CSSStyleDeclaration.
removeProperty
(
String
propertyName)
Used to remove a CSS property if it has been explicitly set within
 this declaration block.
Methods in
org.w3c.dom.css
with parameters of type
String
Modifier and Type
Method
Description
CSSStyleSheet
DOMImplementationCSS.
createCSSStyleSheet
(
String
title,
String
media)
Creates a new
CSSStyleSheet
.
CSSStyleDeclaration
ViewCSS.
getComputedStyle
(
Element
elt,
String
pseudoElt)
This method is used to get the computed style as it is defined in [
CSS2
].
CSSStyleDeclaration
DocumentCSS.
getOverrideStyle
(
Element
elt,
String
pseudoElt)
This method is used to retrieve the override style declaration for a
 specified element and a specified pseudo-element.
CSSValue
CSSStyleDeclaration.
getPropertyCSSValue
(
String
propertyName)
Used to retrieve the object representation of the value of a CSS
 property if it has been explicitly set within this declaration block.
String
CSSStyleDeclaration.
getPropertyPriority
(
String
propertyName)
Used to retrieve the priority of a CSS property (e.g. the
"important"
qualifier) if the priority has been
 explicitly set in this declaration block.
String
CSSStyleDeclaration.
getPropertyValue
(
String
propertyName)
Used to retrieve the value of a CSS property if it has been explicitly
 set within this declaration block.
int
CSSMediaRule.
insertRule
(
String
rule,
 int index)
Used to insert a new rule into the media block.
int
CSSStyleSheet.
insertRule
(
String
rule,
 int index)
Used to insert a new rule into the style sheet.
String
CSSStyleDeclaration.
removeProperty
(
String
propertyName)
Used to remove a CSS property if it has been explicitly set within
 this declaration block.
void
CSS2Properties.
setAzimuth
(
String
azimuth)
See the azimuth property definition in CSS2.
void
CSS2Properties.
setBackground
(
String
background)
See the background property definition in CSS2.
void
CSS2Properties.
setBackgroundAttachment
(
String
backgroundAttachment)
See the background-attachment property definition in CSS2.
void
CSS2Properties.
setBackgroundColor
(
String
backgroundColor)
See the background-color property definition in CSS2.
void
CSS2Properties.
setBackgroundImage
(
String
backgroundImage)
See the background-image property definition in CSS2.
void
CSS2Properties.
setBackgroundPosition
(
String
backgroundPosition)
See the background-position property definition in CSS2.
void
CSS2Properties.
setBackgroundRepeat
(
String
backgroundRepeat)
See the background-repeat property definition in CSS2.
void
CSS2Properties.
setBorder
(
String
border)
See the border property definition in CSS2.
void
CSS2Properties.
setBorderBottom
(
String
borderBottom)
See the border-bottom property definition in CSS2.
void
CSS2Properties.
setBorderBottomColor
(
String
borderBottomColor)
See the border-bottom-color property definition in CSS2.
void
CSS2Properties.
setBorderBottomStyle
(
String
borderBottomStyle)
See the border-bottom-style property definition in CSS2.
void
CSS2Properties.
setBorderBottomWidth
(
String
borderBottomWidth)
See the border-bottom-width property definition in CSS2.
void
CSS2Properties.
setBorderCollapse
(
String
borderCollapse)
See the border-collapse property definition in CSS2.
void
CSS2Properties.
setBorderColor
(
String
borderColor)
See the border-color property definition in CSS2.
void
CSS2Properties.
setBorderLeft
(
String
borderLeft)
See the border-left property definition in CSS2.
void
CSS2Properties.
setBorderLeftColor
(
String
borderLeftColor)
See the border-left-color property definition in CSS2.
void
CSS2Properties.
setBorderLeftStyle
(
String
borderLeftStyle)
See the border-left-style property definition in CSS2.
void
CSS2Properties.
setBorderLeftWidth
(
String
borderLeftWidth)
See the border-left-width property definition in CSS2.
void
CSS2Properties.
setBorderRight
(
String
borderRight)
See the border-right property definition in CSS2.
void
CSS2Properties.
setBorderRightColor
(
String
borderRightColor)
See the border-right-color property definition in CSS2.
void
CSS2Properties.
setBorderRightStyle
(
String
borderRightStyle)
See the border-right-style property definition in CSS2.
void
CSS2Properties.
setBorderRightWidth
(
String
borderRightWidth)
See the border-right-width property definition in CSS2.
void
CSS2Properties.
setBorderSpacing
(
String
borderSpacing)
See the border-spacing property definition in CSS2.
void
CSS2Properties.
setBorderStyle
(
String
borderStyle)
See the border-style property definition in CSS2.
void
CSS2Properties.
setBorderTop
(
String
borderTop)
See the border-top property definition in CSS2.
void
CSS2Properties.
setBorderTopColor
(
String
borderTopColor)
See the border-top-color property definition in CSS2.
void
CSS2Properties.
setBorderTopStyle
(
String
borderTopStyle)
See the border-top-style property definition in CSS2.
void
CSS2Properties.
setBorderTopWidth
(
String
borderTopWidth)
See the border-top-width property definition in CSS2.
void
CSS2Properties.
setBorderWidth
(
String
borderWidth)
See the border-width property definition in CSS2.
void
CSS2Properties.
setBottom
(
String
bottom)
See the bottom property definition in CSS2.
void
CSS2Properties.
setCaptionSide
(
String
captionSide)
See the caption-side property definition in CSS2.
void
CSS2Properties.
setClear
(
String
clear)
See the clear property definition in CSS2.
void
CSS2Properties.
setClip
(
String
clip)
See the clip property definition in CSS2.
void
CSS2Properties.
setColor
(
String
color)
See the color property definition in CSS2.
void
CSS2Properties.
setContent
(
String
content)
See the content property definition in CSS2.
void
CSS2Properties.
setCounterIncrement
(
String
counterIncrement)
See the counter-increment property definition in CSS2.
void
CSS2Properties.
setCounterReset
(
String
counterReset)
See the counter-reset property definition in CSS2.
void
CSS2Properties.
setCssFloat
(
String
cssFloat)
See the float property definition in CSS2.
void
CSSRule.
setCssText
(
String
cssText)
The parsable textual representation of the rule.
void
CSSStyleDeclaration.
setCssText
(
String
cssText)
The parsable textual representation of the declaration block
 (excluding the surrounding curly braces).
void
CSSValue.
setCssText
(
String
cssText)
A string representation of the current value.
void
CSS2Properties.
setCue
(
String
cue)
See the cue property definition in CSS2.
void
CSS2Properties.
setCueAfter
(
String
cueAfter)
See the cue-after property definition in CSS2.
void
CSS2Properties.
setCueBefore
(
String
cueBefore)
See the cue-before property definition in CSS2.
void
CSS2Properties.
setCursor
(
String
cursor)
See the cursor property definition in CSS2.
void
CSS2Properties.
setDirection
(
String
direction)
See the direction property definition in CSS2.
void
CSS2Properties.
setDisplay
(
String
display)
See the display property definition in CSS2.
void
CSS2Properties.
setElevation
(
String
elevation)
See the elevation property definition in CSS2.
void
CSS2Properties.
setEmptyCells
(
String
emptyCells)
See the empty-cells property definition in CSS2.
void
CSSCharsetRule.
setEncoding
(
String
encoding)
The encoding information used in this
@charset
rule.
void
CSS2Properties.
setFont
(
String
font)
See the font property definition in CSS2.
void
CSS2Properties.
setFontFamily
(
String
fontFamily)
See the font-family property definition in CSS2.
void
CSS2Properties.
setFontSize
(
String
fontSize)
See the font-size property definition in CSS2.
void
CSS2Properties.
setFontSizeAdjust
(
String
fontSizeAdjust)
See the font-size-adjust property definition in CSS2.
void
CSS2Properties.
setFontStretch
(
String
fontStretch)
See the font-stretch property definition in CSS2.
void
CSS2Properties.
setFontStyle
(
String
fontStyle)
See the font-style property definition in CSS2.
void
CSS2Properties.
setFontVariant
(
String
fontVariant)
See the font-variant property definition in CSS2.
void
CSS2Properties.
setFontWeight
(
String
fontWeight)
See the font-weight property definition in CSS2.
void
CSS2Properties.
setHeight
(
String
height)
See the height property definition in CSS2.
void
CSS2Properties.
setLeft
(
String
left)
See the left property definition in CSS2.
void
CSS2Properties.
setLetterSpacing
(
String
letterSpacing)
See the letter-spacing property definition in CSS2.
void
CSS2Properties.
setLineHeight
(
String
lineHeight)
See the line-height property definition in CSS2.
void
CSS2Properties.
setListStyle
(
String
listStyle)
See the list-style property definition in CSS2.
void
CSS2Properties.
setListStyleImage
(
String
listStyleImage)
See the list-style-image property definition in CSS2.
void
CSS2Properties.
setListStylePosition
(
String
listStylePosition)
See the list-style-position property definition in CSS2.
void
CSS2Properties.
setListStyleType
(
String
listStyleType)
See the list-style-type property definition in CSS2.
void
CSS2Properties.
setMargin
(
String
margin)
See the margin property definition in CSS2.
void
CSS2Properties.
setMarginBottom
(
String
marginBottom)
See the margin-bottom property definition in CSS2.
void
CSS2Properties.
setMarginLeft
(
String
marginLeft)
See the margin-left property definition in CSS2.
void
CSS2Properties.
setMarginRight
(
String
marginRight)
See the margin-right property definition in CSS2.
void
CSS2Properties.
setMarginTop
(
String
marginTop)
See the margin-top property definition in CSS2.
void
CSS2Properties.
setMarkerOffset
(
String
markerOffset)
See the marker-offset property definition in CSS2.
void
CSS2Properties.
setMarks
(
String
marks)
See the marks property definition in CSS2.
void
CSS2Properties.
setMaxHeight
(
String
maxHeight)
See the max-height property definition in CSS2.
void
CSS2Properties.
setMaxWidth
(
String
maxWidth)
See the max-width property definition in CSS2.
void
CSS2Properties.
setMinHeight
(
String
minHeight)
See the min-height property definition in CSS2.
void
CSS2Properties.
setMinWidth
(
String
minWidth)
See the min-width property definition in CSS2.
void
CSS2Properties.
setOrphans
(
String
orphans)
See the orphans property definition in CSS2.
void
CSS2Properties.
setOutline
(
String
outline)
See the outline property definition in CSS2.
void
CSS2Properties.
setOutlineColor
(
String
outlineColor)
See the outline-color property definition in CSS2.
void
CSS2Properties.
setOutlineStyle
(
String
outlineStyle)
See the outline-style property definition in CSS2.
void
CSS2Properties.
setOutlineWidth
(
String
outlineWidth)
See the outline-width property definition in CSS2.
void
CSS2Properties.
setOverflow
(
String
overflow)
See the overflow property definition in CSS2.
void
CSS2Properties.
setPadding
(
String
padding)
See the padding property definition in CSS2.
void
CSS2Properties.
setPaddingBottom
(
String
paddingBottom)
See the padding-bottom property definition in CSS2.
void
CSS2Properties.
setPaddingLeft
(
String
paddingLeft)
See the padding-left property definition in CSS2.
void
CSS2Properties.
setPaddingRight
(
String
paddingRight)
See the padding-right property definition in CSS2.
void
CSS2Properties.
setPaddingTop
(
String
paddingTop)
See the padding-top property definition in CSS2.
void
CSS2Properties.
setPage
(
String
page)
See the page property definition in CSS2.
void
CSS2Properties.
setPageBreakAfter
(
String
pageBreakAfter)
See the page-break-after property definition in CSS2.
void
CSS2Properties.
setPageBreakBefore
(
String
pageBreakBefore)
See the page-break-before property definition in CSS2.
void
CSS2Properties.
setPageBreakInside
(
String
pageBreakInside)
See the page-break-inside property definition in CSS2.
void
CSS2Properties.
setPause
(
String
pause)
See the pause property definition in CSS2.
void
CSS2Properties.
setPauseAfter
(
String
pauseAfter)
See the pause-after property definition in CSS2.
void
CSS2Properties.
setPauseBefore
(
String
pauseBefore)
See the pause-before property definition in CSS2.
void
CSS2Properties.
setPitch
(
String
pitch)
See the pitch property definition in CSS2.
void
CSS2Properties.
setPitchRange
(
String
pitchRange)
See the pitch-range property definition in CSS2.
void
CSS2Properties.
setPlayDuring
(
String
playDuring)
See the play-during property definition in CSS2.
void
CSS2Properties.
setPosition
(
String
position)
See the position property definition in CSS2.
void
CSSStyleDeclaration.
setProperty
(
String
propertyName,
String
value,
String
priority)
Used to set a property value and priority within this declaration
 block.
void
CSS2Properties.
setQuotes
(
String
quotes)
See the quotes property definition in CSS2.
void
CSS2Properties.
setRichness
(
String
richness)
See the richness property definition in CSS2.
void
CSS2Properties.
setRight
(
String
right)
See the right property definition in CSS2.
void
CSSPageRule.
setSelectorText
(
String
selectorText)
The parsable textual representation of the page selector for the rule.
void
CSSStyleRule.
setSelectorText
(
String
selectorText)
The textual representation of the selector for the rule set.
void
CSS2Properties.
setSize
(
String
size)
See the size property definition in CSS2.
void
CSS2Properties.
setSpeak
(
String
speak)
See the speak property definition in CSS2.
void
CSS2Properties.
setSpeakHeader
(
String
speakHeader)
See the speak-header property definition in CSS2.
void
CSS2Properties.
setSpeakNumeral
(
String
speakNumeral)
See the speak-numeral property definition in CSS2.
void
CSS2Properties.
setSpeakPunctuation
(
String
speakPunctuation)
See the speak-punctuation property definition in CSS2.
void
CSS2Properties.
setSpeechRate
(
String
speechRate)
See the speech-rate property definition in CSS2.
void
CSS2Properties.
setStress
(
String
stress)
See the stress property definition in CSS2.
void
CSSPrimitiveValue.
setStringValue
(short stringType,
String
stringValue)
A method to set the string value with the specified unit.
void
CSS2Properties.
setTableLayout
(
String
tableLayout)
See the table-layout property definition in CSS2.
void
CSS2Properties.
setTextAlign
(
String
textAlign)
See the text-align property definition in CSS2.
void
CSS2Properties.
setTextDecoration
(
String
textDecoration)
See the text-decoration property definition in CSS2.
void
CSS2Properties.
setTextIndent
(
String
textIndent)
See the text-indent property definition in CSS2.
void
CSS2Properties.
setTextShadow
(
String
textShadow)
See the text-shadow property definition in CSS2.
void
CSS2Properties.
setTextTransform
(
String
textTransform)
See the text-transform property definition in CSS2.
void
CSS2Properties.
setTop
(
String
top)
See the top property definition in CSS2.
void
CSS2Properties.
setUnicodeBidi
(
String
unicodeBidi)
See the unicode-bidi property definition in CSS2.
void
CSS2Properties.
setVerticalAlign
(
String
verticalAlign)
See the vertical-align property definition in CSS2.
void
CSS2Properties.
setVisibility
(
String
visibility)
See the visibility property definition in CSS2.
void
CSS2Properties.
setVoiceFamily
(
String
voiceFamily)
See the voice-family property definition in CSS2.
void
CSS2Properties.
setVolume
(
String
volume)
See the volume property definition in CSS2.
void
CSS2Properties.
setWhiteSpace
(
String
whiteSpace)
See the white-space property definition in CSS2.
void
CSS2Properties.
setWidows
(
String
widows)
See the widows property definition in CSS2.
void
CSS2Properties.
setWidth
(
String
width)
See the width property definition in CSS2.
void
CSS2Properties.
setWordSpacing
(
String
wordSpacing)
See the word-spacing property definition in CSS2.
void
CSS2Properties.
setZIndex
(
String
zIndex)
See the z-index property definition in CSS2.
Uses of
String
in
org.w3c.dom.events
Methods in
org.w3c.dom.events
that return
String
Modifier and Type
Method
Description
String
MutationEvent.
getAttrName
()
attrName
indicates the name of the changed
Attr
node in a DOMAttrModified event.
String
MutationEvent.
getNewValue
()
newValue
indicates the new value of the
Attr
node in DOMAttrModified events, and of the
CharacterData
node in DOMCharacterDataModified events.
String
MutationEvent.
getPrevValue
()
prevValue
indicates the previous value of the
Attr
node in DOMAttrModified events, and of the
CharacterData
node in DOMCharacterDataModified events.
String
Event.
getType
()
The name of the event (case-insensitive).
Methods in
org.w3c.dom.events
with parameters of type
String
Modifier and Type
Method
Description
void
EventTarget.
addEventListener
(
String
type,
EventListener
listener,
 boolean useCapture)
This method allows the registration of event listeners on the event
 target.
Event
DocumentEvent.
createEvent
(
String
eventType)
void
Event.
initEvent
(
String
eventTypeArg,
 boolean canBubbleArg,
 boolean cancelableArg)
The
initEvent
method is used to initialize the value of an
Event
created through the
DocumentEvent
interface.
void
MouseEvent.
initMouseEvent
(
String
typeArg,
 boolean canBubbleArg,
 boolean cancelableArg,
AbstractView
viewArg,
 int detailArg,
 int screenXArg,
 int screenYArg,
 int clientXArg,
 int clientYArg,
 boolean ctrlKeyArg,
 boolean altKeyArg,
 boolean shiftKeyArg,
 boolean metaKeyArg,
 short buttonArg,
EventTarget
relatedTargetArg)
The
initMouseEvent
method is used to initialize the value
 of a
MouseEvent
created through the
DocumentEvent
interface.
void
MutationEvent.
initMutationEvent
(
String
typeArg,
 boolean canBubbleArg,
 boolean cancelableArg,
Node
relatedNodeArg,
String
prevValueArg,
String
newValueArg,
String
attrNameArg,
 short attrChangeArg)
The
initMutationEvent
method is used to initialize the
 value of a
MutationEvent
created through the
DocumentEvent
interface.
void
UIEvent.
initUIEvent
(
String
typeArg,
 boolean canBubbleArg,
 boolean cancelableArg,
AbstractView
viewArg,
 int detailArg)
The
initUIEvent
method is used to initialize the value of
 a
UIEvent
created through the
DocumentEvent
interface.
void
EventTarget.
removeEventListener
(
String
type,
EventListener
listener,
 boolean useCapture)
This method allows the removal of event listeners from the event
 target.
Constructors in
org.w3c.dom.events
with parameters of type
String
Modifier
Constructor
Description
EventException
(short code,
String
message)
Uses of
String
in
org.w3c.dom.html
Methods in
org.w3c.dom.html
that return
String
Modifier and Type
Method
Description
String
HTMLTableCellElement.
getAbbr
()
Abbreviation for header cells.
String
HTMLInputElement.
getAccept
()
A comma-separated list of content types that a server processing this
 form will handle correctly.
String
HTMLFormElement.
getAcceptCharset
()
List of character sets supported by the server.
String
HTMLAnchorElement.
getAccessKey
()
A single character access key to give access to the form control.
String
HTMLAreaElement.
getAccessKey
()
A single character access key to give access to the form control.
String
HTMLButtonElement.
getAccessKey
()
A single character access key to give access to the form control.
String
HTMLInputElement.
getAccessKey
()
A single character access key to give access to the form control.
String
HTMLLabelElement.
getAccessKey
()
A single character access key to give access to the form control.
String
HTMLLegendElement.
getAccessKey
()
A single character access key to give access to the form control.
String
HTMLTextAreaElement.
getAccessKey
()
A single character access key to give access to the form control.
String
HTMLFormElement.
getAction
()
Server-side form handler.
String
HTMLAppletElement.
getAlign
()
Aligns this object (vertically or horizontally)  with respect to its
 surrounding text.
String
HTMLDivElement.
getAlign
()
Horizontal text alignment.
String
HTMLHeadingElement.
getAlign
()
Horizontal text alignment.
String
HTMLHRElement.
getAlign
()
Align the rule on the page.
String
HTMLIFrameElement.
getAlign
()
Aligns this object (vertically or horizontally)  with respect to its
 surrounding text.
String
HTMLImageElement.
getAlign
()
Aligns this object (vertically or horizontally)  with respect to its
 surrounding text.
String
HTMLInputElement.
getAlign
()
Aligns this object (vertically or horizontally)  with respect to its
 surrounding text.
String
HTMLLegendElement.
getAlign
()
Text alignment relative to
FIELDSET
.
String
HTMLObjectElement.
getAlign
()
Aligns this object (vertically or horizontally)  with respect to its
 surrounding text.
String
HTMLParagraphElement.
getAlign
()
Horizontal text alignment.
String
HTMLTableCaptionElement.
getAlign
()
Caption alignment with respect to the table.
String
HTMLTableCellElement.
getAlign
()
Horizontal alignment of data in cell.
String
HTMLTableColElement.
getAlign
()
Horizontal alignment of cell data in column.
String
HTMLTableElement.
getAlign
()
Specifies the table's position with respect to the rest of the
 document.
String
HTMLTableRowElement.
getAlign
()
Horizontal alignment of data within cells of this row.
String
HTMLTableSectionElement.
getAlign
()
Horizontal alignment of data in cells.
String
HTMLBodyElement.
getALink
()
Color of active links (after mouse-button down, but before
 mouse-button up).
String
HTMLAppletElement.
getAlt
()
Alternate text for user agents not rendering the normal content of
 this element.
String
HTMLAreaElement.
getAlt
()
Alternate text for user agents not rendering the normal content of
 this element.
String
HTMLImageElement.
getAlt
()
Alternate text for user agents not rendering the normal content of
 this element.
String
HTMLInputElement.
getAlt
()
Alternate text for user agents not rendering the normal content of
 this element.
String
HTMLAppletElement.
getArchive
()
Comma-separated archive list.
String
HTMLObjectElement.
getArchive
()
Space-separated list of archives.
String
HTMLTableCellElement.
getAxis
()
Names group of related headers.
String
HTMLBodyElement.
getBackground
()
URI of the background texture tile image.
String
HTMLBodyElement.
getBgColor
()
Document background color.
String
HTMLTableCellElement.
getBgColor
()
Cell background color.
String
HTMLTableElement.
getBgColor
()
Cell background color.
String
HTMLTableRowElement.
getBgColor
()
Background color for rows.
String
HTMLImageElement.
getBorder
()
Width of border around image.
String
HTMLObjectElement.
getBorder
()
Width of border around the object.
String
HTMLTableElement.
getBorder
()
The width of the border around the table.
String
HTMLTableElement.
getCellPadding
()
Specifies the horizontal and vertical space between cell content and
 cell borders.
String
HTMLTableElement.
getCellSpacing
()
Specifies the horizontal and vertical separation between cells.
String
HTMLTableCellElement.
getCh
()
Alignment character for cells in a column.
String
HTMLTableColElement.
getCh
()
Alignment character for cells in a column.
String
HTMLTableRowElement.
getCh
()
Alignment character for cells in a column.
String
HTMLTableSectionElement.
getCh
()
Alignment character for cells in a column.
String
HTMLAnchorElement.
getCharset
()
The character encoding of the linked resource.
String
HTMLLinkElement.
getCharset
()
The character encoding of the resource being linked to.
String
HTMLScriptElement.
getCharset
()
The character encoding of the linked resource.
String
HTMLTableCellElement.
getChOff
()
Offset of alignment character.
String
HTMLTableColElement.
getChOff
()
Offset of alignment character.
String
HTMLTableRowElement.
getChOff
()
Offset of alignment character.
String
HTMLTableSectionElement.
getChOff
()
Offset of alignment character.
String
HTMLModElement.
getCite
()
A URI designating a document that describes the reason for the change.
String
HTMLQuoteElement.
getCite
()
A URI designating a source document or message.
String
HTMLElement.
getClassName
()
The class attribute of the element.
String
HTMLBRElement.
getClear
()
Control flow of text around floats.
String
HTMLAppletElement.
getCode
()
Applet class file.
String
HTMLObjectElement.
getCode
()
Applet class file.
String
HTMLAppletElement.
getCodeBase
()
Optional base URI for applet.
String
HTMLObjectElement.
getCodeBase
()
Base URI for
classid
,
data
, and
archive
attributes.
String
HTMLObjectElement.
getCodeType
()
Content type for data downloaded via
classid
attribute.
String
HTMLBaseFontElement.
getColor
()
Font color.
String
HTMLFontElement.
getColor
()
Font color.
String
HTMLFrameSetElement.
getCols
()
The number of columns of frames in the frameset.
String
HTMLMetaElement.
getContent
()
Associated information.
String
HTMLDocument.
getCookie
()
The cookies associated with this document.
String
HTMLAnchorElement.
getCoords
()
Comma-separated list of lengths, defining an active region geometry.
String
HTMLAreaElement.
getCoords
()
Comma-separated list of lengths, defining an active region geometry.
String
HTMLObjectElement.
getData
()
A URI specifying the location of the object's data.
String
HTMLModElement.
getDateTime
()
The date and time of the change.
String
HTMLInputElement.
getDefaultValue
()
When the
type
attribute of the element has the value
 "Text", "File" or "Password", this represents the HTML value attribute
 of the element.
String
HTMLTextAreaElement.
getDefaultValue
()
Represents the contents of the element.
String
HTMLElement.
getDir
()
Specifies the base direction of directionally neutral text and the
 directionality of tables.
String
HTMLDocument.
getDomain
()
The domain name of the server that served the document, or
null
if the server cannot be identified by a domain name.
String
HTMLFormElement.
getEnctype
()
The content type of the submitted form,  generally
 "application/x-www-form-urlencoded".
String
HTMLScriptElement.
getEvent
()
Reserved for future use.
String
HTMLBaseFontElement.
getFace
()
Font face identifier.
String
HTMLFontElement.
getFace
()
Font face identifier.
String
HTMLTableElement.
getFrame
()
Specifies which external table borders to render.
String
HTMLFrameElement.
getFrameBorder
()
Request frame borders.
String
HTMLIFrameElement.
getFrameBorder
()
Request frame borders.
String
HTMLTableCellElement.
getHeaders
()
List of
id
attribute values for header cells.
String
HTMLAppletElement.
getHeight
()
Override height.
String
HTMLIFrameElement.
getHeight
()
Frame height.
String
HTMLImageElement.
getHeight
()
Override height.
String
HTMLObjectElement.
getHeight
()
Override height.
String
HTMLTableCellElement.
getHeight
()
Cell height.
String
HTMLAnchorElement.
getHref
()
The URI of the linked resource.
String
HTMLAreaElement.
getHref
()
The URI of the linked resource.
String
HTMLBaseElement.
getHref
()
The base URI.
String
HTMLLinkElement.
getHref
()
The URI of the linked resource.
String
HTMLAnchorElement.
getHreflang
()
Language code of the linked resource.
String
HTMLLinkElement.
getHreflang
()
Language code of the linked resource.
String
HTMLAppletElement.
getHspace
()
Horizontal space to the left and right of this image, applet, or
 object.
String
HTMLImageElement.
getHspace
()
Horizontal space to the left and right of this image.
String
HTMLObjectElement.
getHspace
()
Horizontal space to the left and right of this image, applet, or
 object.
String
HTMLLabelElement.
getHtmlFor
()
This attribute links this label with another form control by
id
attribute.
String
HTMLScriptElement.
getHtmlFor
()
Reserved for future use.
String
HTMLMetaElement.
getHttpEquiv
()
HTTP response header name.
String
HTMLElement.
getId
()
The element's identifier.
String
HTMLOptGroupElement.
getLabel
()
Assigns a label to this option group.
String
HTMLOptionElement.
getLabel
()
Option label for use in hierarchical menus.
String
HTMLElement.
getLang
()
Language code defined in RFC 1766.
String
HTMLBodyElement.
getLink
()
Color of links that are not active and unvisited.
String
HTMLFrameElement.
getLongDesc
()
URI designating a long description of this image or frame.
String
HTMLIFrameElement.
getLongDesc
()
URI designating a long description of this image or frame.
String
HTMLImageElement.
getLongDesc
()
URI designating a long description of this image or frame.
String
HTMLImageElement.
getLowSrc
()
URI designating the source of this image, for low-resolution output.
String
HTMLFrameElement.
getMarginHeight
()
Frame margin height, in pixels.
String
HTMLIFrameElement.
getMarginHeight
()
Frame margin height, in pixels.
String
HTMLFrameElement.
getMarginWidth
()
Frame margin width, in pixels.
String
HTMLIFrameElement.
getMarginWidth
()
Frame margin width, in pixels.
String
HTMLLinkElement.
getMedia
()
Designed for use with one or more target media.
String
HTMLStyleElement.
getMedia
()
Designed for use with one or more target media.
String
HTMLFormElement.
getMethod
()
HTTP method used to submit form.
String
HTMLAnchorElement.
getName
()
Anchor name.
String
HTMLAppletElement.
getName
()
The name of the applet.
String
HTMLButtonElement.
getName
()
Form control or object name when submitted with a form.
String
HTMLFormElement.
getName
()
Names the form.
String
HTMLFrameElement.
getName
()
The frame name (object of the
target
attribute).
String
HTMLIFrameElement.
getName
()
The frame name (object of the
target
attribute).
String
HTMLImageElement.
getName
()
The name of the element (for backwards compatibility).
String
HTMLInputElement.
getName
()
Form control or object name when submitted with a form.
String
HTMLMapElement.
getName
()
Names the map (for use with
usemap
).
String
HTMLMetaElement.
getName
()
Meta information name.
String
HTMLObjectElement.
getName
()
Form control or object name when submitted with a form.
String
HTMLParamElement.
getName
()
The name of a run-time parameter.
String
HTMLSelectElement.
getName
()
Form control or object name when submitted with a form.
String
HTMLTextAreaElement.
getName
()
Form control or object name when submitted with a form.
String
HTMLAppletElement.
getObject
()
Serialized applet file.
String
HTMLHeadElement.
getProfile
()
URI designating a metadata profile.
String
HTMLIsIndexElement.
getPrompt
()
The prompt message.
String
HTMLDocument.
getReferrer
()
Returns the URI  of the page that linked to this page.
String
HTMLAnchorElement.
getRel
()
Forward link type.
String
HTMLLinkElement.
getRel
()
Forward link type.
String
HTMLAnchorElement.
getRev
()
Reverse link type.
String
HTMLLinkElement.
getRev
()
Reverse link type.
String
HTMLFrameSetElement.
getRows
()
The number of rows of frames in the frameset.
String
HTMLTableElement.
getRules
()
Specifies which internal table borders to render.
String
HTMLMetaElement.
getScheme
()
Select form of content.
String
HTMLTableCellElement.
getScope
()
Scope covered by header cells.
String
HTMLFrameElement.
getScrolling
()
Specify whether or not the frame should have scrollbars.
String
HTMLIFrameElement.
getScrolling
()
Specify whether or not the frame should have scrollbars.
String
HTMLAnchorElement.
getShape
()
The shape of the active area.
String
HTMLAreaElement.
getShape
()
The shape of the active area.
String
HTMLBaseFontElement.
getSize
()
Font size.
String
HTMLFontElement.
getSize
()
Font size.
String
HTMLHRElement.
getSize
()
The height of the rule.
String
HTMLInputElement.
getSize
()
Size information.
String
HTMLFrameElement.
getSrc
()
A URI designating the initial frame contents.
String
HTMLIFrameElement.
getSrc
()
A URI designating the initial frame contents.
String
HTMLImageElement.
getSrc
()
URI designating the source of this image.
String
HTMLInputElement.
getSrc
()
When the
type
attribute has the value "Image", this
 attribute specifies the location of the image to be used to decorate
 the graphical submit button.
String
HTMLScriptElement.
getSrc
()
URI designating an external script.
String
HTMLObjectElement.
getStandby
()
Message to render while loading the object.
String
HTMLTableElement.
getSummary
()
Description about the purpose or structure of a table.
String
HTMLAnchorElement.
getTarget
()
Frame to render the resource in.
String
HTMLAreaElement.
getTarget
()
Frame to render the resource in.
String
HTMLBaseElement.
getTarget
()
The default target frame.
String
HTMLFormElement.
getTarget
()
Frame to render the resource in.
String
HTMLLinkElement.
getTarget
()
Frame to render the resource in.
String
HTMLBodyElement.
getText
()
Document text color.
String
HTMLOptionElement.
getText
()
The text contained within the option element.
String
HTMLScriptElement.
getText
()
The script content of the element.
String
HTMLTitleElement.
getText
()
The specified title as a string.
String
HTMLDocument.
getTitle
()
The title of a document as specified by the
TITLE
element
 in the head of the document.
String
HTMLElement.
getTitle
()
The element's advisory title.
String
HTMLAnchorElement.
getType
()
Advisory content type.
String
HTMLButtonElement.
getType
()
The type of button.
String
HTMLInputElement.
getType
()
The type of control created.
String
HTMLLIElement.
getType
()
List item bullet style.
String
HTMLLinkElement.
getType
()
Advisory content type.
String
HTMLObjectElement.
getType
()
Content type for data downloaded via
data
attribute.
String
HTMLOListElement.
getType
()
Numbering style.
String
HTMLParamElement.
getType
()
Content type for the
value
attribute when
valuetype
has the value "ref".
String
HTMLScriptElement.
getType
()
The content type of the script language.
String
HTMLSelectElement.
getType
()
The type of this form control.
String
HTMLStyleElement.
getType
()
The content type pf the style sheet language.
String
HTMLTextAreaElement.
getType
()
The type of this form control.
String
HTMLUListElement.
getType
()
Bullet style.
String
HTMLDocument.
getURL
()
The complete URI  of the document.
String
HTMLImageElement.
getUseMap
()
Use client-side image map.
String
HTMLInputElement.
getUseMap
()
Use client-side image map.
String
HTMLObjectElement.
getUseMap
()
Use client-side image map.
String
HTMLTableCellElement.
getVAlign
()
Vertical alignment of data in cell.
String
HTMLTableColElement.
getVAlign
()
Vertical alignment of cell data in column.
String
HTMLTableRowElement.
getVAlign
()
Vertical alignment of data within cells of this row.
String
HTMLTableSectionElement.
getVAlign
()
Vertical alignment of data in cells.
String
HTMLButtonElement.
getValue
()
The current form control value.
String
HTMLInputElement.
getValue
()
When the
type
attribute of the element has the value
 "Text", "File" or "Password", this represents the current contents of
 the corresponding form control, in an interactive user agent.
String
HTMLOptionElement.
getValue
()
The current form control value.
String
HTMLParamElement.
getValue
()
The value of a run-time parameter.
String
HTMLSelectElement.
getValue
()
The current form control value.
String
HTMLTextAreaElement.
getValue
()
Represents the current contents of the corresponding form control, in
 an interactive user agent.
String
HTMLParamElement.
getValueType
()
Information about the meaning of the
value
attribute
 value.
String
HTMLHtmlElement.
getVersion
()
Version information about the document's DTD.
String
HTMLBodyElement.
getVLink
()
Color of links that have been visited by the user.
String
HTMLAppletElement.
getVspace
()
Vertical space above and below this image, applet, or object.
String
HTMLImageElement.
getVspace
()
Vertical space above and below this image.
String
HTMLObjectElement.
getVspace
()
Vertical space above and below this image, applet, or object.
String
HTMLAppletElement.
getWidth
()
Override width.
String
HTMLHRElement.
getWidth
()
The width of the rule.
String
HTMLIFrameElement.
getWidth
()
Frame width.
String
HTMLImageElement.
getWidth
()
Override width.
String
HTMLObjectElement.
getWidth
()
Override width.
String
HTMLTableCellElement.
getWidth
()
Cell width.
String
HTMLTableColElement.
getWidth
()
Default column width.
String
HTMLTableElement.
getWidth
()
Specifies the desired table width.
Methods in
org.w3c.dom.html
with parameters of type
String
Modifier and Type
Method
Description
HTMLDocument
HTMLDOMImplementation.
createHTMLDocument
(
String
title)
Creates an
HTMLDocument
object with the minimal tree made
 of the following elements:
HTML
,
HEAD
,
TITLE
, and
BODY
.
NodeList
HTMLDocument.
getElementsByName
(
String
elementName)
Returns the (possibly empty) collection of elements whose
name
value is given by
elementName
.
Node
HTMLCollection.
namedItem
(
String
name)
This method retrieves a
Node
using a name.
void
HTMLTableCellElement.
setAbbr
(
String
abbr)
void
HTMLInputElement.
setAccept
(
String
accept)
void
HTMLFormElement.
setAcceptCharset
(
String
acceptCharset)
void
HTMLAnchorElement.
setAccessKey
(
String
accessKey)
void
HTMLAreaElement.
setAccessKey
(
String
accessKey)
void
HTMLButtonElement.
setAccessKey
(
String
accessKey)
void
HTMLInputElement.
setAccessKey
(
String
accessKey)
void
HTMLLabelElement.
setAccessKey
(
String
accessKey)
void
HTMLLegendElement.
setAccessKey
(
String
accessKey)
void
HTMLTextAreaElement.
setAccessKey
(
String
accessKey)
void
HTMLFormElement.
setAction
(
String
action)
void
HTMLAppletElement.
setAlign
(
String
align)
void
HTMLDivElement.
setAlign
(
String
align)
void
HTMLHeadingElement.
setAlign
(
String
align)
void
HTMLHRElement.
setAlign
(
String
align)
void
HTMLIFrameElement.
setAlign
(
String
align)
void
HTMLImageElement.
setAlign
(
String
align)
void
HTMLInputElement.
setAlign
(
String
align)
void
HTMLLegendElement.
setAlign
(
String
align)
void
HTMLObjectElement.
setAlign
(
String
align)
void
HTMLParagraphElement.
setAlign
(
String
align)
void
HTMLTableCaptionElement.
setAlign
(
String
align)
void
HTMLTableCellElement.
setAlign
(
String
align)
void
HTMLTableColElement.
setAlign
(
String
align)
void
HTMLTableElement.
setAlign
(
String
align)
void
HTMLTableRowElement.
setAlign
(
String
align)
void
HTMLTableSectionElement.
setAlign
(
String
align)
void
HTMLBodyElement.
setALink
(
String
aLink)
void
HTMLAppletElement.
setAlt
(
String
alt)
void
HTMLAreaElement.
setAlt
(
String
alt)
void
HTMLImageElement.
setAlt
(
String
alt)
void
HTMLInputElement.
setAlt
(
String
alt)
void
HTMLAppletElement.
setArchive
(
String
archive)
void
HTMLObjectElement.
setArchive
(
String
archive)
void
HTMLTableCellElement.
setAxis
(
String
axis)
void
HTMLBodyElement.
setBackground
(
String
background)
void
HTMLBodyElement.
setBgColor
(
String
bgColor)
void
HTMLTableCellElement.
setBgColor
(
String
bgColor)
void
HTMLTableElement.
setBgColor
(
String
bgColor)
void
HTMLTableRowElement.
setBgColor
(
String
bgColor)
void
HTMLImageElement.
setBorder
(
String
border)
void
HTMLObjectElement.
setBorder
(
String
border)
void
HTMLTableElement.
setBorder
(
String
border)
void
HTMLTableElement.
setCellPadding
(
String
cellPadding)
void
HTMLTableElement.
setCellSpacing
(
String
cellSpacing)
void
HTMLTableCellElement.
setCh
(
String
ch)
void
HTMLTableColElement.
setCh
(
String
ch)
void
HTMLTableRowElement.
setCh
(
String
ch)
void
HTMLTableSectionElement.
setCh
(
String
ch)
void
HTMLAnchorElement.
setCharset
(
String
charset)
void
HTMLLinkElement.
setCharset
(
String
charset)
void
HTMLScriptElement.
setCharset
(
String
charset)
void
HTMLTableCellElement.
setChOff
(
String
chOff)
void
HTMLTableColElement.
setChOff
(
String
chOff)
void
HTMLTableRowElement.
setChOff
(
String
chOff)
void
HTMLTableSectionElement.
setChOff
(
String
chOff)
void
HTMLModElement.
setCite
(
String
cite)
void
HTMLQuoteElement.
setCite
(
String
cite)
void
HTMLElement.
setClassName
(
String
className)
void
HTMLBRElement.
setClear
(
String
clear)
void
HTMLAppletElement.
setCode
(
String
code)
void
HTMLObjectElement.
setCode
(
String
code)
void
HTMLAppletElement.
setCodeBase
(
String
codeBase)
void
HTMLObjectElement.
setCodeBase
(
String
codeBase)
void
HTMLObjectElement.
setCodeType
(
String
codeType)
void
HTMLBaseFontElement.
setColor
(
String
color)
void
HTMLFontElement.
setColor
(
String
color)
void
HTMLFrameSetElement.
setCols
(
String
cols)
void
HTMLMetaElement.
setContent
(
String
content)
void
HTMLDocument.
setCookie
(
String
cookie)
void
HTMLAnchorElement.
setCoords
(
String
coords)
void
HTMLAreaElement.
setCoords
(
String
coords)
void
HTMLObjectElement.
setData
(
String
data)
void
HTMLModElement.
setDateTime
(
String
dateTime)
void
HTMLInputElement.
setDefaultValue
(
String
defaultValue)
void
HTMLTextAreaElement.
setDefaultValue
(
String
defaultValue)
void
HTMLElement.
setDir
(
String
dir)
void
HTMLFormElement.
setEnctype
(
String
enctype)
void
HTMLScriptElement.
setEvent
(
String
event)
void
HTMLBaseFontElement.
setFace
(
String
face)
void
HTMLFontElement.
setFace
(
String
face)
void
HTMLTableElement.
setFrame
(
String
frame)
void
HTMLFrameElement.
setFrameBorder
(
String
frameBorder)
void
HTMLIFrameElement.
setFrameBorder
(
String
frameBorder)
void
HTMLTableCellElement.
setHeaders
(
String
headers)
void
HTMLAppletElement.
setHeight
(
String
height)
void
HTMLIFrameElement.
setHeight
(
String
height)
void
HTMLImageElement.
setHeight
(
String
height)
void
HTMLObjectElement.
setHeight
(
String
height)
void
HTMLTableCellElement.
setHeight
(
String
height)
void
HTMLAnchorElement.
setHref
(
String
href)
void
HTMLAreaElement.
setHref
(
String
href)
void
HTMLBaseElement.
setHref
(
String
href)
void
HTMLLinkElement.
setHref
(
String
href)
void
HTMLAnchorElement.
setHreflang
(
String
hreflang)
void
HTMLLinkElement.
setHreflang
(
String
hreflang)
void
HTMLAppletElement.
setHspace
(
String
hspace)
void
HTMLImageElement.
setHspace
(
String
hspace)
void
HTMLObjectElement.
setHspace
(
String
hspace)
void
HTMLLabelElement.
setHtmlFor
(
String
htmlFor)
void
HTMLScriptElement.
setHtmlFor
(
String
htmlFor)
void
HTMLMetaElement.
setHttpEquiv
(
String
httpEquiv)
void
HTMLElement.
setId
(
String
id)
void
HTMLOptGroupElement.
setLabel
(
String
label)
void
HTMLOptionElement.
setLabel
(
String
label)
void
HTMLElement.
setLang
(
String
lang)
void
HTMLBodyElement.
setLink
(
String
link)
void
HTMLFrameElement.
setLongDesc
(
String
longDesc)
void
HTMLIFrameElement.
setLongDesc
(
String
longDesc)
void
HTMLImageElement.
setLongDesc
(
String
longDesc)
void
HTMLImageElement.
setLowSrc
(
String
lowSrc)
void
HTMLFrameElement.
setMarginHeight
(
String
marginHeight)
void
HTMLIFrameElement.
setMarginHeight
(
String
marginHeight)
void
HTMLFrameElement.
setMarginWidth
(
String
marginWidth)
void
HTMLIFrameElement.
setMarginWidth
(
String
marginWidth)
void
HTMLLinkElement.
setMedia
(
String
media)
void
HTMLStyleElement.
setMedia
(
String
media)
void
HTMLFormElement.
setMethod
(
String
method)
void
HTMLAnchorElement.
setName
(
String
name)
void
HTMLAppletElement.
setName
(
String
name)
void
HTMLButtonElement.
setName
(
String
name)
void
HTMLFormElement.
setName
(
String
name)
void
HTMLFrameElement.
setName
(
String
name)
void
HTMLIFrameElement.
setName
(
String
name)
void
HTMLImageElement.
setName
(
String
name)
void
HTMLInputElement.
setName
(
String
name)
void
HTMLMapElement.
setName
(
String
name)
void
HTMLMetaElement.
setName
(
String
name)
void
HTMLObjectElement.
setName
(
String
name)
void
HTMLParamElement.
setName
(
String
name)
void
HTMLSelectElement.
setName
(
String
name)
void
HTMLTextAreaElement.
setName
(
String
name)
void
HTMLAppletElement.
setObject
(
String
object)
void
HTMLHeadElement.
setProfile
(
String
profile)
void
HTMLIsIndexElement.
setPrompt
(
String
prompt)
void
HTMLAnchorElement.
setRel
(
String
rel)
void
HTMLLinkElement.
setRel
(
String
rel)
void
HTMLAnchorElement.
setRev
(
String
rev)
void
HTMLLinkElement.
setRev
(
String
rev)
void
HTMLFrameSetElement.
setRows
(
String
rows)
void
HTMLTableElement.
setRules
(
String
rules)
void
HTMLMetaElement.
setScheme
(
String
scheme)
void
HTMLTableCellElement.
setScope
(
String
scope)
void
HTMLFrameElement.
setScrolling
(
String
scrolling)
void
HTMLIFrameElement.
setScrolling
(
String
scrolling)
void
HTMLAnchorElement.
setShape
(
String
shape)
void
HTMLAreaElement.
setShape
(
String
shape)
void
HTMLBaseFontElement.
setSize
(
String
size)
void
HTMLFontElement.
setSize
(
String
size)
void
HTMLHRElement.
setSize
(
String
size)
void
HTMLInputElement.
setSize
(
String
size)
void
HTMLFrameElement.
setSrc
(
String
src)
void
HTMLIFrameElement.
setSrc
(
String
src)
void
HTMLImageElement.
setSrc
(
String
src)
void
HTMLInputElement.
setSrc
(
String
src)
void
HTMLScriptElement.
setSrc
(
String
src)
void
HTMLObjectElement.
setStandby
(
String
standby)
void
HTMLTableElement.
setSummary
(
String
summary)
void
HTMLAnchorElement.
setTarget
(
String
target)
void
HTMLAreaElement.
setTarget
(
String
target)
void
HTMLBaseElement.
setTarget
(
String
target)
void
HTMLFormElement.
setTarget
(
String
target)
void
HTMLLinkElement.
setTarget
(
String
target)
void
HTMLBodyElement.
setText
(
String
text)
void
HTMLScriptElement.
setText
(
String
text)
void
HTMLTitleElement.
setText
(
String
text)
void
HTMLDocument.
setTitle
(
String
title)
void
HTMLElement.
setTitle
(
String
title)
void
HTMLAnchorElement.
setType
(
String
type)
void
HTMLLIElement.
setType
(
String
type)
void
HTMLLinkElement.
setType
(
String
type)
void
HTMLObjectElement.
setType
(
String
type)
void
HTMLOListElement.
setType
(
String
type)
void
HTMLParamElement.
setType
(
String
type)
void
HTMLScriptElement.
setType
(
String
type)
void
HTMLStyleElement.
setType
(
String
type)
void
HTMLUListElement.
setType
(
String
type)
void
HTMLImageElement.
setUseMap
(
String
useMap)
void
HTMLInputElement.
setUseMap
(
String
useMap)
void
HTMLObjectElement.
setUseMap
(
String
useMap)
void
HTMLTableCellElement.
setVAlign
(
String
vAlign)
void
HTMLTableColElement.
setVAlign
(
String
vAlign)
void
HTMLTableRowElement.
setVAlign
(
String
vAlign)
void
HTMLTableSectionElement.
setVAlign
(
String
vAlign)
void
HTMLButtonElement.
setValue
(
String
value)
void
HTMLInputElement.
setValue
(
String
value)
void
HTMLOptionElement.
setValue
(
String
value)
void
HTMLParamElement.
setValue
(
String
value)
void
HTMLSelectElement.
setValue
(
String
value)
void
HTMLTextAreaElement.
setValue
(
String
value)
void
HTMLParamElement.
setValueType
(
String
valueType)
void
HTMLHtmlElement.
setVersion
(
String
version)
void
HTMLBodyElement.
setVLink
(
String
vLink)
void
HTMLAppletElement.
setVspace
(
String
vspace)
void
HTMLImageElement.
setVspace
(
String
vspace)
void
HTMLObjectElement.
setVspace
(
String
vspace)
void
HTMLAppletElement.
setWidth
(
String
width)
void
HTMLHRElement.
setWidth
(
String
width)
void
HTMLIFrameElement.
setWidth
(
String
width)
void
HTMLImageElement.
setWidth
(
String
width)
void
HTMLObjectElement.
setWidth
(
String
width)
void
HTMLTableCellElement.
setWidth
(
String
width)
void
HTMLTableColElement.
setWidth
(
String
width)
void
HTMLTableElement.
setWidth
(
String
width)
void
HTMLDocument.
write
(
String
text)
Write a string of text to a document stream opened by
open()
.
void
HTMLDocument.
writeln
(
String
text)
Write a string of text followed by a newline character to a document
 stream opened by
open()
.
Uses of
String
in
org.w3c.dom.ls
Methods in
org.w3c.dom.ls
that return
String
Modifier and Type
Method
Description
String
LSInput.
getBaseURI
()
The base URI to be used (see section 5.1.4 in [
IETF RFC 2396
]) for
 resolving a relative
systemId
to an absolute URI.
String
LSInput.
getEncoding
()
The character encoding, if known.
String
LSOutput.
getEncoding
()
The character encoding to use for the output.
String
LSSerializer.
getNewLine
()
The end-of-line sequence of characters to be used in the XML being
 written out.
String
LSInput.
getPublicId
()
The public identifier for this input source.
String
LSInput.
getStringData
()
String data to parse.
String
LSInput.
getSystemId
()
The system identifier, a URI reference [
IETF RFC 2396
], for this
 input source.
String
LSOutput.
getSystemId
()
The system identifier, a URI reference [
IETF RFC 2396
], for this
 output destination.
String
LSSerializer.
writeToString
(
Node
nodeArg)
Serialize the specified node as described above in the general
 description of the
LSSerializer
interface.
Methods in
org.w3c.dom.ls
with parameters of type
String
Modifier and Type
Method
Description
LSParser
DOMImplementationLS.
createLSParser
(short mode,
String
schemaType)
Create a new
LSParser
.
Document
LSParser.
parseURI
(
String
uri)
Parse an XML document from a location identified by a URI reference
 [
IETF RFC 2396
].
LSInput
LSResourceResolver.
resolveResource
(
String
type,
String
namespaceURI,
String
publicId,
String
systemId,
String
baseURI)
Allow the application to resolve external resources.
void
LSInput.
setBaseURI
(
String
baseURI)
The base URI to be used (see section 5.1.4 in [
IETF RFC 2396
]) for
 resolving a relative
systemId
to an absolute URI.
void
LSInput.
setEncoding
(
String
encoding)
The character encoding, if known.
void
LSOutput.
setEncoding
(
String
encoding)
The character encoding to use for the output.
void
LSSerializer.
setNewLine
(
String
newLine)
The end-of-line sequence of characters to be used in the XML being
 written out.
void
LSInput.
setPublicId
(
String
publicId)
The public identifier for this input source.
void
LSInput.
setStringData
(
String
stringData)
String data to parse.
void
LSInput.
setSystemId
(
String
systemId)
The system identifier, a URI reference [
IETF RFC 2396
], for this
 input source.
void
LSOutput.
setSystemId
(
String
systemId)
The system identifier, a URI reference [
IETF RFC 2396
], for this
 output destination.
boolean
LSSerializer.
writeToURI
(
Node
nodeArg,
String
uri)
A convenience method that acts as if
LSSerializer.write
was called with a
LSOutput
with no encoding specified
 and
LSOutput.systemId
set to the
uri
argument.
Constructors in
org.w3c.dom.ls
with parameters of type
String
Modifier
Constructor
Description
LSException
(short code,
String
message)
Uses of
String
in
org.w3c.dom.ranges
Methods in
org.w3c.dom.ranges
that return
String
Modifier and Type
Method
Description
String
Range.
toString
()
Returns the contents of a Range as a string.
Constructors in
org.w3c.dom.ranges
with parameters of type
String
Modifier
Constructor
Description
RangeException
(short code,
String
message)
Uses of
String
in
org.w3c.dom.stylesheets
Methods in
org.w3c.dom.stylesheets
that return
String
Modifier and Type
Method
Description
String
StyleSheet.
getHref
()
If the style sheet is a linked style sheet, the value of its attribute
 is its location.
String
MediaList.
getMediaText
()
The parsable textual representation of the media list.
String
StyleSheet.
getTitle
()
The advisory title.
String
StyleSheet.
getType
()
This specifies the style sheet language for this style sheet.
String
MediaList.
item
(int index)
Returns the
index
th in the list.
Methods in
org.w3c.dom.stylesheets
with parameters of type
String
Modifier and Type
Method
Description
void
MediaList.
appendMedium
(
String
newMedium)
Adds the medium
newMedium
to the end of the list.
void
MediaList.
deleteMedium
(
String
oldMedium)
Deletes the medium indicated by
oldMedium
from the list.
void
MediaList.
setMediaText
(
String
mediaText)
The parsable textual representation of the media list.
Uses of
String
in
org.w3c.dom.xpath
Methods in
org.w3c.dom.xpath
that return
String
Modifier and Type
Method
Description
String
XPathResult.
getStringValue
()
The value of this string result.
String
XPathNSResolver.
lookupNamespaceURI
(
String
prefix)
Look up the namespace URI associated to the given namespace prefix.
Methods in
org.w3c.dom.xpath
with parameters of type
String
Modifier and Type
Method
Description
XPathExpression
XPathEvaluator.
createExpression
(
String
expression,
XPathNSResolver
resolver)
Creates a parsed XPath expression with resolved namespaces.
Object
XPathEvaluator.
evaluate
(
String
expression,
Node
contextNode,
XPathNSResolver
resolver,
 short type,
Object
result)
Evaluates an XPath expression string and returns a result of the
 specified type if possible.
String
XPathNSResolver.
lookupNamespaceURI
(
String
prefix)
Look up the namespace URI associated to the given namespace prefix.
Constructors in
org.w3c.dom.xpath
with parameters of type
String
Modifier
Constructor
Description
XPathException
(short code,
String
message)
Uses of
String
in
org.xml.sax
Methods in
org.xml.sax
that return
String
Modifier and Type
Method
Description
String
InputSource.
getEncoding
()
Get the character encoding for a byte stream or URI.
String
Attributes.
getLocalName
(int index)
Look up an attribute's local name by index.
String
SAXException.
getMessage
()
Return a detail message for this exception.
String
AttributeList.
getName
(int i)
Deprecated.
Return the name of an attribute in this list (by position).
String
InputSource.
getPublicId
()
Get the public identifier for this input source.
String
Locator.
getPublicId
()
Return the public identifier for the current document event.
String
SAXParseException.
getPublicId
()
Get the public identifier of the entity where the exception occurred.
String
Attributes.
getQName
(int index)
Look up an attribute's XML qualified (prefixed) name by index.
String
InputSource.
getSystemId
()
Get the system identifier for this input source.
String
Locator.
getSystemId
()
Return the system identifier for the current document event.
String
SAXParseException.
getSystemId
()
Get the system identifier of the entity where the exception occurred.
String
AttributeList.
getType
(int i)
Deprecated.
Return the type of an attribute in the list (by position).
String
AttributeList.
getType
(
String
name)
Deprecated.
Return the type of an attribute in the list (by name).
String
Attributes.
getType
(int index)
Look up an attribute's type by index.
String
Attributes.
getType
(
String
qName)
Look up an attribute's type by XML qualified (prefixed) name.
String
Attributes.
getType
(
String
uri,
String
localName)
Look up an attribute's type by Namespace name.
String
Attributes.
getURI
(int index)
Look up an attribute's Namespace URI by index.
String
AttributeList.
getValue
(int i)
Deprecated.
Return the value of an attribute in the list (by position).
String
AttributeList.
getValue
(
String
name)
Deprecated.
Return the value of an attribute in the list (by name).
String
Attributes.
getValue
(int index)
Look up an attribute's value by index.
String
Attributes.
getValue
(
String
qName)
Look up an attribute's value by XML qualified (prefixed) name.
String
Attributes.
getValue
(
String
uri,
String
localName)
Look up an attribute's value by Namespace name.
String
SAXException.
toString
()
Override toString to pick up any embedded exception.
String
SAXParseException.
toString
()
Override toString to provide more detailed error message.
Methods in
org.xml.sax
with parameters of type
String
Modifier and Type
Method
Description
default void
ContentHandler.
declaration
(
String
version,
String
encoding,
String
standalone)
Receives notification of the XML declaration.
void
ContentHandler.
endElement
(
String
uri,
String
localName,
String
qName)
Receive notification of the end of an element.
void
DocumentHandler.
endElement
(
String
name)
Deprecated.
Receive notification of the end of an element.
void
HandlerBase.
endElement
(
String
name)
Deprecated.
Receive notification of the end of an element.
void
ContentHandler.
endPrefixMapping
(
String
prefix)
End the scope of a prefix-URI mapping.
boolean
XMLReader.
getFeature
(
String
name)
Look up the value of a feature flag.
int
Attributes.
getIndex
(
String
qName)
Look up the index of an attribute by XML qualified (prefixed) name.
int
Attributes.
getIndex
(
String
uri,
String
localName)
Look up the index of an attribute by Namespace name.
Object
XMLReader.
getProperty
(
String
name)
Look up the value of a property.
String
AttributeList.
getType
(
String
name)
Deprecated.
Return the type of an attribute in the list (by name).
String
Attributes.
getType
(
String
qName)
Look up an attribute's type by XML qualified (prefixed) name.
String
Attributes.
getType
(
String
uri,
String
localName)
Look up an attribute's type by Namespace name.
String
AttributeList.
getValue
(
String
name)
Deprecated.
Return the value of an attribute in the list (by name).
String
Attributes.
getValue
(
String
qName)
Look up an attribute's value by XML qualified (prefixed) name.
String
Attributes.
getValue
(
String
uri,
String
localName)
Look up an attribute's value by Namespace name.
void
DTDHandler.
notationDecl
(
String
name,
String
publicId,
String
systemId)
Receive notification of a notation declaration event.
void
HandlerBase.
notationDecl
(
String
name,
String
publicId,
String
systemId)
Deprecated.
Receive notification of a notation declaration.
void
Parser.
parse
(
String
systemId)
Deprecated.
Parse an XML document from a system identifier (URI).
void
XMLReader.
parse
(
String
systemId)
Parse an XML document from a system identifier (URI).
void
ContentHandler.
processingInstruction
(
String
target,
String
data)
Receive notification of a processing instruction.
void
DocumentHandler.
processingInstruction
(
String
target,
String
data)
Deprecated.
Receive notification of a processing instruction.
void
HandlerBase.
processingInstruction
(
String
target,
String
data)
Deprecated.
Receive notification of a processing instruction.
InputSource
EntityResolver.
resolveEntity
(
String
publicId,
String
systemId)
Allow the application to resolve external entities.
InputSource
HandlerBase.
resolveEntity
(
String
publicId,
String
systemId)
Deprecated.
Resolve an external entity.
void
InputSource.
setEncoding
(
String
encoding)
Set the character encoding, if known.
void
XMLReader.
setFeature
(
String
name,
 boolean value)
Set the value of a feature flag.
void
XMLReader.
setProperty
(
String
name,
Object
value)
Set the value of a property.
void
InputSource.
setPublicId
(
String
publicId)
Set the public identifier for this input source.
void
InputSource.
setSystemId
(
String
systemId)
Set the system identifier for this input source.
void
ContentHandler.
skippedEntity
(
String
name)
Receive notification of a skipped entity.
void
ContentHandler.
startElement
(
String
uri,
String
localName,
String
qName,
Attributes
atts)
Receive notification of the beginning of an element.
void
DocumentHandler.
startElement
(
String
name,
AttributeList
atts)
Deprecated.
Receive notification of the beginning of an element.
void
HandlerBase.
startElement
(
String
name,
AttributeList
attributes)
Deprecated.
Receive notification of the start of an element.
void
ContentHandler.
startPrefixMapping
(
String
prefix,
String
uri)
Begin the scope of a prefix-URI Namespace mapping.
void
DTDHandler.
unparsedEntityDecl
(
String
name,
String
publicId,
String
systemId,
String
notationName)
Receive notification of an unparsed entity declaration event.
void
HandlerBase.
unparsedEntityDecl
(
String
name,
String
publicId,
String
systemId,
String
notationName)
Deprecated.
Receive notification of an unparsed entity declaration.
Constructors in
org.xml.sax
with parameters of type
String
Modifier
Constructor
Description
InputSource
(
String
systemId)
Create a new input source with a system identifier.
SAXException
(
String
message)
Create a new SAXException.
SAXException
(
String
message,
Exception
e)
Create a new SAXException from an existing exception.
SAXNotRecognizedException
(
String
message)
Construct a new exception with the given message.
SAXNotSupportedException
(
String
message)
Construct a new exception with the given message.
SAXParseException
(
String
message,
String
publicId,
String
systemId,
 int lineNumber,
 int columnNumber)
Create a new SAXParseException.
SAXParseException
(
String
message,
String
publicId,
String
systemId,
 int lineNumber,
 int columnNumber,
Exception
e)
Create a new SAXParseException with an embedded exception.
SAXParseException
(
String
message,
Locator
locator)
Create a new SAXParseException from a message and a Locator.
SAXParseException
(
String
message,
Locator
locator,
Exception
e)
Wrap an existing exception in a SAXParseException.
Uses of
String
in
org.xml.sax.ext
Methods in
org.xml.sax.ext
that return
String
Modifier and Type
Method
Description
String
Locator2.
getEncoding
()
Returns the name of the character encoding for the entity.
String
Locator2Impl.
getEncoding
()
Returns the current value of the encoding property.
String
Locator2.
getXMLVersion
()
Returns the version of XML used for the entity.
String
Locator2Impl.
getXMLVersion
()
Returns the current value of the version property.
Methods in
org.xml.sax.ext
with parameters of type
String
Modifier and Type
Method
Description
void
Attributes2Impl.
addAttribute
(
String
uri,
String
localName,
String
qName,
String
type,
String
value)
Add an attribute to the end of the list, setting its
 "specified" flag to true.
void
DeclHandler.
attributeDecl
(
String
eName,
String
aName,
String
type,
String
mode,
String
value)
Report an attribute type declaration.
void
DefaultHandler2.
attributeDecl
(
String
eName,
String
aName,
String
type,
String
mode,
String
value)
void
DeclHandler.
elementDecl
(
String
name,
String
model)
Report an element type declaration.
void
DefaultHandler2.
elementDecl
(
String
name,
String
model)
void
DefaultHandler2.
endEntity
(
String
name)
void
LexicalHandler.
endEntity
(
String
name)
Report the end of an entity.
void
DeclHandler.
externalEntityDecl
(
String
name,
String
publicId,
String
systemId)
Report a parsed external entity declaration.
void
DefaultHandler2.
externalEntityDecl
(
String
name,
String
publicId,
String
systemId)
InputSource
DefaultHandler2.
getExternalSubset
(
String
name,
String
baseURI)
Tells the parser that if no external subset has been declared
 in the document text, none should be used.
InputSource
EntityResolver2.
getExternalSubset
(
String
name,
String
baseURI)
Allows applications to provide an external subset for documents
 that don't explicitly define one.
void
DeclHandler.
internalEntityDecl
(
String
name,
String
value)
Report an internal entity declaration.
void
DefaultHandler2.
internalEntityDecl
(
String
name,
String
value)
boolean
Attributes2.
isDeclared
(
String
qName)
Returns false unless the attribute was declared in the DTD.
boolean
Attributes2.
isDeclared
(
String
uri,
String
localName)
Returns false unless the attribute was declared in the DTD.
boolean
Attributes2Impl.
isDeclared
(
String
qName)
Returns the current value of the attribute's "declared" flag.
boolean
Attributes2Impl.
isDeclared
(
String
uri,
String
localName)
Returns the current value of the attribute's "declared" flag.
boolean
Attributes2.
isSpecified
(
String
qName)
Returns true unless the attribute value was provided
 by DTD defaulting.
boolean
Attributes2.
isSpecified
(
String
uri,
String
localName)
Returns true unless the attribute value was provided
 by DTD defaulting.
boolean
Attributes2Impl.
isSpecified
(
String
qName)
Returns the current value of an attribute's "specified" flag.
boolean
Attributes2Impl.
isSpecified
(
String
uri,
String
localName)
Returns the current value of an attribute's "specified" flag.
InputSource
DefaultHandler2.
resolveEntity
(
String
publicId,
String
systemId)
Invokes
EntityResolver2.resolveEntity()
with null entity name and base URI.
InputSource
DefaultHandler2.
resolveEntity
(
String
name,
String
publicId,
String
baseURI,
String
systemId)
Tells the parser to resolve the systemId against the baseURI
 and read the entity text from that resulting absolute URI.
InputSource
EntityResolver2.
resolveEntity
(
String
name,
String
publicId,
String
baseURI,
String
systemId)
Allows applications to map references to external entities into input
 sources, or tell the parser it should use conventional URI resolution.
void
Locator2Impl.
setEncoding
(
String
encoding)
Assigns the current value of the encoding property.
void
Locator2Impl.
setXMLVersion
(
String
version)
Assigns the current value of the version property.
void
DefaultHandler2.
startDTD
(
String
name,
String
publicId,
String
systemId)
void
LexicalHandler.
startDTD
(
String
name,
String
publicId,
String
systemId)
Report the start of DTD declarations, if any.
void
DefaultHandler2.
startEntity
(
String
name)
void
LexicalHandler.
startEntity
(
String
name)
Report the beginning of some internal and external XML entities.
Uses of
String
in
org.xml.sax.helpers
Fields in
org.xml.sax.helpers
declared as
String
Modifier and Type
Field
Description
static final
String
NamespaceSupport.
NSDECL
The namespace declaration URI as a constant.
static final
String
NamespaceSupport.
XMLNS
The XML Namespace URI as a constant.
Methods in
org.xml.sax.helpers
that return
String
Modifier and Type
Method
Description
String
AttributesImpl.
getLocalName
(int index)
Return an attribute's local name.
String
AttributeListImpl.
getName
(int i)
Deprecated.
Get the name of an attribute (by position).
String
NamespaceSupport.
getPrefix
(
String
uri)
Return one of the prefixes mapped to a Namespace URI.
String
LocatorImpl.
getPublicId
()
Return the saved public identifier.
String
AttributesImpl.
getQName
(int index)
Return an attribute's qualified (prefixed) name.
String
LocatorImpl.
getSystemId
()
Return the saved system identifier.
String
AttributeListImpl.
getType
(int i)
Deprecated.
Get the type of an attribute (by position).
String
AttributeListImpl.
getType
(
String
name)
Deprecated.
Get the type of an attribute (by name).
String
AttributesImpl.
getType
(int index)
Return an attribute's type by index.
String
AttributesImpl.
getType
(
String
qName)
Look up an attribute's type by qualified (prefixed) name.
String
AttributesImpl.
getType
(
String
uri,
String
localName)
Look up an attribute's type by Namespace-qualified name.
String
AttributesImpl.
getURI
(int index)
Return an attribute's Namespace URI.
String
NamespaceSupport.
getURI
(
String
prefix)
Look up a prefix and get the currently-mapped Namespace URI.
String
AttributeListImpl.
getValue
(int i)
Deprecated.
Get the value of an attribute (by position).
String
AttributeListImpl.
getValue
(
String
name)
Deprecated.
Get the value of an attribute (by name).
String
AttributesImpl.
getValue
(int index)
Return an attribute's value by index.
String
AttributesImpl.
getValue
(
String
qName)
Look up an attribute's value by qualified (prefixed) name.
String
AttributesImpl.
getValue
(
String
uri,
String
localName)
Look up an attribute's value by Namespace-qualified name.
String
[]
NamespaceSupport.
processName
(
String
qName,
String
[] parts,
 boolean isAttribute)
Process a raw XML qualified name, after all declarations in the
 current context have been handled by
declarePrefix()
.
Methods in
org.xml.sax.helpers
that return types with arguments of type
String
Modifier and Type
Method
Description
Enumeration
<
String
>
NamespaceSupport.
getDeclaredPrefixes
()
Return an enumeration of all prefixes declared in this context.
Enumeration
<
String
>
NamespaceSupport.
getPrefixes
()
Return an enumeration of all prefixes whose declarations are
 active in the current context.
Enumeration
<
String
>
NamespaceSupport.
getPrefixes
(
String
uri)
Return an enumeration of all prefixes for a given URI whose
 declarations are active in the current context.
Methods in
org.xml.sax.helpers
with parameters of type
String
Modifier and Type
Method
Description
void
AttributeListImpl.
addAttribute
(
String
name,
String
type,
String
value)
Deprecated.
Add an attribute to an attribute list.
void
AttributesImpl.
addAttribute
(
String
uri,
String
localName,
String
qName,
String
type,
String
value)
Add an attribute to the end of the list.
static
XMLReader
XMLReaderFactory.
createXMLReader
(
String
className)
Deprecated.
Attempt to create an XML reader from a class name.
boolean
NamespaceSupport.
declarePrefix
(
String
prefix,
String
uri)
Declare a Namespace prefix.
void
DefaultHandler.
endElement
(
String
uri,
String
localName,
String
qName)
Receive notification of the end of an element.
void
ParserAdapter.
endElement
(
String
qName)
Adapter implementation method; do not call.
void
XMLFilterImpl.
endElement
(
String
uri,
String
localName,
String
qName)
Filter an end element event.
void
XMLReaderAdapter.
endElement
(
String
uri,
String
localName,
String
qName)
Adapt a SAX2 end element event.
void
DefaultHandler.
endPrefixMapping
(
String
prefix)
Receive notification of the end of a Namespace mapping.
void
XMLFilterImpl.
endPrefixMapping
(
String
prefix)
Filter an end Namespace prefix mapping event.
void
XMLReaderAdapter.
endPrefixMapping
(
String
prefix)
Adapt a SAX2 end prefix mapping event.
boolean
ParserAdapter.
getFeature
(
String
name)
Check a parser feature flag.
boolean
XMLFilterImpl.
getFeature
(
String
name)
Look up the value of a feature.
int
AttributesImpl.
getIndex
(
String
qName)
Look up an attribute's index by qualified (prefixed) name.
int
AttributesImpl.
getIndex
(
String
uri,
String
localName)
Look up an attribute's index by Namespace name.
String
NamespaceSupport.
getPrefix
(
String
uri)
Return one of the prefixes mapped to a Namespace URI.
Enumeration
<
String
>
NamespaceSupport.
getPrefixes
(
String
uri)
Return an enumeration of all prefixes for a given URI whose
 declarations are active in the current context.
Object
ParserAdapter.
getProperty
(
String
name)
Get a parser property.
Object
XMLFilterImpl.
getProperty
(
String
name)
Look up the value of a property.
String
AttributeListImpl.
getType
(
String
name)
Deprecated.
Get the type of an attribute (by name).
String
AttributesImpl.
getType
(
String
qName)
Look up an attribute's type by qualified (prefixed) name.
String
AttributesImpl.
getType
(
String
uri,
String
localName)
Look up an attribute's type by Namespace-qualified name.
String
NamespaceSupport.
getURI
(
String
prefix)
Look up a prefix and get the currently-mapped Namespace URI.
String
AttributeListImpl.
getValue
(
String
name)
Deprecated.
Get the value of an attribute (by name).
String
AttributesImpl.
getValue
(
String
qName)
Look up an attribute's value by qualified (prefixed) name.
String
AttributesImpl.
getValue
(
String
uri,
String
localName)
Look up an attribute's value by Namespace-qualified name.
static
Parser
ParserFactory.
makeParser
(
String
className)
Deprecated.
Create a new SAX parser object using the class name provided.
void
DefaultHandler.
notationDecl
(
String
name,
String
publicId,
String
systemId)
Receive notification of a notation declaration.
void
XMLFilterImpl.
notationDecl
(
String
name,
String
publicId,
String
systemId)
Filter a notation declaration event.
void
ParserAdapter.
parse
(
String
systemId)
Parse an XML document.
void
XMLFilterImpl.
parse
(
String
systemId)
Parse a document.
void
XMLReaderAdapter.
parse
(
String
systemId)
Parse the document.
void
DefaultHandler.
processingInstruction
(
String
target,
String
data)
Receive notification of a processing instruction.
void
ParserAdapter.
processingInstruction
(
String
target,
String
data)
Adapter implementation method; do not call.
void
XMLFilterImpl.
processingInstruction
(
String
target,
String
data)
Filter a processing instruction event.
void
XMLReaderAdapter.
processingInstruction
(
String
target,
String
data)
Adapt a SAX2 processing instruction event.
String
[]
NamespaceSupport.
processName
(
String
qName,
String
[] parts,
 boolean isAttribute)
Process a raw XML qualified name, after all declarations in the
 current context have been handled by
declarePrefix()
.
void
AttributeListImpl.
removeAttribute
(
String
name)
Deprecated.
Remove an attribute from the list.
InputSource
DefaultHandler.
resolveEntity
(
String
publicId,
String
systemId)
Resolve an external entity.
InputSource
XMLFilterImpl.
resolveEntity
(
String
publicId,
String
systemId)
Filter an external entity resolution.
void
AttributesImpl.
setAttribute
(int index,
String
uri,
String
localName,
String
qName,
String
type,
String
value)
Set an attribute in the list.
void
ParserAdapter.
setFeature
(
String
name,
 boolean value)
Set a feature flag for the parser.
void
XMLFilterImpl.
setFeature
(
String
name,
 boolean value)
Set the value of a feature.
void
AttributesImpl.
setLocalName
(int index,
String
localName)
Set the local name of a specific attribute.
void
ParserAdapter.
setProperty
(
String
name,
Object
value)
Set a parser property.
void
XMLFilterImpl.
setProperty
(
String
name,
Object
value)
Set the value of a property.
void
LocatorImpl.
setPublicId
(
String
publicId)
Set the public identifier for this locator.
void
AttributesImpl.
setQName
(int index,
String
qName)
Set the qualified name of a specific attribute.
void
LocatorImpl.
setSystemId
(
String
systemId)
Set the system identifier for this locator.
void
AttributesImpl.
setType
(int index,
String
type)
Set the type of a specific attribute.
void
AttributesImpl.
setURI
(int index,
String
uri)
Set the Namespace URI of a specific attribute.
void
AttributesImpl.
setValue
(int index,
String
value)
Set the value of a specific attribute.
void
DefaultHandler.
skippedEntity
(
String
name)
Receive notification of a skipped entity.
void
XMLFilterImpl.
skippedEntity
(
String
name)
Filter a skipped entity event.
void
XMLReaderAdapter.
skippedEntity
(
String
name)
Adapt a SAX2 skipped entity event.
void
DefaultHandler.
startElement
(
String
uri,
String
localName,
String
qName,
Attributes
attributes)
Receive notification of the start of an element.
void
ParserAdapter.
startElement
(
String
qName,
AttributeList
qAtts)
Adapter implementation method; do not call.
void
XMLFilterImpl.
startElement
(
String
uri,
String
localName,
String
qName,
Attributes
atts)
Filter a start element event.
void
XMLReaderAdapter.
startElement
(
String
uri,
String
localName,
String
qName,
Attributes
atts)
Adapt a SAX2 start element event.
void
DefaultHandler.
startPrefixMapping
(
String
prefix,
String
uri)
Receive notification of the start of a Namespace mapping.
void
XMLFilterImpl.
startPrefixMapping
(
String
prefix,
String
uri)
Filter a start Namespace prefix mapping event.
void
XMLReaderAdapter.
startPrefixMapping
(
String
prefix,
String
uri)
Adapt a SAX2 start prefix mapping event.
void
DefaultHandler.
unparsedEntityDecl
(
String
name,
String
publicId,
String
systemId,
String
notationName)
Receive notification of an unparsed entity declaration.
void
XMLFilterImpl.
unparsedEntityDecl
(
String
name,
String
publicId,
String
systemId,
String
notationName)
Filter an unparsed entity declaration event.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.