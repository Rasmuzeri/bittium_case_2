Uses of Annotation Interface java.lang.Override (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Annotation Interface
java.lang.Override
Packages that use
Override
Package
Description
com.sun.net.httpserver
Provides a simple high-level Http server API, which can be used to build
   embedded HTTP servers.
com.sun.nio.sctp
A Java API for Stream Control Transport Protocol.
com.sun.security.auth
Provides implementations of
Principal
.
com.sun.security.auth.login
Provides an implementation of
Configuration
.
com.sun.source.doctree
Provides interfaces to represent documentation comments as abstract syntax
 trees (AST).
com.sun.source.util
Provides utilities for operations on abstract syntax trees (AST).
java.applet
Provides the classes necessary to create an applet and the classes an applet
 uses to communicate with its applet context.
java.awt
Contains all of the classes for creating user interfaces and for painting
 graphics and images.
java.awt.datatransfer
Provides interfaces and classes for transferring data between and within
 applications.
java.awt.geom
Provides the Java 2D classes for defining and performing operations on
 objects related to two-dimensional geometry.
java.awt.image
Provides classes for creating and modifying images.
java.beans
Contains classes related to developing
beans
-- components based on
 the JavaBeans architecture.
java.io
Provides for system input and output through data streams,
 serialization and the file system.
java.lang
Provides classes that are fundamental to the design of the Java
 programming language.
java.lang.constant
Classes and interfaces to represent
nominal descriptors
for run-time
 entities such as classes or method handles, and classfile entities such as
 constant pool entries or
invokedynamic
call sites.
java.lang.foreign
Provides low-level access to memory and functions outside the Java runtime.
java.lang.invoke
The
java.lang.invoke
package provides low-level primitives for interacting
 with the Java Virtual Machine.
java.lang.module
Classes to support module descriptors and creating configurations of modules
 by means of resolution and service binding.
java.lang.ref
Provides reference-object classes, which support a limited degree
 of interaction with the garbage collector.
java.lang.reflect
Provides classes and interfaces for obtaining reflective information about
 classes and objects.
java.math
Provides classes for performing arbitrary-precision integer
 arithmetic (
BigInteger
) and arbitrary-precision decimal
 arithmetic (
BigDecimal
).
java.net
Provides the classes for implementing networking applications.
java.net.http
HTTP Client and WebSocket APIs
java.nio
Defines buffers, which are containers for data, and provides an
 overview of the other NIO packages.
java.nio.channels
Defines channels, which represent connections to entities that are capable of
 performing I/O operations, such as files and sockets; defines selectors, for
 multiplexed, non-blocking I/O operations.
java.nio.file
Defines interfaces and classes for the Java virtual machine to access files,
 file attributes, and file systems.
java.nio.file.attribute
Interfaces and classes providing access to file and file system attributes.
java.rmi.server
Provides classes and interfaces for supporting the server side of RMI.
java.security
Provides the classes and interfaces for the security framework.
java.security.cert
Provides classes and interfaces for parsing and managing
 certificates, certificate revocation lists (CRLs), and
 certification paths.
java.sql
Provides the API for accessing and processing data stored in a
 data source (usually a relational database) using the
 Java programming language.
java.text
Provides classes and interfaces for handling text, dates, numbers,
 and messages in a manner independent of natural languages.
java.time
The main API for dates, times, instants, and durations.
java.time.chrono
Generic API for calendar systems other than the default ISO.
java.time.format
Provides classes to print and parse dates and times.
java.time.temporal
Access to date and time using fields and units, and date time adjusters.
java.time.zone
Support for time-zones and their rules.
java.util
Contains the collections framework, some internationalization support classes,
 a service loader, properties, random number generation, string parsing
 and scanning classes, base64 encoding and decoding, a bit array, and
 several miscellaneous utility classes.
java.util.concurrent
Utility classes commonly useful in concurrent programming.
java.util.logging
Provides the classes and interfaces of
 the Java 2 platform's core logging facilities.
java.util.regex
Classes for matching character sequences against patterns specified
 by regular expressions.
java.util.spi
Service provider classes for the classes in the java.util package.
java.util.stream
Classes to support functional-style operations on streams of elements, such
 as map-reduce transformations on collections.
java.util.zip
Provides classes for reading and writing the standard ZIP and GZIP file
 formats.
javax.annotation.processing
Facilities for declaring annotation processors and for
 allowing annotation processors to communicate with an annotation processing
 tool environment.
javax.crypto
Provides the classes and interfaces for cryptographic
 operations.
javax.imageio.plugins.tiff
Public classes used by the built-in TIFF plug-ins.
javax.lang.model.element
Interfaces used to model elements of the Java programming language.
javax.lang.model.type
Interfaces used to model Java programming language types.
javax.lang.model.util
Utilities to assist in the processing of
program elements
and
types
.
javax.management
Provides the core classes for the Java Management Extensions.
javax.management.modelmbean
Provides the definition of the ModelMBean classes.
javax.management.monitor
Provides the definition of the monitor classes.
javax.management.openmbean
Provides the open data types and Open MBean descriptor classes.
javax.management.remote
Interfaces for remote access to
        JMX MBean servers.
javax.management.remote.rmi
The RMI connector is a connector for the JMX Remote API that
      uses RMI to transmit client requests to a remote MBean server.
javax.net.ssl
Provides classes for the secure socket package.
javax.security.auth
This package provides a framework for authentication and
 authorization.
javax.security.auth.kerberos
This package contains utility classes related to the Kerberos network
 authentication protocol.
javax.sound.midi
Provides interfaces and classes for I/O, sequencing, and synthesis of MIDI
 (Musical Instrument Digital Interface) data.
javax.sound.sampled
Provides interfaces and classes for capture, processing, and playback of
 sampled audio data.
javax.sql
Provides the API for server side data source access and processing from
 the Java programming language.
javax.swing
Provides a set of "lightweight" (all-Java language) components
 that, to the maximum degree possible, work the same on all platforms.
javax.swing.border
Provides classes and interface for drawing specialized borders around a Swing
 component.
javax.swing.event
Provides for events fired by Swing components.
javax.swing.plaf.basic
Provides user interface objects built according to the Basic look and feel.
javax.swing.plaf.metal
Provides user interface objects built according to the Java look and feel
 (once codenamed
Metal
), which is the default look and feel.
javax.swing.plaf.multi
Provides user interface objects that combine two or more look and feels.
javax.swing.plaf.nimbus
Provides user interface objects built according to the cross-platform Nimbus
 look and feel.
javax.swing.plaf.synth
Synth is a skinnable look and feel in which all painting is delegated.
javax.swing.table
Provides classes and interfaces for dealing with
javax.swing.JTable
.
javax.swing.text
Provides classes and interfaces that deal with editable and noneditable text
 components.
javax.tools
Provides interfaces for tools which can be invoked from a program,
 for example, compilers.
javax.xml.catalog
Provides the classes for implementing
XML Catalogs OASIS Standard V1.1, 7 October 2005
.
javax.xml.datatype
Defines XML/Java Type Mappings.
javax.xml.parsers
Provides the classes for processing XML documents with a SAX (Simple API for XML)
 parser or a DOM (Document Object Model) Document builder.
javax.xml.stream
Defines interfaces and classes for the Streaming API for XML (StAX).
javax.xml.transform
Defines the generic APIs for processing transformation instructions,
 and performing a transformation from source to result.
javax.xml.transform.dom
Provides DOM specific transformation classes.
javax.xml.transform.sax
Provides SAX specific transformation classes.
javax.xml.transform.stax
Provides StAX specific transformation classes.
javax.xml.transform.stream
Provides stream and URI specific transformation classes.
javax.xml.xpath
Provides an
object-model neutral
API for the
 evaluation of XPath expressions and access to the evaluation
 environment.
jdk.dynalink
Contains interfaces and classes that are used to link an
invokedynamic
call site.
jdk.dynalink.beans
Contains the linker for ordinary Java objects.
jdk.dynalink.linker.support
Contains classes that make it more convenient for language runtimes to
 implement their own language-specific object models and type conversions
 by providing basic implementations of some classes as well as various
 utilities.
jdk.dynalink.support
Contains classes that make using Dynalink more convenient by providing
 basic implementations of some classes as well as various utilities.
jdk.incubator.vector
Incubating Feature.
Will be removed in a future release.
jdk.javadoc.doclet
The Doclet API provides an environment which, in conjunction with
 the Language Model API and Compiler Tree API, allows clients
 to inspect the source-level structures of programs and
 libraries, including API comments embedded in the source.
jdk.jfr
This package provides classes to create events and control Flight Recorder.
jdk.jfr.consumer
This package contains classes for consuming Flight Recorder data.
jdk.jshell
Provides interfaces for creating tools, such as a Read-Eval-Print Loop (REPL),
 which interactively evaluate "snippets" of Java programming language code.
jdk.jshell.execution
Provides implementation support for building JShell execution engines.
jdk.jshell.spi
Defines the Service Provider Interface for pluggable JShell execution engines.
jdk.management.jfr
This package contains classes to control and monitor Flight Recorder over Java Management Extensions (JMX).
org.xml.sax.helpers
Provides helper classes, including
 support for bootstrapping SAX-based applications.
Uses of
Override
in
com.sun.net.httpserver
Methods in
com.sun.net.httpserver
with annotations of type
Override
Modifier and Type
Method
Description
void
Headers.
clear
()
boolean
Headers.
containsKey
(
Object
key)
boolean
Headers.
containsValue
(
Object
value)
Set
<
Map.Entry
<
String
,
List
<
String
>>>
Headers.
entrySet
()
boolean
Headers.
equals
(
Object
o)
List
<
String
>
Headers.
get
(
Object
key)
int
Headers.
hashCode
()
boolean
Headers.
isEmpty
()
Set
<
String
>
Headers.
keySet
()
List
<
String
>
Headers.
put
(
String
key,
List
<
String
> value)
void
Headers.
putAll
(
Map
<? extends
String
,
? extends
List
<
String
>> t)
List
<
String
>
Headers.
remove
(
Object
key)
int
Headers.
size
()
Collection
<
List
<
String
>>
Headers.
values
()
Uses of
Override
in
com.sun.nio.sctp
Methods in
com.sun.nio.sctp
with annotations of type
Override
Modifier and Type
Method
Description
abstract
Association
SendFailedNotification.
association
()
Returns the association that this notification is applicable to.
boolean
SctpStandardSocketOptions.InitMaxStreams.
equals
(
Object
obj)
Returns true if the specified object is another
InitMaxStreams
instance with the same number of in and out bound streams.
HandlerResult
AbstractNotificationHandler.
handleNotification
(
Notification
notification,
T
attachment)
Invoked when an implementation specific notification is received from the
 SCTP stack.
int
SctpStandardSocketOptions.InitMaxStreams.
hashCode
()
Returns a hash code value for this init max streams.
String
SctpStandardSocketOptions.InitMaxStreams.
toString
()
Returns a string representation of this init max streams, including
 the maximum in and out bound streams.
final int
SctpChannel.
validOps
()
Returns an operation set identifying this channel's supported operations.
final int
SctpMultiChannel.
validOps
()
Returns an operation set identifying this channel's supported operations.
final int
SctpServerChannel.
validOps
()
Returns an operation set identifying this channel's supported
 operations.
Uses of
Override
in
com.sun.security.auth
Methods in
com.sun.security.auth
with annotations of type
Override
Modifier and Type
Method
Description
int
NTNumericCredential.
hashCode
()
Return a hash code for this
NTNumericCredential
.
Uses of
Override
in
com.sun.security.auth.login
Methods in
com.sun.security.auth.login
with annotations of type
Override
Modifier and Type
Method
Description
AppConfigurationEntry
[]
ConfigFile.
getAppConfigurationEntry
(
String
applicationName)
Retrieve an entry from the
Configuration
using an application
 name as an index.
void
ConfigFile.
refresh
()
Refresh and reload the
Configuration
by re-reading all of the
 login configurations.
Uses of
Override
in
com.sun.source.doctree
Methods in
com.sun.source.doctree
with annotations of type
Override
Modifier and Type
Method
Description
String
EscapeTree.
getBody
()
Returns the text.
Uses of
Override
in
com.sun.source.util
Methods in
com.sun.source.util
with annotations of type
Override
Modifier and Type
Method
Description
Iterator
<
DocTree
>
DocTreePath.
iterator
()
Iterator
<
Tree
>
TreePath.
iterator
()
Iterates from leaves to root.
R
DocTreePathScanner.
scan
(
DocTree
tree,
P
p)
Scans a single node.
R
TreePathScanner.
scan
(
Tree
tree,
P
p)
Scans a single node.
R
SimpleTreeVisitor.
visitAnnotatedType
(
AnnotatedTypeTree
node,
P
p)
Visits an
AnnotatedTypeTree
node.
R
TreeScanner.
visitAnnotatedType
(
AnnotatedTypeTree
node,
P
p)
Visits an
AnnotatedTypeTree
node.
R
SimpleTreeVisitor.
visitAnnotation
(
AnnotationTree
node,
P
p)
Visits an
AnnotatedTree
node.
R
TreeScanner.
visitAnnotation
(
AnnotationTree
node,
P
p)
Visits an
AnnotatedTree
node.
R
SimpleTreeVisitor.
visitAnyPattern
(
AnyPatternTree
PREVIEW
node,
P
p)
Preview.
Visits a
AnyPatternTree
node.
R
TreeScanner.
visitAnyPattern
(
AnyPatternTree
PREVIEW
node,
P
p)
Visits a
AnyPatternTree
node.
R
SimpleTreeVisitor.
visitArrayAccess
(
ArrayAccessTree
node,
P
p)
Visits an
ArrayAccessTree
node.
R
TreeScanner.
visitArrayAccess
(
ArrayAccessTree
node,
P
p)
Visits an
ArrayAccessTree
node.
R
SimpleTreeVisitor.
visitArrayType
(
ArrayTypeTree
node,
P
p)
Visits an
ArrayTypeTree
node.
R
TreeScanner.
visitArrayType
(
ArrayTypeTree
node,
P
p)
Visits an
ArrayTypeTree
node.
R
SimpleTreeVisitor.
visitAssert
(
AssertTree
node,
P
p)
Visits an
AssertTree
node.
R
TreeScanner.
visitAssert
(
AssertTree
node,
P
p)
Visits an
AssertTree
node.
R
SimpleTreeVisitor.
visitAssignment
(
AssignmentTree
node,
P
p)
Visits an
AssignmentTree
node.
R
TreeScanner.
visitAssignment
(
AssignmentTree
node,
P
p)
Visits an
AssignmentTree
node.
R
DocTreeScanner.
visitAttribute
(
AttributeTree
node,
P
p)
Visits an
AttributeTree
node.
R
SimpleDocTreeVisitor.
visitAttribute
(
AttributeTree
node,
P
p)
Visits an
AttributeTree
node.
R
DocTreeScanner.
visitAuthor
(
AuthorTree
node,
P
p)
Visits an
AuthorTree
node.
R
SimpleDocTreeVisitor.
visitAuthor
(
AuthorTree
node,
P
p)
Visits an
AuthorTree
node.
R
SimpleTreeVisitor.
visitBinary
(
BinaryTree
node,
P
p)
Visits a
BinaryTree
node.
R
TreeScanner.
visitBinary
(
BinaryTree
node,
P
p)
Visits a
BinaryTree
node.
R
SimpleTreeVisitor.
visitBindingPattern
(
BindingPatternTree
node,
P
p)
Visits a
BindingPatternTree
node.
R
TreeScanner.
visitBindingPattern
(
BindingPatternTree
node,
P
p)
Visits a
BindingPatternTree
node.
R
SimpleTreeVisitor.
visitBlock
(
BlockTree
node,
P
p)
Visits a
BlockTree
node.
R
TreeScanner.
visitBlock
(
BlockTree
node,
P
p)
Visits a
BlockTree
node.
R
SimpleTreeVisitor.
visitBreak
(
BreakTree
node,
P
p)
Visits a
BreakTree
node.
R
TreeScanner.
visitBreak
(
BreakTree
node,
P
p)
Visits a
BreakTree
node.
R
SimpleTreeVisitor.
visitCase
(
CaseTree
node,
P
p)
Visits a
CaseTree
node.
R
TreeScanner.
visitCase
(
CaseTree
node,
P
p)
Visits a
CaseTree
node.
R
SimpleTreeVisitor.
visitCatch
(
CatchTree
node,
P
p)
Visits a
CatchTree
node.
R
TreeScanner.
visitCatch
(
CatchTree
node,
P
p)
Visits a
CatchTree
node.
R
SimpleTreeVisitor.
visitClass
(
ClassTree
node,
P
p)
Visits a
ClassTree
node.
R
TreeScanner.
visitClass
(
ClassTree
node,
P
p)
Visits a
ClassTree
node.
R
DocTreeScanner.
visitComment
(
CommentTree
node,
P
p)
Visits a
CommentTree
node.
R
SimpleDocTreeVisitor.
visitComment
(
CommentTree
node,
P
p)
Visits a
CommentTree
node.
R
SimpleTreeVisitor.
visitCompilationUnit
(
CompilationUnitTree
node,
P
p)
Visits a
CompilationUnitTree
node.
R
TreeScanner.
visitCompilationUnit
(
CompilationUnitTree
node,
P
p)
Visits a
CompilationUnitTree
node.
R
SimpleTreeVisitor.
visitCompoundAssignment
(
CompoundAssignmentTree
node,
P
p)
Visits a
CompoundAssignmentTree
node.
R
TreeScanner.
visitCompoundAssignment
(
CompoundAssignmentTree
node,
P
p)
Visits a
CompoundAssignmentTree
node.
R
SimpleTreeVisitor.
visitConditionalExpression
(
ConditionalExpressionTree
node,
P
p)
Visits a
ConditionalExpressionTree
node.
R
TreeScanner.
visitConditionalExpression
(
ConditionalExpressionTree
node,
P
p)
Visits a
ConditionalExpressionTree
node.
R
SimpleTreeVisitor.
visitConstantCaseLabel
(
ConstantCaseLabelTree
node,
P
p)
Visits a
ConstantCaseLabelTree
node.
R
TreeScanner.
visitConstantCaseLabel
(
ConstantCaseLabelTree
node,
P
p)
Visits a
ConstantCaseLabelTree
node.
R
SimpleTreeVisitor.
visitContinue
(
ContinueTree
node,
P
p)
Visits a
ContinueTree
node.
R
TreeScanner.
visitContinue
(
ContinueTree
node,
P
p)
Visits a
ContinueTree
node.
R
SimpleTreeVisitor.
visitDeconstructionPattern
(
DeconstructionPatternTree
node,
P
p)
Visits a
DeconstructionPatternTree
node.
R
TreeScanner.
visitDeconstructionPattern
(
DeconstructionPatternTree
node,
P
p)
Visits a
DeconstructionPatternTree
node.
R
SimpleTreeVisitor.
visitDefaultCaseLabel
(
DefaultCaseLabelTree
node,
P
p)
Visits a
DefaultCaseLabelTree
node.
R
TreeScanner.
visitDefaultCaseLabel
(
DefaultCaseLabelTree
node,
P
p)
Visits a
DefaultCaseLabelTree
node.
R
DocTreeScanner.
visitDeprecated
(
DeprecatedTree
node,
P
p)
Visits a
DeprecatedTree
node.
R
SimpleDocTreeVisitor.
visitDeprecated
(
DeprecatedTree
node,
P
p)
Visits a
DeprecatedTree
node.
R
DocTreeScanner.
visitDocComment
(
DocCommentTree
node,
P
p)
Visits a
DocCommentTree
node.
R
SimpleDocTreeVisitor.
visitDocComment
(
DocCommentTree
node,
P
p)
Visits a
DocCommentTree
node.
R
DocTreeScanner.
visitDocRoot
(
DocRootTree
node,
P
p)
Visits a
DocRootTree
node.
R
SimpleDocTreeVisitor.
visitDocRoot
(
DocRootTree
node,
P
p)
Visits a
DocRootTree
node.
R
DocTreeScanner.
visitDocType
(
DocTypeTree
node,
P
p)
Visits a
DocTypeTree
node.
R
SimpleDocTreeVisitor.
visitDocType
(
DocTypeTree
node,
P
p)
Visits a
DocTypeTree
node.
R
SimpleTreeVisitor.
visitDoWhileLoop
(
DoWhileLoopTree
node,
P
p)
Visits a
DoWhileTree
node.
R
TreeScanner.
visitDoWhileLoop
(
DoWhileLoopTree
node,
P
p)
Visits a
DoWhileTree
node.
R
SimpleTreeVisitor.
visitEmptyStatement
(
EmptyStatementTree
node,
P
p)
Visits an
EmptyStatementTree
node.
R
TreeScanner.
visitEmptyStatement
(
EmptyStatementTree
node,
P
p)
Visits an
EmptyStatementTree
node.
R
DocTreeScanner.
visitEndElement
(
EndElementTree
node,
P
p)
Visits an
EndElementTree
node.
R
SimpleDocTreeVisitor.
visitEndElement
(
EndElementTree
node,
P
p)
Visits an
EndElementTree
node.
R
SimpleTreeVisitor.
visitEnhancedForLoop
(
EnhancedForLoopTree
node,
P
p)
Visits an
EnhancedForLoopTree
node.
R
TreeScanner.
visitEnhancedForLoop
(
EnhancedForLoopTree
node,
P
p)
Visits an
EnhancedForLoopTree
node.
R
DocTreeScanner.
visitEntity
(
EntityTree
node,
P
p)
Visits an
EntityTree
node.
R
SimpleDocTreeVisitor.
visitEntity
(
EntityTree
node,
P
p)
Visits an
EntityTree
node.
R
DocTreeScanner.
visitErroneous
(
ErroneousTree
node,
P
p)
Visits an
ErroneousTree
node.
R
SimpleDocTreeVisitor.
visitErroneous
(
ErroneousTree
node,
P
p)
Visits an
ErroneousTree
node.
R
SimpleTreeVisitor.
visitErroneous
(
ErroneousTree
node,
P
p)
Visits an
ErroneousTree
node.
R
TreeScanner.
visitErroneous
(
ErroneousTree
node,
P
p)
Visits an
ErroneousTree
node.
R
DocTreeScanner.
visitEscape
(
EscapeTree
node,
P
p)
Visits an
EscapeTree
node.
R
SimpleDocTreeVisitor.
visitEscape
(
EscapeTree
node,
P
p)
Visits an
EscapeTree
node.
R
SimpleTreeVisitor.
visitExports
(
ExportsTree
node,
P
p)
Visits an
ExportsTree
node.
R
TreeScanner.
visitExports
(
ExportsTree
node,
P
p)
Visits an
ExportsTree
node.
R
SimpleTreeVisitor.
visitExpressionStatement
(
ExpressionStatementTree
node,
P
p)
Visits an
ExpressionStatementTree
node.
R
TreeScanner.
visitExpressionStatement
(
ExpressionStatementTree
node,
P
p)
Visits an
ExpressionStatementTree
node.
R
SimpleTreeVisitor.
visitForLoop
(
ForLoopTree
node,
P
p)
Visits a
ForLoopTree
node.
R
TreeScanner.
visitForLoop
(
ForLoopTree
node,
P
p)
Visits a
ForLoopTree
node.
R
DocTreeScanner.
visitHidden
(
HiddenTree
node,
P
p)
Visits a
HiddenTree
node.
R
SimpleDocTreeVisitor.
visitHidden
(
HiddenTree
node,
P
p)
Visits a
HiddenTree
node.
R
DocTreeScanner.
visitIdentifier
(
IdentifierTree
node,
P
p)
Visits an
IdentifierTree
node.
R
SimpleDocTreeVisitor.
visitIdentifier
(
IdentifierTree
node,
P
p)
Visits an
IdentifierTree
node.
R
SimpleTreeVisitor.
visitIdentifier
(
IdentifierTree
node,
P
p)
Visits an
IdentifierTree
node.
R
TreeScanner.
visitIdentifier
(
IdentifierTree
node,
P
p)
Visits an
IdentifierTree
node.
R
SimpleTreeVisitor.
visitIf
(
IfTree
node,
P
p)
Visits an
IfTree
node.
R
TreeScanner.
visitIf
(
IfTree
node,
P
p)
Visits an
IfTree
node.
R
SimpleTreeVisitor.
visitImport
(
ImportTree
node,
P
p)
Visits an
ImportTree
node.
R
TreeScanner.
visitImport
(
ImportTree
node,
P
p)
Visits an
ImportTree
node.
R
DocTreeScanner.
visitIndex
(
IndexTree
node,
P
p)
Visits an
IndexTree
node.
R
SimpleDocTreeVisitor.
visitIndex
(
IndexTree
node,
P
p)
Visits an
IndexTree
node.
R
DocTreeScanner.
visitInheritDoc
(
InheritDocTree
node,
P
p)
Visits an
InheritDocTree
node.
R
SimpleDocTreeVisitor.
visitInheritDoc
(
InheritDocTree
node,
P
p)
Visits an
InheritDocTree
node.
R
SimpleTreeVisitor.
visitInstanceOf
(
InstanceOfTree
node,
P
p)
Visits an
InstanceOfTree
node.
R
TreeScanner.
visitInstanceOf
(
InstanceOfTree
node,
P
p)
Visits an
InstanceOfTree
node.
R
SimpleTreeVisitor.
visitIntersectionType
(
IntersectionTypeTree
node,
P
p)
Visits an
IntersectionTypeTree
node.
R
TreeScanner.
visitIntersectionType
(
IntersectionTypeTree
node,
P
p)
Visits an
IntersectionTypeTree
node.
R
SimpleTreeVisitor.
visitLabeledStatement
(
LabeledStatementTree
node,
P
p)
Visits a
LabeledStatementTree
node.
R
TreeScanner.
visitLabeledStatement
(
LabeledStatementTree
node,
P
p)
Visits a
LabeledStatementTree
node.
R
SimpleTreeVisitor.
visitLambdaExpression
(
LambdaExpressionTree
node,
P
p)
Visits a
LambdaExpressionTree
node.
R
TreeScanner.
visitLambdaExpression
(
LambdaExpressionTree
node,
P
p)
Visits a
LambdaExpressionTree
node.
R
DocTreeScanner.
visitLink
(
LinkTree
node,
P
p)
Visits a
LinkTree
node.
R
SimpleDocTreeVisitor.
visitLink
(
LinkTree
node,
P
p)
Visits a
LinkTree
node.
R
DocTreeScanner.
visitLiteral
(
LiteralTree
node,
P
p)
Visits an
LiteralTree
node.
R
SimpleDocTreeVisitor.
visitLiteral
(
LiteralTree
node,
P
p)
Visits an
LiteralTree
node.
R
SimpleTreeVisitor.
visitLiteral
(
LiteralTree
node,
P
p)
Visits a
LiteralTree
node.
R
TreeScanner.
visitLiteral
(
LiteralTree
node,
P
p)
Visits a
LiteralTree
node.
R
SimpleTreeVisitor.
visitMemberReference
(
MemberReferenceTree
node,
P
p)
Visits a
MemberReferenceTree
node.
R
TreeScanner.
visitMemberReference
(
MemberReferenceTree
node,
P
p)
Visits a
MemberReferenceTree
node.
R
SimpleTreeVisitor.
visitMemberSelect
(
MemberSelectTree
node,
P
p)
Visits a
MemberSelectTree
node.
R
TreeScanner.
visitMemberSelect
(
MemberSelectTree
node,
P
p)
Visits a
MemberSelectTree
node.
R
SimpleTreeVisitor.
visitMethod
(
MethodTree
node,
P
p)
Visits a
MethodTree
node.
R
TreeScanner.
visitMethod
(
MethodTree
node,
P
p)
Visits a
MethodTree
node.
R
SimpleTreeVisitor.
visitMethodInvocation
(
MethodInvocationTree
node,
P
p)
Visits a
MethodInvocationTree
node.
R
TreeScanner.
visitMethodInvocation
(
MethodInvocationTree
node,
P
p)
Visits a
MethodInvocationTree
node.
R
SimpleTreeVisitor.
visitModifiers
(
ModifiersTree
node,
P
p)
Visits a
ModifiersTree
node.
R
TreeScanner.
visitModifiers
(
ModifiersTree
node,
P
p)
Visits a
ModifiersTree
node.
R
SimpleTreeVisitor.
visitModule
(
ModuleTree
node,
P
p)
Visits a
ModuleTree
node.
R
TreeScanner.
visitModule
(
ModuleTree
node,
P
p)
Visits a
ModuleTree
node.
R
SimpleTreeVisitor.
visitNewArray
(
NewArrayTree
node,
P
p)
Visits a
NewArrayTree
node.
R
TreeScanner.
visitNewArray
(
NewArrayTree
node,
P
p)
Visits a
NewArrayTree
node.
R
SimpleTreeVisitor.
visitNewClass
(
NewClassTree
node,
P
p)
Visits a
NewClassTree
node.
R
TreeScanner.
visitNewClass
(
NewClassTree
node,
P
p)
Visits a
NewClassTree
node.
R
SimpleTreeVisitor.
visitOpens
(
OpensTree
node,
P
p)
Visits an
OpensTree
node.
R
TreeScanner.
visitOpens
(
OpensTree
node,
P
p)
Visits an
OpensTree
node.
R
DocTreeScanner.
visitOther
(
DocTree
node,
P
p)
Visits an unknown type of
DocTree
node.
R
SimpleDocTreeVisitor.
visitOther
(
DocTree
node,
P
p)
Visits an unknown type of
DocTree
node.
R
SimpleTreeVisitor.
visitOther
(
Tree
node,
P
p)
Visits an unknown type of
Tree
node.
R
TreeScanner.
visitOther
(
Tree
node,
P
p)
Visits an unknown type of
Tree
node.
R
SimpleTreeVisitor.
visitPackage
(
PackageTree
node,
P
p)
Visits a
PackageTree
node.
R
TreeScanner.
visitPackage
(
PackageTree
node,
P
p)
Visits a
PackageTree
node.
R
DocTreeScanner.
visitParam
(
ParamTree
node,
P
p)
Visits a
ParamTree
node.
R
SimpleDocTreeVisitor.
visitParam
(
ParamTree
node,
P
p)
Visits a
ParamTree
node.
R
SimpleTreeVisitor.
visitParameterizedType
(
ParameterizedTypeTree
node,
P
p)
Visits a
ParameterizedTypeTree
node.
R
TreeScanner.
visitParameterizedType
(
ParameterizedTypeTree
node,
P
p)
Visits a
ParameterizedTypeTree
node.
R
SimpleTreeVisitor.
visitParenthesized
(
ParenthesizedTree
node,
P
p)
Visits a
ParenthesizedTree
node.
R
TreeScanner.
visitParenthesized
(
ParenthesizedTree
node,
P
p)
Visits a
ParenthesizedTree
node.
R
SimpleTreeVisitor.
visitPatternCaseLabel
(
PatternCaseLabelTree
node,
P
p)
Visits a
PatternCaseLabelTree
node.
R
TreeScanner.
visitPatternCaseLabel
(
PatternCaseLabelTree
node,
P
p)
Visits a
PatternCaseLabelTree
node.
R
SimpleTreeVisitor.
visitPrimitiveType
(
PrimitiveTypeTree
node,
P
p)
Visits a
PrimitiveTypeTree
node.
R
TreeScanner.
visitPrimitiveType
(
PrimitiveTypeTree
node,
P
p)
Visits a
PrimitiveTypeTree
node.
R
DocTreeScanner.
visitProvides
(
ProvidesTree
node,
P
p)
Visits a
ProvidesTree
node.
R
SimpleDocTreeVisitor.
visitProvides
(
ProvidesTree
node,
P
p)
Visits a
ProvidesTree
node.
R
SimpleTreeVisitor.
visitProvides
(
ProvidesTree
node,
P
p)
Visits a
ProvidesTree
node.
R
TreeScanner.
visitProvides
(
ProvidesTree
node,
P
p)
Visits a
ProvidesTree
node.
R
DocTreeScanner.
visitReference
(
ReferenceTree
node,
P
p)
Visits a
ReferenceTree
node.
R
SimpleDocTreeVisitor.
visitReference
(
ReferenceTree
node,
P
p)
Visits a
ReferenceTree
node.
R
SimpleTreeVisitor.
visitRequires
(
RequiresTree
node,
P
p)
Visits a
RequiresTree
node.
R
TreeScanner.
visitRequires
(
RequiresTree
node,
P
p)
Visits a
RequiresTree
node.
R
DocTreeScanner.
visitReturn
(
ReturnTree
node,
P
p)
Visits a
ReturnTree
node.
R
SimpleDocTreeVisitor.
visitReturn
(
ReturnTree
node,
P
p)
Visits a
ReturnTree
node.
R
SimpleTreeVisitor.
visitReturn
(
ReturnTree
node,
P
p)
Visits a
ReturnTree
node.
R
TreeScanner.
visitReturn
(
ReturnTree
node,
P
p)
Visits a
ReturnTree
node.
R
DocTreeScanner.
visitSee
(
SeeTree
node,
P
p)
Visits a
SeeTree
node.
R
SimpleDocTreeVisitor.
visitSee
(
SeeTree
node,
P
p)
Visits a
SeeTree
node.
R
DocTreeScanner.
visitSerial
(
SerialTree
node,
P
p)
Visits a
SerialTree
node.
R
SimpleDocTreeVisitor.
visitSerial
(
SerialTree
node,
P
p)
Visits a
SerialTree
node.
R
DocTreeScanner.
visitSerialData
(
SerialDataTree
node,
P
p)
Visits a
SerialDataTree
node.
R
SimpleDocTreeVisitor.
visitSerialData
(
SerialDataTree
node,
P
p)
Visits a
SerialDataTree
node.
R
DocTreeScanner.
visitSerialField
(
SerialFieldTree
node,
P
p)
Visits a
SerialFieldTree
node.
R
SimpleDocTreeVisitor.
visitSerialField
(
SerialFieldTree
node,
P
p)
Visits a
SerialFieldTree
node.
R
DocTreeScanner.
visitSince
(
SinceTree
node,
P
p)
Visits a
SinceTree
node.
R
SimpleDocTreeVisitor.
visitSince
(
SinceTree
node,
P
p)
Visits a
SinceTree
node.
R
DocTreeScanner.
visitSnippet
(
SnippetTree
node,
P
p)
Visits a
SnippetTree
node.
R
SimpleDocTreeVisitor.
visitSnippet
(
SnippetTree
node,
P
p)
Visits a
SnippetTree
node.
R
DocTreeScanner.
visitSpec
(
SpecTree
node,
P
p)
Visits a
SpecTree
node.
R
SimpleDocTreeVisitor.
visitSpec
(
SpecTree
node,
P
p)
Visits a
SpecTree
node.
R
DocTreeScanner.
visitStartElement
(
StartElementTree
node,
P
p)
Visits a
StartElementTree
node.
R
SimpleDocTreeVisitor.
visitStartElement
(
StartElementTree
node,
P
p)
Visits a
StartElementTree
node.
R
SimpleTreeVisitor.
visitStringTemplate
(
StringTemplateTree
PREVIEW
node,
P
p)
Preview.
Visits a StringTemplateTree node.
R
TreeScanner.
visitStringTemplate
(
StringTemplateTree
PREVIEW
node,
P
p)
Preview.
Visits a StringTemplateTree node.
R
DocTreeScanner.
visitSummary
(
SummaryTree
node,
P
p)
Visits a
SummaryTree
node.
R
SimpleDocTreeVisitor.
visitSummary
(
SummaryTree
node,
P
p)
Visits a
SummaryTree
node.
R
SimpleTreeVisitor.
visitSwitch
(
SwitchTree
node,
P
p)
Visits a
SwitchTree
node.
R
TreeScanner.
visitSwitch
(
SwitchTree
node,
P
p)
Visits a
SwitchTree
node.
R
SimpleTreeVisitor.
visitSwitchExpression
(
SwitchExpressionTree
node,
P
p)
Visits a
SwitchExpressionTree
node.
R
TreeScanner.
visitSwitchExpression
(
SwitchExpressionTree
node,
P
p)
Visits a
SwitchExpressionTree
node.
R
SimpleTreeVisitor.
visitSynchronized
(
SynchronizedTree
node,
P
p)
Visits a
SynchronizedTree
node.
R
TreeScanner.
visitSynchronized
(
SynchronizedTree
node,
P
p)
Visits a
SynchronizedTree
node.
R
DocTreeScanner.
visitSystemProperty
(
SystemPropertyTree
node,
P
p)
Visits a
SystemPropertyTree
node.
R
SimpleDocTreeVisitor.
visitSystemProperty
(
SystemPropertyTree
node,
P
p)
Visits a
SystemPropertyTree
node.
R
DocTreeScanner.
visitText
(
TextTree
node,
P
p)
Visits a
TextTree
node.
R
SimpleDocTreeVisitor.
visitText
(
TextTree
node,
P
p)
Visits a
TextTree
node.
R
SimpleTreeVisitor.
visitThrow
(
ThrowTree
node,
P
p)
Visits a
ThrowTree
node.
R
TreeScanner.
visitThrow
(
ThrowTree
node,
P
p)
Visits a
ThrowTree
node.
R
DocTreeScanner.
visitThrows
(
ThrowsTree
node,
P
p)
Visits a
ThrowsTree
node.
R
SimpleDocTreeVisitor.
visitThrows
(
ThrowsTree
node,
P
p)
Visits a
ThrowsTree
node.
R
SimpleTreeVisitor.
visitTry
(
TryTree
node,
P
p)
Visits a
TryTree
node.
R
TreeScanner.
visitTry
(
TryTree
node,
P
p)
Visits a
TryTree
node.
R
SimpleTreeVisitor.
visitTypeCast
(
TypeCastTree
node,
P
p)
Visits a
TypeCastTree
node.
R
TreeScanner.
visitTypeCast
(
TypeCastTree
node,
P
p)
Visits a
TypeCastTree
node.
R
SimpleTreeVisitor.
visitTypeParameter
(
TypeParameterTree
node,
P
p)
Visits a
TypeParameterTree
node.
R
TreeScanner.
visitTypeParameter
(
TypeParameterTree
node,
P
p)
Visits a
TypeParameterTree
node.
R
SimpleTreeVisitor.
visitUnary
(
UnaryTree
node,
P
p)
Visits a
UnaryTree
node.
R
TreeScanner.
visitUnary
(
UnaryTree
node,
P
p)
Visits a
UnaryTree
node.
R
SimpleTreeVisitor.
visitUnionType
(
UnionTypeTree
node,
P
p)
Visits a
UnionTypeTree
node.
R
TreeScanner.
visitUnionType
(
UnionTypeTree
node,
P
p)
Visits a
UnionTypeTree
node.
R
DocTreeScanner.
visitUnknownBlockTag
(
UnknownBlockTagTree
node,
P
p)
Visits an
UnknownBlockTagTree
node.
R
SimpleDocTreeVisitor.
visitUnknownBlockTag
(
UnknownBlockTagTree
node,
P
p)
Visits an
UnknownBlockTagTree
node.
R
DocTreeScanner.
visitUnknownInlineTag
(
UnknownInlineTagTree
node,
P
p)
Visits an
UnknownInlineTagTree
node.
R
SimpleDocTreeVisitor.
visitUnknownInlineTag
(
UnknownInlineTagTree
node,
P
p)
Visits an
UnknownInlineTagTree
node.
R
DocTreeScanner.
visitUses
(
UsesTree
node,
P
p)
Visits a
UsesTree
node.
R
SimpleDocTreeVisitor.
visitUses
(
UsesTree
node,
P
p)
Visits a
UsesTree
node.
R
SimpleTreeVisitor.
visitUses
(
UsesTree
node,
P
p)
Visits a
UsesTree
node.
R
TreeScanner.
visitUses
(
UsesTree
node,
P
p)
Visits a
UsesTree
node.
R
DocTreeScanner.
visitValue
(
ValueTree
node,
P
p)
Visits a
ValueTree
node.
R
SimpleDocTreeVisitor.
visitValue
(
ValueTree
node,
P
p)
Visits a
ValueTree
node.
R
SimpleTreeVisitor.
visitVariable
(
VariableTree
node,
P
p)
Visits a
VariableTree
node.
R
TreeScanner.
visitVariable
(
VariableTree
node,
P
p)
Visits a
VariableTree
node.
R
DocTreeScanner.
visitVersion
(
VersionTree
node,
P
p)
Visits a
VersionTree
node.
R
SimpleDocTreeVisitor.
visitVersion
(
VersionTree
node,
P
p)
Visits a
VersionTree
node.
R
SimpleTreeVisitor.
visitWhileLoop
(
WhileLoopTree
node,
P
p)
Visits a
WhileLoopTree
node.
R
TreeScanner.
visitWhileLoop
(
WhileLoopTree
node,
P
p)
Visits a
WhileLoopTree
node.
R
SimpleTreeVisitor.
visitWildcard
(
WildcardTree
node,
P
p)
Visits a
WildcardTypeTree
node.
R
TreeScanner.
visitWildcard
(
WildcardTree
node,
P
p)
Visits a
WildcardTypeTree
node.
R
SimpleTreeVisitor.
visitYield
(
YieldTree
node,
P
p)
Visits a
YieldTree
node.
R
TreeScanner.
visitYield
(
YieldTree
node,
P
p)
Visits a
YieldTree
node.
Uses of
Override
in
java.applet
Methods in
java.applet
with annotations of type
Override
Modifier and Type
Method
Description
boolean
Applet.
isValidateRoot
()
Deprecated, for removal: This API element is subject to removal in a future version.
Indicates if this container is a validate root.
Uses of
Override
in
java.awt
Methods in
java.awt
with annotations of type
Override
Modifier and Type
Method
Description
Color
Window.
getBackground
()
Gets the background color of this window.
void
Container.
invalidate
()
Invalidates the container.
boolean
Window.
isOpaque
()
Indicates if the window is currently opaque.
boolean
Window.
isValidateRoot
()
Indicates if this container is a validate root.
void
Window.
paint
(
Graphics
g)
Paints the container.
void
Window.
setBackground
(
Color
bgColor)
Sets the background color of this window.
void
Window.
setLocation
(int x,
 int y)
Moves this component to a new location.
void
Window.
setLocation
(
Point
p)
Moves this component to a new location.
void
FileDialog.
setTitle
(
String
title)
Sets the title of the Dialog.
String
Robot.
toString
()
Returns a string representation of this Robot.
Uses of
Override
in
java.awt.datatransfer
Methods in
java.awt.datatransfer
with annotations of type
Override
Modifier and Type
Method
Description
List
<
DataFlavor
>
SystemFlavorMap.
getFlavorsForNative
(
String
nat)
Returns a
List
of
DataFlavor
s to which the specified
String
native can be translated by the data transfer subsystem.
Map
<
String
,
DataFlavor
>
SystemFlavorMap.
getFlavorsForNatives
(
String
[] natives)
Returns a
Map
of the specified
String
natives to their
 most preferred
DataFlavor
.
List
<
String
>
SystemFlavorMap.
getNativesForFlavor
(
DataFlavor
flav)
Returns a
List
of
String
natives to which the specified
DataFlavor
can be translated by the data transfer subsystem.
Map
<
DataFlavor
,
String
>
SystemFlavorMap.
getNativesForFlavors
(
DataFlavor
[] flavors)
Returns a
Map
of the specified
DataFlavor
s to their most
 preferred
String
native.
Uses of
Override
in
java.awt.geom
Methods in
java.awt.geom
with annotations of type
Override
Modifier and Type
Method
Description
final void
Path2D.Double.
trimToSize
()
final void
Path2D.Float.
trimToSize
()
Uses of
Override
in
java.awt.image
Methods in
java.awt.image
with annotations of type
Override
Modifier and Type
Method
Description
boolean
ColorModel.
equals
(
Object
obj)
This method simply delegates to the default implementation in
Object
which is identical to an
==
test since this class cannot enforce the
 issues of a proper equality test among multiple independent subclass
 branches.
boolean
ComponentColorModel.
equals
(
Object
obj)
Tests if the specified
Object
is an instance
 of
ComponentColorModel
and equals this
ComponentColorModel
.
boolean
IndexColorModel.
equals
(
Object
obj)
Tests if the specified
Object
is an
 instance of
IndexColorModel
and if it equals this
IndexColorModel
boolean
PackedColorModel.
equals
(
Object
obj)
Tests if the specified
Object
is an instance
 of
PackedColorModel
and equals this
PackedColorModel
.
protected
Image
BaseMultiResolutionImage.
getBaseImage
()
Graphics
AbstractMultiResolutionImage.
getGraphics
()
As per the contract of the base
Image#getGraphics()
method,
 this implementation will always throw
UnsupportedOperationException
since only off-screen images can return a
Graphics
object.
int
AbstractMultiResolutionImage.
getHeight
(
ImageObserver
observer)
This method simply delegates to the same method on the base image and
 it is equivalent to:
getBaseImage().getHeight(observer)
.
Object
AbstractMultiResolutionImage.
getProperty
(
String
name,
ImageObserver
observer)
This method simply delegates to the same method on the base image and
 it is equivalent to:
getBaseImage().getProperty(name, observer)
.
Image
BaseMultiResolutionImage.
getResolutionVariant
(double destImageWidth,
 double destImageHeight)
List
<
Image
>
BaseMultiResolutionImage.
getResolutionVariants
()
ImageProducer
AbstractMultiResolutionImage.
getSource
()
This method simply delegates to the same method on the base image and
 it is equivalent to:
getBaseImage().getSource()
.
int
AbstractMultiResolutionImage.
getWidth
(
ImageObserver
observer)
This method simply delegates to the same method on the base image and
 it is equivalent to:
getBaseImage().getWidth(observer)
.
int
ColorModel.
hashCode
()
This method simply delegates to the default implementation in
Object
which returns the system ID for the class.
int
ComponentColorModel.
hashCode
()
Returns the hash code for this ComponentColorModel.
int
IndexColorModel.
hashCode
()
Returns the hash code for IndexColorModel.
int
PackedColorModel.
hashCode
()
Returns the hash code for this PackedColorModel.
Uses of
Override
in
java.beans
Methods in
java.beans
with annotations of type
Override
Modifier and Type
Method
Description
void
Expression.
execute
()
The
execute
method finds a method whose name is the same
 as the
methodName
property, and invokes the method on
 the target.
BeanInfo
[]
SimpleBeanInfo.
getAdditionalBeanInfo
()
Claim there are no other relevant BeanInfo objects.
BeanDescriptor
SimpleBeanInfo.
getBeanDescriptor
()
Deny knowledge about the class and customizer of the bean.
int
SimpleBeanInfo.
getDefaultEventIndex
()
Deny knowledge of a default event.
int
SimpleBeanInfo.
getDefaultPropertyIndex
()
Deny knowledge of a default property.
EventSetDescriptor
[]
SimpleBeanInfo.
getEventSetDescriptors
()
Deny knowledge of event sets.
Image
SimpleBeanInfo.
getIcon
(int iconKind)
Claim there are no icons available.
MethodDescriptor
[]
SimpleBeanInfo.
getMethodDescriptors
()
Deny knowledge of methods.
PropertyDescriptor
[]
SimpleBeanInfo.
getPropertyDescriptors
()
Deny knowledge of properties.
Uses of
Override
in
java.io
Methods in
java.io
with annotations of type
Override
Modifier and Type
Method
Description
int
ByteArrayInputStream.
available
()
Returns the number of remaining bytes that can be read (or skipped over)
 from this input stream.
int
FileInputStream.
available
()
Returns an estimate of the number of remaining bytes that can be read (or
 skipped over) from this input stream without blocking by the next
 invocation of a method for this input stream.
int
FilterInputStream.
available
()
Returns an estimate of the number of bytes that can be read (or
 skipped over) from this input stream without blocking by the next
 caller of a method for this input stream.
int
ObjectInputStream.
available
()
Returns the number of bytes that can be read without blocking.
int
PipedInputStream.
available
()
Returns the number of bytes that can be read from this input
 stream without blocking.
int
SequenceInputStream.
available
()
Returns an estimate of the number of bytes that can be read (or
 skipped over) from the current underlying input stream without
 blocking by the next invocation of a method for the current
 underlying input stream.
int
StringBufferInputStream.
available
()
Deprecated.
Returns the number of bytes that can be read from the input
 stream without blocking.
void
ByteArrayInputStream.
close
()
Closing a
ByteArrayInputStream
has no effect.
void
ByteArrayOutputStream.
close
()
Closing a
ByteArrayOutputStream
has no effect.
void
FileInputStream.
close
()
Closes this file input stream and releases any system resources
 associated with the stream.
void
FileOutputStream.
close
()
Closes this file output stream and releases any system resources
 associated with this stream.
void
FilterInputStream.
close
()
Closes this input stream and releases any system resources associated
 with the stream.
void
FilterOutputStream.
close
()
Closes this output stream and releases any system resources
 associated with the stream.
void
ObjectInputStream.
close
()
Closes this input stream and releases any system resources associated
 with the stream.
void
ObjectOutputStream.
close
()
Closes the stream.
void
PipedInputStream.
close
()
Closes this input stream and releases any system resources associated
 with the stream.
void
PipedOutputStream.
close
()
Closes this piped output stream and releases any system resources
 associated with this stream.
void
PrintStream.
close
()
Closes the stream.
void
SequenceInputStream.
close
()
Closes this input stream and releases any system resources associated
 with the stream.
boolean
FilePermission.
equals
(
Object
obj)
Checks two FilePermission objects for equality.
void
BufferedOutputStream.
flush
()
Flushes this buffered output stream.
void
FilterOutputStream.
flush
()
Flushes this output stream and forces any buffered output bytes
 to be written out to the stream.
void
ObjectOutputStream.
flush
()
Flushes the stream.
void
PipedOutputStream.
flush
()
Flushes this output stream and forces any buffered output bytes
 to be written out.
void
PrintStream.
flush
()
Flushes the stream.
String
FilePermission.
getActions
()
Returns the "canonical string representation" of the actions.
IOException
UncheckedIOException.
getCause
()
Returns the cause of this exception.
Throwable
WriteAbortedException.
getCause
()
Returns the exception that terminated the operation (the
cause
).
String
InvalidClassException.
getMessage
()
Produce the message and include the classname, if present.
int
FilePermission.
hashCode
()
Returns the hash code value for this object.
boolean
FilePermission.
implies
(
Permission
p)
Checks if this FilePermission object "implies" the specified permission.
void
ByteArrayInputStream.
mark
(int readAheadLimit)
Set the current marked position in the stream.
void
FilterInputStream.
mark
(int readlimit)
Marks the current position in this input stream.
boolean
ByteArrayInputStream.
markSupported
()
Tests if this
InputStream
supports mark/reset.
boolean
FilterInputStream.
markSupported
()
Tests if this input stream supports the
mark
and
reset
methods.
PermissionCollection
FilePermission.
newPermissionCollection
()
Returns a new PermissionCollection object for storing FilePermission
 objects.
int
ByteArrayInputStream.
read
()
Reads the next byte of data from this input stream.
int
ByteArrayInputStream.
read
(byte[] b,
 int off,
 int len)
Reads up to
len
bytes of data into an array of bytes from this
 input stream.
int
FileInputStream.
read
()
Reads a byte of data from this input stream.
int
FileInputStream.
read
(byte[] b)
Reads up to
b.length
bytes of data from this input
 stream into an array of bytes.
int
FileInputStream.
read
(byte[] b,
 int off,
 int len)
Reads up to
len
bytes of data from this input stream
 into an array of bytes.
int
FilterInputStream.
read
()
Reads the next byte of data from the input stream.
int
FilterInputStream.
read
(byte[] b)
Reads up to
b.length
bytes of data from this
 input stream into an array of bytes.
int
FilterInputStream.
read
(byte[] b,
 int off,
 int len)
Reads up to
len
bytes of data from this input stream
 into an array of bytes.
int
ObjectInputStream.
read
()
Reads a byte of data.
int
ObjectInputStream.
read
(byte[] buf,
 int off,
 int len)
Reads into an array of bytes.
int
PipedInputStream.
read
()
Reads the next byte of data from this piped input stream.
int
PipedInputStream.
read
(byte[] b,
 int off,
 int len)
Reads up to
len
bytes of data from this piped input
 stream into an array of bytes.
int
SequenceInputStream.
read
()
Reads the next byte of data from the input stream.
int
SequenceInputStream.
read
(byte[] b,
 int off,
 int len)
Reads up to
len
bytes of data from this input stream into an
 array of bytes.
int
StringBufferInputStream.
read
()
Deprecated.
Reads the next byte of data from this input stream.
int
StringBufferInputStream.
read
(byte[] b,
 int off,
 int len)
Deprecated.
Reads up to
len
bytes of data from this input stream
 into an array of bytes.
byte[]
ByteArrayInputStream.
readAllBytes
()
int
ByteArrayInputStream.
readNBytes
(byte[] b,
 int off,
 int len)
void
ByteArrayInputStream.
reset
()
Resets the buffer to the marked position.
void
FilterInputStream.
reset
()
Repositions this stream to the position at the time the
mark
method was last called on this input stream.
void
StringBufferInputStream.
reset
()
Deprecated.
Resets the input stream to begin reading from the first character
 of this input stream's underlying buffer.
long
ByteArrayInputStream.
skip
(long n)
Skips
n
bytes of input from this input stream.
long
FileInputStream.
skip
(long n)
Skips over and discards
n
bytes of data from the
 input stream.
long
FilterInputStream.
skip
(long n)
Skips over and discards
n
bytes of data from the
 input stream.
long
StringBufferInputStream.
skip
(long n)
Deprecated.
Skips
n
bytes of input from this input stream.
int
ObjectInputStream.
skipBytes
(int len)
Skips bytes.
String
ByteArrayOutputStream.
toString
()
Converts the buffer's contents into a string decoding bytes using the
 default charset.
void
BufferedOutputStream.
write
(byte[] b,
 int off,
 int len)
Writes
len
bytes from the specified byte array
 starting at offset
off
to this buffered output stream.
void
BufferedOutputStream.
write
(int b)
Writes the specified byte to this buffered output stream.
void
ByteArrayOutputStream.
write
(byte[] b,
 int off,
 int len)
Writes
len
bytes from the specified byte array
 starting at offset
off
to this
ByteArrayOutputStream
.
void
ByteArrayOutputStream.
write
(int b)
Writes the specified byte to this
ByteArrayOutputStream
.
void
FileOutputStream.
write
(byte[] b)
Writes
b.length
bytes from the specified byte array
 to this file output stream.
void
FileOutputStream.
write
(byte[] b,
 int off,
 int len)
Writes
len
bytes from the specified byte array
 starting at offset
off
to this file output stream.
void
FileOutputStream.
write
(int b)
Writes the specified byte to this file output stream.
void
FilterOutputStream.
write
(byte[] b)
Writes
b.length
bytes to this output stream.
void
FilterOutputStream.
write
(byte[] b,
 int off,
 int len)
Writes
len
bytes from the specified
byte
array starting at offset
off
to
 this output stream.
void
FilterOutputStream.
write
(int b)
Writes the specified
byte
to this output stream.
void
ObjectOutputStream.
write
(byte[] buf)
Writes an array of bytes.
void
ObjectOutputStream.
write
(byte[] buf,
 int off,
 int len)
Writes a sub array of bytes.
void
ObjectOutputStream.
write
(int val)
Writes a byte.
void
PipedOutputStream.
write
(byte[] b,
 int off,
 int len)
Writes
len
bytes from the specified byte array
 starting at offset
off
to this piped output stream.
void
PipedOutputStream.
write
(int b)
Writes the specified
byte
to the piped output stream.
void
PrintStream.
write
(byte[] buf)
Writes all bytes from the specified byte array to this stream.
void
PrintStream.
write
(byte[] buf,
 int off,
 int len)
Writes
len
bytes from the specified byte array starting at
 offset
off
to this stream.
void
PrintStream.
write
(int b)
Writes the specified byte to this stream.
Uses of
Override
in
java.lang
Methods in
java.lang
with annotations of type
Override
Modifier and Type
Method
Description
StringBuffer
StringBuffer.
append
(boolean b)
StringBuffer
StringBuffer.
append
(char c)
StringBuffer
StringBuffer.
append
(char[] str)
StringBuffer
StringBuffer.
append
(char[] str,
 int offset,
 int len)
StringBuffer
StringBuffer.
append
(double d)
StringBuffer
StringBuffer.
append
(float f)
StringBuffer
StringBuffer.
append
(int i)
StringBuffer
StringBuffer.
append
(long lng)
StringBuffer
StringBuffer.
append
(
CharSequence
s)
Appends the specified
CharSequence
to this
 sequence.
StringBuffer
StringBuffer.
append
(
CharSequence
s,
 int start,
 int end)
StringBuffer
StringBuffer.
append
(
Object
obj)
StringBuffer
StringBuffer.
append
(
String
str)
StringBuilder
StringBuilder.
append
(boolean b)
StringBuilder
StringBuilder.
append
(char c)
StringBuilder
StringBuilder.
append
(char[] str)
StringBuilder
StringBuilder.
append
(char[] str,
 int offset,
 int len)
StringBuilder
StringBuilder.
append
(double d)
StringBuilder
StringBuilder.
append
(float f)
StringBuilder
StringBuilder.
append
(int i)
StringBuilder
StringBuilder.
append
(long lng)
StringBuilder
StringBuilder.
append
(
CharSequence
s)
StringBuilder
StringBuilder.
append
(
CharSequence
s,
 int start,
 int end)
StringBuilder
StringBuilder.
append
(
Object
obj)
StringBuilder
StringBuilder.
append
(
String
str)
StringBuffer
StringBuffer.
appendCodePoint
(int codePoint)
StringBuilder
StringBuilder.
appendCodePoint
(int codePoint)
Class
<?>
Class.
arrayType
()
Returns a
Class
for an array type whose component type
 is described by this
Class
.
int
StringBuffer.
capacity
()
char
StringBuffer.
charAt
(int index)
IntStream
String.
chars
()
Returns a stream of
int
zero-extending the
char
values
 from this sequence.
protected
Object
Thread.
clone
()
Throws CloneNotSupportedException as a Thread can not be meaningfully
 cloned.
int
StringBuffer.
codePointAt
(int index)
int
StringBuffer.
codePointBefore
(int index)
int
StringBuffer.
codePointCount
(int beginIndex,
 int endIndex)
IntStream
String.
codePoints
()
Returns a stream of code point values from this sequence.
int
ProcessHandle.
compareTo
(
ProcessHandle
other)
Compares this ProcessHandle with the specified ProcessHandle for order.
int
Runtime.Version.
compareTo
(
Runtime.Version
obj)
Compares this version to another.
int
StringBuffer.
compareTo
(
StringBuffer
another)
Compares two
StringBuffer
instances lexicographically.
int
StringBuilder.
compareTo
(
StringBuilder
another)
Compares two
StringBuilder
instances lexicographically.
Class
<?>
Class.
componentType
()
Returns the component type of this
Class
, if it describes
 an array type, or
null
otherwise.
StringBuffer
StringBuffer.
delete
(int start,
 int end)
StringBuilder
StringBuilder.
delete
(int start,
 int end)
StringBuffer
StringBuffer.
deleteCharAt
(int index)
StringBuilder
StringBuilder.
deleteCharAt
(int index)
Optional
<
DynamicConstantDesc
<
Boolean
>>
Boolean.
describeConstable
()
Returns an
Optional
containing the nominal descriptor for this
 instance.
Optional
<
DynamicConstantDesc
<
Byte
>>
Byte.
describeConstable
()
Returns an
Optional
containing the nominal descriptor for this
 instance.
Optional
<
DynamicConstantDesc
<
Character
>>
Character.
describeConstable
()
Returns an
Optional
containing the nominal descriptor for this
 instance.
Optional
<
ClassDesc
>
Class.
describeConstable
()
Returns a nominal descriptor for this instance, if one can be
 constructed, or an empty
Optional
if one cannot be.
Optional
<
Double
>
Double.
describeConstable
()
Returns an
Optional
containing the nominal descriptor for this
 instance, which is the instance itself.
final
Optional
<
Enum.EnumDesc
<
E
>>
Enum.
describeConstable
()
Returns an enum descriptor
EnumDesc
for this instance, if one can be
 constructed, or an empty
Optional
if one cannot be.
Optional
<
Float
>
Float.
describeConstable
()
Returns an
Optional
containing the nominal descriptor for this
 instance, which is the instance itself.
Optional
<
Integer
>
Integer.
describeConstable
()
Returns an
Optional
containing the nominal descriptor for this
 instance, which is the instance itself.
Optional
<
Long
>
Long.
describeConstable
()
Returns an
Optional
containing the nominal descriptor for this
 instance, which is the instance itself.
Optional
<
DynamicConstantDesc
<
Short
>>
Short.
describeConstable
()
Returns an
Optional
containing the nominal descriptor for this
 instance.
Optional
<
String
>
String.
describeConstable
()
Returns an
Optional
containing the nominal descriptor for this
 instance, which is the instance itself.
String
Class.
descriptorString
()
Returns the descriptor string of the entity (class, interface, array class,
 primitive type, or
void
) represented by this
Class
object.
void
StringBuffer.
ensureCapacity
(int minimumCapacity)
boolean
ProcessHandle.
equals
(
Object
other)
Returns
true
if
other
object is non-null, is of the
 same implementation, and represents the same system process;
 otherwise it returns
false
.
abstract boolean
Record.
equals
(
Object
obj)
Indicates whether some other object is "equal to" this one.
boolean
Runtime.Version.
equals
(
Object
obj)
Determines whether this
Version
is equal to another object.
<A extends
Annotation
>
A
Class.
getAnnotation
(
Class
<A> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
present
, else null.
<T extends
Annotation
>
T
Module.
getAnnotation
(
Class
<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
present
, else null.
<A extends
Annotation
>
A
Package.
getAnnotation
(
Class
<A> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
present
, else null.
Annotation
[]
Class.
getAnnotations
()
Returns annotations that are
present
on this element.
Annotation
[]
Module.
getAnnotations
()
Returns annotations that are
present
on this element.
Annotation
[]
Package.
getAnnotations
()
Returns annotations that are
present
on this element.
<A extends
Annotation
>
A[]
Class.
getAnnotationsByType
(
Class
<A> annotationClass)
Returns annotations that are
associated
with this element.
<A extends
Annotation
>
A[]
Package.
getAnnotationsByType
(
Class
<A> annotationClass)
Returns annotations that are
associated
with this element.
void
StringBuffer.
getChars
(int srcBegin,
 int srcEnd,
 char[] dst,
 int dstBegin)
<A extends
Annotation
>
A
Class.
getDeclaredAnnotation
(
Class
<A> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
directly present
, else null.
<A extends
Annotation
>
A
Package.
getDeclaredAnnotation
(
Class
<A> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
directly present
, else null.
Annotation
[]
Class.
getDeclaredAnnotations
()
Returns annotations that are
directly present
on this element.
Annotation
[]
Module.
getDeclaredAnnotations
()
Returns annotations that are
directly present
on this element.
Annotation
[]
Package.
getDeclaredAnnotations
()
Returns annotations that are
directly present
on this element.
<A extends
Annotation
>
A[]
Class.
getDeclaredAnnotationsByType
(
Class
<A> annotationClass)
Returns this element's annotation(s) for the specified type if
 such annotations are either
directly present
or
indirectly present
.
<A extends
Annotation
>
A[]
Package.
getDeclaredAnnotationsByType
(
Class
<A> annotationClass)
int
Boolean.
hashCode
()
Returns a hash code for this
Boolean
object.
int
Byte.
hashCode
()
Returns a hash code for this
Byte
; equal to the result
 of invoking
intValue()
.
int
Character.
hashCode
()
Returns a hash code for this
Character
; equal to the result
 of invoking
charValue()
.
int
Double.
hashCode
()
Returns a hash code for this
Double
object.
int
Float.
hashCode
()
Returns a hash code for this
Float
object.
int
Integer.
hashCode
()
Returns a hash code for this
Integer
.
int
Long.
hashCode
()
Returns a hash code for this
Long
.
int
Package.
hashCode
()
Return the hash code computed from the package name.
int
ProcessHandle.
hashCode
()
Returns a hash code value for this ProcessHandle.
abstract int
Record.
hashCode
()
Returns a hash code value for the record.
int
Runtime.Version.
hashCode
()
Returns the hash code of this version.
int
Short.
hashCode
()
Returns a hash code for this
Short
; equal to the result
 of invoking
intValue()
.
int
StringBuffer.
indexOf
(
String
str)
int
StringBuffer.
indexOf
(
String
str,
 int fromIndex)
int
StringBuilder.
indexOf
(
String
str)
int
StringBuilder.
indexOf
(
String
str,
 int fromIndex)
Thread.Builder.OfPlatform
Thread.Builder.OfPlatform.
inheritInheritableThreadLocals
(boolean inherit)
Thread.Builder.OfVirtual
Thread.Builder.OfVirtual.
inheritInheritableThreadLocals
(boolean inherit)
StringBuffer
StringBuffer.
insert
(int offset,
 boolean b)
StringBuffer
StringBuffer.
insert
(int offset,
 char c)
StringBuffer
StringBuffer.
insert
(int offset,
 char[] str)
StringBuffer
StringBuffer.
insert
(int index,
 char[] str,
 int offset,
 int len)
StringBuffer
StringBuffer.
insert
(int offset,
 double d)
StringBuffer
StringBuffer.
insert
(int offset,
 float f)
StringBuffer
StringBuffer.
insert
(int offset,
 int i)
StringBuffer
StringBuffer.
insert
(int offset,
 long l)
StringBuffer
StringBuffer.
insert
(int dstOffset,
CharSequence
s)
StringBuffer
StringBuffer.
insert
(int dstOffset,
CharSequence
s,
 int start,
 int end)
StringBuffer
StringBuffer.
insert
(int offset,
Object
obj)
StringBuffer
StringBuffer.
insert
(int offset,
String
str)
StringBuilder
StringBuilder.
insert
(int offset,
 boolean b)
StringBuilder
StringBuilder.
insert
(int offset,
 char c)
StringBuilder
StringBuilder.
insert
(int offset,
 char[] str)
StringBuilder
StringBuilder.
insert
(int index,
 char[] str,
 int offset,
 int len)
StringBuilder
StringBuilder.
insert
(int offset,
 double d)
StringBuilder
StringBuilder.
insert
(int offset,
 float f)
StringBuilder
StringBuilder.
insert
(int offset,
 int i)
StringBuilder
StringBuilder.
insert
(int offset,
 long l)
StringBuilder
StringBuilder.
insert
(int dstOffset,
CharSequence
s)
StringBuilder
StringBuilder.
insert
(int dstOffset,
CharSequence
s,
 int start,
 int end)
StringBuilder
StringBuilder.
insert
(int offset,
Object
obj)
StringBuilder
StringBuilder.
insert
(int offset,
String
str)
boolean
Class.
isAnnotationPresent
(
Class
<? extends
Annotation
> annotationClass)
Returns true if an annotation for the specified type
 is
present
on this element, else false.
boolean
Package.
isAnnotationPresent
(
Class
<? extends
Annotation
> annotationClass)
Returns true if an annotation for the specified type
 is
present
on this element, else false.
boolean
String.
isEmpty
()
Returns
true
if, and only if,
String.length()
is
0
.
int
StringBuffer.
lastIndexOf
(
String
str)
int
StringBuffer.
lastIndexOf
(
String
str,
 int fromIndex)
int
StringBuilder.
lastIndexOf
(
String
str)
int
StringBuilder.
lastIndexOf
(
String
str,
 int fromIndex)
int
StringBuffer.
length
()
Thread.Builder.OfPlatform
Thread.Builder.OfPlatform.
name
(
String
name)
Thread.Builder.OfPlatform
Thread.Builder.OfPlatform.
name
(
String
prefix,
 long start)
Thread.Builder.OfVirtual
Thread.Builder.OfVirtual.
name
(
String
name)
Thread.Builder.OfVirtual
Thread.Builder.OfVirtual.
name
(
String
prefix,
 long start)
int
StringBuffer.
offsetByCodePoints
(int index,
 int codePointOffset)
StringBuffer
StringBuffer.
repeat
(int codePoint,
 int count)
StringBuffer
StringBuffer.
repeat
(
CharSequence
cs,
 int count)
StringBuilder
StringBuilder.
repeat
(int codePoint,
 int count)
StringBuilder
StringBuilder.
repeat
(
CharSequence
cs,
 int count)
StringBuffer
StringBuffer.
replace
(int start,
 int end,
String
str)
StringBuilder
StringBuilder.
replace
(int start,
 int end,
String
str)
Double
Double.
resolveConstantDesc
(
MethodHandles.Lookup
lookup)
Resolves this instance as a
ConstantDesc
, the result of which is
 the instance itself.
Float
Float.
resolveConstantDesc
(
MethodHandles.Lookup
lookup)
Resolves this instance as a
ConstantDesc
, the result of which is
 the instance itself.
Integer
Integer.
resolveConstantDesc
(
MethodHandles.Lookup
lookup)
Resolves this instance as a
ConstantDesc
, the result of which is
 the instance itself.
Long
Long.
resolveConstantDesc
(
MethodHandles.Lookup
lookup)
Resolves this instance as a
ConstantDesc
, the result of which is
 the instance itself.
String
String.
resolveConstantDesc
(
MethodHandles.Lookup
lookup)
Resolves this instance as a
ConstantDesc
, the result of which is
 the instance itself.
StringBuffer
StringBuffer.
reverse
()
StringBuilder
StringBuilder.
reverse
()
void
Thread.
run
()
This method is run by the thread when it executes.
void
StringBuffer.
setCharAt
(int index,
 char ch)
void
StringBuffer.
setLength
(int newLength)
CharSequence
StringBuffer.
subSequence
(int start,
 int end)
String
StringBuffer.
substring
(int start)
String
StringBuffer.
substring
(int start,
 int end)
String
Boolean.
toString
()
Returns a
String
object representing this Boolean's
 value.
String
Byte.
toString
()
Returns a
String
object representing this
Byte
's value.
String
Character.
toString
()
Returns a
String
object representing this
Character
's value.
String
Module.
toString
()
Returns the string representation of this module.
String
ModuleLayer.
toString
()
Returns a string describing this module layer.
String
Package.
toString
()
Returns the string representation of this Package.
abstract
String
Record.
toString
()
Returns a string representation of the record.
String
Runtime.Version.
toString
()
Returns a string representation of this version.
String
Short.
toString
()
Returns a
String
object representing this
Short
's value.
String
StackTraceElement.
toString
()
Returns a string representation of this stack trace element.
String
StringBuffer.
toString
()
String
StringBuilder.
toString
()
void
StringBuffer.
trimToSize
()
Thread.Builder.OfPlatform
Thread.Builder.OfPlatform.
uncaughtExceptionHandler
(
Thread.UncaughtExceptionHandler
ueh)
Thread.Builder.OfVirtual
Thread.Builder.OfVirtual.
uncaughtExceptionHandler
(
Thread.UncaughtExceptionHandler
ueh)
Uses of
Override
in
java.lang.constant
Methods in
java.lang.constant
with annotations of type
Override
Modifier and Type
Method
Description
final boolean
DynamicCallSiteDesc.
equals
(
Object
o)
Compares the specified object with this descriptor for equality.
final boolean
DynamicConstantDesc.
equals
(
Object
o)
Compares the specified object with this descriptor for equality.
boolean
ModuleDesc.
equals
(
Object
o)
Compare the specified object with this descriptor for equality.
boolean
PackageDesc.
equals
(
Object
o)
Compare the specified object with this descriptor for equality.
final int
DynamicCallSiteDesc.
hashCode
()
final int
DynamicConstantDesc.
hashCode
()
Class
<?>
ClassDesc.
resolveConstantDesc
(
MethodHandles.Lookup
lookup)
MethodHandle
MethodHandleDesc.
resolveConstantDesc
(
MethodHandles.Lookup
lookup)
MethodType
MethodTypeDesc.
resolveConstantDesc
(
MethodHandles.Lookup
lookup)
Resolves this descriptor reflectively, emulating the resolution behavior
 of JVMS
5.4.3
and the access control behavior of JVMS
5.4.4
.
String
DynamicCallSiteDesc.
toString
()
Returns a compact textual description of this call site description,
 including the bootstrap method, the invocation name and type, and
 the static bootstrap arguments.
String
DynamicConstantDesc.
toString
()
Returns a compact textual description of this constant description,
 including the bootstrap method, the constant name and type, and
 the static bootstrap arguments.
Uses of
Override
in
java.lang.foreign
Methods in
java.lang.foreign
with annotations of type
Override
Modifier and Type
Method
Description
default
MemorySegment
PREVIEW
Arena.
allocate
(long byteSize,
 long byteAlignment)
Returns a native memory segment with the given size (in bytes) and alignment constraint (in bytes).
void
Arena.
close
()
Closes this arena.
boolean
MemorySegment.
equals
(
Object
that)
Compares the specified object with this memory segment for equality.
boolean
MemorySegment.Scope.
equals
(
Object
that)
Returns
true
, if the provided object is also a scope, which models the same lifetime as that
 modelled by this scope.
int
MemorySegment.
hashCode
()
Returns the hash code value for this memory segment.
int
MemorySegment.Scope.
hashCode
()
Returns the hash code of this scope object.
String
MemoryLayout.
toString
()
Returns the string representation of this layout.
AddressLayout
PREVIEW
AddressLayout.
withByteAlignment
(long byteAlignment)
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
GroupLayout
PREVIEW
GroupLayout.
withByteAlignment
(long byteAlignment)
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
StructLayout
PREVIEW
StructLayout.
withByteAlignment
(long byteAlignment)
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
UnionLayout
PREVIEW
UnionLayout.
withByteAlignment
(long byteAlignment)
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
ValueLayout.OfBoolean
PREVIEW
ValueLayout.OfBoolean.
withByteAlignment
(long byteAlignment)
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
ValueLayout.OfByte
PREVIEW
ValueLayout.OfByte.
withByteAlignment
(long byteAlignment)
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
ValueLayout.OfChar
PREVIEW
ValueLayout.OfChar.
withByteAlignment
(long byteAlignment)
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
ValueLayout.OfDouble
PREVIEW
ValueLayout.OfDouble.
withByteAlignment
(long byteAlignment)
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
ValueLayout.OfFloat
PREVIEW
ValueLayout.OfFloat.
withByteAlignment
(long byteAlignment)
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
ValueLayout.OfInt
PREVIEW
ValueLayout.OfInt.
withByteAlignment
(long byteAlignment)
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
ValueLayout.OfLong
PREVIEW
ValueLayout.OfLong.
withByteAlignment
(long byteAlignment)
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
ValueLayout.OfShort
PREVIEW
ValueLayout.OfShort.
withByteAlignment
(long byteAlignment)
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
ValueLayout
PREVIEW
ValueLayout.
withByteAlignment
(long byteAlignment)
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
AddressLayout
PREVIEW
AddressLayout.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
GroupLayout
PREVIEW
GroupLayout.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
PaddingLayout
PREVIEW
PaddingLayout.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
SequenceLayout
PREVIEW
SequenceLayout.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
StructLayout
PREVIEW
StructLayout.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
UnionLayout
PREVIEW
UnionLayout.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
ValueLayout.OfBoolean
PREVIEW
ValueLayout.OfBoolean.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
ValueLayout.OfByte
PREVIEW
ValueLayout.OfByte.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
ValueLayout.OfChar
PREVIEW
ValueLayout.OfChar.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
ValueLayout.OfDouble
PREVIEW
ValueLayout.OfDouble.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
ValueLayout.OfFloat
PREVIEW
ValueLayout.OfFloat.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
ValueLayout.OfInt
PREVIEW
ValueLayout.OfInt.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
ValueLayout.OfLong
PREVIEW
ValueLayout.OfLong.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
ValueLayout.OfShort
PREVIEW
ValueLayout.OfShort.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
ValueLayout
PREVIEW
ValueLayout.
withName
(
String
name)
Returns a memory layout with the same characteristics as this layout, but with the given name.
AddressLayout
PREVIEW
AddressLayout.
withOrder
(
ByteOrder
order)
Returns a value layout with the same characteristics as this layout, but with the given byte order.
ValueLayout.OfBoolean
PREVIEW
ValueLayout.OfBoolean.
withOrder
(
ByteOrder
order)
Returns a value layout with the same characteristics as this layout, but with the given byte order.
ValueLayout.OfByte
PREVIEW
ValueLayout.OfByte.
withOrder
(
ByteOrder
order)
Returns a value layout with the same characteristics as this layout, but with the given byte order.
ValueLayout.OfChar
PREVIEW
ValueLayout.OfChar.
withOrder
(
ByteOrder
order)
Returns a value layout with the same characteristics as this layout, but with the given byte order.
ValueLayout.OfDouble
PREVIEW
ValueLayout.OfDouble.
withOrder
(
ByteOrder
order)
Returns a value layout with the same characteristics as this layout, but with the given byte order.
ValueLayout.OfFloat
PREVIEW
ValueLayout.OfFloat.
withOrder
(
ByteOrder
order)
Returns a value layout with the same characteristics as this layout, but with the given byte order.
ValueLayout.OfInt
PREVIEW
ValueLayout.OfInt.
withOrder
(
ByteOrder
order)
Returns a value layout with the same characteristics as this layout, but with the given byte order.
ValueLayout.OfLong
PREVIEW
ValueLayout.OfLong.
withOrder
(
ByteOrder
order)
Returns a value layout with the same characteristics as this layout, but with the given byte order.
ValueLayout.OfShort
PREVIEW
ValueLayout.OfShort.
withOrder
(
ByteOrder
order)
Returns a value layout with the same characteristics as this layout, but with the given byte order.
AddressLayout
PREVIEW
AddressLayout.
withoutName
()
Returns a memory layout with the same characteristics as this layout, but with no name.
GroupLayout
PREVIEW
GroupLayout.
withoutName
()
Returns a memory layout with the same characteristics as this layout, but with no name.
PaddingLayout
PREVIEW
PaddingLayout.
withoutName
()
Returns a memory layout with the same characteristics as this layout, but with no name.
StructLayout
PREVIEW
StructLayout.
withoutName
()
Returns a memory layout with the same characteristics as this layout, but with no name.
UnionLayout
PREVIEW
UnionLayout.
withoutName
()
Returns a memory layout with the same characteristics as this layout, but with no name.
ValueLayout.OfBoolean
PREVIEW
ValueLayout.OfBoolean.
withoutName
()
Returns a memory layout with the same characteristics as this layout, but with no name.
ValueLayout.OfByte
PREVIEW
ValueLayout.OfByte.
withoutName
()
Returns a memory layout with the same characteristics as this layout, but with no name.
ValueLayout.OfChar
PREVIEW
ValueLayout.OfChar.
withoutName
()
Returns a memory layout with the same characteristics as this layout, but with no name.
ValueLayout.OfDouble
PREVIEW
ValueLayout.OfDouble.
withoutName
()
Returns a memory layout with the same characteristics as this layout, but with no name.
ValueLayout.OfFloat
PREVIEW
ValueLayout.OfFloat.
withoutName
()
Returns a memory layout with the same characteristics as this layout, but with no name.
ValueLayout.OfInt
PREVIEW
ValueLayout.OfInt.
withoutName
()
Returns a memory layout with the same characteristics as this layout, but with no name.
ValueLayout.OfLong
PREVIEW
ValueLayout.OfLong.
withoutName
()
Returns a memory layout with the same characteristics as this layout, but with no name.
ValueLayout.OfShort
PREVIEW
ValueLayout.OfShort.
withoutName
()
Returns a memory layout with the same characteristics as this layout, but with no name.
ValueLayout
PREVIEW
ValueLayout.
withoutName
()
Returns a memory layout with the same characteristics as this layout, but with no name.
Uses of
Override
in
java.lang.invoke
Methods in
java.lang.invoke
with annotations of type
Override
Modifier and Type
Method
Description
Optional
<
MethodHandleDesc
>
MethodHandle.
describeConstable
()
Return a nominal descriptor for this instance, if one can be
 constructed, or an empty
Optional
if one cannot be.
Optional
<
MethodTypeDesc
>
MethodType.
describeConstable
()
Returns a nominal descriptor for this instance, if one can be
 constructed, or an empty
Optional
if one cannot be.
Optional
<
VarHandle.VarHandleDesc
>
VarHandle.
describeConstable
()
Return a nominal descriptor for this instance, if one can be
 constructed, or an empty
Optional
if one cannot be.
String
MethodType.
descriptorString
()
Returns the descriptor string for this method type.
final
MethodHandle
ConstantCallSite.
dynamicInvoker
()
Returns this call site's permanent target.
final
MethodHandle
MutableCallSite.
dynamicInvoker
()
Produces a method handle equivalent to an invokedynamic instruction
 which has been linked to this call site.
final
MethodHandle
VolatileCallSite.
dynamicInvoker
()
Produces a method handle equivalent to an invokedynamic instruction
 which has been linked to this call site.
boolean
MethodType.
equals
(
Object
x)
Compares the specified object with this type for equality.
final
MethodHandle
ConstantCallSite.
getTarget
()
Returns the target method of the call site, which behaves
 like a
final
field of the
ConstantCallSite
.
final
MethodHandle
MutableCallSite.
getTarget
()
Returns the target method of the call site, which behaves
 like a normal field of the
MutableCallSite
.
final
MethodHandle
VolatileCallSite.
getTarget
()
Returns the target method of the call site, which behaves
 like a
volatile
field of the
VolatileCallSite
.
int
MethodType.
hashCode
()
Returns the hash code value for this method type.
final void
ConstantCallSite.
setTarget
(
MethodHandle
ignore)
Always throws an
UnsupportedOperationException
.
void
MutableCallSite.
setTarget
(
MethodHandle
newTarget)
Updates the target method of this call site, as a normal variable.
void
VolatileCallSite.
setTarget
(
MethodHandle
newTarget)
Updates the target method of this call site, as a volatile variable.
String
MethodHandle.
toString
()
Returns a string representation of the method handle,
 starting with the string
"MethodHandle"
and
 ending with the string representation of the method handle's type.
String
MethodHandles.Lookup.
toString
()
Displays the name of the class from which lookups are to be made,
 followed by "/" and the name of the
previous lookup class
if present.
String
MethodType.
toString
()
Returns a string representation of the method type,
 of the form
"(PT0,PT1...)RT"
.
final
String
VarHandle.
toString
()
Returns a compact textual description of this
VarHandle
,
 including the type of variable described, and a description of its coordinates.
String
VarHandle.VarHandleDesc.
toString
()
Returns a compact textual description of this constant description.
Uses of
Override
in
java.lang.module
Methods in
java.lang.module
with annotations of type
Override
Modifier and Type
Method
Description
void
ModuleReader.
close
()
Closes the module reader.
int
ModuleDescriptor.
compareTo
(
ModuleDescriptor
that)
Compares this module descriptor to another.
int
ModuleDescriptor.Exports.
compareTo
(
ModuleDescriptor.Exports
that)
Compares this module export to another.
int
ModuleDescriptor.Opens.
compareTo
(
ModuleDescriptor.Opens
that)
Compares this module
Opens
to another.
int
ModuleDescriptor.Requires.
compareTo
(
ModuleDescriptor.Requires
that)
Compares this module dependence to another.
int
ModuleDescriptor.Version.
compareTo
(
ModuleDescriptor.Version
that)
Compares this module version to another module version.
boolean
ModuleDescriptor.
equals
(
Object
ob)
Tests this module descriptor for equality with the given object.
boolean
ModuleDescriptor.Exports.
equals
(
Object
ob)
Tests this module export for equality with the given object.
boolean
ModuleDescriptor.Opens.
equals
(
Object
ob)
Tests this module
Opens
for equality with the given object.
boolean
ModuleDescriptor.Provides.
equals
(
Object
ob)
Tests this
Provides
for equality with the given object.
boolean
ModuleDescriptor.Requires.
equals
(
Object
ob)
Tests this module dependence for equality with the given object.
boolean
ModuleDescriptor.Version.
equals
(
Object
ob)
Tests this module version for equality with the given object.
boolean
ResolvedModule.
equals
(
Object
ob)
Tests this resolved module for equality with the given object.
int
ModuleDescriptor.Exports.
hashCode
()
Computes a hash code for this module export.
int
ModuleDescriptor.
hashCode
()
Computes a hash code for this module descriptor.
int
ModuleDescriptor.Opens.
hashCode
()
Computes a hash code for this module
Opens
.
int
ModuleDescriptor.Provides.
hashCode
()
Computes a hash code for this
Provides
.
int
ModuleDescriptor.Requires.
hashCode
()
Computes a hash code for this module dependence.
int
ModuleDescriptor.Version.
hashCode
()
Computes a hash code for this module version.
int
ResolvedModule.
hashCode
()
Computes a hash code for this resolved module.
String
Configuration.
toString
()
Returns a string describing this configuration.
String
ModuleDescriptor.Exports.
toString
()
Returns a string describing the exported package.
String
ModuleDescriptor.Opens.
toString
()
Returns a string describing the open package.
String
ModuleDescriptor.Provides.
toString
()
Returns a string describing this
Provides
.
String
ModuleDescriptor.Requires.
toString
()
Returns a string describing this module dependence.
String
ModuleDescriptor.
toString
()
Returns a string describing the module.
String
ModuleDescriptor.Version.
toString
()
Returns the string from which this version was parsed.
String
ResolvedModule.
toString
()
Returns a string describing this resolved module.
Uses of
Override
in
java.lang.ref
Methods in
java.lang.ref
with annotations of type
Override
Modifier and Type
Method
Description
protected
Object
Reference.
clone
()
Throws
CloneNotSupportedException
.
Uses of
Override
in
java.lang.reflect
Methods in
java.lang.reflect
with annotations of type
Override
Modifier and Type
Method
Description
Set
<
AccessFlag
>
Executable.
accessFlags
()
Returns an unmodifiable set of the
access flags
for the executable represented by this object,
 possibly empty.
Set
<
AccessFlag
>
Field.
accessFlags
()
Returns an unmodifiable set of the
access flags
for this field, possibly empty.
boolean
Parameter.
equals
(
Object
obj)
Compares based on the executable and the index.
AnnotatedType
AnnotatedArrayType.
getAnnotatedOwnerType
()
Returns the potentially annotated type that this type is a member of, if
 this type represents a nested class or interface.
AnnotatedType
AnnotatedParameterizedType.
getAnnotatedOwnerType
()
Returns the potentially annotated type that this type is a member of, if
 this type represents a nested type.
AnnotatedType
AnnotatedTypeVariable.
getAnnotatedOwnerType
()
Returns the potentially annotated type that this type is a member of, if
 this type represents a nested type.
AnnotatedType
AnnotatedWildcardType.
getAnnotatedOwnerType
()
Returns the potentially annotated type that this type is a member of, if
 this type represents a nested type.
AnnotatedType
Constructor.
getAnnotatedReceiverType
()
Returns an
AnnotatedType
object that represents the use of a
 type to specify the receiver type of the method/constructor represented
 by this
Executable
object.
AnnotatedType
Constructor.
getAnnotatedReturnType
()
Returns an
AnnotatedType
object that represents the use of a type to
 specify the return type of the method/constructor represented by this
 Executable.
AnnotatedType
Method.
getAnnotatedReturnType
()
Returns an
AnnotatedType
object that represents the use of a type to
 specify the return type of the method/constructor represented by this
 Executable.
<T extends
Annotation
>
T
AccessibleObject.
getAnnotation
(
Class
<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
present
, else null.
<T extends
Annotation
>
T
AnnotatedType.
getAnnotation
(
Class
<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
present
, else null.
<T extends
Annotation
>
T
Constructor.
getAnnotation
(
Class
<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
present
, else null.
<T extends
Annotation
>
T
Executable.
getAnnotation
(
Class
<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
present
, else null.
<T extends
Annotation
>
T
Field.
getAnnotation
(
Class
<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
present
, else null.
<T extends
Annotation
>
T
Method.
getAnnotation
(
Class
<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
present
, else null.
<T extends
Annotation
>
T
Parameter.
getAnnotation
(
Class
<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
present
, else null.
<T extends
Annotation
>
T
RecordComponent.
getAnnotation
(
Class
<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
present
, else null.
Annotation
[]
AccessibleObject.
getAnnotations
()
Returns annotations that are
present
on this element.
Annotation
[]
AnnotatedType.
getAnnotations
()
Returns annotations that are
present
on this element.
Annotation
[]
Parameter.
getAnnotations
()
Returns annotations that are
present
on this element.
Annotation
[]
RecordComponent.
getAnnotations
()
Returns annotations that are
present
on this element.
<T extends
Annotation
>
T[]
AccessibleObject.
getAnnotationsByType
(
Class
<T> annotationClass)
Returns annotations that are
associated
with this element.
<T extends
Annotation
>
T[]
Executable.
getAnnotationsByType
(
Class
<T> annotationClass)
Returns annotations that are
associated
with this element.
<T extends
Annotation
>
T[]
Field.
getAnnotationsByType
(
Class
<T> annotationClass)
Returns annotations that are
associated
with this element.
<T extends
Annotation
>
T[]
Parameter.
getAnnotationsByType
(
Class
<T> annotationClass)
Returns annotations that are
associated
with this element.
Throwable
InvocationTargetException.
getCause
()
Returns the cause of this exception (the thrown target exception,
 which may be
null
).
<T extends
Annotation
>
T
AccessibleObject.
getDeclaredAnnotation
(
Class
<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
directly present
, else null.
<T extends
Annotation
>
T
Parameter.
getDeclaredAnnotation
(
Class
<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
directly present
, else null.
Annotation
[]
AccessibleObject.
getDeclaredAnnotations
()
Returns annotations that are
directly present
on this element.
Annotation
[]
AnnotatedType.
getDeclaredAnnotations
()
Returns annotations that are
directly present
on this element.
Annotation
[]
Constructor.
getDeclaredAnnotations
()
Returns annotations that are
directly present
on this element.
Annotation
[]
Executable.
getDeclaredAnnotations
()
Returns annotations that are
directly present
on this element.
Annotation
[]
Method.
getDeclaredAnnotations
()
Returns annotations that are
directly present
on this element.
Annotation
[]
Parameter.
getDeclaredAnnotations
()
Returns annotations that are
directly present
on this element.
Annotation
[]
RecordComponent.
getDeclaredAnnotations
()
Returns annotations that are
directly present
on this element.
<T extends
Annotation
>
T[]
AccessibleObject.
getDeclaredAnnotationsByType
(
Class
<T> annotationClass)
Returns this element's annotation(s) for the specified type if
 such annotations are either
directly present
or
indirectly present
.
<T extends
Annotation
>
T[]
Parameter.
getDeclaredAnnotationsByType
(
Class
<T> annotationClass)
Returns this element's annotation(s) for the specified type if
 such annotations are either
directly present
or
indirectly present
.
Class
<
T
>
Constructor.
getDeclaringClass
()
Returns the
Class
object representing the class that
 declares the constructor represented by this object.
Class
<?>
Field.
getDeclaringClass
()
Returns the
Class
object representing the class or interface
 that declares the field represented by this
Field
object.
Class
<?>
Method.
getDeclaringClass
()
Returns the
Class
object representing the class or interface
 that declares the method represented by this object.
Class
<?>[]
Constructor.
getExceptionTypes
()
Returns an array of
Class
objects that represent the
 types of exceptions declared to be thrown by the underlying
 executable represented by this object.
Class
<?>[]
Method.
getExceptionTypes
()
Returns an array of
Class
objects that represent the
 types of exceptions declared to be thrown by the underlying
 executable represented by this object.
Type
[]
Constructor.
getGenericExceptionTypes
()
Returns an array of
Type
objects that represent the
 exceptions declared to be thrown by this executable object.
Type
[]
Method.
getGenericExceptionTypes
()
Returns an array of
Type
objects that represent the
 exceptions declared to be thrown by this executable object.
Type
[]
Constructor.
getGenericParameterTypes
()
Returns an array of
Type
objects that represent the
 formal parameter types, in declaration order, of the executable
 represented by this object.
Type
[]
Method.
getGenericParameterTypes
()
Returns an array of
Type
objects that represent the
 formal parameter types, in declaration order, of the executable
 represented by this object.
int
Constructor.
getModifiers
()
Returns the Java language
modifiers
for
 the executable represented by this object.
int
Method.
getModifiers
()
Returns the Java language
modifiers
for
 the executable represented by this object.
String
Constructor.
getName
()
Returns the name of this constructor, as a string.
String
Method.
getName
()
Returns the name of the method represented by this
Method
object, as a
String
.
Annotation
[][]
Constructor.
getParameterAnnotations
()
Returns an array of arrays of
Annotation
s that
 represent the annotations on the formal parameters, in
 declaration order, of the
Executable
represented by
 this object.
Annotation
[][]
Method.
getParameterAnnotations
()
Returns an array of arrays of
Annotation
s that
 represent the annotations on the formal parameters, in
 declaration order, of the
Executable
represented by
 this object.
Class
<?>[]
Constructor.
getParameterTypes
()
Returns an array of
Class
objects that represent the formal
 parameter types, in declaration order, of the executable
 represented by this object.
Class
<?>[]
Method.
getParameterTypes
()
Returns an array of
Class
objects that represent the formal
 parameter types, in declaration order, of the executable
 represented by this object.
TypeVariable
<
Constructor
<
T
>>[]
Constructor.
getTypeParameters
()
Returns an array of
TypeVariable
objects that represent the
 type variables declared by the generic declaration represented by this
GenericDeclaration
object, in declaration order.
TypeVariable
<
Method
>[]
Method.
getTypeParameters
()
Returns an array of
TypeVariable
objects that represent the
 type variables declared by the generic declaration represented by this
GenericDeclaration
object, in declaration order.
int
Parameter.
hashCode
()
Returns a hash code based on the executable's hash code and the
 index.
boolean
AccessibleObject.
isAnnotationPresent
(
Class
<? extends
Annotation
> annotationClass)
Returns true if an annotation for the specified type
 is
present
on this element, else false.
boolean
Constructor.
isSynthetic
()
Returns
true
if this executable is a synthetic
 construct; returns
false
otherwise.
boolean
Method.
isSynthetic
()
Returns
true
if this executable is a synthetic
 construct; returns
false
otherwise.
boolean
Constructor.
isVarArgs
()
Returns
true
if this executable was declared to take a
 variable number of arguments; returns
false
otherwise.
boolean
Method.
isVarArgs
()
Returns
true
if this executable was declared to take a
 variable number of arguments; returns
false
otherwise.
void
Constructor.
setAccessible
(boolean flag)
Set the
accessible
flag for this reflected object to
 the indicated boolean value.
void
Field.
setAccessible
(boolean flag)
void
Method.
setAccessible
(boolean flag)
String
Constructor.
toGenericString
()
Returns a string describing this
Constructor
,
 including type parameters.
String
Method.
toGenericString
()
Returns a string describing this
Method
, including type
 parameters.
String
Parameter.
toString
()
Returns a string describing this parameter.
Uses of
Override
in
java.math
Methods in
java.math
with annotations of type
Override
Modifier and Type
Method
Description
int
BigDecimal.
compareTo
(
BigDecimal
val)
Compares this
BigDecimal
numerically with the specified
BigDecimal
.
double
BigDecimal.
doubleValue
()
Converts this
BigDecimal
to a
double
.
boolean
BigDecimal.
equals
(
Object
x)
Compares this
BigDecimal
with the specified
Object
for equality.
float
BigDecimal.
floatValue
()
Converts this
BigDecimal
to a
float
.
int
BigDecimal.
hashCode
()
Returns the hash code for this
BigDecimal
.
int
BigDecimal.
intValue
()
Converts this
BigDecimal
to an
int
.
long
BigDecimal.
longValue
()
Converts this
BigDecimal
to a
long
.
String
BigDecimal.
toString
()
Returns the string representation of this
BigDecimal
,
 using scientific notation if an exponent is needed.
Uses of
Override
in
java.net
Methods in
java.net
with annotations of type
Override
Modifier and Type
Method
Description
Object
HttpCookie.
clone
()
Create and return a copy of this object.
boolean
HttpCookie.
equals
(
Object
obj)
Test the equality of two HTTP cookies.
boolean
Inet6Address.
equals
(
Object
obj)
Compares this object against the specified object.
final boolean
InetSocketAddress.
equals
(
Object
obj)
Compares this object against the specified object.
boolean
SocketPermission.
equals
(
Object
obj)
Checks two SocketPermission objects for equality.
boolean
UnixDomainSocketAddress.
equals
(
Object
o)
Compares this address with another object.
String
SocketPermission.
getActions
()
Returns the canonical string representation of the actions.
byte[]
Inet6Address.
getAddress
()
Returns the raw IP address of this
InetAddress
object.
String
Inet6Address.
getHostAddress
()
Returns the IP address string in textual presentation.
int
HttpCookie.
hashCode
()
Returns the hash code of this HTTP cookie.
int
Inet6Address.
hashCode
()
Returns a hashcode for this IP address.
final int
InetSocketAddress.
hashCode
()
Returns a hashcode for this socket address.
int
SocketPermission.
hashCode
()
Returns the hash code value for this object.
int
UnixDomainSocketAddress.
hashCode
()
Returns the hash code of this
UnixDomainSocketAddress
boolean
SocketPermission.
implies
(
Permission
p)
Checks if this socket permission object "implies" the
 specified permission.
boolean
Inet6Address.
isAnyLocalAddress
()
Utility routine to check if the InetAddress is a wildcard address.
boolean
Inet6Address.
isLinkLocalAddress
()
Utility routine to check if the InetAddress is a link local address.
boolean
Inet6Address.
isLoopbackAddress
()
Utility routine to check if the InetAddress is a loopback address.
boolean
Inet6Address.
isMCGlobal
()
Utility routine to check if the multicast address has global scope.
boolean
Inet6Address.
isMCLinkLocal
()
Utility routine to check if the multicast address has link scope.
boolean
Inet6Address.
isMCNodeLocal
()
Utility routine to check if the multicast address has node scope.
boolean
Inet6Address.
isMCOrgLocal
()
Utility routine to check if the multicast address has organization scope.
boolean
Inet6Address.
isMCSiteLocal
()
Utility routine to check if the multicast address has site scope.
boolean
Inet6Address.
isMulticastAddress
()
Utility routine to check if the InetAddress is an IP multicast
 address. 11111111 at the start of the address identifies the
 address as being a multicast address.
boolean
Inet6Address.
isSiteLocalAddress
()
Utility routine to check if the InetAddress is a site local address.
void
MulticastSocket.
joinGroup
(
SocketAddress
mcastaddr,
NetworkInterface
netIf)
Joins a multicast group.
void
MulticastSocket.
leaveGroup
(
SocketAddress
mcastaddr,
NetworkInterface
netIf)
Leave a multicast group on a specified local interface.
PermissionCollection
SocketPermission.
newPermissionCollection
()
Returns a new PermissionCollection object for storing SocketPermission
 objects.
String
HttpCookie.
toString
()
Constructs a cookie header string representation of this cookie,
 which is in the format defined by corresponding cookie specification,
 but without the leading "Cookie:" token.
String
InetSocketAddress.
toString
()
Constructs a string representation of this InetSocketAddress.
String
UnixDomainSocketAddress.
toString
()
Returns a string representation of this
UnixDomainSocketAddress
.
Uses of
Override
in
java.net.http
Methods in
java.net.http
with annotations of type
Override
Modifier and Type
Method
Description
void
HttpClient.
close
()
Initiates an orderly shutdown in which  requests previously
 submitted to
send
or
sendAsync
are run to completion, but no new request will be accepted.
final boolean
HttpRequest.
equals
(
Object
obj)
Tests this HTTP request instance for equality with the given object.
WebSocketHandshakeException
WebSocketHandshakeException.
initCause
(
Throwable
cause)
String
HttpHeaders.
toString
()
Returns this HTTP headers as a string.
Uses of
Override
in
java.nio
Methods in
java.nio
with annotations of type
Override
Modifier and Type
Method
Description
ByteBuffer
ByteBuffer.
clear
()
Clears this buffer.
final
CharBuffer
CharBuffer.
clear
()
Clears this buffer.
final
DoubleBuffer
DoubleBuffer.
clear
()
Clears this buffer.
final
FloatBuffer
FloatBuffer.
clear
()
Clears this buffer.
final
IntBuffer
IntBuffer.
clear
()
Clears this buffer.
final
LongBuffer
LongBuffer.
clear
()
Clears this buffer.
final
MappedByteBuffer
MappedByteBuffer.
clear
()
Clears this buffer.
final
ShortBuffer
ShortBuffer.
clear
()
Clears this buffer.
abstract
MappedByteBuffer
MappedByteBuffer.
compact
()
Compacts this buffer
(optional operation)
.
abstract
ByteBuffer
ByteBuffer.
duplicate
()
Creates a new byte buffer that shares this buffer's content.
abstract
CharBuffer
CharBuffer.
duplicate
()
Creates a new char buffer that shares this buffer's content.
abstract
DoubleBuffer
DoubleBuffer.
duplicate
()
Creates a new double buffer that shares this buffer's content.
abstract
FloatBuffer
FloatBuffer.
duplicate
()
Creates a new float buffer that shares this buffer's content.
abstract
IntBuffer
IntBuffer.
duplicate
()
Creates a new int buffer that shares this buffer's content.
abstract
LongBuffer
LongBuffer.
duplicate
()
Creates a new long buffer that shares this buffer's content.
abstract
MappedByteBuffer
MappedByteBuffer.
duplicate
()
Creates a new byte buffer that shares this buffer's content.
abstract
ShortBuffer
ShortBuffer.
duplicate
()
Creates a new short buffer that shares this buffer's content.
ByteBuffer
ByteBuffer.
flip
()
Flips this buffer.
final
CharBuffer
CharBuffer.
flip
()
Flips this buffer.
final
DoubleBuffer
DoubleBuffer.
flip
()
Flips this buffer.
final
FloatBuffer
FloatBuffer.
flip
()
Flips this buffer.
final
IntBuffer
IntBuffer.
flip
()
Flips this buffer.
final
LongBuffer
LongBuffer.
flip
()
Flips this buffer.
final
MappedByteBuffer
MappedByteBuffer.
flip
()
Flips this buffer.
final
ShortBuffer
ShortBuffer.
flip
()
Flips this buffer.
ByteBuffer
ByteBuffer.
limit
(int newLimit)
Sets this buffer's limit.
final
CharBuffer
CharBuffer.
limit
(int newLimit)
Sets this buffer's limit.
final
DoubleBuffer
DoubleBuffer.
limit
(int newLimit)
Sets this buffer's limit.
final
FloatBuffer
FloatBuffer.
limit
(int newLimit)
Sets this buffer's limit.
final
IntBuffer
IntBuffer.
limit
(int newLimit)
Sets this buffer's limit.
final
LongBuffer
LongBuffer.
limit
(int newLimit)
Sets this buffer's limit.
final
MappedByteBuffer
MappedByteBuffer.
limit
(int newLimit)
Sets this buffer's limit.
final
ShortBuffer
ShortBuffer.
limit
(int newLimit)
Sets this buffer's limit.
ByteBuffer
ByteBuffer.
mark
()
Sets this buffer's mark at its position.
final
CharBuffer
CharBuffer.
mark
()
Sets this buffer's mark at its position.
final
DoubleBuffer
DoubleBuffer.
mark
()
Sets this buffer's mark at its position.
final
FloatBuffer
FloatBuffer.
mark
()
Sets this buffer's mark at its position.
final
IntBuffer
IntBuffer.
mark
()
Sets this buffer's mark at its position.
final
LongBuffer
LongBuffer.
mark
()
Sets this buffer's mark at its position.
final
MappedByteBuffer
MappedByteBuffer.
mark
()
Sets this buffer's mark at its position.
final
ShortBuffer
ShortBuffer.
mark
()
Sets this buffer's mark at its position.
ByteBuffer
ByteBuffer.
position
(int newPosition)
Sets this buffer's position.
final
CharBuffer
CharBuffer.
position
(int newPosition)
Sets this buffer's position.
final
DoubleBuffer
DoubleBuffer.
position
(int newPosition)
Sets this buffer's position.
final
FloatBuffer
FloatBuffer.
position
(int newPosition)
Sets this buffer's position.
final
IntBuffer
IntBuffer.
position
(int newPosition)
Sets this buffer's position.
final
LongBuffer
LongBuffer.
position
(int newPosition)
Sets this buffer's position.
final
MappedByteBuffer
MappedByteBuffer.
position
(int newPosition)
Sets this buffer's position.
final
ShortBuffer
ShortBuffer.
position
(int newPosition)
Sets this buffer's position.
ByteBuffer
ByteBuffer.
reset
()
Resets this buffer's position to the previously-marked position.
final
CharBuffer
CharBuffer.
reset
()
Resets this buffer's position to the previously-marked position.
final
DoubleBuffer
DoubleBuffer.
reset
()
Resets this buffer's position to the previously-marked position.
final
FloatBuffer
FloatBuffer.
reset
()
Resets this buffer's position to the previously-marked position.
final
IntBuffer
IntBuffer.
reset
()
Resets this buffer's position to the previously-marked position.
final
LongBuffer
LongBuffer.
reset
()
Resets this buffer's position to the previously-marked position.
final
MappedByteBuffer
MappedByteBuffer.
reset
()
Resets this buffer's position to the previously-marked position.
final
ShortBuffer
ShortBuffer.
reset
()
Resets this buffer's position to the previously-marked position.
ByteBuffer
ByteBuffer.
rewind
()
Rewinds this buffer.
final
CharBuffer
CharBuffer.
rewind
()
Rewinds this buffer.
final
DoubleBuffer
DoubleBuffer.
rewind
()
Rewinds this buffer.
final
FloatBuffer
FloatBuffer.
rewind
()
Rewinds this buffer.
final
IntBuffer
IntBuffer.
rewind
()
Rewinds this buffer.
final
LongBuffer
LongBuffer.
rewind
()
Rewinds this buffer.
final
MappedByteBuffer
MappedByteBuffer.
rewind
()
Rewinds this buffer.
final
ShortBuffer
ShortBuffer.
rewind
()
Rewinds this buffer.
abstract
ByteBuffer
ByteBuffer.
slice
()
Creates a new byte buffer whose content is a shared subsequence of
 this buffer's content.
abstract
ByteBuffer
ByteBuffer.
slice
(int index,
 int length)
Creates a new byte buffer whose content is a shared subsequence of
 this buffer's content.
abstract
CharBuffer
CharBuffer.
slice
()
Creates a new char buffer whose content is a shared subsequence of
 this buffer's content.
abstract
CharBuffer
CharBuffer.
slice
(int index,
 int length)
Creates a new char buffer whose content is a shared subsequence of
 this buffer's content.
abstract
DoubleBuffer
DoubleBuffer.
slice
()
Creates a new double buffer whose content is a shared subsequence of
 this buffer's content.
abstract
DoubleBuffer
DoubleBuffer.
slice
(int index,
 int length)
Creates a new double buffer whose content is a shared subsequence of
 this buffer's content.
abstract
FloatBuffer
FloatBuffer.
slice
()
Creates a new float buffer whose content is a shared subsequence of
 this buffer's content.
abstract
FloatBuffer
FloatBuffer.
slice
(int index,
 int length)
Creates a new float buffer whose content is a shared subsequence of
 this buffer's content.
abstract
IntBuffer
IntBuffer.
slice
()
Creates a new int buffer whose content is a shared subsequence of
 this buffer's content.
abstract
IntBuffer
IntBuffer.
slice
(int index,
 int length)
Creates a new int buffer whose content is a shared subsequence of
 this buffer's content.
abstract
LongBuffer
LongBuffer.
slice
()
Creates a new long buffer whose content is a shared subsequence of
 this buffer's content.
abstract
LongBuffer
LongBuffer.
slice
(int index,
 int length)
Creates a new long buffer whose content is a shared subsequence of
 this buffer's content.
abstract
MappedByteBuffer
MappedByteBuffer.
slice
()
Creates a new byte buffer whose content is a shared subsequence of
 this buffer's content.
abstract
MappedByteBuffer
MappedByteBuffer.
slice
(int index,
 int length)
Creates a new byte buffer whose content is a shared subsequence of
 this buffer's content.
abstract
ShortBuffer
ShortBuffer.
slice
()
Creates a new short buffer whose content is a shared subsequence of
 this buffer's content.
abstract
ShortBuffer
ShortBuffer.
slice
(int index,
 int length)
Creates a new short buffer whose content is a shared subsequence of
 this buffer's content.
Uses of
Override
in
java.nio.channels
Methods in
java.nio.channels
with annotations of type
Override
Modifier and Type
Method
Description
abstract
AsynchronousSocketChannel
AsynchronousSocketChannel.
bind
(
SocketAddress
local)
abstract
SocketChannel
SocketChannel.
bind
(
SocketAddress
local)
Binds the channel's socket to a local address.
void
AsynchronousChannel.
close
()
Closes this channel.
void
MulticastChannel.
close
()
Closes this channel.
abstract
SocketAddress
AsynchronousServerSocketChannel.
getLocalAddress
()
Returns the socket address that this channel's socket is bound to.
abstract
SocketAddress
DatagramChannel.
getLocalAddress
()
Returns the socket address that this channel's socket is bound to.
abstract
SocketAddress
ServerSocketChannel.
getLocalAddress
()
Returns the socket address that this channel's socket is bound to.
abstract
SocketAddress
SocketChannel.
getLocalAddress
()
Returns the socket address that this channel's socket is bound to.
abstract
Future
<
Integer
>
AsynchronousSocketChannel.
read
(
ByteBuffer
dst)
final <A> void
AsynchronousSocketChannel.
read
(
ByteBuffer
dst,
 A attachment,
CompletionHandler
<
Integer
,
? super A> handler)
int
SeekableByteChannel.
read
(
ByteBuffer
dst)
Reads a sequence of bytes from this channel into the given buffer.
abstract <T>
AsynchronousSocketChannel
AsynchronousSocketChannel.
setOption
(
SocketOption
<T> name,
 T value)
abstract <T>
SocketChannel
SocketChannel.
setOption
(
SocketOption
<T> name,
 T value)
abstract
Future
<
Integer
>
AsynchronousSocketChannel.
write
(
ByteBuffer
src)
final <A> void
AsynchronousSocketChannel.
write
(
ByteBuffer
src,
 A attachment,
CompletionHandler
<
Integer
,
? super A> handler)
int
SeekableByteChannel.
write
(
ByteBuffer
src)
Writes a sequence of bytes to this channel from the given buffer.
Uses of
Override
in
java.nio.file
Methods in
java.nio.file
with annotations of type
Override
Modifier and Type
Method
Description
abstract void
FileSystem.
close
()
Closes this file system.
void
WatchService.
close
()
Closes this watch service.
int
Path.
compareTo
(
Path
other)
Compares two abstract paths lexicographically.
IOException
DirectoryIteratorException.
getCause
()
Returns the cause of this exception.
String
FileSystemException.
getMessage
()
Returns the detail message string.
Iterator
<
T
>
DirectoryStream.
iterator
()
Returns the iterator associated with this
DirectoryStream
.
default
Iterator
<
Path
>
Path.
iterator
()
Returns an iterator over the name elements of this path.
FileVisitResult
SimpleFileVisitor.
postVisitDirectory
(
T
dir,
IOException
exc)
Invoked for a directory after entries in the directory, and all of their
 descendants, have been visited.
FileVisitResult
SimpleFileVisitor.
preVisitDirectory
(
T
dir,
BasicFileAttributes
attrs)
Invoked for a directory before entries in the directory are visited.
default
WatchKey
Path.
register
(
WatchService
watcher,
WatchEvent.Kind
<?>... events)
Registers the file located by this path with a watch service.
WatchKey
Path.
register
(
WatchService
watcher,
WatchEvent.Kind
<?>[] events,
WatchEvent.Modifier
... modifiers)
Registers the file located by this path with a watch service.
FileVisitResult
SimpleFileVisitor.
visitFile
(
T
file,
BasicFileAttributes
attrs)
Invoked for a file in a directory.
FileVisitResult
SimpleFileVisitor.
visitFileFailed
(
T
file,
IOException
exc)
Invoked for a file that could not be visited.
Uses of
Override
in
java.nio.file.attribute
Methods in
java.nio.file.attribute
with annotations of type
Override
Modifier and Type
Method
Description
int
FileTime.
compareTo
(
FileTime
other)
Compares the value of two
FileTime
objects for order.
boolean
AclEntry.
equals
(
Object
ob)
Compares the specified object with this ACL entry for equality.
boolean
FileTime.
equals
(
Object
obj)
Tests this
FileTime
for equality with the given object.
int
AclEntry.
hashCode
()
Returns the hash-code value for this ACL entry.
int
FileTime.
hashCode
()
Computes a hash code for this file time.
String
AclFileAttributeView.
name
()
Returns the name of the attribute view.
String
BasicFileAttributeView.
name
()
Returns the name of the attribute view.
String
DosFileAttributeView.
name
()
Returns the name of the attribute view.
String
FileOwnerAttributeView.
name
()
Returns the name of the attribute view.
String
PosixFileAttributeView.
name
()
Returns the name of the attribute view.
String
UserDefinedFileAttributeView.
name
()
Returns the name of this attribute view.
DosFileAttributes
DosFileAttributeView.
readAttributes
()
PosixFileAttributes
PosixFileAttributeView.
readAttributes
()
String
AclEntry.
toString
()
Returns the string representation of this ACL entry.
String
FileTime.
toString
()
Returns the string representation of this
FileTime
.
Uses of
Override
in
java.rmi.server
Methods in
java.rmi.server
with annotations of type
Override
Modifier and Type
Method
Description
int
ObjID.
hashCode
()
Returns the hash code value for this object identifier, the
 object number.
Uses of
Override
in
java.security
Methods in
java.security
with annotations of type
Override
Modifier and Type
Method
Description
void
Permissions.
add
(
Permission
permission)
Adds a
Permission
object to the
PermissionCollection
for the class the permission belongs to.
void
Provider.
clear
()
Clears this
Provider
so that it no longer contains the properties
 used to look up facilities implemented by the
Provider
.
Object
Provider.
compute
(
Object
key,
BiFunction
<? super
Object
,
? super
Object
,
? extends
Object
> remappingFunction)
Attempts to compute a mapping for the specified key and its
 current mapped value (or
null
if there is no current
 mapping).
Object
Provider.
computeIfAbsent
(
Object
key,
Function
<? super
Object
,
? extends
Object
> mappingFunction)
If the specified key is not already associated with a value (or
 is mapped to
null
), attempts to compute its value using
 the given mapping function and enters it into this map unless
null
.
Object
Provider.
computeIfPresent
(
Object
key,
BiFunction
<? super
Object
,
? super
Object
,
? extends
Object
> remappingFunction)
If the value for the specified key is present and non-null, attempts to
 compute a new mapping given the key and its current mapped value.
Enumeration
<
Permission
>
Permissions.
elements
()
Returns an enumeration of all the
Permission
objects in all the
PermissionCollection
objects in this
Permissions
object.
Set
<
Map.Entry
<
Object
,
Object
>>
Provider.
entrySet
()
Returns an unmodifiable Set view of the property entries contained
 in this
Provider
.
boolean
BasicPermission.
equals
(
Object
obj)
Checks two
BasicPermission
objects for equality.
boolean
CodeSource.
equals
(
Object
obj)
Tests for equality between the specified object and this
 object.
boolean
PKCS12Attribute.
equals
(
Object
obj)
Compares this
PKCS12Attribute
and a specified object for
 equality.
boolean
UnresolvedPermission.
equals
(
Object
obj)
Checks two
UnresolvedPermission
objects for equality.
void
Provider.
forEach
(
BiConsumer
<? super
Object
,
? super
Object
> action)
String
BasicPermission.
getActions
()
Returns the canonical string representation of the actions,
 which currently is the empty string "", since there are no actions for
 a
BasicPermission
.
String
UnresolvedPermission.
getActions
()
Returns the canonical string representation of the actions,
 which currently is the empty string "", since there are no actions for
 an
UnresolvedPermission
.
Set
<
KeyStore.Entry.Attribute
>
KeyStore.PrivateKeyEntry.
getAttributes
()
Retrieves the attributes associated with an entry.
Set
<
KeyStore.Entry.Attribute
>
KeyStore.SecretKeyEntry.
getAttributes
()
Retrieves the attributes associated with an entry.
Set
<
KeyStore.Entry.Attribute
>
KeyStore.TrustedCertificateEntry.
getAttributes
()
Retrieves the attributes associated with an entry.
String
PKCS12Attribute.
getName
()
Returns the attribute's ASN.1 Object Identifier represented as a
 list of dot-separated integers.
Object
Provider.
getOrDefault
(
Object
key,
Object
defaultValue)
KeyStore.ProtectionParameter
DomainLoadStoreParameter.
getProtectionParameter
()
Gets the keystore protection parameters for this domain.
String
PKCS12Attribute.
getValue
()
Returns the attribute's ASN.1 DER-encoded value as a string.
int
BasicPermission.
hashCode
()
Returns the hash code value for this object.
int
CodeSource.
hashCode
()
Returns the hash code value for this object.
int
PKCS12Attribute.
hashCode
()
Returns the hashcode for this
PKCS12Attribute
.
int
UnresolvedPermission.
hashCode
()
Returns the hash code value for this object.
boolean
BasicPermission.
implies
(
Permission
p)
Checks if the specified permission is "implied" by
 this object.
boolean
Permissions.
implies
(
Permission
permission)
Checks to see if this object's
PermissionCollection
for
 permissions of the specified permission's class implies the permissions
 expressed in the
permission
object.
boolean
UnresolvedPermission.
implies
(
Permission
p)
This method always returns
false
for unresolved permissions.
Set
<
Object
>
Provider.
keySet
()
Returns an unmodifiable Set view of the property keys contained in
 this
Provider
.
void
Provider.
load
(
InputStream
inStream)
Reads a property list (key and element pairs) from the input stream.
Object
Provider.
merge
(
Object
key,
Object
value,
BiFunction
<? super
Object
,
? super
Object
,
? extends
Object
> remappingFunction)
If the specified key is not already associated with a value or is
 associated with
null
, associates it with the given value.
PermissionCollection
BasicPermission.
newPermissionCollection
()
Returns a new
PermissionCollection
object for storing
BasicPermission
objects.
PermissionCollection
UnresolvedPermission.
newPermissionCollection
()
Returns a new PermissionCollection object for storing
UnresolvedPermission
objects.
protected final int
SecureRandom.
next
(int numBits)
Generates an integer containing the user-specified number of
 pseudo-random bits (right justified, with leading zeros).
void
SecureRandom.
nextBytes
(byte[] bytes)
Generates a user-specified number of random bytes.
Object
Provider.
put
(
Object
key,
Object
value)
Sets the
key
property to have the specified
value
.
void
Provider.
putAll
(
Map
<?,
?> t)
Copies all the mappings from the specified Map to this
Provider
.
Object
Provider.
putIfAbsent
(
Object
key,
Object
value)
If the specified key is not already associated with a value (or is mapped
 to
null
) associates it with the given value and returns
null
, else returns the current value.
Object
Provider.
remove
(
Object
key)
Removes the
key
property (and its corresponding
value
).
boolean
Provider.
remove
(
Object
key,
Object
value)
Removes the entry for the specified key only if it is currently
 mapped to the specified value.
Object
Provider.
replace
(
Object
key,
Object
value)
Replaces the entry for the specified key only if it is
 currently mapped to some value.
boolean
Provider.
replace
(
Object
key,
Object
oldValue,
Object
newValue)
Replaces the entry for the specified key only if currently
 mapped to the specified value.
void
Provider.
replaceAll
(
BiFunction
<? super
Object
,
? super
Object
,
? extends
Object
> function)
Replaces each entry's value with the result of invoking the given
 function on that entry, in the order entries are returned by an entry
 set iterator, until all entries have been processed or the function
 throws an exception.
void
SecureRandom.
setSeed
(long seed)
Reseeds this random object, using the eight bytes contained
 in the given
long seed
.
String
CodeSource.
toString
()
Returns a string describing this
CodeSource
, telling its
 URL and certificates.
String
DrbgParameters.Instantiation.
toString
()
Returns a Human-readable string representation of this
Instantiation
.
String
PKCS12Attribute.
toString
()
Returns a string representation of this
PKCS12Attribute
.
String
ProtectionDomain.
toString
()
Convert a
ProtectionDomain
to a
String
.
String
SecureRandom.
toString
()
Returns a Human-readable string representation of this
SecureRandom
.
String
SecureRandomSpi.
toString
()
Returns a Human-readable string representation of this
SecureRandom
.
String
UnresolvedPermission.
toString
()
Returns a string describing this
UnresolvedPermission
.
Collection
<
Object
>
Provider.
values
()
Returns an unmodifiable Collection view of the property values
 contained in this
Provider
.
Uses of
Override
in
java.security.cert
Methods in
java.security.cert
with annotations of type
Override
Modifier and Type
Method
Description
void
PKIXCertPathChecker.
check
(
Certificate
cert)
Performs the check(s) on the specified certificate using its internal
 state.
Object
PKIXCertPathChecker.
clone
()
Returns a clone of this object.
PKIXRevocationChecker
PKIXRevocationChecker.
clone
()
URICertStoreParameters
URICertStoreParameters.
clone
()
Returns a copy of this object.
boolean
URICertStoreParameters.
equals
(
Object
p)
Compares the specified object with this parameters object for equality.
int
URICertStoreParameters.
hashCode
()
Returns a hash code value for this parameters object.
abstract void
PKIXCertPathChecker.
init
(boolean forward)
Initializes the internal state of this
PKIXCertPathChecker
.
abstract boolean
PKIXCertPathChecker.
isForwardCheckingSupported
()
Indicates if forward checking is supported.
String
URICertStoreParameters.
toString
()
Returns a formatted string describing the parameters
 including the URI used to construct this object.
Uses of
Override
in
java.sql
Methods in
java.sql
with annotations of type
Override
Modifier and Type
Method
Description
int
Timestamp.
hashCode
()
Returns a hash code value for this object.
Instant
Date.
toInstant
()
This method always throws an UnsupportedOperationException and should
 not be used because SQL
Date
values do not have a time
 component.
Instant
Time.
toInstant
()
This method always throws an UnsupportedOperationException and should
 not be used because SQL
Time
values do not have a date
 component.
Instant
Timestamp.
toInstant
()
Converts this
Timestamp
object to an
Instant
.
Uses of
Override
in
java.text
Methods in
java.text
with annotations of type
Override
Modifier and Type
Method
Description
Object
BreakIterator.
clone
()
Create a copy of this iterator
Object
Collator.
clone
()
Overrides Cloneable
CompactNumberFormat
CompactNumberFormat.
clone
()
Creates and returns a copy of this
CompactNumberFormat
instance.
Object
DecimalFormat.
clone
()
Standard override; no change in semantics.
Object
DecimalFormatSymbols.
clone
()
Standard override.
Object
NumberFormat.
clone
()
Overrides Cloneable.
Object
SimpleDateFormat.
clone
()
Creates a copy of this
SimpleDateFormat
.
int
Collator.
compare
(
Object
o1,
Object
o2)
Compares its two arguments for order.
boolean
Collator.
equals
(
Object
that)
Compares the equality of two Collators.
boolean
CompactNumberFormat.
equals
(
Object
obj)
Checks if this
CompactNumberFormat
is equal to the
 specified
obj
.
boolean
DecimalFormat.
equals
(
Object
obj)
Overrides equals
boolean
DecimalFormatSymbols.
equals
(
Object
obj)
Override equals.
boolean
NumberFormat.
equals
(
Object
obj)
Overrides equals.
boolean
SimpleDateFormat.
equals
(
Object
obj)
Compares the given object with this
SimpleDateFormat
for
 equality.
StringBuffer
CompactNumberFormat.
format
(double number,
StringBuffer
result,
FieldPosition
fieldPosition)
Formats a double to produce a string representing its compact form.
StringBuffer
CompactNumberFormat.
format
(long number,
StringBuffer
result,
FieldPosition
fieldPosition)
Formats a long to produce a string representing its compact form.
final
StringBuffer
CompactNumberFormat.
format
(
Object
number,
StringBuffer
toAppendTo,
FieldPosition
fieldPosition)
Formats a number to produce a string representing its compact form.
StringBuffer
DecimalFormat.
format
(double number,
StringBuffer
result,
FieldPosition
fieldPosition)
Formats a double to produce a string.
StringBuffer
DecimalFormat.
format
(long number,
StringBuffer
result,
FieldPosition
fieldPosition)
Format a long to produce a string.
final
StringBuffer
DecimalFormat.
format
(
Object
number,
StringBuffer
toAppendTo,
FieldPosition
pos)
Formats a number and appends the resulting text to the given string
 buffer.
StringBuffer
NumberFormat.
format
(
Object
number,
StringBuffer
toAppendTo,
FieldPosition
pos)
Formats a number and appends the resulting text to the given string
 buffer.
StringBuffer
SimpleDateFormat.
format
(
Date
date,
StringBuffer
toAppendTo,
FieldPosition
pos)
Formats the given
Date
into a date/time string and appends
 the result to the given
StringBuffer
.
AttributedCharacterIterator
CompactNumberFormat.
formatToCharacterIterator
(
Object
obj)
Formats an Object producing an
AttributedCharacterIterator
.
AttributedCharacterIterator
DecimalFormat.
formatToCharacterIterator
(
Object
obj)
Formats an Object producing an
AttributedCharacterIterator
.
AttributedCharacterIterator
SimpleDateFormat.
formatToCharacterIterator
(
Object
obj)
Formats an Object producing an
AttributedCharacterIterator
.
Currency
DecimalFormat.
getCurrency
()
Gets the currency used by this decimal format when formatting
 currency values.
int
DecimalFormat.
getMaximumFractionDigits
()
Gets the maximum number of digits allowed in the fraction portion of a
 number.
int
DecimalFormat.
getMaximumIntegerDigits
()
Gets the maximum number of digits allowed in the integer portion of a
 number.
int
DecimalFormat.
getMinimumFractionDigits
()
Gets the minimum number of digits allowed in the fraction portion of a
 number.
int
DecimalFormat.
getMinimumIntegerDigits
()
Gets the minimum number of digits allowed in the integer portion of a
 number.
RoundingMode
CompactNumberFormat.
getRoundingMode
()
Gets the
RoundingMode
used in this
CompactNumberFormat
.
RoundingMode
DecimalFormat.
getRoundingMode
()
Gets the
RoundingMode
used in this DecimalFormat.
abstract int
Collator.
hashCode
()
Generates the hash code for this Collator.
int
CompactNumberFormat.
hashCode
()
Returns the hash code for this
CompactNumberFormat
instance.
int
DateFormatSymbols.
hashCode
()
Override hashCode.
int
DecimalFormat.
hashCode
()
Overrides hashCode
int
DecimalFormatSymbols.
hashCode
()
Override hashCode.
int
NumberFormat.
hashCode
()
Overrides hashCode.
int
SimpleDateFormat.
hashCode
()
Returns the hash code value for this
SimpleDateFormat
object.
boolean
CompactNumberFormat.
isGroupingUsed
()
Returns true if grouping is used in this format.
boolean
CompactNumberFormat.
isParseIntegerOnly
()
Returns true if this format parses only an integer from the number
 component of a compact number.
Number
CompactNumberFormat.
parse
(
String
text,
ParsePosition
pos)
Parses a compact number from a string to produce a
Number
.
Number
DecimalFormat.
parse
(
String
text,
ParsePosition
pos)
Parses text from a string to produce a
Number
.
Date
SimpleDateFormat.
parse
(
String
text,
ParsePosition
pos)
Parses text from a string to produce a
Date
.
final
Object
NumberFormat.
parseObject
(
String
source,
ParsePosition
pos)
Parses text from a string to produce a
Number
.
protected
Object
DateFormat.Field.
readResolve
()
Resolves instances being deserialized to the predefined constants.
protected
Object
NumberFormat.Field.
readResolve
()
Resolves instances being deserialized to the predefined constants.
void
DecimalFormat.
setCurrency
(
Currency
currency)
Sets the currency used by this number format when formatting
 currency values.
void
CompactNumberFormat.
setGroupingUsed
(boolean newValue)
Sets whether or not grouping will be used in this format.
void
CompactNumberFormat.
setMaximumFractionDigits
(int newValue)
Sets the maximum number of digits allowed in the fraction portion of a
 number.
void
DecimalFormat.
setMaximumFractionDigits
(int newValue)
Sets the maximum number of digits allowed in the fraction portion of a
 number.
void
CompactNumberFormat.
setMaximumIntegerDigits
(int newValue)
Sets the maximum number of digits allowed in the integer portion of a
 number.
void
DecimalFormat.
setMaximumIntegerDigits
(int newValue)
Sets the maximum number of digits allowed in the integer portion of a
 number.
void
CompactNumberFormat.
setMinimumFractionDigits
(int newValue)
Sets the minimum number of digits allowed in the fraction portion of a
 number.
void
DecimalFormat.
setMinimumFractionDigits
(int newValue)
Sets the minimum number of digits allowed in the fraction portion of a
 number.
void
CompactNumberFormat.
setMinimumIntegerDigits
(int newValue)
Sets the minimum number of digits allowed in the integer portion of a
 number.
void
DecimalFormat.
setMinimumIntegerDigits
(int newValue)
Sets the minimum number of digits allowed in the integer portion of a
 number.
void
CompactNumberFormat.
setParseIntegerOnly
(boolean value)
Sets whether or not this format parses only an integer from the number
 component of a compact number.
void
CompactNumberFormat.
setRoundingMode
(
RoundingMode
roundingMode)
Sets the
RoundingMode
used in this
CompactNumberFormat
.
void
DecimalFormat.
setRoundingMode
(
RoundingMode
roundingMode)
Sets the
RoundingMode
used in this DecimalFormat.
Uses of
Override
in
java.time
Methods in
java.time
with annotations of type
Override
Modifier and Type
Method
Description
Temporal
Duration.
addTo
(
Temporal
temporal)
Adds this duration to the specified temporal object.
Temporal
Period.
addTo
(
Temporal
temporal)
Adds this period to the specified temporal object.
Temporal
DayOfWeek.
adjustInto
(
Temporal
temporal)
Adjusts the specified temporal object to have this day-of-week.
Temporal
Instant.
adjustInto
(
Temporal
temporal)
Adjusts the specified temporal object to have this instant.
Temporal
LocalDate.
adjustInto
(
Temporal
temporal)
Adjusts the specified temporal object to have the same date as this object.
Temporal
LocalDateTime.
adjustInto
(
Temporal
temporal)
Adjusts the specified temporal object to have the same date and time as this object.
Temporal
LocalTime.
adjustInto
(
Temporal
temporal)
Adjusts the specified temporal object to have the same time as this object.
Temporal
Month.
adjustInto
(
Temporal
temporal)
Adjusts the specified temporal object to have this month-of-year.
Temporal
MonthDay.
adjustInto
(
Temporal
temporal)
Adjusts the specified temporal object to have this month-day.
Temporal
OffsetDateTime.
adjustInto
(
Temporal
temporal)
Adjusts the specified temporal object to have the same offset, date
 and time as this object.
Temporal
OffsetTime.
adjustInto
(
Temporal
temporal)
Adjusts the specified temporal object to have the same offset and time
 as this object.
Temporal
Year.
adjustInto
(
Temporal
temporal)
Adjusts the specified temporal object to have this year.
Temporal
YearMonth.
adjustInto
(
Temporal
temporal)
Adjusts the specified temporal object to have this year-month.
Temporal
ZoneOffset.
adjustInto
(
Temporal
temporal)
Adjusts the specified temporal object to have the same offset as this object.
LocalDateTime
LocalDate.
atTime
(
LocalTime
time)
Combines this date with a time to create a
LocalDateTime
.
ZonedDateTime
LocalDateTime.
atZone
(
ZoneId
zone)
Combines this date-time with a time-zone to create a
ZonedDateTime
.
int
Duration.
compareTo
(
Duration
otherDuration)
Compares this duration to the specified
Duration
.
int
Instant.
compareTo
(
Instant
otherInstant)
Compares this instant to the specified instant.
int
LocalDate.
compareTo
(
ChronoLocalDate
other)
Compares this date to another date.
int
LocalDateTime.
compareTo
(
ChronoLocalDateTime
<?> other)
Compares this date-time to another date-time.
int
LocalTime.
compareTo
(
LocalTime
other)
Compares this time to another time.
int
MonthDay.
compareTo
(
MonthDay
other)
Compares this month-day to another month-day.
int
OffsetDateTime.
compareTo
(
OffsetDateTime
other)
Compares this date-time to another date-time.
int
OffsetTime.
compareTo
(
OffsetTime
other)
Compares this
OffsetTime
to another time.
int
Year.
compareTo
(
Year
other)
Compares this year to another year.
int
YearMonth.
compareTo
(
YearMonth
other)
Compares this year-month to another year-month.
int
ZoneOffset.
compareTo
(
ZoneOffset
other)
Compares this offset to another offset in descending order.
boolean
Clock.
equals
(
Object
obj)
Checks if this clock is equal to another clock.
boolean
Duration.
equals
(
Object
other)
Checks if this duration is equal to the specified
Duration
.
boolean
Instant.
equals
(
Object
other)
Checks if this instant is equal to the specified instant.
boolean
LocalDate.
equals
(
Object
obj)
Checks if this date is equal to another date.
boolean
LocalDateTime.
equals
(
Object
obj)
Checks if this date-time is equal to another date-time.
boolean
LocalTime.
equals
(
Object
obj)
Checks if this time is equal to another time.
boolean
MonthDay.
equals
(
Object
obj)
Checks if this month-day is equal to another month-day.
boolean
OffsetDateTime.
equals
(
Object
obj)
Checks if this date-time is equal to another date-time.
boolean
OffsetTime.
equals
(
Object
obj)
Checks if this time is equal to another time.
boolean
Period.
equals
(
Object
obj)
Checks if this period is equal to another period.
boolean
Year.
equals
(
Object
obj)
Checks if this year is equal to another year.
boolean
YearMonth.
equals
(
Object
obj)
Checks if this year-month is equal to another year-month.
boolean
ZonedDateTime.
equals
(
Object
obj)
Checks if this date-time is equal to another date-time.
boolean
ZoneId.
equals
(
Object
obj)
Checks if this time-zone ID is equal to another time-zone ID.
boolean
ZoneOffset.
equals
(
Object
obj)
Checks if this offset is equal to another offset.
String
LocalDate.
format
(
DateTimeFormatter
formatter)
Formats this date using the specified formatter.
String
LocalDateTime.
format
(
DateTimeFormatter
formatter)
Formats this date-time using the specified formatter.
String
ZonedDateTime.
format
(
DateTimeFormatter
formatter)
Formats this date-time using the specified formatter.
int
DayOfWeek.
get
(
TemporalField
field)
Gets the value of the specified field from this day-of-week as an
int
.
long
Duration.
get
(
TemporalUnit
unit)
Gets the value of the requested unit.
int
Instant.
get
(
TemporalField
field)
Gets the value of the specified field from this instant as an
int
.
int
LocalDate.
get
(
TemporalField
field)
Gets the value of the specified field from this date as an
int
.
int
LocalDateTime.
get
(
TemporalField
field)
Gets the value of the specified field from this date-time as an
int
.
int
LocalTime.
get
(
TemporalField
field)
Gets the value of the specified field from this time as an
int
.
int
Month.
get
(
TemporalField
field)
Gets the value of the specified field from this month-of-year as an
int
.
int
MonthDay.
get
(
TemporalField
field)
Gets the value of the specified field from this month-day as an
int
.
int
OffsetDateTime.
get
(
TemporalField
field)
Gets the value of the specified field from this date-time as an
int
.
int
OffsetTime.
get
(
TemporalField
field)
Gets the value of the specified field from this time as an
int
.
long
Period.
get
(
TemporalUnit
unit)
Gets the value of the requested unit.
int
Year.
get
(
TemporalField
field)
Gets the value of the specified field from this year as an
int
.
int
YearMonth.
get
(
TemporalField
field)
Gets the value of the specified field from this year-month as an
int
.
int
ZonedDateTime.
get
(
TemporalField
field)
Gets the value of the specified field from this date-time as an
int
.
int
ZoneOffset.
get
(
TemporalField
field)
Gets the value of the specified field from this offset as an
int
.
IsoChronology
LocalDate.
getChronology
()
Gets the chronology of this date, which is the ISO calendar system.
IsoChronology
Period.
getChronology
()
Gets the chronology of this period, which is the ISO calendar system.
IsoEra
LocalDate.
getEra
()
Gets the era applicable at this date.
String
ZoneOffset.
getId
()
Gets the normalized zone offset ID.
long
DayOfWeek.
getLong
(
TemporalField
field)
Gets the value of the specified field from this day-of-week as a
long
.
long
Instant.
getLong
(
TemporalField
field)
Gets the value of the specified field from this instant as a
long
.
long
LocalDate.
getLong
(
TemporalField
field)
Gets the value of the specified field from this date as a
long
.
long
LocalDateTime.
getLong
(
TemporalField
field)
Gets the value of the specified field from this date-time as a
long
.
long
LocalTime.
getLong
(
TemporalField
field)
Gets the value of the specified field from this time as a
long
.
long
Month.
getLong
(
TemporalField
field)
Gets the value of the specified field from this month-of-year as a
long
.
long
MonthDay.
getLong
(
TemporalField
field)
Gets the value of the specified field from this month-day as a
long
.
long
OffsetDateTime.
getLong
(
TemporalField
field)
Gets the value of the specified field from this date-time as a
long
.
long
OffsetTime.
getLong
(
TemporalField
field)
Gets the value of the specified field from this time as a
long
.
long
Year.
getLong
(
TemporalField
field)
Gets the value of the specified field from this year as a
long
.
long
YearMonth.
getLong
(
TemporalField
field)
Gets the value of the specified field from this year-month as a
long
.
long
ZonedDateTime.
getLong
(
TemporalField
field)
Gets the value of the specified field from this date-time as a
long
.
long
ZoneOffset.
getLong
(
TemporalField
field)
Gets the value of the specified field from this offset as a
long
.
ZoneOffset
ZonedDateTime.
getOffset
()
Gets the zone offset, such as '+01:00'.
ZoneRules
ZoneOffset.
getRules
()
Gets the associated time-zone rules.
List
<
TemporalUnit
>
Duration.
getUnits
()
Gets the set of units supported by this duration.
List
<
TemporalUnit
>
Period.
getUnits
()
Gets the set of units supported by this period.
ZoneId
ZonedDateTime.
getZone
()
Gets the time-zone, such as 'Europe/Paris'.
int
Clock.
hashCode
()
A hash code for this clock.
int
Duration.
hashCode
()
A hash code for this duration.
int
Instant.
hashCode
()
Returns a hash code for this instant.
int
LocalDate.
hashCode
()
A hash code for this date.
int
LocalDateTime.
hashCode
()
A hash code for this date-time.
int
LocalTime.
hashCode
()
A hash code for this time.
int
MonthDay.
hashCode
()
A hash code for this month-day.
int
OffsetDateTime.
hashCode
()
A hash code for this date-time.
int
OffsetTime.
hashCode
()
A hash code for this time.
int
Period.
hashCode
()
A hash code for this period.
int
Year.
hashCode
()
A hash code for this year.
int
YearMonth.
hashCode
()
A hash code for this year-month.
int
ZonedDateTime.
hashCode
()
A hash code for this date-time.
int
ZoneId.
hashCode
()
A hash code for this time-zone ID.
int
ZoneOffset.
hashCode
()
A hash code for this offset.
abstract
Instant
Clock.
instant
()
Gets the current instant of the clock.
boolean
LocalDate.
isAfter
(
ChronoLocalDate
other)
Checks if this date is after the specified date.
boolean
LocalDateTime.
isAfter
(
ChronoLocalDateTime
<?> other)
Checks if this date-time is after the specified date-time.
boolean
LocalDate.
isBefore
(
ChronoLocalDate
other)
Checks if this date is before the specified date.
boolean
LocalDateTime.
isBefore
(
ChronoLocalDateTime
<?> other)
Checks if this date-time is before the specified date-time.
boolean
LocalDate.
isEqual
(
ChronoLocalDate
other)
Checks if this date is equal to the specified date.
boolean
LocalDateTime.
isEqual
(
ChronoLocalDateTime
<?> other)
Checks if this date-time is equal to the specified date-time.
boolean
LocalDate.
isLeapYear
()
Checks if the year is a leap year, according to the ISO proleptic
 calendar system rules.
boolean
DayOfWeek.
isSupported
(
TemporalField
field)
Checks if the specified field is supported.
boolean
Instant.
isSupported
(
TemporalField
field)
Checks if the specified field is supported.
boolean
Instant.
isSupported
(
TemporalUnit
unit)
Checks if the specified unit is supported.
boolean
LocalDate.
isSupported
(
TemporalField
field)
Checks if the specified field is supported.
boolean
LocalDate.
isSupported
(
TemporalUnit
unit)
Checks if the specified unit is supported.
boolean
LocalDateTime.
isSupported
(
TemporalField
field)
Checks if the specified field is supported.
boolean
LocalDateTime.
isSupported
(
TemporalUnit
unit)
Checks if the specified unit is supported.
boolean
LocalTime.
isSupported
(
TemporalField
field)
Checks if the specified field is supported.
boolean
LocalTime.
isSupported
(
TemporalUnit
unit)
Checks if the specified unit is supported.
boolean
Month.
isSupported
(
TemporalField
field)
Checks if the specified field is supported.
boolean
MonthDay.
isSupported
(
TemporalField
field)
Checks if the specified field is supported.
boolean
OffsetDateTime.
isSupported
(
TemporalField
field)
Checks if the specified field is supported.
boolean
OffsetDateTime.
isSupported
(
TemporalUnit
unit)
Checks if the specified unit is supported.
boolean
OffsetTime.
isSupported
(
TemporalField
field)
Checks if the specified field is supported.
boolean
OffsetTime.
isSupported
(
TemporalUnit
unit)
Checks if the specified unit is supported.
boolean
Year.
isSupported
(
TemporalField
field)
Checks if the specified field is supported.
boolean
Year.
isSupported
(
TemporalUnit
unit)
Checks if the specified unit is supported.
boolean
YearMonth.
isSupported
(
TemporalField
field)
Checks if the specified field is supported.
boolean
YearMonth.
isSupported
(
TemporalUnit
unit)
Checks if the specified unit is supported.
boolean
ZonedDateTime.
isSupported
(
TemporalField
field)
Checks if the specified field is supported.
boolean
ZonedDateTime.
isSupported
(
TemporalUnit
unit)
Checks if the specified unit is supported.
boolean
ZoneOffset.
isSupported
(
TemporalField
field)
Checks if the specified field is supported.
int
LocalDate.
lengthOfMonth
()
Returns the length of the month represented by this date.
int
LocalDate.
lengthOfYear
()
Returns the length of the year represented by this date.
long
Clock.
millis
()
Gets the current millisecond instant of the clock.
Instant
Instant.
minus
(long amountToSubtract,
TemporalUnit
unit)
Returns a copy of this instant with the specified amount subtracted.
Instant
Instant.
minus
(
TemporalAmount
amountToSubtract)
Returns a copy of this instant with the specified amount subtracted.
LocalDate
LocalDate.
minus
(long amountToSubtract,
TemporalUnit
unit)
Returns a copy of this date with the specified amount subtracted.
LocalDate
LocalDate.
minus
(
TemporalAmount
amountToSubtract)
Returns a copy of this date with the specified amount subtracted.
LocalDateTime
LocalDateTime.
minus
(long amountToSubtract,
TemporalUnit
unit)
Returns a copy of this date-time with the specified amount subtracted.
LocalDateTime
LocalDateTime.
minus
(
TemporalAmount
amountToSubtract)
Returns a copy of this date-time with the specified amount subtracted.
LocalTime
LocalTime.
minus
(long amountToSubtract,
TemporalUnit
unit)
Returns a copy of this time with the specified amount subtracted.
LocalTime
LocalTime.
minus
(
TemporalAmount
amountToSubtract)
Returns a copy of this time with the specified amount subtracted.
OffsetDateTime
OffsetDateTime.
minus
(long amountToSubtract,
TemporalUnit
unit)
Returns a copy of this date-time with the specified amount subtracted.
OffsetDateTime
OffsetDateTime.
minus
(
TemporalAmount
amountToSubtract)
Returns a copy of this date-time with the specified amount subtracted.
OffsetTime
OffsetTime.
minus
(long amountToSubtract,
TemporalUnit
unit)
Returns a copy of this time with the specified amount subtracted.
OffsetTime
OffsetTime.
minus
(
TemporalAmount
amountToSubtract)
Returns a copy of this time with the specified amount subtracted.
Year
Year.
minus
(long amountToSubtract,
TemporalUnit
unit)
Returns a copy of this year with the specified amount subtracted.
Year
Year.
minus
(
TemporalAmount
amountToSubtract)
Returns a copy of this year with the specified amount subtracted.
YearMonth
YearMonth.
minus
(long amountToSubtract,
TemporalUnit
unit)
Returns a copy of this year-month with the specified amount subtracted.
YearMonth
YearMonth.
minus
(
TemporalAmount
amountToSubtract)
Returns a copy of this year-month with the specified amount subtracted.
ZonedDateTime
ZonedDateTime.
minus
(long amountToSubtract,
TemporalUnit
unit)
Returns a copy of this date-time with the specified amount subtracted.
ZonedDateTime
ZonedDateTime.
minus
(
TemporalAmount
amountToSubtract)
Returns a copy of this date-time with the specified amount subtracted.
Instant
Instant.
plus
(long amountToAdd,
TemporalUnit
unit)
Returns a copy of this instant with the specified amount added.
Instant
Instant.
plus
(
TemporalAmount
amountToAdd)
Returns a copy of this instant with the specified amount added.
LocalDate
LocalDate.
plus
(long amountToAdd,
TemporalUnit
unit)
Returns a copy of this date with the specified amount added.
LocalDate
LocalDate.
plus
(
TemporalAmount
amountToAdd)
Returns a copy of this date with the specified amount added.
LocalDateTime
LocalDateTime.
plus
(long amountToAdd,
TemporalUnit
unit)
Returns a copy of this date-time with the specified amount added.
LocalDateTime
LocalDateTime.
plus
(
TemporalAmount
amountToAdd)
Returns a copy of this date-time with the specified amount added.
LocalTime
LocalTime.
plus
(long amountToAdd,
TemporalUnit
unit)
Returns a copy of this time with the specified amount added.
LocalTime
LocalTime.
plus
(
TemporalAmount
amountToAdd)
Returns a copy of this time with the specified amount added.
OffsetDateTime
OffsetDateTime.
plus
(long amountToAdd,
TemporalUnit
unit)
Returns a copy of this date-time with the specified amount added.
OffsetDateTime
OffsetDateTime.
plus
(
TemporalAmount
amountToAdd)
Returns a copy of this date-time with the specified amount added.
OffsetTime
OffsetTime.
plus
(long amountToAdd,
TemporalUnit
unit)
Returns a copy of this time with the specified amount added.
OffsetTime
OffsetTime.
plus
(
TemporalAmount
amountToAdd)
Returns a copy of this time with the specified amount added.
Year
Year.
plus
(long amountToAdd,
TemporalUnit
unit)
Returns a copy of this year with the specified amount added.
Year
Year.
plus
(
TemporalAmount
amountToAdd)
Returns a copy of this year with the specified amount added.
YearMonth
YearMonth.
plus
(long amountToAdd,
TemporalUnit
unit)
Returns a copy of this year-month with the specified amount added.
YearMonth
YearMonth.
plus
(
TemporalAmount
amountToAdd)
Returns a copy of this year-month with the specified amount added.
ZonedDateTime
ZonedDateTime.
plus
(long amountToAdd,
TemporalUnit
unit)
Returns a copy of this date-time with the specified amount added.
ZonedDateTime
ZonedDateTime.
plus
(
TemporalAmount
amountToAdd)
Returns a copy of this date-time with the specified amount added.
<R> R
DayOfWeek.
query
(
TemporalQuery
<R> query)
Queries this day-of-week using the specified query.
<R> R
Instant.
query
(
TemporalQuery
<R> query)
Queries this instant using the specified query.
<R> R
LocalDate.
query
(
TemporalQuery
<R> query)
Queries this date using the specified query.
<R> R
LocalDateTime.
query
(
TemporalQuery
<R> query)
Queries this date-time using the specified query.
<R> R
LocalTime.
query
(
TemporalQuery
<R> query)
Queries this time using the specified query.
<R> R
Month.
query
(
TemporalQuery
<R> query)
Queries this month-of-year using the specified query.
<R> R
MonthDay.
query
(
TemporalQuery
<R> query)
Queries this month-day using the specified query.
<R> R
OffsetDateTime.
query
(
TemporalQuery
<R> query)
Queries this date-time using the specified query.
<R> R
OffsetTime.
query
(
TemporalQuery
<R> query)
Queries this time using the specified query.
<R> R
Year.
query
(
TemporalQuery
<R> query)
Queries this year using the specified query.
<R> R
YearMonth.
query
(
TemporalQuery
<R> query)
Queries this year-month using the specified query.
<R> R
ZonedDateTime.
query
(
TemporalQuery
<R> query)
Queries this date-time using the specified query.
<R> R
ZoneOffset.
query
(
TemporalQuery
<R> query)
Queries this offset using the specified query.
ValueRange
DayOfWeek.
range
(
TemporalField
field)
Gets the range of valid values for the specified field.
ValueRange
Instant.
range
(
TemporalField
field)
Gets the range of valid values for the specified field.
ValueRange
LocalDate.
range
(
TemporalField
field)
Gets the range of valid values for the specified field.
ValueRange
LocalDateTime.
range
(
TemporalField
field)
Gets the range of valid values for the specified field.
ValueRange
LocalTime.
range
(
TemporalField
field)
Gets the range of valid values for the specified field.
ValueRange
Month.
range
(
TemporalField
field)
Gets the range of valid values for the specified field.
ValueRange
MonthDay.
range
(
TemporalField
field)
Gets the range of valid values for the specified field.
ValueRange
OffsetDateTime.
range
(
TemporalField
field)
Gets the range of valid values for the specified field.
ValueRange
OffsetTime.
range
(
TemporalField
field)
Gets the range of valid values for the specified field.
ValueRange
Year.
range
(
TemporalField
field)
Gets the range of valid values for the specified field.
ValueRange
YearMonth.
range
(
TemporalField
field)
Gets the range of valid values for the specified field.
ValueRange
ZonedDateTime.
range
(
TemporalField
field)
Gets the range of valid values for the specified field.
ValueRange
ZoneOffset.
range
(
TemporalField
field)
Gets the range of valid values for the specified field.
Temporal
Duration.
subtractFrom
(
Temporal
temporal)
Subtracts this duration from the specified temporal object.
Temporal
Period.
subtractFrom
(
Temporal
temporal)
Subtracts this period from the specified temporal object.
LocalDate
LocalDateTime.
toLocalDate
()
Gets the
LocalDate
part of this date-time.
LocalDate
ZonedDateTime.
toLocalDate
()
Gets the
LocalDate
part of this date-time.
LocalDateTime
ZonedDateTime.
toLocalDateTime
()
Gets the
LocalDateTime
part of this date-time.
LocalTime
LocalDateTime.
toLocalTime
()
Gets the
LocalTime
part of this date-time.
LocalTime
ZonedDateTime.
toLocalTime
()
Gets the
LocalTime
part of this date-time.
String
Duration.
toString
()
A string representation of this duration using ISO-8601 seconds
 based representation, such as
PT8H6M12.345S
.
String
Instant.
toString
()
A string representation of this instant using ISO-8601 representation.
String
LocalDate.
toString
()
Outputs this date as a
String
, such as
2007-12-03
.
String
LocalDateTime.
toString
()
Outputs this date-time as a
String
, such as
2007-12-03T10:15:30
.
String
LocalTime.
toString
()
Outputs this time as a
String
, such as
10:15
.
String
MonthDay.
toString
()
Outputs this month-day as a
String
, such as
--12-03
.
String
OffsetDateTime.
toString
()
Outputs this date-time as a
String
, such as
2007-12-03T10:15:30+01:00
.
String
OffsetTime.
toString
()
Outputs this time as a
String
, such as
10:15:30+01:00
.
String
Period.
toString
()
Outputs this period as a
String
, such as
P6Y3M1D
.
String
Year.
toString
()
Outputs this year as a
String
.
String
YearMonth.
toString
()
Outputs this year-month as a
String
, such as
2007-12
.
String
ZonedDateTime.
toString
()
Outputs this date-time as a
String
, such as
2007-12-03T10:15:30+01:00[Europe/Paris]
.
String
ZoneId.
toString
()
Outputs this zone as a
String
, using the ID.
String
ZoneOffset.
toString
()
Outputs this offset as a
String
, using the normalized ID.
long
Instant.
until
(
Temporal
endExclusive,
TemporalUnit
unit)
Calculates the amount of time until another instant in terms of the specified unit.
Period
LocalDate.
until
(
ChronoLocalDate
endDateExclusive)
Calculates the period between this date and another date as a
Period
.
long
LocalDate.
until
(
Temporal
endExclusive,
TemporalUnit
unit)
Calculates the amount of time until another date in terms of the specified unit.
long
LocalDateTime.
until
(
Temporal
endExclusive,
TemporalUnit
unit)
Calculates the amount of time until another date-time in terms of the specified unit.
long
LocalTime.
until
(
Temporal
endExclusive,
TemporalUnit
unit)
Calculates the amount of time until another time in terms of the specified unit.
long
OffsetDateTime.
until
(
Temporal
endExclusive,
TemporalUnit
unit)
Calculates the amount of time until another date-time in terms of the specified unit.
long
OffsetTime.
until
(
Temporal
endExclusive,
TemporalUnit
unit)
Calculates the amount of time until another time in terms of the specified unit.
long
Year.
until
(
Temporal
endExclusive,
TemporalUnit
unit)
Calculates the amount of time until another year in terms of the specified unit.
long
YearMonth.
until
(
Temporal
endExclusive,
TemporalUnit
unit)
Calculates the amount of time until another year-month in terms of the specified unit.
long
ZonedDateTime.
until
(
Temporal
endExclusive,
TemporalUnit
unit)
Calculates the amount of time until another date-time in terms of the specified unit.
Instant
Instant.
with
(
TemporalAdjuster
adjuster)
Returns an adjusted copy of this instant.
Instant
Instant.
with
(
TemporalField
field,
 long newValue)
Returns a copy of this instant with the specified field set to a new value.
LocalDate
LocalDate.
with
(
TemporalAdjuster
adjuster)
Returns an adjusted copy of this date.
LocalDate
LocalDate.
with
(
TemporalField
field,
 long newValue)
Returns a copy of this date with the specified field set to a new value.
LocalDateTime
LocalDateTime.
with
(
TemporalAdjuster
adjuster)
Returns an adjusted copy of this date-time.
LocalDateTime
LocalDateTime.
with
(
TemporalField
field,
 long newValue)
Returns a copy of this date-time with the specified field set to a new value.
LocalTime
LocalTime.
with
(
TemporalAdjuster
adjuster)
Returns an adjusted copy of this time.
LocalTime
LocalTime.
with
(
TemporalField
field,
 long newValue)
Returns a copy of this time with the specified field set to a new value.
OffsetDateTime
OffsetDateTime.
with
(
TemporalAdjuster
adjuster)
Returns an adjusted copy of this date-time.
OffsetDateTime
OffsetDateTime.
with
(
TemporalField
field,
 long newValue)
Returns a copy of this date-time with the specified field set to a new value.
OffsetTime
OffsetTime.
with
(
TemporalAdjuster
adjuster)
Returns an adjusted copy of this time.
OffsetTime
OffsetTime.
with
(
TemporalField
field,
 long newValue)
Returns a copy of this time with the specified field set to a new value.
Year
Year.
with
(
TemporalAdjuster
adjuster)
Returns an adjusted copy of this year.
Year
Year.
with
(
TemporalField
field,
 long newValue)
Returns a copy of this year with the specified field set to a new value.
YearMonth
YearMonth.
with
(
TemporalAdjuster
adjuster)
Returns an adjusted copy of this year-month.
YearMonth
YearMonth.
with
(
TemporalField
field,
 long newValue)
Returns a copy of this year-month with the specified field set to a new value.
ZonedDateTime
ZonedDateTime.
with
(
TemporalAdjuster
adjuster)
Returns an adjusted copy of this date-time.
ZonedDateTime
ZonedDateTime.
with
(
TemporalField
field,
 long newValue)
Returns a copy of this date-time with the specified field set to a new value.
ZonedDateTime
ZonedDateTime.
withEarlierOffsetAtOverlap
()
Returns a copy of this date-time changing the zone offset to the
 earlier of the two valid offsets at a local time-line overlap.
ZonedDateTime
ZonedDateTime.
withLaterOffsetAtOverlap
()
Returns a copy of this date-time changing the zone offset to the
 later of the two valid offsets at a local time-line overlap.
abstract
Clock
Clock.
withZone
(
ZoneId
zone)
Returns a copy of this clock with a different time-zone.
ZonedDateTime
ZonedDateTime.
withZoneSameInstant
(
ZoneId
zone)
Returns a copy of this date-time with a different time-zone,
 retaining the instant.
ZonedDateTime
ZonedDateTime.
withZoneSameLocal
(
ZoneId
zone)
Returns a copy of this date-time with a different time-zone,
 retaining the local date-time if possible.
Uses of
Override
in
java.time.chrono
Methods in
java.time.chrono
with annotations of type
Override
Modifier and Type
Method
Description
Temporal
ChronoPeriod.
addTo
(
Temporal
temporal)
Adds this period to the specified temporal object.
default
Temporal
ChronoLocalDate.
adjustInto
(
Temporal
temporal)
Adjusts the specified temporal object to have the same date as this object.
default
Temporal
ChronoLocalDateTime.
adjustInto
(
Temporal
temporal)
Adjusts the specified temporal object to have the same date and time as this object.
default
Temporal
Era.
adjustInto
(
Temporal
temporal)
Adjusts the specified temporal object to have the same era as this object.
final
ChronoLocalDateTime
<
HijrahDate
>
HijrahDate.
atTime
(
LocalTime
localTime)
final
ChronoLocalDateTime
<
JapaneseDate
>
JapaneseDate.
atTime
(
LocalTime
localTime)
final
ChronoLocalDateTime
<
MinguoDate
>
MinguoDate.
atTime
(
LocalTime
localTime)
final
ChronoLocalDateTime
<
ThaiBuddhistDate
>
ThaiBuddhistDate.
atTime
(
LocalTime
localTime)
int
AbstractChronology.
compareTo
(
Chronology
other)
Compares this chronology to another chronology.
default int
ChronoLocalDate.
compareTo
(
ChronoLocalDate
other)
Compares this date to another date, including the chronology.
default int
ChronoLocalDateTime.
compareTo
(
ChronoLocalDateTime
<?> other)
Compares this date-time to another date-time, including the chronology.
int
Chronology.
compareTo
(
Chronology
other)
Compares this chronology to another chronology.
default int
ChronoZonedDateTime.
compareTo
(
ChronoZonedDateTime
<?> other)
Compares this date-time to another date-time, including the chronology.
HijrahDate
HijrahChronology.
date
(int prolepticYear,
 int month,
 int dayOfMonth)
Obtains a local date in Hijrah calendar system from the
 proleptic-year, month-of-year and day-of-month fields.
HijrahDate
HijrahChronology.
date
(
Era
era,
 int yearOfEra,
 int month,
 int dayOfMonth)
Obtains a local date in Hijrah calendar system from the
 era, year-of-era, month-of-year and day-of-month fields.
HijrahDate
HijrahChronology.
date
(
TemporalAccessor
temporal)
LocalDate
IsoChronology.
date
(int prolepticYear,
 int month,
 int dayOfMonth)
Obtains an ISO local date from the proleptic-year, month-of-year
 and day-of-month fields.
LocalDate
IsoChronology.
date
(
Era
era,
 int yearOfEra,
 int month,
 int dayOfMonth)
Obtains an ISO local date from the era, year-of-era, month-of-year
 and day-of-month fields.
LocalDate
IsoChronology.
date
(
TemporalAccessor
temporal)
Obtains an ISO local date from another date-time object.
JapaneseDate
JapaneseChronology.
date
(int prolepticYear,
 int month,
 int dayOfMonth)
Obtains a local date in Japanese calendar system from the
 proleptic-year, month-of-year and day-of-month fields.
JapaneseDate
JapaneseChronology.
date
(
Era
era,
 int yearOfEra,
 int month,
 int dayOfMonth)
Obtains a local date in Japanese calendar system from the
 era, year-of-era, month-of-year and day-of-month fields.
JapaneseDate
JapaneseChronology.
date
(
TemporalAccessor
temporal)
MinguoDate
MinguoChronology.
date
(int prolepticYear,
 int month,
 int dayOfMonth)
Obtains a local date in Minguo calendar system from the
 proleptic-year, month-of-year and day-of-month fields.
MinguoDate
MinguoChronology.
date
(
Era
era,
 int yearOfEra,
 int month,
 int dayOfMonth)
Obtains a local date in Minguo calendar system from the
 era, year-of-era, month-of-year and day-of-month fields.
MinguoDate
MinguoChronology.
date
(
TemporalAccessor
temporal)
ThaiBuddhistDate
ThaiBuddhistChronology.
date
(int prolepticYear,
 int month,
 int dayOfMonth)
Obtains a local date in Thai Buddhist calendar system from the
 proleptic-year, month-of-year and day-of-month fields.
ThaiBuddhistDate
ThaiBuddhistChronology.
date
(
Era
era,
 int yearOfEra,
 int month,
 int dayOfMonth)
Obtains a local date in Thai Buddhist calendar system from the
 era, year-of-era, month-of-year and day-of-month fields.
ThaiBuddhistDate
ThaiBuddhistChronology.
date
(
TemporalAccessor
temporal)
HijrahDate
HijrahChronology.
dateEpochDay
(long epochDay)
Obtains a local date in the Hijrah calendar system from the epoch-day.
LocalDate
IsoChronology.
dateEpochDay
(long epochDay)
Obtains an ISO local date from the epoch-day.
JapaneseDate
JapaneseChronology.
dateEpochDay
(long epochDay)
Obtains a local date in the Japanese calendar system from the epoch-day.
MinguoDate
MinguoChronology.
dateEpochDay
(long epochDay)
Obtains a local date in the Minguo calendar system from the epoch-day.
ThaiBuddhistDate
ThaiBuddhistChronology.
dateEpochDay
(long epochDay)
Obtains a local date in the Thai Buddhist calendar system from the epoch-day.
HijrahDate
HijrahChronology.
dateNow
()
HijrahDate
HijrahChronology.
dateNow
(
Clock
clock)
HijrahDate
HijrahChronology.
dateNow
(
ZoneId
zone)
LocalDate
IsoChronology.
dateNow
()
Obtains the current ISO local date from the system clock in the default time-zone.
LocalDate
IsoChronology.
dateNow
(
Clock
clock)
Obtains the current ISO local date from the specified clock.
LocalDate
IsoChronology.
dateNow
(
ZoneId
zone)
Obtains the current ISO local date from the system clock in the specified time-zone.
JapaneseDate
JapaneseChronology.
dateNow
()
JapaneseDate
JapaneseChronology.
dateNow
(
Clock
clock)
JapaneseDate
JapaneseChronology.
dateNow
(
ZoneId
zone)
MinguoDate
MinguoChronology.
dateNow
()
MinguoDate
MinguoChronology.
dateNow
(
Clock
clock)
MinguoDate
MinguoChronology.
dateNow
(
ZoneId
zone)
ThaiBuddhistDate
ThaiBuddhistChronology.
dateNow
()
ThaiBuddhistDate
ThaiBuddhistChronology.
dateNow
(
Clock
clock)
ThaiBuddhistDate
ThaiBuddhistChronology.
dateNow
(
ZoneId
zone)
HijrahDate
HijrahChronology.
dateYearDay
(int prolepticYear,
 int dayOfYear)
Obtains a local date in Hijrah calendar system from the
 proleptic-year and day-of-year fields.
HijrahDate
HijrahChronology.
dateYearDay
(
Era
era,
 int yearOfEra,
 int dayOfYear)
Obtains a local date in Hijrah calendar system from the
 era, year-of-era and day-of-year fields.
LocalDate
IsoChronology.
dateYearDay
(int prolepticYear,
 int dayOfYear)
Obtains an ISO local date from the proleptic-year and day-of-year fields.
LocalDate
IsoChronology.
dateYearDay
(
Era
era,
 int yearOfEra,
 int dayOfYear)
Obtains an ISO local date from the era, year-of-era and day-of-year fields.
JapaneseDate
JapaneseChronology.
dateYearDay
(int prolepticYear,
 int dayOfYear)
Obtains a local date in Japanese calendar system from the
 proleptic-year and day-of-year fields.
JapaneseDate
JapaneseChronology.
dateYearDay
(
Era
era,
 int yearOfEra,
 int dayOfYear)
Obtains a local date in Japanese calendar system from the
 era, year-of-era and day-of-year fields.
MinguoDate
MinguoChronology.
dateYearDay
(int prolepticYear,
 int dayOfYear)
Obtains a local date in Minguo calendar system from the
 proleptic-year and day-of-year fields.
MinguoDate
MinguoChronology.
dateYearDay
(
Era
era,
 int yearOfEra,
 int dayOfYear)
Obtains a local date in Minguo calendar system from the
 era, year-of-era and day-of-year fields.
ThaiBuddhistDate
ThaiBuddhistChronology.
dateYearDay
(int prolepticYear,
 int dayOfYear)
Obtains a local date in Thai Buddhist calendar system from the
 proleptic-year and day-of-year fields.
ThaiBuddhistDate
ThaiBuddhistChronology.
dateYearDay
(
Era
era,
 int yearOfEra,
 int dayOfYear)
Obtains a local date in Thai Buddhist calendar system from the
 era, year-of-era and day-of-year fields.
long
IsoChronology.
epochSecond
(int prolepticYear,
 int month,
 int dayOfMonth,
 int hour,
 int minute,
 int second,
ZoneOffset
zoneOffset)
Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z.
boolean
AbstractChronology.
equals
(
Object
obj)
Checks if this chronology is equal to another chronology.
boolean
ChronoLocalDate.
equals
(
Object
obj)
Checks if this date is equal to another date, including the chronology.
boolean
ChronoLocalDateTime.
equals
(
Object
obj)
Checks if this date-time is equal to another date-time, including the chronology.
boolean
Chronology.
equals
(
Object
obj)
Checks if this chronology is equal to another chronology.
boolean
ChronoPeriod.
equals
(
Object
obj)
Checks if this period is equal to another period, including the chronology.
boolean
ChronoZonedDateTime.
equals
(
Object
obj)
Checks if this date-time is equal to another date-time.
boolean
HijrahDate.
equals
(
Object
obj)
Compares this date to another date, including the chronology.
boolean
JapaneseDate.
equals
(
Object
obj)
Compares this date to another date, including the chronology.
boolean
MinguoDate.
equals
(
Object
obj)
Compares this date to another date, including the chronology.
boolean
ThaiBuddhistDate.
equals
(
Object
obj)
Compares this date to another date, including the chronology.
HijrahEra
HijrahChronology.
eraOf
(int eraValue)
Creates the HijrahEra object from the numeric value.
IsoEra
IsoChronology.
eraOf
(int eraValue)
JapaneseEra
JapaneseChronology.
eraOf
(int eraValue)
Returns the calendar system era object from the given numeric value.
MinguoEra
MinguoChronology.
eraOf
(int eraValue)
ThaiBuddhistEra
ThaiBuddhistChronology.
eraOf
(int eraValue)
List
<
Era
>
HijrahChronology.
eras
()
List
<
Era
>
IsoChronology.
eras
()
List
<
Era
>
JapaneseChronology.
eras
()
List
<
Era
>
MinguoChronology.
eras
()
List
<
Era
>
ThaiBuddhistChronology.
eras
()
long
ChronoPeriod.
get
(
TemporalUnit
unit)
Gets the value of the requested unit.
default int
Era.
get
(
TemporalField
field)
Gets the value of the specified field from this era as an
int
.
String
HijrahChronology.
getCalendarType
()
Gets the calendar type of the Islamic calendar.
String
IsoChronology.
getCalendarType
()
Gets the calendar type of the underlying calendar system - 'iso8601'.
String
JapaneseChronology.
getCalendarType
()
Gets the calendar type of the underlying calendar system - 'japanese'.
String
MinguoChronology.
getCalendarType
()
Gets the calendar type of the underlying calendar system - 'roc'.
String
ThaiBuddhistChronology.
getCalendarType
()
Gets the calendar type of the underlying calendar system - 'buddhist'.
HijrahChronology
HijrahDate.
getChronology
()
Gets the chronology of this date, which is the Hijrah calendar system.
JapaneseChronology
JapaneseDate.
getChronology
()
Gets the chronology of this date, which is the Japanese calendar system.
MinguoChronology
MinguoDate.
getChronology
()
Gets the chronology of this date, which is the Minguo calendar system.
ThaiBuddhistChronology
ThaiBuddhistDate.
getChronology
()
Gets the chronology of this date, which is the Thai Buddhist calendar system.
String
HijrahEra.
getDisplayName
(
TextStyle
style,
Locale
locale)
Gets the textual representation of this era.
String
JapaneseEra.
getDisplayName
(
TextStyle
style,
Locale
locale)
Gets the textual representation of this era.
String
MinguoEra.
getDisplayName
(
TextStyle
style,
Locale
locale)
Gets the textual representation of this era.
String
ThaiBuddhistEra.
getDisplayName
(
TextStyle
style,
Locale
locale)
Gets the textual representation of this era.
HijrahEra
HijrahDate.
getEra
()
Gets the era applicable at this date.
JapaneseEra
JapaneseDate.
getEra
()
Gets the era applicable at this date.
MinguoEra
MinguoDate.
getEra
()
Gets the era applicable at this date.
ThaiBuddhistEra
ThaiBuddhistDate.
getEra
()
Gets the era applicable at this date.
String
HijrahChronology.
getId
()
Gets the ID of the chronology.
String
IsoChronology.
getId
()
Gets the ID of the chronology - 'ISO'.
String
JapaneseChronology.
getId
()
Gets the ID of the chronology - 'Japanese'.
String
MinguoChronology.
getId
()
Gets the ID of the chronology - 'Minguo'.
String
ThaiBuddhistChronology.
getId
()
Gets the ID of the chronology - 'ThaiBuddhist'.
default long
ChronoZonedDateTime.
getLong
(
TemporalField
field)
default long
Era.
getLong
(
TemporalField
field)
Gets the value of the specified field from this era as a
long
.
long
HijrahDate.
getLong
(
TemporalField
field)
long
JapaneseDate.
getLong
(
TemporalField
field)
long
MinguoDate.
getLong
(
TemporalField
field)
long
ThaiBuddhistDate.
getLong
(
TemporalField
field)
List
<
TemporalUnit
>
ChronoPeriod.
getUnits
()
Gets the set of units supported by this period.
int
HijrahEra.
getValue
()
Gets the numeric era
int
value.
int
IsoEra.
getValue
()
Gets the numeric era
int
value.
int
JapaneseEra.
getValue
()
Gets the numeric era
int
value.
int
MinguoEra.
getValue
()
Gets the numeric era
int
value.
int
ThaiBuddhistEra.
getValue
()
Gets the numeric era
int
value.
int
AbstractChronology.
hashCode
()
A hash code for this chronology.
int
ChronoLocalDate.
hashCode
()
A hash code for this date.
int
ChronoLocalDateTime.
hashCode
()
A hash code for this date-time.
int
Chronology.
hashCode
()
A hash code for this chronology.
int
ChronoPeriod.
hashCode
()
A hash code for this period.
int
ChronoZonedDateTime.
hashCode
()
A hash code for this date-time.
int
HijrahDate.
hashCode
()
A hash code for this date.
int
JapaneseDate.
hashCode
()
A hash code for this date.
int
MinguoDate.
hashCode
()
A hash code for this date.
int
ThaiBuddhistDate.
hashCode
()
A hash code for this date.
boolean
IsoChronology.
isIsoBased
()
IsoChronology
is an ISO based chronology, which supports fields
 in
IsoFields
, such as
DAY_OF_QUARTER
and
QUARTER_OF_YEAR
.
boolean
JapaneseChronology.
isIsoBased
()
JapaneseChronology
is an ISO based chronology, which supports fields
 in
IsoFields
, such as
DAY_OF_QUARTER
and
QUARTER_OF_YEAR
.
boolean
MinguoChronology.
isIsoBased
()
MinguoChronology
is an ISO based chronology, which supports fields
 in
IsoFields
, such as
DAY_OF_QUARTER
and
QUARTER_OF_YEAR
.
boolean
ThaiBuddhistChronology.
isIsoBased
()
ThaiBuddhistChronology
is an ISO based chronology, which supports fields
 in
IsoFields
, such as
DAY_OF_QUARTER
and
QUARTER_OF_YEAR
.
boolean
HijrahChronology.
isLeapYear
(long prolepticYear)
boolean
HijrahDate.
isLeapYear
()
Checks if the year is a leap year, according to the Hijrah calendar system rules.
boolean
IsoChronology.
isLeapYear
(long prolepticYear)
Checks if the year is a leap year, according to the ISO proleptic
 calendar system rules.
boolean
JapaneseChronology.
isLeapYear
(long prolepticYear)
Checks if the specified year is a leap year.
boolean
MinguoChronology.
isLeapYear
(long prolepticYear)
Checks if the specified year is a leap year.
boolean
ThaiBuddhistChronology.
isLeapYear
(long prolepticYear)
Checks if the specified year is a leap year.
default boolean
ChronoLocalDate.
isSupported
(
TemporalField
field)
Checks if the specified field is supported.
default boolean
ChronoLocalDate.
isSupported
(
TemporalUnit
unit)
Checks if the specified unit is supported.
boolean
ChronoLocalDateTime.
isSupported
(
TemporalField
field)
Checks if the specified field is supported.
default boolean
ChronoLocalDateTime.
isSupported
(
TemporalUnit
unit)
Checks if the specified unit is supported.
boolean
ChronoZonedDateTime.
isSupported
(
TemporalField
field)
Checks if the specified field is supported.
default boolean
ChronoZonedDateTime.
isSupported
(
TemporalUnit
unit)
Checks if the specified unit is supported.
default boolean
Era.
isSupported
(
TemporalField
field)
Checks if the specified field is supported.
boolean
JapaneseDate.
isSupported
(
TemporalField
field)
Checks if the specified field is supported.
int
HijrahDate.
lengthOfMonth
()
Returns the length of the month represented by this date.
int
JapaneseDate.
lengthOfMonth
()
Returns the length of the month represented by this date.
int
MinguoDate.
lengthOfMonth
()
Returns the length of the month represented by this date.
int
ThaiBuddhistDate.
lengthOfMonth
()
Returns the length of the month represented by this date.
int
HijrahDate.
lengthOfYear
()
Returns the length of the year represented by this date.
ChronoLocalDateTime
<
HijrahDate
>
HijrahChronology.
localDateTime
(
TemporalAccessor
temporal)
LocalDateTime
IsoChronology.
localDateTime
(
TemporalAccessor
temporal)
Obtains an ISO local date-time from another date-time object.
ChronoLocalDateTime
<
JapaneseDate
>
JapaneseChronology.
localDateTime
(
TemporalAccessor
temporal)
ChronoLocalDateTime
<
MinguoDate
>
MinguoChronology.
localDateTime
(
TemporalAccessor
temporal)
ChronoLocalDateTime
<
ThaiBuddhistDate
>
ThaiBuddhistChronology.
localDateTime
(
TemporalAccessor
temporal)
default
ChronoLocalDate
ChronoLocalDate.
minus
(long amountToSubtract,
TemporalUnit
unit)
Returns an object of the same type as this object with the specified period subtracted.
default
ChronoLocalDate
ChronoLocalDate.
minus
(
TemporalAmount
amount)
Returns an object of the same type as this object with an amount subtracted.
default
ChronoLocalDateTime
<
D
>
ChronoLocalDateTime.
minus
(long amountToSubtract,
TemporalUnit
unit)
Returns an object of the same type as this object with the specified period subtracted.
default
ChronoLocalDateTime
<
D
>
ChronoLocalDateTime.
minus
(
TemporalAmount
amount)
Returns an object of the same type as this object with an amount subtracted.
default
ChronoZonedDateTime
<
D
>
ChronoZonedDateTime.
minus
(long amountToSubtract,
TemporalUnit
unit)
Returns an object of the same type as this object with the specified period subtracted.
default
ChronoZonedDateTime
<
D
>
ChronoZonedDateTime.
minus
(
TemporalAmount
amount)
Returns an object of the same type as this object with an amount subtracted.
HijrahDate
HijrahDate.
minus
(long amountToSubtract,
TemporalUnit
unit)
HijrahDate
HijrahDate.
minus
(
TemporalAmount
amount)
Returns an object of the same type as this object with an amount subtracted.
JapaneseDate
JapaneseDate.
minus
(long amountToSubtract,
TemporalUnit
unit)
JapaneseDate
JapaneseDate.
minus
(
TemporalAmount
amount)
Returns an object of the same type as this object with an amount subtracted.
MinguoDate
MinguoDate.
minus
(long amountToSubtract,
TemporalUnit
unit)
MinguoDate
MinguoDate.
minus
(
TemporalAmount
amount)
Returns an object of the same type as this object with an amount subtracted.
ThaiBuddhistDate
ThaiBuddhistDate.
minus
(long amountToSubtract,
TemporalUnit
unit)
ThaiBuddhistDate
ThaiBuddhistDate.
minus
(
TemporalAmount
amount)
Returns an object of the same type as this object with an amount subtracted.
Period
IsoChronology.
period
(int years,
 int months,
 int days)
Obtains a period for this chronology based on years, months and days.
default
ChronoLocalDate
ChronoLocalDate.
plus
(long amountToAdd,
TemporalUnit
unit)
Returns an object of the same type as this object with the specified period added.
default
ChronoLocalDate
ChronoLocalDate.
plus
(
TemporalAmount
amount)
Returns an object of the same type as this object with an amount added.
ChronoLocalDateTime
<
D
>
ChronoLocalDateTime.
plus
(long amountToAdd,
TemporalUnit
unit)
Returns an object of the same type as this object with the specified period added.
default
ChronoLocalDateTime
<
D
>
ChronoLocalDateTime.
plus
(
TemporalAmount
amount)
Returns an object of the same type as this object with an amount added.
ChronoZonedDateTime
<
D
>
ChronoZonedDateTime.
plus
(long amountToAdd,
TemporalUnit
unit)
Returns an object of the same type as this object with the specified period added.
default
ChronoZonedDateTime
<
D
>
ChronoZonedDateTime.
plus
(
TemporalAmount
amount)
Returns an object of the same type as this object with an amount added.
HijrahDate
HijrahDate.
plus
(long amountToAdd,
TemporalUnit
unit)
HijrahDate
HijrahDate.
plus
(
TemporalAmount
amount)
Returns an object of the same type as this object with an amount added.
JapaneseDate
JapaneseDate.
plus
(long amountToAdd,
TemporalUnit
unit)
JapaneseDate
JapaneseDate.
plus
(
TemporalAmount
amount)
Returns an object of the same type as this object with an amount added.
MinguoDate
MinguoDate.
plus
(long amountToAdd,
TemporalUnit
unit)
MinguoDate
MinguoDate.
plus
(
TemporalAmount
amount)
Returns an object of the same type as this object with an amount added.
ThaiBuddhistDate
ThaiBuddhistDate.
plus
(long amountToAdd,
TemporalUnit
unit)
ThaiBuddhistDate
ThaiBuddhistDate.
plus
(
TemporalAmount
amount)
Returns an object of the same type as this object with an amount added.
int
HijrahChronology.
prolepticYear
(
Era
era,
 int yearOfEra)
int
IsoChronology.
prolepticYear
(
Era
era,
 int yearOfEra)
int
JapaneseChronology.
prolepticYear
(
Era
era,
 int yearOfEra)
int
MinguoChronology.
prolepticYear
(
Era
era,
 int yearOfEra)
int
ThaiBuddhistChronology.
prolepticYear
(
Era
era,
 int yearOfEra)
default <R> R
ChronoLocalDate.
query
(
TemporalQuery
<R> query)
Queries this date using the specified query.
default <R> R
ChronoLocalDateTime.
query
(
TemporalQuery
<R> query)
Queries this date-time using the specified query.
default <R> R
ChronoZonedDateTime.
query
(
TemporalQuery
<R> query)
Queries this date-time using the specified query.
default <R> R
Era.
query
(
TemporalQuery
<R> query)
Queries this era using the specified query.
default
ValueRange
Era.
range
(
TemporalField
field)
Gets the range of valid values for the specified field.
ValueRange
HijrahChronology.
range
(
ChronoField
field)
ValueRange
HijrahEra.
range
(
TemporalField
field)
Gets the range of valid values for the specified field.
ValueRange
IsoChronology.
range
(
ChronoField
field)
ValueRange
JapaneseChronology.
range
(
ChronoField
field)
ValueRange
JapaneseEra.
range
(
TemporalField
field)
Gets the range of valid values for the specified field.
ValueRange
MinguoChronology.
range
(
ChronoField
field)
ValueRange
ThaiBuddhistChronology.
range
(
ChronoField
field)
ChronoLocalDate
AbstractChronology.
resolveDate
(
Map
<
TemporalField
,
Long
> fieldValues,
ResolverStyle
resolverStyle)
Resolves parsed
ChronoField
values into a date during parsing.
HijrahDate
HijrahChronology.
resolveDate
(
Map
<
TemporalField
,
Long
> fieldValues,
ResolverStyle
resolverStyle)
LocalDate
IsoChronology.
resolveDate
(
Map
<
TemporalField
,
Long
> fieldValues,
ResolverStyle
resolverStyle)
Resolves parsed
ChronoField
values into a date during parsing.
JapaneseDate
JapaneseChronology.
resolveDate
(
Map
<
TemporalField
,
Long
> fieldValues,
ResolverStyle
resolverStyle)
MinguoDate
MinguoChronology.
resolveDate
(
Map
<
TemporalField
,
Long
> fieldValues,
ResolverStyle
resolverStyle)
ThaiBuddhistDate
ThaiBuddhistChronology.
resolveDate
(
Map
<
TemporalField
,
Long
> fieldValues,
ResolverStyle
resolverStyle)
Temporal
ChronoPeriod.
subtractFrom
(
Temporal
temporal)
Subtracts this period from the specified temporal object.
String
AbstractChronology.
toString
()
Outputs this chronology as a
String
, using the chronology ID.
String
ChronoLocalDate.
toString
()
Outputs this date as a
String
.
String
ChronoLocalDateTime.
toString
()
Outputs this date-time as a
String
.
String
Chronology.
toString
()
Outputs this chronology as a
String
.
String
ChronoPeriod.
toString
()
Outputs this period as a
String
.
String
ChronoZonedDateTime.
toString
()
Outputs this date-time as a
String
.
long
ChronoLocalDate.
until
(
Temporal
endExclusive,
TemporalUnit
unit)
Calculates the amount of time until another date in terms of the specified unit.
ChronoPeriod
HijrahDate.
until
(
ChronoLocalDate
endDate)
ChronoPeriod
JapaneseDate.
until
(
ChronoLocalDate
endDate)
ChronoPeriod
MinguoDate.
until
(
ChronoLocalDate
endDate)
ChronoPeriod
ThaiBuddhistDate.
until
(
ChronoLocalDate
endDate)
default
ChronoLocalDate
ChronoLocalDate.
with
(
TemporalAdjuster
adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
default
ChronoLocalDate
ChronoLocalDate.
with
(
TemporalField
field,
 long newValue)
Returns an object of the same type as this object with the specified field altered.
default
ChronoLocalDateTime
<
D
>
ChronoLocalDateTime.
with
(
TemporalAdjuster
adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
ChronoLocalDateTime
<
D
>
ChronoLocalDateTime.
with
(
TemporalField
field,
 long newValue)
Returns an object of the same type as this object with the specified field altered.
default
ChronoZonedDateTime
<
D
>
ChronoZonedDateTime.
with
(
TemporalAdjuster
adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
ChronoZonedDateTime
<
D
>
ChronoZonedDateTime.
with
(
TemporalField
field,
 long newValue)
Returns an object of the same type as this object with the specified field altered.
HijrahDate
HijrahDate.
with
(
TemporalAdjuster
adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
HijrahDate
HijrahDate.
with
(
TemporalField
field,
 long newValue)
JapaneseDate
JapaneseDate.
with
(
TemporalAdjuster
adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
JapaneseDate
JapaneseDate.
with
(
TemporalField
field,
 long newValue)
MinguoDate
MinguoDate.
with
(
TemporalAdjuster
adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
MinguoDate
MinguoDate.
with
(
TemporalField
field,
 long newValue)
ThaiBuddhistDate
ThaiBuddhistDate.
with
(
TemporalAdjuster
adjuster)
Returns an adjusted object of the same type as this object with the adjustment made.
ThaiBuddhistDate
ThaiBuddhistDate.
with
(
TemporalField
field,
 long newValue)
ChronoZonedDateTime
<
HijrahDate
>
HijrahChronology.
zonedDateTime
(
Instant
instant,
ZoneId
zone)
ChronoZonedDateTime
<
HijrahDate
>
HijrahChronology.
zonedDateTime
(
TemporalAccessor
temporal)
ZonedDateTime
IsoChronology.
zonedDateTime
(
Instant
instant,
ZoneId
zone)
Obtains an ISO zoned date-time in this chronology from an
Instant
.
ZonedDateTime
IsoChronology.
zonedDateTime
(
TemporalAccessor
temporal)
Obtains an ISO zoned date-time from another date-time object.
ChronoZonedDateTime
<
JapaneseDate
>
JapaneseChronology.
zonedDateTime
(
Instant
instant,
ZoneId
zone)
ChronoZonedDateTime
<
JapaneseDate
>
JapaneseChronology.
zonedDateTime
(
TemporalAccessor
temporal)
ChronoZonedDateTime
<
MinguoDate
>
MinguoChronology.
zonedDateTime
(
Instant
instant,
ZoneId
zone)
ChronoZonedDateTime
<
MinguoDate
>
MinguoChronology.
zonedDateTime
(
TemporalAccessor
temporal)
ChronoZonedDateTime
<
ThaiBuddhistDate
>
ThaiBuddhistChronology.
zonedDateTime
(
Instant
instant,
ZoneId
zone)
ChronoZonedDateTime
<
ThaiBuddhistDate
>
ThaiBuddhistChronology.
zonedDateTime
(
TemporalAccessor
temporal)
Uses of
Override
in
java.time.format
Methods in
java.time.format
with annotations of type
Override
Modifier and Type
Method
Description
boolean
DecimalStyle.
equals
(
Object
obj)
Checks if this DecimalStyle is equal to another DecimalStyle.
int
DecimalStyle.
hashCode
()
A hash code for this DecimalStyle.
String
DateTimeFormatter.
toString
()
Returns a description of the underlying formatters.
String
DecimalStyle.
toString
()
Returns a string describing this DecimalStyle.
Uses of
Override
in
java.time.temporal
Methods in
java.time.temporal
with annotations of type
Override
Modifier and Type
Method
Description
<R extends
Temporal
>
R
ChronoUnit.
addTo
(R temporal,
 long amount)
<R extends
Temporal
>
R
ChronoField.
adjustInto
(R temporal,
 long newValue)
long
ChronoUnit.
between
(
Temporal
temporal1Inclusive,
Temporal
temporal2Exclusive)
boolean
ValueRange.
equals
(
Object
obj)
Checks if this range is equal to another range.
boolean
WeekFields.
equals
(
Object
object)
Checks if this
WeekFields
is equal to the specified object.
TemporalUnit
ChronoField.
getBaseUnit
()
Duration
ChronoUnit.
getDuration
()
Gets the estimated duration of this unit in the ISO calendar system.
long
ChronoField.
getFrom
(
TemporalAccessor
temporal)
TemporalUnit
ChronoField.
getRangeUnit
()
int
ValueRange.
hashCode
()
A hash code for this range.
int
WeekFields.
hashCode
()
A hash code for this
WeekFields
.
boolean
ChronoField.
isDateBased
()
Checks if this field represents a component of a date.
boolean
ChronoUnit.
isDateBased
()
Checks if this unit is a date unit.
boolean
ChronoUnit.
isDurationEstimated
()
Checks if the duration of the unit is an estimate.
boolean
ChronoField.
isSupportedBy
(
TemporalAccessor
temporal)
boolean
ChronoField.
isTimeBased
()
Checks if this field represents a component of a time.
boolean
ChronoUnit.
isTimeBased
()
Checks if this unit is a time unit.
ValueRange
ChronoField.
range
()
Gets the range of valid values for the field.
ValueRange
ChronoField.
rangeRefinedBy
(
TemporalAccessor
temporal)
String
ChronoField.
toString
()
String
ChronoUnit.
toString
()
String
TemporalField.
toString
()
Gets a descriptive name for the field.
String
TemporalUnit.
toString
()
Gets a descriptive name for the unit.
String
ValueRange.
toString
()
Outputs this range as a
String
.
String
WeekFields.
toString
()
A string representation of this
WeekFields
instance.
Uses of
Override
in
java.time.zone
Methods in
java.time.zone
with annotations of type
Override
Modifier and Type
Method
Description
int
ZoneOffsetTransition.
compareTo
(
ZoneOffsetTransition
otherTransition)
Compares this transition to another based on the transition instant.
boolean
ZoneOffsetTransition.
equals
(
Object
other)
Checks if this object equals another.
boolean
ZoneOffsetTransitionRule.
equals
(
Object
otherRule)
Checks if this object equals another.
boolean
ZoneRules.
equals
(
Object
otherRules)
Checks if this set of rules equals another.
int
ZoneOffsetTransition.
hashCode
()
Returns a suitable hash code.
int
ZoneOffsetTransitionRule.
hashCode
()
Returns a suitable hash code.
int
ZoneRules.
hashCode
()
Returns a suitable hash code given the definition of
#equals
.
String
ZoneOffsetTransition.
toString
()
Returns a string describing this object.
String
ZoneOffsetTransitionRule.
toString
()
Returns a string describing this object.
String
ZoneRules.
toString
()
Returns a string describing this object.
Uses of
Override
in
java.util
Methods in
java.util
with annotations of type
Override
Modifier and Type
Method
Description
void
DoubleSummaryStatistics.
accept
(double value)
Records another value into the summary information.
void
IntSummaryStatistics.
accept
(int value)
Records a new value into the summary information
void
LongSummaryStatistics.
accept
(int value)
Records a new
int
value into the summary information.
void
LongSummaryStatistics.
accept
(long value)
Records a new
long
value into the summary information.
void
GregorianCalendar.
add
(int field,
 int amount)
Adds the specified (signed) amount of time to the given calendar field,
 based on the calendar's rules.
int
Spliterators.AbstractDoubleSpliterator.
characteristics
()
Returns a set of characteristics of this Spliterator and its
 elements.
int
Spliterators.AbstractIntSpliterator.
characteristics
()
Returns a set of characteristics of this Spliterator and its
 elements.
int
Spliterators.AbstractLongSpliterator.
characteristics
()
Returns a set of characteristics of this Spliterator and its
 elements.
int
Spliterators.AbstractSpliterator.
characteristics
()
Returns a set of characteristics of this Spliterator and its
 elements.
Object
Calendar.
clone
()
Creates and returns a copy of this object.
Object
HashMap.
clone
()
Returns a shallow copy of this
HashMap
instance: the keys and
 values themselves are not cloned.
Object
Locale.
clone
()
Overrides Cloneable.
int
Calendar.
compareTo
(
Calendar
anotherCalendar)
Compares the time values (millisecond offsets from the
Epoch
) represented by two
Calendar
objects.
int
Date.
compareTo
(
Date
anotherDate)
Compares two Dates for ordering.
int
UUID.
compareTo
(
UUID
val)
Compares this UUID with the specified UUID.
V
HashMap.
compute
(
K
key,
BiFunction
<? super
K
,
? super
V
,
? extends
V
> remappingFunction)
Attempts to compute a mapping for the specified key and its current
 mapped value (or
null
if there is no current mapping).
V
Hashtable.
compute
(
K
key,
BiFunction
<? super
K
,
? super
V
,
? extends
V
> remappingFunction)
Attempts to compute a mapping for the specified key and its current
 mapped value (or
null
if there is no current mapping).
V
TreeMap.
compute
(
K
key,
BiFunction
<? super
K
,
? super
V
,
? extends
V
> remappingFunction)
Attempts to compute a mapping for the specified key and its current
 mapped value (or
null
if there is no current mapping).
protected void
GregorianCalendar.
computeFields
()
Converts the time value (millisecond offset from the
Epoch
) to calendar field values.
V
HashMap.
computeIfAbsent
(
K
key,
Function
<? super
K
,
? extends
V
> mappingFunction)
If the specified key is not already associated with a value (or is mapped
 to
null
), attempts to compute its value using the given mapping
 function and enters it into this map unless
null
.
V
Hashtable.
computeIfAbsent
(
K
key,
Function
<? super
K
,
? extends
V
> mappingFunction)
If the specified key is not already associated with a value (or is mapped
 to
null
), attempts to compute its value using the given mapping
 function and enters it into this map unless
null
.
V
TreeMap.
computeIfAbsent
(
K
key,
Function
<? super
K
,
? extends
V
> mappingFunction)
If the specified key is not already associated with a value (or is mapped
 to
null
), attempts to compute its value using the given mapping
 function and enters it into this map unless
null
.
V
HashMap.
computeIfPresent
(
K
key,
BiFunction
<? super
K
,
? super
V
,
? extends
V
> remappingFunction)
If the value for the specified key is present and non-null, attempts to
 compute a new mapping given the key and its current mapped value.
V
Hashtable.
computeIfPresent
(
K
key,
BiFunction
<? super
K
,
? super
V
,
? extends
V
> remappingFunction)
If the value for the specified key is present and non-null, attempts to
 compute a new mapping given the key and its current mapped value.
V
TreeMap.
computeIfPresent
(
K
key,
BiFunction
<? super
K
,
? super
V
,
? extends
V
> remappingFunction)
If the value for the specified key is present and non-null, attempts to
 compute a new mapping given the key and its current mapped value.
protected void
GregorianCalendar.
computeTime
()
Converts calendar field values to the time value (millisecond
 offset from the
Epoch
).
DoubleStream
Random.
doubles
()
Returns an effectively unlimited stream of pseudorandom
double
values, each between zero (inclusive) and one
 (exclusive).
DoubleStream
Random.
doubles
(double randomNumberOrigin,
 double randomNumberBound)
Returns an effectively unlimited stream of pseudorandom
double
values, each conforming to the given origin (inclusive) and bound
 (exclusive).
DoubleStream
Random.
doubles
(long streamSize)
Returns a stream producing the given
streamSize
number of
 pseudorandom
double
values, each between zero
 (inclusive) and one (exclusive).
DoubleStream
Random.
doubles
(long streamSize,
 double randomNumberOrigin,
 double randomNumberBound)
Returns a stream producing the given
streamSize
number of
 pseudorandom
double
values, each conforming to the given origin
 (inclusive) and bound (exclusive).
DoubleStream
SplittableRandom.
doubles
()
Returns an effectively unlimited stream of pseudorandom
double
values from this generator and/or one split from it; each value
 is between zero (inclusive) and one (exclusive).
DoubleStream
SplittableRandom.
doubles
(double randomNumberOrigin,
 double randomNumberBound)
Returns an effectively unlimited stream of pseudorandom
double
values from this generator and/or one split from it; each value
 conforms to the given origin (inclusive) and bound (exclusive).
DoubleStream
SplittableRandom.
doubles
(long streamSize)
Returns a stream producing the given
streamSize
number of
 pseudorandom
double
values from this generator and/or one split
 from it; each value is between zero (inclusive) and one (exclusive).
DoubleStream
SplittableRandom.
doubles
(long streamSize,
 double randomNumberOrigin,
 double randomNumberBound)
Returns a stream producing the given
streamSize
number of
 pseudorandom
double
values from this generator and/or one split
 from it; each value conforms to the given origin (inclusive) and bound
 (exclusive).
boolean
Calendar.
equals
(
Object
obj)
Compares this
Calendar
to the specified
Object
.
boolean
GregorianCalendar.
equals
(
Object
obj)
Compares this
GregorianCalendar
to the specified
Object
.
boolean
HexFormat.
equals
(
Object
o)
Returns
true
if the other object is a
HexFormat
with the same parameters.
boolean
Locale.
equals
(
Object
obj)
Returns true if this Locale is equal to another object.
boolean
Locale.LanguageRange.
equals
(
Object
obj)
Compares this object to the specified object.
boolean
Optional.
equals
(
Object
obj)
Indicates whether some other object is "equal to" this
Optional
.
boolean
OptionalDouble.
equals
(
Object
obj)
Indicates whether some other object is "equal to" this
OptionalDouble
.
boolean
OptionalInt.
equals
(
Object
obj)
Indicates whether some other object is "equal to" this
OptionalInt
.
boolean
OptionalLong.
equals
(
Object
obj)
Indicates whether some other object is "equal to" this
OptionalLong
.
boolean
PropertyPermission.
equals
(
Object
obj)
Checks two PropertyPermission objects for equality.
boolean
UUID.
equals
(
Object
obj)
Compares this object to the specified object.
long
Spliterators.AbstractDoubleSpliterator.
estimateSize
()
Returns an estimate of the number of elements that would be
 encountered by a
Spliterator.forEachRemaining(java.util.function.Consumer<? super T>)
traversal, or returns
Long.MAX_VALUE
if infinite, unknown, or too expensive to compute.
long
Spliterators.AbstractIntSpliterator.
estimateSize
()
Returns an estimate of the number of elements that would be
 encountered by a
Spliterator.forEachRemaining(java.util.function.Consumer<? super T>)
traversal, or returns
Long.MAX_VALUE
if infinite, unknown, or too expensive to compute.
long
Spliterators.AbstractLongSpliterator.
estimateSize
()
Returns an estimate of the number of elements that would be
 encountered by a
Spliterator.forEachRemaining(java.util.function.Consumer<? super T>)
traversal, or returns
Long.MAX_VALUE
if infinite, unknown, or too expensive to compute.
long
Spliterators.AbstractSpliterator.
estimateSize
()
Returns an estimate of the number of elements that would be
 encountered by a
Spliterator.forEachRemaining(java.util.function.Consumer<? super T>)
traversal, or returns
Long.MAX_VALUE
if infinite, unknown, or too expensive to compute.
void
ArrayList.
forEach
(
Consumer
<? super
E
> action)
void
Vector.
forEach
(
Consumer
<? super
E
> action)
default void
PrimitiveIterator.OfDouble.
forEachRemaining
(
Consumer
<? super
Double
> action)
Performs the given action for each remaining element until all elements
 have been processed or the action throws an exception.
default void
PrimitiveIterator.OfInt.
forEachRemaining
(
Consumer
<? super
Integer
> action)
Performs the given action for each remaining element until all elements
 have been processed or the action throws an exception.
default void
PrimitiveIterator.OfLong.
forEachRemaining
(
Consumer
<? super
Long
> action)
Performs the given action for each remaining element until all elements
 have been processed or the action throws an exception.
default void
Spliterator.OfDouble.
forEachRemaining
(
Consumer
<? super
Double
> action)
Performs the given action for each remaining element, sequentially in
 the current thread, until all elements have been processed or the action
 throws an exception.
default void
Spliterator.OfInt.
forEachRemaining
(
Consumer
<? super
Integer
> action)
Performs the given action for each remaining element, sequentially in
 the current thread, until all elements have been processed or the action
 throws an exception.
default void
Spliterator.OfLong.
forEachRemaining
(
Consumer
<? super
Long
> action)
Performs the given action for each remaining element, sequentially in
 the current thread, until all elements have been processed or the action
 throws an exception.
S
ServiceLoader.Provider.
get
()
Returns an instance of the provider.
String
PropertyPermission.
getActions
()
Returns the "canonical string representation" of the actions.
int
GregorianCalendar.
getActualMaximum
(int field)
Returns the maximum value that this calendar field could have,
 taking into consideration the given time value and the current
 values of the
getFirstDayOfWeek
,
getMinimalDaysInFirstWeek
,
getGregorianChange
and
getTimeZone
methods.
int
GregorianCalendar.
getActualMinimum
(int field)
Returns the minimum value that this calendar field could have,
 taking into consideration the given time value and the current
 values of the
getFirstDayOfWeek
,
getMinimalDaysInFirstWeek
,
getGregorianChange
and
getTimeZone
methods.
String
GregorianCalendar.
getCalendarType
()
Returns
"gregory"
as the calendar type.
int
GregorianCalendar.
getGreatestMinimum
(int field)
Returns the highest minimum value for the given calendar field
 of this
GregorianCalendar
instance.
int
GregorianCalendar.
getLeastMaximum
(int field)
Returns the lowest maximum value for the given calendar field
 of this
GregorianCalendar
instance.
int
GregorianCalendar.
getMaximum
(int field)
Returns the maximum value for the given calendar field of this
GregorianCalendar
instance.
int
GregorianCalendar.
getMinimum
(int field)
Returns the minimum value for the given calendar field of this
GregorianCalendar
instance.
int
GregorianCalendar.
getWeeksInWeekYear
()
Returns the number of weeks in the
week year
represented by this
GregorianCalendar
.
int
GregorianCalendar.
getWeekYear
()
Returns the
week year
represented by this
GregorianCalendar
.
int
Calendar.
hashCode
()
Returns a hash code for this calendar.
int
GregorianCalendar.
hashCode
()
Generates the hash code for this
GregorianCalendar
object.
int
HexFormat.
hashCode
()
Returns a hashcode for this
HexFormat
.
int
Locale.
hashCode
()
Override hashCode.
int
Locale.LanguageRange.
hashCode
()
Returns a hash code value for this object.
int
Optional.
hashCode
()
Returns the hash code of the value, if present, otherwise
0
(zero) if no value is present.
int
OptionalDouble.
hashCode
()
Returns the hash code of the value, if present, otherwise
0
(zero) if no value is present.
int
OptionalInt.
hashCode
()
Returns the hash code of the value, if present, otherwise
0
(zero) if no value is present.
int
OptionalLong.
hashCode
()
Returns the hash code of the value, if present, otherwise
0
(zero) if no value is present.
int
PropertyPermission.
hashCode
()
Returns the hash code value for this object.
int
UUID.
hashCode
()
Returns a hash code for this
UUID
.
boolean
PropertyPermission.
implies
(
Permission
p)
Checks if this PropertyPermission object "implies" the specified
 permission.
IntStream
Random.
ints
()
Returns an effectively unlimited stream of pseudorandom
int
values.
IntStream
Random.
ints
(int randomNumberOrigin,
 int randomNumberBound)
Returns an effectively unlimited stream of pseudorandom
int
values, each conforming to the given origin (inclusive) and bound
 (exclusive).
IntStream
Random.
ints
(long streamSize)
Returns a stream producing the given
streamSize
number of
 pseudorandom
int
values.
IntStream
Random.
ints
(long streamSize,
 int randomNumberOrigin,
 int randomNumberBound)
Returns a stream producing the given
streamSize
number
 of pseudorandom
int
values, each conforming to the given
 origin (inclusive) and bound (exclusive).
IntStream
SplittableRandom.
ints
()
Returns an effectively unlimited stream of pseudorandom
int
values from this generator and/or one split from it.
IntStream
SplittableRandom.
ints
(int randomNumberOrigin,
 int randomNumberBound)
Returns an effectively unlimited stream of pseudorandom
int
values from this generator and/or one split from it; each value
 conforms to the given origin (inclusive) and bound (exclusive).
IntStream
SplittableRandom.
ints
(long streamSize)
Returns a stream producing the given
streamSize
number
 of pseudorandom
int
values from this generator and/or
 one split from it.
IntStream
SplittableRandom.
ints
(long streamSize,
 int randomNumberOrigin,
 int randomNumberBound)
Returns a stream producing the given
streamSize
number
 of pseudorandom
int
values from this generator and/or one split
 from it; each value conforms to the given origin (inclusive) and bound
 (exclusive).
final boolean
GregorianCalendar.
isWeekDateSupported
()
Returns
true
indicating this
GregorianCalendar
supports week dates.
MethodHandle
FormatProcessor.
linkage
(
List
<
String
> fragments,
MethodType
type)
Constructs a
MethodHandle
that when supplied with the values from
 a
StringTemplate
PREVIEW
will produce a result equivalent to that provided by
FormatProcessor.process(StringTemplate)
PREVIEW
.
LongStream
Random.
longs
()
Returns an effectively unlimited stream of pseudorandom
long
values.
LongStream
Random.
longs
(long streamSize)
Returns a stream producing the given
streamSize
number of
 pseudorandom
long
values.
LongStream
Random.
longs
(long randomNumberOrigin,
 long randomNumberBound)
Returns an effectively unlimited stream of pseudorandom
long
values, each conforming to the given origin (inclusive) and bound
 (exclusive).
LongStream
Random.
longs
(long streamSize,
 long randomNumberOrigin,
 long randomNumberBound)
Returns a stream producing the given
streamSize
number of
 pseudorandom
long
, each conforming to the given origin
 (inclusive) and bound (exclusive).
LongStream
SplittableRandom.
longs
()
Returns an effectively unlimited stream of pseudorandom
long
values from this generator and/or one split from it.
LongStream
SplittableRandom.
longs
(long streamSize)
Returns a stream producing the given
streamSize
number
 of pseudorandom
long
values from this generator and/or
 one split from it.
LongStream
SplittableRandom.
longs
(long randomNumberOrigin,
 long randomNumberBound)
Returns an effectively unlimited stream of pseudorandom
long
values from this generator and/or one split from it; each value
 conforms to the given origin (inclusive) and bound (exclusive).
LongStream
SplittableRandom.
longs
(long streamSize,
 long randomNumberOrigin,
 long randomNumberBound)
Returns a stream producing the given
streamSize
number of
 pseudorandom
long
values from this generator and/or one split
 from it; each value conforms to the given origin (inclusive) and bound
 (exclusive).
V
HashMap.
merge
(
K
key,
V
value,
BiFunction
<? super
V
,
? super
V
,
? extends
V
> remappingFunction)
If the specified key is not already associated with a value or is
 associated with null, associates it with the given non-null value.
V
Hashtable.
merge
(
K
key,
V
value,
BiFunction
<? super
V
,
? super
V
,
? extends
V
> remappingFunction)
If the specified key is not already associated with a value or is
 associated with null, associates it with the given non-null value.
V
TreeMap.
merge
(
K
key,
V
value,
BiFunction
<? super
V
,
? super
V
,
? extends
V
> remappingFunction)
If the specified key is not already associated with a value or is
 associated with null, associates it with the given non-null value.
PermissionCollection
PropertyPermission.
newPermissionCollection
()
Returns a new PermissionCollection object for storing
 PropertyPermission objects.
default
Double
PrimitiveIterator.OfDouble.
next
()
Returns the next element in the iteration.
default
Integer
PrimitiveIterator.OfInt.
next
()
Returns the next element in the iteration.
default
Long
PrimitiveIterator.OfLong.
next
()
Returns the next element in the iteration.
boolean
Random.
nextBoolean
()
Returns the next pseudorandom, uniformly distributed
boolean
value from this random number generator's
 sequence.
void
Random.
nextBytes
(byte[] bytes)
Generates random bytes and places them into a user-supplied
 byte array.
void
SplittableRandom.
nextBytes
(byte[] bytes)
Fills a user-supplied byte array with generated byte values
 pseudorandomly chosen uniformly from the range of values between -128
 (inclusive) and 127 (inclusive).
double
Random.
nextDouble
()
Returns the next pseudorandom, uniformly distributed
double
value between
0.0
and
1.0
from this random number generator's sequence.
float
Random.
nextFloat
()
Returns the next pseudorandom, uniformly distributed
float
value between
0.0
and
1.0
from this random
 number generator's sequence.
double
Random.
nextGaussian
()
Returns the next pseudorandom, Gaussian ("normally") distributed
double
value with mean
0.0
and standard
 deviation
1.0
from this random number generator's sequence.
int
Random.
nextInt
()
Returns the next pseudorandom, uniformly distributed
int
value from this random number generator's sequence.
int
Random.
nextInt
(int bound)
Returns a pseudorandom, uniformly distributed
int
value
 between 0 (inclusive) and the specified value (exclusive), drawn from
 this random number generator's sequence.
long
Random.
nextLong
()
Returns the next pseudorandom, uniformly distributed
long
value from this random number generator's sequence.
long
SplittableRandom.
nextLong
()
boolean
SimpleTimeZone.
observesDaylightTime
()
Returns
true
if this
SimpleTimeZone
observes
 Daylight Saving Time.
final
String
FormatProcessor.
process
(
StringTemplate
PREVIEW
stringTemplate)
Constructs a
String
based on the fragments, format
 specifications found in the fragments and values in the
 supplied
StringTemplate
PREVIEW
object.
boolean
IdentityHashMap.
remove
(
Object
key,
Object
value)
Removes the entry for the specified key only if it is currently
 mapped to the specified value.
boolean
ArrayList.
removeIf
(
Predicate
<? super
E
> filter)
boolean
Vector.
removeIf
(
Predicate
<? super
E
> filter)
boolean
IdentityHashMap.
replace
(
K
key,
V
oldValue,
V
newValue)
Replaces the entry for the specified key only if currently
 mapped to the specified value.
void
Vector.
replaceAll
(
UnaryOperator
<
E
> operator)
void
GregorianCalendar.
roll
(int field,
 boolean up)
Adds or subtracts (up/down) a single unit of time on the given time
 field without changing larger fields.
void
GregorianCalendar.
roll
(int field,
 int amount)
Adds a signed amount to the specified calendar field without changing larger fields.
void
GregorianCalendar.
setWeekDate
(int weekYear,
 int weekOfYear,
 int dayOfWeek)
Sets this
GregorianCalendar
to the date given by the
 date specifiers -
weekYear
,
weekOfYear
, and
dayOfWeek
.
Spliterator
<
E
>
ArrayList.
spliterator
()
Creates a
late-binding
and
fail-fast
Spliterator
over the elements in this
 list.
default
Spliterator
<
E
>
Collection.
spliterator
()
Creates a
Spliterator
over the elements in this collection.
Spliterator
<
E
>
LinkedHashSet.
spliterator
()
Creates a
late-binding
and
fail-fast
Spliterator
over the elements in this set.
Spliterator
<
E
>
LinkedList.
spliterator
()
Creates a
late-binding
and
fail-fast
Spliterator
over the elements in this
 list.
default
Spliterator
<
E
>
List.
spliterator
()
Creates a
Spliterator
over the elements in this list.
default
Spliterator
<
E
>
Set.
spliterator
()
Creates a
Spliterator
over the elements in this set.
default
Spliterator
<
E
>
SortedSet.
spliterator
()
Creates a
Spliterator
over the elements in this sorted set.
Spliterator
<
E
>
Vector.
spliterator
()
Creates a
late-binding
and
fail-fast
Spliterator
over the elements in this
 list.
Stream
<
RandomGenerator.SplittableGenerator
>
SplittableRandom.
splits
()
Returns an effectively unlimited stream of new pseudorandom number
 generators, each of which implements the
RandomGenerator.SplittableGenerator
interface.
Stream
<
RandomGenerator.SplittableGenerator
>
SplittableRandom.
splits
(long streamSize)
Returns a stream producing the given
streamSize
number of new
 pseudorandom number generators, each of which implements the
RandomGenerator.SplittableGenerator
interface.
Stream
<
RandomGenerator.SplittableGenerator
>
SplittableRandom.
splits
(long streamSize,
RandomGenerator.SplittableGenerator
source)
Returns a stream producing the given
streamSize
number of new
 pseudorandom number generators, each of which implements the
RandomGenerator.SplittableGenerator
interface.
Stream
<
RandomGenerator.SplittableGenerator
>
SplittableRandom.
splits
(
RandomGenerator.SplittableGenerator
source)
Returns an effectively unlimited stream of new pseudorandom number
 generators, each of which implements the
RandomGenerator.SplittableGenerator
interface.
Object
[]
HashSet.
toArray
()
<T> T[]
HashSet.
toArray
(T[] a)
String
Calendar.
toString
()
Return a string representation of this calendar.
String
Currency.
toString
()
Returns the ISO 4217 currency code of this currency.
String
DoubleSummaryStatistics.
toString
()
Returns a non-empty string representation of this object suitable for
 debugging.
String
HexFormat.
toString
()
Returns a description of the formatter parameters for uppercase,
 delimiter, prefix, and suffix.
String
IntSummaryStatistics.
toString
()
Returns a non-empty string representation of this object suitable for
 debugging.
String
Locale.LanguageRange.
toString
()
Returns an informative string representation of this
LanguageRange
object, consisting of language range and weight if the range is
 weighted and the weight is less than the max weight.
final
String
Locale.
toString
()
Returns a string representation of this
Locale
object, consisting of language, country, variant, script,
 and extensions as below:
 
 language + "_" + country + "_" + (variant + "_#" | "#") + script + "_" + extensions
 

 Language is always lower case, country is always upper case, script is always title
 case, and extensions are always lower case.
String
LongSummaryStatistics.
toString
()
Returns a non-empty string representation of this object suitable for
 debugging.
String
Optional.
toString
()
Returns a non-empty string representation of this
Optional
suitable for debugging.
String
OptionalDouble.
toString
()
Returns a non-empty string representation of this
OptionalDouble
suitable for debugging.
String
OptionalInt.
toString
()
Returns a non-empty string representation of this
OptionalInt
suitable for debugging.
String
OptionalLong.
toString
()
Returns a non-empty string representation of this
OptionalLong
suitable for debugging.
String
StringJoiner.
toString
()
Returns the current value, consisting of the
prefix
, the values
 added so far separated by the
delimiter
, and the
suffix
,
 unless no elements have been added in which case, the
prefix + suffix
or the
emptyValue
characters are returned.
String
UUID.
toString
()
Returns a
String
object representing this
UUID
.
default boolean
Spliterator.OfDouble.
tryAdvance
(
Consumer
<? super
Double
> action)
If a remaining element exists: performs the given action on it,
 returning
true
; else returns
false
.
default boolean
Spliterator.OfInt.
tryAdvance
(
Consumer
<? super
Integer
> action)
If a remaining element exists: performs the given action on it,
 returning
true
; else returns
false
.
default boolean
Spliterator.OfLong.
tryAdvance
(
Consumer
<? super
Long
> action)
If a remaining element exists: performs the given action on it,
 returning
true
; else returns
false
.
Spliterator.OfDouble
Spliterators.AbstractDoubleSpliterator.
trySplit
()
If this spliterator can be partitioned, returns a Spliterator
 covering elements, that will, upon return from this method, not
 be covered by this Spliterator.
Spliterator.OfInt
Spliterators.AbstractIntSpliterator.
trySplit
()
If this spliterator can be partitioned, returns a Spliterator
 covering elements, that will, upon return from this method, not
 be covered by this Spliterator.
Spliterator.OfLong
Spliterators.AbstractLongSpliterator.
trySplit
()
If this spliterator can be partitioned, returns a Spliterator
 covering elements, that will, upon return from this method, not
 be covered by this Spliterator.
Spliterator
<
T
>
Spliterators.AbstractSpliterator.
trySplit
()
If this spliterator can be partitioned, returns a Spliterator
 covering elements, that will, upon return from this method, not
 be covered by this Spliterator.
Uses of
Override
in
java.util.concurrent
Methods in
java.util.concurrent
with annotations of type
Override
Modifier and Type
Method
Description
default void
ExecutorService.
close
()
Initiates an orderly shutdown in which previously submitted tasks are
 executed, but no new tasks will be accepted.
void
ForkJoinPool.
close
()
Unless this is the
ForkJoinPool.commonPool()
, initiates an orderly
 shutdown in which previously submitted tasks are executed, but
 no new tasks will be accepted, and waits until all tasks have
 completed execution and the executor has terminated.
void
StructuredTaskScope.
close
()
Closes this task scope.
default
V
ConcurrentMap.
compute
(
K
key,
BiFunction
<? super
K
,
? super
V
,
? extends
V
> remappingFunction)
Attempts to compute a mapping for the specified key and its current
 mapped value (or
null
if there is no current mapping).
default
V
ConcurrentMap.
computeIfAbsent
(
K
key,
Function
<? super
K
,
? extends
V
> mappingFunction)
If the specified key is not already associated with a value (or is mapped
 to
null
), attempts to compute its value using the given mapping
 function and enters it into this map unless
null
.
default
V
ConcurrentMap.
computeIfPresent
(
K
key,
BiFunction
<? super
K
,
? super
V
,
? extends
V
> remappingFunction)
If the value for the specified key is present and non-null, attempts to
 compute a new mapping given the key and its current mapped value.
DoubleStream
ThreadLocalRandom.
doubles
()
Returns an effectively unlimited stream of pseudorandom
double
values, each between zero (inclusive) and one
 (exclusive).
DoubleStream
ThreadLocalRandom.
doubles
(double randomNumberOrigin,
 double randomNumberBound)
Returns an effectively unlimited stream of pseudorandom
double
values, each conforming to the given origin (inclusive) and bound
 (exclusive).
DoubleStream
ThreadLocalRandom.
doubles
(long streamSize)
Returns a stream producing the given
streamSize
number of
 pseudorandom
double
values, each between zero
 (inclusive) and one (exclusive).
DoubleStream
ThreadLocalRandom.
doubles
(long streamSize,
 double randomNumberOrigin,
 double randomNumberBound)
Returns a stream producing the given
streamSize
number of
 pseudorandom
double
values, each conforming to the given origin
 (inclusive) and bound (exclusive).
protected final boolean
CountedCompleter.
exec
()
Implements execution conventions for CountedCompleters.
void
ForkJoinPool.
execute
(
Runnable
task)
default void
ConcurrentMap.
forEach
(
BiConsumer
<? super
K
,
? super
V
> action)
Performs the given action for each entry in this map until all entries
 have been processed or the action throws an exception.
default
V
ConcurrentMap.
getOrDefault
(
Object
key,
V
defaultValue)
Returns the value to which the specified key is mapped, or
defaultValue
if this map contains no mapping for the key.
T
CountedCompleter.
getRawResult
()
Returns the result of the computation.
IntStream
ThreadLocalRandom.
ints
()
Returns an effectively unlimited stream of pseudorandom
int
values.
IntStream
ThreadLocalRandom.
ints
(int randomNumberOrigin,
 int randomNumberBound)
Returns an effectively unlimited stream of pseudorandom
int
values, each conforming to the given origin (inclusive) and bound
 (exclusive).
IntStream
ThreadLocalRandom.
ints
(long streamSize)
Returns a stream producing the given
streamSize
number of
 pseudorandom
int
values.
IntStream
ThreadLocalRandom.
ints
(long streamSize,
 int randomNumberOrigin,
 int randomNumberBound)
Returns a stream producing the given
streamSize
number
 of pseudorandom
int
values, each conforming to the given
 origin (inclusive) and bound (exclusive).
<T>
List
<
Future
<T>>
ForkJoinPool.
invokeAll
(
Collection
<? extends
Callable
<T>> tasks)
StructuredTaskScope.ShutdownOnFailure
PREVIEW
StructuredTaskScope.ShutdownOnFailure.
join
()
Wait for all subtasks started in this task scope to complete or for a subtask
 to
fail
PREVIEW
.
StructuredTaskScope.ShutdownOnSuccess
PREVIEW
<
T
>
StructuredTaskScope.ShutdownOnSuccess.
join
()
Wait for a subtask started in this task scope to complete
successfully
PREVIEW
or all subtasks to complete.
StructuredTaskScope.ShutdownOnFailure
PREVIEW
StructuredTaskScope.ShutdownOnFailure.
joinUntil
(
Instant
deadline)
Wait for all subtasks started in this task scope to complete or for a subtask
 to
fail
PREVIEW
, up to the given deadline.
StructuredTaskScope.ShutdownOnSuccess
PREVIEW
<
T
>
StructuredTaskScope.ShutdownOnSuccess.
joinUntil
(
Instant
deadline)
Wait for a subtask started in this task scope to complete
successfully
PREVIEW
or all subtasks to complete, up to the
 given deadline.
LongStream
ThreadLocalRandom.
longs
()
Returns an effectively unlimited stream of pseudorandom
long
values.
LongStream
ThreadLocalRandom.
longs
(long streamSize)
Returns a stream producing the given
streamSize
number of
 pseudorandom
long
values.
LongStream
ThreadLocalRandom.
longs
(long randomNumberOrigin,
 long randomNumberBound)
Returns an effectively unlimited stream of pseudorandom
long
values, each conforming to the given origin (inclusive) and bound
 (exclusive).
LongStream
ThreadLocalRandom.
longs
(long streamSize,
 long randomNumberOrigin,
 long randomNumberBound)
Returns a stream producing the given
streamSize
number of
 pseudorandom
long
, each conforming to the given origin
 (inclusive) and bound (exclusive).
default
V
ConcurrentMap.
merge
(
K
key,
V
value,
BiFunction
<? super
V
,
? super
V
,
? extends
V
> remappingFunction)
If the specified key is not already associated with a value or is
 associated with null, associates it with the given non-null value.
double
ThreadLocalRandom.
nextDouble
(double bound)
Returns a pseudorandomly chosen
double
value between zero
 (inclusive) and the specified bound (exclusive).
double
ThreadLocalRandom.
nextDouble
(double origin,
 double bound)
Returns a pseudorandomly chosen
double
value between the
 specified origin (inclusive) and the specified bound (exclusive).
float
ThreadLocalRandom.
nextFloat
(float bound)
Returns a pseudorandomly chosen
float
value between zero
 (inclusive) and the specified bound (exclusive).
float
ThreadLocalRandom.
nextFloat
(float origin,
 float bound)
Returns a pseudorandomly chosen
float
value between the
 specified origin (inclusive) and the specified bound (exclusive).
int
ThreadLocalRandom.
nextInt
(int bound)
Returns a pseudorandom, uniformly distributed
int
value
 between 0 (inclusive) and the specified value (exclusive), drawn from
 this random number generator's sequence.
int
ThreadLocalRandom.
nextInt
(int origin,
 int bound)
Returns a pseudorandomly chosen
int
value between the specified
 origin (inclusive) and the specified bound (exclusive).
long
ThreadLocalRandom.
nextLong
(long bound)
Returns a pseudorandomly chosen
long
value between zero
 (inclusive) and the specified bound (exclusive).
long
ThreadLocalRandom.
nextLong
(long origin,
 long bound)
Returns a pseudorandomly chosen
long
value between the
 specified origin (inclusive) and the specified bound (exclusive).
default void
ConcurrentMap.
replaceAll
(
BiFunction
<? super
K
,
? super
V
,
? extends
V
> function)
Replaces each entry's value with the result of invoking the given
 function on that entry until all entries have been processed or the
 function throws an exception.
protected void
CountedCompleter.
setRawResult
(
T
t)
A method that result-bearing CountedCompleters may optionally
 use to help maintain result data.
Spliterator
<
E
>
ConcurrentLinkedQueue.
spliterator
()
Returns a
Spliterator
over the elements in this queue.
ForkJoinTask
<?>
ForkJoinPool.
submit
(
Runnable
task)
<T>
ForkJoinTask
<T>
ForkJoinPool.
submit
(
Runnable
task,
 T result)
<T>
ForkJoinTask
<T>
ForkJoinPool.
submit
(
Callable
<T> task)
Uses of
Override
in
java.util.logging
Methods in
java.util.logging
with annotations of type
Override
Modifier and Type
Method
Description
void
ConsoleHandler.
close
()
Override
StreamHandler.close
to do a flush but not
 to close the output stream.
void
FileHandler.
close
()
Close all the files.
void
MemoryHandler.
close
()
Close the
Handler
and free all associated resources.
void
SocketHandler.
close
()
Close this output stream.
void
StreamHandler.
close
()
Close the current output stream.
boolean
Level.
equals
(
Object
ox)
Compare two objects for value equality.
void
MemoryHandler.
flush
()
Causes a flush on the target
Handler
.
void
StreamHandler.
flush
()
Flush any buffered messages.
String
SimpleFormatter.
format
(
LogRecord
record)
Format the given LogRecord.
String
XMLFormatter.
format
(
LogRecord
record)
Format the given message to XML.
String
XMLFormatter.
getHead
(
Handler
h)
Return the header string for a set of XML formatted records.
String
XMLFormatter.
getTail
(
Handler
h)
Return the tail string for a set of XML formatted records.
int
Level.
hashCode
()
Generate a hashcode.
boolean
MemoryHandler.
isLoggable
(
LogRecord
record)
Check if this
Handler
would actually log a given
LogRecord
into its internal buffer.
boolean
StreamHandler.
isLoggable
(
LogRecord
record)
Check if this
Handler
would actually log a given
LogRecord
.
void
ConsoleHandler.
publish
(
LogRecord
record)
Publish a
LogRecord
.
void
FileHandler.
publish
(
LogRecord
record)
Format and publish a
LogRecord
.
void
MemoryHandler.
publish
(
LogRecord
record)
Store a
LogRecord
in an internal buffer.
void
SocketHandler.
publish
(
LogRecord
record)
Format and publish a
LogRecord
.
void
StreamHandler.
publish
(
LogRecord
record)
Format and publish a
LogRecord
.
void
StreamHandler.
setEncoding
(
String
encoding)
Set (or change) the character encoding used by this
Handler
.
final
String
Level.
toString
()
Returns a string representation of this Level.
Uses of
Override
in
java.util.regex
Methods in
java.util.regex
with annotations of type
Override
Modifier and Type
Method
Description
boolean
Matcher.
hasMatch
()
Returns whether
this
contains a valid match from
 a previous match or find operation.
Map
<
String
,
Integer
>
Matcher.
namedGroups
()
Returns an unmodifiable map from capturing group names to group numbers.
Uses of
Override
in
java.util.spi
Methods in
java.util.spi
with annotations of type
Override
Modifier and Type
Method
Description
ResourceBundle
AbstractResourceBundleProvider.
getBundle
(
String
baseName,
Locale
locale)
Returns a
ResourceBundle
for the given
baseName
and
locale
.
Uses of
Override
in
java.util.stream
Methods in
java.util.stream
with annotations of type
Override
Modifier and Type
Method
Description
void
DoubleStream.Builder.
accept
(double t)
Adds an element to the stream being built.
void
IntStream.Builder.
accept
(int t)
Adds an element to the stream being built.
void
LongStream.Builder.
accept
(long t)
Adds an element to the stream being built.
void
Stream.Builder.
accept
(
T
t)
Adds an element to the stream being built.
void
BaseStream.
close
()
Closes this stream, causing all close handlers for this stream pipeline
 to be called.
Uses of
Override
in
java.util.zip
Methods in
java.util.zip
with annotations of type
Override
Modifier and Type
Method
Description
long
Adler32.
getValue
()
Returns the checksum value.
long
CRC32.
getValue
()
Returns CRC-32 value.
long
CRC32C.
getValue
()
Returns CRC-32C value.
void
InflaterInputStream.
mark
(int readlimit)
Marks the current position in this input stream.
int
ZipInputStream.
read
()
Reads the next byte of data from the input stream for the current
 ZIP entry.
byte[]
ZipInputStream.
readAllBytes
()
Reads all remaining bytes from the input stream for the current ZIP entry.
int
ZipInputStream.
readNBytes
(byte[] b,
 int off,
 int len)
Reads the requested number of bytes from the input stream into the given
 byte array for the current ZIP entry returning the number of
 inflated bytes.
byte[]
ZipInputStream.
readNBytes
(int len)
Reads up to a specified number of bytes from the input stream
 for the current ZIP entry.
void
Adler32.
reset
()
Resets the checksum to initial value.
void
CRC32.
reset
()
Resets CRC-32 to initial value.
void
CRC32C.
reset
()
Resets CRC-32C to initial value.
void
InflaterInputStream.
reset
()
Repositions this stream to the position at the time the
mark
method was last called on this input stream.
void
ZipInputStream.
skipNBytes
(long n)
Skips over and discards exactly
n
bytes of data from this input
 stream for the current ZIP entry.
long
ZipInputStream.
transferTo
(
OutputStream
out)
Reads all bytes from this input stream for the current ZIP entry
 and writes the bytes to the given output stream in the order that they
 are read.
void
Adler32.
update
(byte[] b,
 int off,
 int len)
Updates the checksum with the specified array of bytes.
void
Adler32.
update
(int b)
Updates the checksum with the specified byte (the low eight
 bits of the argument b).
void
Adler32.
update
(
ByteBuffer
buffer)
Updates the checksum with the bytes from the specified buffer.
void
CRC32.
update
(byte[] b,
 int off,
 int len)
Updates the CRC-32 checksum with the specified array of bytes.
void
CRC32.
update
(int b)
Updates the CRC-32 checksum with the specified byte (the low
 eight bits of the argument b).
void
CRC32.
update
(
ByteBuffer
buffer)
Updates the CRC-32 checksum with the bytes from the specified buffer.
void
CRC32C.
update
(byte[] b,
 int off,
 int len)
Updates the CRC-32C checksum with the specified array of bytes.
void
CRC32C.
update
(int b)
Updates the CRC-32C checksum with the specified byte (the low eight bits
 of the argument b).
void
CRC32C.
update
(
ByteBuffer
buffer)
Updates the CRC-32C checksum with the bytes from the specified buffer.
Uses of
Override
in
javax.annotation.processing
Methods in
javax.annotation.processing
with annotations of type
Override
Modifier and Type
Method
Description
Iterable
<? extends
Completion
>
AbstractProcessor.
getCompletions
(
Element
element,
AnnotationMirror
annotation,
ExecutableElement
member,
String
userText)
Returns an empty iterable of completions.
Set
<
String
>
AbstractProcessor.
getSupportedAnnotationTypes
()
If the processor class is annotated with
SupportedAnnotationTypes
, return an unmodifiable set with the
 same set of strings as the annotation.
Set
<
String
>
AbstractProcessor.
getSupportedOptions
()
If the processor class is annotated with
SupportedOptions
, return an unmodifiable set with the same set
 of strings as the annotation.
SourceVersion
AbstractProcessor.
getSupportedSourceVersion
()
If the processor class is annotated with
SupportedSourceVersion
, return the source version in the
 annotation.
Uses of
Override
in
javax.crypto
Methods in
javax.crypto
with annotations of type
Override
Modifier and Type
Method
Description
int
CipherInputStream.
available
()
Returns the number of bytes that can be read from this input
 stream without blocking.
void
CipherInputStream.
close
()
Closes this input stream and releases any system resources
 associated with the stream.
void
CipherOutputStream.
close
()
Closes this output stream and releases any system resources
 associated with this stream.
void
CipherOutputStream.
flush
()
Flushes this output stream by forcing any buffered output bytes
 that have already been processed by the encapsulated
Cipher
object to be written out.
boolean
CipherInputStream.
markSupported
()
Tests if this input stream supports the
mark
and
reset
methods, which it does not.
int
CipherInputStream.
read
()
Reads the next byte of data from this input stream.
int
CipherInputStream.
read
(byte[] b)
Reads up to
b.length
bytes of data from this input
 stream into an array of bytes.
int
CipherInputStream.
read
(byte[] b,
 int off,
 int len)
Reads up to
len
bytes of data from this input stream
 into an array of bytes.
long
CipherInputStream.
skip
(long n)
Skips
n
bytes of input from the bytes that can be read
 from this input stream without blocking.
String
Cipher.
toString
()
Returns a
String
representation of this
Cipher
object.
void
CipherOutputStream.
write
(byte[] b)
Writes
b.length
bytes from the specified byte array
 to this output stream.
void
CipherOutputStream.
write
(byte[] b,
 int off,
 int len)
Writes
len
bytes from the specified byte array
 starting at offset
off
to this output stream.
void
CipherOutputStream.
write
(int b)
Writes the specified byte to this output stream.
Uses of
Override
in
javax.imageio.plugins.tiff
Methods in
javax.imageio.plugins.tiff
with annotations of type
Override
Modifier and Type
Method
Description
TIFFDirectory
TIFFDirectory.
clone
()
Clones the directory and all the fields contained therein.
TIFFField
TIFFField.
clone
()
Clones the field and all the information contained therein.
Uses of
Override
in
javax.lang.model.element
Methods in
javax.lang.model.element
with annotations of type
Override
Modifier and Type
Method
Description
TypeMirror
ExecutableElement.
asType
()
Returns the
executable type
defined
 by this executable element.
TypeMirror
ModuleElement.
asType
()
Returns a
pseudo-type
for this module.
TypeMirror
PackageElement.
asType
()
Returns a
pseudo-type
for this package.
TypeMirror
TypeElement.
asType
()
Returns the type defined by this class or interface element,
 returning the
prototypical
type for an element
 representing a generic type.
TypeMirror
TypeParameterElement.
asType
()
Returns the
type variable
corresponding to this type parameter element.
TypeMirror
VariableElement.
asType
()
Returns the type of this variable.
boolean
Element.
equals
(
Object
obj)
Returns
true
if the argument represents the same
 element as
this
, or
false
otherwise.
<A extends
Annotation
>
A
Element.
getAnnotation
(
Class
<A> annotationType)
Returns this construct's annotation of the specified type if
 such an annotation is
present
, else
null
.
List
<? extends
AnnotationMirror
>
Element.
getAnnotationMirrors
()
Returns the annotations that are
directly present
on
 this construct.
<A extends
Annotation
>
A[]
Element.
getAnnotationsByType
(
Class
<A> annotationType)
Returns annotations that are
associated
with this construct.
List
<? extends
Element
>
ModuleElement.
getEnclosedElements
()
Returns the packages within this module.
List
<? extends
Element
>
PackageElement.
getEnclosedElements
()
Returns the
top-level
classes and interfaces within this package.
List
<? extends
Element
>
TypeElement.
getEnclosedElements
()
Returns the fields, methods, constructors, record components,
 and member classes and interfaces that are directly declared in
 this class or interface.
Element
ExecutableElement.
getEnclosingElement
()
Returns the class or interface defining the executable.
Element
ModuleElement.
getEnclosingElement
()
Returns
null
since a module is not enclosed by another
 element.
Element
PackageElement.
getEnclosingElement
()
Returns the enclosing module if such a module exists; otherwise
null
.
Element
RecordComponentElement.
getEnclosingElement
()
Returns the enclosing element of this record component.
Element
TypeElement.
getEnclosingElement
()
Returns the package of a top-level class or interface and
 returns the immediately lexically enclosing element for a
nested
class or interface.
Element
TypeParameterElement.
getEnclosingElement
()
Returns the
generic element
of this type parameter.
Element
VariableElement.
getEnclosingElement
()
Returns the enclosing element of this variable.
Name
ModuleElement.
getQualifiedName
()
Returns the fully qualified name of this module.
Name
ExecutableElement.
getSimpleName
()
Returns the simple name of a constructor, method, or
 initializer.
Name
ModuleElement.
getSimpleName
()
Returns the simple name of this module.
Name
PackageElement.
getSimpleName
()
Returns the simple name of this package.
Name
RecordComponentElement.
getSimpleName
()
Returns the simple name of this record component.
Name
TypeElement.
getSimpleName
()
Returns the simple name of this class or interface element.
Name
VariableElement.
getSimpleName
()
Returns the simple name of this variable element.
int
Element.
hashCode
()
Obeys the general contract of
Object.hashCode
.
String
Modifier.
toString
()
Returns this modifier's name as defined in
The
 Java Language Specification
.
Uses of
Override
in
javax.lang.model.type
Methods in
javax.lang.model.type
with annotations of type
Override
Modifier and Type
Method
Description
<A extends
Annotation
>
A
TypeMirror.
getAnnotation
(
Class
<A> annotationType)
Returns this construct's annotation of the specified type if
 such an annotation is
present
, else
null
.
List
<? extends
AnnotationMirror
>
TypeMirror.
getAnnotationMirrors
()
Returns the annotations that are
directly present
on
 this construct.
<A extends
Annotation
>
A[]
TypeMirror.
getAnnotationsByType
(
Class
<A> annotationType)
Returns annotations that are
associated
with this construct.
Uses of
Override
in
javax.lang.model.util
Methods in
javax.lang.model.util
with annotations of type
Override
Modifier and Type
Method
Description
R
ElementKindVisitor6.
visitExecutable
(
ExecutableElement
e,
P
p)
Visits an executable element.
R
AbstractTypeVisitor6.
visitIntersection
(
IntersectionType
t,
P
p)
Visits an intersection type.
abstract
R
AbstractTypeVisitor8.
visitIntersection
(
IntersectionType
t,
P
p)
Visits an
IntersectionType
in a manner defined by a subclass.
R
SimpleTypeVisitor8.
visitIntersection
(
IntersectionType
t,
P
p)
Visits an intersection type.
R
TypeKindVisitor8.
visitIntersection
(
IntersectionType
t,
P
p)
Visits an intersection type.
R
AbstractElementVisitor6.
visitModule
(
ModuleElement
e,
P
p)
Visits a module element.
abstract
R
AbstractElementVisitor9.
visitModule
(
ModuleElement
e,
P
p)
Visits a module element.
R
ElementKindVisitor9.
visitModule
(
ModuleElement
e,
P
p)
Visits a module element.
R
ElementScanner9.
visitModule
(
ModuleElement
e,
P
p)
Visits a module element.
R
SimpleElementVisitor9.
visitModule
(
ModuleElement
e,
P
p)
Visits a module element.
R
TypeKindVisitor6.
visitNoType
(
NoType
t,
P
p)
Visits a
NoType
instance.
R
TypeKindVisitor9.
visitNoTypeAsModule
(
NoType
t,
P
p)
Visits a
MODULE
pseudo-type.
R
ElementKindVisitor6.
visitPackage
(
PackageElement
e,
P
p)
Visits a package element.
R
TypeKindVisitor6.
visitPrimitive
(
PrimitiveType
t,
P
p)
Visits a primitive type.
abstract
R
AbstractElementVisitor14.
visitRecordComponent
(
RecordComponentElement
e,
P
p)
Visits a record component element.
R
AbstractElementVisitor6.
visitRecordComponent
(
RecordComponentElement
e,
P
p)
Visits a record component element.
R
ElementKindVisitor14.
visitRecordComponent
(
RecordComponentElement
e,
P
p)
Visits a record component element.
R
ElementScanner14.
visitRecordComponent
(
RecordComponentElement
e,
P
p)
Visits a record component element.
R
SimpleElementVisitor14.
visitRecordComponent
(
RecordComponentElement
e,
P
p)
Visits a record component element.
R
ElementKindVisitor6.
visitType
(
TypeElement
e,
P
p)
Visits a type element.
R
ElementScanner14.
visitType
(
TypeElement
e,
P
p)
Visits a type element.
R
ElementKindVisitor14.
visitTypeAsRecord
(
TypeElement
e,
P
p)
Visits a
RECORD
type element.
R
ElementKindVisitor6.
visitTypeParameter
(
TypeParameterElement
e,
P
p)
Visits a type parameter element.
abstract
R
AbstractTypeVisitor7.
visitUnion
(
UnionType
t,
P
p)
Visits a
UnionType
in a manner defined by a subclass.
R
SimpleTypeVisitor7.
visitUnion
(
UnionType
t,
P
p)
Visits a union type.
R
TypeKindVisitor7.
visitUnion
(
UnionType
t,
P
p)
Visits a union type.
R
AbstractAnnotationValueVisitor6.
visitUnknown
(
AnnotationValue
av,
P
p)
Visits an unknown kind of annotation value.
R
AbstractElementVisitor6.
visitUnknown
(
Element
e,
P
p)
Visits an unknown kind of element.
R
AbstractTypeVisitor6.
visitUnknown
(
TypeMirror
t,
P
p)
Visits an unknown kind of type.
R
ElementKindVisitor6.
visitVariable
(
VariableElement
e,
P
p)
Visits a variable element
R
ElementScanner7.
visitVariable
(
VariableElement
e,
P
p)
Visits a variable element.
R
SimpleElementVisitor7.
visitVariable
(
VariableElement
e,
P
p)
Visits a variable element.
R
ElementKindVisitor14.
visitVariableAsBindingVariable
(
VariableElement
e,
P
p)
Visits a
BINDING_VARIABLE
variable element.
R
ElementKindVisitor7.
visitVariableAsResourceVariable
(
VariableElement
e,
P
p)
Visits a
RESOURCE_VARIABLE
variable element.
Uses of
Override
in
javax.management
Methods in
javax.management
with annotations of type
Override
Modifier and Type
Method
Description
void
AttributeList.
add
(int index,
Object
element)
Inserts the specified element at the specified position in this
 list.
boolean
AttributeList.
add
(
Object
element)
Appends the specified element to the end of this list.
boolean
AttributeList.
addAll
(int index,
Collection
<?> c)
Inserts all of the elements in the specified collection into this
 list, starting at the specified position.
boolean
AttributeList.
addAll
(
Collection
<?> c)
Appends all of the elements in the specified collection to the end of
 this list, in the order that they are returned by the
 specified collection's Iterator.
ValueExp
AttributeValueExp.
apply
(
ObjectName
name)
Applies the
AttributeValueExp
on an MBean.
ValueExp
StringValueExp.
apply
(
ObjectName
name)
Applies the ValueExp on a MBean.
Descriptor
ImmutableDescriptor.
clone
()
Returns a descriptor which is equal to this descriptor.
Object
MBeanInfo.
clone
()
Returns a shallow clone of this instance.
Object
MBeanOperationInfo.
clone
()
Returns a shallow clone of this instance.
boolean
ImmutableDescriptor.
equals
(
Object
o)
Compares this descriptor to the given object.
boolean
MBeanInfo.
equals
(
Object
o)
Compare this MBeanInfo to another.
boolean
MBeanOperationInfo.
equals
(
Object
o)
Compare this MBeanOperationInfo to another.
boolean
ObjectName.
equals
(
Object
object)
Compares the current object name with another object name.
int
ImmutableDescriptor.
hashCode
()
Returns the hash code value for this descriptor.
int
ObjectName.
hashCode
()
Returns a hash code for this object name.
Object
AttributeList.
set
(int index,
Object
element)
Replaces the element at the specified position in this list with
 the specified element.
void
AttributeValueExp.
setMBeanServer
(
MBeanServer
s)
Deprecated.
This method has no effect.
String
AttributeValueExp.
toString
()
Returns the string representing its value.
String
Notification.
toString
()
Returns a String representation of this notification.
String
ObjectName.
toString
()
Returns a string representation of the object name.
Uses of
Override
in
javax.management.modelmbean
Methods in
javax.management.modelmbean
with annotations of type
Override
Modifier and Type
Method
Description
Object
DescriptorSupport.
clone
()
Returns a new Descriptor which is a duplicate of the Descriptor.
Object
ModelMBeanAttributeInfo.
clone
()
Creates and returns a new ModelMBeanAttributeInfo which is a duplicate of this ModelMBeanAttributeInfo.
Object
ModelMBeanConstructorInfo.
clone
()
Creates and returns a new ModelMBeanConstructorInfo which is a duplicate of this ModelMBeanConstructorInfo.
boolean
DescriptorSupport.
equals
(
Object
o)
Compares this descriptor to the given object.
Descriptor
ModelMBeanConstructorInfo.
getDescriptor
()
Returns a copy of the associated Descriptor.
Descriptor
ModelMBeanInfoSupport.
getDescriptor
()
int
DescriptorSupport.
hashCode
()
Returns the hash code value for this descriptor.
String
DescriptorSupport.
toString
()
Returns a human readable string representing the
 descriptor.
String
ModelMBeanAttributeInfo.
toString
()
Returns a human-readable version of the
 ModelMBeanAttributeInfo instance.
String
ModelMBeanConstructorInfo.
toString
()
Returns a string containing the entire contents of the ModelMBeanConstructorInfo in human readable form.
Uses of
Override
in
javax.management.monitor
Methods in
javax.management.monitor
with annotations of type
Override
Modifier and Type
Method
Description
Number
CounterMonitor.
getDerivedGauge
(
ObjectName
object)
Gets the derived gauge of the specified object, if this object is
 contained in the set of observed MBeans, or
null
otherwise.
Number
GaugeMonitor.
getDerivedGauge
(
ObjectName
object)
Gets the derived gauge of the specified object, if this object is
 contained in the set of observed MBeans, or
null
otherwise.
String
StringMonitor.
getDerivedGauge
(
ObjectName
object)
Gets the derived gauge of the specified object, if this object is
 contained in the set of observed MBeans, or
null
otherwise.
long
CounterMonitor.
getDerivedGaugeTimeStamp
(
ObjectName
object)
Gets the derived gauge timestamp of the specified object, if
 this object is contained in the set of observed MBeans, or
0
otherwise.
long
GaugeMonitor.
getDerivedGaugeTimeStamp
(
ObjectName
object)
Gets the derived gauge timestamp of the specified object, if
 this object is contained in the set of observed MBeans, or
0
otherwise.
long
StringMonitor.
getDerivedGaugeTimeStamp
(
ObjectName
object)
Gets the derived gauge timestamp of the specified object, if
 this object is contained in the set of observed MBeans, or
0
otherwise.
MBeanNotificationInfo
[]
CounterMonitor.
getNotificationInfo
()
Returns a
NotificationInfo
object containing the
 name of the Java class of the notification and the notification
 types sent by the counter monitor.
MBeanNotificationInfo
[]
GaugeMonitor.
getNotificationInfo
()
Returns a
NotificationInfo
object containing the
 name of the Java class of the notification and the notification
 types sent by the gauge monitor.
MBeanNotificationInfo
[]
StringMonitor.
getNotificationInfo
()
Returns a
NotificationInfo
object containing the name of
 the Java class of the notification and the notification types sent by
 the string monitor.
Uses of
Override
in
javax.management.openmbean
Methods in
javax.management.openmbean
with annotations of type
Override
Modifier and Type
Method
Description
boolean
CompositeDataSupport.
equals
(
Object
obj)
Compares the specified
obj
parameter with this
CompositeDataSupport
instance for equality.
int
CompositeDataSupport.
hashCode
()
Returns the hash code value for this
CompositeDataSupport
instance.
String
CompositeDataSupport.
toString
()
Returns a string representation of this
CompositeDataSupport
instance.
Uses of
Override
in
javax.management.remote
Methods in
javax.management.remote
with annotations of type
Override
Modifier and Type
Method
Description
MBeanNotificationInfo
[]
JMXConnectorServer.
getNotificationInfo
()
Returns an array indicating the notifications that this MBean
 sends.
Uses of
Override
in
javax.management.remote.rmi
Methods in
javax.management.remote.rmi
with annotations of type
Override
Modifier and Type
Method
Description
String
RMIConnectionImpl.
toString
()
Returns a string representation of this object.
String
RMIConnector.
toString
()
Returns a string representation of this object.
Uses of
Override
in
javax.net.ssl
Methods in
javax.net.ssl
with annotations of type
Override
Modifier and Type
Method
Description
boolean
SNIHostName.
equals
(
Object
other)
Compares this server name to the specified object.
boolean
SNIServerName.
equals
(
Object
other)
Indicates whether some other object is "equal to" this server name.
int
SNIHostName.
hashCode
()
Returns a hash code value for this
SNIHostName
.
int
SNIServerName.
hashCode
()
Returns a hash code value for this server name.
String
SNIHostName.
toString
()
Returns a string representation of the object, including the DNS
 hostname in this
SNIHostName
object.
String
SNIServerName.
toString
()
Returns a string representation of this server name, including the server
 name type and the encoded server name value in this
SNIServerName
object.
String
SSLEngineResult.
toString
()
Returns a String representation of this object.
Uses of
Override
in
javax.security.auth
Methods in
javax.security.auth
with annotations of type
Override
Modifier and Type
Method
Description
boolean
Subject.
equals
(
Object
o)
Compares the specified Object with this
Subject
for equality.
int
Subject.
hashCode
()
Returns a hashcode for this
Subject
.
String
Subject.
toString
()
Return the String representation of this
Subject
.
Uses of
Override
in
javax.security.auth.kerberos
Methods in
javax.security.auth.kerberos
with annotations of type
Override
Modifier and Type
Method
Description
void
EncryptionKey.
destroy
()
Destroys this key by clearing out the key material of this key.
void
KerberosCredMessage.
destroy
()
Destroys this object by clearing out the message.
boolean
DelegationPermission.
equals
(
Object
obj)
Checks two DelegationPermission objects for equality.
boolean
EncryptionKey.
equals
(
Object
other)
Compares the specified object with this key for equality.
boolean
KerberosCredMessage.
equals
(
Object
other)
Compares the specified object with this
KerberosCredMessage
for equality.
boolean
ServicePermission.
equals
(
Object
obj)
Checks two ServicePermission objects for equality.
String
ServicePermission.
getActions
()
Returns the canonical string representation of the actions.
String
EncryptionKey.
getAlgorithm
()
Returns the standard algorithm name for this key.
byte[]
EncryptionKey.
getEncoded
()
Returns the key material of this key.
String
EncryptionKey.
getFormat
()
Returns the name of the encoding format for this key.
int
DelegationPermission.
hashCode
()
Returns the hash code value for this object.
int
EncryptionKey.
hashCode
()
Returns a hash code for this
EncryptionKey
.
int
KerberosCredMessage.
hashCode
()
Returns a hash code for this
KerberosCredMessage
.
int
ServicePermission.
hashCode
()
Returns the hash code value for this object.
boolean
DelegationPermission.
implies
(
Permission
p)
Checks if this Kerberos delegation permission object "implies" the
 specified permission.
boolean
ServicePermission.
implies
(
Permission
p)
Checks if this Kerberos service permission object "implies" the
 specified permission.
PermissionCollection
DelegationPermission.
newPermissionCollection
()
Returns a PermissionCollection object for storing
 DelegationPermission objects.
PermissionCollection
ServicePermission.
newPermissionCollection
()
Returns a PermissionCollection object for storing
 ServicePermission objects.
String
EncryptionKey.
toString
()
Returns an informative textual representation of this
EncryptionKey
.
String
KerberosCredMessage.
toString
()
Returns an informative textual representation of this
KerberosCredMessage
.
Uses of
Override
in
javax.sound.midi
Methods in
javax.sound.midi
with annotations of type
Override
Modifier and Type
Method
Description
Object
MetaMessage.
clone
()
Creates a new object of the same class and with the same contents as this
 object.
abstract
Object
MidiMessage.
clone
()
Creates a new object of the same class and with the same contents as this
 object.
Object
ShortMessage.
clone
()
Creates a new object of the same class and with the same contents as this
 object.
Object
SysexMessage.
clone
()
Creates a new object of the same class and with the same contents as this
 object.
void
MidiDevice.
close
()
Closes the device, indicating that the device should now release any
 system resources it is using.
void
Receiver.
close
()
Indicates that the application has finished using the receiver, and that
 limited resources it requires may be released or made available.
void
Transmitter.
close
()
Indicates that the application has finished using the transmitter, and
 that limited resources it requires may be released or made available.
final boolean
MidiDevice.Info.
equals
(
Object
obj)
Indicates whether the specified object is equal to this info object,
 returning
true
if the objects are the same.
final boolean
Sequencer.SyncMode.
equals
(
Object
obj)
Indicates whether the specified object is equal to this
 synchronization mode, returning
true
if the objects are the
 same.
long
Sequencer.
getMicrosecondPosition
()
Obtains the current position in the sequence, expressed in microseconds.
final int
MidiDevice.Info.
hashCode
()
Returns a hash code value for this info object.
final int
Sequencer.SyncMode.
hashCode
()
Returns a hash code value for this synchronization mode.
void
SysexMessage.
setMessage
(byte[] data,
 int length)
Sets the data for the system exclusive message.
final
String
MidiDevice.Info.
toString
()
Returns a string representation of the info object.
final
String
Sequencer.SyncMode.
toString
()
Returns mode's name as the string representation of the
 synchronization mode.
Uses of
Override
in
javax.sound.sampled
Methods in
javax.sound.sampled
with annotations of type
Override
Modifier and Type
Method
Description
int
AudioInputStream.
available
()
Returns the maximum number of bytes that can be read (or skipped over)
 from this audio input stream without blocking.
void
AudioInputStream.
close
()
Closes this audio input stream and releases any system resources
 associated with the stream.
void
Line.
close
()
Closes the line, indicating that any system resources in use by the line
 can be released.
final boolean
AudioFileFormat.Type.
equals
(
Object
obj)
Indicates whether the specified object is equal to this file type,
 returning
true
if the objects are equal.
final boolean
AudioFormat.Encoding.
equals
(
Object
obj)
Indicates whether the specified object is equal to this encoding,
 returning
true
if the objects are equal.
final boolean
Control.Type.
equals
(
Object
obj)
Indicates whether the specified object is equal to this control type,
 returning
true
if the objects are the same.
final boolean
LineEvent.Type.
equals
(
Object
obj)
Indicates whether the specified object is equal to this event type,
 returning
true
if the objects are the same.
final boolean
Mixer.Info.
equals
(
Object
obj)
Indicates whether the specified object is equal to this info object,
 returning
true
if the objects are the same.
final boolean
Port.Info.
equals
(
Object
obj)
Indicates whether the specified object is equal to this info object,
 returning
true
if the objects are the same.
final boolean
ReverbType.
equals
(
Object
obj)
Indicates whether the specified object is equal to this reverb type,
 returning
true
if the objects are the same.
final int
AudioFileFormat.Type.
hashCode
()
Returns a hash code value for this file type.
final int
AudioFormat.Encoding.
hashCode
()
Returns a hash code value for this encoding.
final int
Control.Type.
hashCode
()
Returns a hash code value for this control type.
final int
LineEvent.Type.
hashCode
()
Returns a hash code value for this event type.
final int
Mixer.Info.
hashCode
()
Returns a hash code value for this info object.
final int
Port.Info.
hashCode
()
Returns a hash code value for this info object.
final int
ReverbType.
hashCode
()
Returns a hash code value for this reverb type.
void
AudioInputStream.
mark
(int readlimit)
Marks the current position in this audio input stream.
boolean
AudioInputStream.
markSupported
()
Tests whether this audio input stream supports the
mark
and
reset
methods.
boolean
DataLine.Info.
matches
(
Line.Info
info)
Determines whether the specified info object matches this one.
boolean
Port.Info.
matches
(
Line.Info
info)
Indicates whether this info object specified matches this one.
int
AudioInputStream.
read
()
Reads the next byte of data from the audio input stream.
int
AudioInputStream.
read
(byte[] b)
Reads some number of bytes from the audio input stream and stores them
 into the buffer array
b
.
int
AudioInputStream.
read
(byte[] b,
 int off,
 int len)
Reads up to a specified maximum number of bytes of data from the audio
 stream, putting them into the given byte array.
void
AudioInputStream.
reset
()
Repositions this audio input stream to the position it had at the time
 its
mark
method was last invoked.
long
AudioInputStream.
skip
(long n)
Skips over and discards a specified number of bytes from this audio input
 stream.
String
AudioFileFormat.
toString
()
Returns a string representation of the audio file format.
final
String
AudioFileFormat.Type.
toString
()
Returns type's name as the string representation of the file type.
final
String
AudioFormat.Encoding.
toString
()
Returns encoding's name as the string representation of the encoding.
String
AudioFormat.
toString
()
Returns a string that describes the audio format, such as: "PCM SIGNED
 22050 Hz 16 bit mono big-endian".
String
BooleanControl.
toString
()
Returns a string representation of the boolean control.
String
CompoundControl.
toString
()
Returns a string representation of the compound control.
String
Control.
toString
()
Returns a string representation of the control.
final
String
Control.Type.
toString
()
Returns type's name as the string representation of the control type.
String
DataLine.Info.
toString
()
Returns a string representation of the info object.
String
EnumControl.
toString
()
Returns a string representation of the enumerated control.
String
FloatControl.
toString
()
Returns a string representation of the float control.
String
Line.Info.
toString
()
Returns a string representation of the info object.
String
LineEvent.
toString
()
Returns a string representation of the event.
String
LineEvent.Type.
toString
()
Returns type's name as the string representation of the event type.
final
String
Mixer.Info.
toString
()
Returns a string representation of the info object.
final
String
Port.Info.
toString
()
Returns a string representation of the info object.
final
String
ReverbType.
toString
()
Returns a string representation of the reverb type, including its name
 and its parameter settings.
Uses of
Override
in
javax.sql
Methods in
javax.sql
with annotations of type
Override
Modifier and Type
Method
Description
int
ConnectionPoolDataSource.
getLoginTimeout
()
Gets the maximum time in seconds that this data source can wait
 while attempting to connect to a database.
int
DataSource.
getLoginTimeout
()
Gets the maximum time in seconds that this data source can wait
 while attempting to connect to a database.
int
XADataSource.
getLoginTimeout
()
Gets the maximum time in seconds that this data source can wait
 while attempting to connect to a database.
PrintWriter
ConnectionPoolDataSource.
getLogWriter
()
Retrieves the log writer for this
DataSource
object.
PrintWriter
DataSource.
getLogWriter
()
Retrieves the log writer for this
DataSource
object.
PrintWriter
XADataSource.
getLogWriter
()
Retrieves the log writer for this
DataSource
object.
void
ConnectionPoolDataSource.
setLoginTimeout
(int seconds)
Sets the maximum time in seconds that this data source will wait
 while attempting to connect to a database.
void
DataSource.
setLoginTimeout
(int seconds)
Sets the maximum time in seconds that this data source will wait
 while attempting to connect to a database.
void
XADataSource.
setLoginTimeout
(int seconds)
Sets the maximum time in seconds that this data source will wait
 while attempting to connect to a database.
void
ConnectionPoolDataSource.
setLogWriter
(
PrintWriter
out)
Sets the log writer for this
DataSource
object to the given
java.io.PrintWriter
object.
void
DataSource.
setLogWriter
(
PrintWriter
out)
Sets the log writer for this
DataSource
object to the given
java.io.PrintWriter
object.
void
XADataSource.
setLogWriter
(
PrintWriter
out)
Sets the log writer for this
DataSource
object to the given
java.io.PrintWriter
object.
Uses of
Override
in
javax.swing
Methods in
javax.swing
with annotations of type
Override
Modifier and Type
Method
Description
boolean
JList.AccessibleJList.AccessibleJListChild.
doAccessibleAction
(int i)
Performs the specified action on the object.
void
DefaultListCellRenderer.
firePropertyChange
(
String
propertyName,
 boolean oldValue,
 boolean newValue)
Overridden for performance reasons.
void
DefaultListCellRenderer.
firePropertyChange
(
String
propertyName,
 byte oldValue,
 byte newValue)
Overridden for performance reasons.
void
DefaultListCellRenderer.
firePropertyChange
(
String
propertyName,
 char oldValue,
 char newValue)
Overridden for performance reasons.
void
DefaultListCellRenderer.
firePropertyChange
(
String
propertyName,
 double oldValue,
 double newValue)
Overridden for performance reasons.
void
DefaultListCellRenderer.
firePropertyChange
(
String
propertyName,
 float oldValue,
 float newValue)
Overridden for performance reasons.
void
DefaultListCellRenderer.
firePropertyChange
(
String
propertyName,
 int oldValue,
 int newValue)
Overridden for performance reasons.
void
DefaultListCellRenderer.
firePropertyChange
(
String
propertyName,
 long oldValue,
 long newValue)
Overridden for performance reasons.
void
DefaultListCellRenderer.
firePropertyChange
(
String
propertyName,
 short oldValue,
 short newValue)
Overridden for performance reasons.
protected void
DefaultListCellRenderer.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Overridden for performance reasons.
AccessibleAction
JList.AccessibleJList.AccessibleJListChild.
getAccessibleAction
()
Gets the
AccessibleAction
associated with this object that
 supports one or more actions.
int
JList.AccessibleJList.AccessibleJListChild.
getAccessibleActionCount
()
Returns the number of accessible actions available in this object If
 there are more than one, the first one is considered the "default" action
 of the object.
String
JList.AccessibleJList.AccessibleJListChild.
getAccessibleActionDescription
(int i)
Returns a description of the specified action of the object.
void
JComponent.
hide
()
Deprecated.
void
DefaultListCellRenderer.
invalidate
()
Overridden for performance reasons.
boolean
DefaultListCellRenderer.
isOpaque
()
Overridden for performance reasons.
boolean
JComponent.
isValidateRoot
()
If this method returns true,
revalidate
calls by
 descendants of this component will cause the entire tree
 beginning with this root to be validated.
boolean
JRootPane.
isValidateRoot
()
If a descendant of this
JRootPane
calls
revalidate
, validate from here on down.
boolean
JScrollPane.
isValidateRoot
()
Overridden to return true so that any calls to
revalidate
on any descendants of this
JScrollPane
will cause the
 entire tree beginning with this
JScrollPane
to be
 validated.
boolean
JSplitPane.
isValidateRoot
()
Returns true, so that calls to
revalidate
on any descendant of this
JSplitPane
will cause a request to be queued that
 will validate the
JSplitPane
and all its descendants.
boolean
JTextField.
isValidateRoot
()
Calls to
revalidate
that come from within the
 textfield itself will
 be handled by validating the textfield, unless the textfield
 is contained within a
JViewport
,
 in which case this returns false.
void
DefaultListCellRenderer.
repaint
()
Overridden for performance reasons.
void
DefaultListCellRenderer.
repaint
(long tm,
 int x,
 int y,
 int width,
 int height)
Overridden for performance reasons.
void
DefaultListCellRenderer.
repaint
(
Rectangle
r)
Overridden for performance reasons.
void
JEditorPane.
replaceSelection
(
String
content)
Replaces the currently selected content with new content
 represented by the given string.
void
JTextPane.
replaceSelection
(
String
content)
Replaces the currently selected content with new content
 represented by the given string.
void
JToggleButton.
requestFocus
(
FocusEvent.Cause
cause)
If this toggle button is a member of the
ButtonGroup
which has
 another toggle button which is selected and can be the focus owner,
 and the focus cause argument denotes window activation or focus
 traversal action of any direction the result of the method execution
 is the same as calling
Component.requestFocus(FocusEvent.Cause)
on the toggle button
 selected in the group.
void
DefaultListCellRenderer.
revalidate
()
Overridden for performance reasons.
void
JPasswordField.
setText
(
String
t)
void
DefaultListCellRenderer.
validate
()
Overridden for performance reasons.
Uses of
Override
in
javax.swing.border
Methods in
javax.swing.border
with annotations of type
Override
Modifier and Type
Method
Description
Insets
StrokeBorder.
getBorderInsets
(
Component
c,
Insets
insets)
Reinitializes the
insets
parameter
 with this border's current insets.
boolean
CompoundBorder.
isBorderOpaque
()
Returns whether or not the compound border is opaque.
void
StrokeBorder.
paintBorder
(
Component
c,
Graphics
g,
 int x,
 int y,
 int width,
 int height)
Paints the border for the specified component
 with the specified position and size.
Uses of
Override
in
javax.swing.event
Methods in
javax.swing.event
with annotations of type
Override
Modifier and Type
Method
Description
RowSorter
<?>
RowSorterEvent.
getSource
()
Returns the source of the event as a
RowSorter
.
Uses of
Override
in
javax.swing.plaf.basic
Methods in
javax.swing.plaf.basic
with annotations of type
Override
Modifier and Type
Method
Description
int
BasicComboBoxUI.
getBaseline
(
JComponent
c,
 int width,
 int height)
Returns the baseline.
Component.BaselineResizeBehavior
BasicComboBoxUI.
getBaselineResizeBehavior
(
JComponent
c)
Returns an enum indicating how the baseline of the component
 changes as the size changes.
Component
BasicComboBoxRenderer.
getListCellRendererComponent
(
JList
<?> list,
Object
value,
 int index,
 boolean isSelected,
 boolean cellHasFocus)
Dimension
BasicComboBoxUI.
getMinimumSize
(
JComponent
c)
The minimum size is the size of the display area plus insets plus the button.
Dimension
BasicRadioButtonUI.
getPreferredSize
(
JComponent
c)
The preferred size of the radio button
Rectangle
BasicTextUI.
modelToView
(
JTextComponent
tc,
 int pos)
Deprecated.
replaced by
TextUI.modelToView2D(JTextComponent, int, Position.Bias)
Rectangle
BasicTextUI.
modelToView
(
JTextComponent
tc,
 int pos,
Position.Bias
bias)
Deprecated.
replaced by
TextUI.modelToView2D(JTextComponent, int, Position.Bias)
void
BasicRadioButtonUI.
paint
(
Graphics
g,
JComponent
c)
paint the radio button
int
BasicTextUI.
viewToModel
(
JTextComponent
tc,
Point
pt)
Deprecated.
replaced by
TextUI.viewToModel2D(JTextComponent, Point2D, Position.Bias[])
int
BasicTextUI.
viewToModel
(
JTextComponent
tc,
Point
pt,
Position.Bias
[] biasReturn)
Deprecated.
replaced by
TextUI.viewToModel2D(JTextComponent, Point2D, Position.Bias[])
Uses of
Override
in
javax.swing.plaf.metal
Methods in
javax.swing.plaf.metal
with annotations of type
Override
Modifier and Type
Method
Description
Dimension
MetalFileChooserUI.
getMaximumSize
(
JComponent
c)
Returns the maximum size of the
JFileChooser
.
Dimension
MetalFileChooserUI.
getMinimumSize
(
JComponent
c)
Returns the minimum size of the
JFileChooser
.
Dimension
MetalFileChooserUI.
getPreferredSize
(
JComponent
c)
Returns the preferred size of the specified
JFileChooser
.
Uses of
Override
in
javax.swing.plaf.multi
Methods in
javax.swing.plaf.multi
with annotations of type
Override
Modifier and Type
Method
Description
Rectangle
MultiTextUI.
modelToView
(
JTextComponent
a,
 int b,
Position.Bias
c)
Deprecated.
replaced by
TextUI.modelToView2D(JTextComponent, int, Position.Bias)
int
MultiTextUI.
viewToModel
(
JTextComponent
a,
Point
b)
Deprecated.
int
MultiTextUI.
viewToModel
(
JTextComponent
a,
Point
b,
Position.Bias
[] c)
Deprecated.
Uses of
Override
in
javax.swing.plaf.nimbus
Methods in
javax.swing.plaf.nimbus
with annotations of type
Override
Modifier and Type
Method
Description
Object
NimbusStyle.
get
(
SynthContext
ctx,
Object
key)
Getter for a region specific style property.
protected
Color
NimbusStyle.
getColorForState
(
SynthContext
ctx,
ColorType
type)
Returns the color for the specified state.
String
NimbusLookAndFeel.
getDescription
()
Returns a textual description of this look and feel.
protected
Font
NimbusStyle.
getFontForState
(
SynthContext
ctx)
Returns the font for the specified state.
String
NimbusLookAndFeel.
getID
()
Return a string that identifies this look and feel.
Insets
NimbusStyle.
getInsets
(
SynthContext
ctx,
Insets
in)
Returns the Insets that are used to calculate sizing information.
String
NimbusLookAndFeel.
getName
()
Return a short string that identifies this look and feel.
SynthPainter
NimbusStyle.
getPainter
(
SynthContext
ctx)
Returns the
SynthPainter
that will be used for painting.
void
NimbusLookAndFeel.
initialize
()
Called by UIManager when this look and feel is installed.
void
NimbusStyle.
installDefaults
(
SynthContext
ctx)
Installs the necessary state from this Style on the
JComponent
from
context
.
boolean
NimbusStyle.
isOpaque
(
SynthContext
ctx)
Returns true if the region is opaque.
final void
AbstractRegionPainter.
paint
(
Graphics2D
g,
JComponent
c,
 int w,
 int h)
Renders to the given
Graphics2D
object.
boolean
NimbusLookAndFeel.
shouldUpdateStyleOnAncestorChanged
()
Returns whether or not the UIs should update their
SynthStyles
from the
SynthStyleFactory
when the ancestor of the
JComponent
changes.
protected boolean
NimbusLookAndFeel.
shouldUpdateStyleOnEvent
(
PropertyChangeEvent
ev)
Returns whether or not the UIs should update their styles when a
 particular event occurs.
void
NimbusLookAndFeel.
uninitialize
()
Called by UIManager when this look and feel is uninstalled.
Uses of
Override
in
javax.swing.plaf.synth
Methods in
javax.swing.plaf.synth
with annotations of type
Override
Modifier and Type
Method
Description
View
SynthPasswordFieldUI.
create
(
Element
elem)
Creates a view (PasswordView) for an element.
BasicSplitPaneDivider
SynthSplitPaneUI.
createDefaultDivider
()
Creates the default divider.
protected
JComponent
SynthSpinnerUI.
createEditor
()
This method is called by installUI to get the editor component
 of the
JSpinner
.
protected
LayoutManager
SynthTabbedPaneUI.
createLayoutManager
()
Invoked by
installUI
to create
 a layout manager object to manage
 the
JTabbedPane
.
protected
Container
SynthOptionPaneUI.
createMessageArea
()
Called from
BasicOptionPaneUI.installComponents()
to create a
Container
containing the body of the message.
protected
MouseListener
SynthTabbedPaneUI.
createMouseListener
()
Creates a mouse listener.
SynthContext
SynthButtonUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthColorChooserUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthComboBoxUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthDesktopIconUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthDesktopPaneUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthEditorPaneUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthInternalFrameUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthLabelUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthListUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthMenuBarUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthMenuItemUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthMenuUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthOptionPaneUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthPanelUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthPopupMenuUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthProgressBarUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthRootPaneUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthScrollBarUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthScrollPaneUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthSeparatorUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthSliderUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthSpinnerUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthSplitPaneUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthTabbedPaneUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthTableHeaderUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthTableUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthTextAreaUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthTextFieldUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthToolBarUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthToolTipUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthTreeUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
SynthContext
SynthViewportUI.
getContext
(
JComponent
c)
Returns the Context for the specified component.
UIDefaults
SynthLookAndFeel.
getDefaults
()
Returns the defaults for this SynthLookAndFeel.
protected
Dimension
SynthComboBoxUI.
getDefaultSize
()
Returns the default size of an empty display area of the combo box using
 the current renderer and font.
String
SynthLookAndFeel.
getDescription
()
Returns a textual description of SynthLookAndFeel.
default int
SynthIcon.
getIconHeight
()
default int
SynthIcon.
getIconWidth
()
String
SynthLookAndFeel.
getID
()
Return a string that identifies this look and feel.
Dimension
SynthComboBoxUI.
getMinimumSize
(
JComponent
c)
The minimum size is the size of the display area plus insets plus the button.
String
SynthLookAndFeel.
getName
()
Return a short string that identifies this look and feel.
Dimension
SynthScrollBarUI.
getPreferredSize
(
JComponent
c)
A vertical scrollbar's preferred width is the maximum of
 preferred widths of the (non
null
)
 increment/decrement buttons,
 and the minimum width of the thumb.
protected
String
SynthFormattedTextFieldUI.
getPropertyPrefix
()
Fetches the name used as a key to lookup properties through the
 UIManager.
protected
String
SynthPasswordFieldUI.
getPropertyPrefix
()
Fetches the name used as a key to look up properties through the
 UIManager.
protected
String
SynthTextPaneUI.
getPropertyPrefix
()
Fetches the name used as a key to lookup properties through the
 UIManager.
protected
Icon
SynthRadioButtonUI.
getSizingIcon
(
AbstractButton
b)
Returns the Icon used in calculating the
 preferred/minimum/maximum size.
void
SynthLookAndFeel.
initialize
()
Called by UIManager when this look and feel is installed.
void
SynthInternalFrameUI.
installDefaults
()
Installs the defaults.
protected void
SynthPasswordFieldUI.
installDefaults
()
Installs the necessary properties on the JPasswordField.
protected void
SynthSpinnerUI.
installDefaults
()
Initializes the
JSpinner
border
,
foreground
, and
background
, properties
 based on the corresponding "Spinner.*" properties from defaults table.
protected void
SynthSplitPaneUI.
installDefaults
()
Installs the UI defaults.
protected void
SynthTableUI.
installDefaults
()
Initializes JTable properties, such as font, foreground, and background.
protected void
SynthSplitPaneUI.
installListeners
()
Installs the event listeners for the UI.
protected void
SynthTableUI.
installListeners
()
Attaches listeners to the JTable.
void
SynthComboBoxUI.
installUI
(
JComponent
c)
Configures the specified component appropriately for the look and feel.
void
SynthTextPaneUI.
installUI
(
JComponent
c)
Installs the UI for a component.
boolean
SynthLookAndFeel.
isNativeLookAndFeel
()
Returns false, SynthLookAndFeel is not a native look and feel.
boolean
SynthLookAndFeel.
isSupportedLookAndFeel
()
Returns true, SynthLookAndFeel is always supported.
void
SynthButtonUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthColorChooserUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthComboBoxUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthDesktopIconUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthDesktopPaneUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthInternalFrameUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthLabelUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthMenuBarUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthMenuItemUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthMenuUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthOptionPaneUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthPanelUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthPopupMenuUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthProgressBarUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthRootPaneUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthScrollBarUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthScrollPaneUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthSeparatorUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthSliderUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthSpinnerUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthSplitPaneUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthTabbedPaneUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthTableHeaderUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthTableUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthToolBarUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthToolTipUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthTreeUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
void
SynthViewportUI.
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
protected void
SynthTextAreaUI.
paintBackground
(
Graphics
g)
Paints a background for the view.
protected void
SynthTextFieldUI.
paintBackground
(
Graphics
g)
Paints a background for the view.
void
SynthButtonUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthColorChooserUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthComboBoxUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthDesktopIconUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthDesktopPaneUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthEditorPaneUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthInternalFrameUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthLabelUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthListUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthMenuBarUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthMenuItemUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthMenuUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthOptionPaneUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthPanelUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthPopupMenuUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthProgressBarUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthRootPaneUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthScrollBarUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthScrollPaneUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthSeparatorUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthSliderUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthSpinnerUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthSplitPaneUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthTabbedPaneUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthTableHeaderUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthTableUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthTextAreaUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthTextFieldUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthToolBarUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthToolTipUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthTreeUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthViewportUI.
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
SynthComboBoxUI.
paintCurrentValue
(
Graphics
g,
Rectangle
bounds,
 boolean hasFocus)
Paints the currently selected item.
default void
SynthIcon.
paintIcon
(
Component
c,
Graphics
g,
 int x,
 int y)
void
SynthButtonUI.
propertyChange
(
PropertyChangeEvent
e)
This method gets called when a bound property is changed.
void
SynthColorChooserUI.
propertyChange
(
PropertyChangeEvent
e)
This method gets called when a bound property is changed.
void
SynthComboBoxUI.
propertyChange
(
PropertyChangeEvent
e)
This method gets called when a bound property is changed.
void
SynthDesktopPaneUI.
propertyChange
(
PropertyChangeEvent
evt)
This method gets called when a bound property is changed.
protected void
SynthEditorPaneUI.
propertyChange
(
PropertyChangeEvent
evt)
This method gets called when a bound property is changed
 on the associated JTextComponent.
void
SynthInternalFrameUI.
propertyChange
(
PropertyChangeEvent
evt)
This method gets called when a bound property is changed.
void
SynthListUI.
propertyChange
(
PropertyChangeEvent
e)
This method gets called when a bound property is changed.
void
SynthMenuBarUI.
propertyChange
(
PropertyChangeEvent
e)
This method gets called when a bound property is changed.
void
SynthMenuItemUI.
propertyChange
(
PropertyChangeEvent
e)
This method gets called when a bound property is changed.
void
SynthMenuUI.
propertyChange
(
PropertyChangeEvent
e)
This method gets called when a bound property is changed.
void
SynthOptionPaneUI.
propertyChange
(
PropertyChangeEvent
e)
This method gets called when a bound property is changed.
void
SynthPanelUI.
propertyChange
(
PropertyChangeEvent
pce)
This method gets called when a bound property is changed.
void
SynthPopupMenuUI.
propertyChange
(
PropertyChangeEvent
e)
This method gets called when a bound property is changed.
void
SynthProgressBarUI.
propertyChange
(
PropertyChangeEvent
e)
This method gets called when a bound property is changed.
void
SynthRootPaneUI.
propertyChange
(
PropertyChangeEvent
e)
Invoked when a property changes on the root pane.
void
SynthSliderUI.
propertyChange
(
PropertyChangeEvent
e)
This method gets called when a bound property is changed.
void
SynthSpinnerUI.
propertyChange
(
PropertyChangeEvent
e)
This method gets called when a bound property is changed.
void
SynthSplitPaneUI.
propertyChange
(
PropertyChangeEvent
e)
This method gets called when a bound property is changed.
void
SynthTabbedPaneUI.
propertyChange
(
PropertyChangeEvent
e)
This method gets called when a bound property is changed.
void
SynthTableHeaderUI.
propertyChange
(
PropertyChangeEvent
evt)
This method gets called when a bound property is changed.
void
SynthTableUI.
propertyChange
(
PropertyChangeEvent
event)
This method gets called when a bound property is changed.
protected void
SynthTextAreaUI.
propertyChange
(
PropertyChangeEvent
evt)
This method gets called when a bound property is changed
 on the associated JTextComponent.
protected void
SynthTextFieldUI.
propertyChange
(
PropertyChangeEvent
evt)
This method gets called when a bound property is changed
 on the associated JTextComponent.
protected void
SynthTextPaneUI.
propertyChange
(
PropertyChangeEvent
evt)
This method gets called when a bound property is changed
 on the associated JTextComponent.
void
SynthToolBarUI.
propertyChange
(
PropertyChangeEvent
e)
This method gets called when a bound property is changed.
void
SynthToolTipUI.
propertyChange
(
PropertyChangeEvent
e)
This method gets called when a bound property is changed.
void
SynthTreeUI.
propertyChange
(
PropertyChangeEvent
event)
This method gets called when a bound property is changed.
void
SynthViewportUI.
propertyChange
(
PropertyChangeEvent
e)
This method gets called when a bound property is changed.
protected void
SynthSpinnerUI.
replaceEditor
(
JComponent
oldEditor,
JComponent
newEditor)
Called by the
PropertyChangeListener
when the
JSpinner
editor property changes.
protected void
SynthToolBarUI.
setBorderToNonRollover
(
Component
c)
This implementation does nothing, because the
rollover
property of the
JToolBar
class is not used
 in the Synth Look and Feel.
protected void
SynthToolBarUI.
setBorderToNormal
(
Component
c)
This implementation does nothing, because the
rollover
property of the
JToolBar
class is not used
 in the Synth Look and Feel.
protected void
SynthToolBarUI.
setBorderToRollover
(
Component
c)
This implementation does nothing, because the
rollover
property of the
JToolBar
class is not used
 in the Synth Look and Feel.
String
Region.
toString
()
Returns the name of the Region.
void
SynthLookAndFeel.
uninitialize
()
Called by UIManager when this look and feel is uninstalled.
protected void
SynthSpinnerUI.
uninstallDefaults
()
Sets the
JSpinner's
layout manager to null.
protected void
SynthSplitPaneUI.
uninstallDefaults
()
Uninstalls the UI defaults.
protected void
SynthSplitPaneUI.
uninstallListeners
()
Uninstalls the event listeners from the UI.
void
SynthButtonUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthColorChooserUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthComboBoxUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthDesktopIconUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthDesktopPaneUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthEditorPaneUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthInternalFrameUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthLabelUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthListUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthMenuBarUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthMenuItemUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthMenuUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthOptionPaneUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthPanelUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthPopupMenuUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthProgressBarUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthRootPaneUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthScrollBarUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthScrollPaneUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthSeparatorUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthSliderUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthSpinnerUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthSplitPaneUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthTabbedPaneUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthTableHeaderUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthTableUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthTextAreaUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthTextFieldUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthToolBarUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthToolTipUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthTreeUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
void
SynthViewportUI.
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
Uses of
Override
in
javax.swing.table
Methods in
javax.swing.table
with annotations of type
Override
Modifier and Type
Method
Description
Dimension
JTableHeader.
getPreferredSize
()
Returns the preferred size of the table header.
Uses of
Override
in
javax.swing.text
Methods in
javax.swing.text
with annotations of type
Override
Modifier and Type
Method
Description
protected
SizeRequirements
ParagraphView.
calculateMinorAxisRequirements
(int axis,
SizeRequirements
r)
Calculate the needs for the paragraph along the minor axis.
Enumeration
<
TreeNode
>
AbstractDocument.LeafElement.
children
()
Returns the children of the receiver as an
Enumeration
.
protected int
PasswordView.
drawSelectedText
(
Graphics
g,
 int x,
 int y,
 int p0,
 int p1)
Deprecated.
replaced by
PlainView.drawSelectedText(Graphics2D, float, float, int, int)
protected int
PasswordView.
drawUnselectedText
(
Graphics
g,
 int x,
 int y,
 int p0,
 int p1)
Deprecated.
replaced by
PlainView.drawUnselectedText(Graphics2D, float, float, int, int)
float
GlyphView.
getMinimumSpan
(int axis)
Determines the minimum span for this view along an axis.
Uses of
Override
in
javax.tools
Methods in
javax.tools
with annotations of type
Override
Modifier and Type
Method
Description
Boolean
DocumentationTool.DocumentationTask.
call
()
Performs this documentation task.
Boolean
JavaCompiler.CompilationTask.
call
()
Performs this compilation task.
void
ForwardingJavaFileManager.
close
()
void
JavaFileManager.
close
()
Releases any resources opened by this file manager directly or
 indirectly.
boolean
ForwardingJavaFileManager.
contains
(
JavaFileManager.Location
location,
FileObject
fo)
boolean
ForwardingFileObject.
delete
()
boolean
SimpleJavaFileObject.
delete
()
This implementation does nothing.
void
ForwardingJavaFileManager.
flush
()
void
JavaFileManager.
flush
()
Flushes any resources opened for output by this file manager
 directly or indirectly.
Modifier
ForwardingJavaFileObject.
getAccessLevel
()
Modifier
SimpleJavaFileObject.
getAccessLevel
()
This implementation returns
null
.
CharSequence
ForwardingFileObject.
getCharContent
(boolean ignoreEncodingErrors)
CharSequence
SimpleJavaFileObject.
getCharContent
(boolean ignoreEncodingErrors)
This implementation always throws
UnsupportedOperationException
.
ClassLoader
ForwardingJavaFileManager.
getClassLoader
(
JavaFileManager.Location
location)
FileObject
ForwardingJavaFileManager.
getFileForInput
(
JavaFileManager.Location
location,
String
packageName,
String
relativeName)
FileObject
ForwardingJavaFileManager.
getFileForOutput
(
JavaFileManager.Location
location,
String
packageName,
String
relativeName,
FileObject
sibling)
FileObject
ForwardingJavaFileManager.
getFileForOutputForOriginatingFiles
(
JavaFileManager.Location
location,
String
packageName,
String
relativeName,
FileObject
... originatingFiles)
Returns a
file object
for output
 representing the specified
relative
 name
in the specified package in the given location.
JavaFileObject
ForwardingJavaFileManager.
getJavaFileForInput
(
JavaFileManager.Location
location,
String
className,
JavaFileObject.Kind
kind)
JavaFileObject
ForwardingJavaFileManager.
getJavaFileForOutput
(
JavaFileManager.Location
location,
String
className,
JavaFileObject.Kind
kind,
FileObject
sibling)
JavaFileObject
ForwardingJavaFileManager.
getJavaFileForOutputForOriginatingFiles
(
JavaFileManager.Location
location,
String
className,
JavaFileObject.Kind
kind,
FileObject
... originatingFiles)
Returns a
file object
for output
 representing the specified class of the specified kind in the
 given package-oriented location.
JavaFileObject.Kind
ForwardingJavaFileObject.
getKind
()
JavaFileObject.Kind
SimpleJavaFileObject.
getKind
()
long
ForwardingFileObject.
getLastModified
()
long
SimpleJavaFileObject.
getLastModified
()
This implementation returns
0L
.
JavaFileManager.Location
ForwardingJavaFileManager.
getLocationForModule
(
JavaFileManager.Location
location,
String
moduleName)
JavaFileManager.Location
ForwardingJavaFileManager.
getLocationForModule
(
JavaFileManager.Location
location,
JavaFileObject
fo)
String
DocumentationTool.Location.
getName
()
String
ForwardingFileObject.
getName
()
String
SimpleJavaFileObject.
getName
()
String
StandardLocation.
getName
()
NestingKind
ForwardingJavaFileObject.
getNestingKind
()
NestingKind
SimpleJavaFileObject.
getNestingKind
()
This implementation returns
null
.
<S>
ServiceLoader
<S>
ForwardingJavaFileManager.
getServiceLoader
(
JavaFileManager.Location
location,
Class
<S> service)
boolean
ForwardingJavaFileManager.
handleOption
(
String
current,
Iterator
<
String
> remaining)
boolean
ForwardingJavaFileManager.
hasLocation
(
JavaFileManager.Location
location)
String
ForwardingJavaFileManager.
inferBinaryName
(
JavaFileManager.Location
location,
JavaFileObject
file)
String
ForwardingJavaFileManager.
inferModuleName
(
JavaFileManager.Location
location)
boolean
StandardLocation.
isModuleOrientedLocation
()
Indicates if this location is module-oriented location, and therefore
 expected to contain classes in a
module/package/class
hierarchy, as compared to a package-oriented location, which
 is expected to contain classes in a
package/class
hierarchy.
boolean
ForwardingJavaFileObject.
isNameCompatible
(
String
simpleName,
JavaFileObject.Kind
kind)
boolean
SimpleJavaFileObject.
isNameCompatible
(
String
simpleName,
JavaFileObject.Kind
kind)
This implementation compares the path of its URI to the given
 simple name.
boolean
DocumentationTool.Location.
isOutputLocation
()
boolean
StandardLocation.
isOutputLocation
()
boolean
ForwardingJavaFileManager.
isSameFile
(
FileObject
a,
FileObject
b)
boolean
StandardJavaFileManager.
isSameFile
(
FileObject
a,
FileObject
b)
Compares two file objects and return true if they represent the
 same canonical file, zip file entry, or entry in any file
 system based container.
int
ForwardingJavaFileManager.
isSupportedOption
(
String
option)
Iterable
<
JavaFileObject
>
ForwardingJavaFileManager.
list
(
JavaFileManager.Location
location,
String
packageName,
Set
<
JavaFileObject.Kind
> kinds,
 boolean recurse)
Iterable
<
Set
<
JavaFileManager.Location
>>
ForwardingJavaFileManager.
listLocationsForModules
(
JavaFileManager.Location
location)
InputStream
ForwardingFileObject.
openInputStream
()
InputStream
SimpleJavaFileObject.
openInputStream
()
This implementation always throws
UnsupportedOperationException
.
OutputStream
ForwardingFileObject.
openOutputStream
()
OutputStream
SimpleJavaFileObject.
openOutputStream
()
This implementation always throws
UnsupportedOperationException
.
Reader
ForwardingFileObject.
openReader
(boolean ignoreEncodingErrors)
Reader
SimpleJavaFileObject.
openReader
(boolean ignoreEncodingErrors)
Wraps the result of
SimpleJavaFileObject.getCharContent(boolean)
in a Reader.
Writer
ForwardingFileObject.
openWriter
()
Writer
SimpleJavaFileObject.
openWriter
()
Wraps the result of openOutputStream in a Writer.
void
DiagnosticCollector.
report
(
Diagnostic
<? extends
S
> diagnostic)
URI
ForwardingFileObject.
toUri
()
URI
SimpleJavaFileObject.
toUri
()
Uses of
Override
in
javax.xml.catalog
Methods in
javax.xml.catalog
with annotations of type
Override
Modifier and Type
Method
Description
Source
CatalogResolver.
resolve
(
String
href,
String
base)
Implements URIResolver.
InputSource
CatalogResolver.
resolveEntity
(
String
publicId,
String
systemId)
Implements
EntityResolver
.
InputStream
CatalogResolver.
resolveEntity
(
String
publicId,
String
systemId,
String
baseUri,
String
namespace)
Implements
XMLResolver
.
LSInput
CatalogResolver.
resolveResource
(
String
type,
String
namespaceUri,
String
publicId,
String
systemId,
String
baseUri)
Implements
LSResourceResolver
.
Uses of
Override
in
javax.xml.datatype
Methods in
javax.xml.datatype
with annotations of type
Override
Modifier and Type
Method
Description
abstract
Object
XMLGregorianCalendar.
clone
()
Creates and returns a copy of this object.
boolean
XMLGregorianCalendar.
equals
(
Object
obj)
Compares this calendar to the specified object.
int
XMLGregorianCalendar.
hashCode
()
Returns a hash code consistent with the definition of the equals method.
String
XMLGregorianCalendar.
toString
()
Returns a
String
representation of this
XMLGregorianCalendar
Object
.
Uses of
Override
in
javax.xml.parsers
Methods in
javax.xml.parsers
with annotations of type
Override
Modifier and Type
Method
Description
Throwable
FactoryConfigurationError.
getCause
()
use the exception chaining mechanism of JDK1.4
Uses of
Override
in
javax.xml.stream
Methods in
javax.xml.stream
with annotations of type
Override
Modifier and Type
Method
Description
Throwable
FactoryConfigurationError.
getCause
()
use the exception chaining mechanism of JDK1.4
boolean
XMLEventReader.
hasNext
()
Check if there are more events.
Uses of
Override
in
javax.xml.transform
Methods in
javax.xml.transform
with annotations of type
Override
Modifier and Type
Method
Description
Throwable
TransformerException.
getCause
()
Returns the cause of this throwable or
null
if the
 cause is nonexistent or unknown.
Throwable
TransformerFactoryConfigurationError.
getCause
()
use the exception chaining mechanism of JDK1.4
Throwable
TransformerException.
initCause
(
Throwable
cause)
Initializes the
cause
of this throwable to the specified value.
void
TransformerException.
printStackTrace
()
Print the trace of methods from where the error
 originated.
void
TransformerException.
printStackTrace
(
PrintStream
s)
Print the trace of methods from where the error
 originated.
void
TransformerException.
printStackTrace
(
PrintWriter
s)
Print the trace of methods from where the error
 originated.
Uses of
Override
in
javax.xml.transform.dom
Methods in
javax.xml.transform.dom
with annotations of type
Override
Modifier and Type
Method
Description
String
DOMSource.
getSystemId
()
Get the base ID (URL or system ID) from where URLs
 will be resolved.
boolean
DOMSource.
isEmpty
()
Indicates whether the
DOMSource
object is empty.
void
DOMSource.
setSystemId
(
String
systemID)
Set the base ID (URL or system ID) from where URLs
 will be resolved.
Uses of
Override
in
javax.xml.transform.sax
Methods in
javax.xml.transform.sax
with annotations of type
Override
Modifier and Type
Method
Description
String
SAXSource.
getSystemId
()
Get the base ID (URI or system ID) from where URIs
 will be resolved.
boolean
SAXSource.
isEmpty
()
Indicates whether the
SAXSource
object is empty.
void
SAXSource.
setSystemId
(
String
systemId)
Set the system identifier for this Source.
Uses of
Override
in
javax.xml.transform.stax
Methods in
javax.xml.transform.stax
with annotations of type
Override
Modifier and Type
Method
Description
String
StAXSource.
getSystemId
()
Get the system identifier used by this
StAXSource
.
boolean
StAXSource.
isEmpty
()
Indicates whether the
StAXSource
object is empty.
void
StAXSource.
setSystemId
(
String
systemId)
In the context of a
StAXSource
, it is not appropriate
 to explicitly set the system identifier.
Uses of
Override
in
javax.xml.transform.stream
Methods in
javax.xml.transform.stream
with annotations of type
Override
Modifier and Type
Method
Description
String
StreamSource.
getSystemId
()
Get the system identifier that was set with setSystemId.
boolean
StreamSource.
isEmpty
()
Indicates whether the
StreamSource
object is empty.
void
StreamSource.
setSystemId
(
String
systemId)
Set the system identifier for this Source.
Uses of
Override
in
javax.xml.xpath
Methods in
javax.xml.xpath
with annotations of type
Override
Modifier and Type
Method
Description
Iterator
<
Node
>
XPathNodes.
iterator
()
Returns an iterator of the Nodes.
Uses of
Override
in
jdk.dynalink
Methods in
jdk.dynalink
with annotations of type
Override
Modifier and Type
Method
Description
boolean
CallSiteDescriptor.
equals
(
Object
obj)
Returns true if this call site descriptor is equal to the passed object.
boolean
NamedOperation.
equals
(
Object
obj)
Compares this named operation to another object.
boolean
NamespaceOperation.
equals
(
Object
obj)
Returns true if the other object is also a namespace operation and their
 base operation and namespaces are equal.
int
CallSiteDescriptor.
hashCode
()
Returns a value-based hash code of this call site descriptor computed
 from its operation, method type, and lookup object's lookup class and
 lookup modes.
int
NamedOperation.
hashCode
()
Returns the hash code of this named operation.
int
NamespaceOperation.
hashCode
()
Returns the hash code of this namespace operation.
String
CallSiteDescriptor.
toString
()
Returns the string representation of this call site descriptor, of the
 format
name(parameterTypes)returnType@lookup
.
String
NamedOperation.
toString
()
Returns the string representation of this named operation.
String
NamespaceOperation.
toString
()
Returns the string representation of this namespace operation.
Uses of
Override
in
jdk.dynalink.beans
Methods in
jdk.dynalink.beans
with annotations of type
Override
Modifier and Type
Method
Description
GuardedInvocation
BeansLinker.
getGuardedInvocation
(
LinkRequest
request,
LinkerServices
linkerServices)
Uses of
Override
in
jdk.dynalink.linker.support
Methods in
jdk.dynalink.linker.support
with annotations of type
Override
Modifier and Type
Method
Description
boolean
CompositeTypeBasedGuardingDynamicLinker.
canLinkType
(
Class
<?> type)
Returns true if at least one of the composite linkers returns true from
TypeBasedGuardingDynamicLinker.canLinkType(Class)
for the type.
Object
[]
SimpleLinkRequest.
getArguments
()
CallSiteDescriptor
SimpleLinkRequest.
getCallSiteDescriptor
()
GuardedInvocation
CompositeGuardingDynamicLinker.
getGuardedInvocation
(
LinkRequest
linkRequest,
LinkerServices
linkerServices)
Delegates the call to its component linkers.
GuardedInvocation
CompositeTypeBasedGuardingDynamicLinker.
getGuardedInvocation
(
LinkRequest
linkRequest,
LinkerServices
linkerServices)
Object
SimpleLinkRequest.
getReceiver
()
boolean
SimpleLinkRequest.
isCallSiteUnstable
()
LinkRequest
SimpleLinkRequest.
replaceArguments
(
CallSiteDescriptor
newCallSiteDescriptor,
Object
... newArguments)
MethodHandle
DefaultInternalObjectFilter.
transform
(
MethodHandle
target)
Uses of
Override
in
jdk.dynalink.support
Methods in
jdk.dynalink.support
with annotations of type
Override
Modifier and Type
Method
Description
CallSiteDescriptor
AbstractRelinkableCallSite.
getDescriptor
()
void
AbstractRelinkableCallSite.
initialize
(
MethodHandle
relinkAndInvoke)
void
ChainedCallSite.
relink
(
GuardedInvocation
guardedInvocation,
MethodHandle
relinkAndInvoke)
void
SimpleRelinkableCallSite.
relink
(
GuardedInvocation
guardedInvocation,
MethodHandle
relinkAndInvoke)
void
ChainedCallSite.
resetAndRelink
(
GuardedInvocation
guardedInvocation,
MethodHandle
relinkAndInvoke)
void
SimpleRelinkableCallSite.
resetAndRelink
(
GuardedInvocation
guardedInvocation,
MethodHandle
relinkAndInvoke)
Uses of
Override
in
jdk.incubator.vector
Methods in
jdk.incubator.vector
with annotations of type
Override
Modifier and Type
Method
Description
final
ByteVector
ByteVector.
abs
()
Returns the absolute value of this vector.
final
DoubleVector
DoubleVector.
abs
()
Returns the absolute value of this vector.
final
FloatVector
FloatVector.
abs
()
Returns the absolute value of this vector.
final
IntVector
IntVector.
abs
()
Returns the absolute value of this vector.
final
LongVector
LongVector.
abs
()
Returns the absolute value of this vector.
final
ShortVector
ShortVector.
abs
()
Returns the absolute value of this vector.
final
ByteVector
ByteVector.
add
(
Vector
<
Byte
> v)
Adds this vector to a second input vector.
final
ByteVector
ByteVector.
add
(
Vector
<
Byte
> v,
VectorMask
<
Byte
> m)
Adds this vector to a second input vector, selecting lanes
 under the control of a mask.
final
DoubleVector
DoubleVector.
add
(
Vector
<
Double
> v)
Adds this vector to a second input vector.
final
DoubleVector
DoubleVector.
add
(
Vector
<
Double
> v,
VectorMask
<
Double
> m)
Adds this vector to a second input vector, selecting lanes
 under the control of a mask.
final
FloatVector
FloatVector.
add
(
Vector
<
Float
> v)
Adds this vector to a second input vector.
final
FloatVector
FloatVector.
add
(
Vector
<
Float
> v,
VectorMask
<
Float
> m)
Adds this vector to a second input vector, selecting lanes
 under the control of a mask.
final
IntVector
IntVector.
add
(
Vector
<
Integer
> v)
Adds this vector to a second input vector.
final
IntVector
IntVector.
add
(
Vector
<
Integer
> v,
VectorMask
<
Integer
> m)
Adds this vector to a second input vector, selecting lanes
 under the control of a mask.
final
LongVector
LongVector.
add
(
Vector
<
Long
> v)
Adds this vector to a second input vector.
final
LongVector
LongVector.
add
(
Vector
<
Long
> v,
VectorMask
<
Long
> m)
Adds this vector to a second input vector, selecting lanes
 under the control of a mask.
final
ShortVector
ShortVector.
add
(
Vector
<
Short
> v)
Adds this vector to a second input vector.
final
ShortVector
ShortVector.
add
(
Vector
<
Short
> v,
VectorMask
<
Short
> m)
Adds this vector to a second input vector, selecting lanes
 under the control of a mask.
abstract
ByteVector
ByteVector.
addIndex
(int scale)
Adds the lanes of this vector to their corresponding
 lane numbers, scaled by a given constant.
abstract
DoubleVector
DoubleVector.
addIndex
(int scale)
Adds the lanes of this vector to their corresponding
 lane numbers, scaled by a given constant.
abstract
FloatVector
FloatVector.
addIndex
(int scale)
Adds the lanes of this vector to their corresponding
 lane numbers, scaled by a given constant.
abstract
IntVector
IntVector.
addIndex
(int scale)
Adds the lanes of this vector to their corresponding
 lane numbers, scaled by a given constant.
abstract
LongVector
LongVector.
addIndex
(int scale)
Adds the lanes of this vector to their corresponding
 lane numbers, scaled by a given constant.
abstract
ShortVector
ShortVector.
addIndex
(int scale)
Adds the lanes of this vector to their corresponding
 lane numbers, scaled by a given constant.
abstract
ByteVector
ByteVector.
blend
(
Vector
<
Byte
> v,
VectorMask
<
Byte
> m)
Replaces selected lanes of this vector with
 corresponding lanes from a second input vector
 under the control of a mask.
abstract
DoubleVector
DoubleVector.
blend
(
Vector
<
Double
> v,
VectorMask
<
Double
> m)
Replaces selected lanes of this vector with
 corresponding lanes from a second input vector
 under the control of a mask.
abstract
FloatVector
FloatVector.
blend
(
Vector
<
Float
> v,
VectorMask
<
Float
> m)
Replaces selected lanes of this vector with
 corresponding lanes from a second input vector
 under the control of a mask.
abstract
IntVector
IntVector.
blend
(
Vector
<
Integer
> v,
VectorMask
<
Integer
> m)
Replaces selected lanes of this vector with
 corresponding lanes from a second input vector
 under the control of a mask.
abstract
LongVector
LongVector.
blend
(
Vector
<
Long
> v,
VectorMask
<
Long
> m)
Replaces selected lanes of this vector with
 corresponding lanes from a second input vector
 under the control of a mask.
abstract
ShortVector
ShortVector.
blend
(
Vector
<
Short
> v,
VectorMask
<
Short
> m)
Replaces selected lanes of this vector with
 corresponding lanes from a second input vector
 under the control of a mask.
abstract
ByteVector
ByteVector.
broadcast
(long e)
Returns a vector of the same species as this one
 where all lane elements are set to
 the primitive value
e
.
abstract
DoubleVector
DoubleVector.
broadcast
(long e)
Returns a vector of the same species as this one
 where all lane elements are set to
 the primitive value
e
.
abstract
FloatVector
FloatVector.
broadcast
(long e)
Returns a vector of the same species as this one
 where all lane elements are set to
 the primitive value
e
.
abstract
IntVector
IntVector.
broadcast
(long e)
Returns a vector of the same species as this one
 where all lane elements are set to
 the primitive value
e
.
abstract
ShortVector
ShortVector.
broadcast
(long e)
Returns a vector of the same species as this one
 where all lane elements are set to
 the primitive value
e
.
abstract
VectorMask
<
Byte
>
ByteVector.
compare
(
VectorOperators.Comparison
op,
 long e)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation.
final
VectorMask
<
Byte
>
ByteVector.
compare
(
VectorOperators.Comparison
op,
 long e,
VectorMask
<
Byte
> m)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
abstract
VectorMask
<
Byte
>
ByteVector.
compare
(
VectorOperators.Comparison
op,
Vector
<
Byte
> v)
Tests this vector by comparing it with another input vector,
 according to the given comparison operation.
abstract
VectorMask
<
Double
>
DoubleVector.
compare
(
VectorOperators.Comparison
op,
 long e)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation.
final
VectorMask
<
Double
>
DoubleVector.
compare
(
VectorOperators.Comparison
op,
 long e,
VectorMask
<
Double
> m)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
abstract
VectorMask
<
Double
>
DoubleVector.
compare
(
VectorOperators.Comparison
op,
Vector
<
Double
> v)
Tests this vector by comparing it with another input vector,
 according to the given comparison operation.
abstract
VectorMask
<
Float
>
FloatVector.
compare
(
VectorOperators.Comparison
op,
 long e)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation.
final
VectorMask
<
Float
>
FloatVector.
compare
(
VectorOperators.Comparison
op,
 long e,
VectorMask
<
Float
> m)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
abstract
VectorMask
<
Float
>
FloatVector.
compare
(
VectorOperators.Comparison
op,
Vector
<
Float
> v)
Tests this vector by comparing it with another input vector,
 according to the given comparison operation.
abstract
VectorMask
<
Integer
>
IntVector.
compare
(
VectorOperators.Comparison
op,
 long e)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation.
final
VectorMask
<
Integer
>
IntVector.
compare
(
VectorOperators.Comparison
op,
 long e,
VectorMask
<
Integer
> m)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
abstract
VectorMask
<
Integer
>
IntVector.
compare
(
VectorOperators.Comparison
op,
Vector
<
Integer
> v)
Tests this vector by comparing it with another input vector,
 according to the given comparison operation.
abstract
VectorMask
<
Long
>
LongVector.
compare
(
VectorOperators.Comparison
op,
Vector
<
Long
> v)
Tests this vector by comparing it with another input vector,
 according to the given comparison operation.
abstract
VectorMask
<
Short
>
ShortVector.
compare
(
VectorOperators.Comparison
op,
 long e)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation.
final
VectorMask
<
Short
>
ShortVector.
compare
(
VectorOperators.Comparison
op,
 long e,
VectorMask
<
Short
> m)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
abstract
VectorMask
<
Short
>
ShortVector.
compare
(
VectorOperators.Comparison
op,
Vector
<
Short
> v)
Tests this vector by comparing it with another input vector,
 according to the given comparison operation.
abstract
ByteVector
ByteVector.
compress
(
VectorMask
<
Byte
> m)
Compresses the lane elements of this vector selecting lanes
 under the control of a specific mask.
abstract
DoubleVector
DoubleVector.
compress
(
VectorMask
<
Double
> m)
Compresses the lane elements of this vector selecting lanes
 under the control of a specific mask.
abstract
FloatVector
FloatVector.
compress
(
VectorMask
<
Float
> m)
Compresses the lane elements of this vector selecting lanes
 under the control of a specific mask.
abstract
IntVector
IntVector.
compress
(
VectorMask
<
Integer
> m)
Compresses the lane elements of this vector selecting lanes
 under the control of a specific mask.
abstract
LongVector
LongVector.
compress
(
VectorMask
<
Long
> m)
Compresses the lane elements of this vector selecting lanes
 under the control of a specific mask.
abstract
ShortVector
ShortVector.
compress
(
VectorMask
<
Short
> m)
Compresses the lane elements of this vector selecting lanes
 under the control of a specific mask.
final
ByteVector
ByteVector.
div
(
Vector
<
Byte
> v)
Divides this vector by a second input vector.
final
ByteVector
ByteVector.
div
(
Vector
<
Byte
> v,
VectorMask
<
Byte
> m)
Divides this vector by a second input vector
 under the control of a mask.
final
DoubleVector
DoubleVector.
div
(
Vector
<
Double
> v)
Divides this vector by a second input vector.
final
DoubleVector
DoubleVector.
div
(
Vector
<
Double
> v,
VectorMask
<
Double
> m)
Divides this vector by a second input vector
 under the control of a mask.
final
FloatVector
FloatVector.
div
(
Vector
<
Float
> v)
Divides this vector by a second input vector.
final
FloatVector
FloatVector.
div
(
Vector
<
Float
> v,
VectorMask
<
Float
> m)
Divides this vector by a second input vector
 under the control of a mask.
final
IntVector
IntVector.
div
(
Vector
<
Integer
> v)
Divides this vector by a second input vector.
final
IntVector
IntVector.
div
(
Vector
<
Integer
> v,
VectorMask
<
Integer
> m)
Divides this vector by a second input vector
 under the control of a mask.
final
LongVector
LongVector.
div
(
Vector
<
Long
> v)
Divides this vector by a second input vector.
final
LongVector
LongVector.
div
(
Vector
<
Long
> v,
VectorMask
<
Long
> m)
Divides this vector by a second input vector
 under the control of a mask.
final
ShortVector
ShortVector.
div
(
Vector
<
Short
> v)
Divides this vector by a second input vector.
final
ShortVector
ShortVector.
div
(
Vector
<
Short
> v,
VectorMask
<
Short
> m)
Divides this vector by a second input vector
 under the control of a mask.
final
VectorMask
<
Byte
>
ByteVector.
eq
(
Vector
<
Byte
> v)
Tests if this vector is equal to another input vector.
final
VectorMask
<
Double
>
DoubleVector.
eq
(
Vector
<
Double
> v)
Tests if this vector is equal to another input vector.
final
VectorMask
<
Float
>
FloatVector.
eq
(
Vector
<
Float
> v)
Tests if this vector is equal to another input vector.
final
VectorMask
<
Integer
>
IntVector.
eq
(
Vector
<
Integer
> v)
Tests if this vector is equal to another input vector.
final
VectorMask
<
Long
>
LongVector.
eq
(
Vector
<
Long
> v)
Tests if this vector is equal to another input vector.
final
VectorMask
<
Short
>
ShortVector.
eq
(
Vector
<
Short
> v)
Tests if this vector is equal to another input vector.
final boolean
ByteVector.
equals
(
Object
obj)
Indicates whether this vector is identical to some other object.
final boolean
DoubleVector.
equals
(
Object
obj)
Indicates whether this vector is identical to some other object.
final boolean
FloatVector.
equals
(
Object
obj)
Indicates whether this vector is identical to some other object.
final boolean
IntVector.
equals
(
Object
obj)
Indicates whether this vector is identical to some other object.
final boolean
LongVector.
equals
(
Object
obj)
Indicates whether this vector is identical to some other object.
final boolean
ShortVector.
equals
(
Object
obj)
Indicates whether this vector is identical to some other object.
abstract boolean
Vector.
equals
(
Object
obj)
Indicates whether this vector is identical to some other object.
final boolean
VectorMask.
equals
(
Object
obj)
Indicates whether this mask is identical to some other object.
final boolean
VectorShuffle.
equals
(
Object
obj)
Indicates whether this shuffle is identical to some other object.
boolean
VectorSpecies.
equals
(
Object
obj)
Indicates whether this species is identical to some other object.
abstract
ByteVector
ByteVector.
expand
(
VectorMask
<
Byte
> m)
Expands the lane elements of this vector
 under the control of a specific mask.
abstract
DoubleVector
DoubleVector.
expand
(
VectorMask
<
Double
> m)
Expands the lane elements of this vector
 under the control of a specific mask.
abstract
FloatVector
FloatVector.
expand
(
VectorMask
<
Float
> m)
Expands the lane elements of this vector
 under the control of a specific mask.
abstract
IntVector
IntVector.
expand
(
VectorMask
<
Integer
> m)
Expands the lane elements of this vector
 under the control of a specific mask.
abstract
LongVector
LongVector.
expand
(
VectorMask
<
Long
> m)
Expands the lane elements of this vector
 under the control of a specific mask.
abstract
ShortVector
ShortVector.
expand
(
VectorMask
<
Short
> m)
Expands the lane elements of this vector
 under the control of a specific mask.
final int
ByteVector.
hashCode
()
Returns a hash code value for the vector.
final int
DoubleVector.
hashCode
()
Returns a hash code value for the vector.
final int
FloatVector.
hashCode
()
Returns a hash code value for the vector.
final int
IntVector.
hashCode
()
Returns a hash code value for the vector.
final int
LongVector.
hashCode
()
Returns a hash code value for the vector.
final int
ShortVector.
hashCode
()
Returns a hash code value for the vector.
abstract int
Vector.
hashCode
()
Returns a hash code value for the vector.
final int
VectorMask.
hashCode
()
Returns a hash code value for the mask,
 based on the mask bit settings and the vector species.
final int
VectorShuffle.
hashCode
()
Returns a hash code value for the shuffle,
 based on the lane source indexes and the vector species.
int
VectorSpecies.
hashCode
()
Returns a hash code value for the species,
 based on the vector shape and element type.
final void
ByteVector.
intoMemorySegment
(
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo)
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order.
final void
ByteVector.
intoMemorySegment
(
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo,
VectorMask
<
Byte
> m)
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order and a mask.
final void
DoubleVector.
intoMemorySegment
(
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo)
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order.
final void
DoubleVector.
intoMemorySegment
(
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo,
VectorMask
<
Double
> m)
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order and a mask.
final void
FloatVector.
intoMemorySegment
(
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo)
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order.
final void
FloatVector.
intoMemorySegment
(
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo,
VectorMask
<
Float
> m)
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order and a mask.
final void
IntVector.
intoMemorySegment
(
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo)
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order.
final void
IntVector.
intoMemorySegment
(
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo,
VectorMask
<
Integer
> m)
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order and a mask.
final void
LongVector.
intoMemorySegment
(
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo)
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order.
final void
LongVector.
intoMemorySegment
(
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo,
VectorMask
<
Long
> m)
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order and a mask.
final void
ShortVector.
intoMemorySegment
(
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo)
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order.
final void
ShortVector.
intoMemorySegment
(
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo,
VectorMask
<
Short
> m)
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order and a mask.
abstract
ByteVector
ByteVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Byte
> v)
Combines the corresponding lane values of this vector
 with those of a second input vector.
abstract
ByteVector
ByteVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Byte
> v,
VectorMask
<
Byte
> m)
Combines the corresponding lane values of this vector
 with those of a second input vector,
 with selection of lane elements controlled by a mask.
abstract
ByteVector
ByteVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Byte
> v1,
Vector
<
Byte
> v2)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector.
abstract
ByteVector
ByteVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Byte
> v1,
Vector
<
Byte
> v2,
VectorMask
<
Byte
> m)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector,
 with selection of lane elements controlled by a mask.
abstract
ByteVector
ByteVector.
lanewise
(
VectorOperators.Unary
op,
VectorMask
<
Byte
> m)
Operates on the lane values of this vector,
 with selection of lane elements controlled by a mask.
abstract
DoubleVector
DoubleVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Double
> v)
Combines the corresponding lane values of this vector
 with those of a second input vector.
abstract
DoubleVector
DoubleVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Double
> v,
VectorMask
<
Double
> m)
Combines the corresponding lane values of this vector
 with those of a second input vector,
 with selection of lane elements controlled by a mask.
abstract
DoubleVector
DoubleVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Double
> v1,
Vector
<
Double
> v2)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector.
abstract
DoubleVector
DoubleVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Double
> v1,
Vector
<
Double
> v2,
VectorMask
<
Double
> m)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector,
 with selection of lane elements controlled by a mask.
abstract
DoubleVector
DoubleVector.
lanewise
(
VectorOperators.Unary
op,
VectorMask
<
Double
> m)
Operates on the lane values of this vector,
 with selection of lane elements controlled by a mask.
abstract
FloatVector
FloatVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Float
> v)
Combines the corresponding lane values of this vector
 with those of a second input vector.
abstract
FloatVector
FloatVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Float
> v,
VectorMask
<
Float
> m)
Combines the corresponding lane values of this vector
 with those of a second input vector,
 with selection of lane elements controlled by a mask.
abstract
FloatVector
FloatVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Float
> v1,
Vector
<
Float
> v2)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector.
abstract
FloatVector
FloatVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Float
> v1,
Vector
<
Float
> v2,
VectorMask
<
Float
> m)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector,
 with selection of lane elements controlled by a mask.
abstract
FloatVector
FloatVector.
lanewise
(
VectorOperators.Unary
op,
VectorMask
<
Float
> m)
Operates on the lane values of this vector,
 with selection of lane elements controlled by a mask.
abstract
IntVector
IntVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Integer
> v)
Combines the corresponding lane values of this vector
 with those of a second input vector.
abstract
IntVector
IntVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Integer
> v,
VectorMask
<
Integer
> m)
Combines the corresponding lane values of this vector
 with those of a second input vector,
 with selection of lane elements controlled by a mask.
abstract
IntVector
IntVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Integer
> v1,
Vector
<
Integer
> v2)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector.
abstract
IntVector
IntVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Integer
> v1,
Vector
<
Integer
> v2,
VectorMask
<
Integer
> m)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector,
 with selection of lane elements controlled by a mask.
abstract
IntVector
IntVector.
lanewise
(
VectorOperators.Unary
op,
VectorMask
<
Integer
> m)
Operates on the lane values of this vector,
 with selection of lane elements controlled by a mask.
abstract
LongVector
LongVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Long
> v)
Combines the corresponding lane values of this vector
 with those of a second input vector.
abstract
LongVector
LongVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Long
> v,
VectorMask
<
Long
> m)
Combines the corresponding lane values of this vector
 with those of a second input vector,
 with selection of lane elements controlled by a mask.
abstract
LongVector
LongVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Long
> v1,
Vector
<
Long
> v2)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector.
abstract
LongVector
LongVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Long
> v1,
Vector
<
Long
> v2,
VectorMask
<
Long
> m)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector,
 with selection of lane elements controlled by a mask.
abstract
LongVector
LongVector.
lanewise
(
VectorOperators.Unary
op,
VectorMask
<
Long
> m)
Operates on the lane values of this vector,
 with selection of lane elements controlled by a mask.
abstract
ShortVector
ShortVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Short
> v)
Combines the corresponding lane values of this vector
 with those of a second input vector.
abstract
ShortVector
ShortVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Short
> v,
VectorMask
<
Short
> m)
Combines the corresponding lane values of this vector
 with those of a second input vector,
 with selection of lane elements controlled by a mask.
abstract
ShortVector
ShortVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Short
> v1,
Vector
<
Short
> v2)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector.
abstract
ShortVector
ShortVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Short
> v1,
Vector
<
Short
> v2,
VectorMask
<
Short
> m)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector,
 with selection of lane elements controlled by a mask.
abstract
ShortVector
ShortVector.
lanewise
(
VectorOperators.Unary
op,
VectorMask
<
Short
> m)
Operates on the lane values of this vector,
 with selection of lane elements controlled by a mask.
final
VectorMask
<
Byte
>
ByteVector.
lt
(
Vector
<
Byte
> v)
Tests if this vector is less than another input vector.
final
VectorMask
<
Double
>
DoubleVector.
lt
(
Vector
<
Double
> v)
Tests if this vector is less than another input vector.
final
VectorMask
<
Float
>
FloatVector.
lt
(
Vector
<
Float
> v)
Tests if this vector is less than another input vector.
final
VectorMask
<
Integer
>
IntVector.
lt
(
Vector
<
Integer
> v)
Tests if this vector is less than another input vector.
final
VectorMask
<
Long
>
LongVector.
lt
(
Vector
<
Long
> v)
Tests if this vector is less than another input vector.
final
VectorMask
<
Short
>
ShortVector.
lt
(
Vector
<
Short
> v)
Tests if this vector is less than another input vector.
final
ByteVector
ByteVector.
max
(
Vector
<
Byte
> v)
Computes the larger of this vector and a second input vector.
final
DoubleVector
DoubleVector.
max
(
Vector
<
Double
> v)
Computes the larger of this vector and a second input vector.
final
FloatVector
FloatVector.
max
(
Vector
<
Float
> v)
Computes the larger of this vector and a second input vector.
final
IntVector
IntVector.
max
(
Vector
<
Integer
> v)
Computes the larger of this vector and a second input vector.
final
LongVector
LongVector.
max
(
Vector
<
Long
> v)
Computes the larger of this vector and a second input vector.
final
ShortVector
ShortVector.
max
(
Vector
<
Short
> v)
Computes the larger of this vector and a second input vector.
final
ByteVector
ByteVector.
min
(
Vector
<
Byte
> v)
Computes the smaller of this vector and a second input vector.
final
DoubleVector
DoubleVector.
min
(
Vector
<
Double
> v)
Computes the smaller of this vector and a second input vector.
final
FloatVector
FloatVector.
min
(
Vector
<
Float
> v)
Computes the smaller of this vector and a second input vector.
final
IntVector
IntVector.
min
(
Vector
<
Integer
> v)
Computes the smaller of this vector and a second input vector.
final
LongVector
LongVector.
min
(
Vector
<
Long
> v)
Computes the smaller of this vector and a second input vector.
final
ShortVector
ShortVector.
min
(
Vector
<
Short
> v)
Computes the smaller of this vector and a second input vector.
final
ByteVector
ByteVector.
mul
(
Vector
<
Byte
> v)
Multiplies this vector by a second input vector.
final
ByteVector
ByteVector.
mul
(
Vector
<
Byte
> v,
VectorMask
<
Byte
> m)
Multiplies this vector by a second input vector
 under the control of a mask.
final
DoubleVector
DoubleVector.
mul
(
Vector
<
Double
> v)
Multiplies this vector by a second input vector.
final
DoubleVector
DoubleVector.
mul
(
Vector
<
Double
> v,
VectorMask
<
Double
> m)
Multiplies this vector by a second input vector
 under the control of a mask.
final
FloatVector
FloatVector.
mul
(
Vector
<
Float
> v)
Multiplies this vector by a second input vector.
final
FloatVector
FloatVector.
mul
(
Vector
<
Float
> v,
VectorMask
<
Float
> m)
Multiplies this vector by a second input vector
 under the control of a mask.
final
IntVector
IntVector.
mul
(
Vector
<
Integer
> v)
Multiplies this vector by a second input vector.
final
IntVector
IntVector.
mul
(
Vector
<
Integer
> v,
VectorMask
<
Integer
> m)
Multiplies this vector by a second input vector
 under the control of a mask.
final
LongVector
LongVector.
mul
(
Vector
<
Long
> v)
Multiplies this vector by a second input vector.
final
LongVector
LongVector.
mul
(
Vector
<
Long
> v,
VectorMask
<
Long
> m)
Multiplies this vector by a second input vector
 under the control of a mask.
final
ShortVector
ShortVector.
mul
(
Vector
<
Short
> v)
Multiplies this vector by a second input vector.
final
ShortVector
ShortVector.
mul
(
Vector
<
Short
> v,
VectorMask
<
Short
> m)
Multiplies this vector by a second input vector
 under the control of a mask.
final
ByteVector
ByteVector.
neg
()
Negates this vector.
final
DoubleVector
DoubleVector.
neg
()
Negates this vector.
final
FloatVector
FloatVector.
neg
()
Negates this vector.
final
IntVector
IntVector.
neg
()
Negates this vector.
final
LongVector
LongVector.
neg
()
Negates this vector.
final
ShortVector
ShortVector.
neg
()
Negates this vector.
Class
<
F
>
VectorOperators.Conversion.
rangeType
()
The range of this conversion, a primitive type.
abstract
ByteVector
ByteVector.
rearrange
(
VectorShuffle
<
Byte
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle.
abstract
ByteVector
ByteVector.
rearrange
(
VectorShuffle
<
Byte
> s,
Vector
<
Byte
> v)
Rearranges the lane elements of two vectors, selecting lanes
 under the control of a specific shuffle, using both normal and
 exceptional indexes in the shuffle to steer data.
abstract
ByteVector
ByteVector.
rearrange
(
VectorShuffle
<
Byte
> s,
VectorMask
<
Byte
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle and a mask.
abstract
DoubleVector
DoubleVector.
rearrange
(
VectorShuffle
<
Double
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle.
abstract
DoubleVector
DoubleVector.
rearrange
(
VectorShuffle
<
Double
> s,
Vector
<
Double
> v)
Rearranges the lane elements of two vectors, selecting lanes
 under the control of a specific shuffle, using both normal and
 exceptional indexes in the shuffle to steer data.
abstract
DoubleVector
DoubleVector.
rearrange
(
VectorShuffle
<
Double
> s,
VectorMask
<
Double
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle and a mask.
abstract
FloatVector
FloatVector.
rearrange
(
VectorShuffle
<
Float
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle.
abstract
FloatVector
FloatVector.
rearrange
(
VectorShuffle
<
Float
> s,
Vector
<
Float
> v)
Rearranges the lane elements of two vectors, selecting lanes
 under the control of a specific shuffle, using both normal and
 exceptional indexes in the shuffle to steer data.
abstract
FloatVector
FloatVector.
rearrange
(
VectorShuffle
<
Float
> s,
VectorMask
<
Float
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle and a mask.
abstract
IntVector
IntVector.
rearrange
(
VectorShuffle
<
Integer
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle.
abstract
IntVector
IntVector.
rearrange
(
VectorShuffle
<
Integer
> s,
Vector
<
Integer
> v)
Rearranges the lane elements of two vectors, selecting lanes
 under the control of a specific shuffle, using both normal and
 exceptional indexes in the shuffle to steer data.
abstract
IntVector
IntVector.
rearrange
(
VectorShuffle
<
Integer
> s,
VectorMask
<
Integer
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle and a mask.
abstract
LongVector
LongVector.
rearrange
(
VectorShuffle
<
Long
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle.
abstract
LongVector
LongVector.
rearrange
(
VectorShuffle
<
Long
> s,
Vector
<
Long
> v)
Rearranges the lane elements of two vectors, selecting lanes
 under the control of a specific shuffle, using both normal and
 exceptional indexes in the shuffle to steer data.
abstract
LongVector
LongVector.
rearrange
(
VectorShuffle
<
Long
> s,
VectorMask
<
Long
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle and a mask.
abstract
ShortVector
ShortVector.
rearrange
(
VectorShuffle
<
Short
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle.
abstract
ShortVector
ShortVector.
rearrange
(
VectorShuffle
<
Short
> s,
Vector
<
Short
> v)
Rearranges the lane elements of two vectors, selecting lanes
 under the control of a specific shuffle, using both normal and
 exceptional indexes in the shuffle to steer data.
abstract
ShortVector
ShortVector.
rearrange
(
VectorShuffle
<
Short
> s,
VectorMask
<
Short
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle and a mask.
final
ByteVector
ByteVector.
reinterpretAsBytes
()
Views this vector as a vector of the same shape
 and contents but a lane type of
byte
,
 where the bytes are extracted from the lanes
 according to little-endian order.
final
ByteVector
DoubleVector.
reinterpretAsBytes
()
Views this vector as a vector of the same shape
 and contents but a lane type of
byte
,
 where the bytes are extracted from the lanes
 according to little-endian order.
final
ByteVector
FloatVector.
reinterpretAsBytes
()
Views this vector as a vector of the same shape
 and contents but a lane type of
byte
,
 where the bytes are extracted from the lanes
 according to little-endian order.
final
ByteVector
IntVector.
reinterpretAsBytes
()
Views this vector as a vector of the same shape
 and contents but a lane type of
byte
,
 where the bytes are extracted from the lanes
 according to little-endian order.
final
ByteVector
LongVector.
reinterpretAsBytes
()
Views this vector as a vector of the same shape
 and contents but a lane type of
byte
,
 where the bytes are extracted from the lanes
 according to little-endian order.
final
ByteVector
ShortVector.
reinterpretAsBytes
()
Views this vector as a vector of the same shape
 and contents but a lane type of
byte
,
 where the bytes are extracted from the lanes
 according to little-endian order.
abstract
ByteVector
ByteVector.
selectFrom
(
Vector
<
Byte
> v)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector
v
.
abstract
ByteVector
ByteVector.
selectFrom
(
Vector
<
Byte
> s,
VectorMask
<
Byte
> m)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector, under the control
 of a mask.
abstract
DoubleVector
DoubleVector.
selectFrom
(
Vector
<
Double
> v)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector
v
.
abstract
DoubleVector
DoubleVector.
selectFrom
(
Vector
<
Double
> s,
VectorMask
<
Double
> m)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector, under the control
 of a mask.
abstract
FloatVector
FloatVector.
selectFrom
(
Vector
<
Float
> v)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector
v
.
abstract
FloatVector
FloatVector.
selectFrom
(
Vector
<
Float
> s,
VectorMask
<
Float
> m)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector, under the control
 of a mask.
abstract
IntVector
IntVector.
selectFrom
(
Vector
<
Integer
> v)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector
v
.
abstract
IntVector
IntVector.
selectFrom
(
Vector
<
Integer
> s,
VectorMask
<
Integer
> m)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector, under the control
 of a mask.
abstract
LongVector
LongVector.
selectFrom
(
Vector
<
Long
> v)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector
v
.
abstract
LongVector
LongVector.
selectFrom
(
Vector
<
Long
> s,
VectorMask
<
Long
> m)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector, under the control
 of a mask.
abstract
ShortVector
ShortVector.
selectFrom
(
Vector
<
Short
> v)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector
v
.
abstract
ShortVector
ShortVector.
selectFrom
(
Vector
<
Short
> s,
VectorMask
<
Short
> m)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector, under the control
 of a mask.
abstract
ByteVector
ByteVector.
slice
(int origin)
Slices a segment of adjacent lanes, starting at a given
origin
lane in the current vector.
abstract
ByteVector
ByteVector.
slice
(int origin,
Vector
<
Byte
> v1)
Slices a segment of adjacent lanes, starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
final
ByteVector
ByteVector.
slice
(int origin,
Vector
<
Byte
> w,
VectorMask
<
Byte
> m)
Slices a segment of adjacent lanes
 under the control of a mask,
 starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
abstract
DoubleVector
DoubleVector.
slice
(int origin)
Slices a segment of adjacent lanes, starting at a given
origin
lane in the current vector.
abstract
DoubleVector
DoubleVector.
slice
(int origin,
Vector
<
Double
> v1)
Slices a segment of adjacent lanes, starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
final
DoubleVector
DoubleVector.
slice
(int origin,
Vector
<
Double
> w,
VectorMask
<
Double
> m)
Slices a segment of adjacent lanes
 under the control of a mask,
 starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
abstract
FloatVector
FloatVector.
slice
(int origin)
Slices a segment of adjacent lanes, starting at a given
origin
lane in the current vector.
abstract
FloatVector
FloatVector.
slice
(int origin,
Vector
<
Float
> v1)
Slices a segment of adjacent lanes, starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
final
FloatVector
FloatVector.
slice
(int origin,
Vector
<
Float
> w,
VectorMask
<
Float
> m)
Slices a segment of adjacent lanes
 under the control of a mask,
 starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
abstract
IntVector
IntVector.
slice
(int origin)
Slices a segment of adjacent lanes, starting at a given
origin
lane in the current vector.
abstract
IntVector
IntVector.
slice
(int origin,
Vector
<
Integer
> v1)
Slices a segment of adjacent lanes, starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
final
IntVector
IntVector.
slice
(int origin,
Vector
<
Integer
> w,
VectorMask
<
Integer
> m)
Slices a segment of adjacent lanes
 under the control of a mask,
 starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
abstract
LongVector
LongVector.
slice
(int origin)
Slices a segment of adjacent lanes, starting at a given
origin
lane in the current vector.
abstract
LongVector
LongVector.
slice
(int origin,
Vector
<
Long
> v1)
Slices a segment of adjacent lanes, starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
final
LongVector
LongVector.
slice
(int origin,
Vector
<
Long
> w,
VectorMask
<
Long
> m)
Slices a segment of adjacent lanes
 under the control of a mask,
 starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
abstract
ShortVector
ShortVector.
slice
(int origin)
Slices a segment of adjacent lanes, starting at a given
origin
lane in the current vector.
abstract
ShortVector
ShortVector.
slice
(int origin,
Vector
<
Short
> v1)
Slices a segment of adjacent lanes, starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
final
ShortVector
ShortVector.
slice
(int origin,
Vector
<
Short
> w,
VectorMask
<
Short
> m)
Slices a segment of adjacent lanes
 under the control of a mask,
 starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
final
ByteVector
ByteVector.
sub
(
Vector
<
Byte
> v)
Subtracts a second input vector from this vector.
final
ByteVector
ByteVector.
sub
(
Vector
<
Byte
> v,
VectorMask
<
Byte
> m)
Subtracts a second input vector from this vector
 under the control of a mask.
final
DoubleVector
DoubleVector.
sub
(
Vector
<
Double
> v)
Subtracts a second input vector from this vector.
final
DoubleVector
DoubleVector.
sub
(
Vector
<
Double
> v,
VectorMask
<
Double
> m)
Subtracts a second input vector from this vector
 under the control of a mask.
final
FloatVector
FloatVector.
sub
(
Vector
<
Float
> v)
Subtracts a second input vector from this vector.
final
FloatVector
FloatVector.
sub
(
Vector
<
Float
> v,
VectorMask
<
Float
> m)
Subtracts a second input vector from this vector
 under the control of a mask.
final
IntVector
IntVector.
sub
(
Vector
<
Integer
> v)
Subtracts a second input vector from this vector.
final
IntVector
IntVector.
sub
(
Vector
<
Integer
> v,
VectorMask
<
Integer
> m)
Subtracts a second input vector from this vector
 under the control of a mask.
final
LongVector
LongVector.
sub
(
Vector
<
Long
> v)
Subtracts a second input vector from this vector.
final
LongVector
LongVector.
sub
(
Vector
<
Long
> v,
VectorMask
<
Long
> m)
Subtracts a second input vector from this vector
 under the control of a mask.
final
ShortVector
ShortVector.
sub
(
Vector
<
Short
> v)
Subtracts a second input vector from this vector.
final
ShortVector
ShortVector.
sub
(
Vector
<
Short
> v,
VectorMask
<
Short
> m)
Subtracts a second input vector from this vector
 under the control of a mask.
abstract
VectorMask
<
Byte
>
ByteVector.
test
(
VectorOperators.Test
op)
Tests the lanes of this vector
 according to the given operation.
abstract
VectorMask
<
Byte
>
ByteVector.
test
(
VectorOperators.Test
op,
VectorMask
<
Byte
> m)
Test selected lanes of this vector,
 according to the given operation.
abstract
VectorMask
<
Double
>
DoubleVector.
test
(
VectorOperators.Test
op)
Tests the lanes of this vector
 according to the given operation.
abstract
VectorMask
<
Double
>
DoubleVector.
test
(
VectorOperators.Test
op,
VectorMask
<
Double
> m)
Test selected lanes of this vector,
 according to the given operation.
abstract
VectorMask
<
Float
>
FloatVector.
test
(
VectorOperators.Test
op)
Tests the lanes of this vector
 according to the given operation.
abstract
VectorMask
<
Float
>
FloatVector.
test
(
VectorOperators.Test
op,
VectorMask
<
Float
> m)
Test selected lanes of this vector,
 according to the given operation.
abstract
VectorMask
<
Integer
>
IntVector.
test
(
VectorOperators.Test
op)
Tests the lanes of this vector
 according to the given operation.
abstract
VectorMask
<
Integer
>
IntVector.
test
(
VectorOperators.Test
op,
VectorMask
<
Integer
> m)
Test selected lanes of this vector,
 according to the given operation.
abstract
VectorMask
<
Long
>
LongVector.
test
(
VectorOperators.Test
op)
Tests the lanes of this vector
 according to the given operation.
abstract
VectorMask
<
Long
>
LongVector.
test
(
VectorOperators.Test
op,
VectorMask
<
Long
> m)
Test selected lanes of this vector,
 according to the given operation.
abstract
VectorMask
<
Short
>
ShortVector.
test
(
VectorOperators.Test
op)
Tests the lanes of this vector
 according to the given operation.
abstract
VectorMask
<
Short
>
ShortVector.
test
(
VectorOperators.Test
op,
VectorMask
<
Short
> m)
Test selected lanes of this vector,
 according to the given operation.
final byte[]
ByteVector.
toArray
()
Returns an array of type
byte[]
containing all the lane values.
final double[]
DoubleVector.
toArray
()
Returns an array of type
double[]
containing all the lane values.
final float[]
FloatVector.
toArray
()
Returns an array of type
float[]
containing all the lane values.
final int[]
IntVector.
toArray
()
Returns an array of type
int[]
containing all the lane values.
final long[]
LongVector.
toArray
()
Returns an array of type
long[]
containing all the lane values.
final short[]
ShortVector.
toArray
()
Returns an array of type
short[]
containing all the lane values.
final double[]
ByteVector.
toDoubleArray
()
Returns a
double[]
array containing all
 the lane values, converted to the type
double
.
final double[]
DoubleVector.
toDoubleArray
()
Returns a
double[]
array containing all
 the lane values, converted to the type
double
.
final double[]
FloatVector.
toDoubleArray
()
Returns a
double[]
array containing all
 the lane values, converted to the type
double
.
final double[]
IntVector.
toDoubleArray
()
Returns a
double[]
array containing all
 the lane values, converted to the type
double
.
final double[]
LongVector.
toDoubleArray
()
Returns a
double[]
array containing all
 the lane values, converted to the type
double
.
final double[]
ShortVector.
toDoubleArray
()
Returns a
double[]
array containing all
 the lane values, converted to the type
double
.
final int[]
ByteVector.
toIntArray
()
Returns an
int[]
array containing all
 the lane values, converted to the type
int
.
final int[]
DoubleVector.
toIntArray
()
Returns an
int[]
array containing all
 the lane values, converted to the type
int
.
final int[]
FloatVector.
toIntArray
()
Returns an
int[]
array containing all
 the lane values, converted to the type
int
.
final int[]
IntVector.
toIntArray
()
Returns an
int[]
array containing all
 the lane values, converted to the type
int
.
final int[]
LongVector.
toIntArray
()
Returns an
int[]
array containing all
 the lane values, converted to the type
int
.
final int[]
ShortVector.
toIntArray
()
Returns an
int[]
array containing all
 the lane values, converted to the type
int
.
final long[]
ByteVector.
toLongArray
()
Returns a
long[]
array containing all
 the lane values, converted to the type
long
.
final long[]
DoubleVector.
toLongArray
()
Returns a
long[]
array containing all
 the lane values, converted to the type
long
.
final long[]
FloatVector.
toLongArray
()
Returns a
long[]
array containing all
 the lane values, converted to the type
long
.
final long[]
IntVector.
toLongArray
()
Returns a
long[]
array containing all
 the lane values, converted to the type
long
.
final long[]
LongVector.
toLongArray
()
Returns a
long[]
array containing all
 the lane values, converted to the type
long
.
final long[]
ShortVector.
toLongArray
()
Returns a
long[]
array containing all
 the lane values, converted to the type
long
.
final
String
ByteVector.
toString
()
Returns a string representation of this vector, of the form
"[0,1,2...]"
, reporting the lane values of this vector,
 in lane order.
final
String
DoubleVector.
toString
()
Returns a string representation of this vector, of the form
"[0,1,2...]"
, reporting the lane values of this vector,
 in lane order.
final
String
FloatVector.
toString
()
Returns a string representation of this vector, of the form
"[0,1,2...]"
, reporting the lane values of this vector,
 in lane order.
final
String
IntVector.
toString
()
Returns a string representation of this vector, of the form
"[0,1,2...]"
, reporting the lane values of this vector,
 in lane order.
final
String
LongVector.
toString
()
Returns a string representation of this vector, of the form
"[0,1,2...]"
, reporting the lane values of this vector,
 in lane order.
final
String
ShortVector.
toString
()
Returns a string representation of this vector, of the form
"[0,1,2...]"
, reporting the lane values of this vector,
 in lane order.
abstract
String
Vector.
toString
()
Returns a string representation of this vector, of the form
"[0,1,2...]"
, reporting the lane values of this
 vector, in lane order.
final
String
VectorMask.
toString
()
Returns a string representation of this mask, of the form
"Mask[T.TT...]"
, reporting the mask bit
 settings (as 'T' or '.' characters) in lane order.
final
String
VectorShuffle.
toString
()
Returns a string representation of this shuffle, of the form
"Shuffle[0,1,2...]"
, reporting the source indexes
 in lane order.
String
VectorSpecies.
toString
()
Returns a string of the form "Species[ETYPE, VLENGTH, SHAPE]",
 where
ETYPE
is the primitive
lane type
,
VLENGTH
is the
vector lane count
associated with the species, and
SHAPE
is the
vector shape
associated with the species.
abstract
ByteVector
ByteVector.
unslice
(int origin)
Reverses a
slice()
, inserting
 the current vector as a slice within a "background" input
 of zero lane values.
abstract
ByteVector
ByteVector.
unslice
(int origin,
Vector
<
Byte
> w,
 int part)
Reverses a
slice()
, inserting
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
abstract
ByteVector
ByteVector.
unslice
(int origin,
Vector
<
Byte
> w,
 int part,
VectorMask
<
Byte
> m)
Reverses a
slice()
, inserting
 (under the control of a mask)
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
abstract
DoubleVector
DoubleVector.
unslice
(int origin)
Reverses a
slice()
, inserting
 the current vector as a slice within a "background" input
 of zero lane values.
abstract
DoubleVector
DoubleVector.
unslice
(int origin,
Vector
<
Double
> w,
 int part)
Reverses a
slice()
, inserting
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
abstract
DoubleVector
DoubleVector.
unslice
(int origin,
Vector
<
Double
> w,
 int part,
VectorMask
<
Double
> m)
Reverses a
slice()
, inserting
 (under the control of a mask)
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
abstract
FloatVector
FloatVector.
unslice
(int origin)
Reverses a
slice()
, inserting
 the current vector as a slice within a "background" input
 of zero lane values.
abstract
FloatVector
FloatVector.
unslice
(int origin,
Vector
<
Float
> w,
 int part)
Reverses a
slice()
, inserting
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
abstract
FloatVector
FloatVector.
unslice
(int origin,
Vector
<
Float
> w,
 int part,
VectorMask
<
Float
> m)
Reverses a
slice()
, inserting
 (under the control of a mask)
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
abstract
IntVector
IntVector.
unslice
(int origin)
Reverses a
slice()
, inserting
 the current vector as a slice within a "background" input
 of zero lane values.
abstract
IntVector
IntVector.
unslice
(int origin,
Vector
<
Integer
> w,
 int part)
Reverses a
slice()
, inserting
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
abstract
IntVector
IntVector.
unslice
(int origin,
Vector
<
Integer
> w,
 int part,
VectorMask
<
Integer
> m)
Reverses a
slice()
, inserting
 (under the control of a mask)
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
abstract
LongVector
LongVector.
unslice
(int origin)
Reverses a
slice()
, inserting
 the current vector as a slice within a "background" input
 of zero lane values.
abstract
LongVector
LongVector.
unslice
(int origin,
Vector
<
Long
> w,
 int part)
Reverses a
slice()
, inserting
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
abstract
LongVector
LongVector.
unslice
(int origin,
Vector
<
Long
> w,
 int part,
VectorMask
<
Long
> m)
Reverses a
slice()
, inserting
 (under the control of a mask)
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
abstract
ShortVector
ShortVector.
unslice
(int origin)
Reverses a
slice()
, inserting
 the current vector as a slice within a "background" input
 of zero lane values.
abstract
ShortVector
ShortVector.
unslice
(int origin,
Vector
<
Short
> w,
 int part)
Reverses a
slice()
, inserting
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
abstract
ShortVector
ShortVector.
unslice
(int origin,
Vector
<
Short
> w,
 int part,
VectorMask
<
Short
> m)
Reverses a
slice()
, inserting
 (under the control of a mask)
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
final
Vector
<?>
ByteVector.
viewAsFloatingLanes
()
Views this vector as a vector of the same shape, length, and
 contents, but a lane type that is a floating-point type.
final
DoubleVector
DoubleVector.
viewAsFloatingLanes
()
Views this vector as a vector of the same shape, length, and
 contents, but a lane type that is a floating-point type.
final
FloatVector
FloatVector.
viewAsFloatingLanes
()
Views this vector as a vector of the same shape, length, and
 contents, but a lane type that is a floating-point type.
final
FloatVector
IntVector.
viewAsFloatingLanes
()
Views this vector as a vector of the same shape, length, and
 contents, but a lane type that is a floating-point type.
final
DoubleVector
LongVector.
viewAsFloatingLanes
()
Views this vector as a vector of the same shape, length, and
 contents, but a lane type that is a floating-point type.
final
Vector
<?>
ShortVector.
viewAsFloatingLanes
()
Views this vector as a vector of the same shape, length, and
 contents, but a lane type that is a floating-point type.
final
ByteVector
ByteVector.
viewAsIntegralLanes
()
Views this vector as a vector of the same shape, length, and
 contents, but a lane type that is not a floating-point type.
final
LongVector
DoubleVector.
viewAsIntegralLanes
()
Views this vector as a vector of the same shape, length, and
 contents, but a lane type that is not a floating-point type.
final
IntVector
FloatVector.
viewAsIntegralLanes
()
Views this vector as a vector of the same shape, length, and
 contents, but a lane type that is not a floating-point type.
final
IntVector
IntVector.
viewAsIntegralLanes
()
Views this vector as a vector of the same shape, length, and
 contents, but a lane type that is not a floating-point type.
final
LongVector
LongVector.
viewAsIntegralLanes
()
Views this vector as a vector of the same shape, length, and
 contents, but a lane type that is not a floating-point type.
final
ShortVector
ShortVector.
viewAsIntegralLanes
()
Views this vector as a vector of the same shape, length, and
 contents, but a lane type that is not a floating-point type.
Uses of
Override
in
jdk.javadoc.doclet
Methods in
jdk.javadoc.doclet
with annotations of type
Override
Modifier and Type
Method
Description
String
StandardDoclet.
getName
()
Set
<? extends
Doclet.Option
>
StandardDoclet.
getSupportedOptions
()
SourceVersion
StandardDoclet.
getSupportedSourceVersion
()
void
StandardDoclet.
init
(
Locale
locale,
Reporter
reporter)
boolean
StandardDoclet.
run
(
DocletEnvironment
docEnv)
Uses of
Override
in
jdk.jfr
Methods in
jdk.jfr
with annotations of type
Override
Modifier and Type
Method
Description
final void
Event.
begin
()
Starts the timing of this event.
void
Recording.
close
()
Releases all data that is associated with this recording.
final void
Event.
commit
()
Writes the field values, time stamp, and event duration to the Flight
 Recorder system.
final void
Event.
end
()
Ends the timing of this event.
final boolean
Event.
isEnabled
()
Returns
true
if at least one recording is running, and the
 enabled setting for this event is set to
true
, otherwise
false
is returned.
final void
Event.
set
(int index,
Object
value)
Sets a field value.
final boolean
Event.
shouldCommit
()
Returns
true
if the enabled setting for this event is set to
true
and if the duration is within the threshold for the event,
false
otherwise.
Uses of
Override
in
jdk.jfr.consumer
Methods in
jdk.jfr.consumer
with annotations of type
Override
Modifier and Type
Method
Description
void
RecordingStream.
awaitTermination
()
void
RecordingStream.
awaitTermination
(
Duration
timeout)
void
EventStream.
close
()
Releases all resources associated with this stream.
void
RecordingFile.
close
()
Closes this recording file and releases any system resources that are
 associated with it.
void
RecordingStream.
close
()
List
<
ValueDescriptor
>
RecordedEvent.
getFields
()
Returns the list of descriptors that describes the fields of the event.
void
RecordingStream.
onClose
(
Runnable
action)
void
RecordingStream.
onError
(
Consumer
<
Throwable
> action)
void
RecordingStream.
onEvent
(
String
eventName,
Consumer
<
RecordedEvent
> action)
void
RecordingStream.
onEvent
(
Consumer
<
RecordedEvent
> action)
void
RecordingStream.
onFlush
(
Runnable
action)
boolean
RecordingStream.
remove
(
Object
action)
void
RecordingStream.
setEndTime
(
Instant
endTime)
void
RecordingStream.
setOrdered
(boolean ordered)
void
RecordingStream.
setReuse
(boolean reuse)
void
RecordingStream.
setStartTime
(
Instant
startTime)
void
RecordingStream.
start
()
void
RecordingStream.
startAsync
()
Starts asynchronous processing of actions.
final
String
RecordedObject.
toString
()
Returns a textual representation of this object.
Uses of
Override
in
jdk.jshell
Methods in
jdk.jshell
with annotations of type
Override
Modifier and Type
Method
Description
void
JShell.
close
()
Close this state engine.
JShellException
EvalException.
getCause
()
Returns the wrapped cause of the throwable in the executing client
 represented by this
EvalException
or
null
if the cause is
 nonexistent or unknown.
String
ExpressionSnippet.
name
()
Variable name which is the value of the expression.
String
ImportSnippet.
name
()
The identifying name of the import.
String
PersistentSnippet.
name
()
Name of the Snippet.
String
SnippetEvent.
toString
()
Return a string representation of the event
Uses of
Override
in
jdk.jshell.execution
Methods in
jdk.jshell.execution
with annotations of type
Override
Modifier and Type
Method
Description
void
DirectExecutionControl.
addToClasspath
(
String
cp)
void
StreamingExecutionControl.
addToClasspath
(
String
path)
protected void
LocalExecutionControl.
clientCodeEnter
()
protected void
RemoteExecutionControl.
clientCodeEnter
()
protected void
LocalExecutionControl.
clientCodeLeave
()
void
DirectExecutionControl.
close
()
void
JdiDefaultExecutionControl.
close
()
void
StreamingExecutionControl.
close
()
Closes the execution engine.
Map
<
String
,
String
>
FailOverExecutionControlProvider.
defaultParameters
()
Create and return the default parameter map for this
ExecutionControlProvider
.
Map
<
String
,
String
>
JdiExecutionControlProvider.
defaultParameters
()
Create and return the default parameter map for this
ExecutionControlProvider
.
Map
<
String
,
String
>
LocalExecutionControlProvider.
defaultParameters
()
Create and return the default parameter map for
LocalExecutionControlProvider
.
Object
DirectExecutionControl.
extensionCommand
(
String
command,
Object
arg)
Object
StreamingExecutionControl.
extensionCommand
(
String
command,
Object
arg)
ExecutionControl
FailOverExecutionControlProvider.
generate
(
ExecutionEnv
env,
Map
<
String
,
String
> parameters)
Create and return a locally executing
ExecutionControl
instance.
ExecutionControl
JdiExecutionControlProvider.
generate
(
ExecutionEnv
env,
Map
<
String
,
String
> parameters)
ExecutionControl
LocalExecutionControlProvider.
generate
(
ExecutionEnv
env,
Map
<
String
,
String
> parameters)
Create and return a locally executing
ExecutionControl
instance.
String
DirectExecutionControl.
invoke
(
String
className,
String
methodName)
String
JdiDefaultExecutionControl.
invoke
(
String
classname,
String
methodname)
String
StreamingExecutionControl.
invoke
(
String
classname,
String
methodname)
void
DirectExecutionControl.
load
(
ExecutionControl.ClassBytecodes
[] cbcs)
void
StreamingExecutionControl.
load
(
ExecutionControl.ClassBytecodes
[] cbcs)
String
FailOverExecutionControlProvider.
name
()
The unique name of this
ExecutionControlProvider
.
String
JdiExecutionControlProvider.
name
()
The unique name of this
ExecutionControlProvider
.
String
LocalExecutionControlProvider.
name
()
The unique name of this
ExecutionControlProvider
.
void
DirectExecutionControl.
redefine
(
ExecutionControl.ClassBytecodes
[] cbcs)
void
JdiExecutionControl.
redefine
(
ExecutionControl.ClassBytecodes
[] cbcs)
Redefine the specified classes.
void
RemoteExecutionControl.
redefine
(
ExecutionControl.ClassBytecodes
[] cbcs)
Redefine processing on the remote end is only to register the redefined classes
void
StreamingExecutionControl.
redefine
(
ExecutionControl.ClassBytecodes
[] cbcs)
void
DirectExecutionControl.
stop
()
Interrupts a running invoke.
void
JdiDefaultExecutionControl.
stop
()
Interrupts a running remote invoke by manipulating remote variables
 and sending a stop via JDI.
void
RemoteExecutionControl.
stop
()
void
StreamingExecutionControl.
stop
()
String
DirectExecutionControl.
varValue
(
String
className,
String
varName)
String
RemoteExecutionControl.
varValue
(
String
className,
String
varName)
String
StreamingExecutionControl.
varValue
(
String
classname,
String
varname)
protected
VirtualMachine
JdiDefaultExecutionControl.
vm
()
Uses of
Override
in
jdk.jshell.spi
Methods in
jdk.jshell.spi
with annotations of type
Override
Modifier and Type
Method
Description
void
ExecutionControl.
close
()
Shuts down this execution engine.
Uses of
Override
in
jdk.management.jfr
Methods in
jdk.management.jfr
with annotations of type
Override
Modifier and Type
Method
Description
void
RemoteRecordingStream.
awaitTermination
()
void
RemoteRecordingStream.
awaitTermination
(
Duration
timeout)
void
RemoteRecordingStream.
close
()
void
RemoteRecordingStream.
onClose
(
Runnable
action)
void
RemoteRecordingStream.
onError
(
Consumer
<
Throwable
> action)
void
RemoteRecordingStream.
onEvent
(
String
eventName,
Consumer
<
RecordedEvent
> action)
void
RemoteRecordingStream.
onEvent
(
Consumer
<
RecordedEvent
> action)
void
RemoteRecordingStream.
onFlush
(
Runnable
action)
boolean
RemoteRecordingStream.
remove
(
Object
action)
void
RemoteRecordingStream.
setEndTime
(
Instant
endTime)
void
RemoteRecordingStream.
setOrdered
(boolean ordered)
void
RemoteRecordingStream.
setReuse
(boolean reuse)
void
RemoteRecordingStream.
setStartTime
(
Instant
startTime)
void
RemoteRecordingStream.
start
()
void
RemoteRecordingStream.
startAsync
()
String
ConfigurationInfo.
toString
()
Returns a description of the configuration that is associated with this
ConfigurationInfo
.
String
EventTypeInfo.
toString
()
Returns a description of this
EventTypeInfo
.
String
RecordingInfo.
toString
()
Returns a string description of the recording associated with this
RecordingInfo
String
SettingDescriptorInfo.
toString
()
Returns a
String
description of this
SettingDescriptorInfo
.
Uses of
Override
in
org.xml.sax.helpers
Methods in
org.xml.sax.helpers
with annotations of type
Override
Modifier and Type
Method
Description
void
DefaultHandler.
characters
(char[] ch,
 int start,
 int length)
Receive notification of character data inside an element.
void
DefaultHandler.
endDocument
()
Receive notification of the end of the document.
void
DefaultHandler.
endElement
(
String
uri,
String
localName,
String
qName)
Receive notification of the end of an element.
void
DefaultHandler.
endPrefixMapping
(
String
prefix)
Receive notification of the end of a Namespace mapping.
void
DefaultHandler.
error
(
SAXParseException
e)
Receive notification of a recoverable parser error.
void
DefaultHandler.
fatalError
(
SAXParseException
e)
Report a fatal XML parsing error.
void
DefaultHandler.
ignorableWhitespace
(char[] ch,
 int start,
 int length)
Receive notification of ignorable whitespace in element content.
void
DefaultHandler.
notationDecl
(
String
name,
String
publicId,
String
systemId)
Receive notification of a notation declaration.
void
DefaultHandler.
processingInstruction
(
String
target,
String
data)
Receive notification of a processing instruction.
InputSource
DefaultHandler.
resolveEntity
(
String
publicId,
String
systemId)
Resolve an external entity.
void
DefaultHandler.
setDocumentLocator
(
Locator
locator)
Receive a Locator object for document events.
void
DefaultHandler.
skippedEntity
(
String
name)
Receive notification of a skipped entity.
void
DefaultHandler.
startDocument
()
Receive notification of the beginning of the document.
void
DefaultHandler.
startElement
(
String
uri,
String
localName,
String
qName,
Attributes
attributes)
Receive notification of the start of an element.
void
DefaultHandler.
startPrefixMapping
(
String
prefix,
String
uri)
Receive notification of the start of a Namespace mapping.
void
DefaultHandler.
unparsedEntityDecl
(
String
name,
String
publicId,
String
systemId,
String
notationName)
Receive notification of an unparsed entity declaration.
void
DefaultHandler.
warning
(
SAXParseException
e)
Receive notification of a parser warning.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.