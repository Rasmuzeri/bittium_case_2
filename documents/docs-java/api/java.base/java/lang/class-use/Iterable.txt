Uses of Interface java.lang.Iterable (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Interface
java.lang.Iterable
Packages that use
Iterable
Package
Description
com.sun.jdi.event
This package defines JDI events and event processing.
com.sun.source.tree
Provides interfaces to represent source code as abstract syntax
 trees (AST).
com.sun.source.util
Provides utilities for operations on abstract syntax trees (AST).
java.beans.beancontext
Provides classes and interfaces relating to bean context.
java.lang
Provides classes that are fundamental to the design of the Java
 programming language.
java.net.http
HTTP Client and WebSocket APIs
java.nio.file
Defines interfaces and classes for the Java virtual machine to access files,
 file attributes, and file systems.
java.sql
Provides the API for accessing and processing data stored in a
 data source (usually a relational database) using the
 Java programming language.
java.util
Contains the collections framework, some internationalization support classes,
 a service loader, properties, random number generation, string parsing
 and scanning classes, base64 encoding and decoding, a bit array, and
 several miscellaneous utility classes.
java.util.concurrent
Utility classes commonly useful in concurrent programming.
javax.annotation.processing
Facilities for declaring annotation processors and for
 allowing annotation processors to communicate with an annotation processing
 tool environment.
javax.lang.model.util
Utilities to assist in the processing of
program elements
and
types
.
javax.management
Provides the core classes for the Java Management Extensions.
javax.management.relation
Provides the definition of the Relation Service.
javax.print.attribute.standard
Package
javax.print.attribute.standard
contains classes for specific
 printing attributes.
javax.sql.rowset
Standard interfaces and base classes for JDBC
RowSet
implementations.
javax.sql.rowset.serial
Provides utility classes to allow serializable mappings between SQL types
 and data types in the Java programming language.
javax.sql.rowset.spi
The standard classes and interfaces that a third party vendor has to
 use in its implementation of a synchronization provider.
javax.swing
Provides a set of "lightweight" (all-Java language) components
 that, to the maximum degree possible, work the same on all platforms.
javax.tools
Provides interfaces for tools which can be invoked from a program,
 for example, compilers.
javax.xml.crypto
Common classes for XML cryptography.
javax.xml.xpath
Provides an
object-model neutral
API for the
 evaluation of XPath expressions and access to the evaluation
 environment.
jdk.dynalink.linker.support
Contains classes that make it more convenient for language runtimes to
 implement their own language-specific object models and type conversions
 by providing basic implementations of some classes as well as various
 utilities.
Uses of
Iterable
in
com.sun.jdi.event
Subinterfaces of
Iterable
in
com.sun.jdi.event
Modifier and Type
Interface
Description
interface
EventSet
Several
Event
objects may be created at a given time by
 the target
VirtualMachine
.
Uses of
Iterable
in
com.sun.source.tree
Methods in
com.sun.source.tree
that return
Iterable
Modifier and Type
Method
Description
Iterable
<? extends
Element
>
Scope.
getLocalElements
()
Returns the elements directly contained in this scope.
Uses of
Iterable
in
com.sun.source.util
Classes in
com.sun.source.util
that implement
Iterable
Modifier and Type
Class
Description
class
DocTreePath
A path of tree nodes, typically used to represent the sequence of ancestor
 nodes of a tree node up to the top-level
DocCommentTree
node.
class
TreePath
A path of tree nodes, typically used to represent the sequence of ancestor
 nodes of a tree node up to the top-level
CompilationUnitTree
node.
Methods in
com.sun.source.util
that return
Iterable
Modifier and Type
Method
Description
abstract
Iterable
<? extends
Element
>
JavacTask.
analyze
()
Completes all analysis.
abstract
Iterable
<? extends
JavaFileObject
>
JavacTask.
generate
()
Generates code.
abstract
Iterable
<? extends
CompilationUnitTree
>
JavacTask.
parse
()
Parses the specified files returning a list of abstract syntax trees.
Methods in
com.sun.source.util
with parameters of type
Iterable
Modifier and Type
Method
Description
abstract
TypeMirror
JavacTask.
getTypeMirror
(
Iterable
<? extends
Tree
> path)
Returns a type mirror of the tree node determined by the specified path.
R
DocTreeScanner.
scan
(
Iterable
<? extends
DocTree
> nodes,
P
p)
Scans a sequence of nodes.
R
TreeScanner.
scan
(
Iterable
<? extends
Tree
> nodes,
P
p)
Scans a sequence of nodes.
final
R
SimpleDocTreeVisitor.
visit
(
Iterable
<? extends
DocTree
> nodes,
P
p)
Invokes the appropriate visit method on each of a sequence of nodes.
final
R
SimpleTreeVisitor.
visit
(
Iterable
<? extends
Tree
> nodes,
P
p)
Invokes the appropriate visit method on each of a sequence of nodes.
Uses of
Iterable
in
java.beans.beancontext
Subinterfaces of
Iterable
in
java.beans.beancontext
Modifier and Type
Interface
Description
interface
BeanContext
The BeanContext acts a logical hierarchical container for JavaBeans.
interface
BeanContextServices
The BeanContextServices interface provides a mechanism for a BeanContext
 to expose generic "services" to the BeanContextChild objects within.
Classes in
java.beans.beancontext
that implement
Iterable
Modifier and Type
Class
Description
class
BeanContextServicesSupport
This helper class provides a utility implementation of the
 java.beans.beancontext.BeanContextServices interface.
class
BeanContextSupport
This helper class provides a utility implementation of the
 java.beans.beancontext.BeanContext interface.
Uses of
Iterable
in
java.lang
Methods in
java.lang
with parameters of type
Iterable
Modifier and Type
Method
Description
static
String
String.
join
(
CharSequence
delimiter,
Iterable
<? extends
CharSequence
> elements)
Returns a new
String
composed of copies of the
CharSequence elements
joined together with a copy of the
 specified
delimiter
.
Uses of
Iterable
in
java.net.http
Methods in
java.net.http
with parameters of type
Iterable
Modifier and Type
Method
Description
static
HttpRequest.BodyPublisher
HttpRequest.BodyPublishers.
ofByteArrays
(
Iterable
<byte[]> iter)
A request body publisher that takes data from an
Iterable
of byte arrays.
Uses of
Iterable
in
java.nio.file
Subinterfaces of
Iterable
in
java.nio.file
Modifier and Type
Interface
Description
interface
DirectoryStream
<T>
An object to iterate over the entries in a directory.
interface
Path
An object that may be used to locate a file in a file system.
interface
SecureDirectoryStream
<T>
A
DirectoryStream
that defines operations on files that are located
 relative to an open directory.
Methods in
java.nio.file
that return
Iterable
Modifier and Type
Method
Description
abstract
Iterable
<
FileStore
>
FileSystem.
getFileStores
()
Returns an object to iterate over the underlying file stores.
abstract
Iterable
<
Path
>
FileSystem.
getRootDirectories
()
Returns an object to iterate over the paths of the root directories.
Methods in
java.nio.file
with parameters of type
Iterable
Modifier and Type
Method
Description
static
Path
Files.
write
(
Path
path,
Iterable
<? extends
CharSequence
> lines,
Charset
cs,
OpenOption
... options)
Write lines of text to a file.
static
Path
Files.
write
(
Path
path,
Iterable
<? extends
CharSequence
> lines,
OpenOption
... options)
Write lines of text to a file.
Uses of
Iterable
in
java.sql
Classes in
java.sql
that implement
Iterable
Modifier and Type
Class
Description
class
BatchUpdateException
The subclass of
SQLException
thrown when an error
 occurs during a batch update operation.
class
DataTruncation
An exception  thrown as a
DataTruncation
exception
 (on writes) or reported as a
DataTruncation
warning (on reads)
  when a data values is unexpectedly truncated for reasons other than its having
  exceeded
MaxFieldSize
.
class
SQLClientInfoException
The subclass of
SQLException
is thrown when one or more client info properties
 could not be set on a
Connection
.
class
SQLDataException
The subclass of
SQLException
thrown when the SQLState class value
 is '
22
', or under vendor-specified conditions.
class
SQLException
An exception that provides information on a database access
 error or other errors.
class
SQLFeatureNotSupportedException
The subclass of
SQLException
thrown when the SQLState class value is '
0A
'
 ( the value is 'zero' A).
class
SQLIntegrityConstraintViolationException
The subclass of
SQLException
thrown when the SQLState class value
 is '
23
', or under vendor-specified conditions.
class
SQLInvalidAuthorizationSpecException
The subclass of
SQLException
thrown when the SQLState class value
 is '
28
', or under vendor-specified conditions.
class
SQLNonTransientConnectionException
The subclass of
SQLException
thrown for the SQLState
 class value '
08
', or under vendor-specified conditions.
class
SQLNonTransientException
The subclass of
SQLException
thrown when an instance where a retry
 of the same operation would fail unless the cause of the
SQLException
is corrected.
class
SQLRecoverableException
The subclass of
SQLException
thrown in situations where a
 previously failed operation might be able to succeed if the application performs
  some recovery steps and retries the entire transaction or in the case of a
 distributed transaction, the transaction branch.
class
SQLSyntaxErrorException
The subclass of
SQLException
thrown when the SQLState class value
 is '
42
', or under vendor-specified conditions.
class
SQLTimeoutException
The subclass of
SQLException
thrown when the timeout specified by
Statement.setQueryTimeout
,
DriverManager.setLoginTimeout
,
DataSource.setLoginTimeout
,
XADataSource.setLoginTimeout
has expired.
class
SQLTransactionRollbackException
The subclass of
SQLException
thrown when the SQLState class value
 is '
40
', or under vendor-specified conditions.
class
SQLTransientConnectionException
The subclass of
SQLException
for the SQLState class
 value '
08
', or under vendor-specified conditions.
class
SQLTransientException
The subclass of
SQLException
is thrown in situations where a
 previously failed operation might be able to succeed when the operation is
 retried without any intervention by application-level functionality.
class
SQLWarning
An exception that provides information on  database access
 warnings.
Uses of
Iterable
in
java.util
Subinterfaces of
Iterable
in
java.util
Modifier and Type
Interface
Description
interface
Collection
<E>
The root interface in the
collection hierarchy
.
interface
Deque
<E>
A linear collection that supports element insertion and removal at
 both ends.
interface
List
<E>
An ordered collection, where the user has precise control over where in the
 list each element is inserted.
interface
NavigableSet
<E>
A
SortedSet
extended with navigation methods reporting
 closest matches for given search targets.
interface
Queue
<E>
A collection designed for holding elements prior to processing.
interface
SequencedCollection
<E>
A collection that has a well-defined encounter order, that supports operations at both ends,
 and that is reversible.
interface
SequencedSet
<E>
A collection that is both a
SequencedCollection
and a
Set
.
interface
Set
<E>
A collection that contains no duplicate elements.
interface
SortedSet
<E>
A
Set
that further provides a
total ordering
on its elements.
Classes in
java.util
that implement
Iterable
Modifier and Type
Class
Description
class
AbstractCollection
<E>
This class provides a skeletal implementation of the
Collection
interface, to minimize the effort required to implement this interface.
class
AbstractList
<E>
This class provides a skeletal implementation of the
List
interface to minimize the effort required to implement this interface
 backed by a "random access" data store (such as an array).
class
AbstractQueue
<E>
This class provides skeletal implementations of some
Queue
operations.
class
AbstractSequentialList
<E>
This class provides a skeletal implementation of the
List
interface to minimize the effort required to implement this interface
 backed by a "sequential access" data store (such as a linked list).
class
AbstractSet
<E>
This class provides a skeletal implementation of the
Set
interface to minimize the effort required to implement this
 interface.
class
ArrayDeque
<E>
Resizable-array implementation of the
Deque
interface.
class
ArrayList
<E>
Resizable-array implementation of the
List
interface.
class
EnumSet
<E extends
Enum
<E>>
A specialized
Set
implementation for use with enum types.
class
HashSet
<E>
This class implements the
Set
interface, backed by a hash table
 (actually a
HashMap
instance).
class
LinkedHashSet
<E>
Hash table and linked list implementation of the
Set
interface,
 with well-defined encounter order.
class
LinkedList
<E>
Doubly-linked list implementation of the
List
and
Deque
interfaces.
class
PriorityQueue
<E>
An unbounded priority
queue
based on a priority heap.
final class
ServiceLoader
<S>
A facility to load implementations of a service.
class
Stack
<E>
The
Stack
class represents a last-in-first-out
 (LIFO) stack of objects.
class
TreeSet
<E>
A
NavigableSet
implementation based on a
TreeMap
.
class
Vector
<E>
The
Vector
class implements a growable array of
 objects.
Uses of
Iterable
in
java.util.concurrent
Subinterfaces of
Iterable
in
java.util.concurrent
Modifier and Type
Interface
Description
interface
BlockingDeque
<E>
A
Deque
that additionally supports blocking operations that wait
 for the deque to become non-empty when retrieving an element, and wait for
 space to become available in the deque when storing an element.
interface
BlockingQueue
<E>
A
Queue
that additionally supports operations that wait for
 the queue to become non-empty when retrieving an element, and wait
 for space to become available in the queue when storing an element.
interface
TransferQueue
<E>
A
BlockingQueue
in which producers may wait for consumers
 to receive elements.
Classes in
java.util.concurrent
that implement
Iterable
Modifier and Type
Class
Description
class
ArrayBlockingQueue
<E>
A bounded
blocking queue
backed by an
 array.
static final class
ConcurrentHashMap.KeySetView
<K,
V>
A view of a ConcurrentHashMap as a
Set
of keys, in
 which additions may optionally be enabled by mapping to a
 common value.
class
ConcurrentLinkedDeque
<E>
An unbounded concurrent
deque
based on linked nodes.
class
ConcurrentLinkedQueue
<E>
An unbounded thread-safe
queue
based on linked nodes.
class
ConcurrentSkipListSet
<E>
A scalable concurrent
NavigableSet
implementation based on
 a
ConcurrentSkipListMap
.
class
CopyOnWriteArrayList
<E>
A thread-safe variant of
ArrayList
in which all mutative
 operations (
add
,
set
, and so on) are implemented by
 making a fresh copy of the underlying array.
class
CopyOnWriteArraySet
<E>
A
Set
that uses an internal
CopyOnWriteArrayList
for all of its operations.
class
DelayQueue
<E extends
Delayed
>
An unbounded
blocking queue
of
Delayed
elements, in which an element generally becomes eligible for removal when its
 delay has expired.
class
LinkedBlockingDeque
<E>
An optionally-bounded
blocking deque
based on
 linked nodes.
class
LinkedBlockingQueue
<E>
An optionally-bounded
blocking queue
based on
 linked nodes.
class
LinkedTransferQueue
<E>
An unbounded
TransferQueue
based on linked nodes.
class
PriorityBlockingQueue
<E>
An unbounded
blocking queue
that uses
 the same ordering rules as class
PriorityQueue
and supplies
 blocking retrieval operations.
class
SynchronousQueue
<E>
A
blocking queue
in which each insert
 operation must wait for a corresponding remove operation by another
 thread, and vice versa.
Uses of
Iterable
in
javax.annotation.processing
Methods in
javax.annotation.processing
that return
Iterable
Modifier and Type
Method
Description
Iterable
<? extends
Completion
>
AbstractProcessor.
getCompletions
(
Element
element,
AnnotationMirror
annotation,
ExecutableElement
member,
String
userText)
Returns an empty iterable of completions.
Iterable
<? extends
Completion
>
Processor.
getCompletions
(
Element
element,
AnnotationMirror
annotation,
ExecutableElement
member,
String
userText)
Returns to the tool infrastructure an iterable of suggested
 completions to an annotation.
Uses of
Iterable
in
javax.lang.model.util
Methods in
javax.lang.model.util
with parameters of type
Iterable
Modifier and Type
Method
Description
static
List
<
ExecutableElement
>
ElementFilter.
constructorsIn
(
Iterable
<? extends
Element
> elements)
Returns a list of constructors in
elements
.
static
List
<
ModuleElement.ExportsDirective
>
ElementFilter.
exportsIn
(
Iterable
<? extends
ModuleElement.Directive
> directives)
Returns a list of
exports
directives in
directives
.
static
List
<
VariableElement
>
ElementFilter.
fieldsIn
(
Iterable
<? extends
Element
> elements)
Returns a list of fields in
elements
.
static
List
<
ExecutableElement
>
ElementFilter.
methodsIn
(
Iterable
<? extends
Element
> elements)
Returns a list of methods in
elements
.
static
List
<
ModuleElement
>
ElementFilter.
modulesIn
(
Iterable
<? extends
Element
> elements)
Returns a list of modules in
elements
.
static
List
<
ModuleElement.OpensDirective
>
ElementFilter.
opensIn
(
Iterable
<? extends
ModuleElement.Directive
> directives)
Returns a list of
opens
directives in
directives
.
static
List
<
PackageElement
>
ElementFilter.
packagesIn
(
Iterable
<? extends
Element
> elements)
Returns a list of packages in
elements
.
static
List
<
ModuleElement.ProvidesDirective
>
ElementFilter.
providesIn
(
Iterable
<? extends
ModuleElement.Directive
> directives)
Returns a list of
provides
directives in
directives
.
static
List
<
RecordComponentElement
>
ElementFilter.
recordComponentsIn
(
Iterable
<? extends
Element
> elements)
Returns a list of record components in
elements
.
static
List
<
ModuleElement.RequiresDirective
>
ElementFilter.
requiresIn
(
Iterable
<? extends
ModuleElement.Directive
> directives)
Returns a list of
requires
directives in
directives
.
final
R
ElementScanner6.
scan
(
Iterable
<? extends
Element
> iterable,
P
p)
Iterates over the given elements and calls
scan(Element, P)
on each one.
static
List
<
TypeElement
>
ElementFilter.
typesIn
(
Iterable
<? extends
Element
> elements)
Returns a list of classes and interfaces in
elements
.
static
List
<
ModuleElement.UsesDirective
>
ElementFilter.
usesIn
(
Iterable
<? extends
ModuleElement.Directive
> directives)
Returns a list of
uses
directives in
directives
.
Uses of
Iterable
in
javax.management
Classes in
javax.management
that implement
Iterable
Modifier and Type
Class
Description
class
AttributeList
Represents a list of values for attributes of an MBean.
Uses of
Iterable
in
javax.management.relation
Classes in
javax.management.relation
that implement
Iterable
Modifier and Type
Class
Description
class
RoleList
A RoleList represents a list of roles (Role objects).
class
RoleUnresolvedList
A RoleUnresolvedList represents a list of RoleUnresolved objects,
 representing roles not retrieved from a relation due to a problem
 encountered when trying to access (read or write) the roles.
Uses of
Iterable
in
javax.print.attribute.standard
Classes in
javax.print.attribute.standard
that implement
Iterable
Modifier and Type
Class
Description
final class
JobStateReasons
Class
JobStateReasons
is a printing attribute class, a set of
 enumeration values, that provides additional information about the job's
 current state, i.e., information that augments the value of the job's
JobState
attribute.
Uses of
Iterable
in
javax.sql.rowset
Classes in
javax.sql.rowset
that implement
Iterable
Modifier and Type
Class
Description
class
RowSetWarning
An extension of
SQLException
that provides information
 about database warnings set on
RowSet
objects.
Uses of
Iterable
in
javax.sql.rowset.serial
Classes in
javax.sql.rowset.serial
that implement
Iterable
Modifier and Type
Class
Description
class
SerialException
Indicates and an error with the serialization or de-serialization of
 SQL types such as
BLOB, CLOB, STRUCT or ARRAY
in
 addition to SQL types such as
DATALINK and JAVAOBJECT
Uses of
Iterable
in
javax.sql.rowset.spi
Classes in
javax.sql.rowset.spi
that implement
Iterable
Modifier and Type
Class
Description
class
SyncFactoryException
Indicates an error with
SyncFactory
mechanism.
class
SyncProviderException
Indicates an error with the
SyncProvider
mechanism.
Uses of
Iterable
in
javax.swing
Methods in
javax.swing
with parameters of type
Iterable
Modifier and Type
Method
Description
static <M,
I>
RowFilter
<M,
I>
RowFilter.
andFilter
(
Iterable
<? extends
RowFilter
<? super M,
? super I>> filters)
Returns a
RowFilter
that includes entries if all
 of the supplied filters include the entry.
static <M,
I>
RowFilter
<M,
I>
RowFilter.
orFilter
(
Iterable
<? extends
RowFilter
<? super M,
? super I>> filters)
Returns a
RowFilter
that includes entries if any
 of the supplied filters includes the entry.
Uses of
Iterable
in
javax.tools
Methods in
javax.tools
that return
Iterable
Modifier and Type
Method
Description
Iterable
<? extends
JavaFileObject
>
StandardJavaFileManager.
getJavaFileObjects
(
File
... files)
Returns file objects representing the given files.
Iterable
<? extends
JavaFileObject
>
StandardJavaFileManager.
getJavaFileObjects
(
String
... names)
Returns file objects representing the given file names.
default
Iterable
<? extends
JavaFileObject
>
StandardJavaFileManager.
getJavaFileObjects
(
Path
... paths)
Returns file objects representing the given paths.
Iterable
<? extends
JavaFileObject
>
StandardJavaFileManager.
getJavaFileObjectsFromFiles
(
Iterable
<? extends
File
> files)
Returns file objects representing the given files.
default
Iterable
<? extends
JavaFileObject
>
StandardJavaFileManager.
getJavaFileObjectsFromPaths
(
Iterable
<? extends
Path
> paths)
Deprecated.
use
StandardJavaFileManager.getJavaFileObjectsFromPaths(Collection)
instead,
 to prevent the possibility of accidentally calling the method with a
 single
Path
as such an argument.
default
Iterable
<? extends
JavaFileObject
>
StandardJavaFileManager.
getJavaFileObjectsFromPaths
(
Collection
<? extends
Path
> paths)
Returns file objects representing the given paths.
Iterable
<? extends
JavaFileObject
>
StandardJavaFileManager.
getJavaFileObjectsFromStrings
(
Iterable
<
String
> names)
Returns file objects representing the given file names.
Iterable
<? extends
File
>
StandardJavaFileManager.
getLocation
(
JavaFileManager.Location
location)
Returns the search path associated with the given location.
default
Iterable
<? extends
Path
>
StandardJavaFileManager.
getLocationAsPaths
(
JavaFileManager.Location
location)
Returns the search path associated with the given location.
Iterable
<
JavaFileObject
>
ForwardingJavaFileManager.
list
(
JavaFileManager.Location
location,
String
packageName,
Set
<
JavaFileObject.Kind
> kinds,
 boolean recurse)
Iterable
<
JavaFileObject
>
JavaFileManager.
list
(
JavaFileManager.Location
location,
String
packageName,
Set
<
JavaFileObject.Kind
> kinds,
 boolean recurse)
Lists all file objects matching the given criteria in the given
 package-oriented location.
Iterable
<
Set
<
JavaFileManager.Location
>>
ForwardingJavaFileManager.
listLocationsForModules
(
JavaFileManager.Location
location)
default
Iterable
<
Set
<
JavaFileManager.Location
>>
JavaFileManager.
listLocationsForModules
(
JavaFileManager.Location
location)
Lists the locations for all the modules in a module-oriented location or an output location.
Methods in
javax.tools
with parameters of type
Iterable
Modifier and Type
Method
Description
void
DocumentationTool.DocumentationTask.
addModules
(
Iterable
<
String
> moduleNames)
Adds root modules to be taken into account during module
 resolution.
void
JavaCompiler.CompilationTask.
addModules
(
Iterable
<
String
> moduleNames)
Adds root modules to be taken into account during module
 resolution.
Iterable
<? extends
JavaFileObject
>
StandardJavaFileManager.
getJavaFileObjectsFromFiles
(
Iterable
<? extends
File
> files)
Returns file objects representing the given files.
default
Iterable
<? extends
JavaFileObject
>
StandardJavaFileManager.
getJavaFileObjectsFromPaths
(
Iterable
<? extends
Path
> paths)
Deprecated.
use
StandardJavaFileManager.getJavaFileObjectsFromPaths(Collection)
instead,
 to prevent the possibility of accidentally calling the method with a
 single
Path
as such an argument.
Iterable
<? extends
JavaFileObject
>
StandardJavaFileManager.
getJavaFileObjectsFromStrings
(
Iterable
<
String
> names)
Returns file objects representing the given file names.
DocumentationTool.DocumentationTask
DocumentationTool.
getTask
(
Writer
out,
JavaFileManager
fileManager,
DiagnosticListener
<? super
JavaFileObject
> diagnosticListener,
Class
<?> docletClass,
Iterable
<
String
> options,
Iterable
<? extends
JavaFileObject
> compilationUnits)
Creates a future for a documentation task with the given
 components and arguments.
JavaCompiler.CompilationTask
JavaCompiler.
getTask
(
Writer
out,
JavaFileManager
fileManager,
DiagnosticListener
<? super
JavaFileObject
> diagnosticListener,
Iterable
<
String
> options,
Iterable
<
String
> classes,
Iterable
<? extends
JavaFileObject
> compilationUnits)
Creates a future for a compilation task with the given
 components and arguments.
void
StandardJavaFileManager.
setLocation
(
JavaFileManager.Location
location,
Iterable
<? extends
File
> files)
Associates the given search path with the given location.
void
JavaCompiler.CompilationTask.
setProcessors
(
Iterable
<? extends
Processor
> processors)
Sets processors (for annotation processing).
Uses of
Iterable
in
javax.xml.crypto
Subinterfaces of
Iterable
in
javax.xml.crypto
Modifier and Type
Interface
Description
interface
NodeSetData
<T>
An abstract representation of a
Data
type containing a
 node-set.
Uses of
Iterable
in
javax.xml.xpath
Subinterfaces of
Iterable
in
javax.xml.xpath
Modifier and Type
Interface
Description
interface
XPathNodes
XPathNodes represents a set of nodes selected by a location path as specified
 in
XML Path Language (XPath)
 Version 1.0, 3.3 Node-sets
.
Uses of
Iterable
in
jdk.dynalink.linker.support
Methods in
jdk.dynalink.linker.support
with parameters of type
Iterable
Modifier and Type
Method
Description
static
List
<
GuardingDynamicLinker
>
CompositeTypeBasedGuardingDynamicLinker.
optimize
(
Iterable
<? extends
GuardingDynamicLinker
> linkers)
Optimizes a list of type-based linkers.
Constructors in
jdk.dynalink.linker.support
with parameters of type
Iterable
Modifier
Constructor
Description
CompositeGuardingDynamicLinker
(
Iterable
<? extends
GuardingDynamicLinker
> linkers)
Creates a new composite linker.
CompositeTypeBasedGuardingDynamicLinker
(
Iterable
<? extends
TypeBasedGuardingDynamicLinker
> linkers)
Creates a new composite type-based linker.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.