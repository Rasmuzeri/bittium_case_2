Uses of Class java.lang.Double (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Class
java.lang.Double
Packages that use
Double
Package
Description
java.lang
Provides classes that are fundamental to the design of the Java
 programming language.
java.util
Contains the collections framework, some internationalization support classes,
 a service loader, properties, random number generation, string parsing
 and scanning classes, base64 encoding and decoding, a bit array, and
 several miscellaneous utility classes.
java.util.stream
Classes to support functional-style operations on streams of elements, such
 as map-reduce transformations on collections.
javax.management.openmbean
Provides the open data types and Open MBean descriptor classes.
jdk.incubator.vector
Incubating Feature.
Will be removed in a future release.
Uses of
Double
in
java.lang
Fields in
java.lang
with type parameters of type
Double
Modifier and Type
Field
Description
static final
Class
<
Double
>
Double.
TYPE
The
Class
instance representing the primitive type
double
.
Methods in
java.lang
that return
Double
Modifier and Type
Method
Description
Double
Double.
resolveConstantDesc
(
MethodHandles.Lookup
lookup)
Resolves this instance as a
ConstantDesc
, the result of which is
 the instance itself.
static
Double
Double.
valueOf
(double d)
Returns a
Double
instance representing the specified
double
value.
static
Double
Double.
valueOf
(
String
s)
Returns a
Double
object holding the
double
value represented by the argument string
s
.
Methods in
java.lang
that return types with arguments of type
Double
Modifier and Type
Method
Description
Optional
<
Double
>
Double.
describeConstable
()
Returns an
Optional
containing the nominal descriptor for this
 instance, which is the instance itself.
Methods in
java.lang
with parameters of type
Double
Modifier and Type
Method
Description
int
Double.
compareTo
(
Double
anotherDouble)
Compares two
Double
objects numerically.
Uses of
Double
in
java.util
Methods in
java.util
that return
Double
Modifier and Type
Method
Description
default
Double
PrimitiveIterator.OfDouble.
next
()
Returns the next element in the iteration.
Method parameters in
java.util
with type arguments of type
Double
Modifier and Type
Method
Description
default void
PrimitiveIterator.OfDouble.
forEachRemaining
(
Consumer
<? super
Double
> action)
Performs the given action for each remaining element until all elements
 have been processed or the action throws an exception.
default void
Spliterator.OfDouble.
forEachRemaining
(
Consumer
<? super
Double
> action)
Performs the given action for each remaining element, sequentially in
 the current thread, until all elements have been processed or the action
 throws an exception.
default boolean
Spliterator.OfDouble.
tryAdvance
(
Consumer
<? super
Double
> action)
If a remaining element exists: performs the given action on it,
 returning
true
; else returns
false
.
Uses of
Double
in
java.util.stream
Methods in
java.util.stream
that return types with arguments of type
Double
Modifier and Type
Method
Description
static <T>
Collector
<T,
?,
Double
>
Collectors.
averagingDouble
(
ToDoubleFunction
<? super T> mapper)
Returns a
Collector
that produces the arithmetic mean of a double-valued
 function applied to the input elements.
static <T>
Collector
<T,
?,
Double
>
Collectors.
averagingInt
(
ToIntFunction
<? super T> mapper)
Returns a
Collector
that produces the arithmetic mean of an integer-valued
 function applied to the input elements.
static <T>
Collector
<T,
?,
Double
>
Collectors.
averagingLong
(
ToLongFunction
<? super T> mapper)
Returns a
Collector
that produces the arithmetic mean of a long-valued
 function applied to the input elements.
Stream
<
Double
>
DoubleStream.
boxed
()
Returns a
Stream
consisting of the elements of this stream,
 boxed to
Double
.
static <T>
Collector
<T,
?,
Double
>
Collectors.
summingDouble
(
ToDoubleFunction
<? super T> mapper)
Returns a
Collector
that produces the sum of a double-valued
 function applied to the input elements.
Uses of
Double
in
javax.management.openmbean
Fields in
javax.management.openmbean
with type parameters of type
Double
Modifier and Type
Field
Description
static final
SimpleType
<
Double
>
SimpleType.
DOUBLE
The
SimpleType
instance describing values whose
 Java class name is
java.lang.Double
.
Uses of
Double
in
jdk.incubator.vector
Fields in
jdk.incubator.vector
with type parameters of type
Double
Modifier and Type
Field
Description
static final
VectorOperators.Conversion
<
Byte
,
Double
>
VectorOperators.
B2D
Convert
byteVal
to
(double)byteVal
.
static final
VectorOperators.Conversion
<
Double
,
Byte
>
VectorOperators.
D2B
Convert
doubleVal
to
(byte)doubleVal
.
static final
VectorOperators.Conversion
<
Double
,
Float
>
VectorOperators.
D2F
Convert
doubleVal
to
(float)doubleVal
.
static final
VectorOperators.Conversion
<
Double
,
Integer
>
VectorOperators.
D2I
Convert
doubleVal
to
(int)doubleVal
.
static final
VectorOperators.Conversion
<
Double
,
Long
>
VectorOperators.
D2L
Convert
doubleVal
to
(long)doubleVal
.
static final
VectorOperators.Conversion
<
Double
,
Short
>
VectorOperators.
D2S
Convert
doubleVal
to
(short)doubleVal
.
static final
VectorOperators.Conversion
<
Float
,
Double
>
VectorOperators.
F2D
Convert
floatVal
to
(double)floatVal
.
static final
VectorOperators.Conversion
<
Integer
,
Double
>
VectorOperators.
I2D
Convert
intVal
to
(double)intVal
.
static final
VectorOperators.Conversion
<
Long
,
Double
>
VectorOperators.
L2D
Convert
longVal
to
(double)longVal
.
static final
VectorOperators.Conversion
<
Double
,
Long
>
VectorOperators.
REINTERPRET_D2L
Reinterpret bits of
doubleVal
as
long
.
static final
VectorOperators.Conversion
<
Long
,
Double
>
VectorOperators.
REINTERPRET_L2D
Reinterpret bits of
longVal
as
double
.
static final
VectorOperators.Conversion
<
Short
,
Double
>
VectorOperators.
S2D
Convert
shortVal
to
(double)shortVal
.
static final
VectorSpecies
<
Double
>
DoubleVector.
SPECIES_128
Species representing
DoubleVector
s of
VectorShape.S_128_BIT
.
static final
VectorSpecies
<
Double
>
DoubleVector.
SPECIES_256
Species representing
DoubleVector
s of
VectorShape.S_256_BIT
.
static final
VectorSpecies
<
Double
>
DoubleVector.
SPECIES_512
Species representing
DoubleVector
s of
VectorShape.S_512_BIT
.
static final
VectorSpecies
<
Double
>
DoubleVector.
SPECIES_64
Species representing
DoubleVector
s of
VectorShape.S_64_BIT
.
static final
VectorSpecies
<
Double
>
DoubleVector.
SPECIES_MAX
Species representing
DoubleVector
s of
VectorShape.S_Max_BIT
.
static final
VectorSpecies
<
Double
>
DoubleVector.
SPECIES_PREFERRED
Preferred species for
DoubleVector
s.
Methods in
jdk.incubator.vector
that return types with arguments of type
Double
Modifier and Type
Method
Description
abstract
VectorMask
<
Double
>
DoubleVector.
compare
(
VectorOperators.Comparison
op,
 double e)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation.
final
VectorMask
<
Double
>
DoubleVector.
compare
(
VectorOperators.Comparison
op,
 double e,
VectorMask
<
Double
> m)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
abstract
VectorMask
<
Double
>
DoubleVector.
compare
(
VectorOperators.Comparison
op,
 long e)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation.
final
VectorMask
<
Double
>
DoubleVector.
compare
(
VectorOperators.Comparison
op,
 long e,
VectorMask
<
Double
> m)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
abstract
VectorMask
<
Double
>
DoubleVector.
compare
(
VectorOperators.Comparison
op,
Vector
<
Double
> v)
Tests this vector by comparing it with another input vector,
 according to the given comparison operation.
final
VectorMask
<
Double
>
DoubleVector.
eq
(double e)
Tests if this vector is equal to an input scalar.
final
VectorMask
<
Double
>
DoubleVector.
eq
(
Vector
<
Double
> v)
Tests if this vector is equal to another input vector.
final
VectorMask
<
Double
>
DoubleVector.
lt
(double e)
Tests if this vector is less than an input scalar.
final
VectorMask
<
Double
>
DoubleVector.
lt
(
Vector
<
Double
> v)
Tests if this vector is less than another input vector.
abstract
VectorMask
<
Double
>
DoubleVector.
test
(
VectorOperators.Test
op)
Tests the lanes of this vector
 according to the given operation.
abstract
VectorMask
<
Double
>
DoubleVector.
test
(
VectorOperators.Test
op,
VectorMask
<
Double
> m)
Test selected lanes of this vector,
 according to the given operation.
Method parameters in
jdk.incubator.vector
with type arguments of type
Double
Modifier and Type
Method
Description
final
DoubleVector
DoubleVector.
add
(double e,
VectorMask
<
Double
> m)
Adds this vector to the broadcast of an input scalar,
 selecting lane elements controlled by a mask.
final
DoubleVector
DoubleVector.
add
(
Vector
<
Double
> v)
Adds this vector to a second input vector.
final
DoubleVector
DoubleVector.
add
(
Vector
<
Double
> v,
VectorMask
<
Double
> m)
Adds this vector to a second input vector, selecting lanes
 under the control of a mask.
final
DoubleVector
DoubleVector.
add
(
Vector
<
Double
> v,
VectorMask
<
Double
> m)
Adds this vector to a second input vector, selecting lanes
 under the control of a mask.
final
DoubleVector
DoubleVector.
blend
(double e,
VectorMask
<
Double
> m)
Replaces selected lanes of this vector with
 a scalar value
 under the control of a mask.
final
DoubleVector
DoubleVector.
blend
(long e,
VectorMask
<
Double
> m)
Replaces selected lanes of this vector with
 a scalar value
 under the control of a mask.
abstract
DoubleVector
DoubleVector.
blend
(
Vector
<
Double
> v,
VectorMask
<
Double
> m)
Replaces selected lanes of this vector with
 corresponding lanes from a second input vector
 under the control of a mask.
abstract
DoubleVector
DoubleVector.
blend
(
Vector
<
Double
> v,
VectorMask
<
Double
> m)
Replaces selected lanes of this vector with
 corresponding lanes from a second input vector
 under the control of a mask.
static
DoubleVector
DoubleVector.
broadcast
(
VectorSpecies
<
Double
> species,
 double e)
Returns a vector of the given species
 where all lane elements are set to
 the primitive value
e
.
static
DoubleVector
DoubleVector.
broadcast
(
VectorSpecies
<
Double
> species,
 long e)
Returns a vector of the given species
 where all lane elements are set to
 the primitive value
e
.
final
VectorMask
<
Double
>
DoubleVector.
compare
(
VectorOperators.Comparison
op,
 double e,
VectorMask
<
Double
> m)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
final
VectorMask
<
Double
>
DoubleVector.
compare
(
VectorOperators.Comparison
op,
 long e,
VectorMask
<
Double
> m)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
abstract
VectorMask
<
Double
>
DoubleVector.
compare
(
VectorOperators.Comparison
op,
Vector
<
Double
> v)
Tests this vector by comparing it with another input vector,
 according to the given comparison operation.
abstract
DoubleVector
DoubleVector.
compress
(
VectorMask
<
Double
> m)
Compresses the lane elements of this vector selecting lanes
 under the control of a specific mask.
final
DoubleVector
DoubleVector.
div
(double e,
VectorMask
<
Double
> m)
Divides this vector by the broadcast of an input scalar,
 selecting lane elements controlled by a mask.
final
DoubleVector
DoubleVector.
div
(
Vector
<
Double
> v)
Divides this vector by a second input vector.
final
DoubleVector
DoubleVector.
div
(
Vector
<
Double
> v,
VectorMask
<
Double
> m)
Divides this vector by a second input vector
 under the control of a mask.
final
DoubleVector
DoubleVector.
div
(
Vector
<
Double
> v,
VectorMask
<
Double
> m)
Divides this vector by a second input vector
 under the control of a mask.
final
VectorMask
<
Double
>
DoubleVector.
eq
(
Vector
<
Double
> v)
Tests if this vector is equal to another input vector.
abstract
DoubleVector
DoubleVector.
expand
(
VectorMask
<
Double
> m)
Expands the lane elements of this vector
 under the control of a specific mask.
final
DoubleVector
DoubleVector.
fma
(
Vector
<
Double
> b,
Vector
<
Double
> c)
Multiplies this vector by a second input vector, and sums
 the result with a third.
static
DoubleVector
DoubleVector.
fromArray
(
VectorSpecies
<
Double
> species,
 double[] a,
 int offset)
Loads a vector from an array of type
double[]
starting at an offset.
static
DoubleVector
DoubleVector.
fromArray
(
VectorSpecies
<
Double
> species,
 double[] a,
 int offset,
 int[] indexMap,
 int mapOffset)
Gathers a new vector composed of elements from an array of type
double[]
,
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
static
DoubleVector
DoubleVector.
fromArray
(
VectorSpecies
<
Double
> species,
 double[] a,
 int offset,
 int[] indexMap,
 int mapOffset,
VectorMask
<
Double
> m)
Gathers a new vector composed of elements from an array of type
double[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
static
DoubleVector
DoubleVector.
fromArray
(
VectorSpecies
<
Double
> species,
 double[] a,
 int offset,
 int[] indexMap,
 int mapOffset,
VectorMask
<
Double
> m)
Gathers a new vector composed of elements from an array of type
double[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
static
DoubleVector
DoubleVector.
fromArray
(
VectorSpecies
<
Double
> species,
 double[] a,
 int offset,
VectorMask
<
Double
> m)
Loads a vector from an array of type
double[]
starting at an offset and using a mask.
static
DoubleVector
DoubleVector.
fromArray
(
VectorSpecies
<
Double
> species,
 double[] a,
 int offset,
VectorMask
<
Double
> m)
Loads a vector from an array of type
double[]
starting at an offset and using a mask.
static
DoubleVector
DoubleVector.
fromMemorySegment
(
VectorSpecies
<
Double
> species,
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo)
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment.
static
DoubleVector
DoubleVector.
fromMemorySegment
(
VectorSpecies
<
Double
> species,
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo,
VectorMask
<
Double
> m)
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment
 and using a mask.
static
DoubleVector
DoubleVector.
fromMemorySegment
(
VectorSpecies
<
Double
> species,
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo,
VectorMask
<
Double
> m)
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment
 and using a mask.
final void
DoubleVector.
intoArray
(double[] a,
 int offset,
 int[] indexMap,
 int mapOffset,
VectorMask
<
Double
> m)
Scatters this vector into an array of type
double[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
final void
DoubleVector.
intoArray
(double[] a,
 int offset,
VectorMask
<
Double
> m)
Stores this vector into an array of type
double[]
starting at offset and using a mask.
final void
DoubleVector.
intoMemorySegment
(
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo,
VectorMask
<
Double
> m)
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order and a mask.
final
DoubleVector
DoubleVector.
lanewise
(
VectorOperators.Binary
op,
 double e,
VectorMask
<
Double
> m)
Combines the lane values of this vector
 with the value of a broadcast scalar,
 with selection of lane elements controlled by a mask.
final
DoubleVector
DoubleVector.
lanewise
(
VectorOperators.Binary
op,
 long e,
VectorMask
<
Double
> m)
Combines the corresponding lane values of this vector
 with those of a second input vector,
 with selection of lane elements controlled by a mask.
abstract
DoubleVector
DoubleVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Double
> v)
Combines the corresponding lane values of this vector
 with those of a second input vector.
abstract
DoubleVector
DoubleVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Double
> v,
VectorMask
<
Double
> m)
Combines the corresponding lane values of this vector
 with those of a second input vector,
 with selection of lane elements controlled by a mask.
abstract
DoubleVector
DoubleVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Double
> v,
VectorMask
<
Double
> m)
Combines the corresponding lane values of this vector
 with those of a second input vector,
 with selection of lane elements controlled by a mask.
final
DoubleVector
DoubleVector.
lanewise
(
VectorOperators.Ternary
op,
 double e1,
 double e2,
VectorMask
<
Double
> m)
Combines the lane values of this vector
 with the values of two broadcast scalars,
 with selection of lane elements controlled by a mask.
final
DoubleVector
DoubleVector.
lanewise
(
VectorOperators.Ternary
op,
 double e1,
Vector
<
Double
> v2)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar.
final
DoubleVector
DoubleVector.
lanewise
(
VectorOperators.Ternary
op,
 double e1,
Vector
<
Double
> v2,
VectorMask
<
Double
> m)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar,
 with selection of lane elements controlled by a mask.
final
DoubleVector
DoubleVector.
lanewise
(
VectorOperators.Ternary
op,
 double e1,
Vector
<
Double
> v2,
VectorMask
<
Double
> m)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar,
 with selection of lane elements controlled by a mask.
final
DoubleVector
DoubleVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Double
> v1,
 double e2)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar.
final
DoubleVector
DoubleVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Double
> v1,
 double e2,
VectorMask
<
Double
> m)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar,
 with selection of lane elements controlled by a mask.
final
DoubleVector
DoubleVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Double
> v1,
 double e2,
VectorMask
<
Double
> m)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar,
 with selection of lane elements controlled by a mask.
abstract
DoubleVector
DoubleVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Double
> v1,
Vector
<
Double
> v2)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector.
abstract
DoubleVector
DoubleVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Double
> v1,
Vector
<
Double
> v2,
VectorMask
<
Double
> m)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector,
 with selection of lane elements controlled by a mask.
abstract
DoubleVector
DoubleVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Double
> v1,
Vector
<
Double
> v2,
VectorMask
<
Double
> m)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector,
 with selection of lane elements controlled by a mask.
abstract
DoubleVector
DoubleVector.
lanewise
(
VectorOperators.Unary
op,
VectorMask
<
Double
> m)
Operates on the lane values of this vector,
 with selection of lane elements controlled by a mask.
final
VectorMask
<
Double
>
DoubleVector.
lt
(
Vector
<
Double
> v)
Tests if this vector is less than another input vector.
final
DoubleVector
DoubleVector.
max
(
Vector
<
Double
> v)
Computes the larger of this vector and a second input vector.
final
DoubleVector
DoubleVector.
min
(
Vector
<
Double
> v)
Computes the smaller of this vector and a second input vector.
final
DoubleVector
DoubleVector.
mul
(double e,
VectorMask
<
Double
> m)
Multiplies this vector by the broadcast of an input scalar,
 selecting lane elements controlled by a mask.
final
DoubleVector
DoubleVector.
mul
(
Vector
<
Double
> v)
Multiplies this vector by a second input vector.
final
DoubleVector
DoubleVector.
mul
(
Vector
<
Double
> v,
VectorMask
<
Double
> m)
Multiplies this vector by a second input vector
 under the control of a mask.
final
DoubleVector
DoubleVector.
mul
(
Vector
<
Double
> v,
VectorMask
<
Double
> m)
Multiplies this vector by a second input vector
 under the control of a mask.
final
DoubleVector
DoubleVector.
pow
(
Vector
<
Double
> b)
Raises this vector to the power of a second input vector.
abstract
DoubleVector
DoubleVector.
rearrange
(
VectorShuffle
<
Double
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle.
abstract
DoubleVector
DoubleVector.
rearrange
(
VectorShuffle
<
Double
> s,
Vector
<
Double
> v)
Rearranges the lane elements of two vectors, selecting lanes
 under the control of a specific shuffle, using both normal and
 exceptional indexes in the shuffle to steer data.
abstract
DoubleVector
DoubleVector.
rearrange
(
VectorShuffle
<
Double
> s,
Vector
<
Double
> v)
Rearranges the lane elements of two vectors, selecting lanes
 under the control of a specific shuffle, using both normal and
 exceptional indexes in the shuffle to steer data.
abstract
DoubleVector
DoubleVector.
rearrange
(
VectorShuffle
<
Double
> s,
VectorMask
<
Double
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle and a mask.
abstract
DoubleVector
DoubleVector.
rearrange
(
VectorShuffle
<
Double
> s,
VectorMask
<
Double
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle and a mask.
abstract double
DoubleVector.
reduceLanes
(
VectorOperators.Associative
op,
VectorMask
<
Double
> m)
Returns a value accumulated from selected lanes of this vector,
 controlled by a mask.
abstract
DoubleVector
DoubleVector.
selectFrom
(
Vector
<
Double
> v)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector
v
.
abstract
DoubleVector
DoubleVector.
selectFrom
(
Vector
<
Double
> s,
VectorMask
<
Double
> m)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector, under the control
 of a mask.
abstract
DoubleVector
DoubleVector.
selectFrom
(
Vector
<
Double
> s,
VectorMask
<
Double
> m)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector, under the control
 of a mask.
abstract
DoubleVector
DoubleVector.
slice
(int origin,
Vector
<
Double
> v1)
Slices a segment of adjacent lanes, starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
final
DoubleVector
DoubleVector.
slice
(int origin,
Vector
<
Double
> w,
VectorMask
<
Double
> m)
Slices a segment of adjacent lanes
 under the control of a mask,
 starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
final
DoubleVector
DoubleVector.
slice
(int origin,
Vector
<
Double
> w,
VectorMask
<
Double
> m)
Slices a segment of adjacent lanes
 under the control of a mask,
 starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
final
DoubleVector
DoubleVector.
sub
(double e,
VectorMask
<
Double
> m)
Subtracts an input scalar from this vector
 under the control of a mask.
final
DoubleVector
DoubleVector.
sub
(
Vector
<
Double
> v)
Subtracts a second input vector from this vector.
final
DoubleVector
DoubleVector.
sub
(
Vector
<
Double
> v,
VectorMask
<
Double
> m)
Subtracts a second input vector from this vector
 under the control of a mask.
final
DoubleVector
DoubleVector.
sub
(
Vector
<
Double
> v,
VectorMask
<
Double
> m)
Subtracts a second input vector from this vector
 under the control of a mask.
abstract
VectorMask
<
Double
>
DoubleVector.
test
(
VectorOperators.Test
op,
VectorMask
<
Double
> m)
Test selected lanes of this vector,
 according to the given operation.
abstract
DoubleVector
DoubleVector.
unslice
(int origin,
Vector
<
Double
> w,
 int part)
Reverses a
slice()
, inserting
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
abstract
DoubleVector
DoubleVector.
unslice
(int origin,
Vector
<
Double
> w,
 int part,
VectorMask
<
Double
> m)
Reverses a
slice()
, inserting
 (under the control of a mask)
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
abstract
DoubleVector
DoubleVector.
unslice
(int origin,
Vector
<
Double
> w,
 int part,
VectorMask
<
Double
> m)
Reverses a
slice()
, inserting
 (under the control of a mask)
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
static
DoubleVector
DoubleVector.
zero
(
VectorSpecies
<
Double
> species)
Returns a vector of the given species
 where all lane elements are set to
 zero, the default primitive value.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.