Uses of Class java.lang.Class (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Class
java.lang.Class
Packages that use
Class
Package
Description
com.sun.java.accessibility.util
Provides a collection of interfaces and classes that compose the Java Accessibility
 Utilities.
com.sun.source.tree
Provides interfaces to represent source code as abstract syntax
 trees (AST).
java.awt
Contains all of the classes for creating user interfaces and for painting
 graphics and images.
java.awt.datatransfer
Provides interfaces and classes for transferring data between and within
 applications.
java.awt.dnd
Drag and Drop is a direct manipulation gesture found in many Graphical User
 Interface systems that provides a mechanism to transfer information between
 two entities logically associated with presentation elements in the GUI.
java.awt.image.renderable
Provides classes and interfaces for producing rendering-independent images.
java.beans
Contains classes related to developing
beans
-- components based on
 the JavaBeans architecture.
java.beans.beancontext
Provides classes and interfaces relating to bean context.
java.io
Provides for system input and output through data streams,
 serialization and the file system.
java.lang
Provides classes that are fundamental to the design of the Java
 programming language.
java.lang.annotation
Provides library support for the Java programming language
 annotation facility.
java.lang.constant
Classes and interfaces to represent
nominal descriptors
for run-time
 entities such as classes or method handles, and classfile entities such as
 constant pool entries or
invokedynamic
call sites.
java.lang.foreign
Provides low-level access to memory and functions outside the Java runtime.
java.lang.instrument
Provides services that allow Java programming language agents to instrument
 programs running on the Java Virtual Machine (JVM).
java.lang.invoke
The
java.lang.invoke
package provides low-level primitives for interacting
 with the Java Virtual Machine.
java.lang.management
Provides the management interfaces for monitoring and management of the
Java virtual machine and other components in the Java runtime.
java.lang.reflect
Provides classes and interfaces for obtaining reflective information about
 classes and objects.
java.lang.runtime
The
java.lang.runtime
package provides low-level runtime support
 for the Java language.
java.net
Provides the classes for implementing networking applications.
java.nio.file
Defines interfaces and classes for the Java virtual machine to access files,
 file attributes, and file systems.
java.nio.file.spi
Service-provider classes for the
java.nio.file
package.
java.rmi.server
Provides classes and interfaces for supporting the server side of RMI.
java.security
Provides the classes and interfaces for the security framework.
java.sql
Provides the API for accessing and processing data stored in a
 data source (usually a relational database) using the
 Java programming language.
java.util
Contains the collections framework, some internationalization support classes,
 a service loader, properties, random number generation, string parsing
 and scanning classes, base64 encoding and decoding, a bit array, and
 several miscellaneous utility classes.
java.util.concurrent.atomic
A small toolkit of classes that support lock-free thread-safe
 programming on single variables.
java.util.prefs
This package allows applications to store and retrieve user and system
 preference and configuration data.
javax.annotation.processing
Facilities for declaring annotation processors and for
 allowing annotation processors to communicate with an annotation processing
 tool environment.
javax.crypto
Provides the classes and interfaces for cryptographic
 operations.
javax.imageio.metadata
A package of the Java Image I/O API dealing with reading and writing
 metadata.
javax.imageio.spi
A package of the Java Image I/O API containing the plug-in interfaces for
 readers, writers, transcoders, and streams, and a runtime registry.
javax.lang.model
Types and hierarchies of packages comprising a Java language model, a model of the declarations and types of the Java
 programming language.
javax.lang.model.element
Interfaces used to model elements of the Java programming language.
javax.lang.model.type
Interfaces used to model Java programming language types.
javax.management
Provides the core classes for the Java Management Extensions.
javax.management.loading
Provides the classes which implement advanced dynamic
        loading.
javax.management.openmbean
Provides the open data types and Open MBean descriptor classes.
javax.naming.spi
Provides the means for dynamically plugging in support for accessing
naming and directory services through the
javax.naming
and related packages.
javax.print
Provides the principal classes and interfaces for the Java Print
 Service API.
javax.print.attribute
Provides classes and interfaces that describe the types of Java Print
 Service attributes and how they can be collected into attribute sets.
javax.print.attribute.standard
Package
javax.print.attribute.standard
contains classes for specific
 printing attributes.
javax.script
The scripting API consists of interfaces and classes that define
Java Scripting Engines and provides
a framework for their use in Java applications.
javax.security.auth
This package provides a framework for authentication and
 authorization.
javax.sound.midi
Provides interfaces and classes for I/O, sequencing, and synthesis of MIDI
 (Musical Instrument Digital Interface) data.
javax.sound.sampled
Provides interfaces and classes for capture, processing, and playback of
 sampled audio data.
javax.sql
Provides the API for server side data source access and processing from
 the Java programming language.
javax.sql.rowset
Standard interfaces and base classes for JDBC
RowSet
implementations.
javax.sql.rowset.serial
Provides utility classes to allow serializable mappings between SQL types
 and data types in the Java programming language.
javax.swing
Provides a set of "lightweight" (all-Java language) components
 that, to the maximum degree possible, work the same on all platforms.
javax.swing.event
Provides for events fired by Swing components.
javax.swing.plaf.synth
Synth is a skinnable look and feel in which all painting is delegated.
javax.swing.table
Provides classes and interfaces for dealing with
javax.swing.JTable
.
javax.swing.text
Provides classes and interfaces that deal with editable and noneditable text
 components.
javax.swing.tree
Provides classes and interfaces for dealing with
javax.swing.JTree
.
javax.tools
Provides interfaces for tools which can be invoked from a program,
 for example, compilers.
javax.xml.xpath
Provides an
object-model neutral
API for the
 evaluation of XPath expressions and access to the evaluation
 environment.
jdk.dynalink.beans
Contains the linker for ordinary Java objects.
jdk.dynalink.linker
Contains interfaces and classes needed by language runtimes to implement
 their own language-specific object models and type conversions.
jdk.dynalink.linker.support
Contains classes that make it more convenient for language runtimes to
 implement their own language-specific object models and type conversions
 by providing basic implementations of some classes as well as various
 utilities.
jdk.incubator.vector
Incubating Feature.
Will be removed in a future release.
jdk.jfr
This package provides classes to create events and control Flight Recorder.
jdk.jfr.consumer
This package contains classes for consuming Flight Recorder data.
jdk.jshell.execution
Provides implementation support for building JShell execution engines.
jdk.net
Platform specific socket options for the
java.net
and
java.nio.channels
socket classes.
Uses of
Class
in
com.sun.java.accessibility.util
Methods in
com.sun.java.accessibility.util
that return
Class
Modifier and Type
Method
Description
protected static
Class
<?>
Translator.
getTranslatorClass
(
Class
<?> c)
Find a translator for this class.
Methods in
com.sun.java.accessibility.util
with parameters of type
Class
Modifier and Type
Method
Description
void
AccessibilityListenerList.
add
(
Class
<? extends
EventListener
> t,
EventListener
l)
Add the listener as a listener of the specified type.
int
AccessibilityListenerList.
getListenerCount
(
Class
<? extends
EventListener
> t)
Return the total number of listeners of the supplied type
 for this listener list.
protected static
Class
<?>
Translator.
getTranslatorClass
(
Class
<?> c)
Find a translator for this class.
void
AccessibilityListenerList.
remove
(
Class
<? extends
EventListener
> t,
EventListener
l)
Remove the listener as a listener of the specified type.
Uses of
Class
in
com.sun.source.tree
Methods in
com.sun.source.tree
that return
Class
Modifier and Type
Method
Description
Class
<? extends
Tree
>
Tree.Kind.
asInterface
()
Returns the associated interface type that uses this kind.
Uses of
Class
in
java.awt
Methods in
java.awt
with parameters of type
Class
Modifier and Type
Method
Description
<T extends
DragGestureRecognizer
>
T
Toolkit.
createDragGestureRecognizer
(
Class
<T> abstractRecognizerClass,
DragSource
ds,
Component
c,
 int srcActions,
DragGestureListener
dgl)
Creates a concrete, platform dependent, subclass of the abstract
 DragGestureRecognizer class requested, and associates it with the
 DragSource, Component and DragGestureListener specified.
static <T extends
EventListener
>
T[]
AWTEventMulticaster.
getListeners
(
EventListener
l,
Class
<T> listenerType)
Returns an array of all the objects chained as
Foo
Listener
s by the specified
java.util.EventListener
.
<T extends
EventListener
>
T[]
Button.
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered
 as
Foo
Listener
s
 upon this
Button
.
<T extends
EventListener
>
T[]
Checkbox.
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered
 as
Foo
Listener
s
 upon this
Checkbox
.
<T extends
EventListener
>
T[]
CheckboxMenuItem.
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered
 as
Foo
Listener
s
 upon this
CheckboxMenuItem
.
<T extends
EventListener
>
T[]
Choice.
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered
 as
Foo
Listener
s
 upon this
Choice
.
<T extends
EventListener
>
T[]
Component.
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered
 as
Foo
Listener
s
 upon this
Component
.
<T extends
EventListener
>
T[]
Container.
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered
 as
Foo
Listener
s
 upon this
Container
.
<T extends
EventListener
>
T[]
List.
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered
 as
Foo
Listener
s
 upon this
List
.
<T extends
EventListener
>
T[]
MenuItem.
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered
 as
Foo
Listener
s
 upon this
MenuItem
.
<T extends
EventListener
>
T[]
Scrollbar.
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered
 as
Foo
Listener
s
 upon this
Scrollbar
.
<T extends
EventListener
>
T[]
TextComponent.
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered
 as
Foo
Listener
s
 upon this
TextComponent
.
<T extends
EventListener
>
T[]
TextField.
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered
 as
Foo
Listener
s
 upon this
TextField
.
<T extends
EventListener
>
T[]
Window.
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered
 as
Foo
Listener
s
 upon this
Window
.
protected static void
AWTKeyStroke.
registerSubclass
(
Class
<?> subclass)
Deprecated.
Uses of
Class
in
java.awt.datatransfer
Methods in
java.awt.datatransfer
that return
Class
Modifier and Type
Method
Description
final
Class
<?>
DataFlavor.
getDefaultRepresentationClass
()
Returns the default representation class.
Class
<?>
DataFlavor.
getRepresentationClass
()
Returns the
Class
which objects supporting this
DataFlavor
will return when this
DataFlavor
is requested.
protected static final
Class
<?>
DataFlavor.
tryToLoadClass
(
String
className,
ClassLoader
fallback)
Tries to load a class from: the bootstrap loader, the system loader, the
 context loader (if one is present) and finally the loader specified.
Constructors in
java.awt.datatransfer
with parameters of type
Class
Modifier
Constructor
Description
DataFlavor
(
Class
<?> representationClass,
String
humanPresentableName)
Constructs a
DataFlavor
that represents a Java class.
Uses of
Class
in
java.awt.dnd
Methods in
java.awt.dnd
with parameters of type
Class
Modifier and Type
Method
Description
<T extends
DragGestureRecognizer
>
T
DragSource.
createDragGestureRecognizer
(
Class
<T> recognizerAbstractClass,
Component
c,
 int actions,
DragGestureListener
dgl)
Creates a new
DragGestureRecognizer
that implements the specified
 abstract subclass of
DragGestureRecognizer
, and
 sets the specified
Component
and
DragGestureListener
on
 the newly created object.
<T extends
EventListener
>
T[]
DragSource.
getListeners
(
Class
<T> listenerType)
Gets all the objects currently registered as
Foo
Listener
s upon this
DragSource
.
Uses of
Class
in
java.awt.image.renderable
Methods in
java.awt.image.renderable
that return
Class
Modifier and Type
Method
Description
Class
<?>[]
ParameterBlock.
getParamClasses
()
Returns an array of Class objects describing the types
 of the parameters.
Uses of
Class
in
java.beans
Methods in
java.beans
that return
Class
Modifier and Type
Method
Description
Class
<?>
BeanDescriptor.
getBeanClass
()
Gets the bean's Class object.
Class
<?>
BeanDescriptor.
getCustomizerClass
()
Gets the Class object for the bean's customizer.
Class
<?>
IndexedPropertyDescriptor.
getIndexedPropertyType
()
Returns the Java type info for the indexed property.
Class
<?>
EventSetDescriptor.
getListenerType
()
Gets the
Class
object for the target interface.
Class
<?>
PropertyDescriptor.
getPropertyEditorClass
()
Gets any explicit PropertyEditor Class that has been registered
 for this property.
Class
<?>
PropertyDescriptor.
getPropertyType
()
Returns the Java type info for the property.
Methods in
java.beans
with parameters of type
Class
Modifier and Type
Method
Description
static <T> T
EventHandler.
create
(
Class
<T> listenerInterface,
Object
target,
String
action)
Creates an implementation of
listenerInterface
in which
all
of the methods in the listener interface apply
 the handler's
action
to the
target
.
static <T> T
EventHandler.
create
(
Class
<T> listenerInterface,
Object
target,
String
action,
String
eventPropertyName)
/**
 Creates an implementation of
listenerInterface
in which
all
of the methods pass the value of the event
 expression,
eventPropertyName
, to the final method in the
 statement,
action
, which is applied to the
target
.
static <T> T
EventHandler.
create
(
Class
<T> listenerInterface,
Object
target,
String
action,
String
eventPropertyName,
String
listenerMethodName)
Creates an implementation of
listenerInterface
in which
 the method named
listenerMethodName
passes the value of the event expression,
eventPropertyName
,
 to the final method in the statement,
action
, which
 is applied to the
target
.
static
PropertyEditor
PropertyEditorManager.
findEditor
(
Class
<?> targetType)
Locate a value editor for a given target type.
static void
Introspector.
flushFromCaches
(
Class
<?> clz)
Flush the Introspector's internal cached information for a given class.
static
BeanInfo
Introspector.
getBeanInfo
(
Class
<?> beanClass)
Introspect on a Java Bean and learn about all its properties, exposed
 methods, and events.
static
BeanInfo
Introspector.
getBeanInfo
(
Class
<?> beanClass,
 int flags)
Introspect on a Java bean and learn about all its properties, exposed
 methods, and events, subject to some control flags.
static
BeanInfo
Introspector.
getBeanInfo
(
Class
<?> beanClass,
Class
<?> stopClass)
Introspect on a Java bean and learn all about its properties, exposed
 methods, below a given "stop" point.
static
BeanInfo
Introspector.
getBeanInfo
(
Class
<?> beanClass,
Class
<?> stopClass,
 int flags)
Introspect on a Java Bean and learn about all its properties,
 exposed methods and events, below a given
stopClass
point
 subject to some control
flags
.
static
Object
Beans.
getInstanceOf
(
Object
bean,
Class
<?> targetType)
From a given bean, obtain an object representing a specified
 type view of that source object.
PersistenceDelegate
Encoder.
getPersistenceDelegate
(
Class
<?> type)
Returns the persistence delegate for the given type.
protected void
DefaultPersistenceDelegate.
initialize
(
Class
<?> type,
Object
oldInstance,
Object
newInstance,
Encoder
out)
This default implementation of the
initialize
method assumes
 all state held in objects of this type is exposed via the
 matching pairs of "setter" and "getter" methods in the order
 they are returned by the Introspector.
protected void
PersistenceDelegate.
initialize
(
Class
<?> type,
Object
oldInstance,
Object
newInstance,
Encoder
out)
Produce a series of statements with side effects on
newInstance
so that the new instance becomes
equivalent
to
oldInstance
.
static boolean
Beans.
isInstanceOf
(
Object
bean,
Class
<?> targetType)
Check if a bean can be viewed as a given target type.
static void
PropertyEditorManager.
registerEditor
(
Class
<?> targetType,
Class
<?> editorClass)
Registers an editor class to edit values of the given target class.
void
Encoder.
setPersistenceDelegate
(
Class
<?> type,
PersistenceDelegate
delegate)
Associates the specified persistence delegate with the given type.
void
PropertyDescriptor.
setPropertyEditorClass
(
Class
<?> propertyEditorClass)
Normally PropertyEditors will be found using the PropertyEditorManager.
Constructors in
java.beans
with parameters of type
Class
Modifier
Constructor
Description
BeanDescriptor
(
Class
<?> beanClass)
Create a BeanDescriptor for a bean that doesn't have a customizer.
BeanDescriptor
(
Class
<?> beanClass,
Class
<?> customizerClass)
Create a BeanDescriptor for a bean that has a customizer.
EventSetDescriptor
(
Class
<?> sourceClass,
String
eventSetName,
Class
<?> listenerType,
String
listenerMethodName)
Creates an
EventSetDescriptor
assuming that you are
 following the most simple standard design pattern where a named
 event "fred" is (1) delivered as a call on the single method of
 interface FredListener, (2) has a single argument of type FredEvent,
 and (3) where the FredListener may be registered with a call on an
 addFredListener method of the source component and removed with a
 call on a removeFredListener method.
EventSetDescriptor
(
Class
<?> sourceClass,
String
eventSetName,
Class
<?> listenerType,
String
[] listenerMethodNames,
String
addListenerMethodName,
String
removeListenerMethodName)
Creates an
EventSetDescriptor
from scratch using
 string names.
EventSetDescriptor
(
Class
<?> sourceClass,
String
eventSetName,
Class
<?> listenerType,
String
[] listenerMethodNames,
String
addListenerMethodName,
String
removeListenerMethodName,
String
getListenerMethodName)
This constructor creates an EventSetDescriptor from scratch using
 string names.
EventSetDescriptor
(
String
eventSetName,
Class
<?> listenerType,
MethodDescriptor
[] listenerMethodDescriptors,
Method
addListenerMethod,
Method
removeListenerMethod)
Creates an
EventSetDescriptor
from scratch using
java.lang.reflect.MethodDescriptor
and
java.lang.Class
objects.
EventSetDescriptor
(
String
eventSetName,
Class
<?> listenerType,
Method
[] listenerMethods,
Method
addListenerMethod,
Method
removeListenerMethod)
Creates an
EventSetDescriptor
from scratch using
java.lang.reflect.Method
and
java.lang.Class
objects.
EventSetDescriptor
(
String
eventSetName,
Class
<?> listenerType,
Method
[] listenerMethods,
Method
addListenerMethod,
Method
removeListenerMethod,
Method
getListenerMethod)
This constructor creates an EventSetDescriptor from scratch using
 java.lang.reflect.Method and java.lang.Class objects.
IndexedPropertyDescriptor
(
String
propertyName,
Class
<?> beanClass)
This constructor constructs an IndexedPropertyDescriptor for a property
 that follows the standard Java conventions by having getFoo and setFoo
 accessor methods, for both indexed access and array access.
IndexedPropertyDescriptor
(
String
propertyName,
Class
<?> beanClass,
String
readMethodName,
String
writeMethodName,
String
indexedReadMethodName,
String
indexedWriteMethodName)
This constructor takes the name of a simple property, and method
 names for reading and writing the property, both indexed
 and non-indexed.
PropertyDescriptor
(
String
propertyName,
Class
<?> beanClass)
Constructs a PropertyDescriptor for a property that follows
 the standard Java convention by having getFoo and setFoo
 accessor methods.
PropertyDescriptor
(
String
propertyName,
Class
<?> beanClass,
String
readMethodName,
String
writeMethodName)
This constructor takes the name of a simple property, and method
 names for reading and writing the property.
Uses of
Class
in
java.beans.beancontext
Fields in
java.beans.beancontext
declared as
Class
Modifier and Type
Field
Description
protected
Class
<?>
BeanContextServiceAvailableEvent.
serviceClass
A
Class
reference to the newly available service
protected
Class
<?>
BeanContextServiceRevokedEvent.
serviceClass
A
Class
reference to the service that is being revoked.
Methods in
java.beans.beancontext
that return
Class
Modifier and Type
Method
Description
Class
<?>
BeanContextServiceAvailableEvent.
getServiceClass
()
Gets the service class that is the subject of this notification.
Class
<?>
BeanContextServiceRevokedEvent.
getServiceClass
()
Gets the service class that is the subject of this notification
Methods in
java.beans.beancontext
with parameters of type
Class
Modifier and Type
Method
Description
boolean
BeanContextServices.
addService
(
Class
<?> serviceClass,
BeanContextServiceProvider
serviceProvider)
Adds a service to this BeanContext.
boolean
BeanContextServicesSupport.
addService
(
Class
<?> serviceClass,
BeanContextServiceProvider
bcsp)
add a service
protected boolean
BeanContextServicesSupport.
addService
(
Class
<?> serviceClass,
BeanContextServiceProvider
bcsp,
 boolean fireEvent)
add a service
protected static final boolean
BeanContextSupport.
classEquals
(
Class
<?> first,
Class
<?> second)
Tests to see if two class objects,
 or their names are equal.
protected
BeanContextServicesSupport.BCSSServiceProvider
BeanContextServicesSupport.
createBCSSServiceProvider
(
Class
<?> sc,
BeanContextServiceProvider
bcsp)
subclasses can override this method to create new subclasses of
 BCSSServiceProvider without having to override addService() in
 order to instantiate.
protected final void
BeanContextServicesSupport.
fireServiceAdded
(
Class
<?> serviceClass)
Fires a
BeanContextServiceEvent
notifying of a new service.
protected final void
BeanContextServicesSupport.
fireServiceRevoked
(
Class
<?> serviceClass,
 boolean revokeNow)
Fires a
BeanContextServiceRevokedEvent
indicating that a particular service is
 no longer available.
Iterator
<?>
BeanContextServiceProvider.
getCurrentServiceSelectors
(
BeanContextServices
bcs,
Class
<?> serviceClass)
Invoked by
BeanContextServices
, this method
 gets the current service selectors for the specified service.
Iterator
<?>
BeanContextServices.
getCurrentServiceSelectors
(
Class
<?> serviceClass)
Gets the list of service dependent service parameters
 (Service Selectors) for the specified service, by
 calling getCurrentServiceSelectors() on the
 underlying BeanContextServiceProvider.
Iterator
<?>
BeanContextServicesSupport.BCSSProxyServiceProvider.
getCurrentServiceSelectors
(
BeanContextServices
bcs,
Class
<?> serviceClass)
Iterator
<?>
BeanContextServicesSupport.
getCurrentServiceSelectors
(
Class
<?> serviceClass)
Object
BeanContextServiceProvider.
getService
(
BeanContextServices
bcs,
Object
requestor,
Class
<?> serviceClass,
Object
serviceSelector)
Invoked by
BeanContextServices
, this method
 requests an instance of a
 service from this
BeanContextServiceProvider
.
Object
BeanContextServices.
getService
(
BeanContextChild
child,
Object
requestor,
Class
<?> serviceClass,
Object
serviceSelector,
BeanContextServiceRevokedListener
bcsrl)
A
BeanContextChild
, or any arbitrary object
 associated with a
BeanContextChild
, may obtain
 a reference to a currently registered service from its
 nesting
BeanContextServices
via invocation of this method.
Object
BeanContextServicesSupport.BCSSProxyServiceProvider.
getService
(
BeanContextServices
bcs,
Object
requestor,
Class
<?> serviceClass,
Object
serviceSelector)
Object
BeanContextServicesSupport.
getService
(
BeanContextChild
child,
Object
requestor,
Class
<?> serviceClass,
Object
serviceSelector,
BeanContextServiceRevokedListener
bcsrl)
obtain a service which may be delegated
boolean
BeanContextServices.
hasService
(
Class
<?> serviceClass)
Reports whether or not a given service is
 currently available from this context.
boolean
BeanContextServicesSupport.
hasService
(
Class
<?> serviceClass)
has a service, which may be delegated
boolean
BeanContextServiceRevokedEvent.
isServiceClass
(
Class
<?> service)
Checks this event to determine whether or not
 the service being revoked is of a particular class.
void
BeanContextServices.
revokeService
(
Class
<?> serviceClass,
BeanContextServiceProvider
serviceProvider,
 boolean revokeCurrentServicesNow)
BeanContextServiceProviders wishing to remove
 a currently registered service from this context
 may do so via invocation of this method.
void
BeanContextServicesSupport.
revokeService
(
Class
<?> serviceClass,
BeanContextServiceProvider
bcsp,
 boolean revokeCurrentServicesNow)
remove a service
Constructors in
java.beans.beancontext
with parameters of type
Class
Modifier
Constructor
Description
BeanContextServiceAvailableEvent
(
BeanContextServices
bcs,
Class
<?> sc)
Construct a
BeanContextAvailableServiceEvent
.
BeanContextServiceRevokedEvent
(
BeanContextServices
bcs,
Class
<?> sc,
 boolean invalidate)
Construct a
BeanContextServiceEvent
.
Uses of
Class
in
java.io
Methods in
java.io
that return
Class
Modifier and Type
Method
Description
Class
<?>
ObjectStreamClass.
forClass
()
Return the class in the local VM that this version is mapped to.
Class
<?>
ObjectStreamField.
getType
()
Get the type of the field.
protected
Class
<?>
ObjectInputStream.
resolveClass
(
ObjectStreamClass
desc)
Load the local class equivalent of the specified stream class
 description.
protected
Class
<?>
ObjectInputStream.
resolveProxyClass
(
String
[] interfaces)
Returns a proxy class that implements the interfaces named in a proxy
 class descriptor; subclasses may implement this method to read custom
 data from the stream along with the descriptors for dynamic proxy
 classes, allowing them to use an alternate loading mechanism for the
 interfaces and the proxy class.
Class
<?>
ObjectInputFilter.FilterInfo.
serialClass
()
The class of an object being deserialized.
Methods in
java.io
with parameters of type
Class
Modifier and Type
Method
Description
protected void
ObjectOutputStream.
annotateClass
(
Class
<?> cl)
Subclasses may implement this method to allow class data to be stored in
 the stream.
protected void
ObjectOutputStream.
annotateProxyClass
(
Class
<?> cl)
Subclasses may implement this method to store custom data in the stream
 along with descriptors for dynamic proxy classes.
static
ObjectStreamClass
ObjectStreamClass.
lookup
(
Class
<?> cl)
Find the descriptor for a class that can be serialized.
static
ObjectStreamClass
ObjectStreamClass.
lookupAny
(
Class
<?> cl)
Returns the descriptor for any class, regardless of whether it
 implements
Serializable
.
Method parameters in
java.io
with type arguments of type
Class
Modifier and Type
Method
Description
static
ObjectInputFilter
ObjectInputFilter.
allowFilter
(
Predicate
<
Class
<?>> predicate,
ObjectInputFilter.Status
otherStatus)
Returns a filter that returns
Status.ALLOWED
if the predicate
 on the class is
true
.
static
ObjectInputFilter
ObjectInputFilter.
rejectFilter
(
Predicate
<
Class
<?>> predicate,
ObjectInputFilter.Status
otherStatus)
Returns a filter that returns
Status.REJECTED
if the predicate
 on the class is
true
.
Constructors in
java.io
with parameters of type
Class
Modifier
Constructor
Description
ObjectStreamField
(
String
name,
Class
<?> type)
Create a Serializable field with the specified type.
ObjectStreamField
(
String
name,
Class
<?> type,
 boolean unshared)
Creates an ObjectStreamField representing a serializable field with the
 given name and type.
Uses of
Class
in
java.lang
Fields in
java.lang
declared as
Class
Modifier and Type
Field
Description
static final
Class
<
Boolean
>
Boolean.
TYPE
The Class object representing the primitive type boolean.
static final
Class
<
Byte
>
Byte.
TYPE
The
Class
instance representing the primitive type
byte
.
static final
Class
<
Character
>
Character.
TYPE
The
Class
instance representing the primitive type
char
.
static final
Class
<
Double
>
Double.
TYPE
The
Class
instance representing the primitive type
double
.
static final
Class
<
Float
>
Float.
TYPE
The
Class
instance representing the primitive type
float
.
static final
Class
<
Integer
>
Integer.
TYPE
The
Class
instance representing the primitive type
int
.
static final
Class
<
Long
>
Long.
TYPE
The
Class
instance representing the primitive type
long
.
static final
Class
<
Short
>
Short.
TYPE
The
Class
instance representing the primitive type
short
.
static final
Class
<
Void
>
Void.
TYPE
The
Class
object representing the pseudo-type corresponding to
 the keyword
void
.
Methods in
java.lang
that return
Class
Modifier and Type
Method
Description
Class
<?>
Class.
arrayType
()
Returns a
Class
for an array type whose component type
 is described by this
Class
.
<U>
Class
<? extends U>
Class.
asSubclass
(
Class
<U> clazz)
Casts this
Class
object to represent a subclass of the class
 represented by the specified class object.
Class
<?>
Class.
componentType
()
Returns the component type of this
Class
, if it describes
 an array type, or
null
otherwise.
protected final
Class
<?>
ClassLoader.
defineClass
(byte[] b,
 int off,
 int len)
Deprecated.
Replaced by
defineClass(String, byte[], int, int)
protected final
Class
<?>
ClassLoader.
defineClass
(
String
name,
 byte[] b,
 int off,
 int len)
Converts an array of bytes into an instance of class
Class
.
protected final
Class
<?>
ClassLoader.
defineClass
(
String
name,
 byte[] b,
 int off,
 int len,
ProtectionDomain
protectionDomain)
Converts an array of bytes into an instance of class
Class
,
 with a given
ProtectionDomain
.
protected final
Class
<?>
ClassLoader.
defineClass
(
String
name,
ByteBuffer
b,
ProtectionDomain
protectionDomain)
Converts a
ByteBuffer
into an instance
 of class
Class
, with the given
ProtectionDomain
.
Class
<? extends
Enum
>
EnumConstantNotPresentException.
enumType
()
Returns the type of the missing enum constant.
protected
Class
<?>
ClassLoader.
findClass
(
String
name)
Finds the class with the specified
binary name
.
protected
Class
<?>
ClassLoader.
findClass
(
String
moduleName,
String
name)
Finds the class with the given
binary name
in a module defined to this class loader.
protected final
Class
<?>
ClassLoader.
findLoadedClass
(
String
name)
Returns the class with the given
binary name
if this
 loader has been recorded by the Java virtual machine as an initiating
 loader of a class with that
binary name
.
protected final
Class
<?>
ClassLoader.
findSystemClass
(
String
name)
Finds a class with the specified
binary name
,
 loading it if necessary.
static
Class
<?>
Class.
forName
(
Module
module,
String
name)
Returns the
Class
with the given
binary name
in the given module.
static
Class
<?>
Class.
forName
(
String
className)
Returns the
Class
object associated with the class or
 interface with the given string name.
static
Class
<?>
Class.
forName
(
String
name,
 boolean initialize,
ClassLoader
loader)
Returns the
Class
object associated with the class or
 interface with the given string name, using the given class loader.
Class
<?>
StackWalker.
getCallerClass
()
Gets the
Class
object of the caller who invoked the method
 that invoked
getCallerClass
.
final
Class
<?>
Object.
getClass
()
Returns the runtime class of this
Object
.
protected
Class
<?>[]
SecurityManager.
getClassContext
()
Deprecated, for removal: This API element is subject to removal in a future version.
Returns the current execution stack as an array of classes.
Class
<?>[]
Class.
getClasses
()
Returns an array containing
Class
objects representing all
 the public classes and interfaces that are members of the class
 represented by this
Class
object.
Class
<?>
Class.
getComponentType
()
Returns the
Class
representing the component type of an
 array.
Class
<?>[]
Class.
getDeclaredClasses
()
Returns an array of
Class
objects reflecting all the
 classes and interfaces declared as members of the class represented by
 this
Class
object.
Class
<?>
Class.
getDeclaringClass
()
If the class or interface represented by this
Class
object
 is a member of another class, returns the
Class
object
 representing the class in which it was declared.
final
Class
<
E
>
Enum.
getDeclaringClass
()
Returns the Class object corresponding to this enum constant's
 enum type.
Class
<?>
StackWalker.StackFrame.
getDeclaringClass
()
Gets the declaring
Class
for the method represented by
 this stack frame.
Class
<?>
Class.
getEnclosingClass
()
Returns the immediately enclosing class of the underlying
 class.
Class
<?>[]
Class.
getInterfaces
()
Returns the interfaces directly implemented by the class or interface
 represented by this
Class
object.
Class
<?>
Class.
getNestHost
()
Returns the nest host of the
nest
to which the class
 or interface represented by this
Class
object belongs.
Class
<?>[]
Class.
getNestMembers
()
Returns an array containing
Class
objects representing all the
 classes and interfaces that are members of the nest to which the class
 or interface represented by this
Class
object belongs.
Class
<?>[]
Class.
getPermittedSubclasses
()
Returns an array containing
Class
objects representing the
 direct subinterfaces or subclasses permitted to extend or
 implement this class or interface if it is sealed.
Class
<? super
T
>
Class.
getSuperclass
()
Returns the
Class
representing the direct superclass of the
 entity (class, interface, primitive type or void) represented by
 this
Class
.
Class
<?>
ClassLoader.
loadClass
(
String
name)
Loads the class with the specified
binary name
.
protected
Class
<?>
ClassLoader.
loadClass
(
String
name,
 boolean resolve)
Loads the class with the specified
binary name
.
Methods in
java.lang
that return types with arguments of type
Class
Modifier and Type
Method
Description
TypeVariable
<
Class
<
T
>>[]
Class.
getTypeParameters
()
Returns an array of
TypeVariable
objects that represent the
 type variables declared by the generic declaration represented by this
GenericDeclaration
object, in declaration order.
Methods in
java.lang
with parameters of type
Class
Modifier and Type
Method
Description
Module
Module.
addUses
(
Class
<?> service)
If the caller's module is this module then update this module to add a
 service dependence on the given service type.
<U>
Class
<? extends U>
Class.
asSubclass
(
Class
<U> clazz)
Casts this
Class
object to represent a subclass of the class
 represented by the specified class object.
boolean
Module.
canUse
(
Class
<?> service)
Indicates if this module has a service dependence on the given service
 type.
protected abstract
T
ClassValue.
computeValue
(
Class
<?> type)
Computes the given class's derived value for this
ClassValue
.
T
ClassValue.
get
(
Class
<?> type)
Returns the value for the given class.
<A extends
Annotation
>
A
Class.
getAnnotation
(
Class
<A> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
present
, else null.
<T extends
Annotation
>
T
Module.
getAnnotation
(
Class
<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
present
, else null.
<A extends
Annotation
>
A
Package.
getAnnotation
(
Class
<A> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
present
, else null.
<A extends
Annotation
>
A[]
Class.
getAnnotationsByType
(
Class
<A> annotationClass)
Returns annotations that are
associated
with this element.
<A extends
Annotation
>
A[]
Package.
getAnnotationsByType
(
Class
<A> annotationClass)
Returns annotations that are
associated
with this element.
Constructor
<
T
>
Class.
getConstructor
(
Class
<?>... parameterTypes)
Returns a
Constructor
object that reflects the specified
 public constructor of the class represented by this
Class
object.
<A extends
Annotation
>
A
Class.
getDeclaredAnnotation
(
Class
<A> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
directly present
, else null.
<A extends
Annotation
>
A
Package.
getDeclaredAnnotation
(
Class
<A> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
directly present
, else null.
<A extends
Annotation
>
A[]
Class.
getDeclaredAnnotationsByType
(
Class
<A> annotationClass)
Returns this element's annotation(s) for the specified type if
 such annotations are either
directly present
or
indirectly present
.
<A extends
Annotation
>
A[]
Package.
getDeclaredAnnotationsByType
(
Class
<A> annotationClass)
Constructor
<
T
>
Class.
getDeclaredConstructor
(
Class
<?>... parameterTypes)
Returns a
Constructor
object that reflects the specified
 constructor of the class represented by this
Class
object.
Method
Class.
getDeclaredMethod
(
String
name,
Class
<?>... parameterTypes)
Returns a
Method
object that reflects the specified
 declared method of the class or interface represented by this
Class
object.
Method
Class.
getMethod
(
String
name,
Class
<?>... parameterTypes)
Returns a
Method
object that reflects the specified public
 member method of the class or interface represented by this
Class
object.
boolean
Class.
isAnnotationPresent
(
Class
<? extends
Annotation
> annotationClass)
Returns true if an annotation for the specified type
 is
present
on this element, else false.
boolean
Package.
isAnnotationPresent
(
Class
<? extends
Annotation
> annotationClass)
Returns true if an annotation for the specified type
 is
present
on this element, else false.
boolean
Class.
isAssignableFrom
(
Class
<?> cls)
Determines if the class or interface represented by this
Class
object is either the same as, or is a superclass or
 superinterface of, the class or interface represented by the specified
Class
parameter.
boolean
Class.
isNestmateOf
(
Class
<?> c)
Determines if the given
Class
is a nestmate of the
 class or interface represented by this
Class
object.
void
ClassValue.
remove
(
Class
<?> type)
Removes the associated value for the given class.
protected final void
ClassLoader.
resolveClass
(
Class
<?> c)
Links the specified class.
protected final void
ClassLoader.
setSigners
(
Class
<?> c,
Object
[] signers)
Sets the signers of a class.
static <T extends
Enum
<T>>
T
Enum.
valueOf
(
Class
<T> enumClass,
String
name)
Returns the enum constant of the specified enum class with the
 specified name.
Constructors in
java.lang
with parameters of type
Class
Modifier
Constructor
Description
EnumConstantNotPresentException
(
Class
<? extends
Enum
> enumType,
String
constantName)
Constructs an
EnumConstantNotPresentException
for the
 specified constant.
Uses of
Class
in
java.lang.annotation
Methods in
java.lang.annotation
that return
Class
Modifier and Type
Method
Description
Class
<? extends
Annotation
>
Annotation.
annotationType
()
Returns the annotation interface of this annotation.
Class
<? extends
Annotation
>
IncompleteAnnotationException.
annotationType
()
Returns the Class object for the annotation interface with the
 missing element.
Constructors in
java.lang.annotation
with parameters of type
Class
Modifier
Constructor
Description
IncompleteAnnotationException
(
Class
<? extends
Annotation
> annotationType,
String
elementName)
Constructs an IncompleteAnnotationException to indicate that
 the named element was missing from the specified annotation interface.
Uses of
Class
in
java.lang.constant
Methods in
java.lang.constant
that return
Class
Modifier and Type
Method
Description
Class
<?>
ClassDesc.
resolveConstantDesc
(
MethodHandles.Lookup
lookup)
Uses of
Class
in
java.lang.foreign
Methods in
java.lang.foreign
that return
Class
Modifier and Type
Method
Description
Class
<?>
ValueLayout.
carrier
()
Returns the carrier associated with this value layout.
Uses of
Class
in
java.lang.instrument
Methods in
java.lang.instrument
that return
Class
Modifier and Type
Method
Description
Class
[]
Instrumentation.
getAllLoadedClasses
()
Returns an array of all classes currently loaded by the JVM.
Class
<?>
ClassDefinition.
getDefinitionClass
()
Returns the class.
Class
[]
Instrumentation.
getInitiatedClasses
(
ClassLoader
loader)
Returns an array of all classes which
loader
can find by name
 via
ClassLoader::loadClass
,
Class::forName
and bytecode linkage.
Methods in
java.lang.instrument
with parameters of type
Class
Modifier and Type
Method
Description
boolean
Instrumentation.
isModifiableClass
(
Class
<?> theClass)
Tests whether a class is modifiable by
retransformation
or
redefinition
.
void
Instrumentation.
retransformClasses
(
Class
<?>... classes)
Retransform the supplied set of classes.
default byte[]
ClassFileTransformer.
transform
(
ClassLoader
loader,
String
className,
Class
<?> classBeingRedefined,
ProtectionDomain
protectionDomain,
 byte[] classfileBuffer)
Transforms the given class file and returns a new replacement class file.
default byte[]
ClassFileTransformer.
transform
(
Module
module,
ClassLoader
loader,
String
className,
Class
<?> classBeingRedefined,
ProtectionDomain
protectionDomain,
 byte[] classfileBuffer)
Transforms the given class file and returns a new replacement class file.
Constructors in
java.lang.instrument
with parameters of type
Class
Modifier
Constructor
Description
ClassDefinition
(
Class
<?> theClass,
 byte[] theClassFile)
Creates a new
ClassDefinition
binding using the supplied
  class and class file bytes.
Uses of
Class
in
java.lang.invoke
Methods in
java.lang.invoke
that return
Class
Modifier and Type
Method
Description
<T>
Class
<T>
MethodHandles.Lookup.
accessClass
(
Class
<T> targetClass)
Determines if a class can be accessed from the lookup context defined by
 this
Lookup
object.
Class
<?>
MethodHandles.Lookup.
defineClass
(byte[] bytes)
Creates and links a class or interface from
bytes
with the same class loader and in the same runtime package and
protection domain
as this lookup's
lookup class
as if calling
ClassLoader::defineClass
.
<T>
Class
<T>
MethodHandles.Lookup.
ensureInitialized
(
Class
<T> targetClass)
Ensures that
targetClass
has been initialized.
Class
<?>
MethodHandles.Lookup.
findClass
(
String
targetName)
Looks up a class by name from the lookup context defined by this
Lookup
object,
as if resolved
by an
ldc
instruction.
Class
<?>
MethodHandleInfo.
getDeclaringClass
()
Returns the class in which the cracked method handle's underlying member was defined.
Class
<?>
MethodType.
lastParameterType
()
Returns the last parameter type of this method type.
Class
<?>
MethodHandles.Lookup.
lookupClass
()
Tells which class is performing the lookup.
Class
<?>[]
MethodType.
parameterArray
()
Presents the parameter types as an array (a convenience method).
Class
<?>
MethodType.
parameterType
(int num)
Returns the parameter type at the specified index, within this method type.
Class
<?>
MethodHandles.Lookup.
previousLookupClass
()
Reports a lookup class in another module that this lookup object
 was previously teleported from, or
null
.
static
Class
<?>
ConstantBootstraps.
primitiveClass
(
MethodHandles.Lookup
lookup,
String
name,
Class
<?> type)
Returns a
Class
mirror for the primitive type whose type
 descriptor is specified by
name
.
Class
<?>
MethodType.
returnType
()
Returns the return type of this method type.
Class
<?>
VarHandle.
varType
()
Returns the variable type of variables referenced by this VarHandle.
static
Class
<?>
MethodHandleProxies.
wrapperInstanceType
(
Object
x)
Recovers the unique single-method interface type for which this wrapper instance was created.
Methods in
java.lang.invoke
that return types with arguments of type
Class
Modifier and Type
Method
Description
List
<
Class
<?>>
VarHandle.
coordinateTypes
()
Returns the coordinate types for this VarHandle.
List
<
Class
<?>>
MethodType.
parameterList
()
Presents the parameter types as a list (a convenience method).
Methods in
java.lang.invoke
with parameters of type
Class
Modifier and Type
Method
Description
<T>
Class
<T>
MethodHandles.Lookup.
accessClass
(
Class
<T> targetClass)
Determines if a class can be accessed from the lookup context defined by
 this
Lookup
object.
MethodType
MethodType.
appendParameterTypes
(
Class
<?>... ptypesToInsert)
Finds or creates a method type with additional parameter types.
static
MethodHandle
MethodHandles.
arrayConstructor
(
Class
<?> arrayClass)
Produces a method handle constructing arrays of a desired type,
 as if by the
anewarray
bytecode.
static
MethodHandle
MethodHandles.
arrayElementGetter
(
Class
<?> arrayClass)
Produces a method handle giving read access to elements of an array,
 as if by the
aaload
bytecode.
static
MethodHandle
MethodHandles.
arrayElementSetter
(
Class
<?> arrayClass)
Produces a method handle giving write access to elements of an array,
 as if by the
astore
bytecode.
static
VarHandle
MethodHandles.
arrayElementVarHandle
(
Class
<?> arrayClass)
Produces a VarHandle giving access to elements of an array of type
arrayClass
.
static
MethodHandle
MethodHandles.
arrayLength
(
Class
<?> arrayClass)
Produces a method handle returning the length of an array,
 as if by the
arraylength
bytecode.
static
VarHandle
ConstantBootstraps.
arrayVarHandle
(
MethodHandles.Lookup
lookup,
String
name,
Class
<
VarHandle
> type,
Class
<?> arrayClass)
Finds a
VarHandle
for an array type.
MethodHandle
MethodHandle.
asCollector
(int collectArgPos,
Class
<?> arrayType,
 int arrayLength)
Makes an
array-collecting
method handle, which accepts a given number of positional arguments starting
 at a given position, and collects them into an array argument.
MethodHandle
MethodHandle.
asCollector
(
Class
<?> arrayType,
 int arrayLength)
Makes an
array-collecting
method handle, which accepts a given number of trailing
 positional arguments and collects them into an array argument.
static <T> T
MethodHandleProxies.
asInterfaceInstance
(
Class
<T> intfc,
MethodHandle
target)
Produces an instance of the given single-method interface which redirects
 its calls to the given method handle.
MethodHandle
MethodHandle.
asSpreader
(int spreadArgPos,
Class
<?> arrayType,
 int arrayLength)
Makes an
array-spreading
method handle, which accepts an array argument at a given position and spreads
 its elements as positional arguments in place of the array.
MethodHandle
MethodHandle.
asSpreader
(
Class
<?> arrayType,
 int arrayLength)
Makes an
array-spreading
method handle, which accepts a trailing array argument
 and spreads its elements as positional arguments.
MethodHandle
MethodHandle.
asVarargsCollector
(
Class
<?> arrayType)
Makes a
variable arity
adapter which is able to accept
 any number of trailing positional arguments and collect them
 into an array argument.
static
VarHandle
MethodHandles.
byteArrayViewVarHandle
(
Class
<?> viewArrayClass,
ByteOrder
byteOrder)
Produces a VarHandle giving access to elements of a
byte[]
array
 viewed as if it were a different primitive array type, such as
int[]
or
long[]
.
static
VarHandle
MethodHandles.
byteBufferViewVarHandle
(
Class
<?> viewArrayClass,
ByteOrder
byteOrder)
Produces a VarHandle giving access to elements of a
ByteBuffer
viewed as if it were an array of elements of a different primitive
 component type to that of
byte
, such as
int[]
or
long[]
.
static
MethodHandle
MethodHandles.
catchException
(
MethodHandle
target,
Class
<? extends
Throwable
> exType,
MethodHandle
handler)
Makes a method handle which adapts a target method handle,
 by running it inside an exception handler.
MethodType
MethodType.
changeParameterType
(int num,
Class
<?> nptype)
Finds or creates a method type with a single different parameter type.
MethodType
MethodType.
changeReturnType
(
Class
<?> nrtype)
Finds or creates a method type with a different return type.
static <T> T
MethodHandles.
classData
(
MethodHandles.Lookup
caller,
String
name,
Class
<T> type)
Returns the
class data
associated with the lookup class
 of the given
caller
lookup object, or
null
.
static <T> T
MethodHandles.
classDataAt
(
MethodHandles.Lookup
caller,
String
name,
Class
<T> type,
 int index)
Returns the element at the specified index in the
class data
,
 if the class data associated with the lookup class
 of the given
caller
lookup object is a
List
.
static
MethodHandle
MethodHandles.
constant
(
Class
<?> type,
Object
value)
Produces a method handle of the requested return type which returns the given
 constant value every time it is invoked.
static
MethodHandle
MethodHandles.
dropArguments
(
MethodHandle
target,
 int pos,
Class
<?>... valueTypes)
Produces a method handle which will discard some dummy arguments
 before calling some other specified
target
method handle.
static
VarHandle
MethodHandles.
dropCoordinates
(
VarHandle
target,
 int pos,
Class
<?>... valueTypes)
Preview.
Returns a var handle which will discard some dummy coordinates before delegating to the
 target var handle.
<T>
Class
<T>
MethodHandles.Lookup.
ensureInitialized
(
Class
<T> targetClass)
Ensures that
targetClass
has been initialized.
static <E extends
Enum
<E>>
E
ConstantBootstraps.
enumConstant
(
MethodHandles.Lookup
lookup,
String
name,
Class
<E> type)
Returns an
enum
constant of the type specified by
type
with the name specified by
name
.
static
Object
ConstantBootstraps.
explicitCast
(
MethodHandles.Lookup
lookup,
String
name,
Class
<?> dstType,
Object
value)
Applies a conversion from a source type to a destination type.
static
VarHandle
ConstantBootstraps.
fieldVarHandle
(
MethodHandles.Lookup
lookup,
String
name,
Class
<
VarHandle
> type,
Class
<?> declaringClass,
Class
<?> fieldType)
Finds a
VarHandle
for an instance field.
MethodHandle
MethodHandles.Lookup.
findConstructor
(
Class
<?> refc,
MethodType
type)
Produces a method handle which creates an object and initializes it, using
 the constructor of the specified type.
MethodHandle
MethodHandles.Lookup.
findGetter
(
Class
<?> refc,
String
name,
Class
<?> type)
Produces a method handle giving read access to a non-static field.
MethodHandle
MethodHandles.Lookup.
findSetter
(
Class
<?> refc,
String
name,
Class
<?> type)
Produces a method handle giving write access to a non-static field.
MethodHandle
MethodHandles.Lookup.
findSpecial
(
Class
<?> refc,
String
name,
MethodType
type,
Class
<?> specialCaller)
Produces an early-bound method handle for a virtual method.
MethodHandle
MethodHandles.Lookup.
findStatic
(
Class
<?> refc,
String
name,
MethodType
type)
Produces a method handle for a static method.
MethodHandle
MethodHandles.Lookup.
findStaticGetter
(
Class
<?> refc,
String
name,
Class
<?> type)
Produces a method handle giving read access to a static field.
MethodHandle
MethodHandles.Lookup.
findStaticSetter
(
Class
<?> refc,
String
name,
Class
<?> type)
Produces a method handle giving write access to a static field.
VarHandle
MethodHandles.Lookup.
findStaticVarHandle
(
Class
<?> decl,
String
name,
Class
<?> type)
Produces a VarHandle giving access to a static field
name
of
 type
type
declared in a class of type
decl
.
VarHandle
MethodHandles.Lookup.
findVarHandle
(
Class
<?> recv,
String
name,
Class
<?> type)
Produces a VarHandle giving access to a non-static field
name
of type
type
declared in a class of type
recv
.
MethodHandle
MethodHandles.Lookup.
findVirtual
(
Class
<?> refc,
String
name,
MethodType
type)
Produces a method handle for a virtual method.
static
Object
ConstantBootstraps.
getStaticFinal
(
MethodHandles.Lookup
lookup,
String
name,
Class
<?> type)
Returns the value of a static final field declared in the class which
 is the same as the field's type (or, for primitive-valued fields,
 declared in the wrapper class.)
static
Object
ConstantBootstraps.
getStaticFinal
(
MethodHandles.Lookup
lookup,
String
name,
Class
<?> type,
Class
<?> declaringClass)
Returns the value of a static final field.
static
MethodHandle
MethodHandles.
identity
(
Class
<?> type)
Produces a method handle which returns its sole argument when invoked.
MethodHandles.Lookup
MethodHandles.Lookup.
in
(
Class
<?> requestedLookupClass)
Creates a lookup on the specified new lookup class.
MethodType
MethodType.
insertParameterTypes
(int num,
Class
<?>... ptypesToInsert)
Finds or creates a method type with additional parameter types.
static
Object
ConstantBootstraps.
invoke
(
MethodHandles.Lookup
lookup,
String
name,
Class
<?> type,
MethodHandle
handle,
Object
... args)
Returns the result of invoking a method handle with the provided
 arguments.
static
MethodType
MethodType.
methodType
(
Class
<?> rtype)
Finds or creates a method type with the given components.
static
MethodType
MethodType.
methodType
(
Class
<?> rtype,
Class
<?> ptype0)
Finds or creates a method type with the given components.
static
MethodType
MethodType.
methodType
(
Class
<?> rtype,
Class
<?>[] ptypes)
Finds or creates an instance of the given method type.
static
MethodType
MethodType.
methodType
(
Class
<?> rtype,
Class
<?> ptype0,
Class
<?>... ptypes)
Finds or creates a method type with the given components.
static
MethodType
MethodType.
methodType
(
Class
<?> rtype,
MethodType
ptypes)
Finds or creates a method type with the given components.
static
MethodType
MethodType.
methodType
(
Class
<?> rtype,
List
<
Class
<?>> ptypes)
Finds or creates a method type with the given components.
static
Object
ConstantBootstraps.
nullConstant
(
MethodHandles.Lookup
lookup,
String
name,
Class
<?> type)
Returns a
null
object reference for the reference type specified
 by
type
.
static
Class
<?>
ConstantBootstraps.
primitiveClass
(
MethodHandles.Lookup
lookup,
String
name,
Class
<?> type)
Returns a
Class
mirror for the primitive type whose type
 descriptor is specified by
name
.
static
MethodHandles.Lookup
MethodHandles.
privateLookupIn
(
Class
<?> targetClass,
MethodHandles.Lookup
caller)
Returns a
lookup
object on a target class to emulate all supported
 bytecode behaviors, including
private access
.
<T extends
Member
>
T
MethodHandleInfo.
reflectAs
(
Class
<T> expected,
MethodHandles.Lookup
lookup)
Reflects the underlying member as a method, constructor, or field object.
static <T extends
Member
>
T
MethodHandles.
reflectAs
(
Class
<T> expected,
MethodHandle
target)
Performs an unchecked "crack" of a
direct method handle
.
static
VarHandle
ConstantBootstraps.
staticFieldVarHandle
(
MethodHandles.Lookup
lookup,
String
name,
Class
<
VarHandle
> type,
Class
<?> declaringClass,
Class
<?> fieldType)
Finds a
VarHandle
for a static field.
static
MethodHandle
MethodHandles.
throwException
(
Class
<?> returnType,
Class
<? extends
Throwable
> exType)
Produces a method handle which will throw exceptions of the given
exType
.
static
String
MethodHandleInfo.
toString
(int kind,
Class
<?> defc,
String
name,
MethodType
type)
Returns a string representation for a
MethodHandleInfo
,
 given the four parts of its symbolic reference.
MethodHandle
MethodHandles.Lookup.
unreflectSpecial
(
Method
m,
Class
<?> specialCaller)
Produces a method handle for a reflected method.
static
MethodHandle
MethodHandles.
zero
(
Class
<?> type)
Produces a constant method handle of the requested return type which
 returns the default value for that type every time it is invoked.
Method parameters in
java.lang.invoke
with type arguments of type
Class
Modifier and Type
Method
Description
MethodType
MethodType.
appendParameterTypes
(
List
<
Class
<?>> ptypesToInsert)
Finds or creates a method type with additional parameter types.
static
MethodHandle
MethodHandles.
dropArguments
(
MethodHandle
target,
 int pos,
List
<
Class
<?>> valueTypes)
Produces a method handle which will discard some dummy arguments
 before calling some other specified
target
method handle.
static
MethodHandle
MethodHandles.
dropArgumentsToMatch
(
MethodHandle
target,
 int skip,
List
<
Class
<?>> newTypes,
 int pos)
Adapts a target method handle to match the given parameter type list.
MethodType
MethodType.
insertParameterTypes
(int num,
List
<
Class
<?>> ptypesToInsert)
Finds or creates a method type with additional parameter types.
static
MethodType
MethodType.
methodType
(
Class
<?> rtype,
List
<
Class
<?>> ptypes)
Finds or creates a method type with the given components.
static
VarHandle
MethodHandles.
permuteCoordinates
(
VarHandle
target,
List
<
Class
<?>> newCoordinates,
 int... reorder)
Preview.
Provides a var handle which adapts the coordinate values of the target var handle, by re-arranging them
 so that the new coordinates match the provided ones.
Constructors in
java.lang.invoke
with parameters of type
Class
Modifier
Constructor
Description
SerializedLambda
(
Class
<?> capturingClass,
String
functionalInterfaceClass,
String
functionalInterfaceMethodName,
String
functionalInterfaceMethodSignature,
 int implMethodKind,
String
implClass,
String
implMethodName,
String
implMethodSignature,
String
instantiatedMethodType,
Object
[] capturedArgs)
Create a
SerializedLambda
from the low-level information present
 at the lambda factory site.
Uses of
Class
in
java.lang.management
Methods in
java.lang.management
that return types with arguments of type
Class
Modifier and Type
Method
Description
static
Set
<
Class
<? extends
PlatformManagedObject
>>
ManagementFactory.
getPlatformManagementInterfaces
()
Returns the set of
Class
objects, subinterface of
PlatformManagedObject
, representing
 all management interfaces for
 monitoring and managing the Java platform.
Methods in
java.lang.management
with parameters of type
Class
Modifier and Type
Method
Description
static <T extends
PlatformManagedObject
>
T
ManagementFactory.
getPlatformMXBean
(
Class
<T> mxbeanInterface)
Returns the platform MXBean implementing
 the given
mxbeanInterface
which is specified
 to have one single instance in the Java virtual machine.
static <T extends
PlatformManagedObject
>
T
ManagementFactory.
getPlatformMXBean
(
MBeanServerConnection
connection,
Class
<T> mxbeanInterface)
Returns the platform MXBean proxy for
mxbeanInterface
which is specified to have one single
 instance in a Java virtual machine and the proxy will
 forward the method calls through the given
MBeanServerConnection
.
static <T extends
PlatformManagedObject
>
List
<T>
ManagementFactory.
getPlatformMXBeans
(
Class
<T> mxbeanInterface)
Returns the list of platform MXBeans implementing
 the given
mxbeanInterface
in the Java
 virtual machine.
static <T extends
PlatformManagedObject
>
List
<T>
ManagementFactory.
getPlatformMXBeans
(
MBeanServerConnection
connection,
Class
<T> mxbeanInterface)
Returns the list of the platform MXBean proxies for
 forwarding the method calls of the
mxbeanInterface
through the given
MBeanServerConnection
.
static <T> T
ManagementFactory.
newPlatformMXBeanProxy
(
MBeanServerConnection
connection,
String
mxbeanName,
Class
<T> mxbeanInterface)
Returns a proxy for a platform MXBean interface of a
 given
MXBean name
that forwards its method calls through the given
MBeanServerConnection
.
Uses of
Class
in
java.lang.reflect
Methods in
java.lang.reflect
that return
Class
Modifier and Type
Method
Description
Class
<
T
>
Constructor.
getDeclaringClass
()
Returns the
Class
object representing the class that
 declares the constructor represented by this object.
abstract
Class
<?>
Executable.
getDeclaringClass
()
Returns the
Class
object representing the class or interface
 that declares the executable represented by this object.
Class
<?>
Field.
getDeclaringClass
()
Returns the
Class
object representing the class or interface
 that declares the field represented by this
Field
object.
Class
<?>
Member.
getDeclaringClass
()
Returns the Class object representing the class or interface
 that declares the member or constructor represented by this Member.
Class
<?>
Method.
getDeclaringClass
()
Returns the
Class
object representing the class or interface
 that declares the method represented by this object.
Class
<?>
RecordComponent.
getDeclaringRecord
()
Returns the record class which declares this record component.
Class
<?>[]
Constructor.
getExceptionTypes
()
Returns an array of
Class
objects that represent the
 types of exceptions declared to be thrown by the underlying
 executable represented by this object.
abstract
Class
<?>[]
Executable.
getExceptionTypes
()
Returns an array of
Class
objects that represent the
 types of exceptions declared to be thrown by the underlying
 executable represented by this object.
Class
<?>[]
Method.
getExceptionTypes
()
Returns an array of
Class
objects that represent the
 types of exceptions declared to be thrown by the underlying
 executable represented by this object.
Class
<?>[]
Constructor.
getParameterTypes
()
Returns an array of
Class
objects that represent the formal
 parameter types, in declaration order, of the executable
 represented by this object.
abstract
Class
<?>[]
Executable.
getParameterTypes
()
Returns an array of
Class
objects that represent the formal
 parameter types, in declaration order, of the executable
 represented by this object.
Class
<?>[]
Method.
getParameterTypes
()
Returns an array of
Class
objects that represent the formal
 parameter types, in declaration order, of the executable
 represented by this object.
static
Class
<?>
Proxy.
getProxyClass
(
ClassLoader
loader,
Class
<?>... interfaces)
Deprecated.
Proxy classes generated in a named module are encapsulated
      and not accessible to code outside its module.
Class
<?>
Method.
getReturnType
()
Returns a
Class
object that represents the formal return type
 of the method represented by this
Method
object.
Class
<?>
Field.
getType
()
Returns a
Class
object that identifies the
 declared type for the field represented by this
Field
object.
Class
<?>
Parameter.
getType
()
Returns a
Class
object that identifies the
 declared type for the parameter represented by this
Parameter
object.
Class
<?>
RecordComponent.
getType
()
Returns a
Class
that identifies the declared type for this
 record component.
Methods in
java.lang.reflect
with parameters of type
Class
Modifier and Type
Method
Description
<T extends
Annotation
>
T
AccessibleObject.
getAnnotation
(
Class
<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
present
, else null.
<T extends
Annotation
>
T
AnnotatedElement.
getAnnotation
(
Class
<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
present
, else null.
<T extends
Annotation
>
T
AnnotatedType.
getAnnotation
(
Class
<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
present
, else null.
<T extends
Annotation
>
T
Constructor.
getAnnotation
(
Class
<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
present
, else null.
<T extends
Annotation
>
T
Executable.
getAnnotation
(
Class
<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
present
, else null.
<T extends
Annotation
>
T
Field.
getAnnotation
(
Class
<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
present
, else null.
<T extends
Annotation
>
T
Method.
getAnnotation
(
Class
<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
present
, else null.
<T extends
Annotation
>
T
Parameter.
getAnnotation
(
Class
<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
present
, else null.
<T extends
Annotation
>
T
RecordComponent.
getAnnotation
(
Class
<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
present
, else null.
<T extends
Annotation
>
T[]
AccessibleObject.
getAnnotationsByType
(
Class
<T> annotationClass)
Returns annotations that are
associated
with this element.
default <T extends
Annotation
>
T[]
AnnotatedElement.
getAnnotationsByType
(
Class
<T> annotationClass)
Returns annotations that are
associated
with this element.
<T extends
Annotation
>
T[]
Executable.
getAnnotationsByType
(
Class
<T> annotationClass)
Returns annotations that are
associated
with this element.
<T extends
Annotation
>
T[]
Field.
getAnnotationsByType
(
Class
<T> annotationClass)
Returns annotations that are
associated
with this element.
<T extends
Annotation
>
T[]
Parameter.
getAnnotationsByType
(
Class
<T> annotationClass)
Returns annotations that are
associated
with this element.
<T extends
Annotation
>
T
AccessibleObject.
getDeclaredAnnotation
(
Class
<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
directly present
, else null.
default <T extends
Annotation
>
T
AnnotatedElement.
getDeclaredAnnotation
(
Class
<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
directly present
, else null.
<T extends
Annotation
>
T
Parameter.
getDeclaredAnnotation
(
Class
<T> annotationClass)
Returns this element's annotation for the specified type if
 such an annotation is
directly present
, else null.
<T extends
Annotation
>
T[]
AccessibleObject.
getDeclaredAnnotationsByType
(
Class
<T> annotationClass)
Returns this element's annotation(s) for the specified type if
 such annotations are either
directly present
or
indirectly present
.
default <T extends
Annotation
>
T[]
AnnotatedElement.
getDeclaredAnnotationsByType
(
Class
<T> annotationClass)
Returns this element's annotation(s) for the specified type if
 such annotations are either
directly present
or
indirectly present
.
<T extends
Annotation
>
T[]
Parameter.
getDeclaredAnnotationsByType
(
Class
<T> annotationClass)
Returns this element's annotation(s) for the specified type if
 such annotations are either
directly present
or
indirectly present
.
static
Class
<?>
Proxy.
getProxyClass
(
ClassLoader
loader,
Class
<?>... interfaces)
Deprecated.
Proxy classes generated in a named module are encapsulated
      and not accessible to code outside its module.
boolean
AccessibleObject.
isAnnotationPresent
(
Class
<? extends
Annotation
> annotationClass)
Returns true if an annotation for the specified type
 is
present
on this element, else false.
default boolean
AnnotatedElement.
isAnnotationPresent
(
Class
<? extends
Annotation
> annotationClass)
Returns true if an annotation for the specified type
 is
present
on this element, else false.
static boolean
Proxy.
isProxyClass
(
Class
<?> cl)
Returns true if the given class is a proxy class.
static
Object
Array.
newInstance
(
Class
<?> componentType,
 int length)
Creates a new array with the specified component type and
 length.
static
Object
Array.
newInstance
(
Class
<?> componentType,
 int... dimensions)
Creates a new array
 with the specified component type and dimensions.
static
Object
Proxy.
newProxyInstance
(
ClassLoader
loader,
Class
<?>[] interfaces,
InvocationHandler
h)
Returns a proxy instance for the specified interfaces
 that dispatches method invocations to the specified invocation
 handler.
Uses of
Class
in
java.lang.runtime
Methods in
java.lang.runtime
with parameters of type
Class
Modifier and Type
Method
Description
static
Object
ObjectMethods.
bootstrap
(
MethodHandles.Lookup
lookup,
String
methodName,
TypeDescriptor
type,
Class
<?> recordClass,
String
names,
MethodHandle
... getters)
Bootstrap method to generate the
Object.equals(Object)
,
Object.hashCode()
, and
Object.toString()
methods, based
 on a description of the component names and accessor methods, for either
invokedynamic
call sites or dynamic constant pool entries.
Uses of
Class
in
java.net
Methods in
java.net
that return
Class
Modifier and Type
Method
Description
protected
Class
<?>
URLClassLoader.
findClass
(
String
name)
Finds and loads the class with the specified name from the URL search
 path.
Class
<
T
>
SocketOption.
type
()
Returns the type of the socket option value.
Methods in
java.net
with parameters of type
Class
Modifier and Type
Method
Description
Object
ContentHandler.
getContent
(
URLConnection
urlc,
Class
[] classes)
Given a URL connect stream positioned at the beginning of the
 representation of an object, this method reads that stream and
 creates an object that matches one of the types specified.
final
Object
URL.
getContent
(
Class
<?>[] classes)
Gets the contents of this URL.
Object
URLConnection.
getContent
(
Class
<?>[] classes)
Retrieves the contents of this URL connection.
Uses of
Class
in
java.nio.file
Methods in
java.nio.file
that return
Class
Modifier and Type
Method
Description
Class
<
T
>
WatchEvent.Kind.
type
()
Returns the type of the
context
value.
Methods in
java.nio.file
with parameters of type
Class
Modifier and Type
Method
Description
static <V extends
FileAttributeView
>
V
Files.
getFileAttributeView
(
Path
path,
Class
<V> type,
LinkOption
... options)
Returns a file attribute view of a given type.
<V extends
FileAttributeView
>
V
SecureDirectoryStream.
getFileAttributeView
(
Class
<V> type)
Returns a new file attribute view to access the file attributes of this
 directory.
<V extends
FileAttributeView
>
V
SecureDirectoryStream.
getFileAttributeView
(
T
path,
Class
<V> type,
LinkOption
... options)
Returns a new file attribute view to access the file attributes of a file
 in this directory.
abstract <V extends
FileStoreAttributeView
>
V
FileStore.
getFileStoreAttributeView
(
Class
<V> type)
Returns a
FileStoreAttributeView
of the given type.
static <A extends
BasicFileAttributes
>
A
Files.
readAttributes
(
Path
path,
Class
<A> type,
LinkOption
... options)
Reads a file's attributes as a bulk operation.
abstract boolean
FileStore.
supportsFileAttributeView
(
Class
<? extends
FileAttributeView
> type)
Tells whether or not this file store supports the file attributes
 identified by the given file attribute view.
Uses of
Class
in
java.nio.file.spi
Methods in
java.nio.file.spi
with parameters of type
Class
Modifier and Type
Method
Description
abstract <V extends
FileAttributeView
>
V
FileSystemProvider.
getFileAttributeView
(
Path
path,
Class
<V> type,
LinkOption
... options)
Returns a file attribute view of a given type.
abstract <A extends
BasicFileAttributes
>
A
FileSystemProvider.
readAttributes
(
Path
path,
Class
<A> type,
LinkOption
... options)
Reads a file's attributes as a bulk operation.
<A extends
BasicFileAttributes
>
A
FileSystemProvider.
readAttributesIfExists
(
Path
path,
Class
<A> type,
LinkOption
... options)
Reads a file's attributes as a bulk operation if it exists.
Uses of
Class
in
java.rmi.server
Methods in
java.rmi.server
that return
Class
Modifier and Type
Method
Description
Class
<?>
LoaderHandler.
loadClass
(
String
name)
Deprecated.
no replacement
Class
<?>
LoaderHandler.
loadClass
(
URL
codebase,
String
name)
Deprecated.
no replacement
static
Class
<?>
RMIClassLoader.
loadClass
(
String
name)
Deprecated.
replaced by
loadClass(String,String)
method
static
Class
<?>
RMIClassLoader.
loadClass
(
String
codebase,
String
name)
Loads a class from a codebase URL path.
static
Class
<?>
RMIClassLoader.
loadClass
(
String
codebase,
String
name,
ClassLoader
defaultLoader)
Loads a class from a codebase URL path, optionally using the
 supplied loader.
static
Class
<?>
RMIClassLoader.
loadClass
(
URL
codebase,
String
name)
Loads a class from a codebase URL.
abstract
Class
<?>
RMIClassLoaderSpi.
loadClass
(
String
codebase,
String
name,
ClassLoader
defaultLoader)
Provides the implementation for
RMIClassLoader.loadClass(URL,String)
,
RMIClassLoader.loadClass(String,String)
, and
RMIClassLoader.loadClass(String,String,ClassLoader)
.
static
Class
<?>
RMIClassLoader.
loadProxyClass
(
String
codebase,
String
[] interfaces,
ClassLoader
defaultLoader)
Loads a dynamic proxy class (see
Proxy
)
 that implements a set of interfaces with the given names
 from a codebase URL path.
abstract
Class
<?>
RMIClassLoaderSpi.
loadProxyClass
(
String
codebase,
String
[] interfaces,
ClassLoader
defaultLoader)
Provides the implementation for
RMIClassLoader.loadProxyClass(String,String[],ClassLoader)
.
Methods in
java.rmi.server
with parameters of type
Class
Modifier and Type
Method
Description
static
String
RMIClassLoader.
getClassAnnotation
(
Class
<?> cl)
Returns the annotation string (representing a location for
 the class definition) that RMI will use to annotate the class
 descriptor when marshalling objects of the given class.
abstract
String
RMIClassLoaderSpi.
getClassAnnotation
(
Class
<?> cl)
Provides the implementation for
RMIClassLoader.getClassAnnotation(Class)
.
Uses of
Class
in
java.security
Methods in
java.security
that return
Class
Modifier and Type
Method
Description
protected final
Class
<?>
SecureClassLoader.
defineClass
(
String
name,
 byte[] b,
 int off,
 int len,
CodeSource
cs)
Converts an array of bytes into an instance of class
Class
,
 with an optional CodeSource.
protected final
Class
<?>
SecureClassLoader.
defineClass
(
String
name,
ByteBuffer
b,
CodeSource
cs)
Converts a
ByteBuffer
into an instance of class
Class
, with an optional CodeSource.
Methods in
java.security
with parameters of type
Class
Modifier and Type
Method
Description
boolean
KeyStoreSpi.
engineEntryInstanceOf
(
String
alias,
Class
<? extends
KeyStore.Entry
> entryClass)
Determines if the keystore
Entry
for the specified
alias
is an instance or subclass of the specified
entryClass
.
protected abstract <T extends
KeySpec
>
T
KeyFactorySpi.
engineGetKeySpec
(
Key
key,
Class
<T> keySpec)
Returns a specification (key material) of the given key
 object.
protected abstract <T extends
AlgorithmParameterSpec
>
T
AlgorithmParametersSpi.
engineGetParameterSpec
(
Class
<T> paramSpec)
Returns a (transparent) specification of this parameters
 object.
final boolean
KeyStore.
entryInstanceOf
(
String
alias,
Class
<? extends
KeyStore.Entry
> entryClass)
Determines if the keystore
Entry
for the specified
alias
is an instance or subclass of the specified
entryClass
.
final <T extends
KeySpec
>
T
KeyFactory.
getKeySpec
(
Key
key,
Class
<T> keySpec)
Returns a specification (key material) of the given key object.
final <T extends
AlgorithmParameterSpec
>
T
AlgorithmParameters.
getParameterSpec
(
Class
<T> paramSpec)
Returns a (transparent) specification of this parameter object.
Uses of
Class
in
java.sql
Methods in
java.sql
that return types with arguments of type
Class
Modifier and Type
Method
Description
Map
<
String
,
Class
<?>>
Connection.
getTypeMap
()
Retrieves the
Map
object associated with this
Connection
object.
Methods in
java.sql
with parameters of type
Class
Modifier and Type
Method
Description
<T> T
CallableStatement.
getObject
(int parameterIndex,
Class
<T> type)
Returns an object representing the value of OUT parameter
parameterIndex
and will convert from the
 SQL type of the parameter to the requested Java data type, if the
 conversion is supported.
<T> T
CallableStatement.
getObject
(
String
parameterName,
Class
<T> type)
Returns an object representing the value of OUT parameter
parameterName
and will convert from the
 SQL type of the parameter to the requested Java data type, if the
 conversion is supported.
<T> T
ResultSet.
getObject
(int columnIndex,
Class
<T> type)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object and will convert from the
 SQL type of the column to the requested Java data type, if the
 conversion is supported.
<T> T
ResultSet.
getObject
(
String
columnLabel,
Class
<T> type)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object and will convert from the
 SQL type of the column to the requested Java data type, if the
 conversion is supported.
<T extends
Source
>
T
SQLXML.
getSource
(
Class
<T> sourceClass)
Returns a Source for reading the XML value designated by this SQLXML instance.
boolean
Wrapper.
isWrapperFor
(
Class
<?> iface)
Returns true if this either implements the interface argument or is directly or indirectly a wrapper
 for an object that does.
default <T> T
SQLInput.
readObject
(
Class
<T> type)
Reads the next attribute in the stream and returns it as an
Object
in the Java programming language.
<T extends
Result
>
T
SQLXML.
setResult
(
Class
<T> resultClass)
Returns a Result for setting the XML value designated by this SQLXML instance.
<T> T
Wrapper.
unwrap
(
Class
<T> iface)
Returns an object that implements the given interface to allow access to
 non-standard methods, or standard methods not exposed by the proxy.
Method parameters in
java.sql
with type arguments of type
Class
Modifier and Type
Method
Description
Object
Array.
getArray
(long index,
 int count,
Map
<
String
,
Class
<?>> map)
Retrieves a slice of the SQL
ARRAY
value
 designated by this
Array
object, beginning with the specified
index
and containing up to
count
successive elements of the SQL array.
Object
Array.
getArray
(
Map
<
String
,
Class
<?>> map)
Retrieves the contents of the SQL
ARRAY
value designated by this
Array
object.
Object
[]
Struct.
getAttributes
(
Map
<
String
,
Class
<?>> map)
Produces the ordered values of the attributes of the SQL
 structured type that this
Struct
object represents.
Object
CallableStatement.
getObject
(int parameterIndex,
Map
<
String
,
Class
<?>> map)
Returns an object representing the value of OUT parameter
parameterIndex
and uses
map
for the custom
 mapping of the parameter value.
Object
CallableStatement.
getObject
(
String
parameterName,
Map
<
String
,
Class
<?>> map)
Returns an object representing the value of OUT parameter
parameterName
and uses
map
for the custom
 mapping of the parameter value.
Object
Ref.
getObject
(
Map
<
String
,
Class
<?>> map)
Retrieves the referenced object and maps it to a Java type
 using the given type map.
Object
ResultSet.
getObject
(int columnIndex,
Map
<
String
,
Class
<?>> map)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as an
Object
in the Java programming language.
Object
ResultSet.
getObject
(
String
columnLabel,
Map
<
String
,
Class
<?>> map)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as an
Object
in the Java programming language.
ResultSet
Array.
getResultSet
(long index,
 int count,
Map
<
String
,
Class
<?>> map)
Retrieves a result set holding the elements of the subarray that
 starts at index
index
and contains up to
count
successive elements.
ResultSet
Array.
getResultSet
(
Map
<
String
,
Class
<?>> map)
Retrieves a result set that contains the elements of the SQL
ARRAY
value designated by this
Array
object.
void
Connection.
setTypeMap
(
Map
<
String
,
Class
<?>> map)
Installs the given
TypeMap
object as the type map for
 this
Connection
object.
Uses of
Class
in
java.util
Methods in
java.util
that return
Class
Modifier and Type
Method
Description
Class
<?>
IllegalFormatConversionException.
getArgumentClass
()
Returns the class of the mismatched argument.
Class
<? extends
S
>
ServiceLoader.Provider.
type
()
Returns the provider type.
Methods in
java.util
with parameters of type
Class
Modifier and Type
Method
Description
static <E extends
Enum
<E>>
EnumSet
<E>
EnumSet.
allOf
(
Class
<E> elementType)
Creates an enum set containing all of the elements in the specified
 element type.
static <E>
Collection
<E>
Collections.
checkedCollection
(
Collection
<E> c,
Class
<E> type)
Returns a dynamically typesafe view of the specified collection.
static <E>
List
<E>
Collections.
checkedList
(
List
<E> list,
Class
<E> type)
Returns a dynamically typesafe view of the specified list.
static <K,
V>
Map
<K,
V>
Collections.
checkedMap
(
Map
<K,
V> m,
Class
<K> keyType,
Class
<V> valueType)
Returns a dynamically typesafe view of the specified map.
static <K,
V>
NavigableMap
<K,
V>
Collections.
checkedNavigableMap
(
NavigableMap
<K,
V> m,
Class
<K> keyType,
Class
<V> valueType)
Returns a dynamically typesafe view of the specified navigable map.
static <E>
NavigableSet
<E>
Collections.
checkedNavigableSet
(
NavigableSet
<E> s,
Class
<E> type)
Returns a dynamically typesafe view of the specified navigable set.
static <E>
Queue
<E>
Collections.
checkedQueue
(
Queue
<E> queue,
Class
<E> type)
Returns a dynamically typesafe view of the specified queue.
static <E>
Set
<E>
Collections.
checkedSet
(
Set
<E> s,
Class
<E> type)
Returns a dynamically typesafe view of the specified set.
static <K,
V>
SortedMap
<K,
V>
Collections.
checkedSortedMap
(
SortedMap
<K,
V> m,
Class
<K> keyType,
Class
<V> valueType)
Returns a dynamically typesafe view of the specified sorted map.
static <E>
SortedSet
<E>
Collections.
checkedSortedSet
(
SortedSet
<E> s,
Class
<E> type)
Returns a dynamically typesafe view of the specified sorted set.
static <T,
U> T[]
Arrays.
copyOf
(U[] original,
 int newLength,
Class
<? extends T[]> newType)
Copies the specified array, truncating or padding with nulls (if necessary)
 so the copy has the specified length.
static <T,
U> T[]
Arrays.
copyOfRange
(U[] original,
 int from,
 int to,
Class
<? extends T[]> newType)
Copies the specified range of the specified array into a new array.
static <S>
ServiceLoader
<S>
ServiceLoader.
load
(
Class
<S> service)
Creates a new service loader for the given service type, using the
 current thread's
context class loader
.
static <S>
ServiceLoader
<S>
ServiceLoader.
load
(
Class
<S> service,
ClassLoader
loader)
Creates a new service loader for the given service.
static <S>
ServiceLoader
<S>
ServiceLoader.
load
(
ModuleLayer
layer,
Class
<S> service)
Creates a new service loader for the given service type to load service
 providers from modules in the given module layer and its ancestors.
static <S>
ServiceLoader
<S>
ServiceLoader.
loadInstalled
(
Class
<S> service)
Creates a new service loader for the given service type, using the
platform class loader
.
static <E extends
Enum
<E>>
EnumSet
<E>
EnumSet.
noneOf
(
Class
<E> elementType)
Creates an empty enum set with the specified element type.
Constructors in
java.util
with parameters of type
Class
Modifier
Constructor
Description
EnumMap
(
Class
<
K
> keyType)
Creates an empty enum map with the specified key type.
IllegalFormatConversionException
(char c,
Class
<?> arg)
Constructs an instance of this class with the mismatched conversion and
 the corresponding argument class.
Uses of
Class
in
java.util.concurrent.atomic
Methods in
java.util.concurrent.atomic
with parameters of type
Class
Modifier and Type
Method
Description
static <U>
AtomicIntegerFieldUpdater
<U>
AtomicIntegerFieldUpdater.
newUpdater
(
Class
<U> tclass,
String
fieldName)
Creates and returns an updater for objects with the given field.
static <U>
AtomicLongFieldUpdater
<U>
AtomicLongFieldUpdater.
newUpdater
(
Class
<U> tclass,
String
fieldName)
Creates and returns an updater for objects with the given field.
static <U,
W>
AtomicReferenceFieldUpdater
<U,
W>
AtomicReferenceFieldUpdater.
newUpdater
(
Class
<U> tclass,
Class
<W> vclass,
String
fieldName)
Creates and returns an updater for objects with the given field.
Uses of
Class
in
java.util.prefs
Methods in
java.util.prefs
with parameters of type
Class
Modifier and Type
Method
Description
static
Preferences
Preferences.
systemNodeForPackage
(
Class
<?> c)
Returns the preference node from the system preference tree that is
 associated (by convention) with the specified class's package.
static
Preferences
Preferences.
userNodeForPackage
(
Class
<?> c)
Returns the preference node from the calling user's preference tree
 that is associated (by convention) with the specified class's package.
Uses of
Class
in
javax.annotation.processing
Methods in
javax.annotation.processing
with parameters of type
Class
Modifier and Type
Method
Description
Set
<? extends
Element
>
RoundEnvironment.
getElementsAnnotatedWith
(
Class
<? extends
Annotation
> a)
Returns the elements annotated with the given annotation interface.
Method parameters in
javax.annotation.processing
with type arguments of type
Class
Modifier and Type
Method
Description
default
Set
<? extends
Element
>
RoundEnvironment.
getElementsAnnotatedWithAny
(
Set
<
Class
<? extends
Annotation
>> annotations)
Returns the elements annotated with one or more of the given
 annotation interfaces.
Uses of
Class
in
javax.crypto
Methods in
javax.crypto
with parameters of type
Class
Modifier and Type
Method
Description
protected abstract
KeySpec
SecretKeyFactorySpi.
engineGetKeySpec
(
SecretKey
key,
Class
<?> keySpec)
Returns a specification (key material) of the given key
 object in the requested format.
final
KeySpec
SecretKeyFactory.
getKeySpec
(
SecretKey
key,
Class
<?> keySpec)
Returns a specification (key material) of the given key object
 in the requested format.
Uses of
Class
in
javax.imageio.metadata
Methods in
javax.imageio.metadata
that return
Class
Modifier and Type
Method
Description
Class
<?>
IIOMetadataFormat.
getObjectClass
(
String
elementName)
Returns the
Class
type of the
Object
reference stored within the element.
Class
<?>
IIOMetadataFormatImpl.
getObjectClass
(
String
elementName)
Methods in
javax.imageio.metadata
with parameters of type
Class
Modifier and Type
Method
Description
protected void
IIOMetadataFormatImpl.
addObjectValue
(
String
elementName,
Class
<?> classType,
 int arrayMinLength,
 int arrayMaxLength)
Allows an
Object
reference of a given class type
 to be stored in nodes implementing the named element.
protected <T> void
IIOMetadataFormatImpl.
addObjectValue
(
String
elementName,
Class
<T> classType,
 boolean required,
 T defaultValue)
Allows an
Object
reference of a given class type
 to be stored in nodes implementing the named element.
protected <T> void
IIOMetadataFormatImpl.
addObjectValue
(
String
elementName,
Class
<T> classType,
 boolean required,
 T defaultValue,
List
<? extends T> enumeratedValues)
Allows an
Object
reference of a given class type
 to be stored in nodes implementing the named element.
protected <T extends
Object
&
Comparable
<? super T>>
void
IIOMetadataFormatImpl.
addObjectValue
(
String
elementName,
Class
<T> classType,
 T defaultValue,
Comparable
<? super T> minValue,
Comparable
<? super T> maxValue,
 boolean minInclusive,
 boolean maxInclusive)
Allows an
Object
reference of a given class type
 to be stored in nodes implementing the named element.
Uses of
Class
in
javax.imageio.spi
Fields in
javax.imageio.spi
declared as
Class
Modifier and Type
Field
Description
protected
Class
<?>
ImageInputStreamSpi.
inputClass
A
Class
object indicating the legal object type
 for use by the
createInputStreamInstance
method.
protected
Class
<?>[]
ImageReaderSpi.
inputTypes
An array of
Class
objects to be returned from
getInputTypes
, initially
null
.
protected
Class
<?>
ImageOutputStreamSpi.
outputClass
A
Class
object indicating the legal object type
 for use by the
createInputStreamInstance
method.
protected
Class
<?>[]
ImageWriterSpi.
outputTypes
An array of
Class
objects to be returned from
getOutputTypes
, initially
null
.
static final
Class
<?>[]
ImageReaderSpi.
STANDARD_INPUT_TYPE
Deprecated.
Instead of using this field, directly create
 the equivalent array
{ ImageInputStream.class }
.
static final
Class
<?>[]
ImageWriterSpi.
STANDARD_OUTPUT_TYPE
Deprecated.
Instead of using this field, directly create
 the equivalent array
{ ImageOutputStream.class }
.
Methods in
javax.imageio.spi
that return
Class
Modifier and Type
Method
Description
Class
<?>
ImageInputStreamSpi.
getInputClass
()
Returns a
Class
object representing the class or
 interface type that must be implemented by an input source in
 order to be "wrapped" in an
ImageInputStream
via
 the
createInputStreamInstance
method.
Class
<?>[]
ImageReaderSpi.
getInputTypes
()
Returns an array of
Class
objects indicating what
 types of objects may be used as arguments to the reader's
setInput
method.
Class
<?>
ImageOutputStreamSpi.
getOutputClass
()
Returns a
Class
object representing the class or
 interface type that must be implemented by an output
 destination in order to be "wrapped" in an
ImageOutputStream
via the
createOutputStreamInstance
method.
Class
<?>[]
ImageWriterSpi.
getOutputTypes
()
Returns an array of
Class
objects indicating what
 types of objects may be used as arguments to the writer's
setOutput
method.
Methods in
javax.imageio.spi
that return types with arguments of type
Class
Modifier and Type
Method
Description
Iterator
<
Class
<?>>
ServiceRegistry.
getCategories
()
Returns an
Iterator
of
Class
objects
 indicating the current set of categories.
Methods in
javax.imageio.spi
with parameters of type
Class
Modifier and Type
Method
Description
void
ServiceRegistry.
deregisterAll
(
Class
<?> category)
Deregisters all service provider object currently registered
 under the given category.
<T> boolean
ServiceRegistry.
deregisterServiceProvider
(T provider,
Class
<T> category)
Removes a service provider object from the given category.
<T> T
ServiceRegistry.
getServiceProviderByClass
(
Class
<T> providerClass)
Returns the currently registered service provider object that
 is of the given class type.
<T>
Iterator
<T>
ServiceRegistry.
getServiceProviders
(
Class
<T> category,
 boolean useOrdering)
Returns an
Iterator
containing all registered
 service providers in the given category.
<T>
Iterator
<T>
ServiceRegistry.
getServiceProviders
(
Class
<T> category,
ServiceRegistry.Filter
filter,
 boolean useOrdering)
Returns an
Iterator
containing service provider
 objects within a given category that satisfy a criterion
 imposed by the supplied
ServiceRegistry.Filter
object's
filter
method.
static <T>
Iterator
<T>
ServiceRegistry.
lookupProviders
(
Class
<T> providerClass)
Locates and incrementally instantiates the available providers
 of a given service using the context class loader.
static <T>
Iterator
<T>
ServiceRegistry.
lookupProviders
(
Class
<T> providerClass,
ClassLoader
loader)
Searches for implementations of a particular service class
 using the given class loader.
void
IIOServiceProvider.
onDeregistration
(
ServiceRegistry
registry,
Class
<?> category)
A callback that will be whenever the Spi class has been
 deregistered from a
ServiceRegistry
.
void
RegisterableService.
onDeregistration
(
ServiceRegistry
registry,
Class
<?> category)
Called when an object implementing this interface is removed
 from the given
category
of the given
registry
.
void
IIOServiceProvider.
onRegistration
(
ServiceRegistry
registry,
Class
<?> category)
A callback that will be called exactly once after the Spi class
 has been instantiated and registered in a
ServiceRegistry
.
void
RegisterableService.
onRegistration
(
ServiceRegistry
registry,
Class
<?> category)
Called when an object implementing this interface is added to
 the given
category
of the given
registry
.
<T> boolean
ServiceRegistry.
registerServiceProvider
(T provider,
Class
<T> category)
Adds a service provider object to the registry.
<T> boolean
ServiceRegistry.
setOrdering
(
Class
<T> category,
 T firstProvider,
 T secondProvider)
Sets a pairwise ordering between two service provider objects
 within a given category.
<T> boolean
ServiceRegistry.
unsetOrdering
(
Class
<T> category,
 T firstProvider,
 T secondProvider)
Sets a pairwise ordering between two service provider objects
 within a given category.
Constructors in
javax.imageio.spi
with parameters of type
Class
Modifier
Constructor
Description
ImageInputStreamSpi
(
String
vendorName,
String
version,
Class
<?> inputClass)
Constructs an
ImageInputStreamSpi
with a given set
 of values.
ImageOutputStreamSpi
(
String
vendorName,
String
version,
Class
<?> outputClass)
Constructs an
ImageOutputStreamSpi
with a given
 set of values.
ImageReaderSpi
(
String
vendorName,
String
version,
String
[] names,
String
[] suffixes,
String
[] MIMETypes,
String
readerClassName,
Class
<?>[] inputTypes,
String
[] writerSpiNames,
 boolean supportsStandardStreamMetadataFormat,
String
nativeStreamMetadataFormatName,
String
nativeStreamMetadataFormatClassName,
String
[] extraStreamMetadataFormatNames,
String
[] extraStreamMetadataFormatClassNames,
 boolean supportsStandardImageMetadataFormat,
String
nativeImageMetadataFormatName,
String
nativeImageMetadataFormatClassName,
String
[] extraImageMetadataFormatNames,
String
[] extraImageMetadataFormatClassNames)
Constructs an
ImageReaderSpi
with a given
 set of values.
ImageWriterSpi
(
String
vendorName,
String
version,
String
[] names,
String
[] suffixes,
String
[] MIMETypes,
String
writerClassName,
Class
<?>[] outputTypes,
String
[] readerSpiNames,
 boolean supportsStandardStreamMetadataFormat,
String
nativeStreamMetadataFormatName,
String
nativeStreamMetadataFormatClassName,
String
[] extraStreamMetadataFormatNames,
String
[] extraStreamMetadataFormatClassNames,
 boolean supportsStandardImageMetadataFormat,
String
nativeImageMetadataFormatName,
String
nativeImageMetadataFormatClassName,
String
[] extraImageMetadataFormatNames,
String
[] extraImageMetadataFormatClassNames)
Constructs an
ImageWriterSpi
with a given
 set of values.
Constructor parameters in
javax.imageio.spi
with type arguments of type
Class
Modifier
Constructor
Description
ServiceRegistry
(
Iterator
<
Class
<?>> categories)
Constructs a
ServiceRegistry
instance with a
 set of categories taken from the
categories
argument.
Uses of
Class
in
javax.lang.model
Methods in
javax.lang.model
with parameters of type
Class
Modifier and Type
Method
Description
<A extends
Annotation
>
A
AnnotatedConstruct.
getAnnotation
(
Class
<A> annotationType)
Returns this construct's annotation of the specified type if
 such an annotation is
present
, else
null
.
<A extends
Annotation
>
A[]
AnnotatedConstruct.
getAnnotationsByType
(
Class
<A> annotationType)
Returns annotations that are
associated
with this construct.
Uses of
Class
in
javax.lang.model.element
Methods in
javax.lang.model.element
with parameters of type
Class
Modifier and Type
Method
Description
<A extends
Annotation
>
A
Element.
getAnnotation
(
Class
<A> annotationType)
Returns this construct's annotation of the specified type if
 such an annotation is
present
, else
null
.
<A extends
Annotation
>
A[]
Element.
getAnnotationsByType
(
Class
<A> annotationType)
Returns annotations that are
associated
with this construct.
Uses of
Class
in
javax.lang.model.type
Methods in
javax.lang.model.type
with parameters of type
Class
Modifier and Type
Method
Description
<A extends
Annotation
>
A
TypeMirror.
getAnnotation
(
Class
<A> annotationType)
Returns this construct's annotation of the specified type if
 such an annotation is
present
, else
null
.
<A extends
Annotation
>
A[]
TypeMirror.
getAnnotationsByType
(
Class
<A> annotationType)
Returns annotations that are
associated
with this construct.
Uses of
Class
in
javax.management
Methods in
javax.management
that return
Class
Modifier and Type
Method
Description
Class
<?>
StandardMBean.
getImplementationClass
()
Get the class of the implementation of this Standard MBean (or MXBean).
final
Class
<?>
StandardMBean.
getMBeanInterface
()
Get the Management Interface of this Standard MBean (or MXBean).
static
Class
<?>
DefaultLoaderRepository.
loadClass
(
String
className)
Deprecated.
Go through the list of class loaders and try to load the requested class.
static
Class
<?>
DefaultLoaderRepository.
loadClassWithout
(
ClassLoader
loader,
String
className)
Deprecated.
Go through the list of class loaders but exclude the given class loader, then try to load
 the requested class.
Methods in
javax.management
with parameters of type
Class
Modifier and Type
Method
Description
static boolean
JMX.
isMXBeanInterface
(
Class
<?> interfaceClass)
Test whether an interface is an MXBean interface.
static <T> T
JMX.
newMBeanProxy
(
MBeanServerConnection
connection,
ObjectName
objectName,
Class
<T> interfaceClass)
Make a proxy for a Standard MBean in a local or remote
 MBean Server.
static <T> T
JMX.
newMBeanProxy
(
MBeanServerConnection
connection,
ObjectName
objectName,
Class
<T> interfaceClass,
 boolean notificationEmitter)
Make a proxy for a Standard MBean in a local or remote MBean
 Server that may also support the methods of
NotificationEmitter
.
static <T> T
JMX.
newMXBeanProxy
(
MBeanServerConnection
connection,
ObjectName
objectName,
Class
<T> interfaceClass)
Make a proxy for an MXBean in a local or remote MBean Server.
static <T> T
JMX.
newMXBeanProxy
(
MBeanServerConnection
connection,
ObjectName
objectName,
Class
<T> interfaceClass,
 boolean notificationEmitter)
Make a proxy for an MXBean in a local or remote MBean
 Server that may also support the methods of
NotificationEmitter
.
static <T> T
MBeanServerInvocationHandler.
newProxyInstance
(
MBeanServerConnection
connection,
ObjectName
objectName,
Class
<T> interfaceClass,
 boolean notificationBroadcaster)
Return a proxy that implements the given interface by
 forwarding its methods through the given MBean server to the
 named MBean.
Constructors in
javax.management
with parameters of type
Class
Modifier
Constructor
Description
protected
StandardEmitterMBean
(
Class
<?> mbeanInterface,
 boolean isMXBean,
NotificationEmitter
emitter)
Make an MBean whose management interface is specified by
mbeanInterface
, and where notifications are handled by
 the given
NotificationEmitter
.
protected
StandardEmitterMBean
(
Class
<?> mbeanInterface,
NotificationEmitter
emitter)
Make an MBean whose management interface is specified by
mbeanInterface
, and
 where notifications are handled by the given
NotificationEmitter
.
StandardEmitterMBean
(T implementation,
Class
<T> mbeanInterface,
 boolean isMXBean,
NotificationEmitter
emitter)
Make an MBean whose management interface is specified by
mbeanInterface
, with the given implementation and where
 notifications are handled by the given
NotificationEmitter
.
StandardEmitterMBean
(T implementation,
Class
<T> mbeanInterface,
NotificationEmitter
emitter)
Make an MBean whose management interface is specified by
mbeanInterface
, with the given implementation and
 where notifications are handled by the given
NotificationEmitter
.
protected
StandardMBean
(
Class
<?> mbeanInterface)
Make a DynamicMBean out of
this
, using the specified
mbeanInterface
class.
protected
StandardMBean
(
Class
<?> mbeanInterface,
 boolean isMXBean)
Make a DynamicMBean out of
this
, using the specified
mbeanInterface
class, and choosing whether the resulting
 MBean is an MXBean.
StandardMBean
(T implementation,
Class
<T> mbeanInterface)
Make a DynamicMBean out of the object
implementation
, using the specified
mbeanInterface
class.
StandardMBean
(T implementation,
Class
<T> mbeanInterface,
 boolean isMXBean)
Make a DynamicMBean out of the object
implementation
, using the specified
mbeanInterface
class, and choosing whether the
 resultant MBean is an MXBean.
Uses of
Class
in
javax.management.loading
Methods in
javax.management.loading
that return
Class
Modifier and Type
Method
Description
protected
Class
<?>
MLet.
findClass
(
String
name)
Deprecated, for removal: This API element is subject to removal in a future version.
This is the main method for class loaders that is being redefined.
Class
<?>
ClassLoaderRepository.
loadClass
(
String
className)
Load the given class name through the list of class loaders.
static
Class
<?>
DefaultLoaderRepository.
loadClass
(
String
className)
Deprecated.
Go through the list of class loaders and try to load the requested
 class.
Class
<?>
MLet.
loadClass
(
String
name,
ClassLoaderRepository
clr)
Deprecated, for removal: This API element is subject to removal in a future version.
Load a class, using the given
ClassLoaderRepository
if
 the class is not found in this MLet's URLs.
Class
<?>
ClassLoaderRepository.
loadClassBefore
(
ClassLoader
stop,
String
className)
Load the given class name through the list of class loaders,
 stopping at the given one.
Class
<?>
ClassLoaderRepository.
loadClassWithout
(
ClassLoader
exclude,
String
className)
Load the given class name through the list of class loaders,
 excluding the given one.
static
Class
<?>
DefaultLoaderRepository.
loadClassWithout
(
ClassLoader
loader,
String
className)
Deprecated.
Go through the list of class loaders but exclude the given
 class loader, then try to load
 the requested class.
Uses of
Class
in
javax.management.openmbean
Methods in
javax.management.openmbean
with parameters of type
Class
Modifier and Type
Method
Description
static <T>
ArrayType
<T>
ArrayType.
getPrimitiveArrayType
(
Class
<T> arrayClass)
Create an
ArrayType
instance in a type-safe manner.
Uses of
Class
in
javax.naming.spi
Methods in
javax.naming.spi
with parameters of type
Class
Modifier and Type
Method
Description
ResolveResult
Resolver.
resolveToClass
(
String
name,
Class
<? extends
Context
> contextType)
Partially resolves a name.
ResolveResult
Resolver.
resolveToClass
(
Name
name,
Class
<? extends
Context
> contextType)
Partially resolves a name.
Uses of
Class
in
javax.print
Methods in
javax.print
that return
Class
Modifier and Type
Method
Description
Class
<?>[]
PrintService.
getSupportedAttributeCategories
()
Determines the printing attribute categories a client can specify when
 setting up a job for this print service.
Class
<?>[]
AttributeException.
getUnsupportedAttributes
()
Returns the array of printing attribute classes for which the Print
 Service instance does not support the attribute at all, or
null
if there are no such attributes.
Methods in
javax.print
with parameters of type
Class
Modifier and Type
Method
Description
<T extends
PrintServiceAttribute
>
T
PrintService.
getAttribute
(
Class
<T> category)
Gets the value of the single specified service attribute.
Object
PrintService.
getDefaultAttributeValue
(
Class
<? extends
Attribute
> category)
Determines this print service's default printing attribute value in the
 given category.
Object
PrintService.
getSupportedAttributeValues
(
Class
<? extends
Attribute
> category,
DocFlavor
flavor,
AttributeSet
attributes)
Determines the printing attribute values a client can specify in the
 given category when setting up a job for this print service.
boolean
PrintService.
isAttributeCategorySupported
(
Class
<? extends
Attribute
> category)
Determines whether a client can specify the given printing attribute
 category when setting up a job for this print service.
Uses of
Class
in
javax.print.attribute
Methods in
javax.print.attribute
that return
Class
Modifier and Type
Method
Description
Class
<? extends
Attribute
>
Attribute.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value when it is added to an attribute set.
static
Class
<?>
AttributeSetUtilities.
verifyAttributeCategory
(
Object
object,
Class
<?> interfaceName)
Verify that the given object is a
Class
that implements the
 given interface, which is assumed to be interface
Attribute
or a subinterface thereof.
Methods in
javax.print.attribute
with parameters of type
Class
Modifier and Type
Method
Description
boolean
AttributeSet.
containsKey
(
Class
<?> category)
Returns
true
if this attribute set contains an attribute for the
 specified category.
boolean
HashAttributeSet.
containsKey
(
Class
<?> category)
Returns
true
if this attribute set contains an attribute for the
 specified category.
Attribute
AttributeSet.
get
(
Class
<?> category)
Returns the attribute value which this attribute set contains in the
 given attribute category.
Attribute
HashAttributeSet.
get
(
Class
<?> category)
Returns the attribute value which this attribute set contains in the
 given attribute category.
boolean
AttributeSet.
remove
(
Class
<?> category)
Removes any attribute for this category from this attribute set if
 present.
boolean
HashAttributeSet.
remove
(
Class
<?> category)
Removes any attribute for this category from this attribute set if
 present.
static
Class
<?>
AttributeSetUtilities.
verifyAttributeCategory
(
Object
object,
Class
<?> interfaceName)
Verify that the given object is a
Class
that implements the
 given interface, which is assumed to be interface
Attribute
or a subinterface thereof.
static
Attribute
AttributeSetUtilities.
verifyAttributeValue
(
Object
object,
Class
<?> interfaceName)
Verify that the given object is an instance of the given interface, which
 is assumed to be interface
Attribute
or a subinterface
 thereof.
static void
AttributeSetUtilities.
verifyCategoryForValue
(
Class
<?> category,
Attribute
attribute)
Verify that the given attribute category object is equal to the category
 of the given attribute value object.
Constructors in
javax.print.attribute
with parameters of type
Class
Modifier
Constructor
Description
protected
HashAttributeSet
(
Class
<?> interfaceName)
Construct a new, empty attribute set, where the members of the attribute
 set are restricted to the given interface.
protected
HashAttributeSet
(
Attribute
[] attributes,
Class
<?> interfaceName)
Construct a new attribute set, where the members of the attribute set are
 restricted to the given interface.
protected
HashAttributeSet
(
Attribute
attribute,
Class
<?> interfaceName)
Construct a new attribute set, initially populated with the given
 attribute, where the members of the attribute set are restricted to the
 given interface.
protected
HashAttributeSet
(
AttributeSet
attributes,
Class
<?> interfaceName)
Construct a new attribute set, initially populated with the values from
 the given set where the members of the attribute set are restricted to
 the given interface.
Uses of
Class
in
javax.print.attribute.standard
Methods in
javax.print.attribute.standard
that return
Class
Modifier and Type
Method
Description
final
Class
<? extends
Attribute
>
Chromaticity.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
ColorSupported.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
Compression.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
Copies.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
CopiesSupported.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
DateTimeAtCompleted.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
DateTimeAtCreation.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
DateTimeAtProcessing.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
Destination.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
DialogOwner.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
DialogTypeSelection.
getCategory
()
Gets the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
DocumentName.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
Fidelity.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
Finishings.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
JobHoldUntil.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
JobImpressions.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
JobImpressionsCompleted.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
JobImpressionsSupported.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
JobKOctets.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
JobKOctetsProcessed.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
JobKOctetsSupported.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
JobMediaSheets.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
JobMediaSheetsCompleted.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
JobMediaSheetsSupported.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
JobMessageFromOperator.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
JobName.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
JobOriginatingUserName.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
JobPriority.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
JobPrioritySupported.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
JobSheets.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
JobState.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
JobStateReason.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
JobStateReasons.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
Media.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
MediaPrintableArea.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
MediaSize.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
MultipleDocumentHandling.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
NumberOfDocuments.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
NumberOfInterveningJobs.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
NumberUp.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
NumberUpSupported.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
OrientationRequested.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
OutputDeviceAssigned.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
PageRanges.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
PagesPerMinute.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
PagesPerMinuteColor.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
PDLOverrideSupported.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
PresentationDirection.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
PrinterInfo.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
PrinterIsAcceptingJobs.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
PrinterLocation.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
PrinterMakeAndModel.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
PrinterMessageFromOperator.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
PrinterMoreInfo.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
PrinterMoreInfoManufacturer.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
PrinterName.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
PrinterResolution.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
PrinterState.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
PrinterStateReason.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
PrinterStateReasons.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
PrinterURI.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
PrintQuality.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
QueuedJobCount.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
ReferenceUriSchemesSupported.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
RequestingUserName.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
Severity.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
SheetCollate.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
final
Class
<? extends
Attribute
>
Sides.
getCategory
()
Get the printing attribute class which is to be used as the "category"
 for this printing attribute value.
Uses of
Class
in
javax.script
Methods in
javax.script
with parameters of type
Class
Modifier and Type
Method
Description
<T> T
Invocable.
getInterface
(
Class
<T> clasz)
Returns an implementation of an interface using functions compiled in
 the interpreter.
<T> T
Invocable.
getInterface
(
Object
thiz,
Class
<T> clasz)
Returns an implementation of an interface using member functions of
 a scripting object compiled in the interpreter.
Uses of
Class
in
javax.security.auth
Methods in
javax.security.auth
with parameters of type
Class
Modifier and Type
Method
Description
<T extends
Principal
>
Set
<T>
Subject.
getPrincipals
(
Class
<T> c)
Return a
Set
of Principals associated with this
Subject
that are instances or subclasses of the specified
Class
.
<T>
Set
<T>
Subject.
getPrivateCredentials
(
Class
<T> c)
Return a
Set
of private credentials associated with this
Subject
that are instances or subclasses of the specified
Class
.
<T>
Set
<T>
Subject.
getPublicCredentials
(
Class
<T> c)
Return a
Set
of public credentials associated with this
Subject
that are instances or subclasses of the specified
Class
.
Uses of
Class
in
javax.sound.midi
Methods in
javax.sound.midi
that return
Class
Modifier and Type
Method
Description
Class
<?>
SoundbankResource.
getDataClass
()
Obtains the class used by this sample to represent its data.
Constructors in
javax.sound.midi
with parameters of type
Class
Modifier
Constructor
Description
protected
Instrument
(
Soundbank
soundbank,
Patch
patch,
String
name,
Class
<?> dataClass)
Constructs a new MIDI instrument from the specified
Patch
.
protected
SoundbankResource
(
Soundbank
soundBank,
String
name,
Class
<?> dataClass)
Constructs a new
SoundbankResource
from the given sound bank and
 wavetable index.
Uses of
Class
in
javax.sound.sampled
Methods in
javax.sound.sampled
that return
Class
Modifier and Type
Method
Description
Class
<?>
Line.Info.
getLineClass
()
Obtains the class of the line that this
Line.Info
object
 describes.
Constructors in
javax.sound.sampled
with parameters of type
Class
Modifier
Constructor
Description
Info
(
Class
<?> lineClass,
AudioFormat
format)
Constructs a data line's info object from the specified information,
 which includes a single audio format.
Info
(
Class
<?> lineClass,
AudioFormat
[] formats,
 int minBufferSize,
 int maxBufferSize)
Constructs a data line's info object from the specified information,
 which includes a set of supported audio formats and a range for the
 buffer size.
Info
(
Class
<?> lineClass,
AudioFormat
format,
 int bufferSize)
Constructs a data line's info object from the specified information,
 which includes a single audio format and a desired buffer size.
Info
(
Class
<?> lineClass)
Constructs an info object that describes a line of the specified
 class.
Info
(
Class
<?> lineClass,
String
name,
 boolean isSource)
Constructs a port's info object from the information given.
Uses of
Class
in
javax.sql
Methods in
javax.sql
that return types with arguments of type
Class
Modifier and Type
Method
Description
Map
<
String
,
Class
<?>>
RowSet.
getTypeMap
()
Retrieves the
Map
object associated with this
RowSet
object, which specifies the custom mapping
 of SQL user-defined types, if any.
Method parameters in
javax.sql
with type arguments of type
Class
Modifier and Type
Method
Description
void
RowSet.
setTypeMap
(
Map
<
String
,
Class
<?>> map)
Installs the given
java.util.Map
object as the default
 type map for this
RowSet
object.
Uses of
Class
in
javax.sql.rowset
Methods in
javax.sql.rowset
that return types with arguments of type
Class
Modifier and Type
Method
Description
Map
<
String
,
Class
<?>>
BaseRowSet.
getTypeMap
()
Retrieves the type map associated with the
Connection
object for this
RowSet
object.
Methods in
javax.sql.rowset
with parameters of type
Class
Modifier and Type
Method
Description
boolean
RowSetMetaDataImpl.
isWrapperFor
(
Class
<?> interfaces)
Returns true if this either implements the interface argument or is directly or indirectly a wrapper
 for an object that does.
<T> T
RowSetMetaDataImpl.
unwrap
(
Class
<T> iface)
Returns an object that implements the given interface to allow access to non-standard methods,
 or standard methods not exposed by the proxy.
Method parameters in
javax.sql.rowset
with type arguments of type
Class
Modifier and Type
Method
Description
void
BaseRowSet.
setTypeMap
(
Map
<
String
,
Class
<?>> map)
Installs the given
java.util.Map
object as the type map
 associated with the
Connection
object for this
RowSet
object.
Uses of
Class
in
javax.sql.rowset.serial
Method parameters in
javax.sql.rowset.serial
with type arguments of type
Class
Modifier and Type
Method
Description
Object
SerialArray.
getArray
(long index,
 int count,
Map
<
String
,
Class
<?>> map)
Returns a new array that is a copy of a slice
 of this
SerialArray
object, starting with the
 element at the given index and containing the given number
 of consecutive elements.
Object
SerialArray.
getArray
(
Map
<
String
,
Class
<?>> map)
Returns a new array that is a copy of this
SerialArray
object, using the given type map for the custom
 mapping of each element when the elements are SQL UDTs.
Object
[]
SerialStruct.
getAttributes
(
Map
<
String
,
Class
<?>> map)
Retrieves the attributes for the SQL structured type that
 this
SerialStruct
represents as an array of
Object
values, using the given type map for
 custom mapping if appropriate.
Object
SerialRef.
getObject
(
Map
<
String
,
Class
<?>> map)
Returns an
Object
representing the SQL structured type
 to which this
SerialRef
object refers.
ResultSet
SerialArray.
getResultSet
(long index,
 int count,
Map
<
String
,
Class
<?>> map)
Retrieves a result set holding the elements of the subarray that starts at
 Retrieves a
ResultSet
object that contains a subarray of the
 elements in this
SerialArray
object, starting at
 index
index
and containing up to
count
successive
 elements.
ResultSet
SerialArray.
getResultSet
(
Map
<
String
,
Class
<?>> map)
Retrieves a
ResultSet
object that contains all of
 the elements of the SQL
ARRAY
value represented by this
SerialArray
object.
Constructor parameters in
javax.sql.rowset.serial
with type arguments of type
Class
Modifier
Constructor
Description
SerialArray
(
Array
array,
Map
<
String
,
Class
<?>> map)
Constructs a new
SerialArray
object from the given
Array
object, using the given type map for the custom
 mapping of each element when the elements are SQL UDTs.
SerialStruct
(
SQLData
in,
Map
<
String
,
Class
<?>> map)
Constructs a
SerialStruct
object from the
 given
SQLData
object, using the given type
 map to custom map it to a class in the Java programming
 language.
SerialStruct
(
Struct
in,
Map
<
String
,
Class
<?>> map)
Constructs a
SerialStruct
object from the given
Struct
object, using the given
java.util.Map
object for custom mapping the SQL structured type or any of its
 attributes that are SQL structured types.
SQLInputImpl
(
Object
[] attributes,
Map
<
String
,
Class
<?>> map)
Creates an
SQLInputImpl
object initialized with the
 given array of attributes and the given type map.
Uses of
Class
in
javax.swing
Methods in
javax.swing
that return
Class
Modifier and Type
Method
Description
Class
<?>
JTable.
getColumnClass
(int column)
Returns the type of the column appearing in the view at
 column position
column
.
Class
<? extends
ComponentUI
>
UIDefaults.
getUIClass
(
String
uiClassID)
Returns the L&F class that renders this component.
Class
<? extends
ComponentUI
>
UIDefaults.
getUIClass
(
String
uiClassID,
ClassLoader
uiClassLoader)
The value of
get(uidClassID)
must be the
String
name of a
 class that implements the corresponding
ComponentUI
class.
Methods in
javax.swing
with parameters of type
Class
Modifier and Type
Method
Description
static
Container
SwingUtilities.
getAncestorOfClass
(
Class
<?> c,
Component
comp)
Convenience method for searching above
comp
in the
 component hierarchy and returns the first object of class
c
it
 finds.
TableCellEditor
JTable.
getDefaultEditor
(
Class
<?> columnClass)
Returns the editor to be used when no editor has been set in
 a
TableColumn
.
TableCellRenderer
JTable.
getDefaultRenderer
(
Class
<?> columnClass)
Returns the cell renderer to be used when no renderer has been set in
 a
TableColumn
.
<T extends
EventListener
>
T[]
AbstractListModel.
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered as
Foo
Listener
s
 upon this model.
<T extends
EventListener
>
T[]
AbstractSpinnerModel.
getListeners
(
Class
<T> listenerType)
Return an array of all the listeners of the given type that
 were added to this model.
<T extends
EventListener
>
T[]
DefaultBoundedRangeModel.
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered as
Foo
Listener
s
 upon this model.
<T extends
EventListener
>
T[]
DefaultButtonModel.
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered as
Foo
Listener
s
 upon this model.
<T extends
EventListener
>
T[]
DefaultListSelectionModel.
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered as
Foo
Listener
s
 upon this model.
<T extends
EventListener
>
T[]
DefaultSingleSelectionModel.
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered as
Foo
Listener
s
 upon this model.
<T extends
EventListener
>
T[]
JComponent.
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered
 as
Foo
Listener
s
 upon this
JComponent
.
<T extends
EventListener
>
T[]
Timer.
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered as
Foo
Listener
s
 upon this
Timer
.
static
Object
LookAndFeel.
makeIcon
(
Class
<?> baseClass,
String
gifFile)
Creates and returns a
UIDefault.LazyValue
that loads an
 image.
void
JTable.
setDefaultEditor
(
Class
<?> columnClass,
TableCellEditor
editor)
Sets a default cell editor to be used if no editor has been set in
 a
TableColumn
.
void
JTable.
setDefaultRenderer
(
Class
<?> columnClass,
TableCellRenderer
renderer)
Sets a default cell renderer to be used if no renderer has been set in
 a
TableColumn
.
Uses of
Class
in
javax.swing.event
Methods in
javax.swing.event
with parameters of type
Class
Modifier and Type
Method
Description
<T extends
EventListener
>
void
EventListenerList.
add
(
Class
<T> t,
 T l)
Adds the listener as a listener of the specified type.
int
EventListenerList.
getListenerCount
(
Class
<?> t)
Returns the total number of listeners of the supplied type
 for this listener list.
<T extends
EventListener
>
T[]
EventListenerList.
getListeners
(
Class
<T> t)
Return an array of all the listeners of the given type.
<T extends
EventListener
>
void
EventListenerList.
remove
(
Class
<T> t,
 T l)
Removes the listener as a listener of the specified type.
Uses of
Class
in
javax.swing.plaf.synth
Methods in
javax.swing.plaf.synth
with parameters of type
Class
Modifier and Type
Method
Description
void
SynthLookAndFeel.
load
(
InputStream
input,
Class
<?> resourceBase)
Loads the set of
SynthStyle
s that will be used by
 this
SynthLookAndFeel
.
Uses of
Class
in
javax.swing.table
Methods in
javax.swing.table
that return
Class
Modifier and Type
Method
Description
Class
<?>
AbstractTableModel.
getColumnClass
(int columnIndex)
Returns
Object.class
regardless of
columnIndex
.
Class
<?>
TableModel.
getColumnClass
(int columnIndex)
Returns the most specific superclass for all the cell values
 in the column.
Methods in
javax.swing.table
with parameters of type
Class
Modifier and Type
Method
Description
<T extends
EventListener
>
T[]
AbstractTableModel.
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered
 as
Foo
Listener
s
 upon this
AbstractTableModel
.
<T extends
EventListener
>
T[]
DefaultTableColumnModel.
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered
 as
Foo
Listener
s
 upon this model.
Uses of
Class
in
javax.swing.text
Methods in
javax.swing.text
that return
Class
Modifier and Type
Method
Description
Class
<?>
DefaultFormatter.
getValueClass
()
Returns that class that is used to create new Objects.
Methods in
javax.swing.text
with parameters of type
Class
Modifier and Type
Method
Description
<T extends
EventListener
>
T[]
AbstractDocument.
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered
 as
Foo
Listener
s
 upon this document.
<T extends
EventListener
>
T[]
DefaultCaret.
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered
 as
Foo
Listener
s
 upon this caret.
<T extends
EventListener
>
T[]
StyleContext.NamedStyle.
getListeners
(
Class
<T> listenerType)
Return an array of all the listeners of the given type that
 were added to this model.
void
DefaultFormatter.
setValueClass
(
Class
<?> valueClass)
Sets that class that is used to create new Objects.
Uses of
Class
in
javax.swing.tree
Methods in
javax.swing.tree
with parameters of type
Class
Modifier and Type
Method
Description
<T extends
EventListener
>
T[]
DefaultTreeModel.
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered
 as
Foo
Listener
s
 upon this model.
<T extends
EventListener
>
T[]
DefaultTreeSelectionModel.
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered
 as
Foo
Listener
s
 upon this model.
Uses of
Class
in
javax.tools
Methods in
javax.tools
with parameters of type
Class
Modifier and Type
Method
Description
<S>
ServiceLoader
<S>
ForwardingJavaFileManager.
getServiceLoader
(
JavaFileManager.Location
location,
Class
<S> service)
default <S>
ServiceLoader
<S>
JavaFileManager.
getServiceLoader
(
JavaFileManager.Location
location,
Class
<S> service)
Get a service loader for a specific service class from a given location.
DocumentationTool.DocumentationTask
DocumentationTool.
getTask
(
Writer
out,
JavaFileManager
fileManager,
DiagnosticListener
<? super
JavaFileObject
> diagnosticListener,
Class
<?> docletClass,
Iterable
<
String
> options,
Iterable
<? extends
JavaFileObject
> compilationUnits)
Creates a future for a documentation task with the given
 components and arguments.
Uses of
Class
in
javax.xml.xpath
Methods in
javax.xml.xpath
with parameters of type
Class
Modifier and Type
Method
Description
default <T> T
XPath.
evaluateExpression
(
String
expression,
Object
item,
Class
<T> type)
Evaluate an XPath expression in the specified context and return
 the result with the type specified through the
class type
default <T> T
XPath.
evaluateExpression
(
String
expression,
InputSource
source,
Class
<T> type)
Evaluate an XPath expression in the context of the specified
source
and return the result as specified.
default <T> T
XPathExpression.
evaluateExpression
(
Object
item,
Class
<T> type)
Evaluate the compiled XPath expression in the specified context, and return
 the result with the type specified through the
class type
.
default <T> T
XPathExpression.
evaluateExpression
(
InputSource
source,
Class
<T> type)
Evaluate the compiled XPath expression in the specified context,
 and return the result with the type specified through the
class type
static
QName
XPathEvaluationResult.XPathResultType.
getQNameType
(
Class
<?> clsType)
Returns the QName type as specified in
XPathConstants
that
 corresponds to the specified class type.
Uses of
Class
in
jdk.dynalink.beans
Methods in
jdk.dynalink.beans
that return
Class
Modifier and Type
Method
Description
Class
<?>
StaticClass.
getRepresentedClass
()
Returns the represented Java class.
Methods in
jdk.dynalink.beans
with parameters of type
Class
Modifier and Type
Method
Description
static
StaticClass
StaticClass.
forClass
(
Class
<?> clazz)
Retrieves the
StaticClass
instance for the specified class.
static
Object
BeansLinker.
getConstructorMethod
(
Class
<?> clazz,
String
signature)
Return the dynamic method of constructor of the given class and the given
 signature.
static
Set
<
String
>
BeansLinker.
getInstanceMethodNames
(
Class
<?> clazz)
Returns a set of names of all instance methods of a class.
TypeBasedGuardingDynamicLinker
BeansLinker.
getLinkerForClass
(
Class
<?> clazz)
Returns a bean linker for a particular single class.
static
Set
<
String
>
BeansLinker.
getReadableInstancePropertyNames
(
Class
<?> clazz)
Returns a set of names of all readable instance properties of a class.
static
Set
<
String
>
BeansLinker.
getReadableStaticPropertyNames
(
Class
<?> clazz)
Returns a set of names of all readable static properties of a class.
static
Set
<
String
>
BeansLinker.
getStaticMethodNames
(
Class
<?> clazz)
Returns a set of names of all static methods of a class.
static
Set
<
String
>
BeansLinker.
getWritableInstancePropertyNames
(
Class
<?> clazz)
Returns a set of names of all writable instance properties of a class.
static
Set
<
String
>
BeansLinker.
getWritableStaticPropertyNames
(
Class
<?> clazz)
Returns a set of names of all writable static properties of a class.
Uses of
Class
in
jdk.dynalink.linker
Methods in
jdk.dynalink.linker
that return
Class
Modifier and Type
Method
Description
Class
<? extends
Throwable
>
GuardedInvocation.
getException
()
Returns the exception type that if thrown by the invocation should
 invalidate the linkage of this guarded invocation.
Methods in
jdk.dynalink.linker
with parameters of type
Class
Modifier and Type
Method
Description
boolean
LinkerServices.
canConvert
(
Class
<?> from,
Class
<?> to)
Returns true if there might exist a conversion between the requested
 types (either an automatic JVM conversion, or one provided by any
 available
GuardingTypeConverterFactory
), or false if there
 definitely does not exist a conversion between the requested types.
boolean
TypeBasedGuardingDynamicLinker.
canLinkType
(
Class
<?> type)
Returns true if the linker can link an invocation where the first argument (receiver) is of the specified type.
ConversionComparator.Comparison
ConversionComparator.
compareConversion
(
Class
<?> sourceType,
Class
<?> targetType1,
Class
<?> targetType2)
Determines which of the two target types is the preferred conversion
 target from a source type.
ConversionComparator.Comparison
LinkerServices.
compareConversion
(
Class
<?> sourceType,
Class
<?> targetType1,
Class
<?> targetType2)
Determines which of the two type conversions from a source type to the
 two target types is preferred.
GuardedInvocation
GuardingTypeConverterFactory.
convertToType
(
Class
<?> sourceType,
Class
<?> targetType,
Supplier
<
MethodHandles.Lookup
> lookupSupplier)
Returns a guarded type conversion that receives a value of the specified
 source type and returns a value converted to the specified target type.
GuardedInvocation
GuardedInvocation.
dropArguments
(int pos,
Class
<?>... valueTypes)
Makes an invocation that drops arguments in both the invocation and the
 guard (if it exists and has at least
pos
parameters) with
MethodHandles.dropArguments(MethodHandle, int, Class...)
.
MethodHandle
LinkerServices.
getTypeConverter
(
Class
<?> sourceType,
Class
<?> targetType)
Given a source and target type, returns a method handle that converts
 between them.
Method parameters in
jdk.dynalink.linker
with type arguments of type
Class
Modifier and Type
Method
Description
GuardedInvocation
GuardedInvocation.
dropArguments
(int pos,
List
<
Class
<?>> valueTypes)
Makes an invocation that drops arguments in both the invocation and the
 guard (if it exists and has at least
pos
parameters) with
MethodHandles.dropArguments(MethodHandle, int, List)
.
Constructors in
jdk.dynalink.linker
with parameters of type
Class
Modifier
Constructor
Description
GuardedInvocation
(
MethodHandle
invocation,
MethodHandle
guard,
SwitchPoint
[] switchPoints,
Class
<? extends
Throwable
> exception)
Creates a new guarded invocation, with a guard method handle, any number
 of switch points that can be used to invalidate it, and an exception that
 if thrown when invoked also invalidates it.
GuardedInvocation
(
MethodHandle
invocation,
MethodHandle
guard,
SwitchPoint
switchPoint,
Class
<? extends
Throwable
> exception)
Creates a new guarded invocation, with a guard method handle, a
 switch point that can be used to invalidate it, and an exception that if
 thrown when invoked also invalidates it.
Uses of
Class
in
jdk.dynalink.linker.support
Methods in
jdk.dynalink.linker.support
that return
Class
Modifier and Type
Method
Description
static
Class
<?>
TypeUtilities.
getPrimitiveType
(
Class
<?> wrapperType)
When passed a class representing a wrapper for a primitive type, returns
 the class representing the corresponding primitive type.
static
Class
<?>
TypeUtilities.
getPrimitiveTypeByName
(
String
name)
Given a name of a primitive type returns the class representing it.
static
Class
<?>
TypeUtilities.
getWrapperType
(
Class
<?> primitiveType)
When passed a class representing a primitive type, returns the class representing the corresponding
 wrapper type.
Methods in
jdk.dynalink.linker.support
with parameters of type
Class
Modifier and Type
Method
Description
boolean
CompositeTypeBasedGuardingDynamicLinker.
canLinkType
(
Class
<?> type)
Returns true if at least one of the composite linkers returns true from
TypeBasedGuardingDynamicLinker.canLinkType(Class)
for the type.
MethodHandle
Lookup.
findGetter
(
Class
<?> refc,
String
name,
Class
<?> type)
Performs a
MethodHandles.Lookup.findGetter(Class, String, Class)
,
 converting any encountered
IllegalAccessException
into an
IllegalAccessError
and
NoSuchFieldException
into a
NoSuchFieldError
.
static
MethodHandle
Lookup.
findOwnSpecial
(
MethodHandles.Lookup
lookup,
String
name,
Class
<?> rtype,
Class
<?>... ptypes)
Given a lookup, finds using
Lookup.findSpecial(Class, String, MethodType)
a method on that lookup's class.
MethodHandle
Lookup.
findOwnSpecial
(
String
name,
Class
<?> rtype,
Class
<?>... ptypes)
Finds using
Lookup.findSpecial(Class, String, MethodType)
a method on
 that lookup's class.
static
MethodHandle
Lookup.
findOwnStatic
(
MethodHandles.Lookup
lookup,
String
name,
Class
<?> rtype,
Class
<?>... ptypes)
Given a lookup, finds using
Lookup.findStatic(Class, String, MethodType)
a method on that lookup's class.
MethodHandle
Lookup.
findOwnStatic
(
String
name,
Class
<?> rtype,
Class
<?>... ptypes)
Finds using
Lookup.findStatic(Class, String, MethodType)
a method on
 that lookup's class.
MethodHandle
Lookup.
findSpecial
(
Class
<?> declaringClass,
String
name,
MethodType
type)
Performs a
MethodHandles.Lookup.findSpecial(Class, String, MethodType, Class)
on the underlying lookup.
MethodHandle
Lookup.
findStatic
(
Class
<?> declaringClass,
String
name,
MethodType
type)
Performs a
MethodHandles.Lookup.findStatic(Class, String, MethodType)
on the underlying lookup.
MethodHandle
Lookup.
findVirtual
(
Class
<?> declaringClass,
String
name,
MethodType
type)
Performs a
MethodHandles.Lookup.findVirtual(Class, String, MethodType)
on the underlying lookup.
static
MethodHandle
Guards.
getClassGuard
(
Class
<?> clazz)
Creates a guard method that tests its only argument for being of an exact particular class.
static
MethodHandle
Guards.
getInstanceOfGuard
(
Class
<?> clazz)
Creates a guard method that tests its only argument for being an instance of a particular class.
static
Class
<?>
TypeUtilities.
getPrimitiveType
(
Class
<?> wrapperType)
When passed a class representing a wrapper for a primitive type, returns
 the class representing the corresponding primitive type.
static
Class
<?>
TypeUtilities.
getWrapperType
(
Class
<?> primitiveType)
When passed a class representing a primitive type, returns the class representing the corresponding
 wrapper type.
static boolean
TypeUtilities.
isConvertibleWithoutLoss
(
Class
<?> sourceType,
Class
<?> targetType)
Determines whether a type can be converted to another without losing any
 precision.
static
MethodHandle
Guards.
isInstance
(
Class
<?> clazz,
 int pos,
MethodType
type)
Creates a method handle with arguments of a specified type, but with boolean return value.
static
MethodHandle
Guards.
isInstance
(
Class
<?> clazz,
MethodType
type)
Creates a method handle with arguments of a specified type, but with boolean return value.
static boolean
TypeUtilities.
isMethodInvocationConvertible
(
Class
<?> sourceType,
Class
<?> targetType)
Determines whether one type can be converted to another type using a method invocation conversion, as per JLS 5.3
 "Method Invocation Conversion".
static
MethodHandle
Guards.
isOfClass
(
Class
<?> clazz,
MethodType
type)
Creates a guard method handle with arguments of a specified type, but with boolean return value.
static boolean
TypeUtilities.
isSubtype
(
Class
<?> subType,
Class
<?> superType)
Determines whether one type is a subtype of another type, as per JLS
 4.10 "Subtyping".
static boolean
TypeUtilities.
isWrapperType
(
Class
<?> type)
Returns true if the passed type is a wrapper for a primitive type.
Uses of
Class
in
jdk.incubator.vector
Methods in
jdk.incubator.vector
that return
Class
Modifier and Type
Method
Description
Class
<
E
>
VectorOperators.Conversion.
domainType
()
The domain of this conversion, a primitive type.
abstract
Class
<
E
>
Vector.
elementType
()
Returns the primitive
element type
(
ETYPE
) of this vector.
Class
<
E
>
VectorSpecies.
elementType
()
Returns the primitive element type of vectors of this
 species.
Class
<? extends
VectorMask
<
E
>>
VectorSpecies.
maskType
()
Returns the vector mask type for this species.
Class
<
F
>
VectorOperators.Conversion.
rangeType
()
The range of this conversion, a primitive type.
Class
<?>
VectorOperators.Operator.
rangeType
()
Reports the special return type of this operator.
Class
<? extends
Vector
<
E
>>
VectorSpecies.
vectorType
()
Returns the vector type of this species.
Methods in
jdk.incubator.vector
with parameters of type
Class
Modifier and Type
Method
Description
abstract <F>
Vector
<F>
Vector.
check
(
Class
<F> elementType)
Checks that this vector has the given element type,
 and returns this vector unchanged.
abstract <F>
VectorMask
<F>
VectorMask.
check
(
Class
<F> elementType)
Checks that this mask applies to vectors with the given element type,
 and returns this mask unchanged.
<E,
F>
VectorOperators.Conversion
<E,
F>
VectorOperators.Conversion.
check
(
Class
<E> from,
Class
<F> to)
Ensures that this conversion has the
 desired domain and range types.
<F>
VectorSpecies
<F>
VectorSpecies.
check
(
Class
<F> elementType)
Checks that this species has the given element type,
 and returns this species unchanged.
boolean
VectorOperators.Operator.
compatibleWith
(
Class
<?> elementType)
Reports whether this operator is compatible with
 the proposed element type.
static int
VectorSpecies.
elementSize
(
Class
<?> elementType)
Returns the bit-size of the given vector element type (
ETYPE
).
static <E>
VectorSpecies
<E>
VectorSpecies.
of
(
Class
<E> elementType,
VectorShape
shape)
Finds a species for an element type and shape.
static <E,
F>
VectorOperators.Conversion
<E,
F>
VectorOperators.Conversion.
ofCast
(
Class
<E> from,
Class
<F> to)
The Java language assignment or casting conversion between two types.
static <E>
VectorSpecies
<E>
VectorSpecies.
ofLargestShape
(
Class
<E> etype)
Finds the largest vector species of the given element type.
static <E>
VectorSpecies
<E>
VectorSpecies.
ofPreferred
(
Class
<E> etype)
Finds the species preferred by the current platform
 for a given vector element type.
static <E,
F>
VectorOperators.Conversion
<E,
F>
VectorOperators.Conversion.
ofReinterpret
(
Class
<E> from,
Class
<F> to)
The bitwise reinterpretation between two types.
<E>
VectorSpecies
<E>
VectorShape.
withLanes
(
Class
<E> elementType)
Finds a vector species with the given element type
 and the current shape.
<F>
VectorSpecies
<F>
VectorSpecies.
withLanes
(
Class
<F> newType)
Finds a species with the given element type and the
 same shape as this species.
Uses of
Class
in
jdk.jfr
Methods in
jdk.jfr
with parameters of type
Class
Modifier and Type
Method
Description
static void
FlightRecorder.
addPeriodicEvent
(
Class
<? extends
Event
> eventClass,
Runnable
hook)
Adds a hook for a periodic event.
EventSettings
Recording.
disable
(
Class
<? extends
Event
> eventClass)
Disables event.
EventSettings
Recording.
enable
(
Class
<? extends
Event
> eventClass)
Enables event.
final <A> A
AnnotationElement.
getAnnotation
(
Class
<? extends
Annotation
> annotationType)
Returns the first annotation for the specified type if an
AnnotationElement
with the same name exists, else
null
.
<A extends
Annotation
>
A
EventType.
getAnnotation
(
Class
<A> annotationClass)
Returns the first annotation for the specified type if an annotation
 element with the same name is directly present, otherwise
null
.
<A extends
Annotation
>
A
SettingDescriptor.
getAnnotation
(
Class
<A> annotationType)
Returns the first annotation for the specified type if an annotation
 element with the same name is available,
null
otherwise.
<A extends
Annotation
>
A
ValueDescriptor.
getAnnotation
(
Class
<A> annotationType)
Returns the first annotation for the specified type if an annotation
 element with the same name is directly present for this value descriptor,
null
otherwise.
static
EventType
EventType.
getEventType
(
Class
<? extends
Event
> eventClass)
Returns the event type for an event class, or
null
if it doesn't
 exist.
static void
FlightRecorder.
register
(
Class
<? extends
Event
> eventClass)
Registers an event class.
static void
FlightRecorder.
unregister
(
Class
<? extends
Event
> eventClass)
Unregisters an event class.
Constructors in
jdk.jfr
with parameters of type
Class
Modifier
Constructor
Description
AnnotationElement
(
Class
<? extends
Annotation
> annotationType)
Creates an annotation element to use for dynamically defined events.
AnnotationElement
(
Class
<? extends
Annotation
> annotationType,
Object
value)
Creates an annotation element to use for dynamically defined events.
AnnotationElement
(
Class
<? extends
Annotation
> annotationType,
Map
<
String
,
Object
> values)
Creates an annotation element to use for dynamically defined events.
ValueDescriptor
(
Class
<?> type,
String
name)
Constructs a value descriptor, useful for dynamically creating event types and
 annotations.
ValueDescriptor
(
Class
<?> type,
String
name,
List
<
AnnotationElement
> annotations)
Constructs a value descriptor, useful for dynamically creating event types and
 annotations.
Uses of
Class
in
jdk.jfr.consumer
Methods in
jdk.jfr.consumer
with parameters of type
Class
Modifier and Type
Method
Description
EventSettings
RecordingStream.
disable
(
Class
<? extends
Event
> eventClass)
Disables event.
EventSettings
RecordingStream.
enable
(
Class
<? extends
Event
> eventClass)
Enables event.
Uses of
Class
in
jdk.jshell.execution
Methods in
jdk.jshell.execution
that return
Class
Modifier and Type
Method
Description
protected
Class
<?>
DirectExecutionControl.
findClass
(
String
name)
Finds the class with the specified binary name.
Class
<?>
LoaderDelegate.
findClass
(
String
name)
Finds the class with the specified binary name.
Uses of
Class
in
jdk.net
Methods in
jdk.net
with parameters of type
Class
Modifier and Type
Method
Description
static
Set
<
SocketOption
<?>>
Sockets.
supportedOptions
(
Class
<?> socketType)
Deprecated, for removal: This API element is subject to removal in a future version.
use
Socket.supportedOptions()
,
ServerSocket.supportedOptions()
,
             or
DatagramSocket.supportedOptions()
instead.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.