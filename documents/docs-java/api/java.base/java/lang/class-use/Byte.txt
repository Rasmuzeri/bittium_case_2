Uses of Class java.lang.Byte (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Class
java.lang.Byte
Packages that use
Byte
Package
Description
java.lang
Provides classes that are fundamental to the design of the Java
 programming language.
javax.management.openmbean
Provides the open data types and Open MBean descriptor classes.
jdk.incubator.vector
Incubating Feature.
Will be removed in a future release.
Uses of
Byte
in
java.lang
Fields in
java.lang
with type parameters of type
Byte
Modifier and Type
Field
Description
static final
Class
<
Byte
>
Byte.
TYPE
The
Class
instance representing the primitive type
byte
.
Methods in
java.lang
that return
Byte
Modifier and Type
Method
Description
static
Byte
Byte.
decode
(
String
nm)
Decodes a
String
into a
Byte
.
static
Byte
Byte.
valueOf
(byte b)
Returns a
Byte
instance representing the specified
byte
value.
static
Byte
Byte.
valueOf
(
String
s)
Returns a
Byte
object holding the value
 given by the specified
String
.
static
Byte
Byte.
valueOf
(
String
s,
 int radix)
Returns a
Byte
object holding the value
 extracted from the specified
String
when parsed
 with the radix given by the second argument.
Methods in
java.lang
that return types with arguments of type
Byte
Modifier and Type
Method
Description
Optional
<
DynamicConstantDesc
<
Byte
>>
Byte.
describeConstable
()
Returns an
Optional
containing the nominal descriptor for this
 instance.
Methods in
java.lang
with parameters of type
Byte
Modifier and Type
Method
Description
int
Byte.
compareTo
(
Byte
anotherByte)
Compares two
Byte
objects numerically.
Uses of
Byte
in
javax.management.openmbean
Fields in
javax.management.openmbean
with type parameters of type
Byte
Modifier and Type
Field
Description
static final
SimpleType
<
Byte
>
SimpleType.
BYTE
The
SimpleType
instance describing values whose
 Java class name is
java.lang.Byte
.
Uses of
Byte
in
jdk.incubator.vector
Fields in
jdk.incubator.vector
with type parameters of type
Byte
Modifier and Type
Field
Description
static final
VectorOperators.Conversion
<
Byte
,
Double
>
VectorOperators.
B2D
Convert
byteVal
to
(double)byteVal
.
static final
VectorOperators.Conversion
<
Byte
,
Float
>
VectorOperators.
B2F
Convert
byteVal
to
(float)byteVal
.
static final
VectorOperators.Conversion
<
Byte
,
Integer
>
VectorOperators.
B2I
Convert
byteVal
to
(int)byteVal
.
static final
VectorOperators.Conversion
<
Byte
,
Long
>
VectorOperators.
B2L
Convert
byteVal
to
(long)byteVal
.
static final
VectorOperators.Conversion
<
Byte
,
Short
>
VectorOperators.
B2S
Convert
byteVal
to
(short)byteVal
.
static final
VectorOperators.Conversion
<
Double
,
Byte
>
VectorOperators.
D2B
Convert
doubleVal
to
(byte)doubleVal
.
static final
VectorOperators.Conversion
<
Float
,
Byte
>
VectorOperators.
F2B
Convert
floatVal
to
(byte)floatVal
.
static final
VectorOperators.Conversion
<
Integer
,
Byte
>
VectorOperators.
I2B
Convert
intVal
to
(byte)intVal
.
static final
VectorOperators.Conversion
<
Long
,
Byte
>
VectorOperators.
L2B
Convert
longVal
to
(byte)longVal
.
static final
VectorOperators.Conversion
<
Short
,
Byte
>
VectorOperators.
S2B
Convert
shortVal
to
(byte)shortVal
.
static final
VectorSpecies
<
Byte
>
ByteVector.
SPECIES_128
Species representing
ByteVector
s of
VectorShape.S_128_BIT
.
static final
VectorSpecies
<
Byte
>
ByteVector.
SPECIES_256
Species representing
ByteVector
s of
VectorShape.S_256_BIT
.
static final
VectorSpecies
<
Byte
>
ByteVector.
SPECIES_512
Species representing
ByteVector
s of
VectorShape.S_512_BIT
.
static final
VectorSpecies
<
Byte
>
ByteVector.
SPECIES_64
Species representing
ByteVector
s of
VectorShape.S_64_BIT
.
static final
VectorSpecies
<
Byte
>
ByteVector.
SPECIES_MAX
Species representing
ByteVector
s of
VectorShape.S_Max_BIT
.
static final
VectorSpecies
<
Byte
>
ByteVector.
SPECIES_PREFERRED
Preferred species for
ByteVector
s.
static final
VectorOperators.Conversion
<
Byte
,
Integer
>
VectorOperators.
ZERO_EXTEND_B2I
Zero-extend
byteVal
to
int
.
static final
VectorOperators.Conversion
<
Byte
,
Long
>
VectorOperators.
ZERO_EXTEND_B2L
Zero-extend
byteVal
to
long
.
static final
VectorOperators.Conversion
<
Byte
,
Short
>
VectorOperators.
ZERO_EXTEND_B2S
Zero-extend
byteVal
to
short
.
Methods in
jdk.incubator.vector
that return types with arguments of type
Byte
Modifier and Type
Method
Description
abstract
VectorMask
<
Byte
>
ByteVector.
compare
(
VectorOperators.Comparison
op,
 byte e)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation.
final
VectorMask
<
Byte
>
ByteVector.
compare
(
VectorOperators.Comparison
op,
 byte e,
VectorMask
<
Byte
> m)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
abstract
VectorMask
<
Byte
>
ByteVector.
compare
(
VectorOperators.Comparison
op,
 long e)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation.
final
VectorMask
<
Byte
>
ByteVector.
compare
(
VectorOperators.Comparison
op,
 long e,
VectorMask
<
Byte
> m)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
abstract
VectorMask
<
Byte
>
ByteVector.
compare
(
VectorOperators.Comparison
op,
Vector
<
Byte
> v)
Tests this vector by comparing it with another input vector,
 according to the given comparison operation.
final
VectorMask
<
Byte
>
ByteVector.
eq
(byte e)
Tests if this vector is equal to an input scalar.
final
VectorMask
<
Byte
>
ByteVector.
eq
(
Vector
<
Byte
> v)
Tests if this vector is equal to another input vector.
final
VectorMask
<
Byte
>
ByteVector.
lt
(byte e)
Tests if this vector is less than an input scalar.
final
VectorMask
<
Byte
>
ByteVector.
lt
(
Vector
<
Byte
> v)
Tests if this vector is less than another input vector.
abstract
VectorMask
<
Byte
>
ByteVector.
test
(
VectorOperators.Test
op)
Tests the lanes of this vector
 according to the given operation.
abstract
VectorMask
<
Byte
>
ByteVector.
test
(
VectorOperators.Test
op,
VectorMask
<
Byte
> m)
Test selected lanes of this vector,
 according to the given operation.
Method parameters in
jdk.incubator.vector
with type arguments of type
Byte
Modifier and Type
Method
Description
final
ByteVector
ByteVector.
add
(byte e,
VectorMask
<
Byte
> m)
Adds this vector to the broadcast of an input scalar,
 selecting lane elements controlled by a mask.
final
ByteVector
ByteVector.
add
(
Vector
<
Byte
> v)
Adds this vector to a second input vector.
final
ByteVector
ByteVector.
add
(
Vector
<
Byte
> v,
VectorMask
<
Byte
> m)
Adds this vector to a second input vector, selecting lanes
 under the control of a mask.
final
ByteVector
ByteVector.
add
(
Vector
<
Byte
> v,
VectorMask
<
Byte
> m)
Adds this vector to a second input vector, selecting lanes
 under the control of a mask.
final
ByteVector
ByteVector.
and
(
Vector
<
Byte
> v)
Computes the bitwise logical conjunction (
&
)
 of this vector and a second input vector.
final
ByteVector
ByteVector.
bitwiseBlend
(byte bits,
Vector
<
Byte
> mask)
Blends together the bits of a vector and a scalar under
 the control of another vector, which supplies mask bits.
final
ByteVector
ByteVector.
bitwiseBlend
(
Vector
<
Byte
> bits,
 byte mask)
Blends together the bits of two vectors under
 the control of a scalar, which supplies mask bits.
final
ByteVector
ByteVector.
bitwiseBlend
(
Vector
<
Byte
> bits,
Vector
<
Byte
> mask)
Blends together the bits of two vectors under
 the control of a third, which supplies mask bits.
final
ByteVector
ByteVector.
blend
(byte e,
VectorMask
<
Byte
> m)
Replaces selected lanes of this vector with
 a scalar value
 under the control of a mask.
final
ByteVector
ByteVector.
blend
(long e,
VectorMask
<
Byte
> m)
Replaces selected lanes of this vector with
 a scalar value
 under the control of a mask.
abstract
ByteVector
ByteVector.
blend
(
Vector
<
Byte
> v,
VectorMask
<
Byte
> m)
Replaces selected lanes of this vector with
 corresponding lanes from a second input vector
 under the control of a mask.
abstract
ByteVector
ByteVector.
blend
(
Vector
<
Byte
> v,
VectorMask
<
Byte
> m)
Replaces selected lanes of this vector with
 corresponding lanes from a second input vector
 under the control of a mask.
static
ByteVector
ByteVector.
broadcast
(
VectorSpecies
<
Byte
> species,
 byte e)
Returns a vector of the given species
 where all lane elements are set to
 the primitive value
e
.
static
ByteVector
ByteVector.
broadcast
(
VectorSpecies
<
Byte
> species,
 long e)
Returns a vector of the given species
 where all lane elements are set to
 the primitive value
e
.
final
VectorMask
<
Byte
>
ByteVector.
compare
(
VectorOperators.Comparison
op,
 byte e,
VectorMask
<
Byte
> m)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
final
VectorMask
<
Byte
>
ByteVector.
compare
(
VectorOperators.Comparison
op,
 long e,
VectorMask
<
Byte
> m)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
abstract
VectorMask
<
Byte
>
ByteVector.
compare
(
VectorOperators.Comparison
op,
Vector
<
Byte
> v)
Tests this vector by comparing it with another input vector,
 according to the given comparison operation.
abstract
ByteVector
ByteVector.
compress
(
VectorMask
<
Byte
> m)
Compresses the lane elements of this vector selecting lanes
 under the control of a specific mask.
final
ByteVector
ByteVector.
div
(byte e,
VectorMask
<
Byte
> m)
Divides this vector by the broadcast of an input scalar,
 selecting lane elements controlled by a mask.
final
ByteVector
ByteVector.
div
(
Vector
<
Byte
> v)
Divides this vector by a second input vector.
final
ByteVector
ByteVector.
div
(
Vector
<
Byte
> v,
VectorMask
<
Byte
> m)
Divides this vector by a second input vector
 under the control of a mask.
final
ByteVector
ByteVector.
div
(
Vector
<
Byte
> v,
VectorMask
<
Byte
> m)
Divides this vector by a second input vector
 under the control of a mask.
final
VectorMask
<
Byte
>
ByteVector.
eq
(
Vector
<
Byte
> v)
Tests if this vector is equal to another input vector.
abstract
ByteVector
ByteVector.
expand
(
VectorMask
<
Byte
> m)
Expands the lane elements of this vector
 under the control of a specific mask.
static
ByteVector
ByteVector.
fromArray
(
VectorSpecies
<
Byte
> species,
 byte[] a,
 int offset)
Loads a vector from an array of type
byte[]
starting at an offset.
static
ByteVector
ByteVector.
fromArray
(
VectorSpecies
<
Byte
> species,
 byte[] a,
 int offset,
 int[] indexMap,
 int mapOffset)
Gathers a new vector composed of elements from an array of type
byte[]
,
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
static
ByteVector
ByteVector.
fromArray
(
VectorSpecies
<
Byte
> species,
 byte[] a,
 int offset,
 int[] indexMap,
 int mapOffset,
VectorMask
<
Byte
> m)
Gathers a new vector composed of elements from an array of type
byte[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
static
ByteVector
ByteVector.
fromArray
(
VectorSpecies
<
Byte
> species,
 byte[] a,
 int offset,
 int[] indexMap,
 int mapOffset,
VectorMask
<
Byte
> m)
Gathers a new vector composed of elements from an array of type
byte[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
static
ByteVector
ByteVector.
fromArray
(
VectorSpecies
<
Byte
> species,
 byte[] a,
 int offset,
VectorMask
<
Byte
> m)
Loads a vector from an array of type
byte[]
starting at an offset and using a mask.
static
ByteVector
ByteVector.
fromArray
(
VectorSpecies
<
Byte
> species,
 byte[] a,
 int offset,
VectorMask
<
Byte
> m)
Loads a vector from an array of type
byte[]
starting at an offset and using a mask.
static
ByteVector
ByteVector.
fromBooleanArray
(
VectorSpecies
<
Byte
> species,
 boolean[] a,
 int offset)
Loads a vector from an array of type
boolean[]
starting at an offset.
static
ByteVector
ByteVector.
fromBooleanArray
(
VectorSpecies
<
Byte
> species,
 boolean[] a,
 int offset,
 int[] indexMap,
 int mapOffset)
Gathers a new vector composed of elements from an array of type
boolean[]
,
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
static
ByteVector
ByteVector.
fromBooleanArray
(
VectorSpecies
<
Byte
> species,
 boolean[] a,
 int offset,
 int[] indexMap,
 int mapOffset,
VectorMask
<
Byte
> m)
Gathers a new vector composed of elements from an array of type
boolean[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
static
ByteVector
ByteVector.
fromBooleanArray
(
VectorSpecies
<
Byte
> species,
 boolean[] a,
 int offset,
 int[] indexMap,
 int mapOffset,
VectorMask
<
Byte
> m)
Gathers a new vector composed of elements from an array of type
boolean[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
static
ByteVector
ByteVector.
fromBooleanArray
(
VectorSpecies
<
Byte
> species,
 boolean[] a,
 int offset,
VectorMask
<
Byte
> m)
Loads a vector from an array of type
boolean[]
starting at an offset and using a mask.
static
ByteVector
ByteVector.
fromBooleanArray
(
VectorSpecies
<
Byte
> species,
 boolean[] a,
 int offset,
VectorMask
<
Byte
> m)
Loads a vector from an array of type
boolean[]
starting at an offset and using a mask.
static
ByteVector
ByteVector.
fromMemorySegment
(
VectorSpecies
<
Byte
> species,
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo)
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment.
static
ByteVector
ByteVector.
fromMemorySegment
(
VectorSpecies
<
Byte
> species,
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo,
VectorMask
<
Byte
> m)
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment
 and using a mask.
static
ByteVector
ByteVector.
fromMemorySegment
(
VectorSpecies
<
Byte
> species,
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo,
VectorMask
<
Byte
> m)
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment
 and using a mask.
final void
ByteVector.
intoArray
(byte[] a,
 int offset,
 int[] indexMap,
 int mapOffset,
VectorMask
<
Byte
> m)
Scatters this vector into an array of type
byte[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
final void
ByteVector.
intoArray
(byte[] a,
 int offset,
VectorMask
<
Byte
> m)
Stores this vector into an array of type
byte[]
starting at offset and using a mask.
final void
ByteVector.
intoBooleanArray
(boolean[] a,
 int offset,
 int[] indexMap,
 int mapOffset,
VectorMask
<
Byte
> m)
Scatters this vector into an array of type
boolean[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
final void
ByteVector.
intoBooleanArray
(boolean[] a,
 int offset,
VectorMask
<
Byte
> m)
Stores this vector into an array of type
boolean[]
starting at offset and using a mask.
final void
ByteVector.
intoMemorySegment
(
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo,
VectorMask
<
Byte
> m)
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order and a mask.
final
ByteVector
ByteVector.
lanewise
(
VectorOperators.Binary
op,
 byte e,
VectorMask
<
Byte
> m)
Combines the lane values of this vector
 with the value of a broadcast scalar,
 with selection of lane elements controlled by a mask.
final
ByteVector
ByteVector.
lanewise
(
VectorOperators.Binary
op,
 long e,
VectorMask
<
Byte
> m)
Combines the corresponding lane values of this vector
 with those of a second input vector,
 with selection of lane elements controlled by a mask.
abstract
ByteVector
ByteVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Byte
> v)
Combines the corresponding lane values of this vector
 with those of a second input vector.
abstract
ByteVector
ByteVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Byte
> v,
VectorMask
<
Byte
> m)
Combines the corresponding lane values of this vector
 with those of a second input vector,
 with selection of lane elements controlled by a mask.
abstract
ByteVector
ByteVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Byte
> v,
VectorMask
<
Byte
> m)
Combines the corresponding lane values of this vector
 with those of a second input vector,
 with selection of lane elements controlled by a mask.
final
ByteVector
ByteVector.
lanewise
(
VectorOperators.Ternary
op,
 byte e1,
 byte e2,
VectorMask
<
Byte
> m)
Combines the lane values of this vector
 with the values of two broadcast scalars,
 with selection of lane elements controlled by a mask.
final
ByteVector
ByteVector.
lanewise
(
VectorOperators.Ternary
op,
 byte e1,
Vector
<
Byte
> v2)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar.
final
ByteVector
ByteVector.
lanewise
(
VectorOperators.Ternary
op,
 byte e1,
Vector
<
Byte
> v2,
VectorMask
<
Byte
> m)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar,
 with selection of lane elements controlled by a mask.
final
ByteVector
ByteVector.
lanewise
(
VectorOperators.Ternary
op,
 byte e1,
Vector
<
Byte
> v2,
VectorMask
<
Byte
> m)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar,
 with selection of lane elements controlled by a mask.
final
ByteVector
ByteVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Byte
> v1,
 byte e2)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar.
final
ByteVector
ByteVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Byte
> v1,
 byte e2,
VectorMask
<
Byte
> m)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar,
 with selection of lane elements controlled by a mask.
final
ByteVector
ByteVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Byte
> v1,
 byte e2,
VectorMask
<
Byte
> m)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar,
 with selection of lane elements controlled by a mask.
abstract
ByteVector
ByteVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Byte
> v1,
Vector
<
Byte
> v2)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector.
abstract
ByteVector
ByteVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Byte
> v1,
Vector
<
Byte
> v2,
VectorMask
<
Byte
> m)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector,
 with selection of lane elements controlled by a mask.
abstract
ByteVector
ByteVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Byte
> v1,
Vector
<
Byte
> v2,
VectorMask
<
Byte
> m)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector,
 with selection of lane elements controlled by a mask.
abstract
ByteVector
ByteVector.
lanewise
(
VectorOperators.Unary
op,
VectorMask
<
Byte
> m)
Operates on the lane values of this vector,
 with selection of lane elements controlled by a mask.
final
VectorMask
<
Byte
>
ByteVector.
lt
(
Vector
<
Byte
> v)
Tests if this vector is less than another input vector.
final
ByteVector
ByteVector.
max
(
Vector
<
Byte
> v)
Computes the larger of this vector and a second input vector.
final
ByteVector
ByteVector.
min
(
Vector
<
Byte
> v)
Computes the smaller of this vector and a second input vector.
final
ByteVector
ByteVector.
mul
(byte e,
VectorMask
<
Byte
> m)
Multiplies this vector by the broadcast of an input scalar,
 selecting lane elements controlled by a mask.
final
ByteVector
ByteVector.
mul
(
Vector
<
Byte
> v)
Multiplies this vector by a second input vector.
final
ByteVector
ByteVector.
mul
(
Vector
<
Byte
> v,
VectorMask
<
Byte
> m)
Multiplies this vector by a second input vector
 under the control of a mask.
final
ByteVector
ByteVector.
mul
(
Vector
<
Byte
> v,
VectorMask
<
Byte
> m)
Multiplies this vector by a second input vector
 under the control of a mask.
final
ByteVector
ByteVector.
or
(
Vector
<
Byte
> v)
Computes the bitwise logical disjunction (
|
)
 of this vector and a second input vector.
abstract
ByteVector
ByteVector.
rearrange
(
VectorShuffle
<
Byte
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle.
abstract
ByteVector
ByteVector.
rearrange
(
VectorShuffle
<
Byte
> s,
Vector
<
Byte
> v)
Rearranges the lane elements of two vectors, selecting lanes
 under the control of a specific shuffle, using both normal and
 exceptional indexes in the shuffle to steer data.
abstract
ByteVector
ByteVector.
rearrange
(
VectorShuffle
<
Byte
> s,
Vector
<
Byte
> v)
Rearranges the lane elements of two vectors, selecting lanes
 under the control of a specific shuffle, using both normal and
 exceptional indexes in the shuffle to steer data.
abstract
ByteVector
ByteVector.
rearrange
(
VectorShuffle
<
Byte
> s,
VectorMask
<
Byte
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle and a mask.
abstract
ByteVector
ByteVector.
rearrange
(
VectorShuffle
<
Byte
> s,
VectorMask
<
Byte
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle and a mask.
abstract byte
ByteVector.
reduceLanes
(
VectorOperators.Associative
op,
VectorMask
<
Byte
> m)
Returns a value accumulated from selected lanes of this vector,
 controlled by a mask.
abstract
ByteVector
ByteVector.
selectFrom
(
Vector
<
Byte
> v)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector
v
.
abstract
ByteVector
ByteVector.
selectFrom
(
Vector
<
Byte
> s,
VectorMask
<
Byte
> m)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector, under the control
 of a mask.
abstract
ByteVector
ByteVector.
selectFrom
(
Vector
<
Byte
> s,
VectorMask
<
Byte
> m)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector, under the control
 of a mask.
abstract
ByteVector
ByteVector.
slice
(int origin,
Vector
<
Byte
> v1)
Slices a segment of adjacent lanes, starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
final
ByteVector
ByteVector.
slice
(int origin,
Vector
<
Byte
> w,
VectorMask
<
Byte
> m)
Slices a segment of adjacent lanes
 under the control of a mask,
 starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
final
ByteVector
ByteVector.
slice
(int origin,
Vector
<
Byte
> w,
VectorMask
<
Byte
> m)
Slices a segment of adjacent lanes
 under the control of a mask,
 starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
final
ByteVector
ByteVector.
sub
(byte e,
VectorMask
<
Byte
> m)
Subtracts an input scalar from this vector
 under the control of a mask.
final
ByteVector
ByteVector.
sub
(
Vector
<
Byte
> v)
Subtracts a second input vector from this vector.
final
ByteVector
ByteVector.
sub
(
Vector
<
Byte
> v,
VectorMask
<
Byte
> m)
Subtracts a second input vector from this vector
 under the control of a mask.
final
ByteVector
ByteVector.
sub
(
Vector
<
Byte
> v,
VectorMask
<
Byte
> m)
Subtracts a second input vector from this vector
 under the control of a mask.
abstract
VectorMask
<
Byte
>
ByteVector.
test
(
VectorOperators.Test
op,
VectorMask
<
Byte
> m)
Test selected lanes of this vector,
 according to the given operation.
abstract
ByteVector
ByteVector.
unslice
(int origin,
Vector
<
Byte
> w,
 int part)
Reverses a
slice()
, inserting
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
abstract
ByteVector
ByteVector.
unslice
(int origin,
Vector
<
Byte
> w,
 int part,
VectorMask
<
Byte
> m)
Reverses a
slice()
, inserting
 (under the control of a mask)
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
abstract
ByteVector
ByteVector.
unslice
(int origin,
Vector
<
Byte
> w,
 int part,
VectorMask
<
Byte
> m)
Reverses a
slice()
, inserting
 (under the control of a mask)
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
static
ByteVector
ByteVector.
zero
(
VectorSpecies
<
Byte
> species)
Returns a vector of the given species
 where all lane elements are set to
 zero, the default primitive value.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.