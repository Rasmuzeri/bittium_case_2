Uses of Class java.lang.Short (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Class
java.lang.Short
Packages that use
Short
Package
Description
java.lang
Provides classes that are fundamental to the design of the Java
 programming language.
javax.management.openmbean
Provides the open data types and Open MBean descriptor classes.
jdk.incubator.vector
Incubating Feature.
Will be removed in a future release.
Uses of
Short
in
java.lang
Fields in
java.lang
with type parameters of type
Short
Modifier and Type
Field
Description
static final
Class
<
Short
>
Short.
TYPE
The
Class
instance representing the primitive type
short
.
Methods in
java.lang
that return
Short
Modifier and Type
Method
Description
static
Short
Short.
decode
(
String
nm)
Decodes a
String
into a
Short
.
static
Short
Short.
valueOf
(short s)
Returns a
Short
instance representing the specified
short
value.
static
Short
Short.
valueOf
(
String
s)
Returns a
Short
object holding the
 value given by the specified
String
.
static
Short
Short.
valueOf
(
String
s,
 int radix)
Returns a
Short
object holding the value
 extracted from the specified
String
when parsed
 with the radix given by the second argument.
Methods in
java.lang
that return types with arguments of type
Short
Modifier and Type
Method
Description
Optional
<
DynamicConstantDesc
<
Short
>>
Short.
describeConstable
()
Returns an
Optional
containing the nominal descriptor for this
 instance.
Methods in
java.lang
with parameters of type
Short
Modifier and Type
Method
Description
int
Short.
compareTo
(
Short
anotherShort)
Compares two
Short
objects numerically.
Uses of
Short
in
javax.management.openmbean
Fields in
javax.management.openmbean
with type parameters of type
Short
Modifier and Type
Field
Description
static final
SimpleType
<
Short
>
SimpleType.
SHORT
The
SimpleType
instance describing values whose
 Java class name is
java.lang.Short
.
Uses of
Short
in
jdk.incubator.vector
Fields in
jdk.incubator.vector
with type parameters of type
Short
Modifier and Type
Field
Description
static final
VectorOperators.Conversion
<
Byte
,
Short
>
VectorOperators.
B2S
Convert
byteVal
to
(short)byteVal
.
static final
VectorOperators.Conversion
<
Double
,
Short
>
VectorOperators.
D2S
Convert
doubleVal
to
(short)doubleVal
.
static final
VectorOperators.Conversion
<
Float
,
Short
>
VectorOperators.
F2S
Convert
floatVal
to
(short)floatVal
.
static final
VectorOperators.Conversion
<
Integer
,
Short
>
VectorOperators.
I2S
Convert
intVal
to
(short)intVal
.
static final
VectorOperators.Conversion
<
Long
,
Short
>
VectorOperators.
L2S
Convert
longVal
to
(short)longVal
.
static final
VectorOperators.Conversion
<
Short
,
Byte
>
VectorOperators.
S2B
Convert
shortVal
to
(byte)shortVal
.
static final
VectorOperators.Conversion
<
Short
,
Double
>
VectorOperators.
S2D
Convert
shortVal
to
(double)shortVal
.
static final
VectorOperators.Conversion
<
Short
,
Float
>
VectorOperators.
S2F
Convert
shortVal
to
(float)shortVal
.
static final
VectorOperators.Conversion
<
Short
,
Integer
>
VectorOperators.
S2I
Convert
shortVal
to
(int)shortVal
.
static final
VectorOperators.Conversion
<
Short
,
Long
>
VectorOperators.
S2L
Convert
shortVal
to
(long)shortVal
.
static final
VectorSpecies
<
Short
>
ShortVector.
SPECIES_128
Species representing
ShortVector
s of
VectorShape.S_128_BIT
.
static final
VectorSpecies
<
Short
>
ShortVector.
SPECIES_256
Species representing
ShortVector
s of
VectorShape.S_256_BIT
.
static final
VectorSpecies
<
Short
>
ShortVector.
SPECIES_512
Species representing
ShortVector
s of
VectorShape.S_512_BIT
.
static final
VectorSpecies
<
Short
>
ShortVector.
SPECIES_64
Species representing
ShortVector
s of
VectorShape.S_64_BIT
.
static final
VectorSpecies
<
Short
>
ShortVector.
SPECIES_MAX
Species representing
ShortVector
s of
VectorShape.S_Max_BIT
.
static final
VectorSpecies
<
Short
>
ShortVector.
SPECIES_PREFERRED
Preferred species for
ShortVector
s.
static final
VectorOperators.Conversion
<
Byte
,
Short
>
VectorOperators.
ZERO_EXTEND_B2S
Zero-extend
byteVal
to
short
.
static final
VectorOperators.Conversion
<
Short
,
Integer
>
VectorOperators.
ZERO_EXTEND_S2I
Zero-extend
shortVal
to
int
.
static final
VectorOperators.Conversion
<
Short
,
Long
>
VectorOperators.
ZERO_EXTEND_S2L
Zero-extend
shortVal
to
long
.
Methods in
jdk.incubator.vector
that return types with arguments of type
Short
Modifier and Type
Method
Description
abstract
VectorMask
<
Short
>
ShortVector.
compare
(
VectorOperators.Comparison
op,
 long e)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation.
final
VectorMask
<
Short
>
ShortVector.
compare
(
VectorOperators.Comparison
op,
 long e,
VectorMask
<
Short
> m)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
abstract
VectorMask
<
Short
>
ShortVector.
compare
(
VectorOperators.Comparison
op,
 short e)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation.
final
VectorMask
<
Short
>
ShortVector.
compare
(
VectorOperators.Comparison
op,
 short e,
VectorMask
<
Short
> m)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
abstract
VectorMask
<
Short
>
ShortVector.
compare
(
VectorOperators.Comparison
op,
Vector
<
Short
> v)
Tests this vector by comparing it with another input vector,
 according to the given comparison operation.
final
VectorMask
<
Short
>
ShortVector.
eq
(short e)
Tests if this vector is equal to an input scalar.
final
VectorMask
<
Short
>
ShortVector.
eq
(
Vector
<
Short
> v)
Tests if this vector is equal to another input vector.
final
VectorMask
<
Short
>
ShortVector.
lt
(short e)
Tests if this vector is less than an input scalar.
final
VectorMask
<
Short
>
ShortVector.
lt
(
Vector
<
Short
> v)
Tests if this vector is less than another input vector.
abstract
VectorMask
<
Short
>
ShortVector.
test
(
VectorOperators.Test
op)
Tests the lanes of this vector
 according to the given operation.
abstract
VectorMask
<
Short
>
ShortVector.
test
(
VectorOperators.Test
op,
VectorMask
<
Short
> m)
Test selected lanes of this vector,
 according to the given operation.
Method parameters in
jdk.incubator.vector
with type arguments of type
Short
Modifier and Type
Method
Description
final
ShortVector
ShortVector.
add
(short e,
VectorMask
<
Short
> m)
Adds this vector to the broadcast of an input scalar,
 selecting lane elements controlled by a mask.
final
ShortVector
ShortVector.
add
(
Vector
<
Short
> v)
Adds this vector to a second input vector.
final
ShortVector
ShortVector.
add
(
Vector
<
Short
> v,
VectorMask
<
Short
> m)
Adds this vector to a second input vector, selecting lanes
 under the control of a mask.
final
ShortVector
ShortVector.
add
(
Vector
<
Short
> v,
VectorMask
<
Short
> m)
Adds this vector to a second input vector, selecting lanes
 under the control of a mask.
final
ShortVector
ShortVector.
and
(
Vector
<
Short
> v)
Computes the bitwise logical conjunction (
&
)
 of this vector and a second input vector.
final
ShortVector
ShortVector.
bitwiseBlend
(short bits,
Vector
<
Short
> mask)
Blends together the bits of a vector and a scalar under
 the control of another vector, which supplies mask bits.
final
ShortVector
ShortVector.
bitwiseBlend
(
Vector
<
Short
> bits,
 short mask)
Blends together the bits of two vectors under
 the control of a scalar, which supplies mask bits.
final
ShortVector
ShortVector.
bitwiseBlend
(
Vector
<
Short
> bits,
Vector
<
Short
> mask)
Blends together the bits of two vectors under
 the control of a third, which supplies mask bits.
final
ShortVector
ShortVector.
blend
(long e,
VectorMask
<
Short
> m)
Replaces selected lanes of this vector with
 a scalar value
 under the control of a mask.
final
ShortVector
ShortVector.
blend
(short e,
VectorMask
<
Short
> m)
Replaces selected lanes of this vector with
 a scalar value
 under the control of a mask.
abstract
ShortVector
ShortVector.
blend
(
Vector
<
Short
> v,
VectorMask
<
Short
> m)
Replaces selected lanes of this vector with
 corresponding lanes from a second input vector
 under the control of a mask.
abstract
ShortVector
ShortVector.
blend
(
Vector
<
Short
> v,
VectorMask
<
Short
> m)
Replaces selected lanes of this vector with
 corresponding lanes from a second input vector
 under the control of a mask.
static
ShortVector
ShortVector.
broadcast
(
VectorSpecies
<
Short
> species,
 long e)
Returns a vector of the given species
 where all lane elements are set to
 the primitive value
e
.
static
ShortVector
ShortVector.
broadcast
(
VectorSpecies
<
Short
> species,
 short e)
Returns a vector of the given species
 where all lane elements are set to
 the primitive value
e
.
final
VectorMask
<
Short
>
ShortVector.
compare
(
VectorOperators.Comparison
op,
 long e,
VectorMask
<
Short
> m)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
final
VectorMask
<
Short
>
ShortVector.
compare
(
VectorOperators.Comparison
op,
 short e,
VectorMask
<
Short
> m)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
abstract
VectorMask
<
Short
>
ShortVector.
compare
(
VectorOperators.Comparison
op,
Vector
<
Short
> v)
Tests this vector by comparing it with another input vector,
 according to the given comparison operation.
abstract
ShortVector
ShortVector.
compress
(
VectorMask
<
Short
> m)
Compresses the lane elements of this vector selecting lanes
 under the control of a specific mask.
final
ShortVector
ShortVector.
div
(short e,
VectorMask
<
Short
> m)
Divides this vector by the broadcast of an input scalar,
 selecting lane elements controlled by a mask.
final
ShortVector
ShortVector.
div
(
Vector
<
Short
> v)
Divides this vector by a second input vector.
final
ShortVector
ShortVector.
div
(
Vector
<
Short
> v,
VectorMask
<
Short
> m)
Divides this vector by a second input vector
 under the control of a mask.
final
ShortVector
ShortVector.
div
(
Vector
<
Short
> v,
VectorMask
<
Short
> m)
Divides this vector by a second input vector
 under the control of a mask.
final
VectorMask
<
Short
>
ShortVector.
eq
(
Vector
<
Short
> v)
Tests if this vector is equal to another input vector.
abstract
ShortVector
ShortVector.
expand
(
VectorMask
<
Short
> m)
Expands the lane elements of this vector
 under the control of a specific mask.
static
ShortVector
ShortVector.
fromArray
(
VectorSpecies
<
Short
> species,
 short[] a,
 int offset)
Loads a vector from an array of type
short[]
starting at an offset.
static
ShortVector
ShortVector.
fromArray
(
VectorSpecies
<
Short
> species,
 short[] a,
 int offset,
 int[] indexMap,
 int mapOffset)
Gathers a new vector composed of elements from an array of type
short[]
,
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
static
ShortVector
ShortVector.
fromArray
(
VectorSpecies
<
Short
> species,
 short[] a,
 int offset,
 int[] indexMap,
 int mapOffset,
VectorMask
<
Short
> m)
Gathers a new vector composed of elements from an array of type
short[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
static
ShortVector
ShortVector.
fromArray
(
VectorSpecies
<
Short
> species,
 short[] a,
 int offset,
 int[] indexMap,
 int mapOffset,
VectorMask
<
Short
> m)
Gathers a new vector composed of elements from an array of type
short[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
static
ShortVector
ShortVector.
fromArray
(
VectorSpecies
<
Short
> species,
 short[] a,
 int offset,
VectorMask
<
Short
> m)
Loads a vector from an array of type
short[]
starting at an offset and using a mask.
static
ShortVector
ShortVector.
fromArray
(
VectorSpecies
<
Short
> species,
 short[] a,
 int offset,
VectorMask
<
Short
> m)
Loads a vector from an array of type
short[]
starting at an offset and using a mask.
static
ShortVector
ShortVector.
fromCharArray
(
VectorSpecies
<
Short
> species,
 char[] a,
 int offset)
Loads a vector from an array of type
char[]
starting at an offset.
static
ShortVector
ShortVector.
fromCharArray
(
VectorSpecies
<
Short
> species,
 char[] a,
 int offset,
 int[] indexMap,
 int mapOffset)
Gathers a new vector composed of elements from an array of type
char[]
,
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
static
ShortVector
ShortVector.
fromCharArray
(
VectorSpecies
<
Short
> species,
 char[] a,
 int offset,
 int[] indexMap,
 int mapOffset,
VectorMask
<
Short
> m)
Gathers a new vector composed of elements from an array of type
char[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
static
ShortVector
ShortVector.
fromCharArray
(
VectorSpecies
<
Short
> species,
 char[] a,
 int offset,
 int[] indexMap,
 int mapOffset,
VectorMask
<
Short
> m)
Gathers a new vector composed of elements from an array of type
char[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
static
ShortVector
ShortVector.
fromCharArray
(
VectorSpecies
<
Short
> species,
 char[] a,
 int offset,
VectorMask
<
Short
> m)
Loads a vector from an array of type
char[]
starting at an offset and using a mask.
static
ShortVector
ShortVector.
fromCharArray
(
VectorSpecies
<
Short
> species,
 char[] a,
 int offset,
VectorMask
<
Short
> m)
Loads a vector from an array of type
char[]
starting at an offset and using a mask.
static
ShortVector
ShortVector.
fromMemorySegment
(
VectorSpecies
<
Short
> species,
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo)
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment.
static
ShortVector
ShortVector.
fromMemorySegment
(
VectorSpecies
<
Short
> species,
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo,
VectorMask
<
Short
> m)
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment
 and using a mask.
static
ShortVector
ShortVector.
fromMemorySegment
(
VectorSpecies
<
Short
> species,
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo,
VectorMask
<
Short
> m)
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment
 and using a mask.
final void
ShortVector.
intoArray
(short[] a,
 int offset,
 int[] indexMap,
 int mapOffset,
VectorMask
<
Short
> m)
Scatters this vector into an array of type
short[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
final void
ShortVector.
intoArray
(short[] a,
 int offset,
VectorMask
<
Short
> m)
Stores this vector into an array of type
short[]
starting at offset and using a mask.
final void
ShortVector.
intoCharArray
(char[] a,
 int offset,
 int[] indexMap,
 int mapOffset,
VectorMask
<
Short
> m)
Scatters this vector into an array of type
char[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
final void
ShortVector.
intoCharArray
(char[] a,
 int offset,
VectorMask
<
Short
> m)
Stores this vector into an array of type
char[]
starting at offset and using a mask.
final void
ShortVector.
intoMemorySegment
(
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo,
VectorMask
<
Short
> m)
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order and a mask.
final
ShortVector
ShortVector.
lanewise
(
VectorOperators.Binary
op,
 long e,
VectorMask
<
Short
> m)
Combines the corresponding lane values of this vector
 with those of a second input vector,
 with selection of lane elements controlled by a mask.
final
ShortVector
ShortVector.
lanewise
(
VectorOperators.Binary
op,
 short e,
VectorMask
<
Short
> m)
Combines the lane values of this vector
 with the value of a broadcast scalar,
 with selection of lane elements controlled by a mask.
abstract
ShortVector
ShortVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Short
> v)
Combines the corresponding lane values of this vector
 with those of a second input vector.
abstract
ShortVector
ShortVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Short
> v,
VectorMask
<
Short
> m)
Combines the corresponding lane values of this vector
 with those of a second input vector,
 with selection of lane elements controlled by a mask.
abstract
ShortVector
ShortVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Short
> v,
VectorMask
<
Short
> m)
Combines the corresponding lane values of this vector
 with those of a second input vector,
 with selection of lane elements controlled by a mask.
final
ShortVector
ShortVector.
lanewise
(
VectorOperators.Ternary
op,
 short e1,
 short e2,
VectorMask
<
Short
> m)
Combines the lane values of this vector
 with the values of two broadcast scalars,
 with selection of lane elements controlled by a mask.
final
ShortVector
ShortVector.
lanewise
(
VectorOperators.Ternary
op,
 short e1,
Vector
<
Short
> v2)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar.
final
ShortVector
ShortVector.
lanewise
(
VectorOperators.Ternary
op,
 short e1,
Vector
<
Short
> v2,
VectorMask
<
Short
> m)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar,
 with selection of lane elements controlled by a mask.
final
ShortVector
ShortVector.
lanewise
(
VectorOperators.Ternary
op,
 short e1,
Vector
<
Short
> v2,
VectorMask
<
Short
> m)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar,
 with selection of lane elements controlled by a mask.
final
ShortVector
ShortVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Short
> v1,
 short e2)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar.
final
ShortVector
ShortVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Short
> v1,
 short e2,
VectorMask
<
Short
> m)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar,
 with selection of lane elements controlled by a mask.
final
ShortVector
ShortVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Short
> v1,
 short e2,
VectorMask
<
Short
> m)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar,
 with selection of lane elements controlled by a mask.
abstract
ShortVector
ShortVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Short
> v1,
Vector
<
Short
> v2)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector.
abstract
ShortVector
ShortVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Short
> v1,
Vector
<
Short
> v2,
VectorMask
<
Short
> m)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector,
 with selection of lane elements controlled by a mask.
abstract
ShortVector
ShortVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Short
> v1,
Vector
<
Short
> v2,
VectorMask
<
Short
> m)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector,
 with selection of lane elements controlled by a mask.
abstract
ShortVector
ShortVector.
lanewise
(
VectorOperators.Unary
op,
VectorMask
<
Short
> m)
Operates on the lane values of this vector,
 with selection of lane elements controlled by a mask.
final
VectorMask
<
Short
>
ShortVector.
lt
(
Vector
<
Short
> v)
Tests if this vector is less than another input vector.
final
ShortVector
ShortVector.
max
(
Vector
<
Short
> v)
Computes the larger of this vector and a second input vector.
final
ShortVector
ShortVector.
min
(
Vector
<
Short
> v)
Computes the smaller of this vector and a second input vector.
final
ShortVector
ShortVector.
mul
(short e,
VectorMask
<
Short
> m)
Multiplies this vector by the broadcast of an input scalar,
 selecting lane elements controlled by a mask.
final
ShortVector
ShortVector.
mul
(
Vector
<
Short
> v)
Multiplies this vector by a second input vector.
final
ShortVector
ShortVector.
mul
(
Vector
<
Short
> v,
VectorMask
<
Short
> m)
Multiplies this vector by a second input vector
 under the control of a mask.
final
ShortVector
ShortVector.
mul
(
Vector
<
Short
> v,
VectorMask
<
Short
> m)
Multiplies this vector by a second input vector
 under the control of a mask.
final
ShortVector
ShortVector.
or
(
Vector
<
Short
> v)
Computes the bitwise logical disjunction (
|
)
 of this vector and a second input vector.
abstract
ShortVector
ShortVector.
rearrange
(
VectorShuffle
<
Short
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle.
abstract
ShortVector
ShortVector.
rearrange
(
VectorShuffle
<
Short
> s,
Vector
<
Short
> v)
Rearranges the lane elements of two vectors, selecting lanes
 under the control of a specific shuffle, using both normal and
 exceptional indexes in the shuffle to steer data.
abstract
ShortVector
ShortVector.
rearrange
(
VectorShuffle
<
Short
> s,
Vector
<
Short
> v)
Rearranges the lane elements of two vectors, selecting lanes
 under the control of a specific shuffle, using both normal and
 exceptional indexes in the shuffle to steer data.
abstract
ShortVector
ShortVector.
rearrange
(
VectorShuffle
<
Short
> s,
VectorMask
<
Short
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle and a mask.
abstract
ShortVector
ShortVector.
rearrange
(
VectorShuffle
<
Short
> s,
VectorMask
<
Short
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle and a mask.
abstract short
ShortVector.
reduceLanes
(
VectorOperators.Associative
op,
VectorMask
<
Short
> m)
Returns a value accumulated from selected lanes of this vector,
 controlled by a mask.
abstract
ShortVector
ShortVector.
selectFrom
(
Vector
<
Short
> v)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector
v
.
abstract
ShortVector
ShortVector.
selectFrom
(
Vector
<
Short
> s,
VectorMask
<
Short
> m)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector, under the control
 of a mask.
abstract
ShortVector
ShortVector.
selectFrom
(
Vector
<
Short
> s,
VectorMask
<
Short
> m)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector, under the control
 of a mask.
abstract
ShortVector
ShortVector.
slice
(int origin,
Vector
<
Short
> v1)
Slices a segment of adjacent lanes, starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
final
ShortVector
ShortVector.
slice
(int origin,
Vector
<
Short
> w,
VectorMask
<
Short
> m)
Slices a segment of adjacent lanes
 under the control of a mask,
 starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
final
ShortVector
ShortVector.
slice
(int origin,
Vector
<
Short
> w,
VectorMask
<
Short
> m)
Slices a segment of adjacent lanes
 under the control of a mask,
 starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
final
ShortVector
ShortVector.
sub
(short e,
VectorMask
<
Short
> m)
Subtracts an input scalar from this vector
 under the control of a mask.
final
ShortVector
ShortVector.
sub
(
Vector
<
Short
> v)
Subtracts a second input vector from this vector.
final
ShortVector
ShortVector.
sub
(
Vector
<
Short
> v,
VectorMask
<
Short
> m)
Subtracts a second input vector from this vector
 under the control of a mask.
final
ShortVector
ShortVector.
sub
(
Vector
<
Short
> v,
VectorMask
<
Short
> m)
Subtracts a second input vector from this vector
 under the control of a mask.
abstract
VectorMask
<
Short
>
ShortVector.
test
(
VectorOperators.Test
op,
VectorMask
<
Short
> m)
Test selected lanes of this vector,
 according to the given operation.
abstract
ShortVector
ShortVector.
unslice
(int origin,
Vector
<
Short
> w,
 int part)
Reverses a
slice()
, inserting
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
abstract
ShortVector
ShortVector.
unslice
(int origin,
Vector
<
Short
> w,
 int part,
VectorMask
<
Short
> m)
Reverses a
slice()
, inserting
 (under the control of a mask)
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
abstract
ShortVector
ShortVector.
unslice
(int origin,
Vector
<
Short
> w,
 int part,
VectorMask
<
Short
> m)
Reverses a
slice()
, inserting
 (under the control of a mask)
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
static
ShortVector
ShortVector.
zero
(
VectorSpecies
<
Short
> species)
Returns a vector of the given species
 where all lane elements are set to
 zero, the default primitive value.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.