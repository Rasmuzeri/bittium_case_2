Uses of Class java.lang.Float (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Class
java.lang.Float
Packages that use
Float
Package
Description
java.awt.font
Provides classes and interface relating to fonts.
java.lang
Provides classes that are fundamental to the design of the Java
 programming language.
javax.management.openmbean
Provides the open data types and Open MBean descriptor classes.
jdk.incubator.vector
Incubating Feature.
Will be removed in a future release.
Uses of
Float
in
java.awt.font
Fields in
java.awt.font
declared as
Float
Modifier and Type
Field
Description
static final
Float
TextAttribute.
JUSTIFICATION_FULL
Justify the line to the full requested width.
static final
Float
TextAttribute.
JUSTIFICATION_NONE
Do not allow the line to be justified.
static final
Float
TextAttribute.
POSTURE_OBLIQUE
The standard italic posture.
static final
Float
TextAttribute.
POSTURE_REGULAR
The standard posture, upright.
static final
Float
TextAttribute.
TRACKING_LOOSE
Perform loose tracking.
static final
Float
TextAttribute.
TRACKING_TIGHT
Perform tight tracking.
static final
Float
TextAttribute.
WEIGHT_BOLD
The standard bold weight.
static final
Float
TextAttribute.
WEIGHT_DEMIBOLD
A moderately lighter weight than
WEIGHT_BOLD
.
static final
Float
TextAttribute.
WEIGHT_DEMILIGHT
An intermediate weight between
WEIGHT_LIGHT
and
WEIGHT_STANDARD
.
static final
Float
TextAttribute.
WEIGHT_EXTRA_LIGHT
The lightest predefined weight.
static final
Float
TextAttribute.
WEIGHT_EXTRABOLD
An extra heavy weight.
static final
Float
TextAttribute.
WEIGHT_HEAVY
A moderately heavier weight than
WEIGHT_BOLD
.
static final
Float
TextAttribute.
WEIGHT_LIGHT
The standard light weight.
static final
Float
TextAttribute.
WEIGHT_MEDIUM
An intermediate weight between
WEIGHT_REGULAR
and
WEIGHT_BOLD
.
static final
Float
TextAttribute.
WEIGHT_REGULAR
The standard weight.
static final
Float
TextAttribute.
WEIGHT_SEMIBOLD
A moderately heavier weight than
WEIGHT_REGULAR
.
static final
Float
TextAttribute.
WEIGHT_ULTRABOLD
The heaviest predefined weight.
static final
Float
TextAttribute.
WIDTH_CONDENSED
The most condensed predefined width.
static final
Float
TextAttribute.
WIDTH_EXTENDED
The most extended predefined width.
static final
Float
TextAttribute.
WIDTH_REGULAR
The standard width.
static final
Float
TextAttribute.
WIDTH_SEMI_CONDENSED
A moderately condensed width.
static final
Float
TextAttribute.
WIDTH_SEMI_EXTENDED
A moderately extended width.
Uses of
Float
in
java.lang
Fields in
java.lang
with type parameters of type
Float
Modifier and Type
Field
Description
static final
Class
<
Float
>
Float.
TYPE
The
Class
instance representing the primitive type
float
.
Methods in
java.lang
that return
Float
Modifier and Type
Method
Description
Float
Float.
resolveConstantDesc
(
MethodHandles.Lookup
lookup)
Resolves this instance as a
ConstantDesc
, the result of which is
 the instance itself.
static
Float
Float.
valueOf
(float f)
Returns a
Float
instance representing the specified
float
value.
static
Float
Float.
valueOf
(
String
s)
Returns a
Float
object holding the
float
value represented by the argument string
s
.
Methods in
java.lang
that return types with arguments of type
Float
Modifier and Type
Method
Description
Optional
<
Float
>
Float.
describeConstable
()
Returns an
Optional
containing the nominal descriptor for this
 instance, which is the instance itself.
Methods in
java.lang
with parameters of type
Float
Modifier and Type
Method
Description
int
Float.
compareTo
(
Float
anotherFloat)
Compares two
Float
objects numerically.
Uses of
Float
in
javax.management.openmbean
Fields in
javax.management.openmbean
with type parameters of type
Float
Modifier and Type
Field
Description
static final
SimpleType
<
Float
>
SimpleType.
FLOAT
The
SimpleType
instance describing values whose
 Java class name is
java.lang.Float
.
Uses of
Float
in
jdk.incubator.vector
Fields in
jdk.incubator.vector
with type parameters of type
Float
Modifier and Type
Field
Description
static final
VectorOperators.Conversion
<
Byte
,
Float
>
VectorOperators.
B2F
Convert
byteVal
to
(float)byteVal
.
static final
VectorOperators.Conversion
<
Double
,
Float
>
VectorOperators.
D2F
Convert
doubleVal
to
(float)doubleVal
.
static final
VectorOperators.Conversion
<
Float
,
Byte
>
VectorOperators.
F2B
Convert
floatVal
to
(byte)floatVal
.
static final
VectorOperators.Conversion
<
Float
,
Double
>
VectorOperators.
F2D
Convert
floatVal
to
(double)floatVal
.
static final
VectorOperators.Conversion
<
Float
,
Integer
>
VectorOperators.
F2I
Convert
floatVal
to
(int)floatVal
.
static final
VectorOperators.Conversion
<
Float
,
Long
>
VectorOperators.
F2L
Convert
floatVal
to
(long)floatVal
.
static final
VectorOperators.Conversion
<
Float
,
Short
>
VectorOperators.
F2S
Convert
floatVal
to
(short)floatVal
.
static final
VectorOperators.Conversion
<
Integer
,
Float
>
VectorOperators.
I2F
Convert
intVal
to
(float)intVal
.
static final
VectorOperators.Conversion
<
Long
,
Float
>
VectorOperators.
L2F
Convert
longVal
to
(float)longVal
.
static final
VectorOperators.Conversion
<
Float
,
Integer
>
VectorOperators.
REINTERPRET_F2I
Reinterpret bits of
floatVal
as
int
.
static final
VectorOperators.Conversion
<
Integer
,
Float
>
VectorOperators.
REINTERPRET_I2F
Reinterpret bits of
intVal
as
float
.
static final
VectorOperators.Conversion
<
Short
,
Float
>
VectorOperators.
S2F
Convert
shortVal
to
(float)shortVal
.
static final
VectorSpecies
<
Float
>
FloatVector.
SPECIES_128
Species representing
FloatVector
s of
VectorShape.S_128_BIT
.
static final
VectorSpecies
<
Float
>
FloatVector.
SPECIES_256
Species representing
FloatVector
s of
VectorShape.S_256_BIT
.
static final
VectorSpecies
<
Float
>
FloatVector.
SPECIES_512
Species representing
FloatVector
s of
VectorShape.S_512_BIT
.
static final
VectorSpecies
<
Float
>
FloatVector.
SPECIES_64
Species representing
FloatVector
s of
VectorShape.S_64_BIT
.
static final
VectorSpecies
<
Float
>
FloatVector.
SPECIES_MAX
Species representing
FloatVector
s of
VectorShape.S_Max_BIT
.
static final
VectorSpecies
<
Float
>
FloatVector.
SPECIES_PREFERRED
Preferred species for
FloatVector
s.
Methods in
jdk.incubator.vector
that return types with arguments of type
Float
Modifier and Type
Method
Description
abstract
VectorMask
<
Float
>
FloatVector.
compare
(
VectorOperators.Comparison
op,
 float e)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation.
final
VectorMask
<
Float
>
FloatVector.
compare
(
VectorOperators.Comparison
op,
 float e,
VectorMask
<
Float
> m)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
abstract
VectorMask
<
Float
>
FloatVector.
compare
(
VectorOperators.Comparison
op,
 long e)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation.
final
VectorMask
<
Float
>
FloatVector.
compare
(
VectorOperators.Comparison
op,
 long e,
VectorMask
<
Float
> m)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
abstract
VectorMask
<
Float
>
FloatVector.
compare
(
VectorOperators.Comparison
op,
Vector
<
Float
> v)
Tests this vector by comparing it with another input vector,
 according to the given comparison operation.
final
VectorMask
<
Float
>
FloatVector.
eq
(float e)
Tests if this vector is equal to an input scalar.
final
VectorMask
<
Float
>
FloatVector.
eq
(
Vector
<
Float
> v)
Tests if this vector is equal to another input vector.
final
VectorMask
<
Float
>
FloatVector.
lt
(float e)
Tests if this vector is less than an input scalar.
final
VectorMask
<
Float
>
FloatVector.
lt
(
Vector
<
Float
> v)
Tests if this vector is less than another input vector.
abstract
VectorMask
<
Float
>
FloatVector.
test
(
VectorOperators.Test
op)
Tests the lanes of this vector
 according to the given operation.
abstract
VectorMask
<
Float
>
FloatVector.
test
(
VectorOperators.Test
op,
VectorMask
<
Float
> m)
Test selected lanes of this vector,
 according to the given operation.
Method parameters in
jdk.incubator.vector
with type arguments of type
Float
Modifier and Type
Method
Description
final
FloatVector
FloatVector.
add
(float e,
VectorMask
<
Float
> m)
Adds this vector to the broadcast of an input scalar,
 selecting lane elements controlled by a mask.
final
FloatVector
FloatVector.
add
(
Vector
<
Float
> v)
Adds this vector to a second input vector.
final
FloatVector
FloatVector.
add
(
Vector
<
Float
> v,
VectorMask
<
Float
> m)
Adds this vector to a second input vector, selecting lanes
 under the control of a mask.
final
FloatVector
FloatVector.
add
(
Vector
<
Float
> v,
VectorMask
<
Float
> m)
Adds this vector to a second input vector, selecting lanes
 under the control of a mask.
final
FloatVector
FloatVector.
blend
(float e,
VectorMask
<
Float
> m)
Replaces selected lanes of this vector with
 a scalar value
 under the control of a mask.
final
FloatVector
FloatVector.
blend
(long e,
VectorMask
<
Float
> m)
Replaces selected lanes of this vector with
 a scalar value
 under the control of a mask.
abstract
FloatVector
FloatVector.
blend
(
Vector
<
Float
> v,
VectorMask
<
Float
> m)
Replaces selected lanes of this vector with
 corresponding lanes from a second input vector
 under the control of a mask.
abstract
FloatVector
FloatVector.
blend
(
Vector
<
Float
> v,
VectorMask
<
Float
> m)
Replaces selected lanes of this vector with
 corresponding lanes from a second input vector
 under the control of a mask.
static
FloatVector
FloatVector.
broadcast
(
VectorSpecies
<
Float
> species,
 float e)
Returns a vector of the given species
 where all lane elements are set to
 the primitive value
e
.
static
FloatVector
FloatVector.
broadcast
(
VectorSpecies
<
Float
> species,
 long e)
Returns a vector of the given species
 where all lane elements are set to
 the primitive value
e
.
final
VectorMask
<
Float
>
FloatVector.
compare
(
VectorOperators.Comparison
op,
 float e,
VectorMask
<
Float
> m)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
final
VectorMask
<
Float
>
FloatVector.
compare
(
VectorOperators.Comparison
op,
 long e,
VectorMask
<
Float
> m)
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
abstract
VectorMask
<
Float
>
FloatVector.
compare
(
VectorOperators.Comparison
op,
Vector
<
Float
> v)
Tests this vector by comparing it with another input vector,
 according to the given comparison operation.
abstract
FloatVector
FloatVector.
compress
(
VectorMask
<
Float
> m)
Compresses the lane elements of this vector selecting lanes
 under the control of a specific mask.
final
FloatVector
FloatVector.
div
(float e,
VectorMask
<
Float
> m)
Divides this vector by the broadcast of an input scalar,
 selecting lane elements controlled by a mask.
final
FloatVector
FloatVector.
div
(
Vector
<
Float
> v)
Divides this vector by a second input vector.
final
FloatVector
FloatVector.
div
(
Vector
<
Float
> v,
VectorMask
<
Float
> m)
Divides this vector by a second input vector
 under the control of a mask.
final
FloatVector
FloatVector.
div
(
Vector
<
Float
> v,
VectorMask
<
Float
> m)
Divides this vector by a second input vector
 under the control of a mask.
final
VectorMask
<
Float
>
FloatVector.
eq
(
Vector
<
Float
> v)
Tests if this vector is equal to another input vector.
abstract
FloatVector
FloatVector.
expand
(
VectorMask
<
Float
> m)
Expands the lane elements of this vector
 under the control of a specific mask.
final
FloatVector
FloatVector.
fma
(
Vector
<
Float
> b,
Vector
<
Float
> c)
Multiplies this vector by a second input vector, and sums
 the result with a third.
static
FloatVector
FloatVector.
fromArray
(
VectorSpecies
<
Float
> species,
 float[] a,
 int offset)
Loads a vector from an array of type
float[]
starting at an offset.
static
FloatVector
FloatVector.
fromArray
(
VectorSpecies
<
Float
> species,
 float[] a,
 int offset,
 int[] indexMap,
 int mapOffset)
Gathers a new vector composed of elements from an array of type
float[]
,
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
static
FloatVector
FloatVector.
fromArray
(
VectorSpecies
<
Float
> species,
 float[] a,
 int offset,
 int[] indexMap,
 int mapOffset,
VectorMask
<
Float
> m)
Gathers a new vector composed of elements from an array of type
float[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
static
FloatVector
FloatVector.
fromArray
(
VectorSpecies
<
Float
> species,
 float[] a,
 int offset,
 int[] indexMap,
 int mapOffset,
VectorMask
<
Float
> m)
Gathers a new vector composed of elements from an array of type
float[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
static
FloatVector
FloatVector.
fromArray
(
VectorSpecies
<
Float
> species,
 float[] a,
 int offset,
VectorMask
<
Float
> m)
Loads a vector from an array of type
float[]
starting at an offset and using a mask.
static
FloatVector
FloatVector.
fromArray
(
VectorSpecies
<
Float
> species,
 float[] a,
 int offset,
VectorMask
<
Float
> m)
Loads a vector from an array of type
float[]
starting at an offset and using a mask.
static
FloatVector
FloatVector.
fromMemorySegment
(
VectorSpecies
<
Float
> species,
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo)
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment.
static
FloatVector
FloatVector.
fromMemorySegment
(
VectorSpecies
<
Float
> species,
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo,
VectorMask
<
Float
> m)
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment
 and using a mask.
static
FloatVector
FloatVector.
fromMemorySegment
(
VectorSpecies
<
Float
> species,
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo,
VectorMask
<
Float
> m)
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment
 and using a mask.
final void
FloatVector.
intoArray
(float[] a,
 int offset,
 int[] indexMap,
 int mapOffset,
VectorMask
<
Float
> m)
Scatters this vector into an array of type
float[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
final void
FloatVector.
intoArray
(float[] a,
 int offset,
VectorMask
<
Float
> m)
Stores this vector into an array of type
float[]
starting at offset and using a mask.
final void
FloatVector.
intoMemorySegment
(
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo,
VectorMask
<
Float
> m)
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order and a mask.
final
FloatVector
FloatVector.
lanewise
(
VectorOperators.Binary
op,
 float e,
VectorMask
<
Float
> m)
Combines the lane values of this vector
 with the value of a broadcast scalar,
 with selection of lane elements controlled by a mask.
final
FloatVector
FloatVector.
lanewise
(
VectorOperators.Binary
op,
 long e,
VectorMask
<
Float
> m)
Combines the corresponding lane values of this vector
 with those of a second input vector,
 with selection of lane elements controlled by a mask.
abstract
FloatVector
FloatVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Float
> v)
Combines the corresponding lane values of this vector
 with those of a second input vector.
abstract
FloatVector
FloatVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Float
> v,
VectorMask
<
Float
> m)
Combines the corresponding lane values of this vector
 with those of a second input vector,
 with selection of lane elements controlled by a mask.
abstract
FloatVector
FloatVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Float
> v,
VectorMask
<
Float
> m)
Combines the corresponding lane values of this vector
 with those of a second input vector,
 with selection of lane elements controlled by a mask.
final
FloatVector
FloatVector.
lanewise
(
VectorOperators.Ternary
op,
 float e1,
 float e2,
VectorMask
<
Float
> m)
Combines the lane values of this vector
 with the values of two broadcast scalars,
 with selection of lane elements controlled by a mask.
final
FloatVector
FloatVector.
lanewise
(
VectorOperators.Ternary
op,
 float e1,
Vector
<
Float
> v2)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar.
final
FloatVector
FloatVector.
lanewise
(
VectorOperators.Ternary
op,
 float e1,
Vector
<
Float
> v2,
VectorMask
<
Float
> m)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar,
 with selection of lane elements controlled by a mask.
final
FloatVector
FloatVector.
lanewise
(
VectorOperators.Ternary
op,
 float e1,
Vector
<
Float
> v2,
VectorMask
<
Float
> m)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar,
 with selection of lane elements controlled by a mask.
final
FloatVector
FloatVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Float
> v1,
 float e2)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar.
final
FloatVector
FloatVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Float
> v1,
 float e2,
VectorMask
<
Float
> m)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar,
 with selection of lane elements controlled by a mask.
final
FloatVector
FloatVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Float
> v1,
 float e2,
VectorMask
<
Float
> m)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar,
 with selection of lane elements controlled by a mask.
abstract
FloatVector
FloatVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Float
> v1,
Vector
<
Float
> v2)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector.
abstract
FloatVector
FloatVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Float
> v1,
Vector
<
Float
> v2,
VectorMask
<
Float
> m)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector,
 with selection of lane elements controlled by a mask.
abstract
FloatVector
FloatVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Float
> v1,
Vector
<
Float
> v2,
VectorMask
<
Float
> m)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector,
 with selection of lane elements controlled by a mask.
abstract
FloatVector
FloatVector.
lanewise
(
VectorOperators.Unary
op,
VectorMask
<
Float
> m)
Operates on the lane values of this vector,
 with selection of lane elements controlled by a mask.
final
VectorMask
<
Float
>
FloatVector.
lt
(
Vector
<
Float
> v)
Tests if this vector is less than another input vector.
final
FloatVector
FloatVector.
max
(
Vector
<
Float
> v)
Computes the larger of this vector and a second input vector.
final
FloatVector
FloatVector.
min
(
Vector
<
Float
> v)
Computes the smaller of this vector and a second input vector.
final
FloatVector
FloatVector.
mul
(float e,
VectorMask
<
Float
> m)
Multiplies this vector by the broadcast of an input scalar,
 selecting lane elements controlled by a mask.
final
FloatVector
FloatVector.
mul
(
Vector
<
Float
> v)
Multiplies this vector by a second input vector.
final
FloatVector
FloatVector.
mul
(
Vector
<
Float
> v,
VectorMask
<
Float
> m)
Multiplies this vector by a second input vector
 under the control of a mask.
final
FloatVector
FloatVector.
mul
(
Vector
<
Float
> v,
VectorMask
<
Float
> m)
Multiplies this vector by a second input vector
 under the control of a mask.
final
FloatVector
FloatVector.
pow
(
Vector
<
Float
> b)
Raises this vector to the power of a second input vector.
abstract
FloatVector
FloatVector.
rearrange
(
VectorShuffle
<
Float
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle.
abstract
FloatVector
FloatVector.
rearrange
(
VectorShuffle
<
Float
> s,
Vector
<
Float
> v)
Rearranges the lane elements of two vectors, selecting lanes
 under the control of a specific shuffle, using both normal and
 exceptional indexes in the shuffle to steer data.
abstract
FloatVector
FloatVector.
rearrange
(
VectorShuffle
<
Float
> s,
Vector
<
Float
> v)
Rearranges the lane elements of two vectors, selecting lanes
 under the control of a specific shuffle, using both normal and
 exceptional indexes in the shuffle to steer data.
abstract
FloatVector
FloatVector.
rearrange
(
VectorShuffle
<
Float
> s,
VectorMask
<
Float
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle and a mask.
abstract
FloatVector
FloatVector.
rearrange
(
VectorShuffle
<
Float
> s,
VectorMask
<
Float
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle and a mask.
abstract float
FloatVector.
reduceLanes
(
VectorOperators.Associative
op,
VectorMask
<
Float
> m)
Returns a value accumulated from selected lanes of this vector,
 controlled by a mask.
abstract
FloatVector
FloatVector.
selectFrom
(
Vector
<
Float
> v)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector
v
.
abstract
FloatVector
FloatVector.
selectFrom
(
Vector
<
Float
> s,
VectorMask
<
Float
> m)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector, under the control
 of a mask.
abstract
FloatVector
FloatVector.
selectFrom
(
Vector
<
Float
> s,
VectorMask
<
Float
> m)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector, under the control
 of a mask.
abstract
FloatVector
FloatVector.
slice
(int origin,
Vector
<
Float
> v1)
Slices a segment of adjacent lanes, starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
final
FloatVector
FloatVector.
slice
(int origin,
Vector
<
Float
> w,
VectorMask
<
Float
> m)
Slices a segment of adjacent lanes
 under the control of a mask,
 starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
final
FloatVector
FloatVector.
slice
(int origin,
Vector
<
Float
> w,
VectorMask
<
Float
> m)
Slices a segment of adjacent lanes
 under the control of a mask,
 starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
final
FloatVector
FloatVector.
sub
(float e,
VectorMask
<
Float
> m)
Subtracts an input scalar from this vector
 under the control of a mask.
final
FloatVector
FloatVector.
sub
(
Vector
<
Float
> v)
Subtracts a second input vector from this vector.
final
FloatVector
FloatVector.
sub
(
Vector
<
Float
> v,
VectorMask
<
Float
> m)
Subtracts a second input vector from this vector
 under the control of a mask.
final
FloatVector
FloatVector.
sub
(
Vector
<
Float
> v,
VectorMask
<
Float
> m)
Subtracts a second input vector from this vector
 under the control of a mask.
abstract
VectorMask
<
Float
>
FloatVector.
test
(
VectorOperators.Test
op,
VectorMask
<
Float
> m)
Test selected lanes of this vector,
 according to the given operation.
abstract
FloatVector
FloatVector.
unslice
(int origin,
Vector
<
Float
> w,
 int part)
Reverses a
slice()
, inserting
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
abstract
FloatVector
FloatVector.
unslice
(int origin,
Vector
<
Float
> w,
 int part,
VectorMask
<
Float
> m)
Reverses a
slice()
, inserting
 (under the control of a mask)
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
abstract
FloatVector
FloatVector.
unslice
(int origin,
Vector
<
Float
> w,
 int part,
VectorMask
<
Float
> m)
Reverses a
slice()
, inserting
 (under the control of a mask)
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
static
FloatVector
FloatVector.
zero
(
VectorSpecies
<
Float
> species)
Returns a vector of the given species
 where all lane elements are set to
 zero, the default primitive value.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.