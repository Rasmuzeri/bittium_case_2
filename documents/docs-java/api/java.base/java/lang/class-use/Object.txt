Uses of Class java.lang.Object (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Class
java.lang.Object
Packages that use
Object
Package
Description
com.sun.java.accessibility.util
Provides a collection of interfaces and classes that compose the Java Accessibility
 Utilities.
com.sun.jdi
This is the core package of the Java Debug
 Interface (JDI), it defines mirrors for values, types, and the target
 VirtualMachine itself - as well bootstrapping facilities.
com.sun.jdi.connect
This package defines connections between the virtual machine
 using the JDI and the target virtual machine.
com.sun.jdi.connect.spi
This package comprises the interfaces and classes used to
 develop new
TransportService
implementations.
com.sun.jdi.request
This package is used to request that a JDI
 event be sent under specified conditions.
com.sun.management
This package contains the JDK's extension to
 the standard implementation of the
java.lang.management
API and also defines the management
 interface for some other components of the platform.
com.sun.net.httpserver
Provides a simple high-level Http server API, which can be used to build
   embedded HTTP servers.
com.sun.net.httpserver.spi
Provides a pluggable service provider interface, which allows the HTTP server
 implementation to be replaced with other implementations.
com.sun.nio.sctp
A Java API for Stream Control Transport Protocol.
com.sun.security.auth
Provides implementations of
Principal
.
com.sun.security.auth.callback
Provides an implementation of
CallbackHandler
.
com.sun.security.auth.login
Provides an implementation of
Configuration
.
com.sun.security.auth.module
Provides implementations of
LoginModule
.
com.sun.security.jgss
This package defines classes and interfaces for the JDK extensions
 to the GSS-API.
com.sun.source.tree
Provides interfaces to represent source code as abstract syntax
 trees (AST).
com.sun.source.util
Provides utilities for operations on abstract syntax trees (AST).
com.sun.tools.attach
Provides the API to attach to a Java virtual machine.
com.sun.tools.attach.spi
Only developers who are defining new attach providers should need to make
 direct use of this package.
com.sun.tools.javac
This package provides a legacy entry point for the
javac
tool.
com.sun.tools.jconsole
This package contains the JConsole API.
java.applet
Provides the classes necessary to create an applet and the classes an applet
 uses to communicate with its applet context.
java.awt
Contains all of the classes for creating user interfaces and for painting
 graphics and images.
java.awt.color
Provides classes for color spaces.
java.awt.datatransfer
Provides interfaces and classes for transferring data between and within
 applications.
java.awt.desktop
Provides interfaces and classes for interaction with various desktop
 capabilities.
java.awt.dnd
Drag and Drop is a direct manipulation gesture found in many Graphical User
 Interface systems that provides a mechanism to transfer information between
 two entities logically associated with presentation elements in the GUI.
java.awt.event
Provides interfaces and classes for dealing with different types of events
 fired by AWT components.
java.awt.font
Provides classes and interface relating to fonts.
java.awt.geom
Provides the Java 2D classes for defining and performing operations on
 objects related to two-dimensional geometry.
java.awt.im
Provides classes and interfaces for the input method framework.
java.awt.im.spi
Provides interfaces that enable the development of input methods that can be
 used with any Java runtime environment.
java.awt.image
Provides classes for creating and modifying images.
java.awt.image.renderable
Provides classes and interfaces for producing rendering-independent images.
java.awt.print
Provides classes and interfaces for a general printing API.
java.beans
Contains classes related to developing
beans
-- components based on
 the JavaBeans architecture.
java.beans.beancontext
Provides classes and interfaces relating to bean context.
java.io
Provides for system input and output through data streams,
 serialization and the file system.
java.lang
Provides classes that are fundamental to the design of the Java
 programming language.
java.lang.annotation
Provides library support for the Java programming language
 annotation facility.
java.lang.constant
Classes and interfaces to represent
nominal descriptors
for run-time
 entities such as classes or method handles, and classfile entities such as
 constant pool entries or
invokedynamic
call sites.
java.lang.foreign
Provides low-level access to memory and functions outside the Java runtime.
java.lang.instrument
Provides services that allow Java programming language agents to instrument
 programs running on the Java Virtual Machine (JVM).
java.lang.invoke
The
java.lang.invoke
package provides low-level primitives for interacting
 with the Java Virtual Machine.
java.lang.management
Provides the management interfaces for monitoring and management of the
Java virtual machine and other components in the Java runtime.
java.lang.module
Classes to support module descriptors and creating configurations of modules
 by means of resolution and service binding.
java.lang.ref
Provides reference-object classes, which support a limited degree
 of interaction with the garbage collector.
java.lang.reflect
Provides classes and interfaces for obtaining reflective information about
 classes and objects.
java.lang.runtime
The
java.lang.runtime
package provides low-level runtime support
 for the Java language.
java.math
Provides classes for performing arbitrary-precision integer
 arithmetic (
BigInteger
) and arbitrary-precision decimal
 arithmetic (
BigDecimal
).
java.net
Provides the classes for implementing networking applications.
java.net.http
HTTP Client and WebSocket APIs
java.net.spi
Service-provider classes for the
java.net
package.
java.nio
Defines buffers, which are containers for data, and provides an
 overview of the other NIO packages.
java.nio.channels
Defines channels, which represent connections to entities that are capable of
 performing I/O operations, such as files and sockets; defines selectors, for
 multiplexed, non-blocking I/O operations.
java.nio.channels.spi
Service-provider classes for the
java.nio.channels
package.
java.nio.charset
Defines charsets, decoders, and encoders, for translating between
 bytes and Unicode characters.
java.nio.charset.spi
Service-provider classes for the
java.nio.charset
package.
java.nio.file
Defines interfaces and classes for the Java virtual machine to access files,
 file attributes, and file systems.
java.nio.file.attribute
Interfaces and classes providing access to file and file system attributes.
java.nio.file.spi
Service-provider classes for the
java.nio.file
package.
java.rmi
Provides the RMI package.
java.rmi.dgc
Provides classes and interface for RMI distributed
 garbage-collection (DGC).
java.rmi.registry
Provides a class and two interfaces for the RMI registry.
java.rmi.server
Provides classes and interfaces for supporting the server side of RMI.
java.security
Provides the classes and interfaces for the security framework.
java.security.cert
Provides classes and interfaces for parsing and managing
 certificates, certificate revocation lists (CRLs), and
 certification paths.
java.security.spec
Provides classes and interfaces for key specifications and algorithm
 parameter specifications.
java.sql
Provides the API for accessing and processing data stored in a
 data source (usually a relational database) using the
 Java programming language.
java.text
Provides classes and interfaces for handling text, dates, numbers,
 and messages in a manner independent of natural languages.
java.text.spi
Service provider classes for the classes in the java.text package.
java.time
The main API for dates, times, instants, and durations.
java.time.chrono
Generic API for calendar systems other than the default ISO.
java.time.format
Provides classes to print and parse dates and times.
java.time.temporal
Access to date and time using fields and units, and date time adjusters.
java.time.zone
Support for time-zones and their rules.
java.util
Contains the collections framework, some internationalization support classes,
 a service loader, properties, random number generation, string parsing
 and scanning classes, base64 encoding and decoding, a bit array, and
 several miscellaneous utility classes.
java.util.concurrent
Utility classes commonly useful in concurrent programming.
java.util.concurrent.atomic
A small toolkit of classes that support lock-free thread-safe
 programming on single variables.
java.util.concurrent.locks
Interfaces and classes providing a framework for locking and waiting
 for conditions that is distinct from built-in synchronization and
 monitors.
java.util.function
Functional interfaces
provide target types for lambda expressions
 and method references.
java.util.jar
Provides classes for reading and writing the JAR (Java ARchive)
 file format, which is based on the standard ZIP file format with an
 optional manifest file.
java.util.logging
Provides the classes and interfaces of
 the Java 2 platform's core logging facilities.
java.util.prefs
This package allows applications to store and retrieve user and system
 preference and configuration data.
java.util.random
This package contains classes and interfaces that support a generic API
 for random number generation.
java.util.regex
Classes for matching character sequences against patterns specified
 by regular expressions.
java.util.spi
Service provider classes for the classes in the java.util package.
java.util.stream
Classes to support functional-style operations on streams of elements, such
 as map-reduce transformations on collections.
java.util.zip
Provides classes for reading and writing the standard ZIP and GZIP file
 formats.
javax.accessibility
Defines a contract between user-interface components and an assistive
 technology that provides access to those components.
javax.annotation.processing
Facilities for declaring annotation processors and for
 allowing annotation processors to communicate with an annotation processing
 tool environment.
javax.crypto
Provides the classes and interfaces for cryptographic
 operations.
javax.crypto.spec
Provides classes and interfaces for key specifications and
 algorithm parameter specifications.
javax.imageio
The main package of the Java Image I/O API.
javax.imageio.metadata
A package of the Java Image I/O API dealing with reading and writing
 metadata.
javax.imageio.plugins.bmp
Package containing the public classes used by the built-in BMP plug-in.
javax.imageio.plugins.jpeg
Classes supporting the built-in JPEG plug-in.
javax.imageio.plugins.tiff
Public classes used by the built-in TIFF plug-ins.
javax.imageio.spi
A package of the Java Image I/O API containing the plug-in interfaces for
 readers, writers, transcoders, and streams, and a runtime registry.
javax.imageio.stream
A package of the Java Image I/O API dealing with low-level I/O from files and
 streams.
javax.lang.model
Types and hierarchies of packages comprising a Java language model, a model of the declarations and types of the Java
 programming language.
javax.lang.model.element
Interfaces used to model elements of the Java programming language.
javax.lang.model.type
Interfaces used to model Java programming language types.
javax.lang.model.util
Utilities to assist in the processing of
program elements
and
types
.
javax.management
Provides the core classes for the Java Management Extensions.
javax.management.loading
Provides the classes which implement advanced dynamic
        loading.
javax.management.modelmbean
Provides the definition of the ModelMBean classes.
javax.management.monitor
Provides the definition of the monitor classes.
javax.management.openmbean
Provides the open data types and Open MBean descriptor classes.
javax.management.relation
Provides the definition of the Relation Service.
javax.management.remote
Interfaces for remote access to
        JMX MBean servers.
javax.management.remote.rmi
The RMI connector is a connector for the JMX Remote API that
      uses RMI to transmit client requests to a remote MBean server.
javax.management.timer
Provides the definition of the Timer MBean.
javax.naming
Provides the classes and interfaces for accessing naming services.
javax.naming.directory
Extends the
javax.naming
package to provide functionality
for accessing directory services.
javax.naming.event
Provides support for event notification when accessing naming and
directory services.
javax.naming.ldap
Provides support for LDAPv3 extended operations and controls.
javax.naming.ldap.spi
javax.naming.spi
Provides the means for dynamically plugging in support for accessing
naming and directory services through the
javax.naming
and related packages.
javax.net
Provides classes for networking applications.
javax.net.ssl
Provides classes for the secure socket package.
javax.print
Provides the principal classes and interfaces for the Java Print
 Service API.
javax.print.attribute
Provides classes and interfaces that describe the types of Java Print
 Service attributes and how they can be collected into attribute sets.
javax.print.attribute.standard
Package
javax.print.attribute.standard
contains classes for specific
 printing attributes.
javax.print.event
Package
javax.print.event
contains event classes and listener
 interfaces.
javax.rmi.ssl
Provides implementations of
RMIClientSocketFactory
and
RMIServerSocketFactory
over
 the Secure Sockets Layer (SSL) or Transport Layer Security (TLS) protocols.
javax.script
The scripting API consists of interfaces and classes that define
Java Scripting Engines and provides
a framework for their use in Java applications.
javax.security.auth
This package provides a framework for authentication and
 authorization.
javax.security.auth.callback
This package provides the classes necessary for services
 to interact with applications in order to retrieve
 information (authentication data including usernames
 or passwords, for example) or to display information
 (error and warning messages, for example).
javax.security.auth.kerberos
This package contains utility classes related to the Kerberos network
 authentication protocol.
javax.security.auth.login
This package provides a pluggable authentication framework.
javax.security.auth.x500
This package contains the classes that should be used to store
 X500 Principal and X500 Private Credentials in a
Subject
.
javax.security.cert
Provides classes for public key certificates.
javax.security.sasl
Contains class and interfaces for supporting SASL.
javax.smartcardio
Java™ Smart Card I/O API.
javax.sound.midi
Provides interfaces and classes for I/O, sequencing, and synthesis of MIDI
 (Musical Instrument Digital Interface) data.
javax.sound.midi.spi
Supplies interfaces for service providers to implement when offering new MIDI
 devices, MIDI file readers and writers, or sound bank readers.
javax.sound.sampled
Provides interfaces and classes for capture, processing, and playback of
 sampled audio data.
javax.sound.sampled.spi
Supplies abstract classes for service providers to subclass when offering new
 audio devices, sound file readers and writers, or audio format converters.
javax.sql
Provides the API for server side data source access and processing from
 the Java programming language.
javax.sql.rowset
Standard interfaces and base classes for JDBC
RowSet
implementations.
javax.sql.rowset.serial
Provides utility classes to allow serializable mappings between SQL types
 and data types in the Java programming language.
javax.sql.rowset.spi
The standard classes and interfaces that a third party vendor has to
 use in its implementation of a synchronization provider.
javax.swing
Provides a set of "lightweight" (all-Java language) components
 that, to the maximum degree possible, work the same on all platforms.
javax.swing.border
Provides classes and interface for drawing specialized borders around a Swing
 component.
javax.swing.colorchooser
Contains classes and interfaces used by the
JColorChooser
component.
javax.swing.event
Provides for events fired by Swing components.
javax.swing.filechooser
Contains classes and interfaces used by the
JFileChooser
component.
javax.swing.plaf
Provides one interface and many abstract classes that Swing uses to provide
 its pluggable look-and-feel capabilities.
javax.swing.plaf.basic
Provides user interface objects built according to the Basic look and feel.
javax.swing.plaf.metal
Provides user interface objects built according to the Java look and feel
 (once codenamed
Metal
), which is the default look and feel.
javax.swing.plaf.multi
Provides user interface objects that combine two or more look and feels.
javax.swing.plaf.nimbus
Provides user interface objects built according to the cross-platform Nimbus
 look and feel.
javax.swing.plaf.synth
Synth is a skinnable look and feel in which all painting is delegated.
javax.swing.table
Provides classes and interfaces for dealing with
javax.swing.JTable
.
javax.swing.text
Provides classes and interfaces that deal with editable and noneditable text
 components.
javax.swing.text.html
Provides the class
HTMLEditorKit
and supporting classes for creating
 HTML text editors.
javax.swing.text.html.parser
Provides the default HTML parser, along with support classes.
javax.swing.text.rtf
Provides a class (
RTFEditorKit
) for creating Rich-Text-Format text
 editors.
javax.swing.tree
Provides classes and interfaces for dealing with
javax.swing.JTree
.
javax.swing.undo
Allows developers to provide support for undo/redo in applications such as
 text editors.
javax.tools
Provides interfaces for tools which can be invoked from a program,
 for example, compilers.
javax.transaction.xa
Provides the API that defines the contract between the transaction manager
 and the resource manager, which allows the transaction manager to enlist
 and delist resource objects (supplied by the resource manager driver) in
 JTA transactions.
javax.xml
Defines constants for XML processing.
javax.xml.catalog
Provides the classes for implementing
XML Catalogs OASIS Standard V1.1, 7 October 2005
.
javax.xml.crypto
Common classes for XML cryptography.
javax.xml.crypto.dom
DOM-specific classes for the
javax.xml.crypto
package.
javax.xml.crypto.dsig
Classes for generating and validating XML digital
 signatures.
javax.xml.crypto.dsig.dom
DOM-specific classes for the
javax.xml.crypto.dsig
package.
javax.xml.crypto.dsig.keyinfo
Classes for parsing and processing
KeyInfo
elements and structures.
javax.xml.crypto.dsig.spec
Parameter classes for XML digital signatures.
javax.xml.datatype
Defines XML/Java Type Mappings.
javax.xml.namespace
Defines XML Namespace processing.
javax.xml.parsers
Provides the classes for processing XML documents with a SAX (Simple API for XML)
 parser or a DOM (Document Object Model) Document builder.
javax.xml.stream
Defines interfaces and classes for the Streaming API for XML (StAX).
javax.xml.stream.events
Defines event interfaces for the Streaming API for XML (StAX).
javax.xml.stream.util
Provides utility classes for the Streaming API for XML (StAX).
javax.xml.transform
Defines the generic APIs for processing transformation instructions,
 and performing a transformation from source to result.
javax.xml.transform.dom
Provides DOM specific transformation classes.
javax.xml.transform.sax
Provides SAX specific transformation classes.
javax.xml.transform.stax
Provides StAX specific transformation classes.
javax.xml.transform.stream
Provides stream and URI specific transformation classes.
javax.xml.validation
Provides an API for validation of XML documents.
javax.xml.xpath
Provides an
object-model neutral
API for the
 evaluation of XPath expressions and access to the evaluation
 environment.
jdk.dynalink
Contains interfaces and classes that are used to link an
invokedynamic
call site.
jdk.dynalink.beans
Contains the linker for ordinary Java objects.
jdk.dynalink.linker
Contains interfaces and classes needed by language runtimes to implement
 their own language-specific object models and type conversions.
jdk.dynalink.linker.support
Contains classes that make it more convenient for language runtimes to
 implement their own language-specific object models and type conversions
 by providing basic implementations of some classes as well as various
 utilities.
jdk.dynalink.support
Contains classes that make using Dynalink more convenient by providing
 basic implementations of some classes as well as various utilities.
jdk.incubator.vector
Incubating Feature.
Will be removed in a future release.
jdk.javadoc.doclet
The Doclet API provides an environment which, in conjunction with
 the Language Model API and Compiler Tree API, allows clients
 to inspect the source-level structures of programs and
 libraries, including API comments embedded in the source.
jdk.jfr
This package provides classes to create events and control Flight Recorder.
jdk.jfr.consumer
This package contains classes for consuming Flight Recorder data.
jdk.jshell
Provides interfaces for creating tools, such as a Read-Eval-Print Loop (REPL),
 which interactively evaluate "snippets" of Java programming language code.
jdk.jshell.execution
Provides implementation support for building JShell execution engines.
jdk.jshell.spi
Defines the Service Provider Interface for pluggable JShell execution engines.
jdk.management.jfr
This package contains classes to control and monitor Flight Recorder over Java Management Extensions (JMX).
jdk.net
Platform specific socket options for the
java.net
and
java.nio.channels
socket classes.
jdk.nio
Defines JDK-specific
channel
APIs.
jdk.nio.mapmode
jdk.security.jarsigner
This package defines APIs for signing jar files.
netscape.javascript
Provides Java code the ability to access the JavaScript engine and the
 HTML DOM in the web browser.
org.ietf.jgss
This package presents a framework that allows application developers to
 make use of security services like authentication, data integrity and
 data confidentiality from a variety of underlying security mechanisms
 like Kerberos, using a unified API.
org.w3c.dom
Provides the interfaces for the Document Object Model (DOM).
org.w3c.dom.bootstrap
Provides a factory for obtaining instances of
DOMImplementation
.
org.w3c.dom.events
Provides interfaces for DOM Level 2 Events.
org.w3c.dom.ls
Provides interfaces for DOM Level 3 Load and Save.
org.w3c.dom.ranges
Provides interfaces for DOM Level 2 Range.
org.w3c.dom.xpath
Provides interfaces for DOM Level 3 XPath Specification.
org.xml.sax
Provides the interfaces for the Simple API for XML (SAX).
org.xml.sax.ext
Provides interfaces to SAX2 facilities that
 conformant SAX drivers won't necessarily support.
org.xml.sax.helpers
Provides helper classes, including
 support for bootstrapping SAX-based applications.
Uses of
Object
in
com.sun.java.accessibility.util
Subclasses of
Object
in
com.sun.java.accessibility.util
Modifier and Type
Class
Description
class
AccessibilityEventMonitor
AccessibilityEventMonitor
implements a PropertyChange listener
 on every UI object that implements interface
Accessible
in the Java
 Virtual Machine.
class
AccessibilityListenerList
The
AccessibilityListenerList
is a copy of the Swing
EventListerList
class.
class
AWTEventMonitor
The
AWTEventMonitor
implements a suite of listeners that are
 conditionally installed on every AWT component instance in the Java
 Virtual Machine.
class
EventID
EventID contains integer constants that map to event support in
 AWT and Swing.
class
EventQueueMonitor
The
EventQueueMonitor
class provides key core functionality for Assistive
 Technologies (and other system-level technologies that need some of the same
 things that Assistive Technology needs).
class
SwingEventMonitor
SwingEventMonitor
extends
AWTEventMonitor
by adding a suite of
 listeners conditionally installed on every Swing component instance
 in the Java Virtual Machine.
class
Translator
The
Translator
class provides a translation to interface
Accessible
for objects that do not implement interface
Accessible
.
Fields in
com.sun.java.accessibility.util
declared as
Object
Modifier and Type
Field
Description
protected
Object
[]
AccessibilityListenerList.
listenerList
The list of listener type, listener pairs
protected
Object
Translator.
source
The source object needing translating.
Methods in
com.sun.java.accessibility.util
that return
Object
Modifier and Type
Method
Description
Object
[]
AccessibilityListenerList.
getListenerList
()
Passes back the event listener list as an array of listener type, listener pairs.
Object
Translator.
getSource
()
Get the source
Object
of the
Translator
.
Methods in
com.sun.java.accessibility.util
with parameters of type
Object
Modifier and Type
Method
Description
boolean
Translator.
equals
(
Object
o)
Returns true if this object is the same as the one passed in.
static
Accessible
Translator.
getAccessible
(
Object
o)
Obtain an object that implements interface
Accessible
.
void
Translator.
setSource
(
Object
o)
Set the source object of the
Translator
.
Constructors in
com.sun.java.accessibility.util
with parameters of type
Object
Modifier
Constructor
Description
Translator
(
Object
o)
Create a new
Translator
with the source object o.
Uses of
Object
in
com.sun.jdi
Subclasses of
Object
in
com.sun.jdi
Modifier and Type
Class
Description
class
AbsentInformationException
Thrown to indicate line number or variable information is not available.
class
Bootstrap
Initial class that provides access to the default implementation
 of JDI interfaces.
class
ClassNotLoadedException
Thrown to indicate that the requested class has
 not yet been loaded through the appropriate class loader.
class
ClassNotPreparedException
Thrown to indicate that the requested operation cannot be
 completed because the specified class has not yet been prepared.
class
IncompatibleThreadStateException
Thrown to indicate that the requested operation cannot be
 completed while the specified thread is in its current state.
class
InconsistentDebugInfoException
Thrown to indicate that there is an inconistency in the debug
 information provided by the target VM.
class
InternalException
Thrown to indicate that an unexpected internal error has
 occurred.
class
InvalidCodeIndexException
Deprecated.
This exception is no longer thrown
class
InvalidLineNumberException
Deprecated.
This exception is no longer thrown
class
InvalidModuleException
Thrown to indicate that the requested module is invalid
 or became invalid after the module was unloaded.
class
InvalidStackFrameException
Thrown to indicate that the requested operation cannot be
 completed because the specified stack frame is no longer valid.
class
InvalidTypeException
Thrown to indicate a type mismatch in setting the value of a field
 or variable, or in specifying the return value of a method.
class
InvocationException
Thrown to indicate an exception occurred in an invoked method within
 the target VM.
final class
JDIPermission
The
JDIPermission
class represents access rights to
 the
VirtualMachineManager
.
class
NativeMethodException
Thrown to indicate an operation cannot be completed because
 it is not valid for a native method.
class
ObjectCollectedException
Thrown to indicate that the requested operation cannot be
 completed because the specified object has been garbage collected.
class
OpaqueFrameException
Thrown to indicate an operation could not be performed on a frame.
class
VMCannotBeModifiedException
Thrown to indicate that the operation is invalid because it would
 modify the VM and the VM is read-only.
class
VMDisconnectedException
Unchecked exception thrown to indicate that the
 requested operation cannot be
 completed because there is no longer a connection to the target VM.
class
VMMismatchException
Thrown to indicate that the requested operation cannot be
 completed because the mirror from one target VM is being
 combined with a mirror from another target VM.
class
VMOutOfMemoryException
Thrown to indicate that the requested operation cannot be
 completed because the target VM has run out of memory.
Methods in
com.sun.jdi
with parameters of type
Object
Modifier and Type
Method
Description
boolean
BooleanValue.
equals
(
Object
obj)
Compares the specified Object with this BooleanValue for equality.
boolean
ByteValue.
equals
(
Object
obj)
Compares the specified Object with this ByteValue for equality.
boolean
CharValue.
equals
(
Object
obj)
Compares the specified Object with this CharValue for equality.
boolean
DoubleValue.
equals
(
Object
obj)
Compares the specified Object with this DoubleValue for equality.
boolean
Field.
equals
(
Object
obj)
Compares the specified Object with this field for equality.
boolean
FloatValue.
equals
(
Object
obj)
Compares the specified Object with this FloatValue for equality.
boolean
IntegerValue.
equals
(
Object
obj)
Compares the specified Object with this IntegerValue for equality.
boolean
LocalVariable.
equals
(
Object
obj)
Compares the specified Object with this LocalVariable for equality.
boolean
Location.
equals
(
Object
obj)
Compares the specified Object with this Location for equality.
boolean
LongValue.
equals
(
Object
obj)
Compares the specified Object with this LongValue for equality.
boolean
Method.
equals
(
Object
obj)
Compares the specified Object with this method for equality.
boolean
ObjectReference.
equals
(
Object
obj)
Compares the specified Object with this ObjectReference for equality.
boolean
ReferenceType.
equals
(
Object
obj)
Compares the specified Object with this ReferenceType for equality.
boolean
ShortValue.
equals
(
Object
obj)
Compares the specified Object with this ShortValue for equality.
boolean
VoidValue.
equals
(
Object
obj)
Compares the specified Object with this VoidValue for equality.
Uses of
Object
in
com.sun.jdi.connect
Subclasses of
Object
in
com.sun.jdi.connect
Modifier and Type
Class
Description
class
IllegalConnectorArgumentsException
Thrown to indicate an invalid argument or
 inconsistent passed to a
Connector
.
class
TransportTimeoutException
This exception may be thrown as a result of a timeout
 when attaching to a target VM, or waiting to accept a
 connection from a target VM.
class
VMStartException
A target VM was successfully launched, but terminated with an
 error before a connection could be established.
Uses of
Object
in
com.sun.jdi.connect.spi
Subclasses of
Object
in
com.sun.jdi.connect.spi
Modifier and Type
Class
Description
class
ClosedConnectionException
This exception may be thrown as a result of an asynchronous
 close of a
Connection
while an I/O operation is
 in progress.
class
Connection
A connection between a debugger and a target VM which it debugs.
class
TransportService
A transport service for connections between a debugger and
 a target VM.
static class
TransportService.Capabilities
The transport service capabilities.
static class
TransportService.ListenKey
A
listen key
.
Uses of
Object
in
com.sun.jdi.request
Subclasses of
Object
in
com.sun.jdi.request
Modifier and Type
Class
Description
class
DuplicateRequestException
Thrown to indicate a duplicate event request.
class
InvalidRequestStateException
Thrown to indicate that the requested event cannot be modified
 because it is enabled.
Methods in
com.sun.jdi.request
that return
Object
Modifier and Type
Method
Description
Object
EventRequest.
getProperty
(
Object
key)
Returns the value of the property with the specified key.
Methods in
com.sun.jdi.request
with parameters of type
Object
Modifier and Type
Method
Description
Object
EventRequest.
getProperty
(
Object
key)
Returns the value of the property with the specified key.
void
EventRequest.
putProperty
(
Object
key,
Object
value)
Add an arbitrary key/value "property" to this request.
Uses of
Object
in
com.sun.management
Subclasses of
Object
in
com.sun.management
Modifier and Type
Class
Description
class
GarbageCollectionNotificationInfo
The information about a garbage collection
class
GcInfo
Garbage collection information.
class
VMOption
Information about a VM option including its value and
 where the value came from which is referred as its
origin
.
Methods in
com.sun.management
that return
Object
Modifier and Type
Method
Description
Object
GcInfo.
get
(
String
key)
Object
[]
GcInfo.
getAll
(
String
[] keys)
Methods in
com.sun.management
with parameters of type
Object
Modifier and Type
Method
Description
boolean
GcInfo.
containsValue
(
Object
value)
boolean
GcInfo.
equals
(
Object
obj)
Uses of
Object
in
com.sun.net.httpserver
Subclasses of
Object
in
com.sun.net.httpserver
Modifier and Type
Class
Description
class
Authenticator
Authenticator represents an implementation of an HTTP authentication
 mechanism.
static class
Authenticator.Failure
Indicates an authentication failure.
static class
Authenticator.Result
Base class for return type from
Authenticator.authenticate(HttpExchange)
method.
static class
Authenticator.Retry
Indicates an authentication must be retried.
static class
Authenticator.Success
Indicates an authentication has succeeded and the
 authenticated user
principal
can be acquired by calling
Authenticator.Success.getPrincipal()
.
class
BasicAuthenticator
BasicAuthenticator provides an implementation of HTTP Basic
 authentication.
class
Filter
A filter used to pre- and post-process incoming requests.
static class
Filter.Chain
A chain of filters associated with a
HttpServer
.
class
Headers
HTTP request and response headers are represented by this class which
 implements the interface
Map
<
String
,
List
<
String
>>.
class
HttpContext
HttpContext
represents a mapping between the root
URI
path of an application to a
HttpHandler
which is invoked to handle
 requests destined for that path on the associated
HttpServer
or
HttpsServer
.
class
HttpExchange
This class encapsulates a HTTP request received and a
 response to be generated in one exchange.
final class
HttpHandlers
Implementations of
HttpHandler
that implement various useful handlers, such as a static response handler,
 or a conditional handler that complements one handler with another.
class
HttpPrincipal
Represents a user authenticated by HTTP Basic or Digest
 authentication.
class
HttpsConfigurator
This class is used to configure the https parameters for each incoming
 https connection on a
HttpsServer
.
class
HttpServer
This class implements a simple HTTP server.
class
HttpsExchange
This class encapsulates a HTTPS request received and a response to be
 generated in one exchange and defines the extensions to
HttpExchange
that are specific to the HTTPS protocol.
class
HttpsParameters
Represents the set of parameters for each https connection negotiated with
 clients.
class
HttpsServer
This class is an extension of
HttpServer
which provides support for
 HTTPS.
final class
SimpleFileServer
A simple HTTP file server and its components (intended for testing,
 development and debugging purposes only).
Methods in
com.sun.net.httpserver
that return
Object
Modifier and Type
Method
Description
abstract
Object
HttpExchange.
getAttribute
(
String
name)
Filter
modules may store arbitrary objects with
HttpExchange
instances as an out-of-band communication mechanism.
Methods in
com.sun.net.httpserver
that return types with arguments of type
Object
Modifier and Type
Method
Description
abstract
Map
<
String
,
Object
>
HttpContext.
getAttributes
()
Returns a mutable
Map
, which can be used to pass configuration
 and other data to
Filter
modules and to the context's exchange
 handler.
Methods in
com.sun.net.httpserver
with parameters of type
Object
Modifier and Type
Method
Description
boolean
Headers.
containsKey
(
Object
key)
boolean
Headers.
containsValue
(
Object
value)
boolean
Headers.
equals
(
Object
o)
boolean
HttpPrincipal.
equals
(
Object
another)
Compare two instances of
HttpPrincipal
.
List
<
String
>
Headers.
get
(
Object
key)
List
<
String
>
Headers.
remove
(
Object
key)
abstract void
HttpExchange.
setAttribute
(
String
name,
Object
value)
Filter
modules may store arbitrary objects with
HttpExchange
instances as an out-of-band communication mechanism.
Uses of
Object
in
com.sun.net.httpserver.spi
Subclasses of
Object
in
com.sun.net.httpserver.spi
Modifier and Type
Class
Description
class
HttpServerProvider
Service provider class for HttpServer.
Uses of
Object
in
com.sun.nio.sctp
Subclasses of
Object
in
com.sun.nio.sctp
Modifier and Type
Class
Description
class
AbstractNotificationHandler
<T>
A skeletal handler that consumes notifications and continues.
class
Association
A class that represents an SCTP association.
class
AssociationChangeNotification
Notification emitted when an association has either opened or closed.
class
IllegalReceiveException
Unchecked exception thrown when an attempt is made to invoke the
receive
method of
SctpChannel
or
SctpMultiChannel
from a notification handler.
class
IllegalUnbindException
Unchecked exception thrown when an attempt is made to remove an
 address that is not bound to the channel, or remove an address from a
 channel that has only one address bound to it.
class
InvalidStreamException
Unchecked exception thrown when an attempt is made to send a
 message to an invalid stream.
class
MessageInfo
The
MessageInfo
class provides additional ancillary information about
 messages.
class
PeerAddressChangeNotification
Notification emitted when a destination address on a multi-homed peer
 encounters a change.
class
SctpChannel
A selectable channel for message-oriented connected SCTP sockets.
class
SctpMultiChannel
A selectable channel for message-oriented SCTP sockets.
class
SctpServerChannel
A selectable channel for message-oriented listening SCTP sockets.
final class
SctpStandardSocketOptions
SCTP channels supports the socket options defined by this class
 (as well as those listed in the particular channel class) and may support
 additional Implementation specific socket options.
static class
SctpStandardSocketOptions.InitMaxStreams
This class is used to set the maximum number of inbound/outbound streams
 used by the local endpoint during association initialization.
class
SendFailedNotification
Notification emitted when a send failed notification has been received.
class
ShutdownNotification
Notification emitted when a peer shuts down an association.
Methods in
com.sun.nio.sctp
with parameters of type
Object
Modifier and Type
Method
Description
boolean
SctpStandardSocketOptions.InitMaxStreams.
equals
(
Object
obj)
Returns true if the specified object is another
InitMaxStreams
instance with the same number of in and out bound streams.
Uses of
Object
in
com.sun.security.auth
Subclasses of
Object
in
com.sun.security.auth
Modifier and Type
Class
Description
final class
LdapPrincipal
A principal identified by a distinguished name as specified by
RFC 2253
.
class
NTDomainPrincipal
This class implements the
Principal
interface
 and represents the name of the Windows NT domain into which the
 user authenticated.
class
NTNumericCredential
This class abstracts an NT security token
 and provides a mechanism to do same-process security impersonation.
class
NTSid
This class implements the
Principal
interface
 and represents information about a Windows NT user, group or realm.
class
NTSidDomainPrincipal
This class extends
NTSid
and represents a Windows NT user's domain SID.
class
NTSidGroupPrincipal
This class extends
NTSid
and represents one of the groups to which a Windows NT user belongs.
class
NTSidPrimaryGroupPrincipal
This class extends
NTSid
and represents a Windows NT user's primary group SID.
class
NTSidUserPrincipal
This class extends
NTSid
and represents a Windows NT user's SID.
class
NTUserPrincipal
This class implements the
Principal
interface
 and represents a Windows NT user.
class
UnixNumericGroupPrincipal
This class implements the
Principal
interface
 and represents a user's Unix group identification number (GID).
class
UnixNumericUserPrincipal
This class implements the
Principal
interface
 and represents a user's Unix identification number (UID).
class
UnixPrincipal
This class implements the
Principal
interface
 and represents a Unix user.
final class
UserPrincipal
A user principal identified by a username or account name.
Methods in
com.sun.security.auth
with parameters of type
Object
Modifier and Type
Method
Description
boolean
LdapPrincipal.
equals
(
Object
object)
Compares this principal to the specified object.
boolean
NTDomainPrincipal.
equals
(
Object
o)
Compares the specified Object with this
NTDomainPrincipal
for equality.
boolean
NTNumericCredential.
equals
(
Object
o)
Compares the specified Object with this
NTNumericCredential
for equality.
boolean
NTSid.
equals
(
Object
o)
Compares the specified Object with this
NTSid
for equality.
boolean
NTSidDomainPrincipal.
equals
(
Object
o)
Compares the specified Object with this
NTSidDomainPrincipal
for equality.
boolean
NTSidGroupPrincipal.
equals
(
Object
o)
Compares the specified Object with this
NTSidGroupPrincipal
for equality.
boolean
NTSidPrimaryGroupPrincipal.
equals
(
Object
o)
Compares the specified Object with this
NTSidPrimaryGroupPrincipal
for equality.
boolean
NTSidUserPrincipal.
equals
(
Object
o)
Compares the specified Object with this
NTSidUserPrincipal
for equality.
boolean
NTUserPrincipal.
equals
(
Object
o)
Compares the specified Object with this
NTUserPrincipal
for equality.
boolean
UnixNumericGroupPrincipal.
equals
(
Object
o)
Compares the specified Object with this
UnixNumericGroupPrincipal
for equality.
boolean
UnixNumericUserPrincipal.
equals
(
Object
o)
Compares the specified Object with this
UnixNumericUserPrincipal
for equality.
boolean
UnixPrincipal.
equals
(
Object
o)
Compares the specified Object with this
UnixPrincipal
for equality.
boolean
UserPrincipal.
equals
(
Object
object)
Compares this principal to the specified object.
Uses of
Object
in
com.sun.security.auth.callback
Subclasses of
Object
in
com.sun.security.auth.callback
Modifier and Type
Class
Description
class
TextCallbackHandler
Prompts and reads from the command line for answers to authentication
 questions.
Uses of
Object
in
com.sun.security.auth.login
Subclasses of
Object
in
com.sun.security.auth.login
Modifier and Type
Class
Description
class
ConfigFile
This class represents a default implementation for
javax.security.auth.login.Configuration
.
Uses of
Object
in
com.sun.security.auth.module
Subclasses of
Object
in
com.sun.security.auth.module
Modifier and Type
Class
Description
class
JndiLoginModule
The module prompts for a username and password
 and then verifies the password against the password stored in
 a directory service configured under JNDI.
class
KeyStoreLoginModule
Provides a JAAS login module that prompts for a key store alias and
 populates the subject with the alias's principal and credentials.
class
Krb5LoginModule
This
LoginModule
authenticates users using
 Kerberos protocols.
class
LdapLoginModule
This
LoginModule
performs LDAP-based authentication.
class
NTLoginModule
This
LoginModule
renders a user's NT security information as some number of
Principal
s
 and associates them with a
Subject
.
class
NTSystem
This class implementation retrieves and makes available NT
 security information for the current user.
class
UnixLoginModule
This
LoginModule
imports a user's Unix
Principal
information (
UnixPrincipal
,
UnixNumericUserPrincipal
,
 and
UnixNumericGroupPrincipal
)
 and associates them with the current
Subject
.
class
UnixSystem
This class implementation retrieves and makes available Unix
 UID/GID/groups information for the current user.
Uses of
Object
in
com.sun.security.jgss
Subclasses of
Object
in
com.sun.security.jgss
Modifier and Type
Class
Description
final class
AuthorizationDataEntry
Kerberos 5 AuthorizationData entry.
class
GSSUtil
GSS-API Utilities for using in conjunction with Sun Microsystem's
 implementation of Java GSS-API.
final class
InquireSecContextPermission
This class is used to protect various attributes of an established
 GSS security context that can be accessed using the
ExtendedGSSContext.inquireSecContext(com.sun.security.jgss.InquireType)
method.
Methods in
com.sun.security.jgss
that return
Object
Modifier and Type
Method
Description
Object
ExtendedGSSContext.
inquireSecContext
(
InquireType
type)
Return the mechanism-specific attribute associated with
type
.
Uses of
Object
in
com.sun.source.tree
Methods in
com.sun.source.tree
that return
Object
Modifier and Type
Method
Description
Object
LiteralTree.
getValue
()
Returns the value of the literal expression.
Uses of
Object
in
com.sun.source.util
Subclasses of
Object
in
com.sun.source.util
Modifier and Type
Class
Description
class
DocTreePath
A path of tree nodes, typically used to represent the sequence of ancestor
 nodes of a tree node up to the top-level
DocCommentTree
node.
class
DocTreePathScanner
<R,
P>
A DocTreeVisitor that visits all the child tree nodes, and provides
 support for maintaining a path for the parent nodes.
class
DocTrees
Provides access to syntax trees for doc comments.
class
DocTreeScanner
<R,
P>
A DocTreeVisitor that visits all the child tree nodes.
class
JavacTask
Provides access to functionality specific to the JDK Java Compiler, javac.
class
SimpleDocTreeVisitor
<R,
P>
A simple visitor for tree nodes.
class
SimpleTreeVisitor
<R,
P>
A simple visitor for tree nodes.
final class
TaskEvent
Provides details about work that has been done by the JDK Java Compiler, javac.
class
TreePath
A path of tree nodes, typically used to represent the sequence of ancestor
 nodes of a tree node up to the top-level
CompilationUnitTree
node.
class
TreePathScanner
<R,
P>
A TreeVisitor that visits all the child tree nodes, and provides
 support for maintaining a path for the parent nodes.
class
Trees
Bridges JSR 199, JSR 269, and the Tree API.
class
TreeScanner
<R,
P>
A TreeVisitor that visits all the child tree nodes.
Fields in
com.sun.source.util
declared as
Object
Modifier and Type
Field
Description
protected final
R
SimpleDocTreeVisitor.
DEFAULT_VALUE
The default value, returned by the
default action
.
protected final
R
SimpleTreeVisitor.
DEFAULT_VALUE
The default value, returned by the
default action
.
Uses of
Object
in
com.sun.tools.attach
Subclasses of
Object
in
com.sun.tools.attach
Modifier and Type
Class
Description
class
AgentInitializationException
The exception thrown when an agent fails to initialize in the target
 Java virtual machine.
class
AgentLoadException
The exception thrown when an agent cannot be loaded into the target
 Java virtual machine.
class
AttachNotSupportedException
Thrown by
VirtualMachine.attach
when attempting to attach to a Java virtual machine
 for which a compatible
AttachProvider
does not exist.
class
AttachOperationFailedException
Exception type to signal that an attach operation failed in the target VM.
final class
AttachPermission
When a
SecurityManager
set, this
 is the permission which will be checked when code invokes
VirtualMachine.attach
to attach to a target virtual
 machine.
class
VirtualMachine
A Java virtual machine.
class
VirtualMachineDescriptor
Describes a Java virtual machine.
Methods in
com.sun.tools.attach
with parameters of type
Object
Modifier and Type
Method
Description
boolean
VirtualMachine.
equals
(
Object
ob)
Tests this VirtualMachine for equality with another object.
boolean
VirtualMachineDescriptor.
equals
(
Object
ob)
Tests this VirtualMachineDescriptor for equality with another object.
Uses of
Object
in
com.sun.tools.attach.spi
Subclasses of
Object
in
com.sun.tools.attach.spi
Modifier and Type
Class
Description
class
AttachProvider
Attach provider class for attaching to a Java virtual machine.
Uses of
Object
in
com.sun.tools.javac
Subclasses of
Object
in
com.sun.tools.javac
Modifier and Type
Class
Description
class
Main
A legacy programmatic interface for the Java Programming Language
 compiler, javac.
Uses of
Object
in
com.sun.tools.jconsole
Subclasses of
Object
in
com.sun.tools.jconsole
Modifier and Type
Class
Description
class
JConsolePlugin
A JConsole plugin class.
Uses of
Object
in
java.applet
Subclasses of
Object
in
java.applet
Modifier and Type
Class
Description
class
Applet
Deprecated, for removal: This API element is subject to removal in a future version.
The Applet API is deprecated, no replacement.
protected class
Applet.AccessibleApplet
Deprecated, for removal: This API element is subject to removal in a future version.
This class implements accessibility support for the
Applet
class.
Uses of
Object
in
java.awt
Subclasses of
Object
in
java.awt
Modifier and Type
Class
Description
final class
AlphaComposite
The
AlphaComposite
class implements basic alpha
 compositing rules for combining source and destination colors
 to achieve blending and transparency effects with graphics and
 images.
class
AWTError
Thrown when a serious Abstract Window Toolkit error has occurred.
class
AWTEvent
The root event class for all AWT events.
class
AWTEventMulticaster
AWTEventMulticaster
implements efficient and thread-safe multi-cast
 event dispatching for the AWT events defined in the
java.awt.event
package.
class
AWTException
Signals that an Abstract Window Toolkit exception has occurred.
class
AWTKeyStroke
An
AWTKeyStroke
represents a key action on the
 keyboard, or equivalent input device.
final class
AWTPermission
This class is for AWT permissions.
class
BasicStroke
The
BasicStroke
class defines a basic set of rendering
 attributes for the outlines of graphics primitives, which are rendered
 with a
Graphics2D
object that has its Stroke attribute set to
 this
BasicStroke
.
class
BorderLayout
A border layout lays out a container, arranging and resizing
 its components to fit in five regions:
 north, south, east, west, and center.
class
BufferCapabilities
Capabilities and properties of buffers.
static final class
BufferCapabilities.FlipContents
A type-safe enumeration of the possible back buffer contents after
 page-flipping
class
Button
This class creates a labeled button.
protected class
Button.AccessibleAWTButton
This class implements accessibility support for the
Button
class.
class
Canvas
A
Canvas
component represents a blank rectangular
 area of the screen onto which the application can draw or from
 which the application can trap input events from the user.
protected class
Canvas.AccessibleAWTCanvas
This class implements accessibility support for the
Canvas
class.
class
CardLayout
A
CardLayout
object is a layout manager for a
 container.
class
Checkbox
A check box is a graphical component that can be in either an
 "on" (
true
) or "off" (
false
) state.
protected class
Checkbox.AccessibleAWTCheckbox
This class implements accessibility support for the
Checkbox
class.
class
CheckboxGroup
The
CheckboxGroup
class is used to group together
 a set of
Checkbox
buttons.
class
CheckboxMenuItem
This class represents a check box that can be included in a menu.
protected class
CheckboxMenuItem.AccessibleAWTCheckboxMenuItem
Inner class of CheckboxMenuItem used to provide default support for
 accessibility.
class
Choice
The
Choice
class presents a pop-up menu of choices.
protected class
Choice.AccessibleAWTChoice
This class implements accessibility support for the
Choice
class.
class
Color
The
Color
class is used to encapsulate colors in the default
 sRGB color space or colors in arbitrary color spaces identified by a
ColorSpace
.
class
Component
A
component
is an object having a graphical representation
 that can be displayed on the screen and that can interact with the
 user.
protected class
Component.AccessibleAWTComponent
Inner class of Component used to provide default support for
 accessibility.
protected class
Component.AccessibleAWTComponent.AccessibleAWTComponentHandler
Fire PropertyChange listener, if one is registered,
 when shown/hidden..
protected class
Component.AccessibleAWTComponent.AccessibleAWTFocusHandler
Fire PropertyChange listener, if one is registered,
 when focus events happen
protected class
Component.BltBufferStrategy
Inner class for blitting offscreen surfaces to a component.
protected class
Component.FlipBufferStrategy
Inner class for flipping buffers on a component.
final class
ComponentOrientation
The ComponentOrientation class encapsulates the language-sensitive
 orientation that is to be used to order the elements of a component
 or of text.
class
Container
A generic Abstract Window Toolkit(AWT) container object is a component
 that can contain other AWT components.
protected class
Container.AccessibleAWTContainer
Inner class of Container used to provide default support for
 accessibility.
protected class
Container.AccessibleAWTContainer.AccessibleContainerHandler
Fire
PropertyChange
listener, if one is registered,
 when children are added or removed.
class
ContainerOrderFocusTraversalPolicy
A FocusTraversalPolicy that determines traversal order based on the order
 of child Components in a Container.
class
Cursor
A class to encapsulate the bitmap representation of the mouse cursor.
class
DefaultFocusTraversalPolicy
A FocusTraversalPolicy that determines traversal order based on the order
 of child Components in a Container.
class
DefaultKeyboardFocusManager
The default KeyboardFocusManager for AWT applications.
class
Desktop
The
Desktop
class allows interact with various desktop capabilities.
class
Dialog
A Dialog is a top-level window with a title and a border
 that is typically used to take some form of input from the user.
protected class
Dialog.AccessibleAWTDialog
This class implements accessibility support for the
Dialog
class.
class
Dimension
The
Dimension
class encapsulates the width and
 height of a component (in integer precision) in a single object.
final class
DisplayMode
The
DisplayMode
class encapsulates the bit depth, height,
 width, and refresh rate of a
GraphicsDevice
.
class
Event
Deprecated.
It is recommended that
AWTEvent
and its subclasses be
             used instead
class
EventQueue
EventQueue
is a platform-independent class
 that queues events, both from the underlying peer classes
 and from trusted application classes.
class
FileDialog
The
FileDialog
class displays a dialog window
 from which the user can select a file.
class
FlowLayout
A flow layout arranges components in a directional flow, much
 like lines of text in a paragraph.
class
FocusTraversalPolicy
A FocusTraversalPolicy defines the order in which Components with a
 particular focus cycle root are traversed.
class
Font
The
Font
class represents fonts, which are used to
 render text in a visible way.
class
FontFormatException
Thrown by method createFont in the
Font
class to indicate
 that the specified font is bad.
class
FontMetrics
The
FontMetrics
class defines a font metrics object, which
 encapsulates information about the rendering of a particular font on a
 particular screen.
class
Frame
A
Frame
is a top-level window with a title and a border.
protected class
Frame.AccessibleAWTFrame
This class implements accessibility support for the
Frame
class.
class
GradientPaint
The
GradientPaint
class provides a way to fill
 a
Shape
with a linear color gradient pattern.
class
Graphics
The
Graphics
class is the abstract base class for
 all graphics contexts that allow an application to draw onto
 components that are realized on various devices, as well as
 onto off-screen images.
class
Graphics2D
This
Graphics2D
class extends the
Graphics
class to provide more sophisticated
 control over geometry, coordinate transformations, color management,
 and text layout.
class
GraphicsConfigTemplate
The
GraphicsConfigTemplate
class is used to obtain a valid
GraphicsConfiguration
.
class
GraphicsConfiguration
The
GraphicsConfiguration
class describes the
 characteristics of a graphics destination such as a printer or monitor.
class
GraphicsDevice
The
GraphicsDevice
class describes the graphics devices
 that might be available in a particular graphics environment.
class
GraphicsEnvironment
The
GraphicsEnvironment
class describes the collection
 of
GraphicsDevice
objects and
Font
objects
 available to a Java(tm) application on a particular platform.
class
GridBagConstraints
The
GridBagConstraints
class specifies constraints
 for components that are laid out using the
GridBagLayout
class.
class
GridBagLayout
The
GridBagLayout
class is a flexible layout
 manager that aligns components vertically, horizontally or along their
 baseline without requiring that the components be of the same size.
final class
GridBagLayoutInfo
The
GridBagLayoutInfo
is an utility class for
GridBagLayout
layout manager.
class
GridLayout
The
GridLayout
class is a layout manager that
 lays out a container's components in a rectangular grid.
class
HeadlessException
Thrown when code that is dependent on a keyboard, display, or mouse
 is called in an environment that does not support a keyboard, display,
 or mouse.
class
IllegalComponentStateException
Signals that an AWT component is not in an appropriate state for
 the requested operation.
class
Image
The abstract class
Image
is the superclass of all
 classes that represent graphical images.
class
ImageCapabilities
Capabilities and properties of images.
class
Insets
An
Insets
object is a representation of the borders
 of a container.
final class
JobAttributes
A set of attributes which control a print job.
static final class
JobAttributes.DefaultSelectionType
A type-safe enumeration of possible default selection states.
static final class
JobAttributes.DestinationType
A type-safe enumeration of possible job destinations.
static final class
JobAttributes.DialogType
A type-safe enumeration of possible dialogs to display to the user.
static final class
JobAttributes.MultipleDocumentHandlingType
A type-safe enumeration of possible multiple copy handling states.
static final class
JobAttributes.SidesType
A type-safe enumeration of possible multi-page impositions.
class
KeyboardFocusManager
The KeyboardFocusManager is responsible for managing the active and focused
 Windows, and the current focus owner.
class
Label
A
Label
object is a component for placing text in a
 container.
protected class
Label.AccessibleAWTLabel
This class implements accessibility support for the
Label
class.
final class
LinearGradientPaint
The
LinearGradientPaint
class provides a way to fill
 a
Shape
with a linear color gradient pattern.
class
List
The
List
component presents the user with a
 scrolling list of text items.
protected class
List.AccessibleAWTList
This class implements accessibility support for the
List
class.
protected class
List.AccessibleAWTList.AccessibleAWTListChild
This class implements accessibility support for
 List children.
class
MediaTracker
The
MediaTracker
class is a utility class to track
 the status of a number of media objects.
class
Menu
A
Menu
object is a pull-down menu component
 that is deployed from a menu bar.
protected class
Menu.AccessibleAWTMenu
Inner class of Menu used to provide default support for
 accessibility.
class
MenuBar
The
MenuBar
class encapsulates the platform's
 concept of a menu bar bound to a frame.
protected class
MenuBar.AccessibleAWTMenuBar
Inner class of MenuBar used to provide default support for
 accessibility.
class
MenuComponent
The abstract class
MenuComponent
is the superclass
 of all menu-related components.
protected class
MenuComponent.AccessibleAWTMenuComponent
Inner class of
MenuComponent
used to provide
 default support for accessibility.
class
MenuItem
All items in a menu must belong to the class
MenuItem
, or one of its subclasses.
protected class
MenuItem.AccessibleAWTMenuItem
Inner class of MenuItem used to provide default support for
 accessibility.
class
MenuShortcut
The
MenuShortcut
class represents a keyboard accelerator
 for a MenuItem.
class
MouseInfo
MouseInfo
provides methods for getting information about the mouse,
 such as mouse pointer location and the number of mouse buttons.
class
MultipleGradientPaint
This is the superclass for Paints which use a multiple color
 gradient to fill in their raster.
final class
PageAttributes
A set of attributes which control the output of a printed page.
static final class
PageAttributes.ColorType
A type-safe enumeration of possible color states.
static final class
PageAttributes.MediaType
A type-safe enumeration of possible paper sizes.
static final class
PageAttributes.OrientationRequestedType
A type-safe enumeration of possible orientations.
static final class
PageAttributes.OriginType
A type-safe enumeration of possible origins.
static final class
PageAttributes.PrintQualityType
A type-safe enumeration of possible print qualities.
class
Panel
Panel
is the simplest container class.
protected class
Panel.AccessibleAWTPanel
This class implements accessibility support for the
Panel
class.
class
Point
A point representing a location in
(x,y)
coordinate space,
 specified in integer precision.
final class
PointerInfo
A class that describes the pointer position.
class
Polygon
The
Polygon
class encapsulates a description of a
 closed, two-dimensional region within a coordinate space.
class
PopupMenu
A class that implements a menu which can be dynamically popped up
 at a specified position within a component.
protected class
PopupMenu.AccessibleAWTPopupMenu
Inner class of PopupMenu used to provide default support for
 accessibility.
class
PrintJob
An abstract class which initiates and executes a print job.
final class
RadialGradientPaint
The
RadialGradientPaint
class provides a way to fill a shape with
 a circular radial color gradient pattern.
class
Rectangle
A
Rectangle
specifies an area in a coordinate space that is
 enclosed by the
Rectangle
object's upper-left point
(x,y)
in the coordinate space, its width, and its height.
class
RenderingHints
The
RenderingHints
class defines and manages collections of
 keys and associated values which allow an application to provide input
 into the choice of algorithms used by other classes which perform
 rendering and image manipulation services.
static class
RenderingHints.Key
Defines the base type of all keys used along with the
RenderingHints
class to control various
 algorithm choices in the rendering and imaging pipelines.
class
Robot
This class is used to generate native system input events
 for the purposes of test automation, self-running demos, and
 other applications where control of the mouse and keyboard
 is needed.
class
Scrollbar
The
Scrollbar
class embodies a scroll bar, a
 familiar user-interface object.
protected class
Scrollbar.AccessibleAWTScrollBar
This class implements accessibility support for the
Scrollbar
class.
class
ScrollPane
A container class which implements automatic horizontal and/or
 vertical scrolling for a single child component.
protected class
ScrollPane.AccessibleAWTScrollPane
This class implements accessibility support for the
ScrollPane
class.
final class
ScrollPaneAdjustable
This class represents the state of a horizontal or vertical
 scrollbar of a
ScrollPane
.
final class
SplashScreen
The splash screen can be displayed at application startup, before the
 Java Virtual Machine (JVM) starts.
final class
SystemColor
A class to encapsulate symbolic colors representing the color of
 native GUI objects on a system.
class
SystemTray
The
SystemTray
class represents the system tray for a
 desktop.
class
Taskbar
The
Taskbar
class allows a Java application to interact with
 the system task area (taskbar, Dock, etc.).
class
TextArea
A
TextArea
object is a multi-line region
 that displays text.
protected class
TextArea.AccessibleAWTTextArea
This class implements accessibility support for the
TextArea
class.
class
TextComponent
The
TextComponent
class is the superclass of
 any component that allows the editing of some text.
protected class
TextComponent.AccessibleAWTTextComponent
This class implements accessibility support for the
TextComponent
class.
class
TextField
A
TextField
object is a text component
 that allows for the editing of a single line of text.
protected class
TextField.AccessibleAWTTextField
This class implements accessibility support for the
TextField
class.
class
TexturePaint
The
TexturePaint
class provides a way to fill a
Shape
with a texture that is specified as
 a
BufferedImage
.
class
Toolkit
This class is the abstract superclass of all actual
 implementations of the Abstract Window Toolkit.
class
TrayIcon
A
TrayIcon
object represents a tray icon that can be
 added to the
system tray
.
class
Window
A
Window
object is a top-level window with no borders and no
 menubar.
protected class
Window.AccessibleAWTWindow
This class implements accessibility support for the
Window
class.
Fields in
java.awt
declared as
Object
Modifier and Type
Field
Description
Object
Event.
arg
Deprecated.
An arbitrary argument of the event.
Object
Event.
target
Deprecated.
The target component.
static final
Object
Image.
UndefinedProperty
The
UndefinedProperty
object should be returned whenever a
 property which was not defined for a particular image is fetched.
static final
Object
RenderingHints.
VALUE_ALPHA_INTERPOLATION_DEFAULT
Alpha interpolation hint value -- alpha blending algorithms
 are chosen by the implementation for a good tradeoff of
 performance vs. quality.
static final
Object
RenderingHints.
VALUE_ALPHA_INTERPOLATION_QUALITY
Alpha interpolation hint value -- alpha blending algorithms
 are chosen with a preference for precision and visual quality.
static final
Object
RenderingHints.
VALUE_ALPHA_INTERPOLATION_SPEED
Alpha interpolation hint value -- alpha blending algorithms
 are chosen with a preference for calculation speed.
static final
Object
RenderingHints.
VALUE_ANTIALIAS_DEFAULT
Antialiasing hint value -- rendering is done with a default
 antialiasing mode chosen by the implementation.
static final
Object
RenderingHints.
VALUE_ANTIALIAS_OFF
Antialiasing hint value -- rendering is done without antialiasing.
static final
Object
RenderingHints.
VALUE_ANTIALIAS_ON
Antialiasing hint value -- rendering is done with antialiasing.
static final
Object
RenderingHints.
VALUE_COLOR_RENDER_DEFAULT
Color rendering hint value -- perform color conversion
 calculations as chosen by the implementation to represent
 the best available tradeoff between performance and
 accuracy.
static final
Object
RenderingHints.
VALUE_COLOR_RENDER_QUALITY
Color rendering hint value -- perform the color conversion
 calculations with the highest accuracy and visual quality.
static final
Object
RenderingHints.
VALUE_COLOR_RENDER_SPEED
Color rendering hint value -- perform the fastest color
 conversion to the format of the output device.
static final
Object
RenderingHints.
VALUE_DITHER_DEFAULT
Dithering hint value -- use a default for dithering chosen by
 the implementation.
static final
Object
RenderingHints.
VALUE_DITHER_DISABLE
Dithering hint value -- do not dither when rendering geometry.
static final
Object
RenderingHints.
VALUE_DITHER_ENABLE
Dithering hint value -- dither when rendering geometry, if needed.
static final
Object
RenderingHints.
VALUE_FRACTIONALMETRICS_DEFAULT
Font fractional metrics hint value -- character glyphs are
 positioned with accuracy chosen by the implementation.
static final
Object
RenderingHints.
VALUE_FRACTIONALMETRICS_OFF
Font fractional metrics hint value -- character glyphs are
 positioned with advance widths rounded to pixel boundaries.
static final
Object
RenderingHints.
VALUE_FRACTIONALMETRICS_ON
Font fractional metrics hint value -- character glyphs are
 positioned with sub-pixel accuracy.
static final
Object
RenderingHints.
VALUE_INTERPOLATION_BICUBIC
Interpolation hint value -- the color samples of 9 nearby
 integer coordinate samples in the image are interpolated using
 a cubic function in both
X
and
Y
to produce
 a color sample.
static final
Object
RenderingHints.
VALUE_INTERPOLATION_BILINEAR
Interpolation hint value -- the color samples of the 4 nearest
 neighboring integer coordinate samples in the image are
 interpolated linearly to produce a color sample.
static final
Object
RenderingHints.
VALUE_INTERPOLATION_NEAREST_NEIGHBOR
Interpolation hint value -- the color sample of the nearest
 neighboring integer coordinate sample in the image is used.
static final
Object
RenderingHints.
VALUE_RENDER_DEFAULT
Rendering hint value -- rendering algorithms are chosen
 by the implementation for a good tradeoff of performance
 vs. quality.
static final
Object
RenderingHints.
VALUE_RENDER_QUALITY
Rendering hint value -- rendering algorithms are chosen
 with a preference for output quality.
static final
Object
RenderingHints.
VALUE_RENDER_SPEED
Rendering hint value -- rendering algorithms are chosen
 with a preference for output speed.
static final
Object
RenderingHints.
VALUE_RESOLUTION_VARIANT_BASE
Image resolution variant hint value -- the standard resolution of an image
 is always used.
static final
Object
RenderingHints.
VALUE_RESOLUTION_VARIANT_DEFAULT
Image resolution variant hint value -- an image resolution variant is
 chosen based on a default heuristic which may depend on the policies
 of the platform
static final
Object
RenderingHints.
VALUE_RESOLUTION_VARIANT_DPI_FIT
Image resolution variant hint value -- an image resolution variant is
 chosen based only on the DPI of the screen.
static final
Object
RenderingHints.
VALUE_RESOLUTION_VARIANT_SIZE_FIT
Image resolution variant hint value -- an image resolution variant is
 chosen based on the DPI of the screen and the transform in the Graphics2D
 context.
static final
Object
RenderingHints.
VALUE_STROKE_DEFAULT
Stroke normalization control hint value -- geometry may be
 modified or left pure depending on the tradeoffs in a given
 implementation.
static final
Object
RenderingHints.
VALUE_STROKE_NORMALIZE
Stroke normalization control hint value -- geometry should
 be normalized to improve uniformity or spacing of lines and
 overall aesthetics.
static final
Object
RenderingHints.
VALUE_STROKE_PURE
Stroke normalization control hint value -- geometry should
 be left unmodified and rendered with sub-pixel accuracy.
static final
Object
RenderingHints.
VALUE_TEXT_ANTIALIAS_DEFAULT
Text antialiasing hint value -- text rendering is done according
 to the
RenderingHints.KEY_ANTIALIASING
hint or a default chosen by the
 implementation.
static final
Object
RenderingHints.
VALUE_TEXT_ANTIALIAS_GASP
Text antialiasing hint value -- text rendering is requested to
 use information in the font resource which specifies for each point
 size whether to apply
RenderingHints.VALUE_TEXT_ANTIALIAS_ON
or
RenderingHints.VALUE_TEXT_ANTIALIAS_OFF
.
static final
Object
RenderingHints.
VALUE_TEXT_ANTIALIAS_LCD_HBGR
Text antialiasing hint value -- request that text be displayed
 optimised for an LCD display with subpixels in order from display
 left to right of B,G,R such that the horizontal subpixel resolution
 is three times that of the full pixel horizontal resolution (HBGR).
static final
Object
RenderingHints.
VALUE_TEXT_ANTIALIAS_LCD_HRGB
Text antialiasing hint value -- request that text be displayed
 optimised for an LCD display with subpixels in order from display
 left to right of R,G,B such that the horizontal subpixel resolution
 is three times that of the full pixel horizontal resolution (HRGB).
static final
Object
RenderingHints.
VALUE_TEXT_ANTIALIAS_LCD_VBGR
Text antialiasing hint value -- request that text be displayed
 optimised for an LCD display with subpixel organisation from display
 top to bottom of B,G,R such that the vertical subpixel resolution is
 three times that of the full pixel vertical resolution (VBGR).
static final
Object
RenderingHints.
VALUE_TEXT_ANTIALIAS_LCD_VRGB
Text antialiasing hint value -- request that text be displayed
 optimised for an LCD display with subpixel organisation from display
 top to bottom of R,G,B such that the vertical subpixel resolution is
 three times that of the full pixel vertical resolution (VRGB).
static final
Object
RenderingHints.
VALUE_TEXT_ANTIALIAS_OFF
Text antialiasing hint value -- text rendering is done without
 any form of antialiasing.
static final
Object
RenderingHints.
VALUE_TEXT_ANTIALIAS_ON
Text antialiasing hint value -- text rendering is done with
 some form of antialiasing.
Fields in
java.awt
with type parameters of type
Object
Modifier and Type
Field
Description
protected final
Map
<
String
,
Object
>
Toolkit.
desktopProperties
The desktop properties.
Methods in
java.awt
that return
Object
Modifier and Type
Method
Description
Object
BufferCapabilities.
clone
()
Object
GridBagConstraints.
clone
()
Creates a copy of this grid bag constraint.
Object
ImageCapabilities.
clone
()
Object
Insets.
clone
()
Create a copy of this object.
Object
JobAttributes.
clone
()
Creates and returns a copy of this
JobAttributes
.
Object
PageAttributes.
clone
()
Creates and returns a copy of this PageAttributes.
Object
RenderingHints.
clone
()
Creates a clone of this
RenderingHints
object
 that has the same contents as this
RenderingHints
object.
Object
RenderingHints.
get
(
Object
key)
Returns the value to which the specified key is mapped.
Object
BorderLayout.
getConstraints
(
Component
comp)
Gets the constraints for the specified component
final
Object
Toolkit.
getDesktopProperty
(
String
propertyName)
Obtains a value for the specified desktop property.
Object
[]
MediaTracker.
getErrorsAny
()
Returns a list of all media that have encountered an error.
Object
[]
MediaTracker.
getErrorsID
(int id)
Returns a list of media with the specified ID that
 have encountered an error.
abstract
Object
Image.
getProperty
(
String
name,
ImageObserver
observer)
Gets a property of this image by name.
abstract
Object
Graphics2D.
getRenderingHint
(
RenderingHints.Key
hintKey)
Returns the value of a single preference for the rendering algorithms.
Object
[]
Checkbox.
getSelectedObjects
()
Returns an array (length 1) containing the checkbox
 label or null if the checkbox is not selected.
Object
[]
CheckboxMenuItem.
getSelectedObjects
()
Returns the array (length 1) containing the checkbox menu item
 label or null if the checkbox is not selected.
Object
[]
Choice.
getSelectedObjects
()
Returns an array (length 1) containing the currently selected
 item.
Object
[]
ItemSelectable.
getSelectedObjects
()
Returns the selected items or
null
if no
 items are selected.
Object
[]
List.
getSelectedObjects
()
Gets the selected items on this scrolling list in an array of Objects.
final
Object
Component.
getTreeLock
()
Gets this component's locking object (the object that owns the thread
 synchronization monitor) for AWT component-tree and layout
 operations.
protected final
Object
MenuComponent.
getTreeLock
()
Gets this component's locking object (the object that owns the thread
 synchronization monitor) for AWT component-tree and layout
 operations.
protected
Object
Toolkit.
lazilyLoadDesktopProperty
(
String
name)
An opportunity to lazily evaluate desktop property values.
Object
RenderingHints.
put
(
Object
key,
Object
value)
Maps the specified
key
to the specified
value
in this
RenderingHints
object.
protected
Object
AWTKeyStroke.
readResolve
()
Returns a cached instance of
AWTKeyStroke
(or a subclass of
AWTKeyStroke
) which is equal to this instance.
Object
RenderingHints.
remove
(
Object
key)
Removes the key and its corresponding value from this
RenderingHints
object.
Methods in
java.awt
that return types with arguments of type
Object
Modifier and Type
Method
Description
Set
<
Map.Entry
<
Object
,
Object
>>
RenderingHints.
entrySet
()
Returns a
Set
view of the mappings contained
 in this
RenderingHints
.
Set
<
Map.Entry
<
Object
,
Object
>>
RenderingHints.
entrySet
()
Returns a
Set
view of the mappings contained
 in this
RenderingHints
.
Set
<
Object
>
RenderingHints.
keySet
()
Returns a
Set
view of the Keys contained in this
RenderingHints
.
Collection
<
Object
>
RenderingHints.
values
()
Returns a
Collection
view of the values
 contained in this
RenderingHints
.
Methods in
java.awt
with parameters of type
Object
Modifier and Type
Method
Description
boolean
Component.
action
(
Event
evt,
Object
what)
Deprecated.
As of JDK version 1.1,
 should register this component as ActionListener on component
 which fires action events.
void
Container.
add
(
Component
comp,
Object
constraints)
Adds the specified component to the end of this container.
void
Container.
add
(
Component
comp,
Object
constraints,
 int index)
Adds the specified component to this container with the specified
 constraints at the specified index.
protected void
Container.
addImpl
(
Component
comp,
Object
constraints,
 int index)
Adds the specified component to this container at the specified
 index.
protected final void
ScrollPane.
addImpl
(
Component
comp,
Object
constraints,
 int index)
Adds the specified component to this scroll pane container.
void
BorderLayout.
addLayoutComponent
(
Component
comp,
Object
constraints)
Adds the specified component to the layout, using the specified
 constraint object.
void
CardLayout.
addLayoutComponent
(
Component
comp,
Object
constraints)
Adds the specified component to this card layout's internal
 table of names.
void
GridBagLayout.
addLayoutComponent
(
Component
comp,
Object
constraints)
Adds the specified component to the layout, using the specified
constraints
object.
void
LayoutManager2.
addLayoutComponent
(
Component
comp,
Object
constraints)
Adds the specified component to the layout, using the specified
 constraint object.
boolean
RenderingHints.
containsKey
(
Object
key)
Returns
true
if this
RenderingHints
contains a mapping for the specified key.
boolean
RenderingHints.
containsValue
(
Object
value)
Returns true if this RenderingHints maps one or more keys to the
 specified value.
boolean
AlphaComposite.
equals
(
Object
obj)
Determines whether the specified object is equal to this
AlphaComposite
.
final boolean
AWTKeyStroke.
equals
(
Object
anObject)
Returns true if this object is identical to the specified object.
boolean
BasicStroke.
equals
(
Object
obj)
Tests if a specified object is equal to this
BasicStroke
by first testing if it is a
BasicStroke
and then comparing
 its width, join, cap, miter limit, dash, and dash phase attributes with
 those of this
BasicStroke
.
boolean
Color.
equals
(
Object
obj)
Determines whether another object is equal to this
Color
.
boolean
Dimension.
equals
(
Object
obj)
Checks whether two dimension objects have equal values.
boolean
Font.
equals
(
Object
obj)
Compares this
Font
object to the specified
Object
.
boolean
Insets.
equals
(
Object
obj)
Checks whether two insets objects are equal.
boolean
JobAttributes.
equals
(
Object
obj)
Determines whether two JobAttributes are equal to each other.
boolean
MenuShortcut.
equals
(
Object
obj)
Returns whether this MenuShortcut is the same as another:
 equality is defined to mean that both MenuShortcuts use the same key
 and both either use or don't use the SHIFT key.
boolean
PageAttributes.
equals
(
Object
obj)
Determines whether two PageAttributes are equal to each other.
boolean
Point.
equals
(
Object
obj)
Determines whether or not two points are equal.
boolean
Rectangle.
equals
(
Object
obj)
Checks whether two rectangles are equal.
boolean
RenderingHints.
equals
(
Object
o)
Compares the specified
Object
with this
RenderingHints
for equality.
final boolean
RenderingHints.Key.
equals
(
Object
o)
The equals method for all Key objects will return the same
 result as the equality operator '=='.
protected void
Component.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Support for reporting bound property changes for Object properties.
protected void
KeyboardFocusManager.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Fires a PropertyChangeEvent in response to a change in a bound property.
protected void
KeyboardFocusManager.
fireVetoableChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Fires a PropertyChangeEvent in response to a change in a vetoable
 property.
Object
RenderingHints.
get
(
Object
key)
Returns the value to which the specified key is mapped.
Component
BorderLayout.
getLayoutComponent
(
Container
target,
Object
constraints)
Returns the component that corresponds to the given constraint location
 based on the target
Container
's component orientation.
Component
BorderLayout.
getLayoutComponent
(
Object
constraints)
Gets the component that was added using the given constraint
boolean
Component.
gotFocus
(
Event
evt,
Object
what)
Deprecated.
As of JDK version 1.1,
 replaced by processFocusEvent(FocusEvent).
abstract boolean
RenderingHints.Key.
isCompatibleValue
(
Object
val)
Returns true if the specified object is a valid value
 for this Key.
boolean
Component.
lostFocus
(
Event
evt,
Object
what)
Deprecated.
As of JDK version 1.1,
 replaced by processFocusEvent(FocusEvent).
Object
RenderingHints.
put
(
Object
key,
Object
value)
Maps the specified
key
to the specified
value
in this
RenderingHints
object.
Object
RenderingHints.
remove
(
Object
key)
Removes the key and its corresponding value from this
RenderingHints
object.
protected final void
Toolkit.
setDesktopProperty
(
String
name,
Object
newValue)
Sets the named desktop property to the specified value and fires a
 property change event to notify any listeners that the value has changed.
abstract void
Graphics2D.
setRenderingHint
(
RenderingHints.Key
hintKey,
Object
hintValue)
Sets the value of a single preference for the rendering algorithms.
void
AWTEvent.
setSource
(
Object
newSource)
Retargets an event to a new source.
Constructors in
java.awt
with parameters of type
Object
Modifier
Constructor
Description
AWTEvent
(
Object
source,
 int id)
Constructs an AWTEvent object with the specified source object and type.
Event
(
Object
target,
 int id,
Object
arg)
Deprecated.
NOTE:
The
Event
class is obsolete and is
 available only for backwards compatibility.
Event
(
Object
target,
 long when,
 int id,
 int x,
 int y,
 int key,
 int modifiers)
Deprecated.
NOTE:
The
Event
class is obsolete and is
 available only for backwards compatibility.
Event
(
Object
target,
 long when,
 int id,
 int x,
 int y,
 int key,
 int modifiers,
Object
arg)
Deprecated.
NOTE:
The
Event
class is obsolete and is
 available only for backwards compatibility.
RenderingHints
(
RenderingHints.Key
key,
Object
value)
Constructs a new object with the specified key/value pair.
Uses of
Object
in
java.awt.color
Subclasses of
Object
in
java.awt.color
Modifier and Type
Class
Description
class
CMMException
This exception is thrown if the native CMM returns an error.
class
ColorSpace
This abstract class is used to serve as a color space tag to identify the
 specific color space of a
Color
object or, via a
ColorModel
object, of an
Image
, a
BufferedImage
, or a
GraphicsDevice
.
class
ICC_ColorSpace
The
ICC_ColorSpace
class is an implementation of the abstract
ColorSpace
class.
class
ICC_Profile
A representation of color profile data for device independent and device
 dependent color spaces based on the International Color Consortium
 Specification ICC.1:2001-12, File Format for Color Profiles, (see
http://www.color.org
).
final class
ICC_ProfileGray
The
ICC_ProfileGray
class is a subclass of the
ICC_Profile
class that represents profiles which meet the following criteria: the color
 space type of the profile is
TYPE_GRAY
and the profile includes the
grayTRCTag
and
mediaWhitePointTag
tags.
final class
ICC_ProfileRGB
The
ICC_ProfileRGB
class is a subclass of the
ICC_Profile
class that represents profiles which meet the following criteria: the
 profile's color space type is RGB, and the profile includes the
redColorantTag
,
greenColorantTag
,
blueColorantTag
,
redTRCTag
,
greenTRCTag
,
blueTRCTag
,
mediaWhitePointTag
tags.
class
ProfileDataException
This exception is thrown when an error occurs in accessing or processing an
ICC_Profile
object.
Methods in
java.awt.color
that return
Object
Modifier and Type
Method
Description
protected
Object
ICC_Profile.
readResolve
()
Resolves instances being deserialized into instances registered with CMM.
Uses of
Object
in
java.awt.datatransfer
Subclasses of
Object
in
java.awt.datatransfer
Modifier and Type
Class
Description
class
Clipboard
A class that implements a mechanism to transfer data using cut/copy/paste
 operations.
class
DataFlavor
A
DataFlavor
provides meta information about data.
class
FlavorEvent
FlavorEvent
is used to notify interested parties that available
DataFlavor
s have changed in the
Clipboard
(the event source).
class
MimeTypeParseException
A class to encapsulate MimeType parsing related exceptions.
class
StringSelection
A
Transferable
which implements the capability required to transfer a
String
.
final class
SystemFlavorMap
The SystemFlavorMap is a configurable map between "natives" (Strings), which
 correspond to platform-specific data formats, and "flavors" (DataFlavors),
 which correspond to platform-independent MIME types.
class
UnsupportedFlavorException
Signals that the requested data is not supported in this flavor.
Methods in
java.awt.datatransfer
that return
Object
Modifier and Type
Method
Description
Object
DataFlavor.
clone
()
Returns a clone of this
DataFlavor
.
Object
Clipboard.
getData
(
DataFlavor
flavor)
Returns an object representing the current contents of this clipboard in
 the specified
DataFlavor
.
Object
StringSelection.
getTransferData
(
DataFlavor
flavor)
Returns the
Transferable
's data in the requested
DataFlavor
if possible.
Object
Transferable.
getTransferData
(
DataFlavor
flavor)
Returns an object which represents the data to be transferred.
Methods in
java.awt.datatransfer
with parameters of type
Object
Modifier and Type
Method
Description
boolean
DataFlavor.
equals
(
Object
o)
Indicates whether some other object is "equal to" this one.
Transferable
Clipboard.
getContents
(
Object
requestor)
Returns a transferable object representing the current contents of the
 clipboard.
Uses of
Object
in
java.awt.desktop
Subclasses of
Object
in
java.awt.desktop
Modifier and Type
Class
Description
final class
AboutEvent
Event sent when the application is asked to open its about window.
class
AppEvent
AppEvents are sent to listeners and handlers installed on the
Desktop
instance of the current desktop context.
final class
AppForegroundEvent
Event sent when the application has become the foreground app, and when it is
 no longer the foreground app.
final class
AppHiddenEvent
Event sent when the application has been hidden or shown.
final class
AppReopenedEvent
Event sent when the application is asked to re-open itself.
class
FilesEvent
Auxiliary event containing a list of files.
final class
OpenFilesEvent
Event sent when the app is asked to open a list of files.
final class
OpenURIEvent
Event sent when the app is asked to open a
URI
.
final class
PreferencesEvent
Event sent when the application is asked to open its preferences window.
final class
PrintFilesEvent
Event sent when the app is asked to print a list of files.
final class
QuitEvent
Event sent when the application is asked to quit.
final class
ScreenSleepEvent
Event sent when the displays attached to the system enter and exit power save
 sleep.
final class
SystemSleepEvent
Event sent when the system enters and exits power save sleep.
final class
UserSessionEvent
Event sent when the user session has been changed.
Uses of
Object
in
java.awt.dnd
Subclasses of
Object
in
java.awt.dnd
Modifier and Type
Class
Description
final class
DnDConstants
This class contains constant values representing
 the type of action(s) to be performed by a Drag and Drop operation.
class
DragGestureEvent
A
DragGestureEvent
is passed
 to
DragGestureListener
's
 dragGestureRecognized() method
 when a particular
DragGestureRecognizer
detects that a
 platform dependent drag initiating gesture has occurred
 on the
Component
that it is tracking.
class
DragGestureRecognizer
The
DragGestureRecognizer
is an
 abstract base class for the specification
 of a platform-dependent listener that can be associated with a particular
Component
in order to
 identify platform-dependent drag initiating gestures.
class
DragSource
The
DragSource
is the entity responsible
 for the initiation of the Drag
 and Drop operation, and may be used in a number of scenarios:
 
 1 default instance per JVM for the lifetime of that JVM.
class
DragSourceAdapter
An abstract adapter class for receiving drag source events.
class
DragSourceContext
The
DragSourceContext
class is responsible for managing the
 initiator side of the Drag and Drop protocol.
class
DragSourceDragEvent
The
DragSourceDragEvent
is
 delivered from the
DragSourceContextPeer
,
 via the
DragSourceContext
, to the
DragSourceListener
registered with that
DragSourceContext
and with its associated
DragSource
.
class
DragSourceDropEvent
The
DragSourceDropEvent
is delivered
 from the
DragSourceContextPeer
,
 via the
DragSourceContext
, to the
dragDropEnd
method of
DragSourceListener
s registered with that
DragSourceContext
and with its associated
DragSource
.
class
DragSourceEvent
This class is the base class for
DragSourceDragEvent
and
DragSourceDropEvent
.
class
DropTarget
The
DropTarget
is associated
 with a
Component
when that
Component
wishes
 to accept drops during Drag and Drop operations.
protected static class
DropTarget.DropTargetAutoScroller
this protected nested class implements autoscrolling
class
DropTargetAdapter
An abstract adapter class for receiving drop target events.
final class
DropTargetContext
A
DropTargetContext
is created
 whenever the logical cursor associated
 with a Drag and Drop operation coincides with the visible geometry of
 a
Component
associated with a
DropTarget
.
protected class
DropTargetContext.TransferableProxy
TransferableProxy
is a helper inner class that implements
Transferable
interface and serves as a proxy for another
Transferable
object which represents data transfer for
 a particular drag-n-drop operation.
class
DropTargetDragEvent
The
DropTargetDragEvent
is delivered to a
DropTargetListener
via its
 dragEnter() and dragOver() methods.
class
DropTargetDropEvent
The
DropTargetDropEvent
is delivered
 via the
DropTargetListener
drop() method.
class
DropTargetEvent
The
DropTargetEvent
is the base
 class for both the
DropTargetDragEvent
and the
DropTargetDropEvent
.
class
InvalidDnDOperationException
This exception is thrown by various methods in the java.awt.dnd package.
class
MouseDragGestureRecognizer
This abstract subclass of
DragGestureRecognizer
defines a
DragGestureRecognizer
for mouse-based gestures.
Methods in
java.awt.dnd
that return
Object
Modifier and Type
Method
Description
Object
DropTargetContext.TransferableProxy.
getTransferData
(
DataFlavor
df)
Returns an object which represents the data provided by
 the encapsulated transferable for the requested data flavor.
Object
[]
DragGestureEvent.
toArray
()
Returns an
Object
array of the
 events comprising the drag gesture.
Object
[]
DragGestureEvent.
toArray
(
Object
[] array)
Returns an array of the events comprising the drag gesture.
Methods in
java.awt.dnd
with parameters of type
Object
Modifier and Type
Method
Description
Object
[]
DragGestureEvent.
toArray
(
Object
[] array)
Returns an array of the events comprising the drag gesture.
Uses of
Object
in
java.awt.event
Subclasses of
Object
in
java.awt.event
Modifier and Type
Class
Description
class
ActionEvent
A semantic event which indicates that a component-defined action occurred.
class
AdjustmentEvent
The adjustment event emitted by Adjustable objects like
Scrollbar
and
ScrollPane
.
class
AWTEventListenerProxy
A class which extends the
EventListenerProxy
specifically for adding an
AWTEventListener
for a specific event mask.
class
ComponentAdapter
An abstract adapter class for receiving component events.
class
ComponentEvent
A low-level event which indicates that a component moved, changed
 size, or changed visibility (also, the root class for the other
 component-level events).
class
ContainerAdapter
An abstract adapter class for receiving container events.
class
ContainerEvent
A low-level event which indicates that a container's contents
 changed because a component was added or removed.
class
FocusAdapter
An abstract adapter class for receiving keyboard focus events.
class
FocusEvent
A low-level event which indicates that a Component has gained or lost the
 input focus.
class
HierarchyBoundsAdapter
An abstract adapter class for receiving ancestor moved and resized events.
class
HierarchyEvent
An event which indicates a change to the
Component
hierarchy to which
Component
belongs.
class
InputEvent
The root event class for all component-level input events.
class
InputMethodEvent
Input method events contain information about text that is being
 composed using an input method.
class
InvocationEvent
An event which executes the
run()
method on a
Runnable
when dispatched by the AWT event dispatcher thread.
class
ItemEvent
A semantic event which indicates that an item was selected or deselected.
class
KeyAdapter
An abstract adapter class for receiving keyboard events.
class
KeyEvent
An event which indicates that a keystroke occurred in a component.
class
MouseAdapter
An abstract adapter class for receiving mouse events.
class
MouseEvent
An event which indicates that a mouse action occurred in a component.
class
MouseMotionAdapter
An abstract adapter class for receiving mouse motion events.
class
MouseWheelEvent
An event which indicates that the mouse wheel was rotated in a component.
class
PaintEvent
The component-level paint event.
class
TextEvent
A semantic event which indicates that an object's text changed.
class
WindowAdapter
An abstract adapter class for receiving window events.
class
WindowEvent
A low-level event that indicates that a window has changed its status.
Fields in
java.awt.event
declared as
Object
Modifier and Type
Field
Description
protected
Object
InvocationEvent.
notifier
The (potentially null) Object whose notifyAll() method will be called
 immediately after the Runnable.run() method has returned or thrown an exception
 or after the event was disposed.
Methods in
java.awt.event
that return
Object
Modifier and Type
Method
Description
Object
ItemEvent.
getItem
()
Returns the item affected by the event.
Constructors in
java.awt.event
with parameters of type
Object
Modifier
Constructor
Description
ActionEvent
(
Object
source,
 int id,
String
command)
Constructs an
ActionEvent
object.
ActionEvent
(
Object
source,
 int id,
String
command,
 int modifiers)
Constructs an
ActionEvent
object with modifier keys.
ActionEvent
(
Object
source,
 int id,
String
command,
 long when,
 int modifiers)
Constructs an
ActionEvent
object with the specified
 modifier keys and timestamp.
protected
InvocationEvent
(
Object
source,
 int id,
Runnable
runnable,
Object
notifier,
 boolean catchThrowables)
Constructs an
InvocationEvent
with the specified
 source and ID which will execute the runnable's
run()
method when dispatched.
InvocationEvent
(
Object
source,
Runnable
runnable)
Constructs an
InvocationEvent
with the specified
 source which will execute the runnable's
run()
method when dispatched.
InvocationEvent
(
Object
source,
Runnable
runnable,
Object
notifier,
 boolean catchThrowables)
Constructs an
InvocationEvent
with the specified
 source which will execute the runnable's
run()
method when dispatched.
InvocationEvent
(
Object
source,
Runnable
runnable,
Runnable
listener,
 boolean catchThrowables)
Constructs an
InvocationEvent
with the specified
 source which will execute the runnable's
run()
method when dispatched.
ItemEvent
(
ItemSelectable
source,
 int id,
Object
item,
 int stateChange)
Constructs an
ItemEvent
object.
TextEvent
(
Object
source,
 int id)
Constructs a
TextEvent
object.
Uses of
Object
in
java.awt.font
Subclasses of
Object
in
java.awt.font
Modifier and Type
Class
Description
class
FontRenderContext
The
FontRenderContext
class is a container for the
   information needed to correctly measure text.
final class
GlyphJustificationInfo
The
GlyphJustificationInfo
class represents information
 about the justification properties of a glyph.
final class
GlyphMetrics
The
GlyphMetrics
class represents information for a
 single glyph.
class
GlyphVector
A
GlyphVector
object is a collection of glyphs
 containing geometric information for the placement of each glyph
 in a transformed coordinate space which corresponds to the
 device on which the
GlyphVector
is ultimately
 displayed.
class
GraphicAttribute
This class is used with the CHAR_REPLACEMENT attribute.
final class
ImageGraphicAttribute
The
ImageGraphicAttribute
class is an implementation of
GraphicAttribute
which draws images in
 a
TextLayout
.
class
LayoutPath
LayoutPath provides a mapping between locations relative to the
 baseline and points in user space.
final class
LineBreakMeasurer
The
LineBreakMeasurer
class allows styled text to be
 broken into lines (or segments) that fit within a particular visual
 advance.
class
LineMetrics
The
LineMetrics
class allows access to the
 metrics needed to layout characters along a line
 and to layout of a set of lines.
final class
NumericShaper
The
NumericShaper
class is used to convert Latin-1 (European)
 digits to other Unicode decimal digits.
final class
ShapeGraphicAttribute
The
ShapeGraphicAttribute
class is an implementation of
GraphicAttribute
that draws shapes in a
TextLayout
.
final class
TextAttribute
The
TextAttribute
class defines attribute keys and
 attribute values used for text rendering.
final class
TextHitInfo
The
TextHitInfo
class represents a character position in a
 text model, and a
bias
, or "side," of the character.
final class
TextLayout
TextLayout
is an immutable graphical representation of styled
 character data.
static class
TextLayout.CaretPolicy
Defines a policy for determining the strong caret location.
final class
TextMeasurer
The
TextMeasurer
class provides the primitive operations
 needed for line break: measuring up to a given advance, determining the
 advance of a range of characters, and generating a
TextLayout
for a range of characters.
final class
TransformAttribute
The
TransformAttribute
class provides an immutable
 wrapper for a transform so that it is safe to use as an attribute.
Methods in
java.awt.font
that return
Object
Modifier and Type
Method
Description
protected
Object
TextLayout.
clone
()
Creates a copy of this
TextLayout
.
protected
Object
TextMeasurer.
clone
()
Object
FontRenderContext.
getAntiAliasingHint
()
Return the text anti-aliasing rendering mode hint used in this
FontRenderContext
.
Object
FontRenderContext.
getFractionalMetricsHint
()
Return the text fractional metrics rendering mode hint used in this
FontRenderContext
.
protected
Object
TextAttribute.
readResolve
()
Resolves instances being deserialized to the predefined constants.
Methods in
java.awt.font
with parameters of type
Object
Modifier and Type
Method
Description
boolean
FontRenderContext.
equals
(
Object
obj)
Return true if obj is an instance of FontRenderContext and has the same
 transform, antialiasing, and fractional metrics values as this.
boolean
ImageGraphicAttribute.
equals
(
Object
rhs)
Compares this
ImageGraphicAttribute
to the specified
Object
.
boolean
NumericShaper.
equals
(
Object
o)
Returns
true
if the specified object is an instance of
NumericShaper
and shapes identically to this one,
 regardless of the range representations, the bit mask or the
 enum.
boolean
ShapeGraphicAttribute.
equals
(
Object
rhs)
Compares this
ShapeGraphicAttribute
to the specified
Object
.
boolean
TextHitInfo.
equals
(
Object
obj)
Returns
true
if the specified
Object
is a
TextHitInfo
and equals this
TextHitInfo
.
boolean
TransformAttribute.
equals
(
Object
rhs)
Returns
true
if rhs is a
TransformAttribute
whose transform is equal to this
TransformAttribute
's
 transform.
Constructors in
java.awt.font
with parameters of type
Object
Modifier
Constructor
Description
FontRenderContext
(
AffineTransform
tx,
Object
aaHint,
Object
fmHint)
Constructs a
FontRenderContext
object from an
 optional
AffineTransform
and two
Object
values that determine if the newly constructed object has
 anti-aliasing or fractional metrics.
Uses of
Object
in
java.awt.geom
Subclasses of
Object
in
java.awt.geom
Modifier and Type
Class
Description
class
AffineTransform
The
AffineTransform
class represents a 2D affine transform
 that performs a linear mapping from 2D coordinates to other 2D
 coordinates that preserves the "straightness" and
 "parallelness" of lines.
class
Arc2D
Arc2D
is the abstract superclass for all objects that
 store a 2D arc defined by a framing rectangle,
 start angle, angular extent (length of the arc), and a closure type
 (
OPEN
,
CHORD
, or
PIE
).
static class
Arc2D.Double
This class defines an arc specified in
double
precision.
static class
Arc2D.Float
This class defines an arc specified in
float
precision.
class
Area
An
Area
object stores and manipulates a
 resolution-independent description of an enclosed area of
 2-dimensional space.
class
CubicCurve2D
The
CubicCurve2D
class defines a cubic parametric curve
 segment in
(x,y)
coordinate space.
static class
CubicCurve2D.Double
A cubic parametric curve segment specified with
double
coordinates.
static class
CubicCurve2D.Float
A cubic parametric curve segment specified with
float
coordinates.
class
Dimension2D
The
Dimension2D
class is to encapsulate a width
 and a height dimension.
class
Ellipse2D
The
Ellipse2D
class describes an ellipse that is defined
 by a framing rectangle.
static class
Ellipse2D.Double
The
Double
class defines an ellipse specified
 in
double
precision.
static class
Ellipse2D.Float
The
Float
class defines an ellipse specified
 in
float
precision.
class
FlatteningPathIterator
The
FlatteningPathIterator
class returns a flattened view of
 another
PathIterator
object.
final class
GeneralPath
The
GeneralPath
class represents a geometric path
 constructed from straight lines, and quadratic and cubic
 (Bézier) curves.
class
IllegalPathStateException
The
IllegalPathStateException
represents an
 exception that is thrown if an operation is performed on a path
 that is in an illegal state with respect to the particular
 operation being performed, such as appending a path segment
 to a
GeneralPath
without an initial moveto.
class
Line2D
This
Line2D
represents a line segment in
(x,y)
coordinate space.
static class
Line2D.Double
A line segment specified with double coordinates.
static class
Line2D.Float
A line segment specified with float coordinates.
class
NoninvertibleTransformException
The
NoninvertibleTransformException
class represents
 an exception that is thrown if an operation is performed requiring
 the inverse of an
AffineTransform
object but the
AffineTransform
is in a non-invertible state.
class
Path2D
The
Path2D
class provides a simple, yet flexible
 shape which represents an arbitrary geometric path.
static class
Path2D.Double
The
Double
class defines a geometric path with
 coordinates stored in double precision floating point.
static class
Path2D.Float
The
Float
class defines a geometric path with
 coordinates stored in single precision floating point.
class
Point2D
The
Point2D
class defines a point representing a location
 in
(x,y)
coordinate space.
static class
Point2D.Double
The
Double
class defines a point specified in
double
precision.
static class
Point2D.Float
The
Float
class defines a point specified in float
 precision.
class
QuadCurve2D
The
QuadCurve2D
class defines a quadratic parametric curve
 segment in
(x,y)
coordinate space.
static class
QuadCurve2D.Double
A quadratic parametric curve segment specified with
double
coordinates.
static class
QuadCurve2D.Float
A quadratic parametric curve segment specified with
float
coordinates.
class
Rectangle2D
The
Rectangle2D
class describes a rectangle
 defined by a location
(x,y)
and dimension
(w x h)
.
static class
Rectangle2D.Double
The
Double
class defines a rectangle specified in
 double coordinates.
static class
Rectangle2D.Float
The
Float
class defines a rectangle specified in float
 coordinates.
class
RectangularShape
RectangularShape
is the base class for a number of
Shape
objects whose geometry is defined by a rectangular frame.
class
RoundRectangle2D
The
RoundRectangle2D
class defines a rectangle with
 rounded corners defined by a location
(x,y)
, a
 dimension
(w x h)
, and the width and height of an arc
 with which to round the corners.
static class
RoundRectangle2D.Double
The
Double
class defines a rectangle with rounded
 corners all specified in
double
coordinates.
static class
RoundRectangle2D.Float
The
Float
class defines a rectangle with rounded
 corners all specified in
float
coordinates.
Methods in
java.awt.geom
that return
Object
Modifier and Type
Method
Description
Object
AffineTransform.
clone
()
Returns a copy of this
AffineTransform
object.
Object
Area.
clone
()
Returns an exact copy of this
Area
object.
Object
CubicCurve2D.
clone
()
Creates a new object of the same class as this object.
Object
Dimension2D.
clone
()
Creates a new object of the same class as this object.
Object
Line2D.
clone
()
Creates a new object of the same class as this object.
abstract
Object
Path2D.
clone
()
Creates a new object of the same class as this object.
final
Object
Path2D.Double.
clone
()
Creates a new object of the same class as this object.
final
Object
Path2D.Float.
clone
()
Creates a new object of the same class as this object.
Object
Point2D.
clone
()
Creates a new object of the same class and with the
 same contents as this object.
Object
QuadCurve2D.
clone
()
Creates a new object of the same class and with the same contents
 as this object.
Object
RectangularShape.
clone
()
Creates a new object of the same class and with the same
 contents as this object.
Methods in
java.awt.geom
with parameters of type
Object
Modifier and Type
Method
Description
boolean
AffineTransform.
equals
(
Object
obj)
Returns
true
if this
AffineTransform
represents the same affine coordinate transform as the specified
 argument.
boolean
Arc2D.
equals
(
Object
obj)
Determines whether or not the specified
Object
is
 equal to this
Arc2D
.
boolean
Ellipse2D.
equals
(
Object
obj)
Determines whether or not the specified
Object
is
 equal to this
Ellipse2D
.
boolean
Point2D.
equals
(
Object
obj)
Determines whether or not two points are equal.
boolean
Rectangle2D.
equals
(
Object
obj)
Determines whether or not the specified
Object
is
 equal to this
Rectangle2D
.
boolean
RoundRectangle2D.
equals
(
Object
obj)
Determines whether or not the specified
Object
is
 equal to this
RoundRectangle2D
.
Uses of
Object
in
java.awt.im
Subclasses of
Object
in
java.awt.im
Modifier and Type
Class
Description
class
InputContext
Provides methods to control text input facilities such as input
 methods and keyboard layouts.
class
InputMethodHighlight
An InputMethodHighlight is used to describe the highlight
 attributes of text being composed.
final class
InputSubset
Defines additional Unicode subsets for use by input methods.
Methods in
java.awt.im
that return
Object
Modifier and Type
Method
Description
Object
InputContext.
getInputMethodControlObject
()
Returns a control object from the current input method, or null.
Uses of
Object
in
java.awt.im.spi
Methods in
java.awt.im.spi
that return
Object
Modifier and Type
Method
Description
Object
InputMethod.
getControlObject
()
Returns a control object from this input method, or null.
Uses of
Object
in
java.awt.image
Subclasses of
Object
in
java.awt.image
Modifier and Type
Class
Description
class
AbstractMultiResolutionImage
This class provides default implementations of several
Image
methods
 for classes that want to implement the
MultiResolutionImage
interface.
class
AffineTransformOp
This class uses an affine transform to perform a linear mapping from
 2D coordinates in the source image or
Raster
to 2D coordinates
 in the destination image or
Raster
.
class
AreaAveragingScaleFilter
An ImageFilter class for scaling images using a simple area averaging
 algorithm that produces smoother results than the nearest neighbor
 algorithm.
class
BandCombineOp
This class performs an arbitrary linear combination of the bands
 in a
Raster
, using a specified matrix.
final class
BandedSampleModel
This class represents image data which is stored in a band interleaved
  fashion and for
  which each sample of a pixel occupies one data element of the DataBuffer.
class
BaseMultiResolutionImage
This class is an array-based implementation of
 the
AbstractMultiResolutionImage
class.
class
BufferedImage
The
BufferedImage
subclass describes an
Image
with an accessible buffer of image data.
class
BufferedImageFilter
The
BufferedImageFilter
class subclasses an
ImageFilter
to provide a simple means of
 using a single-source/single-destination image operator
 (
BufferedImageOp
) to filter a
BufferedImage
in the Image Producer/Consumer/Observer
 paradigm.
class
BufferStrategy
The
BufferStrategy
class represents the mechanism with which
 to organize complex memory on a particular
Canvas
or
Window
.
class
ByteLookupTable
This class defines a lookup table object.
class
ColorConvertOp
This class performs a pixel-by-pixel color conversion of the data in
 the source image.
class
ColorModel
The
ColorModel
abstract class encapsulates the
 methods for translating a pixel value to color components
 (for example, red, green, and blue) and an alpha component.
class
ComponentColorModel
A
ColorModel
class that works with pixel values that
 represent color and alpha information as separate samples and that
 store each sample in a separate data element.
class
ComponentSampleModel
This class represents image data which is stored such that each sample
  of a pixel occupies one data element of the DataBuffer.
class
ConvolveOp
This class implements a convolution from the source
 to the destination.
class
CropImageFilter
An ImageFilter class for cropping images.
class
DataBuffer
This class exists to wrap one or more data arrays.
final class
DataBufferByte
This class extends
DataBuffer
and stores data internally as bytes.
final class
DataBufferDouble
This class extends
DataBuffer
and stores data internally
 in
double
form.
final class
DataBufferFloat
This class extends
DataBuffer
and stores data internally
 in
float
form.
final class
DataBufferInt
This class extends
DataBuffer
and stores data internally
 as integers.
final class
DataBufferShort
This class extends
DataBuffer
and stores data internally as shorts.
final class
DataBufferUShort
This class extends
DataBuffer
and stores data internally as
 shorts.
class
DirectColorModel
The
DirectColorModel
class is a
ColorModel
class that works with pixel values that represent RGB
 color and alpha information as separate samples and that pack all
 samples for a single pixel into a single int, short, or byte quantity.
class
FilteredImageSource
This class is an implementation of the ImageProducer interface which
 takes an existing image and a filter object and uses them to produce
 image data for a new filtered version of the original image.
class
ImageFilter
This class implements a filter for the set of interface methods that
 are used to deliver data from an ImageProducer to an ImageConsumer.
class
ImagingOpException
The
ImagingOpException
is thrown if one of the
BufferedImageOp
or
RasterOp
filter methods cannot
 process the image.
class
IndexColorModel
The
IndexColorModel
class is a
ColorModel
class that works with pixel values consisting of a
 single sample that is an index into a fixed colormap in the default
 sRGB color space.
class
Kernel
The
Kernel
class defines a matrix that describes how a
 specified pixel and its surrounding pixels affect the value
 computed for the pixel's position in the output image of a filtering
 operation.
class
LookupOp
This class implements a lookup operation from the source
 to the destination.
class
LookupTable
This abstract class defines a lookup table object.
class
MemoryImageSource
This class is an implementation of the ImageProducer interface which
 uses an array to produce pixel values for an Image.
class
MultiPixelPackedSampleModel
The
MultiPixelPackedSampleModel
class represents
 one-banded images and can pack multiple one-sample
 pixels into one data element.
class
PackedColorModel
The
PackedColorModel
class is an abstract
ColorModel
class that works with pixel values which represent
 color and alpha information as separate samples and which pack all
 samples for a single pixel into a single int, short, or byte quantity.
class
PixelGrabber
The PixelGrabber class implements an ImageConsumer which can be attached
 to an Image or ImageProducer object to retrieve a subset of the pixels
 in that image.
class
PixelInterleavedSampleModel
This class represents image data which is stored in a pixel interleaved
  fashion and for
  which each sample of a pixel occupies one data element of the DataBuffer.
class
Raster
A class representing a rectangular array of pixels.
class
RasterFormatException
The
RasterFormatException
is thrown if there is
 invalid layout information in the
Raster
.
class
ReplicateScaleFilter
An ImageFilter class for scaling images using the simplest algorithm.
class
RescaleOp
This class performs a pixel-by-pixel rescaling of the data in the
 source image by multiplying the sample values for each pixel by a scale
 factor and then adding an offset.
class
RGBImageFilter
This class provides an easy way to create an ImageFilter which modifies
 the pixels of an image in the default RGB ColorModel.
class
SampleModel
This abstract class defines an interface for extracting samples of pixels
  in an image.
class
ShortLookupTable
This class defines a lookup table object.
class
SinglePixelPackedSampleModel
This class represents pixel data packed such that the N samples which make
  up a single pixel are stored in a single data array element, and each data
  data array element holds samples for only one pixel.
class
VolatileImage
VolatileImage is an image which can lose its
 contents at any time due to circumstances beyond the control of the
 application (e.g., situations caused by the operating system or by
 other applications).
class
WritableRaster
This class extends Raster to provide pixel writing capabilities.
Fields in
java.awt.image
declared as
Object
Modifier and Type
Field
Description
protected
Object
ReplicateScaleFilter.
outpixbuf
A
byte
array initialized with a size of
ReplicateScaleFilter.destWidth
and used to deliver a row of pixel
 data to the
ImageConsumer
.
Methods in
java.awt.image
that return
Object
Modifier and Type
Method
Description
Object
ImageFilter.
clone
()
Clones this object.
Object
Kernel.
clone
()
Clones this object.
Object
BandedSampleModel.
getDataElements
(int x,
 int y,
Object
obj,
DataBuffer
data)
Returns data for a single pixel in a primitive array of type
 TransferType.
Object
ColorModel.
getDataElements
(float[] normComponents,
 int normOffset,
Object
obj)
Returns a data element array representation of a pixel in this
ColorModel
, given an array of normalized color/alpha
 components.
Object
ColorModel.
getDataElements
(int[] components,
 int offset,
Object
obj)
Returns a data element array representation of a pixel in this
ColorModel
, given an array of unnormalized color/alpha
 components.
Object
ColorModel.
getDataElements
(int rgb,
Object
pixel)
Returns a data element array representation of a pixel in this
ColorModel
, given an integer pixel representation in
 the default RGB color model.
Object
ComponentColorModel.
getDataElements
(float[] normComponents,
 int normOffset,
Object
obj)
Returns a data element array representation of a pixel in this
ColorModel
, given an array of normalized color/alpha
 components.
Object
ComponentColorModel.
getDataElements
(int[] components,
 int offset,
Object
obj)
Returns a data element array representation of a pixel in this
ColorModel
, given an array of unnormalized color/alpha
 components.
Object
ComponentColorModel.
getDataElements
(int rgb,
Object
pixel)
Returns a data element array representation of a pixel in this
ColorModel
, given an integer pixel representation
 in the default RGB color model.
Object
ComponentSampleModel.
getDataElements
(int x,
 int y,
Object
obj,
DataBuffer
data)
Returns data for a single pixel in a primitive array of type
TransferType
.
Object
DirectColorModel.
getDataElements
(int[] components,
 int offset,
Object
obj)
Returns a data element array representation of a pixel in this
ColorModel
, given an array of unnormalized color/alpha
 components.
Object
DirectColorModel.
getDataElements
(int rgb,
Object
pixel)
Returns a data element array representation of a pixel in this
ColorModel
, given an integer pixel representation in the
 default RGB color model.
Object
IndexColorModel.
getDataElements
(int[] components,
 int offset,
Object
pixel)
Returns a data element array representation of a pixel in this
ColorModel
given an array of unnormalized color/alpha
 components.
Object
IndexColorModel.
getDataElements
(int rgb,
Object
pixel)
Returns a data element array representation of a pixel in this
 ColorModel, given an integer pixel representation in the
 default RGB color model.
Object
MultiPixelPackedSampleModel.
getDataElements
(int x,
 int y,
Object
obj,
DataBuffer
data)
Returns data for a single pixel in a primitive array of type
 TransferType.
Object
Raster.
getDataElements
(int x,
 int y,
 int w,
 int h,
Object
outData)
Returns the pixel data for the specified rectangle of pixels in a
 primitive array of type TransferType.
Object
Raster.
getDataElements
(int x,
 int y,
Object
outData)
Returns data for a single pixel in a primitive array of type
 TransferType.
Object
SampleModel.
getDataElements
(int x,
 int y,
 int w,
 int h,
Object
obj,
DataBuffer
data)
Returns the pixel data for the specified rectangle of pixels in a
 primitive array of type TransferType.
abstract
Object
SampleModel.
getDataElements
(int x,
 int y,
Object
obj,
DataBuffer
data)
Returns data for a single pixel in a primitive array of type
 TransferType.
Object
SinglePixelPackedSampleModel.
getDataElements
(int x,
 int y,
Object
obj,
DataBuffer
data)
Returns data for a single pixel in a primitive array of type
 TransferType.
Object
PixelGrabber.
getPixels
()
Get the pixel buffer.
Object
AbstractMultiResolutionImage.
getProperty
(
String
name,
ImageObserver
observer)
This method simply delegates to the same method on the base image and
 it is equivalent to:
getBaseImage().getProperty(name, observer)
.
Object
BufferedImage.
getProperty
(
String
name)
Returns a property of the image by name.
Object
BufferedImage.
getProperty
(
String
name,
ImageObserver
observer)
Returns a property of the image by name.
Object
RenderedImage.
getProperty
(
String
name)
Gets a property from the property set of this image.
Methods in
java.awt.image
with parameters of type
Object
Modifier and Type
Method
Description
boolean
ColorModel.
equals
(
Object
obj)
This method simply delegates to the default implementation in
Object
which is identical to an
==
test since this class cannot enforce the
 issues of a proper equality test among multiple independent subclass
 branches.
boolean
ComponentColorModel.
equals
(
Object
obj)
Tests if the specified
Object
is an instance
 of
ComponentColorModel
and equals this
ComponentColorModel
.
boolean
IndexColorModel.
equals
(
Object
obj)
Tests if the specified
Object
is an
 instance of
IndexColorModel
and if it equals this
IndexColorModel
boolean
PackedColorModel.
equals
(
Object
obj)
Tests if the specified
Object
is an instance
 of
PackedColorModel
and equals this
PackedColorModel
.
int
ColorModel.
getAlpha
(
Object
inData)
Returns the alpha component for the specified pixel, scaled
 from 0 to 255.
int
ComponentColorModel.
getAlpha
(
Object
inData)
Returns the alpha component for the specified pixel, scaled from
 0 to 255.
int
DirectColorModel.
getAlpha
(
Object
inData)
Returns the alpha component for the specified pixel, scaled
 from 0 to 255.
int
ColorModel.
getBlue
(
Object
inData)
Returns the blue color component for the specified pixel, scaled
 from 0 to 255 in the default RGB
ColorSpace
, sRGB.
int
ComponentColorModel.
getBlue
(
Object
inData)
Returns the blue color component for the specified pixel, scaled
 from 0 to 255 in the default RGB
ColorSpace
, sRGB.
int
DirectColorModel.
getBlue
(
Object
inData)
Returns the blue color component for the specified pixel, scaled
 from 0 to 255 in the default RGB
ColorSpace
, sRGB.
int[]
ColorModel.
getComponents
(
Object
pixel,
 int[] components,
 int offset)
Returns an array of unnormalized color/alpha components given a pixel
 in this
ColorModel
.
int[]
ComponentColorModel.
getComponents
(
Object
pixel,
 int[] components,
 int offset)
Returns an array of unnormalized color/alpha components given a pixel
 in this
ColorModel
.
final int[]
DirectColorModel.
getComponents
(
Object
pixel,
 int[] components,
 int offset)
Returns an array of unnormalized color/alpha components given a pixel
 in this
ColorModel
.
int[]
IndexColorModel.
getComponents
(
Object
pixel,
 int[] components,
 int offset)
Returns an array of unnormalized color/alpha components for
 a specified pixel in this
ColorModel
.
Object
BandedSampleModel.
getDataElements
(int x,
 int y,
Object
obj,
DataBuffer
data)
Returns data for a single pixel in a primitive array of type
 TransferType.
Object
ColorModel.
getDataElements
(float[] normComponents,
 int normOffset,
Object
obj)
Returns a data element array representation of a pixel in this
ColorModel
, given an array of normalized color/alpha
 components.
Object
ColorModel.
getDataElements
(int[] components,
 int offset,
Object
obj)
Returns a data element array representation of a pixel in this
ColorModel
, given an array of unnormalized color/alpha
 components.
Object
ColorModel.
getDataElements
(int rgb,
Object
pixel)
Returns a data element array representation of a pixel in this
ColorModel
, given an integer pixel representation in
 the default RGB color model.
Object
ComponentColorModel.
getDataElements
(float[] normComponents,
 int normOffset,
Object
obj)
Returns a data element array representation of a pixel in this
ColorModel
, given an array of normalized color/alpha
 components.
Object
ComponentColorModel.
getDataElements
(int[] components,
 int offset,
Object
obj)
Returns a data element array representation of a pixel in this
ColorModel
, given an array of unnormalized color/alpha
 components.
Object
ComponentColorModel.
getDataElements
(int rgb,
Object
pixel)
Returns a data element array representation of a pixel in this
ColorModel
, given an integer pixel representation
 in the default RGB color model.
Object
ComponentSampleModel.
getDataElements
(int x,
 int y,
Object
obj,
DataBuffer
data)
Returns data for a single pixel in a primitive array of type
TransferType
.
Object
DirectColorModel.
getDataElements
(int[] components,
 int offset,
Object
obj)
Returns a data element array representation of a pixel in this
ColorModel
, given an array of unnormalized color/alpha
 components.
Object
DirectColorModel.
getDataElements
(int rgb,
Object
pixel)
Returns a data element array representation of a pixel in this
ColorModel
, given an integer pixel representation in the
 default RGB color model.
Object
IndexColorModel.
getDataElements
(int[] components,
 int offset,
Object
pixel)
Returns a data element array representation of a pixel in this
ColorModel
given an array of unnormalized color/alpha
 components.
Object
IndexColorModel.
getDataElements
(int rgb,
Object
pixel)
Returns a data element array representation of a pixel in this
 ColorModel, given an integer pixel representation in the
 default RGB color model.
Object
MultiPixelPackedSampleModel.
getDataElements
(int x,
 int y,
Object
obj,
DataBuffer
data)
Returns data for a single pixel in a primitive array of type
 TransferType.
Object
Raster.
getDataElements
(int x,
 int y,
 int w,
 int h,
Object
outData)
Returns the pixel data for the specified rectangle of pixels in a
 primitive array of type TransferType.
Object
Raster.
getDataElements
(int x,
 int y,
Object
outData)
Returns data for a single pixel in a primitive array of type
 TransferType.
Object
SampleModel.
getDataElements
(int x,
 int y,
 int w,
 int h,
Object
obj,
DataBuffer
data)
Returns the pixel data for the specified rectangle of pixels in a
 primitive array of type TransferType.
abstract
Object
SampleModel.
getDataElements
(int x,
 int y,
Object
obj,
DataBuffer
data)
Returns data for a single pixel in a primitive array of type
 TransferType.
Object
SinglePixelPackedSampleModel.
getDataElements
(int x,
 int y,
Object
obj,
DataBuffer
data)
Returns data for a single pixel in a primitive array of type
 TransferType.
int
ColorModel.
getGreen
(
Object
inData)
Returns the green color component for the specified pixel, scaled
 from 0 to 255 in the default RGB
ColorSpace
, sRGB.
int
ComponentColorModel.
getGreen
(
Object
inData)
Returns the green color component for the specified pixel, scaled
 from 0 to 255 in the default RGB
ColorSpace
, sRGB.
int
DirectColorModel.
getGreen
(
Object
inData)
Returns the green color component for the specified pixel, scaled
 from 0 to 255 in the default RGB
ColorSpace
, sRGB.
float[]
ColorModel.
getNormalizedComponents
(
Object
pixel,
 float[] normComponents,
 int normOffset)
Returns an array of all of the color/alpha components in normalized
 form, given a pixel in this
ColorModel
.
float[]
ComponentColorModel.
getNormalizedComponents
(
Object
pixel,
 float[] normComponents,
 int normOffset)
Returns an array of all of the color/alpha components in normalized
 form, given a pixel in this
ColorModel
.
int
ColorModel.
getRed
(
Object
inData)
Returns the red color component for the specified pixel, scaled
 from 0 to 255 in the default RGB
ColorSpace
, sRGB.
int
ComponentColorModel.
getRed
(
Object
inData)
Returns the red color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.
int
DirectColorModel.
getRed
(
Object
inData)
Returns the red color component for the specified pixel, scaled
 from 0 to 255 in the default RGB
ColorSpace
, sRGB.
int
ColorModel.
getRGB
(
Object
inData)
Returns the color/alpha components for the specified pixel in the
 default RGB color model format.
int
ComponentColorModel.
getRGB
(
Object
inData)
Returns the color/alpha components for the specified pixel in the
 default RGB color model format.
int
DirectColorModel.
getRGB
(
Object
inData)
Returns the color/alpha components for the specified pixel in the
 default RGB color model format.
void
BandedSampleModel.
setDataElements
(int x,
 int y,
Object
obj,
DataBuffer
data)
Sets the data for a single pixel in the specified DataBuffer from a
 primitive array of type TransferType.
void
ComponentSampleModel.
setDataElements
(int x,
 int y,
Object
obj,
DataBuffer
data)
Sets the data for a single pixel in the specified
DataBuffer
from a primitive array of type
TransferType
.
void
MultiPixelPackedSampleModel.
setDataElements
(int x,
 int y,
Object
obj,
DataBuffer
data)
Sets the data for a single pixel in the specified
DataBuffer
from a primitive array of type
 TransferType.
void
SampleModel.
setDataElements
(int x,
 int y,
 int w,
 int h,
Object
obj,
DataBuffer
data)
Sets the data for a rectangle of pixels in the specified DataBuffer
 from a primitive array of type TransferType.
abstract void
SampleModel.
setDataElements
(int x,
 int y,
Object
obj,
DataBuffer
data)
Sets the data for a single pixel in the specified DataBuffer from a
 primitive array of type TransferType.
void
SinglePixelPackedSampleModel.
setDataElements
(int x,
 int y,
Object
obj,
DataBuffer
data)
Sets the data for a single pixel in the specified DataBuffer from a
 primitive array of type TransferType.
void
WritableRaster.
setDataElements
(int x,
 int y,
 int w,
 int h,
Object
inData)
Sets the data for a rectangle of pixels from a
 primitive array of type TransferType.
void
WritableRaster.
setDataElements
(int x,
 int y,
Object
inData)
Sets the data for a single pixel from a
 primitive array of type TransferType.
Uses of
Object
in
java.awt.image.renderable
Subclasses of
Object
in
java.awt.image.renderable
Modifier and Type
Class
Description
class
ParameterBlock
A
ParameterBlock
encapsulates all the information about sources and
 parameters (Objects) required by a RenderableImageOp, or other
 classes that process images.
class
RenderableImageOp
This class handles the renderable aspects of an operation with help
 from its associated instance of a ContextualRenderedImageFactory.
class
RenderableImageProducer
An adapter class that implements ImageProducer to allow the
 asynchronous production of a RenderableImage.
class
RenderContext
A RenderContext encapsulates the information needed to produce a
 specific rendering from a RenderableImage.
Fields in
java.awt.image.renderable
with type parameters of type
Object
Modifier and Type
Field
Description
protected
Vector
<
Object
>
ParameterBlock.
parameters
A Vector of non-source parameters, stored as arbitrary Objects.
protected
Vector
<
Object
>
ParameterBlock.
sources
A Vector of sources, stored as arbitrary Objects.
Methods in
java.awt.image.renderable
that return
Object
Modifier and Type
Method
Description
Object
ParameterBlock.
clone
()
Creates a copy of a
ParameterBlock
.
Object
RenderContext.
clone
()
Makes a copy of a RenderContext.
Object
ParameterBlock.
getObjectParameter
(int index)
Gets a parameter as an object.
Object
ContextualRenderedImageFactory.
getProperty
(
ParameterBlock
paramBlock,
String
name)
Gets the appropriate instance of the property specified by the name
 parameter.
Object
RenderableImage.
getProperty
(
String
name)
Gets a property from the property set of this image.
Object
RenderableImageOp.
getProperty
(
String
name)
Gets a property from the property set of this image.
Object
ParameterBlock.
getSource
(int index)
Returns a source as a general Object.
Object
ParameterBlock.
shallowClone
()
Creates a shallow copy of a
ParameterBlock
.
Methods in
java.awt.image.renderable
that return types with arguments of type
Object
Modifier and Type
Method
Description
Vector
<
Object
>
ParameterBlock.
getParameters
()
Returns the entire Vector of parameters.
Vector
<
Object
>
ParameterBlock.
getSources
()
Returns the entire Vector of sources.
Methods in
java.awt.image.renderable
with parameters of type
Object
Modifier and Type
Method
Description
ParameterBlock
ParameterBlock.
add
(
Object
obj)
Adds an object to the list of parameters.
ParameterBlock
ParameterBlock.
addSource
(
Object
source)
Adds an image to end of the list of sources.
ParameterBlock
ParameterBlock.
set
(
Object
obj,
 int index)
Replaces an Object in the list of parameters.
ParameterBlock
ParameterBlock.
setSource
(
Object
source,
 int index)
Replaces an entry in the list of source with a new source.
Method parameters in
java.awt.image.renderable
with type arguments of type
Object
Modifier and Type
Method
Description
void
ParameterBlock.
setParameters
(
Vector
<
Object
> parameters)
Sets the entire Vector of parameters to a given Vector.
void
ParameterBlock.
setSources
(
Vector
<
Object
> sources)
Sets the entire Vector of sources to a given Vector.
Constructor parameters in
java.awt.image.renderable
with type arguments of type
Object
Modifier
Constructor
Description
ParameterBlock
(
Vector
<
Object
> sources)
Constructs a
ParameterBlock
with a given Vector
 of sources.
ParameterBlock
(
Vector
<
Object
> sources,
Vector
<
Object
> parameters)
Constructs a
ParameterBlock
with a given Vector of sources and
 Vector of parameters.
Uses of
Object
in
java.awt.print
Subclasses of
Object
in
java.awt.print
Modifier and Type
Class
Description
class
Book
The
Book
class provides a representation of a document in
 which pages may have different page formats and page painters.
class
PageFormat
The
PageFormat
class describes the size and
 orientation of a page to be printed.
class
Paper
The
Paper
class describes the physical characteristics of
 a piece of paper.
class
PrinterAbortException
The
PrinterAbortException
class is a subclass of
PrinterException
and is used to indicate that a user
 or application has terminated the print job while it was in
 the process of printing.
class
PrinterException
The
PrinterException
class and its subclasses are used
 to indicate that an exceptional condition has occurred in the print
 system.
class
PrinterIOException
The
PrinterIOException
class is a subclass of
PrinterException
and is used to indicate that an IO error
 of some sort has occurred while printing.
class
PrinterJob
The
PrinterJob
class is the principal class that controls
 printing.
Methods in
java.awt.print
that return
Object
Modifier and Type
Method
Description
Object
PageFormat.
clone
()
Makes a copy of this
PageFormat
with the same
 contents as this
PageFormat
.
Object
Paper.
clone
()
Creates a copy of this
Paper
with the same contents
 as this
Paper
.
Uses of
Object
in
java.beans
Subclasses of
Object
in
java.beans
Modifier and Type
Class
Description
class
BeanDescriptor
A BeanDescriptor provides global information about a "bean",
 including its Java class, its displayName, etc.
class
Beans
This class provides some general purpose beans control methods.
class
DefaultPersistenceDelegate
The
DefaultPersistenceDelegate
is a concrete implementation of
 the abstract
PersistenceDelegate
class and
 is the delegate used by default for classes about
 which no information is available.
class
Encoder
An
Encoder
is a class which can be used to create
 files or streams that encode the state of a collection of
 JavaBeans in terms of their public APIs.
class
EventHandler
The
EventHandler
class provides
 support for dynamically generating event listeners whose methods
 execute a simple statement involving an incoming event object
 and a target object.
class
EventSetDescriptor
An EventSetDescriptor describes a group of events that a given Java
 bean fires.
class
Expression
An
Expression
object represents a primitive expression
 in which a single method is applied to a target and a set of
 arguments to return a result - as in
"a.getFoo()"
.
class
FeatureDescriptor
The FeatureDescriptor class is the common baseclass for PropertyDescriptor,
 EventSetDescriptor, and MethodDescriptor, etc.
class
IndexedPropertyChangeEvent
An "IndexedPropertyChange" event gets delivered whenever a component that
 conforms to the JavaBeans specification (a "bean") changes a bound
 indexed property.
class
IndexedPropertyDescriptor
An IndexedPropertyDescriptor describes a property that acts like an
 array and has an indexed read and/or indexed write method to access
 specific elements of the array.
class
IntrospectionException
Thrown when an exception happens during Introspection.
class
Introspector
The Introspector class provides a standard way for tools to learn about
 the properties, events, and methods supported by a target Java Bean.
class
MethodDescriptor
A MethodDescriptor describes a particular method that a Java Bean
 supports for external access from other components.
class
ParameterDescriptor
The ParameterDescriptor class allows bean implementors to provide
 additional information on each of their parameters, beyond the
 low level type information provided by the java.lang.reflect.Method
 class.
class
PersistenceDelegate
The PersistenceDelegate class takes the responsibility
 for expressing the state of an instance of a given class
 in terms of the methods in the class's public API.
class
PropertyChangeEvent
A "PropertyChange" event gets delivered whenever a bean changes a "bound"
 or "constrained" property.
class
PropertyChangeListenerProxy
A class which extends the
EventListenerProxy
specifically for adding a
PropertyChangeListener
with a "bound" property.
class
PropertyChangeSupport
This is a utility class that can be used by beans that support bound
 properties.
class
PropertyDescriptor
A PropertyDescriptor describes one property that a Java Bean
 exports via a pair of accessor methods.
class
PropertyEditorManager
The PropertyEditorManager can be used to locate a property editor for
 any given type name.
class
PropertyEditorSupport
This is a support class to help build property editors.
class
PropertyVetoException
A PropertyVetoException is thrown when a proposed change to a
 property represents an unacceptable value.
class
SimpleBeanInfo
This is a support class to make it easier for people to provide
 BeanInfo classes.
class
Statement
A
Statement
object represents a primitive statement
 in which a single method is applied to a target and
 a set of arguments - as in
"a.setFoo(b)"
.
class
VetoableChangeListenerProxy
A class which extends the
EventListenerProxy
specifically for adding a
VetoableChangeListener
with a "constrained" property.
class
VetoableChangeSupport
This is a utility class that can be used by beans that support constrained
 properties.
class
XMLDecoder
The
XMLDecoder
class is used to read XML documents
 created using the
XMLEncoder
and is used just like
 the
ObjectInputStream
.
class
XMLEncoder
The
XMLEncoder
class is a complementary alternative to
 the
ObjectOutputStream
and can used to generate
 a textual representation of a
JavaBean
in the same
 way that the
ObjectOutputStream
can
 be used to create binary representation of
Serializable
objects.
Methods in
java.beans
that return
Object
Modifier and Type
Method
Description
Object
Encoder.
get
(
Object
oldInstance)
Returns a tentative value for
oldInstance
in
 the environment created by this stream.
Object
[]
Statement.
getArguments
()
Returns the arguments for the method to invoke.
static
Object
Beans.
getInstanceOf
(
Object
bean,
Class
<?> targetType)
From a given bean, obtain an object representing a specified
 type view of that source object.
Object
PropertyChangeEvent.
getNewValue
()
Gets the new value for the property, expressed as an Object.
Object
PropertyChangeEvent.
getOldValue
()
Gets the old value for the property, expressed as an Object.
Object
XMLDecoder.
getOwner
()
Gets the owner of this decoder.
Object
XMLEncoder.
getOwner
()
Gets the owner of this encoder.
Object
PropertyChangeEvent.
getPropagationId
()
The "propagationId" field is reserved for future use.
Object
PropertyEditorSupport.
getSource
()
Returns the bean that is used as the
 source of events.
Object
EventHandler.
getTarget
()
Returns the object to which this event handler will send a message.
Object
Statement.
getTarget
()
Returns the target object of this statement.
Object
Expression.
getValue
()
If the value property of this instance is not already set,
 this method dynamically finds the method with the specified
 methodName on this target with these arguments and calls it.
Object
FeatureDescriptor.
getValue
(
String
attributeName)
Retrieve a named attribute with this feature.
Object
PropertyEditor.
getValue
()
Gets the property value.
Object
PropertyEditorSupport.
getValue
()
Gets the value of the property.
static
Object
Beans.
instantiate
(
ClassLoader
cls,
String
beanName)
Instantiate a JavaBean.
static
Object
Beans.
instantiate
(
ClassLoader
cls,
String
beanName,
BeanContext
beanContext)
Instantiate a JavaBean.
static
Object
Beans.
instantiate
(
ClassLoader
cls,
String
beanName,
BeanContext
beanContext,
AppletInitializer
initializer)
Deprecated, for removal: This API element is subject to removal in a future version.
It is recommended to use
Beans.instantiate(ClassLoader, String, BeanContext)
,
 because the Applet API is deprecated.
Object
EventHandler.
invoke
(
Object
proxy,
Method
method,
Object
[] arguments)
Extract the appropriate property value from the event and
 pass it to the action associated with
 this
EventHandler
.
Object
XMLDecoder.
readObject
()
Reads the next object from the underlying input stream.
Object
Encoder.
remove
(
Object
oldInstance)
Removes the entry for this instance, returning the old entry.
Methods in
java.beans
with parameters of type
Object
Modifier and Type
Method
Description
static <T> T
EventHandler.
create
(
Class
<T> listenerInterface,
Object
target,
String
action)
Creates an implementation of
listenerInterface
in which
all
of the methods in the listener interface apply
 the handler's
action
to the
target
.
static <T> T
EventHandler.
create
(
Class
<T> listenerInterface,
Object
target,
String
action,
String
eventPropertyName)
/**
 Creates an implementation of
listenerInterface
in which
all
of the methods pass the value of the event
 expression,
eventPropertyName
, to the final method in the
 statement,
action
, which is applied to the
target
.
static <T> T
EventHandler.
create
(
Class
<T> listenerInterface,
Object
target,
String
action,
String
eventPropertyName,
String
listenerMethodName)
Creates an implementation of
listenerInterface
in which
 the method named
listenerMethodName
passes the value of the event expression,
eventPropertyName
,
 to the final method in the statement,
action
, which
 is applied to the
target
.
static
DefaultHandler
XMLDecoder.
createHandler
(
Object
owner,
ExceptionListener
el,
ClassLoader
cl)
Creates a new handler for SAX parser
 that can be used to parse embedded XML archives
 created by the
XMLEncoder
class.
PropertyEditor
PropertyDescriptor.
createPropertyEditor
(
Object
bean)
Constructs an instance of a property editor using the current
 property editor class.
boolean
IndexedPropertyDescriptor.
equals
(
Object
obj)
Compares this
PropertyDescriptor
against the specified object.
boolean
PropertyDescriptor.
equals
(
Object
obj)
Compares this
PropertyDescriptor
against the specified object.
void
PropertyChangeSupport.
fireIndexedPropertyChange
(
String
propertyName,
 int index,
Object
oldValue,
Object
newValue)
Reports a bound indexed property update to listeners
 that have been registered to track updates of
 all properties or a property with the specified name.
void
PropertyChangeSupport.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Reports a bound property update to listeners
 that have been registered to track updates of
 all properties or a property with the specified name.
void
VetoableChangeSupport.
fireVetoableChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Reports a constrained property update to listeners
 that have been registered to track updates of
 all properties or a property with the specified name.
Object
Encoder.
get
(
Object
oldInstance)
Returns a tentative value for
oldInstance
in
 the environment created by this stream.
static
Object
Beans.
getInstanceOf
(
Object
bean,
Class
<?> targetType)
From a given bean, obtain an object representing a specified
 type view of that source object.
protected void
DefaultPersistenceDelegate.
initialize
(
Class
<?> type,
Object
oldInstance,
Object
newInstance,
Encoder
out)
This default implementation of the
initialize
method assumes
 all state held in objects of this type is exposed via the
 matching pairs of "setter" and "getter" methods in the order
 they are returned by the Introspector.
protected void
PersistenceDelegate.
initialize
(
Class
<?> type,
Object
oldInstance,
Object
newInstance,
Encoder
out)
Produce a series of statements with side effects on
newInstance
so that the new instance becomes
equivalent
to
oldInstance
.
protected
Expression
DefaultPersistenceDelegate.
instantiate
(
Object
oldInstance,
Encoder
out)
This default implementation of the
instantiate
method returns
 an expression containing the predefined method name "new" which denotes a
 call to a constructor with the arguments as specified in
 the
DefaultPersistenceDelegate
's constructor.
protected abstract
Expression
PersistenceDelegate.
instantiate
(
Object
oldInstance,
Encoder
out)
Returns an expression whose value is
oldInstance
.
Object
EventHandler.
invoke
(
Object
proxy,
Method
method,
Object
[] arguments)
Extract the appropriate property value from the event and
 pass it to the action associated with
 this
EventHandler
.
static boolean
Beans.
isInstanceOf
(
Object
bean,
Class
<?> targetType)
Check if a bean can be viewed as a given target type.
protected boolean
DefaultPersistenceDelegate.
mutatesTo
(
Object
oldInstance,
Object
newInstance)
If the number of arguments in the specified constructor is non-zero and
 the class of
oldInstance
explicitly declares an "equals" method
 this method returns the value of
oldInstance.equals(newInstance)
.
protected boolean
PersistenceDelegate.
mutatesTo
(
Object
oldInstance,
Object
newInstance)
Returns true if an
equivalent
copy of
oldInstance
may be
 created by applying a series of statements to
newInstance
.
Object
Encoder.
remove
(
Object
oldInstance)
Removes the entry for this instance, returning the old entry.
void
Customizer.
setObject
(
Object
bean)
Set the object to be customized.
void
XMLDecoder.
setOwner
(
Object
owner)
Sets the owner of this decoder to
owner
.
void
XMLEncoder.
setOwner
(
Object
owner)
Sets the owner of this encoder to
owner
.
void
PropertyChangeEvent.
setPropagationId
(
Object
propagationId)
Sets the propagationId object for the event.
void
PropertyEditorSupport.
setSource
(
Object
source)
Sets the source bean.
void
Expression.
setValue
(
Object
value)
Sets the value of this expression to
value
.
void
FeatureDescriptor.
setValue
(
String
attributeName,
Object
value)
Associate a named attribute with this feature.
void
PropertyEditor.
setValue
(
Object
value)
Set (or change) the object that is to be edited.
void
PropertyEditorSupport.
setValue
(
Object
value)
Set (or change) the object that is to be edited.
protected void
Encoder.
writeObject
(
Object
o)
Write the specified object to the output stream.
void
PersistenceDelegate.
writeObject
(
Object
oldInstance,
Encoder
out)
The
writeObject
is a single entry point to the persistence
 and is used by an
Encoder
in the traditional
 mode of delegation.
void
XMLEncoder.
writeObject
(
Object
o)
Write an XML representation of the specified object to the output.
Constructors in
java.beans
with parameters of type
Object
Modifier
Constructor
Description
EventHandler
(
Object
target,
String
action,
String
eventPropertyName,
String
listenerMethodName)
Creates a new
EventHandler
object;
 you generally use one of the
create
methods
 instead of invoking this constructor directly.
Expression
(
Object
value,
Object
target,
String
methodName,
Object
[] arguments)
Creates a new
Expression
object with the specified value
 for the specified target object to invoke the  method
 specified by the name and by the array of arguments.
Expression
(
Object
target,
String
methodName,
Object
[] arguments)
Creates a new
Expression
object
 for the specified target object to invoke the method
 specified by the name and by the array of arguments.
IndexedPropertyChangeEvent
(
Object
source,
String
propertyName,
Object
oldValue,
Object
newValue,
 int index)
Constructs a new
IndexedPropertyChangeEvent
object.
PropertyChangeEvent
(
Object
source,
String
propertyName,
Object
oldValue,
Object
newValue)
Constructs a new
PropertyChangeEvent
.
PropertyChangeSupport
(
Object
sourceBean)
Constructs a
PropertyChangeSupport
object.
PropertyEditorSupport
(
Object
source)
Constructs a
PropertyEditorSupport
object.
Statement
(
Object
target,
String
methodName,
Object
[] arguments)
Creates a new
Statement
object
 for the specified target object to invoke the method
 specified by the name and by the array of arguments.
VetoableChangeSupport
(
Object
sourceBean)
Constructs a
VetoableChangeSupport
object.
XMLDecoder
(
InputStream
in,
Object
owner)
Creates a new input stream for reading archives
 created by the
XMLEncoder
class.
XMLDecoder
(
InputStream
in,
Object
owner,
ExceptionListener
exceptionListener)
Creates a new input stream for reading archives
 created by the
XMLEncoder
class.
XMLDecoder
(
InputStream
in,
Object
owner,
ExceptionListener
exceptionListener,
ClassLoader
cl)
Creates a new input stream for reading archives
 created by the
XMLEncoder
class.
Uses of
Object
in
java.beans.beancontext
Subclasses of
Object
in
java.beans.beancontext
Modifier and Type
Class
Description
class
BeanContextChildSupport
This is a general support class to provide support for implementing the
 BeanContextChild protocol.
class
BeanContextEvent
BeanContextEvent
is the abstract root event class
 for all events emitted
 from, and pertaining to the semantics of, a
BeanContext
.
class
BeanContextMembershipEvent
A
BeanContextMembershipEvent
encapsulates
 the list of children added to, or removed from,
 the membership of a particular
BeanContext
.
class
BeanContextServiceAvailableEvent
This event type is used by the BeanContextServicesListener in order to
 identify the service being registered.
class
BeanContextServiceRevokedEvent
This event type is used by the
BeanContextServiceRevokedListener
in order to
 identify the service being revoked.
class
BeanContextServicesSupport
This helper class provides a utility implementation of the
 java.beans.beancontext.BeanContextServices interface.
protected class
BeanContextServicesSupport.BCSSChild
A protected nested class containing per-child information
 in the
children
hashtable.
protected class
BeanContextServicesSupport.BCSSProxyServiceProvider
Subclasses may subclass this nested class to represent a proxy for
 each BeanContextServiceProvider.
protected static class
BeanContextServicesSupport.BCSSServiceProvider
subclasses may subclass this nested class to add behaviors for
 each BeanContextServicesProvider.
class
BeanContextSupport
This helper class provides a utility implementation of the
 java.beans.beancontext.BeanContext interface.
protected class
BeanContextSupport.BCSChild
A protected nested class containing per-child information
 in the
children
hashtable.
protected static final class
BeanContextSupport.BCSIterator
protected final subclass that encapsulates an iterator but implements
 a noop remove() method.
Fields in
java.beans.beancontext
declared as
Object
Modifier and Type
Field
Description
static final
Object
BeanContext.
globalHierarchyLock
This global lock is used by both
BeanContext
and
BeanContextServices
implementors
 to serialize changes in a
BeanContext
hierarchy and any service requests etc.
Fields in
java.beans.beancontext
with type parameters of type
Object
Modifier and Type
Field
Description
protected
HashMap
<
Object
,
BeanContextSupport.BCSChild
>
BeanContextSupport.
children
all accesses to the
protected HashMap children
field
 shall be synchronized on that object.
protected
HashMap
<
Object
,
BeanContextServicesSupport.BCSSServiceProvider
>
BeanContextServicesSupport.
services
all accesses to the
protected transient HashMap services
field should be synchronized on that object
Methods in
java.beans.beancontext
that return
Object
Modifier and Type
Method
Description
protected final
Object
[]
BeanContextSupport.
copyChildren
()
Gets a copy of the this BeanContext's children.
Object
BeanContextServiceProvider.
getService
(
BeanContextServices
bcs,
Object
requestor,
Class
<?> serviceClass,
Object
serviceSelector)
Invoked by
BeanContextServices
, this method
 requests an instance of a
 service from this
BeanContextServiceProvider
.
Object
BeanContextServices.
getService
(
BeanContextChild
child,
Object
requestor,
Class
<?> serviceClass,
Object
serviceSelector,
BeanContextServiceRevokedListener
bcsrl)
A
BeanContextChild
, or any arbitrary object
 associated with a
BeanContextChild
, may obtain
 a reference to a currently registered service from its
 nesting
BeanContextServices
via invocation of this method.
Object
BeanContextServicesSupport.BCSSProxyServiceProvider.
getService
(
BeanContextServices
bcs,
Object
requestor,
Class
<?> serviceClass,
Object
serviceSelector)
Object
BeanContextServicesSupport.
getService
(
BeanContextChild
child,
Object
requestor,
Class
<?> serviceClass,
Object
serviceSelector,
BeanContextServiceRevokedListener
bcsrl)
obtain a service which may be delegated
Object
BeanContext.
instantiateChild
(
String
beanName)
Instantiate the javaBean named as a
 child of this
BeanContext
.
Object
BeanContextSupport.
instantiateChild
(
String
beanName)
The instantiateChild method is a convenience hook
 in BeanContext to simplify
 the task of instantiating a Bean, nested,
 into a
BeanContext
.
Object
BeanContextSupport.BCSIterator.
next
()
Object
[]
BeanContextMembershipEvent.
toArray
()
Gets the array of children affected by this event.
Object
[]
BeanContextSupport.
toArray
()
Gets all JavaBean or
BeanContext
instances currently nested in this BeanContext.
Object
[]
BeanContextSupport.
toArray
(
Object
[] arry)
Gets an array containing all children of
 this
BeanContext
that match
 the types contained in arry.
Methods in
java.beans.beancontext
that return types with arguments of type
Object
Modifier and Type
Method
Description
Iterator
<
Object
>
BeanContextServicesSupport.
getCurrentServiceClasses
()
Iterator
<
Object
>
BeanContextSupport.
iterator
()
Gets all JavaBean or
BeanContext
instances
 currently nested in this
BeanContext
.
Methods in
java.beans.beancontext
with parameters of type
Object
Modifier and Type
Method
Description
boolean
BeanContextSupport.
add
(
Object
targetChild)
Adds/nests a child within this
BeanContext
.
protected void
BeanContextSupport.
childDeserializedHook
(
Object
child,
BeanContextSupport.BCSChild
bcsc)
Called by readObject with the newly deserialized child and BCSChild.
protected void
BeanContextSupport.
childJustAddedHook
(
Object
child,
BeanContextSupport.BCSChild
bcsc)
subclasses may override this method to simply extend add() semantics
 after the child has been added and before the event notification has
 occurred.
protected void
BeanContextServicesSupport.
childJustRemovedHook
(
Object
child,
BeanContextSupport.BCSChild
bcsc)
called from superclass child removal operations after a child
 has been successfully removed. called with child synchronized.
protected void
BeanContextSupport.
childJustRemovedHook
(
Object
child,
BeanContextSupport.BCSChild
bcsc)
subclasses may override this method to simply extend remove() semantics
 after the child has been removed and before the event notification has
 occurred.
boolean
BeanContextMembershipEvent.
contains
(
Object
child)
Is the child specified affected by the event?
boolean
BeanContextSupport.
contains
(
Object
o)
Determines whether or not the specified object
 is currently a child of this
BeanContext
.
boolean
BeanContextSupport.
containsKey
(
Object
o)
Determines whether or not the specified object
 is currently a child of this
BeanContext
.
protected
BeanContextSupport.BCSChild
BeanContextServicesSupport.
createBCSChild
(
Object
targetChild,
Object
peer)
Subclasses can override this method to insert their own subclass
 of Child without having to override add() or the other Collection
 methods that add children to the set.
protected
BeanContextSupport.BCSChild
BeanContextSupport.
createBCSChild
(
Object
targetChild,
Object
peer)
Subclasses can override this method to insert their own subclass
 of Child without having to override add() or the other Collection
 methods that add children to the set.
void
BeanContextChildSupport.
firePropertyChange
(
String
name,
Object
oldValue,
Object
newValue)
Report a bound property update to any registered listeners.
void
BeanContextChildSupport.
fireVetoableChange
(
String
name,
Object
oldValue,
Object
newValue)
Report a vetoable property update to any registered listeners.
protected static final
BeanContextChild
BeanContextSupport.
getChildBeanContextChild
(
Object
child)
Gets the BeanContextChild (if any) of the specified child
protected static final
BeanContextMembershipListener
BeanContextSupport.
getChildBeanContextMembershipListener
(
Object
child)
Gets the BeanContextMembershipListener
 (if any) of the specified child
protected static final
BeanContextServicesListener
BeanContextServicesSupport.
getChildBeanContextServicesListener
(
Object
child)
Gets the
BeanContextServicesListener
(if any) of the specified
 child.
protected static final
PropertyChangeListener
BeanContextSupport.
getChildPropertyChangeListener
(
Object
child)
Gets the PropertyChangeListener
 (if any) of the specified child
protected static final
Serializable
BeanContextSupport.
getChildSerializable
(
Object
child)
Gets the Serializable (if any) associated with the specified Child
protected static final
VetoableChangeListener
BeanContextSupport.
getChildVetoableChangeListener
(
Object
child)
Gets the VetoableChangeListener
 (if any) of the specified child
protected static final
Visibility
BeanContextSupport.
getChildVisibility
(
Object
child)
Gets the Component (if any) associated with the specified child.
Object
BeanContextServiceProvider.
getService
(
BeanContextServices
bcs,
Object
requestor,
Class
<?> serviceClass,
Object
serviceSelector)
Invoked by
BeanContextServices
, this method
 requests an instance of a
 service from this
BeanContextServiceProvider
.
Object
BeanContextServices.
getService
(
BeanContextChild
child,
Object
requestor,
Class
<?> serviceClass,
Object
serviceSelector,
BeanContextServiceRevokedListener
bcsrl)
A
BeanContextChild
, or any arbitrary object
 associated with a
BeanContextChild
, may obtain
 a reference to a currently registered service from its
 nesting
BeanContextServices
via invocation of this method.
Object
BeanContextServicesSupport.BCSSProxyServiceProvider.
getService
(
BeanContextServices
bcs,
Object
requestor,
Class
<?> serviceClass,
Object
serviceSelector)
Object
BeanContextServicesSupport.
getService
(
BeanContextChild
child,
Object
requestor,
Class
<?> serviceClass,
Object
serviceSelector,
BeanContextServiceRevokedListener
bcsrl)
obtain a service which may be delegated
void
BeanContextServiceProvider.
releaseService
(
BeanContextServices
bcs,
Object
requestor,
Object
service)
Invoked by
BeanContextServices
,
 this method releases a nested
BeanContextChild
's
 (or any arbitrary object associated with a
BeanContextChild
) reference to the specified service.
void
BeanContextServices.
releaseService
(
BeanContextChild
child,
Object
requestor,
Object
service)
Releases a
BeanContextChild
's
 (or any arbitrary object associated with a BeanContextChild)
 reference to the specified service by calling releaseService()
 on the underlying
BeanContextServiceProvider
.
void
BeanContextServicesSupport.BCSSProxyServiceProvider.
releaseService
(
BeanContextServices
bcs,
Object
requestor,
Object
service)
void
BeanContextServicesSupport.
releaseService
(
BeanContextChild
child,
Object
requestor,
Object
service)
release a service
boolean
BeanContextSupport.
remove
(
Object
targetChild)
Removes a child from this BeanContext.
protected boolean
BeanContextSupport.
remove
(
Object
targetChild,
 boolean callChildSetBC)
internal remove used when removal caused by
 unexpected
setBeanContext
or
 by
remove()
invocation.
Object
[]
BeanContextSupport.
toArray
(
Object
[] arry)
Gets an array containing all children of
 this
BeanContext
that match
 the types contained in arry.
protected boolean
BeanContextSupport.
validatePendingAdd
(
Object
targetChild)
Subclasses of this class may override, or envelope, this method to
 add validation behavior for the BeanContext to examine child objects
 immediately prior to their being added to the BeanContext.
protected boolean
BeanContextSupport.
validatePendingRemove
(
Object
targetChild)
Subclasses of this class may override, or envelope, this method to
 add validation behavior for the BeanContext to examine child objects
 immediately prior to their being removed from the BeanContext.
Constructors in
java.beans.beancontext
with parameters of type
Object
Modifier
Constructor
Description
BeanContextMembershipEvent
(
BeanContext
bc,
Object
[] changes)
Construct a BeanContextMembershipEvent
Uses of
Object
in
java.io
Subclasses of
Object
in
java.io
Modifier and Type
Class
Description
class
BufferedInputStream
A
BufferedInputStream
adds
 functionality to another input stream-namely,
 the ability to buffer the input and to
 support the
mark
and
reset
methods.
class
BufferedOutputStream
The class implements a buffered output stream.
class
BufferedReader
Reads text from a character-input stream, buffering characters so as to
 provide for the efficient reading of characters, arrays, and lines.
class
BufferedWriter
Writes text to a character-output stream, buffering characters so as to
 provide for the efficient writing of single characters, arrays, and strings.
class
ByteArrayInputStream
A
ByteArrayInputStream
contains
 an internal buffer that contains bytes that
 may be read from the stream.
class
ByteArrayOutputStream
This class implements an output stream in which the data is
 written into a byte array.
class
CharArrayReader
This class implements a character buffer that can be used as a
 character-input stream.
class
CharArrayWriter
This class implements a character buffer that can be used as a Writer.
class
CharConversionException
Base class for character conversion exceptions.
class
Console
Methods to access the character-based console device, if any, associated
 with the current Java virtual machine.
class
DataInputStream
A data input stream lets an application read primitive Java data
 types from an underlying input stream in a machine-independent
 way.
class
DataOutputStream
A data output stream lets an application write primitive Java data
 types to an output stream in a portable way.
class
EOFException
Signals that an end of file or end of stream has been reached
 unexpectedly during input.
class
File
An abstract representation of file and directory pathnames.
final class
FileDescriptor
Instances of the file descriptor class serve as an opaque handle
 to the underlying machine-specific structure representing an open
 file, an open socket, or another source or sink of bytes.
class
FileInputStream
A
FileInputStream
obtains input bytes
 from a file in a file system.
class
FileNotFoundException
Signals that an attempt to open the file denoted by a specified pathname
 has failed.
class
FileOutputStream
A file output stream is an output stream for writing data to a
File
or to a
FileDescriptor
.
final class
FilePermission
This class represents access to a file or directory.
class
FileReader
Reads text from character files using a default buffer size.
class
FileWriter
Writes text to character files using a default buffer size.
class
FilterInputStream
A
FilterInputStream
wraps some other input stream, which it uses as
 its basic source of data, possibly transforming the data along the way or
 providing additional functionality.
class
FilterOutputStream
This class is the superclass of all classes that filter output
 streams.
class
FilterReader
Abstract class for reading filtered character streams.
class
FilterWriter
Abstract class for writing filtered character streams.
class
InputStream
This abstract class is the superclass of all classes representing
 an input stream of bytes.
class
InputStreamReader
An InputStreamReader is a bridge from byte streams to character streams: It
 reads bytes and decodes them into characters using a specified
charset
.
class
InterruptedIOException
Signals that an I/O operation has been interrupted.
class
InvalidClassException
Thrown when the Serialization runtime detects one of the following
 problems with a Class.
class
InvalidObjectException
Indicates that one or more deserialized objects failed validation
 tests.
class
IOError
Thrown when a serious I/O error has occurred.
class
IOException
Signals that an I/O exception of some sort has occurred.
class
LineNumberInputStream
Deprecated.
This class incorrectly assumes that bytes adequately represent
             characters.
class
LineNumberReader
A buffered character-input stream that keeps track of line numbers.
class
NotActiveException
Thrown when serialization or deserialization is not active.
class
NotSerializableException
Thrown when an instance is required to have a Serializable interface.
static final class
ObjectInputFilter.Config
A utility class to set and get the JVM-wide deserialization filter factory,
 the static JVM-wide filter, or to create a filter from a pattern string.
class
ObjectInputStream
An ObjectInputStream deserializes primitive data and objects previously
 written using an ObjectOutputStream.
static class
ObjectInputStream.GetField
Provide access to the persistent fields read from the input stream.
class
ObjectOutputStream
An ObjectOutputStream writes primitive data types and graphs of Java objects
 to an OutputStream.
static class
ObjectOutputStream.PutField
Provide programmatic access to the persistent fields to be written
 to ObjectOutput.
final class
ObjectStreamClass
Serialization's descriptor for classes.
class
ObjectStreamException
Superclass of all exceptions specific to Object Stream classes.
class
ObjectStreamField
A description of a Serializable field from a Serializable class.
class
OptionalDataException
Exception indicating the failure of an object read operation due to
 unread primitive data, or the end of data belonging to a serialized
 object in the stream.
class
OutputStream
This abstract class is the superclass of all classes representing
 an output stream of bytes.
class
OutputStreamWriter
An OutputStreamWriter is a bridge from character streams to byte streams:
 Characters written to it are encoded into bytes using a specified
charset
.
class
PipedInputStream
A piped input stream should be connected
 to a piped output stream; the piped  input
 stream then provides whatever data bytes
 are written to the piped output  stream.
class
PipedOutputStream
A piped output stream can be connected to a piped input stream
 to create a communications pipe.
class
PipedReader
Piped character-input streams.
class
PipedWriter
Piped character-output streams.
class
PrintStream
A
PrintStream
adds functionality to another output stream,
 namely the ability to print representations of various data values
 conveniently.
class
PrintWriter
Prints formatted representations of objects to a text-output stream.
class
PushbackInputStream
A
PushbackInputStream
adds
 functionality to another input stream, namely
 the  ability to "push back" or "unread" bytes,
 by storing pushed-back bytes in an internal buffer.
class
PushbackReader
A character-stream reader that allows characters to be pushed back into the
 stream.
class
RandomAccessFile
Instances of this class support both reading and writing to a
 random access file.
class
Reader
Abstract class for reading character streams.
class
SequenceInputStream
A
SequenceInputStream
represents
 the logical concatenation of other input
 streams.
final class
SerializablePermission
This class is for Serializable permissions.
class
StreamCorruptedException
Thrown when control information that was read from an object stream
 violates internal consistency checks.
class
StreamTokenizer
The
StreamTokenizer
class takes an input stream and
 parses it into "tokens", allowing the tokens to be
 read one at a time.
class
StringBufferInputStream
Deprecated.
This class does not properly convert characters into bytes.
class
StringReader
A character stream whose source is a string.
class
StringWriter
A character stream that collects its output in a string buffer, which can
 then be used to construct a string.
class
SyncFailedException
Signals that a sync operation has failed.
class
UncheckedIOException
Wraps an
IOException
with an unchecked exception.
class
UnsupportedEncodingException
The Character Encoding is not supported.
class
UTFDataFormatException
Signals that a malformed string in
modified UTF-8
format has been read in a data
 input stream or by any class that implements the data input
 interface.
class
WriteAbortedException
Signals that one of the ObjectStreamExceptions was thrown during a
 write operation.
class
Writer
Abstract class for writing to character streams.
Fields in
java.io
declared as
Object
Modifier and Type
Field
Description
protected
Object
Reader.
lock
The object used to synchronize operations on this stream.
protected
Object
Writer.
lock
The object used to synchronize operations on this stream.
Methods in
java.io
that return
Object
Modifier and Type
Method
Description
abstract
Object
ObjectInputStream.GetField.
get
(
String
name,
Object
val)
Get the value of the named Object field from the persistent field.
Object
ObjectInput.
readObject
()
Read and return an object.
final
Object
ObjectInputStream.
readObject
()
Read an object from the ObjectInputStream.
protected
Object
ObjectInputStream.
readObjectOverride
()
This method is called by trusted subclasses of ObjectInputStream that
 constructed ObjectInputStream using the protected no-arg constructor.
Object
ObjectInputStream.
readUnshared
()
Reads an "unshared" object from the ObjectInputStream.
protected
Object
ObjectOutputStream.
replaceObject
(
Object
obj)
This method will allow trusted subclasses of ObjectOutputStream to
 substitute one object for another during serialization.
protected
Object
ObjectInputStream.
resolveObject
(
Object
obj)
This method will allow trusted subclasses of ObjectInputStream to
 substitute one object for another during deserialization.
Methods in
java.io
with parameters of type
Object
Modifier and Type
Method
Description
int
ObjectStreamField.
compareTo
(
Object
obj)
Compare this field with another
ObjectStreamField
.
boolean
File.
equals
(
Object
obj)
Tests this abstract pathname for equality with the given object.
boolean
FilePermission.
equals
(
Object
obj)
Checks two FilePermission objects for equality.
Console
Console.
format
(
String
fmt,
Object
... args)
Writes a formatted string to this console's output stream using
 the specified format string and arguments.
PrintStream
PrintStream.
format
(
String
format,
Object
... args)
Writes a formatted string to this output stream using the specified
 format string and arguments.
PrintStream
PrintStream.
format
(
Locale
l,
String
format,
Object
... args)
Writes a formatted string to this output stream using the specified
 format string and arguments.
PrintWriter
PrintWriter.
format
(
String
format,
Object
... args)
Writes a formatted string to this writer using the specified format
 string and arguments.
PrintWriter
PrintWriter.
format
(
Locale
l,
String
format,
Object
... args)
Writes a formatted string to this writer using the specified format
 string and arguments.
abstract
Object
ObjectInputStream.GetField.
get
(
String
name,
Object
val)
Get the value of the named Object field from the persistent field.
void
PrintStream.
print
(
Object
obj)
Prints an object.
void
PrintWriter.
print
(
Object
obj)
Prints an object.
Console
Console.
printf
(
String
format,
Object
... args)
A convenience method to write a formatted string to this console's
 output stream using the specified format string and arguments.
PrintStream
PrintStream.
printf
(
String
format,
Object
... args)
A convenience method to write a formatted string to this output stream
 using the specified format string and arguments.
PrintStream
PrintStream.
printf
(
Locale
l,
String
format,
Object
... args)
A convenience method to write a formatted string to this output stream
 using the specified format string and arguments.
PrintWriter
PrintWriter.
printf
(
String
format,
Object
... args)
A convenience method to write a formatted string to this writer using
 the specified format string and arguments.
PrintWriter
PrintWriter.
printf
(
Locale
l,
String
format,
Object
... args)
A convenience method to write a formatted string to this writer using
 the specified format string and arguments.
void
PrintStream.
println
(
Object
x)
Prints an Object and then terminates the line.
void
PrintWriter.
println
(
Object
x)
Prints an Object and then terminates the line.
abstract void
ObjectOutputStream.PutField.
put
(
String
name,
Object
val)
Put the value of the named Object field into the persistent field.
String
Console.
readLine
(
String
fmt,
Object
... args)
Provides a formatted prompt, then reads a single line of text from the
 console.
char[]
Console.
readPassword
(
String
fmt,
Object
... args)
Provides a formatted prompt, then reads a password or passphrase from
 the console with echoing disabled.
protected
Object
ObjectOutputStream.
replaceObject
(
Object
obj)
This method will allow trusted subclasses of ObjectOutputStream to
 substitute one object for another during serialization.
protected
Object
ObjectInputStream.
resolveObject
(
Object
obj)
This method will allow trusted subclasses of ObjectInputStream to
 substitute one object for another during deserialization.
void
ObjectOutput.
writeObject
(
Object
obj)
Write an object to the underlying storage or stream.
final void
ObjectOutputStream.
writeObject
(
Object
obj)
Write the specified object to the ObjectOutputStream.
protected void
ObjectOutputStream.
writeObjectOverride
(
Object
obj)
Method used by subclasses to override the default writeObject method.
void
ObjectOutputStream.
writeUnshared
(
Object
obj)
Writes an "unshared" object to the ObjectOutputStream.
Constructors in
java.io
with parameters of type
Object
Modifier
Constructor
Description
protected
Reader
(
Object
lock)
Creates a new character-stream reader whose critical sections will
 synchronize on the given object.
protected
Writer
(
Object
lock)
Creates a new character-stream writer whose critical sections will
 synchronize on the given object.
Uses of
Object
in
java.lang
Subclasses of
Object
in
java.lang
Modifier and Type
Class
Description
class
AbstractMethodError
Thrown when an application tries to call an abstract method.
class
ArithmeticException
Thrown when an exceptional arithmetic condition has occurred.
class
ArrayIndexOutOfBoundsException
Thrown to indicate that an array has been accessed with an illegal index.
class
ArrayStoreException
Thrown to indicate that an attempt has been made to store the
 wrong type of object into an array of objects.
class
AssertionError
Thrown to indicate that an assertion has failed.
final class
Boolean
The Boolean class wraps a value of the primitive type
boolean
in an object.
class
BootstrapMethodError
Thrown to indicate that an
invokedynamic
instruction or a dynamic
 constant failed to resolve its bootstrap method and arguments,
 or for
invokedynamic
instruction the bootstrap method has failed to
 provide a
call site
with a
target
of the correct
method type
,
 or for a dynamic constant the bootstrap method has failed to provide a
 constant value of the required type.
final class
Byte
The
Byte
class wraps a value of primitive type
byte
in an object.
final class
Character
The
Character
class wraps a value of the primitive
 type
char
in an object.
static class
Character.Subset
Instances of this class represent particular subsets of the Unicode
 character set.
static final class
Character.UnicodeBlock
A family of character subsets representing the character blocks in the
 Unicode specification.
final class
Class
<T>
Instances of the class
Class
represent classes and
 interfaces in a running Java application.
class
ClassCastException
Thrown to indicate that the code has attempted to cast an object
 to a subclass of which it is not an instance.
class
ClassCircularityError
Thrown when the Java Virtual Machine detects a circularity in the
 superclass hierarchy of a class being loaded.
class
ClassFormatError
Thrown when the Java Virtual Machine attempts to read a class
 file and determines that the file is malformed or otherwise cannot
 be interpreted as a class file.
class
ClassLoader
A class loader is an object that is responsible for loading classes.
class
ClassNotFoundException
Thrown when an application tries to load in a class through its
 string name using:
 
 The
forName
method in class
Class
.
class
ClassValue
<T>
Lazily associate a computed value with (potentially) every type.
class
CloneNotSupportedException
Thrown to indicate that the
clone
method in class
Object
has been called to clone an object, but that
 the object's class does not implement the
Cloneable
interface.
final class
Double
The
Double
class wraps a value of the primitive type
double
in an object.
class
Enum
<E extends
Enum
<E>>
This is the common base class of all Java language enumeration classes.
static final class
Enum.EnumDesc
<E extends
Enum
<E>>
A
nominal descriptor
for an
enum
constant.
class
EnumConstantNotPresentException
Thrown when an application tries to access an enum constant by name
 and the enum type contains no constant with the specified name.
class
Error
An
Error
is a subclass of
Throwable
that indicates serious problems that a reasonable application
 should not try to catch.
class
Exception
The class
Exception
and its subclasses are a form of
Throwable
that indicates conditions that a reasonable
 application might want to catch.
class
ExceptionInInitializerError
Signals that an unexpected exception has occurred in a static initializer.
final class
Float
The
Float
class wraps a value of primitive type
float
in an object.
class
IllegalAccessError
Thrown if an application attempts to access or modify a field, or
 to call a method that it does not have access to.
class
IllegalAccessException
An IllegalAccessException is thrown when an application tries
 to reflectively create an instance (other than an array),
 set or get a field, or invoke a method, but the currently
 executing method does not have access to the definition of
 the specified class, field, method or constructor.
class
IllegalArgumentException
Thrown to indicate that a method has been passed an illegal or
 inappropriate argument.
class
IllegalCallerException
Thrown to indicate that a method has been called by an inappropriate caller.
class
IllegalMonitorStateException
Thrown to indicate that a thread has attempted to wait on an
 object's monitor or to notify other threads waiting on an object's
 monitor without owning the specified monitor.
class
IllegalStateException
Signals that a method has been invoked at an illegal or
 inappropriate time.
class
IllegalThreadStateException
Thrown to indicate that a thread is not in an appropriate state
 for the requested operation.
class
IncompatibleClassChangeError
Thrown when an incompatible class change has occurred to some class
 definition.
class
IndexOutOfBoundsException
Thrown to indicate that an index of some sort (such as to an array, to a
 string, or to a vector) is out of range.
class
InheritableThreadLocal
<T>
This class extends
ThreadLocal
to provide inheritance of values
 from parent thread to child thread: when a child thread is created, the
 child receives initial values for all inheritable thread-local variables
 for which the parent has values.
class
InstantiationError
Thrown when an application tries to use the Java
new
construct to instantiate an abstract class or an interface.
class
InstantiationException
Thrown when an application tries to create an instance of a class
 using the
newInstance
method in class
Class
, but the specified class object cannot be
 instantiated.
final class
Integer
The
Integer
class wraps a value of the primitive type
int
in an object.
class
InternalError
Thrown to indicate some unexpected internal error has occurred in
 the Java Virtual Machine.
class
InterruptedException
Thrown when a thread is waiting, sleeping, or otherwise occupied,
 and the thread is interrupted, either before or during the activity.
class
LayerInstantiationException
Thrown when creating a
module layer
fails.
class
LinkageError
Subclasses of
LinkageError
indicate that a class has
 some dependency on another class; however, the latter class has
 incompatibly changed after the compilation of the former class.
final class
Long
The
Long
class wraps a value of the primitive type
long
in an object.
final class
MatchException
Thrown to indicate an unexpected failure in pattern matching.
final class
Math
The class
Math
contains methods for performing basic
 numeric operations such as the elementary exponential, logarithm,
 square root, and trigonometric functions.
final class
Module
Represents a run-time module, either
named
or unnamed.
final class
ModuleLayer
A layer of modules in the Java virtual machine.
static final class
ModuleLayer.Controller
Controls a module layer.
class
NegativeArraySizeException
Thrown if an application tries to create an array with negative size.
class
NoClassDefFoundError
Thrown if the Java Virtual Machine or a
ClassLoader
instance
 tries to load in the definition of a class (as part of a normal method call
 or as part of creating a new instance using the
new
expression)
 and no definition of the class could be found.
class
NoSuchFieldError
Thrown if an application tries to access or modify a specified
 field of an object, and that object no longer has that field.
class
NoSuchFieldException
Signals that the class doesn't have a field of a specified name.
class
NoSuchMethodError
Thrown if an application tries to call a specified method of a
 class (either static or instance), and that class no longer has a
 definition of that method.
class
NoSuchMethodException
Thrown when a particular method cannot be found.
class
NullPointerException
Thrown when an application attempts to use
null
in a
 case where an object is required.
class
Number
The abstract class
Number
is the superclass of platform
 classes representing numeric values that are convertible to the
 primitive types
byte
,
double
,
float
,
int
,
long
, and
short
.
class
NumberFormatException
Thrown to indicate that the application has attempted to convert
 a string to one of the numeric types, but that the string does not
 have the appropriate format.
class
OutOfMemoryError
Thrown when the Java Virtual Machine cannot allocate an object
 because it is out of memory, and no more memory could be made
 available by the garbage collector.
class
Package
Represents metadata about a run-time package associated with a class loader.
class
Process
Process
provides control of native processes started by
 ProcessBuilder.start and Runtime.exec.
final class
ProcessBuilder
This class is used to create operating system processes.
static class
ProcessBuilder.Redirect
Represents a source of subprocess input or a destination of
 subprocess output.
class
Record
This is the common base class of all Java language record classes.
class
ReflectiveOperationException
Common superclass of exceptions thrown by reflective operations in
 core reflection.
class
Runtime
Every Java application has a single instance of class
Runtime
that allows the application to interface with
 the environment in which the application is running.
static final class
Runtime.Version
A representation of a version string for an implementation of the
 Java SE Platform.
class
RuntimeException
RuntimeException
is the superclass of those
 exceptions that can be thrown during the normal operation of the
 Java Virtual Machine.
final class
RuntimePermission
This class is for runtime permissions.
final class
ScopedValue
PREVIEW
<T>
Preview.
A value that may be safely and efficiently shared to methods without using method
 parameters.
static final class
ScopedValue.Carrier
PREVIEW
Preview.
A mapping of scoped values, as
keys
, to values.
class
SecurityException
Thrown by the security manager to indicate a security violation.
class
SecurityManager
Deprecated, for removal: This API element is subject to removal in a future version.
The Security Manager is deprecated and subject to removal in a
       future release.
final class
Short
The
Short
class wraps a value of primitive type
short
in an object.
class
StackOverflowError
Thrown when a stack overflow occurs because an application
 recurses too deeply.
final class
StackTraceElement
An element in a stack trace, as returned by
Throwable.getStackTrace()
.
final class
StackWalker
A stack walker.
final class
StrictMath
The class
StrictMath
contains methods for performing basic
 numeric operations such as the elementary exponential, logarithm,
 square root, and trigonometric functions.
final class
String
The
String
class represents character strings.
final class
StringBuffer
A thread-safe, mutable sequence of characters.
final class
StringBuilder
A mutable sequence of characters.
class
StringIndexOutOfBoundsException
Thrown by
String
methods to indicate that an index is either negative
 or greater than the size of the string.
final class
System
The
System
class contains several useful class fields
 and methods.
static class
System.LoggerFinder
The
LoggerFinder
service is responsible for creating, managing,
 and configuring loggers to the underlying framework it uses.
class
Thread
A
thread
is a thread of execution in a program.
class
ThreadDeath
Deprecated, for removal: This API element is subject to removal in a future version.
Thread.stop()
was originally specified to "stop" a victim
      thread by causing the victim thread to throw a
ThreadDeath
.
class
ThreadGroup
A thread group represents a set of threads.
class
ThreadLocal
<T>
This class provides thread-local variables.
class
Throwable
The
Throwable
class is the superclass of all errors and
 exceptions in the Java language.
class
TypeNotPresentException
Thrown when an application tries to access a type using a string
 representing the type's name, but no definition for the type with
 the specified name can be found.
class
UnknownError
Thrown when an unknown but serious exception has occurred in the
 Java Virtual Machine.
class
UnsatisfiedLinkError
Thrown if the Java Virtual Machine cannot find an appropriate
 native-language definition of a method declared
native
.
class
UnsupportedClassVersionError
Thrown when the Java Virtual Machine attempts to read a class
 file and determines that the major and minor version numbers
 in the file are not supported.
class
UnsupportedOperationException
Thrown to indicate that the requested operation is not supported.
class
VerifyError
Thrown when the "verifier" detects that a class file,
 though well formed, contains some sort of internal inconsistency
 or security problem.
class
VirtualMachineError
Thrown to indicate that the Java Virtual Machine is broken or has
 run out of resources necessary for it to continue operating.
final class
Void
The
Void
class is an uninstantiable placeholder class to hold a
 reference to the
Class
object representing the Java keyword
 void.
final class
WrongThreadException
Thrown to indicate that a method has been called on the wrong thread.
Methods in
java.lang
that return
Object
Modifier and Type
Method
Description
protected final
Object
Enum.
clone
()
Throws CloneNotSupportedException.
protected
Object
Object.
clone
()
Creates and returns a copy of this object.
protected
Object
Thread.
clone
()
Throws CloneNotSupportedException as a Thread can not be meaningfully
 cloned.
protected
Object
ClassLoader.
getClassLoadingLock
(
String
className)
Returns the lock object for class loading operations.
T
[]
Class.
getEnumConstants
()
Returns the elements of this enum class or null if this
 Class object does not represent an enum class.
Object
SecurityManager.
getSecurityContext
()
Deprecated, for removal: This API element is subject to removal in a future version.
Creates an object that encapsulates the current execution
 environment.
Object
[]
Class.
getSigners
()
Gets the signers of this class.
Methods in
java.lang
that return types with arguments of type
Object
Modifier and Type
Method
Description
List
<
Object
>
StringTemplate.
values
()
Returns a list of embedded expression results for this
StringTemplate
PREVIEW
.
Methods in
java.lang
with parameters of type
Object
Modifier and Type
Method
Description
StringBuffer
StringBuffer.
append
(
Object
obj)
StringBuilder
StringBuilder.
append
(
Object
obj)
static void
System.
arraycopy
(
Object
src,
 int srcPos,
Object
dest,
 int destPos,
 int length)
Copies an array from the specified source array, beginning at the
 specified position, to the specified position of the destination array.
T
Class.
cast
(
Object
obj)
Casts an object to the class or interface represented
 by this
Class
object.
void
SecurityManager.
checkConnect
(
String
host,
 int port,
Object
context)
Deprecated, for removal: This API element is subject to removal in a future version.
Throws a
SecurityException
if the
 specified security context is not allowed to open a socket
 connection to the specified host and port number.
void
SecurityManager.
checkPermission
(
Permission
perm,
Object
context)
Deprecated, for removal: This API element is subject to removal in a future version.
Throws a
SecurityException
if the
 specified security context is denied access to the resource
 specified by the given permission.
void
SecurityManager.
checkRead
(
String
file,
Object
context)
Deprecated, for removal: This API element is subject to removal in a future version.
Throws a
SecurityException
if the
 specified security context is not allowed to read the file
 specified by the string argument.
boolean
Boolean.
equals
(
Object
obj)
Returns
true
if and only if the argument is not
null
and is a
Boolean
object that
 represents the same
boolean
value as this object.
boolean
Byte.
equals
(
Object
obj)
Compares this object to the specified object.
boolean
Character.
equals
(
Object
obj)
Compares this object against the specified object.
final boolean
Character.Subset.
equals
(
Object
obj)
Compares two
Subset
objects for equality.
boolean
Double.
equals
(
Object
obj)
Compares this object against the specified object.
final boolean
Enum.
equals
(
Object
other)
Returns true if the specified object is equal to this
 enum constant.
boolean
Float.
equals
(
Object
obj)
Compares this object against the specified object.
boolean
Integer.
equals
(
Object
obj)
Compares this object to the specified object.
boolean
Long.
equals
(
Object
obj)
Compares this object to the specified object.
boolean
Object.
equals
(
Object
obj)
Indicates whether some other object is "equal to" this one.
boolean
ProcessBuilder.Redirect.
equals
(
Object
obj)
Compares the specified object with this
Redirect
for
 equality.
boolean
ProcessHandle.
equals
(
Object
other)
Returns
true
if
other
object is non-null, is of the
 same implementation, and represents the same system process;
 otherwise it returns
false
.
abstract boolean
Record.
equals
(
Object
obj)
Indicates whether some other object is "equal to" this one.
boolean
Runtime.Version.
equals
(
Object
obj)
Determines whether this
Version
is equal to another object.
boolean
Short.
equals
(
Object
obj)
Compares this object to the specified object.
boolean
StackTraceElement.
equals
(
Object
obj)
Returns true if the specified object is another
StackTraceElement
instance representing the same execution
 point as this instance.
boolean
String.
equals
(
Object
anObject)
Compares this string to the specified object.
boolean
Runtime.Version.
equalsIgnoreOptional
(
Object
obj)
Determines whether this
Version
is equal to another
 disregarding optional build information.
static
String
String.
format
(
String
format,
Object
... args)
Returns a formatted string using the specified format string and
 arguments.
static
String
String.
format
(
Locale
l,
String
format,
Object
... args)
Returns a formatted string using the specified locale, format string,
 and arguments.
String
String.
formatted
(
Object
... args)
Formats using this string as the format string, and the supplied
 arguments.
static boolean
Thread.
holdsLock
(
Object
obj)
Returns
true
if and only if the current thread holds the
 monitor lock on the specified object.
static int
System.
identityHashCode
(
Object
x)
Returns the same hash code for the given object as
 would be returned by the default method hashCode(),
 whether or not the given object's class overrides
 hashCode().
StringBuffer
StringBuffer.
insert
(int offset,
Object
obj)
StringBuilder
StringBuilder.
insert
(int offset,
Object
obj)
boolean
Class.
isInstance
(
Object
obj)
Determines if the specified
Object
is assignment-compatible
 with the object represented by this
Class
.
default void
System.Logger.
log
(
System.Logger.Level
level,
Object
obj)
Logs a message produced from the given object.
default void
System.Logger.
log
(
System.Logger.Level
level,
String
format,
Object
... params)
Logs a message with an optional list of parameters.
void
System.Logger.
log
(
System.Logger.Level
level,
ResourceBundle
bundle,
String
format,
Object
... params)
Logs a message with resource bundle and an optional list of
 parameters.
protected final void
ClassLoader.
setSigners
(
Class
<?> c,
Object
[] signers)
Sets the signers of a class.
static
String
String.
valueOf
(
Object
obj)
Returns the string representation of the
Object
argument.
Constructors in
java.lang
with parameters of type
Object
Modifier
Constructor
Description
AssertionError
(
Object
detailMessage)
Constructs an AssertionError with its detail message derived
 from the specified object, which is converted to a string as
 defined in section
5.1.11
of
The Java Language Specification
.
Uses of
Object
in
java.lang.annotation
Subclasses of
Object
in
java.lang.annotation
Modifier and Type
Class
Description
class
AnnotationFormatError
Thrown when the annotation parser attempts to read an annotation
 from a class file and determines that the annotation is malformed.
class
AnnotationTypeMismatchException
Thrown to indicate that a program has attempted to access an element of
 an annotation whose type has changed after the annotation was compiled
 (or serialized).
class
IncompleteAnnotationException
Thrown to indicate that a program has attempted to access an element of
 an annotation interface that was added to the annotation interface definition
 after the annotation was compiled (or serialized).
Methods in
java.lang.annotation
with parameters of type
Object
Modifier and Type
Method
Description
boolean
Annotation.
equals
(
Object
obj)
Returns true if the specified object represents an annotation
 that is logically equivalent to this one.
Uses of
Object
in
java.lang.constant
Subclasses of
Object
in
java.lang.constant
Modifier and Type
Class
Description
final class
ConstantDescs
Predefined values of
nominal descriptor
for common constants, including descriptors for primitive class types and
 other common platform types, and descriptors for method handles for standard
 bootstrap methods.
class
DynamicCallSiteDesc
A
nominal descriptor
for an
invokedynamic
call site.
class
DynamicConstantDesc
<T>
A
nominal descriptor
for a
 dynamic constant (one described in the constant pool with
Constant_Dynamic_info
.)
Methods in
java.lang.constant
that return
Object
Modifier and Type
Method
Description
Object
ConstantDesc.
resolveConstantDesc
(
MethodHandles.Lookup
lookup)
Resolves this descriptor reflectively, emulating the resolution behavior
 of JVMS
5.4.3
and the access control behavior of JVMS
5.4.4
.
Methods in
java.lang.constant
with parameters of type
Object
Modifier and Type
Method
Description
boolean
ClassDesc.
equals
(
Object
o)
Compare the specified object with this descriptor for equality.
final boolean
DynamicCallSiteDesc.
equals
(
Object
o)
Compares the specified object with this descriptor for equality.
final boolean
DynamicConstantDesc.
equals
(
Object
o)
Compares the specified object with this descriptor for equality.
boolean
MethodHandleDesc.
equals
(
Object
o)
Compares the specified object with this descriptor for equality.
boolean
MethodTypeDesc.
equals
(
Object
o)
Compares the specified object with this descriptor for equality.
boolean
ModuleDesc.
equals
(
Object
o)
Compare the specified object with this descriptor for equality.
boolean
PackageDesc.
equals
(
Object
o)
Compare the specified object with this descriptor for equality.
Uses of
Object
in
java.lang.foreign
Methods in
java.lang.foreign
that return types with arguments of type
Object
Modifier and Type
Method
Description
Optional
<
Object
>
MemorySegment.
heapBase
()
Returns the Java object stored in the on-heap region of memory backing this memory segment, if any.
Methods in
java.lang.foreign
with parameters of type
Object
Modifier and Type
Method
Description
static void
MemorySegment.
copy
(
MemorySegment
PREVIEW
srcSegment,
ValueLayout
PREVIEW
srcLayout,
 long srcOffset,
Object
dstArray,
 int dstIndex,
 int elementCount)
Copies a number of elements from a source memory segment to a destination array.
static void
MemorySegment.
copy
(
Object
srcArray,
 int srcIndex,
MemorySegment
PREVIEW
dstSegment,
ValueLayout
PREVIEW
dstLayout,
 long dstOffset,
 int elementCount)
Copies a number of elements from a source array to a destination memory segment.
boolean
MemoryLayout.
equals
(
Object
other)
Compares the specified object with this layout for equality.
boolean
MemorySegment.
equals
(
Object
that)
Compares the specified object with this memory segment for equality.
boolean
MemorySegment.Scope.
equals
(
Object
that)
Returns
true
, if the provided object is also a scope, which models the same lifetime as that
 modelled by this scope.
Uses of
Object
in
java.lang.instrument
Subclasses of
Object
in
java.lang.instrument
Modifier and Type
Class
Description
final class
ClassDefinition
This class serves as a parameter block to the
Instrumentation.redefineClasses
method.
class
IllegalClassFormatException
Thrown by an implementation of
ClassFileTransformer.transform
when its input parameters are invalid.
class
UnmodifiableClassException
Thrown by an implementation of
Instrumentation.redefineClasses
when one of the specified classes cannot be modified.
class
UnmodifiableModuleException
Thrown to indicate that a module cannot be modified.
Methods in
java.lang.instrument
with parameters of type
Object
Modifier and Type
Method
Description
long
Instrumentation.
getObjectSize
(
Object
objectToSize)
Returns an implementation-specific approximation of the amount of storage consumed by
 the specified object.
Uses of
Object
in
java.lang.invoke
Subclasses of
Object
in
java.lang.invoke
Modifier and Type
Class
Description
class
CallSite
A
CallSite
is a holder for a variable
MethodHandle
,
 which is called its
target
.
final class
ConstantBootstraps
Bootstrap methods for dynamically-computed constants.
class
ConstantCallSite
A
ConstantCallSite
is a
CallSite
whose target is permanent, and can never be changed.
class
LambdaConversionException
LambdaConversionException
final class
LambdaMetafactory
Methods to facilitate the creation of simple "function objects" that
 implement one or more interfaces by delegation to a provided
MethodHandle
,
 possibly after type adaptation and partial evaluation of arguments.
class
MethodHandle
A method handle is a typed, directly executable reference to an underlying method,
 constructor, field, or similar low-level operation, with optional
 transformations of arguments or return values.
class
MethodHandleProxies
This class consists exclusively of static methods that help adapt
 method handles to other JVM types, such as interfaces.
class
MethodHandles
This class consists exclusively of static methods that operate on or return
 method handles.
static final class
MethodHandles.Lookup
A
lookup object
is a factory for creating method handles,
 when the creation requires access checking.
final class
MethodType
A method type represents the arguments and return type accepted and
 returned by a method handle, or the arguments and return type passed
 and expected  by a method handle caller.
class
MutableCallSite
A
MutableCallSite
is a
CallSite
whose target variable
 behaves like an ordinary field.
final class
SerializedLambda
Serialized form of a lambda expression.
class
StringConcatException
StringConcatException is thrown by
StringConcatFactory
when linkage
 invariants are violated.
final class
StringConcatFactory
Methods to facilitate the creation of String concatenation methods, that
 can be used to efficiently concatenate a known number of arguments of known
 types, possibly after type adaptation and partial evaluation of arguments.
class
SwitchPoint
A
SwitchPoint
is an object which can publish state transitions to other threads.
class
VarHandle
A VarHandle is a dynamically strongly typed reference to a variable, or to a
 parametrically-defined family of variables, including static fields,
 non-static fields, array elements, or components of an off-heap data
 structure.
static final class
VarHandle.VarHandleDesc
A
nominal descriptor
for a
VarHandle
constant.
class
VolatileCallSite
A
VolatileCallSite
is a
CallSite
whose target acts like a volatile variable.
class
WrongMethodTypeException
Thrown to indicate that code has attempted to call a method handle
 via the wrong method type.
Methods in
java.lang.invoke
that return
Object
Modifier and Type
Method
Description
final
Object
VarHandle.
compareAndExchange
(
Object
... args)
Atomically sets the value of a variable to the
newValue
with the
 memory semantics of
VarHandle.setVolatile(java.lang.Object...)
if the variable's current value,
 referred to as the
witness value
,
==
the
expectedValue
, as accessed with the memory semantics of
VarHandle.getVolatile(java.lang.Object...)
.
final
Object
VarHandle.
compareAndExchangeAcquire
(
Object
... args)
Atomically sets the value of a variable to the
newValue
with the
 memory semantics of
VarHandle.set(java.lang.Object...)
if the variable's current value,
 referred to as the
witness value
,
==
the
expectedValue
, as accessed with the memory semantics of
VarHandle.getAcquire(java.lang.Object...)
.
final
Object
VarHandle.
compareAndExchangeRelease
(
Object
... args)
Atomically sets the value of a variable to the
newValue
with the
 memory semantics of
VarHandle.setRelease(java.lang.Object...)
if the variable's current value,
 referred to as the
witness value
,
==
the
expectedValue
, as accessed with the memory semantics of
VarHandle.get(java.lang.Object...)
.
static
Object
ConstantBootstraps.
explicitCast
(
MethodHandles.Lookup
lookup,
String
name,
Class
<?> dstType,
Object
value)
Applies a conversion from a source type to a destination type.
final
Object
VarHandle.
get
(
Object
... args)
Returns the value of a variable, with memory semantics of reading as
 if the variable was declared non-
volatile
.
final
Object
VarHandle.
getAcquire
(
Object
... args)
Returns the value of a variable, and ensures that subsequent loads and
 stores are not reordered before this access.
final
Object
VarHandle.
getAndAdd
(
Object
... args)
Atomically adds the
value
to the current value of a variable with
 the memory semantics of
VarHandle.setVolatile(java.lang.Object...)
, and returns the variable's
 previous value, as accessed with the memory semantics of
VarHandle.getVolatile(java.lang.Object...)
.
final
Object
VarHandle.
getAndAddAcquire
(
Object
... args)
Atomically adds the
value
to the current value of a variable with
 the memory semantics of
VarHandle.set(java.lang.Object...)
, and returns the variable's
 previous value, as accessed with the memory semantics of
VarHandle.getAcquire(java.lang.Object...)
.
final
Object
VarHandle.
getAndAddRelease
(
Object
... args)
Atomically adds the
value
to the current value of a variable with
 the memory semantics of
VarHandle.setRelease(java.lang.Object...)
, and returns the variable's
 previous value, as accessed with the memory semantics of
VarHandle.get(java.lang.Object...)
.
final
Object
VarHandle.
getAndBitwiseAnd
(
Object
... args)
Atomically sets the value of a variable to the result of
 bitwise AND between the variable's current value and the
mask
with the memory semantics of
VarHandle.setVolatile(java.lang.Object...)
and returns the
 variable's previous value, as accessed with the memory semantics of
VarHandle.getVolatile(java.lang.Object...)
.
final
Object
VarHandle.
getAndBitwiseAndAcquire
(
Object
... args)
Atomically sets the value of a variable to the result of
 bitwise AND between the variable's current value and the
mask
with the memory semantics of
VarHandle.set(java.lang.Object...)
and returns the
 variable's previous value, as accessed with the memory semantics of
VarHandle.getAcquire(java.lang.Object...)
.
final
Object
VarHandle.
getAndBitwiseAndRelease
(
Object
... args)
Atomically sets the value of a variable to the result of
 bitwise AND between the variable's current value and the
mask
with the memory semantics of
VarHandle.setRelease(java.lang.Object...)
and returns the
 variable's previous value, as accessed with the memory semantics of
VarHandle.get(java.lang.Object...)
.
final
Object
VarHandle.
getAndBitwiseOr
(
Object
... args)
Atomically sets the value of a variable to the result of
 bitwise OR between the variable's current value and the
mask
with the memory semantics of
VarHandle.setVolatile(java.lang.Object...)
and returns the
 variable's previous value, as accessed with the memory semantics of
VarHandle.getVolatile(java.lang.Object...)
.
final
Object
VarHandle.
getAndBitwiseOrAcquire
(
Object
... args)
Atomically sets the value of a variable to the result of
 bitwise OR between the variable's current value and the
mask
with the memory semantics of
VarHandle.set(java.lang.Object...)
and returns the
 variable's previous value, as accessed with the memory semantics of
VarHandle.getAcquire(java.lang.Object...)
.
final
Object
VarHandle.
getAndBitwiseOrRelease
(
Object
... args)
Atomically sets the value of a variable to the result of
 bitwise OR between the variable's current value and the
mask
with the memory semantics of
VarHandle.setRelease(java.lang.Object...)
and returns the
 variable's previous value, as accessed with the memory semantics of
VarHandle.get(java.lang.Object...)
.
final
Object
VarHandle.
getAndBitwiseXor
(
Object
... args)
Atomically sets the value of a variable to the result of
 bitwise XOR between the variable's current value and the
mask
with the memory semantics of
VarHandle.setVolatile(java.lang.Object...)
and returns the
 variable's previous value, as accessed with the memory semantics of
VarHandle.getVolatile(java.lang.Object...)
.
final
Object
VarHandle.
getAndBitwiseXorAcquire
(
Object
... args)
Atomically sets the value of a variable to the result of
 bitwise XOR between the variable's current value and the
mask
with the memory semantics of
VarHandle.set(java.lang.Object...)
and returns the
 variable's previous value, as accessed with the memory semantics of
VarHandle.getAcquire(java.lang.Object...)
.
final
Object
VarHandle.
getAndBitwiseXorRelease
(
Object
... args)
Atomically sets the value of a variable to the result of
 bitwise XOR between the variable's current value and the
mask
with the memory semantics of
VarHandle.setRelease(java.lang.Object...)
and returns the
 variable's previous value, as accessed with the memory semantics of
VarHandle.get(java.lang.Object...)
.
final
Object
VarHandle.
getAndSet
(
Object
... args)
Atomically sets the value of a variable to the
newValue
with the
 memory semantics of
VarHandle.setVolatile(java.lang.Object...)
and returns the variable's
 previous value, as accessed with the memory semantics of
VarHandle.getVolatile(java.lang.Object...)
.
final
Object
VarHandle.
getAndSetAcquire
(
Object
... args)
Atomically sets the value of a variable to the
newValue
with the
 memory semantics of
VarHandle.set(java.lang.Object...)
and returns the variable's
 previous value, as accessed with the memory semantics of
VarHandle.getAcquire(java.lang.Object...)
.
final
Object
VarHandle.
getAndSetRelease
(
Object
... args)
Atomically sets the value of a variable to the
newValue
with the
 memory semantics of
VarHandle.setRelease(java.lang.Object...)
and returns the variable's
 previous value, as accessed with the memory semantics of
VarHandle.get(java.lang.Object...)
.
Object
SerializedLambda.
getCapturedArg
(int i)
Get a dynamic argument to the lambda capture site.
final
Object
VarHandle.
getOpaque
(
Object
... args)
Returns the value of a variable, accessed in program order, but with no
 assurance of memory ordering effects with respect to other threads.
static
Object
ConstantBootstraps.
getStaticFinal
(
MethodHandles.Lookup
lookup,
String
name,
Class
<?> type)
Returns the value of a static final field declared in the class which
 is the same as the field's type (or, for primitive-valued fields,
 declared in the wrapper class.)
static
Object
ConstantBootstraps.
getStaticFinal
(
MethodHandles.Lookup
lookup,
String
name,
Class
<?> type,
Class
<?> declaringClass)
Returns the value of a static final field.
final
Object
VarHandle.
getVolatile
(
Object
... args)
Returns the value of a variable, with memory semantics of reading as if
 the variable was declared
volatile
.
static
Object
ConstantBootstraps.
invoke
(
MethodHandles.Lookup
lookup,
String
name,
Class
<?> type,
MethodHandle
handle,
Object
... args)
Returns the result of invoking a method handle with the provided
 arguments.
final
Object
MethodHandle.
invoke
(
Object
... args)
Invokes the method handle, allowing any caller type descriptor,
 and optionally performing conversions on arguments and return values.
final
Object
MethodHandle.
invokeExact
(
Object
... args)
Invokes the method handle, allowing any caller type descriptor, but requiring an exact type match.
Object
MethodHandle.
invokeWithArguments
(
Object
... arguments)
Performs a variable arity invocation, passing the arguments in the given array
 to the method handle, as if via an inexact
invoke
from a call site
 which mentions only the type
Object
, and whose actual argument count is the length
 of the argument array.
Object
MethodHandle.
invokeWithArguments
(
List
<?> arguments)
Performs a variable arity invocation, passing the arguments in the given list
 to the method handle, as if via an inexact
invoke
from a call site
 which mentions only the type
Object
, and whose actual argument count is the length
 of the argument list.
static
Object
ConstantBootstraps.
nullConstant
(
MethodHandles.Lookup
lookup,
String
name,
Class
<?> type)
Returns a
null
object reference for the reference type specified
 by
type
.
Methods in
java.lang.invoke
with parameters of type
Object
Modifier and Type
Method
Description
static
CallSite
LambdaMetafactory.
altMetafactory
(
MethodHandles.Lookup
caller,
String
interfaceMethodName,
MethodType
factoryType,
Object
... args)
Facilitates the creation of simple "function objects" that implement one
 or more interfaces by delegation to a provided
MethodHandle
,
 after appropriate type adaptation and partial evaluation of arguments.
MethodHandle
MethodHandles.Lookup.
bind
(
Object
receiver,
String
name,
MethodType
type)
Produces an early-bound method handle for a non-static method.
MethodHandle
MethodHandle.
bindTo
(
Object
x)
Binds a value
x
to the first argument of a method handle, without invoking it.
final
Object
VarHandle.
compareAndExchange
(
Object
... args)
Atomically sets the value of a variable to the
newValue
with the
 memory semantics of
VarHandle.setVolatile(java.lang.Object...)
if the variable's current value,
 referred to as the
witness value
,
==
the
expectedValue
, as accessed with the memory semantics of
VarHandle.getVolatile(java.lang.Object...)
.
final
Object
VarHandle.
compareAndExchangeAcquire
(
Object
... args)
Atomically sets the value of a variable to the
newValue
with the
 memory semantics of
VarHandle.set(java.lang.Object...)
if the variable's current value,
 referred to as the
witness value
,
==
the
expectedValue
, as accessed with the memory semantics of
VarHandle.getAcquire(java.lang.Object...)
.
final
Object
VarHandle.
compareAndExchangeRelease
(
Object
... args)
Atomically sets the value of a variable to the
newValue
with the
 memory semantics of
VarHandle.setRelease(java.lang.Object...)
if the variable's current value,
 referred to as the
witness value
,
==
the
expectedValue
, as accessed with the memory semantics of
VarHandle.get(java.lang.Object...)
.
final boolean
VarHandle.
compareAndSet
(
Object
... args)
Atomically sets the value of a variable to the
newValue
with the
 memory semantics of
VarHandle.setVolatile(java.lang.Object...)
if the variable's current value,
 referred to as the
witness value
,
==
the
expectedValue
, as accessed with the memory semantics of
VarHandle.getVolatile(java.lang.Object...)
.
static
MethodHandle
MethodHandles.
constant
(
Class
<?> type,
Object
value)
Produces a method handle of the requested return type which returns the given
 constant value every time it is invoked.
MethodHandles.Lookup
MethodHandles.Lookup.
defineHiddenClassWithClassData
(byte[] bytes,
Object
classData,
 boolean initialize,
MethodHandles.Lookup.ClassOption
... options)
Creates a
hidden
class or interface from
bytes
with associated
class data
,
 returning a
Lookup
on the newly created class or interface.
boolean
MethodType.
equals
(
Object
x)
Compares the specified object with this type for equality.
static
Object
ConstantBootstraps.
explicitCast
(
MethodHandles.Lookup
lookup,
String
name,
Class
<?> dstType,
Object
value)
Applies a conversion from a source type to a destination type.
final
Object
VarHandle.
get
(
Object
... args)
Returns the value of a variable, with memory semantics of reading as
 if the variable was declared non-
volatile
.
final
Object
VarHandle.
getAcquire
(
Object
... args)
Returns the value of a variable, and ensures that subsequent loads and
 stores are not reordered before this access.
final
Object
VarHandle.
getAndAdd
(
Object
... args)
Atomically adds the
value
to the current value of a variable with
 the memory semantics of
VarHandle.setVolatile(java.lang.Object...)
, and returns the variable's
 previous value, as accessed with the memory semantics of
VarHandle.getVolatile(java.lang.Object...)
.
final
Object
VarHandle.
getAndAddAcquire
(
Object
... args)
Atomically adds the
value
to the current value of a variable with
 the memory semantics of
VarHandle.set(java.lang.Object...)
, and returns the variable's
 previous value, as accessed with the memory semantics of
VarHandle.getAcquire(java.lang.Object...)
.
final
Object
VarHandle.
getAndAddRelease
(
Object
... args)
Atomically adds the
value
to the current value of a variable with
 the memory semantics of
VarHandle.setRelease(java.lang.Object...)
, and returns the variable's
 previous value, as accessed with the memory semantics of
VarHandle.get(java.lang.Object...)
.
final
Object
VarHandle.
getAndBitwiseAnd
(
Object
... args)
Atomically sets the value of a variable to the result of
 bitwise AND between the variable's current value and the
mask
with the memory semantics of
VarHandle.setVolatile(java.lang.Object...)
and returns the
 variable's previous value, as accessed with the memory semantics of
VarHandle.getVolatile(java.lang.Object...)
.
final
Object
VarHandle.
getAndBitwiseAndAcquire
(
Object
... args)
Atomically sets the value of a variable to the result of
 bitwise AND between the variable's current value and the
mask
with the memory semantics of
VarHandle.set(java.lang.Object...)
and returns the
 variable's previous value, as accessed with the memory semantics of
VarHandle.getAcquire(java.lang.Object...)
.
final
Object
VarHandle.
getAndBitwiseAndRelease
(
Object
... args)
Atomically sets the value of a variable to the result of
 bitwise AND between the variable's current value and the
mask
with the memory semantics of
VarHandle.setRelease(java.lang.Object...)
and returns the
 variable's previous value, as accessed with the memory semantics of
VarHandle.get(java.lang.Object...)
.
final
Object
VarHandle.
getAndBitwiseOr
(
Object
... args)
Atomically sets the value of a variable to the result of
 bitwise OR between the variable's current value and the
mask
with the memory semantics of
VarHandle.setVolatile(java.lang.Object...)
and returns the
 variable's previous value, as accessed with the memory semantics of
VarHandle.getVolatile(java.lang.Object...)
.
final
Object
VarHandle.
getAndBitwiseOrAcquire
(
Object
... args)
Atomically sets the value of a variable to the result of
 bitwise OR between the variable's current value and the
mask
with the memory semantics of
VarHandle.set(java.lang.Object...)
and returns the
 variable's previous value, as accessed with the memory semantics of
VarHandle.getAcquire(java.lang.Object...)
.
final
Object
VarHandle.
getAndBitwiseOrRelease
(
Object
... args)
Atomically sets the value of a variable to the result of
 bitwise OR between the variable's current value and the
mask
with the memory semantics of
VarHandle.setRelease(java.lang.Object...)
and returns the
 variable's previous value, as accessed with the memory semantics of
VarHandle.get(java.lang.Object...)
.
final
Object
VarHandle.
getAndBitwiseXor
(
Object
... args)
Atomically sets the value of a variable to the result of
 bitwise XOR between the variable's current value and the
mask
with the memory semantics of
VarHandle.setVolatile(java.lang.Object...)
and returns the
 variable's previous value, as accessed with the memory semantics of
VarHandle.getVolatile(java.lang.Object...)
.
final
Object
VarHandle.
getAndBitwiseXorAcquire
(
Object
... args)
Atomically sets the value of a variable to the result of
 bitwise XOR between the variable's current value and the
mask
with the memory semantics of
VarHandle.set(java.lang.Object...)
and returns the
 variable's previous value, as accessed with the memory semantics of
VarHandle.getAcquire(java.lang.Object...)
.
final
Object
VarHandle.
getAndBitwiseXorRelease
(
Object
... args)
Atomically sets the value of a variable to the result of
 bitwise XOR between the variable's current value and the
mask
with the memory semantics of
VarHandle.setRelease(java.lang.Object...)
and returns the
 variable's previous value, as accessed with the memory semantics of
VarHandle.get(java.lang.Object...)
.
final
Object
VarHandle.
getAndSet
(
Object
... args)
Atomically sets the value of a variable to the
newValue
with the
 memory semantics of
VarHandle.setVolatile(java.lang.Object...)
and returns the variable's
 previous value, as accessed with the memory semantics of
VarHandle.getVolatile(java.lang.Object...)
.
final
Object
VarHandle.
getAndSetAcquire
(
Object
... args)
Atomically sets the value of a variable to the
newValue
with the
 memory semantics of
VarHandle.set(java.lang.Object...)
and returns the variable's
 previous value, as accessed with the memory semantics of
VarHandle.getAcquire(java.lang.Object...)
.
final
Object
VarHandle.
getAndSetRelease
(
Object
... args)
Atomically sets the value of a variable to the
newValue
with the
 memory semantics of
VarHandle.setRelease(java.lang.Object...)
and returns the variable's
 previous value, as accessed with the memory semantics of
VarHandle.get(java.lang.Object...)
.
final
Object
VarHandle.
getOpaque
(
Object
... args)
Returns the value of a variable, accessed in program order, but with no
 assurance of memory ordering effects with respect to other threads.
final
Object
VarHandle.
getVolatile
(
Object
... args)
Returns the value of a variable, with memory semantics of reading as if
 the variable was declared
volatile
.
static
MethodHandle
MethodHandles.
insertArguments
(
MethodHandle
target,
 int pos,
Object
... values)
Provides a target method handle with one or more
bound arguments
in advance of the method handle's invocation.
static
VarHandle
MethodHandles.
insertCoordinates
(
VarHandle
target,
 int pos,
Object
... values)
Preview.
Provides a target var handle with one or more
bound coordinates
in advance of the var handle's invocation.
static
Object
ConstantBootstraps.
invoke
(
MethodHandles.Lookup
lookup,
String
name,
Class
<?> type,
MethodHandle
handle,
Object
... args)
Returns the result of invoking a method handle with the provided
 arguments.
final
Object
MethodHandle.
invoke
(
Object
... args)
Invokes the method handle, allowing any caller type descriptor,
 and optionally performing conversions on arguments and return values.
final
Object
MethodHandle.
invokeExact
(
Object
... args)
Invokes the method handle, allowing any caller type descriptor, but requiring an exact type match.
Object
MethodHandle.
invokeWithArguments
(
Object
... arguments)
Performs a variable arity invocation, passing the arguments in the given array
 to the method handle, as if via an inexact
invoke
from a call site
 which mentions only the type
Object
, and whose actual argument count is the length
 of the argument array.
static boolean
MethodHandleProxies.
isWrapperInstance
(
Object
x)
Determines if the given object was produced by a call to
asInterfaceInstance
.
static
CallSite
StringConcatFactory.
makeConcatWithConstants
(
MethodHandles.Lookup
lookup,
String
name,
MethodType
concatType,
String
recipe,
Object
... constants)
Facilitates the creation of optimized String concatenation methods, that
 can be used to efficiently concatenate a known number of arguments of
 known types, possibly after type adaptation and partial evaluation of
 arguments.
final void
VarHandle.
set
(
Object
... args)
Sets the value of a variable to the
newValue
, with memory
 semantics of setting as if the variable was declared non-
volatile
and non-
final
.
final void
VarHandle.
setOpaque
(
Object
... args)
Sets the value of a variable to the
newValue
, in program order,
 but with no assurance of memory ordering effects with respect to other
 threads.
final void
VarHandle.
setRelease
(
Object
... args)
Sets the value of a variable to the
newValue
, and ensures that
 prior loads and stores are not reordered after this access.
final void
VarHandle.
setVolatile
(
Object
... args)
Sets the value of a variable to the
newValue
, with memory
 semantics of setting as if the variable was declared
volatile
.
final boolean
VarHandle.
weakCompareAndSet
(
Object
... args)
Possibly atomically sets the value of a variable to the
newValue
with the memory semantics of
VarHandle.setVolatile(java.lang.Object...)
if the variable's
 current value, referred to as the
witness value
,
==
the
expectedValue
, as accessed with the memory semantics of
VarHandle.getVolatile(java.lang.Object...)
.
final boolean
VarHandle.
weakCompareAndSetAcquire
(
Object
... args)
Possibly atomically sets the value of a variable to the
newValue
with the semantics of
VarHandle.set(java.lang.Object...)
if the variable's current value,
 referred to as the
witness value
,
==
the
expectedValue
, as accessed with the memory semantics of
VarHandle.getAcquire(java.lang.Object...)
.
final boolean
VarHandle.
weakCompareAndSetPlain
(
Object
... args)
Possibly atomically sets the value of a variable to the
newValue
with the semantics of
VarHandle.set(java.lang.Object...)
if the variable's current value,
 referred to as the
witness value
,
==
the
expectedValue
, as accessed with the memory semantics of
VarHandle.get(java.lang.Object...)
.
final boolean
VarHandle.
weakCompareAndSetRelease
(
Object
... args)
Possibly atomically sets the value of a variable to the
newValue
with the semantics of
VarHandle.setRelease(java.lang.Object...)
if the variable's current
 value, referred to as the
witness value
,
==
the
expectedValue
, as accessed with the memory semantics of
VarHandle.get(java.lang.Object...)
.
static
MethodHandle
MethodHandleProxies.
wrapperInstanceTarget
(
Object
x)
Produces or recovers a target method handle which is behaviorally
 equivalent to the unique method of this wrapper instance.
static
Class
<?>
MethodHandleProxies.
wrapperInstanceType
(
Object
x)
Recovers the unique single-method interface type for which this wrapper instance was created.
Constructors in
java.lang.invoke
with parameters of type
Object
Modifier
Constructor
Description
SerializedLambda
(
Class
<?> capturingClass,
String
functionalInterfaceClass,
String
functionalInterfaceMethodName,
String
functionalInterfaceMethodSignature,
 int implMethodKind,
String
implClass,
String
implMethodName,
String
implMethodSignature,
String
instantiatedMethodType,
Object
[] capturedArgs)
Create a
SerializedLambda
from the low-level information present
 at the lambda factory site.
Uses of
Object
in
java.lang.management
Subclasses of
Object
in
java.lang.management
Modifier and Type
Class
Description
class
LockInfo
Information about a
lock
.
class
ManagementFactory
The
ManagementFactory
class is a factory class for getting
 managed beans for the Java platform.
final class
ManagementPermission
The permission which the SecurityManager will check when code
 that is running with a SecurityManager calls methods defined
 in the management interface for the Java platform.
class
MemoryNotificationInfo
The information about a memory notification.
class
MemoryUsage
A
MemoryUsage
object represents a snapshot of memory usage.
class
MonitorInfo
Information about an object monitor lock.
class
ThreadInfo
Thread information.
Uses of
Object
in
java.lang.module
Subclasses of
Object
in
java.lang.module
Modifier and Type
Class
Description
final class
Configuration
A configuration that is the result of
resolution
or resolution with
service binding
.
class
FindException
Thrown by a
ModuleFinder
when an error occurs finding
 a module.
class
InvalidModuleDescriptorException
Thrown when reading a module descriptor and the module descriptor is found
 to be malformed or otherwise cannot be interpreted as a module descriptor.
class
ModuleDescriptor
A module descriptor.
static final class
ModuleDescriptor.Builder
A builder for building
ModuleDescriptor
objects.
static final class
ModuleDescriptor.Exports
A package exported by a module, may be qualified or unqualified.
static final class
ModuleDescriptor.Opens
A package opened by a module, may be qualified or unqualified.
static final class
ModuleDescriptor.Provides
A service that a module provides one or more implementations of.
static final class
ModuleDescriptor.Requires
A dependence upon a module.
static final class
ModuleDescriptor.Version
A module's version string.
class
ModuleReference
A reference to a module's content.
class
ResolutionException
Thrown when resolving a set of modules, or resolving a set of modules with
 service binding, fails.
final class
ResolvedModule
A module in a graph of
resolved modules
.
Methods in
java.lang.module
with parameters of type
Object
Modifier and Type
Method
Description
boolean
ModuleDescriptor.
equals
(
Object
ob)
Tests this module descriptor for equality with the given object.
boolean
ModuleDescriptor.Exports.
equals
(
Object
ob)
Tests this module export for equality with the given object.
boolean
ModuleDescriptor.Opens.
equals
(
Object
ob)
Tests this module
Opens
for equality with the given object.
boolean
ModuleDescriptor.Provides.
equals
(
Object
ob)
Tests this
Provides
for equality with the given object.
boolean
ModuleDescriptor.Requires.
equals
(
Object
ob)
Tests this module dependence for equality with the given object.
boolean
ModuleDescriptor.Version.
equals
(
Object
ob)
Tests this module version for equality with the given object.
boolean
ResolvedModule.
equals
(
Object
ob)
Tests this resolved module for equality with the given object.
Uses of
Object
in
java.lang.ref
Subclasses of
Object
in
java.lang.ref
Modifier and Type
Class
Description
final class
Cleaner
Cleaner
manages a set of object references and corresponding cleaning actions.
class
PhantomReference
<T>
Phantom reference objects, which are enqueued after the collector
 determines that their referents may otherwise be reclaimed.
class
Reference
<T>
Abstract base class for reference objects.
class
ReferenceQueue
<T>
Reference queues, to which registered reference objects are appended by the
 garbage collector after the appropriate reachability changes are detected.
class
SoftReference
<T>
Soft reference objects, which are cleared at the discretion of the garbage
 collector in response to memory demand.
class
WeakReference
<T>
Weak reference objects, which do not prevent their referents from being
 made finalizable, finalized, and then reclaimed.
Methods in
java.lang.ref
that return
Object
Modifier and Type
Method
Description
protected
Object
Reference.
clone
()
Throws
CloneNotSupportedException
.
Methods in
java.lang.ref
with parameters of type
Object
Modifier and Type
Method
Description
static void
Reference.
reachabilityFence
(
Object
ref)
Ensures that the object referenced by the given reference remains
strongly reachable
,
 regardless of any prior actions of the program that might otherwise cause
 the object to become unreachable; thus, the referenced object is not
 reclaimable by garbage collection at least until after the invocation of
 this method.
Cleaner.Cleanable
Cleaner.
register
(
Object
obj,
Runnable
action)
Registers an object and a cleaning action to run when the object
 becomes phantom reachable.
Uses of
Object
in
java.lang.reflect
Subclasses of
Object
in
java.lang.reflect
Modifier and Type
Class
Description
class
AccessibleObject
The
AccessibleObject
class is the base class for
Field
,
Method
, and
Constructor
objects (known as
reflected
 objects
).
final class
Array
The
Array
class provides static methods to dynamically create and
 access Java arrays.
final class
Constructor
<T>
Constructor
provides information about, and access to, a single
 constructor for a class.
class
Executable
A shared superclass for the common functionality of
Method
and
Constructor
.
final class
Field
A
Field
provides information about, and dynamic access to, a
 single field of a class or an interface.
class
GenericSignatureFormatError
Thrown when a syntactically malformed signature attribute is
 encountered by a reflective method that needs to interpret the generic
 signature information for a class or interface, method or constructor.
class
InaccessibleObjectException
Thrown when Java language access checks cannot be suppressed.
class
InvocationTargetException
InvocationTargetException is a checked exception that wraps
 an exception thrown by an invoked method or constructor.
class
MalformedParameterizedTypeException
Thrown when a semantically malformed parameterized type is
 encountered by a reflective method that needs to instantiate it.
class
MalformedParametersException
Thrown when
the
 java.lang.reflect package
attempts to read method parameters from
 a class file and determines that one or more parameters are
 malformed.
final class
Method
A
Method
provides information about, and access to, a single method
 on a class or interface.
class
Modifier
The Modifier class provides
static
methods and
 constants to decode class and member access modifiers.
final class
Parameter
Information about method parameters.
class
Proxy
Proxy
provides static methods for creating objects that act like instances
 of interfaces but allow for customized method invocation.
final class
RecordComponent
A
RecordComponent
provides information about, and dynamic access to, a
 component of a record class.
final class
ReflectPermission
The Permission class for reflective operations.
class
UndeclaredThrowableException
Thrown by a method invocation on a proxy instance if its invocation
 handler's
invoke
method throws a
 checked exception (a
Throwable
that is not assignable
 to
RuntimeException
or
Error
) that
 is not assignable to any of the exception types declared in the
throws
clause of the method that was invoked on the
 proxy instance and dispatched to the invocation handler.
Methods in
java.lang.reflect
that return
Object
Modifier and Type
Method
Description
static
Object
Array.
get
(
Object
array,
 int index)
Returns the value of the indexed component in the specified
 array object.
Object
Field.
get
(
Object
obj)
Returns the value of the field represented by this
Field
, on
 the specified object.
Object
Method.
getDefaultValue
()
Returns the default value for the annotation member represented by
 this
Method
instance.
Object
InvocationHandler.
invoke
(
Object
proxy,
Method
method,
Object
[] args)
Processes a method invocation on a proxy instance and returns
 the result.
Object
Method.
invoke
(
Object
obj,
Object
... args)
Invokes the underlying method represented by this
Method
object, on the specified object with the specified parameters.
static
Object
InvocationHandler.
invokeDefault
(
Object
proxy,
Method
method,
Object
... args)
Invokes the specified default method on the given
proxy
instance with
 the given parameters.
static
Object
Array.
newInstance
(
Class
<?> componentType,
 int length)
Creates a new array with the specified component type and
 length.
static
Object
Array.
newInstance
(
Class
<?> componentType,
 int... dimensions)
Creates a new array
 with the specified component type and dimensions.
static
Object
Proxy.
newProxyInstance
(
ClassLoader
loader,
Class
<?>[] interfaces,
InvocationHandler
h)
Returns a proxy instance for the specified interfaces
 that dispatches method invocations to the specified invocation
 handler.
Methods in
java.lang.reflect
with parameters of type
Object
Modifier and Type
Method
Description
final boolean
AccessibleObject.
canAccess
(
Object
obj)
Test if the caller can access this reflected object.
boolean
Constructor.
equals
(
Object
obj)
Compares this
Constructor
against the specified object.
boolean
Field.
equals
(
Object
obj)
Compares this
Field
against the specified object.
boolean
Method.
equals
(
Object
obj)
Compares this
Method
against the specified object.
boolean
Parameter.
equals
(
Object
obj)
Compares based on the executable and the index.
static
Object
Array.
get
(
Object
array,
 int index)
Returns the value of the indexed component in the specified
 array object.
Object
Field.
get
(
Object
obj)
Returns the value of the field represented by this
Field
, on
 the specified object.
static boolean
Array.
getBoolean
(
Object
array,
 int index)
Returns the value of the indexed component in the specified
 array object, as a
boolean
.
boolean
Field.
getBoolean
(
Object
obj)
Gets the value of a static or instance
boolean
field.
static byte
Array.
getByte
(
Object
array,
 int index)
Returns the value of the indexed component in the specified
 array object, as a
byte
.
byte
Field.
getByte
(
Object
obj)
Gets the value of a static or instance
byte
field.
static char
Array.
getChar
(
Object
array,
 int index)
Returns the value of the indexed component in the specified
 array object, as a
char
.
char
Field.
getChar
(
Object
obj)
Gets the value of a static or instance field of type
char
or of another primitive type convertible to
 type
char
via a widening conversion.
static double
Array.
getDouble
(
Object
array,
 int index)
Returns the value of the indexed component in the specified
 array object, as a
double
.
double
Field.
getDouble
(
Object
obj)
Gets the value of a static or instance field of type
double
or of another primitive type convertible to
 type
double
via a widening conversion.
static float
Array.
getFloat
(
Object
array,
 int index)
Returns the value of the indexed component in the specified
 array object, as a
float
.
float
Field.
getFloat
(
Object
obj)
Gets the value of a static or instance field of type
float
or of another primitive type convertible to
 type
float
via a widening conversion.
static int
Array.
getInt
(
Object
array,
 int index)
Returns the value of the indexed component in the specified
 array object, as an
int
.
int
Field.
getInt
(
Object
obj)
Gets the value of a static or instance field of type
int
or of another primitive type convertible to
 type
int
via a widening conversion.
static
InvocationHandler
Proxy.
getInvocationHandler
(
Object
proxy)
Returns the invocation handler for the specified proxy instance.
static int
Array.
getLength
(
Object
array)
Returns the length of the specified array object, as an
int
.
static long
Array.
getLong
(
Object
array,
 int index)
Returns the value of the indexed component in the specified
 array object, as a
long
.
long
Field.
getLong
(
Object
obj)
Gets the value of a static or instance field of type
long
or of another primitive type convertible to
 type
long
via a widening conversion.
static short
Array.
getShort
(
Object
array,
 int index)
Returns the value of the indexed component in the specified
 array object, as a
short
.
short
Field.
getShort
(
Object
obj)
Gets the value of a static or instance field of type
short
or of another primitive type convertible to
 type
short
via a widening conversion.
Object
InvocationHandler.
invoke
(
Object
proxy,
Method
method,
Object
[] args)
Processes a method invocation on a proxy instance and returns
 the result.
Object
Method.
invoke
(
Object
obj,
Object
... args)
Invokes the underlying method represented by this
Method
object, on the specified object with the specified parameters.
static
Object
InvocationHandler.
invokeDefault
(
Object
proxy,
Method
method,
Object
... args)
Invokes the specified default method on the given
proxy
instance with
 the given parameters.
T
Constructor.
newInstance
(
Object
... initargs)
Uses the constructor represented by this
Constructor
object to
 create and initialize a new instance of the constructor's
 declaring class, with the specified initialization parameters.
static void
Array.
set
(
Object
array,
 int index,
Object
value)
Sets the value of the indexed component of the specified array
 object to the specified new value.
void
Field.
set
(
Object
obj,
Object
value)
Sets the field represented by this
Field
object on the
 specified object argument to the specified new value.
static void
Array.
setBoolean
(
Object
array,
 int index,
 boolean z)
Sets the value of the indexed component of the specified array
 object to the specified
boolean
value.
void
Field.
setBoolean
(
Object
obj,
 boolean z)
Sets the value of a field as a
boolean
on the specified object.
static void
Array.
setByte
(
Object
array,
 int index,
 byte b)
Sets the value of the indexed component of the specified array
 object to the specified
byte
value.
void
Field.
setByte
(
Object
obj,
 byte b)
Sets the value of a field as a
byte
on the specified object.
static void
Array.
setChar
(
Object
array,
 int index,
 char c)
Sets the value of the indexed component of the specified array
 object to the specified
char
value.
void
Field.
setChar
(
Object
obj,
 char c)
Sets the value of a field as a
char
on the specified object.
static void
Array.
setDouble
(
Object
array,
 int index,
 double d)
Sets the value of the indexed component of the specified array
 object to the specified
double
value.
void
Field.
setDouble
(
Object
obj,
 double d)
Sets the value of a field as a
double
on the specified object.
static void
Array.
setFloat
(
Object
array,
 int index,
 float f)
Sets the value of the indexed component of the specified array
 object to the specified
float
value.
void
Field.
setFloat
(
Object
obj,
 float f)
Sets the value of a field as a
float
on the specified object.
static void
Array.
setInt
(
Object
array,
 int index,
 int i)
Sets the value of the indexed component of the specified array
 object to the specified
int
value.
void
Field.
setInt
(
Object
obj,
 int i)
Sets the value of a field as an
int
on the specified object.
static void
Array.
setLong
(
Object
array,
 int index,
 long l)
Sets the value of the indexed component of the specified array
 object to the specified
long
value.
void
Field.
setLong
(
Object
obj,
 long l)
Sets the value of a field as a
long
on the specified object.
static void
Array.
setShort
(
Object
array,
 int index,
 short s)
Sets the value of the indexed component of the specified array
 object to the specified
short
value.
void
Field.
setShort
(
Object
obj,
 short s)
Sets the value of a field as a
short
on the specified object.
Uses of
Object
in
java.lang.runtime
Subclasses of
Object
in
java.lang.runtime
Modifier and Type
Class
Description
class
ObjectMethods
Bootstrap methods for state-driven implementations of core methods,
 including
equals(Object)
,
hashCode()
, and
toString()
.
class
SwitchBootstraps
Bootstrap methods for linking
invokedynamic
call sites that implement
 the selection functionality of the
switch
statement.
final class
TemplateRuntime
PREVIEW
Preview.
Manages string template bootstrap methods.
Methods in
java.lang.runtime
that return
Object
Modifier and Type
Method
Description
static
Object
ObjectMethods.
bootstrap
(
MethodHandles.Lookup
lookup,
String
methodName,
TypeDescriptor
type,
Class
<?> recordClass,
String
names,
MethodHandle
... getters)
Bootstrap method to generate the
equals(Object)
,
hashCode()
, and
toString()
methods, based
 on a description of the component names and accessor methods, for either
invokedynamic
call sites or dynamic constant pool entries.
Methods in
java.lang.runtime
with parameters of type
Object
Modifier and Type
Method
Description
static
CallSite
SwitchBootstraps.
enumSwitch
(
MethodHandles.Lookup
lookup,
String
invocationName,
MethodType
invocationType,
Object
... labels)
Bootstrap method for linking an
invokedynamic
call site that
 implements a
switch
on a target of an enum type.
static
CallSite
SwitchBootstraps.
typeSwitch
(
MethodHandles.Lookup
lookup,
String
invocationName,
MethodType
invocationType,
Object
... labels)
Bootstrap method for linking an
invokedynamic
call site that
 implements a
switch
on a target of a reference type.
Uses of
Object
in
java.math
Subclasses of
Object
in
java.math
Modifier and Type
Class
Description
class
BigDecimal
Immutable, arbitrary-precision signed decimal numbers.
class
BigInteger
Immutable arbitrary-precision integers.
final class
MathContext
Immutable objects which encapsulate the context settings which
 describe certain rules for numerical operators, such as those
 implemented by the
BigDecimal
class.
Methods in
java.math
with parameters of type
Object
Modifier and Type
Method
Description
boolean
BigDecimal.
equals
(
Object
x)
Compares this
BigDecimal
with the specified
Object
for equality.
boolean
BigInteger.
equals
(
Object
x)
Compares this BigInteger with the specified Object for equality.
boolean
MathContext.
equals
(
Object
x)
Compares this
MathContext
with the specified
Object
for equality.
Uses of
Object
in
java.net
Subclasses of
Object
in
java.net
Modifier and Type
Class
Description
class
Authenticator
The class Authenticator represents an object that knows how to obtain
 authentication for a network connection.
class
BindException
Signals that an error occurred while attempting to bind a
 socket to a local address and port.
class
CacheRequest
Represents channels for storing resources in the
 ResponseCache.
class
CacheResponse
Represent channels for retrieving resources from the
 ResponseCache.
class
ConnectException
Signals that an error occurred while attempting to connect a
 socket to a remote address and port.
class
ContentHandler
The abstract class
ContentHandler
is the superclass
 of all classes that read an
Object
from a
URLConnection
.
class
CookieHandler
A CookieHandler object provides a callback mechanism to hook up a
 HTTP state management policy implementation into the HTTP protocol
 handler.
class
CookieManager
CookieManager provides a concrete implementation of
CookieHandler
,
 which separates the storage of cookies from the policy surrounding accepting
 and rejecting cookies.
final class
DatagramPacket
This class represents a datagram packet.
class
DatagramSocket
This class represents a socket for sending and receiving datagram packets.
class
DatagramSocketImpl
Abstract datagram and multicast socket implementation base class.
final class
HttpCookie
An HttpCookie object represents an HTTP cookie, which carries state
 information between server and user agent.
class
HttpRetryException
Thrown to indicate that a HTTP request needs to be retried
 but cannot be retried automatically, due to streaming mode
 being enabled.
class
HttpURLConnection
A URLConnection with support for HTTP-specific features.
final class
IDN
Provides methods to convert internationalized domain names (IDNs) between
 a normal Unicode representation and an ASCII Compatible Encoding (ACE) representation.
final class
Inet4Address
This class represents an Internet Protocol version 4 (IPv4) address.
final class
Inet6Address
This class represents an Internet Protocol version 6 (IPv6) address.
class
InetAddress
This class represents an Internet Protocol (IP) address.
class
InetSocketAddress
This class implements an IP Socket Address (IP address + port number)
 It can also be a pair (hostname + port number), in which case an attempt
 will be made to resolve the hostname.
class
InterfaceAddress
This class represents a Network Interface address.
class
JarURLConnection
A URL Connection to a Java ARchive (JAR) file or an entry in a JAR
 file.
class
MalformedURLException
Thrown to indicate that a malformed URL has occurred.
class
MulticastSocket
A
MulticastSocket
is a datagram socket that is
 convenient for sending and receiving IP multicast datagrams.
final class
NetPermission
This class is for various network permissions.
final class
NetworkInterface
This class represents a Network Interface made up of a name,
 and a list of IP addresses assigned to this interface.
class
NoRouteToHostException
Signals that an error occurred while attempting to connect a
 socket to a remote address and port.
final class
PasswordAuthentication
The class PasswordAuthentication is a data holder that is used by
 Authenticator.
class
PortUnreachableException
Signals that an ICMP Port Unreachable message has been
 received on a connected datagram.
class
ProtocolException
Thrown to indicate that there is an error in the underlying
 protocol, such as a TCP error.
class
Proxy
This class represents a proxy setting, typically a type (http, socks) and
 a socket address.
class
ProxySelector
Selects the proxy server to use, if any, when connecting to the
 network resource referenced by a URL.
class
ResponseCache
Represents implementations of URLConnection caches.
class
SecureCacheResponse
Represents a cache response originally retrieved through secure
 means, such as TLS.
class
ServerSocket
This class implements server sockets.
class
Socket
This class implements client sockets (also called just
 "sockets").
class
SocketAddress
This class represents a Socket Address with no protocol attachment.
class
SocketException
Thrown to indicate that there is an error creating or accessing a Socket.
class
SocketImpl
The abstract class
SocketImpl
is a common superclass
 of all classes that actually implement sockets.
final class
SocketPermission
This class represents access to a network via sockets.
class
SocketTimeoutException
Signals that a timeout has occurred on a socket read or accept.
final class
StandardSocketOptions
Defines the
standard
socket options.
final class
UnixDomainSocketAddress
A Unix domain socket address.
class
UnknownHostException
Thrown to indicate that the IP address of a host could not be determined.
class
UnknownServiceException
Thrown to indicate that an unknown service exception has
 occurred.
final class
URI
Represents a Uniform Resource Identifier (URI) reference.
class
URISyntaxException
Checked exception thrown to indicate that a string could not be parsed as a
 URI reference.
final class
URL
Class
URL
represents a Uniform Resource
 Locator, a pointer to a "resource" on the World
 Wide Web.
class
URLClassLoader
This class loader is used to load classes and resources from a search
 path of URLs referring to both JAR files and directories.
class
URLConnection
The abstract class
URLConnection
is the superclass
 of all classes that represent a communications link between the
 application and a URL.
class
URLDecoder
Utility class for HTML form decoding.
class
URLEncoder
Utility class for HTML form encoding.
final class
URLPermission
Represents permission to access a resource or set of resources defined by a
 given url, and for a given set of user-settable request methods
 and request headers.
class
URLStreamHandler
The abstract class
URLStreamHandler
is the common
 superclass for all stream protocol handlers.
Methods in
java.net
that return
Object
Modifier and Type
Method
Description
Object
HttpCookie.
clone
()
Create and return a copy of this object.
abstract
Object
ContentHandler.
getContent
(
URLConnection
urlc)
Given a URL connect stream positioned at the beginning of the
 representation of an object, this method reads that stream and
 creates an object from it.
Object
ContentHandler.
getContent
(
URLConnection
urlc,
Class
[] classes)
Given a URL connect stream positioned at the beginning of the
 representation of an object, this method reads that stream and
 creates an object that matches one of the types specified.
final
Object
URL.
getContent
()
Gets the contents of this URL.
final
Object
URL.
getContent
(
Class
<?>[] classes)
Gets the contents of this URL.
Object
URLConnection.
getContent
()
Retrieves the contents of this URL connection.
Object
URLConnection.
getContent
(
Class
<?>[] classes)
Retrieves the contents of this URL connection.
Object
SocketOptions.
getOption
(int optID)
Fetch the value of an option.
Methods in
java.net
with parameters of type
Object
Modifier and Type
Method
Description
boolean
HttpCookie.
equals
(
Object
obj)
Test the equality of two HTTP cookies.
boolean
Inet4Address.
equals
(
Object
obj)
Compares this object against the specified object.
boolean
Inet6Address.
equals
(
Object
obj)
Compares this object against the specified object.
boolean
InetAddress.
equals
(
Object
obj)
Compares this object against the specified object.
final boolean
InetSocketAddress.
equals
(
Object
obj)
Compares this object against the specified object.
boolean
InterfaceAddress.
equals
(
Object
obj)
Compares this object against the specified object.
boolean
NetworkInterface.
equals
(
Object
obj)
Compares this object against the specified object.
final boolean
Proxy.
equals
(
Object
obj)
Compares this object against the specified object.
boolean
SocketPermission.
equals
(
Object
obj)
Checks two SocketPermission objects for equality.
boolean
UnixDomainSocketAddress.
equals
(
Object
o)
Compares this address with another object.
boolean
URI.
equals
(
Object
ob)
Tests this URI for equality with another object.
boolean
URL.
equals
(
Object
obj)
Compares this URL for equality with another object.
boolean
URLPermission.
equals
(
Object
p)
Returns true if, this.getActions().equals(p.getActions())
 and p's url equals this's url.
void
SocketOptions.
setOption
(int optID,
Object
value)
Enable/disable the option specified by
optID
.
Uses of
Object
in
java.net.http
Subclasses of
Object
in
java.net.http
Modifier and Type
Class
Description
class
HttpClient
An HTTP Client.
class
HttpConnectTimeoutException
Thrown when a connection, over which an
HttpRequest
is intended to be
 sent, is not successfully established within a specified time period.
final class
HttpHeaders
A read-only view of a set of HTTP headers.
class
HttpRequest
An HTTP request.
static class
HttpRequest.BodyPublishers
Implementations of
BodyPublisher
that implement
 various useful publishers, such as publishing the request body from a
 String, or from a file.
static class
HttpResponse.BodyHandlers
Implementations of
BodyHandler
that implement various
 useful handlers, such as handling the response body as a String, or
 streaming the response body to a file.
static class
HttpResponse.BodySubscribers
Implementations of
BodySubscriber
that implement
 various useful subscribers, such as converting the response body bytes
 into a String, or streaming the bytes to a file.
class
HttpTimeoutException
Thrown when a response is not received within a specified time period.
final class
WebSocketHandshakeException
Thrown when the opening handshake has failed.
Methods in
java.net.http
with parameters of type
Object
Modifier and Type
Method
Description
final boolean
HttpHeaders.
equals
(
Object
obj)
Tests this HTTP headers instance for equality with the given object.
final boolean
HttpRequest.
equals
(
Object
obj)
Tests this HTTP request instance for equality with the given object.
Uses of
Object
in
java.net.spi
Subclasses of
Object
in
java.net.spi
Modifier and Type
Class
Description
static final class
InetAddressResolver.LookupPolicy
A
LookupPolicy
object describes characteristics that can be applied to a lookup operation.
class
InetAddressResolverProvider
Service-provider class for
InetAddress resolvers
.
class
URLStreamHandlerProvider
URL stream handler service-provider class.
Uses of
Object
in
java.nio
Subclasses of
Object
in
java.nio
Modifier and Type
Class
Description
class
Buffer
A container for data of a specific primitive type.
class
BufferOverflowException
Unchecked exception thrown when a relative
put
operation reaches
 the target buffer's limit.
class
BufferUnderflowException
Unchecked exception thrown when a relative
get
operation reaches
 the source buffer's limit.
class
ByteBuffer
A byte buffer.
final class
ByteOrder
A typesafe enumeration for byte orders.
class
CharBuffer
A char buffer.
class
DoubleBuffer
A double buffer.
class
FloatBuffer
A float buffer.
class
IntBuffer
An int buffer.
class
InvalidMarkException
Unchecked exception thrown when an attempt is made to reset a buffer
 when its mark is not defined.
class
LongBuffer
A long buffer.
class
MappedByteBuffer
A direct byte buffer whose content is a memory-mapped region of a file.
class
ReadOnlyBufferException
Unchecked exception thrown when a content-mutation method such as
put
or
compact
is invoked upon a read-only buffer.
class
ShortBuffer
A short buffer.
Methods in
java.nio
that return
Object
Modifier and Type
Method
Description
abstract
Object
Buffer.
array
()
Returns the array that backs this
 buffer
(optional operation)
.
Methods in
java.nio
with parameters of type
Object
Modifier and Type
Method
Description
boolean
ByteBuffer.
equals
(
Object
ob)
Tells whether or not this buffer is equal to another object.
boolean
CharBuffer.
equals
(
Object
ob)
Tells whether or not this buffer is equal to another object.
boolean
DoubleBuffer.
equals
(
Object
ob)
Tells whether or not this buffer is equal to another object.
boolean
FloatBuffer.
equals
(
Object
ob)
Tells whether or not this buffer is equal to another object.
boolean
IntBuffer.
equals
(
Object
ob)
Tells whether or not this buffer is equal to another object.
boolean
LongBuffer.
equals
(
Object
ob)
Tells whether or not this buffer is equal to another object.
boolean
ShortBuffer.
equals
(
Object
ob)
Tells whether or not this buffer is equal to another object.
Uses of
Object
in
java.nio.channels
Subclasses of
Object
in
java.nio.channels
Modifier and Type
Class
Description
class
AcceptPendingException
Unchecked exception thrown when an attempt is made to initiate an accept
 operation on a channel and a previous accept operation has not completed.
class
AlreadyBoundException
Unchecked exception thrown when an attempt is made to bind the socket a
 network oriented channel that is already bound.
class
AlreadyConnectedException
Unchecked exception thrown when an attempt is made to connect a
SocketChannel
that is already connected.
class
AsynchronousChannelGroup
A grouping of asynchronous channels for the purpose of resource sharing.
class
AsynchronousCloseException
Checked exception received by a thread when another thread closes the
 channel or the part of the channel upon which it is blocked in an I/O
 operation.
class
AsynchronousFileChannel
An asynchronous channel for reading, writing, and manipulating a file.
class
AsynchronousServerSocketChannel
An asynchronous channel for stream-oriented listening sockets.
class
AsynchronousSocketChannel
An asynchronous channel for stream-oriented connecting sockets.
class
CancelledKeyException
Unchecked exception thrown when an attempt is made to use
 a selection key that is no longer valid.
final class
Channels
Utility methods for channels and streams.
class
ClosedByInterruptException
Checked exception received by a thread when another thread interrupts it
 while it is blocked in an I/O operation upon a channel.
class
ClosedChannelException
Checked exception thrown when an attempt is made to invoke or complete an
 I/O operation upon channel that is closed, or at least closed to that
 operation.
class
ClosedSelectorException
Unchecked exception thrown when an attempt is made to invoke an I/O
 operation upon a closed selector.
class
ConnectionPendingException
Unchecked exception thrown when an attempt is made to connect a
SocketChannel
for which a non-blocking connection operation is already in
 progress.
class
DatagramChannel
A selectable channel for datagram-oriented sockets.
class
FileChannel
A channel for reading, writing, mapping, and manipulating a file.
static class
FileChannel.MapMode
A file-mapping mode.
class
FileLock
A token representing a lock on a region of a file.
class
FileLockInterruptionException
Checked exception received by a thread when another thread interrupts it
 while it is waiting to acquire a file lock.
class
IllegalBlockingModeException
Unchecked exception thrown when a blocking-mode-specific operation
 is invoked upon a channel in the incorrect blocking mode.
class
IllegalChannelGroupException
Unchecked exception thrown when an attempt is made to open a channel
 in a group that was not created by the same provider.
class
IllegalSelectorException
Unchecked exception thrown when an attempt is made to register a channel
 with a selector that was not created by the provider that created the
 channel.
class
InterruptedByTimeoutException
Checked exception received by a thread when a timeout elapses before an
 asynchronous operation completes.
class
MembershipKey
A token representing the membership of an Internet Protocol (IP) multicast
 group.
class
NoConnectionPendingException
Unchecked exception thrown when the
finishConnect
method of a
SocketChannel
is invoked without first
 successfully invoking its
connect
method.
class
NonReadableChannelException
Unchecked exception thrown when an attempt is made to read
 from a channel that was not originally opened for reading.
class
NonWritableChannelException
Unchecked exception thrown when an attempt is made to write
 to a channel that was not originally opened for writing.
class
NotYetBoundException
Unchecked exception thrown when an attempt is made to invoke an I/O
 operation upon a server socket channel that is not yet bound.
class
NotYetConnectedException
Unchecked exception thrown when an attempt is made to invoke an I/O
 operation upon a socket channel that is not yet connected.
class
OverlappingFileLockException
Unchecked exception thrown when an attempt is made to acquire a lock on a
 region of a file that overlaps a region already locked by the same Java
 virtual machine, or when another thread is already waiting to lock an
 overlapping region of the same file.
class
Pipe
A pair of channels that implements a unidirectional pipe.
static class
Pipe.SinkChannel
A channel representing the writable end of a
Pipe
.
static class
Pipe.SourceChannel
A channel representing the readable end of a
Pipe
.
class
ReadPendingException
Unchecked exception thrown when an attempt is made to read from an
 asynchronous socket channel and a previous read has not completed.
class
SelectableChannel
A channel that can be multiplexed via a
Selector
.
class
SelectionKey
A token representing the registration of a
SelectableChannel
with a
Selector
.
class
Selector
A multiplexor of
SelectableChannel
objects.
class
ServerSocketChannel
A selectable channel for stream-oriented listening sockets.
class
ShutdownChannelGroupException
Unchecked exception thrown when an attempt is made to construct a channel in 
 a group that is shutdown or the completion handler for an I/O operation 
 cannot be invoked because the channel group has terminated.
class
SocketChannel
A selectable channel for stream-oriented connecting sockets.
class
UnresolvedAddressException
Unchecked exception thrown when an attempt is made to invoke a network
 operation upon an unresolved socket address.
class
UnsupportedAddressTypeException
Unchecked exception thrown when an attempt is made to bind or connect
 to a socket address of a type that is not supported.
class
WritePendingException
Unchecked exception thrown when an attempt is made to write to an
 asynchronous socket channel and a previous write has not completed.
Methods in
java.nio.channels
that return
Object
Modifier and Type
Method
Description
final
Object
SelectionKey.
attach
(
Object
ob)
Attaches the given object to this key.
final
Object
SelectionKey.
attachment
()
Retrieves the current attachment.
abstract
Object
SelectableChannel.
blockingLock
()
Retrieves the object upon which the
configureBlocking
and
register
methods synchronize.
Methods in
java.nio.channels
with parameters of type
Object
Modifier and Type
Method
Description
final
Object
SelectionKey.
attach
(
Object
ob)
Attaches the given object to this key.
abstract
SelectionKey
SelectableChannel.
register
(
Selector
sel,
 int ops,
Object
att)
Registers this channel with the given selector, returning a selection
 key.
Uses of
Object
in
java.nio.channels.spi
Subclasses of
Object
in
java.nio.channels.spi
Modifier and Type
Class
Description
class
AbstractInterruptibleChannel
Base implementation class for interruptible channels.
class
AbstractSelectableChannel
Base implementation class for selectable channels.
class
AbstractSelectionKey
Base implementation class for selection keys.
class
AbstractSelector
Base implementation class for selectors.
class
AsynchronousChannelProvider
Service-provider class for asynchronous channels.
class
SelectorProvider
Service-provider class for selectors and selectable channels.
Methods in
java.nio.channels.spi
that return
Object
Modifier and Type
Method
Description
final
Object
AbstractSelectableChannel.
blockingLock
()
Methods in
java.nio.channels.spi
with parameters of type
Object
Modifier and Type
Method
Description
final
SelectionKey
AbstractSelectableChannel.
register
(
Selector
sel,
 int ops,
Object
att)
Registers this channel with the given selector, returning a selection key.
protected abstract
SelectionKey
AbstractSelector.
register
(
AbstractSelectableChannel
ch,
 int ops,
Object
att)
Registers the given channel with this selector.
Uses of
Object
in
java.nio.charset
Subclasses of
Object
in
java.nio.charset
Modifier and Type
Class
Description
class
CharacterCodingException
Checked exception thrown when a character encoding
 or decoding error occurs.
class
Charset
A named mapping between sequences of sixteen-bit Unicode
code units
and sequences of
 bytes.
class
CharsetDecoder
An engine that can transform a sequence of bytes in a specific charset into a sequence of
 sixteen-bit Unicode characters.
class
CharsetEncoder
An engine that can transform a sequence of sixteen-bit Unicode characters into a sequence of
 bytes in a specific charset.
class
CoderMalfunctionError
Error thrown when the
decodeLoop
method of
 a
CharsetDecoder
, or the
encodeLoop
method of a
CharsetEncoder
, throws an unexpected
 exception.
class
CoderResult
A description of the result state of a coder.
class
CodingErrorAction
A typesafe enumeration for coding-error actions.
class
IllegalCharsetNameException
Unchecked exception thrown when a string that is not a
legal charset name
is used as such.
class
MalformedInputException
Checked exception thrown when an input byte sequence is not legal for given
 charset, or an input character sequence is not a legal sixteen-bit Unicode
 sequence.
final class
StandardCharsets
Constant definitions for the standard
charsets
.
class
UnmappableCharacterException
Checked exception thrown when an input character (or byte) sequence
 is valid but cannot be mapped to an output byte (or character)
 sequence.
class
UnsupportedCharsetException
Unchecked exception thrown when no support is available
 for a requested charset.
Methods in
java.nio.charset
with parameters of type
Object
Modifier and Type
Method
Description
final boolean
Charset.
equals
(
Object
ob)
Tells whether or not this object is equal to another.
Uses of
Object
in
java.nio.charset.spi
Subclasses of
Object
in
java.nio.charset.spi
Modifier and Type
Class
Description
class
CharsetProvider
Charset service-provider class.
Uses of
Object
in
java.nio.file
Subclasses of
Object
in
java.nio.file
Modifier and Type
Class
Description
class
AccessDeniedException
Checked exception thrown when a file system operation is denied, typically
 due to a file permission or other access check.
class
AtomicMoveNotSupportedException
Checked exception thrown when a file cannot be moved as an atomic file system
 operation.
class
ClosedDirectoryStreamException
Unchecked exception thrown when an attempt is made to invoke an operation on
 a directory stream that is closed.
class
ClosedFileSystemException
Unchecked exception thrown when an attempt is made to invoke an operation on
 a file and the file system is closed.
class
ClosedWatchServiceException
Unchecked exception thrown when an attempt is made to invoke an operation on
 a watch service that is closed.
final class
DirectoryIteratorException
Runtime exception thrown if an I/O error is encountered when iterating over
 the entries in a directory.
class
DirectoryNotEmptyException
Checked exception thrown when a file system operation fails because a
 directory is not empty.
class
FileAlreadyExistsException
Checked exception thrown when an attempt is made to create a file or
 directory and a file of that name already exists.
final class
Files
This class consists exclusively of static methods that operate on files,
 directories, or other types of files.
class
FileStore
Storage for files.
class
FileSystem
Provides an interface to a file system and is the factory for objects to
 access files and other objects in the file system.
class
FileSystemAlreadyExistsException
Runtime exception thrown when an attempt is made to create a file system that
 already exists.
class
FileSystemException
Thrown when a file system operation fails on one or two files.
class
FileSystemLoopException
Checked exception thrown when a file system loop, or cycle, is encountered.
class
FileSystemNotFoundException
Runtime exception thrown when a file system cannot be found.
final class
FileSystems
Factory methods for file systems.
class
InvalidPathException
Unchecked exception thrown when path string cannot be converted into a
Path
because the path string contains invalid characters, or
 the path string is invalid for other file system specific reasons.
final class
LinkPermission
The
Permission
class for link creation operations.
class
NoSuchFileException
Checked exception thrown when an attempt is made to access a file that does
 not exist.
class
NotDirectoryException
Checked exception thrown when a file system operation, intended for a
 directory, fails because the file is not a directory.
class
NotLinkException
Checked exception thrown when a file system operation fails because a file
 is not a symbolic link.
final class
Paths
This class consists exclusively of static methods that return a
Path
by converting a path string or
URI
.
class
ProviderMismatchException
Unchecked exception thrown when an attempt is made to invoke a method on an
 object created by one file system provider with a parameter created by a
 different file system provider.
class
ProviderNotFoundException
Runtime exception thrown when a provider of the required type cannot be found.
class
ReadOnlyFileSystemException
Unchecked exception thrown when an attempt is made to update an object
 associated with a
read-only
FileSystem
.
class
SimpleFileVisitor
<T>
A simple visitor of files with default behavior to visit all files and to
 re-throw I/O errors.
final class
StandardWatchEventKinds
Defines the
standard
event kinds.
Fields in
java.nio.file
with type parameters of type
Object
Modifier and Type
Field
Description
static final
WatchEvent.Kind
<
Object
>
StandardWatchEventKinds.
OVERFLOW
A special event to indicate that events may have been lost or
 discarded.
Methods in
java.nio.file
that return
Object
Modifier and Type
Method
Description
static
Object
Files.
getAttribute
(
Path
path,
String
attribute,
LinkOption
... options)
Reads the value of a file attribute.
abstract
Object
FileStore.
getAttribute
(
String
attribute)
Reads the value of a file store attribute.
Methods in
java.nio.file
that return types with arguments of type
Object
Modifier and Type
Method
Description
static
Map
<
String
,
Object
>
Files.
readAttributes
(
Path
path,
String
attributes,
LinkOption
... options)
Reads a set of file attributes as a bulk operation.
Methods in
java.nio.file
with parameters of type
Object
Modifier and Type
Method
Description
boolean
Path.
equals
(
Object
other)
Tests this path for equality with the given object.
static
Path
Files.
setAttribute
(
Path
path,
String
attribute,
Object
value,
LinkOption
... options)
Sets the value of a file attribute.
Uses of
Object
in
java.nio.file.attribute
Subclasses of
Object
in
java.nio.file.attribute
Modifier and Type
Class
Description
final class
AclEntry
An entry in an access control list (ACL).
static final class
AclEntry.Builder
A builder of
AclEntry
objects.
final class
FileTime
Represents the value of a file's time stamp attribute.
final class
PosixFilePermissions
This class consists exclusively of static methods that operate on sets of
PosixFilePermission
objects.
class
UserPrincipalLookupService
An object to lookup user and group principals by name.
class
UserPrincipalNotFoundException
Checked exception thrown when a lookup of
UserPrincipal
fails because
 the principal does not exist.
Methods in
java.nio.file.attribute
that return
Object
Modifier and Type
Method
Description
Object
BasicFileAttributes.
fileKey
()
Returns an object that uniquely identifies the given file, or
null
if a file key is not available.
Methods in
java.nio.file.attribute
with parameters of type
Object
Modifier and Type
Method
Description
boolean
AclEntry.
equals
(
Object
ob)
Compares the specified object with this ACL entry for equality.
boolean
FileTime.
equals
(
Object
obj)
Tests this
FileTime
for equality with the given object.
Uses of
Object
in
java.nio.file.spi
Subclasses of
Object
in
java.nio.file.spi
Modifier and Type
Class
Description
class
FileSystemProvider
Service-provider class for file systems.
class
FileTypeDetector
A file type detector for probing a file to guess its file type.
Methods in
java.nio.file.spi
that return types with arguments of type
Object
Modifier and Type
Method
Description
abstract
Map
<
String
,
Object
>
FileSystemProvider.
readAttributes
(
Path
path,
String
attributes,
LinkOption
... options)
Reads a set of file attributes as a bulk operation.
Methods in
java.nio.file.spi
with parameters of type
Object
Modifier and Type
Method
Description
abstract void
FileSystemProvider.
setAttribute
(
Path
path,
String
attribute,
Object
value,
LinkOption
... options)
Sets the value of a file attribute.
Uses of
Object
in
java.rmi
Subclasses of
Object
in
java.rmi
Modifier and Type
Class
Description
class
AccessException
An
AccessException
is thrown by certain methods of the
java.rmi.Naming
class (specifically
bind
,
rebind
, and
unbind
) to
 indicate that the caller does not have permission to perform the action
 requested by the method call.
class
AlreadyBoundException
An
AlreadyBoundException
is thrown if an attempt
 is made to bind an object to a name that already
 has an associated binding in the registry.
class
ConnectException
A
ConnectException
is thrown if a connection is refused
 to the remote host for a remote method call.
class
ConnectIOException
A
ConnectIOException
is thrown if an
IOException
occurs while making a connection
 to the remote host for a remote method call.
class
MarshalException
A
MarshalException
is thrown if a
java.io.IOException
occurs while marshalling the remote call
 header, arguments or return value for a remote method call.
final class
MarshalledObject
<T>
A
MarshalledObject
contains a byte stream with the serialized
 representation of an object given to its constructor.
final class
Naming
The
Naming
class provides methods for storing and obtaining
 references to remote objects in a remote object registry.
class
NoSuchObjectException
A
NoSuchObjectException
is thrown if an attempt is made to
 invoke a method on an object that no longer exists in the remote virtual
 machine.
class
NotBoundException
A
NotBoundException
is thrown if an attempt
 is made to lookup or unbind in the registry a name that has
 no associated binding.
class
RemoteException
A
RemoteException
is the common superclass for a number of
 communication-related exceptions that may occur during the execution of a
 remote method call.
class
RMISecurityException
Deprecated.
Use
SecurityException
instead.
class
RMISecurityManager
Deprecated, for removal: This API element is subject to removal in a future version.
This class is only useful in conjunction with
the Security Manager
, which is deprecated
       and subject to removal in a future release.
class
ServerError
A
ServerError
is thrown as a result of a remote method
 invocation when an
Error
is thrown while processing
 the invocation on the server, either while unmarshalling the arguments,
 executing the remote method itself, or marshalling the return value.
class
ServerException
A
ServerException
is thrown as a result of a remote method
 invocation when a
RemoteException
is thrown while processing
 the invocation on the server, either while unmarshalling the arguments or
 executing the remote method itself.
class
ServerRuntimeException
Deprecated.
no replacement
class
StubNotFoundException
A
StubNotFoundException
is thrown if a valid stub class
 could not be found for a remote object when it is exported.
class
UnexpectedException
An
UnexpectedException
is thrown if the client of a
 remote method call receives, as a result of the call, a checked
 exception that is not among the checked exception types declared in the
throws
clause of the method in the remote interface.
class
UnknownHostException
An
UnknownHostException
is thrown if a
java.net.UnknownHostException
occurs while creating
 a connection to the remote host for a remote method call.
class
UnmarshalException
An
UnmarshalException
can be thrown while unmarshalling the
 parameters or results of a remote method call if any of the following
 conditions occur:
 
  if an exception occurs while unmarshalling the call header
  if the protocol for the return value is invalid
  if a
java.io.IOException
occurs unmarshalling
 parameters (on the server side) or the return value (on the client side).
Methods in
java.rmi
with parameters of type
Object
Modifier and Type
Method
Description
boolean
MarshalledObject.
equals
(
Object
obj)
Compares this
MarshalledObject
to another object.
Uses of
Object
in
java.rmi.dgc
Subclasses of
Object
in
java.rmi.dgc
Modifier and Type
Class
Description
final class
Lease
A lease contains a unique VM identifier and a lease duration.
final class
VMID
A VMID is a identifier that is unique across all Java virtual
 machines.
Methods in
java.rmi.dgc
with parameters of type
Object
Modifier and Type
Method
Description
boolean
VMID.
equals
(
Object
obj)
Compare this VMID to another, and return true if they are the
 same identifier.
Uses of
Object
in
java.rmi.registry
Subclasses of
Object
in
java.rmi.registry
Modifier and Type
Class
Description
final class
LocateRegistry
LocateRegistry
is used to obtain a reference to a bootstrap
 remote object registry on a particular host (including the local host), or
 to create a remote object registry that accepts calls on a specific port.
Uses of
Object
in
java.rmi.server
Subclasses of
Object
in
java.rmi.server
Modifier and Type
Class
Description
class
ExportException
An
ExportException
is a
RemoteException
thrown if an attempt to export a remote object fails.
class
LogStream
Deprecated.
no replacement
final class
ObjID
An
ObjID
is used to identify a remote object exported
 to an RMI runtime.
class
Operation
Deprecated.
no replacement
class
RemoteObject
The
RemoteObject
class implements the
java.lang.Object
behavior for remote objects.
class
RemoteObjectInvocationHandler
An implementation of the
InvocationHandler
interface for
 use with Java Remote Method Invocation (Java RMI).
class
RemoteServer
The
RemoteServer
class is the common superclass to server
 implementations and provides the framework to support a wide range
 of remote reference semantics.
class
RemoteStub
Deprecated.
Statically generated stubs are deprecated, since
 stubs are generated dynamically.
class
RMIClassLoader
RMIClassLoader
comprises static methods to support
 dynamic class loading with RMI.
class
RMIClassLoaderSpi
RMIClassLoaderSpi
is the service provider interface for
RMIClassLoader
.
class
RMISocketFactory
An
RMISocketFactory
instance is used by the RMI runtime
 in order to obtain client and server sockets for RMI calls.
class
ServerCloneException
A
ServerCloneException
is thrown if a remote exception occurs
 during the cloning of a
UnicastRemoteObject
.
class
ServerNotActiveException
An
ServerNotActiveException
is an
Exception
thrown during a call to
RemoteServer.getClientHost
if
 the getClientHost method is called outside of servicing a remote
 method call.
class
SkeletonMismatchException
Deprecated.
no replacement.
class
SkeletonNotFoundException
Deprecated.
no replacement.
class
SocketSecurityException
Deprecated.
This class is obsolete.
final class
UID
A
UID
represents an identifier that is unique over time
 with respect to the host it is generated on, or one of 2
16
"well-known" identifiers.
class
UnicastRemoteObject
Used for exporting a remote object with JRMP and obtaining a stub
 that communicates to the remote object.
Methods in
java.rmi.server
that return
Object
Modifier and Type
Method
Description
Object
UnicastRemoteObject.
clone
()
Returns a clone of the remote object that is distinct from
 the original.
Object
LoaderHandler.
getSecurityContext
(
ClassLoader
loader)
Deprecated.
no replacement
static
Object
RMIClassLoader.
getSecurityContext
(
ClassLoader
loader)
Deprecated.
no replacement.
Object
RemoteObjectInvocationHandler.
invoke
(
Object
proxy,
Method
method,
Object
[] args)
Processes a method invocation made on the encapsulating
 proxy instance,
proxy
, and returns the result.
Object
RemoteRef.
invoke
(
Remote
obj,
Method
method,
Object
[] params,
 long opnum)
Invoke a method.
Methods in
java.rmi.server
with parameters of type
Object
Modifier and Type
Method
Description
boolean
ObjID.
equals
(
Object
obj)
Compares the specified object with this
ObjID
for
 equality.
boolean
RemoteObject.
equals
(
Object
obj)
Compares two remote objects for equality.
boolean
UID.
equals
(
Object
obj)
Compares the specified object with this
UID
for
 equality.
RemoteStub
ServerRef.
exportObject
(
Remote
obj,
Object
data)
Deprecated.
Creates a client stub object for the supplied Remote object.
Object
RemoteObjectInvocationHandler.
invoke
(
Object
proxy,
Method
method,
Object
[] args)
Processes a method invocation made on the encapsulating
 proxy instance,
proxy
, and returns the result.
Object
RemoteRef.
invoke
(
Remote
obj,
Method
method,
Object
[] params,
 long opnum)
Invoke a method.
Uses of
Object
in
java.security
Subclasses of
Object
in
java.security
Modifier and Type
Class
Description
final class
AccessControlContext
Deprecated, for removal: This API element is subject to removal in a future version.
This class is only useful in conjunction with
the Security Manager
, which is deprecated
       and subject to removal in a future release.
class
AccessControlException
Deprecated, for removal: This API element is subject to removal in a future version.
This class is only useful in conjunction with
the Security Manager
, which is deprecated
       and subject to removal in a future release.
final class
AccessController
Deprecated, for removal: This API element is subject to removal in a future version.
This class is only useful in conjunction with
the Security Manager
, which is deprecated
       and subject to removal in a future release.
class
AlgorithmParameterGenerator
The
AlgorithmParameterGenerator
class is used to generate a
 set of
 parameters to be used with a certain algorithm.
class
AlgorithmParameterGeneratorSpi
This class defines the
Service Provider Interface
(
SPI
)
 for the
AlgorithmParameterGenerator
class, which
 is used to generate a set of parameters to be used with a certain algorithm.
class
AlgorithmParameters
This class is used as an opaque representation of cryptographic parameters.
class
AlgorithmParametersSpi
This class defines the
Service Provider Interface
(
SPI
)
 for the
AlgorithmParameters
class, which is used to manage
 algorithm parameters.
final class
AllPermission
The
AllPermission
is a permission that implies all other permissions.
class
AuthProvider
This class defines login and logout methods for a provider.
class
BasicPermission
The
BasicPermission
class extends the
Permission
class, and
 can be used as the base class for permissions that want to
 follow the same naming convention as
BasicPermission
.
final class
CodeSigner
This class encapsulates information about a code signer.
class
CodeSource
This class extends the concept of a codebase to
 encapsulate not only the location (URL) but also the certificate chains
 that were used to verify signed code originating from that location.
class
DigestException
This is the generic Message Digest exception.
class
DigestInputStream
A transparent stream that updates the associated message digest using
 the bits going through the stream.
class
DigestOutputStream
A transparent stream that updates the associated message digest using
 the bits going through the stream.
final class
DomainLoadStoreParameter
Configuration data that specifies the keystores in a keystore domain.
class
DrbgParameters
This class specifies the parameters used by a DRBG (Deterministic
 Random Bit Generator).
static final class
DrbgParameters.Instantiation
DRBG parameters for instantiation.
static final class
DrbgParameters.NextBytes
DRBG parameters for random bits generation.
static final class
DrbgParameters.Reseed
DRBG parameters for reseed.
class
GeneralSecurityException
The
GeneralSecurityException
class is a generic
 security exception class that provides type safety for all the
 security-related exception classes that extend from it.
class
GuardedObject
A GuardedObject is an object that is used to protect access to
 another object.
class
Identity
Deprecated, for removal: This API element is subject to removal in a future version.
This class is deprecated and subject to removal in a future
     version of Java SE.
class
IdentityScope
Deprecated, for removal: This API element is subject to removal in a future version.
This class is deprecated and subject to removal in a future
     version of Java SE.
class
InvalidAlgorithmParameterException
This is the exception for invalid or inappropriate algorithm parameters.
class
InvalidKeyException
This is the exception for invalid Keys (invalid encoding, wrong
 length, uninitialized, etc.).
class
InvalidParameterException
This exception, designed for use by the JCA/JCE engine classes,
 is thrown when an invalid parameter is passed
 to a method.
class
KeyException
This is the basic key exception.
class
KeyFactory
Key factories are used to convert
keys
(opaque
 cryptographic keys of type
Key
) into
key specifications
(transparent representations of the underlying key material), and vice
 versa.
class
KeyFactorySpi
This class defines the
Service Provider Interface
(
SPI
)
 for the
KeyFactory
class.
class
KeyManagementException
This is the general key management exception for all operations
 dealing with key management.
final class
KeyPair
This class is a simple holder for a key pair (a public key and a
 private key).
class
KeyPairGenerator
The
KeyPairGenerator
class is used to generate pairs of
 public and private keys.
class
KeyPairGeneratorSpi
This class defines the
Service Provider Interface
(
SPI
)
 for the
KeyPairGenerator
class, which is used to generate
 pairs of public and private keys.
class
KeyRep
Standardized representation for serialized Key objects.
class
KeyStore
This class represents a storage facility for cryptographic
 keys and certificates.
static class
KeyStore.Builder
A description of a to-be-instantiated
KeyStore
object.
static class
KeyStore.CallbackHandlerProtection
A
ProtectionParameter
encapsulating a CallbackHandler.
static class
KeyStore.PasswordProtection
A password-based implementation of
ProtectionParameter
.
static final class
KeyStore.PrivateKeyEntry
A
KeyStore
entry that holds a
PrivateKey
and corresponding certificate chain.
static final class
KeyStore.SecretKeyEntry
A
KeyStore
entry that holds a
SecretKey
.
static final class
KeyStore.TrustedCertificateEntry
A
KeyStore
entry that holds a trusted
Certificate
.
class
KeyStoreException
This is the generic KeyStore exception.
class
KeyStoreSpi
This class defines the
Service Provider Interface
(
SPI
)
 for the
KeyStore
class.
class
MessageDigest
This
MessageDigest
class provides applications the functionality of a
 message digest algorithm, such as SHA-1 or SHA-256.
class
MessageDigestSpi
This class defines the
Service Provider Interface
(
SPI
)
 for the
MessageDigest
class, which provides the functionality
 of a message digest algorithm, such as MD5 or SHA.
class
NoSuchAlgorithmException
This exception is thrown when a particular cryptographic algorithm is
 requested but is not available in the environment.
class
NoSuchProviderException
This exception is thrown when a particular security provider is
 requested but is not available in the environment.
class
Permission
Abstract class for representing access to a system resource.
class
PermissionCollection
Abstract class representing a collection of Permission objects.
final class
Permissions
This class represents a heterogeneous collection of permissions.
final class
PKCS12Attribute
An attribute associated with a PKCS12 keystore entry.
class
Policy
Deprecated, for removal: This API element is subject to removal in a future version.
This class is only useful in conjunction with
the Security Manager
, which is deprecated
       and subject to removal in a future release.
class
PolicySpi
Deprecated, for removal: This API element is subject to removal in a future version.
This class is only useful in conjunction with
the Security Manager
, which is deprecated
       and subject to removal in a future release.
class
PrivilegedActionException
This exception is thrown by
doPrivileged(PrivilegedExceptionAction)
and
doPrivileged(PrivilegedExceptionAction,
 AccessControlContext context)
to indicate
 that the action being performed threw a checked exception.
class
ProtectionDomain
The
ProtectionDomain
class encapsulates the characteristics of a
 domain, which encloses a set of classes whose instances are granted a set
 of permissions when being executed on behalf of a given set of Principals.
class
Provider
This class represents a "provider" for the
 Java Security API, where a provider implements some or all parts of
 Java Security.
static class
Provider.Service
The description of a security service.
class
ProviderException
A runtime exception for
Provider
exceptions (such as
 misconfiguration errors or unrecoverable internal errors),
 which may be subclassed by Providers to
 throw specialized, provider-specific runtime errors.
class
SecureClassLoader
This class extends
ClassLoader
with additional support for defining
 classes with an associated code source and permissions which are
 retrieved by the system policy by default.
class
SecureRandom
This class provides a cryptographically strong random number
 generator (RNG).
class
SecureRandomSpi
This class defines the
Service Provider Interface
(
SPI
)
 for the
SecureRandom
class.
final class
Security
This class centralizes all security properties and common security
 methods.
final class
SecurityPermission
This class is for security permissions.
class
Signature
The
Signature
class is used to provide applications the functionality
 of a digital signature algorithm.
class
SignatureException
This is the generic Signature exception.
class
SignatureSpi
This class defines the
Service Provider Interface
(
SPI
)
 for the
Signature
class, which is used to provide the
 functionality of a digital signature algorithm.
final class
SignedObject
SignedObject
is a class for the purpose of creating authentic
 runtime objects whose integrity cannot be compromised without being
 detected.
class
Signer
Deprecated, for removal: This API element is subject to removal in a future version.
This class is deprecated and subject to removal in a future
     version of Java SE.
final class
Timestamp
This class encapsulates information about a signed timestamp.
class
UnrecoverableEntryException
This exception is thrown if an entry in the keystore cannot be recovered.
class
UnrecoverableKeyException
This exception is thrown if a key in the keystore cannot be recovered.
final class
UnresolvedPermission
The
UnresolvedPermission
class is used to hold Permissions that
 were "unresolved" when the Policy was initialized.
class
URIParameter
A parameter that contains a URI pointing to data intended for a
 PolicySpi or ConfigurationSpi implementation.
Methods in
java.security
that return
Object
Modifier and Type
Method
Description
Object
MessageDigest.
clone
()
Returns a clone if the implementation is cloneable.
Object
MessageDigestSpi.
clone
()
Returns a clone if the implementation is cloneable.
Object
Signature.
clone
()
Returns a clone if the implementation is cloneable.
Object
SignatureSpi.
clone
()
Returns a clone if the implementation is cloneable.
Object
Provider.
compute
(
Object
key,
BiFunction
<? super
Object
,
? super
Object
,
? extends
Object
> remappingFunction)
Attempts to compute a mapping for the specified key and its
 current mapped value (or
null
if there is no current
 mapping).
Object
Provider.
computeIfAbsent
(
Object
key,
Function
<? super
Object
,
? extends
Object
> mappingFunction)
If the specified key is not already associated with a value (or
 is mapped to
null
), attempts to compute its value using
 the given mapping function and enters it into this map unless
null
.
Object
Provider.
computeIfPresent
(
Object
key,
BiFunction
<? super
Object
,
? super
Object
,
? extends
Object
> remappingFunction)
If the value for the specified key is present and non-null, attempts to
 compute a new mapping given the key and its current mapped value.
protected abstract
Object
SignatureSpi.
engineGetParameter
(
String
param)
Deprecated.
Object
GuardedObject.
getObject
()
Retrieves the guarded object, or throws an exception if access
 to the guarded object is denied by the guard.
Object
SignedObject.
getObject
()
Retrieves the encapsulated object.
Object
Provider.
getOrDefault
(
Object
key,
Object
defaultValue)
final
Object
Signature.
getParameter
(
String
param)
Deprecated.
Object
Provider.
merge
(
Object
key,
Object
value,
BiFunction
<? super
Object
,
? super
Object
,
? extends
Object
> remappingFunction)
If the specified key is not already associated with a value or is
 associated with
null
, associates it with the given value.
Object
Provider.Service.
newInstance
(
Object
constructorParameter)
Return a new instance of the implementation described by this
 service.
Object
Provider.
put
(
Object
key,
Object
value)
Sets the
key
property to have the specified
value
.
Object
Provider.
putIfAbsent
(
Object
key,
Object
value)
If the specified key is not already associated with a value (or is mapped
 to
null
) associates it with the given value and returns
null
, else returns the current value.
protected
Object
KeyRep.
readResolve
()
Resolve the Key object.
Object
Provider.
remove
(
Object
key)
Removes the
key
property (and its corresponding
value
).
Object
Provider.
replace
(
Object
key,
Object
value)
Replaces the entry for the specified key only if it is
 currently mapped to some value.
Methods in
java.security
that return types with arguments of type
Object
Modifier and Type
Method
Description
Set
<
Map.Entry
<
Object
,
Object
>>
Provider.
entrySet
()
Returns an unmodifiable Set view of the property entries contained
 in this
Provider
.
Set
<
Map.Entry
<
Object
,
Object
>>
Provider.
entrySet
()
Returns an unmodifiable Set view of the property entries contained
 in this
Provider
.
Set
<
Object
>
Provider.
keySet
()
Returns an unmodifiable Set view of the property keys contained in
 this
Provider
.
Collection
<
Object
>
Provider.
values
()
Returns an unmodifiable Collection view of the property values
 contained in this
Provider
.
Methods in
java.security
with parameters of type
Object
Modifier and Type
Method
Description
void
Guard.
checkGuard
(
Object
object)
Determines whether to allow access to the guarded object
object
.
void
Permission.
checkGuard
(
Object
object)
Implements the guard interface for a permission.
Object
Provider.
compute
(
Object
key,
BiFunction
<? super
Object
,
? super
Object
,
? extends
Object
> remappingFunction)
Attempts to compute a mapping for the specified key and its
 current mapped value (or
null
if there is no current
 mapping).
Object
Provider.
computeIfAbsent
(
Object
key,
Function
<? super
Object
,
? extends
Object
> mappingFunction)
If the specified key is not already associated with a value (or
 is mapped to
null
), attempts to compute its value using
 the given mapping function and enters it into this map unless
null
.
Object
Provider.
computeIfPresent
(
Object
key,
BiFunction
<? super
Object
,
? super
Object
,
? extends
Object
> remappingFunction)
If the value for the specified key is present and non-null, attempts to
 compute a new mapping given the key and its current mapped value.
protected abstract void
SignatureSpi.
engineSetParameter
(
String
param,
Object
value)
Deprecated.
Replaced by
engineSetParameter
.
boolean
AccessControlContext.
equals
(
Object
obj)
Deprecated, for removal: This API element is subject to removal in a future version.
Checks two
AccessControlContext
objects for equality.
boolean
AllPermission.
equals
(
Object
obj)
Checks two
AllPermission
objects for equality.
boolean
BasicPermission.
equals
(
Object
obj)
Checks two
BasicPermission
objects for equality.
boolean
CodeSigner.
equals
(
Object
obj)
Tests for equality between the specified object and this
 code signer.
boolean
CodeSource.
equals
(
Object
obj)
Tests for equality between the specified object and this
 object.
final boolean
Identity.
equals
(
Object
identity)
Deprecated, for removal: This API element is subject to removal in a future version.
Tests for equality between the specified object and this
Identity
.
abstract boolean
Permission.
equals
(
Object
obj)
Checks two
Permission
objects for equality.
boolean
PKCS12Attribute.
equals
(
Object
obj)
Compares this
PKCS12Attribute
and a specified object for
 equality.
boolean
Principal.
equals
(
Object
another)
Compares this
Principal
to the specified object.
boolean
Timestamp.
equals
(
Object
obj)
Tests for equality between the specified object and this
Timestamp
.
boolean
UnresolvedPermission.
equals
(
Object
obj)
Checks two
UnresolvedPermission
objects for equality.
Object
Provider.
getOrDefault
(
Object
key,
Object
defaultValue)
Object
Provider.
merge
(
Object
key,
Object
value,
BiFunction
<? super
Object
,
? super
Object
,
? extends
Object
> remappingFunction)
If the specified key is not already associated with a value or is
 associated with
null
, associates it with the given value.
Object
Provider.Service.
newInstance
(
Object
constructorParameter)
Return a new instance of the implementation described by this
 service.
Object
Provider.
put
(
Object
key,
Object
value)
Sets the
key
property to have the specified
value
.
Object
Provider.
putIfAbsent
(
Object
key,
Object
value)
If the specified key is not already associated with a value (or is mapped
 to
null
) associates it with the given value and returns
null
, else returns the current value.
Object
Provider.
remove
(
Object
key)
Removes the
key
property (and its corresponding
value
).
boolean
Provider.
remove
(
Object
key,
Object
value)
Removes the entry for the specified key only if it is currently
 mapped to the specified value.
Object
Provider.
replace
(
Object
key,
Object
value)
Replaces the entry for the specified key only if it is
 currently mapped to some value.
boolean
Provider.
replace
(
Object
key,
Object
oldValue,
Object
newValue)
Replaces the entry for the specified key only if currently
 mapped to the specified value.
final void
Signature.
setParameter
(
String
param,
Object
value)
Deprecated.
Use
setParameter
.
boolean
Provider.Service.
supportsParameter
(
Object
parameter)
Test whether this Service can use the specified parameter.
Method parameters in
java.security
with type arguments of type
Object
Modifier and Type
Method
Description
Object
Provider.
compute
(
Object
key,
BiFunction
<? super
Object
,
? super
Object
,
? extends
Object
> remappingFunction)
Attempts to compute a mapping for the specified key and its
 current mapped value (or
null
if there is no current
 mapping).
Object
Provider.
compute
(
Object
key,
BiFunction
<? super
Object
,
? super
Object
,
? extends
Object
> remappingFunction)
Attempts to compute a mapping for the specified key and its
 current mapped value (or
null
if there is no current
 mapping).
Object
Provider.
compute
(
Object
key,
BiFunction
<? super
Object
,
? super
Object
,
? extends
Object
> remappingFunction)
Attempts to compute a mapping for the specified key and its
 current mapped value (or
null
if there is no current
 mapping).
Object
Provider.
computeIfAbsent
(
Object
key,
Function
<? super
Object
,
? extends
Object
> mappingFunction)
If the specified key is not already associated with a value (or
 is mapped to
null
), attempts to compute its value using
 the given mapping function and enters it into this map unless
null
.
Object
Provider.
computeIfAbsent
(
Object
key,
Function
<? super
Object
,
? extends
Object
> mappingFunction)
If the specified key is not already associated with a value (or
 is mapped to
null
), attempts to compute its value using
 the given mapping function and enters it into this map unless
null
.
Object
Provider.
computeIfPresent
(
Object
key,
BiFunction
<? super
Object
,
? super
Object
,
? extends
Object
> remappingFunction)
If the value for the specified key is present and non-null, attempts to
 compute a new mapping given the key and its current mapped value.
Object
Provider.
computeIfPresent
(
Object
key,
BiFunction
<? super
Object
,
? super
Object
,
? extends
Object
> remappingFunction)
If the value for the specified key is present and non-null, attempts to
 compute a new mapping given the key and its current mapped value.
Object
Provider.
computeIfPresent
(
Object
key,
BiFunction
<? super
Object
,
? super
Object
,
? extends
Object
> remappingFunction)
If the value for the specified key is present and non-null, attempts to
 compute a new mapping given the key and its current mapped value.
void
Provider.
forEach
(
BiConsumer
<? super
Object
,
? super
Object
> action)
void
Provider.
forEach
(
BiConsumer
<? super
Object
,
? super
Object
> action)
Object
Provider.
merge
(
Object
key,
Object
value,
BiFunction
<? super
Object
,
? super
Object
,
? extends
Object
> remappingFunction)
If the specified key is not already associated with a value or is
 associated with
null
, associates it with the given value.
Object
Provider.
merge
(
Object
key,
Object
value,
BiFunction
<? super
Object
,
? super
Object
,
? extends
Object
> remappingFunction)
If the specified key is not already associated with a value or is
 associated with
null
, associates it with the given value.
Object
Provider.
merge
(
Object
key,
Object
value,
BiFunction
<? super
Object
,
? super
Object
,
? extends
Object
> remappingFunction)
If the specified key is not already associated with a value or is
 associated with
null
, associates it with the given value.
void
Provider.
replaceAll
(
BiFunction
<? super
Object
,
? super
Object
,
? extends
Object
> function)
Replaces each entry's value with the result of invoking the given
 function on that entry, in the order entries are returned by an entry
 set iterator, until all entries have been processed or the function
 throws an exception.
void
Provider.
replaceAll
(
BiFunction
<? super
Object
,
? super
Object
,
? extends
Object
> function)
Replaces each entry's value with the result of invoking the given
 function on that entry, in the order entries are returned by an entry
 set iterator, until all entries have been processed or the function
 throws an exception.
void
Provider.
replaceAll
(
BiFunction
<? super
Object
,
? super
Object
,
? extends
Object
> function)
Replaces each entry's value with the result of invoking the given
 function on that entry, in the order entries are returned by an entry
 set iterator, until all entries have been processed or the function
 throws an exception.
Constructors in
java.security
with parameters of type
Object
Modifier
Constructor
Description
GuardedObject
(
Object
object,
Guard
guard)
Constructs a GuardedObject using the specified object and guard.
Uses of
Object
in
java.security.cert
Subclasses of
Object
in
java.security.cert
Modifier and Type
Class
Description
class
Certificate
Abstract class for managing a variety of identity certificates.
protected static class
Certificate.CertificateRep
Alternate
Certificate
class for serialization.
class
CertificateEncodingException
Certificate Encoding Exception.
class
CertificateException
This exception indicates one of a variety of certificate problems.
class
CertificateExpiredException
Certificate Expired Exception.
class
CertificateFactory
This class defines the functionality of a certificate factory, which is
 used to generate certificate, certification path (
CertPath
)
 and certificate revocation list (CRL) objects from their encodings.
class
CertificateFactorySpi
This class defines the
Service Provider Interface
(
SPI
)
 for the
CertificateFactory
class.
class
CertificateNotYetValidException
Certificate is not yet valid exception.
class
CertificateParsingException
Certificate Parsing Exception.
class
CertificateRevokedException
An exception that indicates an X.509 certificate is revoked.
class
CertPath
An immutable sequence of certificates (a certification path).
protected static class
CertPath.CertPathRep
Alternate
CertPath
class for serialization.
class
CertPathBuilder
A class for building certification paths (also known as certificate chains).
class
CertPathBuilderException
An exception indicating one of a variety of problems encountered when
 building a certification path with a
CertPathBuilder
.
class
CertPathBuilderSpi
The
Service Provider Interface
(
SPI
)
 for the
CertPathBuilder
class.
class
CertPathValidator
A class for validating certification paths (also known as certificate
 chains).
class
CertPathValidatorException
An exception indicating one of a variety of problems encountered when
 validating a certification path.
class
CertPathValidatorSpi
The
Service Provider Interface
(
SPI
)
 for the
CertPathValidator
class.
class
CertStore
A class for retrieving
Certificate
s and
CRL
s
 from a repository.
class
CertStoreException
An exception indicating one of a variety of problems retrieving
 certificates and CRLs from a
CertStore
.
class
CertStoreSpi
The
Service Provider Interface
(
SPI
)
 for the
CertStore
class.
class
CollectionCertStoreParameters
Parameters used as input for the Collection
CertStore
algorithm.
class
CRL
This class is an abstraction of certificate revocation lists (CRLs) that
 have different formats but important common uses.
class
CRLException
CRL (Certificate Revocation List) Exception.
class
LDAPCertStoreParameters
Parameters used as input for the LDAP
CertStore
algorithm.
class
PKIXBuilderParameters
Parameters used as input for the PKIX
CertPathBuilder
algorithm.
class
PKIXCertPathBuilderResult
This class represents the successful result of the PKIX certification
 path builder algorithm.
class
PKIXCertPathChecker
An abstract class that performs one or more checks on an
X509Certificate
.
class
PKIXCertPathValidatorResult
This class represents the successful result of the PKIX certification
 path validation algorithm.
class
PKIXParameters
Parameters used as input for the PKIX
CertPathValidator
algorithm.
class
PKIXRevocationChecker
A
PKIXCertPathChecker
for checking the revocation status of
 certificates with the PKIX algorithm.
class
PolicyQualifierInfo
An immutable policy qualifier represented by the ASN.1 PolicyQualifierInfo
 structure.
class
TrustAnchor
A trust anchor or most-trusted Certification Authority (CA).
final class
URICertStoreParameters
Parameters used as input for
CertStore
algorithms which use
 information contained in a URI to retrieve certificates and CRLs.
class
X509Certificate
Abstract class for X.509 certificates.
class
X509CertSelector
A
CertSelector
that selects
X509Certificates
that
 match all specified criteria.
class
X509CRL
Abstract class for an X.509 Certificate Revocation List (CRL).
class
X509CRLEntry
Abstract class for a revoked certificate in a CRL (Certificate
 Revocation List).
class
X509CRLSelector
A
CRLSelector
that selects
X509CRLs
that
 match all specified criteria.
Methods in
java.security.cert
that return
Object
Modifier and Type
Method
Description
Object
CertPathBuilderResult.
clone
()
Makes a copy of this
CertPathBuilderResult
.
Object
CertPathParameters.
clone
()
Makes a copy of this
CertPathParameters
.
Object
CertPathValidatorResult.
clone
()
Makes a copy of this
CertPathValidatorResult
.
Object
CertSelector.
clone
()
Makes a copy of this
CertSelector
.
Object
CertStoreParameters.
clone
()
Makes a copy of this
CertStoreParameters
.
Object
CollectionCertStoreParameters.
clone
()
Returns a copy of this object.
Object
CRLSelector.
clone
()
Makes a copy of this
CRLSelector
.
Object
LDAPCertStoreParameters.
clone
()
Returns a copy of this object.
Object
PKIXCertPathChecker.
clone
()
Returns a clone of this object.
Object
PKIXCertPathValidatorResult.
clone
()
Returns a copy of this object.
Object
PKIXParameters.
clone
()
Makes a copy of this
PKIXParameters
object.
Object
X509CertSelector.
clone
()
Returns a copy of this object.
Object
X509CRLSelector.
clone
()
Returns a copy of this object.
protected
Object
Certificate.CertificateRep.
readResolve
()
Returns a
Certificate
with the type and data of this
CertificateRep
.
protected
Object
CertPath.CertPathRep.
readResolve
()
Returns a
CertPath
constructed from the type and data of
 this
CertPathRep
.
protected
Object
Certificate.
writeReplace
()
Replace the
Certificate
to be serialized with a
CertificateRep
object containing the type and
 encoded bytes of the
Certificate
.
protected
Object
CertPath.
writeReplace
()
Replaces the
CertPath
to be serialized with a
CertPathRep
object containing the
Certificate
type and encoded bytes of the
CertPath
.
Methods in
java.security.cert
that return types with arguments of type
Object
Modifier and Type
Method
Description
Collection
<
Object
>
X509CRLSelector.
getIssuerNames
()
Returns a copy of the issuerNames criterion.
Methods in
java.security.cert
with parameters of type
Object
Modifier and Type
Method
Description
boolean
Certificate.
equals
(
Object
other)
Compares this certificate for equality with the specified
 object.
boolean
CertPath.
equals
(
Object
other)
Compares this certification path for equality with the specified
 object.
boolean
URICertStoreParameters.
equals
(
Object
p)
Compares the specified object with this parameters object for equality.
boolean
X509CRL.
equals
(
Object
other)
Compares this CRL for equality with the given
 object.
boolean
X509CRLEntry.
equals
(
Object
other)
Compares this CRL entry for equality with the given
 object.
Uses of
Object
in
java.security.spec
Subclasses of
Object
in
java.security.spec
Modifier and Type
Class
Description
final class
DSAGenParameterSpec
This immutable class specifies the set of parameters used for
 generating DSA parameters as specified in
FIPS 186-3 Digital Signature Standard (DSS)
.
class
DSAParameterSpec
This class specifies the set of parameters used with the DSA algorithm.
class
DSAPrivateKeySpec
This class specifies a DSA private key with its associated parameters.
class
DSAPublicKeySpec
This class specifies a DSA public key with its associated parameters.
class
ECFieldF2m
This immutable class defines an elliptic curve (EC)
 characteristic 2 finite field.
class
ECFieldFp
This immutable class defines an elliptic curve (EC) prime
 finite field.
class
ECGenParameterSpec
This immutable class specifies the set of parameters used for
 generating elliptic curve (EC) domain parameters.
class
ECParameterSpec
This immutable class specifies the set of domain parameters
 used with elliptic curve cryptography (ECC).
class
ECPoint
This immutable class represents a point on an elliptic curve (EC)
 in affine coordinates.
class
ECPrivateKeySpec
This immutable class specifies an elliptic curve private key with
 its associated parameters.
class
ECPublicKeySpec
This immutable class specifies an elliptic curve public key with
 its associated parameters.
class
EdDSAParameterSpec
A class used to specify EdDSA signature and verification parameters.
final class
EdECPoint
An elliptic curve point used to specify keys as defined by
RFC 8032: Edwards-Curve
 Digital Signature Algorithm (EdDSA)
.
final class
EdECPrivateKeySpec
A class representing elliptic curve private keys as defined in
RFC 8032: Edwards-Curve
 Digital Signature Algorithm (EdDSA)
, including the curve and other
 algorithm parameters.
final class
EdECPublicKeySpec
A class representing elliptic curve public keys as defined in
RFC 8032: Edwards-Curve
 Digital Signature Algorithm (EdDSA)
, including the curve and other
 algorithm parameters.
class
EllipticCurve
This immutable class holds the necessary values needed to represent
 an elliptic curve.
class
EncodedKeySpec
This class represents a public or private key in encoded format.
class
InvalidKeySpecException
This is the exception for invalid key specifications.
class
InvalidParameterSpecException
This is the exception for invalid parameter specifications.
class
MGF1ParameterSpec
This class specifies the set of parameters used with mask generation
 function MGF1 in OAEP Padding and RSASSA-PSS signature scheme, as
 defined in the
PKCS#1 v2.2
standard.
class
NamedParameterSpec
This class is used to specify any algorithm parameters that are determined
 by a standard name.
class
PKCS8EncodedKeySpec
This class represents the ASN.1 encoding of a private key,
 encoded according to the ASN.1 type
PrivateKeyInfo
.
class
PSSParameterSpec
This class specifies a parameter spec for the RSASSA-PSS signature scheme,
 as defined in the
PKCS#1 v2.2
standard.
class
RSAKeyGenParameterSpec
This class specifies the set of parameters used to generate an RSA
 key pair.
class
RSAMultiPrimePrivateCrtKeySpec
This class specifies an RSA multi-prime private key, as defined in the
PKCS#1 v2.2
standard
 using the Chinese Remainder Theorem (CRT) information values
 for efficiency.
class
RSAOtherPrimeInfo
This class represents the triplet (prime, exponent, and coefficient)
 inside RSA's OtherPrimeInfo structure, as defined in the
PKCS#1 v2.2
standard.
class
RSAPrivateCrtKeySpec
This class specifies an RSA private key, as defined in the
PKCS#1 v2.2
standard,
 using the Chinese Remainder Theorem (CRT) information values for efficiency.
class
RSAPrivateKeySpec
This class specifies an RSA private key.
class
RSAPublicKeySpec
This class specifies an RSA public key.
class
X509EncodedKeySpec
This class represents the ASN.1 encoding of a public key,
 encoded according to the ASN.1 type
SubjectPublicKeyInfo
.
class
XECPrivateKeySpec
A class representing elliptic curve private keys as defined in RFC 7748,
 including the curve and other algorithm parameters.
class
XECPublicKeySpec
A class representing elliptic curve public keys as defined in RFC 7748,
 including the curve and other algorithm parameters.
Methods in
java.security.spec
with parameters of type
Object
Modifier and Type
Method
Description
boolean
ECFieldF2m.
equals
(
Object
obj)
Compares this finite field for equality with the
 specified object.
boolean
ECFieldFp.
equals
(
Object
obj)
Compares this prime finite field for equality with the
 specified object.
boolean
ECPoint.
equals
(
Object
obj)
Compares this elliptic curve point for equality with
 the specified object.
boolean
EllipticCurve.
equals
(
Object
obj)
Compares this elliptic curve for equality with the
 specified object.
Uses of
Object
in
java.sql
Subclasses of
Object
in
java.sql
Modifier and Type
Class
Description
class
BatchUpdateException
The subclass of
SQLException
thrown when an error
 occurs during a batch update operation.
class
DataTruncation
An exception  thrown as a
DataTruncation
exception
 (on writes) or reported as a
DataTruncation
warning (on reads)
  when a data values is unexpectedly truncated for reasons other than its having
  exceeded
MaxFieldSize
.
class
Date
A thin wrapper around a millisecond value that allows
 JDBC to identify this as an SQL
DATE
value.
class
DriverManager
The basic service for managing a set of JDBC drivers.
class
DriverPropertyInfo
Driver properties for making a connection.
class
SQLClientInfoException
The subclass of
SQLException
is thrown when one or more client info properties
 could not be set on a
Connection
.
class
SQLDataException
The subclass of
SQLException
thrown when the SQLState class value
 is '
22
', or under vendor-specified conditions.
class
SQLException
An exception that provides information on a database access
 error or other errors.
class
SQLFeatureNotSupportedException
The subclass of
SQLException
thrown when the SQLState class value is '
0A
'
 ( the value is 'zero' A).
class
SQLIntegrityConstraintViolationException
The subclass of
SQLException
thrown when the SQLState class value
 is '
23
', or under vendor-specified conditions.
class
SQLInvalidAuthorizationSpecException
The subclass of
SQLException
thrown when the SQLState class value
 is '
28
', or under vendor-specified conditions.
class
SQLNonTransientConnectionException
The subclass of
SQLException
thrown for the SQLState
 class value '
08
', or under vendor-specified conditions.
class
SQLNonTransientException
The subclass of
SQLException
thrown when an instance where a retry
 of the same operation would fail unless the cause of the
SQLException
is corrected.
final class
SQLPermission
The permission for which the
SecurityManager
will check
 when code that is running an application with a
SecurityManager
enabled, calls the
DriverManager.deregisterDriver
method,
DriverManager.setLogWriter
method,
DriverManager.setLogStream
(deprecated) method,
SyncFactory.setJNDIContext
method,
SyncFactory.setLogger
method,
Connection.setNetworkTimeout
method,
 or the
Connection.abort
method.
class
SQLRecoverableException
The subclass of
SQLException
thrown in situations where a
 previously failed operation might be able to succeed if the application performs
  some recovery steps and retries the entire transaction or in the case of a
 distributed transaction, the transaction branch.
class
SQLSyntaxErrorException
The subclass of
SQLException
thrown when the SQLState class value
 is '
42
', or under vendor-specified conditions.
class
SQLTimeoutException
The subclass of
SQLException
thrown when the timeout specified by
Statement.setQueryTimeout
,
DriverManager.setLoginTimeout
,
DataSource.setLoginTimeout
,
XADataSource.setLoginTimeout
has expired.
class
SQLTransactionRollbackException
The subclass of
SQLException
thrown when the SQLState class value
 is '
40
', or under vendor-specified conditions.
class
SQLTransientConnectionException
The subclass of
SQLException
for the SQLState class
 value '
08
', or under vendor-specified conditions.
class
SQLTransientException
The subclass of
SQLException
is thrown in situations where a
 previously failed operation might be able to succeed when the operation is
 retried without any intervention by application-level functionality.
class
SQLWarning
An exception that provides information on  database access
 warnings.
class
Time
A thin wrapper around the
java.util.Date
class that allows the JDBC
 API to identify this as an SQL
TIME
value.
class
Timestamp
A thin wrapper around
java.util.Date
that allows
 the JDBC API to identify this as an SQL
TIMESTAMP
value.
class
Types
The class that defines the constants that are used to identify generic
 SQL types, called JDBC types.
Methods in
java.sql
that return
Object
Modifier and Type
Method
Description
Object
Array.
getArray
()
Retrieves the contents of the SQL
ARRAY
value designated
 by this
Array
object in the form of an array in the Java
 programming language.
Object
Array.
getArray
(long index,
 int count)
Retrieves a slice of the SQL
ARRAY
value designated by this
Array
object, beginning with the
 specified
index
and containing up to
count
successive elements of the SQL array.
Object
Array.
getArray
(long index,
 int count,
Map
<
String
,
Class
<?>> map)
Retrieves a slice of the SQL
ARRAY
value
 designated by this
Array
object, beginning with the specified
index
and containing up to
count
successive elements of the SQL array.
Object
Array.
getArray
(
Map
<
String
,
Class
<?>> map)
Retrieves the contents of the SQL
ARRAY
value designated by this
Array
object.
Object
[]
Struct.
getAttributes
()
Produces the ordered values of the attributes of the SQL
 structured type that this
Struct
object represents.
Object
[]
Struct.
getAttributes
(
Map
<
String
,
Class
<?>> map)
Produces the ordered values of the attributes of the SQL
 structured type that this
Struct
object represents.
Object
CallableStatement.
getObject
(int parameterIndex)
Retrieves the value of the designated parameter as an
Object
in the Java programming language.
Object
CallableStatement.
getObject
(int parameterIndex,
Map
<
String
,
Class
<?>> map)
Returns an object representing the value of OUT parameter
parameterIndex
and uses
map
for the custom
 mapping of the parameter value.
Object
CallableStatement.
getObject
(
String
parameterName)
Retrieves the value of a parameter as an
Object
in the Java
 programming language.
Object
CallableStatement.
getObject
(
String
parameterName,
Map
<
String
,
Class
<?>> map)
Returns an object representing the value of OUT parameter
parameterName
and uses
map
for the custom
 mapping of the parameter value.
Object
Ref.
getObject
()
Retrieves the SQL structured type instance referenced by
 this
Ref
object.
Object
Ref.
getObject
(
Map
<
String
,
Class
<?>> map)
Retrieves the referenced object and maps it to a Java type
 using the given type map.
Object
ResultSet.
getObject
(int columnIndex)
Gets the value of the designated column in the current row
 of this
ResultSet
object as
 an
Object
in the Java programming language.
Object
ResultSet.
getObject
(int columnIndex,
Map
<
String
,
Class
<?>> map)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as an
Object
in the Java programming language.
Object
ResultSet.
getObject
(
String
columnLabel)
Gets the value of the designated column in the current row
 of this
ResultSet
object as
 an
Object
in the Java programming language.
Object
ResultSet.
getObject
(
String
columnLabel,
Map
<
String
,
Class
<?>> map)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as an
Object
in the Java programming language.
Object
SQLInput.
readObject
()
Reads the datum at the head of the stream and returns it as an
Object
in the Java programming language.
Methods in
java.sql
with parameters of type
Object
Modifier and Type
Method
Description
Array
Connection.
createArrayOf
(
String
typeName,
Object
[] elements)
Factory method for creating Array objects.
Struct
Connection.
createStruct
(
String
typeName,
Object
[] attributes)
Factory method for creating Struct objects.
boolean
RowId.
equals
(
Object
obj)
Compares this
RowId
to the specified object.
boolean
Timestamp.
equals
(
Object
ts)
Tests to see if this
Timestamp
object is
 equal to the given object.
void
CallableStatement.
setObject
(
String
parameterName,
Object
x)
Sets the value of the designated parameter with the given object.
void
CallableStatement.
setObject
(
String
parameterName,
Object
x,
 int targetSqlType)
Sets the value of the designated parameter with the given object.
void
CallableStatement.
setObject
(
String
parameterName,
Object
x,
 int targetSqlType,
 int scale)
Sets the value of the designated parameter with the given object.
default void
CallableStatement.
setObject
(
String
parameterName,
Object
x,
SQLType
targetSqlType)
Sets the value of the designated parameter with the given object.
default void
CallableStatement.
setObject
(
String
parameterName,
Object
x,
SQLType
targetSqlType,
 int scaleOrLength)
Sets the value of the designated parameter with the given object.
void
PreparedStatement.
setObject
(int parameterIndex,
Object
x)
Sets the value of the designated parameter using the given object.
void
PreparedStatement.
setObject
(int parameterIndex,
Object
x,
 int targetSqlType)
Sets the value of the designated parameter with the given object.
void
PreparedStatement.
setObject
(int parameterIndex,
Object
x,
 int targetSqlType,
 int scaleOrLength)
Sets the value of the designated parameter with the given object.
default void
PreparedStatement.
setObject
(int parameterIndex,
Object
x,
SQLType
targetSqlType)
Sets the value of the designated parameter with the given object.
default void
PreparedStatement.
setObject
(int parameterIndex,
Object
x,
SQLType
targetSqlType,
 int scaleOrLength)
Sets the value of the designated parameter with the given object.
void
Ref.
setObject
(
Object
value)
Sets the structured type value that this
Ref
object references to the given instance of
Object
.
ShardingKeyBuilder
ShardingKeyBuilder.
subkey
(
Object
subkey,
SQLType
subkeyType)
This method will be called to add a subkey into a Sharding Key object being
 built.
void
ResultSet.
updateObject
(int columnIndex,
Object
x)
Updates the designated column with an
Object
value.
void
ResultSet.
updateObject
(int columnIndex,
Object
x,
 int scaleOrLength)
Updates the designated column with an
Object
value.
default void
ResultSet.
updateObject
(int columnIndex,
Object
x,
SQLType
targetSqlType)
Updates the designated column with an
Object
value.
default void
ResultSet.
updateObject
(int columnIndex,
Object
x,
SQLType
targetSqlType,
 int scaleOrLength)
Updates the designated column with an
Object
value.
void
ResultSet.
updateObject
(
String
columnLabel,
Object
x)
Updates the designated column with an
Object
value.
void
ResultSet.
updateObject
(
String
columnLabel,
Object
x,
 int scaleOrLength)
Updates the designated column with an
Object
value.
default void
ResultSet.
updateObject
(
String
columnLabel,
Object
x,
SQLType
targetSqlType)
Updates the designated column with an
Object
value.
default void
ResultSet.
updateObject
(
String
columnLabel,
Object
x,
SQLType
targetSqlType,
 int scaleOrLength)
Updates the designated column with an
Object
value.
default void
SQLOutput.
writeObject
(
Object
x,
SQLType
targetSqlType)
Writes to the stream the data contained in the given object.
Uses of
Object
in
java.text
Subclasses of
Object
in
java.text
Modifier and Type
Class
Description
class
Annotation
An Annotation object is used as a wrapper for a text attribute value if
 the attribute has annotation characteristics.
static class
AttributedCharacterIterator.Attribute
Defines attribute keys that are used to identify text attributes.
class
AttributedString
An AttributedString holds text and related attribute information.
final class
Bidi
This class implements the Unicode Bidirectional Algorithm.
class
BreakIterator
The
BreakIterator
class implements methods for finding
 the location of boundaries in text.
class
ChoiceFormat
A
ChoiceFormat
allows you to attach a format to a range of numbers.
final class
CollationElementIterator
The
CollationElementIterator
class is used as an iterator
 to walk through each character of an international string.
class
CollationKey
A
CollationKey
represents a
String
under the
 rules of a specific
Collator
object.
class
Collator
The
Collator
class performs locale-sensitive
String
comparison.
final class
CompactNumberFormat
CompactNumberFormat
is a concrete subclass of
NumberFormat
that formats a decimal number in its compact form.
class
DateFormat
DateFormat
is an abstract class for date/time formatting subclasses which
 formats and parses dates or time in a language-independent manner.
static class
DateFormat.Field
Defines constants that are used as attribute keys in the
AttributedCharacterIterator
returned
 from
DateFormat.formatToCharacterIterator
and as
 field identifiers in
FieldPosition
.
class
DateFormatSymbols
DateFormatSymbols
is a public class for encapsulating
 localizable date-time formatting data, such as the names of the
 months, the names of the days of the week, and the time zone data.
class
DecimalFormat
DecimalFormat
is a concrete subclass of
NumberFormat
that formats decimal numbers.
class
DecimalFormatSymbols
This class represents the set of symbols (such as the decimal separator,
 the grouping separator, and so on) needed by
DecimalFormat
to format numbers.
class
FieldPosition
FieldPosition
is a simple class used by
Format
and its subclasses to identify fields in formatted output.
class
Format
Format
is an abstract base class for formatting locale-sensitive
 information such as dates, messages, and numbers.
static class
Format.Field
Defines constants that are used as attribute keys in the
AttributedCharacterIterator
returned
 from
Format.formatToCharacterIterator
and as
 field identifiers in
FieldPosition
.
class
MessageFormat
MessageFormat
provides a means to produce concatenated
 messages in a language-neutral way.
static class
MessageFormat.Field
Defines constants that are used as attribute keys in the
AttributedCharacterIterator
returned
 from
MessageFormat.formatToCharacterIterator
.
final class
Normalizer
This class provides the method
normalize
which transforms Unicode
 text into an equivalent composed or decomposed form, allowing for easier
 sorting and searching of text.
class
NumberFormat
NumberFormat
is the abstract base class for all number
 formats.
static class
NumberFormat.Field
Defines constants that are used as attribute keys in the
AttributedCharacterIterator
returned
 from
NumberFormat.formatToCharacterIterator
and as
 field identifiers in
FieldPosition
.
class
ParseException
Signals that an error has been reached unexpectedly
 while parsing.
class
ParsePosition
ParsePosition
is a simple class used by
Format
and its subclasses to keep track of the current position during parsing.
class
RuleBasedCollator
The
RuleBasedCollator
class is a concrete subclass of
Collator
that provides a simple, data-driven, table
 collator.
class
SimpleDateFormat
SimpleDateFormat
is a concrete class for formatting and
 parsing dates in a locale-sensitive manner.
final class
StringCharacterIterator
StringCharacterIterator
implements the
CharacterIterator
protocol for a
String
.
Methods in
java.text
that return
Object
Modifier and Type
Method
Description
Object
BreakIterator.
clone
()
Create a copy of this iterator
Object
CharacterIterator.
clone
()
Create a copy of this iterator
Object
ChoiceFormat.
clone
()
Overrides Cloneable
Object
Collator.
clone
()
Overrides Cloneable
Object
DateFormat.
clone
()
Overrides Cloneable
Object
DateFormatSymbols.
clone
()
Overrides Cloneable
Object
DecimalFormat.
clone
()
Standard override; no change in semantics.
Object
DecimalFormatSymbols.
clone
()
Standard override.
Object
Format.
clone
()
Creates and returns a copy of this object.
Object
MessageFormat.
clone
()
Creates and returns a copy of this object.
Object
NumberFormat.
clone
()
Overrides Cloneable.
Object
RuleBasedCollator.
clone
()
Standard override; no change in semantics.
Object
SimpleDateFormat.
clone
()
Creates a copy of this
SimpleDateFormat
.
Object
StringCharacterIterator.
clone
()
Creates a copy of this iterator.
Object
AttributedCharacterIterator.
getAttribute
(
AttributedCharacterIterator.Attribute
attribute)
Returns the value of the named
attribute
for the current character.
Object
[]
ChoiceFormat.
getFormats
()
Get the formats passed in the constructor.
Object
Annotation.
getValue
()
Returns the value of the attribute, which may be null.
Object
[]
MessageFormat.
parse
(
String
source)
Parses text from the beginning of the given string to produce an object
 array.
Object
[]
MessageFormat.
parse
(
String
source,
ParsePosition
pos)
Parses the string.
Object
DateFormat.
parseObject
(
String
source,
ParsePosition
pos)
Parses text from a string to produce a
Date
.
Object
Format.
parseObject
(
String
source)
Parses text from the beginning of the given string to produce an object.
abstract
Object
Format.
parseObject
(
String
source,
ParsePosition
pos)
Parses text from a string to produce an object.
Object
MessageFormat.
parseObject
(
String
source,
ParsePosition
pos)
Parses text from a string to produce an object array.
final
Object
NumberFormat.
parseObject
(
String
source,
ParsePosition
pos)
Parses text from a string to produce a
Number
.
protected
Object
AttributedCharacterIterator.Attribute.
readResolve
()
Resolves instances being deserialized to the predefined constants.
protected
Object
DateFormat.Field.
readResolve
()
Resolves instances being deserialized to the predefined constants.
protected
Object
MessageFormat.Field.
readResolve
()
Resolves instances being deserialized to the predefined constants.
protected
Object
NumberFormat.Field.
readResolve
()
Resolves instances being deserialized to the predefined constants.
Methods in
java.text
that return types with arguments of type
Object
Modifier and Type
Method
Description
Map
<
AttributedCharacterIterator.Attribute
,
Object
>
AttributedCharacterIterator.
getAttributes
()
Returns a map with the attributes defined on the current
 character.
Methods in
java.text
with parameters of type
Object
Modifier and Type
Method
Description
void
AttributedString.
addAttribute
(
AttributedCharacterIterator.Attribute
attribute,
Object
value)
Adds an attribute to the entire string.
void
AttributedString.
addAttribute
(
AttributedCharacterIterator.Attribute
attribute,
Object
value,
 int beginIndex,
 int endIndex)
Adds an attribute to a subrange of the string.
int
Collator.
compare
(
Object
o1,
Object
o2)
Compares its two arguments for order.
final boolean
AttributedCharacterIterator.Attribute.
equals
(
Object
obj)
Compares two objects for equality.
boolean
ChoiceFormat.
equals
(
Object
obj)
Equality comparison between two
boolean
Collator.
equals
(
Object
that)
Compares the equality of two Collators.
boolean
CompactNumberFormat.
equals
(
Object
obj)
Checks if this
CompactNumberFormat
is equal to the
 specified
obj
.
boolean
DateFormat.
equals
(
Object
obj)
Overrides equals
boolean
DateFormatSymbols.
equals
(
Object
obj)
Override equals
boolean
DecimalFormat.
equals
(
Object
obj)
Overrides equals
boolean
DecimalFormatSymbols.
equals
(
Object
obj)
Override equals.
boolean
FieldPosition.
equals
(
Object
obj)
Overrides equals
boolean
MessageFormat.
equals
(
Object
obj)
Equality comparison between two message format objects
boolean
NumberFormat.
equals
(
Object
obj)
Overrides equals.
boolean
ParsePosition.
equals
(
Object
obj)
Overrides equals
boolean
RuleBasedCollator.
equals
(
Object
obj)
Compares the equality of two collation objects.
boolean
SimpleDateFormat.
equals
(
Object
obj)
Compares the given object with this
SimpleDateFormat
for
 equality.
boolean
StringCharacterIterator.
equals
(
Object
obj)
Compares the equality of two StringCharacterIterator objects.
final
StringBuffer
CompactNumberFormat.
format
(
Object
number,
StringBuffer
toAppendTo,
FieldPosition
fieldPosition)
Formats a number to produce a string representing its compact form.
final
StringBuffer
DateFormat.
format
(
Object
obj,
StringBuffer
toAppendTo,
FieldPosition
fieldPosition)
Formats the given
Object
into a date-time string.
final
StringBuffer
DecimalFormat.
format
(
Object
number,
StringBuffer
toAppendTo,
FieldPosition
pos)
Formats a number and appends the resulting text to the given string
 buffer.
final
String
Format.
format
(
Object
obj)
Formats an object to produce a string.
abstract
StringBuffer
Format.
format
(
Object
obj,
StringBuffer
toAppendTo,
FieldPosition
pos)
Formats an object and appends the resulting text to a given string
 buffer.
final
StringBuffer
MessageFormat.
format
(
Object
[] arguments,
StringBuffer
result,
FieldPosition
pos)
Formats an array of objects and appends the
MessageFormat
's
 pattern, with format elements replaced by the formatted objects, to the
 provided
StringBuffer
.
final
StringBuffer
MessageFormat.
format
(
Object
arguments,
StringBuffer
result,
FieldPosition
pos)
Formats an array of objects and appends the
MessageFormat
's
 pattern, with format elements replaced by the formatted objects, to the
 provided
StringBuffer
.
static
String
MessageFormat.
format
(
String
pattern,
Object
... arguments)
Creates a MessageFormat with the given pattern and uses it
 to format the given arguments.
StringBuffer
NumberFormat.
format
(
Object
number,
StringBuffer
toAppendTo,
FieldPosition
pos)
Formats a number and appends the resulting text to the given string
 buffer.
AttributedCharacterIterator
CompactNumberFormat.
formatToCharacterIterator
(
Object
obj)
Formats an Object producing an
AttributedCharacterIterator
.
AttributedCharacterIterator
DecimalFormat.
formatToCharacterIterator
(
Object
obj)
Formats an Object producing an
AttributedCharacterIterator
.
AttributedCharacterIterator
Format.
formatToCharacterIterator
(
Object
obj)
Formats an Object producing an
AttributedCharacterIterator
.
AttributedCharacterIterator
MessageFormat.
formatToCharacterIterator
(
Object
arguments)
Formats an array of objects and inserts them into the
MessageFormat
's pattern, producing an
AttributedCharacterIterator
.
AttributedCharacterIterator
SimpleDateFormat.
formatToCharacterIterator
(
Object
obj)
Formats an Object producing an
AttributedCharacterIterator
.
static void
Bidi.
reorderVisually
(byte[] levels,
 int levelStart,
Object
[] objects,
 int objectStart,
 int count)
Reorder the objects in the array into visual order based on their levels.
Constructors in
java.text
with parameters of type
Object
Modifier
Constructor
Description
Annotation
(
Object
value)
Constructs an annotation record with the given value, which
 may be null.
Uses of
Object
in
java.text.spi
Subclasses of
Object
in
java.text.spi
Modifier and Type
Class
Description
class
BreakIteratorProvider
An abstract class for service providers that
 provide concrete implementations of the
BreakIterator
class.
class
CollatorProvider
An abstract class for service providers that
 provide concrete implementations of the
Collator
class.
class
DateFormatProvider
An abstract class for service providers that
 provide concrete implementations of the
DateFormat
class.
class
DateFormatSymbolsProvider
An abstract class for service providers that
 provide instances of the
DateFormatSymbols
class.
class
DecimalFormatSymbolsProvider
An abstract class for service providers that
 provide instances of the
DecimalFormatSymbols
class.
class
NumberFormatProvider
An abstract class for service providers that
 provide concrete implementations of the
NumberFormat
class.
Uses of
Object
in
java.time
Subclasses of
Object
in
java.time
Modifier and Type
Class
Description
class
Clock
A clock providing access to the current instant, date and time using a time-zone.
class
DateTimeException
Exception used to indicate a problem while calculating a date-time.
final class
Duration
A time-based amount of time, such as '34.5 seconds'.
final class
Instant
An instantaneous point on the time-line.
final class
LocalDate
A date without a time-zone in the ISO-8601 calendar system,
 such as
2007-12-03
.
final class
LocalDateTime
A date-time without a time-zone in the ISO-8601 calendar system,
 such as
2007-12-03T10:15:30
.
final class
LocalTime
A time without a time-zone in the ISO-8601 calendar system,
 such as
10:15:30
.
final class
MonthDay
A month-day in the ISO-8601 calendar system, such as
--12-03
.
final class
OffsetDateTime
A date-time with an offset from UTC/Greenwich in the ISO-8601 calendar system,
 such as
2007-12-03T10:15:30+01:00
.
final class
OffsetTime
A time with an offset from UTC/Greenwich in the ISO-8601 calendar system,
 such as
10:15:30+01:00
.
final class
Period
A date-based amount of time in the ISO-8601 calendar system,
 such as '2 years, 3 months and 4 days'.
final class
Year
A year in the ISO-8601 calendar system, such as
2007
.
final class
YearMonth
A year-month in the ISO-8601 calendar system, such as
2007-12
.
final class
ZonedDateTime
A date-time with a time-zone in the ISO-8601 calendar system,
 such as
2007-12-03T10:15:30+01:00 Europe/Paris
.
class
ZoneId
A time-zone ID, such as
Europe/Paris
.
final class
ZoneOffset
A time-zone offset from Greenwich/UTC, such as
+02:00
.
Methods in
java.time
with parameters of type
Object
Modifier and Type
Method
Description
boolean
Clock.
equals
(
Object
obj)
Checks if this clock is equal to another clock.
boolean
Duration.
equals
(
Object
other)
Checks if this duration is equal to the specified
Duration
.
boolean
Instant.
equals
(
Object
other)
Checks if this instant is equal to the specified instant.
boolean
LocalDate.
equals
(
Object
obj)
Checks if this date is equal to another date.
boolean
LocalDateTime.
equals
(
Object
obj)
Checks if this date-time is equal to another date-time.
boolean
LocalTime.
equals
(
Object
obj)
Checks if this time is equal to another time.
boolean
MonthDay.
equals
(
Object
obj)
Checks if this month-day is equal to another month-day.
boolean
OffsetDateTime.
equals
(
Object
obj)
Checks if this date-time is equal to another date-time.
boolean
OffsetTime.
equals
(
Object
obj)
Checks if this time is equal to another time.
boolean
Period.
equals
(
Object
obj)
Checks if this period is equal to another period.
boolean
Year.
equals
(
Object
obj)
Checks if this year is equal to another year.
boolean
YearMonth.
equals
(
Object
obj)
Checks if this year-month is equal to another year-month.
boolean
ZonedDateTime.
equals
(
Object
obj)
Checks if this date-time is equal to another date-time.
boolean
ZoneId.
equals
(
Object
obj)
Checks if this time-zone ID is equal to another time-zone ID.
boolean
ZoneOffset.
equals
(
Object
obj)
Checks if this offset is equal to another offset.
Uses of
Object
in
java.time.chrono
Subclasses of
Object
in
java.time.chrono
Modifier and Type
Class
Description
class
AbstractChronology
An abstract implementation of a calendar system, used to organize and identify dates.
final class
HijrahChronology
The Hijrah calendar is a lunar calendar supporting Islamic calendars.
final class
HijrahDate
A date in the Hijrah calendar system.
final class
IsoChronology
The ISO calendar system.
final class
JapaneseChronology
The Japanese Imperial calendar system.
final class
JapaneseDate
A date in the Japanese Imperial calendar system.
final class
JapaneseEra
An era in the Japanese Imperial calendar system.
final class
MinguoChronology
The Minguo calendar system.
final class
MinguoDate
A date in the Minguo calendar system.
final class
ThaiBuddhistChronology
The Thai Buddhist calendar system.
final class
ThaiBuddhistDate
A date in the Thai Buddhist calendar system.
Methods in
java.time.chrono
with parameters of type
Object
Modifier and Type
Method
Description
boolean
AbstractChronology.
equals
(
Object
obj)
Checks if this chronology is equal to another chronology.
boolean
ChronoLocalDate.
equals
(
Object
obj)
Checks if this date is equal to another date, including the chronology.
boolean
ChronoLocalDateTime.
equals
(
Object
obj)
Checks if this date-time is equal to another date-time, including the chronology.
boolean
Chronology.
equals
(
Object
obj)
Checks if this chronology is equal to another chronology.
boolean
ChronoPeriod.
equals
(
Object
obj)
Checks if this period is equal to another period, including the chronology.
boolean
ChronoZonedDateTime.
equals
(
Object
obj)
Checks if this date-time is equal to another date-time.
boolean
HijrahDate.
equals
(
Object
obj)
Compares this date to another date, including the chronology.
boolean
JapaneseDate.
equals
(
Object
obj)
Compares this date to another date, including the chronology.
boolean
MinguoDate.
equals
(
Object
obj)
Compares this date to another date, including the chronology.
boolean
ThaiBuddhistDate.
equals
(
Object
obj)
Compares this date to another date, including the chronology.
Uses of
Object
in
java.time.format
Subclasses of
Object
in
java.time.format
Modifier and Type
Class
Description
final class
DateTimeFormatter
Formatter for printing and parsing date-time objects.
final class
DateTimeFormatterBuilder
Builder to create date-time formatters.
class
DateTimeParseException
An exception thrown when an error occurs during parsing.
final class
DecimalStyle
Localized decimal style used in date and time formatting.
Methods in
java.time.format
with parameters of type
Object
Modifier and Type
Method
Description
boolean
DecimalStyle.
equals
(
Object
obj)
Checks if this DecimalStyle is equal to another DecimalStyle.
Uses of
Object
in
java.time.temporal
Subclasses of
Object
in
java.time.temporal
Modifier and Type
Class
Description
final class
IsoFields
Fields and units specific to the ISO-8601 calendar system,
 including quarter-of-year and week-based-year.
final class
JulianFields
A set of date fields that provide access to Julian Days.
final class
TemporalAdjusters
Common and useful TemporalAdjusters.
final class
TemporalQueries
Common implementations of
TemporalQuery
.
class
UnsupportedTemporalTypeException
UnsupportedTemporalTypeException indicates that a ChronoField or ChronoUnit is
 not supported for a Temporal class.
final class
ValueRange
The range of valid values for a date-time field.
final class
WeekFields
Localized definitions of the day-of-week, week-of-month and week-of-year fields.
Methods in
java.time.temporal
with parameters of type
Object
Modifier and Type
Method
Description
boolean
ValueRange.
equals
(
Object
obj)
Checks if this range is equal to another range.
boolean
WeekFields.
equals
(
Object
object)
Checks if this
WeekFields
is equal to the specified object.
Uses of
Object
in
java.time.zone
Subclasses of
Object
in
java.time.zone
Modifier and Type
Class
Description
final class
ZoneOffsetTransition
A transition between two offsets caused by a discontinuity in the local time-line.
final class
ZoneOffsetTransitionRule
A rule expressing how to create a transition.
final class
ZoneRules
The rules defining how the zone offset varies for a single time-zone.
class
ZoneRulesException
Thrown to indicate a problem with time-zone configuration.
class
ZoneRulesProvider
Provider of time-zone rules to the system.
Methods in
java.time.zone
with parameters of type
Object
Modifier and Type
Method
Description
boolean
ZoneOffsetTransition.
equals
(
Object
other)
Checks if this object equals another.
boolean
ZoneOffsetTransitionRule.
equals
(
Object
otherRule)
Checks if this object equals another.
boolean
ZoneRules.
equals
(
Object
otherRules)
Checks if this set of rules equals another.
Uses of
Object
in
java.util
Subclasses of
Object
in
java.util
Modifier and Type
Class
Description
class
AbstractCollection
<E>
This class provides a skeletal implementation of the
Collection
interface, to minimize the effort required to implement this interface.
class
AbstractList
<E>
This class provides a skeletal implementation of the
List
interface to minimize the effort required to implement this interface
 backed by a "random access" data store (such as an array).
class
AbstractMap
<K,
V>
This class provides a skeletal implementation of the
Map
interface, to minimize the effort required to implement this interface.
static class
AbstractMap.SimpleEntry
<K,
V>
An Entry maintaining a key and a value.
static class
AbstractMap.SimpleImmutableEntry
<K,
V>
An unmodifiable Entry maintaining a key and a value.
class
AbstractQueue
<E>
This class provides skeletal implementations of some
Queue
operations.
class
AbstractSequentialList
<E>
This class provides a skeletal implementation of the
List
interface to minimize the effort required to implement this interface
 backed by a "sequential access" data store (such as a linked list).
class
AbstractSet
<E>
This class provides a skeletal implementation of the
Set
interface to minimize the effort required to implement this
 interface.
class
ArrayDeque
<E>
Resizable-array implementation of the
Deque
interface.
class
ArrayList
<E>
Resizable-array implementation of the
List
interface.
final class
Arrays
This class contains various methods for manipulating arrays (such as
 sorting and searching).
class
Base64
This class consists exclusively of static methods for obtaining
 encoders and decoders for the Base64 encoding scheme.
static class
Base64.Decoder
This class implements a decoder for decoding byte data using the
 Base64 encoding scheme as specified in RFC 4648 and RFC 2045.
static class
Base64.Encoder
This class implements an encoder for encoding byte data using
 the Base64 encoding scheme as specified in RFC 4648 and RFC 2045.
class
BitSet
This class implements a vector of bits that grows as needed.
class
Calendar
The
Calendar
class is an abstract class that provides methods
 for converting between a specific instant in time and a set of
calendar fields
such as
YEAR
,
MONTH
,
DAY_OF_MONTH
,
HOUR
, and so on, and for
 manipulating the calendar fields, such as getting the date of the next
 week.
static class
Calendar.Builder
Calendar.Builder
is used for creating a
Calendar
from
 various date-time parameters.
class
Collections
This class consists exclusively of static methods that operate on or return
 collections.
class
ConcurrentModificationException
This exception may be thrown by methods that have detected concurrent
 modification of an object when such modification is not permissible.
final class
Currency
Represents a currency.
class
Date
The class
Date
represents a specific instant
 in time, with millisecond precision.
class
Dictionary
<K,
V>
The
Dictionary
class is the abstract parent of any
 class, such as
Hashtable
, which maps keys to values.
class
DoubleSummaryStatistics
A state object for collecting statistics such as count, min, max, sum, and
 average.
class
DuplicateFormatFlagsException
Unchecked exception thrown when duplicate flags are provided in the format
 specifier.
class
EmptyStackException
Thrown by methods in the
Stack
class to indicate
 that the stack is empty.
class
EnumMap
<K extends
Enum
<K>,
V>
A specialized
Map
implementation for use with enum type keys.
class
EnumSet
<E extends
Enum
<E>>
A specialized
Set
implementation for use with enum types.
class
EventListenerProxy
<T extends
EventListener
>
An abstract wrapper class for an
EventListener
class
 which associates a set of additional parameters with the listener.
class
EventObject
The root class from which all event state objects shall be derived.
class
FormatFlagsConversionMismatchException
Unchecked exception thrown when a conversion and flag are incompatible.
final class
FormatProcessor
PREVIEW
Preview.
This
StringTemplate.Processor
PREVIEW
constructs a
String
result using
Formatter
specifications and values found in the
StringTemplate
PREVIEW
.
class
FormattableFlags
FormattableFlags are passed to the
Formattable.formatTo()
method and modify the output format for
Formattables
.
final class
Formatter
An interpreter for printf-style format strings.
class
FormatterClosedException
Unchecked exception thrown when the formatter has been closed.
class
GregorianCalendar
GregorianCalendar
is a concrete subclass of
Calendar
and provides the standard calendar system
 used by most of the world.
class
HashMap
<K,
V>
Hash table based implementation of the
Map
interface.
class
HashSet
<E>
This class implements the
Set
interface, backed by a hash table
 (actually a
HashMap
instance).
class
Hashtable
<K,
V>
This class implements a hash table, which maps keys to values.
final class
HexFormat
HexFormat
converts between bytes and chars and hex-encoded strings which may include
 additional formatting markup such as prefixes, suffixes, and delimiters.
class
IdentityHashMap
<K,
V>
This class implements the
Map
interface with a hash table, using
 reference-equality in place of object-equality when comparing keys (and
 values).
class
IllegalFormatCodePointException
Unchecked exception thrown when a character with an invalid Unicode code
 point as defined by
Character.isValidCodePoint(int)
is passed to the
Formatter
.
class
IllegalFormatConversionException
Unchecked exception thrown when the argument corresponding to the format
 specifier is of an incompatible type.
class
IllegalFormatException
Unchecked exception thrown when a format string contains an illegal syntax
 or a format specifier that is incompatible with the given arguments.
class
IllegalFormatFlagsException
Unchecked exception thrown when an illegal combination flags is given.
class
IllegalFormatPrecisionException
Unchecked exception thrown when the precision is a negative value other than
-1
, the conversion does not support a precision, or the value is
 otherwise unsupported.
class
IllegalFormatWidthException
Unchecked exception thrown when the format width is a negative value other
 than
-1
or is otherwise unsupported.
class
IllformedLocaleException
Thrown by methods in
Locale
and
Locale.Builder
to
 indicate that an argument is not a well-formed BCP 47 tag.
class
InputMismatchException
Thrown by a
Scanner
to indicate that the token
 retrieved does not match the pattern for the expected type, or
 that the token is out of range for the expected type.
class
IntSummaryStatistics
A state object for collecting statistics such as count, min, max, sum, and
 average.
class
InvalidPropertiesFormatException
Thrown to indicate that an operation could not complete because
 the input did not conform to the appropriate XML document type
 for a collection of properties, as per the
Properties
specification.
class
LinkedHashMap
<K,
V>
Hash table and linked list implementation of the
Map
interface,
 with well-defined encounter order.
class
LinkedHashSet
<E>
Hash table and linked list implementation of the
Set
interface,
 with well-defined encounter order.
class
LinkedList
<E>
Doubly-linked list implementation of the
List
and
Deque
interfaces.
class
ListResourceBundle
ListResourceBundle
is an abstract subclass of
ResourceBundle
that manages resources for a locale
 in a convenient and easy to use list.
final class
Locale
A
Locale
object represents a specific geographical, political,
 or cultural region.
static final class
Locale.Builder
Builder
is used to build instances of
Locale
from values configured by the setters.
static final class
Locale.LanguageRange
This class expresses a
Language Range
defined in
RFC 4647 Matching of
 Language Tags
.
class
LongSummaryStatistics
A state object for collecting statistics such as count, min, max, sum, and
 average.
class
MissingFormatArgumentException
Unchecked exception thrown when there is a format specifier which does not
 have a corresponding argument or if an argument index refers to an argument
 that does not exist.
class
MissingFormatWidthException
Unchecked exception thrown when the format width is required.
class
MissingResourceException
Signals that a resource is missing.
class
NoSuchElementException
Thrown by various accessor methods to indicate that the element being requested
 does not exist.
final class
Objects
This class consists of
static
utility methods for operating
 on objects, or checking certain conditions before operation.
class
Observable
Deprecated.
This class and the
Observer
interface have been deprecated.
final class
Optional
<T>
A container object which may or may not contain a non-
null
value.
final class
OptionalDouble
A container object which may or may not contain a
double
value.
final class
OptionalInt
A container object which may or may not contain an
int
value.
final class
OptionalLong
A container object which may or may not contain a
long
value.
class
PriorityQueue
<E>
An unbounded priority
queue
based on a priority heap.
class
Properties
The
Properties
class represents a persistent set of
 properties.
final class
PropertyPermission
This class is for property permissions.
class
PropertyResourceBundle
PropertyResourceBundle
is a concrete subclass of
ResourceBundle
that manages resources for a locale
 using a set of static strings from a property file.
class
Random
An instance of this class is used to generate a stream of
 pseudorandom numbers; its period is only 2
48
.
class
ResourceBundle
Resource bundles contain locale-specific objects.
static class
ResourceBundle.Control
ResourceBundle.Control
defines a set of callback methods
 that are invoked by the
ResourceBundle.getBundle
factory
 methods during the bundle loading process.
final class
Scanner
A simple text scanner which can parse primitive types and strings using
 regular expressions.
class
ServiceConfigurationError
Error thrown when something goes wrong while locating, loading, or
 instantiating a service provider.
final class
ServiceLoader
<S>
A facility to load implementations of a service.
class
SimpleTimeZone
SimpleTimeZone
is a concrete subclass of
TimeZone
that represents a time zone for use with a Gregorian calendar.
final class
Spliterators
Static classes and methods for operating on or creating instances of
Spliterator
and its primitive specializations
Spliterator.OfInt
,
Spliterator.OfLong
, and
Spliterator.OfDouble
.
static class
Spliterators.AbstractDoubleSpliterator
An abstract
Spliterator.OfDouble
that implements
trySplit
to permit limited parallelism.
static class
Spliterators.AbstractIntSpliterator
An abstract
Spliterator.OfInt
that implements
trySplit
to
 permit limited parallelism.
static class
Spliterators.AbstractLongSpliterator
An abstract
Spliterator.OfLong
that implements
trySplit
to permit limited parallelism.
static class
Spliterators.AbstractSpliterator
<T>
An abstract
Spliterator
that implements
trySplit
to
 permit limited parallelism.
final class
SplittableRandom
A generator of uniform pseudorandom values (with period 2
64
)
 applicable for use in (among other contexts) isolated parallel
 computations that may generate subtasks.
class
Stack
<E>
The
Stack
class represents a last-in-first-out
 (LIFO) stack of objects.
final class
StringJoiner
StringJoiner
is used to construct a sequence of characters separated
 by a delimiter and optionally starting with a supplied prefix
 and ending with a supplied suffix.
class
StringTokenizer
The string tokenizer class allows an application to break a
 string into tokens.
class
Timer
A facility for threads to schedule tasks for future execution in a
 background thread.
class
TimerTask
A task that can be scheduled for one-time or repeated execution by a
Timer
.
class
TimeZone
TimeZone
represents a time zone offset, and also figures out daylight
 savings.
class
TooManyListenersException
The
TooManyListenersException
Exception is used as part of
 the Java Event model to annotate and implement a unicast special case of
 a multicast Event Source.
class
TreeMap
<K,
V>
A Red-Black tree based
NavigableMap
implementation.
class
TreeSet
<E>
A
NavigableSet
implementation based on a
TreeMap
.
class
UnknownFormatConversionException
Unchecked exception thrown when an unknown conversion is given.
class
UnknownFormatFlagsException
Unchecked exception thrown when an unknown flag is given.
final class
UUID
A class that represents an immutable universally unique identifier (UUID).
class
Vector
<E>
The
Vector
class implements a growable array of
 objects.
class
WeakHashMap
<K,
V>
Hash table based implementation of the
Map
interface, with
weak keys
.
Fields in
java.util
declared as
Object
Modifier and Type
Field
Description
protected
Object
[]
Vector.
elementData
The array buffer into which the components of the vector are
 stored.
protected
Object
EventObject.
source
The object on which the Event initially occurred.
Methods in
java.util
with type parameters of type
Object
Modifier and Type
Method
Description
static <T extends
Object
&
Comparable
<? super T>>
T
Collections.
max
(
Collection
<? extends T> coll)
Returns the maximum element of the given collection, according to the
natural ordering
of its elements.
static <T extends
Object
&
Comparable
<? super T>>
T
Collections.
min
(
Collection
<? extends T> coll)
Returns the minimum element of the given collection, according to the
natural ordering
of its elements.
Methods in
java.util
that return
Object
Modifier and Type
Method
Description
protected
Object
AbstractMap.
clone
()
Returns a shallow copy of this
AbstractMap
instance: the keys
 and values themselves are not cloned.
Object
ArrayList.
clone
()
Returns a shallow copy of this
ArrayList
instance.
Object
BitSet.
clone
()
Cloning this
BitSet
produces a new
BitSet
that is equal to it.
Object
Calendar.
clone
()
Creates and returns a copy of this object.
Object
Date.
clone
()
Return a copy of this object.
Object
HashMap.
clone
()
Returns a shallow copy of this
HashMap
instance: the keys and
 values themselves are not cloned.
Object
HashSet.
clone
()
Returns a shallow copy of this
HashSet
instance: the elements
 themselves are not cloned.
Object
Hashtable.
clone
()
Creates a shallow copy of this hashtable.
Object
IdentityHashMap.
clone
()
Returns a shallow copy of this identity hash map: the keys and values
 themselves are not cloned.
Object
LinkedList.
clone
()
Returns a shallow copy of this
LinkedList
.
Object
Locale.
clone
()
Overrides Cloneable.
Object
SimpleTimeZone.
clone
()
Returns a clone of this
SimpleTimeZone
instance.
Object
TimeZone.
clone
()
Creates a copy of this
TimeZone
.
Object
TreeMap.
clone
()
Returns a shallow copy of this
TreeMap
instance.
Object
TreeSet.
clone
()
Returns a shallow copy of this
TreeSet
instance.
Object
Vector.
clone
()
Returns a clone of this vector.
static <T> T[]
Arrays.
copyOf
(T[] original,
 int newLength)
Copies the specified array, truncating or padding with nulls (if necessary)
 so the copy has the specified length.
static <T,
U> T[]
Arrays.
copyOf
(U[] original,
 int newLength,
Class
<? extends T[]> newType)
Copies the specified array, truncating or padding with nulls (if necessary)
 so the copy has the specified length.
static <T> T[]
Arrays.
copyOfRange
(T[] original,
 int from,
 int to)
Copies the specified range of the specified array into a new array.
static <T,
U> T[]
Arrays.
copyOfRange
(U[] original,
 int from,
 int to,
Class
<? extends T[]> newType)
Copies the specified range of the specified array into a new array.
protected abstract
Object
[][]
ListResourceBundle.
getContents
()
Returns an array in which each item is a pair of objects in an
Object
array.
final
Object
ResourceBundle.
getObject
(
String
key)
Gets an object for the given key from this resource bundle or one of its parents.
Object
EventObject.
getSource
()
The object on which the Event initially occurred.
final
Object
ListResourceBundle.
handleGetObject
(
String
key)
Object
PropertyResourceBundle.
handleGetObject
(
String
key)
protected abstract
Object
ResourceBundle.
handleGetObject
(
String
key)
Gets an object for the given key from this resource bundle.
Object
StringTokenizer.
nextElement
()
Returns the same value as the
nextToken
method,
 except that its declared return value is
Object
rather than
String
.
Object
Properties.
setProperty
(
String
key,
String
value)
Calls the
Hashtable
method
put
.
Object
[]
AbstractCollection.
toArray
()
Returns an array containing all of the elements in this collection.
<T> T[]
AbstractCollection.
toArray
(T[] a)
Returns an array containing all of the elements in this collection;
 the runtime type of the returned array is that of the specified array.
Object
[]
ArrayDeque.
toArray
()
Returns an array containing all of the elements in this deque
 in proper sequence (from first to last element).
<T> T[]
ArrayDeque.
toArray
(T[] a)
Returns an array containing all of the elements in this deque in
 proper sequence (from first to last element); the runtime type of the
 returned array is that of the specified array.
Object
[]
ArrayList.
toArray
()
Returns an array containing all of the elements in this list
 in proper sequence (from first to last element).
<T> T[]
ArrayList.
toArray
(T[] a)
Returns an array containing all of the elements in this list in proper
 sequence (from first to last element); the runtime type of the returned
 array is that of the specified array.
Object
[]
Collection.
toArray
()
Returns an array containing all of the elements in this collection.
default <T> T[]
Collection.
toArray
(
IntFunction
<T[]> generator)
Returns an array containing all of the elements in this collection,
 using the provided
generator
function to allocate the returned array.
<T> T[]
Collection.
toArray
(T[] a)
Returns an array containing all of the elements in this collection;
 the runtime type of the returned array is that of the specified array.
Object
[]
HashSet.
toArray
()
<T> T[]
HashSet.
toArray
(T[] a)
Object
[]
LinkedList.
toArray
()
Returns an array containing all of the elements in this list
 in proper sequence (from first to last element).
<T> T[]
LinkedList.
toArray
(T[] a)
Returns an array containing all of the elements in this list in
 proper sequence (from first to last element); the runtime type of
 the returned array is that of the specified array.
Object
[]
List.
toArray
()
Returns an array containing all of the elements in this list in proper
 sequence (from first to last element).
<T> T[]
List.
toArray
(T[] a)
Returns an array containing all of the elements in this list in
 proper sequence (from first to last element); the runtime type of
 the returned array is that of the specified array.
Object
[]
PriorityQueue.
toArray
()
Returns an array containing all of the elements in this queue.
<T> T[]
PriorityQueue.
toArray
(T[] a)
Returns an array containing all of the elements in this queue; the
 runtime type of the returned array is that of the specified array.
Object
[]
Set.
toArray
()
Returns an array containing all of the elements in this set.
<T> T[]
Set.
toArray
(T[] a)
Returns an array containing all of the elements in this set; the
 runtime type of the returned array is that of the specified array.
Object
[]
Vector.
toArray
()
Returns an array containing all of the elements in this Vector
 in the correct order.
<T> T[]
Vector.
toArray
(T[] a)
Returns an array containing all of the elements in this Vector in the
 correct order; the runtime type of the returned array is that of the
 specified array.
Methods in
java.util
with parameters of type
Object
Modifier and Type
Method
Description
static <T> boolean
Collections.
addAll
(
Collection
<? super T> c,
 T... elements)
Adds all of the specified elements to the specified collection.
boolean
Calendar.
after
(
Object
when)
Returns whether this
Calendar
represents a time
 after the time represented by the specified
Object
.
static <T>
List
<T>
Arrays.
asList
(T... a)
Returns a fixed-size list backed by the specified array.
boolean
Calendar.
before
(
Object
when)
Returns whether this
Calendar
represents a time
 before the time represented by the specified
Object
.
static int
Arrays.
binarySearch
(
Object
[] a,
 int fromIndex,
 int toIndex,
Object
key)
Searches a range of
 the specified array for the specified object using the binary
 search algorithm.
static int
Arrays.
binarySearch
(
Object
[] a,
Object
key)
Searches the specified array for the specified object using the binary
 search algorithm.
static <T> int
Arrays.
binarySearch
(T[] a,
 int fromIndex,
 int toIndex,
 T key,
Comparator
<? super T> c)
Searches a range of
 the specified array for the specified object using the binary
 search algorithm.
static <T> int
Arrays.
binarySearch
(T[] a,
 T key,
Comparator
<? super T> c)
Searches the specified array for the specified object using the binary
 search algorithm.
static <T> int
Arrays.
compare
(T[] a,
 int aFromIndex,
 int aToIndex,
 T[] b,
 int bFromIndex,
 int bToIndex,
Comparator
<? super T> cmp)
Compares two
Object
arrays lexicographically over the specified
 ranges.
static <T> int
Arrays.
compare
(T[] a,
 T[] b,
Comparator
<? super T> cmp)
Compares two
Object
arrays lexicographically using a specified
 comparator.
boolean
AbstractCollection.
contains
(
Object
o)
Returns
true
if this collection contains the specified element.
boolean
ArrayDeque.
contains
(
Object
o)
Returns
true
if this deque contains the specified element.
boolean
ArrayList.
contains
(
Object
o)
Returns
true
if this list contains the specified element.
boolean
Collection.
contains
(
Object
o)
Returns
true
if this collection contains the specified element.
boolean
Deque.
contains
(
Object
o)
Returns
true
if this deque contains the specified element.
boolean
HashSet.
contains
(
Object
o)
Returns
true
if this set contains the specified element.
boolean
Hashtable.
contains
(
Object
value)
Tests if some key maps into the specified value in this hashtable.
boolean
LinkedList.
contains
(
Object
o)
Returns
true
if this list contains the specified element.
boolean
List.
contains
(
Object
o)
Returns
true
if this list contains the specified element.
boolean
PriorityQueue.
contains
(
Object
o)
Returns
true
if this queue contains the specified element.
boolean
Set.
contains
(
Object
o)
Returns
true
if this set contains the specified element.
boolean
TreeSet.
contains
(
Object
o)
Returns
true
if this set contains the specified element.
boolean
Vector.
contains
(
Object
o)
Returns
true
if this vector contains the specified element.
boolean
AbstractMap.
containsKey
(
Object
key)
Returns
true
if this map contains a mapping for the specified
 key.
boolean
EnumMap.
containsKey
(
Object
key)
Returns
true
if this map contains a mapping for the specified
 key.
boolean
HashMap.
containsKey
(
Object
key)
Returns
true
if this map contains a mapping for the
 specified key.
boolean
Hashtable.
containsKey
(
Object
key)
Tests if the specified object is a key in this hashtable.
boolean
IdentityHashMap.
containsKey
(
Object
key)
Tests whether the specified object reference is a key in this identity
 hash map.
boolean
Map.
containsKey
(
Object
key)
Returns
true
if this map contains a mapping for the specified
 key.
boolean
TreeMap.
containsKey
(
Object
key)
Returns
true
if this map contains a mapping for the specified
 key.
boolean
WeakHashMap.
containsKey
(
Object
key)
Returns
true
if this map contains a mapping for the
 specified key.
boolean
AbstractMap.
containsValue
(
Object
value)
Returns
true
if this map maps one or more keys to the
 specified value.
boolean
EnumMap.
containsValue
(
Object
value)
Returns
true
if this map maps one or more keys to the
 specified value.
boolean
HashMap.
containsValue
(
Object
value)
Returns
true
if this map maps one or more keys to the
 specified value.
boolean
Hashtable.
containsValue
(
Object
value)
Returns true if this hashtable maps one or more keys to this value.
boolean
IdentityHashMap.
containsValue
(
Object
value)
Tests whether the specified object reference is a value in this identity
 hash map.
boolean
LinkedHashMap.
containsValue
(
Object
value)
Returns
true
if this map maps one or more keys to the
 specified value.
boolean
Map.
containsValue
(
Object
value)
Returns
true
if this map maps one or more keys to the
 specified value.
boolean
TreeMap.
containsValue
(
Object
value)
Returns
true
if this map maps one or more keys to the
 specified value.
boolean
WeakHashMap.
containsValue
(
Object
value)
Returns
true
if this map maps one or more keys to the
 specified value.
void
Vector.
copyInto
(
Object
[] anArray)
Copies the components of this vector into the specified array.
static <T> T[]
Arrays.
copyOf
(T[] original,
 int newLength)
Copies the specified array, truncating or padding with nulls (if necessary)
 so the copy has the specified length.
static <T,
U> T[]
Arrays.
copyOf
(U[] original,
 int newLength,
Class
<? extends T[]> newType)
Copies the specified array, truncating or padding with nulls (if necessary)
 so the copy has the specified length.
static <T> T[]
Arrays.
copyOfRange
(T[] original,
 int from,
 int to)
Copies the specified range of the specified array into a new array.
static <T,
U> T[]
Arrays.
copyOfRange
(U[] original,
 int from,
 int to,
Class
<? extends T[]> newType)
Copies the specified range of the specified array into a new array.
static boolean
Arrays.
deepEquals
(
Object
[] a1,
Object
[] a2)
Returns
true
if the two specified arrays are
deeply
 equal
to one another.
static boolean
Objects.
deepEquals
(
Object
a,
Object
b)
Returns
true
if the arguments are deeply equal to each other
 and
false
otherwise.
static int
Arrays.
deepHashCode
(
Object
[] a)
Returns a hash code based on the "deep contents" of the specified
 array.
static
String
Arrays.
deepToString
(
Object
[] a)
Returns a string representation of the "deep contents" of the specified
 array.
boolean
AbstractList.
equals
(
Object
o)
Compares the specified object with this list for equality.
boolean
AbstractMap.
equals
(
Object
o)
Compares the specified object with this map for equality.
boolean
AbstractMap.SimpleEntry.
equals
(
Object
o)
Compares the specified object with this entry for equality.
boolean
AbstractMap.SimpleImmutableEntry.
equals
(
Object
o)
Compares the specified object with this entry for equality.
boolean
AbstractSet.
equals
(
Object
o)
Compares the specified object with this set for equality.
boolean
ArrayList.
equals
(
Object
o)
Compares the specified object with this list for equality.
static boolean
Arrays.
equals
(
Object
[] a,
 int aFromIndex,
 int aToIndex,
Object
[] b,
 int bFromIndex,
 int bToIndex)
Returns true if the two specified arrays of Objects, over the specified
 ranges, are
equal
to one another.
static boolean
Arrays.
equals
(
Object
[] a,
Object
[] a2)
Returns
true
if the two specified arrays of Objects are
equal
to one another.
static <T> boolean
Arrays.
equals
(T[] a,
 int aFromIndex,
 int aToIndex,
 T[] b,
 int bFromIndex,
 int bToIndex,
Comparator
<? super T> cmp)
Returns true if the two specified arrays of Objects, over the specified
 ranges, are
equal
to one another.
static <T> boolean
Arrays.
equals
(T[] a,
 T[] a2,
Comparator
<? super T> cmp)
Returns
true
if the two specified arrays of Objects are
equal
to one another.
boolean
BitSet.
equals
(
Object
obj)
Compares this object against the specified object.
boolean
Calendar.
equals
(
Object
obj)
Compares this
Calendar
to the specified
Object
.
boolean
Collection.
equals
(
Object
o)
Compares the specified object with this collection for equality.
boolean
Comparator.
equals
(
Object
obj)
Indicates whether some other object is "equal to"
 this comparator.
boolean
Date.
equals
(
Object
obj)
Compares two dates for equality.
boolean
EnumMap.
equals
(
Object
o)
Compares the specified object with this map for equality.
boolean
GregorianCalendar.
equals
(
Object
obj)
Compares this
GregorianCalendar
to the specified
Object
.
boolean
Hashtable.
equals
(
Object
o)
Compares the specified Object with this Map for equality,
 as per the definition in the Map interface.
boolean
HexFormat.
equals
(
Object
o)
Returns
true
if the other object is a
HexFormat
with the same parameters.
boolean
IdentityHashMap.
equals
(
Object
o)
Compares the specified object with this map for equality.
boolean
List.
equals
(
Object
o)
Compares the specified object with this list for equality.
boolean
Locale.
equals
(
Object
obj)
Returns true if this Locale is equal to another object.
boolean
Locale.LanguageRange.
equals
(
Object
obj)
Compares this object to the specified object.
boolean
Map.Entry.
equals
(
Object
o)
Compares the specified object with this entry for equality.
boolean
Map.
equals
(
Object
o)
Compares the specified object with this map for equality.
static boolean
Objects.
equals
(
Object
a,
Object
b)
Returns
true
if the arguments are equal to each other
 and
false
otherwise.
boolean
Optional.
equals
(
Object
obj)
Indicates whether some other object is "equal to" this
Optional
.
boolean
OptionalDouble.
equals
(
Object
obj)
Indicates whether some other object is "equal to" this
OptionalDouble
.
boolean
OptionalInt.
equals
(
Object
obj)
Indicates whether some other object is "equal to" this
OptionalInt
.
boolean
OptionalLong.
equals
(
Object
obj)
Indicates whether some other object is "equal to" this
OptionalLong
.
boolean
PropertyPermission.
equals
(
Object
obj)
Checks two PropertyPermission objects for equality.
boolean
Set.
equals
(
Object
o)
Compares the specified object with this set for equality.
boolean
SimpleTimeZone.
equals
(
Object
obj)
Compares the equality of two
SimpleTimeZone
objects.
boolean
UUID.
equals
(
Object
obj)
Compares this object to the specified object.
boolean
Vector.
equals
(
Object
o)
Compares the specified Object with this Vector for equality.
static void
Arrays.
fill
(
Object
[] a,
 int fromIndex,
 int toIndex,
Object
val)
Assigns the specified Object reference to each element of the specified
 range of the specified array of Objects.
static void
Arrays.
fill
(
Object
[] a,
Object
val)
Assigns the specified Object reference to each element of the specified
 array of Objects.
Formatter
Formatter.
format
(
String
format,
Object
... args)
Writes a formatted string to this object's destination using the
 specified format string and arguments.
Formatter
Formatter.
format
(
Locale
l,
String
format,
Object
... args)
Writes a formatted string to this object's destination using the
 specified locale, format string, and arguments.
static int
Collections.
frequency
(
Collection
<?> c,
Object
o)
Returns the number of elements in the specified collection equal to the
 specified object.
V
AbstractMap.
get
(
Object
key)
Returns the value to which the specified key is mapped,
 or
null
if this map contains no mapping for the key.
abstract
V
Dictionary.
get
(
Object
key)
Returns the value to which the key is mapped in this dictionary.
V
EnumMap.
get
(
Object
key)
Returns the value to which the specified key is mapped,
 or
null
if this map contains no mapping for the key.
V
HashMap.
get
(
Object
key)
Returns the value to which the specified key is mapped,
 or
null
if this map contains no mapping for the key.
V
Hashtable.
get
(
Object
key)
Returns the value to which the specified key is mapped,
 or
null
if this map contains no mapping for the key.
V
IdentityHashMap.
get
(
Object
key)
Returns the value to which the specified key is mapped,
 or
null
if this map contains no mapping for the key.
V
LinkedHashMap.
get
(
Object
key)
Returns the value to which the specified key is mapped,
 or
null
if this map contains no mapping for the key.
V
Map.
get
(
Object
key)
Returns the value to which the specified key is mapped,
 or
null
if this map contains no mapping for the key.
V
TreeMap.
get
(
Object
key)
Returns the value to which the specified key is mapped,
 or
null
if this map contains no mapping for the key.
V
WeakHashMap.
get
(
Object
key)
Returns the value to which the specified key is mapped,
 or
null
if this map contains no mapping for the key.
default
V
Map.
getOrDefault
(
Object
key,
V
defaultValue)
Returns the value to which the specified key is mapped, or
defaultValue
if this map contains no mapping for the key.
static int
Objects.
hash
(
Object
... values)
Generates a hash code for a sequence of input values.
static int
Arrays.
hashCode
(
Object
[] a)
Returns a hash code based on the contents of the specified array.
static int
Objects.
hashCode
(
Object
o)
Returns the hash code of a non-
null
argument and 0 for
 a
null
argument.
int
AbstractList.
indexOf
(
Object
o)
Returns the index of the first occurrence of the specified element
 in this list, or -1 if this list does not contain the element.
int
ArrayList.
indexOf
(
Object
o)
Returns the index of the first occurrence of the specified element
 in this list, or -1 if this list does not contain the element.
int
LinkedList.
indexOf
(
Object
o)
Returns the index of the first occurrence of the specified element
 in this list, or -1 if this list does not contain the element.
int
List.
indexOf
(
Object
o)
Returns the index of the first occurrence of the specified element
 in this list, or -1 if this list does not contain the element.
int
Vector.
indexOf
(
Object
o)
Returns the index of the first occurrence of the specified element
 in this vector, or -1 if this vector does not contain the element.
int
Vector.
indexOf
(
Object
o,
 int index)
Returns the index of the first occurrence of the specified element in
 this vector, searching forwards from
index
, or returns -1 if
 the element is not found.
static boolean
Objects.
isNull
(
Object
obj)
Returns
true
if the provided reference is
null
otherwise
 returns
false
.
int
AbstractList.
lastIndexOf
(
Object
o)
Returns the index of the last occurrence of the specified element
 in this list, or -1 if this list does not contain the element.
int
ArrayList.
lastIndexOf
(
Object
o)
Returns the index of the last occurrence of the specified element
 in this list, or -1 if this list does not contain the element.
int
LinkedList.
lastIndexOf
(
Object
o)
Returns the index of the last occurrence of the specified element
 in this list, or -1 if this list does not contain the element.
int
List.
lastIndexOf
(
Object
o)
Returns the index of the last occurrence of the specified element
 in this list, or -1 if this list does not contain the element.
int
Vector.
lastIndexOf
(
Object
o)
Returns the index of the last occurrence of the specified element
 in this vector, or -1 if this vector does not contain the element.
int
Vector.
lastIndexOf
(
Object
o,
 int index)
Returns the index of the last occurrence of the specified element in
 this vector, searching backwards from
index
, or returns -1 if
 the element is not found.
static int
Arrays.
mismatch
(
Object
[] a,
 int aFromIndex,
 int aToIndex,
Object
[] b,
 int bFromIndex,
 int bToIndex)
Finds and returns the relative index of the first mismatch between two
Object
arrays over the specified ranges, otherwise return -1 if
 no mismatch is found.
static int
Arrays.
mismatch
(
Object
[] a,
Object
[] b)
Finds and returns the index of the first mismatch between two
Object
arrays, otherwise return -1 if no mismatch is found.
static <T> int
Arrays.
mismatch
(T[] a,
 int aFromIndex,
 int aToIndex,
 T[] b,
 int bFromIndex,
 int bToIndex,
Comparator
<? super T> cmp)
Finds and returns the relative index of the first mismatch between two
Object
arrays over the specified ranges, otherwise return -1 if
 no mismatch is found.
static <T> int
Arrays.
mismatch
(T[] a,
 T[] b,
Comparator
<? super T> cmp)
Finds and returns the index of the first mismatch between two
Object
arrays, otherwise return -1 if no mismatch is found.
static boolean
Objects.
nonNull
(
Object
obj)
Returns
true
if the provided reference is non-
null
otherwise returns
false
.
void
Observable.
notifyObservers
(
Object
arg)
Deprecated.
If this object has changed, as indicated by the
hasChanged
method, then notify all of its observers
 and then call the
clearChanged
method to indicate
 that this object has no longer changed.
static <E>
List
<E>
List.
of
(E... elements)
Returns an unmodifiable list containing an arbitrary number of elements.
static <E>
Set
<E>
Set.
of
(E... elements)
Returns an unmodifiable set containing an arbitrary number of elements.
static <T> void
Arrays.
parallelPrefix
(T[] array,
 int fromIndex,
 int toIndex,
BinaryOperator
<T> op)
Performs
Arrays.parallelPrefix(Object[], BinaryOperator)
for the given subrange of the array.
static <T> void
Arrays.
parallelPrefix
(T[] array,
BinaryOperator
<T> op)
Cumulates, in parallel, each element of the given array in place,
 using the supplied function.
static <T> void
Arrays.
parallelSetAll
(T[] array,
IntFunction
<? extends T> generator)
Set all elements of the specified array, in parallel, using the
 provided generator function to compute each element.
static <T> void
Arrays.
parallelSort
(T[] a,
 int fromIndex,
 int toIndex,
Comparator
<? super T> cmp)
Sorts the specified range of the specified array of objects according
 to the order induced by the specified comparator.
static <T> void
Arrays.
parallelSort
(T[] a,
Comparator
<? super T> cmp)
Sorts the specified array of objects according to the order induced by
 the specified comparator.
boolean
AbstractCollection.
remove
(
Object
o)
Removes a single instance of the specified element from this
 collection, if it is present (optional operation).
V
AbstractMap.
remove
(
Object
key)
Removes the mapping for a key from this map if it is present
 (optional operation).
boolean
ArrayDeque.
remove
(
Object
o)
Removes a single instance of the specified element from this deque.
boolean
ArrayList.
remove
(
Object
o)
Removes the first occurrence of the specified element from this list,
 if it is present.
boolean
Collection.
remove
(
Object
o)
Removes a single instance of the specified element from this
 collection, if it is present (optional operation).
boolean
Deque.
remove
(
Object
o)
Removes the first occurrence of the specified element from this deque.
abstract
V
Dictionary.
remove
(
Object
key)
Removes the
key
(and its corresponding
value
) from this dictionary.
V
EnumMap.
remove
(
Object
key)
Removes the mapping for this key from this map if present.
V
HashMap.
remove
(
Object
key)
Removes the mapping for the specified key from this map if present.
boolean
HashSet.
remove
(
Object
o)
Removes the specified element from this set if it is present.
V
Hashtable.
remove
(
Object
key)
Removes the key (and its corresponding value) from this
 hashtable.
V
IdentityHashMap.
remove
(
Object
key)
Removes the mapping for this key from this map if present.
boolean
IdentityHashMap.
remove
(
Object
key,
Object
value)
Removes the entry for the specified key only if it is currently
 mapped to the specified value.
boolean
LinkedList.
remove
(
Object
o)
Removes the first occurrence of the specified element from this list,
 if it is present.
boolean
List.
remove
(
Object
o)
Removes the first occurrence of the specified element from this list,
 if it is present (optional operation).
V
Map.
remove
(
Object
key)
Removes the mapping for a key from this map if it is present
 (optional operation).
default boolean
Map.
remove
(
Object
key,
Object
value)
Removes the entry for the specified key only if it is currently
 mapped to the specified value.
boolean
PriorityQueue.
remove
(
Object
o)
Removes a single instance of the specified element from this queue,
 if it is present.
boolean
Set.
remove
(
Object
o)
Removes the specified element from this set if it is present
 (optional operation).
V
TreeMap.
remove
(
Object
key)
Removes the mapping for this key from this TreeMap if present.
boolean
TreeSet.
remove
(
Object
o)
Removes the specified element from this set if it is present.
boolean
Vector.
remove
(
Object
o)
Removes the first occurrence of the specified element in this Vector
 If the Vector does not contain the element, it is unchanged.
V
WeakHashMap.
remove
(
Object
key)
Removes the mapping for a key from this weak hash map if it is present.
boolean
Vector.
removeElement
(
Object
obj)
Removes the first (lowest-indexed) occurrence of the argument
 from this vector.
boolean
ArrayDeque.
removeFirstOccurrence
(
Object
o)
Removes the first occurrence of the specified element in this
 deque (when traversing the deque from head to tail).
boolean
Deque.
removeFirstOccurrence
(
Object
o)
Removes the first occurrence of the specified element from this deque.
boolean
LinkedList.
removeFirstOccurrence
(
Object
o)
Removes the first occurrence of the specified element in this
 list (when traversing the list from head to tail).
boolean
ArrayDeque.
removeLastOccurrence
(
Object
o)
Removes the last occurrence of the specified element in this
 deque (when traversing the deque from head to tail).
boolean
Deque.
removeLastOccurrence
(
Object
o)
Removes the last occurrence of the specified element from this deque.
boolean
LinkedList.
removeLastOccurrence
(
Object
o)
Removes the last occurrence of the specified element in this
 list (when traversing the list from head to tail).
int
Stack.
search
(
Object
o)
Returns the 1-based position where an object is on this stack.
static <T> void
Arrays.
setAll
(T[] array,
IntFunction
<? extends T> generator)
Set all elements of the specified array, using the provided
 generator function to compute each element.
static void
Arrays.
sort
(
Object
[] a)
Sorts the specified array of objects into ascending order, according
 to the
natural ordering
of its elements.
static void
Arrays.
sort
(
Object
[] a,
 int fromIndex,
 int toIndex)
Sorts the specified range of the specified array of objects into
 ascending order, according to the
natural ordering
of its
 elements.
static <T> void
Arrays.
sort
(T[] a,
 int fromIndex,
 int toIndex,
Comparator
<? super T> c)
Sorts the specified range of the specified array of objects according
 to the order induced by the specified comparator.
static <T> void
Arrays.
sort
(T[] a,
Comparator
<? super T> c)
Sorts the specified array of objects according to the order induced by
 the specified comparator.
static <T>
Spliterator
<T>
Arrays.
spliterator
(T[] array)
Returns a
Spliterator
covering all of the specified array.
static <T>
Spliterator
<T>
Arrays.
spliterator
(T[] array,
 int startInclusive,
 int endExclusive)
Returns a
Spliterator
covering the specified range of the
 specified array.
static <T>
Spliterator
<T>
Spliterators.
spliterator
(
Object
[] array,
 int additionalCharacteristics)
Creates a
Spliterator
covering the elements of a given array,
 using a customized set of spliterator characteristics.
static <T>
Spliterator
<T>
Spliterators.
spliterator
(
Object
[] array,
 int fromIndex,
 int toIndex,
 int additionalCharacteristics)
Creates a
Spliterator
covering a range of elements of a given
 array, using a customized set of spliterator characteristics.
static <T>
Stream
<T>
Arrays.
stream
(T[] array)
Returns a sequential
Stream
with the specified array as its
 source.
static <T>
Stream
<T>
Arrays.
stream
(T[] array,
 int startInclusive,
 int endExclusive)
Returns a sequential
Stream
with the specified range of the
 specified array as its source.
<T> T[]
AbstractCollection.
toArray
(T[] a)
Returns an array containing all of the elements in this collection;
 the runtime type of the returned array is that of the specified array.
<T> T[]
ArrayDeque.
toArray
(T[] a)
Returns an array containing all of the elements in this deque in
 proper sequence (from first to last element); the runtime type of the
 returned array is that of the specified array.
<T> T[]
ArrayList.
toArray
(T[] a)
Returns an array containing all of the elements in this list in proper
 sequence (from first to last element); the runtime type of the returned
 array is that of the specified array.
<T> T[]
Collection.
toArray
(T[] a)
Returns an array containing all of the elements in this collection;
 the runtime type of the returned array is that of the specified array.
<T> T[]
HashSet.
toArray
(T[] a)
<T> T[]
LinkedList.
toArray
(T[] a)
Returns an array containing all of the elements in this list in
 proper sequence (from first to last element); the runtime type of
 the returned array is that of the specified array.
<T> T[]
List.
toArray
(T[] a)
Returns an array containing all of the elements in this list in
 proper sequence (from first to last element); the runtime type of
 the returned array is that of the specified array.
<T> T[]
PriorityQueue.
toArray
(T[] a)
Returns an array containing all of the elements in this queue; the
 runtime type of the returned array is that of the specified array.
<T> T[]
Set.
toArray
(T[] a)
Returns an array containing all of the elements in this set; the
 runtime type of the returned array is that of the specified array.
<T> T[]
Vector.
toArray
(T[] a)
Returns an array containing all of the elements in this Vector in the
 correct order; the runtime type of the returned array is that of the
 specified array.
static
String
Objects.
toIdentityString
(
Object
o)
Returns a string equivalent to the string returned by
Object.toString
if that method and
hashCode
are not
 overridden.
static
String
Arrays.
toString
(
Object
[] a)
Returns a string representation of the contents of the specified array.
static
String
Objects.
toString
(
Object
o)
Returns the result of calling
toString
for a non-
null
argument and
"null"
for a
null
argument.
static
String
Objects.
toString
(
Object
o,
String
nullDefault)
Returns the result of calling
toString
on the first
 argument if the first argument is not
null
and returns
 the second argument otherwise.
void
Observer.
update
(
Observable
o,
Object
arg)
Deprecated.
This method is called whenever the observed object is changed.
Constructors in
java.util
with parameters of type
Object
Modifier
Constructor
Description
EventObject
(
Object
source)
Constructs a prototypical Event.
Uses of
Object
in
java.util.concurrent
Subclasses of
Object
in
java.util.concurrent
Modifier and Type
Class
Description
class
AbstractExecutorService
Provides default implementations of
ExecutorService
execution methods.
class
ArrayBlockingQueue
<E>
A bounded
blocking queue
backed by an
 array.
class
BrokenBarrierException
Exception thrown when a thread tries to wait upon a barrier that is
 in a broken state, or which enters the broken state while the thread
 is waiting.
class
CancellationException
Exception indicating that the result of a value-producing task,
 such as a
FutureTask
, cannot be retrieved because the task
 was cancelled.
class
CompletableFuture
<T>
A
Future
that may be explicitly completed (setting its
 value and status), and may be used as a
CompletionStage
,
 supporting dependent functions and actions that trigger upon its
 completion.
class
CompletionException
Exception thrown when an error or other exception is encountered
 in the course of completing a result or task.
class
ConcurrentHashMap
<K,
V>
A hash table supporting full concurrency of retrievals and
 high expected concurrency for updates.
static final class
ConcurrentHashMap.KeySetView
<K,
V>
A view of a ConcurrentHashMap as a
Set
of keys, in
 which additions may optionally be enabled by mapping to a
 common value.
class
ConcurrentLinkedDeque
<E>
An unbounded concurrent
deque
based on linked nodes.
class
ConcurrentLinkedQueue
<E>
An unbounded thread-safe
queue
based on linked nodes.
class
ConcurrentSkipListMap
<K,
V>
A scalable concurrent
ConcurrentNavigableMap
implementation.
class
ConcurrentSkipListSet
<E>
A scalable concurrent
NavigableSet
implementation based on
 a
ConcurrentSkipListMap
.
class
CopyOnWriteArrayList
<E>
A thread-safe variant of
ArrayList
in which all mutative
 operations (
add
,
set
, and so on) are implemented by
 making a fresh copy of the underlying array.
class
CopyOnWriteArraySet
<E>
A
Set
that uses an internal
CopyOnWriteArrayList
for all of its operations.
class
CountDownLatch
A synchronization aid that allows one or more threads to wait until
 a set of operations being performed in other threads completes.
class
CountedCompleter
<T>
A
ForkJoinTask
with a completion action performed when
 triggered and there are no remaining pending actions.
class
CyclicBarrier
A synchronization aid that allows a set of threads to all wait for
 each other to reach a common barrier point.
class
DelayQueue
<E extends
Delayed
>
An unbounded
blocking queue
of
Delayed
elements, in which an element generally becomes eligible for removal when its
 delay has expired.
class
Exchanger
<V>
A synchronization point at which threads can pair and swap elements
 within pairs.
class
ExecutionException
Exception thrown when attempting to retrieve the result of a task
 that aborted by throwing an exception.
class
ExecutorCompletionService
<V>
A
CompletionService
that uses a supplied
Executor
to execute tasks.
class
Executors
Factory and utility methods for
Executor
,
ExecutorService
,
ScheduledExecutorService
,
ThreadFactory
, and
Callable
classes defined in this
 package.
final class
Flow
Interrelated interfaces and static methods for establishing
 flow-controlled components in which
Publishers
produce items consumed by one or more
Subscribers
, each managed by a
Subscription
.
class
ForkJoinPool
An
ExecutorService
for running
ForkJoinTask
s.
class
ForkJoinTask
<V>
Abstract base class for tasks that run within a
ForkJoinPool
.
class
ForkJoinWorkerThread
A thread managed by a
ForkJoinPool
, which executes
ForkJoinTask
s.
class
FutureTask
<V>
A cancellable asynchronous computation.
class
LinkedBlockingDeque
<E>
An optionally-bounded
blocking deque
based on
 linked nodes.
class
LinkedBlockingQueue
<E>
An optionally-bounded
blocking queue
based on
 linked nodes.
class
LinkedTransferQueue
<E>
An unbounded
TransferQueue
based on linked nodes.
class
Phaser
A reusable synchronization barrier, similar in functionality to
CyclicBarrier
and
CountDownLatch
but supporting
 more flexible usage.
class
PriorityBlockingQueue
<E>
An unbounded
blocking queue
that uses
 the same ordering rules as class
PriorityQueue
and supplies
 blocking retrieval operations.
class
RecursiveAction
A recursive resultless
ForkJoinTask
.
class
RecursiveTask
<V>
A recursive result-bearing
ForkJoinTask
.
class
RejectedExecutionException
Exception thrown by an
Executor
when a task cannot be
 accepted for execution.
class
ScheduledThreadPoolExecutor
A
ThreadPoolExecutor
that can additionally schedule
 commands to run after a given delay, or to execute periodically.
class
Semaphore
A counting semaphore.
class
StructuredTaskScope
PREVIEW
<T>
Preview.
A basic API for
structured concurrency
.
static final class
StructuredTaskScope.ShutdownOnFailure
PREVIEW
Preview.
A
StructuredTaskScope
that captures the exception of the first subtask to
fail
PREVIEW
.
static final class
StructuredTaskScope.ShutdownOnSuccess
PREVIEW
<T>
Preview.
A
StructuredTaskScope
that captures the result of the first subtask to
 complete
successfully
PREVIEW
.
final class
StructureViolationException
PREVIEW
Preview.
Thrown when a structure violation is detected.
class
SubmissionPublisher
<T>
A
Flow.Publisher
that asynchronously issues submitted
 (non-null) items to current subscribers until it is closed.
class
SynchronousQueue
<E>
A
blocking queue
in which each insert
 operation must wait for a corresponding remove operation by another
 thread, and vice versa.
final class
ThreadLocalRandom
A random number generator (with period 2
64
) isolated
 to the current thread.
class
ThreadPoolExecutor
An
ExecutorService
that executes each submitted task using
 one of possibly several pooled threads, normally configured
 using
Executors
factory methods.
static class
ThreadPoolExecutor.AbortPolicy
A handler for rejected tasks that throws a
RejectedExecutionException
.
static class
ThreadPoolExecutor.CallerRunsPolicy
A handler for rejected tasks that runs the rejected task
 directly in the calling thread of the
execute
method,
 unless the executor has been shut down, in which case the task
 is discarded.
static class
ThreadPoolExecutor.DiscardOldestPolicy
A handler for rejected tasks that discards the oldest unhandled
 request and then retries
execute
, unless the executor
 is shut down, in which case the task is discarded.
static class
ThreadPoolExecutor.DiscardPolicy
A handler for rejected tasks that silently discards the
 rejected task.
class
TimeoutException
Exception thrown when a blocking operation times out.
Methods in
java.util.concurrent
that return
Object
Modifier and Type
Method
Description
Object
CopyOnWriteArrayList.
clone
()
Returns a shallow copy of this list.
Object
[]
ArrayBlockingQueue.
toArray
()
Returns an array containing all of the elements in this queue, in
 proper sequence.
<T> T[]
ArrayBlockingQueue.
toArray
(T[] a)
Returns an array containing all of the elements in this queue, in
 proper sequence; the runtime type of the returned array is that of
 the specified array.
Object
[]
ConcurrentLinkedDeque.
toArray
()
Returns an array containing all of the elements in this deque, in
 proper sequence (from first to last element).
<T> T[]
ConcurrentLinkedDeque.
toArray
(T[] a)
Returns an array containing all of the elements in this deque,
 in proper sequence (from first to last element); the runtime
 type of the returned array is that of the specified array.
Object
[]
ConcurrentLinkedQueue.
toArray
()
Returns an array containing all of the elements in this queue, in
 proper sequence.
<T> T[]
ConcurrentLinkedQueue.
toArray
(T[] a)
Returns an array containing all of the elements in this queue, in
 proper sequence; the runtime type of the returned array is that of
 the specified array.
Object
[]
CopyOnWriteArrayList.
toArray
()
Returns an array containing all of the elements in this list
 in proper sequence (from first to last element).
<T> T[]
CopyOnWriteArrayList.
toArray
(T[] a)
Returns an array containing all of the elements in this list in
 proper sequence (from first to last element); the runtime type of
 the returned array is that of the specified array.
Object
[]
CopyOnWriteArraySet.
toArray
()
Returns an array containing all of the elements in this set.
<T> T[]
CopyOnWriteArraySet.
toArray
(T[] a)
Returns an array containing all of the elements in this set; the
 runtime type of the returned array is that of the specified array.
Object
[]
DelayQueue.
toArray
()
Returns an array containing all of the elements in this queue.
<T> T[]
DelayQueue.
toArray
(T[] a)
Returns an array containing all of the elements in this queue; the
 runtime type of the returned array is that of the specified array.
Object
[]
LinkedBlockingDeque.
toArray
()
Returns an array containing all of the elements in this deque, in
 proper sequence (from first to last element).
<T> T[]
LinkedBlockingDeque.
toArray
(T[] a)
Returns an array containing all of the elements in this deque, in
 proper sequence; the runtime type of the returned array is that of
 the specified array.
Object
[]
LinkedBlockingQueue.
toArray
()
Returns an array containing all of the elements in this queue, in
 proper sequence.
<T> T[]
LinkedBlockingQueue.
toArray
(T[] a)
Returns an array containing all of the elements in this queue, in
 proper sequence; the runtime type of the returned array is that of
 the specified array.
Object
[]
LinkedTransferQueue.
toArray
()
Returns an array containing all of the elements in this queue, in
 proper sequence.
<T> T[]
LinkedTransferQueue.
toArray
(T[] a)
Returns an array containing all of the elements in this queue, in
 proper sequence; the runtime type of the returned array is that of
 the specified array.
Object
[]
PriorityBlockingQueue.
toArray
()
Returns an array containing all of the elements in this queue.
<T> T[]
PriorityBlockingQueue.
toArray
(T[] a)
Returns an array containing all of the elements in this queue; the
 runtime type of the returned array is that of the specified array.
Object
[]
SynchronousQueue.
toArray
()
Returns a zero-length array.
<T> T[]
SynchronousQueue.
toArray
(T[] a)
Sets the zeroth element of the specified array to
null
(if the array has non-zero length) and returns it.
Methods in
java.util.concurrent
that return types with arguments of type
Object
Modifier and Type
Method
Description
static
CompletableFuture
<
Object
>
CompletableFuture.
anyOf
(
CompletableFuture
<?>... cfs)
Returns a new CompletableFuture that is completed when any of
 the given CompletableFutures complete, with the same result.
static
Callable
<
Object
>
Executors.
callable
(
Runnable
task)
Returns a
Callable
object that, when
 called, runs the given task and returns
null
.
static
Callable
<
Object
>
Executors.
callable
(
PrivilegedAction
<?> action)
Returns a
Callable
object that, when
 called, runs the given privileged action and returns its result.
static
Callable
<
Object
>
Executors.
callable
(
PrivilegedExceptionAction
<?> action)
Returns a
Callable
object that, when
 called, runs the given privileged exception action and returns
 its result.
Methods in
java.util.concurrent
with parameters of type
Object
Modifier and Type
Method
Description
boolean
ArrayBlockingQueue.
contains
(
Object
o)
Returns
true
if this queue contains the specified element.
boolean
BlockingDeque.
contains
(
Object
o)
Returns
true
if this deque contains the specified element.
boolean
BlockingQueue.
contains
(
Object
o)
Returns
true
if this queue contains the specified element.
boolean
ConcurrentHashMap.
contains
(
Object
value)
Tests if some key maps into the specified value in this table.
boolean
ConcurrentHashMap.KeySetView.
contains
(
Object
o)
Returns
true
if this collection contains the specified element.
boolean
ConcurrentLinkedDeque.
contains
(
Object
o)
Returns
true
if this deque contains the specified element.
boolean
ConcurrentLinkedQueue.
contains
(
Object
o)
Returns
true
if this queue contains the specified element.
boolean
ConcurrentSkipListSet.
contains
(
Object
o)
Returns
true
if this set contains the specified element.
boolean
CopyOnWriteArrayList.
contains
(
Object
o)
Returns
true
if this list contains the specified element.
boolean
CopyOnWriteArraySet.
contains
(
Object
o)
Returns
true
if this set contains the specified element.
boolean
LinkedBlockingDeque.
contains
(
Object
o)
Returns
true
if this deque contains the specified element.
boolean
LinkedBlockingQueue.
contains
(
Object
o)
Returns
true
if this queue contains the specified element.
boolean
LinkedTransferQueue.
contains
(
Object
o)
Returns
true
if this queue contains the specified element.
boolean
PriorityBlockingQueue.
contains
(
Object
o)
Returns
true
if this queue contains the specified element.
boolean
SynchronousQueue.
contains
(
Object
o)
Always returns
false
.
boolean
ConcurrentHashMap.
containsKey
(
Object
key)
Tests if the specified object is a key in this table.
boolean
ConcurrentSkipListMap.
containsKey
(
Object
key)
Returns
true
if this map contains a mapping for the specified
 key.
boolean
ConcurrentHashMap.
containsValue
(
Object
value)
Returns
true
if this map maps one or more keys to the
 specified value.
boolean
ConcurrentSkipListMap.
containsValue
(
Object
value)
Returns
true
if this map maps one or more keys to the
 specified value.
boolean
ConcurrentHashMap.
equals
(
Object
o)
Compares the specified object with this map for equality.
boolean
ConcurrentHashMap.KeySetView.
equals
(
Object
o)
boolean
ConcurrentSkipListMap.
equals
(
Object
o)
Compares the specified object with this map for equality.
boolean
ConcurrentSkipListSet.
equals
(
Object
o)
Compares the specified object with this set for equality.
boolean
CopyOnWriteArrayList.
equals
(
Object
o)
Compares the specified object with this list for equality.
boolean
CopyOnWriteArraySet.
equals
(
Object
o)
Compares the specified object with this set for equality.
V
ConcurrentHashMap.
get
(
Object
key)
Returns the value to which the specified key is mapped,
 or
null
if this map contains no mapping for the key.
V
ConcurrentSkipListMap.
get
(
Object
key)
Returns the value to which the specified key is mapped,
 or
null
if this map contains no mapping for the key.
V
ConcurrentHashMap.
getOrDefault
(
Object
key,
V
defaultValue)
Returns the value to which the specified key is mapped, or the
 given default value if this map contains no mapping for the
 key.
default
V
ConcurrentMap.
getOrDefault
(
Object
key,
V
defaultValue)
Returns the value to which the specified key is mapped, or
defaultValue
if this map contains no mapping for the key.
V
ConcurrentSkipListMap.
getOrDefault
(
Object
key,
V
defaultValue)
Returns the value to which the specified key is mapped,
 or the given defaultValue if this map contains no mapping for the key.
int
CopyOnWriteArrayList.
indexOf
(
Object
o)
Returns the index of the first occurrence of the specified element
 in this list, or -1 if this list does not contain the element.
int
CopyOnWriteArrayList.
lastIndexOf
(
Object
o)
Returns the index of the last occurrence of the specified element
 in this list, or -1 if this list does not contain the element.
boolean
ArrayBlockingQueue.
remove
(
Object
o)
Removes a single instance of the specified element from this queue,
 if it is present.
boolean
BlockingDeque.
remove
(
Object
o)
Removes the first occurrence of the specified element from this deque.
boolean
BlockingQueue.
remove
(
Object
o)
Removes a single instance of the specified element from this queue,
 if it is present.
boolean
ConcurrentHashMap.KeySetView.
remove
(
Object
o)
Removes the key from this map view, by removing the key (and its
 corresponding value) from the backing map.
V
ConcurrentHashMap.
remove
(
Object
key)
Removes the key (and its corresponding value) from this map.
boolean
ConcurrentHashMap.
remove
(
Object
key,
Object
value)
Removes the entry for a key only if currently mapped to a given value.
boolean
ConcurrentLinkedDeque.
remove
(
Object
o)
Removes the first occurrence of the specified element from this deque.
boolean
ConcurrentLinkedQueue.
remove
(
Object
o)
Removes a single instance of the specified element from this queue,
 if it is present.
boolean
ConcurrentMap.
remove
(
Object
key,
Object
value)
Removes the entry for a key only if currently mapped to a given value.
V
ConcurrentSkipListMap.
remove
(
Object
key)
Removes the mapping for the specified key from this map if present.
boolean
ConcurrentSkipListMap.
remove
(
Object
key,
Object
value)
Removes the entry for a key only if currently mapped to a given value.
boolean
ConcurrentSkipListSet.
remove
(
Object
o)
Removes the specified element from this set if it is present.
boolean
CopyOnWriteArrayList.
remove
(
Object
o)
Removes the first occurrence of the specified element from this list,
 if it is present.
boolean
CopyOnWriteArraySet.
remove
(
Object
o)
Removes the specified element from this set if it is present.
boolean
DelayQueue.
remove
(
Object
o)
Removes a single instance of the specified element from this
 queue, if it is present, whether or not it has expired.
boolean
LinkedBlockingDeque.
remove
(
Object
o)
Removes the first occurrence of the specified element from this deque.
boolean
LinkedBlockingQueue.
remove
(
Object
o)
Removes a single instance of the specified element from this queue,
 if it is present.
boolean
LinkedTransferQueue.
remove
(
Object
o)
Removes a single instance of the specified element from this queue,
 if it is present.
boolean
PriorityBlockingQueue.
remove
(
Object
o)
Removes a single instance of the specified element from this queue,
 if it is present.
boolean
SynchronousQueue.
remove
(
Object
o)
Always returns
false
.
boolean
BlockingDeque.
removeFirstOccurrence
(
Object
o)
Removes the first occurrence of the specified element from this deque.
boolean
ConcurrentLinkedDeque.
removeFirstOccurrence
(
Object
o)
Removes the first occurrence of the specified element from this deque.
boolean
LinkedBlockingDeque.
removeFirstOccurrence
(
Object
o)
boolean
BlockingDeque.
removeLastOccurrence
(
Object
o)
Removes the last occurrence of the specified element from this deque.
boolean
ConcurrentLinkedDeque.
removeLastOccurrence
(
Object
o)
Removes the last occurrence of the specified element from this deque.
boolean
LinkedBlockingDeque.
removeLastOccurrence
(
Object
o)
void
TimeUnit.
timedWait
(
Object
obj,
 long timeout)
Performs a timed
Object.wait
using this time unit.
<T> T[]
ArrayBlockingQueue.
toArray
(T[] a)
Returns an array containing all of the elements in this queue, in
 proper sequence; the runtime type of the returned array is that of
 the specified array.
<T> T[]
ConcurrentLinkedDeque.
toArray
(T[] a)
Returns an array containing all of the elements in this deque,
 in proper sequence (from first to last element); the runtime
 type of the returned array is that of the specified array.
<T> T[]
ConcurrentLinkedQueue.
toArray
(T[] a)
Returns an array containing all of the elements in this queue, in
 proper sequence; the runtime type of the returned array is that of
 the specified array.
<T> T[]
CopyOnWriteArrayList.
toArray
(T[] a)
Returns an array containing all of the elements in this list in
 proper sequence (from first to last element); the runtime type of
 the returned array is that of the specified array.
<T> T[]
CopyOnWriteArraySet.
toArray
(T[] a)
Returns an array containing all of the elements in this set; the
 runtime type of the returned array is that of the specified array.
<T> T[]
DelayQueue.
toArray
(T[] a)
Returns an array containing all of the elements in this queue; the
 runtime type of the returned array is that of the specified array.
<T> T[]
LinkedBlockingDeque.
toArray
(T[] a)
Returns an array containing all of the elements in this deque, in
 proper sequence; the runtime type of the returned array is that of
 the specified array.
<T> T[]
LinkedBlockingQueue.
toArray
(T[] a)
Returns an array containing all of the elements in this queue, in
 proper sequence; the runtime type of the returned array is that of
 the specified array.
<T> T[]
LinkedTransferQueue.
toArray
(T[] a)
Returns an array containing all of the elements in this queue, in
 proper sequence; the runtime type of the returned array is that of
 the specified array.
<T> T[]
PriorityBlockingQueue.
toArray
(T[] a)
Returns an array containing all of the elements in this queue; the
 runtime type of the returned array is that of the specified array.
<T> T[]
SynchronousQueue.
toArray
(T[] a)
Sets the zeroth element of the specified array to
null
(if the array has non-zero length) and returns it.
Constructors in
java.util.concurrent
with parameters of type
Object
Modifier
Constructor
Description
CopyOnWriteArrayList
(
E
[] toCopyIn)
Creates a list holding a copy of the given array.
Uses of
Object
in
java.util.concurrent.atomic
Subclasses of
Object
in
java.util.concurrent.atomic
Modifier and Type
Class
Description
class
AtomicBoolean
A
boolean
value that may be updated atomically.
class
AtomicInteger
An
int
value that may be updated atomically.
class
AtomicIntegerArray
An
int
array in which elements may be updated atomically.
class
AtomicIntegerFieldUpdater
<T>
A reflection-based utility that enables atomic updates to
 designated
volatile int
fields of designated classes.
class
AtomicLong
A
long
value that may be updated atomically.
class
AtomicLongArray
A
long
array in which elements may be updated atomically.
class
AtomicLongFieldUpdater
<T>
A reflection-based utility that enables atomic updates to
 designated
volatile long
fields of designated classes.
class
AtomicMarkableReference
<V>
An
AtomicMarkableReference
maintains an object reference
 along with a mark bit, that can be updated atomically.
class
AtomicReference
<V>
An object reference that may be updated atomically.
class
AtomicReferenceArray
<E>
An array of object references in which elements may be updated
 atomically.
class
AtomicReferenceFieldUpdater
<T,
V>
A reflection-based utility that enables atomic updates to
 designated
volatile
reference fields of designated
 classes.
class
AtomicStampedReference
<V>
An
AtomicStampedReference
maintains an object reference
 along with an integer "stamp", that can be updated atomically.
class
DoubleAccumulator
One or more variables that together maintain a running
double
value updated using a supplied function.
class
DoubleAdder
One or more variables that together maintain an initially zero
double
sum.
class
LongAccumulator
One or more variables that together maintain a running
long
value updated using a supplied function.
class
LongAdder
One or more variables that together maintain an initially zero
long
sum.
Constructors in
java.util.concurrent.atomic
with parameters of type
Object
Modifier
Constructor
Description
AtomicReferenceArray
(
E
[] array)
Creates a new AtomicReferenceArray with the same length as, and
 all elements copied from, the given array.
Uses of
Object
in
java.util.concurrent.locks
Subclasses of
Object
in
java.util.concurrent.locks
Modifier and Type
Class
Description
class
AbstractOwnableSynchronizer
A synchronizer that may be exclusively owned by a thread.
class
AbstractQueuedLongSynchronizer
A version of
AbstractQueuedSynchronizer
in
 which synchronization state is maintained as a
long
.
class
AbstractQueuedLongSynchronizer.ConditionObject
Condition implementation for a
AbstractQueuedLongSynchronizer
serving as the basis of a
Lock
implementation.
class
AbstractQueuedSynchronizer
Provides a framework for implementing blocking locks and related
 synchronizers (semaphores, events, etc) that rely on
 first-in-first-out (FIFO) wait queues.
class
AbstractQueuedSynchronizer.ConditionObject
Condition implementation for a
AbstractQueuedSynchronizer
serving as the basis of a
Lock
implementation.
class
LockSupport
Basic thread blocking primitives for creating locks and other
 synchronization classes.
class
ReentrantLock
A reentrant mutual exclusion
Lock
with the same basic
 behavior and semantics as the implicit monitor lock accessed using
synchronized
methods and statements, but with extended
 capabilities.
class
ReentrantReadWriteLock
An implementation of
ReadWriteLock
supporting similar
 semantics to
ReentrantLock
.
static class
ReentrantReadWriteLock.ReadLock
The lock returned by method
ReentrantReadWriteLock.readLock()
.
static class
ReentrantReadWriteLock.WriteLock
The lock returned by method
ReentrantReadWriteLock.writeLock()
.
class
StampedLock
A capability-based lock with three modes for controlling read/write
 access.
Methods in
java.util.concurrent.locks
that return
Object
Modifier and Type
Method
Description
static
Object
LockSupport.
getBlocker
(
Thread
t)
Returns the blocker object supplied to the most recent
 invocation of a park method that has not yet unblocked, or null
 if not blocked.
Methods in
java.util.concurrent.locks
with parameters of type
Object
Modifier and Type
Method
Description
static void
LockSupport.
park
(
Object
blocker)
Disables the current thread for thread scheduling purposes unless the
 permit is available.
static void
LockSupport.
parkNanos
(
Object
blocker,
 long nanos)
Disables the current thread for thread scheduling purposes, for up to
 the specified waiting time, unless the permit is available.
static void
LockSupport.
parkUntil
(
Object
blocker,
 long deadline)
Disables the current thread for thread scheduling purposes, until
 the specified deadline, unless the permit is available.
static void
LockSupport.
setCurrentBlocker
(
Object
blocker)
Sets the object to be returned by invocations of
getBlocker
for the current thread.
Uses of
Object
in
java.util.function
Methods in
java.util.function
with parameters of type
Object
Modifier and Type
Method
Description
static <T>
Predicate
<T>
Predicate.
isEqual
(
Object
targetRef)
Returns a predicate that tests if two arguments are equal according
 to
Objects.equals(Object, Object)
.
Uses of
Object
in
java.util.jar
Subclasses of
Object
in
java.util.jar
Modifier and Type
Class
Description
class
Attributes
The Attributes class maps Manifest attribute names to associated string
 values.
static class
Attributes.Name
The Attributes.Name class represents an attribute name stored in
 this Map.
class
JarEntry
This class is used to represent a JAR file entry.
class
JarException
Signals that an error of some sort has occurred while reading from
 or writing to a JAR file.
class
JarFile
The
JarFile
class is used to read the contents of a jar file
 from any file that can be opened with
java.io.RandomAccessFile
.
class
JarInputStream
The
JarInputStream
class, which extends
ZipInputStream
,
 is used to read the contents of a JAR file from an input stream.
class
JarOutputStream
The
JarOutputStream
class is used to write the contents
 of a JAR file to any output stream.
class
Manifest
The Manifest class is used to maintain Manifest entry names and their
 associated Attributes.
Fields in
java.util.jar
with type parameters of type
Object
Modifier and Type
Field
Description
protected
Map
<
Object
,
Object
>
Attributes.
map
The attribute name-value mappings.
protected
Map
<
Object
,
Object
>
Attributes.
map
The attribute name-value mappings.
Methods in
java.util.jar
that return
Object
Modifier and Type
Method
Description
Object
Attributes.
clone
()
Returns a copy of the Attributes, implemented as follows:
Object
Manifest.
clone
()
Returns a shallow copy of this Manifest.
Object
Attributes.
get
(
Object
name)
Returns the value of the specified attribute name, or null if the
 attribute name was not found.
Object
Attributes.
put
(
Object
name,
Object
value)
Associates the specified value with the specified attribute name
 (key) in this Map.
Object
Attributes.
remove
(
Object
name)
Removes the attribute with the specified name (key) from this Map.
Methods in
java.util.jar
that return types with arguments of type
Object
Modifier and Type
Method
Description
Set
<
Map.Entry
<
Object
,
Object
>>
Attributes.
entrySet
()
Returns a Collection view of the attribute name-value mappings
 contained in this Map.
Set
<
Map.Entry
<
Object
,
Object
>>
Attributes.
entrySet
()
Returns a Collection view of the attribute name-value mappings
 contained in this Map.
Set
<
Object
>
Attributes.
keySet
()
Returns a Set view of the attribute names (keys) contained in this Map.
Collection
<
Object
>
Attributes.
values
()
Returns a Collection view of the attribute values contained in this Map.
Methods in
java.util.jar
with parameters of type
Object
Modifier and Type
Method
Description
boolean
Attributes.
containsKey
(
Object
name)
Returns true if this Map contains the specified attribute name (key).
boolean
Attributes.
containsValue
(
Object
value)
Returns true if this Map maps one or more attribute names (keys)
 to the specified value.
boolean
Attributes.
equals
(
Object
o)
Compares the specified object to the underlying
map
for equality.
boolean
Attributes.Name.
equals
(
Object
o)
Compares this attribute name to another for equality.
boolean
Manifest.
equals
(
Object
o)
Returns true if the specified Object is also a Manifest and has
 the same main Attributes and entries.
Object
Attributes.
get
(
Object
name)
Returns the value of the specified attribute name, or null if the
 attribute name was not found.
Object
Attributes.
put
(
Object
name,
Object
value)
Associates the specified value with the specified attribute name
 (key) in this Map.
Object
Attributes.
remove
(
Object
name)
Removes the attribute with the specified name (key) from this Map.
Uses of
Object
in
java.util.logging
Subclasses of
Object
in
java.util.logging
Modifier and Type
Class
Description
class
ConsoleHandler
This
Handler
publishes log records to
System.err
.
class
ErrorManager
ErrorManager objects can be attached to Handlers to process
 any error that occurs on a Handler during Logging.
class
FileHandler
Simple file logging
Handler
.
class
Formatter
A Formatter provides support for formatting LogRecords.
class
Handler
A
Handler
object takes log messages from a
Logger
and
 exports them.
class
Level
The Level class defines a set of standard logging levels that
 can be used to control logging output.
class
Logger
A Logger object is used to log messages for a specific
 system or application component.
final class
LoggingPermission
The permission which the SecurityManager will check when code
 that is running with a SecurityManager calls one of the logging
 control methods (such as Logger.setLevel).
class
LogManager
There is a single global LogManager object that is used to
 maintain a set of shared state about Loggers and log services.
class
LogRecord
LogRecord objects are used to pass logging requests between
 the logging framework and individual log Handlers.
class
MemoryHandler
Handler
that buffers requests in a circular buffer in memory.
class
SimpleFormatter
Print a brief summary of the
LogRecord
in a human readable
 format.
class
SocketHandler
Simple network logging
Handler
.
class
StreamHandler
Stream based logging
Handler
.
class
XMLFormatter
Format a LogRecord into a standard XML format.
Methods in
java.util.logging
that return
Object
Modifier and Type
Method
Description
Object
[]
LogRecord.
getParameters
()
Get the parameters to the log message.
Methods in
java.util.logging
with parameters of type
Object
Modifier and Type
Method
Description
void
Logger.
entering
(
String
sourceClass,
String
sourceMethod,
Object
param1)
Log a method entry, with one parameter.
void
Logger.
entering
(
String
sourceClass,
String
sourceMethod,
Object
[] params)
Log a method entry, with an array of parameters.
boolean
Level.
equals
(
Object
ox)
Compare two objects for value equality.
void
Logger.
exiting
(
String
sourceClass,
String
sourceMethod,
Object
result)
Log a method return, with result object.
void
Logger.
log
(
Level
level,
String
msg,
Object
param1)
Log a message, with one object parameter.
void
Logger.
log
(
Level
level,
String
msg,
Object
[] params)
Log a message, with an array of object arguments.
void
Logger.
logp
(
Level
level,
String
sourceClass,
String
sourceMethod,
String
msg,
Object
param1)
Log a message, specifying source class and method,
 with a single object parameter to the log message.
void
Logger.
logp
(
Level
level,
String
sourceClass,
String
sourceMethod,
String
msg,
Object
[] params)
Log a message, specifying source class and method,
 with an array of object arguments.
void
Logger.
logrb
(
Level
level,
String
sourceClass,
String
sourceMethod,
String
bundleName,
String
msg,
Object
param1)
Deprecated.
Use
Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Object...)
instead
void
Logger.
logrb
(
Level
level,
String
sourceClass,
String
sourceMethod,
String
bundleName,
String
msg,
Object
[] params)
Deprecated.
Use
Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Object...)
instead.
void
Logger.
logrb
(
Level
level,
String
sourceClass,
String
sourceMethod,
ResourceBundle
bundle,
String
msg,
Object
... params)
Log a message, specifying source class, method, and resource bundle,
 with an optional list of message parameters.
void
Logger.
logrb
(
Level
level,
ResourceBundle
bundle,
String
msg,
Object
... params)
Log a message, specifying source class, method, and resource bundle,
 with an optional list of message parameters.
void
LogRecord.
setParameters
(
Object
[] parameters)
Set the parameters to the log message.
Uses of
Object
in
java.util.prefs
Subclasses of
Object
in
java.util.prefs
Modifier and Type
Class
Description
class
AbstractPreferences
This class provides a skeletal implementation of the
Preferences
class, greatly easing the task of implementing it.
class
BackingStoreException
Thrown to indicate that a preferences operation could not complete because
 of a failure in the backing store, or a failure to contact the backing
 store.
class
InvalidPreferencesFormatException
Thrown to indicate that an operation could not complete because
 the input did not conform to the appropriate XML document type
 for a collection of preferences, as per the
Preferences
specification.
class
NodeChangeEvent
An event emitted by a
Preferences
node to indicate that
 a child of that node has been added or removed.
class
PreferenceChangeEvent
An event emitted by a
Preferences
node to indicate that
 a preference has been added, removed or has had its value changed.
class
Preferences
A node in a hierarchical collection of preference data.
Fields in
java.util.prefs
declared as
Object
Modifier and Type
Field
Description
protected final
Object
AbstractPreferences.
lock
An object whose monitor is used to lock this node.
Uses of
Object
in
java.util.random
Subclasses of
Object
in
java.util.random
Modifier and Type
Class
Description
final class
RandomGeneratorFactory
<T extends
RandomGenerator
>
This is a factory class for generating multiple random number generators
 of a specific
algorithm
.
Uses of
Object
in
java.util.regex
Subclasses of
Object
in
java.util.regex
Modifier and Type
Class
Description
final class
Matcher
An engine that performs match operations on a
character sequence
by interpreting a
Pattern
.
final class
Pattern
A compiled representation of a regular expression.
class
PatternSyntaxException
Unchecked exception thrown to indicate a syntax error in a
 regular-expression pattern.
Uses of
Object
in
java.util.spi
Subclasses of
Object
in
java.util.spi
Modifier and Type
Class
Description
class
AbstractResourceBundleProvider
AbstractResourceBundleProvider
is an abstract class that provides
 the basic support for a provider implementation class for
ResourceBundleProvider
.
class
CalendarDataProvider
An abstract class for service providers that provide locale-dependent
Calendar
parameters.
class
CalendarNameProvider
An abstract class for service providers that provide localized string
 representations (display names) of
Calendar
field values.
class
CurrencyNameProvider
An abstract class for service providers that
 provide localized currency symbols and display names for the
Currency
class.
class
LocaleNameProvider
An abstract class for service providers that
 provide localized names for the
Locale
class.
class
LocaleServiceProvider
This is the super class of all the locale sensitive service provider
 interfaces (SPIs).
class
TimeZoneNameProvider
An abstract class for service providers that
 provide localized time zone names for the
TimeZone
class.
Uses of
Object
in
java.util.stream
Subclasses of
Object
in
java.util.stream
Modifier and Type
Class
Description
final class
Collectors
Implementations of
Collector
that implement various useful reduction
 operations, such as accumulating elements into collections, summarizing
 elements according to various criteria, etc.
final class
StreamSupport
Low-level utility methods for creating and manipulating streams.
Methods in
java.util.stream
that return
Object
Modifier and Type
Method
Description
Object
[]
Stream.
toArray
()
Returns an array containing the elements of this stream.
<A> A[]
Stream.
toArray
(
IntFunction
<A[]> generator)
Returns an array containing the elements of this stream, using the
 provided
generator
function to allocate the returned array, as
 well as any additional arrays that might be required for a partitioned
 execution or for resizing.
Methods in
java.util.stream
with parameters of type
Object
Modifier and Type
Method
Description
static <T>
Stream
<T>
Stream.
of
(T... values)
Returns a sequential ordered stream whose elements are the specified values.
Uses of
Object
in
java.util.zip
Subclasses of
Object
in
java.util.zip
Modifier and Type
Class
Description
class
Adler32
A class that can be used to compute the Adler-32 checksum of a data
 stream.
class
CheckedInputStream
An input stream that also maintains a checksum of the data being read.
class
CheckedOutputStream
An output stream that also maintains a checksum of the data being
 written.
class
CRC32
A class that can be used to compute the CRC-32 of a data stream.
final class
CRC32C
A class that can be used to compute the CRC-32C of a data stream.
class
DataFormatException
Signals that a data format error has occurred.
class
Deflater
This class provides support for general purpose compression using the
 popular ZLIB compression library.
class
DeflaterInputStream
Implements an input stream filter for compressing data in the "deflate"
 compression format.
class
DeflaterOutputStream
This class implements an output stream filter for compressing data in
 the "deflate" compression format.
class
GZIPInputStream
This class implements a stream filter for reading compressed data in
 the GZIP file format.
class
GZIPOutputStream
This class implements a stream filter for writing compressed data in
 the GZIP file format.
class
Inflater
This class provides support for general purpose decompression using the
 popular ZLIB compression library.
class
InflaterInputStream
This class implements a stream filter for uncompressing data in the
 "deflate" compression format.
class
InflaterOutputStream
Implements an output stream filter for uncompressing data stored in the
 "deflate" compression format.
class
ZipEntry
This class is used to represent a ZIP file entry.
class
ZipError
Signals that an unrecoverable error has occurred.
class
ZipException
Signals that a Zip exception of some sort has occurred.
class
ZipFile
This class is used to read entries from a zip file.
class
ZipInputStream
An input stream for reading compressed and uncompressed
ZIP file entries
from a stream of bytes in the ZIP file
 format.
class
ZipOutputStream
This class implements an output stream filter for writing files in the
 ZIP file format.
Methods in
java.util.zip
that return
Object
Modifier and Type
Method
Description
Object
ZipEntry.
clone
()
Returns a copy of this entry.
Uses of
Object
in
javax.accessibility
Subclasses of
Object
in
javax.accessibility
Modifier and Type
Class
Description
class
AccessibilityProvider
Service Provider Interface (SPI) for Assistive Technology.
class
AccessibleAttributeSequence
This class collects together the span of text that share the same contiguous
 set of attributes, along with that set of attributes.
class
AccessibleBundle
Base class used to maintain a strongly typed enumeration.
class
AccessibleContext
AccessibleContext
represents the minimum information all accessible
 objects return.
class
AccessibleHyperlink
Encapsulation of a link, or set of links (e.g. client side imagemap) in a
 Hypertext document
class
AccessibleRelation
Class
AccessibleRelation
describes a relation between the object that
 implements the
AccessibleRelation
and one or more other objects.
class
AccessibleRelationSet
Class
AccessibleRelationSet
determines a component's relation set.
class
AccessibleResourceBundle
Deprecated.
This class is deprecated as of version 1.3 of the Java Platform
class
AccessibleRole
Class
AccessibleRole
determines the role of a component.
class
AccessibleState
Class
AccessibleState
describes a component's particular state.
class
AccessibleStateSet
Class
AccessibleStateSet
determines a component's state set.
class
AccessibleTextSequence
This class collects together key details of a span of text.
Methods in
javax.accessibility
that return
Object
Modifier and Type
Method
Description
abstract
Object
AccessibleHyperlink.
getAccessibleActionAnchor
(int i)
Returns an object that represents the link anchor, as appropriate for
 that link.
abstract
Object
AccessibleHyperlink.
getAccessibleActionObject
(int i)
Returns an object that represents the link action, as appropriate for
 that link.
Object
AccessibleKeyBinding.
getAccessibleKeyBinding
(int i)
Returns a key binding for this object.
Object
[][]
AccessibleResourceBundle.
getContents
()
Deprecated.
Returns the mapping between the programmatic keys and the localized
 display strings.
Object
[]
AccessibleRelation.
getTarget
()
Returns the target objects for this relation.
Methods in
javax.accessibility
with parameters of type
Object
Modifier and Type
Method
Description
void
AccessibleContext.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Support for reporting bound property changes.
void
AccessibleRelation.
setTarget
(
Object
target)
Sets the target object for this relation.
void
AccessibleRelation.
setTarget
(
Object
[] target)
Sets the target objects for this relation.
Constructors in
javax.accessibility
with parameters of type
Object
Modifier
Constructor
Description
AccessibleRelation
(
String
key,
Object
target)
Creates a new
AccessibleRelation
using the given locale
 independent key.
AccessibleRelation
(
String
key,
Object
[] target)
Creates a new
AccessibleRelation
using the given locale
 independent key.
Uses of
Object
in
javax.annotation.processing
Subclasses of
Object
in
javax.annotation.processing
Modifier and Type
Class
Description
class
AbstractProcessor
An abstract annotation processor designed to be a convenient
 superclass for most concrete annotation processors.
class
Completions
Utility class for assembling
Completion
objects.
class
FilerException
Indicates a
Filer
detected an attempt to open a file that
 would violate the guarantees provided by the
Filer
.
Uses of
Object
in
javax.crypto
Subclasses of
Object
in
javax.crypto
Modifier and Type
Class
Description
class
AEADBadTagException
This exception is thrown when a
Cipher
operating in
 an AEAD mode (such as GCM/CCM) is unable to verify the supplied
 authentication tag.
class
BadPaddingException
This exception is thrown when a particular padding mechanism is
 expected for the input data but the data is not padded properly.
class
Cipher
This class provides the functionality of a cryptographic cipher for
 encryption and decryption.
class
CipherInputStream
A
CipherInputStream
is composed of an
InputStream
and a
Cipher
object so that read() methods return data that are
 read in from the underlying
InputStream
but have been
 additionally processed by the
Cipher
object.
class
CipherOutputStream
A
CipherOutputStream
is composed of an
OutputStream
and a
Cipher
object so that write() methods first process the data
 before writing them out to the underlying
OutputStream
.
class
CipherSpi
This class defines the
Service Provider Interface
(
SPI
)
 for the
Cipher
class.
class
DecapsulateException
An exception that is thrown by the
KEM.Decapsulator.decapsulate(byte[])
method to denote an
 error during decapsulation.
class
EncryptedPrivateKeyInfo
This class implements the
EncryptedPrivateKeyInfo
type
 as defined in PKCS #8.
class
ExemptionMechanism
This class provides the functionality of an exemption mechanism, examples
 of which are
key recovery
,
key weakening
, and
key escrow
.
class
ExemptionMechanismException
This is the generic ExemptionMechanism exception.
class
ExemptionMechanismSpi
This class defines the
Service Provider Interface
(
SPI
)
 for the
ExemptionMechanism
class.
class
IllegalBlockSizeException
This exception is thrown when the length of data provided to a block
 cipher is incorrect, i.e., does not match the block size of the cipher.
final class
KEM
This class provides the functionality of a Key Encapsulation Mechanism (KEM).
static final class
KEM.Decapsulator
A decapsulator, generated by
KEM.newDecapsulator(java.security.PrivateKey)
on the KEM
 receiver side.
static final class
KEM.Encapsulated
This class specifies the return value of the encapsulate method of
 a Key Encapsulation Mechanism (KEM), which includes the shared secret
 (as a
SecretKey
), the key encapsulation message,
 and optional parameters.
static final class
KEM.Encapsulator
An encapsulator, generated by
KEM.newEncapsulator(java.security.PublicKey)
on the KEM
 sender side.
class
KeyAgreement
This class provides the functionality of a key agreement (or key
 exchange) protocol.
class
KeyAgreementSpi
This class defines the
Service Provider Interface
(
SPI
)
 for the
KeyAgreement
class.
class
KeyGenerator
This class provides the functionality of a secret (symmetric) key generator.
class
KeyGeneratorSpi
This class defines the
Service Provider Interface
(
SPI
)
 for the
KeyGenerator
class.
class
Mac
This class provides the functionality of a "Message Authentication Code"
 (MAC) algorithm.
class
MacSpi
This class defines the
Service Provider Interface
(
SPI
)
 for the
Mac
class.
class
NoSuchPaddingException
This exception is thrown when a particular padding mechanism is
 requested but is not available in the environment.
class
NullCipher
The
NullCipher
class is a class that provides an
 "identity cipher" -- one that does not transform the plain text.
class
SealedObject
This class enables a programmer to create an object and protect its
 confidentiality with a cryptographic algorithm.
class
SecretKeyFactory
This class represents a factory for secret keys.
class
SecretKeyFactorySpi
This class defines the
Service Provider Interface
(
SPI
)
 for the
SecretKeyFactory
class.
class
ShortBufferException
This exception is thrown when an output buffer provided by the user
 is too short to hold the operation result.
Methods in
javax.crypto
that return
Object
Modifier and Type
Method
Description
final
Object
Mac.
clone
()
Returns a clone if the provider implementation is cloneable.
Object
MacSpi.
clone
()
Returns a clone if the implementation is cloneable.
final
Object
SealedObject.
getObject
(
Key
key)
Retrieves the original (encapsulated) object.
final
Object
SealedObject.
getObject
(
Key
key,
String
provider)
Retrieves the original (encapsulated) object.
final
Object
SealedObject.
getObject
(
Cipher
c)
Retrieves the original (encapsulated) object.
Uses of
Object
in
javax.crypto.spec
Subclasses of
Object
in
javax.crypto.spec
Modifier and Type
Class
Description
final class
ChaCha20ParameterSpec
This class specifies the parameters used with the
ChaCha20
algorithm.
class
DESedeKeySpec
This class specifies a DES-EDE ("triple-DES") key.
class
DESKeySpec
This class specifies a DES key.
class
DHGenParameterSpec
This class specifies the set of parameters used for generating
 Diffie-Hellman (system) parameters for use in Diffie-Hellman key
 agreement.
class
DHParameterSpec
This class specifies the set of parameters used with the Diffie-Hellman
 algorithm, as specified in PKCS #3:
Diffie-Hellman Key-Agreement
 Standard
.
class
DHPrivateKeySpec
This class specifies a Diffie-Hellman private key with its associated
 parameters.
class
DHPublicKeySpec
This class specifies a Diffie-Hellman public key with its associated
 parameters.
class
GCMParameterSpec
Specifies the set of parameters required by a
Cipher
using the Galois/Counter Mode (GCM) mode.
class
IvParameterSpec
This class specifies an
initialization vector
(IV).
class
OAEPParameterSpec
This class specifies the set of parameters used with OAEP Padding,
 as defined in the
PKCS#1 v2.2
standard.
class
PBEKeySpec
A user-chosen password that can be used with password-based encryption
 (
PBE
).
class
PBEParameterSpec
This class specifies the set of parameters used with password-based
 encryption (PBE), as defined in the
PKCS #5
standard.
class
PSource
This class specifies the source for encoding input P in OAEP Padding,
 as defined in the
PKCS#1 v2.2
standard.
static final class
PSource.PSpecified
This class is used to explicitly specify the value for
 encoding input P in OAEP Padding.
class
RC2ParameterSpec
This class specifies the parameters used with the
RC2
algorithm.
class
RC5ParameterSpec
This class specifies the parameters used with the
RC5
algorithm.
class
SecretKeySpec
This class specifies a secret key in a provider-independent fashion.
Methods in
javax.crypto.spec
with parameters of type
Object
Modifier and Type
Method
Description
boolean
RC2ParameterSpec.
equals
(
Object
obj)
Tests for equality between the specified object and this
 object.
boolean
RC5ParameterSpec.
equals
(
Object
obj)
Tests for equality between the specified object and this
 object.
boolean
SecretKeySpec.
equals
(
Object
obj)
Tests for equality between the specified object and this
 object.
Uses of
Object
in
javax.imageio
Subclasses of
Object
in
javax.imageio
Modifier and Type
Class
Description
class
IIOException
An exception class used for signaling run-time failure of reading
 and writing operations.
class
IIOImage
A simple container class to aggregate an image, a set of
 thumbnail (preview) images, and an object representing metadata
 associated with the image.
class
IIOParam
A superclass of all classes describing how streams should be
 decoded or encoded.
final class
ImageIO
A class containing static convenience methods for locating
ImageReader
s and
ImageWriter
s, and
 performing simple encoding and decoding.
class
ImageReader
An abstract superclass for parsing and decoding of images.
class
ImageReadParam
A class describing how a stream is to be decoded.
class
ImageTypeSpecifier
A class that allows the format of an image (in particular, its
SampleModel
and
ColorModel
) to be
 specified in a convenient manner.
class
ImageWriteParam
A class describing how a stream is to be encoded.
class
ImageWriter
An abstract superclass for encoding and writing images.
Fields in
javax.imageio
declared as
Object
Modifier and Type
Field
Description
protected
Object
ImageReader.
input
The
ImageInputStream
or other
Object
by
setInput
and retrieved
 by
getInput
.
protected
Object
ImageWriter.
output
The
ImageOutputStream
or other
Object
set by
setOutput
and retrieved by
getOutput
.
Methods in
javax.imageio
that return
Object
Modifier and Type
Method
Description
Object
ImageReader.
getInput
()
Returns the
ImageInputStream
or other
Object
previously set as the input source.
Object
ImageWriter.
getOutput
()
Returns the
ImageOutputStream
or other
Object
set by the most recent call to the
setOutput
method.
Methods in
javax.imageio
with parameters of type
Object
Modifier and Type
Method
Description
static
ImageInputStream
ImageIO.
createImageInputStream
(
Object
input)
Returns an
ImageInputStream
that will take its
 input from the given
Object
.
static
ImageOutputStream
ImageIO.
createImageOutputStream
(
Object
output)
Returns an
ImageOutputStream
that will send its
 output to the given
Object
.
boolean
ImageTypeSpecifier.
equals
(
Object
o)
Returns
true
if the given
Object
is
 an
ImageTypeSpecifier
and has a
SampleModel
and
ColorModel
that are
 equal to those of this object.
static
Iterator
<
ImageReader
>
ImageIO.
getImageReaders
(
Object
input)
Returns an
Iterator
containing all currently
 registered
ImageReader
s that claim to be able to
 decode the supplied
Object
, typically an
ImageInputStream
.
void
ImageReader.
setInput
(
Object
input)
Sets the input source to use to the given
ImageInputStream
or other
Object
.
void
ImageReader.
setInput
(
Object
input,
 boolean seekForwardOnly)
Sets the input source to use to the given
ImageInputStream
or other
Object
.
void
ImageReader.
setInput
(
Object
input,
 boolean seekForwardOnly,
 boolean ignoreMetadata)
Sets the input source to use to the given
ImageInputStream
or other
Object
.
void
ImageWriter.
setOutput
(
Object
output)
Sets the destination to the given
ImageOutputStream
or other
Object
.
Uses of
Object
in
javax.imageio.metadata
Subclasses of
Object
in
javax.imageio.metadata
Modifier and Type
Class
Description
class
IIOInvalidTreeException
An
IIOInvalidTreeException
is thrown when an attempt
 by an
IIOMetadata
object to parse a tree of
IIOMetadataNode
s fails.
class
IIOMetadata
An abstract class to be extended by objects that represent metadata
 (non-image data) associated with images and streams.
class
IIOMetadataFormatImpl
A concrete class providing a reusable implementation of the
IIOMetadataFormat
interface.
class
IIOMetadataNode
A class representing a node in a meta-data tree, which implements
 the
org.w3c.dom.Element
interface and additionally allows
 for the storage of non-textual objects via the
getUserObject
and
setUserObject
methods.
Methods in
javax.imageio.metadata
with type parameters of type
Object
Modifier and Type
Method
Description
protected <T extends
Object
&
Comparable
<? super T>>
void
IIOMetadataFormatImpl.
addObjectValue
(
String
elementName,
Class
<T> classType,
 T defaultValue,
Comparable
<? super T> minValue,
Comparable
<? super T> maxValue,
 boolean minInclusive,
 boolean maxInclusive)
Allows an
Object
reference of a given class type
 to be stored in nodes implementing the named element.
Methods in
javax.imageio.metadata
that return
Object
Modifier and Type
Method
Description
Object
IIOMetadataNode.
getFeature
(
String
feature,
String
version)
This DOM Level 3 method is not supported for
IIOMetadataNode
and will throw a
DOMException
.
Object
IIOMetadataFormat.
getObjectDefaultValue
(
String
elementName)
Returns an
Object
s containing the default
 value for the
Object
reference within
 the named element.
Object
IIOMetadataFormatImpl.
getObjectDefaultValue
(
String
elementName)
Object
[]
IIOMetadataFormat.
getObjectEnumerations
(
String
elementName)
Returns an array of
Object
s containing the legal
 enumerated values for the
Object
reference within
 the named element.
Object
[]
IIOMetadataFormatImpl.
getObjectEnumerations
(
String
elementName)
Object
IIOMetadataNode.
getUserData
(
String
key)
This DOM Level 3 method is not supported for
IIOMetadataNode
and will throw a
DOMException
.
Object
IIOMetadataNode.
getUserObject
()
Returns the
Object
value associated with this node.
Object
IIOMetadataNode.
setUserData
(
String
key,
Object
data,
UserDataHandler
handler)
This DOM Level 3 method is not supported for
IIOMetadataNode
and will throw a
DOMException
.
Methods in
javax.imageio.metadata
with parameters of type
Object
Modifier and Type
Method
Description
Object
IIOMetadataNode.
setUserData
(
String
key,
Object
data,
UserDataHandler
handler)
This DOM Level 3 method is not supported for
IIOMetadataNode
and will throw a
DOMException
.
void
IIOMetadataNode.
setUserObject
(
Object
userObject)
Sets the value associated with this node.
Uses of
Object
in
javax.imageio.plugins.bmp
Subclasses of
Object
in
javax.imageio.plugins.bmp
Modifier and Type
Class
Description
class
BMPImageWriteParam
A subclass of
ImageWriteParam
for encoding images in
 the BMP format.
Uses of
Object
in
javax.imageio.plugins.jpeg
Subclasses of
Object
in
javax.imageio.plugins.jpeg
Modifier and Type
Class
Description
class
JPEGHuffmanTable
A class encapsulating a single JPEG Huffman table.
class
JPEGImageReadParam
This class adds the ability to set JPEG quantization and Huffman
 tables when using the built-in JPEG reader plug-in.
class
JPEGImageWriteParam
This class adds the ability to set JPEG quantization and Huffman
 tables when using the built-in JPEG writer plug-in, and to request that
 optimized Huffman tables be computed for an image.
class
JPEGQTable
A class encapsulating a single JPEG quantization table.
Uses of
Object
in
javax.imageio.plugins.tiff
Subclasses of
Object
in
javax.imageio.plugins.tiff
Modifier and Type
Class
Description
final class
BaselineTIFFTagSet
A class representing the set of tags found in the baseline TIFF
 specification as well as some common additional tags.
final class
ExifGPSTagSet
A class representing the tags found in an Exif GPS Info IFD.
final class
ExifInteroperabilityTagSet
A class representing the tags found in an Exif Interoperability IFD.
final class
ExifParentTIFFTagSet
A class containing the TIFF tags used to reference the Exif and GPS IFDs.
final class
ExifTIFFTagSet
A class representing the tags found in an Exif IFD.
final class
FaxTIFFTagSet
A class representing the extra tags found in a
TIFF-F
(RFC 2036) file.
final class
GeoTIFFTagSet
A class representing the tags found in a GeoTIFF IFD.
class
TIFFDirectory
A convenience class for simplifying interaction with TIFF native
 image metadata.
final class
TIFFField
A class representing a field in a TIFF 6.0 Image File Directory.
final class
TIFFImageReadParam
A subclass of
ImageReadParam
allowing control over
 the TIFF reading process.
class
TIFFTag
A class defining the notion of a TIFF tag.
class
TIFFTagSet
A class representing a set of TIFF tags.
Methods in
javax.imageio.plugins.tiff
that return
Object
Modifier and Type
Method
Description
static
Object
TIFFField.
createArrayForType
(int dataType,
 int count)
Creates an array appropriate for the indicated data type.
Object
TIFFField.
getData
()
Returns a reference to the data object associated with the field.
Constructors in
javax.imageio.plugins.tiff
with parameters of type
Object
Modifier
Constructor
Description
TIFFField
(
TIFFTag
tag,
 int type,
 int count,
Object
data)
Constructs a
TIFFField
with arbitrary data.
Uses of
Object
in
javax.imageio.spi
Subclasses of
Object
in
javax.imageio.spi
Modifier and Type
Class
Description
final class
IIORegistry
A registry for Image I/O service provider instances.
class
IIOServiceProvider
A superinterface for functionality common to all Image I/O service
 provider interfaces (SPIs).
class
ImageInputStreamSpi
The service provider interface (SPI) for
ImageInputStream
s.
class
ImageOutputStreamSpi
The service provider interface (SPI) for
ImageOutputStream
s.
class
ImageReaderSpi
The service provider interface (SPI) for
ImageReader
s.
class
ImageReaderWriterSpi
A superclass containing instance variables and methods common to
ImageReaderSpi
and
ImageWriterSpi
.
class
ImageTranscoderSpi
The service provider interface (SPI) for
ImageTranscoder
s.
class
ImageWriterSpi
The service provider interface (SPI) for
ImageWriter
s.
class
ServiceRegistry
A registry for service provider instances for Image I/O service types.
Methods in
javax.imageio.spi
with parameters of type
Object
Modifier and Type
Method
Description
abstract boolean
ImageReaderSpi.
canDecodeInput
(
Object
source)
Returns
true
if the supplied source object appears
 to be of the format supported by this reader.
boolean
ServiceRegistry.
contains
(
Object
provider)
Returns
true
if
provider
is currently
 registered.
ImageInputStream
ImageInputStreamSpi.
createInputStreamInstance
(
Object
input)
Returns an instance of the
ImageInputStream
implementation associated with this service provider.
abstract
ImageInputStream
ImageInputStreamSpi.
createInputStreamInstance
(
Object
input,
 boolean useCache,
File
cacheDir)
Returns an instance of the
ImageInputStream
implementation associated with this service provider.
ImageOutputStream
ImageOutputStreamSpi.
createOutputStreamInstance
(
Object
output)
Returns an instance of the
ImageOutputStream
implementation associated with this service provider.
abstract
ImageOutputStream
ImageOutputStreamSpi.
createOutputStreamInstance
(
Object
output,
 boolean useCache,
File
cacheDir)
Returns an instance of the
ImageOutputStream
implementation associated with this service provider.
abstract
ImageReader
ImageReaderSpi.
createReaderInstance
(
Object
extension)
Returns an instance of the
ImageReader
implementation associated with this service provider.
abstract
ImageWriter
ImageWriterSpi.
createWriterInstance
(
Object
extension)
Returns an instance of the
ImageWriter
implementation associated with this service provider.
void
ServiceRegistry.
deregisterServiceProvider
(
Object
provider)
Removes a service provider object from all categories that
 contain it.
boolean
ServiceRegistry.Filter.
filter
(
Object
provider)
Returns
true
if the given
provider
object matches the criterion defined
 by this
Filter
.
void
ServiceRegistry.
registerServiceProvider
(
Object
provider)
Adds a service provider object to the registry.
Uses of
Object
in
javax.imageio.stream
Subclasses of
Object
in
javax.imageio.stream
Modifier and Type
Class
Description
class
FileCacheImageInputStream
An implementation of
ImageInputStream
that gets its
 input from a regular
InputStream
.
class
FileCacheImageOutputStream
An implementation of
ImageOutputStream
that writes its
 output to a regular
OutputStream
.
class
FileImageInputStream
An implementation of
ImageInputStream
that gets its
 input from a
File
or
RandomAccessFile
.
class
FileImageOutputStream
An implementation of
ImageOutputStream
that writes its
 output directly to a
File
or
RandomAccessFile
.
class
IIOByteBuffer
A class representing a mutable reference to an array of bytes and
 an offset and length within that array.
class
ImageInputStreamImpl
An abstract class implementing the
ImageInputStream
interface.
class
ImageOutputStreamImpl
An abstract class implementing the
ImageOutputStream
interface.
class
MemoryCacheImageInputStream
An implementation of
ImageInputStream
that gets its
 input from a regular
InputStream
.
class
MemoryCacheImageOutputStream
An implementation of
ImageOutputStream
that writes its
 output to a regular
OutputStream
.
Uses of
Object
in
javax.lang.model
Subclasses of
Object
in
javax.lang.model
Modifier and Type
Class
Description
class
UnknownEntityException
Superclass of exceptions which indicate that an unknown kind of
 entity was encountered.
Uses of
Object
in
javax.lang.model.element
Subclasses of
Object
in
javax.lang.model.element
Modifier and Type
Class
Description
class
UnknownAnnotationValueException
Indicates that an unknown kind of annotation value was encountered.
class
UnknownDirectiveException
Indicates that an unknown kind of module directive was encountered.
class
UnknownElementException
Indicates that an unknown kind of element was encountered.
Methods in
javax.lang.model.element
that return
Object
Modifier and Type
Method
Description
Object
UnknownAnnotationValueException.
getArgument
()
Returns the additional argument.
Object
UnknownDirectiveException.
getArgument
()
Returns the additional argument.
Object
UnknownElementException.
getArgument
()
Returns the additional argument.
Object
VariableElement.
getConstantValue
()
Returns the value of this variable if this is a
final
field initialized to a compile-time constant.
Object
AnnotationValue.
getValue
()
Returns the value.
Methods in
javax.lang.model.element
with parameters of type
Object
Modifier and Type
Method
Description
boolean
Element.
equals
(
Object
obj)
Returns
true
if the argument represents the same
 element as
this
, or
false
otherwise.
boolean
Name.
equals
(
Object
obj)
Returns
true
if the argument represents the same
 name as
this
, and
false
otherwise.
Constructors in
javax.lang.model.element
with parameters of type
Object
Modifier
Constructor
Description
UnknownAnnotationValueException
(
AnnotationValue
av,
Object
p)
Creates a new
UnknownAnnotationValueException
.
UnknownDirectiveException
(
ModuleElement.Directive
d,
Object
p)
Creates a new
UnknownElementException
.
UnknownElementException
(
Element
e,
Object
p)
Creates a new
UnknownElementException
.
Uses of
Object
in
javax.lang.model.type
Subclasses of
Object
in
javax.lang.model.type
Modifier and Type
Class
Description
class
MirroredTypeException
Thrown when an application attempts to access the
Class
object
 corresponding to a
TypeMirror
.
class
MirroredTypesException
Thrown when an application attempts to access a sequence of
Class
objects each corresponding to a
TypeMirror
.
class
UnknownTypeException
Indicates that an unknown kind of type was encountered.
Methods in
javax.lang.model.type
that return
Object
Modifier and Type
Method
Description
Object
UnknownTypeException.
getArgument
()
Returns the additional argument.
Methods in
javax.lang.model.type
with parameters of type
Object
Modifier and Type
Method
Description
boolean
TypeMirror.
equals
(
Object
obj)
Obeys the general contract of
Object.equals
.
Constructors in
javax.lang.model.type
with parameters of type
Object
Modifier
Constructor
Description
UnknownTypeException
(
TypeMirror
t,
Object
p)
Creates a new
UnknownTypeException
.The
p
parameter may be used to pass in an additional argument with
 information about the context in which the unknown type was
 encountered; for example, the visit methods of
TypeVisitor
may pass in their additional parameter.
Uses of
Object
in
javax.lang.model.util
Subclasses of
Object
in
javax.lang.model.util
Modifier and Type
Class
Description
class
AbstractAnnotationValueVisitor14
<R,
P>
A skeletal visitor for annotation values with default behavior
 appropriate for source version
RELEASE_14
.
class
AbstractAnnotationValueVisitor6
<R,
P>
A skeletal visitor for annotation values with default behavior
 appropriate for the
RELEASE_6
source version.
class
AbstractAnnotationValueVisitor7
<R,
P>
A skeletal visitor for annotation values with default behavior
 appropriate for the
RELEASE_7
source version.
class
AbstractAnnotationValueVisitor8
<R,
P>
A skeletal visitor for annotation values with default behavior
 appropriate for the
RELEASE_8
source version.
class
AbstractAnnotationValueVisitor9
<R,
P>
A skeletal visitor for annotation values with default behavior
 appropriate for source versions
RELEASE_9
through
RELEASE_14
.
class
AbstractElementVisitor14
<R,
P>
A skeletal visitor of program elements with default behavior
 appropriate for the
RELEASE_14
source version.
class
AbstractElementVisitor6
<R,
P>
A skeletal visitor of program elements with default behavior
 appropriate for the
RELEASE_6
source version.
class
AbstractElementVisitor7
<R,
P>
A skeletal visitor of program elements with default behavior
 appropriate for the
RELEASE_7
source version.
class
AbstractElementVisitor8
<R,
P>
A skeletal visitor of program elements with default behavior
 appropriate for the
RELEASE_8
source version.
class
AbstractElementVisitor9
<R,
P>
A skeletal visitor of program elements with default behavior
 appropriate for source versions
RELEASE_9
through
RELEASE_14
.
class
AbstractTypeVisitor14
<R,
P>
A skeletal visitor of types with default behavior appropriate for the
RELEASE_14
source version.
class
AbstractTypeVisitor6
<R,
P>
A skeletal visitor of types with default behavior appropriate for
 the
RELEASE_6
source version.
class
AbstractTypeVisitor7
<R,
P>
A skeletal visitor of types with default behavior appropriate for
 the
RELEASE_7
source version.
class
AbstractTypeVisitor8
<R,
P>
A skeletal visitor of types with default behavior appropriate for
 the
RELEASE_8
source version.
class
AbstractTypeVisitor9
<R,
P>
A skeletal visitor of types with default behavior appropriate for
 source versions
RELEASE_9
through
RELEASE_14
.
class
ElementFilter
Filters for selecting just the elements of interest from a
 collection of elements.
class
ElementKindVisitor14
<R,
P>
A visitor of program elements based on their
kind
with default behavior appropriate for the
RELEASE_14
source version.
class
ElementKindVisitor6
<R,
P>
A visitor of program elements based on their
kind
with default behavior appropriate for the
RELEASE_6
source version.
class
ElementKindVisitor7
<R,
P>
A visitor of program elements based on their
kind
with default behavior appropriate for the
RELEASE_7
source version.
class
ElementKindVisitor8
<R,
P>
A visitor of program elements based on their
kind
with default behavior appropriate for the
RELEASE_8
source version.
class
ElementKindVisitor9
<R,
P>
A visitor of program elements based on their
kind
with default behavior appropriate for source
 versions
RELEASE_9
through
RELEASE_14
.
class
ElementScanner14
<R,
P>
A scanning visitor of program elements with default behavior
 appropriate for the
RELEASE_14
source version.
class
ElementScanner6
<R,
P>
A scanning visitor of program elements with default behavior
 appropriate for the
RELEASE_6
source version.
class
ElementScanner7
<R,
P>
A scanning visitor of program elements with default behavior
 appropriate for the
RELEASE_7
source version.
class
ElementScanner8
<R,
P>
A scanning visitor of program elements with default behavior
 appropriate for the
RELEASE_8
source version.
class
ElementScanner9
<R,
P>
A scanning visitor of program elements with default behavior
 appropriate for source versions
RELEASE_9
through
RELEASE_14
.
class
SimpleAnnotationValueVisitor14
<R,
P>
A simple visitor for annotation values with default behavior
 appropriate for source version
RELEASE_14
.
class
SimpleAnnotationValueVisitor6
<R,
P>
A simple visitor for annotation values with default behavior
 appropriate for the
RELEASE_6
source version.
class
SimpleAnnotationValueVisitor7
<R,
P>
A simple visitor for annotation values with default behavior
 appropriate for the
RELEASE_7
source version.
class
SimpleAnnotationValueVisitor8
<R,
P>
A simple visitor for annotation values with default behavior
 appropriate for the
RELEASE_8
source version.
class
SimpleAnnotationValueVisitor9
<R,
P>
A simple visitor for annotation values with default behavior
 appropriate for source versions
RELEASE_9
through
RELEASE_14
.
class
SimpleElementVisitor14
<R,
P>
A simple visitor of program elements with default behavior
 appropriate for the
RELEASE_14
source version.
class
SimpleElementVisitor6
<R,
P>
A simple visitor of program elements with default behavior
 appropriate for the
RELEASE_6
source version.
class
SimpleElementVisitor7
<R,
P>
A simple visitor of program elements with default behavior
 appropriate for the
RELEASE_7
source version.
class
SimpleElementVisitor8
<R,
P>
A simple visitor of program elements with default behavior
 appropriate for the
RELEASE_8
source version.
class
SimpleElementVisitor9
<R,
P>
A simple visitor of program elements with default behavior
 appropriate for source versions
RELEASE_9
through
RELEASE_14
.
class
SimpleTypeVisitor14
<R,
P>
A simple visitor of types with default behavior appropriate for
 source version
RELEASE_14
.
class
SimpleTypeVisitor6
<R,
P>
A simple visitor of types with default behavior appropriate for the
RELEASE_6
source version.
class
SimpleTypeVisitor7
<R,
P>
A simple visitor of types with default behavior appropriate for the
RELEASE_7
source version.
class
SimpleTypeVisitor8
<R,
P>
A simple visitor of types with default behavior appropriate for the
RELEASE_8
source version.
class
SimpleTypeVisitor9
<R,
P>
A simple visitor of types with default behavior appropriate for
 source versions
RELEASE_9
through
RELEASE_14
.
class
TypeKindVisitor14
<R,
P>
A visitor of types based on their
kind
with
 default behavior appropriate for source version
RELEASE_14
.
class
TypeKindVisitor6
<R,
P>
A visitor of types based on their
kind
with
 default behavior appropriate for the
RELEASE_6
source version.
class
TypeKindVisitor7
<R,
P>
A visitor of types based on their
kind
with
 default behavior appropriate for the
RELEASE_7
source version.
class
TypeKindVisitor8
<R,
P>
A visitor of types based on their
kind
with
 default behavior appropriate for the
RELEASE_8
source version.
class
TypeKindVisitor9
<R,
P>
A visitor of types based on their
kind
with
 default behavior appropriate for source versions
RELEASE_9
through
RELEASE_14
.
Fields in
javax.lang.model.util
declared as
Object
Modifier and Type
Field
Description
protected final
R
ElementScanner6.
DEFAULT_VALUE
The specified default value.
protected final
R
SimpleAnnotationValueVisitor6.
DEFAULT_VALUE
Default value to be returned;
defaultAction
returns this value unless the method is
 overridden.
protected final
R
SimpleElementVisitor6.
DEFAULT_VALUE
Default value to be returned;
defaultAction
returns this value unless the method is
 overridden.
protected final
R
SimpleTypeVisitor6.
DEFAULT_VALUE
Default value to be returned;
defaultAction
returns this value unless the method is
 overridden.
Methods in
javax.lang.model.util
with parameters of type
Object
Modifier and Type
Method
Description
protected
R
SimpleAnnotationValueVisitor6.
defaultAction
(
Object
o,
P
p)
The default action for visit methods.
String
Elements.
getConstantExpression
(
Object
value)
Returns the text of a
constant expression
representing a
 primitive value or a string.
Uses of
Object
in
javax.management
Subclasses of
Object
in
javax.management
Modifier and Type
Class
Description
class
Attribute
Represents an MBean attribute by associating its name with its value.
class
AttributeChangeNotification
Provides definitions of the attribute change notifications sent by MBeans.
class
AttributeChangeNotificationFilter
This class implements of the
NotificationFilter
interface for the
attribute change notification
.
class
AttributeList
Represents a list of values for attributes of an MBean.
class
AttributeNotFoundException
The specified attribute does not exist or cannot be retrieved.
class
AttributeValueExp
Represents attributes used as arguments to relational constraints.
class
BadAttributeValueExpException
Thrown when an invalid MBean attribute is passed to a query
 constructing method.
class
BadBinaryOpValueExpException
Thrown when an invalid expression is passed to a method for
 constructing a query.
class
BadStringOperationException
Thrown when an invalid string operation is passed
 to a method for constructing a query.
class
DefaultLoaderRepository
Deprecated.
Use
MBeanServer.getClassLoaderRepository()
instead.
class
ImmutableDescriptor
An immutable descriptor.
class
InstanceAlreadyExistsException
The MBean is already registered in the repository.
class
InstanceNotFoundException
The specified MBean does not exist in the repository.
class
IntrospectionException
An exception occurred during the introspection of an MBean.
class
InvalidApplicationException
Thrown when an attempt is made to apply either of the following: A
 subquery expression to an MBean or a qualified attribute expression
 to an MBean of the wrong class.
class
InvalidAttributeValueException
The value specified is not valid for the attribute.
class
JMException
Exceptions thrown by JMX implementations.
class
JMRuntimeException
Runtime exceptions emitted by JMX implementations.
class
JMX
Static methods from the JMX API.
class
ListenerNotFoundException
The specified MBean listener does not exist in the repository.
class
MalformedObjectNameException
The format of the string does not correspond to a valid ObjectName.
class
MBeanAttributeInfo
Describes an MBean attribute exposed for management.
class
MBeanConstructorInfo
Describes a constructor exposed by an MBean.
class
MBeanException
Represents "user defined" exceptions thrown by MBean methods
 in the agent.
class
MBeanFeatureInfo
Provides general information for an MBean descriptor object.
class
MBeanInfo
Describes the management interface exposed by an MBean; that is,
 the set of attributes and operations which are available for
 management operations.
class
MBeanNotificationInfo
The
MBeanNotificationInfo
class is used to describe the
 characteristics of the different notification instances
 emitted by an MBean, for a given Java class of notification.
class
MBeanOperationInfo
Describes a management operation exposed by an MBean.
class
MBeanParameterInfo
Describes an argument of an operation exposed by an MBean.
class
MBeanPermission
Permission controlling access to MBeanServer operations.
class
MBeanRegistrationException
Wraps exceptions thrown by the preRegister(), preDeregister() methods
 of the
MBeanRegistration
interface.
class
MBeanServerBuilder
This class represents a builder that creates a default
MBeanServer
implementation.
class
MBeanServerDelegate
Represents  the MBean server from the management point of view.
class
MBeanServerFactory
Provides MBean server references.
class
MBeanServerInvocationHandler
InvocationHandler
that forwards methods in an MBean's
 management interface through the MBean server to the MBean.
class
MBeanServerNotification
Represents a notification emitted by the MBean Server through the MBeanServerDelegate MBean.
class
MBeanServerPermission
A Permission to perform actions related to MBeanServers.
class
MBeanTrustPermission
This permission represents "trust" in a signer or codebase.
class
NotCompliantMBeanException
Exception which occurs when trying to register an  object in the MBean server that is not a JMX compliant MBean.
class
Notification
The Notification class represents a notification emitted by an
 MBean.
class
NotificationBroadcasterSupport
Provides an implementation of
NotificationEmitter
interface.
class
NotificationFilterSupport
Provides an implementation of the
NotificationFilter
interface.
class
ObjectInstance
Used to represent the object name of an MBean and its class name.
class
ObjectName
Represents the object name of an MBean, or a pattern that can
 match the names of several MBeans.
class
OperationsException
Represents exceptions thrown in the MBean server when performing operations
 on MBeans.
class
Query
Constructs query object constraints.
class
QueryEval
Allows a query to be performed in the context of a specific MBean server.
class
ReflectionException
Represents exceptions thrown in the MBean server when using the
 java.lang.reflect classes to invoke methods on MBeans.
class
RuntimeErrorException
When a
java.lang.Error
occurs in the agent it should be caught and
 re-thrown as a
RuntimeErrorException
.
class
RuntimeMBeanException
Represents runtime exceptions thrown by MBean methods in
 the agent.
class
RuntimeOperationsException
Represents runtime exceptions thrown in the agent when performing operations on MBeans.
class
ServiceNotFoundException
Represents exceptions raised when a requested service is not supported.
class
StandardEmitterMBean
An MBean whose management interface is determined by reflection
 on a Java interface, and that emits notifications.
class
StandardMBean
An MBean whose management interface is determined by reflection
 on a Java interface.
class
StringValueExp
Represents strings that are arguments to relational constraints.
Fields in
javax.management
declared as
Object
Modifier and Type
Field
Description
protected
Object
Notification.
source
This field hides the
EventObject.source
field in the
 parent class to make it non-transient and therefore part of the
 serialized form.
Methods in
javax.management
that return
Object
Modifier and Type
Method
Description
Object
Descriptor.
clone
()
Returns a descriptor which is equal to this descriptor.
Object
MBeanAttributeInfo.
clone
()
Returns a shallow clone of this instance.
Object
MBeanConstructorInfo.
clone
()
Returns a shallow clone of this instance.
Object
MBeanInfo.
clone
()
Returns a shallow clone of this instance.
Object
MBeanNotificationInfo.
clone
()
Returns a shallow clone of this instance.
Object
MBeanOperationInfo.
clone
()
Returns a shallow clone of this instance.
Object
MBeanParameterInfo.
clone
()
Returns a shallow clone of this instance.
protected
Object
AttributeValueExp.
getAttribute
(
ObjectName
name)
Return the value of the given attribute in the named MBean.
Object
DynamicMBean.
getAttribute
(
String
attribute)
Obtain the value of a specific attribute of the Dynamic MBean.
Object
MBeanServer.
getAttribute
(
ObjectName
name,
String
attribute)
Object
MBeanServerConnection.
getAttribute
(
ObjectName
name,
String
attribute)
Gets the value of a specific attribute of a named MBean.
Object
StandardMBean.
getAttribute
(
String
attribute)
Object
Descriptor.
getFieldValue
(
String
fieldName)
Returns the value for a specific field name, or null if no value
 is present for that name.
final
Object
ImmutableDescriptor.
getFieldValue
(
String
fieldName)
Object
[]
Descriptor.
getFieldValues
(
String
... fieldNames)
Returns all the field values in the descriptor as an array of Objects.
final
Object
[]
ImmutableDescriptor.
getFieldValues
(
String
... fieldNames)
Object
StandardMBean.
getImplementation
()
Get the implementation of this Standard MBean (or MXBean).
Object
AttributeChangeNotification.
getNewValue
()
Gets the new value of the attribute which has changed.
Object
AttributeChangeNotification.
getOldValue
()
Gets the old value of the attribute which has changed.
Object
Notification.
getUserData
()
Get the user data.
Object
Attribute.
getValue
()
Returns an Object that is the value of this attribute.
Object
MBeanServer.
instantiate
(
String
className)
Instantiates an object using the list of all class loaders
 registered in the MBean server's
Class Loader
 Repository
.
Object
MBeanServer.
instantiate
(
String
className,
Object
[] params,
String
[] signature)
Instantiates an object using the list of all class loaders
 registered in the MBean server
Class Loader
 Repository
.
Object
MBeanServer.
instantiate
(
String
className,
ObjectName
loaderName)
Instantiates an object using the class Loader specified by its
ObjectName
.
Object
MBeanServer.
instantiate
(
String
className,
ObjectName
loaderName,
Object
[] params,
String
[] signature)
Instantiates an object.
Object
DynamicMBean.
invoke
(
String
actionName,
Object
[] params,
String
[] signature)
Allows an action to be invoked on the Dynamic MBean.
Object
MBeanServer.
invoke
(
ObjectName
name,
String
operationName,
Object
[] params,
String
[] signature)
Object
MBeanServerConnection.
invoke
(
ObjectName
name,
String
operationName,
Object
[] params,
String
[] signature)
Invokes an operation on an MBean.
Object
MBeanServerInvocationHandler.
invoke
(
Object
proxy,
Method
method,
Object
[] args)
Object
StandardMBean.
invoke
(
String
actionName,
Object
[] params,
String
[] signature)
Object
AttributeList.
set
(int index,
Object
element)
Replaces the element at the specified position in this list with
 the specified element.
Methods in
javax.management
with parameters of type
Object
Modifier and Type
Method
Description
void
AttributeList.
add
(int index,
Object
element)
Inserts the specified element at the specified position in this
 list.
boolean
AttributeList.
add
(
Object
element)
Appends the specified element to the end of this list.
void
MBeanServer.
addNotificationListener
(
ObjectName
name,
NotificationListener
listener,
NotificationFilter
filter,
Object
handback)
Adds a listener to a registered MBean.
void
MBeanServer.
addNotificationListener
(
ObjectName
name,
ObjectName
listener,
NotificationFilter
filter,
Object
handback)
Adds a listener to a registered MBean.
void
MBeanServerConnection.
addNotificationListener
(
ObjectName
name,
NotificationListener
listener,
NotificationFilter
filter,
Object
handback)
Adds a listener to a registered MBean.
void
MBeanServerConnection.
addNotificationListener
(
ObjectName
name,
ObjectName
listener,
NotificationFilter
filter,
Object
handback)
Adds a listener to a registered MBean.
void
MBeanServerDelegate.
addNotificationListener
(
NotificationListener
listener,
NotificationFilter
filter,
Object
handback)
void
NotificationBroadcaster.
addNotificationListener
(
NotificationListener
listener,
NotificationFilter
filter,
Object
handback)
Adds a listener to this MBean.
void
NotificationBroadcasterSupport.
addNotificationListener
(
NotificationListener
listener,
NotificationFilter
filter,
Object
handback)
Adds a listener.
void
StandardEmitterMBean.
addNotificationListener
(
NotificationListener
listener,
NotificationFilter
filter,
Object
handback)
ObjectInstance
MBeanServer.
createMBean
(
String
className,
ObjectName
name,
Object
[] params,
String
[] signature)
Instantiates and registers an MBean in the MBean server.
ObjectInstance
MBeanServer.
createMBean
(
String
className,
ObjectName
name,
ObjectName
loaderName,
Object
[] params,
String
[] signature)
Instantiates and registers an MBean in the MBean server.
ObjectInstance
MBeanServerConnection.
createMBean
(
String
className,
ObjectName
name,
Object
[] params,
String
[] signature)
Instantiates and registers an MBean in the MBean server.
ObjectInstance
MBeanServerConnection.
createMBean
(
String
className,
ObjectName
name,
ObjectName
loaderName,
Object
[] params,
String
[] signature)
Instantiates and registers an MBean in the MBean server.
boolean
Attribute.
equals
(
Object
object)
Compares the current Attribute Object with another Attribute Object.
boolean
Descriptor.
equals
(
Object
obj)
Compares this descriptor to the given object.
boolean
ImmutableDescriptor.
equals
(
Object
o)
Compares this descriptor to the given object.
boolean
MBeanAttributeInfo.
equals
(
Object
o)
Compare this MBeanAttributeInfo to another.
boolean
MBeanConstructorInfo.
equals
(
Object
o)
Compare this MBeanConstructorInfo to another.
boolean
MBeanFeatureInfo.
equals
(
Object
o)
Compare this MBeanFeatureInfo to another.
boolean
MBeanInfo.
equals
(
Object
o)
Compare this MBeanInfo to another.
boolean
MBeanNotificationInfo.
equals
(
Object
o)
Compare this MBeanNotificationInfo to another.
boolean
MBeanOperationInfo.
equals
(
Object
o)
Compare this MBeanOperationInfo to another.
boolean
MBeanParameterInfo.
equals
(
Object
o)
Compare this MBeanParameterInfo to another.
boolean
MBeanPermission.
equals
(
Object
obj)
Checks two MBeanPermission objects for equality.
boolean
MBeanServerPermission.
equals
(
Object
obj)
Checks two MBeanServerPermission objects for equality.
boolean
ObjectInstance.
equals
(
Object
object)
Compares the current object instance with another object instance.
boolean
ObjectName.
equals
(
Object
object)
Compares the current object name with another object name.
protected
MBeanConstructorInfo
[]
StandardMBean.
getConstructors
(
MBeanConstructorInfo
[] ctors,
Object
impl)
Customization hook:
 Get the MBeanConstructorInfo[] that will be used in the MBeanInfo
 returned by this MBean.
protected void
NotificationBroadcasterSupport.
handleNotification
(
NotificationListener
listener,
Notification
notif,
Object
handback)
This method is called by
sendNotification
for each listener in order to send the
 notification to that listener.
void
NotificationListener.
handleNotification
(
Notification
notification,
Object
handback)
Invoked when a JMX notification occurs.
Object
MBeanServer.
instantiate
(
String
className,
Object
[] params,
String
[] signature)
Instantiates an object using the list of all class loaders
 registered in the MBean server
Class Loader
 Repository
.
Object
MBeanServer.
instantiate
(
String
className,
ObjectName
loaderName,
Object
[] params,
String
[] signature)
Instantiates an object.
Object
DynamicMBean.
invoke
(
String
actionName,
Object
[] params,
String
[] signature)
Allows an action to be invoked on the Dynamic MBean.
Object
MBeanServer.
invoke
(
ObjectName
name,
String
operationName,
Object
[] params,
String
[] signature)
Object
MBeanServerConnection.
invoke
(
ObjectName
name,
String
operationName,
Object
[] params,
String
[] signature)
Invokes an operation on an MBean.
Object
MBeanServerInvocationHandler.
invoke
(
Object
proxy,
Method
method,
Object
[] args)
Object
StandardMBean.
invoke
(
String
actionName,
Object
[] params,
String
[] signature)
ObjectInstance
MBeanServer.
registerMBean
(
Object
object,
ObjectName
name)
Registers a pre-existing object as an MBean with the MBean
 server.
void
MBeanServer.
removeNotificationListener
(
ObjectName
name,
NotificationListener
listener,
NotificationFilter
filter,
Object
handback)
void
MBeanServer.
removeNotificationListener
(
ObjectName
name,
ObjectName
listener,
NotificationFilter
filter,
Object
handback)
void
MBeanServerConnection.
removeNotificationListener
(
ObjectName
name,
NotificationListener
listener,
NotificationFilter
filter,
Object
handback)
Removes a listener from a registered MBean.
void
MBeanServerConnection.
removeNotificationListener
(
ObjectName
name,
ObjectName
listener,
NotificationFilter
filter,
Object
handback)
Removes a listener from a registered MBean.
void
MBeanServerDelegate.
removeNotificationListener
(
NotificationListener
listener,
NotificationFilter
filter,
Object
handback)
void
NotificationBroadcasterSupport.
removeNotificationListener
(
NotificationListener
listener,
NotificationFilter
filter,
Object
handback)
void
NotificationEmitter.
removeNotificationListener
(
NotificationListener
listener,
NotificationFilter
filter,
Object
handback)
Removes a listener from this MBean.
void
StandardEmitterMBean.
removeNotificationListener
(
NotificationListener
listener,
NotificationFilter
filter,
Object
handback)
Object
AttributeList.
set
(int index,
Object
element)
Replaces the element at the specified position in this list with
 the specified element.
void
Descriptor.
setField
(
String
fieldName,
Object
fieldValue)
Sets the value for a specific field name.
final void
ImmutableDescriptor.
setField
(
String
fieldName,
Object
fieldValue)
This operation is unsupported since this class is immutable.
void
Descriptor.
setFields
(
String
[] fieldNames,
Object
[] fieldValues)
Sets all fields in the field names array to the new value with
 the same index in the field values array.
final void
ImmutableDescriptor.
setFields
(
String
[] fieldNames,
Object
[] fieldValues)
This operation is unsupported since this class is immutable.
void
StandardMBean.
setImplementation
(
Object
implementation)
Replace the implementation object wrapped in this object.
void
Notification.
setSource
(
Object
source)
Sets the source.
void
Notification.
setUserData
(
Object
userData)
Set the user data.
Constructors in
javax.management
with parameters of type
Object
Modifier
Constructor
Description
Attribute
(
String
name,
Object
value)
Constructs an Attribute object which associates the given attribute name with the given value.
AttributeChangeNotification
(
Object
source,
 long sequenceNumber,
 long timeStamp,
String
msg,
String
attributeName,
String
attributeType,
Object
oldValue,
Object
newValue)
Constructs an attribute change notification object.
BadAttributeValueExpException
(
Object
val)
Constructs a BadAttributeValueExpException using the specified Object to
 create the toString() value.
ImmutableDescriptor
(
String
[] fieldNames,
Object
[] fieldValues)
Construct a descriptor containing the given fields and values.
InvalidApplicationException
(
Object
val)
Constructs an
InvalidApplicationException
with the specified
Object
.
MBeanServerNotification
(
String
type,
Object
source,
 long sequenceNumber,
ObjectName
objectName)
Creates an MBeanServerNotification object specifying object names of
 the MBeans that caused the notification and the specified notification
 type.
Notification
(
String
type,
Object
source,
 long sequenceNumber)
Creates a Notification object.
Notification
(
String
type,
Object
source,
 long sequenceNumber,
 long timeStamp)
Creates a Notification object.
Notification
(
String
type,
Object
source,
 long sequenceNumber,
 long timeStamp,
String
message)
Creates a Notification object.
Notification
(
String
type,
Object
source,
 long sequenceNumber,
String
message)
Creates a Notification object.
Uses of
Object
in
javax.management.loading
Subclasses of
Object
in
javax.management.loading
Modifier and Type
Class
Description
class
DefaultLoaderRepository
Deprecated.
Use
MBeanServer.getClassLoaderRepository()
instead.
class
MLet
Deprecated, for removal: This API element is subject to removal in a future version.
This API is part of Management Applets (m-lets), which is a legacy feature that allows loading
 of remote MBeans.
class
MLetContent
Deprecated, for removal: This API element is subject to removal in a future version.
This API is part of Management Applets (m-lets), which is a legacy feature that allows loading
 of remote MBeans.
class
PrivateMLet
Deprecated, for removal: This API element is subject to removal in a future version.
This API is part of Management Applets (m-lets), which is a legacy feature that allows loading
 of remote MBeans.
Methods in
javax.management.loading
that return types with arguments of type
Object
Modifier and Type
Method
Description
Set
<
Object
>
MLet.
getMBeansFromURL
(
String
url)
Deprecated, for removal: This API element is subject to removal in a future version.
Loads a text file containing MLET tags that define the MBeans to
 be added to the MBean server.
Set
<
Object
>
MLet.
getMBeansFromURL
(
URL
url)
Deprecated, for removal: This API element is subject to removal in a future version.
Loads a text file containing MLET tags that define the MBeans to
 be added to the MBean server.
Set
<
Object
>
MLetMBean.
getMBeansFromURL
(
String
url)
Deprecated, for removal: This API element is subject to removal in a future version.
Loads a text file containing MLET tags that define the MBeans
 to be added to the MBean server.
Set
<
Object
>
MLetMBean.
getMBeansFromURL
(
URL
url)
Deprecated, for removal: This API element is subject to removal in a future version.
Loads a text file containing MLET tags that define the MBeans
 to be added to the MBean server.
Uses of
Object
in
javax.management.modelmbean
Subclasses of
Object
in
javax.management.modelmbean
Modifier and Type
Class
Description
class
DescriptorSupport
This class represents the metadata set for a ModelMBean element.
class
InvalidTargetObjectTypeException
Exception thrown when an invalid target object type is specified.
class
ModelMBeanAttributeInfo
The ModelMBeanAttributeInfo object describes an attribute of the ModelMBean.
class
ModelMBeanConstructorInfo
The ModelMBeanConstructorInfo object describes a constructor of the ModelMBean.
class
ModelMBeanInfoSupport
This class represents the meta data for ModelMBeans.
class
ModelMBeanNotificationInfo
The ModelMBeanNotificationInfo object describes a notification emitted
 by a ModelMBean.
class
ModelMBeanOperationInfo
The ModelMBeanOperationInfo object describes a management operation of
 the ModelMBean.
class
RequiredModelMBean
This class is the implementation of a ModelMBean.
class
XMLParseException
This exception is thrown when an XML formatted string is being parsed into ModelMBean objects
 or when XML formatted strings are being created from ModelMBean objects.
Methods in
javax.management.modelmbean
that return
Object
Modifier and Type
Method
Description
Object
DescriptorSupport.
clone
()
Returns a new Descriptor which is a duplicate of the Descriptor.
Object
ModelMBeanAttributeInfo.
clone
()
Creates and returns a new ModelMBeanAttributeInfo which is a duplicate of this ModelMBeanAttributeInfo.
Object
ModelMBeanConstructorInfo.
clone
()
Creates and returns a new ModelMBeanConstructorInfo which is a duplicate of this ModelMBeanConstructorInfo.
Object
ModelMBeanInfo.
clone
()
Creates and returns a copy of this object.
Object
ModelMBeanInfoSupport.
clone
()
Returns a shallow clone of this instance.
Object
ModelMBeanNotificationInfo.
clone
()
Creates and returns a new ModelMBeanNotificationInfo which is a
 duplicate of this ModelMBeanNotificationInfo.
Object
ModelMBeanOperationInfo.
clone
()
Creates and returns a new ModelMBeanOperationInfo which is a
 duplicate of this ModelMBeanOperationInfo.
Object
RequiredModelMBean.
getAttribute
(
String
attrName)
Returns the value of a specific attribute defined for this
 ModelMBean.
Object
DescriptorSupport.
getFieldValue
(
String
fieldName)
Object
[]
DescriptorSupport.
getFieldValues
(
String
... fieldNames)
Object
RequiredModelMBean.
invoke
(
String
opName,
Object
[] opArgs,
String
[] sig)
Invokes a method on or through a RequiredModelMBean and returns
 the result of the method execution.
Methods in
javax.management.modelmbean
with parameters of type
Object
Modifier and Type
Method
Description
void
ModelMBeanNotificationBroadcaster.
addAttributeChangeNotificationListener
(
NotificationListener
listener,
String
attributeName,
Object
handback)
Registers an object which implements the NotificationListener interface as a listener.
void
RequiredModelMBean.
addAttributeChangeNotificationListener
(
NotificationListener
inlistener,
String
inAttributeName,
Object
inhandback)
void
RequiredModelMBean.
addNotificationListener
(
NotificationListener
listener,
NotificationFilter
filter,
Object
handback)
Registers an object which implements the NotificationListener
 interface as a listener.
boolean
DescriptorSupport.
equals
(
Object
o)
Compares this descriptor to the given object.
Object
RequiredModelMBean.
invoke
(
String
opName,
Object
[] opArgs,
String
[] sig)
Invokes a method on or through a RequiredModelMBean and returns
 the result of the method execution.
void
RequiredModelMBean.
removeNotificationListener
(
NotificationListener
listener,
NotificationFilter
filter,
Object
handback)
void
DescriptorSupport.
setField
(
String
fieldName,
Object
fieldValue)
void
DescriptorSupport.
setFields
(
String
[] fieldNames,
Object
[] fieldValues)
void
ModelMBean.
setManagedResource
(
Object
mr,
String
mr_type)
Sets the instance handle of the object against which to
 execute all methods in this ModelMBean management interface
 (MBeanInfo and Descriptors).
void
RequiredModelMBean.
setManagedResource
(
Object
mr,
String
mr_type)
Sets the instance handle of the object against which to
 execute all methods in this ModelMBean management interface
 (MBeanInfo and Descriptors).
Constructors in
javax.management.modelmbean
with parameters of type
Object
Modifier
Constructor
Description
DescriptorSupport
(
String
[] fieldNames,
Object
[] fieldValues)
Constructor taking field names and field values.
Uses of
Object
in
javax.management.monitor
Subclasses of
Object
in
javax.management.monitor
Modifier and Type
Class
Description
class
CounterMonitor
Defines a monitor MBean designed to observe the values of a counter
 attribute.
class
GaugeMonitor
Defines a monitor MBean designed to observe the values of a gauge attribute.
class
Monitor
Defines the part common to all monitor MBeans.
class
MonitorNotification
Provides definitions of the notifications sent by monitor MBeans.
class
MonitorSettingException
Exception thrown by the monitor when a monitor setting becomes invalid while the monitor is running.
class
StringMonitor
Defines a monitor MBean designed to observe the values of a string
 attribute.
Methods in
javax.management.monitor
that return
Object
Modifier and Type
Method
Description
Object
MonitorNotification.
getDerivedGauge
()
Gets the derived gauge of this monitor notification.
Object
MonitorNotification.
getTrigger
()
Gets the threshold/string (depending on the monitor type) that triggered off this monitor notification.
Uses of
Object
in
javax.management.openmbean
Subclasses of
Object
in
javax.management.openmbean
Modifier and Type
Class
Description
class
ArrayType
<T>
The
ArrayType
class is the
open type
class whose instances describe
 all
open data
values which are n-dimensional arrays of
open data
values.
class
CompositeDataInvocationHandler
An
InvocationHandler
that forwards getter methods to a
CompositeData
.
class
CompositeDataSupport
The
CompositeDataSupport
class is the
open data
class which
 implements the
CompositeData
interface.
class
CompositeType
The
CompositeType
class is the
open type
class
 whose instances describe the types of
CompositeData
values.
class
InvalidKeyException
This runtime exception is thrown to indicate that a method parameter which was expected to be
 an item name of a
composite data
or a row index of a
tabular data
is not valid.
class
InvalidOpenTypeException
This runtime exception is thrown to indicate that the
open type
of an
open data
value
 is not the one expected.
class
KeyAlreadyExistsException
This runtime exception is thrown to indicate that the index of a row to be added to a
tabular data
instance
 is already used to refer to another row in this
tabular data
instance.
class
OpenDataException
This checked exception is thrown when an
open type
, an
open data
or an
open MBean metadata info
instance
 could not be constructed because one or more validity constraints were not met.
class
OpenMBeanAttributeInfoSupport
Describes an attribute of an open MBean.
class
OpenMBeanConstructorInfoSupport
Describes a constructor of an Open MBean.
class
OpenMBeanInfoSupport
The
OpenMBeanInfoSupport
class describes the management
 information of an
open MBean
: it is a subclass of
MBeanInfo
, and it implements the
OpenMBeanInfo
interface.
class
OpenMBeanOperationInfoSupport
Describes an operation of an Open MBean.
class
OpenMBeanParameterInfoSupport
Describes a parameter used in one or more operations or
 constructors of an open MBean.
class
OpenType
<T>
The
OpenType
class is the parent abstract class of all classes which describe the actual
open type
of open data values.
final class
SimpleType
<T>
The
SimpleType
class is the
open type
class whose instances describe
 all
open data
values which are neither arrays,
 nor
CompositeData
values,
 nor
TabularData
values.
class
TabularDataSupport
The
TabularDataSupport
class is the
open data
class which implements the
TabularData
and the
Map
interfaces, and which is internally based on a hash map data structure.
class
TabularType
The
TabularType
class is the
open type
class
 whose instances describe the types of
TabularData
values.
Methods in
javax.management.openmbean
that return
Object
Modifier and Type
Method
Description
Object
[]
TabularData.
calculateIndex
(
CompositeData
value)
Calculates the index that would be used in this
TabularData
instance to refer to the specified
 composite data
value
parameter if it were added to this instance.
Object
[]
TabularDataSupport.
calculateIndex
(
CompositeData
value)
Calculates the index that would be used in this
TabularData
instance to refer
 to the specified composite data
value
parameter if it were added to this instance.
Object
TabularDataSupport.
clone
()
Returns a clone of this
TabularDataSupport
instance:
 the clone is obtained by calling
super.clone()
, and then cloning the underlying map.
Object
CompositeData.
get
(
String
key)
Returns the value of the item whose name is
key
.
Object
CompositeDataSupport.
get
(
String
key)
Returns the value of the item whose name is
key
.
Object
TabularDataSupport.
get
(
Object
key)
This method simply calls
get((Object[]) key)
.
Object
[]
CompositeData.
getAll
(
String
[] keys)
Returns an array of the values of the items whose names
 are specified by
keys
, in the same order as
keys
.
Object
[]
CompositeDataSupport.
getAll
(
String
[] keys)
Returns an array of the values of the items whose names are specified by
keys
, in the same order as
keys
.
Object
OpenMBeanAttributeInfoSupport.
getDefaultValue
()
Returns the default value for the attribute described by this
OpenMBeanAttributeInfoSupport
instance, if specified,
 or
null
otherwise.
Object
OpenMBeanParameterInfo.
getDefaultValue
()
Returns the default value for this parameter, if it has one, or
null
otherwise.
Object
OpenMBeanParameterInfoSupport.
getDefaultValue
()
Returns the default value for the parameter described by this
OpenMBeanParameterInfoSupport
instance, if specified,
 or
null
otherwise.
Object
CompositeDataInvocationHandler.
invoke
(
Object
proxy,
Method
method,
Object
[] args)
Object
TabularDataSupport.
put
(
Object
key,
Object
value)
This method simply calls
put((CompositeData) value)
and
 therefore ignores its
key
parameter which can be
null
.
Object
SimpleType.
readResolve
()
Replace an object read from an
ObjectInputStream
with the unique instance for that
 value.
Object
TabularDataSupport.
remove
(
Object
key)
This method simply calls
remove((Object[]) key)
.
Methods in
javax.management.openmbean
that return types with arguments of type
Object
Modifier and Type
Method
Description
Set
<
Map.Entry
<
Object
,
Object
>>
TabularDataSupport.
entrySet
()
Returns a collection view of the index to row mappings
 contained in this
TabularDataSupport
instance.
Set
<
Map.Entry
<
Object
,
Object
>>
TabularDataSupport.
entrySet
()
Returns a collection view of the index to row mappings
 contained in this
TabularDataSupport
instance.
Set
<
Object
>
TabularDataSupport.
keySet
()
Returns a set view of the keys contained in the underlying map of this
TabularDataSupport
instance used to index the rows.
Collection
<
Object
>
TabularDataSupport.
values
()
Returns a collection view of the rows contained in this
TabularDataSupport
instance.
Methods in
javax.management.openmbean
with parameters of type
Object
Modifier and Type
Method
Description
boolean
TabularData.
containsKey
(
Object
[] key)
Returns
true
if and only if this
TabularData
instance contains a
CompositeData
value
 (ie a row) whose index is the specified
key
.
boolean
TabularDataSupport.
containsKey
(
Object
key)
Returns
true
if and only if this
TabularData
instance contains a
CompositeData
value
 (ie a row) whose index is the specified
key
.
boolean
TabularDataSupport.
containsKey
(
Object
[] key)
Returns
true
if and only if this
TabularData
instance contains a
CompositeData
value
 (ie a row) whose index is the specified
key
.
boolean
CompositeData.
containsValue
(
Object
value)
Returns
true
if and only if this
CompositeData
instance contains an item
 whose value is
value
.
boolean
CompositeDataSupport.
containsValue
(
Object
value)
Returns
true
if and only if this
CompositeData
instance
 contains an item
 whose value is
value
.
boolean
TabularDataSupport.
containsValue
(
Object
value)
Returns
true
if and only if this
TabularData
instance contains the specified
 value.
boolean
ArrayType.
equals
(
Object
obj)
Compares the specified
obj
parameter with this
ArrayType
instance for equality.
boolean
CompositeData.
equals
(
Object
obj)
Compares the specified
obj
parameter with this
CompositeData
instance for equality.
boolean
CompositeDataSupport.
equals
(
Object
obj)
Compares the specified
obj
parameter with this
CompositeDataSupport
instance for equality.
boolean
CompositeType.
equals
(
Object
obj)
Compares the specified
obj
parameter with this
CompositeType
instance for equality.
boolean
OpenMBeanAttributeInfo.
equals
(
Object
obj)
Compares the specified
obj
parameter with this
OpenMBeanAttributeInfo
instance for equality.
boolean
OpenMBeanAttributeInfoSupport.
equals
(
Object
obj)
Compares the specified
obj
parameter with this
OpenMBeanAttributeInfoSupport
instance for equality.
boolean
OpenMBeanConstructorInfo.
equals
(
Object
obj)
Compares the specified
obj
parameter with this
OpenMBeanConstructorInfo
instance for equality.
boolean
OpenMBeanConstructorInfoSupport.
equals
(
Object
obj)
Compares the specified
obj
parameter with this
OpenMBeanConstructorInfoSupport
instance for
 equality.
boolean
OpenMBeanInfo.
equals
(
Object
obj)
Compares the specified
obj
parameter with this
OpenMBeanInfo
instance for equality.
boolean
OpenMBeanInfoSupport.
equals
(
Object
obj)
Compares the specified
obj
parameter with this
OpenMBeanInfoSupport
instance for equality.
boolean
OpenMBeanOperationInfo.
equals
(
Object
obj)
Compares the specified
obj
parameter with this
OpenMBeanOperationInfo
instance for equality.
boolean
OpenMBeanOperationInfoSupport.
equals
(
Object
obj)
Compares the specified
obj
parameter with this
OpenMBeanOperationInfoSupport
instance for
 equality.
boolean
OpenMBeanParameterInfo.
equals
(
Object
obj)
Compares the specified
obj
parameter with this
OpenMBeanParameterInfo
instance for equality.
boolean
OpenMBeanParameterInfoSupport.
equals
(
Object
obj)
Compares the specified
obj
parameter with this
OpenMBeanParameterInfoSupport
instance for equality.
abstract boolean
OpenType.
equals
(
Object
obj)
Compares the specified
obj
parameter with this
 open type instance for equality.
boolean
SimpleType.
equals
(
Object
obj)
Compares the specified
obj
parameter with this
SimpleType
instance for equality.
boolean
TabularData.
equals
(
Object
obj)
Compares the specified
obj
parameter with this
TabularData
instance for equality.
boolean
TabularDataSupport.
equals
(
Object
obj)
Compares the specified
obj
parameter with this
TabularDataSupport
instance for equality.
boolean
TabularType.
equals
(
Object
obj)
Compares the specified
obj
parameter with this
TabularType
instance for equality.
CompositeData
TabularData.
get
(
Object
[] key)
Returns the
CompositeData
value whose index is
key
, or
null
if there is no value mapping
 to
key
, in this
TabularData
instance.
Object
TabularDataSupport.
get
(
Object
key)
This method simply calls
get((Object[]) key)
.
CompositeData
TabularDataSupport.
get
(
Object
[] key)
Returns the
CompositeData
value whose index is
key
, or
null
if there is no value mapping
 to
key
, in this
TabularData
instance.
Object
CompositeDataInvocationHandler.
invoke
(
Object
proxy,
Method
method,
Object
[] args)
boolean
ArrayType.
isValue
(
Object
obj)
Tests whether
obj
is a value for this
ArrayType
instance.
boolean
CompositeType.
isValue
(
Object
obj)
Tests whether
obj
is a value which could be
 described by this
CompositeType
instance.
boolean
OpenMBeanAttributeInfoSupport.
isValue
(
Object
obj)
Tests whether
obj
is a valid value for the attribute
 described by this
OpenMBeanAttributeInfoSupport
instance.
boolean
OpenMBeanParameterInfo.
isValue
(
Object
obj)
Tests whether
obj
is a valid value for the parameter
 described by this
OpenMBeanParameterInfo
instance.
boolean
OpenMBeanParameterInfoSupport.
isValue
(
Object
obj)
Tests whether
obj
is a valid value for the parameter
 described by this
OpenMBeanParameterInfo
instance.
abstract boolean
OpenType.
isValue
(
Object
obj)
Tests whether
obj
is a value for this open type.
boolean
SimpleType.
isValue
(
Object
obj)
Tests whether
obj
is a value for this
SimpleType
instance.
boolean
TabularType.
isValue
(
Object
obj)
Tests whether
obj
is a value which could be
 described by this
TabularType
instance.
Object
TabularDataSupport.
put
(
Object
key,
Object
value)
This method simply calls
put((CompositeData) value)
and
 therefore ignores its
key
parameter which can be
null
.
CompositeData
TabularData.
remove
(
Object
[] key)
Removes the
CompositeData
value whose index is
key
from this
TabularData
instance,
 and returns the removed value, or returns
null
if there is no value whose index is
key
.
Object
TabularDataSupport.
remove
(
Object
key)
This method simply calls
remove((Object[]) key)
.
CompositeData
TabularDataSupport.
remove
(
Object
[] key)
Removes the
CompositeData
value whose index is
key
from this
TabularData
instance,
 and returns the removed value, or returns
null
if there is no value whose index is
key
.
Constructors in
javax.management.openmbean
with parameters of type
Object
Modifier
Constructor
Description
CompositeDataSupport
(
CompositeType
compositeType,
String
[] itemNames,
Object
[] itemValues)
Constructs a
CompositeDataSupport
instance with the specified
compositeType
, whose item values
 are specified by
itemValues[]
, in the same order as in
itemNames[]
.
OpenMBeanAttributeInfoSupport
(
String
name,
String
description,
OpenType
<T> openType,
 boolean isReadable,
 boolean isWritable,
 boolean isIs,
 T defaultValue,
 T[] legalValues)
Constructs an
OpenMBeanAttributeInfoSupport
instance,
 which describes the attribute of an open MBean with the
 specified
name
,
openType
,
description
,
defaultValue
and
legalValues
, and the specified
 read/write access properties.
OpenMBeanParameterInfoSupport
(
String
name,
String
description,
OpenType
<T> openType,
 T defaultValue,
 T[] legalValues)
Constructs an
OpenMBeanParameterInfoSupport
instance,
 which describes the parameter used in one or more operations or
 constructors of a class of open MBeans, with the specified
name
,
openType
,
description
,
defaultValue
and
legalValues
.
Uses of
Object
in
javax.management.relation
Subclasses of
Object
in
javax.management.relation
Modifier and Type
Class
Description
class
InvalidRelationIdException
This exception is raised when relation id provided for a relation is already
 used.
class
InvalidRelationServiceException
This exception is raised when an invalid Relation Service is provided.
class
InvalidRelationTypeException
Invalid relation type.
class
InvalidRoleInfoException
This exception is raised when, in a role info, its minimum degree is greater
 than its maximum degree.
class
InvalidRoleValueException
Role value is invalid.
class
MBeanServerNotificationFilter
Filter for
MBeanServerNotification
.
class
RelationException
This class is the superclass of any exception which can be raised during
 relation management.
class
RelationNotFoundException
This exception is raised when there is no relation for a given relation id
 in a Relation Service.
class
RelationNotification
A notification of a change in the Relation Service.
class
RelationService
The Relation Service is in charge of creating and deleting relation types
 and relations, of handling the consistency and of providing query
 mechanisms.
class
RelationServiceNotRegisteredException
This exception is raised when an access is done to the Relation Service and
 that one is not registered.
class
RelationSupport
A RelationSupport object is used internally by the Relation Service to
 represent simple relations (only roles, no properties or methods), with an
 unlimited number of roles, of any relation type.
class
RelationTypeNotFoundException
This exception is raised when there is no relation type with given name in
 Relation Service.
class
RelationTypeSupport
A RelationTypeSupport object implements the RelationType interface.
class
Role
Represents a role: includes a role name and referenced MBeans (via their
 ObjectNames).
class
RoleInfo
A RoleInfo object summarises a role in a relation type.
class
RoleInfoNotFoundException
This exception is raised when there is no role info with given name in a
 given relation type.
class
RoleList
A RoleList represents a list of roles (Role objects).
class
RoleNotFoundException
This exception is raised when a role in a relation does not exist, or is not
 readable, or is not settable.
class
RoleResult
Represents the result of a multiple access to several roles of a relation
 (either for reading or writing).
class
RoleStatus
This class describes the various problems which can be encountered when
 accessing a role.
class
RoleUnresolved
Represents an unresolved role: a role not retrieved from a relation due
 to a problem.
class
RoleUnresolvedList
A RoleUnresolvedList represents a list of RoleUnresolved objects,
 representing roles not retrieved from a relation due to a problem
 encountered when trying to access (read or write) the roles.
Methods in
javax.management.relation
that return
Object
Modifier and Type
Method
Description
Object
Role.
clone
()
Clone the role object.
Object
RoleUnresolved.
clone
()
Clone this object.
Methods in
javax.management.relation
with parameters of type
Object
Modifier and Type
Method
Description
void
RelationService.
handleNotification
(
Notification
notif,
Object
handback)
Invoked when a JMX notification occurs.
Constructors in
javax.management.relation
with parameters of type
Object
Modifier
Constructor
Description
RelationNotification
(
String
notifType,
Object
sourceObj,
 long sequence,
 long timeStamp,
String
message,
String
id,
String
typeName,
ObjectName
objectName,
String
name,
List
<
ObjectName
> newValue,
List
<
ObjectName
> oldValue)
Creates a notification for a role update in a relation.
RelationNotification
(
String
notifType,
Object
sourceObj,
 long sequence,
 long timeStamp,
String
message,
String
id,
String
typeName,
ObjectName
objectName,
List
<
ObjectName
> unregMBeanList)
Creates a notification for either a relation creation (RelationSupport
 object created internally in the Relation Service, or an MBean added as a
 relation) or for a relation removal from the Relation Service.
Uses of
Object
in
javax.management.remote
Subclasses of
Object
in
javax.management.remote
Modifier and Type
Class
Description
class
JMXConnectionNotification
Notification emitted when a client connection is opened or
 closed or when notifications are lost.
class
JMXConnectorFactory
Factory to create JMX API connector clients.
class
JMXConnectorServer
Superclass of every connector server.
class
JMXConnectorServerFactory
Factory to create JMX API connector servers.
class
JMXPrincipal
The identity of a remote client of the JMX Remote API.
class
JMXProviderException
Exception thrown by
JMXConnectorFactory
and
JMXConnectorServerFactory
when a provider exists for
 the required protocol but cannot be used for some reason.
class
JMXServerErrorException
Exception thrown as the result of a remote
MBeanServer
method invocation when an
Error
is thrown while
 processing the invocation in the remote MBean server.
class
JMXServiceURL
The address of a JMX API connector server.
class
NotificationResult
Result of a query for buffered notifications.
final class
SubjectDelegationPermission
Permission required by an authentication identity to perform
 operations on behalf of an authorization identity.
class
TargetedNotification
A (Notification, Listener ID) pair.
Methods in
javax.management.remote
with parameters of type
Object
Modifier and Type
Method
Description
void
JMXConnector.
addConnectionNotificationListener
(
NotificationListener
listener,
NotificationFilter
filter,
Object
handback)
Adds a listener to be informed of changes in connection
 status.
Subject
JMXAuthenticator.
authenticate
(
Object
credentials)
Authenticates the
MBeanServerConnection
client
 with the given client credentials.
protected void
JMXConnectorServer.
connectionClosed
(
String
connectionId,
String
message,
Object
userData)
Called by a subclass when a client connection is closed
 normally.
protected void
JMXConnectorServer.
connectionFailed
(
String
connectionId,
String
message,
Object
userData)
Called by a subclass when a client connection fails.
protected void
JMXConnectorServer.
connectionOpened
(
String
connectionId,
String
message,
Object
userData)
Called by a subclass when a new client connection is opened.
boolean
JMXPrincipal.
equals
(
Object
o)
Compares the specified Object with this
JMXPrincipal
for equality.
boolean
JMXServiceURL.
equals
(
Object
obj)
Indicates whether some other object is equal to this one.
void
JMXConnector.
removeConnectionNotificationListener
(
NotificationListener
l,
NotificationFilter
f,
Object
handback)
Removes a listener from the list to be informed of changes
 in status.
Constructors in
javax.management.remote
with parameters of type
Object
Modifier
Constructor
Description
JMXConnectionNotification
(
String
type,
Object
source,
String
connectionId,
 long sequenceNumber,
String
message,
Object
userData)
Constructs a new connection notification.
Uses of
Object
in
javax.management.remote.rmi
Subclasses of
Object
in
javax.management.remote.rmi
Modifier and Type
Class
Description
class
RMIConnectionImpl
Implementation of the
RMIConnection
interface.
final class
RMIConnectionImpl_Stub
RMIConnectionImpl remote stub.
class
RMIConnector
A connection to a remote RMI connector.
class
RMIConnectorServer
A JMX API connector server that creates RMI-based connections
 from remote clients.
class
RMIJRMPServerImpl
An
RMIServer
object that is exported through JRMP and that
 creates client connections as RMI objects exported through JRMP.
class
RMIServerImpl
An RMI object representing a connector server.
final class
RMIServerImpl_Stub
RMIServerImpl remote stub.
Methods in
javax.management.remote.rmi
that return
Object
Modifier and Type
Method
Description
Object
RMIConnection.
getAttribute
(
ObjectName
name,
String
attribute,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.getAttribute(ObjectName, String)
.
Object
RMIConnectionImpl_Stub.
getAttribute
(
ObjectName
$param_ObjectName_1,
String
$param_String_2,
Subject
$param_Subject_3)
Object
RMIConnectionImpl.
getAttribute
(
ObjectName
name,
String
attribute,
Subject
delegationSubject)
Object
RMIConnection.
invoke
(
ObjectName
name,
String
operationName,
MarshalledObject
params,
String
[] signature,
Subject
delegationSubject)
Handles the method
MBeanServerConnection.invoke(ObjectName, String, Object[], String[])
.
Object
RMIConnectionImpl_Stub.
invoke
(
ObjectName
$param_ObjectName_1,
String
$param_String_2,
MarshalledObject
$param_MarshalledObject_3,
String
[] $param_arrayOf_String_4,
Subject
$param_Subject_5)
Object
RMIConnectionImpl.
invoke
(
ObjectName
name,
String
operationName,
MarshalledObject
params,
String
[] signature,
Subject
delegationSubject)
Methods in
javax.management.remote.rmi
with parameters of type
Object
Modifier and Type
Method
Description
void
RMIConnector.
addConnectionNotificationListener
(
NotificationListener
listener,
NotificationFilter
filter,
Object
handback)
RMIConnection
RMIServer.
newClient
(
Object
credentials)
Makes a new connection through this RMI connector.
RMIConnection
RMIServerImpl_Stub.
newClient
(
Object
$param_Object_1)
RMIConnection
RMIServerImpl.
newClient
(
Object
credentials)
Creates a new client connection.
void
RMIConnector.
removeConnectionNotificationListener
(
NotificationListener
listener,
NotificationFilter
filter,
Object
handback)
Uses of
Object
in
javax.management.timer
Subclasses of
Object
in
javax.management.timer
Modifier and Type
Class
Description
class
Timer
Provides the implementation of the timer MBean.
class
TimerNotification
This class provides definitions of the notifications sent by timer MBeans.
Methods in
javax.management.timer
that return
Object
Modifier and Type
Method
Description
Object
Timer.
getNotificationUserData
(
Integer
id)
Gets the timer notification user data object corresponding to the specified identifier.
Object
TimerMBean.
getNotificationUserData
(
Integer
id)
Gets the timer notification user data object corresponding to the specified identifier.
Methods in
javax.management.timer
with parameters of type
Object
Modifier and Type
Method
Description
Integer
Timer.
addNotification
(
String
type,
String
message,
Object
userData,
Date
date)
Creates a new timer notification with the specified
type
,
message
and
userData
and inserts it into the list of notifications with a given date
 and a null period and number of occurrences.
Integer
Timer.
addNotification
(
String
type,
String
message,
Object
userData,
Date
date,
 long period)
Creates a new timer notification with the specified
type
,
message
and
userData
and inserts it into the list of notifications with a given date
 and period and a null number of occurrences.
Integer
Timer.
addNotification
(
String
type,
String
message,
Object
userData,
Date
date,
 long period,
 long nbOccurences)
Creates a new timer notification with the specified
type
,
message
and
userData
and inserts it into the list of notifications with a given date,
 period and number of occurrences.
Integer
Timer.
addNotification
(
String
type,
String
message,
Object
userData,
Date
date,
 long period,
 long nbOccurences,
 boolean fixedRate)
Creates a new timer notification with the specified
type
,
message
and
userData
and inserts it into the list of notifications with a given date,
 period and number of occurrences.
Integer
TimerMBean.
addNotification
(
String
type,
String
message,
Object
userData,
Date
date)
Creates a new timer notification with the specified
type
,
message
and
userData
and inserts it into the list of notifications with a given date
 and a null period and number of occurrences.
Integer
TimerMBean.
addNotification
(
String
type,
String
message,
Object
userData,
Date
date,
 long period)
Creates a new timer notification with the specified
type
,
message
and
userData
and inserts it into the list of notifications with a given date
 and period and a null number of occurrences.
Integer
TimerMBean.
addNotification
(
String
type,
String
message,
Object
userData,
Date
date,
 long period,
 long nbOccurences)
Creates a new timer notification with the specified
type
,
message
and
userData
and inserts it into the list of notifications with a given date,
 period and number of occurrences.
Integer
TimerMBean.
addNotification
(
String
type,
String
message,
Object
userData,
Date
date,
 long period,
 long nbOccurences,
 boolean fixedRate)
Creates a new timer notification with the specified
type
,
message
and
userData
and inserts it into the list of notifications with a given date,
 period and number of occurrences.
Constructors in
javax.management.timer
with parameters of type
Object
Modifier
Constructor
Description
TimerNotification
(
String
type,
Object
source,
 long sequenceNumber,
 long timeStamp,
String
msg,
Integer
id)
Creates a timer notification object.
Uses of
Object
in
javax.naming
Subclasses of
Object
in
javax.naming
Modifier and Type
Class
Description
class
AuthenticationException
This exception is thrown when an authentication error occurs while
 accessing the naming or directory service.
class
AuthenticationNotSupportedException
This exception is thrown when
 the particular flavor of authentication requested is not supported.
class
BinaryRefAddr
This class represents the binary form of the address of
 a communications end-point.
class
Binding
This class represents a name-to-object binding found in a context.
class
CannotProceedException
This exception is thrown to indicate that the operation reached
 a point in the name where the operation cannot proceed any further.
class
CommunicationException
This exception is thrown when the client is
 unable to communicate with the directory or naming service.
class
CompositeName
This class represents a composite name -- a sequence of
 component names spanning multiple namespaces.
class
CompoundName
This class represents a compound name -- a name from
 a hierarchical name space.
class
ConfigurationException
This exception is thrown when there is a configuration problem.
class
ContextNotEmptyException
This exception is thrown when attempting to destroy a context that
 is not empty.
class
InitialContext
This class is the starting context for performing naming operations.
class
InsufficientResourcesException
This exception is thrown when resources are not available to complete
 the requested operation.
class
InterruptedNamingException
This exception is thrown when the naming operation
 being invoked has been interrupted.
class
InvalidNameException
This exception indicates that the name being specified does
 not conform to the naming syntax of a naming system.
class
LimitExceededException
This exception is thrown when a method
 terminates abnormally due to a user or system specified limit.
class
LinkException
This exception is used to describe problems encountered while resolving links.
class
LinkLoopException
This exception is thrown when
 a loop was detected while attempting to resolve a link, or an implementation
 specific limit on link counts has been reached.
class
LinkRef
This class represents a Reference whose contents is a name, called the link name,
 that is bound to an atomic name in a context.
class
MalformedLinkException
This exception is thrown when a malformed link was encountered while
 resolving or constructing a link.
class
NameAlreadyBoundException
This exception is thrown by methods to indicate that
 a binding cannot be added because the name is already bound to
 another object.
class
NameClassPair
This class represents the object name and class name pair of a binding
 found in a context.
class
NameNotFoundException
This exception is thrown when a component of the name cannot be resolved
 because it is not bound.
class
NamingException
This is the superclass of all exceptions thrown by
 operations in the Context and DirContext interfaces.
class
NamingSecurityException
This is the superclass of security-related exceptions
 thrown by operations in the Context and DirContext interfaces.
class
NoInitialContextException
This exception is thrown when no initial context implementation
 can be created.
class
NoPermissionException
This exception is thrown when attempting to perform an operation
 for which the client has no permission.
class
NotContextException
This exception is thrown when a naming operation proceeds to a point
 where a context is required to continue the operation, but the
 resolved object is not a context.
class
OperationNotSupportedException
This exception is thrown when a context implementation does not support
 the operation being invoked.
class
PartialResultException
This exception is thrown to indicate that the result being returned
 or returned so far is partial, and that the operation cannot
 be completed.
class
RefAddr
This class represents the address of a communications end-point.
class
Reference
This class represents a reference to an object that is found outside of
 the naming/directory system.
class
ReferralException
This abstract class is used to represent a referral exception,
 which is generated in response to a
referral
such as that returned by LDAP v3 servers.
class
ServiceUnavailableException
This exception is thrown when attempting to communicate with a
 directory or naming service and that service is not available.
class
SizeLimitExceededException
This exception is thrown when a method
 produces a result that exceeds a size-related limit.
class
StringRefAddr
This class represents the string form of the address of
 a communications end-point.
class
TimeLimitExceededException
This exception is thrown when a method
 does not terminate within the specified time limit.
Fields in
javax.naming
declared as
Object
Modifier and Type
Field
Description
protected
Object
LinkException.
linkResolvedObj
Contains the object to which resolution of the part of the link was successful.
protected
Object
NamingException.
resolvedObj
Contains the object to which resolution of the part of the name was
 successful.
Fields in
javax.naming
with type parameters of type
Object
Modifier and Type
Field
Description
protected
Hashtable
<
Object
,
Object
>
InitialContext.
myProps
The environment associated with this InitialContext.
protected
Hashtable
<
Object
,
Object
>
InitialContext.
myProps
The environment associated with this InitialContext.
Methods in
javax.naming
that return
Object
Modifier and Type
Method
Description
Object
Context.
addToEnvironment
(
String
propName,
Object
propVal)
Adds a new environment property to the environment of this
 context.
Object
InitialContext.
addToEnvironment
(
String
propName,
Object
propVal)
Object
CompositeName.
clone
()
Generates a copy of this composite name.
Object
CompoundName.
clone
()
Creates a copy of this compound name.
Object
Name.
clone
()
Generates a new copy of this name.
Object
Reference.
clone
()
Makes a copy of this reference using its class name
 list of addresses, class factory name and class factory location.
Object
BinaryRefAddr.
getContent
()
Retrieves the contents of this address as an Object.
abstract
Object
RefAddr.
getContent
()
Retrieves the contents of this address.
Object
StringRefAddr.
getContent
()
Retrieves the contents of this address.
Object
LinkException.
getLinkResolvedObj
()
Retrieves the object to which resolution was successful.
Object
Binding.
getObject
()
Retrieves the object bound to the name of this binding.
abstract
Object
ReferralException.
getReferralInfo
()
Retrieves information (such as URLs) related to this referral.
Object
NamingException.
getResolvedObj
()
Retrieves the object to which resolution was successful.
Object
Context.
lookup
(
String
name)
Retrieves the named object.
Object
Context.
lookup
(
Name
name)
Retrieves the named object.
Object
InitialContext.
lookup
(
String
name)
Object
InitialContext.
lookup
(
Name
name)
Object
Context.
lookupLink
(
String
name)
Retrieves the named object, following links except
 for the terminal atomic component of the name.
Object
Context.
lookupLink
(
Name
name)
Retrieves the named object, following links except
 for the terminal atomic component of the name.
Object
InitialContext.
lookupLink
(
String
name)
Object
InitialContext.
lookupLink
(
Name
name)
Object
CompositeName.
remove
(int posn)
Deletes a component from this composite name.
Object
CompoundName.
remove
(int posn)
Deletes a component from this compound name.
Object
Name.
remove
(int posn)
Removes a component from this name.
Object
Reference.
remove
(int posn)
Deletes the address at index posn from the list of addresses.
Object
Context.
removeFromEnvironment
(
String
propName)
Removes an environment property from the environment of this
 context.
Object
InitialContext.
removeFromEnvironment
(
String
propName)
Methods in
javax.naming
with parameters of type
Object
Modifier and Type
Method
Description
Object
Context.
addToEnvironment
(
String
propName,
Object
propVal)
Adds a new environment property to the environment of this
 context.
Object
InitialContext.
addToEnvironment
(
String
propName,
Object
propVal)
void
Context.
bind
(
String
name,
Object
obj)
Binds a name to an object.
void
Context.
bind
(
Name
name,
Object
obj)
Binds a name to an object.
void
InitialContext.
bind
(
String
name,
Object
obj)
void
InitialContext.
bind
(
Name
name,
Object
obj)
int
CompositeName.
compareTo
(
Object
obj)
Compares this CompositeName with the specified Object for order.
int
CompoundName.
compareTo
(
Object
obj)
Compares this CompoundName with the specified Object for order.
int
Name.
compareTo
(
Object
obj)
Compares this name with another name for order.
boolean
BinaryRefAddr.
equals
(
Object
obj)
Determines whether obj is equal to this address.
boolean
CompositeName.
equals
(
Object
obj)
Determines whether two composite names are equal.
boolean
CompoundName.
equals
(
Object
obj)
Determines whether obj is syntactically equal to this compound name.
boolean
RefAddr.
equals
(
Object
obj)
Determines whether obj is equal to this RefAddr.
boolean
Reference.
equals
(
Object
obj)
Determines whether obj is a reference with the same addresses
 (in same order) as this reference.
void
Context.
rebind
(
String
name,
Object
obj)
Binds a name to an object, overwriting any existing binding.
void
Context.
rebind
(
Name
name,
Object
obj)
Binds a name to an object, overwriting any existing binding.
void
InitialContext.
rebind
(
String
name,
Object
obj)
void
InitialContext.
rebind
(
Name
name,
Object
obj)
void
LinkException.
setLinkResolvedObj
(
Object
obj)
Sets the link resolved object field of this exception.
void
Binding.
setObject
(
Object
obj)
Sets the object associated with this binding.
void
NamingException.
setResolvedObj
(
Object
obj)
Sets the resolved object field of this exception.
Constructors in
javax.naming
with parameters of type
Object
Modifier
Constructor
Description
Binding
(
String
name,
Object
obj)
Constructs an instance of a Binding given its name and object.
Binding
(
String
name,
Object
obj,
 boolean isRelative)
Constructs an instance of a Binding given its name, object, and whether
 the name is relative.
Binding
(
String
name,
String
className,
Object
obj)
Constructs an instance of a Binding given its name, class name, and object.
Binding
(
String
name,
String
className,
Object
obj,
 boolean isRelative)
Constructs an instance of a Binding given its
 name, class name, object, and whether the name is relative.
Uses of
Object
in
javax.naming.directory
Subclasses of
Object
in
javax.naming.directory
Modifier and Type
Class
Description
class
AttributeInUseException
This exception is thrown when an operation attempts
 to add an attribute that already exists.
class
AttributeModificationException
This exception is thrown when an attempt is
 made to add, or remove, or modify an attribute, its identifier,
 or its values that conflicts with the attribute's (schema) definition
 or the attribute's state.
class
BasicAttribute
This class provides a basic implementation of the
Attribute
interface.
class
BasicAttributes
This class provides a basic implementation
 of the Attributes interface.
class
InitialDirContext
This class is the starting context for performing
 directory operations.
class
InvalidAttributeIdentifierException
This exception is thrown when an attempt is
 made to add to create an attribute with an invalid attribute identifier.
class
InvalidAttributesException
This exception is thrown when an attempt is
 made to add or modify an attribute set that has been specified
 incompletely or incorrectly.
class
InvalidAttributeValueException
This class is thrown when an attempt is
 made to add to an attribute a value that conflicts with the attribute's
 schema definition.
class
InvalidSearchControlsException
This exception is thrown when the specification of
 the SearchControls for a search operation is invalid.
class
InvalidSearchFilterException
This exception is thrown when the specification of
 a search filter is invalid.
class
ModificationItem
This class represents a modification item.
class
NoSuchAttributeException
This exception is thrown when attempting to access
 an attribute that does not exist.
class
SchemaViolationException
This exception is thrown when a method
 in some ways violates the schema.
class
SearchControls
This class encapsulates
 factors that determine scope of search and what gets returned
 as a result of the search.
class
SearchResult
This class represents an item in the NamingEnumeration returned as a
 result of the DirContext.search() methods.
Fields in
javax.naming.directory
with type parameters of type
Object
Modifier and Type
Field
Description
protected
Vector
<
Object
>
BasicAttribute.
values
Holds the attribute's values.
Methods in
javax.naming.directory
that return
Object
Modifier and Type
Method
Description
Object
Attribute.
clone
()
Makes a copy of the attribute.
Object
Attributes.
clone
()
Makes a copy of the attribute set.
Object
BasicAttribute.
clone
()
Object
BasicAttributes.
clone
()
Object
Attribute.
get
()
Retrieves one of this attribute's values.
Object
Attribute.
get
(int ix)
Retrieves the attribute value from the ordered list of attribute values.
Object
BasicAttribute.
get
()
Retrieves one of this attribute's values.
Object
BasicAttribute.
get
(int ix)
Object
Attribute.
remove
(int ix)
Removes an attribute value from the ordered list of attribute values.
Object
BasicAttribute.
remove
(int ix)
Object
Attribute.
set
(int ix,
Object
attrVal)
Sets an attribute value in the ordered list of attribute values.
Object
BasicAttribute.
set
(int ix,
Object
attrVal)
Methods in
javax.naming.directory
with parameters of type
Object
Modifier and Type
Method
Description
void
Attribute.
add
(int ix,
Object
attrVal)
Adds an attribute value to the ordered list of attribute values.
boolean
Attribute.
add
(
Object
attrVal)
Adds a new value to the attribute.
void
BasicAttribute.
add
(int ix,
Object
attrVal)
boolean
BasicAttribute.
add
(
Object
attrVal)
Adds a new value to this attribute.
void
DirContext.
bind
(
String
name,
Object
obj,
Attributes
attrs)
Binds a name to an object, along with associated attributes.
void
DirContext.
bind
(
Name
name,
Object
obj,
Attributes
attrs)
Binds a name to an object, along with associated attributes.
void
InitialDirContext.
bind
(
String
name,
Object
obj,
Attributes
attrs)
void
InitialDirContext.
bind
(
Name
name,
Object
obj,
Attributes
attrs)
boolean
Attribute.
contains
(
Object
attrVal)
Determines whether a value is in the attribute.
boolean
BasicAttribute.
contains
(
Object
attrVal)
Determines whether a value is in this attribute.
boolean
BasicAttribute.
equals
(
Object
obj)
Determines whether obj is equal to this attribute.
boolean
BasicAttributes.
equals
(
Object
obj)
Determines whether this
BasicAttributes
is equal to another
Attributes
Two
Attributes
are equal if they are both instances of
Attributes
,
 treat the case of attribute IDs the same way, and contain the
 same attributes.
Attribute
Attributes.
put
(
String
attrID,
Object
val)
Adds a new attribute to the attribute set.
Attribute
BasicAttributes.
put
(
String
attrID,
Object
val)
void
DirContext.
rebind
(
String
name,
Object
obj,
Attributes
attrs)
Binds a name to an object, along with associated attributes,
 overwriting any existing binding.
void
DirContext.
rebind
(
Name
name,
Object
obj,
Attributes
attrs)
Binds a name to an object, along with associated attributes,
 overwriting any existing binding.
void
InitialDirContext.
rebind
(
String
name,
Object
obj,
Attributes
attrs)
void
InitialDirContext.
rebind
(
Name
name,
Object
obj,
Attributes
attrs)
boolean
Attribute.
remove
(
Object
attrval)
Removes a specified value from the attribute.
boolean
BasicAttribute.
remove
(
Object
attrval)
Removes a specified value from this attribute.
NamingEnumeration
<
SearchResult
>
DirContext.
search
(
String
name,
String
filterExpr,
Object
[] filterArgs,
SearchControls
cons)
Searches in the named context or object for entries that satisfy the
 given search filter.
NamingEnumeration
<
SearchResult
>
DirContext.
search
(
Name
name,
String
filterExpr,
Object
[] filterArgs,
SearchControls
cons)
Searches in the named context or object for entries that satisfy the
 given search filter.
NamingEnumeration
<
SearchResult
>
InitialDirContext.
search
(
String
name,
String
filterExpr,
Object
[] filterArgs,
SearchControls
cons)
NamingEnumeration
<
SearchResult
>
InitialDirContext.
search
(
Name
name,
String
filterExpr,
Object
[] filterArgs,
SearchControls
cons)
Object
Attribute.
set
(int ix,
Object
attrVal)
Sets an attribute value in the ordered list of attribute values.
Object
BasicAttribute.
set
(int ix,
Object
attrVal)
Constructors in
javax.naming.directory
with parameters of type
Object
Modifier
Constructor
Description
BasicAttribute
(
String
id,
Object
value)
Constructs a new instance of an unordered attribute with a single value.
BasicAttribute
(
String
id,
Object
value,
 boolean ordered)
Constructs a new instance of a possibly ordered attribute with a
 single value.
BasicAttributes
(
String
attrID,
Object
val)
Constructs a new instance of Attributes with one attribute.
BasicAttributes
(
String
attrID,
Object
val,
 boolean ignoreCase)
Constructs a new instance of Attributes with one attribute.
SearchResult
(
String
name,
Object
obj,
Attributes
attrs)
Constructs a search result using the result's name, its bound object, and
 its attributes.
SearchResult
(
String
name,
Object
obj,
Attributes
attrs,
 boolean isRelative)
Constructs a search result using the result's name, its bound object, and
 its attributes, and whether the name is relative.
SearchResult
(
String
name,
String
className,
Object
obj,
Attributes
attrs)
Constructs a search result using the result's name, its class name,
 its bound object, and its attributes.
SearchResult
(
String
name,
String
className,
Object
obj,
Attributes
attrs,
 boolean isRelative)
Constructs a search result using the result's name, its class name,
 its bound object, its attributes, and whether the name is relative.
Uses of
Object
in
javax.naming.event
Subclasses of
Object
in
javax.naming.event
Modifier and Type
Class
Description
class
NamingEvent
This class represents an event fired by a naming/directory service.
class
NamingExceptionEvent
This class represents an event fired when the procedures/processes
 used to collect information for notifying listeners of
NamingEvent
s threw a
NamingException
.
Fields in
javax.naming.event
declared as
Object
Modifier and Type
Field
Description
protected
Object
NamingEvent.
changeInfo
Contains information about the change that generated this event.
Methods in
javax.naming.event
that return
Object
Modifier and Type
Method
Description
Object
NamingEvent.
getChangeInfo
()
Retrieves the change information for this event.
Methods in
javax.naming.event
with parameters of type
Object
Modifier and Type
Method
Description
void
EventDirContext.
addNamingListener
(
String
target,
String
filter,
Object
[] filterArgs,
SearchControls
ctls,
NamingListener
l)
Adds a listener for receiving naming events fired when
 objects identified by the search filter
filter
and filter arguments at the
 object named by the string target name are modified.
void
EventDirContext.
addNamingListener
(
Name
target,
String
filter,
Object
[] filterArgs,
SearchControls
ctls,
NamingListener
l)
Adds a listener for receiving naming events fired
 when objects identified by the search filter
filter
and
 filter arguments at the object named by the target are modified.
Constructors in
javax.naming.event
with parameters of type
Object
Modifier
Constructor
Description
NamingEvent
(
EventContext
source,
 int type,
Binding
newBd,
Binding
oldBd,
Object
changeInfo)
Constructs an instance of
NamingEvent
.
Uses of
Object
in
javax.naming.ldap
Subclasses of
Object
in
javax.naming.ldap
Modifier and Type
Class
Description
class
BasicControl
This class provides a basic implementation of the
Control
interface.
class
ControlFactory
This abstract class represents a factory for creating LDAPv3 controls.
class
InitialLdapContext
This class is the starting context for performing
 LDAPv3-style extended operations and controls.
class
LdapName
This class represents a distinguished name as specified by
RFC 2253
.
class
LdapReferralException
This abstract class is used to represent an LDAP referral exception.
final class
ManageReferralControl
Requests that referral and other special LDAP objects be manipulated
 as normal LDAP objects.
final class
PagedResultsControl
Requests that the results of a search operation be returned by the LDAP
 server in batches of a specified size.
final class
PagedResultsResponseControl
Indicates the end of a batch of search results.
class
Rdn
This class represents a relative distinguished name, or RDN, which is a
 component of a distinguished name as specified by
RFC 2253
.
final class
SortControl
Requests that the results of a search operation be sorted by the LDAP server
 before being returned.
class
SortKey
A sort key and its associated sort parameters.
final class
SortResponseControl
Indicates whether the requested sort of search results was successful or not.
class
StartTlsRequest
This class implements the LDAPv3 Extended Request for StartTLS as
 defined in
Lightweight Directory
 Access Protocol (v3): Extension for Transport Layer Security
The object identifier for StartTLS is 1.3.6.1.4.1.1466.20037
 and no extended request value is defined.
class
StartTlsResponse
This class implements the LDAPv3 Extended Response for StartTLS as
 defined in
Lightweight Directory
 Access Protocol (v3): Extension for Transport Layer Security
The object identifier for StartTLS is 1.3.6.1.4.1.1466.20037
 and no extended response value is defined.
class
UnsolicitedNotificationEvent
This class represents an event fired in response to an unsolicited
 notification sent by the LDAP server.
Methods in
javax.naming.ldap
that return
Object
Modifier and Type
Method
Description
Object
LdapName.
clone
()
Generates a new copy of this name.
Object
Rdn.
getValue
()
Retrieves one of this Rdn's value.
Object
LdapName.
remove
(int posn)
Removes a component from this LDAP name.
static
Object
Rdn.
unescapeValue
(
String
val)
Given an attribute value string formatted according to the rules
 specified in
RFC 2253
,
 returns the unformatted value.
Methods in
javax.naming.ldap
with parameters of type
Object
Modifier and Type
Method
Description
int
LdapName.
compareTo
(
Object
obj)
Compares this LdapName with the specified Object for order.
int
Rdn.
compareTo
(
Object
obj)
Compares this Rdn with the specified Object for order.
boolean
LdapName.
equals
(
Object
obj)
Determines whether two LDAP names are equal.
boolean
Rdn.
equals
(
Object
obj)
Compares the specified Object with this Rdn for equality.
static
String
Rdn.
escapeValue
(
Object
val)
Given the value of an attribute, returns a string escaped according
 to the rules specified in
RFC 2253
.
Constructors in
javax.naming.ldap
with parameters of type
Object
Modifier
Constructor
Description
Rdn
(
String
type,
Object
value)
Constructs an Rdn from the given attribute type and
 value.
UnsolicitedNotificationEvent
(
Object
src,
UnsolicitedNotification
notice)
Constructs a new instance of
UnsolicitedNotificationEvent
.
Uses of
Object
in
javax.naming.ldap.spi
Subclasses of
Object
in
javax.naming.ldap.spi
Modifier and Type
Class
Description
class
LdapDnsProvider
Service-provider class for DNS lookups when performing LDAP operations.
final class
LdapDnsProviderResult
The result of a DNS lookup for an LDAP URL.
Uses of
Object
in
javax.naming.spi
Subclasses of
Object
in
javax.naming.spi
Modifier and Type
Class
Description
class
DirectoryManager
This class contains methods for supporting
DirContext
implementations.
static class
DirStateFactory.Result
An object/attributes pair for returning the result of
 DirStateFactory.getStateToBind().
class
NamingManager
This class contains methods for creating context objects
 and objects referred to by location information in the naming
 or directory service.
class
ResolveResult
This class represents the result of resolution of a name.
Fields in
javax.naming.spi
declared as
Object
Modifier and Type
Field
Description
protected
Object
ResolveResult.
resolvedObj
Field containing the Object that was resolved to successfully.
Methods in
javax.naming.spi
that return
Object
Modifier and Type
Method
Description
Object
DirStateFactory.Result.
getObject
()
Retrieves the object to be bound.
static
Object
DirectoryManager.
getObjectInstance
(
Object
refInfo,
Name
name,
Context
nameCtx,
Hashtable
<?,
?> environment,
Attributes
attrs)
Creates an instance of an object for the specified object,
 attributes, and environment.
Object
DirObjectFactory.
getObjectInstance
(
Object
obj,
Name
name,
Context
nameCtx,
Hashtable
<?,
?> environment,
Attributes
attrs)
Creates an object using the location or reference information, and attributes
 specified.
static
Object
NamingManager.
getObjectInstance
(
Object
refInfo,
Name
name,
Context
nameCtx,
Hashtable
<?,
?> environment)
Creates an instance of an object for the specified object
 and environment.
Object
ObjectFactory.
getObjectInstance
(
Object
obj,
Name
name,
Context
nameCtx,
Hashtable
<?,
?> environment)
Creates an object using the location or reference information
 specified.
Object
ResolveResult.
getResolvedObj
()
Retrieves the Object to which resolution was successful.
static
Object
NamingManager.
getStateToBind
(
Object
obj,
Name
name,
Context
nameCtx,
Hashtable
<?,
?> environment)
Retrieves the state of an object for binding.
Object
StateFactory.
getStateToBind
(
Object
obj,
Name
name,
Context
nameCtx,
Hashtable
<?,
?> environment)
Retrieves the state of an object for binding.
Methods in
javax.naming.spi
with parameters of type
Object
Modifier and Type
Method
Description
ObjectFactory
ObjectFactoryBuilder.
createObjectFactory
(
Object
obj,
Hashtable
<?,
?> environment)
Creates a new object factory using the environment supplied.
static
Object
DirectoryManager.
getObjectInstance
(
Object
refInfo,
Name
name,
Context
nameCtx,
Hashtable
<?,
?> environment,
Attributes
attrs)
Creates an instance of an object for the specified object,
 attributes, and environment.
Object
DirObjectFactory.
getObjectInstance
(
Object
obj,
Name
name,
Context
nameCtx,
Hashtable
<?,
?> environment,
Attributes
attrs)
Creates an object using the location or reference information, and attributes
 specified.
static
Object
NamingManager.
getObjectInstance
(
Object
refInfo,
Name
name,
Context
nameCtx,
Hashtable
<?,
?> environment)
Creates an instance of an object for the specified object
 and environment.
Object
ObjectFactory.
getObjectInstance
(
Object
obj,
Name
name,
Context
nameCtx,
Hashtable
<?,
?> environment)
Creates an object using the location or reference information
 specified.
static
DirStateFactory.Result
DirectoryManager.
getStateToBind
(
Object
obj,
Name
name,
Context
nameCtx,
Hashtable
<?,
?> environment,
Attributes
attrs)
Retrieves the state of an object for binding when given the original
 object and its attributes.
DirStateFactory.Result
DirStateFactory.
getStateToBind
(
Object
obj,
Name
name,
Context
nameCtx,
Hashtable
<?,
?> environment,
Attributes
inAttrs)
Retrieves the state of an object for binding given the object and attributes
 to be transformed.
static
Object
NamingManager.
getStateToBind
(
Object
obj,
Name
name,
Context
nameCtx,
Hashtable
<?,
?> environment)
Retrieves the state of an object for binding.
Object
StateFactory.
getStateToBind
(
Object
obj,
Name
name,
Context
nameCtx,
Hashtable
<?,
?> environment)
Retrieves the state of an object for binding.
void
ResolveResult.
setResolvedObj
(
Object
obj)
Sets the resolved Object field of this result to obj.
Constructors in
javax.naming.spi
with parameters of type
Object
Modifier
Constructor
Description
ResolveResult
(
Object
robj,
String
rcomp)
Constructs a new instance of ResolveResult consisting of
 the resolved object and the remaining unresolved component.
ResolveResult
(
Object
robj,
Name
rname)
Constructs a new instance of ResolveResult consisting of
 the resolved Object and the remaining name.
Result
(
Object
obj,
Attributes
outAttrs)
Constructs an instance of Result.
Uses of
Object
in
javax.net
Subclasses of
Object
in
javax.net
Modifier and Type
Class
Description
class
ServerSocketFactory
This class creates server sockets.
class
SocketFactory
This class creates sockets.
Uses of
Object
in
javax.net.ssl
Subclasses of
Object
in
javax.net.ssl
Modifier and Type
Class
Description
class
CertPathTrustManagerParameters
A wrapper for CertPathParameters.
class
ExtendedSSLSession
Extends the
SSLSession
interface to support additional
 session attributes.
class
HandshakeCompletedEvent
This event indicates that an SSL handshake completed on a given
 SSL connection.
class
HttpsURLConnection
HttpsURLConnection
extends
HttpURLConnection
with support for https-specific features.
class
KeyManagerFactory
This class acts as a factory for key managers based on a
 source of key material.
class
KeyManagerFactorySpi
This class defines the
Service Provider Interface
(
SPI
)
 for the
KeyManagerFactory
class.
class
KeyStoreBuilderParameters
A parameters object for X509KeyManagers that encapsulates a List
 of KeyStore.Builders.
final class
SNIHostName
Instances of this class represent a server name of type
host_name
in a Server Name
 Indication (SNI) extension.
class
SNIMatcher
Instances of this class represent a matcher that performs match
 operations on an
SNIServerName
instance.
class
SNIServerName
Instances of this class represent a server name in a Server Name
 Indication (SNI) extension.
class
SSLContext
Instances of this class represent a secure socket protocol
 implementation which acts as a factory for secure socket
 factories or
SSLEngine
s.
class
SSLContextSpi
This class defines the
Service Provider Interface
(
SPI
)
 for the
SSLContext
class.
class
SSLEngine
A class which enables secure communications using protocols such as
 the Secure Sockets Layer (SSL) or
IETF RFC 2246 "Transport
 Layer Security" (TLS)
protocols, but is transport independent.
class
SSLEngineResult
An encapsulation of the result state produced by
SSLEngine
I/O calls.
class
SSLException
Indicates some kind of error detected by an SSL subsystem.
class
SSLHandshakeException
Indicates that the client and server could not negotiate the
 desired level of security.
class
SSLKeyException
Reports a bad SSL key.
class
SSLParameters
Encapsulates parameters for an SSL/TLS/DTLS connection.
class
SSLPeerUnverifiedException
Indicates that the peer's identity has not been verified.
final class
SSLPermission
This class is for various network permissions.
class
SSLProtocolException
Reports an error in the operation of the SSL protocol.
class
SSLServerSocket
This class extends
ServerSocket
and
 provides secure server sockets using protocols such as the Secure
 Sockets Layer (SSL) or Transport Layer Security (TLS) protocols.
class
SSLServerSocketFactory
SSLServerSocketFactory
s create
SSLServerSocket
s.
class
SSLSessionBindingEvent
This event is propagated to a SSLSessionBindingListener.
class
SSLSocket
This class extends
Socket
and provides secure
 sockets using protocols such as the "Secure
 Sockets Layer" (SSL) or IETF "Transport Layer Security" (TLS) protocols.
class
SSLSocketFactory
SSLSocketFactory
s create
SSLSocket
s.
final class
StandardConstants
Standard constants definitions
class
TrustManagerFactory
This class acts as a factory for trust managers based on a
 source of trust material.
class
TrustManagerFactorySpi
This class defines the
Service Provider Interface
(
SPI
)
 for the
TrustManagerFactory
class.
class
X509ExtendedKeyManager
Abstract class that provides for extension of the X509KeyManager
 interface.
class
X509ExtendedTrustManager
Extensions to the
X509TrustManager
interface to support
 SSL/TLS/DTLS connection sensitive trust management.
Methods in
javax.net.ssl
that return
Object
Modifier and Type
Method
Description
Object
SSLSession.
getValue
(
String
name)
Returns the object bound to the given name in the session's
 application layer data.
Methods in
javax.net.ssl
with parameters of type
Object
Modifier and Type
Method
Description
boolean
SNIHostName.
equals
(
Object
other)
Compares this server name to the specified object.
boolean
SNIServerName.
equals
(
Object
other)
Indicates whether some other object is "equal to" this server name.
void
SSLSession.
putValue
(
String
name,
Object
value)
Binds the specified
value
object into the
 session's application layer data
 with the given
name
.
Uses of
Object
in
javax.print
Subclasses of
Object
in
javax.print
Modifier and Type
Class
Description
class
DocFlavor
Class
DocFlavor
encapsulates an object that specifies the format in
 which print data is supplied to a
DocPrintJob
.
static class
DocFlavor.BYTE_ARRAY
Class
DocFlavor.BYTE_ARRAY
provides predefined static constant
DocFlavor
objects for example doc flavors using a byte array
 (
byte[]
) as the print data representation class.
static class
DocFlavor.CHAR_ARRAY
Class
DocFlavor.CHAR_ARRAY
provides predefined static constant
DocFlavor
objects for example doc flavors using a character array
 (
char[]
) as the print data representation class.
static class
DocFlavor.INPUT_STREAM
Class
DocFlavor.INPUT_STREAM
provides predefined static constant
DocFlavor
objects for example doc flavors using a byte stream
 (
java.io.InputStream
) as the print data
 representation class.
static class
DocFlavor.READER
Class
DocFlavor.READER
provides predefined static constant
DocFlavor
objects for example doc flavors using a character
 stream (
java.io.Reader
) as the print data
 representation class.
static class
DocFlavor.SERVICE_FORMATTED
Class
DocFlavor.SERVICE_FORMATTED
provides predefined static
 constant
DocFlavor
objects for example doc flavors for service
 formatted print data.
static class
DocFlavor.STRING
Class
DocFlavor.STRING
provides predefined static constant
DocFlavor
objects for example doc flavors using a string
 (
java.lang.String
) as the print data representation class.
static class
DocFlavor.URL
Class
DocFlavor.URL
provides predefined static constant
DocFlavor
objects.
class
PrintException
Class
PrintException
encapsulates a printing-related error condition
 that occurred while using a Print Service instance.
class
PrintServiceLookup
Implementations of this class provide lookup services for print services
 (typically equivalent to printers) of a particular type.
class
ServiceUI
This class is a collection of UI convenience methods which provide a
 graphical user dialog for browsing print services looked up through the Java
 Print Service API.
class
ServiceUIFactory
Services may optionally provide UIs which allow different styles of
 interaction in different roles.
final class
SimpleDoc
This class is an implementation of interface
Doc
that can be used in
 many common printing requests.
class
StreamPrintService
This class extends
PrintService
and represents a print service that
 prints data in different formats to a client-provided output stream.
class
StreamPrintServiceFactory
A
StreamPrintServiceFactory
is the factory for
StreamPrintService
instances, which can print to an output stream in
 a particular document format described as a mime type.
Methods in
javax.print
that return
Object
Modifier and Type
Method
Description
Object
PrintService.
getDefaultAttributeValue
(
Class
<? extends
Attribute
> category)
Determines this print service's default printing attribute value in the
 given category.
Object
Doc.
getPrintData
()
Obtains the print data representation object that contains this doc
 object's piece of print data in the format corresponding to the supported
 doc flavor.
Object
SimpleDoc.
getPrintData
()
Obtains the print data representation object that contains this doc
 object's piece of print data in the format corresponding to the supported
 doc flavor.
Object
PrintService.
getSupportedAttributeValues
(
Class
<? extends
Attribute
> category,
DocFlavor
flavor,
AttributeSet
attributes)
Determines the printing attribute values a client can specify in the
 given category when setting up a job for this print service.
abstract
Object
ServiceUIFactory.
getUI
(int role,
String
ui)
Get a UI object which may be cast to the requested UI type by the
 application and used in its user interface.
Methods in
javax.print
with parameters of type
Object
Modifier and Type
Method
Description
boolean
DocFlavor.
equals
(
Object
obj)
Determines if this doc flavor object is equal to the given object.
boolean
PrintService.
equals
(
Object
obj)
Determines if two services are referring to the same underlying service.
Constructors in
javax.print
with parameters of type
Object
Modifier
Constructor
Description
SimpleDoc
(
Object
printData,
DocFlavor
flavor,
DocAttributeSet
attributes)
Constructs a
SimpleDoc
with the specified print data, doc flavor
 and doc attribute set.
Uses of
Object
in
javax.print.attribute
Subclasses of
Object
in
javax.print.attribute
Modifier and Type
Class
Description
final class
AttributeSetUtilities
Class
AttributeSetUtilities
provides static methods for manipulating
AttributeSets
.
class
DateTimeSyntax
Class
DateTimeSyntax
is an abstract base class providing the common
 implementation of all attributes whose value is a date and time.
class
EnumSyntax
Class
EnumSyntax
is an abstract base class providing the common
 implementation of all "type safe enumeration" objects.
class
HashAttributeSet
Class
HashAttributeSet
provides an
AttributeSet
implementation with characteristics of a hash map.
class
HashDocAttributeSet
Class
HashDocAttributeSet
provides an attribute set which inherits
 its implementation from class
HashAttributeSet
and
 enforces the semantic restrictions of interface
DocAttributeSet
.
class
HashPrintJobAttributeSet
Class
HashPrintJobAttributeSet
provides an attribute set which
 inherits its implementation from class
HashAttributeSet
and enforces the semantic
 restrictions of interface
PrintJobAttributeSet
.
class
HashPrintRequestAttributeSet
Class
HashPrintRequestAttributeSet
inherits its implementation from
 class
HashAttributeSet
and enforces the semantic
 restrictions of interface
PrintRequestAttributeSet
.
class
HashPrintServiceAttributeSet
Class
HashPrintServiceAttributeSet
provides an attribute set which
 inherits its implementation from class
HashAttributeSet
and enforces the semantic
 restrictions of interface
PrintServiceAttributeSet
.
class
IntegerSyntax
Class
IntegerSyntax
is an abstract base class providing the common
 implementation of all attributes with integer values.
class
ResolutionSyntax
Class
ResolutionSyntax
is an abstract base class providing the common
 implementation of all attributes denoting a printer resolution.
class
SetOfIntegerSyntax
Class
SetOfIntegerSyntax
is an abstract base class providing the
 common implementation of all attributes whose value is a set of nonnegative
 integers.
class
Size2DSyntax
Class
Size2DSyntax
is an abstract base class providing the common
 implementation of all attributes denoting a size in two dimensions.
class
TextSyntax
Class
TextSyntax
is an abstract base class providing the common
 implementation of all attributes whose value is a string.
class
UnmodifiableSetException
Thrown to indicate that the requested operation cannot be performed because
 the set is unmodifiable.
class
URISyntax
Class
URISyntax
is an abstract base class providing the common
 implementation of all attributes whose value is a Uniform Resource Identifier
 (URI).
Methods in
javax.print.attribute
that return
Object
Modifier and Type
Method
Description
Object
EnumSyntax.
clone
()
Returns a clone of this enumeration value, which to preserve the
 semantics of enumeration values is the same object as this enumeration
 value.
protected
Object
EnumSyntax.
readResolve
()
During object input, convert this deserialized enumeration instance to
 the proper enumeration value defined in the enumeration attribute class.
Methods in
javax.print.attribute
with parameters of type
Object
Modifier and Type
Method
Description
boolean
AttributeSet.
equals
(
Object
object)
Compares the specified object with this attribute set for equality.
boolean
DateTimeSyntax.
equals
(
Object
object)
Returns whether this date-time attribute is equivalent to the passed in
 object.
boolean
HashAttributeSet.
equals
(
Object
object)
Compares the specified object with this attribute set for equality.
boolean
IntegerSyntax.
equals
(
Object
object)
Returns whether this integer attribute is equivalent to the passed in
 object.
boolean
ResolutionSyntax.
equals
(
Object
object)
Returns whether this resolution attribute is equivalent to the passed in
 object.
boolean
SetOfIntegerSyntax.
equals
(
Object
object)
Returns whether this set-of-integer attribute is equivalent to the passed
 in object.
boolean
Size2DSyntax.
equals
(
Object
object)
Returns whether this two-dimensional size attribute is equivalent to the
 passed in object.
boolean
TextSyntax.
equals
(
Object
object)
Returns whether this text attribute is equivalent to the passed in
 object.
boolean
URISyntax.
equals
(
Object
object)
Returns whether this
URI
attribute is equivalent to the passed in
 object.
static
Class
<?>
AttributeSetUtilities.
verifyAttributeCategory
(
Object
object,
Class
<?> interfaceName)
Verify that the given object is a
Class
that implements the
 given interface, which is assumed to be interface
Attribute
or a subinterface thereof.
static
Attribute
AttributeSetUtilities.
verifyAttributeValue
(
Object
object,
Class
<?> interfaceName)
Verify that the given object is an instance of the given interface, which
 is assumed to be interface
Attribute
or a subinterface
 thereof.
Uses of
Object
in
javax.print.attribute.standard
Subclasses of
Object
in
javax.print.attribute.standard
Modifier and Type
Class
Description
final class
Chromaticity
Class
Chromaticity
is a printing attribute class, an enumeration,
 that specifies monochrome or color printing.
final class
ColorSupported
Class
ColorSupported
is a printing attribute class, an enumeration,
 that identifies whether the device is capable of any type of color printing
 at all, including highlight color as well as full process color.
class
Compression
Class
Compression
is a printing attribute class, an enumeration, that
 specifies how print data is compressed.
final class
Copies
Class
Copies
is an integer valued printing attribute class that
 specifies the number of copies to be printed.
final class
CopiesSupported
Class
CopiesSupported
is a printing attribute class, a set of
 integers, that gives the supported values for a
Copies
attribute.
final class
DateTimeAtCompleted
Class
DateTimeAtCompleted
is a printing attribute class, a date-time
 attribute, that indicates the date and time at which the Print Job completed
 (or was canceled or aborted).
final class
DateTimeAtCreation
Class
DateTimeAtCreation
is a printing attribute class, a date-time
 attribute, that indicates the date and time at which the Print Job was
 created.
final class
DateTimeAtProcessing
Class
DateTimeAtProcessing
is a printing attribute class, a date-time
 attribute, that indicates the date and time at which the Print Job first
 began processing.
final class
Destination
Class
Destination
is a printing attribute class, a
URI
, that
 is used to indicate an alternate destination for the spooled printer
 formatted data.
final class
DialogOwner
An attribute class used to support requesting a print or page setup dialog
 be kept displayed on top of all windows or some specific window.
final class
DialogTypeSelection
Class
DialogTypeSelection
is a printing attribute class, an
 enumeration, that indicates the user dialog type to be used for specifying
 printing options.
final class
DocumentName
Class
DocumentName
is a printing attribute class, a text attribute,
 that specifies the name of a document.
final class
Fidelity
Class
Fidelity
is a printing attribute class, an enumeration, that
 indicates whether total fidelity to client supplied print request attributes
 is required.
class
Finishings
Class
Finishings
is a printing attribute class, an enumeration, that
 identifies whether the printer applies a finishing operation of some kind of
 binding to each copy of each printed document in the job.
final class
JobHoldUntil
Class
JobHoldUntil
is a printing attribute class, a date-time
 attribute, that specifies the exact date and time at which the job must
 become a candidate for printing.
final class
JobImpressions
Class
JobImpressions
is an integer valued printing attribute class
 that specifies the total size in number of impressions of the document(s)
 being submitted.
final class
JobImpressionsCompleted
Class
JobImpressionsCompleted
is an integer valued printing attribute
 class that specifies the number of impressions completed for the job so far.
final class
JobImpressionsSupported
Class
JobImpressionsSupported
is a printing attribute class, a set of
 integers, that gives the supported values for a
JobImpressions
attribute.
final class
JobKOctets
Class
JobKOctets
is an integer valued printing attribute class that
 specifies the total size of the document(s) in K octets, i.e., in units of
 1024 octets requested to be processed in the job.
final class
JobKOctetsProcessed
Class
JobKOctetsProcessed
is an integer valued printing attribute
 class that specifies the total number of print data octets processed so far
 in K octets, i.e., in units of 1024 octets.
final class
JobKOctetsSupported
Class
JobKOctetsSupported
is a printing attribute class, a set of
 integers, that gives the supported values for a
JobKOctets
attribute.
class
JobMediaSheets
Class
JobMediaSheets
is an integer valued printing attribute class
 that specifies the total number of media sheets to be produced for this job.
final class
JobMediaSheetsCompleted
Class
JobMediaSheetsCompleted
is an integer valued printing attribute
 class that specifies the number of media sheets which have completed marking
 and stacking for the entire job so far, whether those sheets have been
 processed on one side or on both.
final class
JobMediaSheetsSupported
Class
JobMediaSheetsSupported
is a printing attribute class, a set of
 integers, that gives the supported values for a
JobMediaSheets
attribute.
final class
JobMessageFromOperator
Class
JobMessageFromOperator
is a printing attribute class, a text
 attribute, that provides a message from an operator, system administrator, or
 "intelligent" process to indicate to the end user the reasons for
 modification or other management action taken on a job.
final class
JobName
Class
JobName
is a printing attribute class, a text attribute, that
 specifies the name of a print job.
final class
JobOriginatingUserName
Class
JobOriginatingUserName
is a printing attribute class, a text
 attribute, that contains the name of the end user that submitted the print
 job.
final class
JobPriority
Class
JobPriority
is an integer valued printing attribute class that
 specifies a print job's priority.
final class
JobPrioritySupported
Class
JobPrioritySupported
is an integer valued printing attribute
 class that specifies whether a Print Service instance supports the
JobPriority
attribute and the number of different job
 priority levels supported.
class
JobSheets
Class
JobSheets
is a printing attribute class, an enumeration, that
 determines which job start and end sheets, if any, must be printed with a
 job.
class
JobState
JobState
is a printing attribute class, an enumeration, that
 identifies the current state of a print job.
class
JobStateReason
Class
JobStateReason
is a printing attribute class, an enumeration,
 that provides additional information about the job's current state, i.e.,
 information that augments the value of the job's
JobState
attribute.
final class
JobStateReasons
Class
JobStateReasons
is a printing attribute class, a set of
 enumeration values, that provides additional information about the job's
 current state, i.e., information that augments the value of the job's
JobState
attribute.
class
Media
Class
Media
is a printing attribute class that specifies the medium
 on which to print.
class
MediaName
Class
MediaName
is a subclass of
Media
, a printing attribute
 class (an enumeration) that specifies the media for a print job as a name.
final class
MediaPrintableArea
Class
MediaPrintableArea
is a printing attribute used to distinguish
 the printable and non-printable areas of media.
class
MediaSize
Class
MediaSize
is a two-dimensional size valued printing attribute
 class that indicates the dimensions of the medium in a portrait orientation,
 with the
X
dimension running along the bottom edge and the
Y
dimension running along the left edge.
static final class
MediaSize.Engineering
Class
MediaSize.Engineering
includes
MediaSize
values for engineering media.
static final class
MediaSize.ISO
Class
MediaSize.ISO
includes
MediaSize
values
 for ISO media.
static final class
MediaSize.JIS
Class
MediaSize.JIS
includes
MediaSize
values
 for JIS (Japanese) media.
static final class
MediaSize.NA
Class
MediaSize.NA
includes
MediaSize
values
 for North American media.
static final class
MediaSize.Other
Class
MediaSize.Other
includes
MediaSize
values
 for miscellaneous media.
class
MediaSizeName
Class
MediaSizeName
is a subclass of
Media
.
class
MediaTray
Class
MediaTray
is a subclass of
Media
.
class
MultipleDocumentHandling
Class
MultipleDocumentHandling
is a printing attribute class, an
 enumeration, that controls finishing operations and the placement of one or
 more print-stream pages into impressions and onto media sheets.
final class
NumberOfDocuments
Class
NumberOfDocuments
is an integer valued printing attribute that
 indicates the number of individual docs the printer has accepted for this
 job, regardless of whether the docs' print data has reached the printer or
 not.
final class
NumberOfInterveningJobs
Class
NumberOfInterveningJobs
is an integer valued printing attribute
 that indicates the number of jobs that are ahead of this job in the relative
 chronological order of expected time to complete (i.e., the current scheduled
 order).
final class
NumberUp
Class
NumberUp
is an integer valued printing attribute class that
 specifies the number of print-stream pages to impose upon a single side of an
 instance of a selected medium.
final class
NumberUpSupported
Class
NumberUpSupported
is a printing attribute class, a set of
 integers, that gives the supported values for a
NumberUp
attribute.
final class
OrientationRequested
Class
OrientationRequested
is a printing attribute class, an
 enumeration, that indicates the desired orientation for printed print-stream
 pages; it does not describe the orientation of the client-supplied
 print-stream pages.
final class
OutputDeviceAssigned
Class
OutputDeviceAssigned
is a printing attribute class, a text
 attribute, that identifies the output device to which the service has
 assigned this job.
final class
PageRanges
Class
PageRanges
is a printing attribute class, a set of integers,
 that identifies the range(s) of print-stream pages that the Printer object
 uses for each copy of each document which are to be printed.
final class
PagesPerMinute
Class
PagesPerMinute
is an integer valued printing attribute that
 indicates the nominal number of pages per minute to the nearest whole number
 which may be generated by this printer (e.g., simplex, black-and-white).
final class
PagesPerMinuteColor
Class
PagesPerMinuteColor
is an integer valued printing attribute
 that indicates the nominal number of pages per minute to the nearest whole
 number which may be generated by this printer when printing color (e.g.,
 simplex, color).
class
PDLOverrideSupported
Class
PDLOverrideSupported
is a printing attribute class, an
 enumeration, that expresses the printer's ability to attempt to override
 processing instructions embedded in documents' print data with processing
 instructions specified as attributes outside the print data.
final class
PresentationDirection
Class
PresentationDirection
is a printing attribute class, an
 enumeration, that is used in conjunction with the
NumberUp
attribute to indicate the layout of multiple print-stream pages to impose
 upon a single side of an instance of a selected medium.
final class
PrinterInfo
Class
PrinterInfo
is a printing attribute class, a text attribute,
 that provides descriptive information about a printer.
final class
PrinterIsAcceptingJobs
Class
PrinterIsAcceptingJobs
is a printing attribute class, an
 enumeration, that indicates whether the printer is currently able to accept
 jobs.
final class
PrinterLocation
Class
PrinterLocation
is a printing attribute class, a text
 attribute, that identifies the location of the device.
final class
PrinterMakeAndModel
Class
PrinterMakeAndModel
is a printing attribute class, a text
 attribute, that the make and model of the printer.
final class
PrinterMessageFromOperator
Class
PrinterMessageFromOperator
is a printing attribute class, a
 text attribute, that provides a message from an operator, system
 administrator, or "intelligent" process to indicate to the end user
 information about or status of the printer, such as why it is unavailable or
 when it is expected to be available.
final class
PrinterMoreInfo
Class
PrinterMoreInfo
is a printing attribute class, a
URI
,
 that is used to obtain more information about this specific printer.
final class
PrinterMoreInfoManufacturer
Class
PrinterMoreInfoManufacturer
is a printing attribute class, a
URI
, that is used to obtain more information about this type of
 device.
final class
PrinterName
Class
PrinterName
is a printing attribute class, a text attribute,
 that specifies the name of a printer.
final class
PrinterResolution
Class
PrinterResolution
is a printing attribute class that specifies
 an exact resolution supported by a printer or to be used for a print job.
final class
PrinterState
Class
PrinterState
is a printing attribute class, an enumeration,
 that identifies the current state of a printer.
class
PrinterStateReason
Class
PrinterStateReason
is a printing attribute class, an
 enumeration, that provides additional information about the printer's current
 state, i.e., information that augments the value of the printer's
PrinterState
attribute.
final class
PrinterStateReasons
Class
PrinterStateReasons
is a printing attribute class, a set of
 enumeration values, that provides additional information about the printer's
 current state, i.e., information that augments the value of the printer's
PrinterState
attribute.
final class
PrinterURI
Class
PrinterURI
is a printing attribute class, a
URI
, that
 specifies the globally unique name of a printer.
class
PrintQuality
Class
PrintQuality
is a printing attribute class, an enumeration,
 that specifies the print quality that the printer uses for the job.
final class
QueuedJobCount
Class
QueuedJobCount
is an integer valued printing attribute that
 indicates the number of jobs in the printer whose
JobState
is either
PENDING
,
PENDING_HELD
,
PROCESSING
, or
PROCESSING_STOPPED
.
class
ReferenceUriSchemesSupported
Class
ReferenceUriSchemesSupported
is a printing attribute class an
 enumeration, that indicates a "URI scheme," such as "http:" or "ftp:", that a
 printer can use to retrieve print data stored at a
URI
location.
final class
RequestingUserName
Class
RequestingUserName
is a printing attribute class, a text
 attribute, that specifies the name of the end user that submitted the print
 job.
final class
Severity
Class
Severity
is a printing attribute class, an enumeration, that
 denotes the severity of a
PrinterStateReason
attribute.
final class
SheetCollate
Class
SheetCollate
is a printing attribute class, an enumeration,
 that specifies whether or not the media sheets of each copy of each printed
 document in a job are to be in sequence, when multiple copies of the document
 are specified by the
Copies
attribute.
final class
Sides
Class
Sides
is a printing attribute class, an enumeration, that
 specifies how print-stream pages are to be imposed upon the sides of an
 instance of a selected medium, i.e., an impression.
Methods in
javax.print.attribute.standard
with parameters of type
Object
Modifier and Type
Method
Description
boolean
Copies.
equals
(
Object
object)
Returns whether this copies attribute is equivalent to the passed in
 object.
boolean
CopiesSupported.
equals
(
Object
object)
Returns whether this copies supported attribute is equivalent to the
 passed in object.
boolean
DateTimeAtCompleted.
equals
(
Object
object)
Returns whether this date-time at completed attribute is equivalent to
 the passed in object.
boolean
DateTimeAtCreation.
equals
(
Object
object)
Returns whether this date-time at creation attribute is equivalent to the
 passed in object.
boolean
DateTimeAtProcessing.
equals
(
Object
object)
Returns whether this date-time at processing attribute is equivalent to
 the passed in object.
boolean
Destination.
equals
(
Object
object)
Returns whether this destination attribute is equivalent to the passed in
 object.
boolean
DocumentName.
equals
(
Object
object)
Returns whether this document name attribute is equivalent to the passed
 in object.
boolean
JobHoldUntil.
equals
(
Object
object)
Returns whether this job hold until attribute is equivalent to the passed
 in object.
boolean
JobImpressions.
equals
(
Object
object)
Returns whether this job impressions attribute is equivalent to the
 passed in object.
boolean
JobImpressionsCompleted.
equals
(
Object
object)
Returns whether this job impressions completed attribute is equivalent tp
 the passed in object.
boolean
JobImpressionsSupported.
equals
(
Object
object)
Returns whether this job impressions supported attribute is equivalent to
 the passed in object.
boolean
JobKOctets.
equals
(
Object
object)
Returns whether this job K octets attribute is equivalent to the passed
 in object.
boolean
JobKOctetsProcessed.
equals
(
Object
object)
Returns whether this job K octets processed attribute is equivalent to
 the passed in object.
boolean
JobKOctetsSupported.
equals
(
Object
object)
Returns whether this job K octets supported attribute is equivalent to
 the passed in object.
boolean
JobMediaSheets.
equals
(
Object
object)
Returns whether this job media sheets attribute is equivalent to the
 passed in object.
boolean
JobMediaSheetsCompleted.
equals
(
Object
object)
Returns whether this job media sheets completed attribute is equivalent
 to the passed in object.
boolean
JobMediaSheetsSupported.
equals
(
Object
object)
Returns whether this job media sheets supported attribute is equivalent
 to the passed in object.
boolean
JobMessageFromOperator.
equals
(
Object
object)
Returns whether this job message from operator attribute is equivalent to
 the passed in object.
boolean
JobName.
equals
(
Object
object)
Returns whether this job name attribute is equivalent to the passed in
 object.
boolean
JobOriginatingUserName.
equals
(
Object
object)
Returns whether this job originating user name attribute is equivalent to
 the passed in object.
boolean
JobPriority.
equals
(
Object
object)
Returns whether this job priority attribute is equivalent to the passed
 in object.
boolean
JobPrioritySupported.
equals
(
Object
object)
Returns whether this job priority supported attribute is equivalent to
 the passed in object.
boolean
Media.
equals
(
Object
object)
Returns whether this media attribute is equivalent to the passed in
 object.
boolean
MediaPrintableArea.
equals
(
Object
object)
Returns whether this media margins attribute is equivalent to the passed
 in object.
boolean
MediaSize.
equals
(
Object
object)
Returns whether this media size attribute is equivalent to the passed in
 object.
boolean
NumberOfDocuments.
equals
(
Object
object)
Returns whether this number of documents attribute is equivalent to the
 passed in object.
boolean
NumberOfInterveningJobs.
equals
(
Object
object)
Returns whether this number of intervening jobs attribute is equivalent
 to the passed in object.
boolean
NumberUp.
equals
(
Object
object)
Returns whether this number up attribute is equivalent to the passed in
 object.
boolean
NumberUpSupported.
equals
(
Object
object)
Returns whether this number up supported attribute is equivalent to the
 passed in object.
boolean
OutputDeviceAssigned.
equals
(
Object
object)
Returns whether this output device assigned attribute is equivalent to
 the passed in object.
boolean
PageRanges.
equals
(
Object
object)
Returns whether this page ranges attribute is equivalent to the passed in
 object.
boolean
PagesPerMinute.
equals
(
Object
object)
Returns whether this pages per minute attribute is equivalent to the
 passed in object.
boolean
PagesPerMinuteColor.
equals
(
Object
object)
Returns whether this pages per minute color attribute is equivalent to
 the passed in object.
boolean
PrinterInfo.
equals
(
Object
object)
Returns whether this printer info attribute is equivalent to the passed
 in object.
boolean
PrinterLocation.
equals
(
Object
object)
Returns whether this printer location attribute is equivalent to the
 passed in object.
boolean
PrinterMakeAndModel.
equals
(
Object
object)
Returns whether this printer make and model attribute is equivalent to
 the passed in object.
boolean
PrinterMessageFromOperator.
equals
(
Object
object)
Returns whether this printer message from operator attribute is
 equivalent to the passed in object.
boolean
PrinterMoreInfo.
equals
(
Object
object)
Returns whether this printer more info attribute is equivalent to the
 passed in object.
boolean
PrinterMoreInfoManufacturer.
equals
(
Object
object)
Returns whether this printer more info manufacturer attribute is
 equivalent to the passed in object.
boolean
PrinterName.
equals
(
Object
object)
Returns whether this printer name attribute is equivalent to the passed
 in object.
boolean
PrinterResolution.
equals
(
Object
object)
Returns whether this printer resolution attribute is equivalent to the
 passed in object.
boolean
PrinterURI.
equals
(
Object
object)
Returns whether this printer name attribute is equivalent to the passed
 in object.
boolean
QueuedJobCount.
equals
(
Object
object)
Returns whether this queued job count attribute is equivalent to the
 passed in object.
boolean
RequestingUserName.
equals
(
Object
object)
Returns whether this requesting user name attribute is equivalent to the
 passed in object.
Uses of
Object
in
javax.print.event
Subclasses of
Object
in
javax.print.event
Modifier and Type
Class
Description
class
PrintEvent
Class
PrintEvent
is the super class of all Print Service API events.
class
PrintJobAdapter
An abstract adapter class for receiving print job events.
class
PrintJobAttributeEvent
Class
PrintJobAttributeEvent
encapsulates an event a
PrintService
reports to let the client know that one or more printing
 attributes for a
PrintJob
have changed.
class
PrintJobEvent
Class
PrintJobEvent
encapsulates common events a print job reports to
 let a listener know of progress in the processing of the
DocPrintJob
.
class
PrintServiceAttributeEvent
Class
PrintServiceAttributeEvent
encapsulates an event a Print
 Service instance reports to let the client know of changes in the print
 service state.
Constructors in
javax.print.event
with parameters of type
Object
Modifier
Constructor
Description
PrintEvent
(
Object
source)
Constructs a
PrintEvent
object.
Uses of
Object
in
javax.rmi.ssl
Subclasses of
Object
in
javax.rmi.ssl
Modifier and Type
Class
Description
class
SslRMIClientSocketFactory
An
SslRMIClientSocketFactory
instance is used by the RMI
 runtime in order to obtain client sockets for RMI calls via SSL.
class
SslRMIServerSocketFactory
An
SslRMIServerSocketFactory
instance is used by the RMI
 runtime in order to obtain server sockets for RMI calls via SSL.
Methods in
javax.rmi.ssl
with parameters of type
Object
Modifier and Type
Method
Description
boolean
SslRMIClientSocketFactory.
equals
(
Object
obj)
Indicates whether some other object is "equal to" this one.
boolean
SslRMIServerSocketFactory.
equals
(
Object
obj)
Indicates whether some other object is "equal to" this one.
Uses of
Object
in
javax.script
Subclasses of
Object
in
javax.script
Modifier and Type
Class
Description
class
AbstractScriptEngine
Provides a standard implementation for several of the variants of the
eval
method.
class
CompiledScript
Extended by classes that store results of compilations.
class
ScriptEngineManager
The
ScriptEngineManager
implements a discovery and instantiation
 mechanism for
ScriptEngine
classes and also maintains a
 collection of key/value pairs storing state shared by all engines created
 by the Manager.
class
ScriptException
The generic
Exception
class for the Scripting APIs.
class
SimpleBindings
A simple implementation of Bindings backed by
 a
HashMap
or some other specified
Map
.
class
SimpleScriptContext
Simple implementation of ScriptContext.
Methods in
javax.script
that return
Object
Modifier and Type
Method
Description
Object
AbstractScriptEngine.
eval
(
Reader
reader)
eval(Reader)
calls the abstract
eval(Reader, ScriptContext)
passing the value of the
context
field.
Object
AbstractScriptEngine.
eval
(
Reader
reader,
Bindings
bindings)
eval(Reader, Bindings)
calls the abstract
eval(Reader, ScriptContext)
method, passing it a
ScriptContext
whose Reader, Writers and Bindings for scopes other that
ENGINE_SCOPE
are identical to those members of the protected
context
field.
Object
AbstractScriptEngine.
eval
(
String
script)
Same as
eval(Reader)
except that the abstract
eval(String, ScriptContext)
is used.
Object
AbstractScriptEngine.
eval
(
String
script,
Bindings
bindings)
Same as
eval(Reader, Bindings)
except that the abstract
eval(String, ScriptContext)
is used.
Object
CompiledScript.
eval
()
Executes the program stored in the
CompiledScript
object.
Object
CompiledScript.
eval
(
Bindings
bindings)
Executes the program stored in the
CompiledScript
object using
 the supplied
Bindings
of attributes as the
ENGINE_SCOPE
of the
 associated
ScriptEngine
during script execution.
abstract
Object
CompiledScript.
eval
(
ScriptContext
context)
Executes the program stored in this
CompiledScript
object.
Object
ScriptEngine.
eval
(
Reader
reader)
Same as
eval(String)
except that the source of the script is
 provided as a
Reader
Object
ScriptEngine.
eval
(
Reader
reader,
Bindings
n)
Same as
eval(String, Bindings)
except that the source of the script
 is provided as a
Reader
.
Object
ScriptEngine.
eval
(
Reader
reader,
ScriptContext
context)
Same as
eval(String, ScriptContext)
where the source of the script
 is read from a
Reader
.
Object
ScriptEngine.
eval
(
String
script)
Executes the specified script.
Object
ScriptEngine.
eval
(
String
script,
Bindings
n)
Executes the script using the
Bindings
argument as the
ENGINE_SCOPE
Bindings
of the
ScriptEngine
during the script execution.
Object
ScriptEngine.
eval
(
String
script,
ScriptContext
context)
Causes the immediate execution of the script whose source is the String
 passed as the first argument.
Object
AbstractScriptEngine.
get
(
String
key)
Gets the value for the specified key in the
ENGINE_SCOPE
of the
 protected
context
field.
Object
Bindings.
get
(
Object
key)
Returns the value to which this map maps the specified key.
Object
ScriptEngine.
get
(
String
key)
Retrieves a value set in the state of this engine.
Object
ScriptEngineManager.
get
(
String
key)
Gets the value for the specified key in the Global Scope
Object
SimpleBindings.
get
(
Object
key)
Returns the value to which this map maps the specified key.
Object
ScriptContext.
getAttribute
(
String
name)
Retrieves the value of the attribute with the given name in
 the scope occurring earliest in the search order.
Object
ScriptContext.
getAttribute
(
String
name,
 int scope)
Gets the value of an attribute in a given scope.
Object
SimpleScriptContext.
getAttribute
(
String
name)
Retrieves the value of the attribute with the given name in
 the scope occurring earliest in the search order.
Object
SimpleScriptContext.
getAttribute
(
String
name,
 int scope)
Gets the value of an attribute in a given scope.
Object
ScriptEngineFactory.
getParameter
(
String
key)
Returns the value of an attribute whose meaning may be implementation-specific.
Object
Invocable.
invokeFunction
(
String
name,
Object
... args)
Used to call top-level procedures and functions defined in scripts.
Object
Invocable.
invokeMethod
(
Object
thiz,
String
name,
Object
... args)
Calls a method on a script object compiled during a previous script execution,
 which is retained in the state of the
ScriptEngine
.
Object
Bindings.
put
(
String
name,
Object
value)
Set a named value.
Object
SimpleBindings.
put
(
String
name,
Object
value)
Sets the specified key/value in the underlying
map
field.
Object
Bindings.
remove
(
Object
key)
Removes the mapping for this key from this map if it is present
 (optional operation).
Object
SimpleBindings.
remove
(
Object
key)
Removes the mapping for this key from this map if it is present
 (optional operation).
Object
ScriptContext.
removeAttribute
(
String
name,
 int scope)
Remove an attribute in a given scope.
Object
SimpleScriptContext.
removeAttribute
(
String
name,
 int scope)
Remove an attribute in a given scope.
Methods in
javax.script
that return types with arguments of type
Object
Modifier and Type
Method
Description
Set
<
Map.Entry
<
String
,
Object
>>
SimpleBindings.
entrySet
()
Returns a
Set
view of the mappings contained in this map.
Collection
<
Object
>
SimpleBindings.
values
()
Returns a
Collection
view of the values contained in this map.
Methods in
javax.script
with parameters of type
Object
Modifier and Type
Method
Description
boolean
Bindings.
containsKey
(
Object
key)
Returns
true
if this map contains a mapping for the specified
 key.
boolean
SimpleBindings.
containsKey
(
Object
key)
Returns
true
if this map contains a mapping for the specified
 key.
boolean
SimpleBindings.
containsValue
(
Object
value)
Returns
true
if this map maps one or more keys to the
 specified value.
Object
Bindings.
get
(
Object
key)
Returns the value to which this map maps the specified key.
Object
SimpleBindings.
get
(
Object
key)
Returns the value to which this map maps the specified key.
<T> T
Invocable.
getInterface
(
Object
thiz,
Class
<T> clasz)
Returns an implementation of an interface using member functions of
 a scripting object compiled in the interpreter.
Object
Invocable.
invokeFunction
(
String
name,
Object
... args)
Used to call top-level procedures and functions defined in scripts.
Object
Invocable.
invokeMethod
(
Object
thiz,
String
name,
Object
... args)
Calls a method on a script object compiled during a previous script execution,
 which is retained in the state of the
ScriptEngine
.
void
AbstractScriptEngine.
put
(
String
key,
Object
value)
Sets the specified value with the specified key in the
ENGINE_SCOPE
Bindings
of the protected
context
field.
Object
Bindings.
put
(
String
name,
Object
value)
Set a named value.
void
ScriptEngine.
put
(
String
key,
Object
value)
Sets a key/value pair in the state of the ScriptEngine that may either create
 a Java Language Binding to be used in the execution of scripts or be used in some
 other way, depending on whether the key is reserved.
void
ScriptEngineManager.
put
(
String
key,
Object
value)
Sets the specified key/value pair in the Global Scope.
Object
SimpleBindings.
put
(
String
name,
Object
value)
Sets the specified key/value in the underlying
map
field.
Object
Bindings.
remove
(
Object
key)
Removes the mapping for this key from this map if it is present
 (optional operation).
Object
SimpleBindings.
remove
(
Object
key)
Removes the mapping for this key from this map if it is present
 (optional operation).
void
ScriptContext.
setAttribute
(
String
name,
Object
value,
 int scope)
Sets the value of an attribute in a given scope.
void
SimpleScriptContext.
setAttribute
(
String
name,
Object
value,
 int scope)
Sets the value of an attribute in a given scope.
Method parameters in
javax.script
with type arguments of type
Object
Modifier and Type
Method
Description
void
Bindings.
putAll
(
Map
<? extends
String
,
? extends
Object
> toMerge)
Adds all the mappings in a given
Map
to this
Bindings
.
void
SimpleBindings.
putAll
(
Map
<? extends
String
,
? extends
Object
> toMerge)
putAll
is implemented using
Map.putAll
.
Constructor parameters in
javax.script
with type arguments of type
Object
Modifier
Constructor
Description
SimpleBindings
(
Map
<
String
,
Object
> m)
Constructor uses an existing
Map
to store the values.
Uses of
Object
in
javax.security.auth
Subclasses of
Object
in
javax.security.auth
Modifier and Type
Class
Description
final class
AuthPermission
This class is for authentication permissions.
class
DestroyFailedException
Signals that a
destroy
operation failed.
final class
PrivateCredentialPermission
This class is used to protect access to private Credentials
 belonging to a particular
Subject
.
class
RefreshFailedException
Signals that a
refresh
operation failed.
final class
Subject
A
Subject
represents a grouping of related information
 for a single entity, such as a person.
class
SubjectDomainCombiner
Deprecated, for removal: This API element is subject to removal in a future version.
This class is only useful in conjunction with
the Security Manager
, which is deprecated
       and subject to removal in a future release.
Methods in
javax.security.auth
that return types with arguments of type
Object
Modifier and Type
Method
Description
Set
<
Object
>
Subject.
getPrivateCredentials
()
Return the
Set
of private credentials held by this
Subject
.
Set
<
Object
>
Subject.
getPublicCredentials
()
Return the
Set
of public credentials held by this
Subject
.
Methods in
javax.security.auth
with parameters of type
Object
Modifier and Type
Method
Description
boolean
PrivateCredentialPermission.
equals
(
Object
obj)
Checks two
PrivateCredentialPermission
objects for
 equality.
boolean
Subject.
equals
(
Object
o)
Compares the specified Object with this
Subject
for equality.
Uses of
Object
in
javax.security.auth.callback
Subclasses of
Object
in
javax.security.auth.callback
Modifier and Type
Class
Description
class
ChoiceCallback
Underlying security services instantiate and pass a
ChoiceCallback
to the
handle
method of a
CallbackHandler
to display a list of choices
 and to retrieve the selected choice(s).
class
ConfirmationCallback
Underlying security services instantiate and pass a
ConfirmationCallback
to the
handle
method of a
CallbackHandler
to ask for YES/NO,
 OK/CANCEL, YES/NO/CANCEL or other similar confirmations.
class
LanguageCallback
Underlying security services instantiate and pass a
LanguageCallback
to the
handle
method of a
CallbackHandler
to retrieve the
Locale
used for localizing text.
class
NameCallback
Underlying security services instantiate and pass a
NameCallback
to the
handle
method of a
CallbackHandler
to retrieve name information.
class
PasswordCallback
Underlying security services instantiate and pass a
PasswordCallback
to the
handle
method of a
CallbackHandler
to retrieve password information.
class
TextInputCallback
Underlying security services instantiate and pass a
TextInputCallback
to the
handle
method of a
CallbackHandler
to retrieve generic text
 information.
class
TextOutputCallback
Underlying security services instantiate and pass a
TextOutputCallback
to the
handle
method of a
CallbackHandler
to display information messages,
 warning messages and error messages.
class
UnsupportedCallbackException
Signals that a
CallbackHandler
does not
 recognize a particular
Callback
.
Uses of
Object
in
javax.security.auth.kerberos
Subclasses of
Object
in
javax.security.auth.kerberos
Modifier and Type
Class
Description
final class
DelegationPermission
This class is used to restrict the usage of the Kerberos
 delegation model, ie: forwardable and proxiable tickets.
final class
EncryptionKey
This class encapsulates an EncryptionKey used in Kerberos.
final class
KerberosCredMessage
This class encapsulates a Kerberos 5 KRB_CRED message which can be used to
 send Kerberos credentials from one principal to another.
class
KerberosKey
This class encapsulates a long term secret key for a Kerberos
 principal.
final class
KerberosPrincipal
This class encapsulates a Kerberos principal.
class
KerberosTicket
This class encapsulates a Kerberos ticket and associated
 information as viewed from the client's point of view.
final class
KeyTab
This class encapsulates a keytab file.
final class
ServicePermission
This class is used to protect Kerberos services and the
 credentials necessary to access those services.
Methods in
javax.security.auth.kerberos
with parameters of type
Object
Modifier and Type
Method
Description
boolean
DelegationPermission.
equals
(
Object
obj)
Checks two DelegationPermission objects for equality.
boolean
EncryptionKey.
equals
(
Object
other)
Compares the specified object with this key for equality.
boolean
KerberosCredMessage.
equals
(
Object
other)
Compares the specified object with this
KerberosCredMessage
for equality.
boolean
KerberosKey.
equals
(
Object
other)
Compares the specified object with this
KerberosKey
for
 equality.
boolean
KerberosPrincipal.
equals
(
Object
other)
Compares the specified object with this principal for equality.
boolean
KerberosTicket.
equals
(
Object
other)
Compares the specified object with this
KerberosTicket
for equality.
boolean
KeyTab.
equals
(
Object
other)
Compares the specified object with this
KeyTab
for equality.
boolean
ServicePermission.
equals
(
Object
obj)
Checks two ServicePermission objects for equality.
Uses of
Object
in
javax.security.auth.login
Subclasses of
Object
in
javax.security.auth.login
Modifier and Type
Class
Description
class
AccountException
A generic account exception.
class
AccountExpiredException
Signals that a user account has expired.
class
AccountLockedException
Signals that an account was locked.
class
AccountNotFoundException
Signals that an account was not found.
class
AppConfigurationEntry
This class represents a single
LoginModule
entry
 configured for the application specified in the
getAppConfigurationEntry(String appName)
method in the
Configuration
class.
static class
AppConfigurationEntry.LoginModuleControlFlag
This class represents whether a
LoginModule
is REQUIRED, REQUISITE, SUFFICIENT or OPTIONAL.
class
Configuration
A Configuration object is responsible for specifying which LoginModules
 should be used for a particular application, and in what order the
 LoginModules should be invoked.
class
ConfigurationSpi
This class defines the
Service Provider Interface
(
SPI
)
 for the
Configuration
class.
class
CredentialException
A generic credential exception.
class
CredentialExpiredException
Signals that a
Credential
has expired.
class
CredentialNotFoundException
Signals that a credential was not found.
class
FailedLoginException
Signals that user authentication failed.
class
LoginContext
The
LoginContext
class describes the basic methods used
 to authenticate Subjects and provides a way to develop an
 application independent of the underlying authentication technology.
class
LoginException
This is the basic login exception.
Uses of
Object
in
javax.security.auth.x500
Subclasses of
Object
in
javax.security.auth.x500
Modifier and Type
Class
Description
final class
X500Principal
This class represents an X.500
Principal
.
final class
X500PrivateCredential
This class represents an
X500PrivateCredential
.
Methods in
javax.security.auth.x500
with parameters of type
Object
Modifier and Type
Method
Description
boolean
X500Principal.
equals
(
Object
o)
Compares the specified
Object
with this
X500Principal
for equality.
Uses of
Object
in
javax.security.cert
Subclasses of
Object
in
javax.security.cert
Modifier and Type
Class
Description
class
Certificate
Deprecated, for removal: This API element is subject to removal in a future version.
Use the classes in
java.security.cert
instead.
class
CertificateEncodingException
Deprecated, for removal: This API element is subject to removal in a future version.
Use the classes in
java.security.cert
instead.
class
CertificateException
Deprecated, for removal: This API element is subject to removal in a future version.
Use the classes in
java.security.cert
instead.
class
CertificateExpiredException
Deprecated, for removal: This API element is subject to removal in a future version.
Use the classes in
java.security.cert
instead.
class
CertificateNotYetValidException
Deprecated, for removal: This API element is subject to removal in a future version.
Use the classes in
java.security.cert
instead.
class
CertificateParsingException
Deprecated, for removal: This API element is subject to removal in a future version.
Use the classes in
java.security.cert
instead.
class
X509Certificate
Deprecated, for removal: This API element is subject to removal in a future version.
Use the classes in
java.security.cert
instead.
Methods in
javax.security.cert
with parameters of type
Object
Modifier and Type
Method
Description
boolean
Certificate.
equals
(
Object
other)
Deprecated, for removal: This API element is subject to removal in a future version.
Compares this certificate for equality with the specified
 object.
Uses of
Object
in
javax.security.sasl
Subclasses of
Object
in
javax.security.sasl
Modifier and Type
Class
Description
class
AuthenticationException
This exception is thrown by a SASL mechanism implementation
 to indicate that the SASL
 exchange has failed due to reasons related to authentication, such as
 an invalid identity, passphrase, or key.
class
AuthorizeCallback
This callback is used by
SaslServer
to determine whether
 one entity (identified by an authenticated authentication id)
 can act on
 behalf of another entity (identified by an authorization id).
class
RealmCallback
This callback is used by
SaslClient
and
SaslServer
to retrieve realm information.
class
RealmChoiceCallback
This callback is used by
SaslClient
and
SaslServer
to obtain a realm given a list of realm choices.
class
Sasl
A static class for creating SASL clients and servers.
class
SaslException
This class represents an error that has occurred when using SASL.
Methods in
javax.security.sasl
that return
Object
Modifier and Type
Method
Description
Object
SaslClient.
getNegotiatedProperty
(
String
propName)
Retrieves the negotiated property.
Object
SaslServer.
getNegotiatedProperty
(
String
propName)
Retrieves the negotiated property.
Uses of
Object
in
javax.smartcardio
Subclasses of
Object
in
javax.smartcardio
Modifier and Type
Class
Description
final class
ATR
A Smart Card's answer-to-reset bytes.
class
Card
A Smart Card with which a connection has been established.
class
CardChannel
A logical channel connection to a Smart Card.
class
CardException
Exception for errors that occur during communication with the
 Smart Card stack or the card itself.
class
CardNotPresentException
Exception thrown when an application tries to establish a connection with a
 terminal that has no card present.
class
CardPermission
A permission for Smart Card operations.
class
CardTerminal
A Smart Card terminal, sometimes referred to as a Smart Card Reader.
class
CardTerminals
The set of terminals supported by a TerminalFactory.
final class
CommandAPDU
A command APDU following the structure defined in ISO/IEC 7816-4.
final class
ResponseAPDU
A response APDU as defined in ISO/IEC 7816-4.
final class
TerminalFactory
A factory for CardTerminal objects.
class
TerminalFactorySpi
The TerminalFactorySpi class defines the service provider interface.
Methods in
javax.smartcardio
with parameters of type
Object
Modifier and Type
Method
Description
boolean
ATR.
equals
(
Object
obj)
Compares the specified object with this ATR for equality.
boolean
CardPermission.
equals
(
Object
obj)
Compares the specified object with this CardPermission for equality.
boolean
CommandAPDU.
equals
(
Object
obj)
Compares the specified object with this command APDU for equality.
boolean
ResponseAPDU.
equals
(
Object
obj)
Compares the specified object with this response APDU for equality.
static
TerminalFactory
TerminalFactory.
getInstance
(
String
type,
Object
params)
Returns a TerminalFactory of the specified type that is initialized
 with the specified parameters.
static
TerminalFactory
TerminalFactory.
getInstance
(
String
type,
Object
params,
String
provider)
Returns a TerminalFactory of the specified type that is initialized
 with the specified parameters.
static
TerminalFactory
TerminalFactory.
getInstance
(
String
type,
Object
params,
Provider
provider)
Returns a TerminalFactory of the specified type that is initialized
 with the specified parameters.
Uses of
Object
in
javax.sound.midi
Subclasses of
Object
in
javax.sound.midi
Modifier and Type
Class
Description
class
Instrument
An instrument is a sound-synthesis algorithm with certain parameter settings,
 usually designed to emulate a specific real-world musical instrument or to
 achieve a specific sort of sound effect.
class
InvalidMidiDataException
An
InvalidMidiDataException
indicates that inappropriate MIDI data
 was encountered.
class
MetaMessage
A
MetaMessage
is a
MidiMessage
that is not meaningful to
 synthesizers, but that can be stored in a MIDI file and interpreted by a
 sequencer program.
static class
MidiDevice.Info
A
MidiDevice.Info
object contains assorted data about a
MidiDevice
, including its name, the company who created it, and
 descriptive text.
class
MidiEvent
MIDI events contain a MIDI message and a corresponding time-stamp expressed
 in ticks, and can represent the MIDI event information stored in a MIDI file
 or a
Sequence
object.
class
MidiFileFormat
A
MidiFileFormat
object encapsulates a MIDI file's type, as well as
 its length and timing information.
class
MidiMessage
MidiMessage
is the base class for MIDI messages.
class
MidiSystem
The
MidiSystem
class provides access to the installed MIDI system
 resources, including devices such as synthesizers, sequencers, and MIDI input
 and output ports.
class
MidiUnavailableException
A
MidiUnavailableException
is thrown when a requested MIDI component
 cannot be opened or created because it is unavailable.
class
Patch
A
Patch
object represents a location, on a MIDI synthesizer, into
 which a single instrument is stored (loaded).
class
Sequence
A
Sequence
is a data structure containing musical information (often
 an entire song or composition) that can be played back by a
Sequencer
object.
static class
Sequencer.SyncMode
A
SyncMode
object represents one of the ways in which a MIDI
 sequencer's notion of time can be synchronized with a master or slave
 device.
class
ShortMessage
A
ShortMessage
contains a MIDI message that has at most two data
 bytes following its status byte.
class
SoundbankResource
A
SoundbankResource
represents any audio resource stored in a
Soundbank
.
class
SysexMessage
A
SysexMessage
object represents a MIDI system exclusive message.
final class
Track
A MIDI track is an independent stream of MIDI events (time-stamped MIDI data)
 that can be stored along with other tracks in a standard MIDI file.
class
VoiceStatus
A
VoiceStatus
object contains information about the current status of
 one of the voices produced by a
Synthesizer
.
Methods in
javax.sound.midi
that return
Object
Modifier and Type
Method
Description
Object
MetaMessage.
clone
()
Creates a new object of the same class and with the same contents as this
 object.
abstract
Object
MidiMessage.
clone
()
Creates a new object of the same class and with the same contents as this
 object.
Object
ShortMessage.
clone
()
Creates a new object of the same class and with the same contents as this
 object.
Object
SysexMessage.
clone
()
Creates a new object of the same class and with the same contents as this
 object.
abstract
Object
SoundbankResource.
getData
()
Obtains the sampled audio that is stored in this
SoundbankResource
.
Object
MidiFileFormat.
getProperty
(
String
key)
Obtain the property value specified by the key.
Methods in
javax.sound.midi
that return types with arguments of type
Object
Modifier and Type
Method
Description
Map
<
String
,
Object
>
MidiFileFormat.
properties
()
Obtain an unmodifiable map of properties.
Methods in
javax.sound.midi
with parameters of type
Object
Modifier and Type
Method
Description
final boolean
MidiDevice.Info.
equals
(
Object
obj)
Indicates whether the specified object is equal to this info object,
 returning
true
if the objects are the same.
final boolean
Sequencer.SyncMode.
equals
(
Object
obj)
Indicates whether the specified object is equal to this
 synchronization mode, returning
true
if the objects are the
 same.
Constructor parameters in
javax.sound.midi
with type arguments of type
Object
Modifier
Constructor
Description
MidiFileFormat
(int type,
 float divisionType,
 int resolution,
 int bytes,
 long microseconds,
Map
<
String
,
Object
> properties)
Construct a
MidiFileFormat
with a set of properties.
Uses of
Object
in
javax.sound.midi.spi
Subclasses of
Object
in
javax.sound.midi.spi
Modifier and Type
Class
Description
class
MidiDeviceProvider
A
MidiDeviceProvider
is a factory or provider for a particular type
 of MIDI device.
class
MidiFileReader
A
MidiFileReader
supplies MIDI file-reading services.
class
MidiFileWriter
A
MidiFileWriter
supplies MIDI file-writing services.
class
SoundbankReader
A
SoundbankReader
supplies soundbank file-reading services.
Uses of
Object
in
javax.sound.sampled
Subclasses of
Object
in
javax.sound.sampled
Modifier and Type
Class
Description
class
AudioFileFormat
An instance of the
AudioFileFormat
class describes an audio file,
 including the file type, the file's length in bytes, the length in sample
 frames of the audio data contained in the file, and the format of the audio
 data.
static class
AudioFileFormat.Type
An instance of the
Type
class represents one of the standard
 types of audio file.
class
AudioFormat
AudioFormat
is the class that specifies a particular arrangement of
 data in a sound stream.
static class
AudioFormat.Encoding
The
Encoding
class names the specific type of data representation
 used for an audio stream.
class
AudioInputStream
An audio input stream is an input stream with a specified audio format and
 length.
class
AudioPermission
The
AudioPermission
class represents access rights to the audio
 system resources.
class
AudioSystem
The
AudioSystem
class acts as the entry point to the sampled-audio
 system resources.
class
BooleanControl
A
BooleanControl
provides the ability to switch between two possible
 settings that affect a line's audio.
static class
BooleanControl.Type
An instance of the
BooleanControl.Type
class identifies one kind
 of boolean control.
class
CompoundControl
A
CompoundControl
, such as a graphic equalizer, provides control over
 two or more related properties, each of which is itself represented as a
Control
.
static class
CompoundControl.Type
An instance of the
CompoundControl.Type
inner class identifies
 one kind of compound control.
class
Control
Lines
often have a set of controls, such as gain and pan, that
 affect the audio signal passing through the line.
static class
Control.Type
An instance of the
Type
class represents the type of the control.
static class
DataLine.Info
Besides the class information inherited from its superclass,
DataLine.Info
provides additional information specific to data
 lines.
class
EnumControl
An
EnumControl
provides control over a set of discrete possible
 values, each represented by an object.
static class
EnumControl.Type
An instance of the
EnumControl.Type
inner class identifies one
 kind of enumerated control.
class
FloatControl
A
FloatControl
object provides control over a range of floating-point
 values.
static class
FloatControl.Type
An instance of the
FloatControl.Type
inner class identifies one
 kind of float control.
static class
Line.Info
A
Line.Info
object contains information about a line.
class
LineEvent
The
LineEvent
class encapsulates information that a line sends its
 listeners whenever the line opens, closes, starts, or stops.
static class
LineEvent.Type
The LineEvent.Type inner class identifies what kind of event occurred on
 a line.
class
LineUnavailableException
A
LineUnavailableException
is an exception indicating that a line
 cannot be opened because it is unavailable.
static class
Mixer.Info
The
Mixer.Info
class represents information about an audio mixer,
 including the product's name, version, and vendor, along with a textual
 description.
static class
Port.Info
The
Port.Info
class extends
Line.Info
with additional
 information specific to ports, including the port's name and whether it
 is a source or a target for its mixer.
class
ReverbType
The
ReverbType
class provides methods for accessing various
 reverberation settings to be applied to an audio signal.
class
UnsupportedAudioFileException
An
UnsupportedAudioFileException
is an exception indicating that an
 operation failed because a file did not contain valid data of a recognized
 file type and format.
Methods in
javax.sound.sampled
that return
Object
Modifier and Type
Method
Description
Object
AudioFileFormat.
getProperty
(
String
key)
Obtain the property value specified by the key.
Object
AudioFormat.
getProperty
(
String
key)
Obtain the property value specified by the key.
Object
EnumControl.
getValue
()
Obtains this control's current value.
Object
[]
EnumControl.
getValues
()
Returns the set of possible values for this control.
Methods in
javax.sound.sampled
that return types with arguments of type
Object
Modifier and Type
Method
Description
Map
<
String
,
Object
>
AudioFileFormat.
properties
()
Obtain an unmodifiable map of properties.
Map
<
String
,
Object
>
AudioFormat.
properties
()
Obtain an unmodifiable map of properties.
Methods in
javax.sound.sampled
with parameters of type
Object
Modifier and Type
Method
Description
final boolean
AudioFileFormat.Type.
equals
(
Object
obj)
Indicates whether the specified object is equal to this file type,
 returning
true
if the objects are equal.
final boolean
AudioFormat.Encoding.
equals
(
Object
obj)
Indicates whether the specified object is equal to this encoding,
 returning
true
if the objects are equal.
final boolean
Control.Type.
equals
(
Object
obj)
Indicates whether the specified object is equal to this control type,
 returning
true
if the objects are the same.
final boolean
LineEvent.Type.
equals
(
Object
obj)
Indicates whether the specified object is equal to this event type,
 returning
true
if the objects are the same.
final boolean
Mixer.Info.
equals
(
Object
obj)
Indicates whether the specified object is equal to this info object,
 returning
true
if the objects are the same.
final boolean
Port.Info.
equals
(
Object
obj)
Indicates whether the specified object is equal to this info object,
 returning
true
if the objects are the same.
final boolean
ReverbType.
equals
(
Object
obj)
Indicates whether the specified object is equal to this reverb type,
 returning
true
if the objects are the same.
void
EnumControl.
setValue
(
Object
value)
Sets the current value for the control.
Constructors in
javax.sound.sampled
with parameters of type
Object
Modifier
Constructor
Description
protected
EnumControl
(
EnumControl.Type
type,
Object
[] values,
Object
value)
Constructs a new enumerated control object with the given parameters.
Constructor parameters in
javax.sound.sampled
with type arguments of type
Object
Modifier
Constructor
Description
AudioFileFormat
(
AudioFileFormat.Type
type,
AudioFormat
format,
 int frameLength,
Map
<
String
,
Object
> properties)
Construct an audio file format object with a set of defined properties.
AudioFormat
(
AudioFormat.Encoding
encoding,
 float sampleRate,
 int sampleSizeInBits,
 int channels,
 int frameSize,
 float frameRate,
 boolean bigEndian,
Map
<
String
,
Object
> properties)
Constructs an
AudioFormat
with the given parameters.
Uses of
Object
in
javax.sound.sampled.spi
Subclasses of
Object
in
javax.sound.sampled.spi
Modifier and Type
Class
Description
class
AudioFileReader
Provider for audio file reading services.
class
AudioFileWriter
Provider for audio file writing services.
class
FormatConversionProvider
A format conversion provider provides format conversion services from one or
 more input formats to one or more output formats.
class
MixerProvider
A provider or factory for a particular mixer type.
Uses of
Object
in
javax.sql
Subclasses of
Object
in
javax.sql
Modifier and Type
Class
Description
class
ConnectionEvent
An
Event
object that provides information about the
 source of a connection-related event.
class
RowSetEvent
An
Event
object generated when an event occurs to a
RowSet
object.
class
StatementEvent
A
StatementEvent
is sent to all
StatementEventListener
s which were
 registered with a
PooledConnection
.
Methods in
javax.sql
that return
Object
Modifier and Type
Method
Description
Object
[]
RowSetInternal.
getParams
()
Retrieves the parameters that have been set for this
RowSet
object's command.
Methods in
javax.sql
with parameters of type
Object
Modifier and Type
Method
Description
void
RowSet.
setObject
(int parameterIndex,
Object
x)
Sets the designated parameter in this
RowSet
object's command
 with a Java
Object
.
void
RowSet.
setObject
(int parameterIndex,
Object
x,
 int targetSqlType)
Sets the designated parameter in this
RowSet
object's command
 with a Java
Object
.
void
RowSet.
setObject
(int parameterIndex,
Object
x,
 int targetSqlType,
 int scaleOrLength)
Sets the designated parameter in this
RowSet
object's command
 with the given Java
Object
.
void
RowSet.
setObject
(
String
parameterName,
Object
x)
Sets the value of the designated parameter with the given object.
void
RowSet.
setObject
(
String
parameterName,
Object
x,
 int targetSqlType)
Sets the value of the designated parameter with the given object.
void
RowSet.
setObject
(
String
parameterName,
Object
x,
 int targetSqlType,
 int scale)
Sets the value of the designated parameter with the given object.
Uses of
Object
in
javax.sql.rowset
Subclasses of
Object
in
javax.sql.rowset
Modifier and Type
Class
Description
class
BaseRowSet
An abstract class providing a
RowSet
object with its basic functionality.
class
RowSetMetaDataImpl
Provides implementations for the methods that set and get
 metadata information about a
RowSet
object's columns.
class
RowSetProvider
A factory API that enables applications to obtain a
RowSetFactory
implementation  that can be used to create different
 types of
RowSet
implementations.
class
RowSetWarning
An extension of
SQLException
that provides information
 about database warnings set on
RowSet
objects.
Methods in
javax.sql.rowset
that return
Object
Modifier and Type
Method
Description
Object
[]
BaseRowSet.
getParams
()
Retrieves an array containing the parameter values (both Objects and
 primitives) that have been set for this
RowSet
object's command and throws an
SQLException
object
 if all parameters have not been set.
Methods in
javax.sql.rowset
with parameters of type
Object
Modifier and Type
Method
Description
boolean
Predicate.
evaluate
(
Object
value,
 int column)
This method is called by a
FilteredRowSet
object
 to check whether the value lies between the filtering criterion (or criteria
 if multiple constraints exist) set using the
setFilter()
method.
boolean
Predicate.
evaluate
(
Object
value,
String
columnName)
This method is called by the
FilteredRowSet
object
 to check whether the value lies between the filtering criteria set
 using the setFilter method.
void
BaseRowSet.
setObject
(int parameterIndex,
Object
x)
Sets the designated parameter to an
Object
in the Java
 programming language.
void
BaseRowSet.
setObject
(int parameterIndex,
Object
x,
 int targetSqlType)
Sets the value of the designated parameter with the given
Object
value.
void
BaseRowSet.
setObject
(int parameterIndex,
Object
x,
 int targetSqlType,
 int scale)
Sets the designated parameter to an
Object
in the Java
 programming language.
void
BaseRowSet.
setObject
(
String
parameterName,
Object
x)
Sets the value of the designated parameter with the given object.
void
BaseRowSet.
setObject
(
String
parameterName,
Object
x,
 int targetSqlType)
Sets the value of the designated parameter with the given object.
void
BaseRowSet.
setObject
(
String
parameterName,
Object
x,
 int targetSqlType,
 int scale)
Sets the value of the designated parameter with the given object.
Uses of
Object
in
javax.sql.rowset.serial
Subclasses of
Object
in
javax.sql.rowset.serial
Modifier and Type
Class
Description
class
SerialArray
A serialized version of an
Array
object, which is the mapping in the Java programming language of an SQL
ARRAY
value.
class
SerialBlob
A serialized mapping in the Java programming language of an SQL
BLOB
value.
class
SerialClob
A serialized mapping in the Java programming language of an SQL
CLOB
value.
class
SerialDatalink
A serialized mapping in the Java programming language of an SQL
DATALINK
value.
class
SerialException
Indicates and an error with the serialization or de-serialization of
 SQL types such as
BLOB, CLOB, STRUCT or ARRAY
in
 addition to SQL types such as
DATALINK and JAVAOBJECT
class
SerialJavaObject
A serializable mapping in the Java programming language of an SQL
JAVA_OBJECT
value.
class
SerialRef
A serialized mapping of a
Ref
object, which is the mapping in the
 Java programming language of an SQL
REF
value.
class
SerialStruct
A serialized mapping in the Java programming language of an SQL
 structured type.
class
SQLInputImpl
An input stream used for custom mapping user-defined types (UDTs).
class
SQLOutputImpl
The output stream for writing the attributes of a
 custom-mapped user-defined type (UDT) back to the database.
Methods in
javax.sql.rowset.serial
that return
Object
Modifier and Type
Method
Description
Object
SerialArray.
clone
()
Returns a clone of this
SerialArray
.
Object
SerialBlob.
clone
()
Returns a clone of this
SerialBlob
.
Object
SerialClob.
clone
()
Returns a clone of this
SerialClob
.
Object
SerialDatalink.
clone
()
Returns a clone of this
SerialDatalink
.
Object
SerialJavaObject.
clone
()
Returns a clone of this
SerialJavaObject
.
Object
SerialRef.
clone
()
Returns a clone of this
SerialRef
.
Object
SerialStruct.
clone
()
Returns a clone of this
SerialStruct
.
Object
SerialArray.
getArray
()
Returns a new array that is a copy of this
SerialArray
object.
Object
SerialArray.
getArray
(long index,
 int count)
Returns a new array that is a copy of a slice
 of this
SerialArray
object, starting with the
 element at the given index and containing the given number
 of consecutive elements.
Object
SerialArray.
getArray
(long index,
 int count,
Map
<
String
,
Class
<?>> map)
Returns a new array that is a copy of a slice
 of this
SerialArray
object, starting with the
 element at the given index and containing the given number
 of consecutive elements.
Object
SerialArray.
getArray
(
Map
<
String
,
Class
<?>> map)
Returns a new array that is a copy of this
SerialArray
object, using the given type map for the custom
 mapping of each element when the elements are SQL UDTs.
Object
[]
SerialStruct.
getAttributes
()
Retrieves an array of
Object
values containing the
 attributes of the SQL structured type that this
SerialStruct
object represents.
Object
[]
SerialStruct.
getAttributes
(
Map
<
String
,
Class
<?>> map)
Retrieves the attributes for the SQL structured type that
 this
SerialStruct
represents as an array of
Object
values, using the given type map for
 custom mapping if appropriate.
Object
SerialJavaObject.
getObject
()
Returns an
Object
that is a copy of this
SerialJavaObject
object.
Object
SerialRef.
getObject
()
Returns an
Object
representing the SQL structured type
 to which this
SerialRef
object refers.
Object
SerialRef.
getObject
(
Map
<
String
,
Class
<?>> map)
Returns an
Object
representing the SQL structured type
 to which this
SerialRef
object refers.
Object
SQLInputImpl.
readObject
()
Retrieves the value at the head of this
SQLInputImpl
object as an
Object
in the Java programming language.
Methods in
javax.sql.rowset.serial
with parameters of type
Object
Modifier and Type
Method
Description
boolean
SerialArray.
equals
(
Object
obj)
Compares this SerialArray to the specified object.
boolean
SerialBlob.
equals
(
Object
obj)
Compares this SerialBlob to the specified object.
boolean
SerialClob.
equals
(
Object
obj)
Compares this SerialClob to the specified object.
boolean
SerialDatalink.
equals
(
Object
obj)
Compares this
SerialDatalink
to the specified object.
boolean
SerialJavaObject.
equals
(
Object
o)
Compares this SerialJavaObject to the specified object.
boolean
SerialRef.
equals
(
Object
obj)
Compares this SerialRef to the specified object.
boolean
SerialStruct.
equals
(
Object
obj)
Compares this SerialStruct to the specified object.
void
SerialRef.
setObject
(
Object
obj)
Sets the SQL structured type that this
SerialRef
object
 references to the given
Object
object.
Constructors in
javax.sql.rowset.serial
with parameters of type
Object
Modifier
Constructor
Description
SerialJavaObject
(
Object
obj)
Constructor for
SerialJavaObject
helper class.
SQLInputImpl
(
Object
[] attributes,
Map
<
String
,
Class
<?>> map)
Creates an
SQLInputImpl
object initialized with the
 given array of attributes and the given type map.
Uses of
Object
in
javax.sql.rowset.spi
Subclasses of
Object
in
javax.sql.rowset.spi
Modifier and Type
Class
Description
class
SyncFactory
The Service Provider Interface (SPI) mechanism that generates
SyncProvider
instances to be used by disconnected
RowSet
objects.
class
SyncFactoryException
Indicates an error with
SyncFactory
mechanism.
class
SyncProvider
The synchronization mechanism that provides reader/writer capabilities for
 disconnected
RowSet
objects.
class
SyncProviderException
Indicates an error with the
SyncProvider
mechanism.
Methods in
javax.sql.rowset.spi
that return
Object
Modifier and Type
Method
Description
Object
SyncResolver.
getConflictValue
(int index)
Retrieves the value in the designated column in the current row of this
SyncResolver
object, which is the value in the data source
 that caused a conflict.
Object
SyncResolver.
getConflictValue
(
String
columnName)
Retrieves the value in the designated column in the current row of this
SyncResolver
object, which is the value in the data source
 that caused a conflict.
Methods in
javax.sql.rowset.spi
with parameters of type
Object
Modifier and Type
Method
Description
void
SyncResolver.
setResolvedValue
(int index,
Object
obj)
Sets
obj
as the value in column
index
in the current row of the
RowSet
object that is being synchronized.
void
SyncResolver.
setResolvedValue
(
String
columnName,
Object
obj)
Sets
obj
as the value in column
columnName
in the current row of the
RowSet
object that is being synchronized.
Uses of
Object
in
javax.swing
Subclasses of
Object
in
javax.swing
Modifier and Type
Class
Description
class
AbstractAction
This class provides default implementations for the JFC
Action
interface.
class
AbstractButton
Defines common behaviors for buttons and menu items.
protected class
AbstractButton.AccessibleAbstractButton
This class implements accessibility support for the
AbstractButton
class.
protected class
AbstractButton.ButtonChangeListener
Extends
ChangeListener
to be serializable.
class
AbstractCellEditor
A base class for
CellEditors
, providing default
 implementations for the methods in the
CellEditor
interface except
getCellEditorValue()
.
class
AbstractListModel
<E>
The abstract definition for the data model that provides
 a
List
with its contents.
class
AbstractSpinnerModel
This class provides the ChangeListener part of the
 SpinnerModel interface that should be suitable for most concrete SpinnerModel
 implementations.
class
ActionMap
ActionMap
provides mappings from
Object
s
 (called
keys
or
Action
names
)
 to
Action
s.
class
BorderFactory
Factory class for vending standard
Border
objects.
class
Box
A lightweight container
 that uses a BoxLayout object as its layout manager.
protected class
Box.AccessibleBox
This class implements accessibility support for the
Box
class.
static class
Box.Filler
An implementation of a lightweight component that participates in
 layout but has no view.
protected class
Box.Filler.AccessibleBoxFiller
This class implements accessibility support for the
Box.Filler
class.
class
BoxLayout
A layout manager that allows multiple components to be laid out either
 vertically or horizontally.
class
ButtonGroup
This class is used to create a multiple-exclusion scope for
 a set of buttons.
class
CellRendererPane
This class is inserted in between cell renderers and the components that
 use them.
protected class
CellRendererPane.AccessibleCellRendererPane
This class implements accessibility support for the
CellRendererPane
class.
class
ComponentInputMap
A
ComponentInputMap
is an
InputMap
associated with a particular
JComponent
.
class
DebugGraphics
Graphics subclass supporting graphics debugging.
class
DefaultBoundedRangeModel
A generic implementation of BoundedRangeModel.
class
DefaultButtonModel
The default implementation of a
Button
component's data model.
class
DefaultCellEditor
The default editor for table and tree cells.
protected class
DefaultCellEditor.EditorDelegate
The protected
EditorDelegate
class.
class
DefaultComboBoxModel
<E>
The default model for combo boxes.
class
DefaultDesktopManager
This is an implementation of the
DesktopManager
.
class
DefaultFocusManager
This class has been obsoleted by the 1.4 focus APIs.
class
DefaultListCellRenderer
Renders an item in a list.
static class
DefaultListCellRenderer.UIResource
A subclass of DefaultListCellRenderer that implements UIResource.
class
DefaultListModel
<E>
This class loosely implements the
java.util.Vector
API, in that it implements the 1.1.x version of
java.util.Vector
, has no collection class support,
 and notifies the
ListDataListener
s when changes occur.
class
DefaultListSelectionModel
Default data model for list selections.
class
DefaultRowSorter
<M,
I>
An implementation of
RowSorter
that provides sorting and
 filtering around a grid-based data model.
protected static class
DefaultRowSorter.ModelWrapper
<M,
I>
DefaultRowSorter.ModelWrapper
is responsible for providing
 the data that gets sorted by
DefaultRowSorter
.
class
DefaultSingleSelectionModel
A generic implementation of SingleSelectionModel.
class
FocusManager
This class has been obsoleted by the 1.4 focus APIs.
class
GrayFilter
An image filter that "disables" an image by turning
 it into a grayscale image, and brightening the pixels
 in the image.
class
GroupLayout
GroupLayout
is a
LayoutManager
that hierarchically
 groups components in order to position them in a
Container
.
class
GroupLayout.Group
Group
provides the basis for the two types of
 operations supported by
GroupLayout
: laying out
 components one after another (
SequentialGroup
)
 or aligned (
ParallelGroup
).
class
GroupLayout.ParallelGroup
A
Group
that aligns and sizes its children.
final class
GroupLayout.SequentialGroup
A
Group
that positions and sizes its elements
 sequentially, one after another.
class
ImageIcon
An implementation of the Icon interface that paints Icons
 from Images.
protected class
ImageIcon.AccessibleImageIcon
This class implements accessibility support for the
ImageIcon
class.
class
InputMap
InputMap
provides a binding between an input event (currently only
KeyStroke
s are used) and an
Object
.
class
InputVerifier
This class provides the validation mechanism for Swing components.
class
InternalFrameFocusTraversalPolicy
A FocusTraversalPolicy which can optionally provide an algorithm for
 determining a JInternalFrame's initial Component.
class
JApplet
Deprecated, for removal: This API element is subject to removal in a future version.
The Applet API is deprecated, no replacement.
protected class
JApplet.AccessibleJApplet
Deprecated, for removal: This API element is subject to removal in a future version.
This class implements accessibility support for the
JApplet
class.
class
JButton
An implementation of a "push" button.
protected class
JButton.AccessibleJButton
This class implements accessibility support for the
JButton
class.
class
JCheckBox
An implementation of a check box -- an item that can be selected or
 deselected, and which displays its state to the user.
protected class
JCheckBox.AccessibleJCheckBox
This class implements accessibility support for the
JCheckBox
class.
class
JCheckBoxMenuItem
A menu item that can be selected or deselected.
protected class
JCheckBoxMenuItem.AccessibleJCheckBoxMenuItem
This class implements accessibility support for the
JCheckBoxMenuItem
class.
class
JColorChooser
JColorChooser
provides a pane of controls designed to allow
 a user to manipulate and select a color.
protected class
JColorChooser.AccessibleJColorChooser
This class implements accessibility support for the
JColorChooser
class.
class
JComboBox
<E>
A component that combines a button or editable field and a drop-down list.
protected class
JComboBox.AccessibleJComboBox
This class implements accessibility support for the
JComboBox
class.
class
JComponent
The base class for all Swing components except top-level containers.
class
JComponent.AccessibleJComponent
Inner class of JComponent used to provide default support for
 accessibility.
protected class
JComponent.AccessibleJComponent.AccessibleContainerHandler
Fire PropertyChange listener, if one is registered,
 when children added/removed.
protected class
JComponent.AccessibleJComponent.AccessibleFocusHandler
Deprecated.
This class is no longer used or needed.
class
JDesktopPane
A container used to create a multiple-document interface or a virtual desktop.
protected class
JDesktopPane.AccessibleJDesktopPane
This class implements accessibility support for the
JDesktopPane
class.
class
JDialog
The main class for creating a dialog window.
protected class
JDialog.AccessibleJDialog
This class implements accessibility support for the
JDialog
class.
class
JEditorPane
A text component to edit various kinds of content.
protected class
JEditorPane.AccessibleJEditorPane
This class implements accessibility support for the
JEditorPane
class.
protected class
JEditorPane.AccessibleJEditorPaneHTML
This class provides support for
AccessibleHypertext
,
 and is used in instances where the
EditorKit
installed in this
JEditorPane
is an instance of
HTMLEditorKit
.
protected class
JEditorPane.JEditorPaneAccessibleHypertextSupport
What's returned by
AccessibleJEditorPaneHTML.getAccessibleText
.
class
JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink
An HTML link.
class
JFileChooser
JFileChooser
provides a simple mechanism for the user to
 choose a file.
protected class
JFileChooser.AccessibleJFileChooser
This class implements accessibility support for the
JFileChooser
class.
class
JFormattedTextField
JFormattedTextField
extends
JTextField
adding
 support for formatting arbitrary values, as well as retrieving a particular
 object once the user has edited the text.
static class
JFormattedTextField.AbstractFormatter
Instances of
AbstractFormatter
are used by
JFormattedTextField
to handle the conversion both
 from an Object to a String, and back from a String to an Object.
static class
JFormattedTextField.AbstractFormatterFactory
Instances of
AbstractFormatterFactory
are used by
JFormattedTextField
to obtain instances of
AbstractFormatter
which in turn are used to format values.
class
JFrame
An extended version of
java.awt.Frame
that adds support for
 the JFC/Swing component architecture.
protected class
JFrame.AccessibleJFrame
This class implements accessibility support for the
JFrame
class.
class
JInternalFrame
A lightweight object that provides many of the features of
 a native frame, including dragging, closing, becoming an icon,
 resizing, title display, and support for a menu bar.
protected class
JInternalFrame.AccessibleJInternalFrame
This class implements accessibility support for the
JInternalFrame
class.
static class
JInternalFrame.JDesktopIcon
This component represents an iconified version of a
JInternalFrame
.
protected class
JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon
This class implements accessibility support for the
JInternalFrame.JDesktopIcon
class.
class
JLabel
A display area for a short text string or an image,
 or both.
protected class
JLabel.AccessibleJLabel
The class used to obtain the accessible role for this object.
final class
JLayer
<V extends
Component
>
JLayer
is a universal decorator for Swing components
 which enables you to implement various advanced painting effects as well as
 receive notifications of all
AWTEvent
s generated within its borders.
class
JLayeredPane
JLayeredPane
adds depth to a JFC/Swing container,
 allowing components to overlap each other when needed.
protected class
JLayeredPane.AccessibleJLayeredPane
This class implements accessibility support for the
JLayeredPane
class.
class
JList
<E>
A component that displays a list of objects and allows the user to select
 one or more items.
protected class
JList.AccessibleJList
This class implements accessibility support for the
JList
class.
protected class
JList.AccessibleJList.AccessibleJListChild
This class implements accessibility support appropriate
 for list children.
static final class
JList.DropLocation
A subclass of
TransferHandler.DropLocation
representing
 a drop location for a
JList
.
class
JMenu
An implementation of a menu -- a popup window containing
JMenuItem
s that
 is displayed when the user selects an item on the
JMenuBar
.
protected class
JMenu.AccessibleJMenu
This class implements accessibility support for the
JMenu
class.
protected class
JMenu.WinListener
A listener class that watches for a popup window closing.
class
JMenuBar
An implementation of a menu bar.
protected class
JMenuBar.AccessibleJMenuBar
This class implements accessibility support for the
JMenuBar
class.
class
JMenuItem
An implementation of an item in a menu.
protected class
JMenuItem.AccessibleJMenuItem
This class implements accessibility support for the
JMenuItem
class.
class
JOptionPane
JOptionPane
makes it easy to pop up a standard dialog box that
 prompts users for a value or informs them of something.
protected class
JOptionPane.AccessibleJOptionPane
This class implements accessibility support for the
JOptionPane
class.
class
JPanel
JPanel
is a generic lightweight container.
protected class
JPanel.AccessibleJPanel
This class implements accessibility support for the
JPanel
class.
class
JPasswordField
JPasswordField
is a lightweight component that allows
 the editing of a single line of text where the view indicates
 something was typed, but does not show the original characters.
protected class
JPasswordField.AccessibleJPasswordField
This class implements accessibility support for the
JPasswordField
class.
class
JPopupMenu
An implementation of a popup menu -- a small window that pops up
 and displays a series of choices.
protected class
JPopupMenu.AccessibleJPopupMenu
This class implements accessibility support for the
JPopupMenu
class.
static class
JPopupMenu.Separator
A popup menu-specific separator.
class
JProgressBar
A component that visually displays the progress of some task.
protected class
JProgressBar.AccessibleJProgressBar
This class implements accessibility support for the
JProgressBar
class.
class
JRadioButton
An implementation of a radio button -- an item that can be selected or
 deselected, and which displays its state to the user.
protected class
JRadioButton.AccessibleJRadioButton
This class implements accessibility support for the
JRadioButton
class.
class
JRadioButtonMenuItem
An implementation of a radio button menu item.
protected class
JRadioButtonMenuItem.AccessibleJRadioButtonMenuItem
This class implements accessibility support for the
JRadioButtonMenuItem
class.
class
JRootPane
A lightweight container used behind the scenes by
JFrame
,
JDialog
,
JWindow
,
JApplet
, and
JInternalFrame
.
protected class
JRootPane.AccessibleJRootPane
This class implements accessibility support for the
JRootPane
class.
protected class
JRootPane.RootLayout
A custom layout manager that is responsible for the layout of
 layeredPane, glassPane, and menuBar.
class
JScrollBar
An implementation of a scrollbar.
protected class
JScrollBar.AccessibleJScrollBar
This class implements accessibility support for the
JScrollBar
class.
class
JScrollPane
Provides a scrollable view of a lightweight component.
protected class
JScrollPane.AccessibleJScrollPane
This class implements accessibility support for the
JScrollPane
class.
protected class
JScrollPane.ScrollBar
By default
JScrollPane
creates scrollbars
 that are instances
 of this class.
class
JSeparator
JSeparator
provides a general purpose component for
 implementing divider lines - most commonly used as a divider
 between menu items that breaks them up into logical groupings.
protected class
JSeparator.AccessibleJSeparator
This class implements accessibility support for the
JSeparator
class.
class
JSlider
A component that lets the user graphically select a value by sliding
 a knob within a bounded interval.
protected class
JSlider.AccessibleJSlider
This class implements accessibility support for the
JSlider
class.
class
JSpinner
A single line input field that lets the user select a
 number or an object value from an ordered sequence.
protected class
JSpinner.AccessibleJSpinner
AccessibleJSpinner
implements accessibility
 support for the
JSpinner
class.
static class
JSpinner.DateEditor
An editor for a
JSpinner
whose model is a
SpinnerDateModel
.
static class
JSpinner.DefaultEditor
A simple base class for more specialized editors
 that displays a read-only view of the model's current
 value with a
JFormattedTextField
.
static class
JSpinner.ListEditor
An editor for a
JSpinner
whose model is a
SpinnerListModel
.
static class
JSpinner.NumberEditor
An editor for a
JSpinner
whose model is a
SpinnerNumberModel
.
class
JSplitPane
JSplitPane
is used to divide two (and only two)
Component
s.
protected class
JSplitPane.AccessibleJSplitPane
This class implements accessibility support for the
JSplitPane
class.
class
JTabbedPane
A component that lets the user switch between a group of components by
 clicking on a tab with a given title and/or icon.
protected class
JTabbedPane.AccessibleJTabbedPane
This class implements accessibility support for the
JTabbedPane
class.
protected class
JTabbedPane.ModelListener
We pass
ModelChanged
events along to the listeners with
 the tabbedpane (instead of the model itself) as the event source.
class
JTable
The
JTable
is used to display and edit regular two-dimensional tables
 of cells.
protected class
JTable.AccessibleJTable
This class implements accessibility support for the
JTable
class.
protected class
JTable.AccessibleJTable.AccessibleJTableCell
The class provides an implementation of the Java Accessibility
 API appropriate to table cells.
protected class
JTable.AccessibleJTable.AccessibleJTableModelChange
Describes a change in the accessible table model.
static final class
JTable.DropLocation
A subclass of
TransferHandler.DropLocation
representing
 a drop location for a
JTable
.
class
JTextArea
A
JTextArea
is a multi-line area that displays plain text.
protected class
JTextArea.AccessibleJTextArea
This class implements accessibility support for the
JTextArea
class.
class
JTextField
JTextField
is a lightweight component that allows the editing
 of a single line of text.
protected class
JTextField.AccessibleJTextField
This class implements accessibility support for the
JTextField
class.
class
JTextPane
A text component that can be marked up with attributes that are
 represented graphically.
class
JToggleButton
An implementation of a two-state button.
protected class
JToggleButton.AccessibleJToggleButton
This class implements accessibility support for the
JToggleButton
class.
static class
JToggleButton.ToggleButtonModel
The ToggleButton model
class
JToolBar
JToolBar
provides a component that is useful for
 displaying commonly used
Action
s or controls.
protected class
JToolBar.AccessibleJToolBar
This class implements accessibility support for the
JToolBar
class.
static class
JToolBar.Separator
A toolbar-specific separator.
class
JToolTip
Used to display a "Tip" for a Component.
protected class
JToolTip.AccessibleJToolTip
This class implements accessibility support for the
JToolTip
class.
class
JTree
A control that displays a set of hierarchical data as an outline.
protected class
JTree.AccessibleJTree
This class implements accessibility support for the
JTree
class.
protected class
JTree.AccessibleJTree.AccessibleJTreeNode
This class implements accessibility support for the
JTree
child.
static final class
JTree.DropLocation
A subclass of
TransferHandler.DropLocation
representing
 a drop location for a
JTree
.
static class
JTree.DynamicUtilTreeNode
DynamicUtilTreeNode
can wrap
 vectors/hashtables/arrays/strings and
 create the appropriate children tree nodes as necessary.
protected static class
JTree.EmptySelectionModel
EmptySelectionModel
is a
TreeSelectionModel
that does not allow anything to be selected.
protected class
JTree.TreeModelHandler
Listens to the model and updates the
expandedState
accordingly when nodes are removed, or changed.
protected class
JTree.TreeSelectionRedirector
Handles creating a new
TreeSelectionEvent
with the
JTree
as the
 source and passing it off to all the listeners.
class
JViewport
The "viewport" or "porthole" through which you see the underlying
 information.
protected class
JViewport.AccessibleJViewport
This class implements accessibility support for the
JViewport
class.
protected class
JViewport.ViewListener
A listener for the view.
class
JWindow
A
JWindow
is a container that can be displayed anywhere on the
 user's desktop.
protected class
JWindow.AccessibleJWindow
This class implements accessibility support for the
JWindow
class.
class
KeyStroke
A KeyStroke represents a key action on the keyboard, or equivalent input
 device.
class
LayoutFocusTraversalPolicy
A SortingFocusTraversalPolicy which sorts Components based on their size,
 position, and orientation.
class
LayoutStyle
LayoutStyle
provides information about how to position
 components.
class
LookAndFeel
LookAndFeel
, as the name implies, encapsulates a look and
 feel.
class
MenuSelectionManager
A MenuSelectionManager owns the selection in menu hierarchy.
class
OverlayLayout
A layout manager to arrange components over the top
 of each other.
class
Popup
Popups are used to display a
Component
to the user, typically
 on top of all the other
Component
s in a particular containment
 hierarchy.
class
PopupFactory
PopupFactory
, as the name implies, is used to obtain
 instances of
Popup
s.
class
ProgressMonitor
A class to monitor the progress of some operation.
protected class
ProgressMonitor.AccessibleProgressMonitor
AccessibleProgressMonitor
implements accessibility
 support for the
ProgressMonitor
class.
class
ProgressMonitorInputStream
Monitors the progress of reading from some InputStream.
class
RepaintManager
This class manages repaint requests, allowing the number
 of repaints to be minimized, for example by collapsing multiple
 requests into a single repaint for members of a component tree.
class
RowFilter
<M,
I>
RowFilter
is used to filter out entries from the
 model so that they are not shown in the view.
static class
RowFilter.Entry
<M,
I>
An
Entry
object is passed to instances of
RowFilter
, allowing the filter to get the value of the
 entry's data, and thus to determine whether the entry should be shown.
class
RowSorter
<M>
RowSorter
provides the basis for sorting and filtering.
static class
RowSorter.SortKey
SortKey describes the sort order for a particular column.
class
ScrollPaneLayout
The layout manager used by
JScrollPane
.
static class
ScrollPaneLayout.UIResource
The UI resource version of
ScrollPaneLayout
.
class
SizeRequirements
For the convenience of layout managers,
 calculates information about the size and position of components.
class
SizeSequence
A
SizeSequence
object
 efficiently maintains an ordered list
 of sizes and corresponding positions.
class
SortingFocusTraversalPolicy
A FocusTraversalPolicy that determines traversal order by sorting the
 Components of a focus traversal cycle based on a given Comparator.
class
SpinnerDateModel
A
SpinnerModel
for sequences of
Date
s.
class
SpinnerListModel
A simple implementation of
SpinnerModel
whose
 values are defined by an array or a
List
.
class
SpinnerNumberModel
A
SpinnerModel
for sequences of numbers.
class
Spring
An instance of the
Spring
class holds three properties that
  characterize its behavior: the
minimum
,
preferred
, and
maximum
values.
class
SpringLayout
A
SpringLayout
lays out the children of its associated container
 according to a set of constraints.
static class
SpringLayout.Constraints
A
Constraints
object holds the
 constraints that govern the way a component's size and position
 change in a container controlled by a
SpringLayout
.
class
SwingUtilities
A collection of utility methods for Swing.
class
SwingWorker
<T,
V>
An abstract class to perform lengthy GUI-interaction tasks in a
 background thread.
class
Timer
Fires one or more
ActionEvent
s at specified
 intervals.
final class
ToolTipManager
Manages all the
ToolTips
in the system.
protected class
ToolTipManager.insideTimerAction
Inside timer action.
protected class
ToolTipManager.outsideTimerAction
Outside timer action.
protected class
ToolTipManager.stillInsideTimerAction
Still inside timer action.
class
TransferHandler
This class is used to handle the transfer of a
Transferable
to and from Swing components.
static class
TransferHandler.DropLocation
Represents a location where dropped data should be inserted.
static final class
TransferHandler.TransferSupport
This class encapsulates all relevant details of a clipboard
 or drag and drop transfer, and also allows for customizing
 aspects of the drag and drop experience.
class
UIDefaults
A table of defaults for Swing components.
static class
UIDefaults.LazyInputMap
LazyInputMap
will create a
InputMap
in its
createValue
method.
static class
UIDefaults.ProxyLazyValue
This class provides an implementation of
LazyValue
which can be
 used to delay loading of the Class for the instance to be created.
class
UIManager
UIManager
manages the current look and feel, the set of
 available look and feels,
PropertyChangeListeners
that
 are notified when the look and feel changes, look and feel defaults, and
 convenience methods for obtaining various default values.
static class
UIManager.LookAndFeelInfo
Provides a little information about an installed
LookAndFeel
for the sake of configuring a menu or
 for initial application set up.
class
UnsupportedLookAndFeelException
An exception that indicates the requested look & feel
 management classes are not present on the user's system.
class
ViewportLayout
The default layout manager for
JViewport
.
Fields in
javax.swing
declared as
Object
Modifier and Type
Field
Description
protected
Object
JTree.DynamicUtilTreeNode.
childValue
Value to create children with.
protected
Object
JOptionPane.
initialSelectionValue
Initial value to select in
selectionValues
.
protected
Object
JOptionPane.
initialValue
Value that should be initially selected in
options
.
protected
Object
JOptionPane.
inputValue
Value the user has input.
protected
Object
JOptionPane.
message
Message to display.
protected
Object
[]
JOptionPane.
options
Options to display to the user.
protected
Object
JComboBox.
selectedItemReminder
This protected field is implementation specific.
protected
Object
[]
JOptionPane.
selectionValues
Array of values the user can choose from.
static final
Object
JOptionPane.
UNINITIALIZED_VALUE
Indicates that the user has not yet selected a value.
protected
Object
DefaultCellEditor.EditorDelegate.
value
The value of this cell.
protected
Object
JOptionPane.
value
Currently selected value, will be a valid option, or
UNINITIALIZED_VALUE
or
null
.
Fields in
javax.swing
with type parameters of type
Object
Modifier and Type
Field
Description
protected
Hashtable
<
Object
,
Object
>
JTable.
defaultEditorsByColumnClass
A table of objects that display and edit the contents of a cell,
 indexed by class as declared in
getColumnClass
in the
TableModel
interface.
protected
Hashtable
<
Object
,
Object
>
JTable.
defaultEditorsByColumnClass
A table of objects that display and edit the contents of a cell,
 indexed by class as declared in
getColumnClass
in the
TableModel
interface.
protected
Hashtable
<
Object
,
Object
>
JTable.
defaultRenderersByColumnClass
A table of objects that display the contents of a cell,
 indexed by class as declared in
getColumnClass
in the
TableModel
interface.
protected
Hashtable
<
Object
,
Object
>
JTable.
defaultRenderersByColumnClass
A table of objects that display the contents of a cell,
 indexed by class as declared in
getColumnClass
in the
TableModel
interface.
Methods in
javax.swing
that return
Object
Modifier and Type
Method
Description
Object
[]
ActionMap.
allKeys
()
Returns an array of the keys defined in this
ActionMap
and
 its parent.
protected
Object
AbstractAction.
clone
()
Clones the abstract action.
Object
DefaultListSelectionModel.
clone
()
Returns a clone of this selection model with the same selection.
protected
Object
JFormattedTextField.AbstractFormatter.
clone
()
Clones the
AbstractFormatter
.
Object
UIDefaults.ActiveValue.
createValue
(
UIDefaults
table)
Creates the value retrieved from the
UIDefaults
table.
Object
UIDefaults.LazyInputMap.
createValue
(
UIDefaults
table)
Creates an
InputMap
with the bindings that are
 passed in.
Object
UIDefaults.LazyValue.
createValue
(
UIDefaults
table)
Creates the actual value retrieved from the
UIDefaults
table.
Object
UIDefaults.ProxyLazyValue.
createValue
(
UIDefaults
table)
Creates the value retrieved from the
UIDefaults
table.
Object
InputMap.
get
(
KeyStroke
keyStroke)
Returns the binding for
keyStroke
, messaging the
 parent
InputMap
if the binding is not locally defined.
Object
UIDefaults.
get
(
Object
key)
Returns the value for key.
Object
UIDefaults.
get
(
Object
key,
Locale
l)
Returns the value for key associated with the given locale.
static
Object
UIManager.
get
(
Object
key)
Returns an object from the defaults.
static
Object
UIManager.
get
(
Object
key,
Locale
l)
Returns an object from the defaults that is appropriate for
 the given locale.
Object
JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink.
getAccessibleActionAnchor
(int i)
Return an object that represents the link anchor,
 as appropriate for that link.
Object
JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink.
getAccessibleActionObject
(int i)
Returns a URL object that represents the link.
Object
CellEditor.
getCellEditorValue
()
Returns the value contained in the editor.
Object
DefaultCellEditor.EditorDelegate.
getCellEditorValue
()
Returns the value of this cell.
Object
DefaultCellEditor.
getCellEditorValue
()
Forwards the message from the
CellEditor
to
 the
delegate
.
final
Object
JComponent.
getClientProperty
(
Object
key)
Returns the value of the property with the specified key.
static
Object
LookAndFeel.
getDesktopPropertyValue
(
String
systemPropertyName,
Object
fallbackValue)
Returns the value of the specified system desktop property by
 invoking
Toolkit.getDefaultToolkit().getDesktopProperty()
.
Object
JOptionPane.
getInitialSelectionValue
()
Returns the input value that is displayed as initially selected to the user.
Object
JOptionPane.
getInitialValue
()
Returns the initial value.
Object
JOptionPane.
getInputValue
()
Returns the value the user has input, if
wantsInput
is true.
Object
ComboBoxEditor.
getItem
()
Returns the edited item
Object
[]
AbstractAction.
getKeys
()
Returns an array of
Object
s which are keys for
 which values have been set for this
AbstractAction
,
 or
null
if no keys have values set.
Object
JTree.
getLastSelectedPathComponent
()
Returns the last path component of the selected path.
Object
JOptionPane.
getMessage
()
Returns the message-object this pane displays.
Object
JSpinner.
getNextValue
()
Returns the object in the sequence that comes after the object returned
 by
getValue()
.
Object
SpinnerDateModel.
getNextValue
()
Returns the next
Date
in the sequence, or
null
if
 the next date is after
end
.
Object
SpinnerListModel.
getNextValue
()
Returns the next legal value of the underlying sequence or
null
if value is already the last element.
Object
SpinnerModel.
getNextValue
()
Return the object in the sequence that comes after the object returned
 by
getValue()
.
Object
SpinnerNumberModel.
getNextValue
()
Returns the next number in the sequence.
Object
[]
JOptionPane.
getOptions
()
Returns the choices the user can make.
Object
JSpinner.
getPreviousValue
()
Returns the object in the sequence that comes
 before the object returned by
getValue()
.
Object
SpinnerDateModel.
getPreviousValue
()
Returns the previous
Date
in the sequence, or
null
if the previous date is before
start
.
Object
SpinnerListModel.
getPreviousValue
()
Returns the previous element of the underlying sequence or
null
if value is already the first element.
Object
SpinnerModel.
getPreviousValue
()
Return the object in the sequence that comes before the object returned
 by
getValue()
.
Object
SpinnerNumberModel.
getPreviousValue
()
Returns the previous number in the sequence.
Object
ComboBoxModel.
getSelectedItem
()
Returns the selected item
Object
DefaultComboBoxModel.
getSelectedItem
()
Object
JComboBox.
getSelectedItem
()
Returns the current selected item.
Object
[]
AbstractButton.
getSelectedObjects
()
Returns an array (length 1) containing the label or
null
if the button is not selected.
Object
[]
DefaultButtonModel.
getSelectedObjects
()
Overridden to return
null
.
Object
[]
JCheckBoxMenuItem.
getSelectedObjects
()
Returns an array (length 1) containing the check box menu item
 label or null if the check box is not selected.
Object
[]
JComboBox.
getSelectedObjects
()
Returns an array containing the selected item.
Object
[]
JList.
getSelectedValues
()
Deprecated.
As of JDK 1.7, replaced by
JList.getSelectedValuesList()
Object
[]
JOptionPane.
getSelectionValues
()
Returns the input selection values.
Object
AbstractAction.
getValue
(
String
key)
Gets the
Object
associated with the specified key.
Object
Action.
getValue
(
String
key)
Gets one of this object's properties
 using the associated key.
Object
JFormattedTextField.
getValue
()
Returns the last valid value.
Object
JOptionPane.
getValue
()
Returns the value the user has selected.
Object
JSpinner.
getValue
()
Returns the current value of the model, typically
 this value is displayed by the
editor
.
abstract
Object
RowFilter.Entry.
getValue
(int index)
Returns the value at the specified index.
Object
SpinnerDateModel.
getValue
()
Returns the current element in this sequence of
Date
s.
Object
SpinnerListModel.
getValue
()
Returns the current element of the sequence.
Object
SpinnerModel.
getValue
()
The
current element
of the sequence.
Object
SpinnerNumberModel.
getValue
()
Returns the value of the current element of the sequence.
abstract
Object
DefaultRowSorter.ModelWrapper.
getValueAt
(int row,
 int column)
Returns the value at the specified index.
Object
JTable.
getValueAt
(int row,
 int column)
Returns the cell value at
row
and
column
.
Object
[]
ActionMap.
keys
()
Returns the
Action
names that are bound in this
ActionMap
.
static
Object
LookAndFeel.
makeIcon
(
Class
<?> baseClass,
String
gifFile)
Creates and returns a
UIDefault.LazyValue
that loads an
 image.
Object
UIDefaults.
put
(
Object
key,
Object
value)
Sets the value of
key
to
value
for all locales.
static
Object
UIManager.
put
(
Object
key,
Object
value)
Stores an object in the developer defaults.
static
Object
JOptionPane.
showInputDialog
(
Component
parentComponent,
Object
message,
String
title,
 int messageType,
Icon
icon,
Object
[] selectionValues,
Object
initialSelectionValue)
Prompts the user for input in a blocking dialog where the
 initial selection, possible selections, and all other options can
 be specified.
static
Object
JOptionPane.
showInternalInputDialog
(
Component
parentComponent,
Object
message,
String
title,
 int messageType,
Icon
icon,
Object
[] selectionValues,
Object
initialSelectionValue)
Prompts the user for input in a blocking internal dialog where
 the initial selection, possible selections, and all other
 options can be specified.
abstract
Object
JFormattedTextField.AbstractFormatter.
stringToValue
(
String
text)
Parses
text
returning an arbitrary Object.
Object
[]
DefaultListModel.
toArray
()
Returns an array containing all of the elements in this list in the
 correct order.
Methods in
javax.swing
with parameters of type
Object
Modifier and Type
Method
Description
default boolean
Action.
accept
(
Object
sender)
Determines whether the action should be performed with the specified
 sender object.
void
JTabbedPane.
add
(
Component
component,
Object
constraints)
Adds a
component
to the tabbed pane.
void
JTabbedPane.
add
(
Component
component,
Object
constraints,
 int index)
Adds a
component
at the specified tab index.
protected void
AbstractButton.
addImpl
(
Component
comp,
Object
constraints,
 int index)
Adds the specified component to this container at the specified
 index, refer to
Container.addImpl(Component, Object, int)
for a complete description of this method.
protected void
CellRendererPane.
addImpl
(
Component
x,
Object
constraints,
 int index)
If the specified component is already a child of this then we don't
 bother doing anything - stacking order doesn't matter for cell
 renderer components (CellRendererPane doesn't paint anyway).
protected void
JApplet.
addImpl
(
Component
comp,
Object
constraints,
 int index)
Deprecated, for removal: This API element is subject to removal in a future version.
Adds the specified child
Component
.
protected void
JDesktopPane.
addImpl
(
Component
comp,
Object
constraints,
 int index)
Adds the specified component to this container at the specified
 index.
protected void
JDialog.
addImpl
(
Component
comp,
Object
constraints,
 int index)
Adds the specified child
Component
.
protected void
JFrame.
addImpl
(
Component
comp,
Object
constraints,
 int index)
Adds the specified child
Component
.
protected void
JInternalFrame.
addImpl
(
Component
comp,
Object
constraints,
 int index)
Adds the specified child
Component
.
protected void
JLayer.
addImpl
(
Component
comp,
Object
constraints,
 int index)
This method is not supported by
JLayer
and always throws
UnsupportedOperationException
protected void
JRootPane.
addImpl
(
Component
comp,
Object
constraints,
 int index)
Overridden to enforce the position of the glass component as
 the zero child.
protected void
JSplitPane.
addImpl
(
Component
comp,
Object
constraints,
 int index)
Adds the specified component to this split pane.
protected void
JToolBar.
addImpl
(
Component
comp,
Object
constraints,
 int index)
If a
JButton
is being added, it is initially
 set to be disabled.
protected void
JViewport.
addImpl
(
Component
child,
Object
constraints,
 int index)
Sets the
JViewport
's one lightweight child,
 which can be
null
.
protected void
JWindow.
addImpl
(
Component
comp,
Object
constraints,
 int index)
Adds the specified child
Component
.
void
BoxLayout.
addLayoutComponent
(
Component
comp,
Object
constraints)
Not used by this class.
void
GroupLayout.
addLayoutComponent
(
Component
component,
Object
constraints)
Notification that a
Component
has been added to
 the parent container.
void
JRootPane.RootLayout.
addLayoutComponent
(
Component
comp,
Object
constraints)
void
OverlayLayout.
addLayoutComponent
(
Component
comp,
Object
constraints)
Adds the specified component to the layout, using the specified
 constraint object.
void
SpringLayout.
addLayoutComponent
(
Component
component,
Object
constraints)
If
constraints
is an instance of
SpringLayout.Constraints
,
 associates the constraints with the specified component.
void
JComboBox.
configureEditor
(
ComboBoxEditor
anEditor,
Object
anItem)
Initializes the editor with the specified item.
boolean
DefaultListModel.
contains
(
Object
elem)
Tests whether the specified object is a component in this list.
String
JTree.
convertValueToText
(
Object
value,
 boolean selected,
 boolean expanded,
 boolean leaf,
 int row,
 boolean hasFocus)
Called by the renderers to convert the specified value to
 text.
void
DefaultListModel.
copyInto
(
Object
[] anArray)
Copies the components of this list into the specified array.
static void
JTree.DynamicUtilTreeNode.
createChildren
(
DefaultMutableTreeNode
parent,
Object
children)
Adds to parent all the children in
children
.
protected static
TreeModel
JTree.
createTreeModel
(
Object
value)
Returns a
TreeModel
wrapping the specified object.
boolean
RowSorter.SortKey.
equals
(
Object
o)
Returns true if this object equals the specified object.
protected void
AbstractListModel.
fireContentsChanged
(
Object
source,
 int index0,
 int index1)
AbstractListModel
subclasses must call this method
after
one or more elements of the list change.
protected void
AbstractListModel.
fireIntervalAdded
(
Object
source,
 int index0,
 int index1)
AbstractListModel
subclasses must call this method
after
one or more elements are added to the model.
protected void
AbstractListModel.
fireIntervalRemoved
(
Object
source,
 int index0,
 int index1)
AbstractListModel
subclasses must call this method
after
one or more elements are removed from the model.
protected void
AbstractAction.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Supports reporting bound property changes.
protected void
DefaultListCellRenderer.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Overridden for performance reasons.
protected void
JViewport.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Notifies listeners of a property change.
final void
SwingWorker.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Reports a bound property update to any registered listeners.
protected void
UIDefaults.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Support for reporting bound property changes.
protected void
JComponent.
fireVetoableChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Supports reporting constrained property changes.
Action
ActionMap.
get
(
Object
key)
Returns the binding for
key
, messaging the
 parent
ActionMap
if the binding is not locally defined.
Object
UIDefaults.
get
(
Object
key)
Returns the value for key.
Object
UIDefaults.
get
(
Object
key,
Locale
l)
Returns the value for key associated with the given locale.
static
Object
UIManager.
get
(
Object
key)
Returns an object from the defaults.
static
Object
UIManager.
get
(
Object
key,
Locale
l)
Returns an object from the defaults that is appropriate for
 the given locale.
boolean
UIDefaults.
getBoolean
(
Object
key)
If the value of
key
is boolean, return the
 boolean value, otherwise return false.
boolean
UIDefaults.
getBoolean
(
Object
key,
Locale
l)
If the value of
key
for the given
Locale
is boolean, return the boolean value, otherwise return false.
static boolean
UIManager.
getBoolean
(
Object
key)
Returns a boolean from the defaults which is associated with
 the key value.
static boolean
UIManager.
getBoolean
(
Object
key,
Locale
l)
Returns a boolean from the defaults which is associated with
 the key value and the given
Locale
.
Border
UIDefaults.
getBorder
(
Object
key)
If the value of
key
is a
Border
return it,
 otherwise return
null
.
Border
UIDefaults.
getBorder
(
Object
key,
Locale
l)
If the value of
key
for the given
Locale
is a
Border
return it, otherwise return
null
.
static
Border
UIManager.
getBorder
(
Object
key)
Returns a border from the defaults.
static
Border
UIManager.
getBorder
(
Object
key,
Locale
l)
Returns a border from the defaults that is appropriate
 for the given locale.
final
Object
JComponent.
getClientProperty
(
Object
key)
Returns the value of the property with the specified key.
Color
UIDefaults.
getColor
(
Object
key)
If the value of
key
is a
Color
return it,
 otherwise return
null
.
Color
UIDefaults.
getColor
(
Object
key,
Locale
l)
If the value of
key
for the given
Locale
is a
Color
return it, otherwise return
null
.
static
Color
UIManager.
getColor
(
Object
key)
Returns a color from the defaults.
static
Color
UIManager.
getColor
(
Object
key,
Locale
l)
Returns a color from the defaults that is appropriate
 for the given locale.
TableColumn
JTable.
getColumn
(
Object
identifier)
Returns the
TableColumn
object for the column in the table
 whose identifier is equal to
identifier
, when compared using
equals
.
static
Object
LookAndFeel.
getDesktopPropertyValue
(
String
systemPropertyName,
Object
fallbackValue)
Returns the value of the specified system desktop property by
 invoking
Toolkit.getDefaultToolkit().getDesktopProperty()
.
Dimension
UIDefaults.
getDimension
(
Object
key)
If the value of
key
is a
Dimension
return it,
 otherwise return
null
.
Dimension
UIDefaults.
getDimension
(
Object
key,
Locale
l)
If the value of
key
for the given
Locale
is a
Dimension
return it, otherwise return
null
.
static
Dimension
UIManager.
getDimension
(
Object
key)
Returns a dimension from the defaults.
static
Dimension
UIManager.
getDimension
(
Object
key,
Locale
l)
Returns a dimension from the defaults that is appropriate
 for the given locale.
Font
UIDefaults.
getFont
(
Object
key)
If the value of
key
is a
Font
return it,
 otherwise return
null
.
Font
UIDefaults.
getFont
(
Object
key,
Locale
l)
If the value of
key
for the given
Locale
is a
Font
return it, otherwise return
null
.
static
Font
UIManager.
getFont
(
Object
key)
Returns a font from the defaults.
static
Font
UIManager.
getFont
(
Object
key,
Locale
l)
Returns a font from the defaults that is appropriate
 for the given locale.
Icon
UIDefaults.
getIcon
(
Object
key)
If the value of
key
is an
Icon
return it,
 otherwise return
null
.
Icon
UIDefaults.
getIcon
(
Object
key,
Locale
l)
If the value of
key
for the given
Locale
is an
Icon
return it, otherwise return
null
.
static
Icon
UIManager.
getIcon
(
Object
key)
Returns an
Icon
from the defaults.
static
Icon
UIManager.
getIcon
(
Object
key,
Locale
l)
Returns an
Icon
from the defaults that is appropriate
 for the given locale.
int
DefaultComboBoxModel.
getIndexOf
(
Object
anObject)
Returns the index-position of the specified object in the list.
Insets
UIDefaults.
getInsets
(
Object
key)
If the value of
key
is an
Insets
return it,
 otherwise return
null
.
Insets
UIDefaults.
getInsets
(
Object
key,
Locale
l)
If the value of
key
for the given
Locale
is an
Insets
return it, otherwise return
null
.
static
Insets
UIManager.
getInsets
(
Object
key)
Returns an
Insets
object from the defaults.
static
Insets
UIManager.
getInsets
(
Object
key,
Locale
l)
Returns an
Insets
object from the defaults that is
 appropriate for the given locale.
int
UIDefaults.
getInt
(
Object
key)
If the value of
key
is an
Integer
return its
 integer value, otherwise return 0.
int
UIDefaults.
getInt
(
Object
key,
Locale
l)
If the value of
key
for the given
Locale
is an
Integer
return its integer value, otherwise return 0.
static int
UIManager.
getInt
(
Object
key)
Returns an integer from the defaults.
static int
UIManager.
getInt
(
Object
key,
Locale
l)
Returns an integer from the defaults that is appropriate
 for the given locale.
Component
DefaultListCellRenderer.
getListCellRendererComponent
(
JList
<?> list,
Object
value,
 int index,
 boolean isSelected,
 boolean cellHasFocus)
String
UIDefaults.
getString
(
Object
key)
If the value of
key
is a
String
return it,
 otherwise return
null
.
String
UIDefaults.
getString
(
Object
key,
Locale
l)
If the value of
key
for the given
Locale
is a
String
return it, otherwise return
null
.
static
String
UIManager.
getString
(
Object
key)
Returns a string from the defaults.
static
String
UIManager.
getString
(
Object
key,
Locale
l)
Returns a string from the defaults that is appropriate for the
 given locale.
Component
DefaultCellEditor.
getTableCellEditorComponent
(
JTable
table,
Object
value,
 boolean isSelected,
 int row,
 int column)
Implements the
TableCellEditor
interface.
Component
DefaultCellEditor.
getTreeCellEditorComponent
(
JTree
tree,
Object
value,
 boolean isSelected,
 boolean expanded,
 boolean leaf,
 int row)
Implements the
TreeCellEditor
interface.
int
DefaultListModel.
indexOf
(
Object
elem)
Searches for the first occurrence of
elem
.
int
DefaultListModel.
indexOf
(
Object
elem,
 int index)
Searches for the first occurrence of
elem
, beginning
 the search at
index
.
static void
LookAndFeel.
installProperty
(
JComponent
c,
String
propertyName,
Object
propertyValue)
Convenience method for installing a property with the specified name
 and value on a component if that property has not already been set
 by the developer.
int
DefaultListModel.
lastIndexOf
(
Object
elem)
Returns the index of the last occurrence of
elem
.
int
DefaultListModel.
lastIndexOf
(
Object
elem,
 int index)
Searches backwards for
elem
, starting from the
 specified index, and returns an index to it.
static void
LookAndFeel.
loadKeyBindings
(
InputMap
retMap,
Object
[] keys)
Populates an
InputMap
with the specified bindings.
static
ComponentInputMap
LookAndFeel.
makeComponentInputMap
(
JComponent
c,
Object
[] keys)
Creates a
ComponentInputMapUIResource
from
keys
.
static
InputMap
LookAndFeel.
makeInputMap
(
Object
[] keys)
Creates an
InputMapUIResource
from
keys
.
static
JTextComponent.KeyBinding
[]
LookAndFeel.
makeKeyBindings
(
Object
[] keyBindingList)
Convenience method for building an array of
KeyBindings
.
static boolean
SwingUtilities.
notifyAction
(
Action
action,
KeyStroke
ks,
KeyEvent
event,
Object
sender,
 int modifiers)
Invokes
actionPerformed
on
action
if
action
is non-
null
and accepts the sender object.
protected final void
SwingWorker.
publish
(
V
... chunks)
Sends data chunks to the
SwingWorker.process(java.util.List<V>)
method.
void
ActionMap.
put
(
Object
key,
Action
action)
Adds a binding for
key
to
action
.
void
ComponentInputMap.
put
(
KeyStroke
keyStroke,
Object
actionMapKey)
Adds a binding for
keyStroke
to
actionMapKey
.
void
InputMap.
put
(
KeyStroke
keyStroke,
Object
actionMapKey)
Adds a binding for
keyStroke
to
actionMapKey
.
Object
UIDefaults.
put
(
Object
key,
Object
value)
Sets the value of
key
to
value
for all locales.
static
Object
UIManager.
put
(
Object
key,
Object
value)
Stores an object in the developer defaults.
final void
JComponent.
putClientProperty
(
Object
key,
Object
value)
Adds an arbitrary key/value "client property" to this component.
void
UIDefaults.
putDefaults
(
Object
[] keyValueList)
Puts all of the key/value pairs in the database and
 unconditionally generates one
PropertyChangeEvent
.
void
AbstractAction.
putValue
(
String
key,
Object
newValue)
Sets the
Value
associated with the specified key.
void
Action.
putValue
(
String
key,
Object
value)
Sets one of this object's properties
 using the associated key.
void
JEditorPane.
read
(
InputStream
in,
Object
desc)
This method initializes from a stream.
void
ActionMap.
remove
(
Object
key)
Removes the binding for
key
from this
ActionMap
.
void
DefaultComboBoxModel.
removeElement
(
Object
anObject)
boolean
DefaultListModel.
removeElement
(
Object
obj)
Removes the first (lowest-indexed) occurrence of the argument
 from this list.
void
MutableComboBoxModel.
removeElement
(
Object
obj)
Removes an item from the model.
void
JComboBox.
removeItem
(
Object
anObject)
Removes an item from the item list.
void
JOptionPane.
setInitialSelectionValue
(
Object
newValue)
Sets the input value that is initially displayed as selected to the user.
void
JOptionPane.
setInitialValue
(
Object
newInitialValue)
Sets the initial value that is to be enabled -- the
Component
that has the focus when the pane is initially displayed.
void
JOptionPane.
setInputValue
(
Object
newValue)
Sets the input value that was selected or input by the user.
void
ComboBoxEditor.
setItem
(
Object
anObject)
Set the item that should be edited.
void
JList.
setListData
(
E
[] listData)
Constructs a read-only
ListModel
from an array of items,
 and calls
setModel
with this model.
void
JOptionPane.
setMessage
(
Object
newMessage)
Sets the option pane's message-object.
void
JOptionPane.
setOptions
(
Object
[] newOptions)
Sets the options this pane displays.
void
ComboBoxModel.
setSelectedItem
(
Object
anItem)
Set the selected item.
void
DefaultComboBoxModel.
setSelectedItem
(
Object
anObject)
Set the value of the selected item.
void
JComboBox.
setSelectedItem
(
Object
anObject)
Sets the selected item in the combo box display area to the object in
 the argument.
void
JList.
setSelectedValue
(
Object
anObject,
 boolean shouldScroll)
Selects the specified object from the list.
void
JOptionPane.
setSelectionValues
(
Object
[] newValues)
Sets the input selection values for a pane that provides the user
 with a list of items to choose from.
void
DefaultCellEditor.EditorDelegate.
setValue
(
Object
value)
Sets the value of this cell.
void
JFormattedTextField.
setValue
(
Object
value)
Sets the value that will be formatted by an
AbstractFormatter
obtained from the current
AbstractFormatterFactory
.
void
JOptionPane.
setValue
(
Object
newValue)
Sets the value the user has chosen.
void
JSpinner.
setValue
(
Object
value)
Changes current value of the model, typically
 this value is displayed by the
editor
.
void
Renderer.
setValue
(
Object
aValue,
 boolean isSelected)
Specifies the value to display and whether or not the
 value should be portrayed as "currently selected".
void
SpinnerDateModel.
setValue
(
Object
value)
Sets the current
Date
for this sequence.
void
SpinnerListModel.
setValue
(
Object
elt)
Changes the current element of the sequence and notifies
ChangeListeners
.
void
SpinnerModel.
setValue
(
Object
value)
Changes current value of the model, typically this value is displayed
 by the
editor
part of a
JSpinner
.
void
SpinnerNumberModel.
setValue
(
Object
value)
Sets the current value for this sequence.
void
JTable.
setValueAt
(
Object
aValue,
 int row,
 int column)
Sets the value for the cell in the table model at
row
and
column
.
static int
JOptionPane.
showConfirmDialog
(
Component
parentComponent,
Object
message)
Brings up a dialog with the options
Yes
,
No
and
Cancel
; with the
 title,
Select an Option
.
static int
JOptionPane.
showConfirmDialog
(
Component
parentComponent,
Object
message,
String
title,
 int optionType)
Brings up a dialog where the number of choices is determined
 by the
optionType
parameter.
static int
JOptionPane.
showConfirmDialog
(
Component
parentComponent,
Object
message,
String
title,
 int optionType,
 int messageType)
Brings up a dialog where the number of choices is determined
 by the
optionType
parameter, where the
messageType
parameter determines the icon to display.
static int
JOptionPane.
showConfirmDialog
(
Component
parentComponent,
Object
message,
String
title,
 int optionType,
 int messageType,
Icon
icon)
Brings up a dialog with a specified icon, where the number of
 choices is determined by the
optionType
parameter.
static
String
JOptionPane.
showInputDialog
(
Component
parentComponent,
Object
message)
Shows a question-message dialog requesting input from the user
 parented to
parentComponent
.
static
String
JOptionPane.
showInputDialog
(
Component
parentComponent,
Object
message,
Object
initialSelectionValue)
Shows a question-message dialog requesting input from the user and
 parented to
parentComponent
.
static
String
JOptionPane.
showInputDialog
(
Component
parentComponent,
Object
message,
String
title,
 int messageType)
Shows a dialog requesting input from the user parented to
parentComponent
with the dialog having the title
title
and message type
messageType
.
static
Object
JOptionPane.
showInputDialog
(
Component
parentComponent,
Object
message,
String
title,
 int messageType,
Icon
icon,
Object
[] selectionValues,
Object
initialSelectionValue)
Prompts the user for input in a blocking dialog where the
 initial selection, possible selections, and all other options can
 be specified.
static
String
JOptionPane.
showInputDialog
(
Object
message)
Shows a question-message dialog requesting input from the user.
static
String
JOptionPane.
showInputDialog
(
Object
message,
Object
initialSelectionValue)
Shows a question-message dialog requesting input from the user, with
 the input value initialized to
initialSelectionValue
.
static int
JOptionPane.
showInternalConfirmDialog
(
Component
parentComponent,
Object
message)
Brings up an internal dialog panel with the options
Yes
,
No
and
Cancel
; with the title,
Select an Option
.
static int
JOptionPane.
showInternalConfirmDialog
(
Component
parentComponent,
Object
message,
String
title,
 int optionType)
Brings up a internal dialog panel where the number of choices
 is determined by the
optionType
parameter.
static int
JOptionPane.
showInternalConfirmDialog
(
Component
parentComponent,
Object
message,
String
title,
 int optionType,
 int messageType)
Brings up an internal dialog panel where the number of choices
 is determined by the
optionType
parameter, where
 the
messageType
parameter determines the icon to display.
static int
JOptionPane.
showInternalConfirmDialog
(
Component
parentComponent,
Object
message,
String
title,
 int optionType,
 int messageType,
Icon
icon)
Brings up an internal dialog panel with a specified icon, where
 the number of choices is determined by the
optionType
parameter.
static
String
JOptionPane.
showInternalInputDialog
(
Component
parentComponent,
Object
message)
Shows an internal question-message dialog requesting input from
 the user parented to
parentComponent
.
static
String
JOptionPane.
showInternalInputDialog
(
Component
parentComponent,
Object
message,
String
title,
 int messageType)
Shows an internal dialog requesting input from the user parented
 to
parentComponent
with the dialog having the title
title
and message type
messageType
.
static
Object
JOptionPane.
showInternalInputDialog
(
Component
parentComponent,
Object
message,
String
title,
 int messageType,
Icon
icon,
Object
[] selectionValues,
Object
initialSelectionValue)
Prompts the user for input in a blocking internal dialog where
 the initial selection, possible selections, and all other
 options can be specified.
static void
JOptionPane.
showInternalMessageDialog
(
Component
parentComponent,
Object
message)
Brings up an internal confirmation dialog panel.
static void
JOptionPane.
showInternalMessageDialog
(
Component
parentComponent,
Object
message,
String
title,
 int messageType)
Brings up an internal dialog panel that displays a message
 using a default icon determined by the
messageType
parameter.
static void
JOptionPane.
showInternalMessageDialog
(
Component
parentComponent,
Object
message,
String
title,
 int messageType,
Icon
icon)
Brings up an internal dialog panel displaying a message,
 specifying all parameters.
static int
JOptionPane.
showInternalOptionDialog
(
Component
parentComponent,
Object
message,
String
title,
 int optionType,
 int messageType,
Icon
icon,
Object
[] options,
Object
initialValue)
Brings up an internal dialog panel with a specified icon, where
 the initial choice is determined by the
initialValue
parameter and the number of choices is determined by the
optionType
parameter.
static void
JOptionPane.
showMessageDialog
(
Component
parentComponent,
Object
message)
Brings up an information-message dialog titled "Message".
static void
JOptionPane.
showMessageDialog
(
Component
parentComponent,
Object
message,
String
title,
 int messageType)
Brings up a dialog that displays a message using a default
 icon determined by the
messageType
parameter.
static void
JOptionPane.
showMessageDialog
(
Component
parentComponent,
Object
message,
String
title,
 int messageType,
Icon
icon)
Brings up a dialog displaying a message, specifying all parameters.
static int
JOptionPane.
showOptionDialog
(
Component
parentComponent,
Object
message,
String
title,
 int optionType,
 int messageType,
Icon
icon,
Object
[] options,
Object
initialValue)
Brings up a dialog with a specified icon, where the initial
 choice is determined by the
initialValue
parameter and
 the number of choices is determined by the
optionType
parameter.
abstract
String
JFormattedTextField.AbstractFormatter.
valueToString
(
Object
value)
Returns the string value to display for
value
.
Constructors in
javax.swing
with parameters of type
Object
Modifier
Constructor
Description
DefaultComboBoxModel
(
E
[] items)
Constructs a DefaultComboBoxModel object initialized with
 an array of objects.
DynamicUtilTreeNode
(
Object
value,
Object
children)
Creates a node with the specified object as its value and
 with the specified children.
JComboBox
(
E
[] items)
Creates a
JComboBox
that contains the elements
 in the specified array.
JFormattedTextField
(
Object
value)
Creates a JFormattedTextField with the specified value.
JFormattedTextField
(
JFormattedTextField.AbstractFormatterFactory
factory,
Object
currentValue)
Creates a
JFormattedTextField
with the specified
AbstractFormatterFactory
and initial value.
JList
(
E
[] listData)
Constructs a
JList
that displays the elements in
 the specified array.
JOptionPane
(
Object
message)
Creates a instance of
JOptionPane
to display a
 message using the
 plain-message message type and the default options delivered by
 the UI.
JOptionPane
(
Object
message,
 int messageType)
Creates an instance of
JOptionPane
to display a message
 with the specified message type and the default options,
JOptionPane
(
Object
message,
 int messageType,
 int optionType)
Creates an instance of
JOptionPane
to display a message
 with the specified message type and options.
JOptionPane
(
Object
message,
 int messageType,
 int optionType,
Icon
icon)
Creates an instance of
JOptionPane
to display a message
 with the specified message type, options, and icon.
JOptionPane
(
Object
message,
 int messageType,
 int optionType,
Icon
icon,
Object
[] options)
Creates an instance of
JOptionPane
to display a message
 with the specified message type, icon, and options.
JOptionPane
(
Object
message,
 int messageType,
 int optionType,
Icon
icon,
Object
[] options,
Object
initialValue)
Creates an instance of
JOptionPane
to display a message
 with the specified message type, icon, and options, with the
 initially-selected option specified.
JTable
(
Object
[][] rowData,
Object
[] columnNames)
Constructs a
JTable
to display the values in the two dimensional array,
rowData
, with column names,
columnNames
.
JTree
(
Object
[] value)
Returns a
JTree
with each element of the
 specified array as the
 child of a new root node which is not displayed.
LazyInputMap
(
Object
[] bindings)
Constructs a
LazyInputMap
.
ProgressMonitor
(
Component
parentComponent,
Object
message,
String
note,
 int min,
 int max)
Constructs a graphic object that shows progress, typically by filling
 in a rectangular bar as the process nears completion.
ProgressMonitorInputStream
(
Component
parentComponent,
Object
message,
InputStream
in)
Constructs an object to monitor the progress of an input stream.
ProxyLazyValue
(
String
c,
Object
[] o)
Creates a
LazyValue
which will construct an instance
 when asked.
ProxyLazyValue
(
String
c,
String
m,
Object
[] o)
Creates a
LazyValue
which will construct an instance
 when asked.
SpinnerListModel
(
Object
[] values)
Constructs a
SpinnerModel
whose sequence of values
 is defined by the specified array.
UIDefaults
(
Object
[] keyValueList)
Creates a defaults table initialized with the specified
 key/value pairs.
Uses of
Object
in
javax.swing.border
Subclasses of
Object
in
javax.swing.border
Modifier and Type
Class
Description
class
AbstractBorder
A class that implements an empty border with no size.
class
BevelBorder
A class which implements a simple two-line bevel border.
class
CompoundBorder
A composite Border class used to compose two Border objects
 into a single border by nesting an inside Border object within
 the insets of an outside Border object.
class
EmptyBorder
A class which provides an empty, transparent border which
 takes up space but does no drawing.
class
EtchedBorder
A class which implements a simple etched border which can
 either be etched-in or etched-out.
class
LineBorder
A class which implements a line border of arbitrary thickness
 and of a single color.
class
MatteBorder
A class which provides a matte-like border of either a solid color
 or a tiled icon.
class
SoftBevelBorder
A class which implements a raised or lowered bevel with
 softened corners.
class
StrokeBorder
A class which implements a border of an arbitrary stroke.
class
TitledBorder
A class which implements an arbitrary border
 with the addition of a String title in a
 specified position and justification.
Uses of
Object
in
javax.swing.colorchooser
Subclasses of
Object
in
javax.swing.colorchooser
Modifier and Type
Class
Description
class
AbstractColorChooserPanel
This is the abstract superclass for color choosers.
class
ColorChooserComponentFactory
A class designed to produce preconfigured "accessory" objects to
 insert into color choosers.
class
DefaultColorSelectionModel
A generic implementation of
ColorSelectionModel
.
Uses of
Object
in
javax.swing.event
Subclasses of
Object
in
javax.swing.event
Modifier and Type
Class
Description
class
AncestorEvent
An event reported to a child component that originated from an
 ancestor in the component hierarchy.
class
CaretEvent
CaretEvent is used to notify interested parties that
 the text caret has changed in the event source.
class
ChangeEvent
ChangeEvent is used to notify interested parties that
 state has changed in the event source.
static final class
DocumentEvent.EventType
Enumeration for document event types
class
EventListenerList
A class that holds a list of EventListeners.
class
HyperlinkEvent
HyperlinkEvent is used to notify interested parties that
 something has happened with respect to a hypertext link.
static final class
HyperlinkEvent.EventType
Defines the ENTERED, EXITED, and ACTIVATED event types, along
 with their string representations, returned by toString().
class
InternalFrameAdapter
An abstract adapter class for receiving internal frame events.
class
InternalFrameEvent
An
AWTEvent
that adds support for
JInternalFrame
objects as the event source.
class
ListDataEvent
Defines an event that encapsulates changes to a list.
class
ListSelectionEvent
An event that characterizes a change in selection.
class
MenuDragMouseEvent
MenuDragMouseEvent is used to notify interested parties that
 the menu element has received a MouseEvent forwarded to it
 under drag conditions.
class
MenuEvent
MenuEvent is used to notify interested parties that
 the menu which is the event source has been posted,
 selected, or canceled.
class
MenuKeyEvent
MenuKeyEvent is used to notify interested parties that
 the menu element has received a KeyEvent forwarded to it
 in a menu tree.
class
MouseInputAdapter
An empty implementation of the
MouseInputListener
interface, provided
 as a convenience to simplify the task of creating listeners, by extending
 and implementing only the methods of interest.
class
PopupMenuEvent
PopupMenuEvent only contains the source of the event which is the JPopupMenu
 sending the event
class
RowSorterEvent
RowSorterEvent
provides notification of changes to
 a
RowSorter
.
final class
SwingPropertyChangeSupport
This subclass of
java.beans.PropertyChangeSupport
is almost
 identical in functionality.
class
TableColumnModelEvent
TableColumnModelEvent
is used to notify listeners that a table
 column model has changed, such as a column was added, removed, or
 moved.
class
TableModelEvent
TableModelEvent is used to notify listeners that a table model
 has changed.
class
TreeExpansionEvent
An event used to identify a single path in a tree.
class
TreeModelEvent
Encapsulates information describing changes to a tree model, and
 used to notify tree model listeners of the change.
class
TreeSelectionEvent
An event that characterizes a change in the current
 selection.
class
UndoableEditEvent
An event indicating that an operation which can be undone has occurred.
Fields in
javax.swing.event
declared as
Object
Modifier and Type
Field
Description
protected
Object
[]
TreeModelEvent.
children
Children that have been removed.
protected
Object
[]
EventListenerList.
listenerList
The list of ListenerType - Listener pairs
Methods in
javax.swing.event
that return
Object
Modifier and Type
Method
Description
Object
TreeSelectionEvent.
cloneWithSource
(
Object
newSource)
Returns a copy of the receiver, but with the source being newSource.
Object
[]
TreeModelEvent.
getChildren
()
Returns the objects that are children of the node identified by
getPath
at the locations specified by
getChildIndices
.
Object
[]
EventListenerList.
getListenerList
()
Passes back the event listener list as an array
 of ListenerType-listener pairs.
Object
[]
TreeModelEvent.
getPath
()
Convenience method to get the array of objects from the TreePath
 instance that this event wraps.
Methods in
javax.swing.event
with parameters of type
Object
Modifier and Type
Method
Description
Object
TreeSelectionEvent.
cloneWithSource
(
Object
newSource)
Returns a copy of the receiver, but with the source being newSource.
Constructors in
javax.swing.event
with parameters of type
Object
Modifier
Constructor
Description
CaretEvent
(
Object
source)
Creates a new CaretEvent object.
ChangeEvent
(
Object
source)
Constructs a ChangeEvent object.
HyperlinkEvent
(
Object
source,
HyperlinkEvent.EventType
type,
URL
u)
Creates a new object representing a hypertext link event.
HyperlinkEvent
(
Object
source,
HyperlinkEvent.EventType
type,
URL
u,
String
desc)
Creates a new object representing a hypertext link event.
HyperlinkEvent
(
Object
source,
HyperlinkEvent.EventType
type,
URL
u,
String
desc,
Element
sourceElement)
Creates a new object representing a hypertext link event.
HyperlinkEvent
(
Object
source,
HyperlinkEvent.EventType
type,
URL
u,
String
desc,
Element
sourceElement,
InputEvent
inputEvent)
Creates a new object representing a hypertext link event.
ListDataEvent
(
Object
source,
 int type,
 int index0,
 int index1)
Constructs a ListDataEvent object.
ListSelectionEvent
(
Object
source,
 int firstIndex,
 int lastIndex,
 boolean isAdjusting)
Represents a change in selection status between
firstIndex
and
lastIndex
, inclusive.
MenuEvent
(
Object
source)
Constructs a MenuEvent object.
PopupMenuEvent
(
Object
source)
Constructs a PopupMenuEvent object.
SwingPropertyChangeSupport
(
Object
sourceBean)
Constructs a SwingPropertyChangeSupport object.
SwingPropertyChangeSupport
(
Object
sourceBean,
 boolean notifyOnEDT)
Constructs a SwingPropertyChangeSupport object.
TreeExpansionEvent
(
Object
source,
TreePath
path)
Constructs a TreeExpansionEvent object.
TreeModelEvent
(
Object
source,
Object
[] path)
Used to create an event when the node structure has changed in some way,
 identifying the path to the root of a modified subtree as an array of
 Objects.
TreeModelEvent
(
Object
source,
Object
[] path,
 int[] childIndices,
Object
[] children)
Used to create an event when nodes have been changed, inserted, or
 removed, identifying the path to the parent of the modified items as
 an array of Objects.
TreeModelEvent
(
Object
source,
TreePath
path)
Used to create an event when the node structure has changed in some way,
 identifying the path to the root of the modified subtree as a TreePath
 object.
TreeModelEvent
(
Object
source,
TreePath
path,
 int[] childIndices,
Object
[] children)
Used to create an event when nodes have been changed, inserted, or
 removed, identifying the path to the parent of the modified items as
 a TreePath object.
TreeSelectionEvent
(
Object
source,
TreePath
[] paths,
 boolean[] areNew,
TreePath
oldLeadSelectionPath,
TreePath
newLeadSelectionPath)
Represents a change in the selection of a
TreeSelectionModel
.
TreeSelectionEvent
(
Object
source,
TreePath
path,
 boolean isNew,
TreePath
oldLeadSelectionPath,
TreePath
newLeadSelectionPath)
Represents a change in the selection of a
TreeSelectionModel
.
UndoableEditEvent
(
Object
source,
UndoableEdit
edit)
Constructs an UndoableEditEvent object.
Uses of
Object
in
javax.swing.filechooser
Subclasses of
Object
in
javax.swing.filechooser
Modifier and Type
Class
Description
class
FileFilter
FileFilter
is an abstract class used by
JFileChooser
for filtering the set of files shown to the user.
final class
FileNameExtensionFilter
An implementation of
FileFilter
that filters using a
 specified set of extensions.
class
FileSystemView
FileSystemView is JFileChooser's gateway to the
 file system.
class
FileView
FileView
defines an abstract class that can be implemented
 to provide the filechooser with UI information for a
File
.
Uses of
Object
in
javax.swing.plaf
Subclasses of
Object
in
javax.swing.plaf
Modifier and Type
Class
Description
class
ActionMapUIResource
A subclass of javax.swing.ActionMap that implements UIResource.
class
BorderUIResource
A Border wrapper class which implements UIResource.
static class
BorderUIResource.BevelBorderUIResource
A bevel border UI resource.
static class
BorderUIResource.CompoundBorderUIResource
A compound border UI resource.
static class
BorderUIResource.EmptyBorderUIResource
An empty border UI resource.
static class
BorderUIResource.EtchedBorderUIResource
An etched border UI resource.
static class
BorderUIResource.LineBorderUIResource
A line border UI resource.
static class
BorderUIResource.MatteBorderUIResource
A matte border UI resource.
static class
BorderUIResource.TitledBorderUIResource
A titled border UI resource.
class
ButtonUI
Pluggable look and feel interface for JButton.
class
ColorChooserUI
Pluggable look and feel interface for JColorChooser.
class
ColorUIResource
A subclass of Color that implements UIResource.
class
ComboBoxUI
Pluggable look and feel interface for JComboBox.
class
ComponentInputMapUIResource
A subclass of javax.swing.ComponentInputMap that implements UIResource.
class
ComponentUI
The base class for all UI delegate objects in the Swing pluggable
 look and feel architecture.
class
DesktopIconUI
Pluggable look and feel interface for JDesktopIcon.
class
DesktopPaneUI
Pluggable look and feel interface for JDesktopPane.
class
DimensionUIResource
A subclass of
Dimension
that implements
UIResource
.
class
FileChooserUI
Pluggable look and feel interface for
JFileChooser
.
class
FontUIResource
A subclass of java.awt.Font that implements UIResource.
class
IconUIResource
An Icon wrapper class which implements UIResource.
class
InputMapUIResource
A subclass of javax.swing.InputMap that implements UIResource.
class
InsetsUIResource
A subclass of Insets that implements UIResource.
class
InternalFrameUI
Pluggable look and feel interface for JInternalFrame.
class
LabelUI
Pluggable look and feel interface for JLabel.
class
LayerUI
<V extends
Component
>
The base class for all
JLayer
's UI delegates.
class
ListUI
The
JList
pluggable look and feel delegate.
class
MenuBarUI
Pluggable look and feel interface for JMenuBar.
class
MenuItemUI
Pluggable look and feel interface for JMenuItem.
class
OptionPaneUI
Pluggable look and feel interface for JOptionPane.
class
PanelUI
Pluggable look and feel interface for Panel.
class
PopupMenuUI
Pluggable look and feel interface for JPopupMenu.
class
ProgressBarUI
Pluggable look and feel interface for JProgressBar.
class
RootPaneUI
Pluggable look and feel interface for JRootPane.
class
ScrollBarUI
Pluggable look and feel interface for JScrollBar.
class
ScrollPaneUI
Pluggable look and feel interface for JScrollPane.
class
SeparatorUI
Pluggable look and feel interface for JSeparator.
class
SliderUI
Pluggable look and feel interface for JSlider.
class
SpinnerUI
Pluggable look and feel interface for JSpinner
class
SplitPaneUI
Pluggable look and feel interface for JSplitPane.
class
TabbedPaneUI
Pluggable look and feel interface for JTabbedPane.
class
TableHeaderUI
Pluggable look and feel interface for JTableHeader.
class
TableUI
Pluggable look and feel interface for JTable.
class
TextUI
Text editor user interface
class
ToolBarUI
Pluggable look and feel interface for JToolBar.
class
ToolTipUI
Pluggable look and feel interface for JToolTip.
class
TreeUI
Pluggable look and feel interface for JTree.
class
ViewportUI
Pluggable look and feel interface for JViewport.
Methods in
javax.swing.plaf
with parameters of type
Object
Modifier and Type
Method
Description
protected void
LayerUI.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Support for reporting bound property changes for Object properties.
Uses of
Object
in
javax.swing.plaf.basic
Subclasses of
Object
in
javax.swing.plaf.basic
Modifier and Type
Class
Description
class
BasicArrowButton
JButton object that draws a scaled Arrow in one of the cardinal directions.
class
BasicBorders
Factory object that can vend Borders appropriate for the basic L & F.
static class
BasicBorders.ButtonBorder
Draws a border around a button.
static class
BasicBorders.FieldBorder
Draws the border around a field.
static class
BasicBorders.MarginBorder
Draws the border around components which support margins.
static class
BasicBorders.MenuBarBorder
Draws the border around a menu bar.
static class
BasicBorders.RadioButtonBorder
Draws the border around a radio button.
static class
BasicBorders.RolloverButtonBorder
Special thin border for rollover toolbar buttons.
static class
BasicBorders.SplitPaneBorder
Draws the border around the splitpane.
static class
BasicBorders.ToggleButtonBorder
Draws the border around a toggle button.
class
BasicButtonListener
Button Listener
class
BasicButtonUI
BasicButton implementation
class
BasicCheckBoxMenuItemUI
BasicCheckboxMenuItem implementation
class
BasicCheckBoxUI
CheckboxUI implementation for BasicCheckboxUI
class
BasicColorChooserUI
Provides the basic look and feel for a JColorChooser.
class
BasicColorChooserUI.PropertyHandler
This class should be treated as a "protected" inner class.
class
BasicComboBoxEditor
The default editor for editable combo boxes.
static class
BasicComboBoxEditor.UIResource
A subclass of BasicComboBoxEditor that implements UIResource.
class
BasicComboBoxRenderer
ComboBox renderer
static class
BasicComboBoxRenderer.UIResource
A subclass of BasicComboBoxRenderer that implements UIResource.
class
BasicComboBoxUI
Basic UI implementation for JComboBox.
class
BasicComboBoxUI.ComboBoxLayoutManager
This layout manager handles the 'standard' layout of combo boxes.
class
BasicComboBoxUI.FocusHandler
This listener hides the popup when the focus is lost.
class
BasicComboBoxUI.ItemHandler
This listener watches for changes to the selection in the
 combo box.
class
BasicComboBoxUI.KeyHandler
This listener checks to see if the key event isn't a navigation key.
class
BasicComboBoxUI.ListDataHandler
This listener watches for changes in the
ComboBoxModel
.
class
BasicComboBoxUI.PropertyChangeHandler
This listener watches for bound properties that have changed in the
 combo box.
class
BasicComboPopup
This is a basic implementation of the
ComboPopup
interface.
class
BasicComboPopup.InvocationKeyHandler
As of Java 2 platform v 1.4, this class is now obsolete and is only included for
 backwards API compatibility.
protected class
BasicComboPopup.InvocationMouseHandler
A listener to be registered upon the combo box
 (
not
its popup menu)
 to handle mouse events
 that affect the state of the popup menu.
protected class
BasicComboPopup.InvocationMouseMotionHandler
This listener watches for dragging and updates the current selection in the
 list if it is dragging over the list.
protected class
BasicComboPopup.ItemHandler
This listener watches for changes to the selection in the
 combo box.
class
BasicComboPopup.ListDataHandler
As of 1.4, this class is now obsolete, doesn't do anything, and
 is only included for backwards API compatibility.
protected class
BasicComboPopup.ListMouseHandler
This listener hides the popup when the mouse is released in the list.
protected class
BasicComboPopup.ListMouseMotionHandler
This listener changes the selected item as you move the mouse over the list.
protected class
BasicComboPopup.ListSelectionHandler
As of Java 2 platform v 1.4, this class is now obsolete, doesn't do anything, and
 is only included for backwards API compatibility.
protected class
BasicComboPopup.PropertyChangeHandler
This listener watches for bound properties that have changed in the
 combo box.
class
BasicDesktopIconUI
Basic L&F for a minimized window on a desktop.
class
BasicDesktopIconUI.MouseInputHandler
Listens for mouse movements and acts on them.
class
BasicDesktopPaneUI
Basic L&F for a desktop.
protected class
BasicDesktopPaneUI.CloseAction
Handles closing an internal frame.
protected class
BasicDesktopPaneUI.MaximizeAction
Handles maximizing an internal frame.
protected class
BasicDesktopPaneUI.MinimizeAction
Handles minimizing an internal frame.
protected class
BasicDesktopPaneUI.NavigateAction
Handles navigating to the next internal frame.
protected class
BasicDesktopPaneUI.OpenAction
Handles restoring a minimized or maximized internal frame.
class
BasicDirectoryModel
Basic implementation of a file list.
class
BasicEditorPaneUI
Provides the look and feel for a JEditorPane.
class
BasicFileChooserUI
Basic L&F implementation of a FileChooser.
protected class
BasicFileChooserUI.AcceptAllFileFilter
Accept all file filter.
protected class
BasicFileChooserUI.ApproveSelectionAction
Responds to an Open or Save request
protected class
BasicFileChooserUI.BasicFileView
A basic file view.
protected class
BasicFileChooserUI.CancelSelectionAction
Responds to a cancel request.
protected class
BasicFileChooserUI.ChangeToParentDirectoryAction
Change to parent directory action.
protected class
BasicFileChooserUI.DoubleClickListener
A double click listener.
protected class
BasicFileChooserUI.GoHomeAction
Acts on the "home" key event or equivalent event.
protected class
BasicFileChooserUI.NewFolderAction
Creates a new folder.
protected class
BasicFileChooserUI.SelectionListener
A selection listener.
protected class
BasicFileChooserUI.UpdateAction
Rescans the files in the current directory
class
BasicFormattedTextFieldUI
Provides the look and feel implementation for
JFormattedTextField
.
class
BasicGraphicsUtils
Convenient util class.
class
BasicHTML
Support for providing html views for the swing components.
class
BasicIconFactory
Factory object that can vend Icons appropriate for the basic L & F.
class
BasicInternalFrameTitlePane
The class that manages a basic title bar
class
BasicInternalFrameTitlePane.CloseAction
This class should be treated as a "protected" inner class.
class
BasicInternalFrameTitlePane.IconifyAction
This class should be treated as a "protected" inner class.
class
BasicInternalFrameTitlePane.MaximizeAction
This class should be treated as a "protected" inner class.
class
BasicInternalFrameTitlePane.MoveAction
This class should be treated as a "protected" inner class.
class
BasicInternalFrameTitlePane.PropertyChangeHandler
This class should be treated as a "protected" inner class.
class
BasicInternalFrameTitlePane.RestoreAction
This class should be treated as a "protected" inner class.
class
BasicInternalFrameTitlePane.SizeAction
This class should be treated as a "protected" inner class.
class
BasicInternalFrameTitlePane.SystemMenuBar
This class should be treated as a "protected" inner class.
class
BasicInternalFrameTitlePane.TitlePaneLayout
This class should be treated as a "protected" inner class.
class
BasicInternalFrameUI
A basic L&F implementation of JInternalFrame.
protected class
BasicInternalFrameUI.BasicInternalFrameListener
Basic internal frame listener.
protected class
BasicInternalFrameUI.BorderListener
Listens for border adjustments.
protected class
BasicInternalFrameUI.ComponentHandler
Component handler.
protected class
BasicInternalFrameUI.GlassPaneDispatcher
Glass pane dispatcher.
class
BasicInternalFrameUI.InternalFrameLayout
Internal frame layout.
class
BasicInternalFrameUI.InternalFramePropertyChangeListener
Internal frame property change listener.
class
BasicLabelUI
A Windows L&F implementation of LabelUI.
class
BasicListUI
An extensible implementation of
ListUI
.
class
BasicListUI.FocusHandler
This class should be treated as a "protected" inner class.
class
BasicListUI.ListDataHandler
The
ListDataListener
that's added to the
JLists
model at
installUI time
, and whenever the JList.model property changes.
class
BasicListUI.ListSelectionHandler
The ListSelectionListener that's added to the JLists selection
 model at installUI time, and whenever the JList.selectionModel property
 changes.
class
BasicListUI.MouseInputHandler
Mouse input, and focus handling for JList.
class
BasicListUI.PropertyChangeHandler
The PropertyChangeListener that's added to the JList at
 installUI time.
class
BasicLookAndFeel
A base class to use in creating a look and feel for Swing.
class
BasicMenuBarUI
A default L&F implementation of MenuBarUI.
class
BasicMenuItemUI
BasicMenuItem implementation
protected class
BasicMenuItemUI.MouseInputHandler
Deprecated, for removal: This API element is subject to removal in a future version.
class
BasicMenuUI
A default L&F implementation of MenuUI.
class
BasicMenuUI.ChangeHandler
As of Java 2 platform 1.4, this previously undocumented class
 is now obsolete.
protected class
BasicMenuUI.MouseInputHandler
Instantiated and used by a menu item to handle the current menu selection
 from mouse events.
class
BasicOptionPaneUI
Provides the basic look and feel for a
JOptionPane
.
class
BasicOptionPaneUI.ButtonActionListener
This class should be treated as a "protected" inner class.
static class
BasicOptionPaneUI.ButtonAreaLayout
ButtonAreaLayout
behaves in a similar manner to
FlowLayout
.
class
BasicOptionPaneUI.PropertyChangeHandler
This class should be treated as a "protected" inner class.
class
BasicPanelUI
BasicPanel implementation
class
BasicPasswordFieldUI
Provides the Windows look and feel for a password field.
class
BasicPopupMenuSeparatorUI
A Basic L&F implementation of PopupMenuSeparatorUI.
class
BasicPopupMenuUI
A Windows L&F implementation of PopupMenuUI.
class
BasicProgressBarUI
A Basic L&F implementation of ProgressBarUI.
class
BasicProgressBarUI.ChangeHandler
This class should be treated as a "protected" inner class.
class
BasicRadioButtonMenuItemUI
BasicRadioButtonMenuItem implementation
class
BasicRadioButtonUI
RadioButtonUI implementation for BasicRadioButtonUI
class
BasicRootPaneUI
Basic implementation of RootPaneUI, there is one shared between all
 JRootPane instances.
class
BasicScrollBarUI
Implementation of ScrollBarUI for the Basic Look and Feel
protected class
BasicScrollBarUI.ArrowButtonListener
Listener for cursor keys.
protected class
BasicScrollBarUI.ModelListener
A listener to listen for model changes.
class
BasicScrollBarUI.PropertyChangeHandler
Property change handler
protected class
BasicScrollBarUI.ScrollListener
Listener for scrolling events initiated in the
ScrollPane
.
protected class
BasicScrollBarUI.TrackListener
Track mouse drags.
class
BasicScrollPaneUI
A default L&F implementation of ScrollPaneUI.
class
BasicScrollPaneUI.HSBChangeListener
Deprecated, for removal: This API element is subject to removal in a future version.
protected class
BasicScrollPaneUI.MouseWheelHandler
MouseWheelHandler is an inner class which implements the
 MouseWheelListener interface.
class
BasicScrollPaneUI.PropertyChangeHandler
Deprecated, for removal: This API element is subject to removal in a future version.
class
BasicScrollPaneUI.ViewportChangeHandler
Deprecated, for removal: This API element is subject to removal in a future version.
class
BasicScrollPaneUI.VSBChangeListener
Deprecated, for removal: This API element is subject to removal in a future version.
class
BasicSeparatorUI
A Basic L&F implementation of SeparatorUI.
class
BasicSliderUI
A Basic L&F implementation of SliderUI.
class
BasicSliderUI.ActionScroller
As of Java 2 platform v1.3 this undocumented class is no longer used.
class
BasicSliderUI.ChangeHandler
Data model listener.
class
BasicSliderUI.ComponentHandler
Listener for resizing events.
class
BasicSliderUI.FocusHandler
Focus-change listener.
class
BasicSliderUI.PropertyChangeHandler
A property change handler.
class
BasicSliderUI.ScrollListener
Scroll-event listener.
class
BasicSliderUI.TrackListener
Track mouse movements.
class
BasicSpinnerUI
The default Spinner UI delegate.
class
BasicSplitPaneDivider
Divider used by BasicSplitPaneUI.
protected class
BasicSplitPaneDivider.DividerLayout
Used to layout a
BasicSplitPaneDivider
.
protected class
BasicSplitPaneDivider.DragController
Handles the events during a dragging session for a
 HORIZONTAL_SPLIT oriented split pane.
protected class
BasicSplitPaneDivider.MouseHandler
MouseHandler is responsible for converting mouse events
 (released, dragged...) into the appropriate DragController
 methods.
protected class
BasicSplitPaneDivider.VerticalDragController
Handles the events during a dragging session for a
 VERTICAL_SPLIT oriented split pane.
class
BasicSplitPaneUI
A Basic L&F implementation of the SplitPaneUI.
class
BasicSplitPaneUI.BasicHorizontalLayoutManager
LayoutManager for JSplitPanes that have an orientation of
 HORIZONTAL_SPLIT.
class
BasicSplitPaneUI.BasicVerticalLayoutManager
LayoutManager used for JSplitPanes with an orientation of
 VERTICAL_SPLIT.
class
BasicSplitPaneUI.FocusHandler
Implementation of the FocusListener that the JSplitPane UI uses.
class
BasicSplitPaneUI.KeyboardDownRightHandler
Implementation of an ActionListener that the JSplitPane UI uses for
 handling specific key presses.
class
BasicSplitPaneUI.KeyboardEndHandler
Implementation of an ActionListener that the JSplitPane UI uses for
 handling specific key presses.
class
BasicSplitPaneUI.KeyboardHomeHandler
Implementation of an ActionListener that the JSplitPane UI uses for
 handling specific key presses.
class
BasicSplitPaneUI.KeyboardResizeToggleHandler
Implementation of an ActionListener that the JSplitPane UI uses for
 handling specific key presses.
class
BasicSplitPaneUI.KeyboardUpLeftHandler
Implementation of an ActionListener that the JSplitPane UI uses for
 handling specific key presses.
class
BasicSplitPaneUI.PropertyHandler
Implementation of the PropertyChangeListener
 that the JSplitPane UI uses.
class
BasicTabbedPaneUI
A Basic L&F implementation of TabbedPaneUI.
class
BasicTabbedPaneUI.FocusHandler
This class should be treated as a "protected" inner class.
class
BasicTabbedPaneUI.MouseHandler
This class should be treated as a "protected" inner class.
class
BasicTabbedPaneUI.PropertyChangeHandler
This class should be treated as a "protected" inner class.
class
BasicTabbedPaneUI.TabbedPaneLayout
This class should be treated as a "protected" inner class.
class
BasicTabbedPaneUI.TabSelectionHandler
This class should be treated as a "protected" inner class.
class
BasicTableHeaderUI
BasicTableHeaderUI implementation
class
BasicTableHeaderUI.MouseInputHandler
This class should be treated as a "protected" inner class.
class
BasicTableUI
BasicTableUI implementation
class
BasicTableUI.FocusHandler
This class should be treated as a "protected" inner class.
class
BasicTableUI.KeyHandler
This class should be treated as a "protected" inner class.
class
BasicTableUI.MouseInputHandler
This class should be treated as a "protected" inner class.
class
BasicTextAreaUI
Provides the look and feel for a plain text editor.
class
BasicTextFieldUI
Basis of a look and feel for a JTextField.
class
BasicTextPaneUI
Provides the look and feel for a styled text editor.
class
BasicTextUI
Basis of a text components look-and-feel.
static class
BasicTextUI.BasicCaret
Default implementation of the interface
Caret
.
static class
BasicTextUI.BasicHighlighter
Default implementation of the interface
Highlighter
.
class
BasicToggleButtonUI
BasicToggleButton implementation
class
BasicToolBarSeparatorUI
A Basic L&F implementation of ToolBarSeparatorUI.
class
BasicToolBarUI
A Basic L&F implementation of ToolBarUI.
class
BasicToolBarUI.DockingListener
This class should be treated as a "protected" inner class.
protected class
BasicToolBarUI.DragWindow
The window which appears during dragging the
JToolBar
.
protected class
BasicToolBarUI.FrameListener
The class listens for window events.
protected class
BasicToolBarUI.PropertyListener
The class listens for property changed events.
protected class
BasicToolBarUI.ToolBarContListener
The class listens for component events.
protected class
BasicToolBarUI.ToolBarFocusListener
The class listens for focus events.
class
BasicToolTipUI
Standard tool tip L&F.
class
BasicTreeUI
The basic L&F for a hierarchical data structure.
class
BasicTreeUI.CellEditorHandler
Listener responsible for getting cell editing events and updating
 the tree accordingly.
class
BasicTreeUI.ComponentHandler
Updates the preferred size when scrolling (if necessary).
class
BasicTreeUI.FocusHandler
Repaints the lead selection row when focus is lost/gained.
class
BasicTreeUI.KeyHandler
This is used to get multiple key down events to appropriately generate
 events.
class
BasicTreeUI.MouseHandler
TreeMouseListener is responsible for updating the selection
 based on mouse events.
class
BasicTreeUI.MouseInputHandler
MouseInputHandler handles passing all mouse events,
 including mouse motion events, until the mouse is released to
 the destination it is constructed with.
class
BasicTreeUI.NodeDimensionsHandler
Class responsible for getting size of node, method is forwarded
 to BasicTreeUI method.
class
BasicTreeUI.PropertyChangeHandler
PropertyChangeListener for the tree.
class
BasicTreeUI.SelectionModelPropertyChangeHandler
Listener on the TreeSelectionModel, resets the row selection if
 any of the properties of the model change.
class
BasicTreeUI.TreeCancelEditingAction
ActionListener that invokes cancelEditing when action performed.
class
BasicTreeUI.TreeExpansionHandler
Updates the TreeState in response to nodes expanding/collapsing.
class
BasicTreeUI.TreeHomeAction
TreeHomeAction is used to handle end/home actions.
class
BasicTreeUI.TreeIncrementAction
TreeIncrementAction is used to handle up/down actions.
class
BasicTreeUI.TreeModelHandler
Forwards all TreeModel events to the TreeState.
class
BasicTreeUI.TreePageAction
TreePageAction handles page up and page down events.
class
BasicTreeUI.TreeSelectionHandler
Listens for changes in the selection model and updates the display
 accordingly.
class
BasicTreeUI.TreeToggleAction
For the first selected row expandedness will be toggled.
class
BasicTreeUI.TreeTraverseAction
TreeTraverseAction
is the action used for left/right keys.
class
BasicViewportUI
BasicViewport implementation
class
DefaultMenuLayout
The default layout manager for Popup menus and menubars.
Fields in
javax.swing.plaf.basic
with type parameters of type
Object
Modifier and Type
Field
Description
protected
JComboBox
<
Object
>
BasicComboBoxUI.
comboBox
The instance of
JComboBox
.
protected
JComboBox
<
Object
>
BasicComboPopup.
comboBox
The instance of
JComboBox
.
protected
JList
<
Object
>
BasicComboPopup.
list
This protected field is implementation specific.
protected
JList
<
Object
>
BasicListUI.
list
The instance of
JList
.
protected
JList
<
Object
>
BasicComboBoxUI.
listBox
This list is for drawing the current item in the combo box.
Methods in
javax.swing.plaf.basic
that return
Object
Modifier and Type
Method
Description
protected
Object
[]
BasicOptionPaneUI.
getButtons
()
Returns the buttons to display from the
JOptionPane
the receiver is
 providing the look and feel for.
Object
BasicDirectoryModel.
getElementAt
(int index)
Object
BasicComboBoxEditor.
getItem
()
protected
Object
BasicOptionPaneUI.
getMessage
()
Returns the message to display from the
JOptionPane
the receiver is
 providing the look and feel for.
Methods in
javax.swing.plaf.basic
that return types with arguments of type
Object
Modifier and Type
Method
Description
protected
JList
<
Object
>
BasicComboPopup.
createList
()
Creates the JList used in the popup to display
 the items in the combo box model.
protected
ListCellRenderer
<
Object
>
BasicComboBoxUI.
createRenderer
()
Creates the default renderer that will be used in a non-editiable combo
 box.
JList
<
Object
>
BasicComboPopup.
getList
()
Implementation of ComboPopup.getList().
JList
<
Object
>
ComboPopup.
getList
()
Returns the list that is being used to draw the items in the combo box.
Methods in
javax.swing.plaf.basic
with parameters of type
Object
Modifier and Type
Method
Description
protected void
BasicOptionPaneUI.
addButtonComponents
(
Container
container,
Object
[] buttons,
 int initialIndex)
Creates the appropriate object to represent each of the objects in
buttons
and adds it to
container
.
void
BasicSplitPaneUI.BasicHorizontalLayoutManager.
addLayoutComponent
(
Component
comp,
Object
constraints)
Adds the specified component to the layout, using the specified
 constraint object.
protected void
BasicOptionPaneUI.
addMessageComponents
(
Container
container,
GridBagConstraints
cons,
Object
msg,
 int maxll,
 boolean internallyCreated)
Creates the appropriate object to represent
msg
and places it
 into
container
.
boolean
BasicDirectoryModel.
contains
(
Object
o)
Returns
true
if an element
o
is in file cache,
 otherwise, returns
false
.
protected
Action
BasicLookAndFeel.
createAudioAction
(
Object
key)
Creates and returns an
Action
used to play a sound.
protected void
BasicDirectoryModel.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Support for reporting bound property changes for boolean properties.
Component
BasicComboBoxRenderer.
getListCellRendererComponent
(
JList
<?> list,
Object
value,
 int index,
 boolean isSelected,
 boolean cellHasFocus)
Rectangle
BasicTreeUI.NodeDimensionsHandler.
getNodeDimensions
(
Object
value,
 int row,
 int depth,
 boolean expanded,
Rectangle
size)
Responsible for getting the size of a particular node.
int
BasicDirectoryModel.
indexOf
(
Object
o)
Returns an index of element
o
in file cache.
void
BasicComboBoxEditor.
setItem
(
Object
anObject)
Sets the item that should be edited.
Method parameters in
javax.swing.plaf.basic
with type arguments of type
Object
Modifier and Type
Method
Description
protected void
BasicListUI.
paintCell
(
Graphics
g,
 int row,
Rectangle
rowBounds,
ListCellRenderer
<
Object
> cellRenderer,
ListModel
<
Object
> dataModel,
ListSelectionModel
selModel,
 int leadIndex)
Paint one List cell: compute the relevant state, get the "rubber stamp"
 cell renderer component, and then use the
CellRendererPane
to paint it.
protected void
BasicListUI.
paintCell
(
Graphics
g,
 int row,
Rectangle
rowBounds,
ListCellRenderer
<
Object
> cellRenderer,
ListModel
<
Object
> dataModel,
ListSelectionModel
selModel,
 int leadIndex)
Paint one List cell: compute the relevant state, get the "rubber stamp"
 cell renderer component, and then use the
CellRendererPane
to paint it.
Constructor parameters in
javax.swing.plaf.basic
with type arguments of type
Object
Modifier
Constructor
Description
BasicComboPopup
(
JComboBox
<
Object
> combo)
Constructs a new instance of
BasicComboPopup
.
Uses of
Object
in
javax.swing.plaf.metal
Subclasses of
Object
in
javax.swing.plaf.metal
Modifier and Type
Class
Description
class
DefaultMetalTheme
A concrete implementation of
MetalTheme
providing
 the original look of the Java Look and Feel, code-named "Steel".
class
MetalBorders
Factory object that can vend Borders appropriate for the metal L & F.
static class
MetalBorders.ButtonBorder
The class represents the border of a
JButton
.
static class
MetalBorders.Flush3DBorder
The class represents the 3D border.
static class
MetalBorders.InternalFrameBorder
The class represents the border of a
JInternalFrame
.
static class
MetalBorders.MenuBarBorder
The class represents the border of a
JMenuBar
.
static class
MetalBorders.MenuItemBorder
The class represents the border of a
JMenuItem
.
static class
MetalBorders.OptionDialogBorder
The class represents the border of an option dialog.
static class
MetalBorders.PaletteBorder
Border for a Palette.
static class
MetalBorders.PopupMenuBorder
The class represents the border of a
JPopupMenu
.
static class
MetalBorders.RolloverButtonBorder
The class represents the border of a rollover
Button
.
static class
MetalBorders.ScrollPaneBorder
The class represents the border of a
JScrollPane
.
static class
MetalBorders.TableHeaderBorder
Border for a Table Header
static class
MetalBorders.TextFieldBorder
Border for a
JTextField
.
static class
MetalBorders.ToggleButtonBorder
Border for a
JToggleButton
.
static class
MetalBorders.ToolBarBorder
The class represents the border of a
JToolBar
.
class
MetalButtonUI
MetalButtonUI implementation
class
MetalCheckBoxIcon
CheckboxIcon implementation for OrganicCheckBoxUI
class
MetalCheckBoxUI
CheckboxUI implementation for MetalCheckboxUI
class
MetalComboBoxButton
JButton subclass to help out MetalComboBoxUI
class
MetalComboBoxEditor
The default editor for Metal editable combo boxes
static class
MetalComboBoxEditor.UIResource
A subclass of BasicComboBoxEditor that implements UIResource.
class
MetalComboBoxIcon
This utility class draws the horizontal bars which indicate a MetalComboBox
class
MetalComboBoxUI
Metal UI for JComboBox
class
MetalComboBoxUI.MetalComboBoxLayoutManager
This class should be treated as a "protected" inner class.
class
MetalComboBoxUI.MetalComboPopup
Deprecated.
As of Java 2 platform v1.4.
class
MetalComboBoxUI.MetalPropertyChangeListener
This class should be treated as a "protected" inner class.
class
MetalDesktopIconUI
Metal desktop icon.
class
MetalFileChooserUI
Metal L&F implementation of a FileChooser.
protected class
MetalFileChooserUI.DirectoryComboBoxAction
Acts when DirectoryComboBox has changed the selected item.
protected class
MetalFileChooserUI.DirectoryComboBoxModel
Data model for a type-face selection combo-box.
protected class
MetalFileChooserUI.FileRenderer
Deprecated.
As of JDK version 9.
protected class
MetalFileChooserUI.FilterComboBoxModel
Data model for a type-face selection combo-box.
class
MetalFileChooserUI.FilterComboBoxRenderer
Render different type sizes and styles.
protected class
MetalFileChooserUI.SingleClickListener
Deprecated.
As of JDK version 9.
class
MetalIconFactory
Factory object that vends
Icon
s for
 the Java look and feel (Metal).
static class
MetalIconFactory.FileIcon16
Warning:
Serialized objects of this class will not be compatible with
 future Swing releases.
static class
MetalIconFactory.FolderIcon16
Warning:
Serialized objects of this class will not be compatible with
 future Swing releases.
static class
MetalIconFactory.PaletteCloseIcon
Defines an icon for Palette close
static class
MetalIconFactory.TreeControlIcon
Warning:
Serialized objects of this class will not be compatible with
 future Swing releases.
static class
MetalIconFactory.TreeFolderIcon
Warning:
Serialized objects of this class will not be compatible with
 future Swing releases.
static class
MetalIconFactory.TreeLeafIcon
The class represents a tree leaf icon.
class
MetalInternalFrameTitlePane
Class that manages a JLF title bar
class
MetalInternalFrameUI
Metal implementation of JInternalFrame.
class
MetalLabelUI
A Windows L&F implementation of LabelUI.
class
MetalLookAndFeel
The Java Look and Feel, otherwise known as Metal.
class
MetalMenuBarUI
Metal implementation of
MenuBarUI
.
class
MetalPopupMenuSeparatorUI
A Metal L&F implementation of PopupMenuSeparatorUI.
class
MetalProgressBarUI
The Metal implementation of ProgressBarUI.
class
MetalRadioButtonUI
RadioButtonUI implementation for MetalRadioButtonUI
class
MetalRootPaneUI
Provides the metal look and feel implementation of
RootPaneUI
.
class
MetalScrollBarUI
Implementation of ScrollBarUI for the Metal Look and Feel
class
MetalScrollButton
JButton object for Metal scrollbar arrows.
class
MetalScrollPaneUI
A Metal L&F implementation of ScrollPaneUI.
class
MetalSeparatorUI
A Metal L&F implementation of SeparatorUI.
class
MetalSliderUI
A Java L&F implementation of SliderUI.
protected class
MetalSliderUI.MetalPropertyListener
PropertyListener
for
JSlider.isFilled
.
class
MetalSplitPaneUI
Metal split pane.
class
MetalTabbedPaneUI
The Metal subclass of BasicTabbedPaneUI.
class
MetalTabbedPaneUI.TabbedPaneLayout
This class should be treated as a "protected" inner class.
class
MetalTextFieldUI
Basis of a look and feel for a JTextField.
class
MetalTheme
MetalTheme
provides the color palette and fonts used by
 the Java Look and Feel.
class
MetalToggleButtonUI
MetalToggleButton implementation
class
MetalToolBarUI
A Metal Look and Feel implementation of ToolBarUI.
protected class
MetalToolBarUI.MetalContainerListener
No longer used.
protected class
MetalToolBarUI.MetalDockingListener
DockingListener
for
MetalToolBarUI
.
protected class
MetalToolBarUI.MetalRolloverListener
No longer used.
class
MetalToolTipUI
A Metal L&F extension of BasicToolTipUI.
class
MetalTreeUI
The metal look and feel implementation of
TreeUI
.
class
OceanTheme
The default theme for the
MetalLookAndFeel
.
Fields in
javax.swing.plaf.metal
with type parameters of type
Object
Modifier and Type
Field
Description
protected
JComboBox
<
Object
>
MetalComboBoxButton.
comboBox
The instance of
JComboBox
.
protected
JList
<
Object
>
MetalComboBoxButton.
listBox
The instance of
JList
.
Methods in
javax.swing.plaf.metal
that return
Object
Modifier and Type
Method
Description
Object
MetalFileChooserUI.DirectoryComboBoxModel.
getElementAt
(int index)
Object
MetalFileChooserUI.FilterComboBoxModel.
getElementAt
(int index)
Object
MetalFileChooserUI.DirectoryComboBoxModel.
getSelectedItem
()
Object
MetalFileChooserUI.FilterComboBoxModel.
getSelectedItem
()
Methods in
javax.swing.plaf.metal
that return types with arguments of type
Object
Modifier and Type
Method
Description
final
JComboBox
<
Object
>
MetalComboBoxButton.
getComboBox
()
Returns the
JComboBox
.
Methods in
javax.swing.plaf.metal
with parameters of type
Object
Modifier and Type
Method
Description
protected void
MetalTreeUI.
decodeLineStyle
(
Object
lineStyleFlag)
Converts between the string passed into the client property
 and the internal representation (currently and int)
void
MetalFileChooserUI.DirectoryComboBoxModel.
setSelectedItem
(
Object
selectedDirectory)
void
MetalFileChooserUI.FilterComboBoxModel.
setSelectedItem
(
Object
filter)
Method parameters in
javax.swing.plaf.metal
with type arguments of type
Object
Modifier and Type
Method
Description
final void
MetalComboBoxButton.
setComboBox
(
JComboBox
<
Object
> cb)
Sets the
JComboBox
.
Constructor parameters in
javax.swing.plaf.metal
with type arguments of type
Object
Modifier
Constructor
Description
MetalComboBoxButton
(
JComboBox
<
Object
> cb,
Icon
i,
 boolean onlyIcon,
CellRendererPane
pane,
JList
<
Object
> list)
Constructs a new instance of
MetalComboBoxButton
.
MetalComboBoxButton
(
JComboBox
<
Object
> cb,
Icon
i,
 boolean onlyIcon,
CellRendererPane
pane,
JList
<
Object
> list)
Constructs a new instance of
MetalComboBoxButton
.
MetalComboBoxButton
(
JComboBox
<
Object
> cb,
Icon
i,
CellRendererPane
pane,
JList
<
Object
> list)
Constructs a new instance of
MetalComboBoxButton
.
MetalComboBoxButton
(
JComboBox
<
Object
> cb,
Icon
i,
CellRendererPane
pane,
JList
<
Object
> list)
Constructs a new instance of
MetalComboBoxButton
.
MetalComboPopup
(
JComboBox
<
Object
> cBox)
Deprecated.
Constructs a new instance of
MetalComboPopup
.
Uses of
Object
in
javax.swing.plaf.multi
Subclasses of
Object
in
javax.swing.plaf.multi
Modifier and Type
Class
Description
class
MultiButtonUI
A multiplexing UI used to combine
ButtonUI
s.
class
MultiColorChooserUI
A multiplexing UI used to combine
ColorChooserUI
s.
class
MultiComboBoxUI
A multiplexing UI used to combine
ComboBoxUI
s.
class
MultiDesktopIconUI
A multiplexing UI used to combine
DesktopIconUI
s.
class
MultiDesktopPaneUI
A multiplexing UI used to combine
DesktopPaneUI
s.
class
MultiFileChooserUI
A multiplexing UI used to combine
FileChooserUI
s.
class
MultiInternalFrameUI
A multiplexing UI used to combine
InternalFrameUI
s.
class
MultiLabelUI
A multiplexing UI used to combine
LabelUI
s.
class
MultiListUI
A multiplexing UI used to combine
ListUI
s.
class
MultiLookAndFeel
A multiplexing look and feel that allows more than one UI
 to be associated with a component at the same time.
class
MultiMenuBarUI
A multiplexing UI used to combine
MenuBarUI
s.
class
MultiMenuItemUI
A multiplexing UI used to combine
MenuItemUI
s.
class
MultiOptionPaneUI
A multiplexing UI used to combine
OptionPaneUI
s.
class
MultiPanelUI
A multiplexing UI used to combine
PanelUI
s.
class
MultiPopupMenuUI
A multiplexing UI used to combine
PopupMenuUI
s.
class
MultiProgressBarUI
A multiplexing UI used to combine
ProgressBarUI
s.
class
MultiRootPaneUI
A multiplexing UI used to combine
RootPaneUI
s.
class
MultiScrollBarUI
A multiplexing UI used to combine
ScrollBarUI
s.
class
MultiScrollPaneUI
A multiplexing UI used to combine
ScrollPaneUI
s.
class
MultiSeparatorUI
A multiplexing UI used to combine
SeparatorUI
s.
class
MultiSliderUI
A multiplexing UI used to combine
SliderUI
s.
class
MultiSpinnerUI
A multiplexing UI used to combine
SpinnerUI
s.
class
MultiSplitPaneUI
A multiplexing UI used to combine
SplitPaneUI
s.
class
MultiTabbedPaneUI
A multiplexing UI used to combine
TabbedPaneUI
s.
class
MultiTableHeaderUI
A multiplexing UI used to combine
TableHeaderUI
s.
class
MultiTableUI
A multiplexing UI used to combine
TableUI
s.
class
MultiTextUI
A multiplexing UI used to combine
TextUI
s.
class
MultiToolBarUI
A multiplexing UI used to combine
ToolBarUI
s.
class
MultiToolTipUI
A multiplexing UI used to combine
ToolTipUI
s.
class
MultiTreeUI
A multiplexing UI used to combine
TreeUI
s.
class
MultiViewportUI
A multiplexing UI used to combine
ViewportUI
s.
Uses of
Object
in
javax.swing.plaf.nimbus
Subclasses of
Object
in
javax.swing.plaf.nimbus
Modifier and Type
Class
Description
class
AbstractRegionPainter
Convenient base class for defining Painter instances for rendering a
 region or component in Nimbus.
protected static class
AbstractRegionPainter.PaintContext
A class encapsulating state useful when painting.
class
NimbusLookAndFeel
The NimbusLookAndFeel class.
final class
NimbusStyle
A SynthStyle implementation used by Nimbus.
class
State
<T extends
JComponent
>
Represents a built in, or custom, state in Nimbus.
Methods in
javax.swing.plaf.nimbus
that return
Object
Modifier and Type
Method
Description
Object
NimbusStyle.
get
(
SynthContext
ctx,
Object
key)
Getter for a region specific style property.
protected
Object
[]
AbstractRegionPainter.
getExtendedCacheKeys
(
JComponent
c)
Get any extra attributes which the painter implementation would like
 to include in the image cache lookups.
Methods in
javax.swing.plaf.nimbus
that return types with arguments of type
Object
Modifier and Type
Method
Description
Painter
<
Object
>
NimbusStyle.
getBackgroundPainter
(
SynthContext
ctx)
Gets the appropriate background Painter, if there is one, for the state
 specified in the given SynthContext.
Painter
<
Object
>
NimbusStyle.
getBorderPainter
(
SynthContext
ctx)
Gets the appropriate border Painter, if there is one, for the state
 specified in the given SynthContext.
Painter
<
Object
>
NimbusStyle.
getForegroundPainter
(
SynthContext
ctx)
Gets the appropriate foreground Painter, if there is one, for the state
 specified in the given SynthContext.
Methods in
javax.swing.plaf.nimbus
with parameters of type
Object
Modifier and Type
Method
Description
protected abstract void
AbstractRegionPainter.
doPaint
(
Graphics2D
g,
JComponent
c,
 int width,
 int height,
Object
[] extendedCacheKeys)
Actually performs the painting operation.
Object
NimbusStyle.
get
(
SynthContext
ctx,
Object
key)
Getter for a region specific style property.
Uses of
Object
in
javax.swing.plaf.synth
Subclasses of
Object
in
javax.swing.plaf.synth
Modifier and Type
Class
Description
class
ColorType
A typesafe enumeration of colors that can be fetched from a style.
class
Region
A distinct rendering area of a Swing component.
class
SynthButtonUI
Provides the Synth L&F UI delegate for
JButton
.
class
SynthCheckBoxMenuItemUI
Provides the Synth L&F UI delegate for
JCheckBoxMenuItem
.
class
SynthCheckBoxUI
Provides the Synth L&F UI delegate for
JCheckBox
.
class
SynthColorChooserUI
Provides the Synth L&F UI delegate for
JColorChooser
.
class
SynthComboBoxUI
Provides the Synth L&F UI delegate for
JComboBox
.
class
SynthContext
An immutable transient object containing contextual information about
 a
Region
.
class
SynthDesktopIconUI
Provides the Synth L&F UI delegate for a minimized internal frame on a desktop.
class
SynthDesktopPaneUI
Provides the Synth L&F UI delegate for
JDesktopPane
.
class
SynthEditorPaneUI
Provides the Synth L&F UI delegate for
JEditorPane
.
class
SynthFormattedTextFieldUI
Provides the Synth L&F UI delegate for
JFormattedTextField
.
class
SynthGraphicsUtils
Wrapper for primitive graphics calls.
class
SynthInternalFrameUI
Provides the Synth L&F UI delegate for
JInternalFrame
.
class
SynthLabelUI
Provides the Synth L&F UI delegate for
JLabel
.
class
SynthListUI
Provides the Synth L&F UI delegate for
JList
.
class
SynthLookAndFeel
SynthLookAndFeel provides the basis for creating a customized look and
 feel.
class
SynthMenuBarUI
Provides the Synth L&F UI delegate for
JMenuBar
.
class
SynthMenuItemUI
Provides the Synth L&F UI delegate for
JMenuItem
.
class
SynthMenuUI
Provides the Synth L&F UI delegate for
JMenu
.
class
SynthOptionPaneUI
Provides the Synth L&F UI delegate for
JOptionPane
.
class
SynthPainter
SynthPainter
is used for painting portions of
JComponent
s.
class
SynthPanelUI
Provides the Synth L&F UI delegate for
JPanel
.
class
SynthPasswordFieldUI
Provides the Synth L&F UI delegate for
JPasswordField
.
class
SynthPopupMenuUI
Provides the Synth L&F UI delegate for
JPopupMenu
.
class
SynthProgressBarUI
Provides the Synth L&F UI delegate for
JProgressBar
.
class
SynthRadioButtonMenuItemUI
Provides the Synth L&F UI delegate for
JRadioButtonMenuItem
.
class
SynthRadioButtonUI
Provides the Synth L&F UI delegate for
JRadioButton
.
class
SynthRootPaneUI
Provides the Synth L&F UI delegate for
JRootPane
.
class
SynthScrollBarUI
Provides the Synth L&F UI delegate for
JScrollBar
.
class
SynthScrollPaneUI
Provides the Synth L&F UI delegate for
JScrollPane
.
class
SynthSeparatorUI
Provides the Synth L&F UI delegate for
JSeparator
.
class
SynthSliderUI
Provides the Synth L&F UI delegate for
JSlider
.
class
SynthSpinnerUI
Provides the Synth L&F UI delegate for
JSpinner
.
class
SynthSplitPaneUI
Provides the Synth L&F UI delegate for
JSplitPane
.
class
SynthStyle
SynthStyle
is a set of style properties.
class
SynthStyleFactory
Factory used for obtaining
SynthStyle
s.
class
SynthTabbedPaneUI
Provides the Synth L&F UI delegate for
JTabbedPane
.
class
SynthTableHeaderUI
Provides the Synth L&F UI delegate for
JTableHeader
.
class
SynthTableUI
Provides the Synth L&F UI delegate for
JTable
.
class
SynthTextAreaUI
Provides the look and feel for a plain text editor in the
 Synth look and feel.
class
SynthTextFieldUI
Provides the Synth L&F UI delegate for
JTextField
.
class
SynthTextPaneUI
Provides the look and feel for a styled text editor in the
 Synth look and feel.
class
SynthToggleButtonUI
Provides the Synth L&F UI delegate for
JToggleButton
.
class
SynthToolBarUI
Provides the Synth L&F UI delegate for
JToolBar
.
class
SynthToolTipUI
Provides the Synth L&F UI delegate for
JToolTip
.
class
SynthTreeUI
Provides the Synth L&F UI delegate for
JTree
.
class
SynthViewportUI
Provides the Synth L&F UI delegate for
JViewport
.
Methods in
javax.swing.plaf.synth
that return
Object
Modifier and Type
Method
Description
Object
SynthStyle.
get
(
SynthContext
context,
Object
key)
Getter for a region specific style property.
Methods in
javax.swing.plaf.synth
with parameters of type
Object
Modifier and Type
Method
Description
void
SynthGraphicsUtils.
drawLine
(
SynthContext
context,
Object
paintKey,
Graphics
g,
 int x1,
 int y1,
 int x2,
 int y2)
Draws a line between the two end points.
void
SynthGraphicsUtils.
drawLine
(
SynthContext
context,
Object
paintKey,
Graphics
g,
 int x1,
 int y1,
 int x2,
 int y2,
Object
styleKey)
Draws a line between the two end points.
Object
SynthStyle.
get
(
SynthContext
context,
Object
key)
Getter for a region specific style property.
boolean
SynthStyle.
getBoolean
(
SynthContext
context,
Object
key,
 boolean defaultValue)
Convenience method to get a specific style property whose value is
 an Boolean.
Icon
SynthStyle.
getIcon
(
SynthContext
context,
Object
key)
Convenience method to get a specific style property whose value is
 an Icon.
int
SynthStyle.
getInt
(
SynthContext
context,
Object
key,
 int defaultValue)
Convenience method to get a specific style property whose value is
 a
Number
.
String
SynthStyle.
getString
(
SynthContext
context,
Object
key,
String
defaultValue)
Convenience method to get a specific style property whose value is
 a String.
Uses of
Object
in
javax.swing.table
Subclasses of
Object
in
javax.swing.table
Modifier and Type
Class
Description
class
AbstractTableModel
This abstract class provides default implementations for most of
  the methods in the
TableModel
interface.
class
DefaultTableCellRenderer
The standard class for rendering (displaying) individual cells
 in a
JTable
.
static class
DefaultTableCellRenderer.UIResource
A subclass of
DefaultTableCellRenderer
that
 implements
UIResource
.
class
DefaultTableColumnModel
The standard column-handler for a
JTable
.
class
DefaultTableModel
This is an implementation of
TableModel
that
 uses a
Vector
of
Vectors
to store the
 cell value objects.
class
JTableHeader
This is the object which manages the header of the
JTable
.
protected class
JTableHeader.AccessibleJTableHeader
This class implements accessibility support for the
JTableHeader
class.
protected class
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry
This class provides an implementation of the Java Accessibility
 API appropriate for JTableHeader entries.
class
TableColumn
A
TableColumn
represents all the attributes of a column in a
JTable
, such as width, resizability, minimum and maximum width.
class
TableRowSorter
<M extends
TableModel
>
An implementation of
RowSorter
that provides sorting
 and filtering using a
TableModel
.
class
TableStringConverter
TableStringConverter is used to convert objects from the model into
 strings.
Fields in
javax.swing.table
declared as
Object
Modifier and Type
Field
Description
protected
Object
TableColumn.
headerValue
The header value of the column.
protected
Object
TableColumn.
identifier
This object is not used internally by the drawing machinery of
  the
JTable
; identifiers may be set in the
TableColumn
as an
  optional way to tag and locate table columns.
Methods in
javax.swing.table
that return
Object
Modifier and Type
Method
Description
Object
TableColumn.
getHeaderValue
()
Returns the
Object
used as the value for the header
 renderer.
Object
TableColumn.
getIdentifier
()
Returns the
identifier
object for this column.
Object
DefaultTableModel.
getValueAt
(int row,
 int column)
Returns an attribute value for the cell at
row
and
column
.
Object
TableModel.
getValueAt
(int rowIndex,
 int columnIndex)
Returns the value for the cell at
columnIndex
and
rowIndex
.
Methods in
javax.swing.table
that return types with arguments of type
Object
Modifier and Type
Method
Description
protected static
Vector
<
Object
>
DefaultTableModel.
convertToVector
(
Object
[] anArray)
Returns a vector that contains the same objects as the array.
protected static
Vector
<
Vector
<
Object
>>
DefaultTableModel.
convertToVector
(
Object
[][] anArray)
Returns a vector of vectors that contains the same objects as the array.
Methods in
javax.swing.table
with parameters of type
Object
Modifier and Type
Method
Description
void
DefaultTableModel.
addColumn
(
Object
columnName)
Adds a column to the model.
void
DefaultTableModel.
addColumn
(
Object
columnName,
Object
[] columnData)
Adds a column to the model.
void
DefaultTableModel.
addColumn
(
Object
columnName,
Vector
<?> columnData)
Adds a column to the model.
void
DefaultTableModel.
addRow
(
Object
[] rowData)
Adds a row to the end of the model.
protected static
Vector
<
Object
>
DefaultTableModel.
convertToVector
(
Object
[] anArray)
Returns a vector that contains the same objects as the array.
protected static
Vector
<
Vector
<
Object
>>
DefaultTableModel.
convertToVector
(
Object
[][] anArray)
Returns a vector of vectors that contains the same objects as the array.
protected void
DefaultTableCellRenderer.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Overridden for performance reasons.
int
DefaultTableColumnModel.
getColumnIndex
(
Object
identifier)
Returns the index of the first column in the
tableColumns
array whose identifier is equal to
identifier
,
 when compared using
equals
.
int
TableColumnModel.
getColumnIndex
(
Object
columnIdentifier)
Returns the index of the first column in the table
 whose identifier is equal to
identifier
,
 when compared using
equals
.
Component
TableCellEditor.
getTableCellEditorComponent
(
JTable
table,
Object
value,
 boolean isSelected,
 int row,
 int column)
Sets an initial
value
for the editor.
Component
DefaultTableCellRenderer.
getTableCellRendererComponent
(
JTable
table,
Object
value,
 boolean isSelected,
 boolean hasFocus,
 int row,
 int column)
Returns the default table cell renderer.
Component
TableCellRenderer.
getTableCellRendererComponent
(
JTable
table,
Object
value,
 boolean isSelected,
 boolean hasFocus,
 int row,
 int column)
Returns the component used for drawing the cell.
void
DefaultTableModel.
insertRow
(int row,
Object
[] rowData)
Inserts a row at
row
in the model.
void
DefaultTableModel.
setColumnIdentifiers
(
Object
[] newIdentifiers)
Replaces the column identifiers in the model.
void
DefaultTableModel.
setDataVector
(
Object
[][] dataVector,
Object
[] columnIdentifiers)
Replaces the value in the
dataVector
instance
  variable with the values in the array
dataVector
.
void
TableColumn.
setHeaderValue
(
Object
headerValue)
Sets the
Object
whose string representation will be
 used as the value for the
headerRenderer
.
void
TableColumn.
setIdentifier
(
Object
identifier)
Sets the
TableColumn
's identifier to
anIdentifier
.
protected void
DefaultTableCellRenderer.
setValue
(
Object
value)
Sets the
String
object for the cell being rendered to
value
.
void
AbstractTableModel.
setValueAt
(
Object
aValue,
 int rowIndex,
 int columnIndex)
This empty implementation is provided so users don't have to implement
  this method if their data model is not editable.
void
DefaultTableModel.
setValueAt
(
Object
aValue,
 int row,
 int column)
Sets the object value for the cell at
column
and
row
.
void
TableModel.
setValueAt
(
Object
aValue,
 int rowIndex,
 int columnIndex)
Sets the value in the cell at
columnIndex
and
rowIndex
to
aValue
.
Constructors in
javax.swing.table
with parameters of type
Object
Modifier
Constructor
Description
DefaultTableModel
(
Object
[][] data,
Object
[] columnNames)
Constructs a
DefaultTableModel
and initializes the table
  by passing
data
and
columnNames
to the
setDataVector
method.
DefaultTableModel
(
Object
[] columnNames,
 int rowCount)
Constructs a
DefaultTableModel
with as many
  columns as there are elements in
columnNames
and
rowCount
of
null
object values.
Uses of
Object
in
javax.swing.text
Subclasses of
Object
in
javax.swing.text
Modifier and Type
Class
Description
class
AbstractDocument
An implementation of the document interface to serve as a
 basis for implementing various kinds of documents.
class
AbstractDocument.AbstractElement
Implements the abstract part of an element.
class
AbstractDocument.BranchElement
Implements a composite element that contains other elements.
class
AbstractDocument.DefaultDocumentEvent
Stores document changes as the document is being
 modified.
static class
AbstractDocument.ElementEdit
An implementation of ElementChange that can be added to the document
 event.
class
AbstractDocument.LeafElement
Implements an element that directly represents content of
 some kind.
class
AbstractWriter
AbstractWriter is an abstract class that actually
 does the work of writing out the element tree
 including the attributes.
class
AsyncBoxView
A box that does layout asynchronously.
class
AsyncBoxView.ChildLocator
A class to manage the effective position of the
 child views in a localized area while changes are
 being made around the localized area.
class
AsyncBoxView.ChildState
A record representing the layout state of a
 child view.
class
BadLocationException
This exception is to report bad locations within a document model
 (that is, attempts to reference a location that doesn't exist).
class
BoxView
A view that arranges its children into a box shape by tiling
 its children along an axis.
class
ChangedCharSetException
ChangedCharSetException as the name indicates is an exception
 thrown when the charset is changed.
class
ComponentView
Component decorator that implements the view interface.
class
CompositeView
CompositeView
is an abstract
View
implementation which manages one or more child views.
class
DateFormatter
DateFormatter is an
InternationalFormatter
that does its
 formatting by way of an instance of
java.text.DateFormat
.
class
DefaultCaret
A default implementation of Caret.
class
DefaultEditorKit
This is the set of things needed by a text component
 to be a reasonably functioning editor for some
type
of text document.
static class
DefaultEditorKit.BeepAction
Creates a beep.
static class
DefaultEditorKit.CopyAction
Copies the selected region and place its contents
 into the system clipboard.
static class
DefaultEditorKit.CutAction
Cuts the selected region and place its contents
 into the system clipboard.
static class
DefaultEditorKit.DefaultKeyTypedAction
The action that is executed by default if
 a
key typed event
is received and there
 is no keymap entry.
static class
DefaultEditorKit.InsertBreakAction
Places a line/paragraph break into the document.
static class
DefaultEditorKit.InsertContentAction
Places content into the associated document.
static class
DefaultEditorKit.InsertTabAction
Places a tab character into the document.
static class
DefaultEditorKit.PasteAction
Pastes the contents of the system clipboard into the
 selected region, or before the caret if nothing is
 selected.
class
DefaultFormatter
DefaultFormatter
formats arbitrary objects.
class
DefaultFormatterFactory
An implementation of
JFormattedTextField.AbstractFormatterFactory
.
class
DefaultHighlighter
Implements the Highlighter interfaces.
static class
DefaultHighlighter.DefaultHighlightPainter
Simple highlight painter that fills a highlighted area with
 a solid color.
class
DefaultStyledDocument
A document that can be marked up with character and paragraph
 styles in a manner similar to the Rich Text Format.
static class
DefaultStyledDocument.AttributeUndoableEdit
An UndoableEdit used to remember AttributeSet changes to an
 Element.
class
DefaultStyledDocument.ElementBuffer
Class to manage changes to the element
 hierarchy.
static class
DefaultStyledDocument.ElementSpec
Specification for building elements.
protected class
DefaultStyledDocument.SectionElement
Default root element for a document... maps out the
 paragraphs/lines contained.
class
DefaultTextUI
Deprecated.
class
DocumentFilter
DocumentFilter
, as the name implies, is a filter for the
Document
mutation methods.
static class
DocumentFilter.FilterBypass
Used as a way to circumvent calling back into the Document to
 change it.
class
EditorKit
Establishes the set of things needed by a text component
 to be a reasonably functioning editor for some
type
of text content.
class
ElementIterator
ElementIterator
, as the name suggests, iterates over the
Element
tree.
class
FieldView
Extends the multi-line plain text view to be suitable
 for a single-line editor view.
class
FlowView
A View that tries to flow it's children into some
 partially constrained space.
static class
FlowView.FlowStrategy
Strategy for maintaining the physical form
 of the flow.
class
GapContent
An implementation of the AbstractDocument.Content interface
 implemented using a gapped buffer similar to that used by emacs.
class
GlyphView
A GlyphView is a styled chunk of text that represents a view
 mapped over an element in the text model.
static class
GlyphView.GlyphPainter
A class to perform rendering of the glyphs.
class
IconView
Icon decorator that implements the view interface.
class
InternationalFormatter
InternationalFormatter
extends
DefaultFormatter
,
 using an instance of
java.text.Format
to handle the
 conversion to a String, and the conversion from a String.
class
JTextComponent
JTextComponent
is the base class for swing text
 components.
class
JTextComponent.AccessibleJTextComponent
This class implements accessibility support for the
JTextComponent
class.
static final class
JTextComponent.DropLocation
Represents a drop location for
JTextComponent
s.
static class
JTextComponent.KeyBinding
Binding record for creating key bindings.
class
LabelView
A
LabelView
is a styled chunk of text
 that represents a view mapped over an element in the
 text model.
class
LayeredHighlighter
Implementation of
Highlighter
interface to mark up the
 background of leaf views with colored areas.
static class
LayeredHighlighter.LayerPainter
Layered highlight renderer.
class
LayoutQueue
A queue of text layout tasks.
class
MaskFormatter
MaskFormatter
is used to format and edit strings.
class
NavigationFilter
NavigationFilter
can be used to restrict where the cursor can
 be positioned.
static class
NavigationFilter.FilterBypass
Used as a way to circumvent calling back into the caret to
 position the cursor.
class
NumberFormatter
NumberFormatter
subclasses
InternationalFormatter
adding special behavior for numbers.
class
ParagraphView
View of a simple line-wrapping paragraph that supports
 multiple fonts, colors, components, icons, etc.
class
PasswordView
Implements a View suitable for use in JPasswordField
 UI implementations.
class
PlainDocument
A plain document that maintains no character attributes.
class
PlainView
Implements View interface for a simple multi-line text view
 that has text in one font and color.
static final class
Position.Bias
A typesafe enumeration to indicate bias to a position
 in the model.
class
Segment
A segment of a character array representing a fragment
 of text.
class
SimpleAttributeSet
A straightforward implementation of MutableAttributeSet using a
 hash table.
final class
StringContent
An implementation of the AbstractDocument.Content interface that is
 a brute force implementation that is useful for relatively small
 documents and/or debugging.
class
StyleConstants
A collection of
well known
or common attribute keys
 and methods to apply to an AttributeSet or MutableAttributeSet
 to get/set the properties in a typesafe manner.
static final class
StyleConstants.CharacterConstants
This is a typesafe enumeration of the
well-known
attributes that contribute to a character style.
static final class
StyleConstants.ColorConstants
This is a typesafe enumeration of the
well-known
attributes that contribute to a color.
static final class
StyleConstants.FontConstants
This is a typesafe enumeration of the
well-known
attributes that contribute to a font.
static final class
StyleConstants.ParagraphConstants
This is a typesafe enumeration of the
well-known
attributes that contribute to a paragraph style.
class
StyleContext
A pool of styles and their associated resources.
class
StyleContext.NamedStyle
A collection of attributes, typically used to represent
 character and paragraph styles.
class
StyleContext.SmallAttributeSet
This class holds a small number of attributes in an array.
class
StyledEditorKit
This is the set of things needed by a text component
 to be a reasonably functioning editor for some
type
of text document.
static class
StyledEditorKit.AlignmentAction
An action to set paragraph alignment.
static class
StyledEditorKit.BoldAction
An action to toggle the bold attribute.
static class
StyledEditorKit.FontFamilyAction
An action to set the font family in the associated
 JEditorPane.
static class
StyledEditorKit.FontSizeAction
An action to set the font size in the associated
 JEditorPane.
static class
StyledEditorKit.ForegroundAction
An action to set foreground color.
static class
StyledEditorKit.ItalicAction
An action to toggle the italic attribute.
static class
StyledEditorKit.StyledTextAction
An action that assumes it's being fired on a JEditorPane
 with a StyledEditorKit (or subclass) installed.
static class
StyledEditorKit.UnderlineAction
An action to toggle the underline attribute.
class
TableView
Implements View interface for a table, that is composed of an
 element structure where the child elements of the element
 this view is responsible for represent rows and the child
 elements of the row elements are cells.
class
TableView.TableCell
Deprecated.
A table cell can now be any View implementation.
class
TableView.TableRow
View of a row in a row-centric table.
class
TabSet
A TabSet is comprised of many TabStops.
class
TabStop
This class encapsulates a single tab stop (basically as tab stops
 are thought of by RTF).
class
TextAction
An Action implementation useful for key bindings that are
 shared across a number of different text components.
class
Utilities
A collection of methods to deal with various text
 related activities.
class
View
A very important part of the text package is the
View
class.
class
WrappedPlainView
View of plain text (text with only one font and color)
 that does line-wrapping.
class
ZoneView
ZoneView is a View implementation that creates zones for which
 the child views are not created or stored until they are needed
 for display or model/view translations.
Fields in
javax.swing.text
declared as
Object
Modifier and Type
Field
Description
static final
Object
StyleConstants.
Alignment
Alignment for the paragraph.
static final
Object
StyleConstants.
Background
Name of the background color attribute.
static final
Object
StyleConstants.
BidiLevel
Bidirectional level of a character as assigned by the Unicode bidi
 algorithm.
static final
Object
StyleConstants.
Bold
Name of the bold attribute.
static final
Object
StyleConstants.
ComponentAttribute
Name of the component attribute.
static final
Object
StyleConstants.
ComposedTextAttribute
Name of the input method composed text attribute.
static final
Object
StyleConstants.
Family
Name of the font family.
static final
Object
StyleConstants.
FirstLineIndent
The amount of space to indent the first
 line of the paragraph.
static final
Object
StyleConstants.
FontFamily
Name of the font family.
static final
Object
StyleConstants.
FontSize
Name of the font size.
static final
Object
StyleConstants.
Foreground
Name of the foreground color attribute.
static final
Object
StyleConstants.
IconAttribute
Name of the icon attribute.
static final
Object
StyleConstants.
Italic
Name of the italic attribute.
static final
Object
StyleConstants.
LeftIndent
The amount to indent the left side
 of the paragraph.
static final
Object
StyleConstants.
LineSpacing
The amount of space between lines
 of the paragraph.
static final
Object
StyleConstants.
ModelAttribute
Attribute used to identify the model for embedded
 objects that have a model view separation.
static final
Object
AttributeSet.
NameAttribute
Attribute name used to name the collection of
 attributes.
static final
Object
StyleConstants.
NameAttribute
Attribute name used to name the collection of
 attributes.
static final
Object
StyleConstants.
Orientation
Orientation for a paragraph.
static final
Object
AttributeSet.
ResolveAttribute
Attribute name used to identify the resolving parent
 set of attributes, if one is defined.
static final
Object
StyleConstants.
ResolveAttribute
Attribute name used to identify the resolving parent
 set of attributes, if one is defined.
static final
Object
StyleConstants.
RightIndent
The amount to indent the right side
 of the paragraph.
static final
Object
StyleConstants.
Size
Name of the font size.
static final
Object
StyleConstants.
SpaceAbove
The amount of space above the paragraph.
static final
Object
StyleConstants.
SpaceBelow
The amount of space below the paragraph.
static final
Object
StyleConstants.
StrikeThrough
Name of the Strikethrough attribute.
static final
Object
StyleConstants.
Subscript
Name of the Subscript attribute.
static final
Object
StyleConstants.
Superscript
Name of the Superscript attribute.
static final
Object
StyleConstants.
TabSet
TabSet for the paragraph, type is a TabSet containing
 TabStops.
static final
Object
StyleConstants.
Underline
Name of the underline attribute.
Methods in
javax.swing.text
that return
Object
Modifier and Type
Method
Description
Object
DefaultHighlighter.
addHighlight
(int p0,
 int p1,
Highlighter.HighlightPainter
p)
Adds a highlight to the view.
Object
Highlighter.
addHighlight
(int p0,
 int p1,
Highlighter.HighlightPainter
p)
Adds a highlight to the view.
protected
Object
GapContent.
allocateArray
(int len)
Allocate an array to store items of the type
 appropriate (which is determined by the subclass).
Object
DefaultFormatter.
clone
()
Creates a copy of the DefaultFormatter.
Object
EditorKit.
clone
()
Creates a copy of the editor kit.
Object
ElementIterator.
clone
()
Clones the
ElementIterator
.
protected final
Object
GlyphView.
clone
()
Creates a shallow copy.
Object
InternationalFormatter.
clone
()
Creates a copy of the DefaultFormatter.
Object
Segment.
clone
()
Creates a shallow copy.
Object
SimpleAttributeSet.
clone
()
Clones a set of attributes.
Object
StyleContext.SmallAttributeSet.
clone
()
Clones a set of attributes.
Object
StyledEditorKit.
clone
()
Creates a copy of the editor kit.
Object
AbstractDocument.AbstractElement.
getAttribute
(
Object
attrName)
Gets the value of an attribute.
Object
AttributeSet.
getAttribute
(
Object
key)
Fetches the value of the given attribute.
Object
SimpleAttributeSet.
getAttribute
(
Object
name)
Gets the value of an attribute.
Object
StyleContext.NamedStyle.
getAttribute
(
Object
attrName)
Gets the value of an attribute.
Object
StyleContext.SmallAttributeSet.
getAttribute
(
Object
key)
Gets the value of an attribute.
final
Object
AbstractDocument.
getProperty
(
Object
key)
A convenience method for looking up a property value.
Object
Document.
getProperty
(
Object
key)
Gets the properties associated with the document.
static
Object
StyleContext.
getStaticAttribute
(
Object
key)
Returns the object previously registered with
registerStaticAttributeKey
.
static
Object
StyleContext.
getStaticAttributeKey
(
Object
key)
Returns the String that
key
will be registered with.
Object
DefaultFormatter.
stringToValue
(
String
string)
Converts the passed in String into an instance of
getValueClass
by way of the constructor that
 takes a String argument.
Object
InternationalFormatter.
stringToValue
(
String
text)
Returns the
Object
representation of the
String
text
.
Object
MaskFormatter.
stringToValue
(
String
value)
Parses the text, returning the appropriate Object representation of
 the String
value
.
Methods in
javax.swing.text
that return types with arguments of type
Object
Modifier and Type
Method
Description
Dictionary
<
Object
,
Object
>
AbstractDocument.
getDocumentProperties
()
Supports managing a set of properties.
Dictionary
<
Object
,
Object
>
AbstractDocument.
getDocumentProperties
()
Supports managing a set of properties.
Methods in
javax.swing.text
with parameters of type
Object
Modifier and Type
Method
Description
void
AbstractDocument.AbstractElement.
addAttribute
(
Object
name,
Object
value)
Adds an attribute to the element.
AttributeSet
AbstractDocument.AttributeContext.
addAttribute
(
AttributeSet
old,
Object
name,
Object
value)
Adds an attribute to the given set, and returns
 the new representative set.
void
MutableAttributeSet.
addAttribute
(
Object
name,
Object
value)
Creates a new attribute set similar to this one except that it contains
 an attribute with the given name and value.
void
SimpleAttributeSet.
addAttribute
(
Object
name,
Object
value)
Adds an attribute to the list.
AttributeSet
StyleContext.
addAttribute
(
AttributeSet
old,
Object
name,
Object
value)
Adds an attribute to the given set, and returns
 the new representative set.
void
StyleContext.NamedStyle.
addAttribute
(
Object
name,
Object
value)
Adds an attribute.
void
DefaultHighlighter.
changeHighlight
(
Object
tag,
 int p0,
 int p1)
Changes a highlight.
void
Highlighter.
changeHighlight
(
Object
tag,
 int p0,
 int p1)
Changes the given highlight to span a different portion of
 the document.
boolean
AbstractDocument.AbstractElement.
containsAttribute
(
Object
name,
Object
value)
Checks whether a given attribute name/value is defined.
boolean
AttributeSet.
containsAttribute
(
Object
name,
Object
value)
Returns
true
if this set defines an attribute with the same
 name and an equal value.
boolean
SimpleAttributeSet.
containsAttribute
(
Object
name,
Object
value)
Checks whether the attribute list contains a
 specified attribute name/value pair.
boolean
StyleContext.NamedStyle.
containsAttribute
(
Object
name,
Object
value)
Checks whether a given attribute name/value is defined.
boolean
StyleContext.SmallAttributeSet.
containsAttribute
(
Object
name,
Object
value)
Checks whether a given attribute name/value is defined.
boolean
DefaultCaret.
equals
(
Object
obj)
Compares this object to the specified object.
boolean
SimpleAttributeSet.
equals
(
Object
obj)
Compares this object to the specified object.
boolean
StyleContext.SmallAttributeSet.
equals
(
Object
obj)
Compares this object to the specified object.
boolean
TabSet.
equals
(
Object
o)
Indicates whether this
TabSet
is equal to another one.
boolean
TabStop.
equals
(
Object
other)
Returns true if the tabs are equal.
Object
AbstractDocument.AbstractElement.
getAttribute
(
Object
attrName)
Gets the value of an attribute.
Object
AttributeSet.
getAttribute
(
Object
key)
Fetches the value of the given attribute.
Object
SimpleAttributeSet.
getAttribute
(
Object
name)
Gets the value of an attribute.
Object
StyleContext.NamedStyle.
getAttribute
(
Object
attrName)
Gets the value of an attribute.
Object
StyleContext.SmallAttributeSet.
getAttribute
(
Object
key)
Gets the value of an attribute.
final
Object
AbstractDocument.
getProperty
(
Object
key)
A convenience method for looking up a property value.
Object
Document.
getProperty
(
Object
key)
Gets the properties associated with the document.
static
Object
StyleContext.
getStaticAttribute
(
Object
key)
Returns the object previously registered with
registerStaticAttributeKey
.
static
Object
StyleContext.
getStaticAttributeKey
(
Object
key)
Returns the String that
key
will be registered with.
boolean
AbstractDocument.AbstractElement.
isDefined
(
Object
attrName)
Checks whether a given attribute is defined.
boolean
AttributeSet.
isDefined
(
Object
attrName)
Checks whether the named attribute has a value specified in
 the set without resolving through another attribute
 set.
boolean
SimpleAttributeSet.
isDefined
(
Object
attrName)
Tells whether a given attribute is defined.
boolean
StyleContext.NamedStyle.
isDefined
(
Object
attrName)
Checks whether a given attribute is defined.
boolean
StyleContext.SmallAttributeSet.
isDefined
(
Object
key)
Checks whether a given attribute is defined.
final void
AbstractDocument.
putProperty
(
Object
key,
Object
value)
A convenience method for storing up a property value.
void
Document.
putProperty
(
Object
key,
Object
value)
Associates a property with the document.
void
JTextComponent.
read
(
Reader
in,
Object
desc)
Initializes from a stream.
static void
StyleContext.
registerStaticAttributeKey
(
Object
key)
Registers an object as a static object that is being
 used as a key in attribute sets.
void
AbstractDocument.AbstractElement.
removeAttribute
(
Object
name)
Removes an attribute from the set.
AttributeSet
AbstractDocument.AttributeContext.
removeAttribute
(
AttributeSet
old,
Object
name)
Removes an attribute from the set.
void
MutableAttributeSet.
removeAttribute
(
Object
name)
Removes an attribute with the given
name
.
void
SimpleAttributeSet.
removeAttribute
(
Object
name)
Removes an attribute from the list.
void
StyleContext.NamedStyle.
removeAttribute
(
Object
name)
Removes an attribute from the set.
AttributeSet
StyleContext.
removeAttribute
(
AttributeSet
old,
Object
name)
Removes an attribute from the set.
void
DefaultHighlighter.
removeHighlight
(
Object
tag)
Removes a highlight from the view.
void
Highlighter.
removeHighlight
(
Object
tag)
Removes a highlight from the view.
String
DefaultFormatter.
valueToString
(
Object
value)
Converts the passed in Object into a String by way of the
toString
method.
String
InternationalFormatter.
valueToString
(
Object
value)
Returns a String representation of the Object
value
.
String
MaskFormatter.
valueToString
(
Object
value)
Returns a String representation of the Object
value
based on the mask.
Method parameters in
javax.swing.text
with type arguments of type
Object
Modifier and Type
Method
Description
void
AbstractDocument.
setDocumentProperties
(
Dictionary
<
Object
,
Object
> x)
Replaces the document properties dictionary for this document.
void
AbstractDocument.
setDocumentProperties
(
Dictionary
<
Object
,
Object
> x)
Replaces the document properties dictionary for this document.
Constructors in
javax.swing.text
with parameters of type
Object
Modifier
Constructor
Description
SmallAttributeSet
(
Object
[] attributes)
Constructs a SmallAttributeSet.
Uses of
Object
in
javax.swing.text.html
Subclasses of
Object
in
javax.swing.text.html
Modifier and Type
Class
Description
class
BlockView
A view implementation to display a block (as a box)
 with CSS specifications.
class
CSS
Defines a set of
CSS attributes
as a typesafe enumeration.
static final class
CSS.Attribute
Definitions to be used as a key on AttributeSet's
 that might hold CSS attributes.
final class
FormSubmitEvent
FormSubmitEvent is used to notify interested
 parties that a form was submitted.
class
FormView
Component decorator that implements the view interface
 for form elements, <input>, <textarea>,
 and <select>.
protected class
FormView.MouseEventListener
MouseEventListener class to handle form submissions when
 an input with type equal to image is clicked on.
class
HTML
Constants used in the
HTMLDocument
.
static final class
HTML.Attribute
Typesafe enumeration representing an HTML
 attribute.
static class
HTML.Tag
Typesafe enumeration for an HTML tag.
static class
HTML.UnknownTag
Class represents unknown HTML tag.
class
HTMLDocument
A document that models HTML.
class
HTMLDocument.BlockElement
An element that represents a structural
block
of
 HTML.
class
HTMLDocument.HTMLReader
An HTML reader to load an HTML document with an HTML
 element structure.
class
HTMLDocument.HTMLReader.BlockAction
Action assigned by default to handle the Block task of the reader.
class
HTMLDocument.HTMLReader.CharacterAction
Action assigned by default to handle the Character task of the reader.
class
HTMLDocument.HTMLReader.FormAction
Action to support forms by building all of the elements
 used to represent form controls.
class
HTMLDocument.HTMLReader.HiddenAction
Action assigned by default to handle the Hidden task of the reader.
class
HTMLDocument.HTMLReader.IsindexAction
Action assigned by default to handle the Isindex task of the reader.
class
HTMLDocument.HTMLReader.ParagraphAction
Action assigned by default to handle the Paragraph task of the reader.
class
HTMLDocument.HTMLReader.PreAction
Action assigned by default to handle the Pre block task of the reader.
class
HTMLDocument.HTMLReader.SpecialAction
Action assigned by default to handle the Special task of the reader.
class
HTMLDocument.HTMLReader.TagAction
An action to be performed in response
 to parsing a tag.
static class
HTMLDocument.Iterator
An iterator to iterate over a particular type of
 tag.
class
HTMLDocument.RunElement
An element that represents a chunk of text that has
 a set of HTML character level attributes assigned to
 it.
class
HTMLEditorKit
The Swing JEditorPane text component supports different kinds
 of content via a plug-in mechanism called an EditorKit.
static class
HTMLEditorKit.HTMLFactory
A factory to build views for HTML.
static class
HTMLEditorKit.HTMLTextAction
An abstract Action providing some convenience methods that may
 be useful in inserting HTML into an existing document.
static class
HTMLEditorKit.InsertHTMLTextAction
InsertHTMLTextAction can be used to insert an arbitrary string of HTML
 into an existing HTML document.
static class
HTMLEditorKit.LinkController
Class to watch the associated component and fire
 hyperlink events on it when appropriate.
static class
HTMLEditorKit.Parser
Interface to be supported by the parser.
static class
HTMLEditorKit.ParserCallback
The result of parsing drives these callback methods.
class
HTMLFrameHyperlinkEvent
HTMLFrameHyperlinkEvent is used to notify interested
 parties that link was activated in a frame.
class
HTMLWriter
This is a writer for HTMLDocuments.
class
ImageView
View of an Image, intended to support the HTML <IMG> tag.
class
InlineView
Displays the
inline element
styles
 based upon css attributes.
class
ListView
A view implementation to display an html list
class
MinimalHTMLWriter
MinimalHTMLWriter is a fallback writer used by the
 HTMLEditorKit to write out HTML for a document that
 is a not produced by the EditorKit.
class
ObjectView
Component decorator that implements the view interface
 for <object> elements.
class
Option
Value for the ListModel used to represent
 <option> elements.
class
ParagraphView
Displays the paragraph and uses CSS attributes for its
 configuration.
class
StyleSheet
Support for defining the visual characteristics of
 HTML views being rendered.
static final class
StyleSheet.BoxPainter
Class to carry out some of the duties of
 CSS formatting.
static final class
StyleSheet.ListPainter
Class to carry out some of the duties of CSS list
 formatting.
Fields in
javax.swing.text.html
declared as
Object
Modifier and Type
Field
Description
static final
Object
HTMLEditorKit.ParserCallback.
IMPLIED
This is passed as an attribute in the attributeset to indicate
 the element is implied eg, the string '<>foo<\t>'
 contains an implied html element and an implied body element.
Methods in
javax.swing.text.html
that return
Object
Modifier and Type
Method
Description
Object
HTMLEditorKit.
clone
()
Creates a copy of the editor kit.
Methods in
javax.swing.text.html
with parameters of type
Object
Modifier and Type
Method
Description
AttributeSet
StyleSheet.
addAttribute
(
AttributeSet
old,
Object
key,
Object
value)
Adds an attribute to the given set, and returns
 the new representative set.
boolean
HTML.UnknownTag.
equals
(
Object
obj)
Compares this object to the specified object.
Element
HTMLDocument.
getElement
(
Element
e,
Object
attribute,
Object
value)
Returns the child element of
e
that contains the
 attribute,
attribute
with value
value
, or
null
if one isn't found.
AttributeSet
StyleSheet.
removeAttribute
(
AttributeSet
old,
Object
key)
Removes an attribute from the set.
Constructors in
javax.swing.text.html
with parameters of type
Object
Modifier
Constructor
Description
HTMLFrameHyperlinkEvent
(
Object
source,
HyperlinkEvent.EventType
type,
URL
targetURL,
String
targetFrame)
Creates a new object representing a html frame
 hypertext link event.
HTMLFrameHyperlinkEvent
(
Object
source,
HyperlinkEvent.EventType
type,
URL
targetURL,
String
desc,
String
targetFrame)
Creates a new object representing a hypertext link event.
HTMLFrameHyperlinkEvent
(
Object
source,
HyperlinkEvent.EventType
type,
URL
targetURL,
String
desc,
Element
sourceElement,
InputEvent
inputEvent,
String
targetFrame)
Creates a new object representing a hypertext link event.
HTMLFrameHyperlinkEvent
(
Object
source,
HyperlinkEvent.EventType
type,
URL
targetURL,
String
desc,
Element
sourceElement,
String
targetFrame)
Creates a new object representing a hypertext link event.
HTMLFrameHyperlinkEvent
(
Object
source,
HyperlinkEvent.EventType
type,
URL
targetURL,
Element
sourceElement,
String
targetFrame)
Creates a new object representing a hypertext link event.
Uses of
Object
in
javax.swing.text.html.parser
Subclasses of
Object
in
javax.swing.text.html.parser
Modifier and Type
Class
Description
final class
AttributeList
This class defines the attributes of an SGML element
 as described in a DTD using the ATTLIST construct.
final class
ContentModel
A representation of a content model.
class
DocumentParser
A Parser for HTML Documents (actually, you can specify a DTD, but
 you should really only use this class with the html dtd in swing).
class
DTD
The representation of an SGML DTD.
final class
Element
An element as described in a DTD using the ELEMENT construct.
final class
Entity
An entity is described in a DTD using the ENTITY construct.
class
Parser
A simple DTD-driven HTML parser.
class
ParserDelegator
Responsible for starting up a new DocumentParser
 each time its parse method is invoked.
class
TagElement
A generic HTML TagElement class.
Fields in
javax.swing.text.html.parser
declared as
Object
Modifier and Type
Field
Description
Object
ContentModel.
content
The content.
Object
Element.
data
A field to store user data.
Fields in
javax.swing.text.html.parser
with type parameters of type
Object
Modifier and Type
Field
Description
Hashtable
<
Object
,
Entity
>
DTD.
entityHash
The hash table contains an
Object
and the corresponding
Entity
Methods in
javax.swing.text.html.parser
with parameters of type
Object
Modifier and Type
Method
Description
protected
ContentModel
DTD.
defContentModel
(int type,
Object
obj,
ContentModel
next)
Creates and returns a new content model.
boolean
ContentModel.
first
(
Object
token)
Return true if the token could potentially be the
 first token in the input stream.
Constructors in
javax.swing.text.html.parser
with parameters of type
Object
Modifier
Constructor
Description
ContentModel
(int type,
Object
content,
ContentModel
next)
Create a content model of a particular type.
Uses of
Object
in
javax.swing.text.rtf
Subclasses of
Object
in
javax.swing.text.rtf
Modifier and Type
Class
Description
class
RTFEditorKit
This is the default implementation of RTF editing
 functionality.
Uses of
Object
in
javax.swing.tree
Subclasses of
Object
in
javax.swing.tree
Modifier and Type
Class
Description
class
AbstractLayoutCache
Warning:
Serialized objects of this class will not be compatible with
 future Swing releases.
static class
AbstractLayoutCache.NodeDimensions
Used by
AbstractLayoutCache
to determine the size
 and x origin of a particular node.
class
DefaultMutableTreeNode
A
DefaultMutableTreeNode
is a general-purpose node in a tree data
 structure.
class
DefaultTreeCellEditor
A
TreeCellEditor
.
class
DefaultTreeCellEditor.DefaultTextField
TextField
used when no editor is supplied.
class
DefaultTreeCellEditor.EditorContainer
Container responsible for placing the
editingComponent
.
class
DefaultTreeCellRenderer
Displays an entry in a tree.
class
DefaultTreeModel
A simple tree data model that uses TreeNodes.
class
DefaultTreeSelectionModel
Default implementation of TreeSelectionModel.
class
ExpandVetoException
Exception used to stop an expand/collapse from happening.
class
FixedHeightLayoutCache
NOTE: This will become more open in a future release.
class
TreePath
TreePath
represents an array of objects that uniquely
 identify the path to a node in a tree.
class
VariableHeightLayoutCache
NOTE: This will become more open in a future release.
Fields in
javax.swing.tree
declared as
Object
Modifier and Type
Field
Description
protected
Object
DefaultMutableTreeNode.
userObject
optional user object
Methods in
javax.swing.tree
that return
Object
Modifier and Type
Method
Description
Object
DefaultMutableTreeNode.
clone
()
Overridden to make clone public.
Object
DefaultTreeSelectionModel.
clone
()
Returns a clone of this object with the same selection.
Object
DefaultTreeCellEditor.
getCellEditorValue
()
Returns the value currently being edited.
Object
DefaultTreeModel.
getChild
(
Object
parent,
 int index)
Returns the child of
parent
at index
index
in the parent's
 child array.
Object
TreeModel.
getChild
(
Object
parent,
 int index)
Returns the child of
parent
at index
index
in the parent's
 child array.
Object
TreePath.
getLastPathComponent
()
Returns the last element of this path.
Object
[]
TreePath.
getPath
()
Returns an ordered array of the elements of this
TreePath
.
Object
TreePath.
getPathComponent
(int index)
Returns the path element at the specified index.
Object
DefaultTreeModel.
getRoot
()
Returns the root of the tree.
Object
TreeModel.
getRoot
()
Returns the root of the tree.
Object
DefaultMutableTreeNode.
getUserObject
()
Returns this node's user object.
Object
[]
DefaultMutableTreeNode.
getUserObjectPath
()
Returns the user object path, from the root, to get to this node.
Methods in
javax.swing.tree
with parameters of type
Object
Modifier and Type
Method
Description
protected void
DefaultTreeCellEditor.
determineOffset
(
JTree
tree,
Object
value,
 boolean isSelected,
 boolean expanded,
 boolean leaf,
 int row)
Determine the offset.
boolean
TreePath.
equals
(
Object
o)
Compares this
TreePath
to the specified object.
protected void
DefaultTreeCellRenderer.
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Overridden for performance reasons.
protected void
DefaultTreeModel.
fireTreeNodesChanged
(
Object
source,
Object
[] path,
 int[] childIndices,
Object
[] children)
Notifies all listeners that have registered interest for
 notification on this event type.
protected void
DefaultTreeModel.
fireTreeNodesInserted
(
Object
source,
Object
[] path,
 int[] childIndices,
Object
[] children)
Notifies all listeners that have registered interest for
 notification on this event type.
protected void
DefaultTreeModel.
fireTreeNodesRemoved
(
Object
source,
Object
[] path,
 int[] childIndices,
Object
[] children)
Notifies all listeners that have registered interest for
 notification on this event type.
protected void
DefaultTreeModel.
fireTreeStructureChanged
(
Object
source,
Object
[] path,
 int[] childIndices,
Object
[] children)
Notifies all listeners that have registered interest for
 notification on this event type.
Object
DefaultTreeModel.
getChild
(
Object
parent,
 int index)
Returns the child of
parent
at index
index
in the parent's
 child array.
Object
TreeModel.
getChild
(
Object
parent,
 int index)
Returns the child of
parent
at index
index
in the parent's
 child array.
int
DefaultTreeModel.
getChildCount
(
Object
parent)
Returns the number of children of
parent
.
int
TreeModel.
getChildCount
(
Object
parent)
Returns the number of children of
parent
.
int
DefaultTreeModel.
getIndexOfChild
(
Object
parent,
Object
child)
Returns the index of child in parent.
int
TreeModel.
getIndexOfChild
(
Object
parent,
Object
child)
Returns the index of child in parent.
protected
Rectangle
AbstractLayoutCache.
getNodeDimensions
(
Object
value,
 int row,
 int depth,
 boolean expanded,
Rectangle
placeIn)
Returns, by reference in
placeIn
,
 the size needed to represent
value
.
abstract
Rectangle
AbstractLayoutCache.NodeDimensions.
getNodeDimensions
(
Object
value,
 int row,
 int depth,
 boolean expanded,
Rectangle
bounds)
Returns, by reference in bounds, the size and x origin to
 place value at.
Component
DefaultTreeCellEditor.
getTreeCellEditorComponent
(
JTree
tree,
Object
value,
 boolean isSelected,
 boolean expanded,
 boolean leaf,
 int row)
Configures the editor.
Component
TreeCellEditor.
getTreeCellEditorComponent
(
JTree
tree,
Object
value,
 boolean isSelected,
 boolean expanded,
 boolean leaf,
 int row)
Sets an initial
value
for the editor.
Component
DefaultTreeCellRenderer.
getTreeCellRendererComponent
(
JTree
tree,
Object
value,
 boolean sel,
 boolean expanded,
 boolean leaf,
 int row,
 boolean hasFocus)
Configures the renderer based on the passed in components.
Component
TreeCellRenderer.
getTreeCellRendererComponent
(
JTree
tree,
Object
value,
 boolean selected,
 boolean expanded,
 boolean leaf,
 int row,
 boolean hasFocus)
Sets the value of the current tree cell to
value
.
boolean
DefaultTreeModel.
isLeaf
(
Object
node)
Returns whether the specified node is a leaf node.
boolean
TreeModel.
isLeaf
(
Object
node)
Returns
true
if
node
is a leaf.
void
DefaultTreeModel.
nodesWereRemoved
(
TreeNode
node,
 int[] childIndices,
Object
[] removedChildren)
Invoke this method after you've removed some TreeNodes from
 node.
TreePath
TreePath.
pathByAddingChild
(
Object
child)
Returns a new path containing all the elements of this path
 plus
child
.
void
DefaultMutableTreeNode.
setUserObject
(
Object
userObject)
Sets the user object for this node to
userObject
.
void
MutableTreeNode.
setUserObject
(
Object
object)
Resets the user object of the receiver to
object
.
void
DefaultTreeModel.
valueForPathChanged
(
TreePath
path,
Object
newValue)
This sets the user object of the TreeNode identified by path
 and posts a node changed.
void
TreeModel.
valueForPathChanged
(
TreePath
path,
Object
newValue)
Messaged when the user has altered the value for the item identified
 by
path
to
newValue
.
Constructors in
javax.swing.tree
with parameters of type
Object
Modifier
Constructor
Description
DefaultMutableTreeNode
(
Object
userObject)
Creates a tree node with no parent, no children, but which allows
 children, and initializes it with the specified user object.
DefaultMutableTreeNode
(
Object
userObject,
 boolean allowsChildren)
Creates a tree node with no parent, no children, initialized with
 the specified user object, and that allows children only if
 specified.
TreePath
(
Object
lastPathComponent)
Creates a
TreePath
containing a single element.
TreePath
(
Object
[] path)
Creates a
TreePath
from an array.
protected
TreePath
(
Object
[] path,
 int length)
Creates a
TreePath
from an array.
protected
TreePath
(
TreePath
parent,
Object
lastPathComponent)
Creates a
TreePath
with the specified parent and element.
Uses of
Object
in
javax.swing.undo
Subclasses of
Object
in
javax.swing.undo
Modifier and Type
Class
Description
class
AbstractUndoableEdit
An abstract implementation of
UndoableEdit
,
 implementing simple responses to all boolean methods in
 that interface.
class
CannotRedoException
Thrown when an UndoableEdit is told to
redo()
and can't.
class
CannotUndoException
Thrown when an UndoableEdit is told to
undo()
and can't.
class
CompoundEdit
A concrete subclass of AbstractUndoableEdit, used to assemble little
 UndoableEdits into great big ones.
class
StateEdit
StateEdit is a general edit for objects that change state.
class
UndoableEditSupport
A support class used for managing
UndoableEdit
listeners.
class
UndoManager
UndoManager
manages a list of
UndoableEdits
,
 providing a way to undo or redo the appropriate edits.
Fields in
javax.swing.undo
declared as
Object
Modifier and Type
Field
Description
protected
Object
UndoableEditSupport.
realSource
The real source.
Fields in
javax.swing.undo
with type parameters of type
Object
Modifier and Type
Field
Description
protected
Hashtable
<
Object
,
Object
>
StateEdit.
postState
The state information after the edit
protected
Hashtable
<
Object
,
Object
>
StateEdit.
postState
The state information after the edit
protected
Hashtable
<
Object
,
Object
>
StateEdit.
preState
The state information prior to the edit
protected
Hashtable
<
Object
,
Object
>
StateEdit.
preState
The state information prior to the edit
Method parameters in
javax.swing.undo
with type arguments of type
Object
Modifier and Type
Method
Description
void
StateEditable.
storeState
(
Hashtable
<
Object
,
Object
> state)
Upon receiving this message the receiver should place any relevant
 state into
state
.
void
StateEditable.
storeState
(
Hashtable
<
Object
,
Object
> state)
Upon receiving this message the receiver should place any relevant
 state into
state
.
Constructors in
javax.swing.undo
with parameters of type
Object
Modifier
Constructor
Description
UndoableEditSupport
(
Object
r)
Constructs an
UndoableEditSupport
object.
Uses of
Object
in
javax.tools
Subclasses of
Object
in
javax.tools
Modifier and Type
Class
Description
final class
DiagnosticCollector
<S>
Provides an easy way to collect diagnostics in a list.
class
ForwardingFileObject
<F extends
FileObject
>
Forwards calls to a given file object.
class
ForwardingJavaFileManager
<M extends
JavaFileManager
>
Forwards calls to a given file manager.
class
ForwardingJavaFileObject
<F extends
JavaFileObject
>
Forwards calls to a given file object.
class
SimpleJavaFileObject
Provides simple implementations for most methods in JavaFileObject.
class
ToolProvider
Provides methods for locating tool providers, for example,
 providers of compilers.
Uses of
Object
in
javax.transaction.xa
Subclasses of
Object
in
javax.transaction.xa
Modifier and Type
Class
Description
class
XAException
The XAException is thrown by the Resource Manager (RM) to inform the
 Transaction Manager of an error encountered by the involved transaction.
Uses of
Object
in
javax.xml
Subclasses of
Object
in
javax.xml
Modifier and Type
Class
Description
final class
XMLConstants
Defines constants for XML Processing APIs.
Uses of
Object
in
javax.xml.catalog
Subclasses of
Object
in
javax.xml.catalog
Modifier and Type
Class
Description
class
CatalogException
The exception class handles errors that may happen while processing or using
 a catalog.
class
CatalogFeatures
The CatalogFeatures holds a collection of features and properties.
static class
CatalogFeatures.Builder
The Builder class for building the CatalogFeatures object.
final class
CatalogManager
The Catalog Manager manages the creation of XML Catalogs and Catalog Resolvers.
Uses of
Object
in
javax.xml.crypto
Subclasses of
Object
in
javax.xml.crypto
Modifier and Type
Class
Description
class
KeySelector
A selector that finds and returns a key using the data contained in a
KeyInfo
object.
static class
KeySelector.Purpose
The purpose of the key that is to be selected.
class
KeySelectorException
Indicates an exceptional condition thrown by a
KeySelector
.
class
MarshalException
Indicates an exceptional condition that occurred during the XML
 marshalling or unmarshalling process.
class
NoSuchMechanismException
This exception is thrown when a particular XML mechanism is requested but
 is not available in the environment.
class
OctetStreamData
A representation of a
Data
type containing an octet stream.
class
URIReferenceException
Indicates an exceptional condition thrown while dereferencing a
URIReference
.
Methods in
javax.xml.crypto
that return
Object
Modifier and Type
Method
Description
Object
XMLCryptoContext.
get
(
Object
key)
Returns the value to which this context maps the specified key.
Object
XMLCryptoContext.
getProperty
(
String
name)
Returns the value of the specified property.
Object
XMLCryptoContext.
put
(
Object
key,
Object
value)
Associates the specified value with the specified key in this context.
Object
XMLCryptoContext.
setProperty
(
String
name,
Object
value)
Sets the specified property.
Methods in
javax.xml.crypto
with parameters of type
Object
Modifier and Type
Method
Description
Object
XMLCryptoContext.
get
(
Object
key)
Returns the value to which this context maps the specified key.
Object
XMLCryptoContext.
put
(
Object
key,
Object
value)
Associates the specified value with the specified key in this context.
Object
XMLCryptoContext.
setProperty
(
String
name,
Object
value)
Sets the specified property.
Uses of
Object
in
javax.xml.crypto.dom
Subclasses of
Object
in
javax.xml.crypto.dom
Modifier and Type
Class
Description
class
DOMCryptoContext
This class provides a DOM-specific implementation of the
XMLCryptoContext
interface.
class
DOMStructure
A DOM-specific
XMLStructure
.
Methods in
javax.xml.crypto.dom
that return
Object
Modifier and Type
Method
Description
Object
DOMCryptoContext.
get
(
Object
key)
This implementation uses an internal
HashMap
to get the object
 that the specified key maps to.
Object
DOMCryptoContext.
getProperty
(
String
name)
This implementation uses an internal
HashMap
to get the object
 that the specified name maps to.
Object
DOMCryptoContext.
put
(
Object
key,
Object
value)
This implementation uses an internal
HashMap
to map the key
 to the specified object.
Object
DOMCryptoContext.
setProperty
(
String
name,
Object
value)
This implementation uses an internal
HashMap
to map the name
 to the specified object.
Methods in
javax.xml.crypto.dom
with parameters of type
Object
Modifier and Type
Method
Description
Object
DOMCryptoContext.
get
(
Object
key)
This implementation uses an internal
HashMap
to get the object
 that the specified key maps to.
Object
DOMCryptoContext.
put
(
Object
key,
Object
value)
This implementation uses an internal
HashMap
to map the key
 to the specified object.
Object
DOMCryptoContext.
setProperty
(
String
name,
Object
value)
This implementation uses an internal
HashMap
to map the name
 to the specified object.
Uses of
Object
in
javax.xml.crypto.dsig
Subclasses of
Object
in
javax.xml.crypto.dsig
Modifier and Type
Class
Description
class
TransformException
Indicates an exceptional condition that occurred while executing a
 transform algorithm.
class
TransformService
A Service Provider Interface for transform and canonicalization algorithms.
class
XMLSignatureException
Indicates an exceptional condition that occurred during the XML
 signature generation or validation process.
class
XMLSignatureFactory
A factory for creating
XMLSignature
objects from scratch or
 for unmarshalling an
XMLSignature
object from a corresponding
 XML representation.
Uses of
Object
in
javax.xml.crypto.dsig.dom
Subclasses of
Object
in
javax.xml.crypto.dsig.dom
Modifier and Type
Class
Description
class
DOMSignContext
A DOM-specific
XMLSignContext
.
class
DOMValidateContext
A DOM-specific
XMLValidateContext
.
Uses of
Object
in
javax.xml.crypto.dsig.keyinfo
Subclasses of
Object
in
javax.xml.crypto.dsig.keyinfo
Modifier and Type
Class
Description
class
KeyInfoFactory
A factory for creating
KeyInfo
objects from scratch or for
 unmarshalling a
KeyInfo
object from a corresponding XML
 representation.
Uses of
Object
in
javax.xml.crypto.dsig.spec
Subclasses of
Object
in
javax.xml.crypto.dsig.spec
Modifier and Type
Class
Description
final class
ExcC14NParameterSpec
Parameters for the W3C Recommendation:
Exclusive XML Canonicalization (C14N) algorithm
.
final class
HMACParameterSpec
Parameters for the
XML Signature HMAC Algorithm
.
final class
RSAPSSParameterSpec
Parameters for the
XML Signature RSASSA-PSS Algorithm
.
final class
XPathFilter2ParameterSpec
Parameters for the W3C Recommendation
XPath Filter 2.0 Transform Algorithm
.
final class
XPathFilterParameterSpec
Parameters for the
XPath Filtering Transform Algorithm
.
class
XPathType
The XML Schema Definition of the
XPath
element as defined in the
W3C Recommendation for XML-Signature XPath Filter 2.0
:
static class
XPathType.Filter
Represents the filter set operation.
final class
XSLTTransformParameterSpec
Parameters for the
XSLT Transform Algorithm
.
Uses of
Object
in
javax.xml.datatype
Subclasses of
Object
in
javax.xml.datatype
Modifier and Type
Class
Description
class
DatatypeConfigurationException
Indicates a serious configuration error.
final class
DatatypeConstants
Utility class to contain basic Datatype values as constants.
static final class
DatatypeConstants.Field
Type-safe enum class that represents six fields
 of the
Duration
class.
class
DatatypeFactory
Factory that creates new
javax.xml.datatype
Object
s that map XML to/from Java
Object
s.
class
Duration
Immutable representation of a time span as defined in
 the W3C XML Schema 1.0 specification.
class
XMLGregorianCalendar
Representation for W3C XML Schema 1.0 date/time datatypes.
Methods in
javax.xml.datatype
that return
Object
Modifier and Type
Method
Description
abstract
Object
XMLGregorianCalendar.
clone
()
Creates and returns a copy of this object.
Methods in
javax.xml.datatype
with parameters of type
Object
Modifier and Type
Method
Description
boolean
Duration.
equals
(
Object
duration)
Checks if this duration object has the same duration
 as another
Duration
object.
boolean
XMLGregorianCalendar.
equals
(
Object
obj)
Compares this calendar to the specified object.
Uses of
Object
in
javax.xml.namespace
Subclasses of
Object
in
javax.xml.namespace
Modifier and Type
Class
Description
class
QName
QName
represents a
qualified name
as defined in the XML specifications:
XML Schema Part2:
 Datatypes specification
,
Namespaces
 in XML
.
Methods in
javax.xml.namespace
with parameters of type
Object
Modifier and Type
Method
Description
final boolean
QName.
equals
(
Object
objectToTest)
Test this
QName
for equality with another
Object
.
Uses of
Object
in
javax.xml.parsers
Subclasses of
Object
in
javax.xml.parsers
Modifier and Type
Class
Description
class
DocumentBuilder
Defines the API to obtain DOM Document instances from an XML
 document.
class
DocumentBuilderFactory
Defines a factory API that enables applications to obtain a
 parser that produces DOM object trees from XML documents.
class
FactoryConfigurationError
Thrown when a problem with configuration with the Parser Factories
 exists.
class
ParserConfigurationException
Indicates a serious configuration error.
class
SAXParser
Defines the API that wraps an
XMLReader
implementation class.
class
SAXParserFactory
Defines a factory API that enables applications to configure and
 obtain a SAX based parser to parse XML documents.
Methods in
javax.xml.parsers
that return
Object
Modifier and Type
Method
Description
abstract
Object
DocumentBuilderFactory.
getAttribute
(
String
name)
Allows the user to retrieve specific attributes on the underlying
 implementation.
abstract
Object
SAXParser.
getProperty
(
String
name)
Returns the particular property requested for in the underlying
 implementation of
XMLReader
.
Methods in
javax.xml.parsers
with parameters of type
Object
Modifier and Type
Method
Description
abstract void
DocumentBuilderFactory.
setAttribute
(
String
name,
Object
value)
Allows the user to set specific attributes on the underlying
 implementation.
abstract void
SAXParser.
setProperty
(
String
name,
Object
value)
Sets the particular property in the underlying implementation of
XMLReader
.
Uses of
Object
in
javax.xml.stream
Subclasses of
Object
in
javax.xml.stream
Modifier and Type
Class
Description
class
FactoryConfigurationError
An error class for reporting factory configuration errors.
class
XMLEventFactory
This interface defines a utility class for creating instances of
 XMLEvents
class
XMLInputFactory
Defines an abstract implementation of a factory for getting streams.
class
XMLOutputFactory
Defines an abstract implementation of a factory for
 getting XMLEventWriters and XMLStreamWriters.
class
XMLStreamException
The base exception for unexpected processing errors.
Methods in
javax.xml.stream
that return
Object
Modifier and Type
Method
Description
Object
XMLEventReader.
getProperty
(
String
name)
Get the value of a feature/property from the underlying implementation
abstract
Object
XMLInputFactory.
getProperty
(
String
name)
Get the value of a feature/property from the underlying implementation
abstract
Object
XMLOutputFactory.
getProperty
(
String
name)
Get a feature/property on the underlying implementation
Object
XMLStreamReader.
getProperty
(
String
name)
Get the value of a feature/property from the underlying implementation
Object
XMLStreamWriter.
getProperty
(
String
name)
Get the value of a feature/property from the underlying implementation
Object
XMLResolver.
resolveEntity
(
String
publicID,
String
systemID,
String
baseURI,
String
namespace)
Retrieves a resource.
Methods in
javax.xml.stream
with parameters of type
Object
Modifier and Type
Method
Description
void
XMLReporter.
report
(
String
message,
String
errorType,
Object
relatedInformation,
Location
location)
Report the desired message in an application specific format.
abstract void
XMLInputFactory.
setProperty
(
String
name,
Object
value)
Allows the user to set specific feature/property on the underlying
 implementation.
abstract void
XMLOutputFactory.
setProperty
(
String
name,
Object
value)
Allows the user to set specific features/properties on the underlying implementation.
Uses of
Object
in
javax.xml.stream.events
Methods in
javax.xml.stream.events
that return
Object
Modifier and Type
Method
Description
Object
DTD.
getProcessedDTD
()
Returns an implementation defined representation of the DTD.
Uses of
Object
in
javax.xml.stream.util
Subclasses of
Object
in
javax.xml.stream.util
Modifier and Type
Class
Description
class
EventReaderDelegate
This is the base class for deriving an XMLEventReader
 filter.
class
StreamReaderDelegate
This is the base class for deriving an XMLStreamReader filter

 This class is designed to sit between an XMLStreamReader and an
 application's XMLStreamReader.
Methods in
javax.xml.stream.util
that return
Object
Modifier and Type
Method
Description
Object
EventReaderDelegate.
getProperty
(
String
name)
Object
StreamReaderDelegate.
getProperty
(
String
name)
Object
EventReaderDelegate.
next
()
Uses of
Object
in
javax.xml.transform
Subclasses of
Object
in
javax.xml.transform
Modifier and Type
Class
Description
class
OutputKeys
Provides string constants that can be used to set
 output properties for a Transformer, or to retrieve
 output properties from a Transformer or Templates object.
class
Transformer
An instance of this abstract class can transform a
 source tree into a result tree.
class
TransformerConfigurationException
Indicates a serious configuration error.
class
TransformerException
This class specifies an exceptional condition that occurred
 during the transformation process.
class
TransformerFactory
A TransformerFactory instance can be used to create
Transformer
and
Templates
objects.
class
TransformerFactoryConfigurationError
Thrown when a problem with configuration with the Transformer Factories
 exists.
Methods in
javax.xml.transform
that return
Object
Modifier and Type
Method
Description
abstract
Object
TransformerFactory.
getAttribute
(
String
name)
Allows the user to retrieve specific attributes on the underlying
 implementation.
abstract
Object
Transformer.
getParameter
(
String
name)
Get a parameter that was explicitly set with setParameter.
Methods in
javax.xml.transform
with parameters of type
Object
Modifier and Type
Method
Description
abstract void
TransformerFactory.
setAttribute
(
String
name,
Object
value)
Allows the user to set specific attributes on the underlying
 implementation.
abstract void
Transformer.
setParameter
(
String
name,
Object
value)
Add a parameter for the transformation.
Uses of
Object
in
javax.xml.transform.dom
Subclasses of
Object
in
javax.xml.transform.dom
Modifier and Type
Class
Description
class
DOMResult
Acts as a holder for a transformation result tree
 in the form of a Document Object Model (DOM) tree.
class
DOMSource
Acts as a holder for a transformation Source tree in the
 form of a Document Object Model (DOM) tree.
Uses of
Object
in
javax.xml.transform.sax
Subclasses of
Object
in
javax.xml.transform.sax
Modifier and Type
Class
Description
class
SAXResult
Acts as an holder for a transformation Result.
class
SAXSource
Acts as an holder for SAX-style Source.
class
SAXTransformerFactory
This class extends TransformerFactory to provide SAX-specific
 factory methods.
Uses of
Object
in
javax.xml.transform.stax
Subclasses of
Object
in
javax.xml.transform.stax
Modifier and Type
Class
Description
class
StAXResult
Acts as a holder for an XML
Result
in the
 form of a StAX writer,i.e.
class
StAXSource
Acts as a holder for an XML
Source
in the
 form of a StAX reader,i.e.
Uses of
Object
in
javax.xml.transform.stream
Subclasses of
Object
in
javax.xml.transform.stream
Modifier and Type
Class
Description
class
StreamResult
Acts as an holder for a transformation result,
 which may be XML, plain Text, HTML, or some other form of markup.
class
StreamSource
Acts as an holder for a transformation Source in the form
 of a stream of XML markup.
Uses of
Object
in
javax.xml.validation
Subclasses of
Object
in
javax.xml.validation
Modifier and Type
Class
Description
class
Schema
Immutable in-memory representation of grammar.
class
SchemaFactory
Factory that creates
Schema
objects.
final class
SchemaFactoryConfigurationError
Thrown when a problem with configuration with the Schema Factories
 exists.
class
SchemaFactoryLoader
Factory that creates
SchemaFactory
.
class
TypeInfoProvider
This class provides access to the type information determined
 by
ValidatorHandler
.
class
Validator
A processor that checks an XML document against
Schema
.
class
ValidatorHandler
Streaming validator that works on SAX stream.
Methods in
javax.xml.validation
that return
Object
Modifier and Type
Method
Description
Object
SchemaFactory.
getProperty
(
String
name)
Look up the value of a property.
Object
Validator.
getProperty
(
String
name)
Look up the value of a property.
Object
ValidatorHandler.
getProperty
(
String
name)
Look up the value of a property.
Methods in
javax.xml.validation
with parameters of type
Object
Modifier and Type
Method
Description
void
SchemaFactory.
setProperty
(
String
name,
Object
object)
Set the value of a property.
void
Validator.
setProperty
(
String
name,
Object
object)
Set the value of a property.
void
ValidatorHandler.
setProperty
(
String
name,
Object
object)
Set the value of a property.
Uses of
Object
in
javax.xml.xpath
Subclasses of
Object
in
javax.xml.xpath
Modifier and Type
Class
Description
class
XPathConstants
XPath constants.
class
XPathException
XPathException
represents a generic XPath exception.
class
XPathExpressionException
XPathExpressionException
represents an error in an XPath expression.
class
XPathFactory
An
XPathFactory
instance can be used to create
XPath
objects.
class
XPathFactoryConfigurationException
XPathFactoryConfigurationException
represents
 a configuration error in a
XPathFactory
environment.
class
XPathFunctionException
XPathFunctionException
represents an error with an XPath function.
Methods in
javax.xml.xpath
that return
Object
Modifier and Type
Method
Description
Object
XPath.
evaluate
(
String
expression,
Object
item,
QName
returnType)
Evaluate an
XPath
expression in the specified context and
 return the result as the specified type.
Object
XPath.
evaluate
(
String
expression,
InputSource
source,
QName
returnType)
Evaluate an XPath expression in the context of the specified
InputSource
and return the result as the specified type.
Object
XPathExpression.
evaluate
(
Object
item,
QName
returnType)
Evaluate the compiled XPath expression in the specified context and return the result as the specified type.
Object
XPathExpression.
evaluate
(
InputSource
source,
QName
returnType)
Evaluate the compiled XPath expression in the context
 of the specified
InputSource
and return the result as the
 specified type.
Object
XPathFunction.
evaluate
(
List
<?> args)
Evaluate the function with the specified arguments.
Object
XPathVariableResolver.
resolveVariable
(
QName
variableName)
Find a variable in the set of available variables.
Methods in
javax.xml.xpath
with parameters of type
Object
Modifier and Type
Method
Description
String
XPath.
evaluate
(
String
expression,
Object
item)
Evaluate an XPath expression in the specified context and return the result as a
String
.
Object
XPath.
evaluate
(
String
expression,
Object
item,
QName
returnType)
Evaluate an
XPath
expression in the specified context and
 return the result as the specified type.
String
XPathExpression.
evaluate
(
Object
item)
Evaluate the compiled XPath expression in the specified context and return the result as a
String
.
Object
XPathExpression.
evaluate
(
Object
item,
QName
returnType)
Evaluate the compiled XPath expression in the specified context and return the result as the specified type.
default
XPathEvaluationResult
<?>
XPath.
evaluateExpression
(
String
expression,
Object
item)
Evaluate an XPath expression in the specified context.
default <T> T
XPath.
evaluateExpression
(
String
expression,
Object
item,
Class
<T> type)
Evaluate an XPath expression in the specified context and return
 the result with the type specified through the
class type
default
XPathEvaluationResult
<?>
XPathExpression.
evaluateExpression
(
Object
item)
Evaluate the compiled XPath expression in the specified context.
default <T> T
XPathExpression.
evaluateExpression
(
Object
item,
Class
<T> type)
Evaluate the compiled XPath expression in the specified context, and return
 the result with the type specified through the
class type
.
Uses of
Object
in
jdk.dynalink
Subclasses of
Object
in
jdk.dynalink
Modifier and Type
Class
Description
class
CallSiteDescriptor
Call site descriptors contain all the information necessary for linking a
 call site.
final class
DynamicLinker
The linker for
RelinkableCallSite
objects.
final class
DynamicLinkerFactory
A factory class for creating
DynamicLinker
objects.
final class
NamedOperation
Operation that associates a name with another operation.
final class
NamespaceOperation
Describes an operation that operates on at least one
Namespace
of
 an object.
class
NoSuchDynamicMethodException
Thrown at the invocation if the call site can not be linked by any available
GuardingDynamicLinker
.
class
SecureLookupSupplier
Provides security-checked access to a
MethodHandles.Lookup
object.
Methods in
jdk.dynalink
that return
Object
Modifier and Type
Method
Description
Object
NamedOperation.
getName
()
Returns the name of this named operation.
static
Object
NamedOperation.
getName
(
Operation
op)
If the passed operation is a named operation, returns its
NamedOperation.getName()
, otherwise returns null.
Methods in
jdk.dynalink
with parameters of type
Object
Modifier and Type
Method
Description
boolean
CallSiteDescriptor.
equals
(
Object
obj)
Returns true if this call site descriptor is equal to the passed object.
boolean
NamedOperation.
equals
(
Object
obj)
Compares this named operation to another object.
boolean
NamespaceOperation.
equals
(
Object
obj)
Returns true if the other object is also a namespace operation and their
 base operation and namespaces are equal.
default
NamedOperation
Operation.
named
(
Object
name)
Returns a
NamedOperation
using this operation as its base.
Constructors in
jdk.dynalink
with parameters of type
Object
Modifier
Constructor
Description
NamedOperation
(
Operation
baseOperation,
Object
name)
Creates a new named operation.
Uses of
Object
in
jdk.dynalink.beans
Subclasses of
Object
in
jdk.dynalink.beans
Modifier and Type
Class
Description
class
BeansLinker
A linker for ordinary Java objects.
final class
StaticClass
Object that allows access to the static members of a class (its static
 methods, properties, and fields), as well as construction of instances using
StandardOperation.NEW
operation.
Methods in
jdk.dynalink.beans
that return
Object
Modifier and Type
Method
Description
static
Object
BeansLinker.
getConstructorMethod
(
Class
<?> clazz,
String
signature)
Return the dynamic method of constructor of the given class and the given
 signature.
Methods in
jdk.dynalink.beans
with parameters of type
Object
Modifier and Type
Method
Description
static boolean
BeansLinker.
isDynamicConstructor
(
Object
obj)
Returns true if the object is a Java constructor (obtained through
BeansLinker.getConstructorMethod(Class, String)
}.
static boolean
BeansLinker.
isDynamicMethod
(
Object
obj)
Returns true if the object is a Java dynamic method (e.g., one
 obtained through a
GET:METHOD
operation on a Java object or
StaticClass
or through
BeansLinker.getConstructorMethod(Class, String)
.
Uses of
Object
in
jdk.dynalink.linker
Subclasses of
Object
in
jdk.dynalink.linker
Modifier and Type
Class
Description
class
GuardedInvocation
Represents a conditionally valid method handle.
class
GuardingDynamicLinkerExporter
A class acting as a supplier of guarding dynamic linkers that can be
 automatically loaded by other language runtimes.
Methods in
jdk.dynalink.linker
that return
Object
Modifier and Type
Method
Description
Object
[]
LinkRequest.
getArguments
()
Returns the arguments for the invocation being linked.
Object
LinkRequest.
getReceiver
()
Returns the first argument for the invocation being linked; this is
 typically the receiver object.
Methods in
jdk.dynalink.linker
with parameters of type
Object
Modifier and Type
Method
Description
LinkRequest
LinkRequest.
replaceArguments
(
CallSiteDescriptor
callSiteDescriptor,
Object
... arguments)
Returns a request identical to this one with call site descriptor and arguments replaced with the ones specified.
Uses of
Object
in
jdk.dynalink.linker.support
Subclasses of
Object
in
jdk.dynalink.linker.support
Modifier and Type
Class
Description
class
CompositeGuardingDynamicLinker
A
GuardingDynamicLinker
that delegates sequentially to a list of
 other guarding dynamic linkers in its
CompositeGuardingDynamicLinker.getGuardedInvocation(LinkRequest, LinkerServices)
.
class
CompositeTypeBasedGuardingDynamicLinker
A composite type-based guarding dynamic linker.
class
DefaultInternalObjectFilter
Default implementation for a
DynamicLinkerFactory.setInternalObjectsFilter(MethodHandleTransformer)
that delegates to a pair of filtering method handles.
final class
Guards
Utility methods for creating typical guards for
MethodHandles.guardWithTest(MethodHandle, MethodHandle, MethodHandle)
and for adjusting their method types.
final class
Lookup
A wrapper around
MethodHandles.Lookup
that masks
 checked exceptions.
class
SimpleLinkRequest
Default simple implementation of
LinkRequest
.
final class
TypeUtilities
Various static utility methods for working with Java types.
Methods in
jdk.dynalink.linker.support
that return
Object
Modifier and Type
Method
Description
Object
[]
SimpleLinkRequest.
getArguments
()
Object
SimpleLinkRequest.
getReceiver
()
Methods in
jdk.dynalink.linker.support
with parameters of type
Object
Modifier and Type
Method
Description
static
MethodHandle
Guards.
getIdentityGuard
(
Object
obj)
Creates a guard method that tests its only argument for being referentially identical to another object
LinkRequest
SimpleLinkRequest.
replaceArguments
(
CallSiteDescriptor
newCallSiteDescriptor,
Object
... newArguments)
Constructors in
jdk.dynalink.linker.support
with parameters of type
Object
Modifier
Constructor
Description
SimpleLinkRequest
(
CallSiteDescriptor
callSiteDescriptor,
 boolean callSiteUnstable,
Object
... arguments)
Creates a new link request.
Uses of
Object
in
jdk.dynalink.support
Subclasses of
Object
in
jdk.dynalink.support
Modifier and Type
Class
Description
class
AbstractRelinkableCallSite
A basic implementation of the
RelinkableCallSite
as a
MutableCallSite
.
class
ChainedCallSite
A relinkable call site that implements a polymorphic inline caching strategy.
class
SimpleRelinkableCallSite
A relinkable call site that implements monomorphic inline caching strategy,
 only being linked to a single
GuardedInvocation
at any given time.
Uses of
Object
in
jdk.incubator.vector
Subclasses of
Object
in
jdk.incubator.vector
Modifier and Type
Class
Description
class
ByteVector
A specialized
Vector
representing an ordered immutable sequence of
byte
values.
class
DoubleVector
A specialized
Vector
representing an ordered immutable sequence of
double
values.
class
FloatVector
A specialized
Vector
representing an ordered immutable sequence of
float
values.
class
IntVector
A specialized
Vector
representing an ordered immutable sequence of
int
values.
class
LongVector
A specialized
Vector
representing an ordered immutable sequence of
long
values.
class
ShortVector
A specialized
Vector
representing an ordered immutable sequence of
short
values.
class
Vector
<E>
A
sequence of a fixed number of
lanes
,
 all of some fixed
element type
such as
byte
,
long
, or
float
.
class
VectorMask
<E>
A
VectorMask
represents an ordered immutable sequence of
boolean
values.
class
VectorOperators
This class consists solely of static constants
 that describe lane-wise vector operations, plus nested interfaces
 which classify them.
class
VectorShuffle
<E>
A
VectorShuffle
represents an ordered immutable sequence of
int
values called
source indexes
, where each source
 index numerically selects a source lane from a compatible
Vector
.
Methods in
jdk.incubator.vector
that return
Object
Modifier and Type
Method
Description
abstract
Object
Vector.
toArray
()
Returns a packed array containing all the lane values.
Methods in
jdk.incubator.vector
with parameters of type
Object
Modifier and Type
Method
Description
final boolean
ByteVector.
equals
(
Object
obj)
Indicates whether this vector is identical to some other object.
final boolean
DoubleVector.
equals
(
Object
obj)
Indicates whether this vector is identical to some other object.
final boolean
FloatVector.
equals
(
Object
obj)
Indicates whether this vector is identical to some other object.
final boolean
IntVector.
equals
(
Object
obj)
Indicates whether this vector is identical to some other object.
final boolean
LongVector.
equals
(
Object
obj)
Indicates whether this vector is identical to some other object.
final boolean
ShortVector.
equals
(
Object
obj)
Indicates whether this vector is identical to some other object.
abstract boolean
Vector.
equals
(
Object
obj)
Indicates whether this vector is identical to some other object.
final boolean
VectorMask.
equals
(
Object
obj)
Indicates whether this mask is identical to some other object.
final boolean
VectorShuffle.
equals
(
Object
obj)
Indicates whether this shuffle is identical to some other object.
boolean
VectorSpecies.
equals
(
Object
obj)
Indicates whether this species is identical to some other object.
Vector
<
E
>
VectorSpecies.
fromArray
(
Object
a,
 int offset)
Returns a vector of this species
 where lane elements are initialized
 from the given array at the given offset.
Uses of
Object
in
jdk.javadoc.doclet
Subclasses of
Object
in
jdk.javadoc.doclet
Modifier and Type
Class
Description
class
StandardDoclet
This doclet generates HTML-formatted documentation for the specified modules,
 packages and types.
Uses of
Object
in
jdk.jfr
Subclasses of
Object
in
jdk.jfr
Modifier and Type
Class
Description
final class
AnnotationElement
Describes event metadata, such as labels, descriptions and units.
final class
Configuration
A collection of settings and metadata describing the configuration.
class
Event
Base class for events, to be subclassed in order to define events and their
 fields.
final class
EventFactory
Class for defining an event at runtime.
class
EventSettings
Convenience class for applying event settings to a recording.
final class
EventType
Describes an event, its fields, settings and annotations.
final class
FlightRecorder
Class for accessing, controlling, and managing Flight Recorder.
final class
FlightRecorderPermission
Permission for controlling access to Flight Recorder.
final class
Recording
Provides means to configure, start, stop and dump recording data to disk.
class
SettingControl
Base class to extend to create setting controls.
final class
SettingDescriptor
Describes an event setting.
final class
ValueDescriptor
Describes the event fields and annotation elements.
Methods in
jdk.jfr
that return
Object
Modifier and Type
Method
Description
Object
AnnotationElement.
getValue
(
String
name)
Returns a value for this
AnnotationElement
.
Methods in
jdk.jfr
that return types with arguments of type
Object
Modifier and Type
Method
Description
List
<
Object
>
AnnotationElement.
getValues
()
Returns an immutable list of annotation values in an order that matches the
 value descriptors for this
AnnotationElement
.
Methods in
jdk.jfr
with parameters of type
Object
Modifier and Type
Method
Description
final void
Event.
set
(int index,
Object
value)
Sets a field value.
Constructors in
jdk.jfr
with parameters of type
Object
Modifier
Constructor
Description
AnnotationElement
(
Class
<? extends
Annotation
> annotationType,
Object
value)
Creates an annotation element to use for dynamically defined events.
Constructor parameters in
jdk.jfr
with type arguments of type
Object
Modifier
Constructor
Description
AnnotationElement
(
Class
<? extends
Annotation
> annotationType,
Map
<
String
,
Object
> values)
Creates an annotation element to use for dynamically defined events.
Uses of
Object
in
jdk.jfr.consumer
Subclasses of
Object
in
jdk.jfr.consumer
Modifier and Type
Class
Description
final class
MetadataEvent
Event that contains information about event types and configurations.
final class
RecordedClass
A recorded Java type, such as a class or an interface.
final class
RecordedClassLoader
A recorded Java class loader.
final class
RecordedEvent
A recorded event.
final class
RecordedFrame
A recorded frame in a stack trace.
final class
RecordedMethod
A recorded method.
class
RecordedObject
A complex data type that consists of one or more fields.
final class
RecordedStackTrace
A recorded stack trace.
final class
RecordedThread
A recorded thread.
final class
RecordedThreadGroup
A recorded Java thread group.
final class
RecordingFile
A recording file.
final class
RecordingStream
A recording stream produces events from the current JVM (Java Virtual
 Machine).
Methods in
jdk.jfr.consumer
with parameters of type
Object
Modifier and Type
Method
Description
boolean
EventStream.
remove
(
Object
action)
Unregisters an action.
boolean
RecordingStream.
remove
(
Object
action)
Uses of
Object
in
jdk.jshell
Subclasses of
Object
in
jdk.jshell
Modifier and Type
Class
Description
class
DeclarationSnippet
Grouping for all declaration Snippets: variable declarations
 (
VarSnippet
), method declarations
 (
MethodSnippet
), and type declarations
 (
TypeDeclSnippet
).
class
Diag
Diagnostic information for a Snippet.
class
ErroneousSnippet
A snippet of code that is not valid Java programming language code.
class
EvalException
Wraps an throwable thrown in the executing client.
class
ExpressionSnippet
Snippet for an assignment or variable-value expression.
class
ImportSnippet
Snippet for an import declaration.
class
JShell
The JShell evaluation state engine.
static class
JShell.Builder
Builder for
JShell
instances.
class
JShell.Subscription
Subscription is a token for referring to subscriptions so they can
 be
unsubscribed
.
class
JShellException
The superclass of JShell generated exceptions
class
MethodSnippet
Snippet for a method definition.
class
PersistentSnippet
Grouping for Snippets which persist and influence future code.
class
Snippet
A Snippet represents a snippet of Java source code as passed to
JShell.eval(java.lang.String)
.
class
SnippetEvent
A description of a change to a Snippet.
class
SourceCodeAnalysis
Provides analysis utilities for source code input.
static final class
SourceCodeAnalysis.QualifiedNames
List of possible qualified names.
class
StatementSnippet
Snippet for a statement.
class
TypeDeclSnippet
Snippet for a type definition (a class, interface, enum, or annotation
 interface definition).
class
UnresolvedReferenceException
Exception reported on attempting to execute a
RECOVERABLE_DEFINED
snippet.
class
VarSnippet
Snippet for a variable definition.
Methods in
jdk.jshell
with parameters of type
Object
Modifier and Type
Method
Description
final boolean
SourceCodeAnalysis.Highlight.
equals
(
Object
o)
Indicates whether some other object is "equal to" this one.
Uses of
Object
in
jdk.jshell.execution
Subclasses of
Object
in
jdk.jshell.execution
Modifier and Type
Class
Description
class
DirectExecutionControl
An
ExecutionControl
implementation that runs in the current process.
class
FailOverExecutionControlProvider
Tries other providers in sequence until one works.
class
JdiDefaultExecutionControl
The implementation of
ExecutionControl
that the
 JShell-core uses by default.
class
JdiExecutionControl
Abstract JDI implementation of
ExecutionControl
.
class
JdiExecutionControlProvider
A provider of remote JDI-controlled execution engines.
class
JdiInitiator
Sets up a JDI connection, providing the resulting JDI
VirtualMachine
and the
Process
the remote agent is running in.
class
LocalExecutionControl
An implementation of
ExecutionControl
which executes
 in the same JVM as the JShell-core.
class
LocalExecutionControlProvider
A provider of execution engines which run in the same process as JShell.
class
RemoteExecutionControl
The remote agent runs in the execution process (separate from the main JShell
 process).
class
StreamingExecutionControl
An implementation of the
ExecutionControl
execution engine SPI which streams requests to a remote agent where
 execution takes place.
class
Util
Miscellaneous utility methods for setting-up implementations of
ExecutionControl
.
Methods in
jdk.jshell.execution
that return
Object
Modifier and Type
Method
Description
Object
DirectExecutionControl.
extensionCommand
(
String
command,
Object
arg)
Object
StreamingExecutionControl.
extensionCommand
(
String
command,
Object
arg)
Methods in
jdk.jshell.execution
with parameters of type
Object
Modifier and Type
Method
Description
Object
DirectExecutionControl.
extensionCommand
(
String
command,
Object
arg)
Object
StreamingExecutionControl.
extensionCommand
(
String
command,
Object
arg)
protected static
String
DirectExecutionControl.
valueString
(
Object
value)
Converts the
Object
value from
ExecutionControl.invoke(String, String)
or
ExecutionControl.varValue(String, String)
to
String
.
Uses of
Object
in
jdk.jshell.spi
Subclasses of
Object
in
jdk.jshell.spi
Modifier and Type
Class
Description
static final class
ExecutionControl.ClassBytecodes
Bundles class name with class bytecodes.
static class
ExecutionControl.ClassInstallException
A class install (load or redefine) encountered a problem.
static class
ExecutionControl.EngineTerminationException
Unbidden execution engine termination has occurred.
static class
ExecutionControl.ExecutionControlException
The abstract base of all
ExecutionControl
exceptions.
static class
ExecutionControl.InternalException
An internal problem has occurred.
static class
ExecutionControl.NotImplementedException
The command is not implemented.
static class
ExecutionControl.ResolutionException
An exception indicating that a
DeclarationSnippet
with unresolved
 references has been encountered.
static class
ExecutionControl.RunException
The abstract base of of exceptions specific to running user code.
static class
ExecutionControl.StoppedException
An exception indicating that an
ExecutionControl.invoke(java.lang.String, java.lang.String)
(or theoretically a
ExecutionControl.varValue(java.lang.String, java.lang.String)
)
 has been interrupted by a
ExecutionControl.stop()
.
static class
ExecutionControl.UserException
A 'normal' user exception occurred.
class
SPIResolutionException
The construction and throw of this exception is embedded in code generated by
 the JShell core implementation in such a way that, upon executing a
RECOVERABLE_DEFINED
user method, this exception is thrown.
Methods in
jdk.jshell.spi
that return
Object
Modifier and Type
Method
Description
Object
ExecutionControl.
extensionCommand
(
String
command,
Object
arg)
Run a non-standard command (or a standard command from a newer version).
Methods in
jdk.jshell.spi
with parameters of type
Object
Modifier and Type
Method
Description
Object
ExecutionControl.
extensionCommand
(
String
command,
Object
arg)
Run a non-standard command (or a standard command from a newer version).
Uses of
Object
in
jdk.management.jfr
Subclasses of
Object
in
jdk.management.jfr
Modifier and Type
Class
Description
final class
ConfigurationInfo
Management representation of a
Configuration
.
final class
EventTypeInfo
Management representation of an
EventType
.
final class
RecordingInfo
Management representation of a
Recording
.
final class
RemoteRecordingStream
An implementation of an
EventStream
that can serialize events over
 the network using an
MBeanServerConnection
.
final class
SettingDescriptorInfo
Management class that describes a setting, for example name, description and
 default value.
Methods in
jdk.management.jfr
with parameters of type
Object
Modifier and Type
Method
Description
boolean
RemoteRecordingStream.
remove
(
Object
action)
Uses of
Object
in
jdk.net
Subclasses of
Object
in
jdk.net
Modifier and Type
Class
Description
final class
ExtendedSocketOptions
Defines extended socket options, beyond those defined in
StandardSocketOptions
.
final class
NetworkPermission
Represents permission to access the extended networking capabilities
 defined in the jdk.net package.
class
Sockets
Deprecated.
Java SE 9 added standard methods to set/get socket options, and retrieve the per-Socket
 supported options effectively rendering this API redundant.
Methods in
jdk.net
with parameters of type
Object
Modifier and Type
Method
Description
final boolean
UnixDomainPrincipal.
equals
(
Object
o)
Indicates whether some other object is "equal to" this one.
Uses of
Object
in
jdk.nio
Subclasses of
Object
in
jdk.nio
Modifier and Type
Class
Description
final class
Channels
Defines static methods to create
channels
.
Uses of
Object
in
jdk.nio.mapmode
Subclasses of
Object
in
jdk.nio.mapmode
Modifier and Type
Class
Description
class
ExtendedMapMode
JDK-specific map modes.
Uses of
Object
in
jdk.security.jarsigner
Subclasses of
Object
in
jdk.security.jarsigner
Modifier and Type
Class
Description
final class
JarSigner
An immutable utility class to sign a jar file.
static class
JarSigner.Builder
A mutable builder class that can create an immutable
JarSigner
from various signing-related parameters.
class
JarSignerException
This exception is thrown when
JarSigner.sign(java.util.zip.ZipFile, java.io.OutputStream)
fails.
Uses of
Object
in
netscape.javascript
Subclasses of
Object
in
netscape.javascript
Modifier and Type
Class
Description
class
JSException
Thrown when an exception is raised in the JavaScript engine.
class
JSObject
Allows Java code to manipulate JavaScript objects.
Methods in
netscape.javascript
that return
Object
Modifier and Type
Method
Description
abstract
Object
JSObject.
call
(
String
methodName,
Object
... args)
Calls a JavaScript method.
abstract
Object
JSObject.
eval
(
String
s)
Evaluates a JavaScript expression.
abstract
Object
JSObject.
getMember
(
String
name)
Retrieves a named member of a JavaScript object.
abstract
Object
JSObject.
getSlot
(int index)
Retrieves an indexed member of a JavaScript object.
Methods in
netscape.javascript
with parameters of type
Object
Modifier and Type
Method
Description
abstract
Object
JSObject.
call
(
String
methodName,
Object
... args)
Calls a JavaScript method.
abstract void
JSObject.
setMember
(
String
name,
Object
value)
Sets a named member of a JavaScript object.
abstract void
JSObject.
setSlot
(int index,
Object
value)
Sets an indexed member of a JavaScript object.
Uses of
Object
in
org.ietf.jgss
Subclasses of
Object
in
org.ietf.jgss
Modifier and Type
Class
Description
class
ChannelBinding
This class encapsulates the concept of caller-provided channel
 binding information.
class
GSSException
This exception is thrown whenever a GSS-API error occurs, including
 any mechanism specific error.
class
GSSManager
This class serves as a factory for other important
 GSS-API classes and also provides information about the mechanisms that
 are supported.
class
MessageProp
This is a utility class used within the per-message GSSContext
 methods to convey per-message properties.
class
Oid
This class represents Universal Object Identifiers (Oids) and their
 associated operations.
Methods in
org.ietf.jgss
with parameters of type
Object
Modifier and Type
Method
Description
boolean
ChannelBinding.
equals
(
Object
obj)
Compares two instances of ChannelBinding.
boolean
GSSCredential.
equals
(
Object
another)
Tests if this GSSCredential asserts the same entity as the supplied
 object.
boolean
GSSName.
equals
(
Object
another)
Compares this
GSSName
object to another Object that might be a
GSSName
.
boolean
Oid.
equals
(
Object
other)
Tests if two Oid objects represent the same Object identifier
 value.
Uses of
Object
in
org.w3c.dom
Subclasses of
Object
in
org.w3c.dom
Modifier and Type
Class
Description
class
DOMException
DOM operations only raise exceptions in "exceptional" circumstances, i.e.,
 when an operation is impossible to perform (either for logical reasons,
 because data is lost, or because the implementation has become unstable).
Methods in
org.w3c.dom
that return
Object
Modifier and Type
Method
Description
Object
DOMImplementation.
getFeature
(
String
feature,
String
version)
This method returns a specialized object which implements the
 specialized APIs of the specified feature and version, as specified
 in
DOM Features
.
Object
Node.
getFeature
(
String
feature,
String
version)
This method returns a specialized object which implements the
 specialized APIs of the specified feature and version, as specified
 in .
Object
DOMConfiguration.
getParameter
(
String
name)
Return the value of a parameter if known.
Object
DOMError.
getRelatedData
()
The related
DOMError.type
dependent data if any.
Object
DOMError.
getRelatedException
()
The related platform dependent exception if any.
Object
Node.
getUserData
(
String
key)
Retrieves the object associated to a key on a this node.
Object
Node.
setUserData
(
String
key,
Object
data,
UserDataHandler
handler)
Associate an object to a key on this node.
Methods in
org.w3c.dom
with parameters of type
Object
Modifier and Type
Method
Description
boolean
DOMConfiguration.
canSetParameter
(
String
name,
Object
value)
Check if setting a parameter to a specific value is supported.
void
UserDataHandler.
handle
(short operation,
String
key,
Object
data,
Node
src,
Node
dst)
This method is called whenever the node for which this handler is
 registered is imported or cloned.
void
DOMConfiguration.
setParameter
(
String
name,
Object
value)
Set the value of a parameter.
Object
Node.
setUserData
(
String
key,
Object
data,
UserDataHandler
handler)
Associate an object to a key on this node.
Uses of
Object
in
org.w3c.dom.bootstrap
Subclasses of
Object
in
org.w3c.dom.bootstrap
Modifier and Type
Class
Description
final class
DOMImplementationRegistry
A factory that enables applications to obtain instances of
DOMImplementation
.
Uses of
Object
in
org.w3c.dom.events
Subclasses of
Object
in
org.w3c.dom.events
Modifier and Type
Class
Description
class
EventException
Event operations may throw an
EventException
as specified in
 their method descriptions.
Uses of
Object
in
org.w3c.dom.ls
Subclasses of
Object
in
org.w3c.dom.ls
Modifier and Type
Class
Description
class
LSException
Parser or write operations may throw an
LSException
if the
 processing is stopped.
Uses of
Object
in
org.w3c.dom.ranges
Subclasses of
Object
in
org.w3c.dom.ranges
Modifier and Type
Class
Description
class
RangeException
Range operations may throw a
RangeException
as specified in
 their method descriptions.
Uses of
Object
in
org.w3c.dom.xpath
Subclasses of
Object
in
org.w3c.dom.xpath
Modifier and Type
Class
Description
class
XPathException
A new exception has been created for exceptions specific to these XPath
 interfaces.
Methods in
org.w3c.dom.xpath
that return
Object
Modifier and Type
Method
Description
Object
XPathEvaluator.
evaluate
(
String
expression,
Node
contextNode,
XPathNSResolver
resolver,
 short type,
Object
result)
Evaluates an XPath expression string and returns a result of the
 specified type if possible.
Object
XPathExpression.
evaluate
(
Node
contextNode,
 short type,
Object
result)
Evaluates this XPath expression and returns a result.
Methods in
org.w3c.dom.xpath
with parameters of type
Object
Modifier and Type
Method
Description
Object
XPathEvaluator.
evaluate
(
String
expression,
Node
contextNode,
XPathNSResolver
resolver,
 short type,
Object
result)
Evaluates an XPath expression string and returns a result of the
 specified type if possible.
Object
XPathExpression.
evaluate
(
Node
contextNode,
 short type,
Object
result)
Evaluates this XPath expression and returns a result.
Uses of
Object
in
org.xml.sax
Subclasses of
Object
in
org.xml.sax
Modifier and Type
Class
Description
class
HandlerBase
Deprecated.
This class works with the deprecated
DocumentHandler
interface.
class
InputSource
A single input source for an XML entity.
class
SAXException
Encapsulate a general SAX error or warning.
class
SAXNotRecognizedException
Exception class for an unrecognized identifier.
class
SAXNotSupportedException
Exception class for an unsupported operation.
class
SAXParseException
Encapsulate an XML parse error or warning.
Methods in
org.xml.sax
that return
Object
Modifier and Type
Method
Description
Object
XMLReader.
getProperty
(
String
name)
Look up the value of a property.
Methods in
org.xml.sax
with parameters of type
Object
Modifier and Type
Method
Description
void
XMLReader.
setProperty
(
String
name,
Object
value)
Set the value of a property.
Uses of
Object
in
org.xml.sax.ext
Subclasses of
Object
in
org.xml.sax.ext
Modifier and Type
Class
Description
class
Attributes2Impl
SAX2 extension helper for additional Attributes information,
 implementing the
Attributes2
interface.
class
DefaultHandler2
This class extends the SAX2 base handler class to support the
 SAX2
LexicalHandler
,
DeclHandler
, and
EntityResolver2
extensions.
class
Locator2Impl
SAX2 extension helper for holding additional Entity information,
 implementing the
Locator2
interface.
Uses of
Object
in
org.xml.sax.helpers
Subclasses of
Object
in
org.xml.sax.helpers
Modifier and Type
Class
Description
class
AttributeListImpl
Deprecated.
This class implements a deprecated interface,
AttributeList
;
             that interface has been replaced by
Attributes
,
             which is implemented in the
AttributesImpl
helper class.
class
AttributesImpl
Default implementation of the Attributes interface.
class
DefaultHandler
Default base class for SAX2 event handlers.
class
LocatorImpl
Provide an optional convenience implementation of Locator.
class
NamespaceSupport
Encapsulate Namespace logic for use by applications using SAX,
 or internally by SAX drivers.
class
ParserAdapter
Adapt a SAX1 Parser as a SAX2 XMLReader.
class
ParserFactory
Deprecated.
This class works with the deprecated
Parser
interface.
class
XMLFilterImpl
Base class for deriving an XML filter.
class
XMLReaderAdapter
Adapt a SAX2 XMLReader as a SAX1 Parser.
final class
XMLReaderFactory
Deprecated.
It is recommended to use
SAXParserFactory
instead.
Methods in
org.xml.sax.helpers
that return
Object
Modifier and Type
Method
Description
Object
ParserAdapter.
getProperty
(
String
name)
Get a parser property.
Object
XMLFilterImpl.
getProperty
(
String
name)
Look up the value of a property.
Methods in
org.xml.sax.helpers
with parameters of type
Object
Modifier and Type
Method
Description
void
ParserAdapter.
setProperty
(
String
name,
Object
value)
Set a parser property.
void
XMLFilterImpl.
setProperty
(
String
name,
Object
value)
Set the value of a property.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.