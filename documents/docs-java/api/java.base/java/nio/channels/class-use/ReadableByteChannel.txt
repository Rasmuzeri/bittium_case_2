Uses of Interface java.nio.channels.ReadableByteChannel (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Interface
java.nio.channels.ReadableByteChannel
Packages that use
ReadableByteChannel
Package
Description
java.nio.channels
Defines channels, which represent connections to entities that are capable of
 performing I/O operations, such as files and sockets; defines selectors, for
 multiplexed, non-blocking I/O operations.
java.util
Contains the collections framework, some internationalization support classes,
 a service loader, properties, random number generation, string parsing
 and scanning classes, base64 encoding and decoding, a bit array, and
 several miscellaneous utility classes.
Uses of
ReadableByteChannel
in
java.nio.channels
Subinterfaces of
ReadableByteChannel
in
java.nio.channels
Modifier and Type
Interface
Description
interface
ByteChannel
A channel that can read and write bytes.
interface
ScatteringByteChannel
A channel that can read bytes into a sequence of buffers.
interface
SeekableByteChannel
A byte channel that maintains a current
position
and allows the
 position to be changed.
Classes in
java.nio.channels
that implement
ReadableByteChannel
Modifier and Type
Class
Description
class
DatagramChannel
A selectable channel for datagram-oriented sockets.
class
FileChannel
A channel for reading, writing, mapping, and manipulating a file.
static class
Pipe.SourceChannel
A channel representing the readable end of a
Pipe
.
class
SocketChannel
A selectable channel for stream-oriented connecting sockets.
Methods in
java.nio.channels
that return
ReadableByteChannel
Modifier and Type
Method
Description
static
ReadableByteChannel
Channels.
newChannel
(
InputStream
in)
Constructs a channel that reads bytes from the given stream.
Methods in
java.nio.channels
with parameters of type
ReadableByteChannel
Modifier and Type
Method
Description
static
InputStream
Channels.
newInputStream
(
ReadableByteChannel
ch)
Constructs a stream that reads bytes from the given channel.
static
Reader
Channels.
newReader
(
ReadableByteChannel
ch,
String
csName)
Constructs a reader that decodes bytes from the given channel according
 to the named charset.
static
Reader
Channels.
newReader
(
ReadableByteChannel
ch,
Charset
charset)
Constructs a reader that decodes bytes from the given channel according
 to the given charset.
static
Reader
Channels.
newReader
(
ReadableByteChannel
ch,
CharsetDecoder
dec,
 int minBufferCap)
Constructs a reader that decodes bytes from the given channel using the
 given decoder.
abstract long
FileChannel.
transferFrom
(
ReadableByteChannel
src,
 long position,
 long count)
Transfers bytes into this channel's file from the given readable byte
 channel.
Uses of
ReadableByteChannel
in
java.util
Constructors in
java.util
with parameters of type
ReadableByteChannel
Modifier
Constructor
Description
Scanner
(
ReadableByteChannel
source)
Constructs a new
Scanner
that produces values scanned
 from the specified channel.
Scanner
(
ReadableByteChannel
source,
String
charsetName)
Constructs a new
Scanner
that produces values scanned
 from the specified channel.
Scanner
(
ReadableByteChannel
source,
Charset
charset)
Constructs a new
Scanner
that produces values scanned
 from the specified channel.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.