CharacterData (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field
|
Constr |
Method
Detail:
Field |
Constr |
Method
SEARCH
Module
java.xml
Package
org.w3c.dom
Interface CharacterData
All Superinterfaces:
Node
All Known Subinterfaces:
CDATASection
,
Comment
,
Text
public interface
CharacterData
extends
Node
The
CharacterData
interface extends Node with a set of
 attributes and methods for accessing character data in the DOM. For
 clarity this set is defined here rather than on each object that uses
 these attributes and methods. No DOM objects correspond directly to
CharacterData
, though
Text
and others do
 inherit the interface from it. All
offsets
in this interface
 start from
0
.
As explained in the
DOMString
interface, text strings in
 the DOM are represented in UTF-16, i.e. as a sequence of 16-bit units. In
 the following, the term 16-bit units is used whenever necessary to
 indicate that indexing on CharacterData is done in 16-bit units.
See also the
Document Object Model (DOM) Level 3 Core Specification
.
Field Summary
Fields declared in interface org.w3c.dom.
Node
ATTRIBUTE_NODE
,
CDATA_SECTION_NODE
,
COMMENT_NODE
,
DOCUMENT_FRAGMENT_NODE
,
DOCUMENT_NODE
,
DOCUMENT_POSITION_CONTAINED_BY
,
DOCUMENT_POSITION_CONTAINS
,
DOCUMENT_POSITION_DISCONNECTED
,
DOCUMENT_POSITION_FOLLOWING
,
DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC
,
DOCUMENT_POSITION_PRECEDING
,
DOCUMENT_TYPE_NODE
,
ELEMENT_NODE
,
ENTITY_NODE
,
ENTITY_REFERENCE_NODE
,
NOTATION_NODE
,
PROCESSING_INSTRUCTION_NODE
,
TEXT_NODE
Method Summary
All Methods
Instance Methods
Abstract Methods
Modifier and Type
Method
Description
void
appendData
(
String
arg)
Append the string to the end of the character data of the node.
void
deleteData
(int offset,
 int count)
Remove a range of 16-bit units from the node.
String
getData
()
The character data of the node that implements this interface.
int
getLength
()
The number of 16-bit units that are available through
data
and the
substringData
method below.
void
insertData
(int offset,
String
arg)
Insert a string at the specified 16-bit unit offset.
void
replaceData
(int offset,
 int count,
String
arg)
Replace the characters starting at the specified 16-bit unit offset
 with the specified string.
void
setData
(
String
data)
The character data of the node that implements this interface.
String
substringData
(int offset,
 int count)
Extracts a range of data from the node.
Methods declared in interface org.w3c.dom.
Node
appendChild
,
cloneNode
,
compareDocumentPosition
,
getAttributes
,
getBaseURI
,
getChildNodes
,
getFeature
,
getFirstChild
,
getLastChild
,
getLocalName
,
getNamespaceURI
,
getNextSibling
,
getNodeName
,
getNodeType
,
getNodeValue
,
getOwnerDocument
,
getParentNode
,
getPrefix
,
getPreviousSibling
,
getTextContent
,
getUserData
,
hasAttributes
,
hasChildNodes
,
insertBefore
,
isDefaultNamespace
,
isEqualNode
,
isSameNode
,
isSupported
,
lookupNamespaceURI
,
lookupPrefix
,
normalize
,
removeChild
,
replaceChild
,
setNodeValue
,
setPrefix
,
setTextContent
,
setUserData
Method Details
getData
String
getData
()
        throws
DOMException
The character data of the node that implements this interface. The DOM
 implementation may not put arbitrary limits on the amount of data
 that may be stored in a
CharacterData
node. However,
 implementation limits may mean that the entirety of a node's data may
 not fit into a single
DOMString
. In such cases, the user
 may call
substringData
to retrieve the data in
 appropriately sized pieces.
Throws:
DOMException
- DOMSTRING_SIZE_ERR: Raised when it would return more characters than
   fit in a
DOMString
variable on the implementation
   platform.
setData
void
setData
(
String
data)
throws
DOMException
The character data of the node that implements this interface. The DOM
 implementation may not put arbitrary limits on the amount of data
 that may be stored in a
CharacterData
node. However,
 implementation limits may mean that the entirety of a node's data may
 not fit into a single
DOMString
. In such cases, the user
 may call
substringData
to retrieve the data in
 appropriately sized pieces.
Throws:
DOMException
- NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.
getLength
int
getLength
()
The number of 16-bit units that are available through
data
and the
substringData
method below. This may have the
 value zero, i.e.,
CharacterData
nodes may be empty.
substringData
String
substringData
(int offset,
 int count)
throws
DOMException
Extracts a range of data from the node.
Parameters:
offset
- Start offset of substring to extract.
count
- The number of 16-bit units to extract.
Returns:
The specified substring. If the sum of
offset
and
count
exceeds the
length
, then all 16-bit
   units to the end of the data are returned.
Throws:
DOMException
- INDEX_SIZE_ERR: Raised if the specified
offset
is
   negative or greater than the number of 16-bit units in
data
, or if the specified
count
is
   negative.
DOMSTRING_SIZE_ERR: Raised if the specified range of text does
   not fit into a
DOMString
.
appendData
void
appendData
(
String
arg)
throws
DOMException
Append the string to the end of the character data of the node. Upon
 success,
data
provides access to the concatenation of
data
and the
DOMString
specified.
Parameters:
arg
- The
DOMString
to append.
Throws:
DOMException
- NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
insertData
void
insertData
(int offset,
String
arg)
throws
DOMException
Insert a string at the specified 16-bit unit offset.
Parameters:
offset
- The character offset at which to insert.
arg
- The
DOMString
to insert.
Throws:
DOMException
- INDEX_SIZE_ERR: Raised if the specified
offset
is
   negative or greater than the number of 16-bit units in
data
.
NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
deleteData
void
deleteData
(int offset,
 int count)
throws
DOMException
Remove a range of 16-bit units from the node. Upon success,
data
and
length
reflect the change.
Parameters:
offset
- The offset from which to start removing.
count
- The number of 16-bit units to delete. If the sum of
offset
and
count
exceeds
length
then all 16-bit units from
offset
to the end of the data are deleted.
Throws:
DOMException
- INDEX_SIZE_ERR: Raised if the specified
offset
is
   negative or greater than the number of 16-bit units in
data
, or if the specified
count
is
   negative.
NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
replaceData
void
replaceData
(int offset,
 int count,
String
arg)
throws
DOMException
Replace the characters starting at the specified 16-bit unit offset
 with the specified string.
Parameters:
offset
- The offset from which to start replacing.
count
- The number of 16-bit units to replace. If the sum of
offset
and
count
exceeds
length
, then all 16-bit units to the end of the data
   are replaced; (i.e., the effect is the same as a
remove
method call with the same range, followed by an
append
method invocation).
arg
- The
DOMString
with which the range must be
   replaced.
Throws:
DOMException
- INDEX_SIZE_ERR: Raised if the specified
offset
is
   negative or greater than the number of 16-bit units in
data
, or if the specified
count
is
   negative.
NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.