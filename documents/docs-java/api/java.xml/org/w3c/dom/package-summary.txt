org.w3c.dom (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Package:
Description
Related Packages
Classes and Interfaces
Package:
Description
|
Related Packages
|
Classes and Interfaces
SEARCH
Module
java.xml
Package org.w3c.dom
package
org.w3c.dom
Provides the interfaces for the Document Object Model (DOM). Supports the
Document Object Model (DOM) Level 2 Core Specification
,
Document Object Model (DOM) Level 3 Core Specification
,
 and
Document Object Model (DOM) Level 3 Load and Save Specification
.
API Note:
The documentation comments for the get and set methods within this API are
 written as property definitions and are shared between both methods. These
 methods do not follow the standard Java SE specification format.
Take the
Node
TextContent property as an example, both
getTextContent
and
setTextContent
shared the same
 content that defined the TextContent property itself.
Since:
1.4
Related Packages
Module
Package
Description
java.xml
org.w3c.dom.bootstrap
Provides a factory for obtaining instances of
DOMImplementation
.
jdk.xml.dom
org.w3c.dom.css
Provides interfaces for DOM Level 2 Style Specification.
java.xml
org.w3c.dom.events
Provides interfaces for DOM Level 2 Events.
jdk.xml.dom
org.w3c.dom.html
Provides interfaces for DOM Level 2 HTML Specification.
java.xml
org.w3c.dom.ls
Provides interfaces for DOM Level 3 Load and Save.
java.xml
org.w3c.dom.ranges
Provides interfaces for DOM Level 2 Range.
jdk.xml.dom
org.w3c.dom.stylesheets
Provides interfaces for DOM Level 2 Style Specification.
java.xml
org.w3c.dom.traversal
Provides interfaces for DOM Level 2 Traversal.
java.xml
org.w3c.dom.views
Provides interfaces for DOM Level 2 Views.
jdk.xml.dom
org.w3c.dom.xpath
Provides interfaces for DOM Level 3 XPath Specification.
All Classes and Interfaces
Interfaces
Exception Classes
Class
Description
Attr
The
Attr
interface represents an attribute in an
Element
object.
CDATASection
CDATA sections are used to escape blocks of text containing characters that
 would otherwise be regarded as markup.
CharacterData
The
CharacterData
interface extends Node with a set of
 attributes and methods for accessing character data in the DOM.
Comment
This interface inherits from
CharacterData
and represents the
 content of a comment, i.e., all the characters between the starting
 '
<!--
' and ending '
-->
'.
Document
The
Document
interface represents the entire HTML or XML
 document.
DocumentFragment
DocumentFragment
is a "lightweight" or "minimal"
Document
object.
DocumentType
Each
Document
has a
doctype
attribute whose value
 is either
null
or a
DocumentType
object.
DOMConfiguration
The
DOMConfiguration
interface represents the configuration
 of a document and maintains a table of recognized parameters.
DOMError
DOMError
is an interface that describes an error.
DOMErrorHandler
DOMErrorHandler
is a callback interface that the DOM
 implementation can call when reporting errors that happens while
 processing XML data, or when doing some other processing (e.g. validating
 a document).
DOMException
DOM operations only raise exceptions in "exceptional" circumstances, i.e.,
 when an operation is impossible to perform (either for logical reasons,
 because data is lost, or because the implementation has become unstable).
DOMImplementation
The
DOMImplementation
interface provides a number of methods
 for performing operations that are independent of any particular instance
 of the document object model.
DOMImplementationList
The
DOMImplementationList
interface provides the abstraction
 of an ordered collection of DOM implementations, without defining or
 constraining how this collection is implemented.
DOMImplementationSource
This interface permits a DOM implementer to supply one or more
 implementations, based upon requested features and versions, as specified
 in
DOM
 Features
.
DOMLocator
DOMLocator
is an interface that describes a location (e.g.
DOMStringList
The
DOMStringList
interface provides the abstraction of an
 ordered collection of
DOMString
values, without defining or
 constraining how this collection is implemented.
Element
The
Element
interface represents an element in an HTML or XML
 document.
ElementTraversal
The
ElementTraversal
interface is a set of read-only attributes
 which allow an author to easily navigate between elements in a document.
Entity
This interface represents a known entity, either parsed or unparsed, in an
 XML document.
EntityReference
EntityReference
nodes may be used to represent an entity
 reference in the tree.
NamedNodeMap
Objects implementing the
NamedNodeMap
interface are used to
 represent collections of nodes that can be accessed by name.
NameList
The
NameList
interface provides the abstraction of an ordered
 collection of parallel pairs of name and namespace values (which could be
 null values), without defining or constraining how this collection is
 implemented.
Node
The
Node
interface is the primary datatype for the entire
 Document Object Model.
NodeList
The
NodeList
interface provides the abstraction of an ordered
 collection of nodes, without defining or constraining how this collection
 is implemented.
Notation
This interface represents a notation declared in the DTD.
ProcessingInstruction
The
ProcessingInstruction
interface represents a "processing
 instruction", used in XML as a way to keep processor-specific information
 in the text of the document.
Text
The
Text
interface inherits from
CharacterData
and represents the textual content (termed
character data
in XML) of an
Element
or
Attr
.
TypeInfo
The
TypeInfo
interface represents a type referenced from
Element
or
Attr
nodes, specified in the schemas
 associated with the document.
UserDataHandler
When associating an object to a key on a node using
Node.setUserData()
the application can provide a handler
 that gets called when the node the object is associated to is being
 cloned, imported, or renamed.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
Â© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.