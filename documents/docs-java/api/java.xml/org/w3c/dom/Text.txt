Text (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field
|
Constr |
Method
Detail:
Field |
Constr |
Method
SEARCH
Module
java.xml
Package
org.w3c.dom
Interface Text
All Superinterfaces:
CharacterData
,
Node
All Known Subinterfaces:
CDATASection
public interface
Text
extends
CharacterData
The
Text
interface inherits from
CharacterData
and represents the textual content (termed
character data
in XML) of an
Element
or
Attr
. If there is no
 markup inside an element's content, the text is contained in a single
 object implementing the
Text
interface that is the only
 child of the element. If there is markup, it is parsed into the
 information items (elements, comments, etc.) and
Text
nodes
 that form the list of children of the element.
When a document is first made available via the DOM, there is only one
Text
node for each block of text. Users may create adjacent
Text
nodes that represent the contents of a given element
 without any intervening markup, but should be aware that there is no way
 to represent the separations between these nodes in XML or HTML, so they
 will not (in general) persist between DOM editing sessions. The
Node.normalize()
method merges any such adjacent
Text
objects into a single node for each block of text.
No lexical check is done on the content of a
Text
node
 and, depending on its position in the document, some characters must be
 escaped during serialization using character references; e.g. the
 characters "<&" if the textual content is part of an element or of
 an attribute, the character sequence "]]>" when part of an element,
 the quotation mark character " or the apostrophe character ' when part of
 an attribute.
See also the
Document Object Model (DOM) Level 3 Core Specification
.
Field Summary
Fields declared in interface org.w3c.dom.
Node
ATTRIBUTE_NODE
,
CDATA_SECTION_NODE
,
COMMENT_NODE
,
DOCUMENT_FRAGMENT_NODE
,
DOCUMENT_NODE
,
DOCUMENT_POSITION_CONTAINED_BY
,
DOCUMENT_POSITION_CONTAINS
,
DOCUMENT_POSITION_DISCONNECTED
,
DOCUMENT_POSITION_FOLLOWING
,
DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC
,
DOCUMENT_POSITION_PRECEDING
,
DOCUMENT_TYPE_NODE
,
ELEMENT_NODE
,
ENTITY_NODE
,
ENTITY_REFERENCE_NODE
,
NOTATION_NODE
,
PROCESSING_INSTRUCTION_NODE
,
TEXT_NODE
Method Summary
All Methods
Instance Methods
Abstract Methods
Modifier and Type
Method
Description
String
getWholeText
()
Returns all text of
Text
nodes logically-adjacent text
 nodes to this node, concatenated in document order.
boolean
isElementContentWhitespace
()
Returns whether this text node contains
element content whitespace
, often abusively called "ignorable whitespace".
Text
replaceWholeText
(
String
content)
Replaces the text of the current node and all logically-adjacent text
 nodes with the specified text.
Text
splitText
(int offset)
Breaks this node into two nodes at the specified
offset
,
 keeping both in the tree as siblings.
Methods declared in interface org.w3c.dom.
CharacterData
appendData
,
deleteData
,
getData
,
getLength
,
insertData
,
replaceData
,
setData
,
substringData
Methods declared in interface org.w3c.dom.
Node
appendChild
,
cloneNode
,
compareDocumentPosition
,
getAttributes
,
getBaseURI
,
getChildNodes
,
getFeature
,
getFirstChild
,
getLastChild
,
getLocalName
,
getNamespaceURI
,
getNextSibling
,
getNodeName
,
getNodeType
,
getNodeValue
,
getOwnerDocument
,
getParentNode
,
getPrefix
,
getPreviousSibling
,
getTextContent
,
getUserData
,
hasAttributes
,
hasChildNodes
,
insertBefore
,
isDefaultNamespace
,
isEqualNode
,
isSameNode
,
isSupported
,
lookupNamespaceURI
,
lookupPrefix
,
normalize
,
removeChild
,
replaceChild
,
setNodeValue
,
setPrefix
,
setTextContent
,
setUserData
Method Details
splitText
Text
splitText
(int offset)
throws
DOMException
Breaks this node into two nodes at the specified
offset
,
 keeping both in the tree as siblings. After being split, this node
 will contain all the content up to the
offset
point. A
 new node of the same type, which contains all the content at and
 after the
offset
point, is returned. If the original
 node had a parent node, the new node is inserted as the next sibling
 of the original node. When the
offset
is equal to the
 length of this node, the new node has no data.
Parameters:
offset
- The 16-bit unit offset at which to split, starting from
0
.
Returns:
The new node, of the same type as this node.
Throws:
DOMException
- INDEX_SIZE_ERR: Raised if the specified offset is negative or greater
   than the number of 16-bit units in
data
.
NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
isElementContentWhitespace
boolean
isElementContentWhitespace
()
Returns whether this text node contains
element content whitespace
, often abusively called "ignorable whitespace". The text node is
 determined to contain whitespace in element content during the load
 of the document or if validation occurs while using
Document.normalizeDocument()
.
Since:
1.5, DOM Level 3
getWholeText
String
getWholeText
()
Returns all text of
Text
nodes logically-adjacent text
 nodes to this node, concatenated in document order.
For instance, in the example below
wholeText
on the
Text
node that contains "bar" returns "barfoo", while on
 the
Text
node that contains "foo" it returns "barfoo".
+-----+
                     | <p> |
                     +-----+
                       /\
                      /  \
               /-----\    +-------+
               | bar |    | &ent; |
               \-----/    +-------+
                              |
                              |
                           /-----\
                           | foo |
                           \-----/
Figure: barTextNode.wholeText value is "barfoo"
Since:
1.5, DOM Level 3
replaceWholeText
Text
replaceWholeText
(
String
content)
throws
DOMException
Replaces the text of the current node and all logically-adjacent text
 nodes with the specified text. All logically-adjacent text nodes are
 removed including the current node unless it was the recipient of the
 replacement text.
This method returns the node which received the replacement text.
 The returned node is:
null
, when the replacement text is
 the empty string;
the current node, except when the current node is
 read-only;
a new
Text
node of the same type (
Text
or
CDATASection
) as the current node
 inserted at the location of the replacement.
For instance, in the above example calling
replaceWholeText
on the
Text
node that
 contains "bar" with "yo" in argument results in the following:
+-----+
                     | <p> |
                     +-----+
                        |
                        |
                     /-----\
                     | yo  |
                     \-----/
Figure: barTextNode.replaceWholeText("yo") modifies the
 textual content of barTextNode with "yo"
Where the nodes to be removed are read-only descendants of an
EntityReference
, the
EntityReference
must
 be removed instead of the read-only nodes. If any
EntityReference
to be removed has descendants that are
 not
EntityReference
,
Text
, or
CDATASection
nodes, the
replaceWholeText
method must fail before performing any modification of the document,
 raising a
DOMException
with the code
NO_MODIFICATION_ALLOWED_ERR
.
For instance, in the example below calling
replaceWholeText
on the
Text
node that
 contains "bar" fails, because the
EntityReference
node
 "ent" contains an
Element
node which cannot be removed.
Parameters:
content
- The content of the replacing
Text
node.
Returns:
The
Text
node created with the specified content.
Throws:
DOMException
- NO_MODIFICATION_ALLOWED_ERR: Raised if one of the
Text
nodes being replaced is readonly.
Since:
1.5, DOM Level 3
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.