SAXParserFactory (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr
|
Method
Detail:
Field |
Constr
|
Method
SEARCH
Module
java.xml
Package
javax.xml.parsers
Class SAXParserFactory
java.lang.Object
javax.xml.parsers.SAXParserFactory
public abstract class
SAXParserFactory
extends
Object
Defines a factory API that enables applications to configure and
 obtain a SAX based parser to parse XML documents.
Since:
1.4
Constructor Summary
Constructors
Modifier
Constructor
Description
protected
SAXParserFactory
()
Protected constructor to force use of
newInstance()
.
Method Summary
All Methods
Static Methods
Instance Methods
Abstract Methods
Concrete Methods
Modifier and Type
Method
Description
abstract boolean
getFeature
(
String
name)
Returns the particular property requested for in the underlying
 implementation of org.xml.sax.XMLReader.
Schema
getSchema
()
Gets the
Schema
object specified through
 the
setSchema(Schema schema)
method.
boolean
isNamespaceAware
()
Indicates whether or not the factory is configured to produce
 parsers which are namespace aware.
boolean
isValidating
()
Indicates whether or not the factory is configured to produce
 parsers which validate the XML content during parse.
boolean
isXIncludeAware
()
Get state of XInclude processing.
static
SAXParserFactory
newDefaultInstance
()
Creates a new instance of the
SAXParserFactory
builtin
 system-default implementation.
static
SAXParserFactory
newDefaultNSInstance
()
Creates a new NamespaceAware instance of the
SAXParserFactory
builtin system-default implementation.
static
SAXParserFactory
newInstance
()
Obtains a new instance of a
SAXParserFactory
.
static
SAXParserFactory
newInstance
(
String
factoryClassName,
ClassLoader
classLoader)
Obtain a new instance of a
SAXParserFactory
from class name.
static
SAXParserFactory
newNSInstance
()
Creates a new NamespaceAware instance of a
SAXParserFactory
.
static
SAXParserFactory
newNSInstance
(
String
factoryClassName,
ClassLoader
classLoader)
Creates a new NamespaceAware instance of a
SAXParserFactory
from
 the class name.
abstract
SAXParser
newSAXParser
()
Creates a new instance of a SAXParser using the currently
 configured factory parameters.
abstract void
setFeature
(
String
name,
 boolean value)
Sets the particular feature in the underlying implementation of
 org.xml.sax.XMLReader.
void
setNamespaceAware
(boolean awareness)
Specifies that the parser produced by this code will
 provide support for XML namespaces.
void
setSchema
(
Schema
schema)
Set the
Schema
to be used by parsers created
 from this factory.
void
setValidating
(boolean validating)
Specifies that the parser produced by this code will
 validate documents as they are parsed.
void
setXIncludeAware
(boolean state)
Set state of XInclude processing.
Methods declared in class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Constructor Details
SAXParserFactory
protected
SAXParserFactory
()
Protected constructor to force use of
newInstance()
.
Method Details
newDefaultNSInstance
public static
SAXParserFactory
newDefaultNSInstance
()
Creates a new NamespaceAware instance of the
SAXParserFactory
builtin system-default implementation. Parsers produced by the factory
 instance provides support for XML namespaces by default.
Implementation Requirements:
In addition to creating a factory instance using the same process as
newDefaultInstance()
, this method must set NamespaceAware to true.
Returns:
a new instance of the
SAXParserFactory
builtin
         system-default implementation.
Since:
13
newNSInstance
public static
SAXParserFactory
newNSInstance
()
Creates a new NamespaceAware instance of a
SAXParserFactory
.
 Parsers produced by the factory instance provides support for XML
 namespaces by default.
Implementation Requirements:
In addition to creating a factory instance using the same process as
newInstance()
, this method must set NamespaceAware to true.
Returns:
a new instance of the
SAXParserFactory
Throws:
FactoryConfigurationError
- in case of
service configuration error
or if the implementation is not available or cannot be instantiated.
Since:
13
newNSInstance
public static
SAXParserFactory
newNSInstance
(
String
factoryClassName,
ClassLoader
classLoader)
Creates a new NamespaceAware instance of a
SAXParserFactory
from
 the class name. Parsers produced by the factory instance provides
 support for XML namespaces by default.
Implementation Requirements:
In addition to creating a factory instance using the same process as
newInstance(java.lang.String, java.lang.ClassLoader)
, this method
 must set NamespaceAware to true.
Parameters:
factoryClassName
- a fully qualified factory class name that provides
                         implementation of
javax.xml.parsers.SAXParserFactory
.
classLoader
- the
ClassLoader
used to load the factory class.
                    If it is
null
, the current
Thread
's
                    context classLoader is used to load the factory class.
Returns:
a new instance of the
SAXParserFactory
Throws:
FactoryConfigurationError
- if
factoryClassName
is
null
, or
                                   the factory class cannot be loaded, instantiated.
Since:
13
newDefaultInstance
public static
SAXParserFactory
newDefaultInstance
()
Creates a new instance of the
SAXParserFactory
builtin
 system-default implementation.
Returns:
A new instance of the
SAXParserFactory
builtin
         system-default implementation.
Since:
9
newInstance
public static
SAXParserFactory
newInstance
()
Obtains a new instance of a
SAXParserFactory
.
 This method uses the
JAXP Lookup Mechanism
to determine the
SAXParserFactory
implementation class to load.
Once an application has obtained a reference to a
SAXParserFactory
, it can use the factory to
 configure and obtain parser instances.
Tip for Trouble-shooting
Setting the
jaxp.debug
system property will cause
 this method to print a lot of debug messages
 to
System.err
about what it is doing and where it is looking at.
If you have problems loading
SAXParser
s, try:
java -Djaxp.debug=1 YourProgram ....
Returns:
A new instance of a SAXParserFactory.
Throws:
FactoryConfigurationError
- in case of
service configuration error
or if
 the implementation is not available or cannot be instantiated.
newInstance
public static
SAXParserFactory
newInstance
(
String
factoryClassName,
ClassLoader
classLoader)
Obtain a new instance of a
SAXParserFactory
from class name.
 This function is useful when there are multiple providers in the classpath.
 It gives more control to the application as it can specify which provider
 should be loaded.
Once an application has obtained a reference to a
SAXParserFactory
it can use the factory to configure and obtain parser instances.
Tip for Trouble-shooting
Setting the
jaxp.debug
system property will cause
 this method to print a lot of debug messages
 to
System.err
about what it is doing and where it is looking at.
If you have problems, try:
java -Djaxp.debug=1 YourProgram ....
Parameters:
factoryClassName
- fully qualified factory class name that provides implementation of
javax.xml.parsers.SAXParserFactory
.
classLoader
-
ClassLoader
used to load the factory class. If
null
current
Thread
's context classLoader is used to load the factory class.
Returns:
New instance of a
SAXParserFactory
Throws:
FactoryConfigurationError
- if
factoryClassName
is
null
, or
                                   the factory class cannot be loaded, instantiated.
Since:
1.6
See Also:
newInstance()
newSAXParser
public abstract
SAXParser
newSAXParser
()
                                throws
ParserConfigurationException
,
SAXException
Creates a new instance of a SAXParser using the currently
 configured factory parameters.
Returns:
A new instance of a SAXParser.
Throws:
ParserConfigurationException
- if a parser cannot
   be created which satisfies the requested configuration.
SAXException
- for SAX errors.
setNamespaceAware
public
void
setNamespaceAware
(boolean awareness)
Specifies that the parser produced by this code will
 provide support for XML namespaces. By default the value of this is set
 to
false
.
Parameters:
awareness
- true if the parser produced by this code will
                  provide support for XML namespaces; false otherwise.
setValidating
public
void
setValidating
(boolean validating)
Specifies that the parser produced by this code will
 validate documents as they are parsed. By default the value of this is
 set to
false
.
Note that "the validation" here means
a validating
 parser
as defined in the XML recommendation.
 In other words, it essentially just controls the DTD validation.
 (except the legacy two properties defined in JAXP 1.2.)
To use modern schema languages such as W3C XML Schema or
 RELAX NG instead of DTD, you can configure your parser to be
 a non-validating parser by leaving the
setValidating(boolean)
method
false
, then use the
setSchema(Schema)
method to associate a schema to a parser.
Parameters:
validating
- true if the parser produced by this code will
                   validate documents as they are parsed; false otherwise.
isNamespaceAware
public
boolean
isNamespaceAware
()
Indicates whether or not the factory is configured to produce
 parsers which are namespace aware.
Returns:
true if the factory is configured to produce
         parsers which are namespace aware; false otherwise.
isValidating
public
boolean
isValidating
()
Indicates whether or not the factory is configured to produce
 parsers which validate the XML content during parse.
Returns:
true if the factory is configured to produce parsers which validate
         the XML content during parse; false otherwise.
setFeature
public abstract
void
setFeature
(
String
name,
 boolean value)
throws
ParserConfigurationException
,
SAXNotRecognizedException
,
SAXNotSupportedException
Sets the particular feature in the underlying implementation of
 org.xml.sax.XMLReader.
 A list of the core features and properties can be found at
http://www.saxproject.org/
All implementations are required to support the
XMLConstants.FEATURE_SECURE_PROCESSING
feature.
 When the feature is
true
: the implementation will limit XML processing to conform to implementation limits.
     Examples include entity expansion limits and XML Schema constructs that would consume large amounts of resources.
     If XML processing is limited for security reasons, it will be reported via a call to the registered
ErrorHandler.fatalError(SAXParseException exception)
.
     See
SAXParser
parse
methods for handler specification.
When the feature is
false
, the implementation will processing XML according to the XML specifications without
     regard to possible implementation limits.
Parameters:
name
- The name of the feature to be set.
value
- The value of the feature to be set.
Throws:
ParserConfigurationException
- if a parser cannot
     be created which satisfies the requested configuration.
SAXNotRecognizedException
- When the underlying XMLReader does
            not recognize the property name.
SAXNotSupportedException
- When the underlying XMLReader
            recognizes the property name but doesn't support the
            property.
NullPointerException
- If the
name
parameter is null.
See Also:
XMLReader.setFeature(java.lang.String, boolean)
getFeature
public abstract
boolean
getFeature
(
String
name)
throws
ParserConfigurationException
,
SAXNotRecognizedException
,
SAXNotSupportedException
Returns the particular property requested for in the underlying
 implementation of org.xml.sax.XMLReader.
Parameters:
name
- The name of the property to be retrieved.
Returns:
Value of the requested property.
Throws:
ParserConfigurationException
- if a parser cannot be created which satisfies the requested configuration.
SAXNotRecognizedException
- When the underlying XMLReader does not recognize the property name.
SAXNotSupportedException
- When the underlying XMLReader recognizes the property name but doesn't support the property.
See Also:
XMLReader.getProperty(java.lang.String)
getSchema
public
Schema
getSchema
()
Gets the
Schema
object specified through
 the
setSchema(Schema schema)
method.
Returns:
the
Schema
object that was last set through
      the
setSchema(Schema)
method, or null
      if the method was not invoked since a
SAXParserFactory
is created.
Throws:
UnsupportedOperationException
- When implementation does not
   override this method
Since:
1.5
setSchema
public
void
setSchema
(
Schema
schema)
Set the
Schema
to be used by parsers created
 from this factory.
When a
Schema
is non-null, a parser will use a validator
 created from it to validate documents before it passes information
 down to the application.
When warnings/errors/fatal errors are found by the validator, the parser must
 handle them as if those errors were found by the parser itself.
 In other words, if the user-specified
ErrorHandler
is set, it must receive those errors, and if not, they must be
 treated according to the implementation specific
 default error handling rules.
A validator may modify the SAX event stream (for example by
 adding default values that were missing in documents), and a parser
 is responsible to make sure that the application will receive
 those modified event stream.
Initially,
null
is set as the
Schema
.
This processing will take effect even if
 the
isValidating()
method returns
false
.
It is an error to use
 the
http://java.sun.com/xml/jaxp/properties/schemaSource
property and/or the
http://java.sun.com/xml/jaxp/properties/schemaLanguage
property in conjunction with a non-null
Schema
object.
 Such configuration will cause a
SAXException
exception when those properties are set on a
SAXParser
.
Note for implementors
A parser must be able to work with any
Schema
implementation. However, parsers and schemas are allowed
 to use implementation-specific custom mechanisms
 as long as they yield the result described in the specification.
Parameters:
schema
-
Schema
to use,
null
to remove a schema.
Throws:
UnsupportedOperationException
- When implementation does not
   override this method
Since:
1.5
setXIncludeAware
public
void
setXIncludeAware
(boolean state)
Set state of XInclude processing.
If XInclude markup is found in the document instance, should it be
 processed as specified in
XML Inclusions (XInclude) Version 1.0
.
XInclude processing defaults to
false
.
Parameters:
state
- Set XInclude processing to
true
or
false
Throws:
UnsupportedOperationException
- When implementation does not
   override this method
Since:
1.5
isXIncludeAware
public
boolean
isXIncludeAware
()
Get state of XInclude processing.
Returns:
current state of XInclude processing
Throws:
UnsupportedOperationException
- When implementation does not
   override this method
Since:
1.5
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.