Validator (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr
|
Method
Detail:
Field |
Constr
|
Method
SEARCH
Module
java.xml
Package
javax.xml.validation
Class Validator
java.lang.Object
javax.xml.validation.Validator
public abstract class
Validator
extends
Object
A processor that checks an XML document against
Schema
.
A validator object is not thread-safe and not reentrant.
 In other words, it is the application's responsibility to make
 sure that one
Validator
object is not used from
 more than one thread at any given time, and while the
validate
method is invoked, applications may not recursively call
 the
validate
method.
Since:
1.5
Constructor Summary
Constructors
Modifier
Constructor
Description
protected
Validator
()
Constructor for derived classes.
Method Summary
All Methods
Instance Methods
Abstract Methods
Concrete Methods
Modifier and Type
Method
Description
abstract
ErrorHandler
getErrorHandler
()
Gets the current
ErrorHandler
set to this
Validator
.
boolean
getFeature
(
String
name)
Look up the value of a feature flag.
Object
getProperty
(
String
name)
Look up the value of a property.
abstract
LSResourceResolver
getResourceResolver
()
Gets the current
LSResourceResolver
set to this
Validator
.
abstract void
reset
()
Reset this
Validator
to its original configuration.
abstract void
setErrorHandler
(
ErrorHandler
errorHandler)
Sets the
ErrorHandler
to receive errors encountered
 during the
validate
method invocation.
void
setFeature
(
String
name,
 boolean value)
Set the value of a feature flag.
void
setProperty
(
String
name,
Object
object)
Set the value of a property.
abstract void
setResourceResolver
(
LSResourceResolver
resourceResolver)
Sets the
LSResourceResolver
to customize
 resource resolution while in a validation episode.
void
validate
(
Source
source)
Validates the specified input.
abstract void
validate
(
Source
source,
Result
result)
Validates the specified input and send the augmented validation
 result to the specified output.
Methods declared in class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Constructor Details
Validator
protected
Validator
()
Constructor for derived classes.
The constructor does nothing.
Derived classes must create
Validator
objects that have
null
ErrorHandler
and
null
LSResourceResolver
.
Method Details
reset
public abstract
void
reset
()
Reset this
Validator
to its original configuration.
Validator
is reset to the same state as when it was created with
Schema.newValidator()
.
reset()
is designed to allow the reuse of existing
Validator
s
 thus saving resources associated with the creation of new
Validator
s.
The reset
Validator
is not guaranteed to have
 the same
LSResourceResolver
or
ErrorHandler
Object
s, e.g.
Object.equals(Object obj)
.
 It is guaranteed to have a functionally equal
LSResourceResolver
and
ErrorHandler
.
validate
public
void
validate
(
Source
source)
throws
SAXException
,
IOException
Validates the specified input.
This is just a convenience method for
validate(Source source, Result result)
with
result
of
null
.
Parameters:
source
- XML to be validated. Must be an XML document or
      XML element and must not be null. For backwards compatibility,
      the results of attempting to validate anything other than
      a document or element are implementation-dependent.
      Implementations must either recognize and process the input
      or throw an IllegalArgumentException.
Throws:
IllegalArgumentException
- If the
Source
is an XML artifact that the implementation cannot
      validate (for example, a processing instruction).
SAXException
- If the
ErrorHandler
throws a
SAXException
or
      if a fatal error is found and the
ErrorHandler
returns
      normally.
IOException
- If the validator is processing a
SAXSource
and the
      underlying
XMLReader
throws an
IOException
.
NullPointerException
- If
source
is
null
.
See Also:
validate(Source source, Result result)
validate
public abstract
void
validate
(
Source
source,
Result
result)
throws
SAXException
,
IOException
Validates the specified input and send the augmented validation
 result to the specified output.
This method places the following restrictions on the types of
 the
Source
/
Result
accepted.
Source
/
Result
Accepted
StreamSource
SAXSource
DOMSource
StAXSource
null
OK
OK
OK
OK
StreamResult
OK
IllegalArgumentException
IllegalArgumentException
IllegalArgumentException
SAXResult
IllegalArgumentException
OK
IllegalArgumentException
IllegalArgumentException
DOMResult
IllegalArgumentException
IllegalArgumentException
OK
IllegalArgumentException
StAXResult
IllegalArgumentException
IllegalArgumentException
IllegalArgumentException
OK
To validate one
Source
into another kind of
Result
, use the identity transformer (see
TransformerFactory.newTransformer()
).
Errors found during the validation is sent to the specified
ErrorHandler
.
If a document is valid, or if a document contains some errors
 but none of them were fatal and the
ErrorHandler
didn't
 throw any exception, then the method returns normally.
Parameters:
source
- XML to be validated. Must be an XML document or
      XML element and must not be null. For backwards compatibility,
      the results of attempting to validate anything other than
      a document or element are implementation-dependent.
      Implementations must either recognize and process the input
      or throw an IllegalArgumentException.
result
- The
Result
object that receives (possibly augmented)
      XML. This parameter can be null if the caller is not interested
      in it.

      Note that when a
DOMResult
is used,
      a validator might just pass the same DOM node from
DOMSource
to
DOMResult
(in which case
source.getNode()==result.getNode()
),
      it might copy the entire DOM tree, or it might alter the
      node given by the source.
Throws:
IllegalArgumentException
- If the
Result
type doesn't match the
Source
type or if the
Source
is an XML artifact that the implementation cannot
      validate (for example, a processing instruction).
SAXException
- If the
ErrorHandler
throws a
SAXException
or
      if a fatal error is found and the
ErrorHandler
returns
      normally.
IOException
- If the validator is processing a
SAXSource
and the
      underlying
XMLReader
throws an
IOException
.
NullPointerException
- If the
source
parameter is
null
.
See Also:
validate(Source source)
setErrorHandler
public abstract
void
setErrorHandler
(
ErrorHandler
errorHandler)
Sets the
ErrorHandler
to receive errors encountered
 during the
validate
method invocation.
Error handler can be used to customize the error handling process
 during a validation. When an
ErrorHandler
is set,
 errors found during the validation will be first sent
 to the
ErrorHandler
.
The error handler can abort further validation immediately
 by throwing
SAXException
from the handler. Or for example
 it can print an error to the screen and try to continue the
 validation by returning normally from the
ErrorHandler
If any
Throwable
is thrown from an
ErrorHandler
,
 the caller of the
validate
method will be thrown
 the same
Throwable
object.
Validator
is not allowed to
 throw
SAXException
without first reporting it to
ErrorHandler
.
When the
ErrorHandler
is null, the implementation will
 behave as if the following
ErrorHandler
is set:
class DraconianErrorHandler implements
ErrorHandler
{
     public void fatalError(
SAXParseException
e ) throws
SAXException
{
         throw e;
     }
     public void error(
SAXParseException
e ) throws
SAXException
{
         throw e;
     }
     public void warning(
SAXParseException
e ) throws
SAXException
{
         // noop
     }
 }
When a new
Validator
object is created, initially
 this field is set to null.
Parameters:
errorHandler
- A new error handler to be set. This parameter can be null.
getErrorHandler
public abstract
ErrorHandler
getErrorHandler
()
Gets the current
ErrorHandler
set to this
Validator
.
Returns:
This method returns the object that was last set through
      the
setErrorHandler(ErrorHandler)
method, or null
      if that method has never been called since this
Validator
has created.
See Also:
setErrorHandler(ErrorHandler)
setResourceResolver
public abstract
void
setResourceResolver
(
LSResourceResolver
resourceResolver)
Sets the
LSResourceResolver
to customize
 resource resolution while in a validation episode.
Validator
uses a
LSResourceResolver
when it needs to locate external resources while a validation,
 although exactly what constitutes "locating external resources" is
 up to each schema language.
When the
LSResourceResolver
is null, the implementation will
 behave as if the following
LSResourceResolver
is set:
class DumbLSResourceResolver implements
LSResourceResolver
{
     public
LSInput
resolveResource(
         String publicId, String systemId, String baseURI) {

         return null; // always return null
     }
 }
If a
LSResourceResolver
throws a
RuntimeException
(or instances of its derived classes),
 then the
Validator
will abort the parsing and
 the caller of the
validate
method will receive
 the same
RuntimeException
.
When a new
Validator
object is created, initially
 this field is set to null.
Parameters:
resourceResolver
- A new resource resolver to be set. This parameter can be null.
getResourceResolver
public abstract
LSResourceResolver
getResourceResolver
()
Gets the current
LSResourceResolver
set to this
Validator
.
Returns:
This method returns the object that was last set through
      the
setResourceResolver(LSResourceResolver)
method, or null
      if that method has never been called since this
Validator
has created.
See Also:
setErrorHandler(ErrorHandler)
getFeature
public
boolean
getFeature
(
String
name)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
Look up the value of a feature flag.
The feature name is any fully-qualified URI.  It is
 possible for a
Validator
to recognize a feature name but
 temporarily be unable to return its value.
 Some feature values may be available only in specific
 contexts, such as before, during, or after a validation.
Implementors are free (and encouraged) to invent their own features,
 using names built on their own URIs.
Parameters:
name
- The feature name, which is a non-null fully-qualified URI.
Returns:
The current value of the feature (true or false).
Throws:
SAXNotRecognizedException
- If the feature
   value can't be assigned or retrieved.
SAXNotSupportedException
- When the
Validator
recognizes the feature name but
   cannot determine its value at this time.
NullPointerException
- When the name parameter is null.
See Also:
setFeature(String, boolean)
setFeature
public
void
setFeature
(
String
name,
 boolean value)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
Set the value of a feature flag.
Feature can be used to control the way a
Validator
parses schemas, although
Validator
s are not required
 to recognize any specific feature names.
The feature name is any fully-qualified URI.  It is
 possible for a
Validator
to expose a feature value but
 to be unable to change the current value.
 Some feature values may be immutable or mutable only
 in specific contexts, such as before, during, or after
 a validation.
Parameters:
name
- The feature name, which is a non-null fully-qualified URI.
value
- The requested value of the feature (true or false).
Throws:
SAXNotRecognizedException
- If the feature
   value can't be assigned or retrieved.
SAXNotSupportedException
- When the
Validator
recognizes the feature name but
   cannot set the requested value.
NullPointerException
- When the name parameter is null.
See Also:
getFeature(String)
setProperty
public
void
setProperty
(
String
name,
Object
object)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
Set the value of a property.
The property name is any fully-qualified URI.  It is
 possible for a
Validator
to recognize a property name but
 to be unable to change the current value.
 Some property values may be immutable or mutable only
 in specific contexts, such as before, during, or after
 a validation.
All implementations that implement JAXP 1.5 or newer are required to
 support the
XMLConstants.ACCESS_EXTERNAL_DTD
and
XMLConstants.ACCESS_EXTERNAL_SCHEMA
properties.
Access to external DTDs in source or Schema file is restricted to
      the protocols specified by the
XMLConstants.ACCESS_EXTERNAL_DTD
property.  If access is denied during validation due to the restriction
      of this property,
SAXException
will be thrown by the
validate(Source)
method.
Access to external reference set by the schemaLocation attribute is
      restricted to the protocols specified by the
XMLConstants.ACCESS_EXTERNAL_SCHEMA
property.
      If access is denied during validation due to the restriction of this property,
SAXException
will be thrown by the
validate(Source)
method.
Parameters:
name
- The property name, which is a non-null fully-qualified URI.
object
- The requested value for the property.
Throws:
SAXNotRecognizedException
- If the property
   value can't be assigned or retrieved.
SAXNotSupportedException
- When the
Validator
recognizes the property name but
   cannot set the requested value.
NullPointerException
- When the name parameter is null.
getProperty
public
Object
getProperty
(
String
name)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
Look up the value of a property.
The property name is any fully-qualified URI.  It is
 possible for a
Validator
to recognize a property name but
 temporarily be unable to return its value.
 Some property values may be available only in specific
 contexts, such as before, during, or after a validation.
Validator
s are not required to recognize any specific
 property names.
Implementors are free (and encouraged) to invent their own properties,
 using names built on their own URIs.
Parameters:
name
- The property name, which is a non-null fully-qualified URI.
Returns:
The current value of the property.
Throws:
SAXNotRecognizedException
- If the property
   value can't be assigned or retrieved.
SAXNotSupportedException
- When the
   XMLReader recognizes the property name but
   cannot determine its value at this time.
NullPointerException
- When the name parameter is null.
See Also:
setProperty(String, Object)
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.