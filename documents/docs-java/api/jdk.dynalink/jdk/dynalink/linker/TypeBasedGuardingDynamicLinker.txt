TypeBasedGuardingDynamicLinker (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr |
Method
Detail:
Field |
Constr |
Method
SEARCH
Module
jdk.dynalink
Package
jdk.dynalink.linker
Interface TypeBasedGuardingDynamicLinker
All Superinterfaces:
GuardingDynamicLinker
All Known Implementing Classes:
CompositeTypeBasedGuardingDynamicLinker
public interface
TypeBasedGuardingDynamicLinker
extends
GuardingDynamicLinker
A guarding dynamic linker that can determine whether it can link the call site solely based on the type of the first
 argument at linking invocation time. (The first argument is usually the receiver). Most language-specific
 linkers will fall into this category, as they recognize their native objects as Java objects of classes implementing
 a specific language-native interface or superclass. The linker mechanism can optimize the dispatch for these linkers,
 see
CompositeTypeBasedGuardingDynamicLinker
.
Method Summary
All Methods
Instance Methods
Abstract Methods
Modifier and Type
Method
Description
boolean
canLinkType
(
Class
<?> type)
Returns true if the linker can link an invocation where the first argument (receiver) is of the specified type.
Methods declared in interface jdk.dynalink.linker.
GuardingDynamicLinker
getGuardedInvocation
Method Details
canLinkType
boolean
canLinkType
(
Class
<?> type)
Returns true if the linker can link an invocation where the first argument (receiver) is of the specified type.
Parameters:
type
- the type to link
Returns:
true if the linker can link calls for the receiver type, or false otherwise.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.