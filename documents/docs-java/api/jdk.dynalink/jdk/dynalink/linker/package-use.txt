Uses of Package jdk.dynalink.linker (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Package
jdk.dynalink.linker
Packages that use
jdk.dynalink.linker
Package
Description
jdk.dynalink
Contains interfaces and classes that are used to link an
invokedynamic
call site.
jdk.dynalink.beans
Contains the linker for ordinary Java objects.
jdk.dynalink.linker
Contains interfaces and classes needed by language runtimes to implement
 their own language-specific object models and type conversions.
jdk.dynalink.linker.support
Contains classes that make it more convenient for language runtimes to
 implement their own language-specific object models and type conversions
 by providing basic implementations of some classes as well as various
 utilities.
jdk.dynalink.support
Contains classes that make using Dynalink more convenient by providing
 basic implementations of some classes as well as various utilities.
Classes in
jdk.dynalink.linker
used by
jdk.dynalink
Class
Description
GuardedInvocation
Represents a conditionally valid method handle.
GuardedInvocationTransformer
Interface for objects that are used to transform one guarded invocation into
 another one.
GuardingDynamicLinker
The base interface for language-specific dynamic linkers.
LinkerServices
Interface for services provided to
GuardingDynamicLinker
instances by
 the
DynamicLinker
that owns them.
MethodHandleTransformer
A generic interface describing operations that transform method handles.
MethodTypeConversionStrategy
Interface for objects representing a strategy for converting a method handle
 to a new type.
Classes in
jdk.dynalink.linker
used by
jdk.dynalink.beans
Class
Description
GuardedInvocation
Represents a conditionally valid method handle.
GuardingDynamicLinker
The base interface for language-specific dynamic linkers.
LinkerServices
Interface for services provided to
GuardingDynamicLinker
instances by
 the
DynamicLinker
that owns them.
LinkRequest
Represents a request to link a particular invocation at a particular call
 site.
TypeBasedGuardingDynamicLinker
A guarding dynamic linker that can determine whether it can link the call site solely based on the type of the first
 argument at linking invocation time.
Classes in
jdk.dynalink.linker
used by
jdk.dynalink.linker
Class
Description
ConversionComparator.Comparison
Enumeration of possible outcomes of comparing one conversion to another.
GuardedInvocation
Represents a conditionally valid method handle.
GuardingDynamicLinker
The base interface for language-specific dynamic linkers.
LinkerServices
Interface for services provided to
GuardingDynamicLinker
instances by
 the
DynamicLinker
that owns them.
LinkRequest
Represents a request to link a particular invocation at a particular call
 site.
Classes in
jdk.dynalink.linker
used by
jdk.dynalink.linker.support
Class
Description
GuardedInvocation
Represents a conditionally valid method handle.
GuardingDynamicLinker
The base interface for language-specific dynamic linkers.
LinkerServices
Interface for services provided to
GuardingDynamicLinker
instances by
 the
DynamicLinker
that owns them.
LinkRequest
Represents a request to link a particular invocation at a particular call
 site.
MethodHandleTransformer
A generic interface describing operations that transform method handles.
TypeBasedGuardingDynamicLinker
A guarding dynamic linker that can determine whether it can link the call site solely based on the type of the first
 argument at linking invocation time.
Classes in
jdk.dynalink.linker
used by
jdk.dynalink.support
Class
Description
GuardedInvocation
Represents a conditionally valid method handle.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
Â© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.