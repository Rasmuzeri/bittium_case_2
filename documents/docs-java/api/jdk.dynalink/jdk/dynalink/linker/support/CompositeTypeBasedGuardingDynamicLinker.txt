CompositeTypeBasedGuardingDynamicLinker (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr
|
Method
Detail:
Field |
Constr
|
Method
SEARCH
Module
jdk.dynalink
Package
jdk.dynalink.linker.support
Class CompositeTypeBasedGuardingDynamicLinker
java.lang.Object
jdk.dynalink.linker.support.CompositeTypeBasedGuardingDynamicLinker
All Implemented Interfaces:
GuardingDynamicLinker
,
TypeBasedGuardingDynamicLinker
public class
CompositeTypeBasedGuardingDynamicLinker
extends
Object
implements
TypeBasedGuardingDynamicLinker
A composite type-based guarding dynamic linker. When a receiver of a not yet
 seen class is encountered, all linkers are queried sequentially on their
TypeBasedGuardingDynamicLinker.canLinkType(Class)
method. The linkers
 returning true are then bound to the class, and next time a receiver of same
 type is encountered, the linking is delegated to those linkers only, speeding
 up dispatch.
Constructor Summary
Constructors
Constructor
Description
CompositeTypeBasedGuardingDynamicLinker
(
Iterable
<? extends
TypeBasedGuardingDynamicLinker
> linkers)
Creates a new composite type-based linker.
Method Summary
All Methods
Static Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
boolean
canLinkType
(
Class
<?> type)
Returns true if at least one of the composite linkers returns true from
TypeBasedGuardingDynamicLinker.canLinkType(Class)
for the type.
GuardedInvocation
getGuardedInvocation
(
LinkRequest
linkRequest,
LinkerServices
linkerServices)
Creates a guarded invocation appropriate for a particular invocation with
 the specified arguments at a call site.
static
List
<
GuardingDynamicLinker
>
optimize
(
Iterable
<? extends
GuardingDynamicLinker
> linkers)
Optimizes a list of type-based linkers.
Methods declared in class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Constructor Details
CompositeTypeBasedGuardingDynamicLinker
public
CompositeTypeBasedGuardingDynamicLinker
(
Iterable
<? extends
TypeBasedGuardingDynamicLinker
> linkers)
Creates a new composite type-based linker.
Parameters:
linkers
- the component linkers
Throws:
NullPointerException
- if
linkers
or any of its elements
 are null.
Method Details
canLinkType
public
boolean
canLinkType
(
Class
<?> type)
Returns true if at least one of the composite linkers returns true from
TypeBasedGuardingDynamicLinker.canLinkType(Class)
for the type.
Specified by:
canLinkType
in interface
TypeBasedGuardingDynamicLinker
Parameters:
type
- the type to link
Returns:
true true if at least one of the composite linkers returns true
 from
TypeBasedGuardingDynamicLinker.canLinkType(Class)
, false
 otherwise.
getGuardedInvocation
public
GuardedInvocation
getGuardedInvocation
(
LinkRequest
linkRequest,
LinkerServices
linkerServices)
throws
Exception
Description copied from interface:
GuardingDynamicLinker
Creates a guarded invocation appropriate for a particular invocation with
 the specified arguments at a call site.
Specified by:
getGuardedInvocation
in interface
GuardingDynamicLinker
Parameters:
linkRequest
- the object describing the request for linking a
 particular invocation
linkerServices
- linker services
Returns:
a guarded invocation with a method handle suitable for the
 arguments, as well as a guard condition that if fails should trigger
 relinking. Must return null if it can't resolve the invocation. If the
 returned invocation is unconditional (which is actually quite rare), the
 guard in the return value can be null. The invocation can also have any
 number of switch points for asynchronous invalidation of the linkage, as
 well as a
Throwable
subclass that describes an expected exception
 condition that also triggers relinking (often it is faster to rely on an
 infrequent but expected
ClassCastException
than on an always
 evaluated
instanceof
guard). While the linker must produce an
 invocation with parameter types matching those in the call site
 descriptor of the link request, it should not try to match the return
 type expected at the call site except when it can do it with only the
 conversions that lose neither precision nor magnitude, see
LinkerServices.asTypeLosslessReturn(MethodHandle, MethodType)
for
 further explanation.
Throws:
Exception
- if the operation fails for whatever reason
optimize
public static
List
<
GuardingDynamicLinker
>
optimize
(
Iterable
<? extends
GuardingDynamicLinker
> linkers)
Optimizes a list of type-based linkers. If a group of adjacent linkers in
 the list all implement
TypeBasedGuardingDynamicLinker
, they will
 be replaced with a single instance of
CompositeTypeBasedGuardingDynamicLinker
that contains them.
Parameters:
linkers
- the list of linkers to optimize
Returns:
the optimized list
Throws:
NullPointerException
- if
linkers
or any of its elements
 are null.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.