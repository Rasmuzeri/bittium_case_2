ComponentUI (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr
|
Method
Detail:
Field |
Constr
|
Method
SEARCH
Module
java.desktop
Package
javax.swing.plaf
Class ComponentUI
java.lang.Object
javax.swing.plaf.ComponentUI
Direct Known Subclasses:
ButtonUI
,
ColorChooserUI
,
ComboBoxUI
,
DesktopIconUI
,
DesktopPaneUI
,
FileChooserUI
,
InternalFrameUI
,
LabelUI
,
LayerUI
,
ListUI
,
MenuBarUI
,
OptionPaneUI
,
PanelUI
,
PopupMenuUI
,
ProgressBarUI
,
RootPaneUI
,
ScrollBarUI
,
ScrollPaneUI
,
SeparatorUI
,
SliderUI
,
SpinnerUI
,
SplitPaneUI
,
TabbedPaneUI
,
TableHeaderUI
,
TableUI
,
TextUI
,
ToolBarUI
,
ToolTipUI
,
TreeUI
,
ViewportUI
public abstract class
ComponentUI
extends
Object
The base class for all UI delegate objects in the Swing pluggable
 look and feel architecture.  The UI delegate object for a Swing
 component is responsible for implementing the aspects of the
 component that depend on the look and feel.
 The
JComponent
class
 invokes methods from this class in order to delegate operations
 (painting, layout calculations, etc.) that may vary depending on the
 look and feel installed.
Client programs should not invoke methods
 on this class directly.
See Also:
JComponent
UIManager
Constructor Summary
Constructors
Constructor
Description
ComponentUI
()
Sole constructor.
Method Summary
All Methods
Static Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
boolean
contains
(
JComponent
c,
 int x,
 int y)
Returns
true
if the specified
x,y
location is
 contained within the look and feel's defined shape of the specified
 component.
static
ComponentUI
createUI
(
JComponent
c)
Returns an instance of the UI delegate for the specified component.
Accessible
getAccessibleChild
(
JComponent
c,
 int i)
Returns the
i
th
Accessible
child of the object.
int
getAccessibleChildrenCount
(
JComponent
c)
Returns the number of accessible children in the object.
int
getBaseline
(
JComponent
c,
 int width,
 int height)
Returns the baseline.
Component.BaselineResizeBehavior
getBaselineResizeBehavior
(
JComponent
c)
Returns an enum indicating how the baseline of the component
 changes as the size changes.
Dimension
getMaximumSize
(
JComponent
c)
Returns the specified component's maximum size appropriate for
 the look and feel.
Dimension
getMinimumSize
(
JComponent
c)
Returns the specified component's minimum size appropriate for
 the look and feel.
Dimension
getPreferredSize
(
JComponent
c)
Returns the specified component's preferred size appropriate for
 the look and feel.
void
installUI
(
JComponent
c)
Configures the specified component appropriately for the look and feel.
void
paint
(
Graphics
g,
JComponent
c)
Paints the specified component appropriately for the look and feel.
void
uninstallUI
(
JComponent
c)
Reverses configuration which was done on the specified component during
installUI
.
void
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate that it is time to paint the specified
 component.
Methods declared in class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Constructor Details
ComponentUI
public
ComponentUI
()
Sole constructor. (For invocation by subclass constructors,
 typically implicit.)
Method Details
installUI
public
void
installUI
(
JComponent
c)
Configures the specified component appropriately for the look and feel.
 This method is invoked when the
ComponentUI
instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should
not
be overridden.
Install a
LayoutManager
on the component if necessary.
Create/add any required sub-components to the component.
Create/install event listeners on the component.
Create/install a
PropertyChangeListener
on the component in order
     to detect and respond to component property changes appropriately.
Install keyboard UI (mnemonics, traversal, etc.) on the component.
Initialize any appropriate instance data.
Parameters:
c
- the component where this UI delegate is being installed
See Also:
uninstallUI(javax.swing.JComponent)
JComponent.setUI(javax.swing.plaf.ComponentUI)
JComponent.updateUI()
uninstallUI
public
void
uninstallUI
(
JComponent
c)
Reverses configuration which was done on the specified component during
installUI
.  This method is invoked when this
UIComponent
instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in
installUI
, being careful to
 leave the
JComponent
instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
Remove any UI-set borders from the component.
Remove any UI-set layout managers on the component.
Remove any UI-added sub-components from the component.
Remove any UI-added event/property listeners from the component.
Remove any UI-installed keyboard UI from the component.
Nullify any allocated instance data objects to allow for GC.
Parameters:
c
- the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
installUI(javax.swing.JComponent)
JComponent.updateUI()
paint
public
void
paint
(
Graphics
g,
JComponent
c)
Paints the specified component appropriately for the look and feel.
 This method is invoked from the
ComponentUI.update
method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified
Graphics
object to
 render the content of the component.
Parameters:
g
- the
Graphics
context in which to paint
c
- the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
update(java.awt.Graphics, javax.swing.JComponent)
update
public
void
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate that it is time to paint the specified
 component.  This method is invoked by
JComponent
when the specified component is being painted.
By default this method fills the specified component with
 its background color if its
opaque
property is
true
,
 and then immediately calls
paint
. In general this method need
 not be overridden by subclasses; all look-and-feel rendering code should
 reside in the
paint
method.
Parameters:
g
- the
Graphics
context in which to paint
c
- the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
paint(java.awt.Graphics, javax.swing.JComponent)
JComponent.paintComponent(java.awt.Graphics)
getPreferredSize
public
Dimension
getPreferredSize
(
JComponent
c)
Returns the specified component's preferred size appropriate for
 the look and feel.  If
null
is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns
null
.
Parameters:
c
- the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a
Dimension
object containing given component's preferred
         size appropriate for the look and feel
See Also:
JComponent.getPreferredSize()
LayoutManager.preferredLayoutSize(java.awt.Container)
getMinimumSize
public
Dimension
getMinimumSize
(
JComponent
c)
Returns the specified component's minimum size appropriate for
 the look and feel.  If
null
is returned, the minimum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes
getPreferredSize
and returns that value.
Parameters:
c
- the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a
Dimension
object or
null
See Also:
JComponent.getMinimumSize()
LayoutManager.minimumLayoutSize(java.awt.Container)
getPreferredSize(javax.swing.JComponent)
getMaximumSize
public
Dimension
getMaximumSize
(
JComponent
c)
Returns the specified component's maximum size appropriate for
 the look and feel.  If
null
is returned, the maximum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes
getPreferredSize
and returns that value.
Parameters:
c
- the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a
Dimension
object or
null
See Also:
JComponent.getMaximumSize()
LayoutManager2.maximumLayoutSize(java.awt.Container)
contains
public
boolean
contains
(
JComponent
c,
 int x,
 int y)
Returns
true
if the specified
x,y
location is
 contained within the look and feel's defined shape of the specified
 component.
x
and
y
are defined to be relative
 to the coordinate system of the specified component.  Although
 a component's
bounds
is constrained to a rectangle,
 this method provides the means for defining a non-rectangular
 shape within those bounds for the purpose of hit detection.
Parameters:
c
- the component where the
x,y
location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
x
- the
x
coordinate of the point
y
- the
y
coordinate of the point
Returns:
true
if the specified
x,y
location is contained
         within the look and feel's defined shape for the given component
See Also:
JComponent.contains(int, int)
Component.contains(int, int)
createUI
public static
ComponentUI
createUI
(
JComponent
c)
Returns an instance of the UI delegate for the specified component.
 Each subclass must provide its own static
createUI
method that returns an instance of that UI delegate subclass.
 If the UI delegate subclass is stateless, it may return an instance
 that is shared by multiple components.  If the UI delegate is
 stateful, then it should return a new instance per component.
 The default implementation of this method throws an error, as it
 should never be invoked.
Parameters:
c
- a
JComponent
for which to create a UI delegate
Returns:
a
ComponentUI
object for
c
getBaseline
public
int
getBaseline
(
JComponent
c,
 int width,
 int height)
Returns the baseline.  The baseline is measured from the top of
 the component.  This method is primarily meant for
LayoutManager
s to align components along their
 baseline.  A return value less than 0 indicates this component
 does not have a reasonable baseline and that
LayoutManager
s should not align this component on
 its baseline.
This method returns -1.  Subclasses that have a meaningful baseline
 should override appropriately.
Parameters:
c
-
JComponent
baseline is being requested for
width
- the width to get the baseline for
height
- the height to get the baseline for
Returns:
baseline or a value < 0 indicating there is no reasonable
                  baseline
Throws:
NullPointerException
- if
c
is
null
IllegalArgumentException
- if width or height is < 0
Since:
1.6
See Also:
JComponent.getBaseline(int,int)
getBaselineResizeBehavior
public
Component.BaselineResizeBehavior
getBaselineResizeBehavior
(
JComponent
c)
Returns an enum indicating how the baseline of the component
 changes as the size changes.  This method is primarily meant for
 layout managers and GUI builders.
This method returns
BaselineResizeBehavior.OTHER
.
 Subclasses that support a baseline should override appropriately.
Parameters:
c
-
JComponent
to return baseline resize behavior for
Returns:
an enum indicating how the baseline changes as the component
         size changes
Throws:
NullPointerException
- if
c
is
null
Since:
1.6
See Also:
JComponent.getBaseline(int, int)
getAccessibleChildrenCount
public
int
getAccessibleChildrenCount
(
JComponent
c)
Returns the number of accessible children in the object.  If all
 of the children of this object implement
Accessible
,
 this
 method should return the number of children of this object.
 UIs might wish to override this if they present areas on the
 screen that can be viewed as components, but actual components
 are not used for presenting those areas.

 Note: As of v1.3, it is recommended that developers call
Component.AccessibleAWTComponent.getAccessibleChildrenCount()
instead
 of this method.
Parameters:
c
-
JComponent
for which to get count of accessible children
Returns:
the number of accessible children in the object
See Also:
getAccessibleChild(javax.swing.JComponent, int)
getAccessibleChild
public
Accessible
getAccessibleChild
(
JComponent
c,
 int i)
Returns the
i
th
Accessible
child of the object.
 UIs might need to override this if they present areas on the
 screen that can be viewed as components, but actual components
 are not used for presenting those areas.
Note: As of v1.3, it is recommended that developers call
Component.AccessibleAWTComponent.getAccessibleChild()
instead of
 this method.
Parameters:
c
- a
JComponent
for which to get a child object
i
- zero-based index of child
Returns:
the
i
th
Accessible
child of the object
See Also:
getAccessibleChildrenCount(javax.swing.JComponent)
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.