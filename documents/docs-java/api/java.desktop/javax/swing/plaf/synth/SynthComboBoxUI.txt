SynthComboBoxUI (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested
|
Field
|
Constr
|
Method
Detail:
Field |
Constr
|
Method
SEARCH
Module
java.desktop
Package
javax.swing.plaf.synth
Class SynthComboBoxUI
java.lang.Object
javax.swing.plaf.ComponentUI
javax.swing.plaf.ComboBoxUI
javax.swing.plaf.basic.BasicComboBoxUI
javax.swing.plaf.synth.SynthComboBoxUI
All Implemented Interfaces:
PropertyChangeListener
,
EventListener
,
SynthConstants
,
SynthUI
public class
SynthComboBoxUI
extends
BasicComboBoxUI
implements
PropertyChangeListener
,
SynthUI
Provides the Synth L&F UI delegate for
JComboBox
.
Since:
1.7
Nested Class Summary
Nested classes/interfaces declared in class javax.swing.plaf.basic.
BasicComboBoxUI
BasicComboBoxUI.ComboBoxLayoutManager
,
BasicComboBoxUI.FocusHandler
,
BasicComboBoxUI.ItemHandler
,
BasicComboBoxUI.KeyHandler
,
BasicComboBoxUI.ListDataHandler
,
BasicComboBoxUI.PropertyChangeHandler
Field Summary
Fields declared in class javax.swing.plaf.basic.
BasicComboBoxUI
arrowButton
,
cachedMinimumSize
,
comboBox
,
currentValuePane
,
editor
,
focusListener
,
hasFocus
,
isMinimumSizeDirty
,
itemListener
,
keyListener
,
listBox
,
listDataListener
,
padding
,
popup
,
popupKeyListener
,
popupMouseListener
,
popupMouseMotionListener
,
propertyChangeListener
,
squareButton
Fields declared in interface javax.swing.plaf.synth.
SynthConstants
DEFAULT
,
DISABLED
,
ENABLED
,
FOCUSED
,
MOUSE_OVER
,
PRESSED
,
SELECTED
Constructor Summary
Constructors
Constructor
Description
SynthComboBoxUI
()
Constructs a
SynthComboBoxUI
.
Method Summary
All Methods
Static Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
static
ComponentUI
createUI
(
JComponent
c)
Creates a new UI object for the given component.
SynthContext
getContext
(
JComponent
c)
Returns the Context for the specified component.
protected
Dimension
getDefaultSize
()
Returns the default size of an empty display area of the combo box using
 the current renderer and font.
Dimension
getMinimumSize
(
JComponent
c)
The minimum size is the size of the display area plus insets plus the button.
void
installUI
(
JComponent
c)
Configures the specified component appropriately for the look and feel.
void
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
protected void
paint
(
SynthContext
context,
Graphics
g)
Paints the specified component.
void
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
void
paintCurrentValue
(
Graphics
g,
Rectangle
bounds,
 boolean hasFocus)
Paints the currently selected item.
void
propertyChange
(
PropertyChangeEvent
e)
This method gets called when a bound property is changed.
void
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
Methods declared in class javax.swing.plaf.basic.
BasicComboBoxUI
addEditor
,
configureArrowButton
,
configureEditor
,
createArrowButton
,
createEditor
,
createFocusListener
,
createItemListener
,
createKeyListener
,
createLayoutManager
,
createListDataListener
,
createPopup
,
createPropertyChangeListener
,
createRenderer
,
getBaseline
,
getBaselineResizeBehavior
,
getDisplaySize
,
getInsets
,
getSizeForComponent
,
installComponents
,
installDefaults
,
installKeyboardActions
,
installListeners
,
isFocusTraversable
,
isNavigationKey
,
isPopupVisible
,
paintCurrentValueBackground
,
rectangleForCurrentValue
,
removeEditor
,
selectNextPossibleValue
,
selectPreviousPossibleValue
,
setPopupVisible
,
toggleOpenClose
,
unconfigureArrowButton
,
unconfigureEditor
,
uninstallComponents
,
uninstallDefaults
,
uninstallKeyboardActions
,
uninstallListeners
Methods declared in class javax.swing.plaf.
ComponentUI
contains
,
getAccessibleChild
,
getAccessibleChildrenCount
,
getMaximumSize
,
getPreferredSize
,
uninstallUI
Methods declared in class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Constructor Details
SynthComboBoxUI
public
SynthComboBoxUI
()
Constructs a
SynthComboBoxUI
.
Method Details
createUI
public static
ComponentUI
createUI
(
JComponent
c)
Creates a new UI object for the given component.
Parameters:
c
- component to create UI object for
Returns:
the UI object
installUI
public
void
installUI
(
JComponent
c)
Configures the specified component appropriately for the look and feel.
 This method is invoked when the
ComponentUI
instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should
not
be overridden.
Install a
LayoutManager
on the component if necessary.
Create/add any required sub-components to the component.
Create/install event listeners on the component.
Create/install a
PropertyChangeListener
on the component in order
     to detect and respond to component property changes appropriately.
Install keyboard UI (mnemonics, traversal, etc.) on the component.
Initialize any appropriate instance data.
Overridden to ensure that ButtonHandler is created prior to any of
 the other installXXX methods, since several of them reference
 buttonHandler.
Overrides:
installUI
in class
ComponentUI
Parameters:
c
- the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent)
JComponent.setUI(javax.swing.plaf.ComponentUI)
JComponent.updateUI()
getContext
public
SynthContext
getContext
(
JComponent
c)
Returns the Context for the specified component.
Specified by:
getContext
in interface
SynthUI
Parameters:
c
- Component requesting SynthContext.
Returns:
SynthContext describing component.
propertyChange
public
void
propertyChange
(
PropertyChangeEvent
e)
This method gets called when a bound property is changed.
Specified by:
propertyChange
in interface
PropertyChangeListener
Parameters:
e
- A PropertyChangeEvent object describing the event source
          and the property that has changed.
update
public
void
update
(
Graphics
g,
JComponent
c)
Notifies this UI delegate to repaint the specified component.
 This method paints the component background, then calls
 the
paint(SynthContext,Graphics)
method.
In general, this method does not need to be overridden by subclasses.
 All Look and Feel rendering code should reside in the
paint
method.
Overrides:
update
in class
ComponentUI
Parameters:
g
- the
Graphics
object used for painting
c
- the component being painted
See Also:
paint(SynthContext,Graphics)
getMinimumSize
public
Dimension
getMinimumSize
(
JComponent
c)
The minimum size is the size of the display area plus insets plus the button.
Overrides:
getMinimumSize
in class
BasicComboBoxUI
Parameters:
c
- the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a
Dimension
object or
null
See Also:
JComponent.getMinimumSize()
LayoutManager.minimumLayoutSize(java.awt.Container)
ComponentUI.getPreferredSize(javax.swing.JComponent)
paint
public
void
paint
(
Graphics
g,
JComponent
c)
Paints the specified component according to the Look and Feel.
This method is not used by Synth Look and Feel.
 Painting is handled by the
paint(SynthContext,Graphics)
method.
Overrides:
paint
in class
ComponentUI
Parameters:
g
- the
Graphics
object used for painting
c
- the component being painted
See Also:
paint(SynthContext,Graphics)
paint
protected
void
paint
(
SynthContext
context,
Graphics
g)
Paints the specified component.
Parameters:
context
- context for the component being painted
g
- the
Graphics
object used for painting
See Also:
update(Graphics,JComponent)
paintBorder
public
void
paintBorder
(
SynthContext
context,
Graphics
g,
 int x,
 int y,
 int w,
 int h)
Paints the border.
Specified by:
paintBorder
in interface
SynthUI
Parameters:
context
- a component context
g
-
Graphics
to paint on
x
- the X coordinate
y
- the Y coordinate
w
- width of the border
h
- height of the border
paintCurrentValue
public
void
paintCurrentValue
(
Graphics
g,
Rectangle
bounds,
 boolean hasFocus)
Paints the currently selected item.
Overrides:
paintCurrentValue
in class
BasicComboBoxUI
Parameters:
g
- an instance of
Graphics
bounds
- a bounding rectangle to render to
hasFocus
- is focused
getDefaultSize
protected
Dimension
getDefaultSize
()
Returns the default size of an empty display area of the combo box using
 the current renderer and font.

 This method was overridden to use SynthComboBoxRenderer instead of
 DefaultListCellRenderer as the default renderer when calculating the
 size of the combo box. This is used in the case of the combo not having
 any data.
Overrides:
getDefaultSize
in class
BasicComboBoxUI
Returns:
the size of an empty display area
See Also:
BasicComboBoxUI.getDisplaySize()
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.