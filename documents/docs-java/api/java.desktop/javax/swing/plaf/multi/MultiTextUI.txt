MultiTextUI (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field
|
Constr
|
Method
Detail:
Field
|
Constr
|
Method
SEARCH
Module
java.desktop
Package
javax.swing.plaf.multi
Class MultiTextUI
java.lang.Object
javax.swing.plaf.ComponentUI
javax.swing.plaf.TextUI
javax.swing.plaf.multi.MultiTextUI
public class
MultiTextUI
extends
TextUI
A multiplexing UI used to combine
TextUI
s.
This file was automatically generated by AutoMulti.
Field Summary
Fields
Modifier and Type
Field
Description
protected
Vector
<
ComponentUI
>
uis
The vector containing the real UIs.
Constructor Summary
Constructors
Constructor
Description
MultiTextUI
()
Constructs a
MultiTextUI
.
Method Summary
All Methods
Static Methods
Instance Methods
Concrete Methods
Deprecated Methods
Modifier and Type
Method
Description
boolean
contains
(
JComponent
a,
 int b,
 int c)
Invokes the
contains
method on each UI handled by this object.
static
ComponentUI
createUI
(
JComponent
a)
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
void
damageRange
(
JTextComponent
a,
 int b,
 int c)
Invokes the
damageRange
method on each UI handled by this object.
void
damageRange
(
JTextComponent
a,
 int b,
 int c,
Position.Bias
d,
Position.Bias
e)
Invokes the
damageRange
method on each UI handled by this object.
Accessible
getAccessibleChild
(
JComponent
a,
 int b)
Invokes the
getAccessibleChild
method on each UI handled by this object.
int
getAccessibleChildrenCount
(
JComponent
a)
Invokes the
getAccessibleChildrenCount
method on each UI handled by this object.
EditorKit
getEditorKit
(
JTextComponent
a)
Invokes the
getEditorKit
method on each UI handled by this object.
Dimension
getMaximumSize
(
JComponent
a)
Invokes the
getMaximumSize
method on each UI handled by this object.
Dimension
getMinimumSize
(
JComponent
a)
Invokes the
getMinimumSize
method on each UI handled by this object.
int
getNextVisualPositionFrom
(
JTextComponent
a,
 int b,
Position.Bias
c,
 int d,
Position.Bias
[] e)
Invokes the
getNextVisualPositionFrom
method on each UI handled by this object.
Dimension
getPreferredSize
(
JComponent
a)
Invokes the
getPreferredSize
method on each UI handled by this object.
View
getRootView
(
JTextComponent
a)
Invokes the
getRootView
method on each UI handled by this object.
String
getToolTipText
(
JTextComponent
a,
Point
b)
Invokes the
getToolTipText
method on each UI handled by this object.
ComponentUI
[]
getUIs
()
Returns the list of UIs associated with this multiplexing UI.
void
installUI
(
JComponent
a)
Invokes the
installUI
method on each UI handled by this object.
Rectangle
modelToView
(
JTextComponent
a,
 int b)
Deprecated.
replaced by
TextUI.modelToView2D(JTextComponent, int, Position.Bias)
Rectangle
modelToView
(
JTextComponent
a,
 int b,
Position.Bias
c)
Deprecated.
replaced by
TextUI.modelToView2D(JTextComponent, int, Position.Bias)
void
paint
(
Graphics
a,
JComponent
b)
Invokes the
paint
method on each UI handled by this object.
void
uninstallUI
(
JComponent
a)
Invokes the
uninstallUI
method on each UI handled by this object.
void
update
(
Graphics
a,
JComponent
b)
Invokes the
update
method on each UI handled by this object.
int
viewToModel
(
JTextComponent
a,
Point
b)
Deprecated.
int
viewToModel
(
JTextComponent
a,
Point
b,
Position.Bias
[] c)
Deprecated.
Methods declared in class javax.swing.plaf.
TextUI
getToolTipText2D
,
modelToView2D
,
viewToModel2D
Methods declared in class javax.swing.plaf.
ComponentUI
getBaseline
,
getBaselineResizeBehavior
Methods declared in class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Field Details
uis
protected
Vector
<
ComponentUI
>
uis
The vector containing the real UIs.  This is populated
 in the call to
createUI
, and can be obtained by calling
 the
getUIs
method.  The first element is guaranteed to be the real UI
 obtained from the default look and feel.
Constructor Details
MultiTextUI
public
MultiTextUI
()
Constructs a
MultiTextUI
.
Method Details
getUIs
public
ComponentUI
[]
getUIs
()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.
Returns:
an array of the UI delegates
getToolTipText
public
String
getToolTipText
(
JTextComponent
a,
Point
b)
Invokes the
getToolTipText
method on each UI handled by this object.
Overrides:
getToolTipText
in class
TextUI
Parameters:
a
- the text component for which this UI is installed
b
- a
Point
specifying location for which to get a tooltip
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default
LookAndFeel
Since:
1.4
See Also:
JTextComponent.getToolTipText(java.awt.event.MouseEvent)
modelToView
@Deprecated
(
since
="9")
public
Rectangle
modelToView
(
JTextComponent
a,
 int b)
throws
BadLocationException
Deprecated.
replaced by
TextUI.modelToView2D(JTextComponent, int, Position.Bias)
Invokes the
modelToView
method on each UI handled by this object.
Specified by:
modelToView
in class
TextUI
Parameters:
a
- the text component for which this UI is installed
b
- the local location in the model to translate >= 0
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default
LookAndFeel
Throws:
BadLocationException
- if the given position does not
   represent a valid location in the associated document
modelToView
@Deprecated
(
since
="9")
public
Rectangle
modelToView
(
JTextComponent
a,
 int b,
Position.Bias
c)
throws
BadLocationException
Deprecated.
replaced by
TextUI.modelToView2D(JTextComponent, int, Position.Bias)
Invokes the
modelToView
method on each UI handled by this object.
Specified by:
modelToView
in class
TextUI
Parameters:
a
- the text component for which this UI is installed
b
- the local location in the model to translate >= 0
c
- the bias for the position
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default
LookAndFeel
Throws:
BadLocationException
- if the given position does not
   represent a valid location in the associated document
viewToModel
@Deprecated
(
since
="9")
public
int
viewToModel
(
JTextComponent
a,
Point
b)
Deprecated.
Invokes the
viewToModel
method on each UI handled by this object.
Specified by:
viewToModel
in class
TextUI
Parameters:
a
- the text component for which this UI is installed
b
- the location in the view to translate.  This
   should be in the same coordinate system as the mouse
   events.
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default
LookAndFeel
viewToModel
@Deprecated
(
since
="9")
public
int
viewToModel
(
JTextComponent
a,
Point
b,
Position.Bias
[] c)
Deprecated.
Invokes the
viewToModel
method on each UI handled by this object.
Specified by:
viewToModel
in class
TextUI
Parameters:
a
- the text component for which this UI is installed
b
- the location in the view to translate.
           This should be in the same coordinate system
           as the mouse events.
c
- filled in by this method to indicate whether
           the point given is closer to the previous or the next
           character in the model
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default
LookAndFeel
getNextVisualPositionFrom
public
int
getNextVisualPositionFrom
(
JTextComponent
a,
 int b,
Position.Bias
c,
 int d,
Position.Bias
[] e)
throws
BadLocationException
Invokes the
getNextVisualPositionFrom
method on each UI handled by this object.
Specified by:
getNextVisualPositionFrom
in class
TextUI
Parameters:
a
- the text component for which this UI is installed
b
- the position to convert >= 0
c
- the bias for the position
d
- the direction from the current position that can
  be thought of as the arrow keys typically found on a keyboard.
  This may be SwingConstants.WEST, SwingConstants.EAST,
  SwingConstants.NORTH, or SwingConstants.SOUTH
e
- an array to contain the bias for the returned position
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default
LookAndFeel
Throws:
BadLocationException
- for a bad location within a document model
damageRange
public
void
damageRange
(
JTextComponent
a,
 int b,
 int c)
Invokes the
damageRange
method on each UI handled by this object.
Specified by:
damageRange
in class
TextUI
Parameters:
a
- the text component for which this UI is installed
b
- the beginning of the range >= 0
c
- the end of the range >= p0
damageRange
public
void
damageRange
(
JTextComponent
a,
 int b,
 int c,
Position.Bias
d,
Position.Bias
e)
Invokes the
damageRange
method on each UI handled by this object.
Specified by:
damageRange
in class
TextUI
Parameters:
a
- the text component for which this UI is installed
b
- the beginning of the range >= 0
c
- the end of the range >= p0
d
- the bias of the first character position, toward the
        previous character or the next character
e
- the bias of the second character position, toward the
        previous character or the next character
getEditorKit
public
EditorKit
getEditorKit
(
JTextComponent
a)
Invokes the
getEditorKit
method on each UI handled by this object.
Specified by:
getEditorKit
in class
TextUI
Parameters:
a
- the text component for which this UI is installed
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default
LookAndFeel
getRootView
public
View
getRootView
(
JTextComponent
a)
Invokes the
getRootView
method on each UI handled by this object.
Specified by:
getRootView
in class
TextUI
Parameters:
a
- the text component for which this UI is installed
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default
LookAndFeel
contains
public
boolean
contains
(
JComponent
a,
 int b,
 int c)
Invokes the
contains
method on each UI handled by this object.
Overrides:
contains
in class
ComponentUI
Parameters:
a
- the component where the
x,y
location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
b
- the
x
coordinate of the point
c
- the
y
coordinate of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default
LookAndFeel
See Also:
JComponent.contains(int, int)
Component.contains(int, int)
update
public
void
update
(
Graphics
a,
JComponent
b)
Invokes the
update
method on each UI handled by this object.
Overrides:
update
in class
ComponentUI
Parameters:
a
- the
Graphics
context in which to paint
b
- the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent)
JComponent.paintComponent(java.awt.Graphics)
createUI
public static
ComponentUI
createUI
(
JComponent
a)
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.  Otherwise, just returns the
 UI object obtained from the default
LookAndFeel
.
Parameters:
a
- the component to create the UI for
Returns:
the UI delegate created
installUI
public
void
installUI
(
JComponent
a)
Invokes the
installUI
method on each UI handled by this object.
Overrides:
installUI
in class
ComponentUI
Parameters:
a
- the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent)
JComponent.setUI(javax.swing.plaf.ComponentUI)
JComponent.updateUI()
uninstallUI
public
void
uninstallUI
(
JComponent
a)
Invokes the
uninstallUI
method on each UI handled by this object.
Overrides:
uninstallUI
in class
ComponentUI
Parameters:
a
- the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent)
JComponent.updateUI()
paint
public
void
paint
(
Graphics
a,
JComponent
b)
Invokes the
paint
method on each UI handled by this object.
Overrides:
paint
in class
ComponentUI
Parameters:
a
- the
Graphics
context in which to paint
b
- the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)
getPreferredSize
public
Dimension
getPreferredSize
(
JComponent
a)
Invokes the
getPreferredSize
method on each UI handled by this object.
Overrides:
getPreferredSize
in class
ComponentUI
Parameters:
a
- the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default
LookAndFeel
See Also:
JComponent.getPreferredSize()
LayoutManager.preferredLayoutSize(java.awt.Container)
getMinimumSize
public
Dimension
getMinimumSize
(
JComponent
a)
Invokes the
getMinimumSize
method on each UI handled by this object.
Overrides:
getMinimumSize
in class
ComponentUI
Parameters:
a
- the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default
LookAndFeel
See Also:
JComponent.getMinimumSize()
LayoutManager.minimumLayoutSize(java.awt.Container)
ComponentUI.getPreferredSize(javax.swing.JComponent)
getMaximumSize
public
Dimension
getMaximumSize
(
JComponent
a)
Invokes the
getMaximumSize
method on each UI handled by this object.
Overrides:
getMaximumSize
in class
ComponentUI
Parameters:
a
- the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default
LookAndFeel
See Also:
JComponent.getMaximumSize()
LayoutManager2.maximumLayoutSize(java.awt.Container)
getAccessibleChildrenCount
public
int
getAccessibleChildrenCount
(
JComponent
a)
Invokes the
getAccessibleChildrenCount
method on each UI handled by this object.
Overrides:
getAccessibleChildrenCount
in class
ComponentUI
Parameters:
a
-
JComponent
for which to get count of accessible children
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default
LookAndFeel
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)
getAccessibleChild
public
Accessible
getAccessibleChild
(
JComponent
a,
 int b)
Invokes the
getAccessibleChild
method on each UI handled by this object.
Overrides:
getAccessibleChild
in class
ComponentUI
Parameters:
a
- a
JComponent
for which to get a child object
b
- zero-based index of child
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default
LookAndFeel
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.