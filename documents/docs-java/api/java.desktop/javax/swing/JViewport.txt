JViewport (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested
|
Field
|
Constr
|
Method
Detail:
Field
|
Constr
|
Method
SEARCH
Module
java.desktop
Package
javax.swing
Class JViewport
java.lang.Object
java.awt.Component
java.awt.Container
javax.swing.JComponent
javax.swing.JViewport
All Implemented Interfaces:
ImageObserver
,
MenuContainer
,
Serializable
,
Accessible
public class
JViewport
extends
JComponent
implements
Accessible
The "viewport" or "porthole" through which you see the underlying
 information. When you scroll, what moves is the viewport. It is like
 peering through a camera's viewfinder. Moving the viewfinder upwards
 brings new things into view at the top of the picture and loses
 things that were at the bottom.
By default,
JViewport
is opaque. To change this, use the
setOpaque
method.
NOTE:
We have implemented a faster scrolling algorithm that
 does not require a buffer to draw in. The algorithm works as follows:
The view and parent view are checked to see if they are
JComponents
,
 if they aren't, stop and repaint the whole viewport.
If the viewport is obscured by an ancestor, stop and repaint the whole
 viewport.
Compute the region that will become visible, if it is as big as
 the viewport, stop and repaint the whole view region.
Obtain the ancestor
Window
's graphics and
 do a
copyArea
on the scrolled region.
Message the view to repaint the newly visible region.
The next time paint is invoked on the viewport, if the clip region
 is smaller than the viewport size a timer is kicked off to repaint the
 whole region.
In general this approach is much faster. Compared to the backing store
 approach this avoids the overhead of maintaining an offscreen buffer and
 having to do two
copyArea
s.
 Compared to the non backing store case this
 approach will greatly reduce the painted region.
This approach can cause slower times than the backing store approach
 when the viewport is obscured by another window, or partially offscreen.
 When another window
 obscures the viewport the copyArea will copy garbage and a
 paint event will be generated by the system to inform us we need to
 paint the newly exposed region. The only way to handle this is to
 repaint the whole viewport, which can cause slower performance than the
 backing store case. In most applications very rarely will the user be
 scrolling while the viewport is obscured by another window or offscreen,
 so this optimization is usually worth the performance hit when obscured.
Warning:
Swing is not thread safe. For more
 information see
Swing's Threading
 Policy
.
Warning:
Serialized objects of this class will not be compatible with
 future Swing releases. The current serialization support is
 appropriate for short term storage or RMI between applications running
 the same version of Swing.  As of 1.4, support for long term storage
 of all JavaBeans
 has been added to the
java.beans
package.
 Please see
XMLEncoder
.
Since:
1.2
See Also:
JScrollPane
Nested Class Summary
Nested Classes
Modifier and Type
Class
Description
protected class
JViewport.AccessibleJViewport
This class implements accessibility support for the
JViewport
class.
protected class
JViewport.ViewListener
A listener for the view.
Nested classes/interfaces declared in class javax.swing.
JComponent
JComponent.AccessibleJComponent
Nested classes/interfaces declared in class java.awt.
Container
Container.AccessibleAWTContainer
Nested classes/interfaces declared in class java.awt.
Component
Component.AccessibleAWTComponent
,
Component.BaselineResizeBehavior
,
Component.BltBufferStrategy
,
Component.FlipBufferStrategy
Field Summary
Fields
Modifier and Type
Field
Description
protected boolean
backingStore
Deprecated.
As of Java 2 platform v1.3
static final int
BACKINGSTORE_SCROLL_MODE
Draws viewport contents into an offscreen image.
protected
Image
backingStoreImage
The view image used for a backing store.
static final int
BLIT_SCROLL_MODE
Use
graphics.copyArea
to implement scrolling.
protected boolean
isViewSizeSet
True when the viewport dimensions have been determined.
protected
Point
lastPaintPosition
The last
viewPosition
that we've painted, so we know how
 much of the backing store image is valid.
protected boolean
scrollUnderway
The
scrollUnderway
flag is used for components like
JList
.
static final int
SIMPLE_SCROLL_MODE
This mode uses the very simple method of redrawing the entire
 contents of the scrollpane each time it is scrolled.
Fields declared in class javax.swing.
JComponent
listenerList
,
TOOL_TIP_TEXT_KEY
,
ui
,
UNDEFINED_CONDITION
,
WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
,
WHEN_FOCUSED
,
WHEN_IN_FOCUSED_WINDOW
Fields declared in class java.awt.
Component
accessibleContext
,
BOTTOM_ALIGNMENT
,
CENTER_ALIGNMENT
,
LEFT_ALIGNMENT
,
RIGHT_ALIGNMENT
,
TOP_ALIGNMENT
Fields declared in interface java.awt.image.
ImageObserver
ABORT
,
ALLBITS
,
ERROR
,
FRAMEBITS
,
HEIGHT
,
PROPERTIES
,
SOMEBITS
,
WIDTH
Constructor Summary
Constructors
Constructor
Description
JViewport
()
Creates a
JViewport
.
Method Summary
All Methods
Instance Methods
Concrete Methods
Deprecated Methods
Modifier and Type
Method
Description
void
addChangeListener
(
ChangeListener
l)
Adds a
ChangeListener
to the list that is
 notified each time the view's
 size, position, or the viewport's extent size has changed.
protected void
addImpl
(
Component
child,
Object
constraints,
 int index)
Sets the
JViewport
's one lightweight child,
 which can be
null
.
protected boolean
computeBlit
(int dx,
 int dy,
Point
blitFrom,
Point
blitTo,
Dimension
blitSize,
Rectangle
blitPaint)
Computes the parameters for a blit where the backing store image
 currently contains
oldLoc
in the upper left hand corner
 and we're scrolling to
newLoc
.
protected
LayoutManager
createLayoutManager
()
Subclassers can override this to install a different
 layout manager (or
null
) in the constructor.
protected
JViewport.ViewListener
createViewListener
()
Creates a listener for the view.
protected void
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Notifies listeners of a property change.
protected void
fireStateChanged
()
Notifies all
ChangeListeners
when the views
 size, position, or the viewports extent size has changed.
AccessibleContext
getAccessibleContext
()
Gets the AccessibleContext associated with this JViewport.
ChangeListener
[]
getChangeListeners
()
Returns an array of all the
ChangeListener
s added
 to this JViewport with addChangeListener().
Dimension
getExtentSize
()
Returns the size of the visible part of the view in view coordinates.
final
Insets
getInsets
()
Returns the insets (border) dimensions as (0,0,0,0), since borders
 are not supported on a
JViewport
.
final
Insets
getInsets
(
Insets
insets)
Returns an
Insets
object containing this
JViewport
s inset values.
int
getScrollMode
()
Returns the current scrolling mode.
ViewportUI
getUI
()
Returns the L&F object that renders this component.
String
getUIClassID
()
Returns a string that specifies the name of the L&F class
 that renders this component.
Component
getView
()
Returns the
JViewport
's one child or
null
.
Point
getViewPosition
()
Returns the view coordinates that appear in the upper left
 hand corner of the viewport, or 0,0 if there's no view.
Rectangle
getViewRect
()
Returns a rectangle whose origin is
getViewPosition
and size is
getExtentSize
.
Dimension
getViewSize
()
If the view's size hasn't been explicitly set, return the
 preferred size, otherwise return the view's current size.
boolean
isBackingStoreEnabled
()
Deprecated.
As of Java 2 platform v1.3, replaced by
getScrollMode()
.
boolean
isOptimizedDrawingEnabled
()
The
JViewport
overrides the default implementation of
 this method (in
JComponent
) to return false.
protected boolean
isPaintingOrigin
()
Returns true if scroll mode is a
BACKINGSTORE_SCROLL_MODE
to cause
 painting to originate from
JViewport
, or one of its
 ancestors.
void
paint
(
Graphics
g)
Depending on whether the
backingStore
is enabled,
 either paint the image through the backing store or paint
 just the recently exposed part, using the backing store
 to "blit" the remainder.
protected
String
paramString
()
Returns a string representation of this
JViewport
.
void
remove
(
Component
child)
Removes the
Viewport
s one lightweight child.
void
removeChangeListener
(
ChangeListener
l)
Removes a
ChangeListener
from the list that's notified each
 time the views size, position, or the viewports extent size
 has changed.
void
repaint
(long tm,
 int x,
 int y,
 int w,
 int h)
Always repaint in the parents coordinate system to make sure
 only one paint is performed by the
RepaintManager
.
void
reshape
(int x,
 int y,
 int w,
 int h)
Sets the bounds of this viewport.
void
scrollRectToVisible
(
Rectangle
contentRect)
Scrolls the view so that
Rectangle
within the view becomes visible.
void
setBackingStoreEnabled
(boolean enabled)
Deprecated.
As of Java 2 platform v1.3, replaced by
setScrollMode()
.
final void
setBorder
(
Border
border)
The viewport "scrolls" its child (called the "view") by the
 normal parent/child clipping (typically the view is moved in
 the opposite direction of the scroll).
void
setExtentSize
(
Dimension
newExtent)
Sets the size of the visible part of the view using view coordinates.
void
setScrollMode
(int mode)
Used to control the method of scrolling the viewport contents.
void
setUI
(
ViewportUI
ui)
Sets the L&F object that renders this component.
void
setView
(
Component
view)
Sets the
JViewport
's one lightweight child
 (
view
), which can be
null
.
void
setViewPosition
(
Point
p)
Sets the view coordinates that appear in the upper left
 hand corner of the viewport, does nothing if there's no view.
void
setViewSize
(
Dimension
newSize)
Sets the size of the view.
Dimension
toViewCoordinates
(
Dimension
size)
Converts a size in pixel coordinates to view coordinates.
Point
toViewCoordinates
(
Point
p)
Converts a point in pixel coordinates to view coordinates.
void
updateUI
()
Resets the UI property to a value from the current look and feel.
Methods declared in class javax.swing.
JComponent
addAncestorListener
,
addNotify
,
addVetoableChangeListener
,
computeVisibleRect
,
contains
,
createToolTip
,
disable
,
enable
,
firePropertyChange
,
firePropertyChange
,
fireVetoableChange
,
getActionForKeyStroke
,
getActionMap
,
getAlignmentX
,
getAlignmentY
,
getAncestorListeners
,
getAutoscrolls
,
getBaseline
,
getBaselineResizeBehavior
,
getBorder
,
getBounds
,
getClientProperty
,
getComponentGraphics
,
getComponentPopupMenu
,
getConditionForKeyStroke
,
getDebugGraphicsOptions
,
getDefaultLocale
,
getFontMetrics
,
getGraphics
,
getHeight
,
getInheritsPopupMenu
,
getInputMap
,
getInputMap
,
getInputVerifier
,
getListeners
,
getLocation
,
getMaximumSize
,
getMinimumSize
,
getNextFocusableComponent
,
getPopupLocation
,
getPreferredSize
,
getRegisteredKeyStrokes
,
getRootPane
,
getSize
,
getToolTipLocation
,
getToolTipText
,
getToolTipText
,
getTopLevelAncestor
,
getTransferHandler
,
getVerifyInputWhenFocusTarget
,
getVetoableChangeListeners
,
getVisibleRect
,
getWidth
,
getX
,
getY
,
grabFocus
,
hide
,
isDoubleBuffered
,
isLightweightComponent
,
isManagingFocus
,
isOpaque
,
isPaintingForPrint
,
isPaintingTile
,
isRequestFocusEnabled
,
isValidateRoot
,
paintBorder
,
paintChildren
,
paintComponent
,
paintImmediately
,
paintImmediately
,
print
,
printAll
,
printBorder
,
printChildren
,
printComponent
,
processComponentKeyEvent
,
processKeyBinding
,
processKeyEvent
,
processMouseEvent
,
processMouseMotionEvent
,
putClientProperty
,
registerKeyboardAction
,
registerKeyboardAction
,
removeAncestorListener
,
removeNotify
,
removeVetoableChangeListener
,
repaint
,
requestDefaultFocus
,
requestFocus
,
requestFocus
,
requestFocusInWindow
,
requestFocusInWindow
,
resetKeyboardActions
,
revalidate
,
setActionMap
,
setAlignmentX
,
setAlignmentY
,
setAutoscrolls
,
setBackground
,
setComponentPopupMenu
,
setDebugGraphicsOptions
,
setDefaultLocale
,
setDoubleBuffered
,
setEnabled
,
setFocusTraversalKeys
,
setFont
,
setForeground
,
setInheritsPopupMenu
,
setInputMap
,
setInputVerifier
,
setMaximumSize
,
setMinimumSize
,
setNextFocusableComponent
,
setOpaque
,
setPreferredSize
,
setRequestFocusEnabled
,
setToolTipText
,
setTransferHandler
,
setUI
,
setVerifyInputWhenFocusTarget
,
setVisible
,
unregisterKeyboardAction
,
update
Methods declared in class java.awt.
Container
add
,
add
,
add
,
add
,
add
,
addContainerListener
,
addPropertyChangeListener
,
addPropertyChangeListener
,
applyComponentOrientation
,
areFocusTraversalKeysSet
,
countComponents
,
deliverEvent
,
doLayout
,
findComponentAt
,
findComponentAt
,
getComponent
,
getComponentAt
,
getComponentAt
,
getComponentCount
,
getComponents
,
getComponentZOrder
,
getContainerListeners
,
getFocusTraversalKeys
,
getFocusTraversalPolicy
,
getLayout
,
getMousePosition
,
insets
,
invalidate
,
isAncestorOf
,
isFocusCycleRoot
,
isFocusCycleRoot
,
isFocusTraversalPolicyProvider
,
isFocusTraversalPolicySet
,
layout
,
list
,
list
,
locate
,
minimumSize
,
paintComponents
,
preferredSize
,
printComponents
,
processContainerEvent
,
processEvent
,
remove
,
removeAll
,
removeContainerListener
,
setComponentZOrder
,
setFocusCycleRoot
,
setFocusTraversalPolicy
,
setFocusTraversalPolicyProvider
,
setLayout
,
transferFocusDownCycle
,
validate
,
validateTree
Methods declared in class java.awt.
Component
action
,
add
,
addComponentListener
,
addFocusListener
,
addHierarchyBoundsListener
,
addHierarchyListener
,
addInputMethodListener
,
addKeyListener
,
addMouseListener
,
addMouseMotionListener
,
addMouseWheelListener
,
bounds
,
checkImage
,
checkImage
,
coalesceEvents
,
contains
,
createImage
,
createImage
,
createVolatileImage
,
createVolatileImage
,
disableEvents
,
dispatchEvent
,
enable
,
enableEvents
,
enableInputMethods
,
firePropertyChange
,
firePropertyChange
,
firePropertyChange
,
firePropertyChange
,
firePropertyChange
,
firePropertyChange
,
getBackground
,
getBounds
,
getColorModel
,
getComponentListeners
,
getComponentOrientation
,
getCursor
,
getDropTarget
,
getFocusCycleRootAncestor
,
getFocusListeners
,
getFocusTraversalKeysEnabled
,
getFont
,
getForeground
,
getGraphicsConfiguration
,
getHierarchyBoundsListeners
,
getHierarchyListeners
,
getIgnoreRepaint
,
getInputContext
,
getInputMethodListeners
,
getInputMethodRequests
,
getKeyListeners
,
getLocale
,
getLocation
,
getLocationOnScreen
,
getMouseListeners
,
getMouseMotionListeners
,
getMousePosition
,
getMouseWheelListeners
,
getName
,
getParent
,
getPropertyChangeListeners
,
getPropertyChangeListeners
,
getSize
,
getToolkit
,
getTreeLock
,
gotFocus
,
handleEvent
,
hasFocus
,
imageUpdate
,
inside
,
isBackgroundSet
,
isCursorSet
,
isDisplayable
,
isEnabled
,
isFocusable
,
isFocusOwner
,
isFocusTraversable
,
isFontSet
,
isForegroundSet
,
isLightweight
,
isMaximumSizeSet
,
isMinimumSizeSet
,
isPreferredSizeSet
,
isShowing
,
isValid
,
isVisible
,
keyDown
,
keyUp
,
list
,
list
,
list
,
location
,
lostFocus
,
mouseDown
,
mouseDrag
,
mouseEnter
,
mouseExit
,
mouseMove
,
mouseUp
,
move
,
nextFocus
,
paintAll
,
postEvent
,
prepareImage
,
prepareImage
,
processComponentEvent
,
processFocusEvent
,
processHierarchyBoundsEvent
,
processHierarchyEvent
,
processInputMethodEvent
,
processMouseWheelEvent
,
remove
,
removeComponentListener
,
removeFocusListener
,
removeHierarchyBoundsListener
,
removeHierarchyListener
,
removeInputMethodListener
,
removeKeyListener
,
removeMouseListener
,
removeMouseMotionListener
,
removeMouseWheelListener
,
removePropertyChangeListener
,
removePropertyChangeListener
,
repaint
,
repaint
,
repaint
,
requestFocus
,
requestFocus
,
requestFocusInWindow
,
resize
,
resize
,
setBounds
,
setBounds
,
setComponentOrientation
,
setCursor
,
setDropTarget
,
setFocusable
,
setFocusTraversalKeysEnabled
,
setIgnoreRepaint
,
setLocale
,
setLocation
,
setLocation
,
setMixingCutoutShape
,
setName
,
setSize
,
setSize
,
show
,
show
,
size
,
toString
,
transferFocus
,
transferFocusBackward
,
transferFocusUpCycle
Methods declared in class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
wait
,
wait
,
wait
Field Details
isViewSizeSet
protected
boolean
isViewSizeSet
True when the viewport dimensions have been determined.
 The default is false.
lastPaintPosition
protected
Point
lastPaintPosition
The last
viewPosition
that we've painted, so we know how
 much of the backing store image is valid.
backingStore
@Deprecated
protected
boolean
backingStore
Deprecated.
As of Java 2 platform v1.3
True when this viewport is maintaining an offscreen image of its
 contents, so that some scrolling can take place using fast "bit-blit"
 operations instead of by accessing the view object to construct the
 display.  The default is
false
.
See Also:
setScrollMode(int)
backingStoreImage
protected transient
Image
backingStoreImage
The view image used for a backing store.
scrollUnderway
protected
boolean
scrollUnderway
The
scrollUnderway
flag is used for components like
JList
.  When the downarrow key is pressed on a
JList
and the selected
 cell is the last in the list, the
scrollpane
autoscrolls.
 Here, the old selected cell needs repainting and so we need
 a flag to make the viewport do the optimized painting
 only when there is an explicit call to
setViewPosition(Point)
.
 When
setBounds
is called through other routes,
 the flag is off and the view repaints normally.  Another approach
 would be to remove this from the
JViewport
class and have the
JList
manage this case by using
setBackingStoreEnabled
.  The default is
false
.
BLIT_SCROLL_MODE
public static final
int
BLIT_SCROLL_MODE
Use
graphics.copyArea
to implement scrolling.
 This is the fastest for most applications.
Since:
1.3
See Also:
setScrollMode(int)
Constant Field Values
BACKINGSTORE_SCROLL_MODE
public static final
int
BACKINGSTORE_SCROLL_MODE
Draws viewport contents into an offscreen image.
 This was previously the default mode for
JTable
.
 This mode may offer advantages over "blit mode"
 in some cases, but it requires a large chunk of extra RAM.
Since:
1.3
See Also:
setScrollMode(int)
Constant Field Values
SIMPLE_SCROLL_MODE
public static final
int
SIMPLE_SCROLL_MODE
This mode uses the very simple method of redrawing the entire
 contents of the scrollpane each time it is scrolled.
 This was the default behavior in Swing 1.0 and Swing 1.1.
 Either of the other two options will provide better performance
 in most cases.
Since:
1.3
See Also:
setScrollMode(int)
Constant Field Values
Constructor Details
JViewport
public
JViewport
()
Creates a
JViewport
.
Method Details
getUI
public
ViewportUI
getUI
()
Returns the L&F object that renders this component.
Overrides:
getUI
in class
JComponent
Returns:
a
ViewportUI
object
Since:
1.3
setUI
@BeanProperty
(
hidden
=true,
visualUpdate
=true,
description
="The UI object that implements the Component\'s LookAndFeel.")
public
void
setUI
(
ViewportUI
ui)
Sets the L&F object that renders this component.
Parameters:
ui
- the
ViewportUI
L&F object
Since:
1.3
See Also:
UIDefaults.getUI(javax.swing.JComponent)
updateUI
public
void
updateUI
()
Resets the UI property to a value from the current look and feel.
Overrides:
updateUI
in class
JComponent
See Also:
JComponent.updateUI()
getUIClassID
public
String
getUIClassID
()
Returns a string that specifies the name of the L&F class
 that renders this component.
Overrides:
getUIClassID
in class
JComponent
Returns:
the string "ViewportUI"
See Also:
JComponent.getUIClassID()
UIDefaults.getUI(javax.swing.JComponent)
addImpl
protected
void
addImpl
(
Component
child,
Object
constraints,
 int index)
Sets the
JViewport
's one lightweight child,
 which can be
null
.
 (Since there is only one child which occupies the entire viewport,
 the
constraints
and
index
arguments are ignored.)
Overrides:
addImpl
in class
Container
Parameters:
child
- the lightweight
child
of the viewport
constraints
- the
constraints
to be respected
index
- the index
See Also:
setView(java.awt.Component)
remove
public
void
remove
(
Component
child)
Removes the
Viewport
s one lightweight child.
Overrides:
remove
in class
Container
Parameters:
child
- the component to be removed
See Also:
setView(java.awt.Component)
scrollRectToVisible
public
void
scrollRectToVisible
(
Rectangle
contentRect)
Scrolls the view so that
Rectangle
within the view becomes visible.
This attempts to validate the view before scrolling if the
 view is currently not valid -
isValid
returns false.
 To avoid excessive validation when the containment hierarchy is
 being created this will not validate if one of the ancestors does not
 have a peer, or there is no validate root ancestor, or one of the
 ancestors is not a
Window
or
Applet
.
Note that this method will not scroll outside of the
 valid viewport; for example, if
contentRect
is larger
 than the viewport, scrolling will be confined to the viewport's
 bounds.
Overrides:
scrollRectToVisible
in class
JComponent
Parameters:
contentRect
- the
Rectangle
to display
See Also:
JComponent.isValidateRoot()
Component.isValid()
setBorder
public final
void
setBorder
(
Border
border)
The viewport "scrolls" its child (called the "view") by the
 normal parent/child clipping (typically the view is moved in
 the opposite direction of the scroll).  A non-
null
border,
 or non-zero insets, isn't supported, to prevent the geometry
 of this component from becoming complex enough to inhibit
 subclassing.  To create a
JViewport
with a border,
 add it to a
JPanel
that has a border.
Note:  If
border
is non-
null
, this
 method will throw an exception as borders are not supported on
 a
JViewPort
.
Overrides:
setBorder
in class
JComponent
Parameters:
border
- the
Border
to set
Throws:
IllegalArgumentException
- this method is not implemented
See Also:
Border
CompoundBorder
getInsets
public final
Insets
getInsets
()
Returns the insets (border) dimensions as (0,0,0,0), since borders
 are not supported on a
JViewport
.
Overrides:
getInsets
in class
JComponent
Returns:
a
Rectangle
of zero dimension and zero origin
See Also:
setBorder(javax.swing.border.Border)
getInsets
@BeanProperty
(
expert
=true)
public final
Insets
getInsets
(
Insets
insets)
Returns an
Insets
object containing this
JViewport
s inset values.  The passed-in
Insets
object will be reinitialized, and
 all existing values within this object are overwritten.
Overrides:
getInsets
in class
JComponent
Parameters:
insets
- the
Insets
object which can be reused
Returns:
this viewports inset values
See Also:
getInsets()
isOptimizedDrawingEnabled
public
boolean
isOptimizedDrawingEnabled
()
The
JViewport
overrides the default implementation of
 this method (in
JComponent
) to return false.
 This ensures
 that the drawing machinery will call the
Viewport
's
paint
implementation rather than messaging the
JViewport
's
 children directly.
Overrides:
isOptimizedDrawingEnabled
in class
JComponent
Returns:
false
isPaintingOrigin
protected
boolean
isPaintingOrigin
()
Returns true if scroll mode is a
BACKINGSTORE_SCROLL_MODE
to cause
 painting to originate from
JViewport
, or one of its
 ancestors. Otherwise returns
false
.
Overrides:
isPaintingOrigin
in class
JComponent
Returns:
true if scroll mode is a
BACKINGSTORE_SCROLL_MODE
.
See Also:
JComponent.isPaintingOrigin()
paint
public
void
paint
(
Graphics
g)
Depending on whether the
backingStore
is enabled,
 either paint the image through the backing store or paint
 just the recently exposed part, using the backing store
 to "blit" the remainder.
The term "blit" is the pronounced version of the PDP-10
 BLT (BLock Transfer) instruction, which copied a block of
 bits. (In case you were curious.)
Overrides:
paint
in class
JComponent
Parameters:
g
- the
Graphics
context within which to paint
See Also:
JComponent.paintComponent(java.awt.Graphics)
JComponent.paintBorder(java.awt.Graphics)
JComponent.paintChildren(java.awt.Graphics)
JComponent.getComponentGraphics(java.awt.Graphics)
JComponent.repaint(long, int, int, int, int)
reshape
public
void
reshape
(int x,
 int y,
 int w,
 int h)
Sets the bounds of this viewport.  If the viewport's width
 or height has changed, fire a
StateChanged
event.
Overrides:
reshape
in class
JComponent
Parameters:
x
- left edge of the origin
y
- top edge of the origin
w
- width in pixels
h
- height in pixels
See Also:
JComponent.reshape(int, int, int, int)
setScrollMode
@BeanProperty
(
bound
=false,
enumerationValues
={"JViewport.BLIT_SCROLL_MODE","JViewport.BACKINGSTORE_SCROLL_MODE","JViewport.SIMPLE_SCROLL_MODE"},
description
="Method of moving contents for incremental scrolls.")
public
void
setScrollMode
(int mode)
Used to control the method of scrolling the viewport contents.
 You may want to change this mode to get maximum performance for your
 use case.
Parameters:
mode
- one of the following values:
JViewport.BLIT_SCROLL_MODE
JViewport.BACKINGSTORE_SCROLL_MODE
JViewport.SIMPLE_SCROLL_MODE
Since:
1.3
See Also:
BLIT_SCROLL_MODE
BACKINGSTORE_SCROLL_MODE
SIMPLE_SCROLL_MODE
getScrollMode
public
int
getScrollMode
()
Returns the current scrolling mode.
Returns:
the
scrollMode
property
Since:
1.3
See Also:
setScrollMode(int)
isBackingStoreEnabled
@Deprecated
public
boolean
isBackingStoreEnabled
()
Deprecated.
As of Java 2 platform v1.3, replaced by
getScrollMode()
.
Returns
true
if this viewport is maintaining
 an offscreen image of its contents.
Returns:
true
if
scrollMode
is
BACKINGSTORE_SCROLL_MODE
setBackingStoreEnabled
@Deprecated
public
void
setBackingStoreEnabled
(boolean enabled)
Deprecated.
As of Java 2 platform v1.3, replaced by
setScrollMode()
.
If true if this viewport will maintain an offscreen
 image of its contents.  The image is used to reduce the cost
 of small one dimensional changes to the
viewPosition
.
 Rather than repainting the entire viewport we use
Graphics.copyArea
to effect some of the scroll.
Parameters:
enabled
- if true, maintain an offscreen backing store
getView
public
Component
getView
()
Returns the
JViewport
's one child or
null
.
Returns:
the viewports child, or
null
if none exists
See Also:
setView(java.awt.Component)
setView
public
void
setView
(
Component
view)
Sets the
JViewport
's one lightweight child
 (
view
), which can be
null
.
Parameters:
view
- the viewport's new lightweight child
See Also:
getView()
getViewSize
public
Dimension
getViewSize
()
If the view's size hasn't been explicitly set, return the
 preferred size, otherwise return the view's current size.
 If there is no view, return 0,0.
Returns:
a
Dimension
object specifying the size of the view
setViewSize
public
void
setViewSize
(
Dimension
newSize)
Sets the size of the view.  A state changed event will be fired.
Parameters:
newSize
- a
Dimension
object specifying the new
          size of the view
getViewPosition
public
Point
getViewPosition
()
Returns the view coordinates that appear in the upper left
 hand corner of the viewport, or 0,0 if there's no view.
Returns:
a
Point
object giving the upper left coordinates
setViewPosition
public
void
setViewPosition
(
Point
p)
Sets the view coordinates that appear in the upper left
 hand corner of the viewport, does nothing if there's no view.
Parameters:
p
- a
Point
object giving the upper left coordinates
getViewRect
public
Rectangle
getViewRect
()
Returns a rectangle whose origin is
getViewPosition
and size is
getExtentSize
.
 This is the visible part of the view, in view coordinates.
Returns:
a
Rectangle
giving the visible part of
          the view using view coordinates.
computeBlit
protected
boolean
computeBlit
(int dx,
 int dy,
Point
blitFrom,
Point
blitTo,
Dimension
blitSize,
Rectangle
blitPaint)
Computes the parameters for a blit where the backing store image
 currently contains
oldLoc
in the upper left hand corner
 and we're scrolling to
newLoc
.
 The parameters are modified
 to return the values required for the blit.
Parameters:
dx
- the horizontal delta
dy
- the vertical delta
blitFrom
- the
Point
we're blitting from
blitTo
- the
Point
we're blitting to
blitSize
- the
Dimension
of the area to blit
blitPaint
- the area to blit
Returns:
true if the parameters are modified and we're ready to blit;
          false otherwise
getExtentSize
public
Dimension
getExtentSize
()
Returns the size of the visible part of the view in view coordinates.
Returns:
a
Dimension
object giving the size of the view
toViewCoordinates
public
Dimension
toViewCoordinates
(
Dimension
size)
Converts a size in pixel coordinates to view coordinates.
 Subclasses of viewport that support "logical coordinates"
 will override this method.
Parameters:
size
- a
Dimension
object using pixel coordinates
Returns:
a
Dimension
object converted to view coordinates
toViewCoordinates
public
Point
toViewCoordinates
(
Point
p)
Converts a point in pixel coordinates to view coordinates.
 Subclasses of viewport that support "logical coordinates"
 will override this method.
Parameters:
p
- a
Point
object using pixel coordinates
Returns:
a
Point
object converted to view coordinates
setExtentSize
public
void
setExtentSize
(
Dimension
newExtent)
Sets the size of the visible part of the view using view coordinates.
Parameters:
newExtent
- a
Dimension
object specifying
          the size of the view
createViewListener
protected
JViewport.ViewListener
createViewListener
()
Creates a listener for the view.
Returns:
a
ViewListener
createLayoutManager
protected
LayoutManager
createLayoutManager
()
Subclassers can override this to install a different
 layout manager (or
null
) in the constructor.  Returns
 the
LayoutManager
to install on the
JViewport
.
Returns:
a
LayoutManager
addChangeListener
public
void
addChangeListener
(
ChangeListener
l)
Adds a
ChangeListener
to the list that is
 notified each time the view's
 size, position, or the viewport's extent size has changed.
Parameters:
l
- the
ChangeListener
to add
See Also:
removeChangeListener(javax.swing.event.ChangeListener)
setViewPosition(java.awt.Point)
setViewSize(java.awt.Dimension)
setExtentSize(java.awt.Dimension)
removeChangeListener
public
void
removeChangeListener
(
ChangeListener
l)
Removes a
ChangeListener
from the list that's notified each
 time the views size, position, or the viewports extent size
 has changed.
Parameters:
l
- the
ChangeListener
to remove
See Also:
addChangeListener(javax.swing.event.ChangeListener)
getChangeListeners
public
ChangeListener
[]
getChangeListeners
()
Returns an array of all the
ChangeListener
s added
 to this JViewport with addChangeListener().
Returns:
all of the
ChangeListener
s added or an empty
         array if no listeners have been added
Since:
1.4
fireStateChanged
protected
void
fireStateChanged
()
Notifies all
ChangeListeners
when the views
 size, position, or the viewports extent size has changed.
See Also:
addChangeListener(javax.swing.event.ChangeListener)
removeChangeListener(javax.swing.event.ChangeListener)
EventListenerList
repaint
public
void
repaint
(long tm,
 int x,
 int y,
 int w,
 int h)
Always repaint in the parents coordinate system to make sure
 only one paint is performed by the
RepaintManager
.
Overrides:
repaint
in class
JComponent
Parameters:
tm
- maximum time in milliseconds before update
x
- the
x
coordinate (pixels over from left)
y
- the
y
coordinate (pixels down from top)
w
- the width
h
- the height
See Also:
Component.update(java.awt.Graphics)
paramString
protected
String
paramString
()
Returns a string representation of this
JViewport
.
 This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be
null
.
Overrides:
paramString
in class
JComponent
Returns:
a string representation of this
JViewport
firePropertyChange
protected
void
firePropertyChange
(
String
propertyName,
Object
oldValue,
Object
newValue)
Notifies listeners of a property change. This is subclassed to update
 the
windowBlit
property.
 (The
putClientProperty
property is final).
Overrides:
firePropertyChange
in class
Component
Parameters:
propertyName
- a string containing the property name
oldValue
- the old value of the property
newValue
- the new value of the property
getAccessibleContext
public
AccessibleContext
getAccessibleContext
()
Gets the AccessibleContext associated with this JViewport.
 For viewports, the AccessibleContext takes the form of an
 AccessibleJViewport.
 A new AccessibleJViewport instance is created if necessary.
Specified by:
getAccessibleContext
in interface
Accessible
Overrides:
getAccessibleContext
in class
Component
Returns:
an AccessibleJViewport that serves as the
         AccessibleContext of this JViewport
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.