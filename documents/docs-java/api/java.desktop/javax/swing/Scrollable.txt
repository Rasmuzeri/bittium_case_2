Scrollable (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr |
Method
Detail:
Field |
Constr |
Method
SEARCH
Module
java.desktop
Package
javax.swing
Interface Scrollable
All Known Implementing Classes:
DefaultTreeCellEditor.DefaultTextField
,
JEditorPane
,
JFormattedTextField
,
JLayer
,
JList
,
JPasswordField
,
JTable
,
JTextArea
,
JTextComponent
,
JTextField
,
JTextPane
,
JTree
public interface
Scrollable
An interface that provides information to a scrolling container
 like JScrollPane.  A complex component that's likely to be used
 as a viewing a JScrollPane viewport (or other scrolling container)
 should implement this interface.
Since:
1.2
See Also:
JViewport
JScrollPane
JScrollBar
Method Summary
All Methods
Instance Methods
Abstract Methods
Modifier and Type
Method
Description
Dimension
getPreferredScrollableViewportSize
()
Returns the preferred size of the viewport for a view component.
int
getScrollableBlockIncrement
(
Rectangle
visibleRect,
 int orientation,
 int direction)
Components that display logical rows or columns should compute
 the scroll increment that will completely expose one block
 of rows or columns, depending on the value of orientation.
boolean
getScrollableTracksViewportHeight
()
Return true if a viewport should always force the height of this
 Scrollable to match the height of the viewport.
boolean
getScrollableTracksViewportWidth
()
Return true if a viewport should always force the width of this
Scrollable
to match the width of the viewport.
int
getScrollableUnitIncrement
(
Rectangle
visibleRect,
 int orientation,
 int direction)
Components that display logical rows or columns should compute
 the scroll increment that will completely expose one new row
 or column, depending on the value of orientation.
Method Details
getPreferredScrollableViewportSize
Dimension
getPreferredScrollableViewportSize
()
Returns the preferred size of the viewport for a view component.
 For example, the preferred size of a
JList
component
 is the size required to accommodate all of the cells in its list.
 However, the value of
preferredScrollableViewportSize
is the size required for
JList.getVisibleRowCount
rows.
 A component without any properties that would affect the viewport
 size should just return
getPreferredSize
here.
Returns:
the preferredSize of a
JViewport
whose view
    is this
Scrollable
See Also:
JComponent.getPreferredSize()
getScrollableUnitIncrement
int
getScrollableUnitIncrement
(
Rectangle
visibleRect,
 int orientation,
 int direction)
Components that display logical rows or columns should compute
 the scroll increment that will completely expose one new row
 or column, depending on the value of orientation.  Ideally,
 components should handle a partially exposed row or column by
 returning the distance required to completely expose the item.
Scrolling containers, like JScrollPane, will use this method
 each time the user requests a unit scroll.
Parameters:
visibleRect
- The view area visible within the viewport
orientation
- Either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL.
direction
- Less than zero to scroll up/left, greater than zero for down/right.
Returns:
The "unit" increment for scrolling in the specified direction.
         This value should always be positive.
See Also:
JScrollBar.setUnitIncrement(int)
getScrollableBlockIncrement
int
getScrollableBlockIncrement
(
Rectangle
visibleRect,
 int orientation,
 int direction)
Components that display logical rows or columns should compute
 the scroll increment that will completely expose one block
 of rows or columns, depending on the value of orientation.
Scrolling containers, like JScrollPane, will use this method
 each time the user requests a block scroll.
Parameters:
visibleRect
- The view area visible within the viewport
orientation
- Either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL.
direction
- Less than zero to scroll up/left, greater than zero for down/right.
Returns:
The "block" increment for scrolling in the specified direction.
         This value should always be positive.
See Also:
JScrollBar.setBlockIncrement(int)
getScrollableTracksViewportWidth
boolean
getScrollableTracksViewportWidth
()
Return true if a viewport should always force the width of this
Scrollable
to match the width of the viewport.
 For example a normal
 text view that supported line wrapping would return true here, since it
 would be undesirable for wrapped lines to disappear beyond the right
 edge of the viewport.  Note that returning true for a Scrollable
 whose ancestor is a JScrollPane effectively disables horizontal
 scrolling.
Scrolling containers, like JViewport, will use this method each
 time they are validated.
Returns:
True if a viewport should force the Scrollables width to match its own.
getScrollableTracksViewportHeight
boolean
getScrollableTracksViewportHeight
()
Return true if a viewport should always force the height of this
 Scrollable to match the height of the viewport.  For example a
 columnar text view that flowed text in left to right columns
 could effectively disable vertical scrolling by returning
 true here.
Scrolling containers, like JViewport, will use this method each
 time they are validated.
Returns:
True if a viewport should force the Scrollables height to match its own.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.