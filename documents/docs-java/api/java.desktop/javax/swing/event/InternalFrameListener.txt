InternalFrameListener (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr |
Method
Detail:
Field |
Constr |
Method
SEARCH
Module
java.desktop
Package
javax.swing.event
Interface InternalFrameListener
All Superinterfaces:
EventListener
All Known Implementing Classes:
BasicInternalFrameUI.BasicInternalFrameListener
,
InternalFrameAdapter
public interface
InternalFrameListener
extends
EventListener
The listener interface for receiving internal frame events.
 This class is functionally equivalent to the WindowListener class
 in the AWT.
See
How to Write an Internal Frame Listener
in
The Java Tutorial
for further documentation.
See Also:
WindowListener
Method Summary
All Methods
Instance Methods
Abstract Methods
Modifier and Type
Method
Description
void
internalFrameActivated
(
InternalFrameEvent
e)
Invoked when an internal frame is activated.
void
internalFrameClosed
(
InternalFrameEvent
e)
Invoked when an internal frame has been closed.
void
internalFrameClosing
(
InternalFrameEvent
e)
Invoked when an internal frame is in the process of being closed.
void
internalFrameDeactivated
(
InternalFrameEvent
e)
Invoked when an internal frame is de-activated.
void
internalFrameDeiconified
(
InternalFrameEvent
e)
Invoked when an internal frame is de-iconified.
void
internalFrameIconified
(
InternalFrameEvent
e)
Invoked when an internal frame is iconified.
void
internalFrameOpened
(
InternalFrameEvent
e)
Invoked when a internal frame has been opened.
Method Details
internalFrameOpened
void
internalFrameOpened
(
InternalFrameEvent
e)
Invoked when a internal frame has been opened.
Parameters:
e
- an
InternalFrameEvent
with information about the
JInteralFrame
that originated the event
See Also:
JInternalFrame.show()
internalFrameClosing
void
internalFrameClosing
(
InternalFrameEvent
e)
Invoked when an internal frame is in the process of being closed.
 The close operation can be overridden at this point.
Parameters:
e
- an
InternalFrameEvent
with information about the
JInteralFrame
that originated the event
See Also:
JInternalFrame.setDefaultCloseOperation(int)
internalFrameClosed
void
internalFrameClosed
(
InternalFrameEvent
e)
Invoked when an internal frame has been closed.
Parameters:
e
- an
InternalFrameEvent
with information about the
JInteralFrame
that originated the event
See Also:
JInternalFrame.setClosed(boolean)
internalFrameIconified
void
internalFrameIconified
(
InternalFrameEvent
e)
Invoked when an internal frame is iconified.
Parameters:
e
- an
InternalFrameEvent
with information about the
JInteralFrame
that originated the event
See Also:
JInternalFrame.setIcon(boolean)
internalFrameDeiconified
void
internalFrameDeiconified
(
InternalFrameEvent
e)
Invoked when an internal frame is de-iconified.
Parameters:
e
- an
InternalFrameEvent
with information about the
JInteralFrame
that originated the event
See Also:
JInternalFrame.setIcon(boolean)
internalFrameActivated
void
internalFrameActivated
(
InternalFrameEvent
e)
Invoked when an internal frame is activated.
Parameters:
e
- an
InternalFrameEvent
with information about the
JInteralFrame
that originated the event
See Also:
JInternalFrame.setSelected(boolean)
internalFrameDeactivated
void
internalFrameDeactivated
(
InternalFrameEvent
e)
Invoked when an internal frame is de-activated.
Parameters:
e
- an
InternalFrameEvent
with information about the
JInteralFrame
that originated the event
See Also:
JInternalFrame.setSelected(boolean)
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.