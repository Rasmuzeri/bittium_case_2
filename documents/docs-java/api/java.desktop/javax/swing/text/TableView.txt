TableView (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested
|
Field
|
Constr
|
Method
Detail:
Field |
Constr
|
Method
SEARCH
Module
java.desktop
Package
javax.swing.text
Class TableView
java.lang.Object
javax.swing.text.View
javax.swing.text.CompositeView
javax.swing.text.BoxView
javax.swing.text.TableView
All Implemented Interfaces:
SwingConstants
public abstract class
TableView
extends
BoxView
Implements View interface for a table, that is composed of an
 element structure where the child elements of the element
 this view is responsible for represent rows and the child
 elements of the row elements are cells.  The cell elements can
 have an arbitrary element structure under them, which will
 be built with the ViewFactory returned by the getViewFactory
 method.
TABLE
      ROW
        CELL
        CELL
      ROW
        CELL
        CELL
This is implemented as a hierarchy of boxes, the table itself
 is a vertical box, the rows are horizontal boxes, and the cells
 are vertical boxes.  The cells are allowed to span multiple
 columns and rows.  By default, the table can be thought of as
 being formed over a grid (i.e. somewhat like one would find in
 gridbag layout), where table cells can request to span more
 than one grid cell.  The default horizontal span of table cells
 will be based upon this grid, but can be changed by reimplementing
 the requested span of the cell (i.e. table cells can have independent
 spans if desired).
See Also:
View
Nested Class Summary
Nested Classes
Modifier and Type
Class
Description
class
TableView.TableCell
Deprecated.
A table cell can now be any View implementation.
class
TableView.TableRow
View of a row in a row-centric table.
Field Summary
Fields declared in class javax.swing.text.
View
BadBreakWeight
,
ExcellentBreakWeight
,
ForcedBreakWeight
,
GoodBreakWeight
,
X_AXIS
,
Y_AXIS
Fields declared in interface javax.swing.
SwingConstants
BOTTOM
,
CENTER
,
EAST
,
HORIZONTAL
,
LEADING
,
LEFT
,
NEXT
,
NORTH
,
NORTH_EAST
,
NORTH_WEST
,
PREVIOUS
,
RIGHT
,
SOUTH
,
SOUTH_EAST
,
SOUTH_WEST
,
TOP
,
TRAILING
,
VERTICAL
,
WEST
Constructor Summary
Constructors
Constructor
Description
TableView
(
Element
elem)
Constructs a TableView for the given element.
Method Summary
All Methods
Instance Methods
Concrete Methods
Deprecated Methods
Modifier and Type
Method
Description
protected
SizeRequirements
calculateMinorAxisRequirements
(int axis,
SizeRequirements
r)
Calculate the requirements for the minor axis.
protected
TableView.TableCell
createTableCell
(
Element
elem)
Deprecated.
Table cells can now be any arbitrary
 View implementation and should be produced by the
 ViewFactory rather than the table.
protected
TableView.TableRow
createTableRow
(
Element
elem)
Creates a new table row.
protected
View
getViewAtPosition
(int pos,
Rectangle
a)
Fetches the child view that represents the given position in
 the model.
protected void
layoutColumns
(int targetSpan,
 int[] offsets,
 int[] spans,
SizeRequirements
[] reqs)
Lays out the columns to fit within the given target span.
protected void
layoutMinorAxis
(int targetSpan,
 int axis,
 int[] offsets,
 int[] spans)
Perform layout for the minor axis of the box (i.e. the
 axis orthogonal to the axis that it represents).
void
replace
(int offset,
 int length,
View
[] views)
Change the child views.
Methods declared in class javax.swing.text.
BoxView
baselineLayout
,
baselineRequirements
,
calculateMajorAxisRequirements
,
childAllocation
,
flipEastAndWestAtEnds
,
forwardUpdate
,
getAlignment
,
getAxis
,
getChildAllocation
,
getHeight
,
getMaximumSpan
,
getMinimumSpan
,
getOffset
,
getPreferredSpan
,
getResizeWeight
,
getSpan
,
getViewAtPoint
,
getWidth
,
isAfter
,
isAllocationValid
,
isBefore
,
isLayoutValid
,
layout
,
layoutChanged
,
layoutMajorAxis
,
modelToView
,
paint
,
paintChild
,
preferenceChanged
,
setAxis
,
setSize
,
viewToModel
Methods declared in class javax.swing.text.
CompositeView
getBottomInset
,
getInsideAllocation
,
getLeftInset
,
getNextEastWestVisualPositionFrom
,
getNextNorthSouthVisualPositionFrom
,
getNextVisualPositionFrom
,
getRightInset
,
getTopInset
,
getView
,
getViewCount
,
getViewIndex
,
getViewIndexAtPosition
,
loadChildren
,
modelToView
,
setInsets
,
setParagraphInsets
,
setParent
Methods declared in class javax.swing.text.
View
append
,
breakView
,
changedUpdate
,
createFragment
,
forwardUpdateToView
,
getAttributes
,
getBreakWeight
,
getContainer
,
getDocument
,
getElement
,
getEndOffset
,
getGraphics
,
getParent
,
getStartOffset
,
getToolTipText
,
getViewFactory
,
getViewIndex
,
insert
,
insertUpdate
,
isVisible
,
modelToView
,
remove
,
removeAll
,
removeUpdate
,
updateChildren
,
updateLayout
,
viewToModel
Methods declared in class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Constructor Details
TableView
public
TableView
(
Element
elem)
Constructs a TableView for the given element.
Parameters:
elem
- the element that this view is responsible for
Method Details
createTableRow
protected
TableView.TableRow
createTableRow
(
Element
elem)
Creates a new table row.
Parameters:
elem
- an element
Returns:
the row
createTableCell
@Deprecated
protected
TableView.TableCell
createTableCell
(
Element
elem)
Deprecated.
Table cells can now be any arbitrary
 View implementation and should be produced by the
 ViewFactory rather than the table.
Parameters:
elem
- an element
Returns:
the cell
replace
public
void
replace
(int offset,
 int length,
View
[] views)
Change the child views.  This is implemented to
 provide the superclass behavior and invalidate the
 grid so that rows and columns will be recalculated.
Overrides:
replace
in class
BoxView
Parameters:
offset
- the starting index into the child views to insert
   the new views; this should be a value >= 0 and <= getViewCount
length
- the number of existing child views to remove;
   This should be a value >= 0 and <= (getViewCount() - offset)
views
- the child views to add; this value can be
null
to indicate no children are being added
   (useful to remove)
layoutColumns
protected
void
layoutColumns
(int targetSpan,
 int[] offsets,
 int[] spans,
SizeRequirements
[] reqs)
Lays out the columns to fit within the given target span.
 Returns the results through
offsets
and
spans
.
Parameters:
targetSpan
- the given span for total of all the table
  columns
offsets
- the return value of the offset from the
  origin for each column
spans
- the return value of how much to allocated to
  each column
reqs
- the requirements desired for each column.  This
  is the column maximum of the cells minimum, preferred, and
  maximum requested span
layoutMinorAxis
protected
void
layoutMinorAxis
(int targetSpan,
 int axis,
 int[] offsets,
 int[] spans)
Perform layout for the minor axis of the box (i.e. the
 axis orthogonal to the axis that it represents).  The results
 of the layout should be placed in the given arrays which represent
 the allocations to the children along the minor axis.  This
 is called by the superclass whenever the layout needs to be
 updated along the minor axis.
This is implemented to call the
layoutColumns
method, and then
 forward to the superclass to actually carry out the layout
 of the tables rows.
Overrides:
layoutMinorAxis
in class
BoxView
Parameters:
targetSpan
- the total span given to the view, which
  would be used to layout the children.
axis
- the axis being laid out.
offsets
- the offsets from the origin of the view for
  each of the child views.  This is a return value and is
  filled in by the implementation of this method.
spans
- the span of each child view.  This is a return
  value and is filled in by the implementation of this method.
calculateMinorAxisRequirements
protected
SizeRequirements
calculateMinorAxisRequirements
(int axis,
SizeRequirements
r)
Calculate the requirements for the minor axis.  This is called by
 the superclass whenever the requirements need to be updated (i.e.
 a preferenceChanged was messaged through this view).
This is implemented to calculate the requirements as the sum of the
 requirements of the columns.
Overrides:
calculateMinorAxisRequirements
in class
BoxView
Parameters:
axis
- the axis being studied
r
- the
SizeRequirements
object;
          if
null
one will be created
Returns:
the newly initialized
SizeRequirements
object
See Also:
SizeRequirements
getViewAtPosition
protected
View
getViewAtPosition
(int pos,
Rectangle
a)
Fetches the child view that represents the given position in
 the model.  This is implemented to walk through the children
 looking for a range that contains the given position.  In this
 view the children do not necessarily have a one to one mapping
 with the child elements.
Overrides:
getViewAtPosition
in class
CompositeView
Parameters:
pos
- the search position >= 0
a
- the allocation to the table on entry, and the
   allocation of the view containing the position on exit
Returns:
the view representing the given position, or
null
if there isn't one
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.