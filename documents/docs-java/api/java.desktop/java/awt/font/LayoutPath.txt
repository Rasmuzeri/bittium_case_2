LayoutPath (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr
|
Method
Detail:
Field |
Constr
|
Method
SEARCH
Module
java.desktop
Package
java.awt.font
Class LayoutPath
java.lang.Object
java.awt.font.LayoutPath
public abstract class
LayoutPath
extends
Object
LayoutPath provides a mapping between locations relative to the
 baseline and points in user space.  Locations consist of an advance
 along the baseline, and an offset perpendicular to the baseline at
 the advance.  Positive values along the perpendicular are in the
 direction that is 90 degrees clockwise from the baseline vector.
 Locations are represented as a
Point2D
, where x is the advance and
 y is the offset.
Since:
1.6
Constructor Summary
Constructors
Modifier
Constructor
Description
protected
LayoutPath
()
Constructor for subclasses to call.
Method Summary
All Methods
Instance Methods
Abstract Methods
Modifier and Type
Method
Description
abstract void
pathToPoint
(
Point2D
location,
 boolean preceding,
Point2D
point)
Convert a location relative to the path to a point in user
 coordinates.
abstract boolean
pointToPath
(
Point2D
point,
Point2D
location)
Convert a point in user space to a location relative to the
 path.
Methods declared in class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Constructor Details
LayoutPath
protected
LayoutPath
()
Constructor for subclasses to call.
Method Details
pointToPath
public abstract
boolean
pointToPath
(
Point2D
point,
Point2D
location)
Convert a point in user space to a location relative to the
 path. The location is chosen so as to minimize the distance
 from the point to the path (e.g., the magnitude of the offset
 will be smallest).  If there is more than one such location,
 the location with the smallest advance is chosen.
Parameters:
point
- the point to convert.  If it is not the same
 object as location, point will remain unmodified by this call.
location
- a
Point2D
to hold the returned location.
 It can be the same object as point.
Returns:
true if the point is associated with the portion of the
 path preceding the location, false if it is associated with
 the portion following.  The default, if the location is not at
 a break or sharp bend in the path, is to return true.
Throws:
NullPointerException
- if point or location is null
Since:
1.6
pathToPoint
public abstract
void
pathToPoint
(
Point2D
location,
 boolean preceding,
Point2D
point)
Convert a location relative to the path to a point in user
 coordinates.  The path might bend abruptly or be disjoint at
 the location's advance.  If this is the case, the value of
 'preceding' is used to disambiguate the portion of the path
 whose location and slope is to be used to interpret the offset.
Parameters:
location
- a
Point2D
representing the advance (in x) and
 offset (in y) of a location relative to the path.  If location
 is not the same object as point, location will remain
 unmodified by this call.
preceding
- if true, the portion preceding the advance
 should be used, if false the portion after should be used.
 This has no effect if the path does not break or bend sharply
 at the advance.
point
- a
Point2D
to hold the returned point.  It can be
 the same object as location.
Throws:
NullPointerException
- if location or point is null
Since:
1.6
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.