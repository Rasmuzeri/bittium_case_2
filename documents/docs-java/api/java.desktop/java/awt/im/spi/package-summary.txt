java.awt.im.spi (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Package:
Description
Related Packages
Classes and Interfaces
Package:
Description
|
Related Packages
|
Classes and Interfaces
SEARCH
Module
java.desktop
Package java.awt.im.spi
package
java.awt.im.spi
Provides interfaces that enable the development of input methods that can be
 used with any Java runtime environment. Input methods are software components
 that let the user enter text in ways other than simple typing on a keyboard.
 They are commonly used to enter Japanese, Chinese, or Korean - languages
 using thousands of different characters - on keyboards with far fewer keys.
 However, this package also allows the development of input methods for other
 languages and the use of entirely different input mechanisms, such as
 handwriting recognition.
Packaging Input Methods
Input methods can be made available by adding them to the application's class
 path. The main JAR file of an input method must contain the file:
META-INF/services/java.awt.im.spi.InputMethodDescriptor
The file should contain a list of fully-qualified class names, one per line,
 of classes implementing the
java.awt.im.spi.InputMethodDescriptor
interface. Space and tab characters surrounding each name, as well as blank
 lines, are ignored. The comment character is
'#'
(
\u0023
); on each line all characters following the first
 comment character are ignored. The file must be encoded in UTF-8.
For example, if the fully-qualified name of the class that implements
java.awt.im.spi.InputMethodDesciptor
for the
Foo
input
 method is
com.sun.ime.FooInputMethodDescriptor
, the file
META-INF/services/java.awt.im.spi.InputMethodDescriptor
contains a line:
com.sun.ime.FooInputMethodDescriptor
The input method must also provide at least two classes: one class
 implementing the
java.awt.im.spi.InputMethodDescriptor
interface, one
 class implementing the
java.awt.im.spi.InputMethod
interface. The
 input method should separate the implementations for these interfaces, so
 that loading of the class implementing
InputMethod
can be deferred
 until actually needed.
Loading Input Methods
The input method framework will usually defer loading of input  method
 classes until they are absolutely needed. It loads only the
InputMethodDescriptor
implementations during AWT initialization. It
 loads an
InputMethod
implementation when the input method has been
 selected.
Java Input Methods and Peered Text
 Components
The Java input method framework intends to support all combinations of input
 methods (host input methods and Java input methods) and components (peered
 and lightweight). However, because of limitations in the underlying platform,
 it may not always be possible to enable the communication between Java input
 methods and peered AWT components. Support for this specific combination is
 therefore platform dependent. In Sun's Java SE Runtime Environments, this
 combination is supported on Windows, but not on Solaris.
Related Documentation
For overviews, tutorials, examples, guides, and tool documentation, please
 see
Input Method Framework Overview
.
Since:
1.3
Related Packages
Package
Description
java.awt.im
Provides classes and interfaces for the input method framework.
Interfaces
Class
Description
InputMethod
Defines the interface for an input method that supports complex text input.
InputMethodContext
Provides methods that input methods
 can use to communicate with their client components or to request
 other services.
InputMethodDescriptor
Defines methods that provide sufficient information about an input method
 to enable selection and loading of that input method.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
Â© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.