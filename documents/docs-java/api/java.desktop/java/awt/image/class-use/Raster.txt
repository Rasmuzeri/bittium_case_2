Uses of Class java.awt.image.Raster (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Class
java.awt.image.Raster
Packages that use
Raster
Package
Description
java.awt
Contains all of the classes for creating user interfaces and for painting
 graphics and images.
java.awt.image
Provides classes for creating and modifying images.
javax.imageio
The main package of the Java Image I/O API.
Uses of
Raster
in
java.awt
Methods in
java.awt
that return
Raster
Modifier and Type
Method
Description
Raster
PaintContext.
getRaster
(int x,
 int y,
 int w,
 int h)
Returns a
Raster
containing the colors generated for
 the graphics operation.
Methods in
java.awt
with parameters of type
Raster
Modifier and Type
Method
Description
void
CompositeContext.
compose
(
Raster
src,
Raster
dstIn,
WritableRaster
dstOut)
Composes the two source
Raster
objects and
 places the result in the destination
WritableRaster
.
Uses of
Raster
in
java.awt.image
Subclasses of
Raster
in
java.awt.image
Modifier and Type
Class
Description
class
WritableRaster
This class extends Raster to provide pixel writing capabilities.
Fields in
java.awt.image
declared as
Raster
Modifier and Type
Field
Description
protected
Raster
Raster.
parent
The parent of this Raster, or null.
Methods in
java.awt.image
that return
Raster
Modifier and Type
Method
Description
Raster
Raster.
createChild
(int parentX,
 int parentY,
 int width,
 int height,
 int childMinX,
 int childMinY,
 int[] bandList)
Returns a new Raster which shares all or part of this Raster's
 DataBuffer.
static
Raster
Raster.
createRaster
(
SampleModel
sm,
DataBuffer
db,
Point
location)
Creates a Raster with the specified SampleModel and DataBuffer.
Raster
Raster.
createTranslatedChild
(int childMinX,
 int childMinY)
Create a Raster with the same size, SampleModel and DataBuffer
 as this one, but with a different location.
Raster
BufferedImage.
getData
()
Returns the image as one large tile.
Raster
BufferedImage.
getData
(
Rectangle
rect)
Computes and returns an arbitrary region of the
BufferedImage
.
Raster
RenderedImage.
getData
()
Returns the image as one large tile (for tile based
 images this will require fetching the whole image
 and copying the image data over).
Raster
RenderedImage.
getData
(
Rectangle
rect)
Computes and returns an arbitrary region of the RenderedImage.
Raster
Raster.
getParent
()
Returns the parent Raster (if any) of this Raster or null.
Raster
BufferedImage.
getTile
(int tileX,
 int tileY)
Returns tile (
tileX
,
tileY
).
Raster
RenderedImage.
getTile
(int tileX,
 int tileY)
Returns tile (tileX, tileY).
Methods in
java.awt.image
with parameters of type
Raster
Modifier and Type
Method
Description
BufferedImage
IndexColorModel.
convertToIntDiscrete
(
Raster
raster,
 boolean forceARGB)
Returns a new
BufferedImage
of TYPE_INT_ARGB or
 TYPE_INT_RGB that has a
Raster
with pixel data
 computed by expanding the indices in the source
Raster
using the color/alpha component arrays of this
ColorModel
.
WritableRaster
AffineTransformOp.
createCompatibleDestRaster
(
Raster
src)
Creates a zeroed destination
Raster
with the correct size
 and number of bands.
WritableRaster
BandCombineOp.
createCompatibleDestRaster
(
Raster
src)
Creates a zeroed destination
Raster
with the correct size
 and number of bands.
WritableRaster
ColorConvertOp.
createCompatibleDestRaster
(
Raster
src)
Creates a zeroed destination Raster with the correct size and number of
 bands, given this source.
WritableRaster
ConvolveOp.
createCompatibleDestRaster
(
Raster
src)
Creates a zeroed destination Raster with the correct size and number
 of bands, given this source.
WritableRaster
LookupOp.
createCompatibleDestRaster
(
Raster
src)
Creates a zeroed-destination
Raster
with the
 correct size and number of bands, given this source.
WritableRaster
RasterOp.
createCompatibleDestRaster
(
Raster
src)
Creates a zeroed destination Raster with the correct size and number of
 bands.
WritableRaster
RescaleOp.
createCompatibleDestRaster
(
Raster
src)
Creates a zeroed-destination
Raster
with the correct
 size and number of bands, given this source.
final
WritableRaster
AffineTransformOp.
filter
(
Raster
src,
WritableRaster
dst)
Transforms the source
Raster
and stores the results in
 the destination
Raster
.
WritableRaster
BandCombineOp.
filter
(
Raster
src,
WritableRaster
dst)
Transforms the
Raster
using the matrix specified in the
 constructor.
final
WritableRaster
ColorConvertOp.
filter
(
Raster
src,
WritableRaster
dest)
ColorConverts the image data in the source Raster.
final
WritableRaster
ConvolveOp.
filter
(
Raster
src,
WritableRaster
dst)
Performs a convolution on Rasters.
final
WritableRaster
LookupOp.
filter
(
Raster
src,
WritableRaster
dst)
Performs a lookup operation on a
Raster
.
WritableRaster
RasterOp.
filter
(
Raster
src,
WritableRaster
dest)
Performs a single-input/single-output operation from a source Raster
 to a destination Raster.
final
WritableRaster
RescaleOp.
filter
(
Raster
src,
WritableRaster
dst)
Rescales the pixel data in the source Raster.
final
Rectangle2D
AffineTransformOp.
getBounds2D
(
Raster
src)
Returns the bounding box of the transformed destination.
final
Rectangle2D
BandCombineOp.
getBounds2D
(
Raster
src)
Returns the bounding box of the transformed destination.
final
Rectangle2D
ColorConvertOp.
getBounds2D
(
Raster
src)
Returns the bounding box of the destination, given this source.
final
Rectangle2D
ConvolveOp.
getBounds2D
(
Raster
src)
Returns the bounding box of the filtered destination Raster.
final
Rectangle2D
LookupOp.
getBounds2D
(
Raster
src)
Returns the bounding box of the filtered destination Raster.
Rectangle2D
RasterOp.
getBounds2D
(
Raster
src)
Returns the bounding box of the filtered destination Raster.
final
Rectangle2D
RescaleOp.
getBounds2D
(
Raster
src)
Returns the bounding box of the rescaled destination Raster.
boolean
ColorModel.
isCompatibleRaster
(
Raster
raster)
Returns
true
if
raster
is compatible
 with this
ColorModel
and
false
if it is
 not.
boolean
ComponentColorModel.
isCompatibleRaster
(
Raster
raster)
Returns true if
raster
is compatible with this
ColorModel
; false if it is not.
boolean
DirectColorModel.
isCompatibleRaster
(
Raster
raster)
Returns
true
if
raster
is compatible
 with this
ColorModel
and
false
if it is
 not.
boolean
IndexColorModel.
isCompatibleRaster
(
Raster
raster)
Returns
true
if
raster
is compatible
 with this
ColorModel
or
false
if it
 is not compatible with this
ColorModel
.
void
BufferedImage.
setData
(
Raster
r)
Sets a rectangular region of the image to the contents of the
 specified
Raster r
, which is
 assumed to be in the same coordinate space as the
BufferedImage
.
void
WritableRenderedImage.
setData
(
Raster
r)
Sets a rect of the image to the contents of the Raster r, which is
 assumed to be in the same coordinate space as the WritableRenderedImage.
void
WritableRaster.
setDataElements
(int x,
 int y,
Raster
inRaster)
Sets the data for a rectangle of pixels from an input Raster.
void
WritableRaster.
setRect
(int dx,
 int dy,
Raster
srcRaster)
Copies pixels from Raster srcRaster to this WritableRaster.
void
WritableRaster.
setRect
(
Raster
srcRaster)
Copies pixels from Raster srcRaster to this WritableRaster.
Constructors in
java.awt.image
with parameters of type
Raster
Modifier
Constructor
Description
protected
Raster
(
SampleModel
sampleModel,
DataBuffer
dataBuffer,
Rectangle
aRegion,
Point
sampleModelTranslate,
Raster
parent)
Constructs a Raster with the given SampleModel, DataBuffer, and
 parent.
Uses of
Raster
in
javax.imageio
Fields in
javax.imageio
declared as
Raster
Modifier and Type
Field
Description
protected
Raster
IIOImage.
raster
The
Raster
being referenced.
Methods in
javax.imageio
that return
Raster
Modifier and Type
Method
Description
Raster
IIOImage.
getRaster
()
Returns the currently set
Raster
, or
null
if only a
RenderedImage
is
 available.
Raster
ImageReader.
readRaster
(int imageIndex,
ImageReadParam
param)
Returns a new
Raster
object containing the raw pixel data
 from the image stream, without any color conversion applied.
Raster
ImageReader.
readTileRaster
(int imageIndex,
 int tileX,
 int tileY)
Returns a new
Raster
object containing the raw
 pixel data from the tile, without any color conversion applied.
Methods in
javax.imageio
with parameters of type
Raster
Modifier and Type
Method
Description
void
ImageWriter.
replacePixels
(
Raster
raster,
ImageWriteParam
param)
Replaces a portion of an image already present in the output
 with a portion of the given
Raster
.
void
IIOImage.
setRaster
(
Raster
raster)
Sets the current
Raster
.
Constructors in
javax.imageio
with parameters of type
Raster
Modifier
Constructor
Description
IIOImage
(
Raster
raster,
List
<? extends
BufferedImage
> thumbnails,
IIOMetadata
metadata)
Constructs an
IIOImage
containing a
Raster
, and thumbnails and metadata
 associated with it.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.