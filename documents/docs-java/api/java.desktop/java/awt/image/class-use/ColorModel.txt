Uses of Class java.awt.image.ColorModel (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Class
java.awt.image.ColorModel
Packages that use
ColorModel
Package
Description
java.awt
Contains all of the classes for creating user interfaces and for painting
 graphics and images.
java.awt.image
Provides classes for creating and modifying images.
javax.imageio
The main package of the Java Image I/O API.
Uses of
ColorModel
in
java.awt
Methods in
java.awt
that return
ColorModel
Modifier and Type
Method
Description
ColorModel
Component.
getColorModel
()
Gets the instance of
ColorModel
used to display
 the component on the output device.
abstract
ColorModel
GraphicsConfiguration.
getColorModel
()
Returns the
ColorModel
associated with this
GraphicsConfiguration
.
abstract
ColorModel
GraphicsConfiguration.
getColorModel
(int transparency)
Returns the
ColorModel
associated with this
GraphicsConfiguration
that supports the specified
 transparency.
ColorModel
PaintContext.
getColorModel
()
Returns the
ColorModel
of the output.
abstract
ColorModel
Toolkit.
getColorModel
()
Determines the color model of this toolkit's screen.
Methods in
java.awt
with parameters of type
ColorModel
Modifier and Type
Method
Description
CompositeContext
AlphaComposite.
createContext
(
ColorModel
srcColorModel,
ColorModel
dstColorModel,
RenderingHints
hints)
Creates a context for the compositing operation.
PaintContext
Color.
createContext
(
ColorModel
cm,
Rectangle
r,
Rectangle2D
r2d,
AffineTransform
xform,
RenderingHints
hints)
Creates and returns a
PaintContext
used to
 generate a solid color field pattern.
CompositeContext
Composite.
createContext
(
ColorModel
srcColorModel,
ColorModel
dstColorModel,
RenderingHints
hints)
Creates a context containing state that is used to perform
 the compositing operation.
PaintContext
GradientPaint.
createContext
(
ColorModel
cm,
Rectangle
deviceBounds,
Rectangle2D
userBounds,
AffineTransform
xform,
RenderingHints
hints)
Creates and returns a
PaintContext
used to
 generate a linear color gradient pattern.
PaintContext
LinearGradientPaint.
createContext
(
ColorModel
cm,
Rectangle
deviceBounds,
Rectangle2D
userBounds,
AffineTransform
transform,
RenderingHints
hints)
Creates and returns a
PaintContext
used to
 generate a linear color gradient pattern.
PaintContext
Paint.
createContext
(
ColorModel
cm,
Rectangle
deviceBounds,
Rectangle2D
userBounds,
AffineTransform
xform,
RenderingHints
hints)
Creates and returns a
PaintContext
used to
 generate the color pattern.
PaintContext
RadialGradientPaint.
createContext
(
ColorModel
cm,
Rectangle
deviceBounds,
Rectangle2D
userBounds,
AffineTransform
transform,
RenderingHints
hints)
Creates and returns a
PaintContext
used to
 generate a circular radial color gradient pattern.
PaintContext
TexturePaint.
createContext
(
ColorModel
cm,
Rectangle
deviceBounds,
Rectangle2D
userBounds,
AffineTransform
xform,
RenderingHints
hints)
Creates and returns a
PaintContext
used to
 generate a tiled image pattern.
Uses of
ColorModel
in
java.awt.image
Subclasses of
ColorModel
in
java.awt.image
Modifier and Type
Class
Description
class
ComponentColorModel
A
ColorModel
class that works with pixel values that
 represent color and alpha information as separate samples and that
 store each sample in a separate data element.
class
DirectColorModel
The
DirectColorModel
class is a
ColorModel
class that works with pixel values that represent RGB
 color and alpha information as separate samples and that pack all
 samples for a single pixel into a single int, short, or byte quantity.
class
IndexColorModel
The
IndexColorModel
class is a
ColorModel
class that works with pixel values consisting of a
 single sample that is an index into a fixed colormap in the default
 sRGB color space.
class
PackedColorModel
The
PackedColorModel
class is an abstract
ColorModel
class that works with pixel values which represent
 color and alpha information as separate samples and which pack all
 samples for a single pixel into a single int, short, or byte quantity.
Fields in
java.awt.image
declared as
ColorModel
Modifier and Type
Field
Description
protected
ColorModel
RGBImageFilter.
newmodel
The
ColorModel
with which to
 replace
origmodel
when the user calls
substituteColorModel
.
protected
ColorModel
RGBImageFilter.
origmodel
The
ColorModel
to be replaced by
newmodel
when the user calls
substituteColorModel
.
Methods in
java.awt.image
that return
ColorModel
Modifier and Type
Method
Description
ColorModel
ColorModel.
coerceData
(
WritableRaster
raster,
 boolean isAlphaPremultiplied)
Forces the raster data to match the state specified in the
isAlphaPremultiplied
variable, assuming the data is
 currently correctly described by this
ColorModel
.
ColorModel
ComponentColorModel.
coerceData
(
WritableRaster
raster,
 boolean isAlphaPremultiplied)
Forces the raster data to match the state specified in the
isAlphaPremultiplied
variable, assuming the data
 is currently correctly described by this
ColorModel
.
final
ColorModel
DirectColorModel.
coerceData
(
WritableRaster
raster,
 boolean isAlphaPremultiplied)
Forces the raster data to match the state specified in the
isAlphaPremultiplied
variable, assuming the data is
 currently correctly described by this
ColorModel
.
ColorModel
BufferedImage.
getColorModel
()
Returns the
ColorModel
.
ColorModel
PixelGrabber.
getColorModel
()
Get the ColorModel for the pixels stored in the array.
ColorModel
RenderedImage.
getColorModel
()
Returns the ColorModel associated with this image.
static
ColorModel
ColorModel.
getRGBdefault
()
Returns a
DirectColorModel
that describes the default
 format for integer RGB values used in many of the methods in the
 AWT image interfaces for the convenience of the programmer.
Methods in
java.awt.image
with parameters of type
ColorModel
Modifier and Type
Method
Description
BufferedImage
AffineTransformOp.
createCompatibleDestImage
(
BufferedImage
src,
ColorModel
destCM)
Creates a zeroed destination image with the correct size and number of
 bands.
BufferedImage
BufferedImageOp.
createCompatibleDestImage
(
BufferedImage
src,
ColorModel
destCM)
Creates a zeroed destination image with the correct size and number of
 bands.
BufferedImage
ColorConvertOp.
createCompatibleDestImage
(
BufferedImage
src,
ColorModel
destCM)
Creates a zeroed destination image with the correct size and number of
 bands, given this source.
BufferedImage
ConvolveOp.
createCompatibleDestImage
(
BufferedImage
src,
ColorModel
destCM)
Creates a zeroed destination image with the correct size and number
 of bands.
BufferedImage
LookupOp.
createCompatibleDestImage
(
BufferedImage
src,
ColorModel
destCM)
Creates a zeroed destination image with the correct size and number of
 bands.
BufferedImage
RescaleOp.
createCompatibleDestImage
(
BufferedImage
src,
ColorModel
destCM)
Creates a zeroed destination image with the correct size and number of
 bands.
void
MemoryImageSource.
newPixels
(byte[] newpix,
ColorModel
newmodel,
 int offset,
 int scansize)
Changes to a new byte array to hold the pixels for this image.
void
MemoryImageSource.
newPixels
(int[] newpix,
ColorModel
newmodel,
 int offset,
 int scansize)
Changes to a new int array to hold the pixels for this image.
void
BufferedImageFilter.
setColorModel
(
ColorModel
model)
Filters the information provided in the
setColorModel
method
 of the
ImageConsumer
interface.
void
ImageConsumer.
setColorModel
(
ColorModel
model)
Sets the ColorModel object used for the majority of
 the pixels reported using the setPixels method
 calls.
void
ImageFilter.
setColorModel
(
ColorModel
model)
Filter the information provided in the setColorModel method
 of the ImageConsumer interface.
void
PixelGrabber.
setColorModel
(
ColorModel
model)
The setColorModel method is part of the ImageConsumer API which
 this class must implement to retrieve the pixels.
void
RGBImageFilter.
setColorModel
(
ColorModel
model)
If the ColorModel is an IndexColorModel and the subclass has
 set the canFilterIndexColorModel flag to true, we substitute
 a filtered version of the color model here and wherever
 that original ColorModel object appears in the setPixels methods.
void
AreaAveragingScaleFilter.
setPixels
(int x,
 int y,
 int w,
 int h,
ColorModel
model,
 byte[] pixels,
 int off,
 int scansize)
Combine the components for the delivered byte pixels into the
 accumulation arrays and send on any averaged data for rows of
 pixels that are complete.
void
AreaAveragingScaleFilter.
setPixels
(int x,
 int y,
 int w,
 int h,
ColorModel
model,
 int[] pixels,
 int off,
 int scansize)
Combine the components for the delivered int pixels into the
 accumulation arrays and send on any averaged data for rows of
 pixels that are complete.
void
BufferedImageFilter.
setPixels
(int x,
 int y,
 int w,
 int h,
ColorModel
model,
 byte[] pixels,
 int off,
 int scansize)
Filters the information provided in the
setPixels
method of the
ImageConsumer
interface which takes
 an array of bytes.
void
BufferedImageFilter.
setPixels
(int x,
 int y,
 int w,
 int h,
ColorModel
model,
 int[] pixels,
 int off,
 int scansize)
Filters the information provided in the
setPixels
method of the
ImageConsumer
interface which takes
 an array of integers.
void
CropImageFilter.
setPixels
(int x,
 int y,
 int w,
 int h,
ColorModel
model,
 byte[] pixels,
 int off,
 int scansize)
Determine whether the delivered byte pixels intersect the region to
 be extracted and passes through only that subset of pixels that
 appear in the output region.
void
CropImageFilter.
setPixels
(int x,
 int y,
 int w,
 int h,
ColorModel
model,
 int[] pixels,
 int off,
 int scansize)
Determine if the delivered int pixels intersect the region to
 be extracted and pass through only that subset of pixels that
 appear in the output region.
void
ImageConsumer.
setPixels
(int x,
 int y,
 int w,
 int h,
ColorModel
model,
 byte[] pixels,
 int off,
 int scansize)
Delivers the pixels of the image with one or more calls
 to this method.
void
ImageConsumer.
setPixels
(int x,
 int y,
 int w,
 int h,
ColorModel
model,
 int[] pixels,
 int off,
 int scansize)
The pixels of the image are delivered using one or more calls
 to the setPixels method.
void
ImageFilter.
setPixels
(int x,
 int y,
 int w,
 int h,
ColorModel
model,
 byte[] pixels,
 int off,
 int scansize)
Filters the information provided in the setPixels method of the
 ImageConsumer interface which takes an array of bytes.
void
ImageFilter.
setPixels
(int x,
 int y,
 int w,
 int h,
ColorModel
model,
 int[] pixels,
 int off,
 int scansize)
Filters the information provided in the setPixels method of the
 ImageConsumer interface which takes an array of integers.
void
PixelGrabber.
setPixels
(int srcX,
 int srcY,
 int srcW,
 int srcH,
ColorModel
model,
 byte[] pixels,
 int srcOff,
 int srcScan)
The setPixels method is part of the ImageConsumer API which
 this class must implement to retrieve the pixels.
void
PixelGrabber.
setPixels
(int srcX,
 int srcY,
 int srcW,
 int srcH,
ColorModel
model,
 int[] pixels,
 int srcOff,
 int srcScan)
The setPixels method is part of the ImageConsumer API which
 this class must implement to retrieve the pixels.
void
ReplicateScaleFilter.
setPixels
(int x,
 int y,
 int w,
 int h,
ColorModel
model,
 byte[] pixels,
 int off,
 int scansize)
Choose which rows and columns of the delivered byte pixels are
 needed for the destination scaled image and pass through just
 those rows and columns that are needed, replicated as necessary.
void
ReplicateScaleFilter.
setPixels
(int x,
 int y,
 int w,
 int h,
ColorModel
model,
 int[] pixels,
 int off,
 int scansize)
Choose which rows and columns of the delivered int pixels are
 needed for the destination scaled image and pass through just
 those rows and columns that are needed, replicated as necessary.
void
RGBImageFilter.
setPixels
(int x,
 int y,
 int w,
 int h,
ColorModel
model,
 byte[] pixels,
 int off,
 int scansize)
If the ColorModel object is the same one that has already
 been converted, then simply passes the pixels through with the
 converted ColorModel.
void
RGBImageFilter.
setPixels
(int x,
 int y,
 int w,
 int h,
ColorModel
model,
 int[] pixels,
 int off,
 int scansize)
If the ColorModel object is the same one that has already
 been converted, then simply passes the pixels through with the
 converted ColorModel, otherwise converts the buffer of integer
 pixels to the default RGB ColorModel and passes the converted
 buffer to the filterRGBPixels method to be converted one by one.
void
RGBImageFilter.
substituteColorModel
(
ColorModel
oldcm,
ColorModel
newcm)
Registers two ColorModel objects for substitution.
Constructors in
java.awt.image
with parameters of type
ColorModel
Modifier
Constructor
Description
BufferedImage
(
ColorModel
cm,
WritableRaster
raster,
 boolean isRasterPremultiplied,
Hashtable
<?,
?> properties)
Constructs a new
BufferedImage
with a specified
ColorModel
and
Raster
.
MemoryImageSource
(int w,
 int h,
ColorModel
cm,
 byte[] pix,
 int off,
 int scan)
Constructs an ImageProducer object which uses an array of bytes
 to produce data for an Image object.
MemoryImageSource
(int w,
 int h,
ColorModel
cm,
 byte[] pix,
 int off,
 int scan,
Hashtable
<?,
?> props)
Constructs an ImageProducer object which uses an array of bytes
 to produce data for an Image object.
MemoryImageSource
(int w,
 int h,
ColorModel
cm,
 int[] pix,
 int off,
 int scan)
Constructs an ImageProducer object which uses an array of integers
 to produce data for an Image object.
MemoryImageSource
(int w,
 int h,
ColorModel
cm,
 int[] pix,
 int off,
 int scan,
Hashtable
<?,
?> props)
Constructs an ImageProducer object which uses an array of integers
 to produce data for an Image object.
Uses of
ColorModel
in
javax.imageio
Fields in
javax.imageio
declared as
ColorModel
Modifier and Type
Field
Description
protected
ColorModel
ImageTypeSpecifier.
colorModel
The
ColorModel
to be used as a prototype.
Methods in
javax.imageio
that return
ColorModel
Modifier and Type
Method
Description
ColorModel
ImageTypeSpecifier.
getColorModel
()
Returns the
ColorModel
specified by this object.
Constructors in
javax.imageio
with parameters of type
ColorModel
Modifier
Constructor
Description
ImageTypeSpecifier
(
ColorModel
colorModel,
SampleModel
sampleModel)
Constructs an
ImageTypeSpecifier
directly
 from a
ColorModel
and a
SampleModel
.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.