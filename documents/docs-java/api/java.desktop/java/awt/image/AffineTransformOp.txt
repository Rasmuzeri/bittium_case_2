AffineTransformOp (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field
|
Constr
|
Method
Detail:
Field
|
Constr
|
Method
SEARCH
Module
java.desktop
Package
java.awt.image
Class AffineTransformOp
java.lang.Object
java.awt.image.AffineTransformOp
All Implemented Interfaces:
BufferedImageOp
,
RasterOp
public class
AffineTransformOp
extends
Object
implements
BufferedImageOp
,
RasterOp
This class uses an affine transform to perform a linear mapping from
 2D coordinates in the source image or
Raster
to 2D coordinates
 in the destination image or
Raster
.
 The type of interpolation that is used is specified through a constructor,
 either by a
RenderingHints
object or by one of the integer
 interpolation types defined in this class.
If a
RenderingHints
object is specified in the constructor, the
 interpolation hint and the rendering quality hint are used to set
 the interpolation type for this operation.  The color rendering hint
 and the dithering hint can be used when color conversion is required.
Note that the following constraints have to be met:
The source and destination must be different.
For
Raster
objects, the number of bands in the source must
 be equal to the number of bands in the destination.
See Also:
AffineTransform
BufferedImageFilter
RenderingHints.KEY_INTERPOLATION
RenderingHints.KEY_RENDERING
RenderingHints.KEY_COLOR_RENDERING
RenderingHints.KEY_DITHERING
Field Summary
Fields
Modifier and Type
Field
Description
static final int
TYPE_BICUBIC
Bicubic interpolation type.
static final int
TYPE_BILINEAR
Bilinear interpolation type.
static final int
TYPE_NEAREST_NEIGHBOR
Nearest-neighbor interpolation type.
Constructor Summary
Constructors
Constructor
Description
AffineTransformOp
(
AffineTransform
xform,
 int interpolationType)
Constructs an
AffineTransformOp
given an affine transform
 and the interpolation type.
AffineTransformOp
(
AffineTransform
xform,
RenderingHints
hints)
Constructs an
AffineTransformOp
given an affine transform.
Method Summary
All Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
BufferedImage
createCompatibleDestImage
(
BufferedImage
src,
ColorModel
destCM)
Creates a zeroed destination image with the correct size and number of
 bands.
WritableRaster
createCompatibleDestRaster
(
Raster
src)
Creates a zeroed destination
Raster
with the correct size
 and number of bands.
final
BufferedImage
filter
(
BufferedImage
src,
BufferedImage
dst)
Transforms the source
BufferedImage
and stores the results
 in the destination
BufferedImage
.
final
WritableRaster
filter
(
Raster
src,
WritableRaster
dst)
Transforms the source
Raster
and stores the results in
 the destination
Raster
.
final
Rectangle2D
getBounds2D
(
BufferedImage
src)
Returns the bounding box of the transformed destination.
final
Rectangle2D
getBounds2D
(
Raster
src)
Returns the bounding box of the transformed destination.
final int
getInterpolationType
()
Returns the interpolation type used by this op.
final
Point2D
getPoint2D
(
Point2D
srcPt,
Point2D
dstPt)
Returns the location of the corresponding destination point given a
 point in the source.
final
RenderingHints
getRenderingHints
()
Returns the rendering hints used by this transform operation.
final
AffineTransform
getTransform
()
Returns the affine transform used by this transform operation.
Methods declared in class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Field Details
TYPE_NEAREST_NEIGHBOR
@Native
public static final
int
TYPE_NEAREST_NEIGHBOR
Nearest-neighbor interpolation type.
See Also:
Constant Field Values
TYPE_BILINEAR
@Native
public static final
int
TYPE_BILINEAR
Bilinear interpolation type.
See Also:
Constant Field Values
TYPE_BICUBIC
@Native
public static final
int
TYPE_BICUBIC
Bicubic interpolation type.
See Also:
Constant Field Values
Constructor Details
AffineTransformOp
public
AffineTransformOp
(
AffineTransform
xform,
RenderingHints
hints)
Constructs an
AffineTransformOp
given an affine transform.
 The interpolation type is determined from the
RenderingHints
object.  If the interpolation hint is
 defined, it will be used. Otherwise, if the rendering quality hint is
 defined, the interpolation type is determined from its value.  If no
 hints are specified (
hints
is null),
 the interpolation type is
TYPE_NEAREST_NEIGHBOR
.
Parameters:
xform
- The
AffineTransform
to use for the
 operation.
hints
- The
RenderingHints
object used to specify
 the interpolation type for the operation.
Throws:
ImagingOpException
- if the transform is non-invertible.
See Also:
RenderingHints.KEY_INTERPOLATION
RenderingHints.KEY_RENDERING
AffineTransformOp
public
AffineTransformOp
(
AffineTransform
xform,
 int interpolationType)
Constructs an
AffineTransformOp
given an affine transform
 and the interpolation type.
Parameters:
xform
- The
AffineTransform
to use for the operation.
interpolationType
- One of the integer
 interpolation type constants defined by this class:
TYPE_NEAREST_NEIGHBOR
,
TYPE_BILINEAR
,
TYPE_BICUBIC
.
Throws:
ImagingOpException
- if the transform is non-invertible.
Method Details
getInterpolationType
public final
int
getInterpolationType
()
Returns the interpolation type used by this op.
Returns:
the interpolation type.
See Also:
TYPE_NEAREST_NEIGHBOR
TYPE_BILINEAR
TYPE_BICUBIC
filter
public final
BufferedImage
filter
(
BufferedImage
src,
BufferedImage
dst)
Transforms the source
BufferedImage
and stores the results
 in the destination
BufferedImage
.
 If the color models for the two images do not match, a color
 conversion into the destination color model is performed.
 If the destination image is null,
 a
BufferedImage
is created with the source
ColorModel
.
The coordinates of the rectangle returned by
getBounds2D(BufferedImage)
are not necessarily the same as the coordinates of the
BufferedImage
returned by this method.  If the
 upper-left corner coordinates of the rectangle are
 negative then this part of the rectangle is not drawn.  If the
 upper-left corner coordinates of the  rectangle are positive
 then the filtered image is drawn at that position in the
 destination
BufferedImage
.
An
IllegalArgumentException
is thrown if the source is
 the same as the destination.
Specified by:
filter
in interface
BufferedImageOp
Parameters:
src
- The
BufferedImage
to transform.
dst
- The
BufferedImage
in which to store the results
 of the transformation.
Returns:
The filtered
BufferedImage
.
Throws:
IllegalArgumentException
- if
src
and
dst
are the same
ImagingOpException
- if the image cannot be transformed
         because of a data-processing error that might be
         caused by an invalid image format, tile format, or
         image-processing operation, or any other unsupported
         operation.
filter
public final
WritableRaster
filter
(
Raster
src,
WritableRaster
dst)
Transforms the source
Raster
and stores the results in
 the destination
Raster
.  This operation performs the
 transform band by band.
If the destination
Raster
is null, a new
Raster
is created.
 An
IllegalArgumentException
may be thrown if the source is
 the same as the destination or if the number of bands in
 the source is not equal to the number of bands in the
 destination.
The coordinates of the rectangle returned by
getBounds2D(Raster)
are not necessarily the same as the coordinates of the
WritableRaster
returned by this method.  If the
 upper-left corner coordinates of rectangle are negative then
 this part of the rectangle is not drawn.  If the coordinates
 of the rectangle are positive then the filtered image is drawn at
 that position in the destination
Raster
.
Specified by:
filter
in interface
RasterOp
Parameters:
src
- The
Raster
to transform.
dst
- The
Raster
in which to store the results of the
 transformation.
Returns:
The transformed
Raster
.
Throws:
ImagingOpException
- if the raster cannot be transformed
         because of a data-processing error that might be
         caused by an invalid image format, tile format, or
         image-processing operation, or any other unsupported
         operation.
getBounds2D
public final
Rectangle2D
getBounds2D
(
BufferedImage
src)
Returns the bounding box of the transformed destination.  The
 rectangle returned is the actual bounding box of the
 transformed points.  The coordinates of the upper-left corner
 of the returned rectangle might not be (0, 0).
Specified by:
getBounds2D
in interface
BufferedImageOp
Parameters:
src
- The
BufferedImage
to be transformed.
Returns:
The
Rectangle2D
representing the destination's
 bounding box.
getBounds2D
public final
Rectangle2D
getBounds2D
(
Raster
src)
Returns the bounding box of the transformed destination.  The
 rectangle returned will be the actual bounding box of the
 transformed points.  The coordinates of the upper-left corner
 of the returned rectangle might not be (0, 0).
Specified by:
getBounds2D
in interface
RasterOp
Parameters:
src
- The
Raster
to be transformed.
Returns:
The
Rectangle2D
representing the destination's
 bounding box.
createCompatibleDestImage
public
BufferedImage
createCompatibleDestImage
(
BufferedImage
src,
ColorModel
destCM)
Creates a zeroed destination image with the correct size and number of
 bands.  A
RasterFormatException
may be thrown if the
 transformed width or height is equal to 0.
If
destCM
is null,
 an appropriate
ColorModel
is used; this
ColorModel
may have
 an alpha channel even if the source
ColorModel
is opaque.
Specified by:
createCompatibleDestImage
in interface
BufferedImageOp
Parameters:
src
- The
BufferedImage
to be transformed.
destCM
-
ColorModel
of the destination.  If null,
 an appropriate
ColorModel
is used.
Returns:
The zeroed destination image.
createCompatibleDestRaster
public
WritableRaster
createCompatibleDestRaster
(
Raster
src)
Creates a zeroed destination
Raster
with the correct size
 and number of bands.  A
RasterFormatException
may be thrown
 if the transformed width or height is equal to 0.
Specified by:
createCompatibleDestRaster
in interface
RasterOp
Parameters:
src
- The
Raster
to be transformed.
Returns:
The zeroed destination
Raster
.
getPoint2D
public final
Point2D
getPoint2D
(
Point2D
srcPt,
Point2D
dstPt)
Returns the location of the corresponding destination point given a
 point in the source.  If
dstPt
is specified, it
 is used to hold the return value.
Specified by:
getPoint2D
in interface
BufferedImageOp
Specified by:
getPoint2D
in interface
RasterOp
Parameters:
srcPt
- The
Point2D
that represents the source
              point.
dstPt
- The
Point2D
in which to store the result.
Returns:
The
Point2D
in the destination that corresponds to
 the specified point in the source.
getTransform
public final
AffineTransform
getTransform
()
Returns the affine transform used by this transform operation.
Returns:
The
AffineTransform
associated with this op.
getRenderingHints
public final
RenderingHints
getRenderingHints
()
Returns the rendering hints used by this transform operation.
Specified by:
getRenderingHints
in interface
BufferedImageOp
Specified by:
getRenderingHints
in interface
RasterOp
Returns:
The
RenderingHints
object associated with this op.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.