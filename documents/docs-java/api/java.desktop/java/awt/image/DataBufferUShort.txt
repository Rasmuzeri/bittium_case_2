DataBufferUShort (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field
|
Constr
|
Method
Detail:
Field |
Constr
|
Method
SEARCH
Module
java.desktop
Package
java.awt.image
Class DataBufferUShort
java.lang.Object
java.awt.image.DataBuffer
java.awt.image.DataBufferUShort
public final class
DataBufferUShort
extends
DataBuffer
This class extends
DataBuffer
and stores data internally as
 shorts.  Values stored in the short array(s) of this
DataBuffer
are treated as unsigned values.
Note that some implementations may function more efficiently
 if they can maintain control over how the data for an image is
 stored.
 For example, optimizations such as caching an image in video
 memory require that the implementation track all modifications
 to that data.
 Other implementations may operate better if they can store the
 data in locations other than a Java array.
 To maintain optimum compatibility with various optimizations
 it is best to avoid constructors and methods which expose the
 underlying storage as a Java array as noted below in the
 documentation for those methods.
Field Summary
Fields declared in class java.awt.image.
DataBuffer
banks
,
dataType
,
offset
,
offsets
,
size
,
TYPE_BYTE
,
TYPE_DOUBLE
,
TYPE_FLOAT
,
TYPE_INT
,
TYPE_SHORT
,
TYPE_UNDEFINED
,
TYPE_USHORT
Constructor Summary
Constructors
Constructor
Description
DataBufferUShort
(int size)
Constructs an unsigned-short based
DataBuffer
with a single bank and the
 specified size.
DataBufferUShort
(int size,
 int numBanks)
Constructs an unsigned-short based
DataBuffer
with the specified number of
 banks, all of which are the specified size.
DataBufferUShort
(short[][] dataArray,
 int size)
Constructs an unsigned-short based
DataBuffer
with the specified arrays.
DataBufferUShort
(short[][] dataArray,
 int size,
 int[] offsets)
Constructs an unsigned-short based
DataBuffer
with specified arrays,
 size, and offsets.
DataBufferUShort
(short[] dataArray,
 int size)
Constructs an unsigned-short based
DataBuffer
with a single bank
 using the specified array.
DataBufferUShort
(short[] dataArray,
 int size,
 int offset)
Constructs an unsigned-short based
DataBuffer
with a single bank
 using the specified array, size, and offset.
Method Summary
All Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
short[][]
getBankData
()
Returns the data arrays for all banks.
short[]
getData
()
Returns the default (first) unsigned-short data array.
short[]
getData
(int bank)
Returns the data array for the specified bank.
int
getElem
(int i)
Returns the requested data array element from the first (default) bank.
int
getElem
(int bank,
 int i)
Returns the requested data array element from the specified bank.
void
setElem
(int i,
 int val)
Sets the requested data array element in the first (default) bank
 to the specified value.
void
setElem
(int bank,
 int i,
 int val)
Sets the requested data array element in the specified bank
 from the given integer.
Methods declared in class java.awt.image.
DataBuffer
getDataType
,
getDataTypeSize
,
getElemDouble
,
getElemDouble
,
getElemFloat
,
getElemFloat
,
getNumBanks
,
getOffset
,
getOffsets
,
getSize
,
setElemDouble
,
setElemDouble
,
setElemFloat
,
setElemFloat
Methods declared in class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Constructor Details
DataBufferUShort
public
DataBufferUShort
(int size)
Constructs an unsigned-short based
DataBuffer
with a single bank and the
 specified size.
Parameters:
size
- The size of the
DataBuffer
.
DataBufferUShort
public
DataBufferUShort
(int size,
 int numBanks)
Constructs an unsigned-short based
DataBuffer
with the specified number of
 banks, all of which are the specified size.
Parameters:
size
- The size of the banks in the
DataBuffer
.
numBanks
- The number of banks in the
DataBuffer
.
DataBufferUShort
public
DataBufferUShort
(short[] dataArray,
 int size)
Constructs an unsigned-short based
DataBuffer
with a single bank
 using the specified array.
 Only the first
size
elements should be used by accessors of
 this
DataBuffer
.
dataArray
must be large enough to
 hold
size
elements.
Note that
DataBuffer
objects created by this constructor
 may be incompatible with
performance
 optimizations
used by some implementations (such as caching
 an associated image in video memory).
Parameters:
dataArray
- The unsigned-short array for the
DataBuffer
.
size
- The size of the
DataBuffer
bank.
DataBufferUShort
public
DataBufferUShort
(short[] dataArray,
 int size,
 int offset)
Constructs an unsigned-short based
DataBuffer
with a single bank
 using the specified array, size, and offset.
dataArray
must have at
 least
offset
+
size
elements.  Only elements
offset
through
offset
+
size
- 1 should
 be used by accessors of this
DataBuffer
.
Note that
DataBuffer
objects created by this constructor
 may be incompatible with
performance
 optimizations
used by some implementations (such as caching
 an associated image in video memory).
Parameters:
dataArray
- The unsigned-short array for the
DataBuffer
.
size
- The size of the
DataBuffer
bank.
offset
- The offset into the
dataArray
.
DataBufferUShort
public
DataBufferUShort
(short[][] dataArray,
 int size)
Constructs an unsigned-short based
DataBuffer
with the specified arrays.
 The number of banks will be equal to
dataArray.length
.
 Only the first
size
elements of each array should be used by
 accessors of this
DataBuffer
.
Note that
DataBuffer
objects created by this constructor
 may be incompatible with
performance
 optimizations
used by some implementations (such as caching
 an associated image in video memory).
Parameters:
dataArray
- The unsigned-short arrays for the
DataBuffer
.
size
- The size of the banks in the
DataBuffer
.
DataBufferUShort
public
DataBufferUShort
(short[][] dataArray,
 int size,
 int[] offsets)
Constructs an unsigned-short based
DataBuffer
with specified arrays,
 size, and offsets.
 The number of banks is equal to
dataArray.length
.  Each array must
 be at least as large as
size
+ the corresponding offset.   There must
 be an entry in the offset array for each
dataArray
entry.  For each
 bank, only elements
offset
through
offset
+
size
- 1 should be
 used by accessors of this
DataBuffer
.
Note that
DataBuffer
objects created by this constructor
 may be incompatible with
performance
 optimizations
used by some implementations (such as caching
 an associated image in video memory).
Parameters:
dataArray
- The unsigned-short arrays for the
DataBuffer
.
size
- The size of the banks in the
DataBuffer
.
offsets
- The offsets into each array.
Method Details
getData
public
short[]
getData
()
Returns the default (first) unsigned-short data array.
Note that calling this method may cause this
DataBuffer
object to be incompatible with
performance
 optimizations
used by some implementations (such as caching
 an associated image in video memory).
Returns:
The first unsigned-short data array.
getData
public
short[]
getData
(int bank)
Returns the data array for the specified bank.
Note that calling this method may cause this
DataBuffer
object to be incompatible with
performance
 optimizations
used by some implementations (such as caching
 an associated image in video memory).
Parameters:
bank
- The bank whose data array you want to get.
Returns:
The data array for the specified bank.
getBankData
public
short[][]
getBankData
()
Returns the data arrays for all banks.
Note that calling this method may cause this
DataBuffer
object to be incompatible with
performance
 optimizations
used by some implementations (such as caching
 an associated image in video memory).
Returns:
All of the data arrays.
getElem
public
int
getElem
(int i)
Returns the requested data array element from the first (default) bank.
Overrides:
getElem
in class
DataBuffer
Parameters:
i
- The data array element you want to get.
Returns:
The requested data array element as an integer.
See Also:
setElem(int, int)
setElem(int, int, int)
getElem
public
int
getElem
(int bank,
 int i)
Returns the requested data array element from the specified bank.
Specified by:
getElem
in class
DataBuffer
Parameters:
bank
- The bank from which you want to get a data array element.
i
- The data array element you want to get.
Returns:
The requested data array element as an integer.
See Also:
setElem(int, int)
setElem(int, int, int)
setElem
public
void
setElem
(int i,
 int val)
Sets the requested data array element in the first (default) bank
 to the specified value.
Overrides:
setElem
in class
DataBuffer
Parameters:
i
- The data array element you want to set.
val
- The integer value to which you want to set the data array element.
See Also:
getElem(int)
getElem(int, int)
setElem
public
void
setElem
(int bank,
 int i,
 int val)
Sets the requested data array element in the specified bank
 from the given integer.
Specified by:
setElem
in class
DataBuffer
Parameters:
bank
- The bank in which you want to set the data array element.
i
- The data array element you want to set.
val
- The integer value to which you want to set the specified data array element.
See Also:
getElem(int)
getElem(int, int)
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.