Uses of Interface java.awt.Shape (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Interface
java.awt.Shape
Packages that use
Shape
Package
Description
java.awt
Contains all of the classes for creating user interfaces and for painting
 graphics and images.
java.awt.font
Provides classes and interface relating to fonts.
java.awt.geom
Provides the Java 2D classes for defining and performing operations on
 objects related to two-dimensional geometry.
java.awt.image.renderable
Provides classes and interfaces for producing rendering-independent images.
javax.swing
Provides a set of "lightweight" (all-Java language) components
 that, to the maximum degree possible, work the same on all platforms.
javax.swing.plaf.basic
Provides user interface objects built according to the Basic look and feel.
javax.swing.text
Provides classes and interfaces that deal with editable and noneditable text
 components.
javax.swing.text.html
Provides the class
HTMLEditorKit
and supporting classes for creating
 HTML text editors.
Uses of
Shape
in
java.awt
Classes in
java.awt
that implement
Shape
Modifier and Type
Class
Description
class
Polygon
The
Polygon
class encapsulates a description of a
 closed, two-dimensional region within a coordinate space.
class
Rectangle
A
Rectangle
specifies an area in a coordinate space that is
 enclosed by the
Rectangle
object's upper-left point
(x,y)
in the coordinate space, its width, and its height.
Methods in
java.awt
that return
Shape
Modifier and Type
Method
Description
Shape
BasicStroke.
createStrokedShape
(
Shape
s)
Returns a
Shape
whose interior defines the
 stroked outline of a specified
Shape
.
Shape
Stroke.
createStrokedShape
(
Shape
p)
Returns an outline
Shape
which encloses the area that
 should be painted when the
Shape
is stroked according
 to the rules defined by the
 object implementing the
Stroke
interface.
abstract
Shape
Graphics.
getClip
()
Gets the current clipping area.
Shape
Window.
getShape
()
Returns the shape of the window.
Methods in
java.awt
with parameters of type
Shape
Modifier and Type
Method
Description
abstract void
Graphics2D.
clip
(
Shape
s)
Intersects the current
Clip
with the interior of the
 specified
Shape
and sets the
Clip
to the
 resulting intersection.
Shape
BasicStroke.
createStrokedShape
(
Shape
s)
Returns a
Shape
whose interior defines the
 stroked outline of a specified
Shape
.
Shape
Stroke.
createStrokedShape
(
Shape
p)
Returns an outline
Shape
which encloses the area that
 should be painted when the
Shape
is stroked according
 to the rules defined by the
 object implementing the
Stroke
interface.
abstract void
Graphics2D.
draw
(
Shape
s)
Strokes the outline of a
Shape
using the settings of the
 current
Graphics2D
context.
abstract void
Graphics2D.
fill
(
Shape
s)
Fills the interior of a
Shape
using the settings of the
Graphics2D
context.
abstract boolean
Graphics2D.
hit
(
Rectangle
rect,
Shape
s,
 boolean onStroke)
Checks whether or not the specified
Shape
intersects
 the specified
Rectangle
, which is in device
 space.
abstract void
Graphics.
setClip
(
Shape
clip)
Sets the current clipping area to an arbitrary clip shape.
void
Component.
setMixingCutoutShape
(
Shape
shape)
Sets a 'mixing-cutout' shape for this lightweight component.
void
Window.
setShape
(
Shape
shape)
Sets the shape of the window.
Uses of
Shape
in
java.awt.font
Methods in
java.awt.font
that return
Shape
Modifier and Type
Method
Description
Shape
TextLayout.
getBlackBoxBounds
(int firstEndpoint,
 int secondEndpoint)
Returns the black box bounds of the characters in the specified range.
Shape
TextLayout.
getCaretShape
(
TextHitInfo
hit)
Returns a
Shape
representing the caret at the specified
 hit inside the natural bounds of this
TextLayout
.
Shape
TextLayout.
getCaretShape
(
TextHitInfo
hit,
Rectangle2D
bounds)
Returns a
Shape
representing the caret at the specified
 hit inside the specified bounds.
Shape
[]
TextLayout.
getCaretShapes
(int offset)
Returns two paths corresponding to the strong and weak caret.
Shape
[]
TextLayout.
getCaretShapes
(int offset,
Rectangle2D
bounds)
Returns two paths corresponding to the strong and weak caret.
Shape
[]
TextLayout.
getCaretShapes
(int offset,
Rectangle2D
bounds,
TextLayout.CaretPolicy
policy)
Returns two paths corresponding to the strong and weak caret.
abstract
Shape
GlyphVector.
getGlyphLogicalBounds
(int glyphIndex)
Returns the logical bounds of the specified glyph within this
GlyphVector
.
abstract
Shape
GlyphVector.
getGlyphOutline
(int glyphIndex)
Returns a
Shape
whose interior corresponds to the
 visual representation of the specified glyph
 within this
GlyphVector
.
Shape
GlyphVector.
getGlyphOutline
(int glyphIndex,
 float x,
 float y)
Returns a
Shape
whose interior corresponds to the
 visual representation of the specified glyph
 within this
GlyphVector
, offset to x, y.
abstract
Shape
GlyphVector.
getGlyphVisualBounds
(int glyphIndex)
Returns the visual bounds of the specified glyph within the
GlyphVector
.
Shape
TextLayout.
getLogicalHighlightShape
(int firstEndpoint,
 int secondEndpoint)
Returns a
Shape
enclosing the logical selection in the
 specified range, extended to the natural bounds of this
TextLayout
.
Shape
TextLayout.
getLogicalHighlightShape
(int firstEndpoint,
 int secondEndpoint,
Rectangle2D
bounds)
Returns a
Shape
enclosing the logical selection in the
 specified range, extended to the specified
bounds
.
abstract
Shape
GlyphVector.
getOutline
()
Returns a
Shape
whose interior corresponds to the
 visual representation of this
GlyphVector
.
abstract
Shape
GlyphVector.
getOutline
(float x,
 float y)
Returns a
Shape
whose interior corresponds to the
 visual representation of this
GlyphVector
when
 rendered at x, y.
Shape
GraphicAttribute.
getOutline
(
AffineTransform
tx)
Return a
Shape
that represents the region that
 this
GraphicAttribute
renders.
Shape
ShapeGraphicAttribute.
getOutline
(
AffineTransform
tx)
Return a
Shape
that represents the region that
 this
ShapeGraphicAttribute
renders.
Shape
TextLayout.
getOutline
(
AffineTransform
tx)
Returns a
Shape
representing the outline of this
TextLayout
.
Shape
TextLayout.
getVisualHighlightShape
(
TextHitInfo
firstEndpoint,
TextHitInfo
secondEndpoint)
Returns a
Shape
enclosing the visual selection in the
 specified range, extended to the bounds.
Shape
TextLayout.
getVisualHighlightShape
(
TextHitInfo
firstEndpoint,
TextHitInfo
secondEndpoint,
Rectangle2D
bounds)
Returns a path enclosing the visual selection in the specified range,
 extended to
bounds
.
Constructors in
java.awt.font
with parameters of type
Shape
Modifier
Constructor
Description
ShapeGraphicAttribute
(
Shape
shape,
 int alignment,
 boolean stroke)
Constructs a
ShapeGraphicAttribute
for the specified
Shape
.
Uses of
Shape
in
java.awt.geom
Classes in
java.awt.geom
that implement
Shape
Modifier and Type
Class
Description
class
Arc2D
Arc2D
is the abstract superclass for all objects that
 store a 2D arc defined by a framing rectangle,
 start angle, angular extent (length of the arc), and a closure type
 (
OPEN
,
CHORD
, or
PIE
).
static class
Arc2D.Double
This class defines an arc specified in
double
precision.
static class
Arc2D.Float
This class defines an arc specified in
float
precision.
class
Area
An
Area
object stores and manipulates a
 resolution-independent description of an enclosed area of
 2-dimensional space.
class
CubicCurve2D
The
CubicCurve2D
class defines a cubic parametric curve
 segment in
(x,y)
coordinate space.
static class
CubicCurve2D.Double
A cubic parametric curve segment specified with
double
coordinates.
static class
CubicCurve2D.Float
A cubic parametric curve segment specified with
float
coordinates.
class
Ellipse2D
The
Ellipse2D
class describes an ellipse that is defined
 by a framing rectangle.
static class
Ellipse2D.Double
The
Double
class defines an ellipse specified
 in
double
precision.
static class
Ellipse2D.Float
The
Float
class defines an ellipse specified
 in
float
precision.
final class
GeneralPath
The
GeneralPath
class represents a geometric path
 constructed from straight lines, and quadratic and cubic
 (Bézier) curves.
class
Line2D
This
Line2D
represents a line segment in
(x,y)
coordinate space.
static class
Line2D.Double
A line segment specified with double coordinates.
static class
Line2D.Float
A line segment specified with float coordinates.
class
Path2D
The
Path2D
class provides a simple, yet flexible
 shape which represents an arbitrary geometric path.
static class
Path2D.Double
The
Double
class defines a geometric path with
 coordinates stored in double precision floating point.
static class
Path2D.Float
The
Float
class defines a geometric path with
 coordinates stored in single precision floating point.
class
QuadCurve2D
The
QuadCurve2D
class defines a quadratic parametric curve
 segment in
(x,y)
coordinate space.
static class
QuadCurve2D.Double
A quadratic parametric curve segment specified with
double
coordinates.
static class
QuadCurve2D.Float
A quadratic parametric curve segment specified with
float
coordinates.
class
Rectangle2D
The
Rectangle2D
class describes a rectangle
 defined by a location
(x,y)
and dimension
(w x h)
.
static class
Rectangle2D.Double
The
Double
class defines a rectangle specified in
 double coordinates.
static class
Rectangle2D.Float
The
Float
class defines a rectangle specified in float
 coordinates.
class
RectangularShape
RectangularShape
is the base class for a number of
Shape
objects whose geometry is defined by a rectangular frame.
class
RoundRectangle2D
The
RoundRectangle2D
class defines a rectangle with
 rounded corners defined by a location
(x,y)
, a
 dimension
(w x h)
, and the width and height of an arc
 with which to round the corners.
static class
RoundRectangle2D.Double
The
Double
class defines a rectangle with rounded
 corners all specified in
double
coordinates.
static class
RoundRectangle2D.Float
The
Float
class defines a rectangle with rounded
 corners all specified in
float
coordinates.
Methods in
java.awt.geom
that return
Shape
Modifier and Type
Method
Description
Shape
AffineTransform.
createTransformedShape
(
Shape
pSrc)
Returns a new
Shape
object defined by the geometry of the
 specified
Shape
after it has been transformed by
 this transform.
final
Shape
Path2D.
createTransformedShape
(
AffineTransform
at)
Returns a new
Shape
representing a transformed version
 of this
Path2D
.
Methods in
java.awt.geom
with parameters of type
Shape
Modifier and Type
Method
Description
final void
Path2D.
append
(
Shape
s,
 boolean connect)
Appends the geometry of the specified
Shape
object to the
 path, possibly connecting the new geometry to the existing path
 segments with a line segment.
Shape
AffineTransform.
createTransformedShape
(
Shape
pSrc)
Returns a new
Shape
object defined by the geometry of the
 specified
Shape
after it has been transformed by
 this transform.
Constructors in
java.awt.geom
with parameters of type
Shape
Modifier
Constructor
Description
Area
(
Shape
s)
The
Area
class creates an area geometry from the
 specified
Shape
object.
Double
(
Shape
s)
Constructs a new double precision
Path2D
object
 from an arbitrary
Shape
object.
Double
(
Shape
s,
AffineTransform
at)
Constructs a new double precision
Path2D
object
 from an arbitrary
Shape
object, transformed by an
AffineTransform
object.
Float
(
Shape
s)
Constructs a new single precision
Path2D
object
 from an arbitrary
Shape
object.
Float
(
Shape
s,
AffineTransform
at)
Constructs a new single precision
Path2D
object
 from an arbitrary
Shape
object, transformed by an
AffineTransform
object.
GeneralPath
(
Shape
s)
Constructs a new
GeneralPath
object from an arbitrary
Shape
object.
Uses of
Shape
in
java.awt.image.renderable
Methods in
java.awt.image.renderable
that return
Shape
Modifier and Type
Method
Description
Shape
RenderContext.
getAreaOfInterest
()
Gets the ares of interest currently contained in the
 RenderContext.
Methods in
java.awt.image.renderable
with parameters of type
Shape
Modifier and Type
Method
Description
void
RenderContext.
setAreaOfInterest
(
Shape
newAoi)
Sets the current area of interest.
Constructors in
java.awt.image.renderable
with parameters of type
Shape
Modifier
Constructor
Description
RenderContext
(
AffineTransform
usr2dev,
Shape
aoi)
Constructs a RenderContext with a given transform and area of interest.
RenderContext
(
AffineTransform
usr2dev,
Shape
aoi,
RenderingHints
hints)
Constructs a RenderContext with a given transform.
Uses of
Shape
in
javax.swing
Methods in
javax.swing
that return
Shape
Modifier and Type
Method
Description
Shape
DebugGraphics.
getClip
()
Overrides
Graphics.getClip
.
Methods in
javax.swing
with parameters of type
Shape
Modifier and Type
Method
Description
void
DebugGraphics.
setClip
(
Shape
clip)
Overrides
Graphics.setClip
.
Uses of
Shape
in
javax.swing.plaf.basic
Classes in
javax.swing.plaf.basic
that implement
Shape
Modifier and Type
Class
Description
static class
BasicTextUI.BasicCaret
Default implementation of the interface
Caret
.
Uses of
Shape
in
javax.swing.text
Classes in
javax.swing.text
that implement
Shape
Modifier and Type
Class
Description
class
DefaultCaret
A default implementation of Caret.
Methods in
javax.swing.text
that return
Shape
Modifier and Type
Method
Description
protected
Shape
FieldView.
adjustAllocation
(
Shape
a)
Adjusts the allocation given to the view
 to be a suitable allocation for a text field.
protected
Shape
AsyncBoxView.ChildLocator.
getChildAllocation
(int index)
Fetch the allocation to use for a child view.
Shape
AsyncBoxView.ChildLocator.
getChildAllocation
(int index,
Shape
a)
Fetch the allocation to use for a child view.
Shape
AsyncBoxView.
getChildAllocation
(int index,
Shape
a)
Fetches the allocation for the given child view.
Shape
BoxView.
getChildAllocation
(int index,
Shape
a)
Fetches the allocation for the given child view.
Shape
CompositeView.
getChildAllocation
(int index,
Shape
a)
Fetches the allocation for the given child view to
 render into.
Shape
View.
getChildAllocation
(int index,
Shape
a)
Fetches the allocation for the given child view.
Shape
AsyncBoxView.
modelToView
(int pos,
Shape
a,
Position.Bias
b)
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.
Shape
BoxView.
modelToView
(int pos,
Shape
a,
Position.Bias
b)
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.
Shape
ComponentView.
modelToView
(int pos,
Shape
a,
Position.Bias
b)
Provides a mapping from the coordinate space of the model to
 that of the view.
Shape
CompositeView.
modelToView
(int pos,
Shape
a,
Position.Bias
b)
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.
Shape
CompositeView.
modelToView
(int p0,
Position.Bias
b0,
 int p1,
Position.Bias
b1,
Shape
a)
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.
Shape
FieldView.
modelToView
(int pos,
Shape
a,
Position.Bias
b)
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.
abstract
Shape
GlyphView.GlyphPainter.
modelToView
(
GlyphView
v,
 int pos,
Position.Bias
bias,
Shape
a)
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.
Shape
GlyphView.
modelToView
(int pos,
Shape
a,
Position.Bias
b)
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.
Shape
IconView.
modelToView
(int pos,
Shape
a,
Position.Bias
b)
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.
Shape
PasswordView.
modelToView
(int pos,
Shape
a,
Position.Bias
b)
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.
Shape
PlainView.
modelToView
(int pos,
Shape
a,
Position.Bias
b)
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.
Shape
View.
modelToView
(int pos,
Shape
a)
Deprecated.
abstract
Shape
View.
modelToView
(int pos,
Shape
a,
Position.Bias
b)
Provides a mapping, for a given character,
 from the document model coordinate space
 to the view coordinate space.
Shape
View.
modelToView
(int p0,
Position.Bias
b0,
 int p1,
Position.Bias
b1,
Shape
a)
Provides a mapping, for a given region,
 from the document model coordinate space
 to the view coordinate space.
Shape
DefaultHighlighter.DefaultHighlightPainter.
paintLayer
(
Graphics
g,
 int offs0,
 int offs1,
Shape
bounds,
JTextComponent
c,
View
view)
Paints a portion of a highlight.
abstract
Shape
LayeredHighlighter.LayerPainter.
paintLayer
(
Graphics
g,
 int p0,
 int p1,
Shape
viewBounds,
JTextComponent
editor,
View
view)
Paints a portion of a highlight.
Methods in
javax.swing.text
with parameters of type
Shape
Modifier and Type
Method
Description
protected
Shape
FieldView.
adjustAllocation
(
Shape
a)
Adjusts the allocation given to the view
 to be a suitable allocation for a text field.
View
ParagraphView.
breakView
(int axis,
 float len,
Shape
a)
Breaks this view on the given axis at the given length.
void
FlowView.
changedUpdate
(
DocumentEvent
changes,
Shape
a,
ViewFactory
f)
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.
void
GlyphView.
changedUpdate
(
DocumentEvent
e,
Shape
a,
ViewFactory
f)
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.
void
LabelView.
changedUpdate
(
DocumentEvent
e,
Shape
a,
ViewFactory
f)
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.
void
ParagraphView.
changedUpdate
(
DocumentEvent
changes,
Shape
a,
ViewFactory
f)
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.
void
PlainView.
changedUpdate
(
DocumentEvent
changes,
Shape
a,
ViewFactory
f)
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.
void
View.
changedUpdate
(
DocumentEvent
e,
Shape
a,
ViewFactory
f)
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.
void
WrappedPlainView.
changedUpdate
(
DocumentEvent
e,
Shape
a,
ViewFactory
f)
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.
protected void
PlainView.
damageLineRange
(int line0,
 int line1,
Shape
a,
Component
host)
Repaint the given line range.
protected void
BoxView.
forwardUpdate
(
DocumentEvent.ElementChange
ec,
DocumentEvent
e,
Shape
a,
ViewFactory
f)
Forwards the given
DocumentEvent
to the child views
 that need to be notified of the change to the model.
protected void
View.
forwardUpdate
(
DocumentEvent.ElementChange
ec,
DocumentEvent
e,
Shape
a,
ViewFactory
f)
Forwards the given
DocumentEvent
to the child views
 that need to be notified of the change to the model.
protected void
View.
forwardUpdateToView
(
View
v,
DocumentEvent
e,
Shape
a,
ViewFactory
f)
Forwards the
DocumentEvent
to the give child view.
Shape
AsyncBoxView.ChildLocator.
getChildAllocation
(int index,
Shape
a)
Fetch the allocation to use for a child view.
Shape
AsyncBoxView.
getChildAllocation
(int index,
Shape
a)
Fetches the allocation for the given child view.
Shape
BoxView.
getChildAllocation
(int index,
Shape
a)
Fetches the allocation for the given child view.
Shape
CompositeView.
getChildAllocation
(int index,
Shape
a)
Fetches the allocation for the given child view to
 render into.
Shape
View.
getChildAllocation
(int index,
Shape
a)
Fetches the allocation for the given child view.
protected int
ParagraphView.
getClosestPositionTo
(int pos,
Position.Bias
b,
Shape
a,
 int direction,
Position.Bias
[] biasRet,
 int rowIndex,
 int x)
Returns the closest model position to
x
.
protected
Rectangle
CompositeView.
getInsideAllocation
(
Shape
a)
Translates the immutable allocation given to the view
 to a mutable allocation that represents the interior
 allocation (i.e. the bounds of the given allocation
 with the top, left, bottom, and right insets removed.
protected int
CompositeView.
getNextEastWestVisualPositionFrom
(int pos,
Position.Bias
b,
Shape
a,
 int direction,
Position.Bias
[] biasRet)
Returns the next visual position for the cursor, in either the
 east or west direction.
protected int
CompositeView.
getNextNorthSouthVisualPositionFrom
(int pos,
Position.Bias
b,
Shape
a,
 int direction,
Position.Bias
[] biasRet)
Returns the next visual position for the cursor, in either the
 north or south direction.
protected int
ParagraphView.
getNextNorthSouthVisualPositionFrom
(int pos,
Position.Bias
b,
Shape
a,
 int direction,
Position.Bias
[] biasRet)
Returns the next visual position for the cursor, in
 either the east or west direction.
int
AsyncBoxView.
getNextVisualPositionFrom
(int pos,
Position.Bias
b,
Shape
a,
 int direction,
Position.Bias
[] biasRet)
Provides a way to determine the next visually represented model
 location that one might place a caret.
int
CompositeView.
getNextVisualPositionFrom
(int pos,
Position.Bias
b,
Shape
a,
 int direction,
Position.Bias
[] biasRet)
Provides a way to determine the next visually represented model
 location that one might place a caret.
int
GlyphView.
getNextVisualPositionFrom
(int pos,
Position.Bias
b,
Shape
a,
 int direction,
Position.Bias
[] biasRet)
Provides a way to determine the next visually represented model
 location that one might place a caret.
int
GlyphView.GlyphPainter.
getNextVisualPositionFrom
(
GlyphView
v,
 int pos,
Position.Bias
b,
Shape
a,
 int direction,
Position.Bias
[] biasRet)
Provides a way to determine the next visually represented model
 location that one might place a caret.
int
View.
getNextVisualPositionFrom
(int pos,
Position.Bias
b,
Shape
a,
 int direction,
Position.Bias
[] biasRet)
Provides a way to determine the next visually represented model
 location at which one might place a caret.
String
View.
getToolTipText
(float x,
 float y,
Shape
allocation)
Returns the tooltip text at the specified location.
int
View.
getViewIndex
(float x,
 float y,
Shape
allocation)
Returns the child view index representing the given position in
 the view.
int
AsyncBoxView.ChildLocator.
getViewIndexAtPoint
(float x,
 float y,
Shape
a)
Fetches the child view index at the given point.
void
FieldView.
insertUpdate
(
DocumentEvent
changes,
Shape
a,
ViewFactory
f)
Gives notification that something was inserted into the document
 in a location that this view is responsible for.
void
FlowView.
insertUpdate
(
DocumentEvent
changes,
Shape
a,
ViewFactory
f)
Gives notification that something was inserted into the document
 in a location that this view is responsible for.
void
GlyphView.
insertUpdate
(
DocumentEvent
e,
Shape
a,
ViewFactory
f)
Gives notification that something was inserted into
 the document in a location that this view is responsible for.
void
PlainView.
insertUpdate
(
DocumentEvent
changes,
Shape
a,
ViewFactory
f)
Gives notification that something was inserted into the document
 in a location that this view is responsible for.
void
View.
insertUpdate
(
DocumentEvent
e,
Shape
a,
ViewFactory
f)
Gives notification that something was inserted into
 the document in a location that this view is responsible for.
void
WrappedPlainView.
insertUpdate
(
DocumentEvent
e,
Shape
a,
ViewFactory
f)
Gives notification that something was inserted into the
 document in a location that this view is responsible for.
void
ZoneView.
insertUpdate
(
DocumentEvent
changes,
Shape
a,
ViewFactory
f)
Gives notification that something was inserted into the document
 in a location that this view is responsible for.
protected
Rectangle
PlainView.
lineToRect
(
Shape
a,
 int line)
Determine the rectangle that represents the given line.
Shape
AsyncBoxView.
modelToView
(int pos,
Shape
a,
Position.Bias
b)
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.
Shape
BoxView.
modelToView
(int pos,
Shape
a,
Position.Bias
b)
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.
Shape
ComponentView.
modelToView
(int pos,
Shape
a,
Position.Bias
b)
Provides a mapping from the coordinate space of the model to
 that of the view.
Shape
CompositeView.
modelToView
(int pos,
Shape
a,
Position.Bias
b)
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.
Shape
CompositeView.
modelToView
(int p0,
Position.Bias
b0,
 int p1,
Position.Bias
b1,
Shape
a)
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.
Shape
FieldView.
modelToView
(int pos,
Shape
a,
Position.Bias
b)
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.
abstract
Shape
GlyphView.GlyphPainter.
modelToView
(
GlyphView
v,
 int pos,
Position.Bias
bias,
Shape
a)
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.
Shape
GlyphView.
modelToView
(int pos,
Shape
a,
Position.Bias
b)
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.
Shape
IconView.
modelToView
(int pos,
Shape
a,
Position.Bias
b)
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.
Shape
PasswordView.
modelToView
(int pos,
Shape
a,
Position.Bias
b)
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.
Shape
PlainView.
modelToView
(int pos,
Shape
a,
Position.Bias
b)
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.
Shape
View.
modelToView
(int pos,
Shape
a)
Deprecated.
abstract
Shape
View.
modelToView
(int pos,
Shape
a,
Position.Bias
b)
Provides a mapping, for a given character,
 from the document model coordinate space
 to the view coordinate space.
Shape
View.
modelToView
(int p0,
Position.Bias
b0,
 int p1,
Position.Bias
b1,
Shape
a)
Provides a mapping, for a given region,
 from the document model coordinate space
 to the view coordinate space.
void
AsyncBoxView.
paint
(
Graphics
g,
Shape
alloc)
Render the view using the given allocation and
 rendering surface.
void
BoxView.
paint
(
Graphics
g,
Shape
allocation)
Renders the
BoxView
using the given
 rendering surface and area
 on that surface.
void
ComponentView.
paint
(
Graphics
g,
Shape
a)
The real paint behavior occurs naturally from the association
 that the component has with its parent container (the same
 container hosting this view).
void
DefaultHighlighter.DefaultHighlightPainter.
paint
(
Graphics
g,
 int offs0,
 int offs1,
Shape
bounds,
JTextComponent
c)
Paints a highlight.
void
FieldView.
paint
(
Graphics
g,
Shape
a)
Renders using the given rendering surface and area on that surface.
abstract void
GlyphView.GlyphPainter.
paint
(
GlyphView
v,
Graphics
g,
Shape
a,
 int p0,
 int p1)
Paint the glyphs representing the given range.
void
GlyphView.
paint
(
Graphics
g,
Shape
a)
Renders a portion of a text style run.
void
Highlighter.HighlightPainter.
paint
(
Graphics
g,
 int p0,
 int p1,
Shape
bounds,
JTextComponent
c)
Renders the highlight.
void
IconView.
paint
(
Graphics
g,
Shape
a)
Paints the icon.
void
ParagraphView.
paint
(
Graphics
g,
Shape
a)
Renders using the given rendering surface and area on that
 surface.
void
PlainView.
paint
(
Graphics
g,
Shape
a)
Renders using the given rendering surface and area on that surface.
abstract void
View.
paint
(
Graphics
g,
Shape
allocation)
Renders using the given rendering surface and area on that
 surface.
void
WrappedPlainView.
paint
(
Graphics
g,
Shape
a)
Renders using the given rendering surface and area
 on that surface.
Shape
DefaultHighlighter.DefaultHighlightPainter.
paintLayer
(
Graphics
g,
 int offs0,
 int offs1,
Shape
bounds,
JTextComponent
c,
View
view)
Paints a portion of a highlight.
abstract
Shape
LayeredHighlighter.LayerPainter.
paintLayer
(
Graphics
g,
 int p0,
 int p1,
Shape
viewBounds,
JTextComponent
editor,
View
view)
Paints a portion of a highlight.
void
DefaultHighlighter.
paintLayeredHighlights
(
Graphics
g,
 int p0,
 int p1,
Shape
viewBounds,
JTextComponent
editor,
View
view)
When leaf Views (such as LabelView) are rendering they should
 call into this method.
abstract void
LayeredHighlighter.
paintLayeredHighlights
(
Graphics
g,
 int p0,
 int p1,
Shape
viewBounds,
JTextComponent
editor,
View
view)
When leaf Views (such as LabelView) are rendering they should
 call into this method.
void
FieldView.
removeUpdate
(
DocumentEvent
changes,
Shape
a,
ViewFactory
f)
Gives notification that something was removed from the document
 in a location that this view is responsible for.
void
FlowView.
removeUpdate
(
DocumentEvent
changes,
Shape
a,
ViewFactory
f)
Gives notification that something was removed from the document
 in a location that this view is responsible for.
void
GlyphView.
removeUpdate
(
DocumentEvent
e,
Shape
a,
ViewFactory
f)
Gives notification that something was removed from the document
 in a location that this view is responsible for.
void
PlainView.
removeUpdate
(
DocumentEvent
changes,
Shape
a,
ViewFactory
f)
Gives notification that something was removed from the document
 in a location that this view is responsible for.
void
View.
removeUpdate
(
DocumentEvent
e,
Shape
a,
ViewFactory
f)
Gives notification that something was removed from the document
 in a location that this view is responsible for.
void
WrappedPlainView.
removeUpdate
(
DocumentEvent
e,
Shape
a,
ViewFactory
f)
Gives notification that something was removed from the
 document in a location that this view is responsible for.
void
ZoneView.
removeUpdate
(
DocumentEvent
changes,
Shape
a,
ViewFactory
f)
Gives notification that something was removed from the document
 in a location that this view is responsible for.
protected void
AsyncBoxView.ChildLocator.
setAllocation
(
Shape
a)
Copy the currently allocated shape into the Rectangle
 used to store the current allocation.
protected void
PlainView.
updateDamage
(
DocumentEvent
changes,
Shape
a,
ViewFactory
f)
Repaint the region of change covered by the given document
 event.
protected void
AsyncBoxView.
updateLayout
(
DocumentEvent.ElementChange
ec,
DocumentEvent
e,
Shape
a)
Update the layout in response to receiving notification of
 change from the model.
protected void
View.
updateLayout
(
DocumentEvent.ElementChange
ec,
DocumentEvent
e,
Shape
a)
Updates the layout in response to receiving notification of
 change from the model.
int
AsyncBoxView.
viewToModel
(float x,
 float y,
Shape
a,
Position.Bias
[] biasReturn)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.
int
BoxView.
viewToModel
(float x,
 float y,
Shape
a,
Position.Bias
[] bias)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.
int
ComponentView.
viewToModel
(float x,
 float y,
Shape
a,
Position.Bias
[] bias)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.
int
CompositeView.
viewToModel
(float x,
 float y,
Shape
a,
Position.Bias
[] bias)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.
int
FieldView.
viewToModel
(float fx,
 float fy,
Shape
a,
Position.Bias
[] bias)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.
abstract int
GlyphView.GlyphPainter.
viewToModel
(
GlyphView
v,
 float x,
 float y,
Shape
a,
Position.Bias
[] biasReturn)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.
int
GlyphView.
viewToModel
(float x,
 float y,
Shape
a,
Position.Bias
[] biasReturn)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.
int
IconView.
viewToModel
(float x,
 float y,
Shape
a,
Position.Bias
[] bias)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.
int
PasswordView.
viewToModel
(float fx,
 float fy,
Shape
a,
Position.Bias
[] bias)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.
int
PlainView.
viewToModel
(float x,
 float y,
Shape
a,
Position.Bias
[] bias)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.
int
View.
viewToModel
(float x,
 float y,
Shape
a)
Deprecated.
abstract int
View.
viewToModel
(float x,
 float y,
Shape
a,
Position.Bias
[] biasReturn)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.
Uses of
Shape
in
javax.swing.text.html
Methods in
javax.swing.text.html
that return
Shape
Modifier and Type
Method
Description
Shape
ImageView.
modelToView
(int pos,
Shape
a,
Position.Bias
b)
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.
Methods in
javax.swing.text.html
with parameters of type
Shape
Modifier and Type
Method
Description
void
ImageView.
changedUpdate
(
DocumentEvent
e,
Shape
a,
ViewFactory
f)
Invoked when the Elements attributes have changed.
void
InlineView.
changedUpdate
(
DocumentEvent
e,
Shape
a,
ViewFactory
f)
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.
String
ImageView.
getToolTipText
(float x,
 float y,
Shape
allocation)
For images the tooltip text comes from text specified with the
ALT
attribute.
void
InlineView.
insertUpdate
(
DocumentEvent
e,
Shape
a,
ViewFactory
f)
Gives notification that something was inserted into
 the document in a location that this view is responsible for.
Shape
ImageView.
modelToView
(int pos,
Shape
a,
Position.Bias
b)
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.
void
BlockView.
paint
(
Graphics
g,
Shape
allocation)
Renders using the given rendering surface and area on that
 surface.
void
ImageView.
paint
(
Graphics
g,
Shape
a)
Paints the View.
void
ListView.
paint
(
Graphics
g,
Shape
allocation)
Renders using the given rendering surface and area on that
 surface.
void
ParagraphView.
paint
(
Graphics
g,
Shape
a)
Renders using the given rendering surface and area on that
 surface.
void
InlineView.
removeUpdate
(
DocumentEvent
e,
Shape
a,
ViewFactory
f)
Gives notification that something was removed from the document
 in a location that this view is responsible for.
int
ImageView.
viewToModel
(float x,
 float y,
Shape
a,
Position.Bias
[] bias)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.