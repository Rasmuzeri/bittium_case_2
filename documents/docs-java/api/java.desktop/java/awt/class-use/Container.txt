Uses of Class java.awt.Container (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Class
java.awt.Container
Packages that use
Container
Package
Description
java.applet
Provides the classes necessary to create an applet and the classes an applet
 uses to communicate with its applet context.
java.awt
Contains all of the classes for creating user interfaces and for painting
 graphics and images.
java.awt.event
Provides interfaces and classes for dealing with different types of events
 fired by AWT components.
java.beans.beancontext
Provides classes and interfaces relating to bean context.
javax.swing
Provides a set of "lightweight" (all-Java language) components
 that, to the maximum degree possible, work the same on all platforms.
javax.swing.colorchooser
Contains classes and interfaces used by the
JColorChooser
component.
javax.swing.event
Provides for events fired by Swing components.
javax.swing.plaf.basic
Provides user interface objects built according to the Basic look and feel.
javax.swing.plaf.metal
Provides user interface objects built according to the Java look and feel
 (once codenamed
Metal
), which is the default look and feel.
javax.swing.plaf.synth
Synth is a skinnable look and feel in which all painting is delegated.
javax.swing.table
Provides classes and interfaces for dealing with
javax.swing.JTable
.
javax.swing.text
Provides classes and interfaces that deal with editable and noneditable text
 components.
javax.swing.tree
Provides classes and interfaces for dealing with
javax.swing.JTree
.
Uses of
Container
in
java.applet
Subclasses of
Container
in
java.applet
Modifier and Type
Class
Description
class
Applet
Deprecated, for removal: This API element is subject to removal in a future version.
The Applet API is deprecated, no replacement.
Uses of
Container
in
java.awt
Subclasses of
Container
in
java.awt
Modifier and Type
Class
Description
class
Dialog
A Dialog is a top-level window with a title and a border
 that is typically used to take some form of input from the user.
class
FileDialog
The
FileDialog
class displays a dialog window
 from which the user can select a file.
class
Frame
A
Frame
is a top-level window with a title and a border.
class
Panel
Panel
is the simplest container class.
class
ScrollPane
A container class which implements automatic horizontal and/or
 vertical scrolling for a single child component.
class
Window
A
Window
object is a top-level window with no borders and no
 menubar.
Methods in
java.awt
that return
Container
Modifier and Type
Method
Description
Container
KeyboardFocusManager.
getCurrentFocusCycleRoot
()
Returns the current focus cycle root, if the current focus cycle root is
 in the same context as the calling thread.
Container
Component.
getFocusCycleRootAncestor
()
Returns the Container which is the focus cycle root of this Component's
 focus traversal cycle.
final
Container
Window.
getFocusCycleRootAncestor
()
Always returns
null
because Windows have no ancestors; they
 represent the top of the Component hierarchy.
protected
Container
KeyboardFocusManager.
getGlobalCurrentFocusCycleRoot
()
Returns the current focus cycle root, even if the calling thread is in a
 different context than the current focus cycle root.
protected static
Container
Toolkit.
getNativeContainer
(
Component
c)
Give native peers the ability to query the native container
 given a native component (eg the direct parent may be lightweight).
Container
Component.
getParent
()
Gets the parent of this component.
Methods in
java.awt
with parameters of type
Container
Modifier and Type
Method
Description
protected void
GridBagLayout.
arrangeGrid
(
Container
parent)
Lays out the grid.
protected void
GridBagLayout.
ArrangeGrid
(
Container
parent)
This method is obsolete and supplied for backwards
 compatibility only; new code should call
arrangeGrid
instead.
void
DefaultKeyboardFocusManager.
downFocusCycle
(
Container
aContainer)
Moves the focus down one focus traversal cycle.
abstract void
KeyboardFocusManager.
downFocusCycle
(
Container
aContainer)
Moves the focus down one focus traversal cycle.
void
CardLayout.
first
(
Container
parent)
Flips to the first card of the container.
Component
ContainerOrderFocusTraversalPolicy.
getComponentAfter
(
Container
aContainer,
Component
aComponent)
Returns the Component that should receive the focus after aComponent.
abstract
Component
FocusTraversalPolicy.
getComponentAfter
(
Container
aContainer,
Component
aComponent)
Returns the Component that should receive the focus after aComponent.
Component
ContainerOrderFocusTraversalPolicy.
getComponentBefore
(
Container
aContainer,
Component
aComponent)
Returns the Component that should receive the focus before aComponent.
abstract
Component
FocusTraversalPolicy.
getComponentBefore
(
Container
aContainer,
Component
aComponent)
Returns the Component that should receive the focus before aComponent.
Component
ContainerOrderFocusTraversalPolicy.
getDefaultComponent
(
Container
aContainer)
Returns the default Component to focus.
abstract
Component
FocusTraversalPolicy.
getDefaultComponent
(
Container
aContainer)
Returns the default Component to focus.
Component
ContainerOrderFocusTraversalPolicy.
getFirstComponent
(
Container
aContainer)
Returns the first Component in the traversal cycle.
abstract
Component
FocusTraversalPolicy.
getFirstComponent
(
Container
aContainer)
Returns the first Component in the traversal cycle.
Component
ContainerOrderFocusTraversalPolicy.
getLastComponent
(
Container
aContainer)
Returns the last Component in the traversal cycle.
abstract
Component
FocusTraversalPolicy.
getLastComponent
(
Container
aContainer)
Returns the last Component in the traversal cycle.
float
BorderLayout.
getLayoutAlignmentX
(
Container
parent)
Returns the alignment along the x axis.
float
CardLayout.
getLayoutAlignmentX
(
Container
parent)
Returns the alignment along the x axis.
float
GridBagLayout.
getLayoutAlignmentX
(
Container
parent)
Returns the alignment along the x axis.
float
LayoutManager2.
getLayoutAlignmentX
(
Container
target)
Returns the alignment along the x axis.
float
BorderLayout.
getLayoutAlignmentY
(
Container
parent)
Returns the alignment along the y axis.
float
CardLayout.
getLayoutAlignmentY
(
Container
parent)
Returns the alignment along the y axis.
float
GridBagLayout.
getLayoutAlignmentY
(
Container
parent)
Returns the alignment along the y axis.
float
LayoutManager2.
getLayoutAlignmentY
(
Container
target)
Returns the alignment along the y axis.
Component
BorderLayout.
getLayoutComponent
(
Container
target,
Object
constraints)
Returns the component that corresponds to the given constraint location
 based on the target
Container
's component orientation.
protected
GridBagLayoutInfo
GridBagLayout.
getLayoutInfo
(
Container
parent,
 int sizeflag)
Fills in an instance of
GridBagLayoutInfo
for the
 current set of managed children.
protected
GridBagLayoutInfo
GridBagLayout.
GetLayoutInfo
(
Container
parent,
 int sizeflag)
This method is obsolete and supplied for backwards
 compatibility only; new code should call
getLayoutInfo
instead.
protected
Dimension
GridBagLayout.
getMinSize
(
Container
parent,
GridBagLayoutInfo
info)
Figures out the minimum size of the
 parent based on the information from
getLayoutInfo
.
protected
Dimension
GridBagLayout.
GetMinSize
(
Container
parent,
GridBagLayoutInfo
info)
This method is obsolete and supplied for backwards
 compatibility only; new code should call
getMinSize
instead.
void
BorderLayout.
invalidateLayout
(
Container
target)
Invalidates the layout, indicating that if the layout manager
 has cached information it should be discarded.
void
CardLayout.
invalidateLayout
(
Container
target)
Invalidates the layout, indicating that if the layout manager
 has cached information it should be discarded.
void
GridBagLayout.
invalidateLayout
(
Container
target)
Invalidates the layout, indicating that if the layout manager
 has cached information it should be discarded.
void
LayoutManager2.
invalidateLayout
(
Container
target)
Invalidates the layout, indicating that if the layout manager
 has cached information it should be discarded.
boolean
Component.
isFocusCycleRoot
(
Container
container)
Returns whether the specified Container is the focus cycle root of this
 Component's focus traversal cycle.
boolean
Container.
isFocusCycleRoot
(
Container
container)
Returns whether the specified Container is the focus cycle root of this
 Container's focus traversal cycle.
void
CardLayout.
last
(
Container
parent)
Flips to the last card of the container.
void
BorderLayout.
layoutContainer
(
Container
target)
Lays out the container argument using this border layout.
void
CardLayout.
layoutContainer
(
Container
parent)
Lays out the specified container using this card layout.
void
FlowLayout.
layoutContainer
(
Container
target)
Lays out the container.
void
GridBagLayout.
layoutContainer
(
Container
parent)
Lays out the specified container using this grid bag layout.
void
GridLayout.
layoutContainer
(
Container
parent)
Lays out the specified container using this layout.
void
LayoutManager.
layoutContainer
(
Container
parent)
Lays out the specified container.
Dimension
BorderLayout.
maximumLayoutSize
(
Container
target)
Returns the maximum dimensions for this layout given the components
 in the specified target container.
Dimension
CardLayout.
maximumLayoutSize
(
Container
target)
Returns the maximum dimensions for this layout given the components
 in the specified target container.
Dimension
GridBagLayout.
maximumLayoutSize
(
Container
target)
Returns the maximum dimensions for this layout given the components
 in the specified target container.
Dimension
LayoutManager2.
maximumLayoutSize
(
Container
target)
Calculates the maximum size dimensions for the specified container,
 given the components it contains.
Dimension
BorderLayout.
minimumLayoutSize
(
Container
target)
Determines the minimum size of the
target
container
 using this layout manager.
Dimension
CardLayout.
minimumLayoutSize
(
Container
parent)
Calculates the minimum size for the specified panel.
Dimension
FlowLayout.
minimumLayoutSize
(
Container
target)
Returns the minimum dimensions needed to layout the
visible
components contained in the specified target container.
Dimension
GridBagLayout.
minimumLayoutSize
(
Container
parent)
Determines the minimum size of the
parent
container
 using this grid bag layout.
Dimension
GridLayout.
minimumLayoutSize
(
Container
parent)
Determines the minimum size of the container argument using this
 grid layout.
Dimension
LayoutManager.
minimumLayoutSize
(
Container
parent)
Calculates the minimum size dimensions for the specified
 container, given the components it contains.
void
CardLayout.
next
(
Container
parent)
Flips to the next card of the specified container.
Dimension
BorderLayout.
preferredLayoutSize
(
Container
target)
Determines the preferred size of the
target
container using this layout manager, based on the components
 in the container.
Dimension
CardLayout.
preferredLayoutSize
(
Container
parent)
Determines the preferred size of the container argument using
 this card layout.
Dimension
FlowLayout.
preferredLayoutSize
(
Container
target)
Returns the preferred dimensions for this layout given the
visible
components in the specified target container.
Dimension
GridBagLayout.
preferredLayoutSize
(
Container
parent)
Determines the preferred size of the
parent
container using this grid bag layout.
Dimension
GridLayout.
preferredLayoutSize
(
Container
parent)
Determines the preferred size of the container argument using
 this grid layout.
Dimension
LayoutManager.
preferredLayoutSize
(
Container
parent)
Calculates the preferred size dimensions for the specified
 container, given the components it contains.
void
CardLayout.
previous
(
Container
parent)
Flips to the previous card of the specified container.
void
KeyboardFocusManager.
setGlobalCurrentFocusCycleRoot
(
Container
newFocusCycleRoot)
Sets the current focus cycle root.
void
CardLayout.
show
(
Container
parent,
String
name)
Flips to the component that was added to this layout with the
 specified
name
, using
addLayoutComponent
.
Uses of
Container
in
java.awt.event
Methods in
java.awt.event
that return
Container
Modifier and Type
Method
Description
Container
HierarchyEvent.
getChangedParent
()
Returns the parent of the Component returned by
getChanged()
.
Container
ContainerEvent.
getContainer
()
Returns the originator of the event.
Constructors in
java.awt.event
with parameters of type
Container
Modifier
Constructor
Description
HierarchyEvent
(
Component
source,
 int id,
Component
changed,
Container
changedParent)
Constructs an
HierarchyEvent
object to identify a
 change in the
Component
hierarchy.
HierarchyEvent
(
Component
source,
 int id,
Component
changed,
Container
changedParent,
 long changeFlags)
Constructs an
HierarchyEvent
object to identify
 a change in the
Component
hierarchy.
Uses of
Container
in
java.beans.beancontext
Methods in
java.beans.beancontext
that return
Container
Modifier and Type
Method
Description
Container
BeanContextContainerProxy.
getContainer
()
Gets the
java.awt.Container
associated
 with this
BeanContext
.
Uses of
Container
in
javax.swing
Subclasses of
Container
in
javax.swing
Modifier and Type
Class
Description
class
AbstractButton
Defines common behaviors for buttons and menu items.
class
Box
A lightweight container
 that uses a BoxLayout object as its layout manager.
static class
Box.Filler
An implementation of a lightweight component that participates in
 layout but has no view.
class
CellRendererPane
This class is inserted in between cell renderers and the components that
 use them.
class
DefaultListCellRenderer
Renders an item in a list.
static class
DefaultListCellRenderer.UIResource
A subclass of DefaultListCellRenderer that implements UIResource.
class
JApplet
Deprecated, for removal: This API element is subject to removal in a future version.
The Applet API is deprecated, no replacement.
class
JButton
An implementation of a "push" button.
class
JCheckBox
An implementation of a check box -- an item that can be selected or
 deselected, and which displays its state to the user.
class
JCheckBoxMenuItem
A menu item that can be selected or deselected.
class
JColorChooser
JColorChooser
provides a pane of controls designed to allow
 a user to manipulate and select a color.
class
JComboBox
<E>
A component that combines a button or editable field and a drop-down list.
class
JComponent
The base class for all Swing components except top-level containers.
class
JDesktopPane
A container used to create a multiple-document interface or a virtual desktop.
class
JDialog
The main class for creating a dialog window.
class
JEditorPane
A text component to edit various kinds of content.
class
JFileChooser
JFileChooser
provides a simple mechanism for the user to
 choose a file.
class
JFormattedTextField
JFormattedTextField
extends
JTextField
adding
 support for formatting arbitrary values, as well as retrieving a particular
 object once the user has edited the text.
class
JFrame
An extended version of
java.awt.Frame
that adds support for
 the JFC/Swing component architecture.
class
JInternalFrame
A lightweight object that provides many of the features of
 a native frame, including dragging, closing, becoming an icon,
 resizing, title display, and support for a menu bar.
static class
JInternalFrame.JDesktopIcon
This component represents an iconified version of a
JInternalFrame
.
class
JLabel
A display area for a short text string or an image,
 or both.
final class
JLayer
<V extends
Component
>
JLayer
is a universal decorator for Swing components
 which enables you to implement various advanced painting effects as well as
 receive notifications of all
AWTEvent
s generated within its borders.
class
JLayeredPane
JLayeredPane
adds depth to a JFC/Swing container,
 allowing components to overlap each other when needed.
class
JList
<E>
A component that displays a list of objects and allows the user to select
 one or more items.
class
JMenu
An implementation of a menu -- a popup window containing
JMenuItem
s that
 is displayed when the user selects an item on the
JMenuBar
.
class
JMenuBar
An implementation of a menu bar.
class
JMenuItem
An implementation of an item in a menu.
class
JOptionPane
JOptionPane
makes it easy to pop up a standard dialog box that
 prompts users for a value or informs them of something.
class
JPanel
JPanel
is a generic lightweight container.
class
JPasswordField
JPasswordField
is a lightweight component that allows
 the editing of a single line of text where the view indicates
 something was typed, but does not show the original characters.
class
JPopupMenu
An implementation of a popup menu -- a small window that pops up
 and displays a series of choices.
static class
JPopupMenu.Separator
A popup menu-specific separator.
class
JProgressBar
A component that visually displays the progress of some task.
class
JRadioButton
An implementation of a radio button -- an item that can be selected or
 deselected, and which displays its state to the user.
class
JRadioButtonMenuItem
An implementation of a radio button menu item.
class
JRootPane
A lightweight container used behind the scenes by
JFrame
,
JDialog
,
JWindow
,
JApplet
, and
JInternalFrame
.
class
JScrollBar
An implementation of a scrollbar.
class
JScrollPane
Provides a scrollable view of a lightweight component.
protected class
JScrollPane.ScrollBar
By default
JScrollPane
creates scrollbars
 that are instances
 of this class.
class
JSeparator
JSeparator
provides a general purpose component for
 implementing divider lines - most commonly used as a divider
 between menu items that breaks them up into logical groupings.
class
JSlider
A component that lets the user graphically select a value by sliding
 a knob within a bounded interval.
class
JSpinner
A single line input field that lets the user select a
 number or an object value from an ordered sequence.
static class
JSpinner.DateEditor
An editor for a
JSpinner
whose model is a
SpinnerDateModel
.
static class
JSpinner.DefaultEditor
A simple base class for more specialized editors
 that displays a read-only view of the model's current
 value with a
JFormattedTextField
.
static class
JSpinner.ListEditor
An editor for a
JSpinner
whose model is a
SpinnerListModel
.
static class
JSpinner.NumberEditor
An editor for a
JSpinner
whose model is a
SpinnerNumberModel
.
class
JSplitPane
JSplitPane
is used to divide two (and only two)
Component
s.
class
JTabbedPane
A component that lets the user switch between a group of components by
 clicking on a tab with a given title and/or icon.
class
JTable
The
JTable
is used to display and edit regular two-dimensional tables
 of cells.
class
JTextArea
A
JTextArea
is a multi-line area that displays plain text.
class
JTextField
JTextField
is a lightweight component that allows the editing
 of a single line of text.
class
JTextPane
A text component that can be marked up with attributes that are
 represented graphically.
class
JToggleButton
An implementation of a two-state button.
class
JToolBar
JToolBar
provides a component that is useful for
 displaying commonly used
Action
s or controls.
static class
JToolBar.Separator
A toolbar-specific separator.
class
JToolTip
Used to display a "Tip" for a Component.
class
JTree
A control that displays a set of hierarchical data as an outline.
class
JViewport
The "viewport" or "porthole" through which you see the underlying
 information.
class
JWindow
A
JWindow
is a container that can be displayed anywhere on the
 user's desktop.
Fields in
javax.swing
declared as
Container
Modifier and Type
Field
Description
protected
Container
JRootPane.
contentPane
The content pane.
Methods in
javax.swing
that return
Container
Modifier and Type
Method
Description
protected
Container
JRootPane.
createContentPane
()
Called by the constructor methods to create the default
contentPane
.
static
Container
SwingUtilities.
getAncestorNamed
(
String
name,
Component
comp)
Convenience method for searching above
comp
in the
 component hierarchy and returns the first object of
name
it
 finds.
static
Container
SwingUtilities.
getAncestorOfClass
(
Class
<?> c,
Component
comp)
Convenience method for searching above
comp
in the
 component hierarchy and returns the first object of class
c
it
 finds.
Container
JApplet.
getContentPane
()
Deprecated, for removal: This API element is subject to removal in a future version.
Returns the contentPane object for this applet.
Container
JDialog.
getContentPane
()
Returns the
contentPane
object for this dialog.
Container
JFrame.
getContentPane
()
Returns the
contentPane
object for this frame.
Container
JInternalFrame.
getContentPane
()
Returns the content pane for this internal frame.
Container
JRootPane.
getContentPane
()
Returns the content pane -- the container that holds the components
 parented by the root pane.
Container
JWindow.
getContentPane
()
Returns the
Container
which is the
contentPane
for this window.
Container
RootPaneContainer.
getContentPane
()
Returns the contentPane.
final
Container
JInternalFrame.
getFocusCycleRootAncestor
()
Always returns
null
because
JInternalFrame
s
 must always be roots of a focus
 traversal cycle.
final
Container
BoxLayout.
getTarget
()
Returns the container that uses this layout manager.
final
Container
OverlayLayout.
getTarget
()
Returns the container that uses this layout manager.
Container
JComponent.
getTopLevelAncestor
()
Returns the top-level ancestor of this component (either the
 containing
Window
or
Applet
),
 or
null
if this component has not
 been added to any container.
static
Container
SwingUtilities.
getUnwrappedParent
(
Component
component)
Returns the first ancestor of the
component
which is not an instance of
JLayer
.
Methods in
javax.swing
with parameters of type
Container
Modifier and Type
Method
Description
Component
DefaultFocusManager.
getComponentAfter
(
Container
aContainer,
Component
aComponent)
Returns the component after.
Component
LayoutFocusTraversalPolicy.
getComponentAfter
(
Container
aContainer,
Component
aComponent)
Returns the Component that should receive the focus after aComponent.
Component
SortingFocusTraversalPolicy.
getComponentAfter
(
Container
aContainer,
Component
aComponent)
Returns the Component that should receive the focus after aComponent.
Component
DefaultFocusManager.
getComponentBefore
(
Container
aContainer,
Component
aComponent)
Returns the component before.
Component
LayoutFocusTraversalPolicy.
getComponentBefore
(
Container
aContainer,
Component
aComponent)
Returns the Component that should receive the focus before aComponent.
Component
SortingFocusTraversalPolicy.
getComponentBefore
(
Container
aContainer,
Component
aComponent)
Returns the Component that should receive the focus before aComponent.
abstract int
LayoutStyle.
getContainerGap
(
JComponent
component,
 int position,
Container
parent)
Returns the amount of space to place between the component and specified
 edge of its parent.
Component
SortingFocusTraversalPolicy.
getDefaultComponent
(
Container
aContainer)
Returns the default Component to focus.
Component
DefaultFocusManager.
getFirstComponent
(
Container
aContainer)
Returns the first component.
Component
LayoutFocusTraversalPolicy.
getFirstComponent
(
Container
aContainer)
Returns the first Component in the traversal cycle.
Component
SortingFocusTraversalPolicy.
getFirstComponent
(
Container
aContainer)
Returns the first Component in the traversal cycle.
Component
DefaultFocusManager.
getLastComponent
(
Container
aContainer)
Returns the last component.
Component
LayoutFocusTraversalPolicy.
getLastComponent
(
Container
aContainer)
Returns the last Component in the traversal cycle.
Component
SortingFocusTraversalPolicy.
getLastComponent
(
Container
aContainer)
Returns the last Component in the traversal cycle.
float
BoxLayout.
getLayoutAlignmentX
(
Container
target)
Returns the alignment along the X axis for the container.
float
GroupLayout.
getLayoutAlignmentX
(
Container
parent)
Returns the alignment along the x axis.
float
JRootPane.RootLayout.
getLayoutAlignmentX
(
Container
target)
float
OverlayLayout.
getLayoutAlignmentX
(
Container
target)
Returns the alignment along the x axis for the container.
float
SpringLayout.
getLayoutAlignmentX
(
Container
p)
Returns 0.5f (centered).
float
BoxLayout.
getLayoutAlignmentY
(
Container
target)
Returns the alignment along the Y axis for the container.
float
GroupLayout.
getLayoutAlignmentY
(
Container
parent)
Returns the alignment along the y axis.
float
JRootPane.RootLayout.
getLayoutAlignmentY
(
Container
target)
float
OverlayLayout.
getLayoutAlignmentY
(
Container
target)
Returns the alignment along the y axis for the container.
float
SpringLayout.
getLayoutAlignmentY
(
Container
p)
Returns 0.5f (centered).
abstract int
LayoutStyle.
getPreferredGap
(
JComponent
component1,
JComponent
component2,
LayoutStyle.ComponentPlacement
type,
 int position,
Container
parent)
Returns the amount of space to use between two components.
void
BoxLayout.
invalidateLayout
(
Container
target)
Indicates that a child has changed its layout related information,
 and thus any cached calculations should be flushed.
void
GroupLayout.
invalidateLayout
(
Container
parent)
Invalidates the layout, indicating that if the layout manager
 has cached information it should be discarded.
void
JRootPane.RootLayout.
invalidateLayout
(
Container
target)
void
OverlayLayout.
invalidateLayout
(
Container
target)
Indicates a child has changed its layout related information,
 which causes any cached calculations to be flushed.
void
SpringLayout.
invalidateLayout
(
Container
p)
void
BoxLayout.
layoutContainer
(
Container
target)
Called by the AWT
when the specified container
 needs to be laid out.
void
GroupLayout.
layoutContainer
(
Container
parent)
Lays out the specified container.
void
JRootPane.RootLayout.
layoutContainer
(
Container
parent)
Instructs the layout manager to perform the layout for the specified
 container.
void
JSpinner.DefaultEditor.
layoutContainer
(
Container
parent)
Resize the one (and only) child to completely fill the area
 within the parents insets.
void
OverlayLayout.
layoutContainer
(
Container
target)
Called by the AWT when the specified container needs to be laid out.
void
ScrollPaneLayout.
layoutContainer
(
Container
parent)
Lays out the scrollpane.
void
SpringLayout.
layoutContainer
(
Container
parent)
void
ViewportLayout.
layoutContainer
(
Container
parent)
Called by the AWT when the specified container needs to be laid out.
Dimension
BoxLayout.
maximumLayoutSize
(
Container
target)
Returns the maximum dimensions the target container can use
 to lay out the components it contains.
Dimension
GroupLayout.
maximumLayoutSize
(
Container
parent)
Returns the maximum size for the specified container.
Dimension
JRootPane.RootLayout.
maximumLayoutSize
(
Container
target)
Returns the maximum amount of space the layout can use.
Dimension
OverlayLayout.
maximumLayoutSize
(
Container
target)
Returns the maximum dimensions needed to lay out the components
 contained in the specified target container.
Dimension
SpringLayout.
maximumLayoutSize
(
Container
parent)
Dimension
BoxLayout.
minimumLayoutSize
(
Container
target)
Returns the minimum dimensions needed to lay out the components
 contained in the specified target container.
Dimension
GroupLayout.
minimumLayoutSize
(
Container
parent)
Returns the minimum size for the specified container.
Dimension
JRootPane.RootLayout.
minimumLayoutSize
(
Container
parent)
Returns the minimum amount of space the layout needs.
Dimension
JSpinner.DefaultEditor.
minimumLayoutSize
(
Container
parent)
Returns the minimum size of first (and only) child plus the
 size of the parents insets.
Dimension
OverlayLayout.
minimumLayoutSize
(
Container
target)
Returns the minimum dimensions needed to lay out the components
 contained in the specified target container.
Dimension
ScrollPaneLayout.
minimumLayoutSize
(
Container
parent)
The minimum size of a
ScrollPane
is the size of the insets
 plus minimum size of the viewport, plus the scrollpane's
 viewportBorder insets, plus the minimum size
 of the visible headers, plus the minimum size of the
 scrollbars whose displayPolicy isn't NEVER.
Dimension
SpringLayout.
minimumLayoutSize
(
Container
parent)
Dimension
ViewportLayout.
minimumLayoutSize
(
Container
parent)
Returns the minimum dimensions needed to layout the components
 contained in the specified target container.
void
CellRendererPane.
paintComponent
(
Graphics
g,
Component
c,
Container
p,
 int x,
 int y,
 int w,
 int h)
Calls this.paintComponent(g, c, p, x, y, w, h, false).
void
CellRendererPane.
paintComponent
(
Graphics
g,
Component
c,
Container
p,
 int x,
 int y,
 int w,
 int h,
 boolean shouldValidate)
Paint a cell renderer component c on graphics object g.
void
CellRendererPane.
paintComponent
(
Graphics
g,
Component
c,
Container
p,
Rectangle
r)
Calls this.paintComponent(g, c, p, r.x, r.y, r.width, r.height) where
r
is the input
Rectangle
parameter.
static void
SwingUtilities.
paintComponent
(
Graphics
g,
Component
c,
Container
p,
 int x,
 int y,
 int w,
 int h)
Paints a component to the specified
Graphics
.
static void
SwingUtilities.
paintComponent
(
Graphics
g,
Component
c,
Container
p,
Rectangle
r)
Paints a component to the specified
Graphics
.
Dimension
BoxLayout.
preferredLayoutSize
(
Container
target)
Returns the preferred dimensions for this layout, given the components
 in the specified target container.
Dimension
GroupLayout.
preferredLayoutSize
(
Container
parent)
Returns the preferred size for the specified container.
Dimension
JRootPane.RootLayout.
preferredLayoutSize
(
Container
parent)
Returns the amount of space the layout would like to have.
Dimension
JSpinner.DefaultEditor.
preferredLayoutSize
(
Container
parent)
Returns the preferred size of first (and only) child plus the
 size of the parents insets.
Dimension
OverlayLayout.
preferredLayoutSize
(
Container
target)
Returns the preferred dimensions for this layout given the components
 in the specified target container.
Dimension
ScrollPaneLayout.
preferredLayoutSize
(
Container
parent)
The preferred size of a
ScrollPane
is the size of the insets,
 plus the preferred size of the viewport, plus the preferred size of
 the visible headers, plus the preferred size of the scrollbars
 that will appear given the current view and the current
 scrollbar displayPolicies.
Dimension
SpringLayout.
preferredLayoutSize
(
Container
parent)
Dimension
ViewportLayout.
preferredLayoutSize
(
Container
parent)
Returns the preferred dimensions for this layout given the components
 in the specified target container.
void
JApplet.
setContentPane
(
Container
contentPane)
Deprecated, for removal: This API element is subject to removal in a future version.
Sets the contentPane property.
void
JDialog.
setContentPane
(
Container
contentPane)
Sets the
contentPane
property.
void
JFrame.
setContentPane
(
Container
contentPane)
Sets the
contentPane
property.
void
JInternalFrame.
setContentPane
(
Container
c)
Sets this
JInternalFrame
's
contentPane
property.
void
JRootPane.
setContentPane
(
Container
content)
Sets the content pane -- the container that holds the components
 parented by the root pane.
void
JWindow.
setContentPane
(
Container
contentPane)
Sets the
contentPane
property for this window.
void
RootPaneContainer.
setContentPane
(
Container
contentPane)
The "contentPane" is the primary container for application
 specific components.
Constructors in
javax.swing
with parameters of type
Container
Modifier
Constructor
Description
BoxLayout
(
Container
target,
 int axis)
Creates a layout manager that will lay out components along the
 given axis.
GroupLayout
(
Container
host)
Creates a
GroupLayout
for the specified
Container
.
OverlayLayout
(
Container
target)
Constructs a layout manager that performs overlay
 arrangement of the children.
Uses of
Container
in
javax.swing.colorchooser
Subclasses of
Container
in
javax.swing.colorchooser
Modifier and Type
Class
Description
class
AbstractColorChooserPanel
This is the abstract superclass for color choosers.
Uses of
Container
in
javax.swing.event
Methods in
javax.swing.event
that return
Container
Modifier and Type
Method
Description
Container
AncestorEvent.
getAncestor
()
Returns the ancestor that the event actually occurred on.
Container
AncestorEvent.
getAncestorParent
()
Returns the parent of the ancestor the event actually occurred on.
Constructors in
javax.swing.event
with parameters of type
Container
Modifier
Constructor
Description
AncestorEvent
(
JComponent
source,
 int id,
Container
ancestor,
Container
ancestorParent)
Constructs an AncestorEvent object to identify a change
 in an ancestor-component's display-status.
Uses of
Container
in
javax.swing.plaf.basic
Subclasses of
Container
in
javax.swing.plaf.basic
Modifier and Type
Class
Description
class
BasicArrowButton
JButton object that draws a scaled Arrow in one of the cardinal directions.
class
BasicComboBoxRenderer
ComboBox renderer
static class
BasicComboBoxRenderer.UIResource
A subclass of BasicComboBoxRenderer that implements UIResource.
class
BasicComboPopup
This is a basic implementation of the
ComboPopup
interface.
class
BasicInternalFrameTitlePane
The class that manages a basic title bar
class
BasicInternalFrameTitlePane.SystemMenuBar
This class should be treated as a "protected" inner class.
class
BasicSplitPaneDivider
Divider used by BasicSplitPaneUI.
protected class
BasicToolBarUI.DragWindow
The window which appears during dragging the
JToolBar
.
Methods in
javax.swing.plaf.basic
that return
Container
Modifier and Type
Method
Description
protected
Container
BasicOptionPaneUI.
createButtonArea
()
Creates and returns a
Container
containing the buttons.
protected
Container
BasicOptionPaneUI.
createMessageArea
()
Messaged from
installComponents
to create a
Container
containing the body of the message.
protected
Container
BasicOptionPaneUI.
createSeparator
()
Returns a separator.
Methods in
javax.swing.plaf.basic
with parameters of type
Container
Modifier and Type
Method
Description
protected void
BasicOptionPaneUI.
addButtonComponents
(
Container
container,
Object
[] buttons,
 int initialIndex)
Creates the appropriate object to represent each of the objects in
buttons
and adds it to
container
.
protected void
BasicOptionPaneUI.
addIcon
(
Container
top)
Creates and adds a JLabel representing the icon returned from
getIcon
to
top
.
protected void
BasicOptionPaneUI.
addMessageComponents
(
Container
container,
GridBagConstraints
cons,
Object
msg,
 int maxll,
 boolean internallyCreated)
Creates the appropriate object to represent
msg
and places it
 into
container
.
protected void
BasicOptionPaneUI.
burstStringInto
(
Container
c,
String
d,
 int maxll)
Recursively creates new
JLabel
instances to represent
d
.
float
BasicSplitPaneUI.BasicHorizontalLayoutManager.
getLayoutAlignmentX
(
Container
target)
Returns the alignment along the x axis.
float
BasicSplitPaneUI.BasicHorizontalLayoutManager.
getLayoutAlignmentY
(
Container
target)
Returns the alignment along the y axis.
void
BasicSplitPaneUI.BasicHorizontalLayoutManager.
invalidateLayout
(
Container
c)
Does nothing.
void
BasicComboBoxUI.ComboBoxLayoutManager.
layoutContainer
(
Container
parent)
void
BasicInternalFrameTitlePane.TitlePaneLayout.
layoutContainer
(
Container
c)
void
BasicInternalFrameUI.InternalFrameLayout.
layoutContainer
(
Container
c)
Lays out the specified container.
void
BasicOptionPaneUI.ButtonAreaLayout.
layoutContainer
(
Container
container)
void
BasicScrollBarUI.
layoutContainer
(
Container
scrollbarContainer)
void
BasicSplitPaneDivider.DividerLayout.
layoutContainer
(
Container
c)
void
BasicSplitPaneUI.BasicHorizontalLayoutManager.
layoutContainer
(
Container
container)
Does the actual layout.
void
BasicTabbedPaneUI.TabbedPaneLayout.
layoutContainer
(
Container
parent)
Lays out the specified container.
Dimension
BasicSplitPaneUI.BasicHorizontalLayoutManager.
maximumLayoutSize
(
Container
target)
Returns the maximum layout size, which is Integer.MAX_VALUE
 in both directions.
Dimension
BasicComboBoxUI.ComboBoxLayoutManager.
minimumLayoutSize
(
Container
parent)
Dimension
BasicInternalFrameTitlePane.TitlePaneLayout.
minimumLayoutSize
(
Container
c)
Dimension
BasicInternalFrameUI.InternalFrameLayout.
minimumLayoutSize
(
Container
c)
Calculates the minimum size dimensions for the specified
 container, given the components it contains.
Dimension
BasicOptionPaneUI.ButtonAreaLayout.
minimumLayoutSize
(
Container
c)
Dimension
BasicScrollBarUI.
minimumLayoutSize
(
Container
scrollbarContainer)
Dimension
BasicSplitPaneDivider.DividerLayout.
minimumLayoutSize
(
Container
c)
Dimension
BasicSplitPaneUI.BasicHorizontalLayoutManager.
minimumLayoutSize
(
Container
container)
Returns the minimum size needed to contain the children.
Dimension
BasicTabbedPaneUI.TabbedPaneLayout.
minimumLayoutSize
(
Container
parent)
Dimension
BasicComboBoxUI.ComboBoxLayoutManager.
preferredLayoutSize
(
Container
parent)
Dimension
BasicInternalFrameTitlePane.TitlePaneLayout.
preferredLayoutSize
(
Container
c)
Dimension
BasicInternalFrameUI.InternalFrameLayout.
preferredLayoutSize
(
Container
c)
Calculates the preferred size dimensions for the specified
 container, given the components it contains.
Dimension
BasicOptionPaneUI.ButtonAreaLayout.
preferredLayoutSize
(
Container
c)
Dimension
BasicScrollBarUI.
preferredLayoutSize
(
Container
scrollbarContainer)
Dimension
BasicSplitPaneDivider.DividerLayout.
preferredLayoutSize
(
Container
c)
Dimension
BasicSplitPaneUI.BasicHorizontalLayoutManager.
preferredLayoutSize
(
Container
container)
Returns the preferred size needed to contain the children.
Dimension
BasicTabbedPaneUI.TabbedPaneLayout.
preferredLayoutSize
(
Container
parent)
Constructors in
javax.swing.plaf.basic
with parameters of type
Container
Modifier
Constructor
Description
DefaultMenuLayout
(
Container
target,
 int axis)
Constructs a new instance of
DefaultMenuLayout
.
Uses of
Container
in
javax.swing.plaf.metal
Subclasses of
Container
in
javax.swing.plaf.metal
Modifier and Type
Class
Description
class
MetalComboBoxButton
JButton subclass to help out MetalComboBoxUI
class
MetalComboBoxUI.MetalComboPopup
Deprecated.
As of Java 2 platform v1.4.
protected class
MetalFileChooserUI.FileRenderer
Deprecated.
As of JDK version 9.
class
MetalFileChooserUI.FilterComboBoxRenderer
Render different type sizes and styles.
class
MetalInternalFrameTitlePane
Class that manages a JLF title bar
class
MetalScrollButton
JButton object for Metal scrollbar arrows.
Methods in
javax.swing.plaf.metal
with parameters of type
Container
Modifier and Type
Method
Description
void
MetalComboBoxUI.
layoutComboBox
(
Container
parent,
MetalComboBoxUI.MetalComboBoxLayoutManager
manager)
Lays out the
JComboBox
in the
parent
container.
void
MetalComboBoxUI.MetalComboBoxLayoutManager.
superLayout
(
Container
parent)
Lays out the parent container.
Uses of
Container
in
javax.swing.plaf.synth
Methods in
javax.swing.plaf.synth
that return
Container
Modifier and Type
Method
Description
protected
Container
SynthOptionPaneUI.
createMessageArea
()
Called from
BasicOptionPaneUI.installComponents()
to create a
Container
containing the body of the message.
Uses of
Container
in
javax.swing.table
Subclasses of
Container
in
javax.swing.table
Modifier and Type
Class
Description
class
DefaultTableCellRenderer
The standard class for rendering (displaying) individual cells
 in a
JTable
.
static class
DefaultTableCellRenderer.UIResource
A subclass of
DefaultTableCellRenderer
that
 implements
UIResource
.
class
JTableHeader
This is the object which manages the header of the
JTable
.
Uses of
Container
in
javax.swing.text
Subclasses of
Container
in
javax.swing.text
Modifier and Type
Class
Description
class
JTextComponent
JTextComponent
is the base class for swing text
 components.
Methods in
javax.swing.text
that return
Container
Modifier and Type
Method
Description
Container
View.
getContainer
()
Fetches the container hosting the view.
Uses of
Container
in
javax.swing.tree
Subclasses of
Container
in
javax.swing.tree
Modifier and Type
Class
Description
class
DefaultTreeCellEditor.DefaultTextField
TextField
used when no editor is supplied.
class
DefaultTreeCellEditor.EditorContainer
Container responsible for placing the
editingComponent
.
class
DefaultTreeCellRenderer
Displays an entry in a tree.
Fields in
javax.swing.tree
declared as
Container
Modifier and Type
Field
Description
protected
Container
DefaultTreeCellEditor.
editingContainer
Editing container, will contain the
editorComponent
.
Methods in
javax.swing.tree
that return
Container
Modifier and Type
Method
Description
protected
Container
DefaultTreeCellEditor.
createContainer
()
Creates the container to manage placement of
editingComponent
.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.