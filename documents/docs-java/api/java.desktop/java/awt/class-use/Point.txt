Uses of Class java.awt.Point (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Class
java.awt.Point
Packages that use
Point
Package
Description
com.sun.java.accessibility.util
Provides a collection of interfaces and classes that compose the Java Accessibility
 Utilities.
java.awt
Contains all of the classes for creating user interfaces and for painting
 graphics and images.
java.awt.dnd
Drag and Drop is a direct manipulation gesture found in many Graphical User
 Interface systems that provides a mechanism to transfer information between
 two entities logically associated with presentation elements in the GUI.
java.awt.event
Provides interfaces and classes for dealing with different types of events
 fired by AWT components.
java.awt.image
Provides classes for creating and modifying images.
javax.accessibility
Defines a contract between user-interface components and an assistive
 technology that provides access to those components.
javax.imageio
The main package of the Java Image I/O API.
javax.swing
Provides a set of "lightweight" (all-Java language) components
 that, to the maximum degree possible, work the same on all platforms.
javax.swing.plaf
Provides one interface and many abstract classes that Swing uses to provide
 its pluggable look-and-feel capabilities.
javax.swing.plaf.basic
Provides user interface objects built according to the Basic look and feel.
javax.swing.plaf.metal
Provides user interface objects built according to the Java look and feel
 (once codenamed
Metal
), which is the default look and feel.
javax.swing.plaf.multi
Provides user interface objects that combine two or more look and feels.
javax.swing.table
Provides classes and interfaces for dealing with
javax.swing.JTable
.
javax.swing.text
Provides classes and interfaces that deal with editable and noneditable text
 components.
Uses of
Point
in
com.sun.java.accessibility.util
Methods in
com.sun.java.accessibility.util
that return
Point
Modifier and Type
Method
Description
static
Point
EventQueueMonitor.
getCurrentMousePosition
()
Return the last recorded position of the mouse in screen coordinates.
Point
Translator.
getLocation
()
Returns the location of the object relative to parent.
Point
Translator.
getLocationOnScreen
()
Returns the location of the object on the screen.
Methods in
com.sun.java.accessibility.util
with parameters of type
Point
Modifier and Type
Method
Description
boolean
Translator.
contains
(
Point
p)
Checks whether the specified
Point
is within this
 object's bounds, where the
Point
is relative to the coordinate
 system of the object.
static
Accessible
EventQueueMonitor.
getAccessibleAt
(
Point
p)
Obtain the
Accessible
object at the given point on the Screen.
Accessible
Translator.
getAccessibleAt
(
Point
p)
Returns the accessible child contained at the local coordinate
 Point, if one exists.
void
Translator.
setLocation
(
Point
p)
Sets the location of the object relative to parent.
Uses of
Point
in
java.awt
Methods in
java.awt
that return
Point
Modifier and Type
Method
Description
Point
GraphicsEnvironment.
getCenterPoint
()
Returns the Point where Windows should be centered.
Point
GridBagLayout.
getLayoutOrigin
()
Determines the origin of the layout area, in the graphics coordinate
 space of the target container.
Point
Component.AccessibleAWTComponent.
getLocation
()
Gets the location of the object relative to the parent in the form
 of a point specifying the object's top-left corner in the screen's
 coordinate space.
Point
Component.
getLocation
()
Gets the location of this component in the form of a
 point specifying the component's top-left corner.
Point
Component.
getLocation
(
Point
rv)
Stores the x,y origin of this component into "return value"
rv
and return
rv
.
Point
List.AccessibleAWTList.AccessibleAWTListChild.
getLocation
()
Gets the location of the object relative to the parent in the
 form of a point specifying the object's top-left corner in the
 screen's coordinate space.
Point
MenuComponent.AccessibleAWTMenuComponent.
getLocation
()
Gets the location of the object relative to the parent in the form
 of a point specifying the object's top-left corner in the screen's
 coordinate space.
Point
Point.
getLocation
()
Returns the location of this point.
Point
PointerInfo.
getLocation
()
Returns the
Point
that represents the coordinates of the pointer
 on the screen.
Point
Rectangle.
getLocation
()
Returns the location of this
Rectangle
.
Point
Component.AccessibleAWTComponent.
getLocationOnScreen
()
Returns the location of the object on the screen.
Point
Component.
getLocationOnScreen
()
Gets the location of this component in the form of a point
 specifying the component's top-left corner in the screen's
 coordinate space.
Point
List.AccessibleAWTList.AccessibleAWTListChild.
getLocationOnScreen
()
Returns the location of the object on the screen.
Point
MenuComponent.AccessibleAWTMenuComponent.
getLocationOnScreen
()
Returns the location of the object on the screen.
Point
Component.
getMousePosition
()
Returns the position of the mouse pointer in this
Component
's
 coordinate space if the
Component
is directly under the mouse
 pointer, otherwise returns
null
.
Point
Container.
getMousePosition
(boolean allowChildren)
Returns the position of the mouse pointer in this
Container
's
 coordinate space if the
Container
is under the mouse pointer,
 otherwise returns
null
.
Point
ScrollPane.
getScrollPosition
()
Returns the current x,y position within the child which is displayed
 at the 0,0 location of the scrolled panel's view port.
Point
Component.
location
()
Deprecated.
As of JDK version 1.1,
 replaced by
getLocation()
.
Point
GridBagLayout.
location
(int x,
 int y)
Determines which cell in the layout grid contains the point
 specified by
(x, y)
.
Methods in
java.awt
with parameters of type
Point
Modifier and Type
Method
Description
void
Rectangle.
add
(
Point
pt)
Adds the specified
Point
to the bounds of this
Rectangle
.
boolean
Component.AccessibleAWTComponent.
contains
(
Point
p)
Checks whether the specified point is within this object's bounds,
 where the point's x and y coordinates are defined to be relative to
 the coordinate system of the object.
boolean
Component.
contains
(
Point
p)
Checks whether this component "contains" the specified point,
 where the point's
x
and
y
coordinates are defined
 to be relative to the coordinate system of this component.
boolean
List.AccessibleAWTList.AccessibleAWTListChild.
contains
(
Point
p)
Checks whether the specified point is within this object's
 bounds, where the point's x and y coordinates are defined to
 be relative to the coordinate system of the object.
boolean
MenuComponent.AccessibleAWTMenuComponent.
contains
(
Point
p)
Checks whether the specified point is within this object's bounds,
 where the point's x and y coordinates are defined to be relative to
 the coordinate system of the object.
boolean
Polygon.
contains
(
Point
p)
Determines whether the specified
Point
is inside this
Polygon
.
boolean
Rectangle.
contains
(
Point
p)
Checks whether or not this
Rectangle
contains the
 specified
Point
.
Cursor
Toolkit.
createCustomCursor
(
Image
cursor,
Point
hotSpot,
String
name)
Creates a new custom cursor object.
Component
Container.
findComponentAt
(
Point
p)
Locates the visible child component that contains the specified
 point.
Accessible
Component.AccessibleAWTComponent.
getAccessibleAt
(
Point
p)
Returns the
Accessible
child,
 if one exists, contained at the local
 coordinate
Point
.
Accessible
Container.AccessibleAWTContainer.
getAccessibleAt
(
Point
p)
Returns the
Accessible
child, if one exists,
 contained at the local coordinate
Point
.
Accessible
List.AccessibleAWTList.AccessibleAWTListChild.
getAccessibleAt
(
Point
p)
Returns the
Accessible
child, if one exists,
 contained at the local coordinate
Point
.
Accessible
List.AccessibleAWTList.
getAccessibleAt
(
Point
p)
Returns the Accessible child contained at the local coordinate
 Point, if one exists.
Accessible
MenuComponent.AccessibleAWTMenuComponent.
getAccessibleAt
(
Point
p)
Returns the
Accessible
child, if one exists,
 contained at the local coordinate
Point
.
Component
Component.
getComponentAt
(
Point
p)
Returns the component or subcomponent that contains the
 specified point.
Component
Container.
getComponentAt
(
Point
p)
Gets the component that contains the specified point.
int
TextComponent.AccessibleAWTTextComponent.
getIndexAtPoint
(
Point
p)
Given a point in local coordinates, return the zero-based index
 of the character under that Point.
Point
Component.
getLocation
(
Point
rv)
Stores the x,y origin of this component into "return value"
rv
and return
rv
.
void
Component.AccessibleAWTComponent.
setLocation
(
Point
p)
Sets the location of the object relative to the parent.
void
Component.
setLocation
(
Point
p)
Moves this component to a new location.
void
List.AccessibleAWTList.AccessibleAWTListChild.
setLocation
(
Point
p)
Sets the location of the object relative to the parent.
void
MenuComponent.AccessibleAWTMenuComponent.
setLocation
(
Point
p)
Sets the location of the object relative to the parent.
void
Point.
setLocation
(
Point
p)
Sets the location of the point to the specified location.
void
Rectangle.
setLocation
(
Point
p)
Moves this
Rectangle
to the specified location.
void
Window.
setLocation
(
Point
p)
Moves this component to a new location.
void
ScrollPane.
setScrollPosition
(
Point
p)
Scrolls to the specified position within the child component.
Constructors in
java.awt
with parameters of type
Point
Modifier
Constructor
Description
Point
(
Point
p)
Constructs and initializes a point with the same location as
 the specified
Point
object.
Rectangle
(
Point
p)
Constructs a new
Rectangle
whose upper-left corner is the
 specified
Point
, and whose width and height are both zero.
Rectangle
(
Point
p,
Dimension
d)
Constructs a new
Rectangle
whose upper-left corner is
 specified by the
Point
argument, and
 whose width and height are specified by the
Dimension
argument.
Uses of
Point
in
java.awt.dnd
Methods in
java.awt.dnd
that return
Point
Modifier and Type
Method
Description
Point
DragGestureEvent.
getDragOrigin
()
Returns a
Point
in the coordinates
 of the
Component
over which the drag originated.
Point
DragSourceEvent.
getLocation
()
This method returns a
Point
indicating the cursor
 location in screen coordinates at the moment this event occurred, or
null
if the cursor location is not specified for this
 event.
Point
DropTargetDragEvent.
getLocation
()
This method returns a
Point
indicating the
Cursor
's current
 location within the
Component'
s
 coordinates.
Point
DropTargetDropEvent.
getLocation
()
This method returns a
Point
indicating the
Cursor
's current
 location in the
Component
's coordinates.
Methods in
java.awt.dnd
with parameters of type
Point
Modifier and Type
Method
Description
void
Autoscroll.
autoscroll
(
Point
cursorLocn)
notify the
Component
to autoscroll
protected
DragSourceContext
DragSource.
createDragSourceContext
(
DragGestureEvent
dgl,
Cursor
dragCursor,
Image
dragImage,
Point
imageOffset,
Transferable
t,
DragSourceListener
dsl)
Creates the
DragSourceContext
to handle the current drag
 operation.
protected
DropTarget.DropTargetAutoScroller
DropTarget.
createDropTargetAutoScroller
(
Component
c,
Point
p)
create an embedded autoscroller
protected void
DragGestureRecognizer.
fireDragGestureRecognized
(int dragAction,
Point
p)
Notify the DragGestureListener that a Drag and Drop initiating
 gesture has occurred.
protected void
DropTarget.
initializeAutoscrolling
(
Point
p)
initialize autoscrolling
void
DragGestureEvent.
startDrag
(
Cursor
dragCursor,
Image
dragImage,
Point
imageOffset,
Transferable
transferable,
DragSourceListener
dsl)
Start the drag given the initial
Cursor
to display,
 a drag
Image
, the offset of
 the
Image
,
 the
Transferable
object, and
 the
DragSourceListener
to use.
void
DragSource.
startDrag
(
DragGestureEvent
trigger,
Cursor
dragCursor,
Image
dragImage,
Point
dragOffset,
Transferable
transferable,
DragSourceListener
dsl)
Start a drag, given the
DragGestureEvent
that initiated the drag, the initial
Cursor
to use,
 the
Image
to drag,
 the offset of the
Image
origin
 from the hotspot of the
Cursor
at the instant of the trigger,
 the subject data of the drag, and
 the
DragSourceListener
.
void
DragSource.
startDrag
(
DragGestureEvent
trigger,
Cursor
dragCursor,
Image
dragImage,
Point
imageOffset,
Transferable
transferable,
DragSourceListener
dsl,
FlavorMap
flavorMap)
Start a drag, given the
DragGestureEvent
that initiated the drag, the initial
Cursor
to use,
 the
Image
to drag,
 the offset of the
Image
origin
 from the hotspot of the
Cursor
at
 the instant of the trigger,
 the
Transferable
subject data
 of the drag, the
DragSourceListener
,
 and the
FlavorMap
.
protected void
DropTarget.
updateAutoscroll
(
Point
dragCursorLocn)
update autoscrolling with current cursor location
protected void
DropTarget.DropTargetAutoScroller.
updateLocation
(
Point
newLocn)
cause autoscroll to occur
Constructors in
java.awt.dnd
with parameters of type
Point
Modifier
Constructor
Description
DragGestureEvent
(
DragGestureRecognizer
dgr,
 int act,
Point
ori,
List
<? extends
InputEvent
> evs)
Constructs a
DragGestureEvent
object given by the
DragGestureRecognizer
instance firing this event,
 an
act
parameter representing
 the user's preferred action, an
ori
parameter
 indicating the origin of the drag, and a
List
of
 events that comprise the gesture(
evs
parameter).
DragSourceContext
(
DragGestureEvent
trigger,
Cursor
dragCursor,
Image
dragImage,
Point
offset,
Transferable
t,
DragSourceListener
dsl)
Called from
DragSource
, this constructor creates a new
DragSourceContext
given the
DragSourceContextPeer
for this Drag, the
DragGestureEvent
that triggered the Drag, the initial
Cursor
to use for the Drag, an (optional)
Image
to display while the Drag is taking place, the offset
 of the
Image
origin from the hotspot at the instant of the
 triggering event, the
Transferable
subject data, and the
DragSourceListener
to use during the Drag and Drop
 operation.
protected
DropTargetAutoScroller
(
Component
c,
Point
p)
construct a DropTargetAutoScroller
DropTargetDragEvent
(
DropTargetContext
dtc,
Point
cursorLocn,
 int dropAction,
 int srcActions)
Construct a
DropTargetDragEvent
given the
DropTargetContext
for this operation,
 the location of the "Drag"
Cursor
's hotspot
 in the
Component
's coordinates, the
 user drop action, and the source drop actions.
DropTargetDropEvent
(
DropTargetContext
dtc,
Point
cursorLocn,
 int dropAction,
 int srcActions)
Construct a
DropTargetDropEvent
given
 the
DropTargetContext
for this operation,
 the location of the drag
Cursor
's
 hotspot in the
Component
's coordinates,
 the currently
 selected user drop action, and the current set of
 actions supported by the source.
DropTargetDropEvent
(
DropTargetContext
dtc,
Point
cursorLocn,
 int dropAction,
 int srcActions,
 boolean isLocal)
Construct a
DropTargetEvent
given the
DropTargetContext
for this operation,
 the location of the drag
Cursor
's hotspot
 in the
Component
's
 coordinates, the currently selected user drop action,
 the current set of actions supported by the source,
 and a
boolean
indicating if the source is in the same JVM
 as the target.
Uses of
Point
in
java.awt.event
Methods in
java.awt.event
that return
Point
Modifier and Type
Method
Description
Point
MouseEvent.
getLocationOnScreen
()
Returns the absolute x, y position of the event.
Point
MouseEvent.
getPoint
()
Returns the x,y position of the event relative to the source component.
Uses of
Point
in
java.awt.image
Methods in
java.awt.image
that return
Point
Modifier and Type
Method
Description
Point
[]
BufferedImage.
getWritableTileIndices
()
Returns an array of
Point
objects indicating which tiles
 are checked out for writing.
Point
[]
WritableRenderedImage.
getWritableTileIndices
()
Returns an array of Point objects indicating which tiles
 are checked out for writing.
Methods in
java.awt.image
with parameters of type
Point
Modifier and Type
Method
Description
static
WritableRaster
Raster.
createBandedRaster
(int dataType,
 int w,
 int h,
 int scanlineStride,
 int[] bankIndices,
 int[] bandOffsets,
Point
location)
Creates a Raster based on a BandedSampleModel with the
 specified data type, width, height, scanline stride, bank
 indices and band offsets.
static
WritableRaster
Raster.
createBandedRaster
(int dataType,
 int w,
 int h,
 int bands,
Point
location)
Creates a Raster based on a BandedSampleModel with the
 specified data type, width, height, and number of bands.
static
WritableRaster
Raster.
createBandedRaster
(
DataBuffer
dataBuffer,
 int w,
 int h,
 int scanlineStride,
 int[] bankIndices,
 int[] bandOffsets,
Point
location)
Creates a Raster based on a BandedSampleModel with the
 specified DataBuffer, width, height, scanline stride, bank
 indices, and band offsets.
static
WritableRaster
Raster.
createInterleavedRaster
(int dataType,
 int w,
 int h,
 int scanlineStride,
 int pixelStride,
 int[] bandOffsets,
Point
location)
Creates a Raster based on a PixelInterleavedSampleModel with the
 specified data type, width, height, scanline stride, pixel
 stride, and band offsets.
static
WritableRaster
Raster.
createInterleavedRaster
(int dataType,
 int w,
 int h,
 int bands,
Point
location)
Creates a Raster based on a PixelInterleavedSampleModel with the
 specified data type, width, height, and number of bands.
static
WritableRaster
Raster.
createInterleavedRaster
(
DataBuffer
dataBuffer,
 int w,
 int h,
 int scanlineStride,
 int pixelStride,
 int[] bandOffsets,
Point
location)
Creates a Raster based on a PixelInterleavedSampleModel with the
 specified DataBuffer, width, height, scanline stride, pixel
 stride, and band offsets.
static
WritableRaster
Raster.
createPackedRaster
(int dataType,
 int w,
 int h,
 int[] bandMasks,
Point
location)
Creates a Raster based on a SinglePixelPackedSampleModel with
 the specified data type, width, height, and band masks.
static
WritableRaster
Raster.
createPackedRaster
(int dataType,
 int w,
 int h,
 int bands,
 int bitsPerBand,
Point
location)
Creates a Raster based on a packed SampleModel with the
 specified data type, width, height, number of bands, and bits
 per band.
static
WritableRaster
Raster.
createPackedRaster
(
DataBuffer
dataBuffer,
 int w,
 int h,
 int scanlineStride,
 int[] bandMasks,
Point
location)
Creates a Raster based on a SinglePixelPackedSampleModel with
 the specified DataBuffer, width, height, scanline stride, and
 band masks.
static
WritableRaster
Raster.
createPackedRaster
(
DataBuffer
dataBuffer,
 int w,
 int h,
 int bitsPerPixel,
Point
location)
Creates a Raster based on a MultiPixelPackedSampleModel with the
 specified DataBuffer, width, height, and bits per pixel.
static
Raster
Raster.
createRaster
(
SampleModel
sm,
DataBuffer
db,
Point
location)
Creates a Raster with the specified SampleModel and DataBuffer.
static
WritableRaster
Raster.
createWritableRaster
(
SampleModel
sm,
DataBuffer
db,
Point
location)
Creates a WritableRaster with the specified SampleModel and DataBuffer.
static
WritableRaster
Raster.
createWritableRaster
(
SampleModel
sm,
Point
location)
Creates a WritableRaster with the specified SampleModel.
Constructors in
java.awt.image
with parameters of type
Point
Modifier
Constructor
Description
protected
Raster
(
SampleModel
sampleModel,
DataBuffer
dataBuffer,
Point
origin)
Constructs a Raster with the given SampleModel and DataBuffer.
protected
Raster
(
SampleModel
sampleModel,
DataBuffer
dataBuffer,
Rectangle
aRegion,
Point
sampleModelTranslate,
Raster
parent)
Constructs a Raster with the given SampleModel, DataBuffer, and
 parent.
protected
Raster
(
SampleModel
sampleModel,
Point
origin)
Constructs a Raster with the given SampleModel.
protected
WritableRaster
(
SampleModel
sampleModel,
DataBuffer
dataBuffer,
Point
origin)
Constructs a WritableRaster with the given SampleModel and DataBuffer.
protected
WritableRaster
(
SampleModel
sampleModel,
DataBuffer
dataBuffer,
Rectangle
aRegion,
Point
sampleModelTranslate,
WritableRaster
parent)
Constructs a WritableRaster with the given SampleModel, DataBuffer,
 and parent.
protected
WritableRaster
(
SampleModel
sampleModel,
Point
origin)
Constructs a WritableRaster with the given SampleModel.
Uses of
Point
in
javax.accessibility
Methods in
javax.accessibility
that return
Point
Modifier and Type
Method
Description
Point
AccessibleComponent.
getLocation
()
Gets the location of the object relative to the parent in the form of a
 point specifying the object's top-left corner in the screen's coordinate
 space.
Point
AccessibleComponent.
getLocationOnScreen
()
Returns the location of the object on the screen.
Methods in
javax.accessibility
with parameters of type
Point
Modifier and Type
Method
Description
boolean
AccessibleComponent.
contains
(
Point
p)
Checks whether the specified point is within this object's bounds, where
 the point's x and y coordinates are defined to be relative to the
 coordinate system of the object.
Accessible
AccessibleComponent.
getAccessibleAt
(
Point
p)
Returns the
Accessible
child, if one exists, contained at the
 local coordinate
Point
.
int
AccessibleText.
getIndexAtPoint
(
Point
p)
Given a point in local coordinates, return the zero-based index of the
 character under that point.
void
AccessibleComponent.
setLocation
(
Point
p)
Sets the location of the object relative to the parent.
Uses of
Point
in
javax.imageio
Fields in
javax.imageio
declared as
Point
Modifier and Type
Field
Description
protected
Point
IIOParam.
destinationOffset
The offset in the destination where the upper-left decoded
 pixel should be placed.
Methods in
javax.imageio
that return
Point
Modifier and Type
Method
Description
Point
IIOParam.
getDestinationOffset
()
Returns the offset in the destination image at which pixels are
 to be placed.
Methods in
javax.imageio
with parameters of type
Point
Modifier and Type
Method
Description
void
IIOParam.
setDestinationOffset
(
Point
destinationOffset)
Specifies the offset in the destination image at which future
 decoded pixels are to be placed, when reading, or where a
 region will be written, when writing.
Uses of
Point
in
javax.swing
Fields in
javax.swing
declared as
Point
Modifier and Type
Field
Description
protected
Point
JViewport.
lastPaintPosition
The last
viewPosition
that we've painted, so we know how
 much of the backing store image is valid.
Methods in
javax.swing
that return
Point
Modifier and Type
Method
Description
static
Point
SwingUtilities.
convertPoint
(
Component
source,
 int x,
 int y,
Component
destination)
Convert the point
(x,y)
in
source
coordinate system to
destination
coordinate system.
static
Point
SwingUtilities.
convertPoint
(
Component
source,
Point
aPoint,
Component
destination)
Convert a
aPoint
in
source
coordinate system to
destination
coordinate system.
Point
TransferHandler.
getDragImageOffset
()
Returns an anchor offset for the image to drag.
final
Point
TransferHandler.DropLocation.
getDropPoint
()
Returns the drop point, representing the mouse's
 current location within the component.
Point
JComponent.
getLocation
(
Point
rv)
Stores the x,y origin of this component into "return value"
rv
and returns
rv
.
Point
JList.AccessibleJList.AccessibleJListChild.
getLocation
()
Point
JTable.AccessibleJTable.AccessibleJTableCell.
getLocation
()
Gets the location of the object relative to the parent
 in the form of a point specifying the object's
 top-left corner in the screen's coordinate space.
Point
JTree.AccessibleJTree.AccessibleJTreeNode.
getLocation
()
protected
Point
JTree.AccessibleJTree.AccessibleJTreeNode.
getLocationInJTree
()
Returns the relative location of the node
Point
JList.AccessibleJList.AccessibleJListChild.
getLocationOnScreen
()
Point
JTable.AccessibleJTable.AccessibleJTableCell.
getLocationOnScreen
()
Returns the location of the object on the screen.
Point
JTree.AccessibleJTree.AccessibleJTreeNode.
getLocationOnScreen
()
Point
JComponent.
getPopupLocation
(
MouseEvent
event)
Returns the preferred location to display the popup menu in this
 component's coordinate system.
protected
Point
JMenu.
getPopupMenuOrigin
()
Computes the origin for the
JMenu
's popup menu.
Point
JComponent.
getToolTipLocation
(
MouseEvent
event)
Returns the tooltip location in this component's coordinate system.
Point
JViewport.
getViewPosition
()
Returns the view coordinates that appear in the upper left
 hand corner of the viewport, or 0,0 if there's no view.
Point
JList.
indexToLocation
(int index)
Returns the origin of the specified item in the list's coordinate
 system.
Point
JViewport.
toViewCoordinates
(
Point
p)
Converts a point in pixel coordinates to view coordinates.
Methods in
javax.swing
with parameters of type
Point
Modifier and Type
Method
Description
int
JTable.
columnAtPoint
(
Point
point)
Returns the index of the column that
point
lies in,
 or -1 if the result is not in the range
 [0,
getColumnCount()
-1].
Component
MenuSelectionManager.
componentForPoint
(
Component
source,
Point
sourcePoint)
Returns the component in the currently selected path
 which contains sourcePoint.
protected boolean
JViewport.
computeBlit
(int dx,
 int dy,
Point
blitFrom,
Point
blitTo,
Dimension
blitSize,
Rectangle
blitPaint)
Computes the parameters for a blit where the backing store image
 currently contains
oldLoc
in the upper left hand corner
 and we're scrolling to
newLoc
.
boolean
JList.AccessibleJList.AccessibleJListChild.
contains
(
Point
p)
boolean
JTable.AccessibleJTable.AccessibleJTableCell.
contains
(
Point
p)
Checks whether the specified point is within this
 object's bounds, where the point's x and y coordinates
 are defined to be relative to the coordinate system of
 the object.
boolean
JTree.AccessibleJTree.AccessibleJTreeNode.
contains
(
Point
p)
static
Point
SwingUtilities.
convertPoint
(
Component
source,
Point
aPoint,
Component
destination)
Convert a
aPoint
in
source
coordinate system to
destination
coordinate system.
static void
SwingUtilities.
convertPointFromScreen
(
Point
p,
Component
c)
Convert a point from a screen coordinates to a component's
 coordinate system
static void
SwingUtilities.
convertPointToScreen
(
Point
p,
Component
c)
Convert a point from a component's coordinate system to
 screen coordinates.
Accessible
JEditorPane.AccessibleJEditorPaneHTML.
getAccessibleAt
(
Point
p)
Returns the Accessible child, if one exists, contained at the local
 coordinate Point.
Accessible
JList.AccessibleJList.AccessibleJListChild.
getAccessibleAt
(
Point
p)
Accessible
JList.AccessibleJList.
getAccessibleAt
(
Point
p)
Returns the
Accessible
child contained at
 the local coordinate
Point
, if one exists.
Accessible
JTabbedPane.AccessibleJTabbedPane.
getAccessibleAt
(
Point
p)
Returns the
Accessible
child contained at
 the local coordinate
Point
, if one exists.
Accessible
JTable.AccessibleJTable.AccessibleJTableCell.
getAccessibleAt
(
Point
p)
Accessible
JTable.AccessibleJTable.
getAccessibleAt
(
Point
p)
Returns the
Accessible
child, if one exists,
 contained at the local coordinate
Point
.
Accessible
JTree.AccessibleJTree.AccessibleJTreeNode.
getAccessibleAt
(
Point
p)
Returns the
Accessible
child, if one exists,
 contained at the local coordinate
Point
.
Accessible
JTree.AccessibleJTree.
getAccessibleAt
(
Point
p)
Returns the
Accessible
child, if one exists,
 contained at the local coordinate
Point
.
static
Accessible
SwingUtilities.
getAccessibleAt
(
Component
c,
Point
p)
Returns the
Accessible
child contained at the
 local coordinate
Point
, if one exists.
int
AbstractButton.AccessibleAbstractButton.
getIndexAtPoint
(
Point
p)
Given a point in local coordinates, return the zero-based index
 of the character under that Point.
int
JLabel.AccessibleJLabel.
getIndexAtPoint
(
Point
p)
Given a point in local coordinates, return the zero-based index
 of the character under that Point.
int
JSpinner.AccessibleJSpinner.
getIndexAtPoint
(
Point
p)
Given a point in local coordinates, return the zero-based index
 of the character under that Point.
int
ProgressMonitor.AccessibleProgressMonitor.
getIndexAtPoint
(
Point
p)
Given a point in local coordinates, return the zero-based index
 of the character under that Point.
Point
JComponent.
getLocation
(
Point
rv)
Stores the x,y origin of this component into "return value"
rv
and returns
rv
.
int
JList.
locationToIndex
(
Point
location)
Returns the cell index closest to the given location in the list's
 coordinate system.
int
JTable.
rowAtPoint
(
Point
point)
Returns the index of the row that
point
lies in,
 or -1 if the result is not in the range
 [0,
getRowCount()
-1].
void
TransferHandler.
setDragImageOffset
(
Point
p)
Sets an anchor offset for the image to drag.
void
JList.AccessibleJList.AccessibleJListChild.
setLocation
(
Point
p)
void
JTable.AccessibleJTable.AccessibleJTableCell.
setLocation
(
Point
p)
Sets the location of the object relative to the parent.
void
JTree.AccessibleJTree.AccessibleJTreeNode.
setLocation
(
Point
p)
void
JViewport.
setViewPosition
(
Point
p)
Sets the view coordinates that appear in the upper left
 hand corner of the viewport, does nothing if there's no view.
Point
JViewport.
toViewCoordinates
(
Point
p)
Converts a point in pixel coordinates to view coordinates.
Constructors in
javax.swing
with parameters of type
Point
Modifier
Constructor
Description
protected
DropLocation
(
Point
dropPoint)
Constructs a drop location for the given point.
Uses of
Point
in
javax.swing.plaf
Methods in
javax.swing.plaf
that return
Point
Modifier and Type
Method
Description
abstract
Point
ListUI.
indexToLocation
(
JList
<?> list,
 int index)
Returns the origin in the given
JList
, of the specified item,
 in the list's coordinate system.
Methods in
javax.swing.plaf
with parameters of type
Point
Modifier and Type
Method
Description
String
TextUI.
getToolTipText
(
JTextComponent
t,
Point
pt)
Deprecated.
replaced by
TextUI.getToolTipText2D(JTextComponent, Point2D)
abstract int
ListUI.
locationToIndex
(
JList
<?> list,
Point
location)
Returns the cell index in the specified
JList
closest to the
 given location in the list's coordinate system.
abstract int
TextUI.
viewToModel
(
JTextComponent
t,
Point
pt)
Deprecated.
replaced by
TextUI.viewToModel2D(JTextComponent, Point2D, Position.Bias[])
abstract int
TextUI.
viewToModel
(
JTextComponent
t,
Point
pt,
Position.Bias
[] biasReturn)
Deprecated.
replaced by
TextUI.viewToModel2D(JTextComponent, Point2D, Position.Bias[])
Uses of
Point
in
javax.swing.plaf.basic
Fields in
javax.swing.plaf.basic
declared as
Point
Modifier and Type
Field
Description
protected
Point
BasicToolBarUI.DockingListener.
origin
The origin point.
Methods in
javax.swing.plaf.basic
that return
Point
Modifier and Type
Method
Description
Point
BasicToolBarUI.DragWindow.
getOffset
()
Returns the offset.
protected
Point
BasicProgressBarUI.
getStringPlacement
(
Graphics
g,
String
progressString,
 int x,
 int y,
 int width,
 int height)
Designate the place where the progress string will be painted.
Point
BasicListUI.
indexToLocation
(
JList
<?> list,
 int index)
Returns the origin in the given
JList
, of the specified item,
 in the list's coordinate system.
Methods in
javax.swing.plaf.basic
with parameters of type
Point
Modifier and Type
Method
Description
boolean
BasicToolBarUI.
canDock
(
Component
c,
Point
p)
Returns
true
if the
JToolBar
can dock at the given position.
protected void
BasicToolBarUI.
dragTo
(
Point
position,
Point
origin)
The method is used to drag
DragWindow
during the
JToolBar
is being dragged.
protected void
BasicToolBarUI.
floatAt
(
Point
position,
Point
origin)
The method is called at end of dragging to place the frame in either
 its original place or in its floating frame.
String
BasicTextUI.
getToolTipText
(
JTextComponent
t,
Point
pt)
Returns the string to be used as the tooltip at the passed in location.
int
BasicListUI.
locationToIndex
(
JList
<?> list,
Point
location)
Returns the cell index in the specified
JList
closest to the
 given location in the list's coordinate system.
void
BasicToolBarUI.
setFloating
(boolean b,
Point
p)
Sets the floating property.
void
BasicToolBarUI.DragWindow.
setOffset
(
Point
p)
Sets the offset.
int
BasicTextUI.
viewToModel
(
JTextComponent
tc,
Point
pt)
Deprecated.
replaced by
TextUI.viewToModel2D(JTextComponent, Point2D, Position.Bias[])
int
BasicTextUI.
viewToModel
(
JTextComponent
tc,
Point
pt,
Position.Bias
[] biasReturn)
Deprecated.
replaced by
TextUI.viewToModel2D(JTextComponent, Point2D, Position.Bias[])
Uses of
Point
in
javax.swing.plaf.metal
Methods in
javax.swing.plaf.metal
with parameters of type
Point
Modifier and Type
Method
Description
protected void
MetalToolBarUI.
setDragOffset
(
Point
p)
Sets the offset of the mouse cursor inside the DragWindow.
Uses of
Point
in
javax.swing.plaf.multi
Methods in
javax.swing.plaf.multi
that return
Point
Modifier and Type
Method
Description
Point
MultiListUI.
indexToLocation
(
JList
<?> a,
 int b)
Invokes the
indexToLocation
method on each UI handled by this object.
Methods in
javax.swing.plaf.multi
with parameters of type
Point
Modifier and Type
Method
Description
String
MultiTextUI.
getToolTipText
(
JTextComponent
a,
Point
b)
Invokes the
getToolTipText
method on each UI handled by this object.
int
MultiListUI.
locationToIndex
(
JList
<?> a,
Point
b)
Invokes the
locationToIndex
method on each UI handled by this object.
int
MultiTextUI.
viewToModel
(
JTextComponent
a,
Point
b)
Deprecated.
int
MultiTextUI.
viewToModel
(
JTextComponent
a,
Point
b,
Position.Bias
[] c)
Deprecated.
Uses of
Point
in
javax.swing.table
Methods in
javax.swing.table
that return
Point
Modifier and Type
Method
Description
Point
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry.
getLocation
()
Point
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry.
getLocationOnScreen
()
Methods in
javax.swing.table
with parameters of type
Point
Modifier and Type
Method
Description
int
JTableHeader.
columnAtPoint
(
Point
point)
Returns the index of the column that
point
lies in, or -1 if it
 lies out of bounds.
boolean
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry.
contains
(
Point
p)
Accessible
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry.
getAccessibleAt
(
Point
p)
Accessible
JTableHeader.AccessibleJTableHeader.
getAccessibleAt
(
Point
p)
Returns the Accessible child, if one exists, contained at the local
 coordinate Point.
void
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry.
setLocation
(
Point
p)
Uses of
Point
in
javax.swing.text
Methods in
javax.swing.text
that return
Point
Modifier and Type
Method
Description
Point
Caret.
getMagicCaretPosition
()
Gets the current caret visual location.
Point
DefaultCaret.
getMagicCaretPosition
()
Gets the saved caret position.
Methods in
javax.swing.text
with parameters of type
Point
Modifier and Type
Method
Description
int
JTextComponent.AccessibleJTextComponent.
getIndexAtPoint
(
Point
p)
Given a point in local coordinates, return the zero-based index
 of the character under that Point.
void
Caret.
setMagicCaretPosition
(
Point
p)
Set the current caret visual location.
void
DefaultCaret.
setMagicCaretPosition
(
Point
p)
Saves the current caret position.
int
JTextComponent.
viewToModel
(
Point
pt)
Deprecated.
replaced by
JTextComponent.viewToModel2D(Point2D)
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.