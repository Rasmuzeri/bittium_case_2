Line2D (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested
|
Field |
Constr
|
Method
Detail:
Field |
Constr
|
Method
SEARCH
Module
java.desktop
Package
java.awt.geom
Class Line2D
java.lang.Object
java.awt.geom.Line2D
All Implemented Interfaces:
Shape
,
Cloneable
Direct Known Subclasses:
Line2D.Double
,
Line2D.Float
public abstract class
Line2D
extends
Object
implements
Shape
,
Cloneable
This
Line2D
represents a line segment in
(x,y)
coordinate space.
This class is only the abstract superclass for all objects that
 store a 2D line segment.
 The actual storage representation of the coordinates is left to
 the subclass.
Since:
1.2
Nested Class Summary
Nested Classes
Modifier and Type
Class
Description
static class
Line2D.Double
A line segment specified with double coordinates.
static class
Line2D.Float
A line segment specified with float coordinates.
Constructor Summary
Constructors
Modifier
Constructor
Description
protected
Line2D
()
This is an abstract class that cannot be instantiated directly.
Method Summary
All Methods
Static Methods
Instance Methods
Abstract Methods
Concrete Methods
Modifier and Type
Method
Description
Object
clone
()
Creates a new object of the same class as this object.
boolean
contains
(double x,
 double y)
Tests if a specified coordinate is inside the boundary of this
Line2D
.
boolean
contains
(double x,
 double y,
 double w,
 double h)
Tests if the interior of this
Line2D
entirely contains
 the specified set of rectangular coordinates.
boolean
contains
(
Point2D
p)
Tests if a given
Point2D
is inside the boundary of
 this
Line2D
.
boolean
contains
(
Rectangle2D
r)
Tests if the interior of this
Line2D
entirely contains
 the specified
Rectangle2D
.
Rectangle
getBounds
()
Returns an integer
Rectangle
that completely encloses the
Shape
.
abstract
Point2D
getP1
()
Returns the start
Point2D
of this
Line2D
.
abstract
Point2D
getP2
()
Returns the end
Point2D
of this
Line2D
.
PathIterator
getPathIterator
(
AffineTransform
at)
Returns an iteration object that defines the boundary of this
Line2D
.
PathIterator
getPathIterator
(
AffineTransform
at,
 double flatness)
Returns an iteration object that defines the boundary of this
 flattened
Line2D
.
abstract double
getX1
()
Returns the X coordinate of the start point in double precision.
abstract double
getX2
()
Returns the X coordinate of the end point in double precision.
abstract double
getY1
()
Returns the Y coordinate of the start point in double precision.
abstract double
getY2
()
Returns the Y coordinate of the end point in double precision.
boolean
intersects
(double x,
 double y,
 double w,
 double h)
Tests if the interior of the
Shape
intersects the
 interior of a specified rectangular area.
boolean
intersects
(
Rectangle2D
r)
Tests if the interior of the
Shape
intersects the
 interior of a specified
Rectangle2D
.
boolean
intersectsLine
(double x1,
 double y1,
 double x2,
 double y2)
Tests if the line segment from
(x1,y1)
to
(x2,y2)
intersects this line segment.
boolean
intersectsLine
(
Line2D
l)
Tests if the specified line segment intersects this line segment.
static boolean
linesIntersect
(double x1,
 double y1,
 double x2,
 double y2,
 double x3,
 double y3,
 double x4,
 double y4)
Tests if the line segment from
(x1,y1)
to
(x2,y2)
intersects the line segment from
(x3,y3)
to
(x4,y4)
.
double
ptLineDist
(double px,
 double py)
Returns the distance from a point to this line.
static double
ptLineDist
(double x1,
 double y1,
 double x2,
 double y2,
 double px,
 double py)
Returns the distance from a point to a line.
double
ptLineDist
(
Point2D
pt)
Returns the distance from a
Point2D
to this line.
double
ptLineDistSq
(double px,
 double py)
Returns the square of the distance from a point to this line.
static double
ptLineDistSq
(double x1,
 double y1,
 double x2,
 double y2,
 double px,
 double py)
Returns the square of the distance from a point to a line.
double
ptLineDistSq
(
Point2D
pt)
Returns the square of the distance from a specified
Point2D
to this line.
double
ptSegDist
(double px,
 double py)
Returns the distance from a point to this line segment.
static double
ptSegDist
(double x1,
 double y1,
 double x2,
 double y2,
 double px,
 double py)
Returns the distance from a point to a line segment.
double
ptSegDist
(
Point2D
pt)
Returns the distance from a
Point2D
to this line
 segment.
double
ptSegDistSq
(double px,
 double py)
Returns the square of the distance from a point to this line segment.
static double
ptSegDistSq
(double x1,
 double y1,
 double x2,
 double y2,
 double px,
 double py)
Returns the square of the distance from a point to a line segment.
double
ptSegDistSq
(
Point2D
pt)
Returns the square of the distance from a
Point2D
to
 this line segment.
int
relativeCCW
(double px,
 double py)
Returns an indicator of where the specified point
(px,py)
lies with respect to this line segment.
static int
relativeCCW
(double x1,
 double y1,
 double x2,
 double y2,
 double px,
 double py)
Returns an indicator of where the specified point
(px,py)
lies with respect to the line segment from
(x1,y1)
to
(x2,y2)
.
int
relativeCCW
(
Point2D
p)
Returns an indicator of where the specified
Point2D
lies with respect to this line segment.
abstract void
setLine
(double x1,
 double y1,
 double x2,
 double y2)
Sets the location of the end points of this
Line2D
to
 the specified double coordinates.
void
setLine
(
Line2D
l)
Sets the location of the end points of this
Line2D
to
 the same as those end points of the specified
Line2D
.
void
setLine
(
Point2D
p1,
Point2D
p2)
Sets the location of the end points of this
Line2D
to
 the specified
Point2D
coordinates.
Methods declared in class java.lang.
Object
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Methods declared in interface java.awt.
Shape
getBounds2D
Constructor Details
Line2D
protected
Line2D
()
This is an abstract class that cannot be instantiated directly.
 Type-specific implementation subclasses are available for
 instantiation and provide a number of formats for storing
 the information necessary to satisfy the various accessory
 methods below.
Since:
1.2
See Also:
Line2D.Float
Line2D.Double
Method Details
getX1
public abstract
double
getX1
()
Returns the X coordinate of the start point in double precision.
Returns:
the X coordinate of the start point of this
Line2D
object.
Since:
1.2
getY1
public abstract
double
getY1
()
Returns the Y coordinate of the start point in double precision.
Returns:
the Y coordinate of the start point of this
Line2D
object.
Since:
1.2
getP1
public abstract
Point2D
getP1
()
Returns the start
Point2D
of this
Line2D
.
Returns:
the start
Point2D
of this
Line2D
.
Since:
1.2
getX2
public abstract
double
getX2
()
Returns the X coordinate of the end point in double precision.
Returns:
the X coordinate of the end point of this
Line2D
object.
Since:
1.2
getY2
public abstract
double
getY2
()
Returns the Y coordinate of the end point in double precision.
Returns:
the Y coordinate of the end point of this
Line2D
object.
Since:
1.2
getP2
public abstract
Point2D
getP2
()
Returns the end
Point2D
of this
Line2D
.
Returns:
the end
Point2D
of this
Line2D
.
Since:
1.2
setLine
public abstract
void
setLine
(double x1,
 double y1,
 double x2,
 double y2)
Sets the location of the end points of this
Line2D
to
 the specified double coordinates.
Parameters:
x1
- the X coordinate of the start point
y1
- the Y coordinate of the start point
x2
- the X coordinate of the end point
y2
- the Y coordinate of the end point
Since:
1.2
setLine
public
void
setLine
(
Point2D
p1,
Point2D
p2)
Sets the location of the end points of this
Line2D
to
 the specified
Point2D
coordinates.
Parameters:
p1
- the start
Point2D
of the line segment
p2
- the end
Point2D
of the line segment
Since:
1.2
setLine
public
void
setLine
(
Line2D
l)
Sets the location of the end points of this
Line2D
to
 the same as those end points of the specified
Line2D
.
Parameters:
l
- the specified
Line2D
Since:
1.2
relativeCCW
public static
int
relativeCCW
(double x1,
 double y1,
 double x2,
 double y2,
 double px,
 double py)
Returns an indicator of where the specified point
(px,py)
lies with respect to the line segment from
(x1,y1)
to
(x2,y2)
.
 The return value can be either 1, -1, or 0 and indicates
 in which direction the specified line must pivot around its
 first end point,
(x1,y1)
, in order to point at the
 specified point
(px,py)
.
A return value of 1 indicates that the line segment must
 turn in the direction that takes the positive X axis towards
 the negative Y axis.  In the default coordinate system used by
 Java 2D, this direction is counterclockwise.
A return value of -1 indicates that the line segment must
 turn in the direction that takes the positive X axis towards
 the positive Y axis.  In the default coordinate system, this
 direction is clockwise.
A return value of 0 indicates that the point lies
 exactly on the line segment.  Note that an indicator value
 of 0 is rare and not useful for determining collinearity
 because of floating point rounding issues.
If the point is colinear with the line segment, but
 not between the end points, then the value will be -1 if the point
 lies "beyond
(x1,y1)
" or 1 if the point lies
 "beyond
(x2,y2)
".
Parameters:
x1
- the X coordinate of the start point of the
           specified line segment
y1
- the Y coordinate of the start point of the
           specified line segment
x2
- the X coordinate of the end point of the
           specified line segment
y2
- the Y coordinate of the end point of the
           specified line segment
px
- the X coordinate of the specified point to be
           compared with the specified line segment
py
- the Y coordinate of the specified point to be
           compared with the specified line segment
Returns:
an integer that indicates the position of the third specified
                  coordinates with respect to the line segment formed
                  by the first two specified coordinates.
Since:
1.2
relativeCCW
public
int
relativeCCW
(double px,
 double py)
Returns an indicator of where the specified point
(px,py)
lies with respect to this line segment.
 See the method comments of
relativeCCW(double, double, double, double, double, double)
to interpret the return value.
Parameters:
px
- the X coordinate of the specified point
           to be compared with this
Line2D
py
- the Y coordinate of the specified point
           to be compared with this
Line2D
Returns:
an integer that indicates the position of the specified
         coordinates with respect to this
Line2D
Since:
1.2
See Also:
relativeCCW(double, double, double, double, double, double)
relativeCCW
public
int
relativeCCW
(
Point2D
p)
Returns an indicator of where the specified
Point2D
lies with respect to this line segment.
 See the method comments of
relativeCCW(double, double, double, double, double, double)
to interpret the return value.
Parameters:
p
- the specified
Point2D
to be compared
          with this
Line2D
Returns:
an integer that indicates the position of the specified
Point2D
with respect to this
Line2D
Since:
1.2
See Also:
relativeCCW(double, double, double, double, double, double)
linesIntersect
public static
boolean
linesIntersect
(double x1,
 double y1,
 double x2,
 double y2,
 double x3,
 double y3,
 double x4,
 double y4)
Tests if the line segment from
(x1,y1)
to
(x2,y2)
intersects the line segment from
(x3,y3)
to
(x4,y4)
.
Parameters:
x1
- the X coordinate of the start point of the first
           specified line segment
y1
- the Y coordinate of the start point of the first
           specified line segment
x2
- the X coordinate of the end point of the first
           specified line segment
y2
- the Y coordinate of the end point of the first
           specified line segment
x3
- the X coordinate of the start point of the second
           specified line segment
y3
- the Y coordinate of the start point of the second
           specified line segment
x4
- the X coordinate of the end point of the second
           specified line segment
y4
- the Y coordinate of the end point of the second
           specified line segment
Returns:
true
if the first specified line segment
                  and the second specified line segment intersect
                  each other;
false
otherwise.
Since:
1.2
intersectsLine
public
boolean
intersectsLine
(double x1,
 double y1,
 double x2,
 double y2)
Tests if the line segment from
(x1,y1)
to
(x2,y2)
intersects this line segment.
Parameters:
x1
- the X coordinate of the start point of the
           specified line segment
y1
- the Y coordinate of the start point of the
           specified line segment
x2
- the X coordinate of the end point of the
           specified line segment
y2
- the Y coordinate of the end point of the
           specified line segment
Returns:
true
if this line segment and the specified line segment
                  intersect each other;
false
otherwise.
Since:
1.2
intersectsLine
public
boolean
intersectsLine
(
Line2D
l)
Tests if the specified line segment intersects this line segment.
Parameters:
l
- the specified
Line2D
Returns:
true
if this line segment and the specified line
                  segment intersect each other;
false
otherwise.
Since:
1.2
ptSegDistSq
public static
double
ptSegDistSq
(double x1,
 double y1,
 double x2,
 double y2,
 double px,
 double py)
Returns the square of the distance from a point to a line segment.
 The distance measured is the distance between the specified
 point and the closest point between the specified end points.
 If the specified point intersects the line segment in between the
 end points, this method returns 0.0.
Parameters:
x1
- the X coordinate of the start point of the
           specified line segment
y1
- the Y coordinate of the start point of the
           specified line segment
x2
- the X coordinate of the end point of the
           specified line segment
y2
- the Y coordinate of the end point of the
           specified line segment
px
- the X coordinate of the specified point being
           measured against the specified line segment
py
- the Y coordinate of the specified point being
           measured against the specified line segment
Returns:
a double value that is the square of the distance from the
                  specified point to the specified line segment.
Since:
1.2
See Also:
ptLineDistSq(double, double, double, double, double, double)
ptSegDist
public static
double
ptSegDist
(double x1,
 double y1,
 double x2,
 double y2,
 double px,
 double py)
Returns the distance from a point to a line segment.
 The distance measured is the distance between the specified
 point and the closest point between the specified end points.
 If the specified point intersects the line segment in between the
 end points, this method returns 0.0.
Parameters:
x1
- the X coordinate of the start point of the
           specified line segment
y1
- the Y coordinate of the start point of the
           specified line segment
x2
- the X coordinate of the end point of the
           specified line segment
y2
- the Y coordinate of the end point of the
           specified line segment
px
- the X coordinate of the specified point being
           measured against the specified line segment
py
- the Y coordinate of the specified point being
           measured against the specified line segment
Returns:
a double value that is the distance from the specified point
                          to the specified line segment.
Since:
1.2
See Also:
ptLineDist(double, double, double, double, double, double)
ptSegDistSq
public
double
ptSegDistSq
(double px,
 double py)
Returns the square of the distance from a point to this line segment.
 The distance measured is the distance between the specified
 point and the closest point between the current line's end points.
 If the specified point intersects the line segment in between the
 end points, this method returns 0.0.
Parameters:
px
- the X coordinate of the specified point being
           measured against this line segment
py
- the Y coordinate of the specified point being
           measured against this line segment
Returns:
a double value that is the square of the distance from the
                  specified point to the current line segment.
Since:
1.2
See Also:
ptLineDistSq(double, double)
ptSegDistSq
public
double
ptSegDistSq
(
Point2D
pt)
Returns the square of the distance from a
Point2D
to
 this line segment.
 The distance measured is the distance between the specified
 point and the closest point between the current line's end points.
 If the specified point intersects the line segment in between the
 end points, this method returns 0.0.
Parameters:
pt
- the specified
Point2D
being measured against
           this line segment.
Returns:
a double value that is the square of the distance from the
                  specified
Point2D
to the current
                  line segment.
Since:
1.2
See Also:
ptLineDistSq(Point2D)
ptSegDist
public
double
ptSegDist
(double px,
 double py)
Returns the distance from a point to this line segment.
 The distance measured is the distance between the specified
 point and the closest point between the current line's end points.
 If the specified point intersects the line segment in between the
 end points, this method returns 0.0.
Parameters:
px
- the X coordinate of the specified point being
           measured against this line segment
py
- the Y coordinate of the specified point being
           measured against this line segment
Returns:
a double value that is the distance from the specified
                  point to the current line segment.
Since:
1.2
See Also:
ptLineDist(double, double)
ptSegDist
public
double
ptSegDist
(
Point2D
pt)
Returns the distance from a
Point2D
to this line
 segment.
 The distance measured is the distance between the specified
 point and the closest point between the current line's end points.
 If the specified point intersects the line segment in between the
 end points, this method returns 0.0.
Parameters:
pt
- the specified
Point2D
being measured
          against this line segment
Returns:
a double value that is the distance from the specified
Point2D
to the current line
                          segment.
Since:
1.2
See Also:
ptLineDist(Point2D)
ptLineDistSq
public static
double
ptLineDistSq
(double x1,
 double y1,
 double x2,
 double y2,
 double px,
 double py)
Returns the square of the distance from a point to a line.
 The distance measured is the distance between the specified
 point and the closest point on the infinitely-extended line
 defined by the specified coordinates.  If the specified point
 intersects the line, this method returns 0.0.
Parameters:
x1
- the X coordinate of the start point of the specified line
y1
- the Y coordinate of the start point of the specified line
x2
- the X coordinate of the end point of the specified line
y2
- the Y coordinate of the end point of the specified line
px
- the X coordinate of the specified point being
           measured against the specified line
py
- the Y coordinate of the specified point being
           measured against the specified line
Returns:
a double value that is the square of the distance from the
                  specified point to the specified line.
Since:
1.2
See Also:
ptSegDistSq(double, double, double, double, double, double)
ptLineDist
public static
double
ptLineDist
(double x1,
 double y1,
 double x2,
 double y2,
 double px,
 double py)
Returns the distance from a point to a line.
 The distance measured is the distance between the specified
 point and the closest point on the infinitely-extended line
 defined by the specified coordinates.  If the specified point
 intersects the line, this method returns 0.0.
Parameters:
x1
- the X coordinate of the start point of the specified line
y1
- the Y coordinate of the start point of the specified line
x2
- the X coordinate of the end point of the specified line
y2
- the Y coordinate of the end point of the specified line
px
- the X coordinate of the specified point being
           measured against the specified line
py
- the Y coordinate of the specified point being
           measured against the specified line
Returns:
a double value that is the distance from the specified
                   point to the specified line.
Since:
1.2
See Also:
ptSegDist(double, double, double, double, double, double)
ptLineDistSq
public
double
ptLineDistSq
(double px,
 double py)
Returns the square of the distance from a point to this line.
 The distance measured is the distance between the specified
 point and the closest point on the infinitely-extended line
 defined by this
Line2D
.  If the specified point
 intersects the line, this method returns 0.0.
Parameters:
px
- the X coordinate of the specified point being
           measured against this line
py
- the Y coordinate of the specified point being
           measured against this line
Returns:
a double value that is the square of the distance from a
                  specified point to the current line.
Since:
1.2
See Also:
ptSegDistSq(double, double)
ptLineDistSq
public
double
ptLineDistSq
(
Point2D
pt)
Returns the square of the distance from a specified
Point2D
to this line.
 The distance measured is the distance between the specified
 point and the closest point on the infinitely-extended line
 defined by this
Line2D
.  If the specified point
 intersects the line, this method returns 0.0.
Parameters:
pt
- the specified
Point2D
being measured
           against this line
Returns:
a double value that is the square of the distance from a
                  specified
Point2D
to the current
                  line.
Since:
1.2
See Also:
ptSegDistSq(Point2D)
ptLineDist
public
double
ptLineDist
(double px,
 double py)
Returns the distance from a point to this line.
 The distance measured is the distance between the specified
 point and the closest point on the infinitely-extended line
 defined by this
Line2D
.  If the specified point
 intersects the line, this method returns 0.0.
Parameters:
px
- the X coordinate of the specified point being
           measured against this line
py
- the Y coordinate of the specified point being
           measured against this line
Returns:
a double value that is the distance from a specified point
                  to the current line.
Since:
1.2
See Also:
ptSegDist(double, double)
ptLineDist
public
double
ptLineDist
(
Point2D
pt)
Returns the distance from a
Point2D
to this line.
 The distance measured is the distance between the specified
 point and the closest point on the infinitely-extended line
 defined by this
Line2D
.  If the specified point
 intersects the line, this method returns 0.0.
Parameters:
pt
- the specified
Point2D
being measured
Returns:
a double value that is the distance from a specified
Point2D
to the current line.
Since:
1.2
See Also:
ptSegDist(Point2D)
contains
public
boolean
contains
(double x,
 double y)
Tests if a specified coordinate is inside the boundary of this
Line2D
.  This method is required to implement the
Shape
interface, but in the case of
Line2D
objects it always returns
false
since a line contains
 no area.
Specified by:
contains
in interface
Shape
Parameters:
x
- the X coordinate of the specified point to be tested
y
- the Y coordinate of the specified point to be tested
Returns:
false
because a
Line2D
contains
 no area.
Since:
1.2
contains
public
boolean
contains
(
Point2D
p)
Tests if a given
Point2D
is inside the boundary of
 this
Line2D
.
 This method is required to implement the
Shape
interface,
 but in the case of
Line2D
objects it always returns
false
since a line contains no area.
Specified by:
contains
in interface
Shape
Parameters:
p
- the specified
Point2D
to be tested
Returns:
false
because a
Line2D
contains
 no area.
Since:
1.2
intersects
public
boolean
intersects
(double x,
 double y,
 double w,
 double h)
Tests if the interior of the
Shape
intersects the
 interior of a specified rectangular area.
 The rectangular area is considered to intersect the
Shape
if any point is contained in both the interior of the
Shape
and the specified rectangular area.
The
Shape.intersects()
method allows a
Shape
implementation to conservatively return
true
when:
there is a high probability that the rectangular area and the
Shape
intersect, but
the calculations to accurately determine this intersection
 are prohibitively expensive.
This means that for some
Shapes
this method might
 return
true
even though the rectangular area does not
 intersect the
Shape
.
 The
Area
class performs
 more accurate computations of geometric intersection than most
Shape
objects and therefore can be used if a more precise
 answer is required.
Specified by:
intersects
in interface
Shape
Parameters:
x
- the X coordinate of the upper-left corner
          of the specified rectangular area
y
- the Y coordinate of the upper-left corner
          of the specified rectangular area
w
- the width of the specified rectangular area
h
- the height of the specified rectangular area
Returns:
true
if the interior of the
Shape
and
          the interior of the rectangular area intersect, or are
          both highly likely to intersect and intersection calculations
          would be too expensive to perform;
false
otherwise.
Since:
1.2
See Also:
Area
intersects
public
boolean
intersects
(
Rectangle2D
r)
Tests if the interior of the
Shape
intersects the
 interior of a specified
Rectangle2D
.
 The
Shape.intersects()
method allows a
Shape
implementation to conservatively return
true
when:
there is a high probability that the
Rectangle2D
and the
Shape
intersect, but
the calculations to accurately determine this intersection
 are prohibitively expensive.
This means that for some
Shapes
this method might
 return
true
even though the
Rectangle2D
does not
 intersect the
Shape
.
 The
Area
class performs
 more accurate computations of geometric intersection than most
Shape
objects and therefore can be used if a more precise
 answer is required.
Specified by:
intersects
in interface
Shape
Parameters:
r
- the specified
Rectangle2D
Returns:
true
if the interior of the
Shape
and
          the interior of the specified
Rectangle2D
intersect, or are both highly likely to intersect and intersection
          calculations would be too expensive to perform;
false
otherwise.
Since:
1.2
See Also:
Shape.intersects(double, double, double, double)
contains
public
boolean
contains
(double x,
 double y,
 double w,
 double h)
Tests if the interior of this
Line2D
entirely contains
 the specified set of rectangular coordinates.
 This method is required to implement the
Shape
interface,
 but in the case of
Line2D
objects it always returns
 false since a line contains no area.
Specified by:
contains
in interface
Shape
Parameters:
x
- the X coordinate of the upper-left corner of the
          specified rectangular area
y
- the Y coordinate of the upper-left corner of the
          specified rectangular area
w
- the width of the specified rectangular area
h
- the height of the specified rectangular area
Returns:
false
because a
Line2D
contains
 no area.
Since:
1.2
See Also:
Area
Shape.intersects(double, double, double, double)
contains
public
boolean
contains
(
Rectangle2D
r)
Tests if the interior of this
Line2D
entirely contains
 the specified
Rectangle2D
.
 This method is required to implement the
Shape
interface,
 but in the case of
Line2D
objects it always returns
false
since a line contains no area.
Specified by:
contains
in interface
Shape
Parameters:
r
- the specified
Rectangle2D
to be tested
Returns:
false
because a
Line2D
contains
 no area.
Since:
1.2
See Also:
Shape.contains(double, double, double, double)
getBounds
public
Rectangle
getBounds
()
Returns an integer
Rectangle
that completely encloses the
Shape
.  Note that there is no guarantee that the
 returned
Rectangle
is the smallest bounding box that
 encloses the
Shape
, only that the
Shape
lies entirely within the indicated
Rectangle
.  The
 returned
Rectangle
might also fail to completely
 enclose the
Shape
if the
Shape
overflows
 the limited range of the integer data type.  The
getBounds2D
method generally returns a
 tighter bounding box due to its greater flexibility in
 representation.
Note that the
definition of insideness
can lead to situations where points
 on the defining outline of the
shape
may not be considered
 contained in the returned
bounds
object, but only in cases
 where those points are also not considered contained in the original
shape
.
If a
point
is inside the
shape
according to the
contains(point)
method, then
 it must be inside the returned
Rectangle
bounds object
 according to the
contains(point)
method of the
bounds
. Specifically:
shape.contains(x,y)
requires
bounds.contains(x,y)
If a
point
is not inside the
shape
, then it might
 still be contained in the
bounds
object:
bounds.contains(x,y)
does not imply
shape.contains(x,y)
Specified by:
getBounds
in interface
Shape
Returns:
an integer
Rectangle
that completely encloses
                 the
Shape
.
Since:
1.2
See Also:
Shape.getBounds2D()
getPathIterator
public
PathIterator
getPathIterator
(
AffineTransform
at)
Returns an iteration object that defines the boundary of this
Line2D
.
 The iterator for this class is not multi-threaded safe,
 which means that this
Line2D
class does not
 guarantee that modifications to the geometry of this
Line2D
object do not affect any iterations of that
 geometry that are already in process.
Specified by:
getPathIterator
in interface
Shape
Parameters:
at
- the specified
AffineTransform
Returns:
a
PathIterator
that defines the boundary of this
Line2D
.
Since:
1.2
getPathIterator
public
PathIterator
getPathIterator
(
AffineTransform
at,
 double flatness)
Returns an iteration object that defines the boundary of this
 flattened
Line2D
.
 The iterator for this class is not multi-threaded safe,
 which means that this
Line2D
class does not
 guarantee that modifications to the geometry of this
Line2D
object do not affect any iterations of that
 geometry that are already in process.
Specified by:
getPathIterator
in interface
Shape
Parameters:
at
- the specified
AffineTransform
flatness
- the maximum amount that the control points for a
          given curve can vary from colinear before a subdivided
          curve is replaced by a straight line connecting the
          end points.  Since a
Line2D
object is
          always flat, this parameter is ignored.
Returns:
a
PathIterator
that defines the boundary of the
                  flattened
Line2D
Since:
1.2
clone
public
Object
clone
()
Creates a new object of the same class as this object.
Overrides:
clone
in class
Object
Returns:
a clone of this instance.
Throws:
OutOfMemoryError
- if there is not enough memory.
Since:
1.2
See Also:
Cloneable
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.