Uses of Class java.awt.geom.Point2D (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Class
java.awt.geom.Point2D
Packages that use
Point2D
Package
Description
java.awt
Contains all of the classes for creating user interfaces and for painting
 graphics and images.
java.awt.font
Provides classes and interface relating to fonts.
java.awt.geom
Provides the Java 2D classes for defining and performing operations on
 objects related to two-dimensional geometry.
java.awt.image
Provides classes for creating and modifying images.
javax.swing.plaf
Provides one interface and many abstract classes that Swing uses to provide
 its pluggable look-and-feel capabilities.
javax.swing.text
Provides classes and interfaces that deal with editable and noneditable text
 components.
Uses of
Point2D
in
java.awt
Subclasses of
Point2D
in
java.awt
Modifier and Type
Class
Description
class
Point
A point representing a location in
(x,y)
coordinate space,
 specified in integer precision.
Methods in
java.awt
that return
Point2D
Modifier and Type
Method
Description
Point2D
RadialGradientPaint.
getCenterPoint
()
Returns a copy of the center point of the radial gradient.
Point2D
LinearGradientPaint.
getEndPoint
()
Returns a copy of the end point of the gradient axis.
Point2D
RadialGradientPaint.
getFocusPoint
()
Returns a copy of the focus point of the radial gradient.
Point2D
GradientPaint.
getPoint1
()
Returns a copy of the point P1 that anchors the first color.
Point2D
GradientPaint.
getPoint2
()
Returns a copy of the point P2 which anchors the second color.
Point2D
LinearGradientPaint.
getStartPoint
()
Returns a copy of the start point of the gradient axis.
Methods in
java.awt
with parameters of type
Point2D
Modifier and Type
Method
Description
boolean
Polygon.
contains
(
Point2D
p)
Tests if a specified
Point2D
is inside the boundary
 of the
Shape
, as described by the
definition of insideness
.
boolean
Shape.
contains
(
Point2D
p)
Tests if a specified
Point2D
is inside the boundary
 of the
Shape
, as described by the
definition of insideness
.
Constructors in
java.awt
with parameters of type
Point2D
Modifier
Constructor
Description
GradientPaint
(
Point2D
pt1,
Color
color1,
Point2D
pt2,
Color
color2)
Constructs a simple acyclic
GradientPaint
object.
GradientPaint
(
Point2D
pt1,
Color
color1,
Point2D
pt2,
Color
color2,
 boolean cyclic)
Constructs either a cyclic or acyclic
GradientPaint
object depending on the
boolean
parameter.
LinearGradientPaint
(
Point2D
start,
Point2D
end,
 float[] fractions,
Color
[] colors)
Constructs a
LinearGradientPaint
with a default
NO_CYCLE
repeating method and
SRGB
color space.
LinearGradientPaint
(
Point2D
start,
Point2D
end,
 float[] fractions,
Color
[] colors,
MultipleGradientPaint.CycleMethod
cycleMethod)
Constructs a
LinearGradientPaint
with a default
SRGB
color space.
LinearGradientPaint
(
Point2D
start,
Point2D
end,
 float[] fractions,
Color
[] colors,
MultipleGradientPaint.CycleMethod
cycleMethod,
MultipleGradientPaint.ColorSpaceType
colorSpace,
AffineTransform
gradientTransform)
Constructs a
LinearGradientPaint
.
RadialGradientPaint
(
Point2D
center,
 float radius,
 float[] fractions,
Color
[] colors)
Constructs a
RadialGradientPaint
with a default
NO_CYCLE
repeating method and
SRGB
color space,
 using the center as the focus point.
RadialGradientPaint
(
Point2D
center,
 float radius,
 float[] fractions,
Color
[] colors,
MultipleGradientPaint.CycleMethod
cycleMethod)
Constructs a
RadialGradientPaint
with a default
SRGB
color space, using the center as the focus point.
RadialGradientPaint
(
Point2D
center,
 float radius,
Point2D
focus,
 float[] fractions,
Color
[] colors,
MultipleGradientPaint.CycleMethod
cycleMethod)
Constructs a
RadialGradientPaint
with a default
SRGB
color space.
RadialGradientPaint
(
Point2D
center,
 float radius,
Point2D
focus,
 float[] fractions,
Color
[] colors,
MultipleGradientPaint.CycleMethod
cycleMethod,
MultipleGradientPaint.ColorSpaceType
colorSpace,
AffineTransform
gradientTransform)
Constructs a
RadialGradientPaint
.
Uses of
Point2D
in
java.awt.font
Methods in
java.awt.font
that return
Point2D
Modifier and Type
Method
Description
abstract
Point2D
GlyphVector.
getGlyphPosition
(int glyphIndex)
Returns the position of the specified glyph relative to the
 origin of this
GlyphVector
.
Methods in
java.awt.font
with parameters of type
Point2D
Modifier and Type
Method
Description
void
TextLayout.
hitToPoint
(
TextHitInfo
hit,
Point2D
point)
Convert a hit to a point in standard coordinates.
abstract void
LayoutPath.
pathToPoint
(
Point2D
location,
 boolean preceding,
Point2D
point)
Convert a location relative to the path to a point in user
 coordinates.
abstract boolean
LayoutPath.
pointToPath
(
Point2D
point,
Point2D
location)
Convert a point in user space to a location relative to the
 path.
abstract void
GlyphVector.
setGlyphPosition
(int glyphIndex,
Point2D
newPos)
Sets the position of the specified glyph within this
GlyphVector
.
Uses of
Point2D
in
java.awt.geom
Subclasses of
Point2D
in
java.awt.geom
Modifier and Type
Class
Description
static class
Point2D.Double
The
Double
class defines a point specified in
double
precision.
static class
Point2D.Float
The
Float
class defines a point specified in float
 precision.
Methods in
java.awt.geom
that return
Point2D
Modifier and Type
Method
Description
Point2D
AffineTransform.
deltaTransform
(
Point2D
ptSrc,
Point2D
ptDst)
Transforms the relative distance vector specified by
ptSrc
and stores the result in
ptDst
.
Point2D
CubicCurve2D.Double.
getCtrlP1
()
Returns the first control point.
Point2D
CubicCurve2D.Float.
getCtrlP1
()
Returns the first control point.
abstract
Point2D
CubicCurve2D.
getCtrlP1
()
Returns the first control point.
Point2D
CubicCurve2D.Double.
getCtrlP2
()
Returns the second control point.
Point2D
CubicCurve2D.Float.
getCtrlP2
()
Returns the second control point.
abstract
Point2D
CubicCurve2D.
getCtrlP2
()
Returns the second control point.
Point2D
QuadCurve2D.Double.
getCtrlPt
()
Returns the control point.
Point2D
QuadCurve2D.Float.
getCtrlPt
()
Returns the control point.
abstract
Point2D
QuadCurve2D.
getCtrlPt
()
Returns the control point.
final
Point2D
Path2D.
getCurrentPoint
()
Returns the coordinates most recently added to the end of the path
 as a
Point2D
object.
Point2D
Arc2D.
getEndPoint
()
Returns the ending point of the arc.
Point2D
CubicCurve2D.Double.
getP1
()
Returns the start point.
Point2D
CubicCurve2D.Float.
getP1
()
Returns the start point.
abstract
Point2D
CubicCurve2D.
getP1
()
Returns the start point.
Point2D
Line2D.Double.
getP1
()
Returns the start
Point2D
of this
Line2D
.
Point2D
Line2D.Float.
getP1
()
Returns the start
Point2D
of this
Line2D
.
abstract
Point2D
Line2D.
getP1
()
Returns the start
Point2D
of this
Line2D
.
Point2D
QuadCurve2D.Double.
getP1
()
Returns the start point.
Point2D
QuadCurve2D.Float.
getP1
()
Returns the start point.
abstract
Point2D
QuadCurve2D.
getP1
()
Returns the start point.
Point2D
CubicCurve2D.Double.
getP2
()
Returns the end point.
Point2D
CubicCurve2D.Float.
getP2
()
Returns the end point.
abstract
Point2D
CubicCurve2D.
getP2
()
Returns the end point.
Point2D
Line2D.Double.
getP2
()
Returns the end
Point2D
of this
Line2D
.
Point2D
Line2D.Float.
getP2
()
Returns the end
Point2D
of this
Line2D
.
abstract
Point2D
Line2D.
getP2
()
Returns the end
Point2D
of this
Line2D
.
Point2D
QuadCurve2D.Double.
getP2
()
Returns the end point.
Point2D
QuadCurve2D.Float.
getP2
()
Returns the end point.
abstract
Point2D
QuadCurve2D.
getP2
()
Returns the end point.
Point2D
Arc2D.
getStartPoint
()
Returns the starting point of the arc.
Point2D
AffineTransform.
inverseTransform
(
Point2D
ptSrc,
Point2D
ptDst)
Inverse transforms the specified
ptSrc
and stores the
 result in
ptDst
.
Point2D
AffineTransform.
transform
(
Point2D
ptSrc,
Point2D
ptDst)
Transforms the specified
ptSrc
and stores the result
 in
ptDst
.
Methods in
java.awt.geom
with parameters of type
Point2D
Modifier and Type
Method
Description
void
Rectangle2D.
add
(
Point2D
pt)
Adds the
Point2D
object
pt
to this
Rectangle2D
.
boolean
Area.
contains
(
Point2D
p)
Tests if a specified
Point2D
is inside the boundary
 of the
Shape
, as described by the
definition of insideness
.
boolean
CubicCurve2D.
contains
(
Point2D
p)
Tests if a specified
Point2D
is inside the boundary
 of the
Shape
, as described by the
definition of insideness
.
boolean
Line2D.
contains
(
Point2D
p)
Tests if a given
Point2D
is inside the boundary of
 this
Line2D
.
static boolean
Path2D.
contains
(
PathIterator
pi,
Point2D
p)
Tests if the specified
Point2D
is inside the closed
 boundary of the specified
PathIterator
.
final boolean
Path2D.
contains
(
Point2D
p)
Tests if a specified
Point2D
is inside the boundary
 of the
Shape
, as described by the
definition of insideness
.
boolean
QuadCurve2D.
contains
(
Point2D
p)
Tests if a specified
Point2D
is inside the boundary
 of the
Shape
, as described by the
definition of insideness
.
boolean
RectangularShape.
contains
(
Point2D
p)
Tests if a specified
Point2D
is inside the boundary
 of the
Shape
, as described by the
definition of insideness
.
Point2D
AffineTransform.
deltaTransform
(
Point2D
ptSrc,
Point2D
ptDst)
Transforms the relative distance vector specified by
ptSrc
and stores the result in
ptDst
.
double
Point2D.
distance
(
Point2D
pt)
Returns the distance from this
Point2D
to a
 specified
Point2D
.
double
Point2D.
distanceSq
(
Point2D
pt)
Returns the square of the distance from this
Point2D
to a specified
Point2D
.
Point2D
AffineTransform.
inverseTransform
(
Point2D
ptSrc,
Point2D
ptDst)
Inverse transforms the specified
ptSrc
and stores the
 result in
ptDst
.
int
Rectangle2D.
outcode
(
Point2D
p)
Determines where the specified
Point2D
lies with
 respect to this
Rectangle2D
.
double
Line2D.
ptLineDist
(
Point2D
pt)
Returns the distance from a
Point2D
to this line.
double
Line2D.
ptLineDistSq
(
Point2D
pt)
Returns the square of the distance from a specified
Point2D
to this line.
double
Line2D.
ptSegDist
(
Point2D
pt)
Returns the distance from a
Point2D
to this line
 segment.
double
Line2D.
ptSegDistSq
(
Point2D
pt)
Returns the square of the distance from a
Point2D
to
 this line segment.
int
Line2D.
relativeCCW
(
Point2D
p)
Returns an indicator of where the specified
Point2D
lies with respect to this line segment.
void
Arc2D.
setAngles
(
Point2D
p1,
Point2D
p2)
Sets the starting angle and angular extent of this arc using
 two points.
void
Arc2D.
setAngleStart
(
Point2D
p)
Sets the starting angle of this arc to the angle that the
 specified point defines relative to the center of this arc.
void
Arc2D.
setArc
(
Point2D
loc,
Dimension2D
size,
 double angSt,
 double angExt,
 int closure)
Sets the location, size, angular extents, and closure type of
 this arc to the specified values.
void
Arc2D.
setArcByTangent
(
Point2D
p1,
Point2D
p2,
Point2D
p3,
 double radius)
Sets the position, bounds, and angular extents of this arc to the
 specified value.
void
CubicCurve2D.
setCurve
(
Point2D
[] pts,
 int offset)
Sets the location of the end points and control points of this curve
 to the coordinates of the
Point2D
objects at the specified
 offset in the specified array.
void
CubicCurve2D.
setCurve
(
Point2D
p1,
Point2D
cp1,
Point2D
cp2,
Point2D
p2)
Sets the location of the end points and control points of this curve
 to the specified
Point2D
coordinates.
void
QuadCurve2D.
setCurve
(
Point2D
[] pts,
 int offset)
Sets the location of the end points and control points of this
QuadCurve2D
to the coordinates of the
Point2D
objects at the specified offset in
 the specified array.
void
QuadCurve2D.
setCurve
(
Point2D
p1,
Point2D
cp,
Point2D
p2)
Sets the location of the end points and control point of this
QuadCurve2D
to the specified
Point2D
coordinates.
void
RectangularShape.
setFrame
(
Point2D
loc,
Dimension2D
size)
Sets the location and size of the framing rectangle of this
Shape
to the specified
Point2D
and
Dimension2D
, respectively.
void
RectangularShape.
setFrameFromCenter
(
Point2D
center,
Point2D
corner)
Sets the framing rectangle of this
Shape
based on a
 specified center
Point2D
and corner
Point2D
.
void
RectangularShape.
setFrameFromDiagonal
(
Point2D
p1,
Point2D
p2)
Sets the diagonal of the framing rectangle of this
Shape
based on two specified
Point2D
objects.
void
Line2D.
setLine
(
Point2D
p1,
Point2D
p2)
Sets the location of the end points of this
Line2D
to
 the specified
Point2D
coordinates.
void
Point2D.
setLocation
(
Point2D
p)
Sets the location of this
Point2D
to the same
 coordinates as the specified
Point2D
object.
void
AffineTransform.
transform
(
Point2D
[] ptSrc,
 int srcOff,
Point2D
[] ptDst,
 int dstOff,
 int numPts)
Transforms an array of point objects by this transform.
Point2D
AffineTransform.
transform
(
Point2D
ptSrc,
Point2D
ptDst)
Transforms the specified
ptSrc
and stores the result
 in
ptDst
.
Constructors in
java.awt.geom
with parameters of type
Point2D
Modifier
Constructor
Description
Double
(
Point2D
p1,
Point2D
p2)
Constructs and initializes a
Line2D
from the
 specified
Point2D
objects.
Float
(
Point2D
p1,
Point2D
p2)
Constructs and initializes a
Line2D
from the
 specified
Point2D
objects.
Uses of
Point2D
in
java.awt.image
Methods in
java.awt.image
that return
Point2D
Modifier and Type
Method
Description
final
Point2D
AffineTransformOp.
getPoint2D
(
Point2D
srcPt,
Point2D
dstPt)
Returns the location of the corresponding destination point given a
 point in the source.
final
Point2D
BandCombineOp.
getPoint2D
(
Point2D
srcPt,
Point2D
dstPt)
Returns the location of the corresponding destination point given a
 point in the source
Raster
.
Point2D
BufferedImageOp.
getPoint2D
(
Point2D
srcPt,
Point2D
dstPt)
Returns the location of the corresponding destination point given a
 point in the source image.
final
Point2D
ColorConvertOp.
getPoint2D
(
Point2D
srcPt,
Point2D
dstPt)
Returns the location of the destination point given a
 point in the source.
final
Point2D
ConvolveOp.
getPoint2D
(
Point2D
srcPt,
Point2D
dstPt)
Returns the location of the destination point given a
 point in the source.
final
Point2D
LookupOp.
getPoint2D
(
Point2D
srcPt,
Point2D
dstPt)
Returns the location of the destination point given a
 point in the source.
Point2D
RasterOp.
getPoint2D
(
Point2D
srcPt,
Point2D
dstPt)
Returns the location of the destination point given a
 point in the source Raster.
final
Point2D
RescaleOp.
getPoint2D
(
Point2D
srcPt,
Point2D
dstPt)
Returns the location of the destination point given a
 point in the source.
Methods in
java.awt.image
with parameters of type
Point2D
Modifier and Type
Method
Description
final
Point2D
AffineTransformOp.
getPoint2D
(
Point2D
srcPt,
Point2D
dstPt)
Returns the location of the corresponding destination point given a
 point in the source.
final
Point2D
BandCombineOp.
getPoint2D
(
Point2D
srcPt,
Point2D
dstPt)
Returns the location of the corresponding destination point given a
 point in the source
Raster
.
Point2D
BufferedImageOp.
getPoint2D
(
Point2D
srcPt,
Point2D
dstPt)
Returns the location of the corresponding destination point given a
 point in the source image.
final
Point2D
ColorConvertOp.
getPoint2D
(
Point2D
srcPt,
Point2D
dstPt)
Returns the location of the destination point given a
 point in the source.
final
Point2D
ConvolveOp.
getPoint2D
(
Point2D
srcPt,
Point2D
dstPt)
Returns the location of the destination point given a
 point in the source.
final
Point2D
LookupOp.
getPoint2D
(
Point2D
srcPt,
Point2D
dstPt)
Returns the location of the destination point given a
 point in the source.
Point2D
RasterOp.
getPoint2D
(
Point2D
srcPt,
Point2D
dstPt)
Returns the location of the destination point given a
 point in the source Raster.
final
Point2D
RescaleOp.
getPoint2D
(
Point2D
srcPt,
Point2D
dstPt)
Returns the location of the destination point given a
 point in the source.
Uses of
Point2D
in
javax.swing.plaf
Methods in
javax.swing.plaf
with parameters of type
Point2D
Modifier and Type
Method
Description
String
TextUI.
getToolTipText2D
(
JTextComponent
t,
Point2D
pt)
Returns the string to be used as the tooltip at the passed in location.
int
TextUI.
viewToModel2D
(
JTextComponent
t,
Point2D
pt,
Position.Bias
[] biasReturn)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.
Uses of
Point2D
in
javax.swing.text
Methods in
javax.swing.text
with parameters of type
Point2D
Modifier and Type
Method
Description
int
JTextComponent.
viewToModel2D
(
Point2D
pt)
Converts the given place in the view coordinate system
 to the nearest representative location in the model.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.