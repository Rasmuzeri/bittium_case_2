Path2D (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested
|
Field
|
Constr |
Method
Detail:
Field
|
Constr |
Method
SEARCH
Module
java.desktop
Package
java.awt.geom
Class Path2D
java.lang.Object
java.awt.geom.Path2D
All Implemented Interfaces:
Shape
,
Cloneable
Direct Known Subclasses:
Path2D.Double
,
Path2D.Float
public abstract sealed class
Path2D
extends
Object
implements
Shape
,
Cloneable
permits
Path2D.Double
,
Path2D.Float
The
Path2D
class provides a simple, yet flexible
 shape which represents an arbitrary geometric path.
 It can fully represent any path which can be iterated by the
PathIterator
interface including all of its segment
 types and winding rules and it implements all of the
 basic hit testing methods of the
Shape
interface.
Use
Path2D.Float
when dealing with data that can be represented
 and used with floating point precision.  Use
Path2D.Double
for data that requires the accuracy or range of double precision.
Path2D
provides exactly those facilities required for
 basic construction and management of a geometric path and
 implementation of the above interfaces with little added
 interpretation.
 If it is useful to manipulate the interiors of closed
 geometric shapes beyond simple hit testing then the
Area
class provides additional capabilities
 specifically targeted at closed figures.
 While both classes nominally implement the
Shape
interface, they differ in purpose and together they provide
 two useful views of a geometric shape where
Path2D
deals primarily with a trajectory formed by path segments
 and
Area
deals more with interpretation and manipulation
 of enclosed regions of 2D geometric space.
The
PathIterator
interface has more detailed descriptions
 of the types of segments that make up a path and the winding rules
 that control how to determine which regions are inside or outside
 the path.
Sealed Class Hierarchy Graph:
Since:
1.6
Nested Class Summary
Nested Classes
Modifier and Type
Class
Description
static class
Path2D.Double
The
Double
class defines a geometric path with
 coordinates stored in double precision floating point.
static class
Path2D.Float
The
Float
class defines a geometric path with
 coordinates stored in single precision floating point.
Field Summary
Fields
Modifier and Type
Field
Description
static final int
WIND_EVEN_ODD
An even-odd winding rule for determining the interior of
 a path.
static final int
WIND_NON_ZERO
A non-zero winding rule for determining the interior of a
 path.
Method Summary
All Methods
Static Methods
Instance Methods
Abstract Methods
Concrete Methods
Modifier and Type
Method
Description
abstract void
append
(
PathIterator
pi,
 boolean connect)
Appends the geometry of the specified
PathIterator
object
 to the path, possibly connecting the new geometry to the existing
 path segments with a line segment.
final void
append
(
Shape
s,
 boolean connect)
Appends the geometry of the specified
Shape
object to the
 path, possibly connecting the new geometry to the existing path
 segments with a line segment.
abstract
Object
clone
()
Creates a new object of the same class as this object.
final void
closePath
()
Closes the current subpath by drawing a straight line back to
 the coordinates of the last
moveTo
.
final boolean
contains
(double x,
 double y)
Tests if the specified coordinates are inside the boundary of the
Shape
, as described by the
definition of insideness
.
final boolean
contains
(double x,
 double y,
 double w,
 double h)
Tests if the interior of the
Shape
entirely contains
 the specified rectangular area.
static boolean
contains
(
PathIterator
pi,
 double x,
 double y)
Tests if the specified coordinates are inside the closed
 boundary of the specified
PathIterator
.
static boolean
contains
(
PathIterator
pi,
 double x,
 double y,
 double w,
 double h)
Tests if the specified rectangular area is entirely inside the
 closed boundary of the specified
PathIterator
.
static boolean
contains
(
PathIterator
pi,
Point2D
p)
Tests if the specified
Point2D
is inside the closed
 boundary of the specified
PathIterator
.
static boolean
contains
(
PathIterator
pi,
Rectangle2D
r)
Tests if the specified
Rectangle2D
is entirely inside the
 closed boundary of the specified
PathIterator
.
final boolean
contains
(
Point2D
p)
Tests if a specified
Point2D
is inside the boundary
 of the
Shape
, as described by the
definition of insideness
.
final boolean
contains
(
Rectangle2D
r)
Tests if the interior of the
Shape
entirely contains the
 specified
Rectangle2D
.
final
Shape
createTransformedShape
(
AffineTransform
at)
Returns a new
Shape
representing a transformed version
 of this
Path2D
.
abstract void
curveTo
(double x1,
 double y1,
 double x2,
 double y2,
 double x3,
 double y3)
Adds a curved segment, defined by three new points, to the path by
 drawing a Bézier curve that intersects both the current
 coordinates and the specified coordinates
(x3,y3)
,
 using the specified points
(x1,y1)
and
(x2,y2)
as
 Bézier control points.
final
Rectangle
getBounds
()
Returns an integer
Rectangle
that completely encloses the
Shape
.
final
Point2D
getCurrentPoint
()
Returns the coordinates most recently added to the end of the path
 as a
Point2D
object.
final
PathIterator
getPathIterator
(
AffineTransform
at,
 double flatness)
Returns an iterator object that iterates along the
Shape
boundary and provides access to a flattened view of the
Shape
outline geometry.
final int
getWindingRule
()
Returns the fill style winding rule.
final boolean
intersects
(double x,
 double y,
 double w,
 double h)
Tests if the interior of the
Shape
intersects the
 interior of a specified rectangular area.
static boolean
intersects
(
PathIterator
pi,
 double x,
 double y,
 double w,
 double h)
Tests if the interior of the specified
PathIterator
intersects the interior of a specified set of rectangular
 coordinates.
static boolean
intersects
(
PathIterator
pi,
Rectangle2D
r)
Tests if the interior of the specified
PathIterator
intersects the interior of a specified
Rectangle2D
.
final boolean
intersects
(
Rectangle2D
r)
Tests if the interior of the
Shape
intersects the
 interior of a specified
Rectangle2D
.
abstract void
lineTo
(double x,
 double y)
Adds a point to the path by drawing a straight line from the
 current coordinates to the new specified coordinates
 specified in double precision.
abstract void
moveTo
(double x,
 double y)
Adds a point to the path by moving to the specified
 coordinates specified in double precision.
abstract void
quadTo
(double x1,
 double y1,
 double x2,
 double y2)
Adds a curved segment, defined by two new points, to the path by
 drawing a Quadratic curve that intersects both the current
 coordinates and the specified coordinates
(x2,y2)
,
 using the specified point
(x1,y1)
as a quadratic
 parametric control point.
final void
reset
()
Resets the path to empty.
final void
setWindingRule
(int rule)
Sets the winding rule for this path to the specified value.
abstract void
transform
(
AffineTransform
at)
Transforms the geometry of this path using the specified
AffineTransform
.
abstract void
trimToSize
()
Trims the capacity of this Path2D instance to its current
 size.
Methods declared in class java.lang.
Object
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Methods declared in interface java.awt.
Shape
getBounds2D
,
getPathIterator
Field Details
WIND_EVEN_ODD
public static final
int
WIND_EVEN_ODD
An even-odd winding rule for determining the interior of
 a path.
Since:
1.6
See Also:
PathIterator.WIND_EVEN_ODD
Constant Field Values
WIND_NON_ZERO
public static final
int
WIND_NON_ZERO
A non-zero winding rule for determining the interior of a
 path.
Since:
1.6
See Also:
PathIterator.WIND_NON_ZERO
Constant Field Values
Method Details
moveTo
public abstract
void
moveTo
(double x,
 double y)
Adds a point to the path by moving to the specified
 coordinates specified in double precision.
Parameters:
x
- the specified X coordinate
y
- the specified Y coordinate
Since:
1.6
lineTo
public abstract
void
lineTo
(double x,
 double y)
Adds a point to the path by drawing a straight line from the
 current coordinates to the new specified coordinates
 specified in double precision.
Parameters:
x
- the specified X coordinate
y
- the specified Y coordinate
Since:
1.6
quadTo
public abstract
void
quadTo
(double x1,
 double y1,
 double x2,
 double y2)
Adds a curved segment, defined by two new points, to the path by
 drawing a Quadratic curve that intersects both the current
 coordinates and the specified coordinates
(x2,y2)
,
 using the specified point
(x1,y1)
as a quadratic
 parametric control point.
 All coordinates are specified in double precision.
Parameters:
x1
- the X coordinate of the quadratic control point
y1
- the Y coordinate of the quadratic control point
x2
- the X coordinate of the final end point
y2
- the Y coordinate of the final end point
Since:
1.6
curveTo
public abstract
void
curveTo
(double x1,
 double y1,
 double x2,
 double y2,
 double x3,
 double y3)
Adds a curved segment, defined by three new points, to the path by
 drawing a Bézier curve that intersects both the current
 coordinates and the specified coordinates
(x3,y3)
,
 using the specified points
(x1,y1)
and
(x2,y2)
as
 Bézier control points.
 All coordinates are specified in double precision.
Parameters:
x1
- the X coordinate of the first Bézier control point
y1
- the Y coordinate of the first Bézier control point
x2
- the X coordinate of the second Bézier control point
y2
- the Y coordinate of the second Bézier control point
x3
- the X coordinate of the final end point
y3
- the Y coordinate of the final end point
Since:
1.6
closePath
public final
void
closePath
()
Closes the current subpath by drawing a straight line back to
 the coordinates of the last
moveTo
.  If the path is already
 closed then this method has no effect.
Since:
1.6
append
public final
void
append
(
Shape
s,
 boolean connect)
Appends the geometry of the specified
Shape
object to the
 path, possibly connecting the new geometry to the existing path
 segments with a line segment.
 If the
connect
parameter is
true
and the
 path is not empty then any initial
moveTo
in the
 geometry of the appended
Shape
is turned into a
lineTo
segment.
 If the destination coordinates of such a connecting
lineTo
segment match the ending coordinates of a currently open
 subpath then the segment is omitted as superfluous.
 The winding rule of the specified
Shape
is ignored
 and the appended geometry is governed by the winding
 rule specified for this path.
Parameters:
s
- the
Shape
whose geometry is appended
          to this path
connect
- a boolean to control whether or not to turn an initial
moveTo
segment into a
lineTo
segment
                to connect the new geometry to the existing path
Since:
1.6
append
public abstract
void
append
(
PathIterator
pi,
 boolean connect)
Appends the geometry of the specified
PathIterator
object
 to the path, possibly connecting the new geometry to the existing
 path segments with a line segment.
 If the
connect
parameter is
true
and the
 path is not empty then any initial
moveTo
in the
 geometry of the appended
Shape
is turned into a
lineTo
segment.
 If the destination coordinates of such a connecting
lineTo
segment match the ending coordinates of a currently open
 subpath then the segment is omitted as superfluous.
 The winding rule of the specified
Shape
is ignored
 and the appended geometry is governed by the winding
 rule specified for this path.
Parameters:
pi
- the
PathIterator
whose geometry is appended to
           this path
connect
- a boolean to control whether or not to turn an initial
moveTo
segment into a
lineTo
segment
                to connect the new geometry to the existing path
Since:
1.6
getWindingRule
public final
int
getWindingRule
()
Returns the fill style winding rule.
Returns:
an integer representing the current winding rule.
Since:
1.6
See Also:
WIND_EVEN_ODD
WIND_NON_ZERO
setWindingRule(int)
setWindingRule
public final
void
setWindingRule
(int rule)
Sets the winding rule for this path to the specified value.
Parameters:
rule
- an integer representing the specified
             winding rule
Throws:
IllegalArgumentException
- if
rule
is not either
WIND_EVEN_ODD
or
WIND_NON_ZERO
Since:
1.6
See Also:
getWindingRule()
getCurrentPoint
public final
Point2D
getCurrentPoint
()
Returns the coordinates most recently added to the end of the path
 as a
Point2D
object.
Returns:
a
Point2D
object containing the ending coordinates of
         the path or
null
if there are no points in the path.
Since:
1.6
reset
public final
void
reset
()
Resets the path to empty.  The append position is set back to the
 beginning of the path and all coordinates and point types are
 forgotten.
Since:
1.6
transform
public abstract
void
transform
(
AffineTransform
at)
Transforms the geometry of this path using the specified
AffineTransform
.
 The geometry is transformed in place, which permanently changes the
 boundary defined by this object.
Parameters:
at
- the
AffineTransform
used to transform the area
Since:
1.6
createTransformedShape
public final
Shape
createTransformedShape
(
AffineTransform
at)
Returns a new
Shape
representing a transformed version
 of this
Path2D
.
 Note that the exact type and coordinate precision of the return
 value is not specified for this method.
 The method will return a Shape that contains no less precision
 for the transformed geometry than this
Path2D
currently
 maintains, but it may contain no more precision either.
 If the tradeoff of precision vs. storage size in the result is
 important then the convenience constructors in the
Path2D.Float
and
Path2D.Double
subclasses should be used to make the choice explicit.
Parameters:
at
- the
AffineTransform
used to transform a
           new
Shape
.
Returns:
a new
Shape
, transformed with the specified
AffineTransform
.
Since:
1.6
getBounds
public final
Rectangle
getBounds
()
Returns an integer
Rectangle
that completely encloses the
Shape
.  Note that there is no guarantee that the
 returned
Rectangle
is the smallest bounding box that
 encloses the
Shape
, only that the
Shape
lies entirely within the indicated
Rectangle
.  The
 returned
Rectangle
might also fail to completely
 enclose the
Shape
if the
Shape
overflows
 the limited range of the integer data type.  The
getBounds2D
method generally returns a
 tighter bounding box due to its greater flexibility in
 representation.
Note that the
definition of insideness
can lead to situations where points
 on the defining outline of the
shape
may not be considered
 contained in the returned
bounds
object, but only in cases
 where those points are also not considered contained in the original
shape
.
If a
point
is inside the
shape
according to the
contains(point)
method, then
 it must be inside the returned
Rectangle
bounds object
 according to the
contains(point)
method of the
bounds
. Specifically:
shape.contains(x,y)
requires
bounds.contains(x,y)
If a
point
is not inside the
shape
, then it might
 still be contained in the
bounds
object:
bounds.contains(x,y)
does not imply
shape.contains(x,y)
Specified by:
getBounds
in interface
Shape
Returns:
an integer
Rectangle
that completely encloses
                 the
Shape
.
Since:
1.6
See Also:
Shape.getBounds2D()
contains
public static
boolean
contains
(
PathIterator
pi,
 double x,
 double y)
Tests if the specified coordinates are inside the closed
 boundary of the specified
PathIterator
.
This method provides a basic facility for implementors of
 the
Shape
interface to implement support for the
Shape.contains(double, double)
method.
Parameters:
pi
- the specified
PathIterator
x
- the specified X coordinate
y
- the specified Y coordinate
Returns:
true
if the specified coordinates are inside the
         specified
PathIterator
;
false
otherwise
Since:
1.6
contains
public static
boolean
contains
(
PathIterator
pi,
Point2D
p)
Tests if the specified
Point2D
is inside the closed
 boundary of the specified
PathIterator
.
This method provides a basic facility for implementors of
 the
Shape
interface to implement support for the
Shape.contains(Point2D)
method.
Parameters:
pi
- the specified
PathIterator
p
- the specified
Point2D
Returns:
true
if the specified coordinates are inside the
         specified
PathIterator
;
false
otherwise
Since:
1.6
contains
public final
boolean
contains
(double x,
 double y)
Tests if the specified coordinates are inside the boundary of the
Shape
, as described by the
definition of insideness
.
Specified by:
contains
in interface
Shape
Parameters:
x
- the specified X coordinate to be tested
y
- the specified Y coordinate to be tested
Returns:
true
if the specified coordinates are inside
         the
Shape
boundary;
false
otherwise.
Since:
1.6
contains
public final
boolean
contains
(
Point2D
p)
Tests if a specified
Point2D
is inside the boundary
 of the
Shape
, as described by the
definition of insideness
.
Specified by:
contains
in interface
Shape
Parameters:
p
- the specified
Point2D
to be tested
Returns:
true
if the specified
Point2D
is
          inside the boundary of the
Shape
;
false
otherwise.
Since:
1.6
contains
public static
boolean
contains
(
PathIterator
pi,
 double x,
 double y,
 double w,
 double h)
Tests if the specified rectangular area is entirely inside the
 closed boundary of the specified
PathIterator
.
This method provides a basic facility for implementors of
 the
Shape
interface to implement support for the
Shape.contains(double, double, double, double)
method.
This method object may conservatively return false in
 cases where the specified rectangular area intersects a
 segment of the path, but that segment does not represent a
 boundary between the interior and exterior of the path.
 Such segments could lie entirely within the interior of the
 path if they are part of a path with a
WIND_NON_ZERO
winding rule or if the segments are retraced in the reverse
 direction such that the two sets of segments cancel each
 other out without any exterior area falling between them.
 To determine whether segments represent true boundaries of
 the interior of the path would require extensive calculations
 involving all of the segments of the path and the winding
 rule and are thus beyond the scope of this implementation.
Parameters:
pi
- the specified
PathIterator
x
- the specified X coordinate
y
- the specified Y coordinate
w
- the width of the specified rectangular area
h
- the height of the specified rectangular area
Returns:
true
if the specified
PathIterator
contains
         the specified rectangular area;
false
otherwise.
Since:
1.6
contains
public static
boolean
contains
(
PathIterator
pi,
Rectangle2D
r)
Tests if the specified
Rectangle2D
is entirely inside the
 closed boundary of the specified
PathIterator
.
This method provides a basic facility for implementors of
 the
Shape
interface to implement support for the
Shape.contains(Rectangle2D)
method.
This method object may conservatively return false in
 cases where the specified rectangular area intersects a
 segment of the path, but that segment does not represent a
 boundary between the interior and exterior of the path.
 Such segments could lie entirely within the interior of the
 path if they are part of a path with a
WIND_NON_ZERO
winding rule or if the segments are retraced in the reverse
 direction such that the two sets of segments cancel each
 other out without any exterior area falling between them.
 To determine whether segments represent true boundaries of
 the interior of the path would require extensive calculations
 involving all of the segments of the path and the winding
 rule and are thus beyond the scope of this implementation.
Parameters:
pi
- the specified
PathIterator
r
- a specified
Rectangle2D
Returns:
true
if the specified
PathIterator
contains
         the specified
Rectangle2D
;
false
otherwise.
Since:
1.6
contains
public final
boolean
contains
(double x,
 double y,
 double w,
 double h)
Tests if the interior of the
Shape
entirely contains
 the specified rectangular area.  All coordinates that lie inside
 the rectangular area must lie within the
Shape
for the
 entire rectangular area to be considered contained within the
Shape
.
The
Shape.contains()
method allows a
Shape
implementation to conservatively return
false
when:
the
intersect
method returns
true
and
the calculations to determine whether or not the
Shape
entirely contains the rectangular area are
 prohibitively expensive.
This means that for some
Shapes
this method might
 return
false
even though the
Shape
contains
 the rectangular area.
 The
Area
class performs
 more accurate geometric computations than most
Shape
objects and therefore can be used if a more precise
 answer is required.
This method object may conservatively return false in
 cases where the specified rectangular area intersects a
 segment of the path, but that segment does not represent a
 boundary between the interior and exterior of the path.
 Such segments could lie entirely within the interior of the
 path if they are part of a path with a
WIND_NON_ZERO
winding rule or if the segments are retraced in the reverse
 direction such that the two sets of segments cancel each
 other out without any exterior area falling between them.
 To determine whether segments represent true boundaries of
 the interior of the path would require extensive calculations
 involving all of the segments of the path and the winding
 rule and are thus beyond the scope of this implementation.
Specified by:
contains
in interface
Shape
Parameters:
x
- the X coordinate of the upper-left corner
          of the specified rectangular area
y
- the Y coordinate of the upper-left corner
          of the specified rectangular area
w
- the width of the specified rectangular area
h
- the height of the specified rectangular area
Returns:
true
if the interior of the
Shape
entirely contains the specified rectangular area;
false
otherwise or, if the
Shape
contains the rectangular area and the
intersects
method returns
true
and the containment calculations would be too expensive to
          perform.
Since:
1.6
See Also:
Area
Shape.intersects(double, double, double, double)
contains
public final
boolean
contains
(
Rectangle2D
r)
Tests if the interior of the
Shape
entirely contains the
 specified
Rectangle2D
.
 The
Shape.contains()
method allows a
Shape
implementation to conservatively return
false
when:
the
intersect
method returns
true
and
the calculations to determine whether or not the
Shape
entirely contains the
Rectangle2D
are prohibitively expensive.
This means that for some
Shapes
this method might
 return
false
even though the
Shape
contains
 the
Rectangle2D
.
 The
Area
class performs
 more accurate geometric computations than most
Shape
objects and therefore can be used if a more precise
 answer is required.
This method object may conservatively return false in
 cases where the specified rectangular area intersects a
 segment of the path, but that segment does not represent a
 boundary between the interior and exterior of the path.
 Such segments could lie entirely within the interior of the
 path if they are part of a path with a
WIND_NON_ZERO
winding rule or if the segments are retraced in the reverse
 direction such that the two sets of segments cancel each
 other out without any exterior area falling between them.
 To determine whether segments represent true boundaries of
 the interior of the path would require extensive calculations
 involving all of the segments of the path and the winding
 rule and are thus beyond the scope of this implementation.
Specified by:
contains
in interface
Shape
Parameters:
r
- The specified
Rectangle2D
Returns:
true
if the interior of the
Shape
entirely contains the
Rectangle2D
;
false
otherwise or, if the
Shape
contains the
Rectangle2D
and the
intersects
method returns
true
and the containment calculations would be too expensive to
          perform.
Since:
1.6
See Also:
Shape.contains(double, double, double, double)
intersects
public static
boolean
intersects
(
PathIterator
pi,
 double x,
 double y,
 double w,
 double h)
Tests if the interior of the specified
PathIterator
intersects the interior of a specified set of rectangular
 coordinates.
This method provides a basic facility for implementors of
 the
Shape
interface to implement support for the
Shape.intersects(double, double, double, double)
method.
This method object may conservatively return true in
 cases where the specified rectangular area intersects a
 segment of the path, but that segment does not represent a
 boundary between the interior and exterior of the path.
 Such a case may occur if some set of segments of the
 path are retraced in the reverse direction such that the
 two sets of segments cancel each other out without any
 interior area between them.
 To determine whether segments represent true boundaries of
 the interior of the path would require extensive calculations
 involving all of the segments of the path and the winding
 rule and are thus beyond the scope of this implementation.
Parameters:
pi
- the specified
PathIterator
x
- the specified X coordinate
y
- the specified Y coordinate
w
- the width of the specified rectangular coordinates
h
- the height of the specified rectangular coordinates
Returns:
true
if the specified
PathIterator
and
         the interior of the specified set of rectangular
         coordinates intersect each other;
false
otherwise.
Since:
1.6
intersects
public static
boolean
intersects
(
PathIterator
pi,
Rectangle2D
r)
Tests if the interior of the specified
PathIterator
intersects the interior of a specified
Rectangle2D
.
This method provides a basic facility for implementors of
 the
Shape
interface to implement support for the
Shape.intersects(Rectangle2D)
method.
This method object may conservatively return true in
 cases where the specified rectangular area intersects a
 segment of the path, but that segment does not represent a
 boundary between the interior and exterior of the path.
 Such a case may occur if some set of segments of the
 path are retraced in the reverse direction such that the
 two sets of segments cancel each other out without any
 interior area between them.
 To determine whether segments represent true boundaries of
 the interior of the path would require extensive calculations
 involving all of the segments of the path and the winding
 rule and are thus beyond the scope of this implementation.
Parameters:
pi
- the specified
PathIterator
r
- the specified
Rectangle2D
Returns:
true
if the specified
PathIterator
and
         the interior of the specified
Rectangle2D
intersect each other;
false
otherwise.
Since:
1.6
intersects
public final
boolean
intersects
(double x,
 double y,
 double w,
 double h)
Tests if the interior of the
Shape
intersects the
 interior of a specified rectangular area.
 The rectangular area is considered to intersect the
Shape
if any point is contained in both the interior of the
Shape
and the specified rectangular area.
The
Shape.intersects()
method allows a
Shape
implementation to conservatively return
true
when:
there is a high probability that the rectangular area and the
Shape
intersect, but
the calculations to accurately determine this intersection
 are prohibitively expensive.
This means that for some
Shapes
this method might
 return
true
even though the rectangular area does not
 intersect the
Shape
.
 The
Area
class performs
 more accurate computations of geometric intersection than most
Shape
objects and therefore can be used if a more precise
 answer is required.
This method object may conservatively return true in
 cases where the specified rectangular area intersects a
 segment of the path, but that segment does not represent a
 boundary between the interior and exterior of the path.
 Such a case may occur if some set of segments of the
 path are retraced in the reverse direction such that the
 two sets of segments cancel each other out without any
 interior area between them.
 To determine whether segments represent true boundaries of
 the interior of the path would require extensive calculations
 involving all of the segments of the path and the winding
 rule and are thus beyond the scope of this implementation.
Specified by:
intersects
in interface
Shape
Parameters:
x
- the X coordinate of the upper-left corner
          of the specified rectangular area
y
- the Y coordinate of the upper-left corner
          of the specified rectangular area
w
- the width of the specified rectangular area
h
- the height of the specified rectangular area
Returns:
true
if the interior of the
Shape
and
          the interior of the rectangular area intersect, or are
          both highly likely to intersect and intersection calculations
          would be too expensive to perform;
false
otherwise.
Since:
1.6
See Also:
Area
intersects
public final
boolean
intersects
(
Rectangle2D
r)
Tests if the interior of the
Shape
intersects the
 interior of a specified
Rectangle2D
.
 The
Shape.intersects()
method allows a
Shape
implementation to conservatively return
true
when:
there is a high probability that the
Rectangle2D
and the
Shape
intersect, but
the calculations to accurately determine this intersection
 are prohibitively expensive.
This means that for some
Shapes
this method might
 return
true
even though the
Rectangle2D
does not
 intersect the
Shape
.
 The
Area
class performs
 more accurate computations of geometric intersection than most
Shape
objects and therefore can be used if a more precise
 answer is required.
This method object may conservatively return true in
 cases where the specified rectangular area intersects a
 segment of the path, but that segment does not represent a
 boundary between the interior and exterior of the path.
 Such a case may occur if some set of segments of the
 path are retraced in the reverse direction such that the
 two sets of segments cancel each other out without any
 interior area between them.
 To determine whether segments represent true boundaries of
 the interior of the path would require extensive calculations
 involving all of the segments of the path and the winding
 rule and are thus beyond the scope of this implementation.
Specified by:
intersects
in interface
Shape
Parameters:
r
- the specified
Rectangle2D
Returns:
true
if the interior of the
Shape
and
          the interior of the specified
Rectangle2D
intersect, or are both highly likely to intersect and intersection
          calculations would be too expensive to perform;
false
otherwise.
Since:
1.6
See Also:
Shape.intersects(double, double, double, double)
getPathIterator
public final
PathIterator
getPathIterator
(
AffineTransform
at,
 double flatness)
Returns an iterator object that iterates along the
Shape
boundary and provides access to a flattened view of the
Shape
outline geometry.
Only SEG_MOVETO, SEG_LINETO, and SEG_CLOSE point types are
 returned by the iterator.
If an optional
AffineTransform
is specified,
 the coordinates returned in the iteration are transformed
 accordingly.
The amount of subdivision of the curved segments is controlled
 by the
flatness
parameter, which specifies the
 maximum distance that any point on the unflattened transformed
 curve can deviate from the returned flattened path segments.
 Note that a limit on the accuracy of the flattened path might be
 silently imposed, causing very small flattening parameters to be
 treated as larger values.  This limit, if there is one, is
 defined by the particular implementation that is used.
Each call to this method returns a fresh
PathIterator
object that traverses the
Shape
object geometry
 independently from any other
PathIterator
objects in use at
 the same time.
It is recommended, but not guaranteed, that objects
 implementing the
Shape
interface isolate iterations
 that are in process from any changes that might occur to the original
 object's geometry during such iterations.
The iterator for this class is not multi-threaded safe,
 which means that this
Path2D
class does not
 guarantee that modifications to the geometry of this
Path2D
object do not affect any iterations of
 that geometry that are already in process.
Specified by:
getPathIterator
in interface
Shape
Parameters:
at
- an optional
AffineTransform
to be applied to the
          coordinates as they are returned in the iteration, or
null
if untransformed coordinates are desired
flatness
- the maximum distance that the line segments used to
          approximate the curved segments are allowed to deviate
          from any point on the original curve
Returns:
a new
PathIterator
that independently traverses
         a flattened view of the geometry of the
Shape
.
Since:
1.6
clone
public abstract
Object
clone
()
Creates a new object of the same class as this object.
Overrides:
clone
in class
Object
Returns:
a clone of this instance.
Throws:
OutOfMemoryError
- if there is not enough memory.
Since:
1.6
See Also:
Cloneable
trimToSize
public abstract
void
trimToSize
()
Trims the capacity of this Path2D instance to its current
 size. An application can use this operation to minimize the
 storage of a path.
Since:
10
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.