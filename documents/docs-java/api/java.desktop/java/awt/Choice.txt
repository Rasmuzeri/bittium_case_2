Choice (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested
|
Field
|
Constr
|
Method
Detail:
Field |
Constr
|
Method
SEARCH
Module
java.desktop
Package
java.awt
Class Choice
java.lang.Object
java.awt.Component
java.awt.Choice
All Implemented Interfaces:
ImageObserver
,
ItemSelectable
,
MenuContainer
,
Serializable
,
Accessible
public class
Choice
extends
Component
implements
ItemSelectable
,
Accessible
The
Choice
class presents a pop-up menu of choices.
 The current choice is displayed as the title of the menu.
The following code example produces a pop-up menu:
Choice ColorChooser = new Choice();
 ColorChooser.add("Green");
 ColorChooser.add("Red");
 ColorChooser.add("Blue");
After this choice menu has been added to a panel,
 it appears as follows in its normal state:
In the picture,
"Green"
is the current choice.
 Pushing the mouse button down on the object causes a menu to
 appear with the current choice highlighted.
Some native platforms do not support arbitrary resizing of
Choice
components and the behavior of
setSize()/getSize()
is bound by
 such limitations.
 Native GUI
Choice
components' size are often bound by such
 attributes as font size and length of items contained within
 the
Choice
.
Since:
1.0
See Also:
Serialized Form
Nested Class Summary
Nested Classes
Modifier and Type
Class
Description
protected class
Choice.AccessibleAWTChoice
This class implements accessibility support for the
Choice
class.
Nested classes/interfaces declared in class java.awt.
Component
Component.AccessibleAWTComponent
,
Component.BaselineResizeBehavior
,
Component.BltBufferStrategy
,
Component.FlipBufferStrategy
Field Summary
Fields declared in class java.awt.
Component
accessibleContext
,
BOTTOM_ALIGNMENT
,
CENTER_ALIGNMENT
,
LEFT_ALIGNMENT
,
RIGHT_ALIGNMENT
,
TOP_ALIGNMENT
Fields declared in interface java.awt.image.
ImageObserver
ABORT
,
ALLBITS
,
ERROR
,
FRAMEBITS
,
HEIGHT
,
PROPERTIES
,
SOMEBITS
,
WIDTH
Constructor Summary
Constructors
Constructor
Description
Choice
()
Creates a new choice menu.
Method Summary
All Methods
Instance Methods
Concrete Methods
Deprecated Methods
Modifier and Type
Method
Description
void
add
(
String
item)
Adds an item to this
Choice
menu.
void
addItem
(
String
item)
Obsolete as of Java 2 platform v1.1.
void
addItemListener
(
ItemListener
l)
Adds the specified item listener to receive item events from
 this
Choice
menu.
void
addNotify
()
Creates the
Choice
's peer.
int
countItems
()
Deprecated.
As of JDK version 1.1,
 replaced by
getItemCount()
.
AccessibleContext
getAccessibleContext
()
Gets the
AccessibleContext
associated with this
Choice
.
String
getItem
(int index)
Gets the string at the specified index in this
Choice
menu.
int
getItemCount
()
Returns the number of items in this
Choice
menu.
ItemListener
[]
getItemListeners
()
Returns an array of all the item listeners
 registered on this choice.
<T extends
EventListener
>
T[]
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered
 as
Foo
Listener
s
 upon this
Choice
.
int
getSelectedIndex
()
Returns the index of the currently selected item.
String
getSelectedItem
()
Gets a representation of the current choice as a string.
Object
[]
getSelectedObjects
()
Returns an array (length 1) containing the currently selected
 item.
void
insert
(
String
item,
 int index)
Inserts the item into this choice at the specified position.
protected
String
paramString
()
Returns a string representing the state of this
Choice
menu.
protected void
processEvent
(
AWTEvent
e)
Processes events on this choice.
protected void
processItemEvent
(
ItemEvent
e)
Processes item events occurring on this
Choice
menu by dispatching them to any registered
ItemListener
objects.
void
remove
(int position)
Removes an item from the choice menu
 at the specified position.
void
remove
(
String
item)
Removes the first occurrence of
item
from the
Choice
menu.
void
removeAll
()
Removes all items from the choice menu.
void
removeItemListener
(
ItemListener
l)
Removes the specified item listener so that it no longer receives
 item events from this
Choice
menu.
void
select
(int pos)
Sets the selected item in this
Choice
menu to be the
 item at the specified position.
void
select
(
String
str)
Sets the selected item in this
Choice
menu
 to be the item whose name is equal to the specified string.
Methods declared in class java.awt.
Component
action
,
add
,
addComponentListener
,
addFocusListener
,
addHierarchyBoundsListener
,
addHierarchyListener
,
addInputMethodListener
,
addKeyListener
,
addMouseListener
,
addMouseMotionListener
,
addMouseWheelListener
,
addPropertyChangeListener
,
addPropertyChangeListener
,
applyComponentOrientation
,
areFocusTraversalKeysSet
,
bounds
,
checkImage
,
checkImage
,
coalesceEvents
,
contains
,
contains
,
createImage
,
createImage
,
createVolatileImage
,
createVolatileImage
,
deliverEvent
,
disable
,
disableEvents
,
dispatchEvent
,
doLayout
,
enable
,
enable
,
enableEvents
,
enableInputMethods
,
firePropertyChange
,
firePropertyChange
,
firePropertyChange
,
firePropertyChange
,
firePropertyChange
,
firePropertyChange
,
firePropertyChange
,
firePropertyChange
,
firePropertyChange
,
getAlignmentX
,
getAlignmentY
,
getBackground
,
getBaseline
,
getBaselineResizeBehavior
,
getBounds
,
getBounds
,
getColorModel
,
getComponentAt
,
getComponentAt
,
getComponentListeners
,
getComponentOrientation
,
getCursor
,
getDropTarget
,
getFocusCycleRootAncestor
,
getFocusListeners
,
getFocusTraversalKeys
,
getFocusTraversalKeysEnabled
,
getFont
,
getFontMetrics
,
getForeground
,
getGraphics
,
getGraphicsConfiguration
,
getHeight
,
getHierarchyBoundsListeners
,
getHierarchyListeners
,
getIgnoreRepaint
,
getInputContext
,
getInputMethodListeners
,
getInputMethodRequests
,
getKeyListeners
,
getLocale
,
getLocation
,
getLocation
,
getLocationOnScreen
,
getMaximumSize
,
getMinimumSize
,
getMouseListeners
,
getMouseMotionListeners
,
getMousePosition
,
getMouseWheelListeners
,
getName
,
getParent
,
getPreferredSize
,
getPropertyChangeListeners
,
getPropertyChangeListeners
,
getSize
,
getSize
,
getToolkit
,
getTreeLock
,
getWidth
,
getX
,
getY
,
gotFocus
,
handleEvent
,
hasFocus
,
hide
,
imageUpdate
,
inside
,
invalidate
,
isBackgroundSet
,
isCursorSet
,
isDisplayable
,
isDoubleBuffered
,
isEnabled
,
isFocusable
,
isFocusCycleRoot
,
isFocusOwner
,
isFocusTraversable
,
isFontSet
,
isForegroundSet
,
isLightweight
,
isMaximumSizeSet
,
isMinimumSizeSet
,
isOpaque
,
isPreferredSizeSet
,
isShowing
,
isValid
,
isVisible
,
keyDown
,
keyUp
,
layout
,
list
,
list
,
list
,
list
,
list
,
locate
,
location
,
lostFocus
,
minimumSize
,
mouseDown
,
mouseDrag
,
mouseEnter
,
mouseExit
,
mouseMove
,
mouseUp
,
move
,
nextFocus
,
paint
,
paintAll
,
postEvent
,
preferredSize
,
prepareImage
,
prepareImage
,
print
,
printAll
,
processComponentEvent
,
processFocusEvent
,
processHierarchyBoundsEvent
,
processHierarchyEvent
,
processInputMethodEvent
,
processKeyEvent
,
processMouseEvent
,
processMouseMotionEvent
,
processMouseWheelEvent
,
remove
,
removeComponentListener
,
removeFocusListener
,
removeHierarchyBoundsListener
,
removeHierarchyListener
,
removeInputMethodListener
,
removeKeyListener
,
removeMouseListener
,
removeMouseMotionListener
,
removeMouseWheelListener
,
removeNotify
,
removePropertyChangeListener
,
removePropertyChangeListener
,
repaint
,
repaint
,
repaint
,
repaint
,
requestFocus
,
requestFocus
,
requestFocus
,
requestFocus
,
requestFocusInWindow
,
requestFocusInWindow
,
requestFocusInWindow
,
reshape
,
resize
,
resize
,
revalidate
,
setBackground
,
setBounds
,
setBounds
,
setComponentOrientation
,
setCursor
,
setDropTarget
,
setEnabled
,
setFocusable
,
setFocusTraversalKeys
,
setFocusTraversalKeysEnabled
,
setFont
,
setForeground
,
setIgnoreRepaint
,
setLocale
,
setLocation
,
setLocation
,
setMaximumSize
,
setMinimumSize
,
setMixingCutoutShape
,
setName
,
setPreferredSize
,
setSize
,
setSize
,
setVisible
,
show
,
show
,
size
,
toString
,
transferFocus
,
transferFocusBackward
,
transferFocusUpCycle
,
update
,
validate
Methods declared in class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
wait
,
wait
,
wait
Constructor Details
Choice
public
Choice
()
       throws
HeadlessException
Creates a new choice menu. The menu initially has no items in it.
By default, the first item added to the choice menu becomes the
 selected item, until a different selection is made by the user
 by calling one of the
select
methods.
Throws:
HeadlessException
- if GraphicsEnvironment.isHeadless()
 returns true
See Also:
GraphicsEnvironment.isHeadless()
select(int)
select(java.lang.String)
Method Details
addNotify
public
void
addNotify
()
Creates the
Choice
's peer.  This peer allows us
 to change the look
 of the
Choice
without changing its functionality.
Overrides:
addNotify
in class
Component
See Also:
Component.getToolkit()
getItemCount
public
int
getItemCount
()
Returns the number of items in this
Choice
menu.
Returns:
the number of items in this
Choice
menu
Since:
1.1
See Also:
getItem(int)
countItems
@Deprecated
public
int
countItems
()
Deprecated.
As of JDK version 1.1,
 replaced by
getItemCount()
.
Returns the number of items in this
Choice
menu.
Returns:
the number of items in this
Choice
menu
getItem
public
String
getItem
(int index)
Gets the string at the specified index in this
Choice
menu.
Parameters:
index
- the index at which to begin
Returns:
the item at the specified index
See Also:
getItemCount()
add
public
void
add
(
String
item)
Adds an item to this
Choice
menu.
Parameters:
item
- the item to be added
Throws:
NullPointerException
- if the item's value is
null
Since:
1.1
addItem
public
void
addItem
(
String
item)
Obsolete as of Java 2 platform v1.1.  Please use the
add
method instead.
Adds an item to this
Choice
menu.
Parameters:
item
- the item to be added
Throws:
NullPointerException
- if the item's value is equal to
null
insert
public
void
insert
(
String
item,
 int index)
Inserts the item into this choice at the specified position.
 Existing items at an index greater than or equal to
index
are shifted up by one to accommodate
 the new item.  If
index
is greater than or
 equal to the number of items in this choice,
item
is added to the end of this choice.
If the item is the first one being added to the choice,
 then the item becomes selected.  Otherwise, if the
 selected item was one of the items shifted, the first
 item in the choice becomes the selected item.  If the
 selected item was no among those shifted, it remains
 the selected item.
Parameters:
item
- the non-
null
item to be inserted
index
- the position at which the item should be inserted
Throws:
IllegalArgumentException
- if index is less than 0
remove
public
void
remove
(
String
item)
Removes the first occurrence of
item
from the
Choice
menu.  If the item
 being removed is the currently selected item,
 then the first item in the choice becomes the
 selected item.  Otherwise, the currently selected
 item remains selected (and the selected index is
 updated accordingly).
Parameters:
item
- the item to remove from this
Choice
menu
Throws:
IllegalArgumentException
- if the item doesn't
                     exist in the choice menu
Since:
1.1
remove
public
void
remove
(int position)
Removes an item from the choice menu
 at the specified position.  If the item
 being removed is the currently selected item,
 then the first item in the choice becomes the
 selected item.  Otherwise, the currently selected
 item remains selected (and the selected index is
 updated accordingly).
Parameters:
position
- the position of the item
Throws:
IndexOutOfBoundsException
- if the specified
          position is out of bounds
Since:
1.1
removeAll
public
void
removeAll
()
Removes all items from the choice menu.
Since:
1.1
See Also:
remove(java.lang.String)
getSelectedItem
public
String
getSelectedItem
()
Gets a representation of the current choice as a string.
Returns:
a string representation of the currently
                     selected item in this choice menu
See Also:
getSelectedIndex()
getSelectedObjects
public
Object
[]
getSelectedObjects
()
Returns an array (length 1) containing the currently selected
 item.  If this choice has no items, returns
null
.
Specified by:
getSelectedObjects
in interface
ItemSelectable
Returns:
the list of selected objects, or
null
See Also:
ItemSelectable
getSelectedIndex
public
int
getSelectedIndex
()
Returns the index of the currently selected item.
 If nothing is selected, returns -1.
Returns:
the index of the currently selected item, or -1 if nothing
  is currently selected
See Also:
getSelectedItem()
select
public
void
select
(int pos)
Sets the selected item in this
Choice
menu to be the
 item at the specified position.
Note that this method should be primarily used to
 initially select an item in this component.
 Programmatically calling this method will
not
trigger
 an
ItemEvent
.  The only way to trigger an
ItemEvent
is by user interaction.
Parameters:
pos
- the position of the selected item
Throws:
IllegalArgumentException
- if the specified
                            position is greater than the
                            number of items or less than zero
See Also:
getSelectedItem()
getSelectedIndex()
select
public
void
select
(
String
str)
Sets the selected item in this
Choice
menu
 to be the item whose name is equal to the specified string.
 If more than one item matches (is equal to) the specified string,
 the one with the smallest index is selected.
Note that this method should be primarily used to
 initially select an item in this component.
 Programmatically calling this method will
not
trigger
 an
ItemEvent
.  The only way to trigger an
ItemEvent
is by user interaction.
Parameters:
str
- the specified string
See Also:
getSelectedItem()
getSelectedIndex()
addItemListener
public
void
addItemListener
(
ItemListener
l)
Adds the specified item listener to receive item events from
 this
Choice
menu.  Item events are sent in response
 to user input, but not in response to calls to
select
.
 If l is
null
, no exception is thrown and no action
 is performed.
Refer to
AWT Threading Issues
for details on AWT's threading model.
Specified by:
addItemListener
in interface
ItemSelectable
Parameters:
l
- the item listener
Since:
1.1
See Also:
removeItemListener(java.awt.event.ItemListener)
getItemListeners()
select(int)
ItemEvent
ItemListener
removeItemListener
public
void
removeItemListener
(
ItemListener
l)
Removes the specified item listener so that it no longer receives
 item events from this
Choice
menu.
 If l is
null
, no exception is thrown and no
 action is performed.
Refer to
AWT Threading Issues
for details on AWT's threading model.
Specified by:
removeItemListener
in interface
ItemSelectable
Parameters:
l
- the item listener
Since:
1.1
See Also:
addItemListener(java.awt.event.ItemListener)
getItemListeners()
ItemEvent
ItemListener
getItemListeners
public
ItemListener
[]
getItemListeners
()
Returns an array of all the item listeners
 registered on this choice.
Returns:
all of this choice's
ItemListener
s
         or an empty array if no item
         listeners are currently registered
Since:
1.4
See Also:
addItemListener(java.awt.event.ItemListener)
removeItemListener(java.awt.event.ItemListener)
ItemEvent
ItemListener
getListeners
public
<T extends
EventListener
>
T[]
getListeners
(
Class
<T> listenerType)
Returns an array of all the objects currently registered
 as
Foo
Listener
s
 upon this
Choice
.
Foo
Listener
s are registered using the
add
Foo
Listener
method.
You can specify the
listenerType
argument
 with a class literal, such as
Foo
Listener.class
.
 For example, you can query a
Choice c
for its item listeners with the following code:
ItemListener[] ils = (ItemListener[])(c.getListeners(ItemListener.class));
If no such listeners exist, this method returns an empty array.
Overrides:
getListeners
in class
Component
Type Parameters:
T
- the type of the listeners
Parameters:
listenerType
- the type of listeners requested; this parameter
          should specify an interface that descends from
java.util.EventListener
Returns:
an array of all objects registered as
Foo
Listener
s on this choice,
          or an empty array if no such
          listeners have been added
Throws:
ClassCastException
- if
listenerType
doesn't specify a class or interface that implements
java.util.EventListener
Since:
1.3
See Also:
getItemListeners()
processEvent
protected
void
processEvent
(
AWTEvent
e)
Processes events on this choice. If the event is an
 instance of
ItemEvent
, it invokes the
processItemEvent
method. Otherwise, it calls its
 superclass's
processEvent
method.
Note that if the event parameter is
null
the behavior is unspecified and may result in an
 exception.
Overrides:
processEvent
in class
Component
Parameters:
e
- the event
Since:
1.1
See Also:
ItemEvent
processItemEvent(java.awt.event.ItemEvent)
processItemEvent
protected
void
processItemEvent
(
ItemEvent
e)
Processes item events occurring on this
Choice
menu by dispatching them to any registered
ItemListener
objects.
This method is not called unless item events are
 enabled for this component. Item events are enabled
 when one of the following occurs:
An
ItemListener
object is registered
 via
addItemListener
.
Item events are enabled via
enableEvents
.
Note that if the event parameter is
null
the behavior is unspecified and may result in an
 exception.
Parameters:
e
- the item event
Since:
1.1
See Also:
ItemEvent
ItemListener
addItemListener(ItemListener)
Component.enableEvents(long)
paramString
protected
String
paramString
()
Returns a string representing the state of this
Choice
menu. This method is intended to be used only for debugging purposes,
 and the content and format of the returned string may vary between
 implementations. The returned string may be empty but may not be
null
.
Overrides:
paramString
in class
Component
Returns:
the parameter string of this
Choice
menu
getAccessibleContext
public
AccessibleContext
getAccessibleContext
()
Gets the
AccessibleContext
associated with this
Choice
. For
Choice
components,
 the
AccessibleContext
takes the form of an
AccessibleAWTChoice
. A new
AccessibleAWTChoice
instance is created if necessary.
Specified by:
getAccessibleContext
in interface
Accessible
Overrides:
getAccessibleContext
in class
Component
Returns:
an
AccessibleAWTChoice
that serves as the
AccessibleContext
of this
Choice
Since:
1.3
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.