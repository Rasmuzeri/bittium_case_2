Uses of Class java.util.logging.Level (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Class
java.util.logging.Level
Packages that use
Level
Package
Description
java.util.logging
Provides the classes and interfaces of
 the Java 2 platform's core logging facilities.
javax.sql.rowset.spi
The standard classes and interfaces that a third party vendor has to
 use in its implementation of a synchronization provider.
Uses of
Level
in
java.util.logging
Fields in
java.util.logging
declared as
Level
Modifier and Type
Field
Description
static final
Level
Level.
ALL
ALL indicates that all messages should be logged.
static final
Level
Level.
CONFIG
CONFIG is a message level for static configuration messages.
static final
Level
Level.
FINE
FINE is a message level providing tracing information.
static final
Level
Level.
FINER
FINER indicates a fairly detailed tracing message.
static final
Level
Level.
FINEST
FINEST indicates a highly detailed tracing message.
static final
Level
Level.
INFO
INFO is a message level for informational messages.
static final
Level
Level.
OFF
OFF is a special level that can be used to turn off logging.
static final
Level
Level.
SEVERE
SEVERE is a message level indicating a serious failure.
static final
Level
Level.
WARNING
WARNING is a message level indicating a potential problem.
Methods in
java.util.logging
that return
Level
Modifier and Type
Method
Description
Level
Handler.
getLevel
()
Get the log level specifying which messages will be
 logged by this
Handler
.
Level
Logger.
getLevel
()
Get the log Level that has been specified for this Logger.
Level
LogRecord.
getLevel
()
Get the logging message level, for example Level.SEVERE.
Level
MemoryHandler.
getPushLevel
()
Get the
pushLevel
.
static
Level
Level.
parse
(
String
name)
Parse a level name string into a Level.
Methods in
java.util.logging
with parameters of type
Level
Modifier and Type
Method
Description
boolean
Logger.
isLoggable
(
Level
level)
Check if a message of the given level would actually be logged
 by this logger.
void
Logger.
log
(
Level
level,
String
msg)
Log a message, with no arguments.
void
Logger.
log
(
Level
level,
String
msg,
Object
param1)
Log a message, with one object parameter.
void
Logger.
log
(
Level
level,
String
msg,
Object
[] params)
Log a message, with an array of object arguments.
void
Logger.
log
(
Level
level,
String
msg,
Throwable
thrown)
Log a message, with associated Throwable information.
void
Logger.
log
(
Level
level,
Throwable
thrown,
Supplier
<
String
> msgSupplier)
Log a lazily constructed message, with associated Throwable information.
void
Logger.
log
(
Level
level,
Supplier
<
String
> msgSupplier)
Log a message, which is only to be constructed if the logging level
 is such that the message will actually be logged.
void
Logger.
logp
(
Level
level,
String
sourceClass,
String
sourceMethod,
String
msg)
Log a message, specifying source class and method,
 with no arguments.
void
Logger.
logp
(
Level
level,
String
sourceClass,
String
sourceMethod,
String
msg,
Object
param1)
Log a message, specifying source class and method,
 with a single object parameter to the log message.
void
Logger.
logp
(
Level
level,
String
sourceClass,
String
sourceMethod,
String
msg,
Object
[] params)
Log a message, specifying source class and method,
 with an array of object arguments.
void
Logger.
logp
(
Level
level,
String
sourceClass,
String
sourceMethod,
String
msg,
Throwable
thrown)
Log a message, specifying source class and method,
 with associated Throwable information.
void
Logger.
logp
(
Level
level,
String
sourceClass,
String
sourceMethod,
Throwable
thrown,
Supplier
<
String
> msgSupplier)
Log a lazily constructed message, specifying source class and method,
 with associated Throwable information.
void
Logger.
logp
(
Level
level,
String
sourceClass,
String
sourceMethod,
Supplier
<
String
> msgSupplier)
Log a lazily constructed message, specifying source class and method,
 with no arguments.
void
Logger.
logrb
(
Level
level,
String
sourceClass,
String
sourceMethod,
String
bundleName,
String
msg)
Deprecated.
Use
Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Object...)
instead.
void
Logger.
logrb
(
Level
level,
String
sourceClass,
String
sourceMethod,
String
bundleName,
String
msg,
Object
param1)
Deprecated.
Use
Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Object...)
instead
void
Logger.
logrb
(
Level
level,
String
sourceClass,
String
sourceMethod,
String
bundleName,
String
msg,
Object
[] params)
Deprecated.
Use
Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Object...)
instead.
void
Logger.
logrb
(
Level
level,
String
sourceClass,
String
sourceMethod,
String
bundleName,
String
msg,
Throwable
thrown)
Deprecated.
Use
Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Throwable)
instead.
void
Logger.
logrb
(
Level
level,
String
sourceClass,
String
sourceMethod,
ResourceBundle
bundle,
String
msg,
Object
... params)
Log a message, specifying source class, method, and resource bundle,
 with an optional list of message parameters.
void
Logger.
logrb
(
Level
level,
String
sourceClass,
String
sourceMethod,
ResourceBundle
bundle,
String
msg,
Throwable
thrown)
Log a message, specifying source class, method, and resource bundle,
 with associated Throwable information.
void
Logger.
logrb
(
Level
level,
ResourceBundle
bundle,
String
msg,
Object
... params)
Log a message, specifying source class, method, and resource bundle,
 with an optional list of message parameters.
void
Logger.
logrb
(
Level
level,
ResourceBundle
bundle,
String
msg,
Throwable
thrown)
Log a message, specifying source class, method, and resource bundle,
 with associated Throwable information.
void
Handler.
setLevel
(
Level
newLevel)
Set the log level specifying which message levels will be
 logged by this
Handler
.
void
Logger.
setLevel
(
Level
newLevel)
Set the log level specifying which message levels will be
 logged by this logger.
void
LogRecord.
setLevel
(
Level
level)
Set the logging message level, for example Level.SEVERE.
void
MemoryHandler.
setPushLevel
(
Level
newLevel)
Set the
pushLevel
.
Constructors in
java.util.logging
with parameters of type
Level
Modifier
Constructor
Description
LogRecord
(
Level
level,
String
msg)
Construct a LogRecord with the given level and message values.
MemoryHandler
(
Handler
target,
 int size,
Level
pushLevel)
Create a
MemoryHandler
.
Uses of
Level
in
javax.sql.rowset.spi
Methods in
javax.sql.rowset.spi
with parameters of type
Level
Modifier and Type
Method
Description
static void
SyncFactory.
setLogger
(
Logger
logger,
Level
level)
Sets the logging object that is used by
SyncProvider
implementations provided by the
SyncFactory
SPI.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.