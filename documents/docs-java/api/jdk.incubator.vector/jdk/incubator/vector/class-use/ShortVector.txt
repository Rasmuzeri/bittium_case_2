Uses of Class jdk.incubator.vector.ShortVector (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Class
jdk.incubator.vector.ShortVector
Packages that use
ShortVector
Package
Description
jdk.incubator.vector
Incubating Feature.
Will be removed in a future release.
Uses of
ShortVector
in
jdk.incubator.vector
Methods in
jdk.incubator.vector
that return
ShortVector
Modifier and Type
Method
Description
final
ShortVector
ShortVector.
abs
()
Returns the absolute value of this vector.
final
ShortVector
ShortVector.
add
(short e)
Adds this vector to the broadcast of an input scalar.
final
ShortVector
ShortVector.
add
(short e,
VectorMask
<
Short
> m)
Adds this vector to the broadcast of an input scalar,
 selecting lane elements controlled by a mask.
final
ShortVector
ShortVector.
add
(
Vector
<
Short
> v)
Adds this vector to a second input vector.
final
ShortVector
ShortVector.
add
(
Vector
<
Short
> v,
VectorMask
<
Short
> m)
Adds this vector to a second input vector, selecting lanes
 under the control of a mask.
abstract
ShortVector
ShortVector.
addIndex
(int scale)
Adds the lanes of this vector to their corresponding
 lane numbers, scaled by a given constant.
final
ShortVector
ShortVector.
and
(short e)
Computes the bitwise logical conjunction (
&
)
 of this vector and a scalar.
final
ShortVector
ShortVector.
and
(
Vector
<
Short
> v)
Computes the bitwise logical conjunction (
&
)
 of this vector and a second input vector.
final
ShortVector
ShortVector.
bitwiseBlend
(short bits,
 short mask)
Blends together the bits of a vector and a scalar under
 the control of another scalar, which supplies mask bits.
final
ShortVector
ShortVector.
bitwiseBlend
(short bits,
Vector
<
Short
> mask)
Blends together the bits of a vector and a scalar under
 the control of another vector, which supplies mask bits.
final
ShortVector
ShortVector.
bitwiseBlend
(
Vector
<
Short
> bits,
 short mask)
Blends together the bits of two vectors under
 the control of a scalar, which supplies mask bits.
final
ShortVector
ShortVector.
bitwiseBlend
(
Vector
<
Short
> bits,
Vector
<
Short
> mask)
Blends together the bits of two vectors under
 the control of a third, which supplies mask bits.
final
ShortVector
ShortVector.
blend
(long e,
VectorMask
<
Short
> m)
Replaces selected lanes of this vector with
 a scalar value
 under the control of a mask.
final
ShortVector
ShortVector.
blend
(short e,
VectorMask
<
Short
> m)
Replaces selected lanes of this vector with
 a scalar value
 under the control of a mask.
abstract
ShortVector
ShortVector.
blend
(
Vector
<
Short
> v,
VectorMask
<
Short
> m)
Replaces selected lanes of this vector with
 corresponding lanes from a second input vector
 under the control of a mask.
abstract
ShortVector
ShortVector.
broadcast
(long e)
Returns a vector of the same species as this one
 where all lane elements are set to
 the primitive value
e
.
abstract
ShortVector
ShortVector.
broadcast
(short e)
Returns a vector of the same species as this one
 where all lane elements are set to
 the primitive value
e
.
static
ShortVector
ShortVector.
broadcast
(
VectorSpecies
<
Short
> species,
 long e)
Returns a vector of the given species
 where all lane elements are set to
 the primitive value
e
.
static
ShortVector
ShortVector.
broadcast
(
VectorSpecies
<
Short
> species,
 short e)
Returns a vector of the given species
 where all lane elements are set to
 the primitive value
e
.
abstract
ShortVector
ShortVector.
compress
(
VectorMask
<
Short
> m)
Compresses the lane elements of this vector selecting lanes
 under the control of a specific mask.
final
ShortVector
ShortVector.
div
(short e)
Divides this vector by the broadcast of an input scalar.
final
ShortVector
ShortVector.
div
(short e,
VectorMask
<
Short
> m)
Divides this vector by the broadcast of an input scalar,
 selecting lane elements controlled by a mask.
final
ShortVector
ShortVector.
div
(
Vector
<
Short
> v)
Divides this vector by a second input vector.
final
ShortVector
ShortVector.
div
(
Vector
<
Short
> v,
VectorMask
<
Short
> m)
Divides this vector by a second input vector
 under the control of a mask.
abstract
ShortVector
ShortVector.
expand
(
VectorMask
<
Short
> m)
Expands the lane elements of this vector
 under the control of a specific mask.
static
ShortVector
ShortVector.
fromArray
(
VectorSpecies
<
Short
> species,
 short[] a,
 int offset)
Loads a vector from an array of type
short[]
starting at an offset.
static
ShortVector
ShortVector.
fromArray
(
VectorSpecies
<
Short
> species,
 short[] a,
 int offset,
 int[] indexMap,
 int mapOffset)
Gathers a new vector composed of elements from an array of type
short[]
,
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
static
ShortVector
ShortVector.
fromArray
(
VectorSpecies
<
Short
> species,
 short[] a,
 int offset,
 int[] indexMap,
 int mapOffset,
VectorMask
<
Short
> m)
Gathers a new vector composed of elements from an array of type
short[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
static
ShortVector
ShortVector.
fromArray
(
VectorSpecies
<
Short
> species,
 short[] a,
 int offset,
VectorMask
<
Short
> m)
Loads a vector from an array of type
short[]
starting at an offset and using a mask.
static
ShortVector
ShortVector.
fromCharArray
(
VectorSpecies
<
Short
> species,
 char[] a,
 int offset)
Loads a vector from an array of type
char[]
starting at an offset.
static
ShortVector
ShortVector.
fromCharArray
(
VectorSpecies
<
Short
> species,
 char[] a,
 int offset,
 int[] indexMap,
 int mapOffset)
Gathers a new vector composed of elements from an array of type
char[]
,
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
static
ShortVector
ShortVector.
fromCharArray
(
VectorSpecies
<
Short
> species,
 char[] a,
 int offset,
 int[] indexMap,
 int mapOffset,
VectorMask
<
Short
> m)
Gathers a new vector composed of elements from an array of type
char[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
static
ShortVector
ShortVector.
fromCharArray
(
VectorSpecies
<
Short
> species,
 char[] a,
 int offset,
VectorMask
<
Short
> m)
Loads a vector from an array of type
char[]
starting at an offset and using a mask.
static
ShortVector
ShortVector.
fromMemorySegment
(
VectorSpecies
<
Short
> species,
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo)
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment.
static
ShortVector
ShortVector.
fromMemorySegment
(
VectorSpecies
<
Short
> species,
MemorySegment
PREVIEW
ms,
 long offset,
ByteOrder
bo,
VectorMask
<
Short
> m)
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment
 and using a mask.
final
ShortVector
ShortVector.
lanewise
(
VectorOperators.Binary
op,
 long e)
Combines the lane values of this vector
 with the value of a broadcast scalar.
final
ShortVector
ShortVector.
lanewise
(
VectorOperators.Binary
op,
 long e,
VectorMask
<
Short
> m)
Combines the corresponding lane values of this vector
 with those of a second input vector,
 with selection of lane elements controlled by a mask.
final
ShortVector
ShortVector.
lanewise
(
VectorOperators.Binary
op,
 short e)
Combines the lane values of this vector
 with the value of a broadcast scalar.
final
ShortVector
ShortVector.
lanewise
(
VectorOperators.Binary
op,
 short e,
VectorMask
<
Short
> m)
Combines the lane values of this vector
 with the value of a broadcast scalar,
 with selection of lane elements controlled by a mask.
abstract
ShortVector
ShortVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Short
> v)
Combines the corresponding lane values of this vector
 with those of a second input vector.
abstract
ShortVector
ShortVector.
lanewise
(
VectorOperators.Binary
op,
Vector
<
Short
> v,
VectorMask
<
Short
> m)
Combines the corresponding lane values of this vector
 with those of a second input vector,
 with selection of lane elements controlled by a mask.
final
ShortVector
ShortVector.
lanewise
(
VectorOperators.Ternary
op,
 short e1,
 short e2)
Combines the lane values of this vector
 with the values of two broadcast scalars.
final
ShortVector
ShortVector.
lanewise
(
VectorOperators.Ternary
op,
 short e1,
 short e2,
VectorMask
<
Short
> m)
Combines the lane values of this vector
 with the values of two broadcast scalars,
 with selection of lane elements controlled by a mask.
final
ShortVector
ShortVector.
lanewise
(
VectorOperators.Ternary
op,
 short e1,
Vector
<
Short
> v2)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar.
final
ShortVector
ShortVector.
lanewise
(
VectorOperators.Ternary
op,
 short e1,
Vector
<
Short
> v2,
VectorMask
<
Short
> m)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar,
 with selection of lane elements controlled by a mask.
final
ShortVector
ShortVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Short
> v1,
 short e2)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar.
final
ShortVector
ShortVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Short
> v1,
 short e2,
VectorMask
<
Short
> m)
Combines the lane values of this vector
 with the values of another vector and a broadcast scalar,
 with selection of lane elements controlled by a mask.
abstract
ShortVector
ShortVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Short
> v1,
Vector
<
Short
> v2)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector.
abstract
ShortVector
ShortVector.
lanewise
(
VectorOperators.Ternary
op,
Vector
<
Short
> v1,
Vector
<
Short
> v2,
VectorMask
<
Short
> m)
Combines the corresponding lane values of this vector
 with the lanes of a second and a third input vector,
 with selection of lane elements controlled by a mask.
abstract
ShortVector
ShortVector.
lanewise
(
VectorOperators.Unary
op)
Operates on the lane values of this vector.
abstract
ShortVector
ShortVector.
lanewise
(
VectorOperators.Unary
op,
VectorMask
<
Short
> m)
Operates on the lane values of this vector,
 with selection of lane elements controlled by a mask.
final
ShortVector
ShortVector.
max
(short e)
Computes the larger of this vector and the broadcast of an input scalar.
final
ShortVector
ShortVector.
max
(
Vector
<
Short
> v)
Computes the larger of this vector and a second input vector.
final
ShortVector
ShortVector.
min
(short e)
Computes the smaller of this vector and the broadcast of an input scalar.
final
ShortVector
ShortVector.
min
(
Vector
<
Short
> v)
Computes the smaller of this vector and a second input vector.
final
ShortVector
ShortVector.
mul
(short e)
Multiplies this vector by the broadcast of an input scalar.
final
ShortVector
ShortVector.
mul
(short e,
VectorMask
<
Short
> m)
Multiplies this vector by the broadcast of an input scalar,
 selecting lane elements controlled by a mask.
final
ShortVector
ShortVector.
mul
(
Vector
<
Short
> v)
Multiplies this vector by a second input vector.
final
ShortVector
ShortVector.
mul
(
Vector
<
Short
> v,
VectorMask
<
Short
> m)
Multiplies this vector by a second input vector
 under the control of a mask.
final
ShortVector
ShortVector.
neg
()
Negates this vector.
final
ShortVector
ShortVector.
not
()
Computes the bitwise logical complement (
~
)
 of this vector.
final
ShortVector
ShortVector.
or
(short e)
Computes the bitwise logical disjunction (
|
)
 of this vector and a scalar.
final
ShortVector
ShortVector.
or
(
Vector
<
Short
> v)
Computes the bitwise logical disjunction (
|
)
 of this vector and a second input vector.
abstract
ShortVector
ShortVector.
rearrange
(
VectorShuffle
<
Short
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle.
abstract
ShortVector
ShortVector.
rearrange
(
VectorShuffle
<
Short
> s,
Vector
<
Short
> v)
Rearranges the lane elements of two vectors, selecting lanes
 under the control of a specific shuffle, using both normal and
 exceptional indexes in the shuffle to steer data.
abstract
ShortVector
ShortVector.
rearrange
(
VectorShuffle
<
Short
> s,
VectorMask
<
Short
> m)
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle and a mask.
abstract
ShortVector
Vector.
reinterpretAsShorts
()
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
short
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
abstract
ShortVector
ShortVector.
selectFrom
(
Vector
<
Short
> v)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector
v
.
abstract
ShortVector
ShortVector.
selectFrom
(
Vector
<
Short
> s,
VectorMask
<
Short
> m)
Using index values stored in the lanes of this vector,
 assemble values stored in second vector, under the control
 of a mask.
abstract
ShortVector
ShortVector.
slice
(int origin)
Slices a segment of adjacent lanes, starting at a given
origin
lane in the current vector.
abstract
ShortVector
ShortVector.
slice
(int origin,
Vector
<
Short
> v1)
Slices a segment of adjacent lanes, starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
final
ShortVector
ShortVector.
slice
(int origin,
Vector
<
Short
> w,
VectorMask
<
Short
> m)
Slices a segment of adjacent lanes
 under the control of a mask,
 starting at a given
origin
lane in the current vector, and continuing (as
 needed) into an immediately following vector.
final
ShortVector
ShortVector.
sub
(short e)
Subtracts an input scalar from this vector.
final
ShortVector
ShortVector.
sub
(short e,
VectorMask
<
Short
> m)
Subtracts an input scalar from this vector
 under the control of a mask.
final
ShortVector
ShortVector.
sub
(
Vector
<
Short
> v)
Subtracts a second input vector from this vector.
final
ShortVector
ShortVector.
sub
(
Vector
<
Short
> v,
VectorMask
<
Short
> m)
Subtracts a second input vector from this vector
 under the control of a mask.
abstract
ShortVector
ShortVector.
unslice
(int origin)
Reverses a
slice()
, inserting
 the current vector as a slice within a "background" input
 of zero lane values.
abstract
ShortVector
ShortVector.
unslice
(int origin,
Vector
<
Short
> w,
 int part)
Reverses a
slice()
, inserting
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
abstract
ShortVector
ShortVector.
unslice
(int origin,
Vector
<
Short
> w,
 int part,
VectorMask
<
Short
> m)
Reverses a
slice()
, inserting
 (under the control of a mask)
 the current vector as a slice within another "background" input
 vector, which is regarded as one or the other input to a
 hypothetical subsequent
slice()
operation.
final
ShortVector
ShortVector.
viewAsIntegralLanes
()
Views this vector as a vector of the same shape, length, and
 contents, but a lane type that is not a floating-point type.
abstract
ShortVector
ShortVector.
withLane
(int i,
 short e)
Replaces the lane element of this vector at lane index
i
with
 value
e
.
static
ShortVector
ShortVector.
zero
(
VectorSpecies
<
Short
> species)
Returns a vector of the given species
 where all lane elements are set to
 zero, the default primitive value.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.