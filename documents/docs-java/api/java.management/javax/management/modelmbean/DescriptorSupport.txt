DescriptorSupport (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr
|
Method
Detail:
Field |
Constr
|
Method
SEARCH
Module
java.management
Package
javax.management.modelmbean
Class DescriptorSupport
java.lang.Object
javax.management.modelmbean.DescriptorSupport
All Implemented Interfaces:
Serializable
,
Cloneable
,
Descriptor
public class
DescriptorSupport
extends
Object
implements
Descriptor
This class represents the metadata set for a ModelMBean element.  A
 descriptor is part of the ModelMBeanInfo,
 ModelMBeanNotificationInfo, ModelMBeanAttributeInfo,
 ModelMBeanConstructorInfo, and ModelMBeanParameterInfo.
A descriptor consists of a collection of fields.  Each field is in
 fieldname=fieldvalue format.  Field names are not case sensitive,
 case will be preserved on field values.
All field names and values are not predefined. New fields can be
 defined and added by any program.  Some fields have been predefined
 for consistency of implementation and support by the
 ModelMBeanInfo, ModelMBeanAttributeInfo, ModelMBeanConstructorInfo,
 ModelMBeanNotificationInfo, ModelMBeanOperationInfo and ModelMBean
 classes.
The
serialVersionUID
of this class is
-6292969195866300415L
.
Since:
1.5
See Also:
Serialized Form
Constructor Summary
Constructors
Constructor
Description
DescriptorSupport
()
Descriptor default constructor.
DescriptorSupport
(int initNumFields)
Descriptor constructor.
DescriptorSupport
(
String
inStr)
Descriptor constructor taking an XML String.
DescriptorSupport
(
String
... fields)
Constructor taking fields in the
fieldName=fieldValue
format.
DescriptorSupport
(
String
[] fieldNames,
Object
[] fieldValues)
Constructor taking field names and field values.
DescriptorSupport
(
DescriptorSupport
inDescr)
Descriptor constructor taking a Descriptor as parameter.
Method Summary
All Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
Object
clone
()
Returns a new Descriptor which is a duplicate of the Descriptor.
boolean
equals
(
Object
o)
Compares this descriptor to the given object.
String
[]
getFieldNames
()
Returns all the field names in the descriptor.
String
[]
getFields
()
Returns all of the fields contained in this descriptor as a string array.
Object
getFieldValue
(
String
fieldName)
Returns the value for a specific field name, or null if no value
 is present for that name.
Object
[]
getFieldValues
(
String
... fieldNames)
Returns all the field values in the descriptor as an array of Objects.
int
hashCode
()
Returns the hash code value for this descriptor.
boolean
isValid
()
Returns true if all of the fields have legal values given their
 names.
void
removeField
(
String
fieldName)
Removes a field from the descriptor.
void
setField
(
String
fieldName,
Object
fieldValue)
Sets the value for a specific field name.
void
setFields
(
String
[] fieldNames,
Object
[] fieldValues)
Sets all fields in the field names array to the new value with
 the same index in the field values array.
String
toString
()
Returns a human readable string representing the
 descriptor.
String
toXMLString
()
Returns an XML String representing the descriptor.
Methods declared in class java.lang.
Object
finalize
,
getClass
,
notify
,
notifyAll
,
wait
,
wait
,
wait
Constructor Details
DescriptorSupport
public
DescriptorSupport
()
Descriptor default constructor.
 Default initial descriptor size is 20.  It will grow as needed.
Note that the created empty descriptor is not a valid descriptor
 (the method
isValid
returns
false
)
DescriptorSupport
public
DescriptorSupport
(int initNumFields)
throws
MBeanException
,
RuntimeOperationsException
Descriptor constructor.  Takes as parameter the initial
 capacity of the Map that stores the descriptor fields.
 Capacity will grow as needed.
Note that the created empty
 descriptor is not a valid descriptor (the method
isValid
returns
false
).
Parameters:
initNumFields
- The initial capacity of the Map that
 stores the descriptor fields.
Throws:
RuntimeOperationsException
- for illegal value for
 initNumFields (<= 0)
MBeanException
- Wraps a distributed communication Exception.
DescriptorSupport
public
DescriptorSupport
(
DescriptorSupport
inDescr)
Descriptor constructor taking a Descriptor as parameter.
 Creates a new descriptor initialized to the values of the
 descriptor passed in parameter.
Parameters:
inDescr
- the descriptor to be used to initialize the
 constructed descriptor. If it is null or contains no descriptor
 fields, an empty Descriptor will be created.
DescriptorSupport
public
DescriptorSupport
(
String
inStr)
throws
MBeanException
,
RuntimeOperationsException
,
XMLParseException
Descriptor constructor taking an XML String.
The format of the XML string is not defined, but an
 implementation must ensure that the string returned by
toXMLString()
on an existing
 descriptor can be used to instantiate an equivalent
 descriptor using this constructor.
In this implementation, all field values will be created
 as Strings.  If the field values are not Strings, the
 programmer will have to reset or convert these fields
 correctly.
Parameters:
inStr
- An XML-formatted string used to populate this
 Descriptor.  The format is not defined, but any
 implementation must ensure that the string returned by
 method
toXMLString
on an existing
 descriptor can be used to instantiate an equivalent
 descriptor when instantiated using this constructor.
Throws:
RuntimeOperationsException
- If the String inStr
 passed in parameter is null
XMLParseException
- XML parsing problem while parsing
 the input String
MBeanException
- Wraps a distributed communication Exception.
DescriptorSupport
public
DescriptorSupport
(
String
[] fieldNames,
Object
[] fieldValues)
throws
RuntimeOperationsException
Constructor taking field names and field values.  Neither array
 can be null.
Parameters:
fieldNames
- String array of field names.  No elements of
 this array can be null.
fieldValues
- Object array of the corresponding field
 values.  Elements of the array can be null. The
fieldValue
must be valid for the
fieldName
(as defined in method
isValid
)
Note: array sizes of parameters should match. If both arrays
 are empty, then an empty descriptor is created.
Throws:
RuntimeOperationsException
- for illegal value for
 field Names or field Values.  The array lengths must be equal.
 If the descriptor construction fails for any reason, this
 exception will be thrown.
DescriptorSupport
public
DescriptorSupport
(
String
... fields)
Constructor taking fields in the
fieldName=fieldValue
format.
Parameters:
fields
- String array with each element containing a
 field name and value.  If this array is null or empty, then the
 default constructor will be executed. Null strings or empty
 strings will be ignored.
All field values should be Strings.  If the field values are
 not Strings, the programmer will have to reset or convert these
 fields correctly.
Note: Each string should be of the form
fieldName=fieldValue
.  The field name
 ends at the first
=
character; for example if the String
 is
a=b=c
then the field name is
a
and its value
 is
b=c
.
Throws:
RuntimeOperationsException
- for illegal value for
 field Names or field Values.  The field must contain an
 "=". "=fieldValue", "fieldName", and "fieldValue" are illegal.
 FieldName cannot be null.  "fieldName=" will cause the value to
 be null.  If the descriptor construction fails for any reason,
 this exception will be thrown.
Method Details
getFieldValue
public
Object
getFieldValue
(
String
fieldName)
throws
RuntimeOperationsException
Description copied from interface:
Descriptor
Returns the value for a specific field name, or null if no value
 is present for that name.
Specified by:
getFieldValue
in interface
Descriptor
Parameters:
fieldName
- the field name.
Returns:
the corresponding value, or null if the field is not present.
Throws:
RuntimeOperationsException
- if the field name is illegal.
setField
public
void
setField
(
String
fieldName,
Object
fieldValue)
throws
RuntimeOperationsException
Description copied from interface:
Descriptor
Sets the value for a specific field name. This will
 modify an existing field or add a new field.
The field value will be validated before it is set.
 If it is not valid, then an exception will be thrown.
 The meaning of validity is dependent on the descriptor
 implementation.
Specified by:
setField
in interface
Descriptor
Parameters:
fieldName
- The field name to be set. Cannot be null or empty.
fieldValue
- The field value to be set for the field
 name. Can be null if that is a valid value for the field.
Throws:
RuntimeOperationsException
- if the field name or field value
 is illegal (wrapped exception is
IllegalArgumentException
); or
 if the descriptor is immutable (wrapped exception is
UnsupportedOperationException
).
getFields
public
String
[]
getFields
()
Description copied from interface:
Descriptor
Returns all of the fields contained in this descriptor as a string array.
Specified by:
getFields
in interface
Descriptor
Returns:
String array of fields in the format
fieldName=fieldValue
If the value of a field is not a String, then the toString() method
 will be called on it and the returned value, enclosed in parentheses,
 used as the value for the field in the returned array. If the value
 of a field is null, then the value of the field in the returned array
 will be empty.  If the descriptor is empty, you will get
 an empty array.
See Also:
Descriptor.setFields(java.lang.String[], java.lang.Object[])
getFieldNames
public
String
[]
getFieldNames
()
Description copied from interface:
Descriptor
Returns all the field names in the descriptor.
Specified by:
getFieldNames
in interface
Descriptor
Returns:
String array of field names. If the descriptor is empty,
 you will get an empty array.
getFieldValues
public
Object
[]
getFieldValues
(
String
... fieldNames)
Description copied from interface:
Descriptor
Returns all the field values in the descriptor as an array of Objects. The
 returned values are in the same order as the
fieldNames
String array parameter.
Specified by:
getFieldValues
in interface
Descriptor
Parameters:
fieldNames
- String array of the names of the fields that
 the values should be returned for.  If the array is empty then
 an empty array will be returned.  If the array is null then all
 values will be returned, as if the parameter were the array
 returned by
Descriptor.getFieldNames()
.  If a field name in the
 array does not exist, including the case where it is null or
 the empty string, then null is returned for the matching array
 element being returned.
Returns:
Object array of field values. If the list of
fieldNames
is empty, you will get an empty array.
setFields
public
void
setFields
(
String
[] fieldNames,
Object
[] fieldValues)
throws
RuntimeOperationsException
Description copied from interface:
Descriptor
Sets all fields in the field names array to the new value with
 the same index in the field values array. Array sizes must match.
The field value will be validated before it is set.
 If it is not valid, then an exception will be thrown.
 If the arrays are empty, then no change will take effect.
Specified by:
setFields
in interface
Descriptor
Parameters:
fieldNames
- String array of field names. The array and array
 elements cannot be null.
fieldValues
- Object array of the corresponding field values.
 The array cannot be null. Elements of the array can be null.
Throws:
RuntimeOperationsException
- if the change fails for any reason.
 Wrapped exception is
IllegalArgumentException
if
fieldNames
or
fieldValues
is null, or if
 the arrays are of different lengths, or if there is an
 illegal value in one of them.
 Wrapped exception is
UnsupportedOperationException
if the descriptor is immutable, and the call would change
 its contents.
See Also:
Descriptor.getFields()
clone
public
Object
clone
()
             throws
RuntimeOperationsException
Returns a new Descriptor which is a duplicate of the Descriptor.
Specified by:
clone
in interface
Descriptor
Overrides:
clone
in class
Object
Returns:
a clone of this instance.
Throws:
RuntimeOperationsException
- for illegal value for
 field Names or field Values.  If the descriptor construction
 fails for any reason, this exception will be thrown.
See Also:
Cloneable
removeField
public
void
removeField
(
String
fieldName)
Description copied from interface:
Descriptor
Removes a field from the descriptor.
Specified by:
removeField
in interface
Descriptor
Parameters:
fieldName
- String name of the field to be removed.
 If the field name is illegal or the field is not found,
 no exception is thrown.
equals
public
boolean
equals
(
Object
o)
Compares this descriptor to the given object.  The objects are equal if
 the given object is also a Descriptor, and if the two Descriptors have
 the same field names (possibly differing in case) and the same
 associated values.  The respective values for a field in the two
 Descriptors are equal if the following conditions hold:
If one value is null then the other must be too.
If one value is a primitive array then the other must be a primitive
 array of the same type with the same elements.
If one value is an object array then the other must be too and
Arrays.deepEquals
must return true.
Otherwise
Object.equals(Object)
must return true.
Specified by:
equals
in interface
Descriptor
Overrides:
equals
in class
Object
Parameters:
o
- the object to compare with.
Returns:
true
if the objects are the same;
false
otherwise.
See Also:
Object.hashCode()
HashMap
hashCode
public
int
hashCode
()
Returns the hash code value for this descriptor.  The hash
 code is computed as the sum of the hash codes for each field in
 the descriptor.  The hash code of a field with name
n
and value
v
is
n.toLowerCase().hashCode() ^ h
.
 Here
h
is the hash code of
v
, computed as
 follows:
If
v
is null then
h
is 0.
If
v
is a primitive array then
h
is computed using
 the appropriate overloading of
java.util.Arrays.hashCode
.
If
v
is an object array then
h
is computed using
Arrays.deepHashCode
.
Otherwise
h
is
v.hashCode()
.
Specified by:
hashCode
in interface
Descriptor
Overrides:
hashCode
in class
Object
Returns:
A hash code value for this object.
See Also:
Object.equals(java.lang.Object)
System.identityHashCode(java.lang.Object)
isValid
public
boolean
isValid
()
                throws
RuntimeOperationsException
Returns true if all of the fields have legal values given their
 names.
This implementation does not support  interoperating with a directory
 or lookup service. Thus, conforming to the specification, no checking is
 done on the
"export"
field.
Otherwise this implementation returns false if:
name and descriptorType fieldNames are not defined, or
 null, or empty, or not String
class, role, getMethod, setMethod fieldNames, if defined,
 are null or not String
persistPeriod, currencyTimeLimit, lastUpdatedTimeStamp,
 lastReturnedTimeStamp if defined, are null, or not a Numeric
 String or not a Numeric Value >= -1
log fieldName, if defined, is null, or not a Boolean or
 not a String with value "t", "f", "true", "false". These String
 values must not be case sensitive.
visibility fieldName, if defined, is null, or not a
 Numeric String or a not Numeric Value >= 1 and <= 4
severity fieldName, if defined, is null, or not a Numeric
 String or not a Numeric Value >= 0 and <= 6
persistPolicy fieldName, if defined, is null, or not one of
 the following strings:
"OnUpdate", "OnTimer", "NoMoreOftenThan", "OnUnregister", "Always",
   "Never". These String values must not be case sensitive.
Specified by:
isValid
in interface
Descriptor
Returns:
true if the values are legal.
Throws:
RuntimeOperationsException
- If the validity checking
 fails for any reason, this exception will be thrown.
toXMLString
public
String
toXMLString
()
Returns an XML String representing the descriptor.
The format is not defined, but an implementation must
 ensure that the string returned by this method can be
 used to build an equivalent descriptor when instantiated
 using the constructor
DescriptorSupport(String inStr)
.
Fields which are not String objects will have toString()
 called on them to create the value. The value will be
 enclosed in parentheses.  It is not guaranteed that you can
 reconstruct these objects unless they have been
 specifically set up to support toString() in a meaningful
 format and have a matching constructor that accepts a
 String in the same format.
If the descriptor is empty the following String is
 returned: <Descriptor></Descriptor>
Returns:
the XML string.
Throws:
RuntimeOperationsException
- for illegal value for
 field Names or field Values.  If the XML formatted string
 construction fails for any reason, this exception will be
 thrown.
toString
public
String
toString
()
Returns a human readable string representing the
 descriptor.  The string will be in the format of
 "fieldName=fieldValue,fieldName2=fieldValue2,..."
If there are no fields in the descriptor, then an empty String
 is returned.
If a fieldValue is an object then the toString() method is
 called on it and its returned value is used as the value for
 the field enclosed in parenthesis.
Overrides:
toString
in class
Object
Returns:
a string representation of the object.
Throws:
RuntimeOperationsException
- for illegal value for
 field Names or field Values.  If the descriptor string fails
 for any reason, this exception will be thrown.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.