MBeanServerConnection (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr |
Method
Detail:
Field |
Constr |
Method
SEARCH
Module
java.management
Package
javax.management
Interface MBeanServerConnection
All Known Subinterfaces:
MBeanServer
,
MBeanServerForwarder
public interface
MBeanServerConnection
This interface represents a way to talk to an MBean server, whether
 local or remote.  The
MBeanServer
interface, representing a
 local MBean server, extends this interface.
Since:
1.5
Method Summary
All Methods
Instance Methods
Abstract Methods
Modifier and Type
Method
Description
void
addNotificationListener
(
ObjectName
name,
NotificationListener
listener,
NotificationFilter
filter,
Object
handback)
Adds a listener to a registered MBean.
void
addNotificationListener
(
ObjectName
name,
ObjectName
listener,
NotificationFilter
filter,
Object
handback)
Adds a listener to a registered MBean.
ObjectInstance
createMBean
(
String
className,
ObjectName
name)
Instantiates and registers an MBean in the MBean server.
ObjectInstance
createMBean
(
String
className,
ObjectName
name,
Object
[] params,
String
[] signature)
Instantiates and registers an MBean in the MBean server.
ObjectInstance
createMBean
(
String
className,
ObjectName
name,
ObjectName
loaderName)
Instantiates and registers an MBean in the MBean server.
ObjectInstance
createMBean
(
String
className,
ObjectName
name,
ObjectName
loaderName,
Object
[] params,
String
[] signature)
Instantiates and registers an MBean in the MBean server.
Object
getAttribute
(
ObjectName
name,
String
attribute)
Gets the value of a specific attribute of a named MBean.
AttributeList
getAttributes
(
ObjectName
name,
String
[] attributes)
Retrieves the values of several attributes of a named MBean.
String
getDefaultDomain
()
Returns the default domain used for naming the MBean.
String
[]
getDomains
()
Returns the list of domains in which any MBean is currently
 registered.
Integer
getMBeanCount
()
Returns the number of MBeans registered in the MBean server.
MBeanInfo
getMBeanInfo
(
ObjectName
name)
This method discovers the attributes and operations that an
 MBean exposes for management.
ObjectInstance
getObjectInstance
(
ObjectName
name)
Gets the
ObjectInstance
for a given MBean
 registered with the MBean server.
Object
invoke
(
ObjectName
name,
String
operationName,
Object
[] params,
String
[] signature)
Invokes an operation on an MBean.
boolean
isInstanceOf
(
ObjectName
name,
String
className)
Returns true if the MBean specified is an instance of the
 specified class, false otherwise.
boolean
isRegistered
(
ObjectName
name)
Checks whether an MBean, identified by its object name, is
 already registered with the MBean server.
Set
<
ObjectInstance
>
queryMBeans
(
ObjectName
name,
QueryExp
query)
Gets MBeans controlled by the MBean server.
Set
<
ObjectName
>
queryNames
(
ObjectName
name,
QueryExp
query)
Gets the names of MBeans controlled by the MBean server.
void
removeNotificationListener
(
ObjectName
name,
NotificationListener
listener)
Removes a listener from a registered MBean.
void
removeNotificationListener
(
ObjectName
name,
NotificationListener
listener,
NotificationFilter
filter,
Object
handback)
Removes a listener from a registered MBean.
void
removeNotificationListener
(
ObjectName
name,
ObjectName
listener)
Removes a listener from a registered MBean.
void
removeNotificationListener
(
ObjectName
name,
ObjectName
listener,
NotificationFilter
filter,
Object
handback)
Removes a listener from a registered MBean.
void
setAttribute
(
ObjectName
name,
Attribute
attribute)
Sets the value of a specific attribute of a named MBean.
AttributeList
setAttributes
(
ObjectName
name,
AttributeList
attributes)
Sets the values of several attributes of a named MBean.
void
unregisterMBean
(
ObjectName
name)
Unregisters an MBean from the MBean server.
Method Details
createMBean
ObjectInstance
createMBean
(
String
className,
ObjectName
name)
throws
ReflectionException
,
InstanceAlreadyExistsException
,
MBeanRegistrationException
,
MBeanException
,
NotCompliantMBeanException
,
IOException
Instantiates and registers an MBean in the MBean server.  The
 MBean server will use its
Default Loader
 Repository
to load the class of the MBean.  An object name is
 associated with the MBean.  If the object name given is null, the
 MBean must provide its own name by implementing the
MBeanRegistration
interface
 and returning the name from the
preRegister
method.
This method is equivalent to
createMBean(className, name, (Object[]) null, (String[])
 null)
.
Parameters:
className
- The class name of the MBean to be instantiated.
name
- The object name of the MBean. May be null.
Returns:
An
ObjectInstance
, containing the
ObjectName
and the Java class name of the newly
 instantiated MBean.  If the contained
ObjectName
is
n
, the contained Java class name is
getMBeanInfo(n)
.getClassName()
.
Throws:
ReflectionException
- Wraps a
java.lang.ClassNotFoundException
or a
java.lang.Exception
that occurred
 when trying to invoke the MBean's constructor.
InstanceAlreadyExistsException
- The MBean is already
 under the control of the MBean server.
MBeanRegistrationException
- The
preRegister
(
MBeanRegistration
interface) method of the MBean has thrown an exception. The
 MBean will not be registered.
RuntimeMBeanException
- If the MBean's constructor or its
preRegister
or
postRegister
method threw
 a
RuntimeException
. If the
postRegister
(
MBeanRegistration
interface) method of the MBean throws a
RuntimeException
, the
createMBean
method will
 throw a
RuntimeMBeanException
, although the MBean creation
 and registration succeeded. In such a case, the MBean will be actually
 registered even though the
createMBean
method
 threw an exception. Note that
RuntimeMBeanException
can
 also be thrown by
preRegister
, in which case the MBean
 will not be registered.
RuntimeErrorException
- If the
postRegister
(
MBeanRegistration
interface) method of the MBean throws an
Error
, the
createMBean
method will
 throw a
RuntimeErrorException
, although the MBean creation
 and registration succeeded. In such a case, the MBean will be actually
 registered even though the
createMBean
method
 threw an exception.  Note that
RuntimeErrorException
can
 also be thrown by
preRegister
, in which case the MBean
 will not be registered.
MBeanException
- The constructor of the MBean has
 thrown an exception
NotCompliantMBeanException
- This class is not a JMX
 compliant MBean
RuntimeOperationsException
- Wraps a
java.lang.IllegalArgumentException
: The className
 passed in parameter is null, the
ObjectName
passed
 in parameter contains a pattern or no
ObjectName
is specified for the MBean.
IOException
- A communication problem occurred when
 talking to the MBean server.
See Also:
MBeanRegistration
createMBean
ObjectInstance
createMBean
(
String
className,
ObjectName
name,
ObjectName
loaderName)
throws
ReflectionException
,
InstanceAlreadyExistsException
,
MBeanRegistrationException
,
MBeanException
,
NotCompliantMBeanException
,
InstanceNotFoundException
,
IOException
Instantiates and registers an MBean in the MBean server.  The
 class loader to be used is identified by its object name. An
 object name is associated with the MBean. If the object name of
 the loader is null, the ClassLoader that loaded the MBean
 server will be used.  If the MBean's object name given is null,
 the MBean must provide its own name by implementing the
MBeanRegistration
interface
 and returning the name from the
preRegister
method.
This method is equivalent to
createMBean(className, name, loaderName, (Object[]) null,
 (String[]) null)
.
Parameters:
className
- The class name of the MBean to be instantiated.
name
- The object name of the MBean. May be null.
loaderName
- The object name of the class loader to be used.
Returns:
An
ObjectInstance
, containing the
ObjectName
and the Java class name of the newly
 instantiated MBean.  If the contained
ObjectName
is
n
, the contained Java class name is
getMBeanInfo(n)
.getClassName()
.
Throws:
ReflectionException
- Wraps a
java.lang.ClassNotFoundException
or a
java.lang.Exception
that occurred when trying to
 invoke the MBean's constructor.
InstanceAlreadyExistsException
- The MBean is already
 under the control of the MBean server.
MBeanRegistrationException
- The
preRegister
(
MBeanRegistration
interface) method of the MBean has thrown an exception. The
 MBean will not be registered.
RuntimeMBeanException
- If the MBean's constructor or its
preRegister
or
postRegister
method threw
 a
RuntimeException
. If the
postRegister
(
MBeanRegistration
interface) method of the MBean throws a
RuntimeException
, the
createMBean
method will
 throw a
RuntimeMBeanException
, although the MBean creation
 and registration succeeded. In such a case, the MBean will be actually
 registered even though the
createMBean
method
 threw an exception.  Note that
RuntimeMBeanException
can
 also be thrown by
preRegister
, in which case the MBean
 will not be registered.
RuntimeErrorException
- If the
postRegister
(
MBeanRegistration
interface) method of the MBean throws an
Error
, the
createMBean
method will
 throw a
RuntimeErrorException
, although the MBean creation
 and registration succeeded. In such a case, the MBean will be actually
 registered even though the
createMBean
method
 threw an exception.  Note that
RuntimeErrorException
can
 also be thrown by
preRegister
, in which case the MBean
 will not be registered.
MBeanException
- The constructor of the MBean has
 thrown an exception
NotCompliantMBeanException
- This class is not a JMX
 compliant MBean
InstanceNotFoundException
- The specified class loader
 is not registered in the MBean server.
RuntimeOperationsException
- Wraps a
java.lang.IllegalArgumentException
: The className
 passed in parameter is null, the
ObjectName
passed
 in parameter contains a pattern or no
ObjectName
is specified for the MBean.
IOException
- A communication problem occurred when
 talking to the MBean server.
See Also:
MBeanRegistration
createMBean
ObjectInstance
createMBean
(
String
className,
ObjectName
name,
Object
[] params,
String
[] signature)
throws
ReflectionException
,
InstanceAlreadyExistsException
,
MBeanRegistrationException
,
MBeanException
,
NotCompliantMBeanException
,
IOException
Instantiates and registers an MBean in the MBean server.  The
 MBean server will use its
Default Loader
 Repository
to load the class of the MBean.  An object name is
 associated with the MBean.  If the object name given is null, the
 MBean must provide its own name by implementing the
MBeanRegistration
interface
 and returning the name from the
preRegister
method.
Parameters:
className
- The class name of the MBean to be instantiated.
name
- The object name of the MBean. May be null.
params
- An array containing the parameters of the
 constructor to be invoked.
signature
- An array containing the signature of the
 constructor to be invoked.
Returns:
An
ObjectInstance
, containing the
ObjectName
and the Java class name of the newly
 instantiated MBean.  If the contained
ObjectName
is
n
, the contained Java class name is
getMBeanInfo(n)
.getClassName()
.
Throws:
ReflectionException
- Wraps a
java.lang.ClassNotFoundException
or a
java.lang.Exception
that occurred when trying to
 invoke the MBean's constructor.
InstanceAlreadyExistsException
- The MBean is already
 under the control of the MBean server.
MBeanRegistrationException
- The
preRegister
(
MBeanRegistration
interface) method of the MBean has thrown an exception. The
 MBean will not be registered.
RuntimeMBeanException
- If the MBean's constructor or its
preRegister
or
postRegister
method threw
 a
RuntimeException
. If the
postRegister
(
MBeanRegistration
interface) method of the MBean throws a
RuntimeException
, the
createMBean
method will
 throw a
RuntimeMBeanException
, although the MBean creation
 and registration succeeded. In such a case, the MBean will be actually
 registered even though the
createMBean
method
 threw an exception.  Note that
RuntimeMBeanException
can
 also be thrown by
preRegister
, in which case the MBean
 will not be registered.
RuntimeErrorException
- If the
postRegister
(
MBeanRegistration
interface) method of the MBean throws an
Error
, the
createMBean
method will
 throw a
RuntimeErrorException
, although the MBean creation
 and registration succeeded. In such a case, the MBean will be actually
 registered even though the
createMBean
method
 threw an exception.  Note that
RuntimeErrorException
can
 also be thrown by
preRegister
, in which case the MBean
 will not be registered.
MBeanException
- The constructor of the MBean has
 thrown an exception
NotCompliantMBeanException
- This class is not a JMX
 compliant MBean
RuntimeOperationsException
- Wraps a
java.lang.IllegalArgumentException
: The className
 passed in parameter is null, the
ObjectName
passed
 in parameter contains a pattern or no
ObjectName
is specified for the MBean.
IOException
- A communication problem occurred when
 talking to the MBean server.
See Also:
MBeanRegistration
createMBean
ObjectInstance
createMBean
(
String
className,
ObjectName
name,
ObjectName
loaderName,
Object
[] params,
String
[] signature)
throws
ReflectionException
,
InstanceAlreadyExistsException
,
MBeanRegistrationException
,
MBeanException
,
NotCompliantMBeanException
,
InstanceNotFoundException
,
IOException
Instantiates and registers an MBean in the MBean server.  The
 class loader to be used is identified by its object name. An
 object name is associated with the MBean. If the object name of
 the loader is not specified, the ClassLoader that loaded the
 MBean server will be used.  If the MBean object name given is
 null, the MBean must provide its own name by implementing the
MBeanRegistration
interface and returning the name from the
preRegister
method.
Parameters:
className
- The class name of the MBean to be instantiated.
name
- The object name of the MBean. May be null.
loaderName
- The object name of the class loader to be used.
params
- An array containing the parameters of the
 constructor to be invoked.
signature
- An array containing the signature of the
 constructor to be invoked.
Returns:
An
ObjectInstance
, containing the
ObjectName
and the Java class name of the newly
 instantiated MBean.  If the contained
ObjectName
is
n
, the contained Java class name is
getMBeanInfo(n)
.getClassName()
.
Throws:
ReflectionException
- Wraps a
java.lang.ClassNotFoundException
or a
java.lang.Exception
that occurred when trying to
 invoke the MBean's constructor.
InstanceAlreadyExistsException
- The MBean is already
 under the control of the MBean server.
MBeanRegistrationException
- The
preRegister
(
MBeanRegistration
interface) method of the MBean has thrown an exception. The
 MBean will not be registered.
RuntimeMBeanException
- The MBean's constructor or its
preRegister
or
postRegister
method threw
 a
RuntimeException
. If the
postRegister
(
MBeanRegistration
interface) method of the MBean throws a
RuntimeException
, the
createMBean
method will
 throw a
RuntimeMBeanException
, although the MBean creation
 and registration succeeded. In such a case, the MBean will be actually
 registered even though the
createMBean
method
 threw an exception.  Note that
RuntimeMBeanException
can
 also be thrown by
preRegister
, in which case the MBean
 will not be registered.
RuntimeErrorException
- If the
postRegister
method
 (
MBeanRegistration
interface) method of the MBean throws an
Error
, the
createMBean
method will
 throw a
RuntimeErrorException
, although the MBean creation
 and registration succeeded. In such a case, the MBean will be actually
 registered even though the
createMBean
method
 threw an exception.  Note that
RuntimeErrorException
can
 also be thrown by
preRegister
, in which case the MBean
 will not be registered.
MBeanException
- The constructor of the MBean has
 thrown an exception
NotCompliantMBeanException
- This class is not a JMX
 compliant MBean
InstanceNotFoundException
- The specified class loader
 is not registered in the MBean server.
RuntimeOperationsException
- Wraps a
java.lang.IllegalArgumentException
: The className
 passed in parameter is null, the
ObjectName
passed
 in parameter contains a pattern or no
ObjectName
is specified for the MBean.
IOException
- A communication problem occurred when
 talking to the MBean server.
See Also:
MBeanRegistration
unregisterMBean
void
unregisterMBean
(
ObjectName
name)
throws
InstanceNotFoundException
,
MBeanRegistrationException
,
IOException
Unregisters an MBean from the MBean server. The MBean is
 identified by its object name. Once the method has been
 invoked, the MBean may no longer be accessed by its object
 name.
Parameters:
name
- The object name of the MBean to be unregistered.
Throws:
InstanceNotFoundException
- The MBean specified is not
 registered in the MBean server.
MBeanRegistrationException
- The preDeregister
 (
MBeanRegistration
interface) method of the MBean
 has thrown an exception.
RuntimeMBeanException
- If the
postDeregister
(
MBeanRegistration
interface) method of the MBean throws a
RuntimeException
, the
unregisterMBean
method
 will throw a
RuntimeMBeanException
, although the MBean
 unregistration succeeded. In such a case, the MBean will be actually
 unregistered even though the
unregisterMBean
method
 threw an exception.  Note that
RuntimeMBeanException
can
 also be thrown by
preDeregister
, in which case the MBean
 will remain registered.
RuntimeErrorException
- If the
postDeregister
(
MBeanRegistration
interface) method of the MBean throws an
Error
, the
unregisterMBean
method will
 throw a
RuntimeErrorException
, although the MBean
 unregistration succeeded. In such a case, the MBean will be actually
 unregistered even though the
unregisterMBean
method
 threw an exception.  Note that
RuntimeMBeanException
can
 also be thrown by
preDeregister
, in which case the MBean
 will remain registered.
RuntimeOperationsException
- Wraps a
java.lang.IllegalArgumentException
: The object
 name in parameter is null or the MBean you are when trying to
 unregister is the
MBeanServerDelegate
MBean.
IOException
- A communication problem occurred when
 talking to the MBean server.
See Also:
MBeanRegistration
getObjectInstance
ObjectInstance
getObjectInstance
(
ObjectName
name)
throws
InstanceNotFoundException
,
IOException
Gets the
ObjectInstance
for a given MBean
 registered with the MBean server.
Parameters:
name
- The object name of the MBean.
Returns:
The
ObjectInstance
associated with the MBean
 specified by
name
.  The contained
ObjectName
is
name
and the contained class name is
getMBeanInfo(name)
.getClassName()
.
Throws:
InstanceNotFoundException
- The MBean specified is not
 registered in the MBean server.
IOException
- A communication problem occurred when
 talking to the MBean server.
queryMBeans
Set
<
ObjectInstance
>
queryMBeans
(
ObjectName
name,
QueryExp
query)
throws
IOException
Gets MBeans controlled by the MBean server. This method allows
 any of the following to be obtained: All MBeans, a set of
 MBeans specified by pattern matching on the
ObjectName
and/or a Query expression, a specific
 MBean. When the object name is null or no domain and key
 properties are specified, all objects are to be selected (and
 filtered if a query is specified). It returns the set of
ObjectInstance
objects (containing the
ObjectName
and the Java Class name) for the
 selected MBeans.
Parameters:
name
- The object name pattern identifying the MBeans to
 be retrieved. If null or no domain and key properties are
 specified, all the MBeans registered will be retrieved.
query
- The query expression to be applied for selecting
 MBeans. If null no query expression will be applied for
 selecting MBeans.
Returns:
A set containing the
ObjectInstance
objects for the selected MBeans.  If no MBean satisfies the
 query an empty list is returned.
Throws:
IOException
- A communication problem occurred when
 talking to the MBean server.
queryNames
Set
<
ObjectName
>
queryNames
(
ObjectName
name,
QueryExp
query)
throws
IOException
Gets the names of MBeans controlled by the MBean server. This
 method enables any of the following to be obtained: The names
 of all MBeans, the names of a set of MBeans specified by
 pattern matching on the
ObjectName
and/or a Query
 expression, a specific MBean name (equivalent to testing
 whether an MBean is registered). When the object name is null
 or no domain and key properties are specified, all objects are
 selected (and filtered if a query is specified). It returns the
 set of ObjectNames for the MBeans selected.
Parameters:
name
- The object name pattern identifying the MBean names
 to be retrieved. If null or no domain and key properties are
 specified, the name of all registered MBeans will be retrieved.
query
- The query expression to be applied for selecting
 MBeans. If null no query expression will be applied for
 selecting MBeans.
Returns:
A set containing the ObjectNames for the MBeans
 selected.  If no MBean satisfies the query, an empty list is
 returned.
Throws:
IOException
- A communication problem occurred when
 talking to the MBean server.
isRegistered
boolean
isRegistered
(
ObjectName
name)
throws
IOException
Checks whether an MBean, identified by its object name, is
 already registered with the MBean server.
Parameters:
name
- The object name of the MBean to be checked.
Returns:
True if the MBean is already registered in the MBean
 server, false otherwise.
Throws:
RuntimeOperationsException
- Wraps a
java.lang.IllegalArgumentException
: The object
 name in parameter is null.
IOException
- A communication problem occurred when
 talking to the MBean server.
getMBeanCount
Integer
getMBeanCount
()
               throws
IOException
Returns the number of MBeans registered in the MBean server.
Returns:
the number of MBeans registered.
Throws:
IOException
- A communication problem occurred when
 talking to the MBean server.
getAttribute
Object
getAttribute
(
ObjectName
name,
String
attribute)
throws
MBeanException
,
AttributeNotFoundException
,
InstanceNotFoundException
,
ReflectionException
,
IOException
Gets the value of a specific attribute of a named MBean. The MBean
 is identified by its object name.
Parameters:
name
- The object name of the MBean from which the
 attribute is to be retrieved.
attribute
- A String specifying the name of the attribute
 to be retrieved.
Returns:
The value of the retrieved attribute.
Throws:
AttributeNotFoundException
- The attribute specified
 is not accessible in the MBean.
MBeanException
- Wraps an exception thrown by the
 MBean's getter.
InstanceNotFoundException
- The MBean specified is not
 registered in the MBean server.
ReflectionException
- Wraps a
java.lang.Exception
thrown when trying to invoke
 the setter.
RuntimeOperationsException
- Wraps a
java.lang.IllegalArgumentException
: The object
 name in parameter is null or the attribute in parameter is
 null.
IOException
- A communication problem occurred when
 talking to the MBean server.
See Also:
setAttribute(javax.management.ObjectName, javax.management.Attribute)
getAttributes
AttributeList
getAttributes
(
ObjectName
name,
String
[] attributes)
throws
InstanceNotFoundException
,
ReflectionException
,
IOException
Retrieves the values of several attributes of a named MBean. The MBean
 is identified by its object name.
If one or more attributes cannot be retrieved for some reason, they
 will be omitted from the returned
AttributeList
.  The caller
 should check that the list is the same size as the
attributes
array.  To discover what problem prevented a given attribute from being
 retrieved, call
getAttribute
for that attribute.
Here is an example of calling this method and checking that it
 succeeded in retrieving all the requested attributes:
String[] attrNames = ...;
 AttributeList list = mbeanServerConnection.getAttributes(objectName, attrNames);
 if (list.size() == attrNames.length)
     System.out.println("All attributes were retrieved successfully");
 else {
List<String>
missing = new
ArrayList<String>
(
Arrays.asList
(attrNames));
     for (Attribute a : list.asList())
         missing.remove(a.getName());
     System.out.println("Did not retrieve: " + missing);
 }
Parameters:
name
- The object name of the MBean from which the
 attributes are retrieved.
attributes
- A list of the attributes to be retrieved.
Returns:
The list of the retrieved attributes.
Throws:
InstanceNotFoundException
- The MBean specified is not
 registered in the MBean server.
ReflectionException
- An exception occurred when
 trying to invoke the getAttributes method of a Dynamic MBean.
RuntimeOperationsException
- Wrap a
java.lang.IllegalArgumentException
: The object
 name in parameter is null or attributes in parameter is null.
IOException
- A communication problem occurred when
 talking to the MBean server.
See Also:
setAttributes(javax.management.ObjectName, javax.management.AttributeList)
setAttribute
void
setAttribute
(
ObjectName
name,
Attribute
attribute)
throws
InstanceNotFoundException
,
AttributeNotFoundException
,
InvalidAttributeValueException
,
MBeanException
,
ReflectionException
,
IOException
Sets the value of a specific attribute of a named MBean. The MBean
 is identified by its object name.
Parameters:
name
- The name of the MBean within which the attribute is
 to be set.
attribute
- The identification of the attribute to be set
 and the value it is to be set to.
Throws:
InstanceNotFoundException
- The MBean specified is not
 registered in the MBean server.
AttributeNotFoundException
- The attribute specified
 is not accessible in the MBean.
InvalidAttributeValueException
- The value specified
 for the attribute is not valid.
MBeanException
- Wraps an exception thrown by the
 MBean's setter.
ReflectionException
- Wraps a
java.lang.Exception
thrown when trying to invoke
 the setter.
RuntimeOperationsException
- Wraps a
java.lang.IllegalArgumentException
: The object
 name in parameter is null or the attribute in parameter is
 null.
IOException
- A communication problem occurred when
 talking to the MBean server.
See Also:
getAttribute(javax.management.ObjectName, java.lang.String)
setAttributes
AttributeList
setAttributes
(
ObjectName
name,
AttributeList
attributes)
throws
InstanceNotFoundException
,
ReflectionException
,
IOException
Sets the values of several attributes of a named MBean. The MBean is
 identified by its object name.
If one or more attributes cannot be set for some reason, they will be
 omitted from the returned
AttributeList
.  The caller should check
 that the input
AttributeList
is the same size as the output one.
 To discover what problem prevented a given attribute from being retrieved,
 it will usually be possible to call
setAttribute
for that attribute, although this is not guaranteed to work.  (For
 example, the values of two attributes may have been rejected because
 they were inconsistent with each other.  Setting one of them alone might
 be allowed.)
Here is an example of calling this method and checking that it
 succeeded in setting all the requested attributes:
AttributeList inputAttrs = ...;
 AttributeList outputAttrs = mbeanServerConnection.setAttributes(
objectName, inputAttrs);
 if (inputAttrs.size() == outputAttrs.size())
     System.out.println("All attributes were set successfully");
 else {
List<String>
missing = new
ArrayList<String>
();
     for (Attribute a : inputAttrs.asList())
         missing.add(a.getName());
     for (Attribute a : outputAttrs.asList())
         missing.remove(a.getName());
     System.out.println("Did not set: " + missing);
 }
Parameters:
name
- The object name of the MBean within which the
 attributes are to be set.
attributes
- A list of attributes: The identification of
 the attributes to be set and the values they are to be set to.
Returns:
The list of attributes that were set, with their new
 values.
Throws:
InstanceNotFoundException
- The MBean specified is not
 registered in the MBean server.
ReflectionException
- An exception occurred when
 trying to invoke the getAttributes method of a Dynamic MBean.
RuntimeOperationsException
- Wraps a
java.lang.IllegalArgumentException
: The object
 name in parameter is null or attributes in parameter is null.
IOException
- A communication problem occurred when
 talking to the MBean server.
See Also:
getAttributes(javax.management.ObjectName, java.lang.String[])
invoke
Object
invoke
(
ObjectName
name,
String
operationName,
Object
[] params,
String
[] signature)
throws
InstanceNotFoundException
,
MBeanException
,
ReflectionException
,
IOException
Invokes an operation on an MBean.
Because of the need for a
signature
to differentiate
 possibly-overloaded operations, it is much simpler to invoke operations
 through an
MBean proxy
where possible.  For example, suppose you have a
 Standard MBean interface like this:
public interface FooMBean {
     public int countMatches(String[] patterns, boolean ignoreCase);
 }
The
countMatches
operation can be invoked as follows:
String[] myPatterns = ...;
 int count = (Integer) mbeanServerConnection.invoke(
         objectName,
         "countMatches",
         new Object[] {myPatterns, true},
         new String[] {String[].class.getName(), boolean.class.getName()});
Alternatively, it can be invoked through a proxy as follows:
String[] myPatterns = ...;
 FooMBean fooProxy = JMX.newMBeanProxy(
         mbeanServerConnection, objectName, FooMBean.class);
 int count = fooProxy.countMatches(myPatterns, true);
Parameters:
name
- The object name of the MBean on which the method is
 to be invoked.
operationName
- The name of the operation to be invoked.
params
- An array containing the parameters to be set when
 the operation is invoked
signature
- An array containing the signature of the
 operation, an array of class names in the format returned by
Class.getName()
. The class objects will be loaded using the same
 class loader as the one used for loading the MBean on which the
 operation was invoked.
Returns:
The object returned by the operation, which represents
 the result of invoking the operation on the MBean specified.
Throws:
InstanceNotFoundException
- The MBean specified is not
 registered in the MBean server.
MBeanException
- Wraps an exception thrown by the
 MBean's invoked method.
ReflectionException
- Wraps a
java.lang.Exception
thrown while trying to invoke
 the method.
IOException
- A communication problem occurred when
 talking to the MBean server.
getDefaultDomain
String
getDefaultDomain
()
                 throws
IOException
Returns the default domain used for naming the MBean.
 The default domain name is used as the domain part in the ObjectName
 of MBeans if no domain is specified by the user.
Returns:
the default domain.
Throws:
IOException
- A communication problem occurred when
 talking to the MBean server.
getDomains
String
[]
getDomains
()
             throws
IOException
Returns the list of domains in which any MBean is currently
 registered.  A string is in the returned array if and only if
 there is at least one MBean registered with an ObjectName whose
getDomain()
is equal to that
 string.  The order of strings within the returned array is
 not defined.
Returns:
the list of domains.
Throws:
IOException
- A communication problem occurred when
 talking to the MBean server.
addNotificationListener
void
addNotificationListener
(
ObjectName
name,
NotificationListener
listener,
NotificationFilter
filter,
Object
handback)
throws
InstanceNotFoundException
,
IOException
Adds a listener to a registered MBean.
 Notifications emitted by the MBean will be forwarded to the listener.
Parameters:
name
- The name of the MBean on which the listener should
 be added.
listener
- The listener object which will handle the
 notifications emitted by the registered MBean.
filter
- The filter object. If filter is null, no
 filtering will be performed before handling notifications.
handback
- The context to be sent to the listener when a
 notification is emitted.
Throws:
InstanceNotFoundException
- The MBean name provided
 does not match any of the registered MBeans.
IOException
- A communication problem occurred when
 talking to the MBean server.
See Also:
removeNotificationListener(ObjectName, NotificationListener)
removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)
addNotificationListener
void
addNotificationListener
(
ObjectName
name,
ObjectName
listener,
NotificationFilter
filter,
Object
handback)
throws
InstanceNotFoundException
,
IOException
Adds a listener to a registered MBean.
A notification emitted by an MBean will be forwarded by the
 MBeanServer to the listener.  If the source of the notification
 is a reference to an MBean object, the MBean server will
 replace it by that MBean's ObjectName.  Otherwise the source is
 unchanged.
The listener object that receives notifications is the one
 that is registered with the given name at the time this method
 is called.  Even if it is subsequently unregistered, it will
 continue to receive notifications.
Parameters:
name
- The name of the MBean on which the listener should
 be added.
listener
- The object name of the listener which will
 handle the notifications emitted by the registered MBean.
filter
- The filter object. If filter is null, no
 filtering will be performed before handling notifications.
handback
- The context to be sent to the listener when a
 notification is emitted.
Throws:
InstanceNotFoundException
- The MBean name of the
 notification listener or of the notification broadcaster does
 not match any of the registered MBeans.
RuntimeOperationsException
- Wraps an
IllegalArgumentException
.  The MBean named by
listener
exists but does not implement the
NotificationListener
interface.
IOException
- A communication problem occurred when
 talking to the MBean server.
See Also:
removeNotificationListener(ObjectName, ObjectName)
removeNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)
removeNotificationListener
void
removeNotificationListener
(
ObjectName
name,
ObjectName
listener)
throws
InstanceNotFoundException
,
ListenerNotFoundException
,
IOException
Removes a listener from a registered MBean.
If the listener is registered more than once, perhaps with
 different filters or callbacks, this method will remove all
 those registrations.
Parameters:
name
- The name of the MBean on which the listener should
 be removed.
listener
- The object name of the listener to be removed.
Throws:
InstanceNotFoundException
- The MBean name provided
 does not match any of the registered MBeans.
ListenerNotFoundException
- The listener is not
 registered in the MBean.
IOException
- A communication problem occurred when
 talking to the MBean server.
See Also:
addNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)
removeNotificationListener
void
removeNotificationListener
(
ObjectName
name,
ObjectName
listener,
NotificationFilter
filter,
Object
handback)
throws
InstanceNotFoundException
,
ListenerNotFoundException
,
IOException
Removes a listener from a registered MBean.
The MBean must have a listener that exactly matches the
 given
listener
,
filter
, and
handback
parameters.  If there is more than one
 such listener, only one is removed.
The
filter
and
handback
parameters
 may be null if and only if they are null in a listener to be
 removed.
Parameters:
name
- The name of the MBean on which the listener should
 be removed.
listener
- The object name of the listener to be removed.
filter
- The filter that was specified when the listener
 was added.
handback
- The handback that was specified when the
 listener was added.
Throws:
InstanceNotFoundException
- The MBean name provided
 does not match any of the registered MBeans.
ListenerNotFoundException
- The listener is not
 registered in the MBean, or it is not registered with the given
 filter and handback.
IOException
- A communication problem occurred when
 talking to the MBean server.
See Also:
addNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)
removeNotificationListener
void
removeNotificationListener
(
ObjectName
name,
NotificationListener
listener)
throws
InstanceNotFoundException
,
ListenerNotFoundException
,
IOException
Removes a listener from a registered MBean.
If the listener is registered more than once, perhaps with
 different filters or callbacks, this method will remove all
 those registrations.
Parameters:
name
- The name of the MBean on which the listener should
 be removed.
listener
- The listener to be removed.
Throws:
InstanceNotFoundException
- The MBean name provided
 does not match any of the registered MBeans.
ListenerNotFoundException
- The listener is not
 registered in the MBean.
IOException
- A communication problem occurred when
 talking to the MBean server.
See Also:
addNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)
removeNotificationListener
void
removeNotificationListener
(
ObjectName
name,
NotificationListener
listener,
NotificationFilter
filter,
Object
handback)
throws
InstanceNotFoundException
,
ListenerNotFoundException
,
IOException
Removes a listener from a registered MBean.
The MBean must have a listener that exactly matches the
 given
listener
,
filter
, and
handback
parameters.  If there is more than one
 such listener, only one is removed.
The
filter
and
handback
parameters
 may be null if and only if they are null in a listener to be
 removed.
Parameters:
name
- The name of the MBean on which the listener should
 be removed.
listener
- The listener to be removed.
filter
- The filter that was specified when the listener
 was added.
handback
- The handback that was specified when the
 listener was added.
Throws:
InstanceNotFoundException
- The MBean name provided
 does not match any of the registered MBeans.
ListenerNotFoundException
- The listener is not
 registered in the MBean, or it is not registered with the given
 filter and handback.
IOException
- A communication problem occurred when
 talking to the MBean server.
See Also:
addNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)
getMBeanInfo
MBeanInfo
getMBeanInfo
(
ObjectName
name)
throws
InstanceNotFoundException
,
IntrospectionException
,
ReflectionException
,
IOException
This method discovers the attributes and operations that an
 MBean exposes for management.
Parameters:
name
- The name of the MBean to analyze
Returns:
An instance of
MBeanInfo
allowing the
 retrieval of all attributes and operations of this MBean.
Throws:
IntrospectionException
- An exception occurred during
 introspection.
InstanceNotFoundException
- The MBean specified was
 not found.
ReflectionException
- An exception occurred when
 trying to invoke the getMBeanInfo of a Dynamic MBean.
IOException
- A communication problem occurred when
 talking to the MBean server.
isInstanceOf
boolean
isInstanceOf
(
ObjectName
name,
String
className)
throws
InstanceNotFoundException
,
IOException
Returns true if the MBean specified is an instance of the
 specified class, false otherwise.
If
name
does not name an MBean, this method
 throws
InstanceNotFoundException
.
Otherwise, let
X be the MBean named by
name
,
L be the ClassLoader of X,
N be the class name in X's
MBeanInfo
.
If N equals
className
, the result is true.
Otherwise, if L successfully loads
className
and X is an instance of this class, the result is true.
Otherwise, if L successfully loads both N and
className
, and the second class is assignable from
 the first, the result is true.
Otherwise, the result is false.
Parameters:
name
- The
ObjectName
of the MBean.
className
- The name of the class.
Returns:
true if the MBean specified is an instance of the
 specified class according to the rules above, false otherwise.
Throws:
InstanceNotFoundException
- The MBean specified is not
 registered in the MBean server.
IOException
- A communication problem occurred when
 talking to the MBean server.
See Also:
Class.isInstance(java.lang.Object)
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.