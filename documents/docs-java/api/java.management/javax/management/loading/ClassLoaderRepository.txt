ClassLoaderRepository (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr |
Method
Detail:
Field |
Constr |
Method
SEARCH
Module
java.management
Package
javax.management.loading
Interface ClassLoaderRepository
public interface
ClassLoaderRepository
Instances of this interface are used to keep the list of ClassLoaders
 registered in an MBean Server.
 They provide the necessary methods to load classes using the registered
 ClassLoaders.
The first ClassLoader in a
ClassLoaderRepository
is
 always the MBean Server's own ClassLoader.
When an MBean is registered in an MBean Server, if it is of a
 subclass of
ClassLoader
and if it does not
 implement the interface
PrivateClassLoader
, it is added to
 the end of the MBean Server's
ClassLoaderRepository
.
 If it is subsequently unregistered from the MBean Server, it is
 removed from the
ClassLoaderRepository
.
The order of MBeans in the
ClassLoaderRepository
is
 significant.  For any two MBeans
X
and
Y
in the
ClassLoaderRepository
,
X
must appear before
Y
if the registration of
X
was completed before
 the registration of
Y
started.  If
X
and
Y
were registered concurrently, their order is
 indeterminate.  The registration of an MBean corresponds to the
 call to
MBeanServer.registerMBean(java.lang.Object, javax.management.ObjectName)
or one of the
MBeanServer
.createMBean
methods.
Since:
1.5
See Also:
MBeanServerFactory
Method Summary
All Methods
Instance Methods
Abstract Methods
Modifier and Type
Method
Description
Class
<?>
loadClass
(
String
className)
Load the given class name through the list of class loaders.
Class
<?>
loadClassBefore
(
ClassLoader
stop,
String
className)
Load the given class name through the list of class loaders,
 stopping at the given one.
Class
<?>
loadClassWithout
(
ClassLoader
exclude,
String
className)
Load the given class name through the list of class loaders,
 excluding the given one.
Method Details
loadClass
Class
<?>
loadClass
(
String
className)
throws
ClassNotFoundException
Load the given class name through the list of class loaders.
 Each ClassLoader in turn from the ClassLoaderRepository is
 asked to load the class via its
ClassLoader.loadClass(String)
method.  If it successfully
 returns a
Class
object, that is the result of this
 method.  If it throws a
ClassNotFoundException
, the
 search continues with the next ClassLoader.  If it throws
 another exception, the exception is propagated from this
 method.  If the end of the list is reached, a
ClassNotFoundException
is thrown.
Parameters:
className
- The name of the class to be loaded.
Returns:
the loaded class.
Throws:
ClassNotFoundException
- The specified class could not be
            found.
loadClassWithout
Class
<?>
loadClassWithout
(
ClassLoader
exclude,
String
className)
throws
ClassNotFoundException
Load the given class name through the list of class loaders,
 excluding the given one.  Each ClassLoader in turn from the
 ClassLoaderRepository, except
exclude
, is asked to
 load the class via its
ClassLoader.loadClass(String)
method.  If it successfully returns a
Class
object,
 that is the result of this method.  If it throws a
ClassNotFoundException
, the search continues with the next
 ClassLoader.  If it throws another exception, the exception is
 propagated from this method.  If the end of the list is
 reached, a
ClassNotFoundException
is thrown.
Be aware that if a ClassLoader in the ClassLoaderRepository
 calls this method from its
loadClass
method, it exposes itself to a deadlock if another
 ClassLoader in the ClassLoaderRepository does the same thing at
 the same time.  The
loadClassBefore(java.lang.ClassLoader, java.lang.String)
method is
 recommended to avoid the risk of deadlock.
Parameters:
exclude
- The class loader to be excluded.  May be null,
 in which case this method is equivalent to
loadClass(className)
.
className
- The name of the class to be loaded.
Returns:
the loaded class.
Throws:
ClassNotFoundException
- The specified class could not
 be found.
loadClassBefore
Class
<?>
loadClassBefore
(
ClassLoader
stop,
String
className)
throws
ClassNotFoundException
Load the given class name through the list of class loaders,
 stopping at the given one.  Each ClassLoader in turn from the
 ClassLoaderRepository is asked to load the class via its
ClassLoader.loadClass(String)
method.  If it successfully
 returns a
Class
object, that is the result of this
 method.  If it throws a
ClassNotFoundException
, the
 search continues with the next ClassLoader.  If it throws
 another exception, the exception is propagated from this
 method.  If the search reaches
stop
or the end of
 the list, a
ClassNotFoundException
is thrown.
Typically this method is called from the
loadClass
method of
stop
, to consult loaders that appear before it
 in the
ClassLoaderRepository
.  By stopping the
 search as soon as
stop
is reached, a potential
 deadlock with concurrent class loading is avoided.
Parameters:
stop
- The class loader at which to stop.  May be null, in
 which case this method is equivalent to
loadClass(className)
.
className
- The name of the class to be loaded.
Returns:
the loaded class.
Throws:
ClassNotFoundException
- The specified class could not
 be found.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.