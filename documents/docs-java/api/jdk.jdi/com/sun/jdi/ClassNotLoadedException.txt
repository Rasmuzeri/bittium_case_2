ClassNotLoadedException (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr
|
Method
Detail:
Field |
Constr
|
Method
SEARCH
Module
jdk.jdi
Package
com.sun.jdi
Class ClassNotLoadedException
java.lang.Object
java.lang.Throwable
java.lang.Exception
com.sun.jdi.ClassNotLoadedException
All Implemented Interfaces:
Serializable
public class
ClassNotLoadedException
extends
Exception
Thrown to indicate that the requested class has
 not yet been loaded through the appropriate class loader.
Due to the lazy class linking performed by many VMs, it is
 possible for a field or variable to be visible in a program
 before the associated class is loaded. Until the class is loaded
 all that is available is a signature string. If an attempt is made to
 set the value of such a field or variable from JDI, the appropriate
 type checking cannot be done because the destination class has not been
 loaded. The same is true for the element class of array elements.
It is not advisable to solve this problem by attempting a class load on
 the fly in this case. There are two problems in having the debugger load
 a class instead of waiting for it to load over the normal course
 of events.
There can be no guarantee that running the appropriate class
 loader won't cause a deadlock in loading the
 class. Class loaders can consist of arbitrary
 Java programming language code and the
 class loading methods are usually synchronized. Most of the work
 done by a debugger happens when threads are suspended. If another
 application thread is suspended within the same class loader,
  a deadlock is very possible.
Changing the order in which classes are normally loaded may either mask
 or reveal bugs in the application. An unintrusive debugger should strive
 to leave unchanged the behavior of the application being debugged.
To avoid these potential problems, this exception is thrown.
Note that this exception will be thrown until the class in question
 is visible to the class loader of enclosing class. (That is, the
 class loader of the enclosing class must be an
initiating
class
 loader for the class in question.)
 See
The Java Virtual Machine Specification
for more details.
Since:
1.3
See Also:
Serialized Form
Constructor Summary
Constructors
Constructor
Description
ClassNotLoadedException
(
String
className)
ClassNotLoadedException
(
String
className,
String
message)
Method Summary
All Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
String
className
()
Methods declared in class java.lang.
Throwable
addSuppressed
,
fillInStackTrace
,
getCause
,
getLocalizedMessage
,
getMessage
,
getStackTrace
,
getSuppressed
,
initCause
,
printStackTrace
,
printStackTrace
,
printStackTrace
,
setStackTrace
,
toString
Methods declared in class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
wait
,
wait
,
wait
Constructor Details
ClassNotLoadedException
public
ClassNotLoadedException
(
String
className)
ClassNotLoadedException
public
ClassNotLoadedException
(
String
className,
String
message)
Method Details
className
public
String
className
()
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.