SslRMIServerSocketFactory (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr
|
Method
Detail:
Field |
Constr
|
Method
SEARCH
Module
java.rmi
Package
javax.rmi.ssl
Class SslRMIServerSocketFactory
java.lang.Object
javax.rmi.ssl.SslRMIServerSocketFactory
All Implemented Interfaces:
RMIServerSocketFactory
public class
SslRMIServerSocketFactory
extends
Object
implements
RMIServerSocketFactory
An
SslRMIServerSocketFactory
instance is used by the RMI
 runtime in order to obtain server sockets for RMI calls via SSL.
This class implements
RMIServerSocketFactory
over
 the Secure Sockets Layer (SSL) or Transport Layer Security (TLS)
 protocols.
This class creates SSL sockets using the default
SSLSocketFactory
(see
SSLSocketFactory.getDefault()
) or the default
SSLServerSocketFactory
(see
SSLServerSocketFactory.getDefault()
) unless the
 constructor taking an
SSLContext
is
 used in which case the SSL sockets are created using
 the
SSLSocketFactory
returned by
SSLContext.getSocketFactory()
or the
SSLServerSocketFactory
returned by
SSLContext.getServerSocketFactory()
.

 When an
SSLContext
is not supplied all the instances of this
 class share the same keystore, and the same truststore (when client
 authentication is required by the server). This behavior can be modified
 by supplying an already initialized
SSLContext
instance.
Since:
1.5
See Also:
SSLSocketFactory
SSLServerSocketFactory
SslRMIClientSocketFactory
Constructor Summary
Constructors
Constructor
Description
SslRMIServerSocketFactory
()
Creates a new
SslRMIServerSocketFactory
with
 the default SSL socket configuration.
SslRMIServerSocketFactory
(
String
[] enabledCipherSuites,
String
[] enabledProtocols,
 boolean needClientAuth)
Creates a new
SslRMIServerSocketFactory
with
 the specified SSL socket configuration.
SslRMIServerSocketFactory
(
SSLContext
context,
String
[] enabledCipherSuites,
String
[] enabledProtocols,
 boolean needClientAuth)
Creates a new
SslRMIServerSocketFactory
with the
 specified
SSLContext
and SSL socket configuration.
Method Summary
All Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
ServerSocket
createServerSocket
(int port)
Creates a server socket that accepts SSL connections
 configured according to this factory's SSL socket configuration
 parameters.
boolean
equals
(
Object
obj)
Indicates whether some other object is "equal to" this one.
final
String
[]
getEnabledCipherSuites
()
Returns the names of the cipher suites enabled on SSL
 connections accepted by server sockets created by this factory,
 or
null
if this factory uses the cipher suites
 that are enabled by default.
final
String
[]
getEnabledProtocols
()
Returns the names of the protocol versions enabled on SSL
 connections accepted by server sockets created by this factory,
 or
null
if this factory uses the protocol versions
 that are enabled by default.
final boolean
getNeedClientAuth
()
Returns
true
if client authentication is
 required on SSL connections accepted by server sockets created
 by this factory.
int
hashCode
()
Returns a hash code value for this
SslRMIServerSocketFactory
.
Methods declared in class java.lang.
Object
clone
,
finalize
,
getClass
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Constructor Details
SslRMIServerSocketFactory
public
SslRMIServerSocketFactory
()
Creates a new
SslRMIServerSocketFactory
with
 the default SSL socket configuration.
SSL connections accepted by server sockets created by this
 factory have the default cipher suites and protocol versions
 enabled and do not require client authentication.
SslRMIServerSocketFactory
public
SslRMIServerSocketFactory
(
String
[] enabledCipherSuites,
String
[] enabledProtocols,
 boolean needClientAuth)
throws
IllegalArgumentException
Creates a new
SslRMIServerSocketFactory
with
 the specified SSL socket configuration.
Parameters:
enabledCipherSuites
- names of all the cipher suites to
 enable on SSL connections accepted by server sockets created by
 this factory, or
null
to use the cipher suites
 that are enabled by default
enabledProtocols
- names of all the protocol versions to
 enable on SSL connections accepted by server sockets created by
 this factory, or
null
to use the protocol versions
 that are enabled by default
needClientAuth
-
true
to require client
 authentication on SSL connections accepted by server sockets
 created by this factory;
false
to not require
 client authentication
Throws:
IllegalArgumentException
- when one or more of the cipher
 suites named by the
enabledCipherSuites
parameter is
 not supported, when one or more of the protocols named by the
enabledProtocols
parameter is not supported or when
 a problem is encountered while trying to check if the supplied
 cipher suites and protocols to be enabled are supported.
See Also:
SSLSocket.setEnabledCipherSuites(java.lang.String[])
SSLSocket.setEnabledProtocols(java.lang.String[])
SSLSocket.setNeedClientAuth(boolean)
SslRMIServerSocketFactory
public
SslRMIServerSocketFactory
(
SSLContext
context,
String
[] enabledCipherSuites,
String
[] enabledProtocols,
 boolean needClientAuth)
throws
IllegalArgumentException
Creates a new
SslRMIServerSocketFactory
with the
 specified
SSLContext
and SSL socket configuration.
Parameters:
context
- the SSL context to be used for creating SSL sockets.
 If
context
is null the default
SSLSocketFactory
or the default
SSLServerSocketFactory
will be used to
 create SSL sockets. Otherwise, the socket factory returned by
SSLContext.getSocketFactory()
or
SSLContext.getServerSocketFactory()
will be used instead.
enabledCipherSuites
- names of all the cipher suites to
 enable on SSL connections accepted by server sockets created by
 this factory, or
null
to use the cipher suites
 that are enabled by default
enabledProtocols
- names of all the protocol versions to
 enable on SSL connections accepted by server sockets created by
 this factory, or
null
to use the protocol versions
 that are enabled by default
needClientAuth
-
true
to require client
 authentication on SSL connections accepted by server sockets
 created by this factory;
false
to not require
 client authentication
Throws:
IllegalArgumentException
- when one or more of the cipher
 suites named by the
enabledCipherSuites
parameter is
 not supported, when one or more of the protocols named by the
enabledProtocols
parameter is not supported or when
 a problem is encountered while trying to check if the supplied
 cipher suites and protocols to be enabled are supported.
Since:
1.7
See Also:
SSLSocket.setEnabledCipherSuites(java.lang.String[])
SSLSocket.setEnabledProtocols(java.lang.String[])
SSLSocket.setNeedClientAuth(boolean)
Method Details
getEnabledCipherSuites
public final
String
[]
getEnabledCipherSuites
()
Returns the names of the cipher suites enabled on SSL
 connections accepted by server sockets created by this factory,
 or
null
if this factory uses the cipher suites
 that are enabled by default.
Returns:
an array of cipher suites enabled, or
null
See Also:
SSLSocket.setEnabledCipherSuites(java.lang.String[])
getEnabledProtocols
public final
String
[]
getEnabledProtocols
()
Returns the names of the protocol versions enabled on SSL
 connections accepted by server sockets created by this factory,
 or
null
if this factory uses the protocol versions
 that are enabled by default.
Returns:
an array of protocol versions enabled, or
null
See Also:
SSLSocket.setEnabledProtocols(java.lang.String[])
getNeedClientAuth
public final
boolean
getNeedClientAuth
()
Returns
true
if client authentication is
 required on SSL connections accepted by server sockets created
 by this factory.
Returns:
true
if client authentication is required
See Also:
SSLSocket.setNeedClientAuth(boolean)
createServerSocket
public
ServerSocket
createServerSocket
(int port)
throws
IOException
Creates a server socket that accepts SSL connections
 configured according to this factory's SSL socket configuration
 parameters.
Specified by:
createServerSocket
in interface
RMIServerSocketFactory
Parameters:
port
- the port number
Returns:
the server socket on the specified port
Throws:
IOException
- if an I/O error occurs during server socket
 creation
equals
public
boolean
equals
(
Object
obj)
Indicates whether some other object is "equal to" this one.
Two
SslRMIServerSocketFactory
objects are equal
 if they have been constructed with the same SSL context and
 SSL socket configuration parameters.
A subclass should override this method (as well as
hashCode()
) if it adds instance state that affects
 equality.
Overrides:
equals
in class
Object
Parameters:
obj
- the reference object with which to compare.
Returns:
true
if this object is the same as the obj
          argument;
false
otherwise.
See Also:
Object.hashCode()
HashMap
hashCode
public
int
hashCode
()
Returns a hash code value for this
SslRMIServerSocketFactory
.
Overrides:
hashCode
in class
Object
Returns:
a hash code value for this
SslRMIServerSocketFactory
.
See Also:
Object.equals(java.lang.Object)
System.identityHashCode(java.lang.Object)
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.