RemoteCall (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr |
Method
Detail:
Field |
Constr |
Method
SEARCH
Module
java.rmi
Package
java.rmi.server
Interface RemoteCall
@Deprecated
public interface
RemoteCall
Deprecated.
no replacement.
RemoteCall
is an abstraction used solely by the RMI runtime
 (in conjunction with stubs and skeletons of remote objects) to carry out a
 call to a remote object.  The
RemoteCall
interface is
 deprecated because it is only used by deprecated methods of
java.rmi.server.RemoteRef
.
Since:
1.1
See Also:
RemoteRef
Method Summary
All Methods
Instance Methods
Abstract Methods
Deprecated Methods
Modifier and Type
Method
Description
void
done
()
Deprecated.
no replacement
void
executeCall
()
Deprecated.
no replacement
ObjectInput
getInputStream
()
Deprecated.
no replacement
ObjectOutput
getOutputStream
()
Deprecated.
no replacement
ObjectOutput
getResultStream
(boolean success)
Deprecated.
no replacement
void
releaseInputStream
()
Deprecated.
no replacement
void
releaseOutputStream
()
Deprecated.
no replacement
Method Details
getOutputStream
@Deprecated
ObjectOutput
getOutputStream
()
                      throws
IOException
Deprecated.
no replacement
Return the output stream the stub/skeleton should put arguments/results
 into.
Returns:
output stream for arguments/results
Throws:
IOException
- if an I/O error occurs.
Since:
1.1
releaseOutputStream
@Deprecated
void
releaseOutputStream
()
                  throws
IOException
Deprecated.
no replacement
Release the output stream; in some transports this would release
 the stream.
Throws:
IOException
- if an I/O error occurs.
Since:
1.1
getInputStream
@Deprecated
ObjectInput
getInputStream
()
                    throws
IOException
Deprecated.
no replacement
Get the InputStream that the stub/skeleton should get
 results/arguments from.
Returns:
input stream for reading arguments/results
Throws:
IOException
- if an I/O error occurs.
Since:
1.1
releaseInputStream
@Deprecated
void
releaseInputStream
()
                 throws
IOException
Deprecated.
no replacement
Release the input stream. This would allow some transports to release
 the channel early.
Throws:
IOException
- if an I/O error occurs.
Since:
1.1
getResultStream
@Deprecated
ObjectOutput
getResultStream
(boolean success)
throws
IOException
,
StreamCorruptedException
Deprecated.
no replacement
Returns an output stream (may put out header information
 relating to the success of the call). Should only succeed
 once per remote call.
Parameters:
success
- If true, indicates normal return, else indicates
 exceptional return.
Returns:
output stream for writing call result
Throws:
IOException
- if an I/O error occurs.
StreamCorruptedException
- If already been called.
Since:
1.1
executeCall
@Deprecated
void
executeCall
()
          throws
Exception
Deprecated.
no replacement
Do whatever it takes to execute the call.
Throws:
Exception
- if a general exception occurs.
Since:
1.1
done
@Deprecated
void
done
()
   throws
IOException
Deprecated.
no replacement
Allow cleanup after the remote call has completed.
Throws:
IOException
- if an I/O error occurs.
Since:
1.1
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.