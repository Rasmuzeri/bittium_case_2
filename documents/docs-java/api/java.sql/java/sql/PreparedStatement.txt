PreparedStatement (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field
|
Constr |
Method
Detail:
Field |
Constr |
Method
SEARCH
Module
java.sql
Package
java.sql
Interface PreparedStatement
All Superinterfaces:
AutoCloseable
,
Statement
,
Wrapper
All Known Subinterfaces:
CallableStatement
public interface
PreparedStatement
extends
Statement
An object that represents a precompiled SQL statement.
A SQL statement is precompiled and stored in a
PreparedStatement
object. This object can then be used to
 efficiently execute this statement multiple times.
Note:
The setter methods (
setShort
,
setString
,
 and so on) for setting IN parameter values
 must specify types that are compatible with the defined SQL type of
 the input parameter. For instance, if the IN parameter has SQL type
INTEGER
, then the method
setInt
should be used.
If arbitrary parameter type conversions are required, the method
setObject
should be used with a target SQL type.
In the following example of setting a parameter,
con
represents
 an active connection:
BigDecimal sal = new BigDecimal("153833.00");
   PreparedStatement pstmt = con.prepareStatement("UPDATE EMPLOYEES
                                     SET SALARY = ? WHERE ID = ?");
   pstmt.setBigDecimal(1, sal);
   pstmt.setInt(2, 110592);
Since:
1.1
See Also:
Connection.prepareStatement(java.lang.String)
ResultSet
Field Summary
Fields declared in interface java.sql.
Statement
CLOSE_ALL_RESULTS
,
CLOSE_CURRENT_RESULT
,
EXECUTE_FAILED
,
KEEP_CURRENT_RESULT
,
NO_GENERATED_KEYS
,
RETURN_GENERATED_KEYS
,
SUCCESS_NO_INFO
Method Summary
All Methods
Instance Methods
Abstract Methods
Default Methods
Deprecated Methods
Modifier and Type
Method
Description
void
addBatch
()
Adds a set of parameters to this
PreparedStatement
object's batch of commands.
void
clearParameters
()
Clears the current parameter values immediately.
boolean
execute
()
Executes the SQL statement in this
PreparedStatement
object,
 which may be any kind of SQL statement.
default long
executeLargeUpdate
()
Executes the SQL statement in this
PreparedStatement
object,
 which must be an SQL Data Manipulation Language (DML) statement,
 such as
INSERT
,
UPDATE
or
DELETE
; or an SQL statement that returns nothing,
 such as a DDL statement.
ResultSet
executeQuery
()
Executes the SQL query in this
PreparedStatement
object
 and returns the
ResultSet
object generated by the query.
int
executeUpdate
()
Executes the SQL statement in this
PreparedStatement
object,
 which must be an SQL Data Manipulation Language (DML) statement, such as
INSERT
,
UPDATE
or
DELETE
; or an SQL statement that returns nothing,
 such as a DDL statement.
ResultSetMetaData
getMetaData
()
Retrieves a
ResultSetMetaData
object that contains
 information about the columns of the
ResultSet
object
 that will be returned when this
PreparedStatement
object
 is executed.
ParameterMetaData
getParameterMetaData
()
Retrieves the number, types and properties of this
PreparedStatement
object's parameters.
void
setArray
(int parameterIndex,
Array
x)
Sets the designated parameter to the given
java.sql.Array
object.
void
setAsciiStream
(int parameterIndex,
InputStream
x)
Sets the designated parameter to the given input stream.
void
setAsciiStream
(int parameterIndex,
InputStream
x,
 int length)
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
void
setAsciiStream
(int parameterIndex,
InputStream
x,
 long length)
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
void
setBigDecimal
(int parameterIndex,
BigDecimal
x)
Sets the designated parameter to the given
java.math.BigDecimal
value.
void
setBinaryStream
(int parameterIndex,
InputStream
x)
Sets the designated parameter to the given input stream.
void
setBinaryStream
(int parameterIndex,
InputStream
x,
 int length)
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
void
setBinaryStream
(int parameterIndex,
InputStream
x,
 long length)
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
void
setBlob
(int parameterIndex,
InputStream
inputStream)
Sets the designated parameter to a
InputStream
object.
void
setBlob
(int parameterIndex,
InputStream
inputStream,
 long length)
Sets the designated parameter to a
InputStream
object.
void
setBlob
(int parameterIndex,
Blob
x)
Sets the designated parameter to the given
java.sql.Blob
object.
void
setBoolean
(int parameterIndex,
 boolean x)
Sets the designated parameter to the given Java
boolean
value.
void
setByte
(int parameterIndex,
 byte x)
Sets the designated parameter to the given Java
byte
value.
void
setBytes
(int parameterIndex,
 byte[] x)
Sets the designated parameter to the given Java array of bytes.
void
setCharacterStream
(int parameterIndex,
Reader
reader)
Sets the designated parameter to the given
Reader
object.
void
setCharacterStream
(int parameterIndex,
Reader
reader,
 int length)
Sets the designated parameter to the given
Reader
object, which is the given number of characters long.
void
setCharacterStream
(int parameterIndex,
Reader
reader,
 long length)
Sets the designated parameter to the given
Reader
object, which is the given number of characters long.
void
setClob
(int parameterIndex,
Reader
reader)
Sets the designated parameter to a
Reader
object.
void
setClob
(int parameterIndex,
Reader
reader,
 long length)
Sets the designated parameter to a
Reader
object.
void
setClob
(int parameterIndex,
Clob
x)
Sets the designated parameter to the given
java.sql.Clob
object.
void
setDate
(int parameterIndex,
Date
x)
Sets the designated parameter to the given
java.sql.Date
value
 using the default time zone of the virtual machine that is running
 the application.
void
setDate
(int parameterIndex,
Date
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Date
value,
 using the given
Calendar
object.
void
setDouble
(int parameterIndex,
 double x)
Sets the designated parameter to the given Java
double
value.
void
setFloat
(int parameterIndex,
 float x)
Sets the designated parameter to the given Java
float
value.
void
setInt
(int parameterIndex,
 int x)
Sets the designated parameter to the given Java
int
value.
void
setLong
(int parameterIndex,
 long x)
Sets the designated parameter to the given Java
long
value.
void
setNCharacterStream
(int parameterIndex,
Reader
value)
Sets the designated parameter to a
Reader
object.
void
setNCharacterStream
(int parameterIndex,
Reader
value,
 long length)
Sets the designated parameter to a
Reader
object.
void
setNClob
(int parameterIndex,
Reader
reader)
Sets the designated parameter to a
Reader
object.
void
setNClob
(int parameterIndex,
Reader
reader,
 long length)
Sets the designated parameter to a
Reader
object.
void
setNClob
(int parameterIndex,
NClob
value)
Sets the designated parameter to a
java.sql.NClob
object.
void
setNString
(int parameterIndex,
String
value)
Sets the designated parameter to the given
String
object.
void
setNull
(int parameterIndex,
 int sqlType)
Sets the designated parameter to SQL
NULL
.
void
setNull
(int parameterIndex,
 int sqlType,
String
typeName)
Sets the designated parameter to SQL
NULL
.
void
setObject
(int parameterIndex,
Object
x)
Sets the value of the designated parameter using the given object.
void
setObject
(int parameterIndex,
Object
x,
 int targetSqlType)
Sets the value of the designated parameter with the given object.
void
setObject
(int parameterIndex,
Object
x,
 int targetSqlType,
 int scaleOrLength)
Sets the value of the designated parameter with the given object.
default void
setObject
(int parameterIndex,
Object
x,
SQLType
targetSqlType)
Sets the value of the designated parameter with the given object.
default void
setObject
(int parameterIndex,
Object
x,
SQLType
targetSqlType,
 int scaleOrLength)
Sets the value of the designated parameter with the given object.
void
setRef
(int parameterIndex,
Ref
x)
Sets the designated parameter to the given
REF(<structured-type>)
value.
void
setRowId
(int parameterIndex,
RowId
x)
Sets the designated parameter to the given
java.sql.RowId
object.
void
setShort
(int parameterIndex,
 short x)
Sets the designated parameter to the given Java
short
value.
void
setSQLXML
(int parameterIndex,
SQLXML
xmlObject)
Sets the designated parameter to the given
java.sql.SQLXML
object.
void
setString
(int parameterIndex,
String
x)
Sets the designated parameter to the given Java
String
value.
void
setTime
(int parameterIndex,
Time
x)
Sets the designated parameter to the given
java.sql.Time
value.
void
setTime
(int parameterIndex,
Time
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Time
value,
 using the given
Calendar
object.
void
setTimestamp
(int parameterIndex,
Timestamp
x)
Sets the designated parameter to the given
java.sql.Timestamp
value.
void
setTimestamp
(int parameterIndex,
Timestamp
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Timestamp
value,
 using the given
Calendar
object.
void
setUnicodeStream
(int parameterIndex,
InputStream
x,
 int length)
Deprecated.
Use
setCharacterStream
void
setURL
(int parameterIndex,
URL
x)
Sets the designated parameter to the given
java.net.URL
value.
Methods declared in interface java.sql.
Statement
addBatch
,
cancel
,
clearBatch
,
clearWarnings
,
close
,
closeOnCompletion
,
enquoteIdentifier
,
enquoteLiteral
,
enquoteNCharLiteral
,
execute
,
execute
,
execute
,
execute
,
executeBatch
,
executeLargeBatch
,
executeLargeUpdate
,
executeLargeUpdate
,
executeLargeUpdate
,
executeLargeUpdate
,
executeQuery
,
executeUpdate
,
executeUpdate
,
executeUpdate
,
executeUpdate
,
getConnection
,
getFetchDirection
,
getFetchSize
,
getGeneratedKeys
,
getLargeMaxRows
,
getLargeUpdateCount
,
getMaxFieldSize
,
getMaxRows
,
getMoreResults
,
getMoreResults
,
getQueryTimeout
,
getResultSet
,
getResultSetConcurrency
,
getResultSetHoldability
,
getResultSetType
,
getUpdateCount
,
getWarnings
,
isClosed
,
isCloseOnCompletion
,
isPoolable
,
isSimpleIdentifier
,
setCursorName
,
setEscapeProcessing
,
setFetchDirection
,
setFetchSize
,
setLargeMaxRows
,
setMaxFieldSize
,
setMaxRows
,
setPoolable
,
setQueryTimeout
Methods declared in interface java.sql.
Wrapper
isWrapperFor
,
unwrap
Method Details
executeQuery
ResultSet
executeQuery
()
                throws
SQLException
Executes the SQL query in this
PreparedStatement
object
 and returns the
ResultSet
object generated by the query.
Returns:
a
ResultSet
object that contains the data produced by the
         query; never
null
Throws:
SQLException
- if a database access error occurs;
 this method is called on a closed
PreparedStatement
or the SQL
            statement does not return a
ResultSet
object
SQLTimeoutException
- when the driver has determined that the
 timeout value that was specified by the
setQueryTimeout
method has been exceeded and has at least attempted to cancel
 the currently running
Statement
executeUpdate
int
executeUpdate
()
           throws
SQLException
Executes the SQL statement in this
PreparedStatement
object,
 which must be an SQL Data Manipulation Language (DML) statement, such as
INSERT
,
UPDATE
or
DELETE
; or an SQL statement that returns nothing,
 such as a DDL statement.
Returns:
either (1) the row count for SQL Data Manipulation Language (DML) statements
         or (2) 0 for SQL statements that return nothing
Throws:
SQLException
- if a database access error occurs;
 this method is called on a closed
PreparedStatement
or the SQL statement returns a
ResultSet
object
SQLTimeoutException
- when the driver has determined that the
 timeout value that was specified by the
setQueryTimeout
method has been exceeded and has at least attempted to cancel
 the currently running
Statement
setNull
void
setNull
(int parameterIndex,
 int sqlType)
throws
SQLException
Sets the designated parameter to SQL
NULL
.
Note:
You must specify the parameter's SQL type.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
sqlType
- the SQL type code defined in
java.sql.Types
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
SQLFeatureNotSupportedException
- if
sqlType
is
 a
ARRAY
,
BLOB
,
CLOB
,
DATALINK
,
JAVA_OBJECT
,
NCHAR
,
NCLOB
,
NVARCHAR
,
LONGNVARCHAR
,
REF
,
ROWID
,
SQLXML
or
STRUCT
data type and the JDBC driver does not support
 this data type
setBoolean
void
setBoolean
(int parameterIndex,
 boolean x)
throws
SQLException
Sets the designated parameter to the given Java
boolean
value.
 The driver converts this
 to an SQL
BIT
or
BOOLEAN
value when it sends it to the database.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the parameter value
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement;
 if a database access error occurs or
 this method is called on a closed
PreparedStatement
setByte
void
setByte
(int parameterIndex,
 byte x)
throws
SQLException
Sets the designated parameter to the given Java
byte
value.
 The driver converts this
 to an SQL
TINYINT
value when it sends it to the database.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the parameter value
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
setShort
void
setShort
(int parameterIndex,
 short x)
throws
SQLException
Sets the designated parameter to the given Java
short
value.
 The driver converts this
 to an SQL
SMALLINT
value when it sends it to the database.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the parameter value
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
setInt
void
setInt
(int parameterIndex,
 int x)
throws
SQLException
Sets the designated parameter to the given Java
int
value.
 The driver converts this
 to an SQL
INTEGER
value when it sends it to the database.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the parameter value
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
setLong
void
setLong
(int parameterIndex,
 long x)
throws
SQLException
Sets the designated parameter to the given Java
long
value.
 The driver converts this
 to an SQL
BIGINT
value when it sends it to the database.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the parameter value
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
setFloat
void
setFloat
(int parameterIndex,
 float x)
throws
SQLException
Sets the designated parameter to the given Java
float
value.
 The driver converts this
 to an SQL
REAL
value when it sends it to the database.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the parameter value
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
setDouble
void
setDouble
(int parameterIndex,
 double x)
throws
SQLException
Sets the designated parameter to the given Java
double
value.
 The driver converts this
 to an SQL
DOUBLE
value when it sends it to the database.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the parameter value
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
setBigDecimal
void
setBigDecimal
(int parameterIndex,
BigDecimal
x)
throws
SQLException
Sets the designated parameter to the given
java.math.BigDecimal
value.
 The driver converts this to an SQL
NUMERIC
value when
 it sends it to the database.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the parameter value
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
setString
void
setString
(int parameterIndex,
String
x)
throws
SQLException
Sets the designated parameter to the given Java
String
value.
 The driver converts this
 to an SQL
VARCHAR
or
LONGVARCHAR
value
 (depending on the argument's
 size relative to the driver's limits on
VARCHAR
values)
 when it sends it to the database.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the parameter value
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
setBytes
void
setBytes
(int parameterIndex,
 byte[] x)
throws
SQLException
Sets the designated parameter to the given Java array of bytes.  The driver converts
 this to an SQL
VARBINARY
or
LONGVARBINARY
(depending on the argument's size relative to the driver's limits on
VARBINARY
values) when it sends it to the database.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the parameter value
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
setDate
void
setDate
(int parameterIndex,
Date
x)
throws
SQLException
Sets the designated parameter to the given
java.sql.Date
value
 using the default time zone of the virtual machine that is running
 the application.
 The driver converts this
 to an SQL
DATE
value when it sends it to the database.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the parameter value
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
setTime
void
setTime
(int parameterIndex,
Time
x)
throws
SQLException
Sets the designated parameter to the given
java.sql.Time
value.
 The driver converts this
 to an SQL
TIME
value when it sends it to the database.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the parameter value
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
setTimestamp
void
setTimestamp
(int parameterIndex,
Timestamp
x)
throws
SQLException
Sets the designated parameter to the given
java.sql.Timestamp
value.
 The driver
 converts this to an SQL
TIMESTAMP
value when it sends it to the
 database.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the parameter value
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
setAsciiStream
void
setAsciiStream
(int parameterIndex,
InputStream
x,
 int length)
throws
SQLException
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
 When a very large ASCII value is input to a
LONGVARCHAR
parameter, it may be more practical to send it via a
java.io.InputStream
. Data will be read from the stream
 as needed until end-of-file is reached.  The JDBC driver will
 do any necessary conversion from ASCII to the database char format.
Note:
This stream object can either be a standard
 Java stream object or your own subclass that implements the
 standard interface.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the Java input stream that contains the ASCII parameter value
length
- the number of bytes in the stream
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
setUnicodeStream
@Deprecated
(
since
="1.2")
void
setUnicodeStream
(int parameterIndex,
InputStream
x,
 int length)
throws
SQLException
Deprecated.
Use
setCharacterStream
Sets the designated parameter to the given input stream, which
 will have the specified number of bytes.

 When a very large Unicode value is input to a
LONGVARCHAR
parameter, it may be more practical to send it via a
java.io.InputStream
object. The data will be read from the
 stream as needed until end-of-file is reached.  The JDBC driver will
 do any necessary conversion from Unicode to the database char format.

The byte format of the Unicode stream must be a Java UTF-8, as defined in the
Java Virtual Machine Specification.
Note:
This stream object can either be a standard
 Java stream object or your own subclass that implements the
 standard interface.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- a
java.io.InputStream
object that contains the
        Unicode parameter value
length
- the number of bytes in the stream
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
setBinaryStream
void
setBinaryStream
(int parameterIndex,
InputStream
x,
 int length)
throws
SQLException
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
 When a very large binary value is input to a
LONGVARBINARY
parameter, it may be more practical to send it via a
java.io.InputStream
object. The data will be read from the
 stream as needed until end-of-file is reached.
Note:
This stream object can either be a standard
 Java stream object or your own subclass that implements the
 standard interface.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the java input stream which contains the binary parameter value
length
- the number of bytes in the stream
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
clearParameters
void
clearParameters
()
              throws
SQLException
Clears the current parameter values immediately.
In general, parameter values remain in force for repeated use of a
 statement. Setting a parameter value automatically clears its
 previous value.  However, in some cases it is useful to immediately
 release the resources used by the current parameter values; this can
 be done by calling the method
clearParameters
.
Throws:
SQLException
- if a database access error occurs or
 this method is called on a closed
PreparedStatement
setObject
void
setObject
(int parameterIndex,
Object
x,
 int targetSqlType)
throws
SQLException
Sets the value of the designated parameter with the given object.

 This method is similar to
setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength)
,
 except that it assumes a scale of zero.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the object containing the input parameter value
targetSqlType
- the SQL type (as defined in java.sql.Types) to be
                      sent to the database
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or this
 method is called on a closed PreparedStatement
SQLFeatureNotSupportedException
- if
 the JDBC driver does not support the specified targetSqlType
See Also:
Types
setObject
void
setObject
(int parameterIndex,
Object
x)
throws
SQLException
Sets the value of the designated parameter using the given object.
The JDBC specification specifies a standard mapping from
 Java
Object
types to SQL types.  The given argument
 will be converted to the corresponding SQL type before being
 sent to the database.
Note that this method may be used to pass database-
 specific abstract data types, by using a driver-specific Java
 type.

 If the object is of a class implementing the interface
SQLData
,
 the JDBC driver should call the method
SQLData.writeSQL
to write it to the SQL data stream.
 If, on the other hand, the object is of a class implementing
Ref
,
Blob
,
Clob
,
NClob
,
Struct
,
java.net.URL
,
RowId
,
SQLXML
or
Array
, the driver should pass it to the database as a
 value of the corresponding SQL type.
Note:
Not all databases allow for a non-typed Null to be sent to
 the backend. For maximum portability, the
setNull
or the
setObject(int parameterIndex, Object x, int sqlType)
method should be used
 instead of
setObject(int parameterIndex, Object x)
.
Note:
This method throws an exception if there is an ambiguity, for example, if the
 object is of a class implementing more than one of the interfaces named above.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the object containing the input parameter value
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs;
  this method is called on a closed
PreparedStatement
or the type of the given object is ambiguous
execute
boolean
execute
()
         throws
SQLException
Executes the SQL statement in this
PreparedStatement
object,
 which may be any kind of SQL statement.
 Some prepared statements return multiple results; the
execute
method handles these complex statements as well as the simpler
 form of statements handled by the methods
executeQuery
and
executeUpdate
.
The
execute
method returns a
boolean
to
 indicate the form of the first result.  You must call either the method
getResultSet
or
getUpdateCount
to retrieve the result; you must call
getMoreResults
to
 move to any subsequent result(s).
Returns:
true
if the first result is a
ResultSet
object;
false
if the first result is an update
         count or there is no result
Throws:
SQLException
- if a database access error occurs;
 this method is called on a closed
PreparedStatement
or an argument is supplied to this method
SQLTimeoutException
- when the driver has determined that the
 timeout value that was specified by the
setQueryTimeout
method has been exceeded and has at least attempted to cancel
 the currently running
Statement
See Also:
Statement.execute(java.lang.String)
Statement.getResultSet()
Statement.getUpdateCount()
Statement.getMoreResults()
addBatch
void
addBatch
()
       throws
SQLException
Adds a set of parameters to this
PreparedStatement
object's batch of commands.
Throws:
SQLException
- if a database access error occurs or
 this method is called on a closed
PreparedStatement
Since:
1.2
See Also:
Statement.addBatch(java.lang.String)
setCharacterStream
void
setCharacterStream
(int parameterIndex,
Reader
reader,
 int length)
throws
SQLException
Sets the designated parameter to the given
Reader
object, which is the given number of characters long.
 When a very large UNICODE value is input to a
LONGVARCHAR
parameter, it may be more practical to send it via a
java.io.Reader
object. The data will be read from the stream
 as needed until end-of-file is reached.  The JDBC driver will
 do any necessary conversion from UNICODE to the database char format.
Note:
This stream object can either be a standard
 Java stream object or your own subclass that implements the
 standard interface.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
reader
- the
java.io.Reader
object that contains the
        Unicode data
length
- the number of characters in the stream
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
Since:
1.2
setRef
void
setRef
(int parameterIndex,
Ref
x)
throws
SQLException
Sets the designated parameter to the given
REF(<structured-type>)
value.
 The driver converts this to an SQL
REF
value when it
 sends it to the database.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- an SQL
REF
value
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
Since:
1.2
setBlob
void
setBlob
(int parameterIndex,
Blob
x)
throws
SQLException
Sets the designated parameter to the given
java.sql.Blob
object.
 The driver converts this to an SQL
BLOB
value when it
 sends it to the database.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- a
Blob
object that maps an SQL
BLOB
value
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
Since:
1.2
setClob
void
setClob
(int parameterIndex,
Clob
x)
throws
SQLException
Sets the designated parameter to the given
java.sql.Clob
object.
 The driver converts this to an SQL
CLOB
value when it
 sends it to the database.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- a
Clob
object that maps an SQL
CLOB
value
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
Since:
1.2
setArray
void
setArray
(int parameterIndex,
Array
x)
throws
SQLException
Sets the designated parameter to the given
java.sql.Array
object.
 The driver converts this to an SQL
ARRAY
value when it
 sends it to the database.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- an
Array
object that maps an SQL
ARRAY
value
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
Since:
1.2
getMetaData
ResultSetMetaData
getMetaData
()
                       throws
SQLException
Retrieves a
ResultSetMetaData
object that contains
 information about the columns of the
ResultSet
object
 that will be returned when this
PreparedStatement
object
 is executed.
Because a
PreparedStatement
object is precompiled, it is
 possible to know about the
ResultSet
object that it will
 return without having to execute it.  Consequently, it is possible
 to invoke the method
getMetaData
on a
PreparedStatement
object rather than waiting to execute
 it and then invoking the
ResultSet.getMetaData
method
 on the
ResultSet
object that is returned.
NOTE:
Using this method may be expensive for some drivers due
 to the lack of underlying DBMS support.
Returns:
the description of a
ResultSet
object's columns or
null
if the driver cannot return a
ResultSetMetaData
object
Throws:
SQLException
- if a database access error occurs or
 this method is called on a closed
PreparedStatement
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
setDate
void
setDate
(int parameterIndex,
Date
x,
Calendar
cal)
throws
SQLException
Sets the designated parameter to the given
java.sql.Date
value,
 using the given
Calendar
object.  The driver uses
 the
Calendar
object to construct an SQL
DATE
value,
 which the driver then sends to the database.  With
 a
Calendar
object, the driver can calculate the date
 taking into account a custom timezone.  If no
Calendar
object is specified, the driver uses the default
 timezone, which is that of the virtual machine running the application.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the parameter value
cal
- the
Calendar
object the driver will use
            to construct the date
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
Since:
1.2
setTime
void
setTime
(int parameterIndex,
Time
x,
Calendar
cal)
throws
SQLException
Sets the designated parameter to the given
java.sql.Time
value,
 using the given
Calendar
object.  The driver uses
 the
Calendar
object to construct an SQL
TIME
value,
 which the driver then sends to the database.  With
 a
Calendar
object, the driver can calculate the time
 taking into account a custom timezone.  If no
Calendar
object is specified, the driver uses the default
 timezone, which is that of the virtual machine running the application.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the parameter value
cal
- the
Calendar
object the driver will use
            to construct the time
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
Since:
1.2
setTimestamp
void
setTimestamp
(int parameterIndex,
Timestamp
x,
Calendar
cal)
throws
SQLException
Sets the designated parameter to the given
java.sql.Timestamp
value,
 using the given
Calendar
object.  The driver uses
 the
Calendar
object to construct an SQL
TIMESTAMP
value,
 which the driver then sends to the database.  With a
Calendar
object, the driver can calculate the timestamp
 taking into account a custom timezone.  If no
Calendar
object is specified, the driver uses the default
 timezone, which is that of the virtual machine running the application.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the parameter value
cal
- the
Calendar
object the driver will use
            to construct the timestamp
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
Since:
1.2
setNull
void
setNull
(int parameterIndex,
 int sqlType,
String
typeName)
throws
SQLException
Sets the designated parameter to SQL
NULL
.
 This version of the method
setNull
should
 be used for user-defined types and REF type parameters.  Examples
 of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and
 named array types.
Note:
To be portable, applications must give the
 SQL type code and the fully-qualified SQL type name when specifying
 a NULL user-defined or REF parameter.  In the case of a user-defined type
 the name is the type name of the parameter itself.  For a REF
 parameter, the name is the type name of the referenced type.  If
 a JDBC driver does not need the type code or type name information,
 it may ignore it.

 Although it is intended for user-defined and Ref parameters,
 this method may be used to set a null parameter of any JDBC type.
 If the parameter does not have a user-defined or REF type, the given
 typeName is ignored.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
sqlType
- a value from
java.sql.Types
typeName
- the fully-qualified name of an SQL user-defined type;
  ignored if the parameter is not a user-defined type or REF
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
SQLFeatureNotSupportedException
- if
sqlType
is
 a
ARRAY
,
BLOB
,
CLOB
,
DATALINK
,
JAVA_OBJECT
,
NCHAR
,
NCLOB
,
NVARCHAR
,
LONGNVARCHAR
,
REF
,
ROWID
,
SQLXML
or
STRUCT
data type and the JDBC driver does not support
 this data type or if the JDBC driver does not support this method
Since:
1.2
setURL
void
setURL
(int parameterIndex,
URL
x)
throws
SQLException
Sets the designated parameter to the given
java.net.URL
value.
 The driver converts this to an SQL
DATALINK
value
 when it sends it to the database.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the
java.net.URL
object to be set
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
Since:
1.4
getParameterMetaData
ParameterMetaData
getParameterMetaData
()
                                throws
SQLException
Retrieves the number, types and properties of this
PreparedStatement
object's parameters.
Returns:
a
ParameterMetaData
object that contains information
         about the number, types and properties for each
  parameter marker of this
PreparedStatement
object
Throws:
SQLException
- if a database access error occurs or
 this method is called on a closed
PreparedStatement
Since:
1.4
See Also:
ParameterMetaData
setRowId
void
setRowId
(int parameterIndex,
RowId
x)
throws
SQLException
Sets the designated parameter to the given
java.sql.RowId
object. The
 driver converts this to a SQL
ROWID
value when it sends it
 to the database
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the parameter value
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
Since:
1.6
setNString
void
setNString
(int parameterIndex,
String
value)
throws
SQLException
Sets the designated parameter to the given
String
object.
 The driver converts this to a SQL
NCHAR
or
NVARCHAR
or
LONGNVARCHAR
value
 (depending on the argument's
 size relative to the driver's limits on
NVARCHAR
values)
 when it sends it to the database.
Parameters:
parameterIndex
- of the first parameter is 1, the second is 2, ...
value
- the parameter value
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if the driver does not support national
         character sets;  if the driver can detect that a data conversion
  error could occur; if a database access error occurs; or
 this method is called on a closed
PreparedStatement
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
Since:
1.6
setNCharacterStream
void
setNCharacterStream
(int parameterIndex,
Reader
value,
 long length)
throws
SQLException
Sets the designated parameter to a
Reader
object. The
Reader
reads the data till end-of-file is reached. The
 driver does the necessary conversion from Java character format to
 the national character set in the database.
Parameters:
parameterIndex
- of the first parameter is 1, the second is 2, ...
value
- the parameter value
length
- the number of characters in the parameter data.
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if the driver does not support national
         character sets;  if the driver can detect that a data conversion
  error could occur; if a database access error occurs; or
 this method is called on a closed
PreparedStatement
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
Since:
1.6
setNClob
void
setNClob
(int parameterIndex,
NClob
value)
throws
SQLException
Sets the designated parameter to a
java.sql.NClob
object. The driver converts this to a
 SQL
NCLOB
value when it sends it to the database.
Parameters:
parameterIndex
- of the first parameter is 1, the second is 2, ...
value
- the parameter value
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if the driver does not support national
         character sets;  if the driver can detect that a data conversion
  error could occur; if a database access error occurs; or
 this method is called on a closed
PreparedStatement
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
Since:
1.6
setClob
void
setClob
(int parameterIndex,
Reader
reader,
 long length)
throws
SQLException
Sets the designated parameter to a
Reader
object.  The reader must contain  the number
 of characters specified by length otherwise a
SQLException
will be
 generated when the
PreparedStatement
is executed.
This method differs from the
setCharacterStream (int, Reader, int)
method
 because it informs the driver that the parameter value should be sent to
 the server as a
CLOB
.  When the
setCharacterStream
method is used, the
 driver may have to do extra work to determine whether the parameter
 data should be sent to the server as a
LONGVARCHAR
or a
CLOB
Parameters:
parameterIndex
- index of the first parameter is 1, the second is 2, ...
reader
- An object that contains the data to set the parameter value to.
length
- the number of characters in the parameter data.
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs; this method is called on
 a closed
PreparedStatement
or if the length specified is less than zero.
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
Since:
1.6
setBlob
void
setBlob
(int parameterIndex,
InputStream
inputStream,
 long length)
throws
SQLException
Sets the designated parameter to a
InputStream
object.
 The
Inputstream
must contain  the number
 of characters specified by length otherwise a
SQLException
will be
 generated when the
PreparedStatement
is executed.
 This method differs from the
setBinaryStream (int, InputStream, int)
method because it informs the driver that the parameter value should be
 sent to the server as a
BLOB
.  When the
setBinaryStream
method is used,
 the driver may have to do extra work to determine whether the parameter
 data should be sent to the server as a
LONGVARBINARY
or a
BLOB
Parameters:
parameterIndex
- index of the first parameter is 1,
 the second is 2, ...
inputStream
- An object that contains the data to set the parameter
 value to.
length
- the number of bytes in the parameter data.
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs;
 this method is called on a closed
PreparedStatement
;
 if the length specified
 is less than zero or if the number of bytes in the
InputStream
does not match
 the specified length.
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
Since:
1.6
setNClob
void
setNClob
(int parameterIndex,
Reader
reader,
 long length)
throws
SQLException
Sets the designated parameter to a
Reader
object.  The reader must contain  the number
 of characters specified by length otherwise a
SQLException
will be
 generated when the
PreparedStatement
is executed.
 This method differs from the
setCharacterStream (int, Reader, int)
method
 because it informs the driver that the parameter value should be sent to
 the server as a
NCLOB
.  When the
setCharacterStream
method is used, the
 driver may have to do extra work to determine whether the parameter
 data should be sent to the server as a
LONGNVARCHAR
or a
NCLOB
Parameters:
parameterIndex
- index of the first parameter is 1, the second is 2, ...
reader
- An object that contains the data to set the parameter value to.
length
- the number of characters in the parameter data.
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if the length specified is less than zero;
 if the driver does not support national character sets;
 if the driver can detect that a data conversion
  error could occur;  if a database access error occurs or
 this method is called on a closed
PreparedStatement
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
Since:
1.6
setSQLXML
void
setSQLXML
(int parameterIndex,
SQLXML
xmlObject)
throws
SQLException
Sets the designated parameter to the given
java.sql.SQLXML
object.
 The driver converts this to an
 SQL
XML
value when it sends it to the database.
Parameters:
parameterIndex
- index of the first parameter is 1, the second is 2, ...
xmlObject
- a
SQLXML
object that maps an SQL
XML
value
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs;
  this method is called on a closed
PreparedStatement
or the
java.xml.transform.Result
,
Writer
or
OutputStream
has not been closed for
 the
SQLXML
object
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
Since:
1.6
setObject
void
setObject
(int parameterIndex,
Object
x,
 int targetSqlType,
 int scaleOrLength)
throws
SQLException
Sets the value of the designated parameter with the given object.

 If the second argument is an
InputStream
then the stream must contain
 the number of bytes specified by scaleOrLength.  If the second argument is a
Reader
then the reader must contain the number of characters specified
 by scaleOrLength. If these conditions are not true the driver will generate a
SQLException
when the prepared statement is executed.
The given Java object will be converted to the given targetSqlType
 before being sent to the database.

 If the object has a custom mapping (is of a class implementing the
 interface
SQLData
),
 the JDBC driver should call the method
SQLData.writeSQL
to
 write it to the SQL data stream.
 If, on the other hand, the object is of a class implementing
Ref
,
Blob
,
Clob
,
NClob
,
Struct
,
java.net.URL
,
 or
Array
, the driver should pass it to the database as a
 value of the corresponding SQL type.
Note that this method may be used to pass database-specific
 abstract data types.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the object containing the input parameter value
targetSqlType
- the SQL type (as defined in java.sql.Types) to be
 sent to the database. The scale argument may further qualify this type.
scaleOrLength
- for
java.sql.Types.DECIMAL
or
java.sql.Types.NUMERIC types
,
          this is the number of digits after the decimal point. For
          Java Object types
InputStream
and
Reader
,
          this is the length
          of the data in the stream or reader.  For all other types,
          this value will be ignored.
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs;
 this method is called on a closed
PreparedStatement
or
            if the Java Object specified by x is an InputStream
            or Reader object and the value of the scale parameter is less
            than zero
SQLFeatureNotSupportedException
- if
 the JDBC driver does not support the specified targetSqlType
See Also:
Types
setAsciiStream
void
setAsciiStream
(int parameterIndex,
InputStream
x,
 long length)
throws
SQLException
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
 When a very large ASCII value is input to a
LONGVARCHAR
parameter, it may be more practical to send it via a
java.io.InputStream
. Data will be read from the stream
 as needed until end-of-file is reached.  The JDBC driver will
 do any necessary conversion from ASCII to the database char format.
Note:
This stream object can either be a standard
 Java stream object or your own subclass that implements the
 standard interface.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the Java input stream that contains the ASCII parameter value
length
- the number of bytes in the stream
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
Since:
1.6
setBinaryStream
void
setBinaryStream
(int parameterIndex,
InputStream
x,
 long length)
throws
SQLException
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
 When a very large binary value is input to a
LONGVARBINARY
parameter, it may be more practical to send it via a
java.io.InputStream
object. The data will be read from the
 stream as needed until end-of-file is reached.
Note:
This stream object can either be a standard
 Java stream object or your own subclass that implements the
 standard interface.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the java input stream which contains the binary parameter value
length
- the number of bytes in the stream
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
Since:
1.6
setCharacterStream
void
setCharacterStream
(int parameterIndex,
Reader
reader,
 long length)
throws
SQLException
Sets the designated parameter to the given
Reader
object, which is the given number of characters long.
 When a very large UNICODE value is input to a
LONGVARCHAR
parameter, it may be more practical to send it via a
java.io.Reader
object. The data will be read from the stream
 as needed until end-of-file is reached.  The JDBC driver will
 do any necessary conversion from UNICODE to the database char format.
Note:
This stream object can either be a standard
 Java stream object or your own subclass that implements the
 standard interface.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
reader
- the
java.io.Reader
object that contains the
        Unicode data
length
- the number of characters in the stream
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
Since:
1.6
setAsciiStream
void
setAsciiStream
(int parameterIndex,
InputStream
x)
throws
SQLException
Sets the designated parameter to the given input stream.
 When a very large ASCII value is input to a
LONGVARCHAR
parameter, it may be more practical to send it via a
java.io.InputStream
. Data will be read from the stream
 as needed until end-of-file is reached.  The JDBC driver will
 do any necessary conversion from ASCII to the database char format.
Note:
This stream object can either be a standard
 Java stream object or your own subclass that implements the
 standard interface.
Note:
Consult your JDBC driver documentation to determine if
 it might be more efficient to use a version of
setAsciiStream
which takes a length parameter.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the Java input stream that contains the ASCII parameter value
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
Since:
1.6
setBinaryStream
void
setBinaryStream
(int parameterIndex,
InputStream
x)
throws
SQLException
Sets the designated parameter to the given input stream.
 When a very large binary value is input to a
LONGVARBINARY
parameter, it may be more practical to send it via a
java.io.InputStream
object. The data will be read from the
 stream as needed until end-of-file is reached.
Note:
This stream object can either be a standard
 Java stream object or your own subclass that implements the
 standard interface.
Note:
Consult your JDBC driver documentation to determine if
 it might be more efficient to use a version of
setBinaryStream
which takes a length parameter.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the java input stream which contains the binary parameter value
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
Since:
1.6
setCharacterStream
void
setCharacterStream
(int parameterIndex,
Reader
reader)
throws
SQLException
Sets the designated parameter to the given
Reader
object.
 When a very large UNICODE value is input to a
LONGVARCHAR
parameter, it may be more practical to send it via a
java.io.Reader
object. The data will be read from the stream
 as needed until end-of-file is reached.  The JDBC driver will
 do any necessary conversion from UNICODE to the database char format.
Note:
This stream object can either be a standard
 Java stream object or your own subclass that implements the
 standard interface.
Note:
Consult your JDBC driver documentation to determine if
 it might be more efficient to use a version of
setCharacterStream
which takes a length parameter.
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
reader
- the
java.io.Reader
object that contains the
        Unicode data
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs or
 this method is called on a closed
PreparedStatement
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
Since:
1.6
setNCharacterStream
void
setNCharacterStream
(int parameterIndex,
Reader
value)
throws
SQLException
Sets the designated parameter to a
Reader
object. The
Reader
reads the data till end-of-file is reached. The
 driver does the necessary conversion from Java character format to
 the national character set in the database.
Note:
This stream object can either be a standard
 Java stream object or your own subclass that implements the
 standard interface.
Note:
Consult your JDBC driver documentation to determine if
 it might be more efficient to use a version of
setNCharacterStream
which takes a length parameter.
Parameters:
parameterIndex
- of the first parameter is 1, the second is 2, ...
value
- the parameter value
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if the driver does not support national
         character sets;  if the driver can detect that a data conversion
  error could occur; if a database access error occurs; or
 this method is called on a closed
PreparedStatement
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
Since:
1.6
setClob
void
setClob
(int parameterIndex,
Reader
reader)
throws
SQLException
Sets the designated parameter to a
Reader
object.
 This method differs from the
setCharacterStream (int, Reader)
method
 because it informs the driver that the parameter value should be sent to
 the server as a
CLOB
.  When the
setCharacterStream
method is used, the
 driver may have to do extra work to determine whether the parameter
 data should be sent to the server as a
LONGVARCHAR
or a
CLOB
Note:
Consult your JDBC driver documentation to determine if
 it might be more efficient to use a version of
setClob
which takes a length parameter.
Parameters:
parameterIndex
- index of the first parameter is 1, the second is 2, ...
reader
- An object that contains the data to set the parameter value to.
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs; this method is called on
 a closed
PreparedStatement
or if parameterIndex does not correspond to a parameter
 marker in the SQL statement
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
Since:
1.6
setBlob
void
setBlob
(int parameterIndex,
InputStream
inputStream)
throws
SQLException
Sets the designated parameter to a
InputStream
object.
 This method differs from the
setBinaryStream (int, InputStream)
method because it informs the driver that the parameter value should be
 sent to the server as a
BLOB
.  When the
setBinaryStream
method is used,
 the driver may have to do extra work to determine whether the parameter
 data should be sent to the server as a
LONGVARBINARY
or a
BLOB
Note:
Consult your JDBC driver documentation to determine if
 it might be more efficient to use a version of
setBlob
which takes a length parameter.
Parameters:
parameterIndex
- index of the first parameter is 1,
 the second is 2, ...
inputStream
- An object that contains the data to set the parameter
 value to.
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement; if a database access error occurs;
 this method is called on a closed
PreparedStatement
or
 if parameterIndex does not correspond
 to a parameter marker in the SQL statement,
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
Since:
1.6
setNClob
void
setNClob
(int parameterIndex,
Reader
reader)
throws
SQLException
Sets the designated parameter to a
Reader
object.
 This method differs from the
setCharacterStream (int, Reader)
method
 because it informs the driver that the parameter value should be sent to
 the server as a
NCLOB
.  When the
setCharacterStream
method is used, the
 driver may have to do extra work to determine whether the parameter
 data should be sent to the server as a
LONGNVARCHAR
or a
NCLOB
Note:
Consult your JDBC driver documentation to determine if
 it might be more efficient to use a version of
setNClob
which takes a length parameter.
Parameters:
parameterIndex
- index of the first parameter is 1, the second is 2, ...
reader
- An object that contains the data to set the parameter value to.
Throws:
SQLException
- if parameterIndex does not correspond to a parameter
 marker in the SQL statement;
 if the driver does not support national character sets;
 if the driver can detect that a data conversion
  error could occur;  if a database access error occurs or
 this method is called on a closed
PreparedStatement
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
Since:
1.6
setObject
default
void
setObject
(int parameterIndex,
Object
x,
SQLType
targetSqlType,
 int scaleOrLength)
throws
SQLException
Sets the value of the designated parameter with the given object.

 If the second argument is an
InputStream
then the stream
 must contain the number of bytes specified by scaleOrLength.
 If the second argument is a
Reader
then the reader must
 contain the number of characters specified by scaleOrLength. If these
 conditions are not true the driver will generate a
SQLException
when the prepared statement is executed.
The given Java object will be converted to the given targetSqlType
 before being sent to the database.

 If the object has a custom mapping (is of a class implementing the
 interface
SQLData
),
 the JDBC driver should call the method
SQLData.writeSQL
to
 write it to the SQL data stream.
 If, on the other hand, the object is of a class implementing
Ref
,
Blob
,
Clob
,
NClob
,
Struct
,
java.net.URL
,
 or
Array
, the driver should pass it to the database as a
 value of the corresponding SQL type.
Note that this method may be used to pass database-specific
 abstract data types.
The default implementation will throw
SQLFeatureNotSupportedException
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the object containing the input parameter value
targetSqlType
- the SQL type to be sent to the database. The
 scale argument may further qualify this type.
scaleOrLength
- for
java.sql.JDBCType.DECIMAL
or
java.sql.JDBCType.NUMERIC types
,
          this is the number of digits after the decimal point. For
          Java Object types
InputStream
and
Reader
,
          this is the length
          of the data in the stream or reader.  For all other types,
          this value will be ignored.
Throws:
SQLException
- if parameterIndex does not correspond to a
 parameter marker in the SQL statement; if a database access error occurs
 or this method is called on a closed
PreparedStatement
or
            if the Java Object specified by x is an InputStream
            or Reader object and the value of the scale parameter is less
            than zero
SQLFeatureNotSupportedException
- if
 the JDBC driver does not support the specified targetSqlType
Since:
1.8
See Also:
JDBCType
SQLType
setObject
default
void
setObject
(int parameterIndex,
Object
x,
SQLType
targetSqlType)
throws
SQLException
Sets the value of the designated parameter with the given object.

 This method is similar to
setObject(int parameterIndex, Object x, SQLType targetSqlType, int scaleOrLength)
,
 except that it assumes a scale of zero.
The default implementation will throw
SQLFeatureNotSupportedException
Parameters:
parameterIndex
- the first parameter is 1, the second is 2, ...
x
- the object containing the input parameter value
targetSqlType
- the SQL type to be sent to the database
Throws:
SQLException
- if parameterIndex does not correspond to a
 parameter marker in the SQL statement; if a database access error occurs
 or this method is called on a closed
PreparedStatement
SQLFeatureNotSupportedException
- if
 the JDBC driver does not support the specified targetSqlType
Since:
1.8
See Also:
JDBCType
SQLType
executeLargeUpdate
default
long
executeLargeUpdate
()
                         throws
SQLException
Executes the SQL statement in this
PreparedStatement
object,
 which must be an SQL Data Manipulation Language (DML) statement,
 such as
INSERT
,
UPDATE
or
DELETE
; or an SQL statement that returns nothing,
 such as a DDL statement.
This method should be used when the returned row count may exceed
Integer.MAX_VALUE
.
The default implementation will throw
UnsupportedOperationException
Returns:
either (1) the row count for SQL Data Manipulation Language
 (DML) statements or (2) 0 for SQL statements that return nothing
Throws:
SQLException
- if a database access error occurs;
 this method is called on a closed
PreparedStatement
or the SQL statement returns a
ResultSet
object
SQLTimeoutException
- when the driver has determined that the
 timeout value that was specified by the
setQueryTimeout
method has been exceeded and has at least attempted to cancel
 the currently running
Statement
Since:
1.8
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.