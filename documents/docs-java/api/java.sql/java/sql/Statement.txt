Statement (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field
|
Constr |
Method
Detail:
Field
|
Constr |
Method
SEARCH
Module
java.sql
Package
java.sql
Interface Statement
All Superinterfaces:
AutoCloseable
,
Wrapper
All Known Subinterfaces:
CallableStatement
,
PreparedStatement
public interface
Statement
extends
Wrapper
,
AutoCloseable
The object used for executing a static SQL statement
 and returning the results it produces.
By default, only one
ResultSet
object per
Statement
object can be open at the same time. Therefore, if the reading of one
ResultSet
object is interleaved
 with the reading of another, each must have been generated by
 different
Statement
objects. All execution methods in the
Statement
interface implicitly close a current
ResultSet
object of the statement if an open one exists.
Since:
1.1
See Also:
Connection.createStatement()
ResultSet
Field Summary
Fields
Modifier and Type
Field
Description
static final int
CLOSE_ALL_RESULTS
The constant indicating that all
ResultSet
objects that
 have previously been kept open should be closed when calling
getMoreResults
.
static final int
CLOSE_CURRENT_RESULT
The constant indicating that the current
ResultSet
object
 should be closed when calling
getMoreResults
.
static final int
EXECUTE_FAILED
The constant indicating that an error occurred while executing a
 batch statement.
static final int
KEEP_CURRENT_RESULT
The constant indicating that the current
ResultSet
object
 should not be closed when calling
getMoreResults
.
static final int
NO_GENERATED_KEYS
The constant indicating that generated keys should not be made
 available for retrieval.
static final int
RETURN_GENERATED_KEYS
The constant indicating that generated keys should be made
 available for retrieval.
static final int
SUCCESS_NO_INFO
The constant indicating that a batch statement executed successfully
 but that no count of the number of rows it affected is available.
Method Summary
All Methods
Instance Methods
Abstract Methods
Default Methods
Modifier and Type
Method
Description
void
addBatch
(
String
sql)
Adds the given SQL command to the current list of commands for this
Statement
object.
void
cancel
()
Cancels this
Statement
object if both the DBMS and
 driver support aborting an SQL statement.
void
clearBatch
()
Empties this
Statement
object's current list of
 SQL commands.
void
clearWarnings
()
Clears all the warnings reported on this
Statement
object.
void
close
()
Releases this
Statement
object's database
 and JDBC resources immediately instead of waiting for
 this to happen when it is automatically closed.
void
closeOnCompletion
()
Specifies that this
Statement
will be closed when all its
 dependent result sets are closed.
default
String
enquoteIdentifier
(
String
identifier,
 boolean alwaysQuote)
Returns a SQL identifier.
default
String
enquoteLiteral
(
String
val)
Returns a
String
enclosed in single quotes.
default
String
enquoteNCharLiteral
(
String
val)
Returns a
String
representing a National Character Set Literal
 enclosed in single quotes and prefixed with a upper case letter N.
boolean
execute
(
String
sql)
Executes the given SQL statement, which may return multiple results.
boolean
execute
(
String
sql,
 int autoGeneratedKeys)
Executes the given SQL statement, which may return multiple results,
 and signals the driver that any
 auto-generated keys should be made available
 for retrieval.
boolean
execute
(
String
sql,
 int[] columnIndexes)
Executes the given SQL statement, which may return multiple results,
 and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.
boolean
execute
(
String
sql,
String
[] columnNames)
Executes the given SQL statement, which may return multiple results,
 and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.
int[]
executeBatch
()
Submits a batch of commands to the database for execution and
 if all commands execute successfully, returns an array of update counts.
default long[]
executeLargeBatch
()
Submits a batch of commands to the database for execution and
 if all commands execute successfully, returns an array of update counts.
default long
executeLargeUpdate
(
String
sql)
Executes the given SQL statement, which may be an
INSERT
,
UPDATE
, or
DELETE
statement or an
 SQL statement that returns nothing, such as an SQL DDL statement.
default long
executeLargeUpdate
(
String
sql,
 int autoGeneratedKeys)
Executes the given SQL statement and signals the driver with the
 given flag about whether the
 auto-generated keys produced by this
Statement
object
 should be made available for retrieval.
default long
executeLargeUpdate
(
String
sql,
 int[] columnIndexes)
Executes the given SQL statement and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.
default long
executeLargeUpdate
(
String
sql,
String
[] columnNames)
Executes the given SQL statement and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.
ResultSet
executeQuery
(
String
sql)
Executes the given SQL statement, which returns a single
ResultSet
object.
int
executeUpdate
(
String
sql)
Executes the given SQL statement, which may be an
INSERT
,
UPDATE
, or
DELETE
statement or an
 SQL statement that returns nothing, such as an SQL DDL statement.
int
executeUpdate
(
String
sql,
 int autoGeneratedKeys)
Executes the given SQL statement and signals the driver with the
 given flag about whether the
 auto-generated keys produced by this
Statement
object
 should be made available for retrieval.
int
executeUpdate
(
String
sql,
 int[] columnIndexes)
Executes the given SQL statement and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.
int
executeUpdate
(
String
sql,
String
[] columnNames)
Executes the given SQL statement and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.
Connection
getConnection
()
Retrieves the
Connection
object
 that produced this
Statement
object.
int
getFetchDirection
()
Retrieves the direction for fetching rows from
 database tables that is the default for result sets
 generated from this
Statement
object.
int
getFetchSize
()
Retrieves the number of result set rows that is the default
 fetch size for
ResultSet
objects
 generated from this
Statement
object.
ResultSet
getGeneratedKeys
()
Retrieves any auto-generated keys created as a result of executing this
Statement
object.
default long
getLargeMaxRows
()
Retrieves the maximum number of rows that a
ResultSet
object produced by this
Statement
object can contain.
default long
getLargeUpdateCount
()
Retrieves the current result as an update count; if the result
 is a
ResultSet
object or there are no more results, -1
  is returned.
int
getMaxFieldSize
()
Retrieves the maximum number of bytes that can be
 returned for character and binary column values in a
ResultSet
object produced by this
Statement
object.
int
getMaxRows
()
Retrieves the maximum number of rows that a
ResultSet
object produced by this
Statement
object can contain.
boolean
getMoreResults
()
Moves to this
Statement
object's next result, returns
true
if it is a
ResultSet
object, and
 implicitly closes any current
ResultSet
object(s) obtained with the method
getResultSet
.
boolean
getMoreResults
(int current)
Moves to this
Statement
object's next result, deals with
 any current
ResultSet
object(s) according  to the instructions
 specified by the given flag, and returns
true
if the next result is a
ResultSet
object.
int
getQueryTimeout
()
Retrieves the number of seconds the driver will
 wait for a
Statement
object to execute.
ResultSet
getResultSet
()
Retrieves the current result as a
ResultSet
object.
int
getResultSetConcurrency
()
Retrieves the result set concurrency for
ResultSet
objects
 generated by this
Statement
object.
int
getResultSetHoldability
()
Retrieves the result set holdability for
ResultSet
objects
 generated by this
Statement
object.
int
getResultSetType
()
Retrieves the result set type for
ResultSet
objects
 generated by this
Statement
object.
int
getUpdateCount
()
Retrieves the current result as an update count;
  if the result is a
ResultSet
object or there are no more results, -1
  is returned.
SQLWarning
getWarnings
()
Retrieves the first warning reported by calls on this
Statement
object.
boolean
isClosed
()
Retrieves whether this
Statement
object has been closed.
boolean
isCloseOnCompletion
()
Returns a value indicating whether this
Statement
will be
 closed when all its dependent result sets are closed.
boolean
isPoolable
()
Returns a  value indicating whether the
Statement
is poolable or not.
default boolean
isSimpleIdentifier
(
String
identifier)
Retrieves whether
identifier
is a simple SQL identifier.
void
setCursorName
(
String
name)
Sets the SQL cursor name to the given
String
, which
 will be used by subsequent
Statement
object
execute
methods.
void
setEscapeProcessing
(boolean enable)
Sets escape processing on or off.
void
setFetchDirection
(int direction)
Gives the driver a hint as to the direction in which
 rows will be processed in
ResultSet
objects created using this
Statement
object.
void
setFetchSize
(int rows)
Gives the JDBC driver a hint as to the number of rows that should
 be fetched from the database when more rows are needed for
ResultSet
objects generated by this
Statement
.
default void
setLargeMaxRows
(long max)
Sets the limit for the maximum number of rows that any
ResultSet
object  generated by this
Statement
object can contain to the given number.
void
setMaxFieldSize
(int max)
Sets the limit for the maximum number of bytes that can be returned for
 character and binary column values in a
ResultSet
object produced by this
Statement
object.
void
setMaxRows
(int max)
Sets the limit for the maximum number of rows that any
ResultSet
object  generated by this
Statement
object can contain to the given number.
void
setPoolable
(boolean poolable)
Requests that a
Statement
be pooled or not pooled.
void
setQueryTimeout
(int seconds)
Sets the number of seconds the driver will wait for a
Statement
object to execute to the given number of seconds.
Methods declared in interface java.sql.
Wrapper
isWrapperFor
,
unwrap
Field Details
CLOSE_CURRENT_RESULT
static final
int
CLOSE_CURRENT_RESULT
The constant indicating that the current
ResultSet
object
 should be closed when calling
getMoreResults
.
Since:
1.4
See Also:
Constant Field Values
KEEP_CURRENT_RESULT
static final
int
KEEP_CURRENT_RESULT
The constant indicating that the current
ResultSet
object
 should not be closed when calling
getMoreResults
.
Since:
1.4
See Also:
Constant Field Values
CLOSE_ALL_RESULTS
static final
int
CLOSE_ALL_RESULTS
The constant indicating that all
ResultSet
objects that
 have previously been kept open should be closed when calling
getMoreResults
.
Since:
1.4
See Also:
Constant Field Values
SUCCESS_NO_INFO
static final
int
SUCCESS_NO_INFO
The constant indicating that a batch statement executed successfully
 but that no count of the number of rows it affected is available.
Since:
1.4
See Also:
Constant Field Values
EXECUTE_FAILED
static final
int
EXECUTE_FAILED
The constant indicating that an error occurred while executing a
 batch statement.
Since:
1.4
See Also:
Constant Field Values
RETURN_GENERATED_KEYS
static final
int
RETURN_GENERATED_KEYS
The constant indicating that generated keys should be made
 available for retrieval.
Since:
1.4
See Also:
Constant Field Values
NO_GENERATED_KEYS
static final
int
NO_GENERATED_KEYS
The constant indicating that generated keys should not be made
 available for retrieval.
Since:
1.4
See Also:
Constant Field Values
Method Details
executeQuery
ResultSet
executeQuery
(
String
sql)
throws
SQLException
Executes the given SQL statement, which returns a single
ResultSet
object.
Note:
This method cannot be called on a
PreparedStatement
or
CallableStatement
.
Parameters:
sql
- an SQL statement to be sent to the database, typically a
        static SQL
SELECT
statement
Returns:
a
ResultSet
object that contains the data produced
         by the given query; never
null
Throws:
SQLException
- if a database access error occurs,
 this method is called on a closed
Statement
, the given
            SQL statement produces anything other than a single
ResultSet
object, the method is called on a
PreparedStatement
or
CallableStatement
SQLTimeoutException
- when the driver has determined that the
 timeout value that was specified by the
setQueryTimeout
method has been exceeded and has at least attempted to cancel
 the currently running
Statement
executeUpdate
int
executeUpdate
(
String
sql)
throws
SQLException
Executes the given SQL statement, which may be an
INSERT
,
UPDATE
, or
DELETE
statement or an
 SQL statement that returns nothing, such as an SQL DDL statement.
Note:
This method cannot be called on a
PreparedStatement
or
CallableStatement
.
Parameters:
sql
- an SQL Data Manipulation Language (DML) statement, such as
INSERT
,
UPDATE
or
DELETE
; or an SQL statement that returns nothing,
 such as a DDL statement.
Returns:
either (1) the row count for SQL Data Manipulation Language (DML) statements
         or (2) 0 for SQL statements that return nothing
Throws:
SQLException
- if a database access error occurs,
 this method is called on a closed
Statement
, the given
 SQL statement produces a
ResultSet
object, the method is called on a
PreparedStatement
or
CallableStatement
SQLTimeoutException
- when the driver has determined that the
 timeout value that was specified by the
setQueryTimeout
method has been exceeded and has at least attempted to cancel
 the currently running
Statement
close
void
close
()
    throws
SQLException
Releases this
Statement
object's database
 and JDBC resources immediately instead of waiting for
 this to happen when it is automatically closed.
 It is generally good practice to release resources as soon as
 you are finished with them to avoid tying up database
 resources.
Calling the method
close
on a
Statement
object that is already closed has no effect.
Note:
When a
Statement
object is
 closed, its current
ResultSet
object, if one exists, is
 also closed.
Specified by:
close
in interface
AutoCloseable
Throws:
SQLException
- if a database access error occurs
getMaxFieldSize
int
getMaxFieldSize
()
             throws
SQLException
Retrieves the maximum number of bytes that can be
 returned for character and binary column values in a
ResultSet
object produced by this
Statement
object.
 This limit applies only to
BINARY
,
VARBINARY
,
LONGVARBINARY
,
CHAR
,
VARCHAR
,
NCHAR
,
NVARCHAR
,
LONGNVARCHAR
and
LONGVARCHAR
columns.  If the limit is exceeded, the
 excess data is silently discarded.
Returns:
the current column size limit for columns storing character and
         binary values; zero means there is no limit
Throws:
SQLException
- if a database access error occurs or
 this method is called on a closed
Statement
See Also:
setMaxFieldSize(int)
setMaxFieldSize
void
setMaxFieldSize
(int max)
throws
SQLException
Sets the limit for the maximum number of bytes that can be returned for
 character and binary column values in a
ResultSet
object produced by this
Statement
object.

 This limit applies
 only to
BINARY
,
VARBINARY
,
LONGVARBINARY
,
CHAR
,
VARCHAR
,
NCHAR
,
NVARCHAR
,
LONGNVARCHAR
and
LONGVARCHAR
fields.  If the limit is exceeded, the excess data
 is silently discarded. For maximum portability, use values
 greater than 256.
Parameters:
max
- the new column size limit in bytes; zero means there is no limit
Throws:
SQLException
- if a database access error occurs,
 this method is called on a closed
Statement
or the condition
max >= 0
is not satisfied
See Also:
getMaxFieldSize()
getMaxRows
int
getMaxRows
()
        throws
SQLException
Retrieves the maximum number of rows that a
ResultSet
object produced by this
Statement
object can contain.  If this limit is exceeded,
 the excess rows are silently dropped.
Returns:
the current maximum number of rows for a
ResultSet
object produced by this
Statement
object;
         zero means there is no limit
Throws:
SQLException
- if a database access error occurs or
 this method is called on a closed
Statement
See Also:
setMaxRows(int)
setMaxRows
void
setMaxRows
(int max)
throws
SQLException
Sets the limit for the maximum number of rows that any
ResultSet
object  generated by this
Statement
object can contain to the given number.
 If the limit is exceeded, the excess
 rows are silently dropped.
Parameters:
max
- the new max rows limit; zero means there is no limit
Throws:
SQLException
- if a database access error occurs,
 this method is called on a closed
Statement
or the condition
max >= 0
is not satisfied
See Also:
getMaxRows()
setEscapeProcessing
void
setEscapeProcessing
(boolean enable)
throws
SQLException
Sets escape processing on or off.
 If escape scanning is on (the default), the driver will do
 escape substitution before sending the SQL statement to the database.
The
Connection
and
DataSource
property
escapeProcessing
may be used to change the default escape processing
 behavior.  A value of true (the default) enables escape Processing for
 all
Statement
objects. A value of false disables escape processing
 for all
Statement
objects.  The
setEscapeProcessing
method may be used to specify the escape processing behavior for an
 individual
Statement
object.
Note: Since prepared statements have usually been parsed prior
 to making this call, disabling escape processing for
PreparedStatements
objects will have no effect.
Parameters:
enable
-
true
to enable escape processing;
false
to disable it
Throws:
SQLException
- if a database access error occurs or
 this method is called on a closed
Statement
getQueryTimeout
int
getQueryTimeout
()
             throws
SQLException
Retrieves the number of seconds the driver will
 wait for a
Statement
object to execute.
 If the limit is exceeded, a
SQLException
is thrown.
Returns:
the current query timeout limit in seconds; zero means there is
         no limit
Throws:
SQLException
- if a database access error occurs or
 this method is called on a closed
Statement
See Also:
setQueryTimeout(int)
setQueryTimeout
void
setQueryTimeout
(int seconds)
throws
SQLException
Sets the number of seconds the driver will wait for a
Statement
object to execute to the given number of seconds.
By default there is no limit on the amount of time allowed for a running
 statement to complete. If the limit is exceeded, an
SQLTimeoutException
is thrown.
 A JDBC driver must apply this limit to the
execute
,
executeQuery
and
executeUpdate
methods.
Note:
JDBC driver implementations may also apply this
 limit to
ResultSet
methods
 (consult your driver vendor documentation for details).
Note:
In the case of
Statement
batching, it is
 implementation defined as to whether the time-out is applied to
 individual SQL commands added via the
addBatch
method or to
 the entire batch of SQL commands invoked by the
executeBatch
method (consult your driver vendor documentation for details).
Parameters:
seconds
- the new query timeout limit in seconds; zero means
        there is no limit
Throws:
SQLException
- if a database access error occurs,
 this method is called on a closed
Statement
or the condition
seconds >= 0
is not satisfied
See Also:
getQueryTimeout()
cancel
void
cancel
()
     throws
SQLException
Cancels this
Statement
object if both the DBMS and
 driver support aborting an SQL statement.
 This method can be used by one thread to cancel a statement that
 is being executed by another thread.
Throws:
SQLException
- if a database access error occurs or
 this method is called on a closed
Statement
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
getWarnings
SQLWarning
getWarnings
()
                throws
SQLException
Retrieves the first warning reported by calls on this
Statement
object.
 Subsequent
Statement
object warnings will be chained to this
SQLWarning
object.
The warning chain is automatically cleared each time
 a statement is (re)executed. This method may not be called on a closed
Statement
object; doing so will cause an
SQLException
to be thrown.
Note:
If you are processing a
ResultSet
object, any
 warnings associated with reads on that
ResultSet
object
 will be chained on it rather than on the
Statement
object that produced it.
Returns:
the first
SQLWarning
object or
null
if there are no warnings
Throws:
SQLException
- if a database access error occurs or
 this method is called on a closed
Statement
clearWarnings
void
clearWarnings
()
            throws
SQLException
Clears all the warnings reported on this
Statement
object. After a call to this method,
 the method
getWarnings
will return
null
until a new warning is reported for this
Statement
object.
Throws:
SQLException
- if a database access error occurs or
 this method is called on a closed
Statement
setCursorName
void
setCursorName
(
String
name)
throws
SQLException
Sets the SQL cursor name to the given
String
, which
 will be used by subsequent
Statement
object
execute
methods. This name can then be
 used in SQL positioned update or delete statements to identify the
 current row in the
ResultSet
object generated by this
 statement.  If the database does not support positioned update/delete,
 this method is a noop.  To insure that a cursor has the proper isolation
 level to support updates, the cursor's
SELECT
statement
 should have the form
SELECT FOR UPDATE
.  If
FOR UPDATE
is not present, positioned updates may fail.
Note:
By definition, the execution of positioned updates and
 deletes must be done by a different
Statement
object than
 the one that generated the
ResultSet
object being used for
 positioning. Also, cursor names must be unique within a connection.
Parameters:
name
- the new cursor name, which must be unique within
             a connection
Throws:
SQLException
- if a database access error occurs or
 this method is called on a closed
Statement
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
execute
boolean
execute
(
String
sql)
throws
SQLException
Executes the given SQL statement, which may return multiple results.
 In some (uncommon) situations, a single SQL statement may return
 multiple result sets and/or update counts.  Normally you can ignore
 this unless you are (1) executing a stored procedure that you know may
 return multiple results or (2) you are dynamically executing an
 unknown SQL string.
The
execute
method executes an SQL statement and indicates the
 form of the first result.  You must then use the methods
getResultSet
or
getUpdateCount
to retrieve the result, and
getMoreResults
to
 move to any subsequent result(s).
Note:
This method cannot be called on a
PreparedStatement
or
CallableStatement
.
Parameters:
sql
- any SQL statement
Returns:
true
if the first result is a
ResultSet
object;
false
if it is an update count or there are
         no results
Throws:
SQLException
- if a database access error occurs,
 this method is called on a closed
Statement
,
 the method is called on a
PreparedStatement
or
CallableStatement
SQLTimeoutException
- when the driver has determined that the
 timeout value that was specified by the
setQueryTimeout
method has been exceeded and has at least attempted to cancel
 the currently running
Statement
See Also:
getResultSet()
getUpdateCount()
getMoreResults()
getResultSet
ResultSet
getResultSet
()
                throws
SQLException
Retrieves the current result as a
ResultSet
object.
  This method should be called only once per result.
Returns:
the current result as a
ResultSet
object or
null
if the result is an update count or there are no more results
Throws:
SQLException
- if a database access error occurs or
 this method is called on a closed
Statement
See Also:
execute(java.lang.String)
getUpdateCount
int
getUpdateCount
()
            throws
SQLException
Retrieves the current result as an update count;
  if the result is a
ResultSet
object or there are no more results, -1
  is returned. This method should be called only once per result.
Returns:
the current result as an update count; -1 if the current result is a
ResultSet
object or there are no more results
Throws:
SQLException
- if a database access error occurs or
 this method is called on a closed
Statement
See Also:
execute(java.lang.String)
getMoreResults
boolean
getMoreResults
()
                throws
SQLException
Moves to this
Statement
object's next result, returns
true
if it is a
ResultSet
object, and
 implicitly closes any current
ResultSet
object(s) obtained with the method
getResultSet
.
There are no more results when the following is true:
// stmt is a Statement object
     ((stmt.getMoreResults() == false) && (stmt.getUpdateCount() == -1))
Returns:
true
if the next result is a
ResultSet
object;
false
if it is an update count or there are
         no more results
Throws:
SQLException
- if a database access error occurs or
 this method is called on a closed
Statement
See Also:
execute(java.lang.String)
setFetchDirection
void
setFetchDirection
(int direction)
throws
SQLException
Gives the driver a hint as to the direction in which
 rows will be processed in
ResultSet
objects created using this
Statement
object.  The
 default value is
ResultSet.FETCH_FORWARD
.
Note that this method sets the default fetch direction for
 result sets generated by this
Statement
object.
 Each result set has its own methods for getting and setting
 its own fetch direction.
Parameters:
direction
- the initial direction for processing rows
Throws:
SQLException
- if a database access error occurs,
 this method is called on a closed
Statement
or the given direction
 is not one of
ResultSet.FETCH_FORWARD
,
ResultSet.FETCH_REVERSE
, or
ResultSet.FETCH_UNKNOWN
Since:
1.2
See Also:
getFetchDirection()
getFetchDirection
int
getFetchDirection
()
               throws
SQLException
Retrieves the direction for fetching rows from
 database tables that is the default for result sets
 generated from this
Statement
object.
 If this
Statement
object has not set
 a fetch direction by calling the method
setFetchDirection
,
 the return value is implementation-specific.
Returns:
the default fetch direction for result sets generated
          from this
Statement
object
Throws:
SQLException
- if a database access error occurs or
 this method is called on a closed
Statement
Since:
1.2
See Also:
setFetchDirection(int)
setFetchSize
void
setFetchSize
(int rows)
throws
SQLException
Gives the JDBC driver a hint as to the number of rows that should
 be fetched from the database when more rows are needed for
ResultSet
objects generated by this
Statement
.
 If the value specified is zero, then the hint is ignored.
 The default value is zero.
Parameters:
rows
- the number of rows to fetch
Throws:
SQLException
- if a database access error occurs,
 this method is called on a closed
Statement
or the
        condition
rows >= 0
is not satisfied.
Since:
1.2
See Also:
getFetchSize()
getFetchSize
int
getFetchSize
()
          throws
SQLException
Retrieves the number of result set rows that is the default
 fetch size for
ResultSet
objects
 generated from this
Statement
object.
 If this
Statement
object has not set
 a fetch size by calling the method
setFetchSize
,
 the return value is implementation-specific.
Returns:
the default fetch size for result sets generated
          from this
Statement
object
Throws:
SQLException
- if a database access error occurs or
 this method is called on a closed
Statement
Since:
1.2
See Also:
setFetchSize(int)
getResultSetConcurrency
int
getResultSetConcurrency
()
                     throws
SQLException
Retrieves the result set concurrency for
ResultSet
objects
 generated by this
Statement
object.
Returns:
either
ResultSet.CONCUR_READ_ONLY
or
ResultSet.CONCUR_UPDATABLE
Throws:
SQLException
- if a database access error occurs or
 this method is called on a closed
Statement
Since:
1.2
getResultSetType
int
getResultSetType
()
              throws
SQLException
Retrieves the result set type for
ResultSet
objects
 generated by this
Statement
object.
Returns:
one of
ResultSet.TYPE_FORWARD_ONLY
,
ResultSet.TYPE_SCROLL_INSENSITIVE
, or
ResultSet.TYPE_SCROLL_SENSITIVE
Throws:
SQLException
- if a database access error occurs or
 this method is called on a closed
Statement
Since:
1.2
addBatch
void
addBatch
(
String
sql)
throws
SQLException
Adds the given SQL command to the current list of commands for this
Statement
object. The commands in this list can be
 executed as a batch by calling the method
executeBatch
.
Note:
This method cannot be called on a
PreparedStatement
or
CallableStatement
.
Parameters:
sql
- typically this is a SQL
INSERT
or
UPDATE
statement
Throws:
SQLException
- if a database access error occurs,
 this method is called on a closed
Statement
, the
 driver does not support batch updates, the method is called on a
PreparedStatement
or
CallableStatement
Since:
1.2
See Also:
executeBatch()
DatabaseMetaData.supportsBatchUpdates()
clearBatch
void
clearBatch
()
         throws
SQLException
Empties this
Statement
object's current list of
 SQL commands.
Throws:
SQLException
- if a database access error occurs,
  this method is called on a closed
Statement
or the
 driver does not support batch updates
Since:
1.2
See Also:
addBatch(java.lang.String)
DatabaseMetaData.supportsBatchUpdates()
executeBatch
int[]
executeBatch
()
            throws
SQLException
Submits a batch of commands to the database for execution and
 if all commands execute successfully, returns an array of update counts.
 The
int
elements of the array that is returned are ordered
 to correspond to the commands in the batch, which are ordered
 according to the order in which they were added to the batch.
 The elements in the array returned by the method
executeBatch
may be one of the following:
A number greater than or equal to zero -- indicates that the
 command was processed successfully and is an update count giving the
 number of rows in the database that were affected by the command's
 execution
A value of
SUCCESS_NO_INFO
-- indicates that the command was
 processed successfully but that the number of rows affected is
 unknown
If one of the commands in a batch update fails to execute properly,
 this method throws a
BatchUpdateException
, and a JDBC
 driver may or may not continue to process the remaining commands in
 the batch.  However, the driver's behavior must be consistent with a
 particular DBMS, either always continuing to process commands or never
 continuing to process commands.  If the driver continues processing
 after a failure, the array returned by the method
BatchUpdateException.getUpdateCounts
will contain as many elements as there are commands in the batch, and
 at least one of the elements will be the following:
A value of
EXECUTE_FAILED
-- indicates that the command failed
 to execute successfully and occurs only if a driver continues to
 process commands after a command fails
The possible implementations and return values have been modified in
 the Java 2 SDK, Standard Edition, version 1.3 to
 accommodate the option of continuing to process commands in a batch
 update after a
BatchUpdateException
object has been thrown.
Returns:
an array of update counts containing one element for each
 command in the batch.  The elements of the array are ordered according
 to the order in which commands were added to the batch.
Throws:
SQLException
- if a database access error occurs,
 this method is called on a closed
Statement
or the
 driver does not support batch statements. Throws
BatchUpdateException
(a subclass of
SQLException
) if one of the commands sent to the
 database fails to execute properly or attempts to return a result set.
SQLTimeoutException
- when the driver has determined that the
 timeout value that was specified by the
setQueryTimeout
method has been exceeded and has at least attempted to cancel
 the currently running
Statement
Since:
1.2
See Also:
addBatch(java.lang.String)
DatabaseMetaData.supportsBatchUpdates()
getConnection
Connection
getConnection
()
                  throws
SQLException
Retrieves the
Connection
object
 that produced this
Statement
object.
Returns:
the connection that produced this statement
Throws:
SQLException
- if a database access error occurs or
 this method is called on a closed
Statement
Since:
1.2
getMoreResults
boolean
getMoreResults
(int current)
throws
SQLException
Moves to this
Statement
object's next result, deals with
 any current
ResultSet
object(s) according  to the instructions
 specified by the given flag, and returns
true
if the next result is a
ResultSet
object.
There are no more results when the following is true:
// stmt is a Statement object
     ((stmt.getMoreResults(current) == false) && (stmt.getUpdateCount() == -1))
Parameters:
current
- one of the following
Statement
constants indicating what should happen to current
ResultSet
objects obtained using the method
getResultSet
:
Statement.CLOSE_CURRENT_RESULT
,
Statement.KEEP_CURRENT_RESULT
, or
Statement.CLOSE_ALL_RESULTS
Returns:
true
if the next result is a
ResultSet
object;
false
if it is an update count or there are no
         more results
Throws:
SQLException
- if a database access error occurs,
 this method is called on a closed
Statement
or the argument
         supplied is not one of the following:
Statement.CLOSE_CURRENT_RESULT
,
Statement.KEEP_CURRENT_RESULT
or
Statement.CLOSE_ALL_RESULTS
SQLFeatureNotSupportedException
- if
DatabaseMetaData.supportsMultipleOpenResults
returns
false
and either
Statement.KEEP_CURRENT_RESULT
or
Statement.CLOSE_ALL_RESULTS
are supplied as
 the argument.
Since:
1.4
See Also:
execute(java.lang.String)
getGeneratedKeys
ResultSet
getGeneratedKeys
()
                    throws
SQLException
Retrieves any auto-generated keys created as a result of executing this
Statement
object. If this
Statement
object did
 not generate any keys, an empty
ResultSet
object is returned.
Note:
If the columns which represent the auto-generated keys were not specified,
 the JDBC driver implementation will determine the columns which best represent the auto-generated keys.
Returns:
a
ResultSet
object containing the auto-generated key(s)
         generated by the execution of this
Statement
object
Throws:
SQLException
- if a database access error occurs or
 this method is called on a closed
Statement
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
Since:
1.4
executeUpdate
int
executeUpdate
(
String
sql,
 int autoGeneratedKeys)
throws
SQLException
Executes the given SQL statement and signals the driver with the
 given flag about whether the
 auto-generated keys produced by this
Statement
object
 should be made available for retrieval.  The driver will ignore the
 flag if the SQL statement
 is not an
INSERT
statement, or an SQL statement able to return
 auto-generated keys (the list of such statements is vendor-specific).
Note:
This method cannot be called on a
PreparedStatement
or
CallableStatement
.
Parameters:
sql
- an SQL Data Manipulation Language (DML) statement, such as
INSERT
,
UPDATE
or
DELETE
; or an SQL statement that returns nothing,
 such as a DDL statement.
autoGeneratedKeys
- a flag indicating whether auto-generated keys
        should be made available for retrieval;
         one of the following constants:
Statement.RETURN_GENERATED_KEYS
Statement.NO_GENERATED_KEYS
Returns:
either (1) the row count for SQL Data Manipulation Language (DML) statements
         or (2) 0 for SQL statements that return nothing
Throws:
SQLException
- if a database access error occurs,
  this method is called on a closed
Statement
, the given
            SQL statement returns a
ResultSet
object,
            the given constant is not one of those allowed, the method is called on a
PreparedStatement
or
CallableStatement
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method with a constant of Statement.RETURN_GENERATED_KEYS
SQLTimeoutException
- when the driver has determined that the
 timeout value that was specified by the
setQueryTimeout
method has been exceeded and has at least attempted to cancel
 the currently running
Statement
Since:
1.4
executeUpdate
int
executeUpdate
(
String
sql,
 int[] columnIndexes)
throws
SQLException
Executes the given SQL statement and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.   This array contains the indexes of the columns in the
 target table that contain the auto-generated keys that should be made
 available. The driver will ignore the array if the SQL statement
 is not an
INSERT
statement, or an SQL statement able to return
 auto-generated keys (the list of such statements is vendor-specific).
Note:
This method cannot be called on a
PreparedStatement
or
CallableStatement
.
Parameters:
sql
- an SQL Data Manipulation Language (DML) statement, such as
INSERT
,
UPDATE
or
DELETE
; or an SQL statement that returns nothing,
 such as a DDL statement.
columnIndexes
- an array of column indexes indicating the columns
        that should be returned from the inserted row
Returns:
either (1) the row count for SQL Data Manipulation Language (DML) statements
         or (2) 0 for SQL statements that return nothing
Throws:
SQLException
- if a database access error occurs,
 this method is called on a closed
Statement
, the SQL
 statement returns a
ResultSet
object, the second argument
 supplied to this method is not an
int
array whose elements are valid column indexes, the method is called on a
PreparedStatement
or
CallableStatement
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
SQLTimeoutException
- when the driver has determined that the
 timeout value that was specified by the
setQueryTimeout
method has been exceeded and has at least attempted to cancel
 the currently running
Statement
Since:
1.4
executeUpdate
int
executeUpdate
(
String
sql,
String
[] columnNames)
throws
SQLException
Executes the given SQL statement and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.   This array contains the names of the columns in the
 target table that contain the auto-generated keys that should be made
 available. The driver will ignore the array if the SQL statement
 is not an
INSERT
statement, or an SQL statement able to return
 auto-generated keys (the list of such statements is vendor-specific).
Note:
This method cannot be called on a
PreparedStatement
or
CallableStatement
.
Parameters:
sql
- an SQL Data Manipulation Language (DML) statement, such as
INSERT
,
UPDATE
or
DELETE
; or an SQL statement that returns nothing,
 such as a DDL statement.
columnNames
- an array of the names of the columns that should be
        returned from the inserted row
Returns:
either the row count for
INSERT
,
UPDATE
,
         or
DELETE
statements, or 0 for SQL statements
         that return nothing
Throws:
SQLException
- if a database access error occurs,
  this method is called on a closed
Statement
, the SQL
            statement returns a
ResultSet
object, the
            second argument supplied to this method is not a
String
array
            whose elements are valid column names, the method is called on a
PreparedStatement
or
CallableStatement
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
SQLTimeoutException
- when the driver has determined that the
 timeout value that was specified by the
setQueryTimeout
method has been exceeded and has at least attempted to cancel
 the currently running
Statement
Since:
1.4
execute
boolean
execute
(
String
sql,
 int autoGeneratedKeys)
throws
SQLException
Executes the given SQL statement, which may return multiple results,
 and signals the driver that any
 auto-generated keys should be made available
 for retrieval.  The driver will ignore this signal if the SQL statement
 is not an
INSERT
statement, or an SQL statement able to return
 auto-generated keys (the list of such statements is vendor-specific).
In some (uncommon) situations, a single SQL statement may return
 multiple result sets and/or update counts.  Normally you can ignore
 this unless you are (1) executing a stored procedure that you know may
 return multiple results or (2) you are dynamically executing an
 unknown SQL string.
The
execute
method executes an SQL statement and indicates the
 form of the first result.  You must then use the methods
getResultSet
or
getUpdateCount
to retrieve the result, and
getMoreResults
to
 move to any subsequent result(s).
Note:
This method cannot be called on a
PreparedStatement
or
CallableStatement
.
Parameters:
sql
- any SQL statement
autoGeneratedKeys
- a constant indicating whether auto-generated
        keys should be made available for retrieval using the method
getGeneratedKeys
; one of the following constants:
Statement.RETURN_GENERATED_KEYS
or
Statement.NO_GENERATED_KEYS
Returns:
true
if the first result is a
ResultSet
object;
false
if it is an update count or there are
         no results
Throws:
SQLException
- if a database access error occurs,
 this method is called on a closed
Statement
, the second
         parameter supplied to this method is not
Statement.RETURN_GENERATED_KEYS
or
Statement.NO_GENERATED_KEYS
,
 the method is called on a
PreparedStatement
or
CallableStatement
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method with a constant of Statement.RETURN_GENERATED_KEYS
SQLTimeoutException
- when the driver has determined that the
 timeout value that was specified by the
setQueryTimeout
method has been exceeded and has at least attempted to cancel
 the currently running
Statement
Since:
1.4
See Also:
getResultSet()
getUpdateCount()
getMoreResults()
getGeneratedKeys()
execute
boolean
execute
(
String
sql,
 int[] columnIndexes)
throws
SQLException
Executes the given SQL statement, which may return multiple results,
 and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.  This array contains the indexes of the columns in the
 target table that contain the auto-generated keys that should be made
 available.  The driver will ignore the array if the SQL statement
 is not an
INSERT
statement, or an SQL statement able to return
 auto-generated keys (the list of such statements is vendor-specific).
Under some (uncommon) situations, a single SQL statement may return
 multiple result sets and/or update counts.  Normally you can ignore
 this unless you are (1) executing a stored procedure that you know may
 return multiple results or (2) you are dynamically executing an
 unknown SQL string.
The
execute
method executes an SQL statement and indicates the
 form of the first result.  You must then use the methods
getResultSet
or
getUpdateCount
to retrieve the result, and
getMoreResults
to
 move to any subsequent result(s).
Note:
This method cannot be called on a
PreparedStatement
or
CallableStatement
.
Parameters:
sql
- any SQL statement
columnIndexes
- an array of the indexes of the columns in the
        inserted row that should be  made available for retrieval by a
        call to the method
getGeneratedKeys
Returns:
true
if the first result is a
ResultSet
object;
false
if it is an update count or there
         are no results
Throws:
SQLException
- if a database access error occurs,
 this method is called on a closed
Statement
, the
            elements in the
int
array passed to this method
            are not valid column indexes, the method is called on a
PreparedStatement
or
CallableStatement
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
SQLTimeoutException
- when the driver has determined that the
 timeout value that was specified by the
setQueryTimeout
method has been exceeded and has at least attempted to cancel
 the currently running
Statement
Since:
1.4
See Also:
getResultSet()
getUpdateCount()
getMoreResults()
execute
boolean
execute
(
String
sql,
String
[] columnNames)
throws
SQLException
Executes the given SQL statement, which may return multiple results,
 and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval. This array contains the names of the columns in the
 target table that contain the auto-generated keys that should be made
 available.  The driver will ignore the array if the SQL statement
 is not an
INSERT
statement, or an SQL statement able to return
 auto-generated keys (the list of such statements is vendor-specific).
In some (uncommon) situations, a single SQL statement may return
 multiple result sets and/or update counts.  Normally you can ignore
 this unless you are (1) executing a stored procedure that you know may
 return multiple results or (2) you are dynamically executing an
 unknown SQL string.
The
execute
method executes an SQL statement and indicates the
 form of the first result.  You must then use the methods
getResultSet
or
getUpdateCount
to retrieve the result, and
getMoreResults
to
 move to any subsequent result(s).
Note:
This method cannot be called on a
PreparedStatement
or
CallableStatement
.
Parameters:
sql
- any SQL statement
columnNames
- an array of the names of the columns in the inserted
        row that should be made available for retrieval by a call to the
        method
getGeneratedKeys
Returns:
true
if the next result is a
ResultSet
object;
false
if it is an update count or there
         are no more results
Throws:
SQLException
- if a database access error occurs,
 this method is called on a closed
Statement
, the
          elements of the
String
array passed to this
          method are not valid column names, the method is called on a
PreparedStatement
or
CallableStatement
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
SQLTimeoutException
- when the driver has determined that the
 timeout value that was specified by the
setQueryTimeout
method has been exceeded and has at least attempted to cancel
 the currently running
Statement
Since:
1.4
See Also:
getResultSet()
getUpdateCount()
getMoreResults()
getGeneratedKeys()
getResultSetHoldability
int
getResultSetHoldability
()
                     throws
SQLException
Retrieves the result set holdability for
ResultSet
objects
 generated by this
Statement
object.
Returns:
either
ResultSet.HOLD_CURSORS_OVER_COMMIT
or
ResultSet.CLOSE_CURSORS_AT_COMMIT
Throws:
SQLException
- if a database access error occurs or
 this method is called on a closed
Statement
Since:
1.4
isClosed
boolean
isClosed
()
          throws
SQLException
Retrieves whether this
Statement
object has been closed. A
Statement
is closed if the
 method close has been called on it, or if it is automatically closed.
Returns:
true if this
Statement
object is closed; false if it is still open
Throws:
SQLException
- if a database access error occurs
Since:
1.6
setPoolable
void
setPoolable
(boolean poolable)
throws
SQLException
Requests that a
Statement
be pooled or not pooled.  The value
 specified is a hint to the statement pool implementation indicating
 whether the application wants the statement to be pooled.  It is up to
 the statement pool manager as to whether the hint is used.
The poolable value of a statement is applicable to both internal
 statement caches implemented by the driver and external statement caches
 implemented by application servers and other applications.
By default, a
Statement
is not poolable when created, and
 a
PreparedStatement
and
CallableStatement
are poolable when created.
Parameters:
poolable
- requests that the statement be pooled if true and
                                              that the statement not be pooled if false
Throws:
SQLException
- if this method is called on a closed
Statement
Since:
1.6
isPoolable
boolean
isPoolable
()
            throws
SQLException
Returns a  value indicating whether the
Statement
is poolable or not.
Returns:
true
if the
Statement
is poolable;
false
otherwise
Throws:
SQLException
- if this method is called on a closed
Statement
Since:
1.6
See Also:
setPoolable(boolean)
closeOnCompletion
void
closeOnCompletion
()
                throws
SQLException
Specifies that this
Statement
will be closed when all its
 dependent result sets are closed. If execution of the
Statement
does not produce any result sets, this method has no effect.
Note:
Multiple calls to
closeOnCompletion
do
 not toggle the effect on this
Statement
. However, a call to
closeOnCompletion
does effect both the subsequent execution of
 statements, and statements that currently have open, dependent,
 result sets.
Throws:
SQLException
- if this method is called on a closed
Statement
Since:
1.7
isCloseOnCompletion
boolean
isCloseOnCompletion
()
                     throws
SQLException
Returns a value indicating whether this
Statement
will be
 closed when all its dependent result sets are closed.
Returns:
true
if the
Statement
will be closed when all
 of its dependent result sets are closed;
false
otherwise
Throws:
SQLException
- if this method is called on a closed
Statement
Since:
1.7
getLargeUpdateCount
default
long
getLargeUpdateCount
()
                          throws
SQLException
Retrieves the current result as an update count; if the result
 is a
ResultSet
object or there are no more results, -1
  is returned. This method should be called only once per result.
This method should be used when the returned row count may exceed
Integer.MAX_VALUE
.
The default implementation will throw
UnsupportedOperationException
Returns:
the current result as an update count; -1 if the current result
 is a
ResultSet
object or there are no more results
Throws:
SQLException
- if a database access error occurs or
 this method is called on a closed
Statement
Since:
1.8
See Also:
execute(java.lang.String)
setLargeMaxRows
default
void
setLargeMaxRows
(long max)
throws
SQLException
Sets the limit for the maximum number of rows that any
ResultSet
object  generated by this
Statement
object can contain to the given number.
 If the limit is exceeded, the excess
 rows are silently dropped.
This method should be used when the row limit may exceed
Integer.MAX_VALUE
.
The default implementation will throw
UnsupportedOperationException
Parameters:
max
- the new max rows limit; zero means there is no limit
Throws:
SQLException
- if a database access error occurs,
 this method is called on a closed
Statement
or the condition
max >= 0
is not satisfied
Since:
1.8
See Also:
getMaxRows()
getLargeMaxRows
default
long
getLargeMaxRows
()
                      throws
SQLException
Retrieves the maximum number of rows that a
ResultSet
object produced by this
Statement
object can contain.  If this limit is exceeded,
 the excess rows are silently dropped.
This method should be used when the returned row limit may exceed
Integer.MAX_VALUE
.
The default implementation will return
0
Returns:
the current maximum number of rows for a
ResultSet
object produced by this
Statement
object;
         zero means there is no limit
Throws:
SQLException
- if a database access error occurs or
 this method is called on a closed
Statement
Since:
1.8
See Also:
setMaxRows(int)
executeLargeBatch
default
long[]
executeLargeBatch
()
                          throws
SQLException
Submits a batch of commands to the database for execution and
 if all commands execute successfully, returns an array of update counts.
 The
long
elements of the array that is returned are ordered
 to correspond to the commands in the batch, which are ordered
 according to the order in which they were added to the batch.
 The elements in the array returned by the method
executeLargeBatch
may be one of the following:
A number greater than or equal to zero -- indicates that the
 command was processed successfully and is an update count giving the
 number of rows in the database that were affected by the command's
 execution
A value of
SUCCESS_NO_INFO
-- indicates that the command was
 processed successfully but that the number of rows affected is
 unknown
If one of the commands in a batch update fails to execute properly,
 this method throws a
BatchUpdateException
, and a JDBC
 driver may or may not continue to process the remaining commands in
 the batch.  However, the driver's behavior must be consistent with a
 particular DBMS, either always continuing to process commands or never
 continuing to process commands.  If the driver continues processing
 after a failure, the array returned by the method
BatchUpdateException.getLargeUpdateCounts
will contain as many elements as there are commands in the batch, and
 at least one of the elements will be the following:
A value of
EXECUTE_FAILED
-- indicates that the command failed
 to execute successfully and occurs only if a driver continues to
 process commands after a command fails
This method should be used when the returned row count may exceed
Integer.MAX_VALUE
.
The default implementation will throw
UnsupportedOperationException
Returns:
an array of update counts containing one element for each
 command in the batch.  The elements of the array are ordered according
 to the order in which commands were added to the batch.
Throws:
SQLException
- if a database access error occurs,
 this method is called on a closed
Statement
or the
 driver does not support batch statements. Throws
BatchUpdateException
(a subclass of
SQLException
) if one of the commands sent to the
 database fails to execute properly or attempts to return a result set.
SQLTimeoutException
- when the driver has determined that the
 timeout value that was specified by the
setQueryTimeout
method has been exceeded and has at least attempted to cancel
 the currently running
Statement
Since:
1.8
See Also:
addBatch(java.lang.String)
DatabaseMetaData.supportsBatchUpdates()
executeLargeUpdate
default
long
executeLargeUpdate
(
String
sql)
throws
SQLException
Executes the given SQL statement, which may be an
INSERT
,
UPDATE
, or
DELETE
statement or an
 SQL statement that returns nothing, such as an SQL DDL statement.
This method should be used when the returned row count may exceed
Integer.MAX_VALUE
.
Note:
This method cannot be called on a
PreparedStatement
or
CallableStatement
.
The default implementation will throw
UnsupportedOperationException
Parameters:
sql
- an SQL Data Manipulation Language (DML) statement,
 such as
INSERT
,
UPDATE
or
DELETE
; or an SQL statement that returns nothing,
 such as a DDL statement.
Returns:
either (1) the row count for SQL Data Manipulation Language
 (DML) statements or (2) 0 for SQL statements that return nothing
Throws:
SQLException
- if a database access error occurs,
 this method is called on a closed
Statement
, the given
 SQL statement produces a
ResultSet
object, the method is called on a
PreparedStatement
or
CallableStatement
SQLTimeoutException
- when the driver has determined that the
 timeout value that was specified by the
setQueryTimeout
method has been exceeded and has at least attempted to cancel
 the currently running
Statement
Since:
1.8
executeLargeUpdate
default
long
executeLargeUpdate
(
String
sql,
 int autoGeneratedKeys)
throws
SQLException
Executes the given SQL statement and signals the driver with the
 given flag about whether the
 auto-generated keys produced by this
Statement
object
 should be made available for retrieval.  The driver will ignore the
 flag if the SQL statement
 is not an
INSERT
statement, or an SQL statement able to return
 auto-generated keys (the list of such statements is vendor-specific).
This method should be used when the returned row count may exceed
Integer.MAX_VALUE
.
Note:
This method cannot be called on a
PreparedStatement
or
CallableStatement
.
The default implementation will throw
SQLFeatureNotSupportedException
Parameters:
sql
- an SQL Data Manipulation Language (DML) statement,
 such as
INSERT
,
UPDATE
or
DELETE
; or an SQL statement that returns nothing,
 such as a DDL statement.
autoGeneratedKeys
- a flag indicating whether auto-generated keys
        should be made available for retrieval;
         one of the following constants:
Statement.RETURN_GENERATED_KEYS
Statement.NO_GENERATED_KEYS
Returns:
either (1) the row count for SQL Data Manipulation Language (DML) statements
         or (2) 0 for SQL statements that return nothing
Throws:
SQLException
- if a database access error occurs,
  this method is called on a closed
Statement
, the given
            SQL statement returns a
ResultSet
object,
            the given constant is not one of those allowed, the method is called on a
PreparedStatement
or
CallableStatement
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method with a constant of Statement.RETURN_GENERATED_KEYS
SQLTimeoutException
- when the driver has determined that the
 timeout value that was specified by the
setQueryTimeout
method has been exceeded and has at least attempted to cancel
 the currently running
Statement
Since:
1.8
executeLargeUpdate
default
long
executeLargeUpdate
(
String
sql,
 int[] columnIndexes)
throws
SQLException
Executes the given SQL statement and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.   This array contains the indexes of the columns in the
 target table that contain the auto-generated keys that should be made
 available. The driver will ignore the array if the SQL statement
 is not an
INSERT
statement, or an SQL statement able to return
 auto-generated keys (the list of such statements is vendor-specific).
This method should be used when the returned row count may exceed
Integer.MAX_VALUE
.
Note:
This method cannot be called on a
PreparedStatement
or
CallableStatement
.
The default implementation will throw
SQLFeatureNotSupportedException
Parameters:
sql
- an SQL Data Manipulation Language (DML) statement,
 such as
INSERT
,
UPDATE
or
DELETE
; or an SQL statement that returns nothing,
 such as a DDL statement.
columnIndexes
- an array of column indexes indicating the columns
        that should be returned from the inserted row
Returns:
either (1) the row count for SQL Data Manipulation Language (DML) statements
         or (2) 0 for SQL statements that return nothing
Throws:
SQLException
- if a database access error occurs,
 this method is called on a closed
Statement
, the SQL
 statement returns a
ResultSet
object,the second argument
 supplied to this method is not an
int
array whose elements are valid column indexes, the method is called on a
PreparedStatement
or
CallableStatement
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
SQLTimeoutException
- when the driver has determined that the
 timeout value that was specified by the
setQueryTimeout
method has been exceeded and has at least attempted to cancel
 the currently running
Statement
Since:
1.8
executeLargeUpdate
default
long
executeLargeUpdate
(
String
sql,
String
[] columnNames)
throws
SQLException
Executes the given SQL statement and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.   This array contains the names of the columns in the
 target table that contain the auto-generated keys that should be made
 available. The driver will ignore the array if the SQL statement
 is not an
INSERT
statement, or an SQL statement able to return
 auto-generated keys (the list of such statements is vendor-specific).
This method should be used when the returned row count may exceed
Integer.MAX_VALUE
.
Note:
This method cannot be called on a
PreparedStatement
or
CallableStatement
.
The default implementation will throw
SQLFeatureNotSupportedException
Parameters:
sql
- an SQL Data Manipulation Language (DML) statement,
 such as
INSERT
,
UPDATE
or
DELETE
; or an SQL statement that returns nothing,
 such as a DDL statement.
columnNames
- an array of the names of the columns that should be
        returned from the inserted row
Returns:
either the row count for
INSERT
,
UPDATE
,
         or
DELETE
statements, or 0 for SQL statements
         that return nothing
Throws:
SQLException
- if a database access error occurs,
  this method is called on a closed
Statement
, the SQL
            statement returns a
ResultSet
object, the
            second argument supplied to this method is not a
String
array
            whose elements are valid column names, the method is called on a
PreparedStatement
or
CallableStatement
SQLFeatureNotSupportedException
- if the JDBC driver does not support this method
SQLTimeoutException
- when the driver has determined that the
 timeout value that was specified by the
setQueryTimeout
method has been exceeded and has at least attempted to cancel
 the currently running
Statement
Since:
1.8
enquoteLiteral
default
String
enquoteLiteral
(
String
val)
throws
SQLException
Returns a
String
enclosed in single quotes. Any occurrence of a
 single quote within the string will be replaced by two single quotes.
Examples of the conversion:
Value
Result
Hello
'Hello'
G'Day
'G''Day'
'G''Day'
'''G''''Day'''
I'''M
'I''''''M'
Implementation Note:
JDBC driver implementations may need to provide their own implementation
 of this method in order to meet the requirements of the underlying
 datasource.
Parameters:
val
- a character string
Returns:
A string enclosed by single quotes with every single quote
 converted to two single quotes
Throws:
NullPointerException
- if val is
null
SQLException
- if a database access error occurs
Since:
9
enquoteIdentifier
default
String
enquoteIdentifier
(
String
identifier,
 boolean alwaysQuote)
throws
SQLException
Returns a SQL identifier. If
identifier
is a simple SQL identifier:
Return the original value if
alwaysQuote
is
false
Return a delimited identifier if
alwaysQuote
is
true
If
identifier
is not a simple SQL identifier,
identifier
will be
 enclosed in double quotes if not already present. If the datasource does
 not support double quotes for delimited identifiers, the
 identifier should be enclosed by the string returned from
DatabaseMetaData.getIdentifierQuoteString()
.  If the datasource
 does not support delimited identifiers, a
SQLFeatureNotSupportedException
should be thrown.
A
SQLException
will be thrown if
identifier
contains any
 characters invalid in a delimited identifier or the identifier length is
 invalid for the datasource.
Implementation Requirements:
The default implementation uses the following criteria to
 determine a valid simple SQL identifier:
The string is not enclosed in double quotes
The first character is an alphabetic character from a through z, or
 from A through Z
The name only contains alphanumeric characters or the character "_"
The default implementation will throw a
SQLException
if:
identifier
contains a
null
character or double quote and is not
 a simple SQL identifier.
The length of
identifier
is less than 1 or greater than 128 characters
Examples of the conversion:
identifier
alwaysQuote
Result
Hello
false
Hello
Hello
true
"Hello"
G'Day
false
"G'Day"
"Bruce Wayne"
false
"Bruce Wayne"
"Bruce Wayne"
true
"Bruce Wayne"
GoodDay$
false
"GoodDay$"
Hello"World
false
SQLException
"Hello"World"
false
SQLException
Implementation Note:
JDBC driver implementations may need to provide their own implementation
 of this method in order to meet the requirements of the underlying
 datasource.
Parameters:
identifier
- a SQL identifier
alwaysQuote
- indicates if a simple SQL identifier should be
 returned as a quoted identifier
Returns:
A simple SQL identifier or a delimited identifier
Throws:
SQLException
- if identifier is not a valid identifier
SQLFeatureNotSupportedException
- if the datasource does not support
 delimited identifiers
NullPointerException
- if identifier is
null
Since:
9
isSimpleIdentifier
default
boolean
isSimpleIdentifier
(
String
identifier)
throws
SQLException
Retrieves whether
identifier
is a simple SQL identifier.
Implementation Requirements:
The default implementation uses the following criteria to
 determine a valid simple SQL identifier:
The string is not enclosed in double quotes
The first character is an alphabetic character from a through z, or
 from A through Z
The string only contains alphanumeric characters or the character
 "_"
The string is between 1 and 128 characters in length inclusive
Examples of the conversion:
identifier
Simple Identifier
Hello
true
G'Day
false
"Bruce Wayne"
false
GoodDay$
false
Hello"World
false
"Hello"World"
false
Implementation Note:
JDBC driver implementations may need to provide their own
 implementation of this method in order to meet the requirements of the
 underlying datasource.
Parameters:
identifier
- a SQL identifier
Returns:
true if  a simple SQL identifier, false otherwise
Throws:
NullPointerException
- if identifier is
null
SQLException
- if a database access error occurs
Since:
9
enquoteNCharLiteral
default
String
enquoteNCharLiteral
(
String
val)
throws
SQLException
Returns a
String
representing a National Character Set Literal
 enclosed in single quotes and prefixed with a upper case letter N.
 Any occurrence of a single quote within the string will be replaced
 by two single quotes.
Examples of the conversion:
Value
Result
Hello
N'Hello'
G'Day
N'G''Day'
'G''Day'
N'''G''''Day'''
I'''M
N'I''''''M'
N'Hello'
N'N''Hello'''
Implementation Note:
JDBC driver implementations may need to provide their own implementation
 of this method in order to meet the requirements of the underlying
 datasource. An implementation of enquoteNCharLiteral may accept a different
 set of characters than that accepted by the same drivers implementation of
 enquoteLiteral.
Parameters:
val
- a character string
Returns:
the result of replacing every single quote character in the
 argument by two single quote characters where this entire result is
 then prefixed with 'N'.
Throws:
NullPointerException
- if val is
null
SQLException
- if a database access error occurs
Since:
9
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.