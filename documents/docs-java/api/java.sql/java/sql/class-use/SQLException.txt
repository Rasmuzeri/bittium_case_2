Uses of Class java.sql.SQLException (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Uses of Class
java.sql.SQLException
Packages that use
SQLException
Package
Description
java.sql
Provides the API for accessing and processing data stored in a
 data source (usually a relational database) using the
 Java programming language.
javax.sql
Provides the API for server side data source access and processing from
 the Java programming language.
javax.sql.rowset
Standard interfaces and base classes for JDBC
RowSet
implementations.
javax.sql.rowset.serial
Provides utility classes to allow serializable mappings between SQL types
 and data types in the Java programming language.
javax.sql.rowset.spi
The standard classes and interfaces that a third party vendor has to
 use in its implementation of a synchronization provider.
Uses of
SQLException
in
java.sql
Subclasses of
SQLException
in
java.sql
Modifier and Type
Class
Description
class
BatchUpdateException
The subclass of
SQLException
thrown when an error
 occurs during a batch update operation.
class
DataTruncation
An exception  thrown as a
DataTruncation
exception
 (on writes) or reported as a
DataTruncation
warning (on reads)
  when a data values is unexpectedly truncated for reasons other than its having
  exceeded
MaxFieldSize
.
class
SQLClientInfoException
The subclass of
SQLException
is thrown when one or more client info properties
 could not be set on a
Connection
.
class
SQLDataException
The subclass of
SQLException
thrown when the SQLState class value
 is '
22
', or under vendor-specified conditions.
class
SQLFeatureNotSupportedException
The subclass of
SQLException
thrown when the SQLState class value is '
0A
'
 ( the value is 'zero' A).
class
SQLIntegrityConstraintViolationException
The subclass of
SQLException
thrown when the SQLState class value
 is '
23
', or under vendor-specified conditions.
class
SQLInvalidAuthorizationSpecException
The subclass of
SQLException
thrown when the SQLState class value
 is '
28
', or under vendor-specified conditions.
class
SQLNonTransientConnectionException
The subclass of
SQLException
thrown for the SQLState
 class value '
08
', or under vendor-specified conditions.
class
SQLNonTransientException
The subclass of
SQLException
thrown when an instance where a retry
 of the same operation would fail unless the cause of the
SQLException
is corrected.
class
SQLRecoverableException
The subclass of
SQLException
thrown in situations where a
 previously failed operation might be able to succeed if the application performs
  some recovery steps and retries the entire transaction or in the case of a
 distributed transaction, the transaction branch.
class
SQLSyntaxErrorException
The subclass of
SQLException
thrown when the SQLState class value
 is '
42
', or under vendor-specified conditions.
class
SQLTimeoutException
The subclass of
SQLException
thrown when the timeout specified by
Statement.setQueryTimeout
,
DriverManager.setLoginTimeout
,
DataSource.setLoginTimeout
,
XADataSource.setLoginTimeout
has expired.
class
SQLTransactionRollbackException
The subclass of
SQLException
thrown when the SQLState class value
 is '
40
', or under vendor-specified conditions.
class
SQLTransientConnectionException
The subclass of
SQLException
for the SQLState class
 value '
08
', or under vendor-specified conditions.
class
SQLTransientException
The subclass of
SQLException
is thrown in situations where a
 previously failed operation might be able to succeed when the operation is
 retried without any intervention by application-level functionality.
class
SQLWarning
An exception that provides information on  database access
 warnings.
Methods in
java.sql
that return
SQLException
Modifier and Type
Method
Description
SQLException
SQLException.
getNextException
()
Retrieves the exception chained to this
SQLException
object by setNextException(SQLException ex).
Methods in
java.sql
with parameters of type
SQLException
Modifier and Type
Method
Description
void
SQLException.
setNextException
(
SQLException
ex)
Adds an
SQLException
object to the end of the chain.
Methods in
java.sql
that throw
SQLException
Modifier and Type
Method
Description
void
Connection.
abort
(
Executor
executor)
Terminates an open connection.
boolean
ResultSet.
absolute
(int row)
Moves the cursor to the given row number in
 this
ResultSet
object.
boolean
Driver.
acceptsURL
(
String
url)
Retrieves whether the driver thinks that it can open a connection
 to the given URL.
void
PreparedStatement.
addBatch
()
Adds a set of parameters to this
PreparedStatement
object's batch of commands.
void
Statement.
addBatch
(
String
sql)
Adds the given SQL command to the current list of commands for this
Statement
object.
void
ResultSet.
afterLast
()
Moves the cursor to the end of
 this
ResultSet
object, just after the
 last row.
boolean
DatabaseMetaData.
allProceduresAreCallable
()
Retrieves whether the current user can call all the procedures
 returned by the method
getProcedures
.
boolean
DatabaseMetaData.
allTablesAreSelectable
()
Retrieves whether the current user can use all the tables returned
 by the method
getTables
in a
SELECT
statement.
boolean
DatabaseMetaData.
autoCommitFailureClosesAllResultSets
()
Retrieves whether a
SQLException
while autoCommit is
true
indicates
 that all open ResultSets are closed, even ones that are holdable.
void
ResultSet.
beforeFirst
()
Moves the cursor to the front of
 this
ResultSet
object, just before the
 first row.
default void
Connection.
beginRequest
()
Hints to the driver that a request, an independent unit of work, is beginning
 on this connection.
Connection
ConnectionBuilder.
build
()
Returns an instance of the object defined by this builder.
ShardingKey
ShardingKeyBuilder.
build
()
Returns an instance of the object defined by this builder.
void
Statement.
cancel
()
Cancels this
Statement
object if both the DBMS and
 driver support aborting an SQL statement.
void
ResultSet.
cancelRowUpdates
()
Cancels the updates made to the current row in this
ResultSet
object.
void
Statement.
clearBatch
()
Empties this
Statement
object's current list of
 SQL commands.
void
PreparedStatement.
clearParameters
()
Clears the current parameter values immediately.
void
Connection.
clearWarnings
()
Clears all warnings reported for this
Connection
object.
void
ResultSet.
clearWarnings
()
Clears all warnings reported on this
ResultSet
object.
void
Statement.
clearWarnings
()
Clears all the warnings reported on this
Statement
object.
void
Connection.
close
()
Releases this
Connection
object's database and JDBC resources
 immediately instead of waiting for them to be automatically released.
void
ResultSet.
close
()
Releases this
ResultSet
object's database and
 JDBC resources immediately instead of waiting for
 this to happen when it is automatically closed.
void
Statement.
close
()
Releases this
Statement
object's database
 and JDBC resources immediately instead of waiting for
 this to happen when it is automatically closed.
void
Statement.
closeOnCompletion
()
Specifies that this
Statement
will be closed when all its
 dependent result sets are closed.
void
Connection.
commit
()
Makes all changes made since the previous
 commit/rollback permanent and releases any database locks
 currently held by this
Connection
object.
Connection
Driver.
connect
(
String
url,
Properties
info)
Attempts to make a database connection to the given URL.
Array
Connection.
createArrayOf
(
String
typeName,
Object
[] elements)
Factory method for creating Array objects.
Blob
Connection.
createBlob
()
Constructs an object that implements the
Blob
interface.
Clob
Connection.
createClob
()
Constructs an object that implements the
Clob
interface.
NClob
Connection.
createNClob
()
Constructs an object that implements the
NClob
interface.
SQLXML
Connection.
createSQLXML
()
Constructs an object that implements the
SQLXML
interface.
Statement
Connection.
createStatement
()
Creates a
Statement
object for sending
 SQL statements to the database.
Statement
Connection.
createStatement
(int resultSetType,
 int resultSetConcurrency)
Creates a
Statement
object that will generate
ResultSet
objects with the given type and concurrency.
Statement
Connection.
createStatement
(int resultSetType,
 int resultSetConcurrency,
 int resultSetHoldability)
Creates a
Statement
object that will generate
ResultSet
objects with the given type, concurrency,
 and holdability.
Struct
Connection.
createStruct
(
String
typeName,
Object
[] attributes)
Factory method for creating Struct objects.
boolean
DatabaseMetaData.
dataDefinitionCausesTransactionCommit
()
Retrieves whether a data definition statement within a transaction forces
 the transaction to commit.
boolean
DatabaseMetaData.
dataDefinitionIgnoredInTransactions
()
Retrieves whether this database ignores a data definition statement
 within a transaction.
void
ResultSet.
deleteRow
()
Deletes the current row from this
ResultSet
object
 and from the underlying database.
boolean
DatabaseMetaData.
deletesAreDetected
(int type)
Retrieves whether or not a visible row delete can be detected by
 calling the method
ResultSet.rowDeleted
.
static void
DriverManager.
deregisterDriver
(
Driver
driver)
Removes the specified driver from the
DriverManager
's list of
 registered drivers.
boolean
DatabaseMetaData.
doesMaxRowSizeIncludeBlobs
()
Retrieves whether the return value for the method
getMaxRowSize
includes the SQL data types
LONGVARCHAR
and
LONGVARBINARY
.
default void
Connection.
endRequest
()
Hints to the driver that a request, an independent unit of work,
 has completed.
default
String
Statement.
enquoteIdentifier
(
String
identifier,
 boolean alwaysQuote)
Returns a SQL identifier.
default
String
Statement.
enquoteLiteral
(
String
val)
Returns a
String
enclosed in single quotes.
default
String
Statement.
enquoteNCharLiteral
(
String
val)
Returns a
String
representing a National Character Set Literal
 enclosed in single quotes and prefixed with a upper case letter N.
boolean
PreparedStatement.
execute
()
Executes the SQL statement in this
PreparedStatement
object,
 which may be any kind of SQL statement.
boolean
Statement.
execute
(
String
sql)
Executes the given SQL statement, which may return multiple results.
boolean
Statement.
execute
(
String
sql,
 int autoGeneratedKeys)
Executes the given SQL statement, which may return multiple results,
 and signals the driver that any
 auto-generated keys should be made available
 for retrieval.
boolean
Statement.
execute
(
String
sql,
 int[] columnIndexes)
Executes the given SQL statement, which may return multiple results,
 and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.
boolean
Statement.
execute
(
String
sql,
String
[] columnNames)
Executes the given SQL statement, which may return multiple results,
 and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.
int[]
Statement.
executeBatch
()
Submits a batch of commands to the database for execution and
 if all commands execute successfully, returns an array of update counts.
default long[]
Statement.
executeLargeBatch
()
Submits a batch of commands to the database for execution and
 if all commands execute successfully, returns an array of update counts.
default long
PreparedStatement.
executeLargeUpdate
()
Executes the SQL statement in this
PreparedStatement
object,
 which must be an SQL Data Manipulation Language (DML) statement,
 such as
INSERT
,
UPDATE
or
DELETE
; or an SQL statement that returns nothing,
 such as a DDL statement.
default long
Statement.
executeLargeUpdate
(
String
sql)
Executes the given SQL statement, which may be an
INSERT
,
UPDATE
, or
DELETE
statement or an
 SQL statement that returns nothing, such as an SQL DDL statement.
default long
Statement.
executeLargeUpdate
(
String
sql,
 int autoGeneratedKeys)
Executes the given SQL statement and signals the driver with the
 given flag about whether the
 auto-generated keys produced by this
Statement
object
 should be made available for retrieval.
default long
Statement.
executeLargeUpdate
(
String
sql,
 int[] columnIndexes)
Executes the given SQL statement and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.
default long
Statement.
executeLargeUpdate
(
String
sql,
String
[] columnNames)
Executes the given SQL statement and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.
ResultSet
PreparedStatement.
executeQuery
()
Executes the SQL query in this
PreparedStatement
object
 and returns the
ResultSet
object generated by the query.
ResultSet
Statement.
executeQuery
(
String
sql)
Executes the given SQL statement, which returns a single
ResultSet
object.
int
PreparedStatement.
executeUpdate
()
Executes the SQL statement in this
PreparedStatement
object,
 which must be an SQL Data Manipulation Language (DML) statement, such as
INSERT
,
UPDATE
or
DELETE
; or an SQL statement that returns nothing,
 such as a DDL statement.
int
Statement.
executeUpdate
(
String
sql)
Executes the given SQL statement, which may be an
INSERT
,
UPDATE
, or
DELETE
statement or an
 SQL statement that returns nothing, such as an SQL DDL statement.
int
Statement.
executeUpdate
(
String
sql,
 int autoGeneratedKeys)
Executes the given SQL statement and signals the driver with the
 given flag about whether the
 auto-generated keys produced by this
Statement
object
 should be made available for retrieval.
int
Statement.
executeUpdate
(
String
sql,
 int[] columnIndexes)
Executes the given SQL statement and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.
int
Statement.
executeUpdate
(
String
sql,
String
[] columnNames)
Executes the given SQL statement and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.
int
ResultSet.
findColumn
(
String
columnLabel)
Maps the given
ResultSet
column label to its
ResultSet
column index.
boolean
ResultSet.
first
()
Moves the cursor to the first row in
 this
ResultSet
object.
void
Array.
free
()
This method frees the
Array
object and releases the resources that
 it holds.
void
Blob.
free
()
This method frees the
Blob
object and releases the resources that
 it holds.
void
Clob.
free
()
This method releases the resources that the
Clob
object
 holds.
void
SQLXML.
free
()
This method closes this object and releases the resources that it held.
boolean
DatabaseMetaData.
generatedKeyAlwaysReturned
()
Retrieves whether a generated key will always be returned if the column
 name(s) or index(es) specified for the auto generated key column(s)
 are valid and the statement succeeds.
Object
Array.
getArray
()
Retrieves the contents of the SQL
ARRAY
value designated
 by this
Array
object in the form of an array in the Java
 programming language.
Object
Array.
getArray
(long index,
 int count)
Retrieves a slice of the SQL
ARRAY
value designated by this
Array
object, beginning with the
 specified
index
and containing up to
count
successive elements of the SQL array.
Object
Array.
getArray
(long index,
 int count,
Map
<
String
,
Class
<?>> map)
Retrieves a slice of the SQL
ARRAY
value
 designated by this
Array
object, beginning with the specified
index
and containing up to
count
successive elements of the SQL array.
Object
Array.
getArray
(
Map
<
String
,
Class
<?>> map)
Retrieves the contents of the SQL
ARRAY
value designated by this
Array
object.
Array
CallableStatement.
getArray
(int parameterIndex)
Retrieves the value of the designated JDBC
ARRAY
parameter as an
Array
object in the Java programming language.
Array
CallableStatement.
getArray
(
String
parameterName)
Retrieves the value of a JDBC
ARRAY
parameter as an
Array
object in the Java programming language.
Array
ResultSet.
getArray
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as an
Array
object
 in the Java programming language.
Array
ResultSet.
getArray
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as an
Array
object
 in the Java programming language.
InputStream
Clob.
getAsciiStream
()
Retrieves the
CLOB
value designated by this
Clob
object as an ascii stream.
InputStream
ResultSet.
getAsciiStream
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a stream of ASCII characters.
InputStream
ResultSet.
getAsciiStream
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a stream of
 ASCII characters.
ResultSet
DatabaseMetaData.
getAttributes
(
String
catalog,
String
schemaPattern,
String
typeNamePattern,
String
attributeNamePattern)
Retrieves a description of the given attribute of the given type
 for a user-defined type (UDT) that is available in the given schema
 and catalog.
Object
[]
Struct.
getAttributes
()
Produces the ordered values of the attributes of the SQL
 structured type that this
Struct
object represents.
Object
[]
Struct.
getAttributes
(
Map
<
String
,
Class
<?>> map)
Produces the ordered values of the attributes of the SQL
 structured type that this
Struct
object represents.
boolean
Connection.
getAutoCommit
()
Retrieves the current auto-commit mode for this
Connection
object.
int
Array.
getBaseType
()
Retrieves the JDBC type of the elements in the array designated
 by this
Array
object.
String
Array.
getBaseTypeName
()
Retrieves the SQL type name of the elements in
 the array designated by this
Array
object.
String
Ref.
getBaseTypeName
()
Retrieves the fully-qualified SQL name of the SQL structured type that
 this
Ref
object references.
ResultSet
DatabaseMetaData.
getBestRowIdentifier
(
String
catalog,
String
schema,
String
table,
 int scope,
 boolean nullable)
Retrieves a description of a table's optimal set of columns that
 uniquely identifies a row.
BigDecimal
CallableStatement.
getBigDecimal
(int parameterIndex)
Retrieves the value of the designated JDBC
NUMERIC
parameter as a
java.math.BigDecimal
object with as many digits to the
 right of the decimal point as the value contains.
BigDecimal
CallableStatement.
getBigDecimal
(int parameterIndex,
 int scale)
Deprecated.
use
getBigDecimal(int parameterIndex)
or
getBigDecimal(String parameterName)
BigDecimal
CallableStatement.
getBigDecimal
(
String
parameterName)
Retrieves the value of a JDBC
NUMERIC
parameter as a
java.math.BigDecimal
object with as many digits to the
 right of the decimal point as the value contains.
BigDecimal
ResultSet.
getBigDecimal
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.math.BigDecimal
with full precision.
BigDecimal
ResultSet.
getBigDecimal
(int columnIndex,
 int scale)
Deprecated.
Use
getBigDecimal(int columnIndex)
or
getBigDecimal(String columnLabel)
BigDecimal
ResultSet.
getBigDecimal
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.math.BigDecimal
with full precision.
BigDecimal
ResultSet.
getBigDecimal
(
String
columnLabel,
 int scale)
Deprecated.
Use
getBigDecimal(int columnIndex)
or
getBigDecimal(String columnLabel)
InputStream
Blob.
getBinaryStream
()
Retrieves the
BLOB
value designated by this
Blob
instance as a stream.
InputStream
Blob.
getBinaryStream
(long pos,
 long length)
Returns an
InputStream
object that contains
 a partial
Blob
value, starting with the byte
 specified by pos, which is length bytes in length.
InputStream
ResultSet.
getBinaryStream
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a  stream of
 uninterpreted bytes.
InputStream
ResultSet.
getBinaryStream
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a stream of uninterpreted
byte
s.
InputStream
SQLXML.
getBinaryStream
()
Retrieves the XML value designated by this SQLXML instance as a stream.
Blob
CallableStatement.
getBlob
(int parameterIndex)
Retrieves the value of the designated JDBC
BLOB
parameter as a
Blob
object in the Java programming language.
Blob
CallableStatement.
getBlob
(
String
parameterName)
Retrieves the value of a JDBC
BLOB
parameter as a
Blob
object in the Java programming language.
Blob
ResultSet.
getBlob
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
Blob
object
 in the Java programming language.
Blob
ResultSet.
getBlob
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
Blob
object
 in the Java programming language.
boolean
CallableStatement.
getBoolean
(int parameterIndex)
Retrieves the value of the designated JDBC
BIT
or
BOOLEAN
parameter as a
boolean
in the Java programming language.
boolean
CallableStatement.
getBoolean
(
String
parameterName)
Retrieves the value of a JDBC
BIT
or
BOOLEAN
parameter as a
boolean
in the Java programming language.
boolean
ResultSet.
getBoolean
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
boolean
in the Java programming language.
boolean
ResultSet.
getBoolean
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
boolean
in the Java programming language.
byte
CallableStatement.
getByte
(int parameterIndex)
Retrieves the value of the designated JDBC
TINYINT
parameter
 as a
byte
in the Java programming language.
byte
CallableStatement.
getByte
(
String
parameterName)
Retrieves the value of a JDBC
TINYINT
parameter as a
byte
in the Java programming language.
byte
ResultSet.
getByte
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
byte
in the Java programming language.
byte
ResultSet.
getByte
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
byte
in the Java programming language.
byte[]
Blob.
getBytes
(long pos,
 int length)
Retrieves all or part of the
BLOB
value that this
Blob
object represents, as an array of
 bytes.
byte[]
CallableStatement.
getBytes
(int parameterIndex)
Retrieves the value of the designated JDBC
BINARY
or
VARBINARY
parameter as an array of
byte
values in the Java programming language.
byte[]
CallableStatement.
getBytes
(
String
parameterName)
Retrieves the value of a JDBC
BINARY
or
VARBINARY
parameter as an array of
byte
values in the Java
 programming language.
byte[]
ResultSet.
getBytes
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
byte
array in the Java programming language.
byte[]
ResultSet.
getBytes
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
byte
array in the Java programming language.
String
Connection.
getCatalog
()
Retrieves this
Connection
object's current catalog name.
String
ResultSetMetaData.
getCatalogName
(int column)
Gets the designated column's table's catalog name.
ResultSet
DatabaseMetaData.
getCatalogs
()
Retrieves the catalog names available in this database.
String
DatabaseMetaData.
getCatalogSeparator
()
Retrieves the
String
that this database uses as the
 separator between a catalog and table name.
String
DatabaseMetaData.
getCatalogTerm
()
Retrieves the database vendor's preferred term for "catalog".
Reader
CallableStatement.
getCharacterStream
(int parameterIndex)
Retrieves the value of the designated parameter as a
java.io.Reader
object in the Java programming language.
Reader
CallableStatement.
getCharacterStream
(
String
parameterName)
Retrieves the value of the designated parameter as a
java.io.Reader
object in the Java programming language.
Reader
Clob.
getCharacterStream
()
Retrieves the
CLOB
value designated by this
Clob
object as a
java.io.Reader
object (or as a stream of
 characters).
Reader
Clob.
getCharacterStream
(long pos,
 long length)
Returns a
Reader
object that contains
 a partial
Clob
value, starting with the character
 specified by pos, which is length characters in length.
Reader
ResultSet.
getCharacterStream
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.io.Reader
object.
Reader
ResultSet.
getCharacterStream
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.io.Reader
object.
Reader
SQLXML.
getCharacterStream
()
Retrieves the XML value designated by this SQLXML instance as a java.io.Reader object.
Properties
Connection.
getClientInfo
()
Returns a list containing the name and current value of each client info
 property supported by the driver.
String
Connection.
getClientInfo
(
String
name)
Returns the value of the client info property specified by name.
ResultSet
DatabaseMetaData.
getClientInfoProperties
()
Retrieves a list of the client info properties
 that the driver supports.
Clob
CallableStatement.
getClob
(int parameterIndex)
Retrieves the value of the designated JDBC
CLOB
parameter as a
java.sql.Clob
object in the Java programming language.
Clob
CallableStatement.
getClob
(
String
parameterName)
Retrieves the value of a JDBC
CLOB
parameter as a
java.sql.Clob
object in the Java programming language.
Clob
ResultSet.
getClob
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
Clob
object
 in the Java programming language.
Clob
ResultSet.
getClob
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
Clob
object
 in the Java programming language.
String
ResultSetMetaData.
getColumnClassName
(int column)
Returns the fully-qualified name of the Java class whose instances
 are manufactured if the method
ResultSet.getObject
is called to retrieve a value
 from the column.
int
ResultSetMetaData.
getColumnCount
()
Returns the number of columns in this
ResultSet
object.
int
ResultSetMetaData.
getColumnDisplaySize
(int column)
Indicates the designated column's normal maximum width in characters.
String
ResultSetMetaData.
getColumnLabel
(int column)
Gets the designated column's suggested title for use in printouts and
 displays.
String
ResultSetMetaData.
getColumnName
(int column)
Get the designated column's name.
ResultSet
DatabaseMetaData.
getColumnPrivileges
(
String
catalog,
String
schema,
String
table,
String
columnNamePattern)
Retrieves a description of the access rights for a table's columns.
ResultSet
DatabaseMetaData.
getColumns
(
String
catalog,
String
schemaPattern,
String
tableNamePattern,
String
columnNamePattern)
Retrieves a description of table columns available in
 the specified catalog.
int
ResultSetMetaData.
getColumnType
(int column)
Retrieves the designated column's SQL type.
String
ResultSetMetaData.
getColumnTypeName
(int column)
Retrieves the designated column's database-specific type name.
int
ResultSet.
getConcurrency
()
Retrieves the concurrency mode of this
ResultSet
object.
Connection
DatabaseMetaData.
getConnection
()
Retrieves the connection that produced this metadata object.
static
Connection
DriverManager.
getConnection
(
String
url)
Attempts to establish a connection to the given database URL.
static
Connection
DriverManager.
getConnection
(
String
url,
String
user,
String
password)
Attempts to establish a connection to the given database URL.
static
Connection
DriverManager.
getConnection
(
String
url,
Properties
info)
Attempts to establish a connection to the given database URL.
Connection
Statement.
getConnection
()
Retrieves the
Connection
object
 that produced this
Statement
object.
ResultSet
DatabaseMetaData.
getCrossReference
(
String
parentCatalog,
String
parentSchema,
String
parentTable,
String
foreignCatalog,
String
foreignSchema,
String
foreignTable)
Retrieves a description of the foreign key columns in the given foreign key
 table that reference the primary key or the columns representing a unique constraint of the  parent table (could be the same or a different table).
String
ResultSet.
getCursorName
()
Retrieves the name of the SQL cursor used by this
ResultSet
object.
int
DatabaseMetaData.
getDatabaseMajorVersion
()
Retrieves the major version number of the underlying database.
int
DatabaseMetaData.
getDatabaseMinorVersion
()
Retrieves the minor version number of the underlying database.
String
DatabaseMetaData.
getDatabaseProductName
()
Retrieves the name of this database product.
String
DatabaseMetaData.
getDatabaseProductVersion
()
Retrieves the version number of this database product.
Date
CallableStatement.
getDate
(int parameterIndex)
Retrieves the value of the designated JDBC
DATE
parameter as a
java.sql.Date
object.
Date
CallableStatement.
getDate
(int parameterIndex,
Calendar
cal)
Retrieves the value of the designated JDBC
DATE
parameter as a
java.sql.Date
object, using
 the given
Calendar
object
 to construct the date.
Date
CallableStatement.
getDate
(
String
parameterName)
Retrieves the value of a JDBC
DATE
parameter as a
java.sql.Date
object.
Date
CallableStatement.
getDate
(
String
parameterName,
Calendar
cal)
Retrieves the value of a JDBC
DATE
parameter as a
java.sql.Date
object, using
 the given
Calendar
object
 to construct the date.
Date
ResultSet.
getDate
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
java.sql.Date
object in the Java programming language.
Date
ResultSet.
getDate
(int columnIndex,
Calendar
cal)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.sql.Date
object
 in the Java programming language.
Date
ResultSet.
getDate
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
java.sql.Date
object in the Java programming language.
Date
ResultSet.
getDate
(
String
columnLabel,
Calendar
cal)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.sql.Date
object
 in the Java programming language.
int
DatabaseMetaData.
getDefaultTransactionIsolation
()
Retrieves this database's default transaction isolation level.
double
CallableStatement.
getDouble
(int parameterIndex)
Retrieves the value of the designated JDBC
DOUBLE
parameter as a
double
in the Java programming language.
double
CallableStatement.
getDouble
(
String
parameterName)
Retrieves the value of a JDBC
DOUBLE
parameter as a
double
in the Java programming language.
double
ResultSet.
getDouble
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
double
in the Java programming language.
double
ResultSet.
getDouble
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
double
in the Java programming language.
static
Driver
DriverManager.
getDriver
(
String
url)
Attempts to locate a driver that understands the given URL.
String
DatabaseMetaData.
getDriverName
()
Retrieves the name of this JDBC driver.
String
DatabaseMetaData.
getDriverVersion
()
Retrieves the version number of this JDBC driver as a
String
.
ResultSet
DatabaseMetaData.
getExportedKeys
(
String
catalog,
String
schema,
String
table)
Retrieves a description of the foreign key columns that reference the
 given table's primary key columns (the foreign keys exported by a
 table).
String
DatabaseMetaData.
getExtraNameCharacters
()
Retrieves all the "extra" characters that can be used in unquoted
 identifier names (those beyond a-z, A-Z, 0-9 and _).
int
ResultSet.
getFetchDirection
()
Retrieves the fetch direction for this
ResultSet
object.
int
Statement.
getFetchDirection
()
Retrieves the direction for fetching rows from
 database tables that is the default for result sets
 generated from this
Statement
object.
int
ResultSet.
getFetchSize
()
Retrieves the fetch size for this
ResultSet
object.
int
Statement.
getFetchSize
()
Retrieves the number of result set rows that is the default
 fetch size for
ResultSet
objects
 generated from this
Statement
object.
float
CallableStatement.
getFloat
(int parameterIndex)
Retrieves the value of the designated JDBC
FLOAT
parameter
 as a
float
in the Java programming language.
float
CallableStatement.
getFloat
(
String
parameterName)
Retrieves the value of a JDBC
FLOAT
parameter as a
float
in the Java programming language.
float
ResultSet.
getFloat
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
float
in the Java programming language.
float
ResultSet.
getFloat
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
float
in the Java programming language.
ResultSet
DatabaseMetaData.
getFunctionColumns
(
String
catalog,
String
schemaPattern,
String
functionNamePattern,
String
columnNamePattern)
Retrieves a description of the given catalog's system or user
 function parameters and return type.
ResultSet
DatabaseMetaData.
getFunctions
(
String
catalog,
String
schemaPattern,
String
functionNamePattern)
Retrieves a description of the  system and user functions available
 in the given catalog.
ResultSet
Statement.
getGeneratedKeys
()
Retrieves any auto-generated keys created as a result of executing this
Statement
object.
int
Connection.
getHoldability
()
Retrieves the current holdability of
ResultSet
objects
 created using this
Connection
object.
int
ResultSet.
getHoldability
()
Retrieves the holdability of this
ResultSet
object
String
DatabaseMetaData.
getIdentifierQuoteString
()
Retrieves the string used to quote SQL identifiers.
ResultSet
DatabaseMetaData.
getImportedKeys
(
String
catalog,
String
schema,
String
table)
Retrieves a description of the primary key columns that are
 referenced by the given table's foreign key columns (the primary keys
 imported by a table).
ResultSet
DatabaseMetaData.
getIndexInfo
(
String
catalog,
String
schema,
String
table,
 boolean unique,
 boolean approximate)
Retrieves a description of the given table's indices and statistics.
int
CallableStatement.
getInt
(int parameterIndex)
Retrieves the value of the designated JDBC
INTEGER
parameter
 as an
int
in the Java programming language.
int
CallableStatement.
getInt
(
String
parameterName)
Retrieves the value of a JDBC
INTEGER
parameter as an
int
in the Java programming language.
int
ResultSet.
getInt
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 an
int
in the Java programming language.
int
ResultSet.
getInt
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 an
int
in the Java programming language.
int
DatabaseMetaData.
getJDBCMajorVersion
()
Retrieves the major JDBC version number for this
 driver.
int
DatabaseMetaData.
getJDBCMinorVersion
()
Retrieves the minor JDBC version number for this
 driver.
default long
Statement.
getLargeMaxRows
()
Retrieves the maximum number of rows that a
ResultSet
object produced by this
Statement
object can contain.
default long
Statement.
getLargeUpdateCount
()
Retrieves the current result as an update count; if the result
 is a
ResultSet
object or there are no more results, -1
  is returned.
long
CallableStatement.
getLong
(int parameterIndex)
Retrieves the value of the designated JDBC
BIGINT
parameter
 as a
long
in the Java programming language.
long
CallableStatement.
getLong
(
String
parameterName)
Retrieves the value of a JDBC
BIGINT
parameter as a
long
in the Java programming language.
long
ResultSet.
getLong
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
long
in the Java programming language.
long
ResultSet.
getLong
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
long
in the Java programming language.
int
DatabaseMetaData.
getMaxBinaryLiteralLength
()
Retrieves the maximum number of hex characters this database allows in an
 inline binary literal.
int
DatabaseMetaData.
getMaxCatalogNameLength
()
Retrieves the maximum number of characters that this database allows in a
 catalog name.
int
DatabaseMetaData.
getMaxCharLiteralLength
()
Retrieves the maximum number of characters this database allows
 for a character literal.
int
DatabaseMetaData.
getMaxColumnNameLength
()
Retrieves the maximum number of characters this database allows
 for a column name.
int
DatabaseMetaData.
getMaxColumnsInGroupBy
()
Retrieves the maximum number of columns this database allows in a
GROUP BY
clause.
int
DatabaseMetaData.
getMaxColumnsInIndex
()
Retrieves the maximum number of columns this database allows in an index.
int
DatabaseMetaData.
getMaxColumnsInOrderBy
()
Retrieves the maximum number of columns this database allows in an
ORDER BY
clause.
int
DatabaseMetaData.
getMaxColumnsInSelect
()
Retrieves the maximum number of columns this database allows in a
SELECT
list.
int
DatabaseMetaData.
getMaxColumnsInTable
()
Retrieves the maximum number of columns this database allows in a table.
int
DatabaseMetaData.
getMaxConnections
()
Retrieves the maximum number of concurrent connections to this
 database that are possible.
int
DatabaseMetaData.
getMaxCursorNameLength
()
Retrieves the maximum number of characters that this database allows in a
 cursor name.
int
Statement.
getMaxFieldSize
()
Retrieves the maximum number of bytes that can be
 returned for character and binary column values in a
ResultSet
object produced by this
Statement
object.
int
DatabaseMetaData.
getMaxIndexLength
()
Retrieves the maximum number of bytes this database allows for an
 index, including all of the parts of the index.
default long
DatabaseMetaData.
getMaxLogicalLobSize
()
Retrieves the maximum number of bytes this database allows for
 the logical size for a
LOB
.
int
DatabaseMetaData.
getMaxProcedureNameLength
()
Retrieves the maximum number of characters that this database allows in a
 procedure name.
int
Statement.
getMaxRows
()
Retrieves the maximum number of rows that a
ResultSet
object produced by this
Statement
object can contain.
int
DatabaseMetaData.
getMaxRowSize
()
Retrieves the maximum number of bytes this database allows in
 a single row.
int
DatabaseMetaData.
getMaxSchemaNameLength
()
Retrieves the maximum number of characters that this database allows in a
 schema name.
int
DatabaseMetaData.
getMaxStatementLength
()
Retrieves the maximum number of characters this database allows in
 an SQL statement.
int
DatabaseMetaData.
getMaxStatements
()
Retrieves the maximum number of active statements to this database
 that can be open at the same time.
int
DatabaseMetaData.
getMaxTableNameLength
()
Retrieves the maximum number of characters this database allows in
 a table name.
int
DatabaseMetaData.
getMaxTablesInSelect
()
Retrieves the maximum number of tables this database allows in a
SELECT
statement.
int
DatabaseMetaData.
getMaxUserNameLength
()
Retrieves the maximum number of characters this database allows in
 a user name.
DatabaseMetaData
Connection.
getMetaData
()
Retrieves a
DatabaseMetaData
object that contains
 metadata about the database to which this
Connection
object represents a connection.
ResultSetMetaData
PreparedStatement.
getMetaData
()
Retrieves a
ResultSetMetaData
object that contains
 information about the columns of the
ResultSet
object
 that will be returned when this
PreparedStatement
object
 is executed.
ResultSetMetaData
ResultSet.
getMetaData
()
Retrieves the  number, types and properties of
 this
ResultSet
object's columns.
boolean
Statement.
getMoreResults
()
Moves to this
Statement
object's next result, returns
true
if it is a
ResultSet
object, and
 implicitly closes any current
ResultSet
object(s) obtained with the method
getResultSet
.
boolean
Statement.
getMoreResults
(int current)
Moves to this
Statement
object's next result, deals with
 any current
ResultSet
object(s) according  to the instructions
 specified by the given flag, and returns
true
if the next result is a
ResultSet
object.
Reader
CallableStatement.
getNCharacterStream
(int parameterIndex)
Retrieves the value of the designated parameter as a
java.io.Reader
object in the Java programming language.
Reader
CallableStatement.
getNCharacterStream
(
String
parameterName)
Retrieves the value of the designated parameter as a
java.io.Reader
object in the Java programming language.
Reader
ResultSet.
getNCharacterStream
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.io.Reader
object.
Reader
ResultSet.
getNCharacterStream
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.io.Reader
object.
NClob
CallableStatement.
getNClob
(int parameterIndex)
Retrieves the value of the designated JDBC
NCLOB
parameter as a
java.sql.NClob
object in the Java programming language.
NClob
CallableStatement.
getNClob
(
String
parameterName)
Retrieves the value of a JDBC
NCLOB
parameter as a
java.sql.NClob
object in the Java programming language.
NClob
ResultSet.
getNClob
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
NClob
object
 in the Java programming language.
NClob
ResultSet.
getNClob
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
NClob
object
 in the Java programming language.
int
Connection.
getNetworkTimeout
()
Retrieves the number of milliseconds the driver will
 wait for a database request to complete.
String
CallableStatement.
getNString
(int parameterIndex)
Retrieves the value of the designated
NCHAR
,
NVARCHAR
or
LONGNVARCHAR
parameter as
 a
String
in the Java programming language.
String
CallableStatement.
getNString
(
String
parameterName)
Retrieves the value of the designated
NCHAR
,
NVARCHAR
or
LONGNVARCHAR
parameter as
 a
String
in the Java programming language.
String
ResultSet.
getNString
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
String
in the Java programming language.
String
ResultSet.
getNString
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
String
in the Java programming language.
String
DatabaseMetaData.
getNumericFunctions
()
Retrieves a comma-separated list of math functions available with
 this database.
Object
CallableStatement.
getObject
(int parameterIndex)
Retrieves the value of the designated parameter as an
Object
in the Java programming language.
<T> T
CallableStatement.
getObject
(int parameterIndex,
Class
<T> type)
Returns an object representing the value of OUT parameter
parameterIndex
and will convert from the
 SQL type of the parameter to the requested Java data type, if the
 conversion is supported.
Object
CallableStatement.
getObject
(int parameterIndex,
Map
<
String
,
Class
<?>> map)
Returns an object representing the value of OUT parameter
parameterIndex
and uses
map
for the custom
 mapping of the parameter value.
Object
CallableStatement.
getObject
(
String
parameterName)
Retrieves the value of a parameter as an
Object
in the Java
 programming language.
<T> T
CallableStatement.
getObject
(
String
parameterName,
Class
<T> type)
Returns an object representing the value of OUT parameter
parameterName
and will convert from the
 SQL type of the parameter to the requested Java data type, if the
 conversion is supported.
Object
CallableStatement.
getObject
(
String
parameterName,
Map
<
String
,
Class
<?>> map)
Returns an object representing the value of OUT parameter
parameterName
and uses
map
for the custom
 mapping of the parameter value.
Object
Ref.
getObject
()
Retrieves the SQL structured type instance referenced by
 this
Ref
object.
Object
Ref.
getObject
(
Map
<
String
,
Class
<?>> map)
Retrieves the referenced object and maps it to a Java type
 using the given type map.
Object
ResultSet.
getObject
(int columnIndex)
Gets the value of the designated column in the current row
 of this
ResultSet
object as
 an
Object
in the Java programming language.
<T> T
ResultSet.
getObject
(int columnIndex,
Class
<T> type)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object and will convert from the
 SQL type of the column to the requested Java data type, if the
 conversion is supported.
Object
ResultSet.
getObject
(int columnIndex,
Map
<
String
,
Class
<?>> map)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as an
Object
in the Java programming language.
Object
ResultSet.
getObject
(
String
columnLabel)
Gets the value of the designated column in the current row
 of this
ResultSet
object as
 an
Object
in the Java programming language.
<T> T
ResultSet.
getObject
(
String
columnLabel,
Class
<T> type)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object and will convert from the
 SQL type of the column to the requested Java data type, if the
 conversion is supported.
Object
ResultSet.
getObject
(
String
columnLabel,
Map
<
String
,
Class
<?>> map)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as an
Object
in the Java programming language.
String
ParameterMetaData.
getParameterClassName
(int param)
Retrieves the fully-qualified name of the Java class whose instances
 should be passed to the method
PreparedStatement.setObject
.
int
ParameterMetaData.
getParameterCount
()
Retrieves the number of parameters in the
PreparedStatement
object for which this
ParameterMetaData
object contains
 information.
ParameterMetaData
PreparedStatement.
getParameterMetaData
()
Retrieves the number, types and properties of this
PreparedStatement
object's parameters.
int
ParameterMetaData.
getParameterMode
(int param)
Retrieves the designated parameter's mode.
int
ParameterMetaData.
getParameterType
(int param)
Retrieves the designated parameter's SQL type.
String
ParameterMetaData.
getParameterTypeName
(int param)
Retrieves the designated parameter's database-specific type name.
int
ParameterMetaData.
getPrecision
(int param)
Retrieves the designated parameter's specified column size.
int
ResultSetMetaData.
getPrecision
(int column)
Get the designated column's specified column size.
ResultSet
DatabaseMetaData.
getPrimaryKeys
(
String
catalog,
String
schema,
String
table)
Retrieves a description of the given table's primary key columns.
ResultSet
DatabaseMetaData.
getProcedureColumns
(
String
catalog,
String
schemaPattern,
String
procedureNamePattern,
String
columnNamePattern)
Retrieves a description of the given catalog's stored procedure parameter
 and result columns.
ResultSet
DatabaseMetaData.
getProcedures
(
String
catalog,
String
schemaPattern,
String
procedureNamePattern)
Retrieves a description of the stored procedures available in the given
 catalog.
String
DatabaseMetaData.
getProcedureTerm
()
Retrieves the database vendor's preferred term for "procedure".
DriverPropertyInfo
[]
Driver.
getPropertyInfo
(
String
url,
Properties
info)
Gets information about the possible properties for this driver.
ResultSet
DatabaseMetaData.
getPseudoColumns
(
String
catalog,
String
schemaPattern,
String
tableNamePattern,
String
columnNamePattern)
Retrieves a description of the pseudo or hidden columns available
 in a given table within the specified catalog and schema.
int
Statement.
getQueryTimeout
()
Retrieves the number of seconds the driver will
 wait for a
Statement
object to execute.
Ref
CallableStatement.
getRef
(int parameterIndex)
Retrieves the value of the designated JDBC
REF(<structured-type>)
parameter as a
Ref
object in the Java programming language.
Ref
CallableStatement.
getRef
(
String
parameterName)
Retrieves the value of a JDBC
REF(<structured-type>)
parameter as a
Ref
object in the Java programming language.
Ref
ResultSet.
getRef
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
Ref
object
 in the Java programming language.
Ref
ResultSet.
getRef
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
Ref
object
 in the Java programming language.
ResultSet
Array.
getResultSet
()
Retrieves a result set that contains the elements of the SQL
ARRAY
value
 designated by this
Array
object.
ResultSet
Array.
getResultSet
(long index,
 int count)
Retrieves a result set holding the elements of the subarray that
 starts at index
index
and contains up to
count
successive elements.
ResultSet
Array.
getResultSet
(long index,
 int count,
Map
<
String
,
Class
<?>> map)
Retrieves a result set holding the elements of the subarray that
 starts at index
index
and contains up to
count
successive elements.
ResultSet
Array.
getResultSet
(
Map
<
String
,
Class
<?>> map)
Retrieves a result set that contains the elements of the SQL
ARRAY
value designated by this
Array
object.
ResultSet
Statement.
getResultSet
()
Retrieves the current result as a
ResultSet
object.
int
Statement.
getResultSetConcurrency
()
Retrieves the result set concurrency for
ResultSet
objects
 generated by this
Statement
object.
int
DatabaseMetaData.
getResultSetHoldability
()
Retrieves this database's default holdability for
ResultSet
objects.
int
Statement.
getResultSetHoldability
()
Retrieves the result set holdability for
ResultSet
objects
 generated by this
Statement
object.
int
Statement.
getResultSetType
()
Retrieves the result set type for
ResultSet
objects
 generated by this
Statement
object.
int
ResultSet.
getRow
()
Retrieves the current row number.
RowId
CallableStatement.
getRowId
(int parameterIndex)
Retrieves the value of the designated JDBC
ROWID
parameter as a
java.sql.RowId
object.
RowId
CallableStatement.
getRowId
(
String
parameterName)
Retrieves the value of the designated JDBC
ROWID
parameter as a
java.sql.RowId
object.
RowId
ResultSet.
getRowId
(int columnIndex)
Retrieves the value of the designated column in the current row of this
ResultSet
object as a
java.sql.RowId
object in the Java
 programming language.
RowId
ResultSet.
getRowId
(
String
columnLabel)
Retrieves the value of the designated column in the current row of this
ResultSet
object as a
java.sql.RowId
object in the Java
 programming language.
RowIdLifetime
DatabaseMetaData.
getRowIdLifetime
()
Indicates whether this data source supports the SQL
ROWID
type,
 and the lifetime for which a
RowId
object remains valid.
int
Savepoint.
getSavepointId
()
Retrieves the generated ID for the savepoint that this
Savepoint
object represents.
String
Savepoint.
getSavepointName
()
Retrieves the name of the savepoint that this
Savepoint
object represents.
int
ParameterMetaData.
getScale
(int param)
Retrieves the designated parameter's number of digits to right of the decimal point.
 0 is returned for data types where the scale is not applicable.
int
ResultSetMetaData.
getScale
(int column)
Gets the designated column's number of digits to right of the decimal point.
 0 is returned for data types where the scale is not applicable.
String
Connection.
getSchema
()
Retrieves this
Connection
object's current schema name.
String
ResultSetMetaData.
getSchemaName
(int column)
Get the designated column's table's schema.
ResultSet
DatabaseMetaData.
getSchemas
()
Retrieves the schema names available in this database.
ResultSet
DatabaseMetaData.
getSchemas
(
String
catalog,
String
schemaPattern)
Retrieves the schema names available in this database.
String
DatabaseMetaData.
getSchemaTerm
()
Retrieves the database vendor's preferred term for "schema".
String
DatabaseMetaData.
getSearchStringEscape
()
Retrieves the string that can be used to escape wildcard characters.
short
CallableStatement.
getShort
(int parameterIndex)
Retrieves the value of the designated JDBC
SMALLINT
parameter
 as a
short
in the Java programming language.
short
CallableStatement.
getShort
(
String
parameterName)
Retrieves the value of a JDBC
SMALLINT
parameter as a
short
in the Java programming language.
short
ResultSet.
getShort
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
short
in the Java programming language.
short
ResultSet.
getShort
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
short
in the Java programming language.
<T extends
Source
>
T
SQLXML.
getSource
(
Class
<T> sourceClass)
Returns a Source for reading the XML value designated by this SQLXML instance.
String
DatabaseMetaData.
getSQLKeywords
()
Retrieves a comma-separated list of all of this database's SQL keywords
 that are NOT also SQL:2003 keywords.
int
DatabaseMetaData.
getSQLStateType
()
Indicates whether the SQLSTATE returned by
SQLException.getSQLState
is X/Open (now known as Open Group) SQL CLI or SQL:2003.
String
SQLData.
getSQLTypeName
()
Returns the fully-qualified
 name of the SQL user-defined type that this object represents.
String
Struct.
getSQLTypeName
()
Retrieves the SQL type name of the SQL structured type
 that this
Struct
object represents.
SQLXML
CallableStatement.
getSQLXML
(int parameterIndex)
Retrieves the value of the designated
SQL XML
parameter as a
java.sql.SQLXML
object in the Java programming language.
SQLXML
CallableStatement.
getSQLXML
(
String
parameterName)
Retrieves the value of the designated
SQL XML
parameter as a
java.sql.SQLXML
object in the Java programming language.
SQLXML
ResultSet.
getSQLXML
(int columnIndex)
Retrieves the value of the designated column in  the current row of
  this
ResultSet
as a
java.sql.SQLXML
object in the Java programming language.
SQLXML
ResultSet.
getSQLXML
(
String
columnLabel)
Retrieves the value of the designated column in  the current row of
  this
ResultSet
as a
java.sql.SQLXML
object in the Java programming language.
Statement
ResultSet.
getStatement
()
Retrieves the
Statement
object that produced this
ResultSet
object.
String
CallableStatement.
getString
(int parameterIndex)
Retrieves the value of the designated JDBC
CHAR
,
VARCHAR
, or
LONGVARCHAR
parameter as a
String
in the Java programming language.
String
CallableStatement.
getString
(
String
parameterName)
Retrieves the value of a JDBC
CHAR
,
VARCHAR
,
 or
LONGVARCHAR
parameter as a
String
in
 the Java programming language.
String
ResultSet.
getString
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
String
in the Java programming language.
String
ResultSet.
getString
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
String
in the Java programming language.
String
SQLXML.
getString
()
Returns a string representation of the XML value designated by this SQLXML instance.
String
DatabaseMetaData.
getStringFunctions
()
Retrieves a comma-separated list of string functions available with
 this database.
String
Clob.
getSubString
(long pos,
 int length)
Retrieves a copy of the specified substring
 in the
CLOB
value
 designated by this
Clob
object.
ResultSet
DatabaseMetaData.
getSuperTables
(
String
catalog,
String
schemaPattern,
String
tableNamePattern)
Retrieves a description of the table hierarchies defined in a particular
 schema in this database.
ResultSet
DatabaseMetaData.
getSuperTypes
(
String
catalog,
String
schemaPattern,
String
typeNamePattern)
Retrieves a description of the user-defined type (UDT) hierarchies defined in a
 particular schema in this database.
String
DatabaseMetaData.
getSystemFunctions
()
Retrieves a comma-separated list of system functions available with
 this database.
String
ResultSetMetaData.
getTableName
(int column)
Gets the designated column's table name.
ResultSet
DatabaseMetaData.
getTablePrivileges
(
String
catalog,
String
schemaPattern,
String
tableNamePattern)
Retrieves a description of the access rights for each table available
 in a catalog.
ResultSet
DatabaseMetaData.
getTables
(
String
catalog,
String
schemaPattern,
String
tableNamePattern,
String
[] types)
Retrieves a description of the tables available in the given catalog.
ResultSet
DatabaseMetaData.
getTableTypes
()
Retrieves the table types available in this database.
Time
CallableStatement.
getTime
(int parameterIndex)
Retrieves the value of the designated JDBC
TIME
parameter as a
java.sql.Time
object.
Time
CallableStatement.
getTime
(int parameterIndex,
Calendar
cal)
Retrieves the value of the designated JDBC
TIME
parameter as a
java.sql.Time
object, using
 the given
Calendar
object
 to construct the time.
Time
CallableStatement.
getTime
(
String
parameterName)
Retrieves the value of a JDBC
TIME
parameter as a
java.sql.Time
object.
Time
CallableStatement.
getTime
(
String
parameterName,
Calendar
cal)
Retrieves the value of a JDBC
TIME
parameter as a
java.sql.Time
object, using
 the given
Calendar
object
 to construct the time.
Time
ResultSet.
getTime
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
java.sql.Time
object in the Java programming language.
Time
ResultSet.
getTime
(int columnIndex,
Calendar
cal)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.sql.Time
object
 in the Java programming language.
Time
ResultSet.
getTime
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
java.sql.Time
object in the Java programming language.
Time
ResultSet.
getTime
(
String
columnLabel,
Calendar
cal)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.sql.Time
object
 in the Java programming language.
String
DatabaseMetaData.
getTimeDateFunctions
()
Retrieves a comma-separated list of the time and date functions available
 with this database.
Timestamp
CallableStatement.
getTimestamp
(int parameterIndex)
Retrieves the value of the designated JDBC
TIMESTAMP
parameter as a
java.sql.Timestamp
object.
Timestamp
CallableStatement.
getTimestamp
(int parameterIndex,
Calendar
cal)
Retrieves the value of the designated JDBC
TIMESTAMP
parameter as a
java.sql.Timestamp
object, using
 the given
Calendar
object to construct
 the
Timestamp
object.
Timestamp
CallableStatement.
getTimestamp
(
String
parameterName)
Retrieves the value of a JDBC
TIMESTAMP
parameter as a
java.sql.Timestamp
object.
Timestamp
CallableStatement.
getTimestamp
(
String
parameterName,
Calendar
cal)
Retrieves the value of a JDBC
TIMESTAMP
parameter as a
java.sql.Timestamp
object, using
 the given
Calendar
object to construct
 the
Timestamp
object.
Timestamp
ResultSet.
getTimestamp
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
java.sql.Timestamp
object in the Java programming language.
Timestamp
ResultSet.
getTimestamp
(int columnIndex,
Calendar
cal)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.sql.Timestamp
object
 in the Java programming language.
Timestamp
ResultSet.
getTimestamp
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
java.sql.Timestamp
object in the Java programming language.
Timestamp
ResultSet.
getTimestamp
(
String
columnLabel,
Calendar
cal)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.sql.Timestamp
object
 in the Java programming language.
int
Connection.
getTransactionIsolation
()
Retrieves this
Connection
object's current
 transaction isolation level.
int
ResultSet.
getType
()
Retrieves the type of this
ResultSet
object.
ResultSet
DatabaseMetaData.
getTypeInfo
()
Retrieves a description of all the data types supported by
 this database.
Map
<
String
,
Class
<?>>
Connection.
getTypeMap
()
Retrieves the
Map
object associated with this
Connection
object.
ResultSet
DatabaseMetaData.
getUDTs
(
String
catalog,
String
schemaPattern,
String
typeNamePattern,
 int[] types)
Retrieves a description of the user-defined types (UDTs) defined
 in a particular schema.
InputStream
ResultSet.
getUnicodeStream
(int columnIndex)
Deprecated.
use
getCharacterStream
in place of
getUnicodeStream
InputStream
ResultSet.
getUnicodeStream
(
String
columnLabel)
Deprecated.
use
getCharacterStream
instead
int
Statement.
getUpdateCount
()
Retrieves the current result as an update count;
  if the result is a
ResultSet
object or there are no more results, -1
  is returned.
URL
CallableStatement.
getURL
(int parameterIndex)
Retrieves the value of the designated JDBC
DATALINK
parameter as a
java.net.URL
object.
URL
CallableStatement.
getURL
(
String
parameterName)
Retrieves the value of a JDBC
DATALINK
parameter as a
java.net.URL
object.
String
DatabaseMetaData.
getURL
()
Retrieves the URL for this DBMS.
URL
ResultSet.
getURL
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.net.URL
object in the Java programming language.
URL
ResultSet.
getURL
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.net.URL
object in the Java programming language.
String
DatabaseMetaData.
getUserName
()
Retrieves the user name as known to this database.
ResultSet
DatabaseMetaData.
getVersionColumns
(
String
catalog,
String
schema,
String
table)
Retrieves a description of a table's columns that are automatically
 updated when any value in a row is updated.
SQLWarning
Connection.
getWarnings
()
Retrieves the first warning reported by calls on this
Connection
object.
SQLWarning
ResultSet.
getWarnings
()
Retrieves the first warning reported by calls on this
ResultSet
object.
SQLWarning
Statement.
getWarnings
()
Retrieves the first warning reported by calls on this
Statement
object.
void
ResultSet.
insertRow
()
Inserts the contents of the insert row into this
ResultSet
object and into the database.
boolean
DatabaseMetaData.
insertsAreDetected
(int type)
Retrieves whether or not a visible row insert can be detected
 by calling the method
ResultSet.rowInserted
.
boolean
ResultSet.
isAfterLast
()
Retrieves whether the cursor is after the last row in
 this
ResultSet
object.
boolean
ResultSetMetaData.
isAutoIncrement
(int column)
Indicates whether the designated column is automatically numbered.
boolean
ResultSet.
isBeforeFirst
()
Retrieves whether the cursor is before the first row in
 this
ResultSet
object.
boolean
ResultSetMetaData.
isCaseSensitive
(int column)
Indicates whether a column's case matters.
boolean
DatabaseMetaData.
isCatalogAtStart
()
Retrieves whether a catalog appears at the start of a fully qualified
 table name.
boolean
Connection.
isClosed
()
Retrieves whether this
Connection
object has been
 closed.
boolean
ResultSet.
isClosed
()
Retrieves whether this
ResultSet
object has been closed.
boolean
Statement.
isClosed
()
Retrieves whether this
Statement
object has been closed.
boolean
Statement.
isCloseOnCompletion
()
Returns a value indicating whether this
Statement
will be
 closed when all its dependent result sets are closed.
boolean
ResultSetMetaData.
isCurrency
(int column)
Indicates whether the designated column is a cash value.
boolean
ResultSetMetaData.
isDefinitelyWritable
(int column)
Indicates whether a write on the designated column will definitely succeed.
boolean
ResultSet.
isFirst
()
Retrieves whether the cursor is on the first row of
 this
ResultSet
object.
boolean
ResultSet.
isLast
()
Retrieves whether the cursor is on the last row of
 this
ResultSet
object.
int
ParameterMetaData.
isNullable
(int param)
Retrieves whether null values are allowed in the designated parameter.
int
ResultSetMetaData.
isNullable
(int column)
Indicates the nullability of values in the designated column.
boolean
Statement.
isPoolable
()
Returns a  value indicating whether the
Statement
is poolable or not.
boolean
Connection.
isReadOnly
()
Retrieves whether this
Connection
object is in read-only mode.
boolean
DatabaseMetaData.
isReadOnly
()
Retrieves whether this database is in read-only mode.
boolean
ResultSetMetaData.
isReadOnly
(int column)
Indicates whether the designated column is definitely not writable.
boolean
ResultSetMetaData.
isSearchable
(int column)
Indicates whether the designated column can be used in a where clause.
boolean
ParameterMetaData.
isSigned
(int param)
Retrieves whether values for the designated parameter can be signed numbers.
boolean
ResultSetMetaData.
isSigned
(int column)
Indicates whether values in the designated column are signed numbers.
default boolean
Statement.
isSimpleIdentifier
(
String
identifier)
Retrieves whether
identifier
is a simple SQL identifier.
boolean
Connection.
isValid
(int timeout)
Returns true if the connection has not been closed and is still valid.
boolean
Wrapper.
isWrapperFor
(
Class
<?> iface)
Returns true if this either implements the interface argument or is directly or indirectly a wrapper
 for an object that does.
boolean
ResultSetMetaData.
isWritable
(int column)
Indicates whether it is possible for a write on the designated column to succeed.
boolean
ResultSet.
last
()
Moves the cursor to the last row in
 this
ResultSet
object.
long
Blob.
length
()
Returns the number of bytes in the
BLOB
value
 designated by this
Blob
object.
long
Clob.
length
()
Retrieves the number of characters
 in the
CLOB
value
 designated by this
Clob
object.
boolean
DatabaseMetaData.
locatorsUpdateCopy
()
Indicates whether updates made to a LOB are made on a copy or directly
 to the LOB.
void
ResultSet.
moveToCurrentRow
()
Moves the cursor to the remembered cursor position, usually the
 current row.
void
ResultSet.
moveToInsertRow
()
Moves the cursor to the insert row.
String
Connection.
nativeSQL
(
String
sql)
Converts the given SQL statement into the system's native SQL grammar.
boolean
ResultSet.
next
()
Moves the cursor forward one row from its current position.
boolean
DatabaseMetaData.
nullPlusNonNullIsNull
()
Retrieves whether this database supports concatenations between
NULL
and non-
NULL
values being
NULL
.
boolean
DatabaseMetaData.
nullsAreSortedAtEnd
()
Retrieves whether
NULL
values are sorted at the end regardless of
 sort order.
boolean
DatabaseMetaData.
nullsAreSortedAtStart
()
Retrieves whether
NULL
values are sorted at the start regardless
 of sort order.
boolean
DatabaseMetaData.
nullsAreSortedHigh
()
Retrieves whether
NULL
values are sorted high.
boolean
DatabaseMetaData.
nullsAreSortedLow
()
Retrieves whether
NULL
values are sorted low.
boolean
DatabaseMetaData.
othersDeletesAreVisible
(int type)
Retrieves whether deletes made by others are visible.
boolean
DatabaseMetaData.
othersInsertsAreVisible
(int type)
Retrieves whether inserts made by others are visible.
boolean
DatabaseMetaData.
othersUpdatesAreVisible
(int type)
Retrieves whether updates made by others are visible.
boolean
DatabaseMetaData.
ownDeletesAreVisible
(int type)
Retrieves whether a result set's own deletes are visible.
boolean
DatabaseMetaData.
ownInsertsAreVisible
(int type)
Retrieves whether a result set's own inserts are visible.
boolean
DatabaseMetaData.
ownUpdatesAreVisible
(int type)
Retrieves whether for the given type of
ResultSet
object,
 the result set's own updates are visible.
long
Blob.
position
(byte[] pattern,
 long start)
Retrieves the byte position at which the specified byte array
pattern
begins within the
BLOB
value that this
Blob
object represents.
long
Blob.
position
(
Blob
pattern,
 long start)
Retrieves the byte position in the
BLOB
value
 designated by this
Blob
object at which
pattern
begins.
long
Clob.
position
(
String
searchstr,
 long start)
Retrieves the character position at which the specified substring
searchstr
appears in the SQL
CLOB
value
 represented by this
Clob
object.
long
Clob.
position
(
Clob
searchstr,
 long start)
Retrieves the character position at which the specified
Clob
object
searchstr
appears in this
Clob
object.
CallableStatement
Connection.
prepareCall
(
String
sql)
Creates a
CallableStatement
object for calling
 database stored procedures.
CallableStatement
Connection.
prepareCall
(
String
sql,
 int resultSetType,
 int resultSetConcurrency)
Creates a
CallableStatement
object that will generate
ResultSet
objects with the given type and concurrency.
CallableStatement
Connection.
prepareCall
(
String
sql,
 int resultSetType,
 int resultSetConcurrency,
 int resultSetHoldability)
Creates a
CallableStatement
object that will generate
ResultSet
objects with the given type and concurrency.
PreparedStatement
Connection.
prepareStatement
(
String
sql)
Creates a
PreparedStatement
object for sending
 parameterized SQL statements to the database.
PreparedStatement
Connection.
prepareStatement
(
String
sql,
 int autoGeneratedKeys)
Creates a default
PreparedStatement
object that has
 the capability to retrieve auto-generated keys.
PreparedStatement
Connection.
prepareStatement
(
String
sql,
 int[] columnIndexes)
Creates a default
PreparedStatement
object capable
 of returning the auto-generated keys designated by the given array.
PreparedStatement
Connection.
prepareStatement
(
String
sql,
 int resultSetType,
 int resultSetConcurrency)
Creates a
PreparedStatement
object that will generate
ResultSet
objects with the given type and concurrency.
PreparedStatement
Connection.
prepareStatement
(
String
sql,
 int resultSetType,
 int resultSetConcurrency,
 int resultSetHoldability)
Creates a
PreparedStatement
object that will generate
ResultSet
objects with the given type, concurrency,
 and holdability.
PreparedStatement
Connection.
prepareStatement
(
String
sql,
String
[] columnNames)
Creates a default
PreparedStatement
object capable
 of returning the auto-generated keys designated by the given array.
boolean
ResultSet.
previous
()
Moves the cursor to the previous row in this
ResultSet
object.
Array
SQLInput.
readArray
()
Reads an SQL
ARRAY
value from the stream and returns it as an
Array
object in the Java programming language.
InputStream
SQLInput.
readAsciiStream
()
Reads the next attribute in the stream and returns it as a stream of ASCII characters.
BigDecimal
SQLInput.
readBigDecimal
()
Reads the next attribute in the stream and returns it as a
java.math.BigDecimal
object in the Java programming language.
InputStream
SQLInput.
readBinaryStream
()
Reads the next attribute in the stream and returns it as a stream of uninterpreted
 bytes.
Blob
SQLInput.
readBlob
()
Reads an SQL
BLOB
value from the stream and returns it as a
Blob
object in the Java programming language.
boolean
SQLInput.
readBoolean
()
Reads the next attribute in the stream and returns it as a
boolean
in the Java programming language.
byte
SQLInput.
readByte
()
Reads the next attribute in the stream and returns it as a
byte
in the Java programming language.
byte[]
SQLInput.
readBytes
()
Reads the next attribute in the stream and returns it as an array of bytes
 in the Java programming language.
Reader
SQLInput.
readCharacterStream
()
Reads the next attribute in the stream and returns it as a stream of Unicode characters.
Clob
SQLInput.
readClob
()
Reads an SQL
CLOB
value from the stream and returns it as a
Clob
object in the Java programming language.
Date
SQLInput.
readDate
()
Reads the next attribute in the stream and returns it as a
java.sql.Date
object.
double
SQLInput.
readDouble
()
Reads the next attribute in the stream and returns it as a
double
in the Java programming language.
float
SQLInput.
readFloat
()
Reads the next attribute in the stream and returns it as a
float
in the Java programming language.
int
SQLInput.
readInt
()
Reads the next attribute in the stream and returns it as an
int
in the Java programming language.
long
SQLInput.
readLong
()
Reads the next attribute in the stream and returns it as a
long
in the Java programming language.
NClob
SQLInput.
readNClob
()
Reads an SQL
NCLOB
value from the stream and returns it as a
NClob
object in the Java programming language.
String
SQLInput.
readNString
()
Reads the next attribute in the stream and returns it as a
String
in the Java programming language.
Object
SQLInput.
readObject
()
Reads the datum at the head of the stream and returns it as an
Object
in the Java programming language.
default <T> T
SQLInput.
readObject
(
Class
<T> type)
Reads the next attribute in the stream and returns it as an
Object
in the Java programming language.
Ref
SQLInput.
readRef
()
Reads an SQL
REF
value from the stream and returns it as a
Ref
object in the Java programming language.
RowId
SQLInput.
readRowId
()
Reads an SQL
ROWID
value from the stream and returns it as a
RowId
object in the Java programming language.
short
SQLInput.
readShort
()
Reads the next attribute in the stream and returns it as a
short
in the Java programming language.
void
SQLData.
readSQL
(
SQLInput
stream,
String
typeName)
Populates this object with data read from the database.
SQLXML
SQLInput.
readSQLXML
()
Reads an SQL
XML
value from the stream and returns it as a
SQLXML
object in the Java programming language.
String
SQLInput.
readString
()
Reads the next attribute in the stream and returns it as a
String
in the Java programming language.
Time
SQLInput.
readTime
()
Reads the next attribute in the stream and returns it as a
java.sql.Time
object.
Timestamp
SQLInput.
readTimestamp
()
Reads the next attribute in the stream and returns it as a
java.sql.Timestamp
object.
URL
SQLInput.
readURL
()
Reads an SQL
DATALINK
value from the stream and returns it as a
java.net.URL
object in the Java programming language.
void
ResultSet.
refreshRow
()
Refreshes the current row with its most recent value in
 the database.
static void
DriverManager.
registerDriver
(
Driver
driver)
Registers the given driver with the
DriverManager
.
static void
DriverManager.
registerDriver
(
Driver
driver,
DriverAction
da)
Registers the given driver with the
DriverManager
.
void
CallableStatement.
registerOutParameter
(int parameterIndex,
 int sqlType)
Registers the OUT parameter in ordinal position
parameterIndex
to the JDBC type
sqlType
.
void
CallableStatement.
registerOutParameter
(int parameterIndex,
 int sqlType,
 int scale)
Registers the parameter in ordinal position
parameterIndex
to be of JDBC type
sqlType
.
void
CallableStatement.
registerOutParameter
(int parameterIndex,
 int sqlType,
String
typeName)
Registers the designated output parameter.
default void
CallableStatement.
registerOutParameter
(int parameterIndex,
SQLType
sqlType)
Registers the OUT parameter in ordinal position
parameterIndex
to the JDBC type
sqlType
.
default void
CallableStatement.
registerOutParameter
(int parameterIndex,
SQLType
sqlType,
 int scale)
Registers the parameter in ordinal position
parameterIndex
to be of JDBC type
sqlType
.
default void
CallableStatement.
registerOutParameter
(int parameterIndex,
SQLType
sqlType,
String
typeName)
Registers the designated output parameter.
void
CallableStatement.
registerOutParameter
(
String
parameterName,
 int sqlType)
Registers the OUT parameter named
parameterName
to the JDBC type
sqlType
.
void
CallableStatement.
registerOutParameter
(
String
parameterName,
 int sqlType,
 int scale)
Registers the parameter named
parameterName
to be of JDBC type
sqlType
.
void
CallableStatement.
registerOutParameter
(
String
parameterName,
 int sqlType,
String
typeName)
Registers the designated output parameter.
default void
CallableStatement.
registerOutParameter
(
String
parameterName,
SQLType
sqlType)
Registers the OUT parameter named
parameterName
to the JDBC type
sqlType
.
default void
CallableStatement.
registerOutParameter
(
String
parameterName,
SQLType
sqlType,
 int scale)
Registers the parameter named
parameterName
to be of JDBC type
sqlType
.
default void
CallableStatement.
registerOutParameter
(
String
parameterName,
SQLType
sqlType,
String
typeName)
Registers the designated output parameter.
boolean
ResultSet.
relative
(int rows)
Moves the cursor a relative number of rows, either positive or negative.
void
Connection.
releaseSavepoint
(
Savepoint
savepoint)
Removes the specified
Savepoint
and subsequent
Savepoint
objects from the current
 transaction.
void
Connection.
rollback
()
Undoes all changes made in the current transaction
 and releases any database locks currently held
 by this
Connection
object.
void
Connection.
rollback
(
Savepoint
savepoint)
Undoes all changes made after the given
Savepoint
object
 was set.
boolean
ResultSet.
rowDeleted
()
Retrieves whether a row has been deleted.
boolean
ResultSet.
rowInserted
()
Retrieves whether the current row has had an insertion.
boolean
ResultSet.
rowUpdated
()
Retrieves whether the current row has been updated.
void
PreparedStatement.
setArray
(int parameterIndex,
Array
x)
Sets the designated parameter to the given
java.sql.Array
object.
void
CallableStatement.
setAsciiStream
(
String
parameterName,
InputStream
x)
Sets the designated parameter to the given input stream.
void
CallableStatement.
setAsciiStream
(
String
parameterName,
InputStream
x,
 int length)
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
void
CallableStatement.
setAsciiStream
(
String
parameterName,
InputStream
x,
 long length)
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
OutputStream
Clob.
setAsciiStream
(long pos)
Retrieves a stream to be used to write Ascii characters to the
CLOB
value that this
Clob
object represents,
 starting at position
pos
.
void
PreparedStatement.
setAsciiStream
(int parameterIndex,
InputStream
x)
Sets the designated parameter to the given input stream.
void
PreparedStatement.
setAsciiStream
(int parameterIndex,
InputStream
x,
 int length)
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
void
PreparedStatement.
setAsciiStream
(int parameterIndex,
InputStream
x,
 long length)
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
void
Connection.
setAutoCommit
(boolean autoCommit)
Sets this connection's auto-commit mode to the given state.
void
CallableStatement.
setBigDecimal
(
String
parameterName,
BigDecimal
x)
Sets the designated parameter to the given
java.math.BigDecimal
value.
void
PreparedStatement.
setBigDecimal
(int parameterIndex,
BigDecimal
x)
Sets the designated parameter to the given
java.math.BigDecimal
value.
OutputStream
Blob.
setBinaryStream
(long pos)
Retrieves a stream that can be used to write to the
BLOB
value that this
Blob
object represents.
void
CallableStatement.
setBinaryStream
(
String
parameterName,
InputStream
x)
Sets the designated parameter to the given input stream.
void
CallableStatement.
setBinaryStream
(
String
parameterName,
InputStream
x,
 int length)
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
void
CallableStatement.
setBinaryStream
(
String
parameterName,
InputStream
x,
 long length)
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
void
PreparedStatement.
setBinaryStream
(int parameterIndex,
InputStream
x)
Sets the designated parameter to the given input stream.
void
PreparedStatement.
setBinaryStream
(int parameterIndex,
InputStream
x,
 int length)
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
void
PreparedStatement.
setBinaryStream
(int parameterIndex,
InputStream
x,
 long length)
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
OutputStream
SQLXML.
setBinaryStream
()
Retrieves a stream that can be used to write the XML value that this SQLXML instance represents.
void
CallableStatement.
setBlob
(
String
parameterName,
InputStream
inputStream)
Sets the designated parameter to an
InputStream
object.
void
CallableStatement.
setBlob
(
String
parameterName,
InputStream
inputStream,
 long length)
Sets the designated parameter to an
InputStream
object.
void
CallableStatement.
setBlob
(
String
parameterName,
Blob
x)
Sets the designated parameter to the given
java.sql.Blob
object.
void
PreparedStatement.
setBlob
(int parameterIndex,
InputStream
inputStream)
Sets the designated parameter to a
InputStream
object.
void
PreparedStatement.
setBlob
(int parameterIndex,
InputStream
inputStream,
 long length)
Sets the designated parameter to a
InputStream
object.
void
PreparedStatement.
setBlob
(int parameterIndex,
Blob
x)
Sets the designated parameter to the given
java.sql.Blob
object.
void
CallableStatement.
setBoolean
(
String
parameterName,
 boolean x)
Sets the designated parameter to the given Java
boolean
value.
void
PreparedStatement.
setBoolean
(int parameterIndex,
 boolean x)
Sets the designated parameter to the given Java
boolean
value.
void
CallableStatement.
setByte
(
String
parameterName,
 byte x)
Sets the designated parameter to the given Java
byte
value.
void
PreparedStatement.
setByte
(int parameterIndex,
 byte x)
Sets the designated parameter to the given Java
byte
value.
int
Blob.
setBytes
(long pos,
 byte[] bytes)
Writes the given array of bytes to the
BLOB
value that
 this
Blob
object represents, starting at position
pos
, and returns the number of bytes written.
int
Blob.
setBytes
(long pos,
 byte[] bytes,
 int offset,
 int len)
Writes all or part of the given
byte
array to the
BLOB
value that this
Blob
object represents
 and returns the number of bytes written.
void
CallableStatement.
setBytes
(
String
parameterName,
 byte[] x)
Sets the designated parameter to the given Java array of bytes.
void
PreparedStatement.
setBytes
(int parameterIndex,
 byte[] x)
Sets the designated parameter to the given Java array of bytes.
void
Connection.
setCatalog
(
String
catalog)
Sets the given catalog name in order to select
 a subspace of this
Connection
object's database
 in which to work.
void
CallableStatement.
setCharacterStream
(
String
parameterName,
Reader
reader)
Sets the designated parameter to the given
Reader
object.
void
CallableStatement.
setCharacterStream
(
String
parameterName,
Reader
reader,
 int length)
Sets the designated parameter to the given
Reader
object, which is the given number of characters long.
void
CallableStatement.
setCharacterStream
(
String
parameterName,
Reader
reader,
 long length)
Sets the designated parameter to the given
Reader
object, which is the given number of characters long.
Writer
Clob.
setCharacterStream
(long pos)
Retrieves a stream to be used to write a stream of Unicode characters
 to the
CLOB
value that this
Clob
object
 represents, at position
pos
.
void
PreparedStatement.
setCharacterStream
(int parameterIndex,
Reader
reader)
Sets the designated parameter to the given
Reader
object.
void
PreparedStatement.
setCharacterStream
(int parameterIndex,
Reader
reader,
 int length)
Sets the designated parameter to the given
Reader
object, which is the given number of characters long.
void
PreparedStatement.
setCharacterStream
(int parameterIndex,
Reader
reader,
 long length)
Sets the designated parameter to the given
Reader
object, which is the given number of characters long.
Writer
SQLXML.
setCharacterStream
()
Retrieves a stream to be used to write the XML value that this SQLXML instance represents.
void
CallableStatement.
setClob
(
String
parameterName,
Reader
reader)
Sets the designated parameter to a
Reader
object.
void
CallableStatement.
setClob
(
String
parameterName,
Reader
reader,
 long length)
Sets the designated parameter to a
Reader
object.
void
CallableStatement.
setClob
(
String
parameterName,
Clob
x)
Sets the designated parameter to the given
java.sql.Clob
object.
void
PreparedStatement.
setClob
(int parameterIndex,
Reader
reader)
Sets the designated parameter to a
Reader
object.
void
PreparedStatement.
setClob
(int parameterIndex,
Reader
reader,
 long length)
Sets the designated parameter to a
Reader
object.
void
PreparedStatement.
setClob
(int parameterIndex,
Clob
x)
Sets the designated parameter to the given
java.sql.Clob
object.
void
Statement.
setCursorName
(
String
name)
Sets the SQL cursor name to the given
String
, which
 will be used by subsequent
Statement
object
execute
methods.
void
CallableStatement.
setDate
(
String
parameterName,
Date
x)
Sets the designated parameter to the given
java.sql.Date
value
 using the default time zone of the virtual machine that is running
 the application.
void
CallableStatement.
setDate
(
String
parameterName,
Date
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Date
value,
 using the given
Calendar
object.
void
PreparedStatement.
setDate
(int parameterIndex,
Date
x)
Sets the designated parameter to the given
java.sql.Date
value
 using the default time zone of the virtual machine that is running
 the application.
void
PreparedStatement.
setDate
(int parameterIndex,
Date
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Date
value,
 using the given
Calendar
object.
void
CallableStatement.
setDouble
(
String
parameterName,
 double x)
Sets the designated parameter to the given Java
double
value.
void
PreparedStatement.
setDouble
(int parameterIndex,
 double x)
Sets the designated parameter to the given Java
double
value.
void
Statement.
setEscapeProcessing
(boolean enable)
Sets escape processing on or off.
void
ResultSet.
setFetchDirection
(int direction)
Gives a hint as to the direction in which the rows in this
ResultSet
object will be processed.
void
Statement.
setFetchDirection
(int direction)
Gives the driver a hint as to the direction in which
 rows will be processed in
ResultSet
objects created using this
Statement
object.
void
ResultSet.
setFetchSize
(int rows)
Gives the JDBC driver a hint as to the number of rows that should
 be fetched from the database when more rows are needed for this
ResultSet
object.
void
Statement.
setFetchSize
(int rows)
Gives the JDBC driver a hint as to the number of rows that should
 be fetched from the database when more rows are needed for
ResultSet
objects generated by this
Statement
.
void
CallableStatement.
setFloat
(
String
parameterName,
 float x)
Sets the designated parameter to the given Java
float
value.
void
PreparedStatement.
setFloat
(int parameterIndex,
 float x)
Sets the designated parameter to the given Java
float
value.
void
Connection.
setHoldability
(int holdability)
Changes the default holdability of
ResultSet
objects
 created using this
Connection
object to the given
 holdability.
void
CallableStatement.
setInt
(
String
parameterName,
 int x)
Sets the designated parameter to the given Java
int
value.
void
PreparedStatement.
setInt
(int parameterIndex,
 int x)
Sets the designated parameter to the given Java
int
value.
default void
Statement.
setLargeMaxRows
(long max)
Sets the limit for the maximum number of rows that any
ResultSet
object  generated by this
Statement
object can contain to the given number.
void
CallableStatement.
setLong
(
String
parameterName,
 long x)
Sets the designated parameter to the given Java
long
value.
void
PreparedStatement.
setLong
(int parameterIndex,
 long x)
Sets the designated parameter to the given Java
long
value.
void
Statement.
setMaxFieldSize
(int max)
Sets the limit for the maximum number of bytes that can be returned for
 character and binary column values in a
ResultSet
object produced by this
Statement
object.
void
Statement.
setMaxRows
(int max)
Sets the limit for the maximum number of rows that any
ResultSet
object  generated by this
Statement
object can contain to the given number.
void
CallableStatement.
setNCharacterStream
(
String
parameterName,
Reader
value)
Sets the designated parameter to a
Reader
object.
void
CallableStatement.
setNCharacterStream
(
String
parameterName,
Reader
value,
 long length)
Sets the designated parameter to a
Reader
object.
void
PreparedStatement.
setNCharacterStream
(int parameterIndex,
Reader
value)
Sets the designated parameter to a
Reader
object.
void
PreparedStatement.
setNCharacterStream
(int parameterIndex,
Reader
value,
 long length)
Sets the designated parameter to a
Reader
object.
void
CallableStatement.
setNClob
(
String
parameterName,
Reader
reader)
Sets the designated parameter to a
Reader
object.
void
CallableStatement.
setNClob
(
String
parameterName,
Reader
reader,
 long length)
Sets the designated parameter to a
Reader
object.
void
CallableStatement.
setNClob
(
String
parameterName,
NClob
value)
Sets the designated parameter to a
java.sql.NClob
object.
void
PreparedStatement.
setNClob
(int parameterIndex,
Reader
reader)
Sets the designated parameter to a
Reader
object.
void
PreparedStatement.
setNClob
(int parameterIndex,
Reader
reader,
 long length)
Sets the designated parameter to a
Reader
object.
void
PreparedStatement.
setNClob
(int parameterIndex,
NClob
value)
Sets the designated parameter to a
java.sql.NClob
object.
void
Connection.
setNetworkTimeout
(
Executor
executor,
 int milliseconds)
Sets the maximum period a
Connection
or
 objects created from the
Connection
will wait for the database to reply to any one request.
void
CallableStatement.
setNString
(
String
parameterName,
String
value)
Sets the designated parameter to the given
String
object.
void
PreparedStatement.
setNString
(int parameterIndex,
String
value)
Sets the designated parameter to the given
String
object.
void
CallableStatement.
setNull
(
String
parameterName,
 int sqlType)
Sets the designated parameter to SQL
NULL
.
void
CallableStatement.
setNull
(
String
parameterName,
 int sqlType,
String
typeName)
Sets the designated parameter to SQL
NULL
.
void
PreparedStatement.
setNull
(int parameterIndex,
 int sqlType)
Sets the designated parameter to SQL
NULL
.
void
PreparedStatement.
setNull
(int parameterIndex,
 int sqlType,
String
typeName)
Sets the designated parameter to SQL
NULL
.
void
CallableStatement.
setObject
(
String
parameterName,
Object
x)
Sets the value of the designated parameter with the given object.
void
CallableStatement.
setObject
(
String
parameterName,
Object
x,
 int targetSqlType)
Sets the value of the designated parameter with the given object.
void
CallableStatement.
setObject
(
String
parameterName,
Object
x,
 int targetSqlType,
 int scale)
Sets the value of the designated parameter with the given object.
default void
CallableStatement.
setObject
(
String
parameterName,
Object
x,
SQLType
targetSqlType)
Sets the value of the designated parameter with the given object.
default void
CallableStatement.
setObject
(
String
parameterName,
Object
x,
SQLType
targetSqlType,
 int scaleOrLength)
Sets the value of the designated parameter with the given object.
void
PreparedStatement.
setObject
(int parameterIndex,
Object
x)
Sets the value of the designated parameter using the given object.
void
PreparedStatement.
setObject
(int parameterIndex,
Object
x,
 int targetSqlType)
Sets the value of the designated parameter with the given object.
void
PreparedStatement.
setObject
(int parameterIndex,
Object
x,
 int targetSqlType,
 int scaleOrLength)
Sets the value of the designated parameter with the given object.
default void
PreparedStatement.
setObject
(int parameterIndex,
Object
x,
SQLType
targetSqlType)
Sets the value of the designated parameter with the given object.
default void
PreparedStatement.
setObject
(int parameterIndex,
Object
x,
SQLType
targetSqlType,
 int scaleOrLength)
Sets the value of the designated parameter with the given object.
void
Ref.
setObject
(
Object
value)
Sets the structured type value that this
Ref
object references to the given instance of
Object
.
void
Statement.
setPoolable
(boolean poolable)
Requests that a
Statement
be pooled or not pooled.
void
Statement.
setQueryTimeout
(int seconds)
Sets the number of seconds the driver will wait for a
Statement
object to execute to the given number of seconds.
void
Connection.
setReadOnly
(boolean readOnly)
Puts this connection in read-only mode as a hint to the driver to enable
 database optimizations.
void
PreparedStatement.
setRef
(int parameterIndex,
Ref
x)
Sets the designated parameter to the given
REF(<structured-type>)
value.
<T extends
Result
>
T
SQLXML.
setResult
(
Class
<T> resultClass)
Returns a Result for setting the XML value designated by this SQLXML instance.
void
CallableStatement.
setRowId
(
String
parameterName,
RowId
x)
Sets the designated parameter to the given
java.sql.RowId
object.
void
PreparedStatement.
setRowId
(int parameterIndex,
RowId
x)
Sets the designated parameter to the given
java.sql.RowId
object.
Savepoint
Connection.
setSavepoint
()
Creates an unnamed savepoint in the current transaction and
 returns the new
Savepoint
object that represents it.
Savepoint
Connection.
setSavepoint
(
String
name)
Creates a savepoint with the given name in the current transaction
 and returns the new
Savepoint
object that represents it.
void
Connection.
setSchema
(
String
schema)
Sets the given schema name to access.
default void
Connection.
setShardingKey
(
ShardingKey
shardingKey)
Specifies a shardingKey to use with this Connection
default void
Connection.
setShardingKey
(
ShardingKey
shardingKey,
ShardingKey
superShardingKey)
Specifies a shardingKey and superShardingKey to use with this Connection
default boolean
Connection.
setShardingKeyIfValid
(
ShardingKey
shardingKey,
 int timeout)
Sets and validates the sharding key for this connection.
default boolean
Connection.
setShardingKeyIfValid
(
ShardingKey
shardingKey,
ShardingKey
superShardingKey,
 int timeout)
Sets and validates the sharding keys for this connection.
void
CallableStatement.
setShort
(
String
parameterName,
 short x)
Sets the designated parameter to the given Java
short
value.
void
PreparedStatement.
setShort
(int parameterIndex,
 short x)
Sets the designated parameter to the given Java
short
value.
void
CallableStatement.
setSQLXML
(
String
parameterName,
SQLXML
xmlObject)
Sets the designated parameter to the given
java.sql.SQLXML
object.
void
PreparedStatement.
setSQLXML
(int parameterIndex,
SQLXML
xmlObject)
Sets the designated parameter to the given
java.sql.SQLXML
object.
void
CallableStatement.
setString
(
String
parameterName,
String
x)
Sets the designated parameter to the given Java
String
value.
int
Clob.
setString
(long pos,
String
str)
Writes the given Java
String
to the
CLOB
value that this
Clob
object designates at the position
pos
.
int
Clob.
setString
(long pos,
String
str,
 int offset,
 int len)
Writes
len
characters of
str
, starting
 at character
offset
, to the
CLOB
value
 that this
Clob
represents.
void
PreparedStatement.
setString
(int parameterIndex,
String
x)
Sets the designated parameter to the given Java
String
value.
void
SQLXML.
setString
(
String
value)
Sets the XML value designated by this SQLXML instance to the given String representation.
void
CallableStatement.
setTime
(
String
parameterName,
Time
x)
Sets the designated parameter to the given
java.sql.Time
value.
void
CallableStatement.
setTime
(
String
parameterName,
Time
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Time
value,
 using the given
Calendar
object.
void
PreparedStatement.
setTime
(int parameterIndex,
Time
x)
Sets the designated parameter to the given
java.sql.Time
value.
void
PreparedStatement.
setTime
(int parameterIndex,
Time
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Time
value,
 using the given
Calendar
object.
void
CallableStatement.
setTimestamp
(
String
parameterName,
Timestamp
x)
Sets the designated parameter to the given
java.sql.Timestamp
value.
void
CallableStatement.
setTimestamp
(
String
parameterName,
Timestamp
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Timestamp
value,
 using the given
Calendar
object.
void
PreparedStatement.
setTimestamp
(int parameterIndex,
Timestamp
x)
Sets the designated parameter to the given
java.sql.Timestamp
value.
void
PreparedStatement.
setTimestamp
(int parameterIndex,
Timestamp
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Timestamp
value,
 using the given
Calendar
object.
void
Connection.
setTransactionIsolation
(int level)
Attempts to change the transaction isolation level for this
Connection
object to the one given.
void
Connection.
setTypeMap
(
Map
<
String
,
Class
<?>> map)
Installs the given
TypeMap
object as the type map for
 this
Connection
object.
void
PreparedStatement.
setUnicodeStream
(int parameterIndex,
InputStream
x,
 int length)
Deprecated.
Use
setCharacterStream
void
CallableStatement.
setURL
(
String
parameterName,
URL
val)
Sets the designated parameter to the given
java.net.URL
object.
void
PreparedStatement.
setURL
(int parameterIndex,
URL
x)
Sets the designated parameter to the given
java.net.URL
value.
boolean
DatabaseMetaData.
storesLowerCaseIdentifiers
()
Retrieves whether this database treats mixed case unquoted SQL identifiers as
 case insensitive and stores them in lower case.
boolean
DatabaseMetaData.
storesLowerCaseQuotedIdentifiers
()
Retrieves whether this database treats mixed case quoted SQL identifiers as
 case insensitive and stores them in lower case.
boolean
DatabaseMetaData.
storesMixedCaseIdentifiers
()
Retrieves whether this database treats mixed case unquoted SQL identifiers as
 case insensitive and stores them in mixed case.
boolean
DatabaseMetaData.
storesMixedCaseQuotedIdentifiers
()
Retrieves whether this database treats mixed case quoted SQL identifiers as
 case insensitive and stores them in mixed case.
boolean
DatabaseMetaData.
storesUpperCaseIdentifiers
()
Retrieves whether this database treats mixed case unquoted SQL identifiers as
 case insensitive and stores them in upper case.
boolean
DatabaseMetaData.
storesUpperCaseQuotedIdentifiers
()
Retrieves whether this database treats mixed case quoted SQL identifiers as
 case insensitive and stores them in upper case.
boolean
DatabaseMetaData.
supportsAlterTableWithAddColumn
()
Retrieves whether this database supports
ALTER TABLE
with add column.
boolean
DatabaseMetaData.
supportsAlterTableWithDropColumn
()
Retrieves whether this database supports
ALTER TABLE
with drop column.
boolean
DatabaseMetaData.
supportsANSI92EntryLevelSQL
()
Retrieves whether this database supports the ANSI92 entry level SQL
 grammar.
boolean
DatabaseMetaData.
supportsANSI92FullSQL
()
Retrieves whether this database supports the ANSI92 full SQL grammar supported.
boolean
DatabaseMetaData.
supportsANSI92IntermediateSQL
()
Retrieves whether this database supports the ANSI92 intermediate SQL grammar supported.
boolean
DatabaseMetaData.
supportsBatchUpdates
()
Retrieves whether this database supports batch updates.
boolean
DatabaseMetaData.
supportsCatalogsInDataManipulation
()
Retrieves whether a catalog name can be used in a data manipulation statement.
boolean
DatabaseMetaData.
supportsCatalogsInIndexDefinitions
()
Retrieves whether a catalog name can be used in an index definition statement.
boolean
DatabaseMetaData.
supportsCatalogsInPrivilegeDefinitions
()
Retrieves whether a catalog name can be used in a privilege definition statement.
boolean
DatabaseMetaData.
supportsCatalogsInProcedureCalls
()
Retrieves whether a catalog name can be used in a procedure call statement.
boolean
DatabaseMetaData.
supportsCatalogsInTableDefinitions
()
Retrieves whether a catalog name can be used in a table definition statement.
boolean
DatabaseMetaData.
supportsColumnAliasing
()
Retrieves whether this database supports column aliasing.
boolean
DatabaseMetaData.
supportsConvert
()
Retrieves whether this database supports the JDBC scalar function
CONVERT
for the conversion of one JDBC type to another.
boolean
DatabaseMetaData.
supportsConvert
(int fromType,
 int toType)
Retrieves whether this database supports the JDBC scalar function
CONVERT
for conversions between the JDBC types
fromType
and
toType
.
boolean
DatabaseMetaData.
supportsCoreSQLGrammar
()
Retrieves whether this database supports the ODBC Core SQL grammar.
boolean
DatabaseMetaData.
supportsCorrelatedSubqueries
()
Retrieves whether this database supports correlated subqueries.
boolean
DatabaseMetaData.
supportsDataDefinitionAndDataManipulationTransactions
()
Retrieves whether this database supports both data definition and
 data manipulation statements within a transaction.
boolean
DatabaseMetaData.
supportsDataManipulationTransactionsOnly
()
Retrieves whether this database supports only data manipulation
 statements within a transaction.
boolean
DatabaseMetaData.
supportsDifferentTableCorrelationNames
()
Retrieves whether, when table correlation names are supported, they
 are restricted to being different from the names of the tables.
boolean
DatabaseMetaData.
supportsExpressionsInOrderBy
()
Retrieves whether this database supports expressions in
ORDER BY
lists.
boolean
DatabaseMetaData.
supportsExtendedSQLGrammar
()
Retrieves whether this database supports the ODBC Extended SQL grammar.
boolean
DatabaseMetaData.
supportsFullOuterJoins
()
Retrieves whether this database supports full nested outer joins.
boolean
DatabaseMetaData.
supportsGetGeneratedKeys
()
Retrieves whether auto-generated keys can be retrieved after
 a statement has been executed
boolean
DatabaseMetaData.
supportsGroupBy
()
Retrieves whether this database supports some form of
GROUP BY
clause.
boolean
DatabaseMetaData.
supportsGroupByBeyondSelect
()
Retrieves whether this database supports using columns not included in
 the
SELECT
statement in a
GROUP BY
clause
 provided that all of the columns in the
SELECT
statement
 are included in the
GROUP BY
clause.
boolean
DatabaseMetaData.
supportsGroupByUnrelated
()
Retrieves whether this database supports using a column that is
 not in the
SELECT
statement in a
GROUP BY
clause.
boolean
DatabaseMetaData.
supportsIntegrityEnhancementFacility
()
Retrieves whether this database supports the SQL Integrity
 Enhancement Facility.
boolean
DatabaseMetaData.
supportsLikeEscapeClause
()
Retrieves whether this database supports specifying a
LIKE
escape clause.
boolean
DatabaseMetaData.
supportsLimitedOuterJoins
()
Retrieves whether this database provides limited support for outer
 joins.
boolean
DatabaseMetaData.
supportsMinimumSQLGrammar
()
Retrieves whether this database supports the ODBC Minimum SQL grammar.
boolean
DatabaseMetaData.
supportsMixedCaseIdentifiers
()
Retrieves whether this database treats mixed case unquoted SQL identifiers as
 case sensitive and as a result stores them in mixed case.
boolean
DatabaseMetaData.
supportsMixedCaseQuotedIdentifiers
()
Retrieves whether this database treats mixed case quoted SQL identifiers as
 case sensitive and as a result stores them in mixed case.
boolean
DatabaseMetaData.
supportsMultipleOpenResults
()
Retrieves whether it is possible to have multiple
ResultSet
objects
 returned from a
CallableStatement
object
 simultaneously.
boolean
DatabaseMetaData.
supportsMultipleResultSets
()
Retrieves whether this database supports getting multiple
ResultSet
objects from a single call to the
 method
execute
.
boolean
DatabaseMetaData.
supportsMultipleTransactions
()
Retrieves whether this database allows having multiple
 transactions open at once (on different connections).
boolean
DatabaseMetaData.
supportsNamedParameters
()
Retrieves whether this database supports named parameters to callable
 statements.
boolean
DatabaseMetaData.
supportsNonNullableColumns
()
Retrieves whether columns in this database may be defined as non-nullable.
boolean
DatabaseMetaData.
supportsOpenCursorsAcrossCommit
()
Retrieves whether this database supports keeping cursors open
 across commits.
boolean
DatabaseMetaData.
supportsOpenCursorsAcrossRollback
()
Retrieves whether this database supports keeping cursors open
 across rollbacks.
boolean
DatabaseMetaData.
supportsOpenStatementsAcrossCommit
()
Retrieves whether this database supports keeping statements open
 across commits.
boolean
DatabaseMetaData.
supportsOpenStatementsAcrossRollback
()
Retrieves whether this database supports keeping statements open
 across rollbacks.
boolean
DatabaseMetaData.
supportsOrderByUnrelated
()
Retrieves whether this database supports using a column that is
 not in the
SELECT
statement in an
ORDER BY
clause.
boolean
DatabaseMetaData.
supportsOuterJoins
()
Retrieves whether this database supports some form of outer join.
boolean
DatabaseMetaData.
supportsPositionedDelete
()
Retrieves whether this database supports positioned
DELETE
statements.
boolean
DatabaseMetaData.
supportsPositionedUpdate
()
Retrieves whether this database supports positioned
UPDATE
statements.
default boolean
DatabaseMetaData.
supportsRefCursors
()
Retrieves whether this database supports REF CURSOR.
boolean
DatabaseMetaData.
supportsResultSetConcurrency
(int type,
 int concurrency)
Retrieves whether this database supports the given concurrency type
 in combination with the given result set type.
boolean
DatabaseMetaData.
supportsResultSetHoldability
(int holdability)
Retrieves whether this database supports the given result set holdability.
boolean
DatabaseMetaData.
supportsResultSetType
(int type)
Retrieves whether this database supports the given result set type.
boolean
DatabaseMetaData.
supportsSavepoints
()
Retrieves whether this database supports savepoints.
boolean
DatabaseMetaData.
supportsSchemasInDataManipulation
()
Retrieves whether a schema name can be used in a data manipulation statement.
boolean
DatabaseMetaData.
supportsSchemasInIndexDefinitions
()
Retrieves whether a schema name can be used in an index definition statement.
boolean
DatabaseMetaData.
supportsSchemasInPrivilegeDefinitions
()
Retrieves whether a schema name can be used in a privilege definition statement.
boolean
DatabaseMetaData.
supportsSchemasInProcedureCalls
()
Retrieves whether a schema name can be used in a procedure call statement.
boolean
DatabaseMetaData.
supportsSchemasInTableDefinitions
()
Retrieves whether a schema name can be used in a table definition statement.
boolean
DatabaseMetaData.
supportsSelectForUpdate
()
Retrieves whether this database supports
SELECT FOR UPDATE
statements.
default boolean
DatabaseMetaData.
supportsSharding
()
Retrieves whether this database supports sharding.
boolean
DatabaseMetaData.
supportsStatementPooling
()
Retrieves whether this database supports statement pooling.
boolean
DatabaseMetaData.
supportsStoredFunctionsUsingCallSyntax
()
Retrieves whether this database supports invoking user-defined or vendor functions
 using the stored procedure escape syntax.
boolean
DatabaseMetaData.
supportsStoredProcedures
()
Retrieves whether this database supports stored procedure calls
 that use the stored procedure escape syntax.
boolean
DatabaseMetaData.
supportsSubqueriesInComparisons
()
Retrieves whether this database supports subqueries in comparison
 expressions.
boolean
DatabaseMetaData.
supportsSubqueriesInExists
()
Retrieves whether this database supports subqueries in
EXISTS
expressions.
boolean
DatabaseMetaData.
supportsSubqueriesInIns
()
Retrieves whether this database supports subqueries in
IN
expressions.
boolean
DatabaseMetaData.
supportsSubqueriesInQuantifieds
()
Retrieves whether this database supports subqueries in quantified
 expressions.
boolean
DatabaseMetaData.
supportsTableCorrelationNames
()
Retrieves whether this database supports table correlation names.
boolean
DatabaseMetaData.
supportsTransactionIsolationLevel
(int level)
Retrieves whether this database supports the given transaction isolation level.
boolean
DatabaseMetaData.
supportsTransactions
()
Retrieves whether this database supports transactions.
boolean
DatabaseMetaData.
supportsUnion
()
Retrieves whether this database supports SQL
UNION
.
boolean
DatabaseMetaData.
supportsUnionAll
()
Retrieves whether this database supports SQL
UNION ALL
.
void
Blob.
truncate
(long len)
Truncates the
BLOB
value that this
Blob
object represents to be
len
bytes in length.
void
Clob.
truncate
(long len)
Truncates the
CLOB
value that this
Clob
designates to have a length of
len
characters.
<T> T
Wrapper.
unwrap
(
Class
<T> iface)
Returns an object that implements the given interface to allow access to
 non-standard methods, or standard methods not exposed by the proxy.
void
ResultSet.
updateArray
(int columnIndex,
Array
x)
Updates the designated column with a
java.sql.Array
value.
void
ResultSet.
updateArray
(
String
columnLabel,
Array
x)
Updates the designated column with a
java.sql.Array
value.
void
ResultSet.
updateAsciiStream
(int columnIndex,
InputStream
x)
Updates the designated column with an ascii stream value.
void
ResultSet.
updateAsciiStream
(int columnIndex,
InputStream
x,
 int length)
Updates the designated column with an ascii stream value, which will have
 the specified number of bytes.
void
ResultSet.
updateAsciiStream
(int columnIndex,
InputStream
x,
 long length)
Updates the designated column with an ascii stream value, which will have
 the specified number of bytes.
void
ResultSet.
updateAsciiStream
(
String
columnLabel,
InputStream
x)
Updates the designated column with an ascii stream value.
void
ResultSet.
updateAsciiStream
(
String
columnLabel,
InputStream
x,
 int length)
Updates the designated column with an ascii stream value, which will have
 the specified number of bytes.
void
ResultSet.
updateAsciiStream
(
String
columnLabel,
InputStream
x,
 long length)
Updates the designated column with an ascii stream value, which will have
 the specified number of bytes.
void
ResultSet.
updateBigDecimal
(int columnIndex,
BigDecimal
x)
Updates the designated column with a
java.math.BigDecimal
value.
void
ResultSet.
updateBigDecimal
(
String
columnLabel,
BigDecimal
x)
Updates the designated column with a
java.sql.BigDecimal
value.
void
ResultSet.
updateBinaryStream
(int columnIndex,
InputStream
x)
Updates the designated column with a binary stream value.
void
ResultSet.
updateBinaryStream
(int columnIndex,
InputStream
x,
 int length)
Updates the designated column with a binary stream value, which will have
 the specified number of bytes.
void
ResultSet.
updateBinaryStream
(int columnIndex,
InputStream
x,
 long length)
Updates the designated column with a binary stream value, which will have
 the specified number of bytes.
void
ResultSet.
updateBinaryStream
(
String
columnLabel,
InputStream
x)
Updates the designated column with a binary stream value.
void
ResultSet.
updateBinaryStream
(
String
columnLabel,
InputStream
x,
 int length)
Updates the designated column with a binary stream value, which will have
 the specified number of bytes.
void
ResultSet.
updateBinaryStream
(
String
columnLabel,
InputStream
x,
 long length)
Updates the designated column with a binary stream value, which will have
 the specified number of bytes.
void
ResultSet.
updateBlob
(int columnIndex,
InputStream
inputStream)
Updates the designated column using the given input stream.
void
ResultSet.
updateBlob
(int columnIndex,
InputStream
inputStream,
 long length)
Updates the designated column using the given input stream, which
 will have the specified number of bytes.
void
ResultSet.
updateBlob
(int columnIndex,
Blob
x)
Updates the designated column with a
java.sql.Blob
value.
void
ResultSet.
updateBlob
(
String
columnLabel,
InputStream
inputStream)
Updates the designated column using the given input stream.
void
ResultSet.
updateBlob
(
String
columnLabel,
InputStream
inputStream,
 long length)
Updates the designated column using the given input stream, which
 will have the specified number of bytes.
void
ResultSet.
updateBlob
(
String
columnLabel,
Blob
x)
Updates the designated column with a
java.sql.Blob
value.
void
ResultSet.
updateBoolean
(int columnIndex,
 boolean x)
Updates the designated column with a
boolean
value.
void
ResultSet.
updateBoolean
(
String
columnLabel,
 boolean x)
Updates the designated column with a
boolean
value.
void
ResultSet.
updateByte
(int columnIndex,
 byte x)
Updates the designated column with a
byte
value.
void
ResultSet.
updateByte
(
String
columnLabel,
 byte x)
Updates the designated column with a
byte
value.
void
ResultSet.
updateBytes
(int columnIndex,
 byte[] x)
Updates the designated column with a
byte
array value.
void
ResultSet.
updateBytes
(
String
columnLabel,
 byte[] x)
Updates the designated column with a byte array value.
void
ResultSet.
updateCharacterStream
(int columnIndex,
Reader
x)
Updates the designated column with a character stream value.
void
ResultSet.
updateCharacterStream
(int columnIndex,
Reader
x,
 int length)
Updates the designated column with a character stream value, which will have
 the specified number of bytes.
void
ResultSet.
updateCharacterStream
(int columnIndex,
Reader
x,
 long length)
Updates the designated column with a character stream value, which will have
 the specified number of bytes.
void
ResultSet.
updateCharacterStream
(
String
columnLabel,
Reader
reader)
Updates the designated column with a character stream value.
void
ResultSet.
updateCharacterStream
(
String
columnLabel,
Reader
reader,
 int length)
Updates the designated column with a character stream value, which will have
 the specified number of bytes.
void
ResultSet.
updateCharacterStream
(
String
columnLabel,
Reader
reader,
 long length)
Updates the designated column with a character stream value, which will have
 the specified number of bytes.
void
ResultSet.
updateClob
(int columnIndex,
Reader
reader)
Updates the designated column using the given
Reader
object.
void
ResultSet.
updateClob
(int columnIndex,
Reader
reader,
 long length)
Updates the designated column using the given
Reader
object, which is the given number of characters long.
void
ResultSet.
updateClob
(int columnIndex,
Clob
x)
Updates the designated column with a
java.sql.Clob
value.
void
ResultSet.
updateClob
(
String
columnLabel,
Reader
reader)
Updates the designated column using the given
Reader
object.
void
ResultSet.
updateClob
(
String
columnLabel,
Reader
reader,
 long length)
Updates the designated column using the given
Reader
object, which is the given number of characters long.
void
ResultSet.
updateClob
(
String
columnLabel,
Clob
x)
Updates the designated column with a
java.sql.Clob
value.
void
ResultSet.
updateDate
(int columnIndex,
Date
x)
Updates the designated column with a
java.sql.Date
value.
void
ResultSet.
updateDate
(
String
columnLabel,
Date
x)
Updates the designated column with a
java.sql.Date
value.
void
ResultSet.
updateDouble
(int columnIndex,
 double x)
Updates the designated column with a
double
value.
void
ResultSet.
updateDouble
(
String
columnLabel,
 double x)
Updates the designated column with a
double
value.
void
ResultSet.
updateFloat
(int columnIndex,
 float x)
Updates the designated column with a
float
value.
void
ResultSet.
updateFloat
(
String
columnLabel,
 float x)
Updates the designated column with a
float
value.
void
ResultSet.
updateInt
(int columnIndex,
 int x)
Updates the designated column with an
int
value.
void
ResultSet.
updateInt
(
String
columnLabel,
 int x)
Updates the designated column with an
int
value.
void
ResultSet.
updateLong
(int columnIndex,
 long x)
Updates the designated column with a
long
value.
void
ResultSet.
updateLong
(
String
columnLabel,
 long x)
Updates the designated column with a
long
value.
void
ResultSet.
updateNCharacterStream
(int columnIndex,
Reader
x)
Updates the designated column with a character stream value.
void
ResultSet.
updateNCharacterStream
(int columnIndex,
Reader
x,
 long length)
Updates the designated column with a character stream value, which will have
 the specified number of bytes.
void
ResultSet.
updateNCharacterStream
(
String
columnLabel,
Reader
reader)
Updates the designated column with a character stream value.
void
ResultSet.
updateNCharacterStream
(
String
columnLabel,
Reader
reader,
 long length)
Updates the designated column with a character stream value, which will have
 the specified number of bytes.
void
ResultSet.
updateNClob
(int columnIndex,
Reader
reader)
Updates the designated column using the given
Reader
The data will be read from the stream
 as needed until end-of-stream is reached.
void
ResultSet.
updateNClob
(int columnIndex,
Reader
reader,
 long length)
Updates the designated column using the given
Reader
object, which is the given number of characters long.
void
ResultSet.
updateNClob
(int columnIndex,
NClob
nClob)
Updates the designated column with a
java.sql.NClob
value.
void
ResultSet.
updateNClob
(
String
columnLabel,
Reader
reader)
Updates the designated column using the given
Reader
object.
void
ResultSet.
updateNClob
(
String
columnLabel,
Reader
reader,
 long length)
Updates the designated column using the given
Reader
object, which is the given number of characters long.
void
ResultSet.
updateNClob
(
String
columnLabel,
NClob
nClob)
Updates the designated column with a
java.sql.NClob
value.
void
ResultSet.
updateNString
(int columnIndex,
String
nString)
Updates the designated column with a
String
value.
void
ResultSet.
updateNString
(
String
columnLabel,
String
nString)
Updates the designated column with a
String
value.
void
ResultSet.
updateNull
(int columnIndex)
Updates the designated column with a
null
value.
void
ResultSet.
updateNull
(
String
columnLabel)
Updates the designated column with a
null
value.
void
ResultSet.
updateObject
(int columnIndex,
Object
x)
Updates the designated column with an
Object
value.
void
ResultSet.
updateObject
(int columnIndex,
Object
x,
 int scaleOrLength)
Updates the designated column with an
Object
value.
default void
ResultSet.
updateObject
(int columnIndex,
Object
x,
SQLType
targetSqlType)
Updates the designated column with an
Object
value.
default void
ResultSet.
updateObject
(int columnIndex,
Object
x,
SQLType
targetSqlType,
 int scaleOrLength)
Updates the designated column with an
Object
value.
void
ResultSet.
updateObject
(
String
columnLabel,
Object
x)
Updates the designated column with an
Object
value.
void
ResultSet.
updateObject
(
String
columnLabel,
Object
x,
 int scaleOrLength)
Updates the designated column with an
Object
value.
default void
ResultSet.
updateObject
(
String
columnLabel,
Object
x,
SQLType
targetSqlType)
Updates the designated column with an
Object
value.
default void
ResultSet.
updateObject
(
String
columnLabel,
Object
x,
SQLType
targetSqlType,
 int scaleOrLength)
Updates the designated column with an
Object
value.
void
ResultSet.
updateRef
(int columnIndex,
Ref
x)
Updates the designated column with a
java.sql.Ref
value.
void
ResultSet.
updateRef
(
String
columnLabel,
Ref
x)
Updates the designated column with a
java.sql.Ref
value.
void
ResultSet.
updateRow
()
Updates the underlying database with the new contents of the
 current row of this
ResultSet
object.
void
ResultSet.
updateRowId
(int columnIndex,
RowId
x)
Updates the designated column with a
RowId
value.
void
ResultSet.
updateRowId
(
String
columnLabel,
RowId
x)
Updates the designated column with a
RowId
value.
boolean
DatabaseMetaData.
updatesAreDetected
(int type)
Retrieves whether or not a visible row update can be detected by
 calling the method
ResultSet.rowUpdated
.
void
ResultSet.
updateShort
(int columnIndex,
 short x)
Updates the designated column with a
short
value.
void
ResultSet.
updateShort
(
String
columnLabel,
 short x)
Updates the designated column with a
short
value.
void
ResultSet.
updateSQLXML
(int columnIndex,
SQLXML
xmlObject)
Updates the designated column with a
java.sql.SQLXML
value.
void
ResultSet.
updateSQLXML
(
String
columnLabel,
SQLXML
xmlObject)
Updates the designated column with a
java.sql.SQLXML
value.
void
ResultSet.
updateString
(int columnIndex,
String
x)
Updates the designated column with a
String
value.
void
ResultSet.
updateString
(
String
columnLabel,
String
x)
Updates the designated column with a
String
value.
void
ResultSet.
updateTime
(int columnIndex,
Time
x)
Updates the designated column with a
java.sql.Time
value.
void
ResultSet.
updateTime
(
String
columnLabel,
Time
x)
Updates the designated column with a
java.sql.Time
value.
void
ResultSet.
updateTimestamp
(int columnIndex,
Timestamp
x)
Updates the designated column with a
java.sql.Timestamp
value.
void
ResultSet.
updateTimestamp
(
String
columnLabel,
Timestamp
x)
Updates the designated column with a
java.sql.Timestamp
value.
boolean
DatabaseMetaData.
usesLocalFilePerTable
()
Retrieves whether this database uses a file for each table.
boolean
DatabaseMetaData.
usesLocalFiles
()
Retrieves whether this database stores tables in a local file.
boolean
CallableStatement.
wasNull
()
Retrieves whether the last OUT parameter read had the value of
 SQL
NULL
.
boolean
ResultSet.
wasNull
()
Reports whether
 the last column read had a value of SQL
NULL
.
boolean
SQLInput.
wasNull
()
Retrieves whether the last value read was SQL
NULL
.
void
SQLOutput.
writeArray
(
Array
x)
Writes an SQL
ARRAY
value to the stream.
void
SQLOutput.
writeAsciiStream
(
InputStream
x)
Writes the next attribute to the stream as a stream of ASCII characters.
void
SQLOutput.
writeBigDecimal
(
BigDecimal
x)
Writes the next attribute to the stream as a java.math.BigDecimal object.
void
SQLOutput.
writeBinaryStream
(
InputStream
x)
Writes the next attribute to the stream as a stream of uninterpreted
 bytes.
void
SQLOutput.
writeBlob
(
Blob
x)
Writes an SQL
BLOB
value to the stream.
void
SQLOutput.
writeBoolean
(boolean x)
Writes the next attribute to the stream as a Java boolean.
void
SQLOutput.
writeByte
(byte x)
Writes the next attribute to the stream as a Java byte.
void
SQLOutput.
writeBytes
(byte[] x)
Writes the next attribute to the stream as an array of bytes.
void
SQLOutput.
writeCharacterStream
(
Reader
x)
Writes the next attribute to the stream as a stream of Unicode characters.
void
SQLOutput.
writeClob
(
Clob
x)
Writes an SQL
CLOB
value to the stream.
void
SQLOutput.
writeDate
(
Date
x)
Writes the next attribute to the stream as a java.sql.Date object.
void
SQLOutput.
writeDouble
(double x)
Writes the next attribute to the stream as a Java double.
void
SQLOutput.
writeFloat
(float x)
Writes the next attribute to the stream as a Java float.
void
SQLOutput.
writeInt
(int x)
Writes the next attribute to the stream as a Java int.
void
SQLOutput.
writeLong
(long x)
Writes the next attribute to the stream as a Java long.
void
SQLOutput.
writeNClob
(
NClob
x)
Writes an SQL
NCLOB
value to the stream.
void
SQLOutput.
writeNString
(
String
x)
Writes the next attribute to the stream as a
String
in the Java programming language.
default void
SQLOutput.
writeObject
(
Object
x,
SQLType
targetSqlType)
Writes to the stream the data contained in the given object.
void
SQLOutput.
writeObject
(
SQLData
x)
Writes to the stream the data contained in the given
SQLData
object.
void
SQLOutput.
writeRef
(
Ref
x)
Writes an SQL
REF
value to the stream.
void
SQLOutput.
writeRowId
(
RowId
x)
Writes an SQL
ROWID
value to the stream.
void
SQLOutput.
writeShort
(short x)
Writes the next attribute to the stream as a Java short.
void
SQLData.
writeSQL
(
SQLOutput
stream)
Writes this object to the given SQL data stream, converting it back to
 its SQL value in the data source.
void
SQLOutput.
writeSQLXML
(
SQLXML
x)
Writes an SQL
XML
value to the stream.
void
SQLOutput.
writeString
(
String
x)
Writes the next attribute to the stream as a
String
in the Java programming language.
void
SQLOutput.
writeStruct
(
Struct
x)
Writes an SQL structured type value to the stream.
void
SQLOutput.
writeTime
(
Time
x)
Writes the next attribute to the stream as a java.sql.Time object.
void
SQLOutput.
writeTimestamp
(
Timestamp
x)
Writes the next attribute to the stream as a java.sql.Timestamp object.
void
SQLOutput.
writeURL
(
URL
x)
Writes a SQL
DATALINK
value to the stream.
Uses of
SQLException
in
javax.sql
Methods in
javax.sql
that return
SQLException
Modifier and Type
Method
Description
SQLException
ConnectionEvent.
getSQLException
()
Retrieves the
SQLException
for this
ConnectionEvent
object.
SQLException
StatementEvent.
getSQLException
()
Returns the
SQLException
the driver is about to throw
Methods in
javax.sql
that throw
SQLException
Modifier and Type
Method
Description
PooledConnection
PooledConnectionBuilder.
build
()
Returns an instance of the object defined by this builder.
XAConnection
XAConnectionBuilder.
build
()
Returns an instance of the object defined by this builder.
void
RowSet.
clearParameters
()
Clears the parameters set for this
RowSet
object's command.
void
PooledConnection.
close
()
Closes the physical connection that this
PooledConnection
object represents.
default
ConnectionBuilder
DataSource.
createConnectionBuilder
()
Create a new
ConnectionBuilder
instance
default
PooledConnectionBuilder
ConnectionPoolDataSource.
createPooledConnectionBuilder
()
Creates a new
PooledConnectionBuilder
instance
default
ShardingKeyBuilder
CommonDataSource.
createShardingKeyBuilder
()
Creates a new
ShardingKeyBuilder
instance
default
XAConnectionBuilder
XADataSource.
createXAConnectionBuilder
()
Creates a new
XAConnectionBuilder
instance
void
RowSet.
execute
()
Fills this
RowSet
object with data.
Connection
DataSource.
getConnection
()
Attempts to establish a connection with the data source that
 this
DataSource
object represents.
Connection
DataSource.
getConnection
(
String
username,
String
password)
Attempts to establish a connection with the data source that
 this
DataSource
object represents.
Connection
PooledConnection.
getConnection
()
Creates and returns a
Connection
object that is a handle
 for the physical connection that
 this
PooledConnection
object represents.
Connection
RowSetInternal.
getConnection
()
Retrieves the
Connection
object that was passed to this
RowSet
object.
boolean
RowSet.
getEscapeProcessing
()
Retrieves whether escape processing is enabled for this
RowSet
object.
int
CommonDataSource.
getLoginTimeout
()
Gets the maximum time in seconds that this data source can wait
 while attempting to connect to a database.
int
ConnectionPoolDataSource.
getLoginTimeout
()
Gets the maximum time in seconds that this data source can wait
 while attempting to connect to a database.
int
DataSource.
getLoginTimeout
()
Gets the maximum time in seconds that this data source can wait
 while attempting to connect to a database.
int
XADataSource.
getLoginTimeout
()
Gets the maximum time in seconds that this data source can wait
 while attempting to connect to a database.
PrintWriter
CommonDataSource.
getLogWriter
()
Retrieves the log writer for this
DataSource
object.
PrintWriter
ConnectionPoolDataSource.
getLogWriter
()
Retrieves the log writer for this
DataSource
object.
PrintWriter
DataSource.
getLogWriter
()
Retrieves the log writer for this
DataSource
object.
PrintWriter
XADataSource.
getLogWriter
()
Retrieves the log writer for this
DataSource
object.
int
RowSet.
getMaxFieldSize
()
Retrieves the maximum number of bytes that may be returned
 for certain column values.
int
RowSet.
getMaxRows
()
Retrieves the maximum number of rows that this
RowSet
object can contain.
ResultSet
RowSetInternal.
getOriginal
()
Retrieves a
ResultSet
object containing the original
 value of this
RowSet
object.
ResultSet
RowSetInternal.
getOriginalRow
()
Retrieves a
ResultSet
object containing the original value
 of the current row only.
Object
[]
RowSetInternal.
getParams
()
Retrieves the parameters that have been set for this
RowSet
object's command.
PooledConnection
ConnectionPoolDataSource.
getPooledConnection
()
Attempts to establish a physical database connection that can
 be used as a pooled connection.
PooledConnection
ConnectionPoolDataSource.
getPooledConnection
(
String
user,
String
password)
Attempts to establish a physical database connection that can
 be used as a pooled connection.
int
RowSet.
getQueryTimeout
()
Retrieves the maximum number of seconds the driver will wait for
 a statement to execute.
Map
<
String
,
Class
<?>>
RowSet.
getTypeMap
()
Retrieves the
Map
object associated with this
RowSet
object, which specifies the custom mapping
 of SQL user-defined types, if any.
String
RowSet.
getUrl
()
Retrieves the url property this
RowSet
object will use to
 create a connection if it uses the
DriverManager
instead of a
DataSource
object to establish the connection.
XAConnection
XADataSource.
getXAConnection
()
Attempts to establish a physical database connection that can be
 used in a distributed transaction.
XAConnection
XADataSource.
getXAConnection
(
String
user,
String
password)
Attempts to establish a physical database connection, using the given
 user name and password.
XAResource
XAConnection.
getXAResource
()
Retrieves an
XAResource
object that the transaction manager
 will use to manage this
XAConnection
object's participation
 in a distributed transaction.
void
RowSetReader.
readData
(
RowSetInternal
caller)
Reads the new contents of the calling
RowSet
object.
void
RowSet.
setArray
(int i,
Array
x)
Sets the designated parameter in this
RowSet
object's command
 with the given
Array
value.
void
RowSet.
setAsciiStream
(int parameterIndex,
InputStream
x)
Sets the designated parameter in this
RowSet
object's command
 to the given input stream.
void
RowSet.
setAsciiStream
(int parameterIndex,
InputStream
x,
 int length)
Sets the designated parameter in this
RowSet
object's command
 to the given
java.io.InputStream
value.
void
RowSet.
setAsciiStream
(
String
parameterName,
InputStream
x)
Sets the designated parameter to the given input stream.
void
RowSet.
setAsciiStream
(
String
parameterName,
InputStream
x,
 int length)
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
void
RowSetMetaData.
setAutoIncrement
(int columnIndex,
 boolean property)
Sets whether the designated column is automatically numbered,
 The default is for a
RowSet
object's
 columns not to be automatically numbered.
void
RowSet.
setBigDecimal
(int parameterIndex,
BigDecimal
x)
Sets the designated parameter in this
RowSet
object's command
 to the given
java.math.BigDecimal
value.
void
RowSet.
setBigDecimal
(
String
parameterName,
BigDecimal
x)
Sets the designated parameter to the given
java.math.BigDecimal
value.
void
RowSet.
setBinaryStream
(int parameterIndex,
InputStream
x)
Sets the designated parameter in this
RowSet
object's command
 to the given input stream.
void
RowSet.
setBinaryStream
(int parameterIndex,
InputStream
x,
 int length)
Sets the designated parameter in this
RowSet
object's command
 to the given
java.io.InputStream
value.
void
RowSet.
setBinaryStream
(
String
parameterName,
InputStream
x)
Sets the designated parameter to the given input stream.
void
RowSet.
setBinaryStream
(
String
parameterName,
InputStream
x,
 int length)
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
void
RowSet.
setBlob
(int parameterIndex,
InputStream
inputStream)
Sets the designated parameter to a
InputStream
object.
void
RowSet.
setBlob
(int parameterIndex,
InputStream
inputStream,
 long length)
Sets the designated parameter to a
InputStream
object.
void
RowSet.
setBlob
(int i,
Blob
x)
Sets the designated parameter in this
RowSet
object's command
 with the given
Blob
value.
void
RowSet.
setBlob
(
String
parameterName,
InputStream
inputStream)
Sets the designated parameter to a
InputStream
object.
void
RowSet.
setBlob
(
String
parameterName,
InputStream
inputStream,
 long length)
Sets the designated parameter to a
InputStream
object.
void
RowSet.
setBlob
(
String
parameterName,
Blob
x)
Sets the designated parameter to the given
java.sql.Blob
object.
void
RowSet.
setBoolean
(int parameterIndex,
 boolean x)
Sets the designated parameter in this
RowSet
object's command
 to the given Java
boolean
value.
void
RowSet.
setBoolean
(
String
parameterName,
 boolean x)
Sets the designated parameter to the given Java
boolean
value.
void
RowSet.
setByte
(int parameterIndex,
 byte x)
Sets the designated parameter in this
RowSet
object's command
 to the given Java
byte
value.
void
RowSet.
setByte
(
String
parameterName,
 byte x)
Sets the designated parameter to the given Java
byte
value.
void
RowSet.
setBytes
(int parameterIndex,
 byte[] x)
Sets the designated parameter in this
RowSet
object's command
 to the given Java array of
byte
values.
void
RowSet.
setBytes
(
String
parameterName,
 byte[] x)
Sets the designated parameter to the given Java array of bytes.
void
RowSetMetaData.
setCaseSensitive
(int columnIndex,
 boolean property)
Sets whether the designated column is case sensitive.
void
RowSetMetaData.
setCatalogName
(int columnIndex,
String
catalogName)
Sets the designated column's table's catalog name, if any, to the given
String
.
void
RowSet.
setCharacterStream
(int parameterIndex,
Reader
reader)
Sets the designated parameter in this
RowSet
object's command
 to the given
Reader
object.
void
RowSet.
setCharacterStream
(int parameterIndex,
Reader
reader,
 int length)
Sets the designated parameter in this
RowSet
object's command
 to the given
java.io.Reader
value.
void
RowSet.
setCharacterStream
(
String
parameterName,
Reader
reader)
Sets the designated parameter to the given
Reader
object.
void
RowSet.
setCharacterStream
(
String
parameterName,
Reader
reader,
 int length)
Sets the designated parameter to the given
Reader
object, which is the given number of characters long.
void
RowSet.
setClob
(int parameterIndex,
Reader
reader)
Sets the designated parameter to a
Reader
object.
void
RowSet.
setClob
(int parameterIndex,
Reader
reader,
 long length)
Sets the designated parameter to a
Reader
object.
void
RowSet.
setClob
(int i,
Clob
x)
Sets the designated parameter in this
RowSet
object's command
 with the given
Clob
value.
void
RowSet.
setClob
(
String
parameterName,
Reader
reader)
Sets the designated parameter to a
Reader
object.
void
RowSet.
setClob
(
String
parameterName,
Reader
reader,
 long length)
Sets the designated parameter to a
Reader
object.
void
RowSet.
setClob
(
String
parameterName,
Clob
x)
Sets the designated parameter to the given
java.sql.Clob
object.
void
RowSetMetaData.
setColumnCount
(int columnCount)
Sets the number of columns in the
RowSet
object to
 the given number.
void
RowSetMetaData.
setColumnDisplaySize
(int columnIndex,
 int size)
Sets the designated column's normal maximum width in chars to the
 given
int
.
void
RowSetMetaData.
setColumnLabel
(int columnIndex,
String
label)
Sets the suggested column title for use in printouts and
 displays, if any, to the given
String
.
void
RowSetMetaData.
setColumnName
(int columnIndex,
String
columnName)
Sets the name of the designated column to the given
String
.
void
RowSetMetaData.
setColumnType
(int columnIndex,
 int SQLType)
Sets the designated column's SQL type to the one given.
void
RowSetMetaData.
setColumnTypeName
(int columnIndex,
String
typeName)
Sets the designated column's type name that is specific to the
 data source, if any, to the given
String
.
void
RowSet.
setCommand
(
String
cmd)
Sets this
RowSet
object's command property to the given
 SQL query.
void
RowSet.
setConcurrency
(int concurrency)
Sets the concurrency of this
RowSet
object to the given
 concurrency level.
void
RowSetMetaData.
setCurrency
(int columnIndex,
 boolean property)
Sets whether the designated column is a cash value.
void
RowSet.
setDataSourceName
(
String
name)
Sets the data source name property for this
RowSet
object to the
 given
String
.
void
RowSet.
setDate
(int parameterIndex,
Date
x)
Sets the designated parameter in this
RowSet
object's command
 to the given
java.sql.Date
value.
void
RowSet.
setDate
(int parameterIndex,
Date
x,
Calendar
cal)
Sets the designated parameter in this
RowSet
object's command
 with the given
java.sql.Date
value.
void
RowSet.
setDate
(
String
parameterName,
Date
x)
Sets the designated parameter to the given
java.sql.Date
value
 using the default time zone of the virtual machine that is running
 the application.
void
RowSet.
setDate
(
String
parameterName,
Date
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Date
value,
 using the given
Calendar
object.
void
RowSet.
setDouble
(int parameterIndex,
 double x)
Sets the designated parameter in this
RowSet
object's command
 to the given Java
double
value.
void
RowSet.
setDouble
(
String
parameterName,
 double x)
Sets the designated parameter to the given Java
double
value.
void
RowSet.
setEscapeProcessing
(boolean enable)
Sets escape processing for this
RowSet
object on or
 off.
void
RowSet.
setFloat
(int parameterIndex,
 float x)
Sets the designated parameter in this
RowSet
object's command
 to the given Java
float
value.
void
RowSet.
setFloat
(
String
parameterName,
 float x)
Sets the designated parameter to the given Java
float
value.
void
RowSet.
setInt
(int parameterIndex,
 int x)
Sets the designated parameter in this
RowSet
object's command
 to the given Java
int
value.
void
RowSet.
setInt
(
String
parameterName,
 int x)
Sets the designated parameter to the given Java
int
value.
void
CommonDataSource.
setLoginTimeout
(int seconds)
Sets the maximum time in seconds that this data source will wait
 while attempting to connect to a database.
void
ConnectionPoolDataSource.
setLoginTimeout
(int seconds)
Sets the maximum time in seconds that this data source will wait
 while attempting to connect to a database.
void
DataSource.
setLoginTimeout
(int seconds)
Sets the maximum time in seconds that this data source will wait
 while attempting to connect to a database.
void
XADataSource.
setLoginTimeout
(int seconds)
Sets the maximum time in seconds that this data source will wait
 while attempting to connect to a database.
void
CommonDataSource.
setLogWriter
(
PrintWriter
out)
Sets the log writer for this
DataSource
object to the given
java.io.PrintWriter
object.
void
ConnectionPoolDataSource.
setLogWriter
(
PrintWriter
out)
Sets the log writer for this
DataSource
object to the given
java.io.PrintWriter
object.
void
DataSource.
setLogWriter
(
PrintWriter
out)
Sets the log writer for this
DataSource
object to the given
java.io.PrintWriter
object.
void
XADataSource.
setLogWriter
(
PrintWriter
out)
Sets the log writer for this
DataSource
object to the given
java.io.PrintWriter
object.
void
RowSet.
setLong
(int parameterIndex,
 long x)
Sets the designated parameter in this
RowSet
object's command
 to the given Java
long
value.
void
RowSet.
setLong
(
String
parameterName,
 long x)
Sets the designated parameter to the given Java
long
value.
void
RowSet.
setMaxFieldSize
(int max)
Sets the maximum number of bytes that can be returned for a column
 value to the given number of bytes.
void
RowSet.
setMaxRows
(int max)
Sets the maximum number of rows that this
RowSet
object can contain to the specified number.
void
RowSetInternal.
setMetaData
(
RowSetMetaData
md)
Sets the given
RowSetMetaData
object as the
RowSetMetaData
object for this
RowSet
object.
void
RowSet.
setNCharacterStream
(int parameterIndex,
Reader
value)
Sets the designated parameter in this
RowSet
object's command
 to a
Reader
object.
void
RowSet.
setNCharacterStream
(int parameterIndex,
Reader
value,
 long length)
Sets the designated parameter to a
Reader
object.
void
RowSet.
setNCharacterStream
(
String
parameterName,
Reader
value)
Sets the designated parameter to a
Reader
object.
void
RowSet.
setNCharacterStream
(
String
parameterName,
Reader
value,
 long length)
Sets the designated parameter to a
Reader
object.
void
RowSet.
setNClob
(int parameterIndex,
Reader
reader)
Sets the designated parameter to a
Reader
object.
void
RowSet.
setNClob
(int parameterIndex,
Reader
reader,
 long length)
Sets the designated parameter to a
Reader
object.
void
RowSet.
setNClob
(int parameterIndex,
NClob
value)
Sets the designated parameter to a
java.sql.NClob
object.
void
RowSet.
setNClob
(
String
parameterName,
Reader
reader)
Sets the designated parameter to a
Reader
object.
void
RowSet.
setNClob
(
String
parameterName,
Reader
reader,
 long length)
Sets the designated parameter to a
Reader
object.
void
RowSet.
setNClob
(
String
parameterName,
NClob
value)
Sets the designated parameter to a
java.sql.NClob
object.
void
RowSet.
setNString
(int parameterIndex,
String
value)
Sets the designated parameter to the given
String
object.
void
RowSet.
setNString
(
String
parameterName,
String
value)
Sets the designated parameter to the given
String
object.
void
RowSet.
setNull
(int parameterIndex,
 int sqlType)
Sets the designated parameter in this
RowSet
object's SQL
 command to SQL
NULL
.
void
RowSet.
setNull
(int paramIndex,
 int sqlType,
String
typeName)
Sets the designated parameter in this
RowSet
object's SQL
 command to SQL
NULL
.
void
RowSet.
setNull
(
String
parameterName,
 int sqlType)
Sets the designated parameter to SQL
NULL
.
void
RowSet.
setNull
(
String
parameterName,
 int sqlType,
String
typeName)
Sets the designated parameter to SQL
NULL
.
void
RowSetMetaData.
setNullable
(int columnIndex,
 int property)
Sets whether the designated column's value can be set to
NULL
.
void
RowSet.
setObject
(int parameterIndex,
Object
x)
Sets the designated parameter in this
RowSet
object's command
 with a Java
Object
.
void
RowSet.
setObject
(int parameterIndex,
Object
x,
 int targetSqlType)
Sets the designated parameter in this
RowSet
object's command
 with a Java
Object
.
void
RowSet.
setObject
(int parameterIndex,
Object
x,
 int targetSqlType,
 int scaleOrLength)
Sets the designated parameter in this
RowSet
object's command
 with the given Java
Object
.
void
RowSet.
setObject
(
String
parameterName,
Object
x)
Sets the value of the designated parameter with the given object.
void
RowSet.
setObject
(
String
parameterName,
Object
x,
 int targetSqlType)
Sets the value of the designated parameter with the given object.
void
RowSet.
setObject
(
String
parameterName,
Object
x,
 int targetSqlType,
 int scale)
Sets the value of the designated parameter with the given object.
void
RowSet.
setPassword
(
String
password)
Sets the database password for this
RowSet
object to
 the given
String
.
void
RowSetMetaData.
setPrecision
(int columnIndex,
 int precision)
Sets the designated column's number of decimal digits to the
 given
int
.
void
RowSet.
setQueryTimeout
(int seconds)
Sets the maximum time the driver will wait for
 a statement to execute to the given number of seconds.
void
RowSet.
setReadOnly
(boolean value)
Sets whether this
RowSet
object is read-only to the
 given
boolean
.
void
RowSet.
setRef
(int i,
Ref
x)
Sets the designated parameter in this
RowSet
object's command
 with the given
Ref
value.
void
RowSet.
setRowId
(int parameterIndex,
RowId
x)
Sets the designated parameter to the given
java.sql.RowId
object.
void
RowSet.
setRowId
(
String
parameterName,
RowId
x)
Sets the designated parameter to the given
java.sql.RowId
object.
void
RowSetMetaData.
setScale
(int columnIndex,
 int scale)
Sets the designated column's number of digits to the
 right of the decimal point to the given
int
.
void
RowSetMetaData.
setSchemaName
(int columnIndex,
String
schemaName)
Sets the name of the designated column's table's schema, if any, to
 the given
String
.
void
RowSetMetaData.
setSearchable
(int columnIndex,
 boolean property)
Sets whether the designated column can be used in a where clause.
void
RowSet.
setShort
(int parameterIndex,
 short x)
Sets the designated parameter in this
RowSet
object's command
 to the given Java
short
value.
void
RowSet.
setShort
(
String
parameterName,
 short x)
Sets the designated parameter to the given Java
short
value.
void
RowSetMetaData.
setSigned
(int columnIndex,
 boolean property)
Sets whether the designated column is a signed number.
void
RowSet.
setSQLXML
(int parameterIndex,
SQLXML
xmlObject)
Sets the designated parameter to the given
java.sql.SQLXML
object.
void
RowSet.
setSQLXML
(
String
parameterName,
SQLXML
xmlObject)
Sets the designated parameter to the given
java.sql.SQLXML
object.
void
RowSet.
setString
(int parameterIndex,
String
x)
Sets the designated parameter in this
RowSet
object's command
 to the given Java
String
value.
void
RowSet.
setString
(
String
parameterName,
String
x)
Sets the designated parameter to the given Java
String
value.
void
RowSetMetaData.
setTableName
(int columnIndex,
String
tableName)
Sets the designated column's table name, if any, to the given
String
.
void
RowSet.
setTime
(int parameterIndex,
Time
x)
Sets the designated parameter in this
RowSet
object's command
 to the given
java.sql.Time
value.
void
RowSet.
setTime
(int parameterIndex,
Time
x,
Calendar
cal)
Sets the designated parameter in this
RowSet
object's command
 with the given
java.sql.Time
value.
void
RowSet.
setTime
(
String
parameterName,
Time
x)
Sets the designated parameter to the given
java.sql.Time
value.
void
RowSet.
setTime
(
String
parameterName,
Time
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Time
value,
 using the given
Calendar
object.
void
RowSet.
setTimestamp
(int parameterIndex,
Timestamp
x)
Sets the designated parameter in this
RowSet
object's command
 to the given
java.sql.Timestamp
value.
void
RowSet.
setTimestamp
(int parameterIndex,
Timestamp
x,
Calendar
cal)
Sets the designated parameter in this
RowSet
object's command
 with the given
java.sql.Timestamp
value.
void
RowSet.
setTimestamp
(
String
parameterName,
Timestamp
x)
Sets the designated parameter to the given
java.sql.Timestamp
value.
void
RowSet.
setTimestamp
(
String
parameterName,
Timestamp
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Timestamp
value,
 using the given
Calendar
object.
void
RowSet.
setTransactionIsolation
(int level)
Sets the transaction isolation level for this
RowSet
object.
void
RowSet.
setType
(int type)
Sets the type of this
RowSet
object to the given type.
void
RowSet.
setTypeMap
(
Map
<
String
,
Class
<?>> map)
Installs the given
java.util.Map
object as the default
 type map for this
RowSet
object.
void
RowSet.
setUrl
(
String
url)
Sets the URL this
RowSet
object will use when it uses the
DriverManager
to create a connection.
void
RowSet.
setURL
(int parameterIndex,
URL
x)
Sets the designated parameter to the given
java.net.URL
value.
void
RowSet.
setUsername
(
String
name)
Sets the username property for this
RowSet
object to the
 given
String
.
boolean
RowSetWriter.
writeData
(
RowSetInternal
caller)
Writes the changes in this
RowSetWriter
object's
 rowset back to the data source from which it got its data.
Constructors in
javax.sql
with parameters of type
SQLException
Modifier
Constructor
Description
ConnectionEvent
(
PooledConnection
con,
SQLException
ex)
Constructs a
ConnectionEvent
object initialized with
 the given
PooledConnection
object and
SQLException
object.
StatementEvent
(
PooledConnection
con,
PreparedStatement
statement,
SQLException
exception)
Constructs a
StatementEvent
with the specified
PooledConnection
,
PreparedStatement
and
SQLException
Uses of
SQLException
in
javax.sql.rowset
Subclasses of
SQLException
in
javax.sql.rowset
Modifier and Type
Class
Description
class
RowSetWarning
An extension of
SQLException
that provides information
 about database warnings set on
RowSet
objects.
Methods in
javax.sql.rowset
that throw
SQLException
Modifier and Type
Method
Description
void
JoinRowSet.
addRowSet
(
RowSet
[] rowset,
 int[] columnIdx)
Adds one or more
RowSet
objects contained in the given
 array of
RowSet
objects to this
JoinRowSet
object and sets the match column for
 each of the
RowSet
objects to the match columns
 in the given array of column indexes.
void
JoinRowSet.
addRowSet
(
RowSet
[] rowset,
String
[] columnName)
Adds one or more
RowSet
objects contained in the given
 array of
RowSet
objects to this
JoinRowSet
object and sets the match column for
 each of the
RowSet
objects to the match columns
 in the given array of column names.
void
JoinRowSet.
addRowSet
(
Joinable
rowset)
Adds the given
RowSet
object to this
JoinRowSet
object.
void
JoinRowSet.
addRowSet
(
RowSet
rowset,
 int columnIdx)
Adds the given
RowSet
object to this
JoinRowSet
object and sets the designated column as the match column for
 the
RowSet
object.
void
JoinRowSet.
addRowSet
(
RowSet
rowset,
String
columnName)
Adds
rowset
to this
JoinRowSet
object and
 sets the designated column as the match column.
void
BaseRowSet.
clearParameters
()
Clears all of the current parameter values in this
RowSet
object's internal representation of the parameters to be set in
 this
RowSet
object's command when it is executed.
boolean
CachedRowSet.
columnUpdated
(int idx)
Indicates whether the designated column in the current row of this
CachedRowSet
object has been updated.
boolean
CachedRowSet.
columnUpdated
(
String
columnName)
Indicates whether the designated column in the current row of this
CachedRowSet
object has been updated.
void
CachedRowSet.
commit
()
Each
CachedRowSet
object's
SyncProvider
contains
 a
Connection
object from the
ResultSet
or JDBC
 properties passed to it's constructors.
void
JdbcRowSet.
commit
()
Each
JdbcRowSet
contains a
Connection
object from
 the
ResultSet
or JDBC properties passed to it's constructors.
CachedRowSet
RowSetFactory.
createCachedRowSet
()
Creates a new instance of a CachedRowSet.
CachedRowSet
CachedRowSet.
createCopy
()
Creates a
RowSet
object that is a deep copy of the data in
 this
CachedRowSet
object.
CachedRowSet
CachedRowSet.
createCopyNoConstraints
()
Creates a
CachedRowSet
object that is a deep copy of
 this
CachedRowSet
object's data but is independent of it.
CachedRowSet
CachedRowSet.
createCopySchema
()
Creates a
CachedRowSet
object that is an empty copy of this
CachedRowSet
object.
FilteredRowSet
RowSetFactory.
createFilteredRowSet
()
Creates a new instance of a FilteredRowSet.
JdbcRowSet
RowSetFactory.
createJdbcRowSet
()
Creates a new instance of a JdbcRowSet.
JoinRowSet
RowSetFactory.
createJoinRowSet
()
Creates a new instance of a JoinRowSet.
RowSet
CachedRowSet.
createShared
()
Returns a new
RowSet
object backed by the same data as
 that of this
CachedRowSet
object.
WebRowSet
RowSetFactory.
createWebRowSet
()
Creates a new instance of a WebRowSet.
boolean
Predicate.
evaluate
(
Object
value,
 int column)
This method is called by a
FilteredRowSet
object
 to check whether the value lies between the filtering criterion (or criteria
 if multiple constraints exist) set using the
setFilter()
method.
boolean
Predicate.
evaluate
(
Object
value,
String
columnName)
This method is called by the
FilteredRowSet
object
 to check whether the value lies between the filtering criteria set
 using the setFilter method.
void
CachedRowSet.
execute
(
Connection
conn)
Populates this
CachedRowSet
object with data, using the
 given connection to produce the result set from which the data will be read.
boolean
JdbcRowSet.
getAutoCommit
()
Each
JdbcRowSet
contains a
Connection
object from
 the original
ResultSet
or JDBC properties passed to it.
String
RowSetMetaDataImpl.
getCatalogName
(int columnIndex)
Retrieves the catalog name of the table from which the value
 in the designated column was derived.
String
RowSetMetaDataImpl.
getColumnClassName
(int columnIndex)
Retrieves the fully-qualified name of the class in the Java
 programming language to which a value in the designated column
 will be mapped.
int
RowSetMetaDataImpl.
getColumnCount
()
Retrieves the number of columns in the
RowSet
object
 for which this
RowSetMetaDataImpl
object was created.
int
RowSetMetaDataImpl.
getColumnDisplaySize
(int columnIndex)
Retrieves the normal maximum width in chars of the designated column.
String
RowSetMetaDataImpl.
getColumnLabel
(int columnIndex)
Retrieves the suggested column title for the designated
 column for use in printouts and displays.
String
RowSetMetaDataImpl.
getColumnName
(int columnIndex)
Retrieves the name of the designated column.
int
RowSetMetaDataImpl.
getColumnType
(int columnIndex)
Retrieves the type code (one of the
java.sql.Types
constants) for the SQL type of the value stored in the
 designated column.
String
RowSetMetaDataImpl.
getColumnTypeName
(int columnIndex)
Retrieves the DBMS-specific type name for values stored in the
 designated column.
int
BaseRowSet.
getConcurrency
()
Returns the concurrency for this
RowSet
object.
boolean
BaseRowSet.
getEscapeProcessing
()
Ascertains whether escape processing is enabled for this
RowSet
object.
int
BaseRowSet.
getFetchDirection
()
Retrieves this
RowSet
object's current setting for the
 fetch direction.
int
BaseRowSet.
getFetchSize
()
Returns the fetch size for this
RowSet
object.
int
JoinRowSet.
getJoinType
()
Returns a
int
describing the set SQL
JOIN
type
 governing this JoinRowSet instance.
int[]
CachedRowSet.
getKeyColumns
()
Returns an array containing one or more column numbers indicating the columns
 that form a key that uniquely
 identifies a row in this
CachedRowSet
object.
int[]
Joinable.
getMatchColumnIndexes
()
Retrieves the indexes of the match columns that were set for this
RowSet
object with the method
setMatchColumn(int[] columnIdxes)
.
String
[]
Joinable.
getMatchColumnNames
()
Retrieves the names of the match columns that were set for this
RowSet
object with the method
setMatchColumn(String [] columnNames)
.
int
BaseRowSet.
getMaxFieldSize
()
Retrieves the maximum number of bytes that can be used for a column
 value in this
RowSet
object.
int
BaseRowSet.
getMaxRows
()
Retrieves the maximum number of rows that this
RowSet
object may contain.
ResultSet
CachedRowSet.
getOriginal
()
Returns a
ResultSet
object containing the original value of this
CachedRowSet
object.
ResultSet
CachedRowSet.
getOriginalRow
()
Returns a
ResultSet
object containing the original value for the
 current row only of this
CachedRowSet
object.
Object
[]
BaseRowSet.
getParams
()
Retrieves an array containing the parameter values (both Objects and
 primitives) that have been set for this
RowSet
object's command and throws an
SQLException
object
 if all parameters have not been set.
int
RowSetMetaDataImpl.
getPrecision
(int columnIndex)
Retrieves the total number of digits for values stored in
 the designated column.
int
BaseRowSet.
getQueryTimeout
()
Retrieves the maximum number of seconds the driver will wait for a
 query to execute.
String
[]
JoinRowSet.
getRowSetNames
()
Returns a
String
array containing the names of the
RowSet
objects added to this
JoinRowSet
object.
Collection
<?>
JoinRowSet.
getRowSets
()
Returns a
Collection
object containing the
RowSet
objects that have been added to this
JoinRowSet
object.
RowSetWarning
CachedRowSet.
getRowSetWarnings
()
Retrieves the first warning reported by calls on this
RowSet
object.
RowSetWarning
JdbcRowSet.
getRowSetWarnings
()
Retrieves the first warning reported by calls on this
JdbcRowSet
object.
int
RowSetMetaDataImpl.
getScale
(int columnIndex)
Retrieves the number of digits to the right of the decimal point
 for values stored in the designated column.
String
RowSetMetaDataImpl.
getSchemaName
(int columnIndex)
Retrieves the schema name of the table from which the value
 in the designated column was derived.
boolean
BaseRowSet.
getShowDeleted
()
Retrieves a
boolean
indicating whether rows marked
 for deletion appear in the set of current rows.
boolean
CachedRowSet.
getShowDeleted
()
Retrieves a
boolean
indicating whether rows marked
 for deletion appear in the set of current rows.
boolean
JdbcRowSet.
getShowDeleted
()
Retrieves a
boolean
indicating whether rows marked
 for deletion appear in the set of current rows.
SyncProvider
CachedRowSet.
getSyncProvider
()
Retrieves the
SyncProvider
implementation for this
CachedRowSet
object.
String
CachedRowSet.
getTableName
()
Returns an identifier for the object (table) that was used to
 create this
CachedRowSet
object.
String
RowSetMetaDataImpl.
getTableName
(int columnIndex)
Retrieves the name of the table from which the value
 in the designated column was derived.
int
BaseRowSet.
getType
()
Returns the type of this
RowSet
object.
String
BaseRowSet.
getUrl
()
Retrieves the JDBC URL that this
RowSet
object's
javax.sql.Reader
object uses to make a connection
 with a relational database using a JDBC technology-enabled driver.
String
JoinRowSet.
getWhereClause
()
Return a SQL-like description of the WHERE clause being used
 in a JoinRowSet object.
boolean
RowSetMetaDataImpl.
isAutoIncrement
(int columnIndex)
Retrieves whether a value stored in the designated column is
 automatically numbered, and thus readonly.
boolean
RowSetMetaDataImpl.
isCaseSensitive
(int columnIndex)
Indicates whether the case of the designated column's name
 matters.
boolean
RowSetMetaDataImpl.
isCurrency
(int columnIndex)
Indicates whether a value stored in the designated column
 is a cash value.
boolean
RowSetMetaDataImpl.
isDefinitelyWritable
(int columnIndex)
Indicates whether a write operation on the designated column
 will definitely succeed.
int
RowSetMetaDataImpl.
isNullable
(int columnIndex)
Retrieves a constant indicating whether it is possible
 to store a
NULL
value in the designated column.
boolean
RowSetMetaDataImpl.
isReadOnly
(int columnIndex)
Indicates whether the designated column is definitely
 not writable, thus readonly.
boolean
RowSetMetaDataImpl.
isSearchable
(int columnIndex)
Indicates whether a value stored in the designated column
 can be used in a
WHERE
clause.
boolean
RowSetMetaDataImpl.
isSigned
(int columnIndex)
Indicates whether a value stored in the designated column is
 a signed number.
boolean
RowSetMetaDataImpl.
isWrapperFor
(
Class
<?> interfaces)
Returns true if this either implements the interface argument or is directly or indirectly a wrapper
 for an object that does.
boolean
RowSetMetaDataImpl.
isWritable
(int columnIndex)
Indicates whether it is possible for a write operation on
 the designated column to succeed.
static
RowSetFactory
RowSetProvider.
newFactory
()
Creates a new instance of a
RowSetFactory
implementation.
static
RowSetFactory
RowSetProvider.
newFactory
(
String
factoryClassName,
ClassLoader
cl)
Creates  a new instance of a
RowSetFactory
from the
 specified factory class name.
boolean
CachedRowSet.
nextPage
()
Increments the current page of the
CachedRowSet
.
protected void
BaseRowSet.
notifyCursorMoved
()
Notifies all of the listeners registered with this
RowSet
object that its cursor has moved.
protected void
BaseRowSet.
notifyRowChanged
()
Notifies all of the listeners registered with this
RowSet
object that
 one of its rows has changed.
protected void
BaseRowSet.
notifyRowSetChanged
()
Notifies all of the listeners registered with this
RowSet
object that its entire contents have changed.
void
CachedRowSet.
populate
(
ResultSet
data)
Populates this
CachedRowSet
object with data from
 the given
ResultSet
object.
void
CachedRowSet.
populate
(
ResultSet
rs,
 int startRow)
Populates this
CachedRowSet
object with data from
 the given
ResultSet
object.
boolean
CachedRowSet.
previousPage
()
Decrements the current page of the
CachedRowSet
.
void
WebRowSet.
readXml
(
InputStream
iStream)
Reads a stream based XML input to populate this
WebRowSet
object.
void
WebRowSet.
readXml
(
Reader
reader)
Reads a
WebRowSet
object in its XML format from the given
Reader
object.
void
CachedRowSet.
release
()
Releases the current contents of this
CachedRowSet
object and sends a
rowSetChanged
event to all
 registered listeners.
void
CachedRowSet.
restoreOriginal
()
Restores this
CachedRowSet
object to its original
 value, that is, its value before the last set of changes.
void
CachedRowSet.
rollback
()
Each
CachedRowSet
object's
SyncProvider
contains
 a
Connection
object from the original
ResultSet
or JDBC properties passed to it.
void
CachedRowSet.
rollback
(
Savepoint
s)
Each
CachedRowSet
object's
SyncProvider
contains
 a
Connection
object from the original
ResultSet
or JDBC properties passed to it.
void
JdbcRowSet.
rollback
()
Each
JdbcRowSet
contains a
Connection
object from
 the original
ResultSet
or JDBC properties passed to it.
void
JdbcRowSet.
rollback
(
Savepoint
s)
Each
JdbcRowSet
contains a
Connection
object from
 the original
ResultSet
or JDBC properties passed to it.
void
CachedRowSet.
rowSetPopulated
(
RowSetEvent
event,
 int numRows)
Notifies registered listeners that a RowSet object in the given RowSetEvent
 object has populated a number of additional rows.
void
BaseRowSet.
setArray
(int parameterIndex,
Array
array)
Sets the designated parameter to an
Array
object in the
 Java programming language.
void
BaseRowSet.
setAsciiStream
(int parameterIndex,
InputStream
x)
Sets the designated parameter in this
RowSet
object's command
 to the given input stream.
void
BaseRowSet.
setAsciiStream
(int parameterIndex,
InputStream
x,
 int length)
Sets the designated parameter to the given
java.io.InputStream
object,
 which will have the specified number of bytes.
void
BaseRowSet.
setAsciiStream
(
String
parameterName,
InputStream
x)
Sets the designated parameter to the given input stream.
void
BaseRowSet.
setAsciiStream
(
String
parameterName,
InputStream
x,
 int length)
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
void
JdbcRowSet.
setAutoCommit
(boolean autoCommit)
Each
JdbcRowSet
contains a
Connection
object from
 the original
ResultSet
or JDBC properties passed to it.
void
RowSetMetaDataImpl.
setAutoIncrement
(int columnIndex,
 boolean property)
Sets whether the designated column is automatically
 numbered, thus read-only, to the given
boolean
value.
void
BaseRowSet.
setBigDecimal
(int parameterIndex,
BigDecimal
x)
Sets the designated parameter to the given
java.lang.BigDecimal
value.
void
BaseRowSet.
setBigDecimal
(
String
parameterName,
BigDecimal
x)
Sets the designated parameter to the given
java.math.BigDecimal
value.
void
BaseRowSet.
setBinaryStream
(int parameterIndex,
InputStream
x)
Sets the designated parameter in this
RowSet
object's command
 to the given input stream.
void
BaseRowSet.
setBinaryStream
(int parameterIndex,
InputStream
x,
 int length)
Sets the designated parameter to the given
java.io.InputStream
object, which will have the specified number of bytes.
void
BaseRowSet.
setBinaryStream
(
String
parameterName,
InputStream
x)
Sets the designated parameter to the given input stream.
void
BaseRowSet.
setBinaryStream
(
String
parameterName,
InputStream
x,
 int length)
Sets the designated parameter to the given input stream, which will have
 the specified number of bytes.
void
BaseRowSet.
setBlob
(int parameterIndex,
InputStream
inputStream)
Sets the designated parameter to a
InputStream
object.
void
BaseRowSet.
setBlob
(int parameterIndex,
InputStream
inputStream,
 long length)
Sets the designated parameter to a
InputStream
object.
void
BaseRowSet.
setBlob
(int parameterIndex,
Blob
x)
Sets the designated parameter to the given
Blob
object in
 the Java programming language.
void
BaseRowSet.
setBlob
(
String
parameterName,
InputStream
inputStream)
Sets the designated parameter to a
InputStream
object.
void
BaseRowSet.
setBlob
(
String
parameterName,
InputStream
inputStream,
 long length)
Sets the designated parameter to a
InputStream
object.
void
BaseRowSet.
setBlob
(
String
parameterName,
Blob
x)
Sets the designated parameter to the given
java.sql.Blob
object.
void
BaseRowSet.
setBoolean
(int parameterIndex,
 boolean x)
Sets the designated parameter to the given
boolean
in the
 Java programming language.
void
BaseRowSet.
setBoolean
(
String
parameterName,
 boolean x)
Sets the designated parameter to the given Java
boolean
value.
void
BaseRowSet.
setByte
(int parameterIndex,
 byte x)
Sets the designated parameter to the given
byte
in the Java
 programming language.
void
BaseRowSet.
setByte
(
String
parameterName,
 byte x)
Sets the designated parameter to the given Java
byte
value.
void
BaseRowSet.
setBytes
(int parameterIndex,
 byte[] x)
Sets the designated parameter to the given array of bytes.
void
BaseRowSet.
setBytes
(
String
parameterName,
 byte[] x)
Sets the designated parameter to the given Java array of bytes.
void
RowSetMetaDataImpl.
setCaseSensitive
(int columnIndex,
 boolean property)
Sets whether the name of the designated column is case sensitive to
 the given
boolean
.
void
RowSetMetaDataImpl.
setCatalogName
(int columnIndex,
String
catalogName)
Sets the catalog name of the table from which the designated
 column was derived to
catalogName
.
void
BaseRowSet.
setCharacterStream
(int parameterIndex,
Reader
reader)
Sets the designated parameter in this
RowSet
object's command
 to the given
Reader
object.
void
BaseRowSet.
setCharacterStream
(int parameterIndex,
Reader
reader,
 int length)
Sets the designated parameter to the given
java.io.Reader
object, which will have the specified number of characters.
void
BaseRowSet.
setCharacterStream
(
String
parameterName,
Reader
reader)
Sets the designated parameter to the given
Reader
object.
void
BaseRowSet.
setCharacterStream
(
String
parameterName,
Reader
reader,
 int length)
Sets the designated parameter to the given
Reader
object, which is the given number of characters long.
void
BaseRowSet.
setClob
(int parameterIndex,
Reader
reader)
Sets the designated parameter to a
Reader
object.
void
BaseRowSet.
setClob
(int parameterIndex,
Reader
reader,
 long length)
Sets the designated parameter to a
Reader
object.
void
BaseRowSet.
setClob
(int parameterIndex,
Clob
x)
Sets the designated parameter to the given
Clob
object in
 the Java programming language.
void
BaseRowSet.
setClob
(
String
parameterName,
Reader
reader)
Sets the designated parameter to a
Reader
object.
void
BaseRowSet.
setClob
(
String
parameterName,
Reader
reader,
 long length)
Sets the designated parameter to a
Reader
object.
void
BaseRowSet.
setClob
(
String
parameterName,
Clob
x)
Sets the designated parameter to the given
java.sql.Clob
object.
void
RowSetMetaDataImpl.
setColumnCount
(int columnCount)
Sets to the given number the number of columns in the
RowSet
object for which this
RowSetMetaDataImpl
object was created.
void
RowSetMetaDataImpl.
setColumnDisplaySize
(int columnIndex,
 int size)
Sets the normal maximum number of chars in the designated column
 to the given number.
void
RowSetMetaDataImpl.
setColumnLabel
(int columnIndex,
String
label)
Sets the suggested column label for use in printouts and
 displays, if any, to
label
.
void
RowSetMetaDataImpl.
setColumnName
(int columnIndex,
String
columnName)
Sets the column name of the designated column to the given name.
void
RowSetMetaDataImpl.
setColumnType
(int columnIndex,
 int SQLType)
Sets the SQL type code for values stored in the designated column
 to the given type code from the class
java.sql.Types
.
void
RowSetMetaDataImpl.
setColumnTypeName
(int columnIndex,
String
typeName)
Sets the type name used by the data source for values stored in the
 designated column to the given type name.
void
BaseRowSet.
setCommand
(
String
cmd)
Sets this
RowSet
object's
command
property to
 the given
String
object and clears the parameters, if any,
 that were set for the previous command.
void
BaseRowSet.
setConcurrency
(int concurrency)
Sets the concurrency for this
RowSet
object to
 the specified concurrency.
void
RowSetMetaDataImpl.
setCurrency
(int columnIndex,
 boolean property)
Sets whether a value stored in the designated column is a cash
 value to the given
boolean
.
void
BaseRowSet.
setDataSourceName
(
String
name)
Sets the
DataSource
name property for this
RowSet
object to the given logical name and sets this
RowSet
object's
 Url property to
null
.
void
BaseRowSet.
setDate
(int parameterIndex,
Date
x)
Sets the designated parameter to the given
java.sql.Date
value.
void
BaseRowSet.
setDate
(int parameterIndex,
Date
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Date
object.
void
BaseRowSet.
setDate
(
String
parameterName,
Date
x)
Sets the designated parameter to the given
java.sql.Date
value
 using the default time zone of the virtual machine that is running
 the application.
void
BaseRowSet.
setDate
(
String
parameterName,
Date
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Date
value,
 using the given
Calendar
object.
void
BaseRowSet.
setDouble
(int parameterIndex,
 double x)
Sets the designated parameter to the given
double
in the
 Java programming language.
void
BaseRowSet.
setDouble
(
String
parameterName,
 double x)
Sets the designated parameter to the given Java
double
value.
void
BaseRowSet.
setEscapeProcessing
(boolean enable)
Sets to the given
boolean
whether or not the driver will
 scan for escape syntax and do escape substitution before sending SQL
 statements to the database.
void
BaseRowSet.
setFetchDirection
(int direction)
Gives the driver a performance hint as to the direction in
 which the rows in this
RowSet
object will be
 processed.
void
BaseRowSet.
setFetchSize
(int rows)
Sets the fetch size for this
RowSet
object to the given number of
 rows.
void
FilteredRowSet.
setFilter
(
Predicate
p)
Applies the given
Predicate
object to this
FilteredRowSet
object.
void
BaseRowSet.
setFloat
(int parameterIndex,
 float x)
Sets the designated parameter to the given
float
in the
 Java programming language.
void
BaseRowSet.
setFloat
(
String
parameterName,
 float x)
Sets the designated parameter to the given Java
float
value.
void
BaseRowSet.
setInt
(int parameterIndex,
 int x)
Sets the designated parameter to an
int
in the Java
 programming language.
void
BaseRowSet.
setInt
(
String
parameterName,
 int x)
Sets the designated parameter to the given Java
int
value.
void
JoinRowSet.
setJoinType
(int joinType)
Allow the application to adjust the type of
JOIN
imposed
 on tables contained within the JoinRowSet object instance.
void
CachedRowSet.
setKeyColumns
(int[] keys)
Sets this
CachedRowSet
object's
keyCols
field with the given array of column numbers, which forms a key
 for uniquely identifying a row in this
CachedRowSet
object.
void
BaseRowSet.
setLong
(int parameterIndex,
 long x)
Sets the designated parameter to the given
long
in the Java
 programming language.
void
BaseRowSet.
setLong
(
String
parameterName,
 long x)
Sets the designated parameter to the given Java
long
value.
void
Joinable.
setMatchColumn
(int columnIdx)
Sets the designated column as the match column for this
RowSet
object.
void
Joinable.
setMatchColumn
(int[] columnIdxes)
Sets the designated columns as the match column for this
RowSet
object.
void
Joinable.
setMatchColumn
(
String
columnName)
Sets the designated column as the match column for this
RowSet
object.
void
Joinable.
setMatchColumn
(
String
[] columnNames)
Sets the designated columns as the match column for this
RowSet
object.
void
BaseRowSet.
setMaxFieldSize
(int max)
Sets the maximum number of bytes that can be used for a column
 value in this
RowSet
object to the given number.
void
BaseRowSet.
setMaxRows
(int max)
Sets the maximum number of rows that this
RowSet
object may contain to
 the given number.
void
CachedRowSet.
setMetaData
(
RowSetMetaData
md)
Sets the metadata for this
CachedRowSet
object with
 the given
RowSetMetaData
object.
void
BaseRowSet.
setNCharacterStream
(int parameterIndex,
Reader
value)
Sets the designated parameter in this
RowSet
object's command
 to a
Reader
object.
void
BaseRowSet.
setNCharacterStream
(int parameterIndex,
Reader
value,
 long length)
Sets the designated parameter to a
Reader
object.
void
BaseRowSet.
setNCharacterStream
(
String
parameterName,
Reader
value)
Sets the designated parameter to a
Reader
object.
void
BaseRowSet.
setNCharacterStream
(
String
parameterName,
Reader
value,
 long length)
Sets the designated parameter to a
Reader
object.
void
BaseRowSet.
setNClob
(int parameterIndex,
Reader
reader)
Sets the designated parameter to a
Reader
object.
void
BaseRowSet.
setNClob
(int parameterIndex,
Reader
reader,
 long length)
Sets the designated parameter to a
Reader
object.
void
BaseRowSet.
setNClob
(int parameterIndex,
NClob
value)
Sets the designated parameter to a
java.sql.NClob
object.
void
BaseRowSet.
setNClob
(
String
parameterName,
Reader
reader)
Sets the designated parameter to a
Reader
object.
void
BaseRowSet.
setNClob
(
String
parameterName,
Reader
reader,
 long length)
Sets the designated parameter to a
Reader
object.
void
BaseRowSet.
setNClob
(
String
parameterName,
NClob
value)
Sets the designated parameter to a
java.sql.NClob
object.
void
BaseRowSet.
setNString
(int parameterIndex,
String
value)
Sets the designated parameter to the given
String
object.
void
BaseRowSet.
setNString
(
String
parameterName,
String
value)
Sets the designated parameter to the given
String
object.
void
BaseRowSet.
setNull
(int parameterIndex,
 int sqlType)
Sets the designated parameter to SQL
NULL
.
void
BaseRowSet.
setNull
(int parameterIndex,
 int sqlType,
String
typeName)
Sets the designated parameter to SQL
NULL
.
void
BaseRowSet.
setNull
(
String
parameterName,
 int sqlType)
Sets the designated parameter to SQL
NULL
.
void
BaseRowSet.
setNull
(
String
parameterName,
 int sqlType,
String
typeName)
Sets the designated parameter to SQL
NULL
.
void
RowSetMetaDataImpl.
setNullable
(int columnIndex,
 int property)
Sets whether a value stored in the designated column can be set
 to
NULL
to the given constant from the interface
ResultSetMetaData
.
void
BaseRowSet.
setObject
(int parameterIndex,
Object
x)
Sets the designated parameter to an
Object
in the Java
 programming language.
void
BaseRowSet.
setObject
(int parameterIndex,
Object
x,
 int targetSqlType)
Sets the value of the designated parameter with the given
Object
value.
void
BaseRowSet.
setObject
(int parameterIndex,
Object
x,
 int targetSqlType,
 int scale)
Sets the designated parameter to an
Object
in the Java
 programming language.
void
BaseRowSet.
setObject
(
String
parameterName,
Object
x)
Sets the value of the designated parameter with the given object.
void
BaseRowSet.
setObject
(
String
parameterName,
Object
x,
 int targetSqlType)
Sets the value of the designated parameter with the given object.
void
BaseRowSet.
setObject
(
String
parameterName,
Object
x,
 int targetSqlType,
 int scale)
Sets the value of the designated parameter with the given object.
void
CachedRowSet.
setOriginalRow
()
Sets the current row in this
CachedRowSet
object as the original
 row.
void
CachedRowSet.
setPageSize
(int size)
Sets the
CachedRowSet
object's page-size.
void
RowSetMetaDataImpl.
setPrecision
(int columnIndex,
 int precision)
Sets the total number of decimal digits in a value stored in the
 designated column to the given number.
void
BaseRowSet.
setQueryTimeout
(int seconds)
Sets to the given number the maximum number of seconds the driver will
 wait for a query to execute.
void
BaseRowSet.
setRef
(int parameterIndex,
Ref
ref)
Sets the designated parameter to the given
Ref
object in
 the Java programming language.
void
BaseRowSet.
setRowId
(int parameterIndex,
RowId
x)
Sets the designated parameter to the given
java.sql.RowId
object.
void
BaseRowSet.
setRowId
(
String
parameterName,
RowId
x)
Sets the designated parameter to the given
java.sql.RowId
object.
void
RowSetMetaDataImpl.
setScale
(int columnIndex,
 int scale)
Sets the number of digits to the right of the decimal point in a value
 stored in the designated column to the given number.
void
RowSetMetaDataImpl.
setSchemaName
(int columnIndex,
String
schemaName)
Sets the designated column's table's schema name, if any, to
schemaName
.
void
RowSetMetaDataImpl.
setSearchable
(int columnIndex,
 boolean property)
Sets whether a value stored in the designated column can be used
 in a
WHERE
clause to the given
boolean
value.
void
BaseRowSet.
setShort
(int parameterIndex,
 short x)
Sets the designated parameter to the given
short
in the
 Java programming language.
void
BaseRowSet.
setShort
(
String
parameterName,
 short x)
Sets the designated parameter to the given Java
short
value.
void
BaseRowSet.
setShowDeleted
(boolean value)
Sets the property
showDeleted
to the given
boolean
value, which determines whether
 rows marked for deletion appear in the set of current rows.
void
CachedRowSet.
setShowDeleted
(boolean b)
Sets the property
showDeleted
to the given
boolean
value, which determines whether
 rows marked for deletion appear in the set of current rows.
void
JdbcRowSet.
setShowDeleted
(boolean b)
Sets the property
showDeleted
to the given
boolean
value.
void
RowSetMetaDataImpl.
setSigned
(int columnIndex,
 boolean property)
Sets whether a value stored in the designated column is a signed
 number to the given
boolean
.
void
BaseRowSet.
setSQLXML
(int parameterIndex,
SQLXML
xmlObject)
Sets the designated parameter to the given
java.sql.SQLXML
object.
void
BaseRowSet.
setSQLXML
(
String
parameterName,
SQLXML
xmlObject)
Sets the designated parameter to the given
java.sql.SQLXML
object.
void
BaseRowSet.
setString
(int parameterIndex,
String
x)
Sets the designated parameter to the given
String
value.
void
BaseRowSet.
setString
(
String
parameterName,
String
x)
Sets the designated parameter to the given Java
String
value.
void
CachedRowSet.
setSyncProvider
(
String
provider)
Sets the
SyncProvider
object for this
CachedRowSet
object to the one specified.
void
CachedRowSet.
setTableName
(
String
tabName)
Sets the identifier for the table from which this
CachedRowSet
object was derived to the given table name.
void
RowSetMetaDataImpl.
setTableName
(int columnIndex,
String
tableName)
Sets the name of the table from which the designated column
 was derived to the given table name.
void
BaseRowSet.
setTime
(int parameterIndex,
Time
x)
Sets the designated parameter to the given
java.sql.Time
value.
void
BaseRowSet.
setTime
(int parameterIndex,
Time
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Time
object.
void
BaseRowSet.
setTime
(
String
parameterName,
Time
x)
Sets the designated parameter to the given
java.sql.Time
value.
void
BaseRowSet.
setTime
(
String
parameterName,
Time
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Time
value,
 using the given
Calendar
object.
void
BaseRowSet.
setTimestamp
(int parameterIndex,
Timestamp
x)
Sets the designated parameter to the given
java.sql.Timestamp
value.
void
BaseRowSet.
setTimestamp
(int parameterIndex,
Timestamp
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Timestamp
object.
void
BaseRowSet.
setTimestamp
(
String
parameterName,
Timestamp
x)
Sets the designated parameter to the given
java.sql.Timestamp
value.
void
BaseRowSet.
setTimestamp
(
String
parameterName,
Timestamp
x,
Calendar
cal)
Sets the designated parameter to the given
java.sql.Timestamp
value,
 using the given
Calendar
object.
void
BaseRowSet.
setTransactionIsolation
(int level)
Sets the transaction isolation property for this JDBC
RowSet
object to the given
 constant.
void
BaseRowSet.
setType
(int type)
Sets the type for this
RowSet
object to the specified type.
void
BaseRowSet.
setUnicodeStream
(int parameterIndex,
InputStream
x,
 int length)
Deprecated.
getCharacterStream should be used in its place
void
BaseRowSet.
setUrl
(
String
url)
Sets the Url property for this
RowSet
object
 to the given
String
object and sets the dataSource name
 property to
null
.
void
BaseRowSet.
setURL
(int parameterIndex,
URL
x)
Sets the designated parameter to the given
java.net.URL
value.
CachedRowSet
JoinRowSet.
toCachedRowSet
()
Creates a new
CachedRowSet
object containing the
 data in this
JoinRowSet
object, which can be saved
 to a data source using the
SyncProvider
object for
 the
CachedRowSet
object.
Collection
<?>
CachedRowSet.
toCollection
()
Converts this
CachedRowSet
object to a
Collection
object that contains all of this
CachedRowSet
object's data.
Collection
<?>
CachedRowSet.
toCollection
(int column)
Converts the designated column in this
CachedRowSet
object
 to a
Collection
object.
Collection
<?>
CachedRowSet.
toCollection
(
String
column)
Converts the designated column in this
CachedRowSet
object
 to a
Collection
object.
void
CachedRowSet.
undoDelete
()
Cancels the deletion of the current row and notifies listeners that
 a row has changed.
void
CachedRowSet.
undoInsert
()
Immediately removes the current row from this
CachedRowSet
object if the row has been inserted, and also notifies listeners that a
 row has changed.
void
CachedRowSet.
undoUpdate
()
Immediately reverses the last update operation if the
 row has been modified.
void
Joinable.
unsetMatchColumn
(int columnIdx)
Unsets the designated column as the match column for this
RowSet
object.
void
Joinable.
unsetMatchColumn
(int[] columnIdxes)
Unsets the designated columns as the match column for this
RowSet
object.
void
Joinable.
unsetMatchColumn
(
String
columnName)
Unsets the designated column as the match column for this
RowSet
object.
void
Joinable.
unsetMatchColumn
(
String
[] columnName)
Unsets the designated columns as the match columns for this
RowSet
object.
<T> T
RowSetMetaDataImpl.
unwrap
(
Class
<T> iface)
Returns an object that implements the given interface to allow access to non-standard methods,
 or standard methods not exposed by the proxy.
void
WebRowSet.
writeXml
(
OutputStream
oStream)
Writes the data, properties, and metadata for this
WebRowSet
object
 to the given
OutputStream
object in XML format.
void
WebRowSet.
writeXml
(
Writer
writer)
Writes the data, properties, and metadata for this
WebRowSet
object
 to the given
Writer
object in XML format.
void
WebRowSet.
writeXml
(
ResultSet
rs,
OutputStream
oStream)
Populates this
WebRowSet
object with
 the contents of the given
ResultSet
object and writes its
 data, properties, and metadata
 to the given
OutputStream
object in XML format.
void
WebRowSet.
writeXml
(
ResultSet
rs,
Writer
writer)
Populates this
WebRowSet
object with
 the contents of the given
ResultSet
object and writes its
 data, properties, and metadata
 to the given
Writer
object in XML format.
Uses of
SQLException
in
javax.sql.rowset.serial
Subclasses of
SQLException
in
javax.sql.rowset.serial
Modifier and Type
Class
Description
class
SerialException
Indicates and an error with the serialization or de-serialization of
 SQL types such as
BLOB, CLOB, STRUCT or ARRAY
in
 addition to SQL types such as
DATALINK and JAVAOBJECT
Methods in
javax.sql.rowset.serial
that throw
SQLException
Modifier and Type
Method
Description
void
SerialArray.
free
()
This method frees the
SerialArray
object and releases the
 resources that it holds.
void
SerialBlob.
free
()
This method frees the
SerialBlob
object and releases the
 resources that it holds.
void
SerialClob.
free
()
This method frees the
SerialClob
object and releases the
 resources that it holds.
InputStream
SerialClob.
getAsciiStream
()
Retrieves the
CLOB
value designated by this
SerialClob
object as an ascii stream.
InputStream
SerialBlob.
getBinaryStream
(long pos,
 long length)
Returns an
InputStream
object that contains a partial
Blob
value, starting with the byte specified by pos, which is
 length bytes in length.
Reader
SerialClob.
getCharacterStream
(long pos,
 long length)
Returns a
Reader
object that contains a partial
SerialClob
value, starting
 with the character specified by pos, which is length characters in length.
long
SerialBlob.
position
(byte[] pattern,
 long start)
Returns the position in this
SerialBlob
object where
 the given pattern of bytes begins, starting the search at the
 specified position.
long
SerialBlob.
position
(
Blob
pattern,
 long start)
Returns the position in this
SerialBlob
object where
 the given
Blob
object begins, starting the search at the
 specified position.
long
SerialClob.
position
(
String
searchStr,
 long start)
Returns the position in this
SerialClob
object
 where the given
String
object begins, starting
 the search at the specified position.
long
SerialClob.
position
(
Clob
searchStr,
 long start)
Returns the position in this
SerialClob
object
 where the given
Clob
signature begins, starting
 the search at the specified position.
Array
SQLInputImpl.
readArray
()
Reads an SQL
ARRAY
value from the stream and
 returns it as an
Array
object in the Java programming
 language.
InputStream
SQLInputImpl.
readAsciiStream
()
Returns the next attribute in this
SQLInputImpl
object
 as a stream of ASCII characters.
BigDecimal
SQLInputImpl.
readBigDecimal
()
Retrieves the next attribute in this
SQLInputImpl
object
 as a
java.math.BigDecimal
.
InputStream
SQLInputImpl.
readBinaryStream
()
Returns the next attribute in this
SQLInputImpl
object
 as a stream of uninterpreted bytes.
Blob
SQLInputImpl.
readBlob
()
Retrieves the
BLOB
value at the head of this
SQLInputImpl
object as a
Blob
object
 in the Java programming language.
boolean
SQLInputImpl.
readBoolean
()
Retrieves the next attribute in this
SQLInputImpl
object as
 a
boolean
in the Java programming language.
byte
SQLInputImpl.
readByte
()
Retrieves the next attribute in this
SQLInputImpl
object as
 a
byte
in the Java programming language.
byte[]
SQLInputImpl.
readBytes
()
Retrieves the next attribute in this
SQLInputImpl
object
 as an array of bytes.
Reader
SQLInputImpl.
readCharacterStream
()
Retrieves the next attribute in this
SQLInputImpl
object
 as a stream of Unicode characters.
Clob
SQLInputImpl.
readClob
()
Retrieves the
CLOB
value at the head of this
SQLInputImpl
object as a
Clob
object
 in the Java programming language.
Date
SQLInputImpl.
readDate
()
Retrieves the next attribute in this
SQLInputImpl
as
 a
java.sql.Date
object.
double
SQLInputImpl.
readDouble
()
Retrieves the next attribute in this
SQLInputImpl
object
 as a
double
in the Java programming language.
float
SQLInputImpl.
readFloat
()
Retrieves the next attribute in this
SQLInputImpl
object
 as a
float
in the Java programming language.
int
SQLInputImpl.
readInt
()
Retrieves the next attribute in this
SQLInputImpl
object
 as an
int
in the Java programming language.
long
SQLInputImpl.
readLong
()
Retrieves the next attribute in this
SQLInputImpl
object
 as a
long
in the Java programming language.
NClob
SQLInputImpl.
readNClob
()
Reads an SQL
NCLOB
value from the stream and returns it as a
Clob
object in the Java programming language.
String
SQLInputImpl.
readNString
()
Reads the next attribute in the stream and returns it as a
String
in the Java programming language.
Object
SQLInputImpl.
readObject
()
Retrieves the value at the head of this
SQLInputImpl
object as an
Object
in the Java programming language.
Ref
SQLInputImpl.
readRef
()
Retrieves the value at the head of this
SQLInputImpl
object
 as a
Ref
object in the Java programming language.
RowId
SQLInputImpl.
readRowId
()
Reads an SQL
ROWID
value from the stream and returns it as a
RowId
object in the Java programming language.
short
SQLInputImpl.
readShort
()
Retrieves the next attribute in this
SQLInputImpl
object
 as a
short
in the Java programming language.
SQLXML
SQLInputImpl.
readSQLXML
()
Reads an SQL
XML
value from the stream and returns it as a
SQLXML
object in the Java programming language.
String
SQLInputImpl.
readString
()
Retrieves the next attribute in this
SQLInputImpl
object as
 a
String
in the Java programming language.
Time
SQLInputImpl.
readTime
()
Retrieves the next attribute in this
SQLInputImpl
object as
 a
java.sql.Time
object.
Timestamp
SQLInputImpl.
readTimestamp
()
Retrieves the next attribute in this
SQLInputImpl
object as
 a
java.sql.Timestamp
object.
URL
SQLInputImpl.
readURL
()
Reads an SQL
DATALINK
value from the stream and
 returns it as an
URL
object in the Java programming
 language.
OutputStream
SerialClob.
setAsciiStream
(long pos)
Retrieves a stream to be used to write Ascii characters to the
CLOB
value that this
SerialClob
object represents,
 starting at position
pos
.
OutputStream
SerialBlob.
setBinaryStream
(long pos)
Retrieves a stream that can be used to write to the
BLOB
value that this
Blob
object represents.
int
SerialBlob.
setBytes
(long pos,
 byte[] bytes)
Writes the given array of bytes to the
BLOB
value that
 this
Blob
object represents, starting at position
pos
, and returns the number of bytes written.
int
SerialBlob.
setBytes
(long pos,
 byte[] bytes,
 int offset,
 int length)
Writes all or part of the given
byte
array to the
BLOB
value that this
Blob
object represents
 and returns the number of bytes written.
Writer
SerialClob.
setCharacterStream
(long pos)
Retrieves a stream to be used to write a stream of Unicode characters
 to the
CLOB
value that this
SerialClob
object
 represents, at position
pos
.
boolean
SQLInputImpl.
wasNull
()
Ascertains whether the last value read from this
SQLInputImpl
object was
null
.
void
SQLOutputImpl.
writeArray
(
Array
x)
Writes an
Array
object in the Java
 programming language to this
SQLOutputImpl
object.
void
SQLOutputImpl.
writeAsciiStream
(
InputStream
x)
Writes a stream of ASCII characters to this
SQLOutputImpl
object.
void
SQLOutputImpl.
writeBigDecimal
(
BigDecimal
x)
Writes a
java.math.BigDecimal
object in the Java programming
 language to this
SQLOutputImpl
object.
void
SQLOutputImpl.
writeBinaryStream
(
InputStream
x)
Writes a stream of uninterpreted bytes to this
SQLOutputImpl
object.
void
SQLOutputImpl.
writeBlob
(
Blob
x)
Writes a
Blob
object in the Java programming language
 to this
SQLOutputImpl
object.
void
SQLOutputImpl.
writeBoolean
(boolean x)
Writes a
boolean
in the Java programming language
 to this
SQLOutputImpl
object.
void
SQLOutputImpl.
writeByte
(byte x)
Writes a
byte
in the Java programming language
 to this
SQLOutputImpl
object.
void
SQLOutputImpl.
writeBytes
(byte[] x)
Writes an array of
bytes
in the Java programming language
 to this
SQLOutputImpl
object.
void
SQLOutputImpl.
writeCharacterStream
(
Reader
x)
Writes a stream of Unicode characters to this
SQLOutputImpl
object.
void
SQLOutputImpl.
writeClob
(
Clob
x)
Writes a
Clob
object in the Java programming language
 to this
SQLOutputImpl
object.
void
SQLOutputImpl.
writeDate
(
Date
x)
Writes a
java.sql.Date
object in the Java programming
 language to this
SQLOutputImpl
object.
void
SQLOutputImpl.
writeDouble
(double x)
Writes a
double
in the Java programming language
 to this
SQLOutputImpl
object.
void
SQLOutputImpl.
writeFloat
(float x)
Writes a
float
in the Java programming language
 to this
SQLOutputImpl
object.
void
SQLOutputImpl.
writeInt
(int x)
Writes an
int
in the Java programming language
 to this
SQLOutputImpl
object.
void
SQLOutputImpl.
writeLong
(long x)
Writes a
long
in the Java programming language
 to this
SQLOutputImpl
object.
void
SQLOutputImpl.
writeNClob
(
NClob
x)
Writes an SQL
NCLOB
value to the stream.
void
SQLOutputImpl.
writeNString
(
String
x)
Writes the next attribute to the stream as a
String
in the Java programming language.
void
SQLOutputImpl.
writeObject
(
SQLData
x)
Writes to the stream the data contained in the given
SQLData
object.
void
SQLOutputImpl.
writeRef
(
Ref
x)
Writes a
Ref
object in the Java programming language
 to this
SQLOutputImpl
object.
void
SQLOutputImpl.
writeRowId
(
RowId
x)
Writes an SQL
ROWID
value to the stream.
void
SQLOutputImpl.
writeShort
(short x)
Writes a
short
in the Java programming language
 to this
SQLOutputImpl
object.
void
SQLOutputImpl.
writeSQLXML
(
SQLXML
x)
Writes an SQL
XML
value to the stream.
void
SQLOutputImpl.
writeString
(
String
x)
Writes a
String
in the Java programming language
 to this
SQLOutputImpl
object.
void
SQLOutputImpl.
writeStruct
(
Struct
x)
Writes a
Struct
object in the Java
 programming language to this
SQLOutputImpl
object.
void
SQLOutputImpl.
writeTime
(
Time
x)
Writes a
java.sql.Time
object in the Java programming
 language to this
SQLOutputImpl
object.
void
SQLOutputImpl.
writeTimestamp
(
Timestamp
x)
Writes a
java.sql.Timestamp
object in the Java programming
 language to this
SQLOutputImpl
object.
void
SQLOutputImpl.
writeURL
(
URL
url)
Writes an
java.sql.Type.DATALINK
object in the Java
 programming language to this
SQLOutputImpl
object.
Constructors in
javax.sql.rowset.serial
that throw
SQLException
Modifier
Constructor
Description
SerialArray
(
Array
array)
Constructs a new
SerialArray
object from the given
Array
object.
SerialArray
(
Array
array,
Map
<
String
,
Class
<?>> map)
Constructs a new
SerialArray
object from the given
Array
object, using the given type map for the custom
 mapping of each element when the elements are SQL UDTs.
SerialBlob
(byte[] b)
Constructs a
SerialBlob
object that is a serialized version of
 the given
byte
array.
SerialBlob
(
Blob
blob)
Constructs a
SerialBlob
object that is a serialized
 version of the given
Blob
object.
SerialClob
(char[] ch)
Constructs a
SerialClob
object that is a serialized version of
 the given
char
array.
SerialClob
(
Clob
clob)
Constructs a
SerialClob
object that is a serialized
 version of the given
Clob
object.
SerialRef
(
Ref
ref)
Constructs a
SerialRef
object from the given
Ref
object.
SQLInputImpl
(
Object
[] attributes,
Map
<
String
,
Class
<?>> map)
Creates an
SQLInputImpl
object initialized with the
 given array of attributes and the given type map.
SQLOutputImpl
(
Vector
<?> attributes,
Map
<
String
,
?> map)
Creates a new
SQLOutputImpl
object
 initialized with the given vector of attributes and
 type map.
Uses of
SQLException
in
javax.sql.rowset.spi
Subclasses of
SQLException
in
javax.sql.rowset.spi
Modifier and Type
Class
Description
class
SyncFactoryException
Indicates an error with
SyncFactory
mechanism.
class
SyncProviderException
Indicates an error with the
SyncProvider
mechanism.
Methods in
javax.sql.rowset.spi
that throw
SQLException
Modifier and Type
Method
Description
void
TransactionalWriter.
commit
()
Makes permanent all changes that have been performed by the
acceptChanges
method since the last call to either the
commit
or
rollback
methods.
Object
SyncResolver.
getConflictValue
(int index)
Retrieves the value in the designated column in the current row of this
SyncResolver
object, which is the value in the data source
 that caused a conflict.
Object
SyncResolver.
getConflictValue
(
String
columnName)
Retrieves the value in the designated column in the current row of this
SyncResolver
object, which is the value in the data source
 that caused a conflict.
boolean
SyncResolver.
nextConflict
()
Moves the cursor down from its current position to the next row that contains
 a conflict value.
boolean
SyncResolver.
previousConflict
()
Moves the cursor up from its current position to the previous conflict
 row in this
SyncResolver
object.
void
XmlReader.
readXML
(
WebRowSet
caller,
Reader
reader)
Reads and parses the given
WebRowSet
object from the given
 input stream in XML format.
void
TransactionalWriter.
rollback
()
Undoes all changes made in the current transaction.
void
TransactionalWriter.
rollback
(
Savepoint
s)
Undoes all changes made in the current transaction made prior to the given
Savepoint
object.
void
SyncResolver.
setResolvedValue
(int index,
Object
obj)
Sets
obj
as the value in column
index
in the current row of the
RowSet
object that is being synchronized.
void
SyncResolver.
setResolvedValue
(
String
columnName,
Object
obj)
Sets
obj
as the value in column
columnName
in the current row of the
RowSet
object that is being synchronized.
void
XmlWriter.
writeXML
(
WebRowSet
caller,
Writer
writer)
Writes the given
WebRowSet
object to the specified
java.io.Writer
output stream as an XML document.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.