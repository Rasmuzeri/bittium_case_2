ResultSet (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field
|
Constr |
Method
Detail:
Field
|
Constr |
Method
SEARCH
Module
java.sql
Package
java.sql
Interface ResultSet
All Superinterfaces:
AutoCloseable
,
Wrapper
All Known Subinterfaces:
CachedRowSet
,
FilteredRowSet
,
JdbcRowSet
,
JoinRowSet
,
RowSet
,
SyncResolver
,
WebRowSet
public interface
ResultSet
extends
Wrapper
,
AutoCloseable
A table of data representing a database result set, which
 is usually generated by executing a statement that queries the database.
A
ResultSet
object  maintains a cursor pointing
 to its current row of data.  Initially the cursor is positioned
 before the first row. The
next
method moves the
 cursor to the next row, and because it returns
false
when there are no more rows in the
ResultSet
object,
 it can be used in a
while
loop to iterate through
 the result set.
A default
ResultSet
object is not updatable and
 has a cursor that moves forward only.  Thus, you can
 iterate through it only once and only from the first row to the
 last row. It is possible to
 produce
ResultSet
objects that are scrollable and/or
 updatable.  The following code fragment, in which
con
is a valid
Connection
object, illustrates how to make
 a result set that is scrollable and insensitive to updates by others, and
 that is updatable. See
ResultSet
fields for other
 options.
Statement stmt = con.createStatement(
                                      ResultSet.TYPE_SCROLL_INSENSITIVE,
                                      ResultSet.CONCUR_UPDATABLE);
       ResultSet rs = stmt.executeQuery("SELECT a, b FROM TABLE2");
       // rs will be scrollable, will not show changes made by others,
       // and will be updatable
The
ResultSet
interface provides
getter
methods (
getBoolean
,
getLong
, and so on)
 for retrieving column values from the current row.
 Values can be retrieved using either the index number of the
 column or the name of the column.  In general, using the
 column index will be more efficient.  Columns are numbered from 1.
 For maximum portability, result set columns within each row should be
 read in left-to-right order, and each column should be read only once.
For the getter methods, a JDBC driver attempts
 to convert the underlying data to the Java type specified in the
 getter method and returns a suitable Java value.  The JDBC specification
 has a table showing the allowable mappings from SQL types to Java types
 that can be used by the
ResultSet
getter methods.
Column names used as input to getter methods are case
 insensitive.  When a getter method is called  with
 a column name and several columns have the same name,
 the value of the first matching column will be returned.
 The column name option is
 designed to be used when column names are used in the SQL
 query that generated the result set.
 For columns that are NOT explicitly named in the query, it
 is best to use column numbers. If column names are used, the
 programmer should take care to guarantee that they uniquely refer to
 the intended columns, which can be assured with the SQL
AS
clause.
A set of updater methods were added to this interface
 in the JDBC 2.0 API (Java 2 SDK,
 Standard Edition, version 1.2). The comments regarding parameters
 to the getter methods also apply to parameters to the
 updater methods.
The updater methods may be used in two ways:
to update a column value in the current row.  In a scrollable
ResultSet
object, the cursor can be moved backwards
     and forwards, to an absolute position, or to a position
     relative to the current row.
     The following code fragment updates the
NAME
column
     in the fifth row of the
ResultSet
object
rs
and then uses the method
updateRow
to update the data source table from which
rs
was derived.
rs.absolute(5); // moves the cursor to the fifth row of rs
       rs.updateString("NAME", "AINSWORTH"); // updates the
          //
NAME
column of row 5 to be
AINSWORTH
rs.updateRow(); // updates the row in the data source
to insert column values into the insert row.  An updatable
ResultSet
object has a special row associated with
     it that serves as a staging area for building a row to be inserted.
     The following code fragment moves the cursor to the insert row, builds
     a three-column row, and inserts it into
rs
and into
     the data source table using the method
insertRow
.
rs.moveToInsertRow(); // moves cursor to the insert row
       rs.updateString(1, "AINSWORTH"); // updates the
          // first column of the insert row to be
AINSWORTH
rs.updateInt(2,35); // updates the second column to be
35
rs.updateBoolean(3, true); // updates the third column to
true
rs.insertRow();
       rs.moveToCurrentRow();
A
ResultSet
object is automatically closed when the
Statement
object that
 generated it is closed, re-executed, or used
 to retrieve the next result from a sequence of multiple results.
The number, types and properties of a
ResultSet
object's columns are provided by the
ResultSetMetaData
object returned by the
ResultSet.getMetaData
method.
Since:
1.1
See Also:
Statement.executeQuery(java.lang.String)
Statement.getResultSet()
ResultSetMetaData
Field Summary
Fields
Modifier and Type
Field
Description
static final int
CLOSE_CURSORS_AT_COMMIT
The constant indicating that open
ResultSet
objects with this
 holdability will be closed when the current transaction is committed.
static final int
CONCUR_READ_ONLY
The constant indicating the concurrency mode for a
ResultSet
object that may NOT be updated.
static final int
CONCUR_UPDATABLE
The constant indicating the concurrency mode for a
ResultSet
object that may be updated.
static final int
FETCH_FORWARD
The constant indicating that the rows in a result set will be
 processed in a forward direction; first-to-last.
static final int
FETCH_REVERSE
The constant indicating that the rows in a result set will be
 processed in a reverse direction; last-to-first.
static final int
FETCH_UNKNOWN
The constant indicating that the order in which rows in a
 result set will be processed is unknown.
static final int
HOLD_CURSORS_OVER_COMMIT
The constant indicating that open
ResultSet
objects with this
 holdability will remain open when the current transaction is committed.
static final int
TYPE_FORWARD_ONLY
The constant indicating the type for a
ResultSet
object
 whose cursor may move only forward.
static final int
TYPE_SCROLL_INSENSITIVE
The constant indicating the type for a
ResultSet
object
 that is scrollable but generally not sensitive to changes to the data
 that underlies the
ResultSet
.
static final int
TYPE_SCROLL_SENSITIVE
The constant indicating the type for a
ResultSet
object
 that is scrollable and generally sensitive to changes to the data
 that underlies the
ResultSet
.
Method Summary
All Methods
Instance Methods
Abstract Methods
Default Methods
Deprecated Methods
Modifier and Type
Method
Description
boolean
absolute
(int row)
Moves the cursor to the given row number in
 this
ResultSet
object.
void
afterLast
()
Moves the cursor to the end of
 this
ResultSet
object, just after the
 last row.
void
beforeFirst
()
Moves the cursor to the front of
 this
ResultSet
object, just before the
 first row.
void
cancelRowUpdates
()
Cancels the updates made to the current row in this
ResultSet
object.
void
clearWarnings
()
Clears all warnings reported on this
ResultSet
object.
void
close
()
Releases this
ResultSet
object's database and
 JDBC resources immediately instead of waiting for
 this to happen when it is automatically closed.
void
deleteRow
()
Deletes the current row from this
ResultSet
object
 and from the underlying database.
int
findColumn
(
String
columnLabel)
Maps the given
ResultSet
column label to its
ResultSet
column index.
boolean
first
()
Moves the cursor to the first row in
 this
ResultSet
object.
Array
getArray
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as an
Array
object
 in the Java programming language.
Array
getArray
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as an
Array
object
 in the Java programming language.
InputStream
getAsciiStream
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a stream of ASCII characters.
InputStream
getAsciiStream
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a stream of
 ASCII characters.
BigDecimal
getBigDecimal
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.math.BigDecimal
with full precision.
BigDecimal
getBigDecimal
(int columnIndex,
 int scale)
Deprecated.
Use
getBigDecimal(int columnIndex)
or
getBigDecimal(String columnLabel)
BigDecimal
getBigDecimal
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.math.BigDecimal
with full precision.
BigDecimal
getBigDecimal
(
String
columnLabel,
 int scale)
Deprecated.
Use
getBigDecimal(int columnIndex)
or
getBigDecimal(String columnLabel)
InputStream
getBinaryStream
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a  stream of
 uninterpreted bytes.
InputStream
getBinaryStream
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a stream of uninterpreted
byte
s.
Blob
getBlob
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
Blob
object
 in the Java programming language.
Blob
getBlob
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
Blob
object
 in the Java programming language.
boolean
getBoolean
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
boolean
in the Java programming language.
boolean
getBoolean
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
boolean
in the Java programming language.
byte
getByte
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
byte
in the Java programming language.
byte
getByte
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
byte
in the Java programming language.
byte[]
getBytes
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
byte
array in the Java programming language.
byte[]
getBytes
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
byte
array in the Java programming language.
Reader
getCharacterStream
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.io.Reader
object.
Reader
getCharacterStream
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.io.Reader
object.
Clob
getClob
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
Clob
object
 in the Java programming language.
Clob
getClob
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
Clob
object
 in the Java programming language.
int
getConcurrency
()
Retrieves the concurrency mode of this
ResultSet
object.
String
getCursorName
()
Retrieves the name of the SQL cursor used by this
ResultSet
object.
Date
getDate
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
java.sql.Date
object in the Java programming language.
Date
getDate
(int columnIndex,
Calendar
cal)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.sql.Date
object
 in the Java programming language.
Date
getDate
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
java.sql.Date
object in the Java programming language.
Date
getDate
(
String
columnLabel,
Calendar
cal)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.sql.Date
object
 in the Java programming language.
double
getDouble
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
double
in the Java programming language.
double
getDouble
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
double
in the Java programming language.
int
getFetchDirection
()
Retrieves the fetch direction for this
ResultSet
object.
int
getFetchSize
()
Retrieves the fetch size for this
ResultSet
object.
float
getFloat
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
float
in the Java programming language.
float
getFloat
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
float
in the Java programming language.
int
getHoldability
()
Retrieves the holdability of this
ResultSet
object
int
getInt
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 an
int
in the Java programming language.
int
getInt
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 an
int
in the Java programming language.
long
getLong
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
long
in the Java programming language.
long
getLong
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
long
in the Java programming language.
ResultSetMetaData
getMetaData
()
Retrieves the  number, types and properties of
 this
ResultSet
object's columns.
Reader
getNCharacterStream
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.io.Reader
object.
Reader
getNCharacterStream
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.io.Reader
object.
NClob
getNClob
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
NClob
object
 in the Java programming language.
NClob
getNClob
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
NClob
object
 in the Java programming language.
String
getNString
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
String
in the Java programming language.
String
getNString
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
String
in the Java programming language.
Object
getObject
(int columnIndex)
Gets the value of the designated column in the current row
 of this
ResultSet
object as
 an
Object
in the Java programming language.
<T> T
getObject
(int columnIndex,
Class
<T> type)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object and will convert from the
 SQL type of the column to the requested Java data type, if the
 conversion is supported.
Object
getObject
(int columnIndex,
Map
<
String
,
Class
<?>> map)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as an
Object
in the Java programming language.
Object
getObject
(
String
columnLabel)
Gets the value of the designated column in the current row
 of this
ResultSet
object as
 an
Object
in the Java programming language.
<T> T
getObject
(
String
columnLabel,
Class
<T> type)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object and will convert from the
 SQL type of the column to the requested Java data type, if the
 conversion is supported.
Object
getObject
(
String
columnLabel,
Map
<
String
,
Class
<?>> map)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as an
Object
in the Java programming language.
Ref
getRef
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
Ref
object
 in the Java programming language.
Ref
getRef
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
Ref
object
 in the Java programming language.
int
getRow
()
Retrieves the current row number.
RowId
getRowId
(int columnIndex)
Retrieves the value of the designated column in the current row of this
ResultSet
object as a
java.sql.RowId
object in the Java
 programming language.
RowId
getRowId
(
String
columnLabel)
Retrieves the value of the designated column in the current row of this
ResultSet
object as a
java.sql.RowId
object in the Java
 programming language.
short
getShort
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
short
in the Java programming language.
short
getShort
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
short
in the Java programming language.
SQLXML
getSQLXML
(int columnIndex)
Retrieves the value of the designated column in  the current row of
  this
ResultSet
as a
java.sql.SQLXML
object in the Java programming language.
SQLXML
getSQLXML
(
String
columnLabel)
Retrieves the value of the designated column in  the current row of
  this
ResultSet
as a
java.sql.SQLXML
object in the Java programming language.
Statement
getStatement
()
Retrieves the
Statement
object that produced this
ResultSet
object.
String
getString
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
String
in the Java programming language.
String
getString
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
String
in the Java programming language.
Time
getTime
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
java.sql.Time
object in the Java programming language.
Time
getTime
(int columnIndex,
Calendar
cal)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.sql.Time
object
 in the Java programming language.
Time
getTime
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
java.sql.Time
object in the Java programming language.
Time
getTime
(
String
columnLabel,
Calendar
cal)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.sql.Time
object
 in the Java programming language.
Timestamp
getTimestamp
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
java.sql.Timestamp
object in the Java programming language.
Timestamp
getTimestamp
(int columnIndex,
Calendar
cal)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.sql.Timestamp
object
 in the Java programming language.
Timestamp
getTimestamp
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
java.sql.Timestamp
object in the Java programming language.
Timestamp
getTimestamp
(
String
columnLabel,
Calendar
cal)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.sql.Timestamp
object
 in the Java programming language.
int
getType
()
Retrieves the type of this
ResultSet
object.
InputStream
getUnicodeStream
(int columnIndex)
Deprecated.
use
getCharacterStream
in place of
getUnicodeStream
InputStream
getUnicodeStream
(
String
columnLabel)
Deprecated.
use
getCharacterStream
instead
URL
getURL
(int columnIndex)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.net.URL
object in the Java programming language.
URL
getURL
(
String
columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.net.URL
object in the Java programming language.
SQLWarning
getWarnings
()
Retrieves the first warning reported by calls on this
ResultSet
object.
void
insertRow
()
Inserts the contents of the insert row into this
ResultSet
object and into the database.
boolean
isAfterLast
()
Retrieves whether the cursor is after the last row in
 this
ResultSet
object.
boolean
isBeforeFirst
()
Retrieves whether the cursor is before the first row in
 this
ResultSet
object.
boolean
isClosed
()
Retrieves whether this
ResultSet
object has been closed.
boolean
isFirst
()
Retrieves whether the cursor is on the first row of
 this
ResultSet
object.
boolean
isLast
()
Retrieves whether the cursor is on the last row of
 this
ResultSet
object.
boolean
last
()
Moves the cursor to the last row in
 this
ResultSet
object.
void
moveToCurrentRow
()
Moves the cursor to the remembered cursor position, usually the
 current row.
void
moveToInsertRow
()
Moves the cursor to the insert row.
boolean
next
()
Moves the cursor forward one row from its current position.
boolean
previous
()
Moves the cursor to the previous row in this
ResultSet
object.
void
refreshRow
()
Refreshes the current row with its most recent value in
 the database.
boolean
relative
(int rows)
Moves the cursor a relative number of rows, either positive or negative.
boolean
rowDeleted
()
Retrieves whether a row has been deleted.
boolean
rowInserted
()
Retrieves whether the current row has had an insertion.
boolean
rowUpdated
()
Retrieves whether the current row has been updated.
void
setFetchDirection
(int direction)
Gives a hint as to the direction in which the rows in this
ResultSet
object will be processed.
void
setFetchSize
(int rows)
Gives the JDBC driver a hint as to the number of rows that should
 be fetched from the database when more rows are needed for this
ResultSet
object.
void
updateArray
(int columnIndex,
Array
x)
Updates the designated column with a
java.sql.Array
value.
void
updateArray
(
String
columnLabel,
Array
x)
Updates the designated column with a
java.sql.Array
value.
void
updateAsciiStream
(int columnIndex,
InputStream
x)
Updates the designated column with an ascii stream value.
void
updateAsciiStream
(int columnIndex,
InputStream
x,
 int length)
Updates the designated column with an ascii stream value, which will have
 the specified number of bytes.
void
updateAsciiStream
(int columnIndex,
InputStream
x,
 long length)
Updates the designated column with an ascii stream value, which will have
 the specified number of bytes.
void
updateAsciiStream
(
String
columnLabel,
InputStream
x)
Updates the designated column with an ascii stream value.
void
updateAsciiStream
(
String
columnLabel,
InputStream
x,
 int length)
Updates the designated column with an ascii stream value, which will have
 the specified number of bytes.
void
updateAsciiStream
(
String
columnLabel,
InputStream
x,
 long length)
Updates the designated column with an ascii stream value, which will have
 the specified number of bytes.
void
updateBigDecimal
(int columnIndex,
BigDecimal
x)
Updates the designated column with a
java.math.BigDecimal
value.
void
updateBigDecimal
(
String
columnLabel,
BigDecimal
x)
Updates the designated column with a
java.sql.BigDecimal
value.
void
updateBinaryStream
(int columnIndex,
InputStream
x)
Updates the designated column with a binary stream value.
void
updateBinaryStream
(int columnIndex,
InputStream
x,
 int length)
Updates the designated column with a binary stream value, which will have
 the specified number of bytes.
void
updateBinaryStream
(int columnIndex,
InputStream
x,
 long length)
Updates the designated column with a binary stream value, which will have
 the specified number of bytes.
void
updateBinaryStream
(
String
columnLabel,
InputStream
x)
Updates the designated column with a binary stream value.
void
updateBinaryStream
(
String
columnLabel,
InputStream
x,
 int length)
Updates the designated column with a binary stream value, which will have
 the specified number of bytes.
void
updateBinaryStream
(
String
columnLabel,
InputStream
x,
 long length)
Updates the designated column with a binary stream value, which will have
 the specified number of bytes.
void
updateBlob
(int columnIndex,
InputStream
inputStream)
Updates the designated column using the given input stream.
void
updateBlob
(int columnIndex,
InputStream
inputStream,
 long length)
Updates the designated column using the given input stream, which
 will have the specified number of bytes.
void
updateBlob
(int columnIndex,
Blob
x)
Updates the designated column with a
java.sql.Blob
value.
void
updateBlob
(
String
columnLabel,
InputStream
inputStream)
Updates the designated column using the given input stream.
void
updateBlob
(
String
columnLabel,
InputStream
inputStream,
 long length)
Updates the designated column using the given input stream, which
 will have the specified number of bytes.
void
updateBlob
(
String
columnLabel,
Blob
x)
Updates the designated column with a
java.sql.Blob
value.
void
updateBoolean
(int columnIndex,
 boolean x)
Updates the designated column with a
boolean
value.
void
updateBoolean
(
String
columnLabel,
 boolean x)
Updates the designated column with a
boolean
value.
void
updateByte
(int columnIndex,
 byte x)
Updates the designated column with a
byte
value.
void
updateByte
(
String
columnLabel,
 byte x)
Updates the designated column with a
byte
value.
void
updateBytes
(int columnIndex,
 byte[] x)
Updates the designated column with a
byte
array value.
void
updateBytes
(
String
columnLabel,
 byte[] x)
Updates the designated column with a byte array value.
void
updateCharacterStream
(int columnIndex,
Reader
x)
Updates the designated column with a character stream value.
void
updateCharacterStream
(int columnIndex,
Reader
x,
 int length)
Updates the designated column with a character stream value, which will have
 the specified number of bytes.
void
updateCharacterStream
(int columnIndex,
Reader
x,
 long length)
Updates the designated column with a character stream value, which will have
 the specified number of bytes.
void
updateCharacterStream
(
String
columnLabel,
Reader
reader)
Updates the designated column with a character stream value.
void
updateCharacterStream
(
String
columnLabel,
Reader
reader,
 int length)
Updates the designated column with a character stream value, which will have
 the specified number of bytes.
void
updateCharacterStream
(
String
columnLabel,
Reader
reader,
 long length)
Updates the designated column with a character stream value, which will have
 the specified number of bytes.
void
updateClob
(int columnIndex,
Reader
reader)
Updates the designated column using the given
Reader
object.
void
updateClob
(int columnIndex,
Reader
reader,
 long length)
Updates the designated column using the given
Reader
object, which is the given number of characters long.
void
updateClob
(int columnIndex,
Clob
x)
Updates the designated column with a
java.sql.Clob
value.
void
updateClob
(
String
columnLabel,
Reader
reader)
Updates the designated column using the given
Reader
object.
void
updateClob
(
String
columnLabel,
Reader
reader,
 long length)
Updates the designated column using the given
Reader
object, which is the given number of characters long.
void
updateClob
(
String
columnLabel,
Clob
x)
Updates the designated column with a
java.sql.Clob
value.
void
updateDate
(int columnIndex,
Date
x)
Updates the designated column with a
java.sql.Date
value.
void
updateDate
(
String
columnLabel,
Date
x)
Updates the designated column with a
java.sql.Date
value.
void
updateDouble
(int columnIndex,
 double x)
Updates the designated column with a
double
value.
void
updateDouble
(
String
columnLabel,
 double x)
Updates the designated column with a
double
value.
void
updateFloat
(int columnIndex,
 float x)
Updates the designated column with a
float
value.
void
updateFloat
(
String
columnLabel,
 float x)
Updates the designated column with a
float
value.
void
updateInt
(int columnIndex,
 int x)
Updates the designated column with an
int
value.
void
updateInt
(
String
columnLabel,
 int x)
Updates the designated column with an
int
value.
void
updateLong
(int columnIndex,
 long x)
Updates the designated column with a
long
value.
void
updateLong
(
String
columnLabel,
 long x)
Updates the designated column with a
long
value.
void
updateNCharacterStream
(int columnIndex,
Reader
x)
Updates the designated column with a character stream value.
void
updateNCharacterStream
(int columnIndex,
Reader
x,
 long length)
Updates the designated column with a character stream value, which will have
 the specified number of bytes.
void
updateNCharacterStream
(
String
columnLabel,
Reader
reader)
Updates the designated column with a character stream value.
void
updateNCharacterStream
(
String
columnLabel,
Reader
reader,
 long length)
Updates the designated column with a character stream value, which will have
 the specified number of bytes.
void
updateNClob
(int columnIndex,
Reader
reader)
Updates the designated column using the given
Reader
The data will be read from the stream
 as needed until end-of-stream is reached.
void
updateNClob
(int columnIndex,
Reader
reader,
 long length)
Updates the designated column using the given
Reader
object, which is the given number of characters long.
void
updateNClob
(int columnIndex,
NClob
nClob)
Updates the designated column with a
java.sql.NClob
value.
void
updateNClob
(
String
columnLabel,
Reader
reader)
Updates the designated column using the given
Reader
object.
void
updateNClob
(
String
columnLabel,
Reader
reader,
 long length)
Updates the designated column using the given
Reader
object, which is the given number of characters long.
void
updateNClob
(
String
columnLabel,
NClob
nClob)
Updates the designated column with a
java.sql.NClob
value.
void
updateNString
(int columnIndex,
String
nString)
Updates the designated column with a
String
value.
void
updateNString
(
String
columnLabel,
String
nString)
Updates the designated column with a
String
value.
void
updateNull
(int columnIndex)
Updates the designated column with a
null
value.
void
updateNull
(
String
columnLabel)
Updates the designated column with a
null
value.
void
updateObject
(int columnIndex,
Object
x)
Updates the designated column with an
Object
value.
void
updateObject
(int columnIndex,
Object
x,
 int scaleOrLength)
Updates the designated column with an
Object
value.
default void
updateObject
(int columnIndex,
Object
x,
SQLType
targetSqlType)
Updates the designated column with an
Object
value.
default void
updateObject
(int columnIndex,
Object
x,
SQLType
targetSqlType,
 int scaleOrLength)
Updates the designated column with an
Object
value.
void
updateObject
(
String
columnLabel,
Object
x)
Updates the designated column with an
Object
value.
void
updateObject
(
String
columnLabel,
Object
x,
 int scaleOrLength)
Updates the designated column with an
Object
value.
default void
updateObject
(
String
columnLabel,
Object
x,
SQLType
targetSqlType)
Updates the designated column with an
Object
value.
default void
updateObject
(
String
columnLabel,
Object
x,
SQLType
targetSqlType,
 int scaleOrLength)
Updates the designated column with an
Object
value.
void
updateRef
(int columnIndex,
Ref
x)
Updates the designated column with a
java.sql.Ref
value.
void
updateRef
(
String
columnLabel,
Ref
x)
Updates the designated column with a
java.sql.Ref
value.
void
updateRow
()
Updates the underlying database with the new contents of the
 current row of this
ResultSet
object.
void
updateRowId
(int columnIndex,
RowId
x)
Updates the designated column with a
RowId
value.
void
updateRowId
(
String
columnLabel,
RowId
x)
Updates the designated column with a
RowId
value.
void
updateShort
(int columnIndex,
 short x)
Updates the designated column with a
short
value.
void
updateShort
(
String
columnLabel,
 short x)
Updates the designated column with a
short
value.
void
updateSQLXML
(int columnIndex,
SQLXML
xmlObject)
Updates the designated column with a
java.sql.SQLXML
value.
void
updateSQLXML
(
String
columnLabel,
SQLXML
xmlObject)
Updates the designated column with a
java.sql.SQLXML
value.
void
updateString
(int columnIndex,
String
x)
Updates the designated column with a
String
value.
void
updateString
(
String
columnLabel,
String
x)
Updates the designated column with a
String
value.
void
updateTime
(int columnIndex,
Time
x)
Updates the designated column with a
java.sql.Time
value.
void
updateTime
(
String
columnLabel,
Time
x)
Updates the designated column with a
java.sql.Time
value.
void
updateTimestamp
(int columnIndex,
Timestamp
x)
Updates the designated column with a
java.sql.Timestamp
value.
void
updateTimestamp
(
String
columnLabel,
Timestamp
x)
Updates the designated column with a
java.sql.Timestamp
value.
boolean
wasNull
()
Reports whether
 the last column read had a value of SQL
NULL
.
Methods declared in interface java.sql.
Wrapper
isWrapperFor
,
unwrap
Field Details
FETCH_FORWARD
static final
int
FETCH_FORWARD
The constant indicating that the rows in a result set will be
 processed in a forward direction; first-to-last.
 This constant is used by the method
setFetchDirection
as a hint to the driver, which the driver may ignore.
Since:
1.2
See Also:
Constant Field Values
FETCH_REVERSE
static final
int
FETCH_REVERSE
The constant indicating that the rows in a result set will be
 processed in a reverse direction; last-to-first.
 This constant is used by the method
setFetchDirection
as a hint to the driver, which the driver may ignore.
Since:
1.2
See Also:
Constant Field Values
FETCH_UNKNOWN
static final
int
FETCH_UNKNOWN
The constant indicating that the order in which rows in a
 result set will be processed is unknown.
 This constant is used by the method
setFetchDirection
as a hint to the driver, which the driver may ignore.
See Also:
Constant Field Values
TYPE_FORWARD_ONLY
static final
int
TYPE_FORWARD_ONLY
The constant indicating the type for a
ResultSet
object
 whose cursor may move only forward.
Since:
1.2
See Also:
Constant Field Values
TYPE_SCROLL_INSENSITIVE
static final
int
TYPE_SCROLL_INSENSITIVE
The constant indicating the type for a
ResultSet
object
 that is scrollable but generally not sensitive to changes to the data
 that underlies the
ResultSet
.
Since:
1.2
See Also:
Constant Field Values
TYPE_SCROLL_SENSITIVE
static final
int
TYPE_SCROLL_SENSITIVE
The constant indicating the type for a
ResultSet
object
 that is scrollable and generally sensitive to changes to the data
 that underlies the
ResultSet
.
Since:
1.2
See Also:
Constant Field Values
CONCUR_READ_ONLY
static final
int
CONCUR_READ_ONLY
The constant indicating the concurrency mode for a
ResultSet
object that may NOT be updated.
Since:
1.2
See Also:
Constant Field Values
CONCUR_UPDATABLE
static final
int
CONCUR_UPDATABLE
The constant indicating the concurrency mode for a
ResultSet
object that may be updated.
Since:
1.2
See Also:
Constant Field Values
HOLD_CURSORS_OVER_COMMIT
static final
int
HOLD_CURSORS_OVER_COMMIT
The constant indicating that open
ResultSet
objects with this
 holdability will remain open when the current transaction is committed.
Since:
1.4
See Also:
Constant Field Values
CLOSE_CURSORS_AT_COMMIT
static final
int
CLOSE_CURSORS_AT_COMMIT
The constant indicating that open
ResultSet
objects with this
 holdability will be closed when the current transaction is committed.
Since:
1.4
See Also:
Constant Field Values
Method Details
next
boolean
next
()
      throws
SQLException
Moves the cursor forward one row from its current position.
 A
ResultSet
cursor is initially positioned
 before the first row; the first call to the method
next
makes the first row the current row; the
 second call makes the second row the current row, and so on.
When a call to the
next
method returns
false
,
 the cursor is positioned after the last row. Any
 invocation of a
ResultSet
method which requires a
 current row will result in a
SQLException
being thrown.
  If the result set type is
TYPE_FORWARD_ONLY
, it is vendor specified
 whether their JDBC driver implementation will return
false
or
  throw an
SQLException
on a
 subsequent call to
next
.
If an input stream is open for the current row, a call
 to the method
next
will
 implicitly close it. A
ResultSet
object's
 warning chain is cleared when a new row is read.
Returns:
true
if the new current row is valid;
false
if there are no more rows
Throws:
SQLException
- if a database access error occurs or this method is
         called on a closed result set
close
void
close
()
    throws
SQLException
Releases this
ResultSet
object's database and
 JDBC resources immediately instead of waiting for
 this to happen when it is automatically closed.
The closing of a
ResultSet
object does
not
close the
Blob
,
Clob
or
NClob
objects created by the
ResultSet
.
Blob
,
Clob
or
NClob
objects remain valid for at least the duration of the
 transaction in which they are created, unless their
free
method is invoked.
When a
ResultSet
is closed, any
ResultSetMetaData
instances that were created by calling the
getMetaData
method remain accessible.
Note:
A
ResultSet
object
 is automatically closed by the
Statement
object that generated it when
 that
Statement
object is closed,
 re-executed, or is used to retrieve the next result from a
 sequence of multiple results.
Calling the method
close
on a
ResultSet
object that is already closed is a no-op.
Specified by:
close
in interface
AutoCloseable
Throws:
SQLException
- if a database access error occurs
wasNull
boolean
wasNull
()
         throws
SQLException
Reports whether
 the last column read had a value of SQL
NULL
.
 Note that you must first call one of the getter methods
 on a column to try to read its value and then call
 the method
wasNull
to see if the value read was
 SQL
NULL
.
Returns:
true
if the last column value read was SQL
NULL
and
false
otherwise
Throws:
SQLException
- if a database access error occurs or this method is
         called on a closed result set
getString
String
getString
(int columnIndex)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
String
in the Java programming language.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
null
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getBoolean
boolean
getBoolean
(int columnIndex)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
boolean
in the Java programming language.
If the designated column has a datatype of CHAR or VARCHAR
 and contains a "0" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT
 and contains  a 0, a value of
false
is returned.  If the designated column has a datatype
 of CHAR or VARCHAR
 and contains a "1" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT
 and contains  a 1, a value of
true
is returned.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
false
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getByte
byte
getByte
(int columnIndex)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
byte
in the Java programming language.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
0
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getShort
short
getShort
(int columnIndex)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
short
in the Java programming language.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
0
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getInt
int
getInt
(int columnIndex)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 an
int
in the Java programming language.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
0
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getLong
long
getLong
(int columnIndex)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
long
in the Java programming language.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
0
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getFloat
float
getFloat
(int columnIndex)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
float
in the Java programming language.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
0
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getDouble
double
getDouble
(int columnIndex)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
double
in the Java programming language.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
0
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getBigDecimal
@Deprecated
(
since
="1.2")
BigDecimal
getBigDecimal
(int columnIndex,
 int scale)
throws
SQLException
Deprecated.
Use
getBigDecimal(int columnIndex)
or
getBigDecimal(String columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
java.sql.BigDecimal
in the Java programming language.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
scale
- the number of digits to the right of the decimal point
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
null
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs or this method is
            called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
getBytes
byte[]
getBytes
(int columnIndex)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
byte
array in the Java programming language.
 The bytes represent the raw values returned by the driver.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
null
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getDate
Date
getDate
(int columnIndex)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
java.sql.Date
object in the Java programming language.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
null
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getTime
Time
getTime
(int columnIndex)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
java.sql.Time
object in the Java programming language.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
null
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getTimestamp
Timestamp
getTimestamp
(int columnIndex)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
java.sql.Timestamp
object in the Java programming language.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
null
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getAsciiStream
InputStream
getAsciiStream
(int columnIndex)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a stream of ASCII characters. The value can then be read in chunks from the
 stream. This method is particularly
 suitable for retrieving large
LONGVARCHAR
values.
 The JDBC driver will
 do any necessary conversion from the database format into ASCII.
Note:
All the data in the returned stream must be
 read prior to getting the value of any other column. The next
 call to a getter method implicitly closes the stream.  Also, a
 stream may return
0
when the method
InputStream.available
is called whether there is data available or not.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Returns:
a Java input stream that delivers the database column value
 as a stream of one-byte ASCII characters;
 if the value is SQL
NULL
, the
 value returned is
null
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getUnicodeStream
@Deprecated
(
since
="1.2")
InputStream
getUnicodeStream
(int columnIndex)
throws
SQLException
Deprecated.
use
getCharacterStream
in place of
getUnicodeStream
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 as a stream of two-byte 3 characters. The first byte is
 the high byte; the second byte is the low byte.

 The value can then be read in chunks from the
 stream. This method is particularly
 suitable for retrieving large
LONGVARCHAR
values.  The
 JDBC driver will do any necessary conversion from the database
 format into Unicode.
Note:
All the data in the returned stream must be
 read prior to getting the value of any other column. The next
 call to a getter method implicitly closes the stream.
 Also, a stream may return
0
when the method
InputStream.available
is called, whether there is data available or not.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Returns:
a Java input stream that delivers the database column value
         as a stream of two-byte Unicode characters;
         if the value is SQL
NULL
, the value returned is
null
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs or this method is
            called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
getBinaryStream
InputStream
getBinaryStream
(int columnIndex)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a  stream of
 uninterpreted bytes. The value can then be read in chunks from the
 stream. This method is particularly
 suitable for retrieving large
LONGVARBINARY
values.
Note:
All the data in the returned stream must be
 read prior to getting the value of any other column. The next
 call to a getter method implicitly closes the stream.  Also, a
 stream may return
0
when the method
InputStream.available
is called whether there is data available or not.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Returns:
a Java input stream that delivers the database column value
         as a stream of uninterpreted bytes;
         if the value is SQL
NULL
, the value returned is
null
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getString
String
getString
(
String
columnLabel)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
String
in the Java programming language.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
null
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getBoolean
boolean
getBoolean
(
String
columnLabel)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
boolean
in the Java programming language.
If the designated column has a datatype of CHAR or VARCHAR
 and contains a "0" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT
 and contains  a 0, a value of
false
is returned.  If the designated column has a datatype
 of CHAR or VARCHAR
 and contains a "1" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT
 and contains  a 1, a value of
true
is returned.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
false
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getByte
byte
getByte
(
String
columnLabel)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
byte
in the Java programming language.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
0
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getShort
short
getShort
(
String
columnLabel)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
short
in the Java programming language.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
0
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getInt
int
getInt
(
String
columnLabel)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 an
int
in the Java programming language.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
0
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getLong
long
getLong
(
String
columnLabel)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
long
in the Java programming language.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
0
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getFloat
float
getFloat
(
String
columnLabel)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
float
in the Java programming language.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
0
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getDouble
double
getDouble
(
String
columnLabel)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
double
in the Java programming language.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
0
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getBigDecimal
@Deprecated
(
since
="1.2")
BigDecimal
getBigDecimal
(
String
columnLabel,
 int scale)
throws
SQLException
Deprecated.
Use
getBigDecimal(int columnIndex)
or
getBigDecimal(String columnLabel)
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
java.math.BigDecimal
in the Java programming language.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
scale
- the number of digits to the right of the decimal point
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
null
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs or this method is
            called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
getBytes
byte[]
getBytes
(
String
columnLabel)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
byte
array in the Java programming language.
 The bytes represent the raw values returned by the driver.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
null
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getDate
Date
getDate
(
String
columnLabel)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
java.sql.Date
object in the Java programming language.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
null
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getTime
Time
getTime
(
String
columnLabel)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
java.sql.Time
object in the Java programming language.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
the column value;
 if the value is SQL
NULL
,
 the value returned is
null
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getTimestamp
Timestamp
getTimestamp
(
String
columnLabel)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
java.sql.Timestamp
object in the Java programming language.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
null
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getAsciiStream
InputStream
getAsciiStream
(
String
columnLabel)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a stream of
 ASCII characters. The value can then be read in chunks from the
 stream. This method is particularly
 suitable for retrieving large
LONGVARCHAR
values.
 The JDBC driver will
 do any necessary conversion from the database format into ASCII.
Note:
All the data in the returned stream must be
 read prior to getting the value of any other column. The next
 call to a getter method implicitly closes the stream. Also, a
 stream may return
0
when the method
available
is called whether there is data available or not.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
a Java input stream that delivers the database column value
 as a stream of one-byte ASCII characters.
 If the value is SQL
NULL
,
 the value returned is
null
.
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getUnicodeStream
@Deprecated
(
since
="1.2")
InputStream
getUnicodeStream
(
String
columnLabel)
throws
SQLException
Deprecated.
use
getCharacterStream
instead
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a stream of two-byte
 Unicode characters. The first byte is the high byte; the second
 byte is the low byte.

 The value can then be read in chunks from the
 stream. This method is particularly
 suitable for retrieving large
LONGVARCHAR
values.
 The JDBC technology-enabled driver will
 do any necessary conversion from the database format into Unicode.
Note:
All the data in the returned stream must be
 read prior to getting the value of any other column. The next
 call to a getter method implicitly closes the stream.
 Also, a stream may return
0
when the method
InputStream.available
is called, whether there
 is data available or not.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
a Java input stream that delivers the database column value
         as a stream of two-byte Unicode characters.
         If the value is SQL
NULL
, the value returned
         is
null
.
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs or this method is
            called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
getBinaryStream
InputStream
getBinaryStream
(
String
columnLabel)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a stream of uninterpreted
byte
s.
 The value can then be read in chunks from the
 stream. This method is particularly
 suitable for retrieving large
LONGVARBINARY
values.
Note:
All the data in the returned stream must be
 read prior to getting the value of any other column. The next
 call to a getter method implicitly closes the stream. Also, a
 stream may return
0
when the method
available
is called whether there is data available or not.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
a Java input stream that delivers the database column value
 as a stream of uninterpreted bytes;
 if the value is SQL
NULL
, the result is
null
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getWarnings
SQLWarning
getWarnings
()
                throws
SQLException
Retrieves the first warning reported by calls on this
ResultSet
object.
 Subsequent warnings on this
ResultSet
object
 will be chained to the
SQLWarning
object that
 this method returns.
The warning chain is automatically cleared each time a new
 row is read.  This method may not be called on a
ResultSet
object that has been closed; doing so will cause an
SQLException
to be thrown.
Note:
This warning chain only covers warnings caused
 by
ResultSet
methods.  Any warning caused by
Statement
methods
 (such as reading OUT parameters) will be chained on the
Statement
object.
Returns:
the first
SQLWarning
object reported or
null
if there are none
Throws:
SQLException
- if a database access error occurs or this method is
         called on a closed result set
clearWarnings
void
clearWarnings
()
            throws
SQLException
Clears all warnings reported on this
ResultSet
object.
 After this method is called, the method
getWarnings
returns
null
until a new warning is
 reported for this
ResultSet
object.
Throws:
SQLException
- if a database access error occurs or this method is
         called on a closed result set
getCursorName
String
getCursorName
()
              throws
SQLException
Retrieves the name of the SQL cursor used by this
ResultSet
object.
In SQL, a result table is retrieved through a cursor that is
 named. The current row of a result set can be updated or deleted
 using a positioned update/delete statement that references the
 cursor name. To insure that the cursor has the proper isolation
 level to support update, the cursor's
SELECT
statement
 should be of the form
SELECT FOR UPDATE
. If
FOR UPDATE
is omitted, the positioned updates may fail.
The JDBC API supports this SQL feature by providing the name of the
 SQL cursor used by a
ResultSet
object.
 The current row of a
ResultSet
object
 is also the current row of this SQL cursor.
Returns:
the SQL name for this
ResultSet
object's cursor
Throws:
SQLException
- if a database access error occurs or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
getMetaData
ResultSetMetaData
getMetaData
()
                       throws
SQLException
Retrieves the  number, types and properties of
 this
ResultSet
object's columns.
Returns:
the description of this
ResultSet
object's columns
Throws:
SQLException
- if a database access error occurs or this method is
         called on a closed result set
getObject
Object
getObject
(int columnIndex)
throws
SQLException
Gets the value of the designated column in the current row
 of this
ResultSet
object as
 an
Object
in the Java programming language.
This method will return the value of the given column as a
 Java object.  The type of the Java object will be the default
 Java object type corresponding to the column's SQL type,
 following the mapping for built-in types specified in the JDBC
 specification. If the value is an SQL
NULL
,
 the driver returns a Java
null
.
This method may also be used to read database-specific
 abstract data types.

 In the JDBC 2.0 API, the behavior of method
getObject
is extended to materialize
 data of SQL user-defined types.
If
Connection.getTypeMap
does not throw a
SQLFeatureNotSupportedException
,
 then when a column contains a structured or distinct value,
 the behavior of this method is as
 if it were a call to:
getObject(columnIndex,
 this.getStatement().getConnection().getTypeMap())
.

 If
Connection.getTypeMap
does throw a
SQLFeatureNotSupportedException
,
 then structured values are not supported, and distinct values
 are mapped to the default Java class as determined by the
 underlying SQL type of the DISTINCT type.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Returns:
a
java.lang.Object
holding the column value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs or this method is
            called on a closed result set
getObject
Object
getObject
(
String
columnLabel)
throws
SQLException
Gets the value of the designated column in the current row
 of this
ResultSet
object as
 an
Object
in the Java programming language.
This method will return the value of the given column as a
 Java object.  The type of the Java object will be the default
 Java object type corresponding to the column's SQL type,
 following the mapping for built-in types specified in the JDBC
 specification. If the value is an SQL
NULL
,
 the driver returns a Java
null
.
This method may also be used to read database-specific
 abstract data types.
In the JDBC 2.0 API, the behavior of the method
getObject
is extended to materialize
 data of SQL user-defined types.  When a column contains
 a structured or distinct value, the behavior of this method is as
 if it were a call to:
getObject(columnIndex,
 this.getStatement().getConnection().getTypeMap())
.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
a
java.lang.Object
holding the column value
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs or this method is
            called on a closed result set
findColumn
int
findColumn
(
String
columnLabel)
throws
SQLException
Maps the given
ResultSet
column label to its
ResultSet
column index.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
the column index of the given column name
Throws:
SQLException
- if the
ResultSet
object
 does not contain a column labeled
columnLabel
, a database access error occurs
  or this method is called on a closed result set
getCharacterStream
Reader
getCharacterStream
(int columnIndex)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.io.Reader
object.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Returns:
a
java.io.Reader
object that contains the column
 value; if the value is SQL
NULL
, the value returned is
null
in the Java programming language.
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs or this method is
            called on a closed result set
Since:
1.2
getCharacterStream
Reader
getCharacterStream
(
String
columnLabel)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.io.Reader
object.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
a
java.io.Reader
object that contains the column
 value; if the value is SQL
NULL
, the value returned is
null
in the Java programming language
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs or this method is
            called on a closed result set
Since:
1.2
getBigDecimal
BigDecimal
getBigDecimal
(int columnIndex)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.math.BigDecimal
with full precision.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Returns:
the column value (full precision);
 if the value is SQL
NULL
, the value returned is
null
in the Java programming language.
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs or this method is
            called on a closed result set
Since:
1.2
getBigDecimal
BigDecimal
getBigDecimal
(
String
columnLabel)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.math.BigDecimal
with full precision.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
the column value (full precision);
 if the value is SQL
NULL
, the value returned is
null
in the Java programming language.
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs or this method is
            called on a closed result set
Since:
1.2
isBeforeFirst
boolean
isBeforeFirst
()
               throws
SQLException
Retrieves whether the cursor is before the first row in
 this
ResultSet
object.
Note:
Support for the
isBeforeFirst
method
 is optional for
ResultSet
s with a result
 set type of
TYPE_FORWARD_ONLY
Returns:
true
if the cursor is before the first row;
false
if the cursor is at any other position or the
 result set contains no rows
Throws:
SQLException
- if a database access error occurs or this method is
         called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
isAfterLast
boolean
isAfterLast
()
             throws
SQLException
Retrieves whether the cursor is after the last row in
 this
ResultSet
object.
Note:
Support for the
isAfterLast
method
 is optional for
ResultSet
s with a result
 set type of
TYPE_FORWARD_ONLY
Returns:
true
if the cursor is after the last row;
false
if the cursor is at any other position or the
 result set contains no rows
Throws:
SQLException
- if a database access error occurs or this method is
         called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
isFirst
boolean
isFirst
()
         throws
SQLException
Retrieves whether the cursor is on the first row of
 this
ResultSet
object.
Note:
Support for the
isFirst
method
 is optional for
ResultSet
s with a result
 set type of
TYPE_FORWARD_ONLY
Returns:
true
if the cursor is on the first row;
false
otherwise
Throws:
SQLException
- if a database access error occurs or this method is
         called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
isLast
boolean
isLast
()
        throws
SQLException
Retrieves whether the cursor is on the last row of
 this
ResultSet
object.
Note:
Calling the method
isLast
may be expensive
 because the JDBC driver
 might need to fetch ahead one row in order to determine
 whether the current row is the last row in the result set.
Note:
Support for the
isLast
method
 is optional for
ResultSet
s with a result
 set type of
TYPE_FORWARD_ONLY
Returns:
true
if the cursor is on the last row;
false
otherwise
Throws:
SQLException
- if a database access error occurs or this method is
         called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
beforeFirst
void
beforeFirst
()
          throws
SQLException
Moves the cursor to the front of
 this
ResultSet
object, just before the
 first row. This method has no effect if the result set contains no rows.
Throws:
SQLException
- if a database access error
 occurs; this method is called on a closed result set or the
 result set type is
TYPE_FORWARD_ONLY
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
afterLast
void
afterLast
()
        throws
SQLException
Moves the cursor to the end of
 this
ResultSet
object, just after the
 last row. This method has no effect if the result set contains no rows.
Throws:
SQLException
- if a database access error
 occurs; this method is called on a closed result set
 or the result set type is
TYPE_FORWARD_ONLY
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
first
boolean
first
()
       throws
SQLException
Moves the cursor to the first row in
 this
ResultSet
object.
Returns:
true
if the cursor is on a valid row;
false
if there are no rows in the result set
Throws:
SQLException
- if a database access error
 occurs; this method is called on a closed result set
 or the result set type is
TYPE_FORWARD_ONLY
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
last
boolean
last
()
      throws
SQLException
Moves the cursor to the last row in
 this
ResultSet
object.
Returns:
true
if the cursor is on a valid row;
false
if there are no rows in the result set
Throws:
SQLException
- if a database access error
 occurs; this method is called on a closed result set
 or the result set type is
TYPE_FORWARD_ONLY
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
getRow
int
getRow
()
    throws
SQLException
Retrieves the current row number.  The first row is number 1, the
 second number 2, and so on.
Note:
Support for the
getRow
method
 is optional for
ResultSet
s with a result
 set type of
TYPE_FORWARD_ONLY
Returns:
the current row number;
0
if there is no current row
Throws:
SQLException
- if a database access error occurs
 or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
absolute
boolean
absolute
(int row)
throws
SQLException
Moves the cursor to the given row number in
 this
ResultSet
object.
If the row number is positive, the cursor moves to
 the given row number with respect to the
 beginning of the result set.  The first row is row 1, the second
 is row 2, and so on.
If the given row number is negative, the cursor moves to
 an absolute row position with respect to
 the end of the result set.  For example, calling the method
absolute(-1)
positions the
 cursor on the last row; calling the method
absolute(-2)
moves the cursor to the next-to-last row, and so on.
If the row number specified is zero, the cursor is moved to
 before the first row.
An attempt to position the cursor beyond the first/last row in
 the result set leaves the cursor before the first row or after
 the last row.
Note:
Calling
absolute(1)
is the same
 as calling
first()
. Calling
absolute(-1)
is the same as calling
last()
.
Parameters:
row
- the number of the row to which the cursor should move.
        A value of zero indicates that the cursor will be positioned
        before the first row; a positive number indicates the row number
        counting from the beginning of the result set; a negative number
        indicates the row number counting from the end of the result set
Returns:
true
if the cursor is moved to a position in this
ResultSet
object;
false
if the cursor is before the first row or after the
 last row
Throws:
SQLException
- if a database access error
 occurs; this method is called on a closed result set
 or the result set type is
TYPE_FORWARD_ONLY
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
relative
boolean
relative
(int rows)
throws
SQLException
Moves the cursor a relative number of rows, either positive or negative.
 Attempting to move beyond the first/last row in the
 result set positions the cursor before/after the
 the first/last row. Calling
relative(0)
is valid, but does
 not change the cursor position.
Note: Calling the method
relative(1)
is identical to calling the method
next()
and
 calling the method
relative(-1)
is identical
 to calling the method
previous()
.
Parameters:
rows
- an
int
specifying the number of rows to
        move from the current row; a positive number moves the cursor
        forward; a negative number moves the cursor backward
Returns:
true
if the cursor is on a row;
false
otherwise
Throws:
SQLException
- if a database access error occurs;  this method
 is called on a closed result set or the result set type is
TYPE_FORWARD_ONLY
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
previous
boolean
previous
()
          throws
SQLException
Moves the cursor to the previous row in this
ResultSet
object.
When a call to the
previous
method returns
false
,
 the cursor is positioned before the first row.  Any invocation of a
ResultSet
method which requires a current row will result in a
SQLException
being thrown.
If an input stream is open for the current row, a call to the method
previous
will implicitly close it.  A
ResultSet
object's warning change is cleared when a new row is read.
Returns:
true
if the cursor is now positioned on a valid row;
false
if the cursor is positioned before the first row
Throws:
SQLException
- if a database access error
 occurs; this method is called on a closed result set
 or the result set type is
TYPE_FORWARD_ONLY
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
setFetchDirection
void
setFetchDirection
(int direction)
throws
SQLException
Gives a hint as to the direction in which the rows in this
ResultSet
object will be processed.
 The initial value is determined by the
Statement
object
 that produced this
ResultSet
object.
 The fetch direction may be changed at any time.
Parameters:
direction
- an
int
specifying the suggested
        fetch direction; one of
ResultSet.FETCH_FORWARD
,
ResultSet.FETCH_REVERSE
, or
ResultSet.FETCH_UNKNOWN
Throws:
SQLException
- if a database access error occurs; this
 method is called on a closed result set or
 the result set type is
TYPE_FORWARD_ONLY
and the fetch
 direction is not
FETCH_FORWARD
Since:
1.2
See Also:
Statement.setFetchDirection(int)
getFetchDirection()
getFetchDirection
int
getFetchDirection
()
               throws
SQLException
Retrieves the fetch direction for this
ResultSet
object.
Returns:
the current fetch direction for this
ResultSet
object
Throws:
SQLException
- if a database access error occurs
 or this method is called on a closed result set
Since:
1.2
See Also:
setFetchDirection(int)
setFetchSize
void
setFetchSize
(int rows)
throws
SQLException
Gives the JDBC driver a hint as to the number of rows that should
 be fetched from the database when more rows are needed for this
ResultSet
object.
 If the fetch size specified is zero, the JDBC driver
 ignores the value and is free to make its own best guess as to what
 the fetch size should be.  The default value is set by the
Statement
object
 that created the result set.  The fetch size may be changed at any time.
Parameters:
rows
- the number of rows to fetch
Throws:
SQLException
- if a database access error occurs; this method
 is called on a closed result set or the
 condition
rows >= 0
is not satisfied
Since:
1.2
See Also:
getFetchSize()
getFetchSize
int
getFetchSize
()
          throws
SQLException
Retrieves the fetch size for this
ResultSet
object.
Returns:
the current fetch size for this
ResultSet
object
Throws:
SQLException
- if a database access error occurs
 or this method is called on a closed result set
Since:
1.2
See Also:
setFetchSize(int)
getType
int
getType
()
     throws
SQLException
Retrieves the type of this
ResultSet
object.
 The type is determined by the
Statement
object
 that created the result set.
Returns:
ResultSet.TYPE_FORWARD_ONLY
,
ResultSet.TYPE_SCROLL_INSENSITIVE
,
         or
ResultSet.TYPE_SCROLL_SENSITIVE
Throws:
SQLException
- if a database access error occurs
 or this method is called on a closed result set
Since:
1.2
getConcurrency
int
getConcurrency
()
            throws
SQLException
Retrieves the concurrency mode of this
ResultSet
object.
 The concurrency used is determined by the
Statement
object that created the result set.
Returns:
the concurrency type, either
ResultSet.CONCUR_READ_ONLY
or
ResultSet.CONCUR_UPDATABLE
Throws:
SQLException
- if a database access error occurs
 or this method is called on a closed result set
Since:
1.2
rowUpdated
boolean
rowUpdated
()
            throws
SQLException
Retrieves whether the current row has been updated.  The value returned
 depends on whether or not the result set can detect updates.
Note:
Support for the
rowUpdated
method is optional with a result set
 concurrency of
CONCUR_READ_ONLY
Returns:
true
if the current row is detected to
 have been visibly updated by the owner or another;
false
otherwise
Throws:
SQLException
- if a database access error occurs
 or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
See Also:
DatabaseMetaData.updatesAreDetected(int)
rowInserted
boolean
rowInserted
()
             throws
SQLException
Retrieves whether the current row has had an insertion.
 The value returned depends on whether or not this
ResultSet
object can detect visible inserts.
Note:
Support for the
rowInserted
method is optional with a result set
 concurrency of
CONCUR_READ_ONLY
Returns:
true
if the current row is detected to
 have been inserted;
false
otherwise
Throws:
SQLException
- if a database access error occurs
 or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
See Also:
DatabaseMetaData.insertsAreDetected(int)
rowDeleted
boolean
rowDeleted
()
            throws
SQLException
Retrieves whether a row has been deleted.  A deleted row may leave
 a visible "hole" in a result set.  This method can be used to
 detect holes in a result set.  The value returned depends on whether
 or not this
ResultSet
object can detect deletions.
Note:
Support for the
rowDeleted
method is optional with a result set
 concurrency of
CONCUR_READ_ONLY
Returns:
true
if the current row is detected to
 have been deleted by the owner or another;
false
otherwise
Throws:
SQLException
- if a database access error occurs
 or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
See Also:
DatabaseMetaData.deletesAreDetected(int)
updateNull
void
updateNull
(int columnIndex)
throws
SQLException
Updates the designated column with a
null
value.

 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateBoolean
void
updateBoolean
(int columnIndex,
 boolean x)
throws
SQLException
Updates the designated column with a
boolean
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateByte
void
updateByte
(int columnIndex,
 byte x)
throws
SQLException
Updates the designated column with a
byte
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateShort
void
updateShort
(int columnIndex,
 short x)
throws
SQLException
Updates the designated column with a
short
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateInt
void
updateInt
(int columnIndex,
 int x)
throws
SQLException
Updates the designated column with an
int
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateLong
void
updateLong
(int columnIndex,
 long x)
throws
SQLException
Updates the designated column with a
long
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateFloat
void
updateFloat
(int columnIndex,
 float x)
throws
SQLException
Updates the designated column with a
float
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateDouble
void
updateDouble
(int columnIndex,
 double x)
throws
SQLException
Updates the designated column with a
double
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateBigDecimal
void
updateBigDecimal
(int columnIndex,
BigDecimal
x)
throws
SQLException
Updates the designated column with a
java.math.BigDecimal
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateString
void
updateString
(int columnIndex,
String
x)
throws
SQLException
Updates the designated column with a
String
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateBytes
void
updateBytes
(int columnIndex,
 byte[] x)
throws
SQLException
Updates the designated column with a
byte
array value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateDate
void
updateDate
(int columnIndex,
Date
x)
throws
SQLException
Updates the designated column with a
java.sql.Date
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateTime
void
updateTime
(int columnIndex,
Time
x)
throws
SQLException
Updates the designated column with a
java.sql.Time
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateTimestamp
void
updateTimestamp
(int columnIndex,
Timestamp
x)
throws
SQLException
Updates the designated column with a
java.sql.Timestamp
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateAsciiStream
void
updateAsciiStream
(int columnIndex,
InputStream
x,
 int length)
throws
SQLException
Updates the designated column with an ascii stream value, which will have
 the specified number of bytes.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
length
- the length of the stream
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateBinaryStream
void
updateBinaryStream
(int columnIndex,
InputStream
x,
 int length)
throws
SQLException
Updates the designated column with a binary stream value, which will have
 the specified number of bytes.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
length
- the length of the stream
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateCharacterStream
void
updateCharacterStream
(int columnIndex,
Reader
x,
 int length)
throws
SQLException
Updates the designated column with a character stream value, which will have
 the specified number of bytes.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
length
- the length of the stream
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateObject
void
updateObject
(int columnIndex,
Object
x,
 int scaleOrLength)
throws
SQLException
Updates the designated column with an
Object
value.

 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
If the second argument is an
InputStream
then the stream must contain
 the number of bytes specified by scaleOrLength.  If the second argument is a
Reader
then the reader must contain the number of characters specified
 by scaleOrLength. If these conditions are not true the driver will generate a
SQLException
when the statement is executed.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
scaleOrLength
- for an object of
java.math.BigDecimal
,
          this is the number of digits after the decimal point. For
          Java Object types
InputStream
and
Reader
,
          this is the length
          of the data in the stream or reader.  For all other types,
          this value will be ignored.
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateObject
void
updateObject
(int columnIndex,
Object
x)
throws
SQLException
Updates the designated column with an
Object
value.

 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateNull
void
updateNull
(
String
columnLabel)
throws
SQLException
Updates the designated column with a
null
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateBoolean
void
updateBoolean
(
String
columnLabel,
 boolean x)
throws
SQLException
Updates the designated column with a
boolean
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
x
- the new column value
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateByte
void
updateByte
(
String
columnLabel,
 byte x)
throws
SQLException
Updates the designated column with a
byte
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
x
- the new column value
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateShort
void
updateShort
(
String
columnLabel,
 short x)
throws
SQLException
Updates the designated column with a
short
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
x
- the new column value
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateInt
void
updateInt
(
String
columnLabel,
 int x)
throws
SQLException
Updates the designated column with an
int
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
x
- the new column value
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateLong
void
updateLong
(
String
columnLabel,
 long x)
throws
SQLException
Updates the designated column with a
long
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
x
- the new column value
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateFloat
void
updateFloat
(
String
columnLabel,
 float x)
throws
SQLException
Updates the designated column with a
float
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
x
- the new column value
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateDouble
void
updateDouble
(
String
columnLabel,
 double x)
throws
SQLException
Updates the designated column with a
double
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
x
- the new column value
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateBigDecimal
void
updateBigDecimal
(
String
columnLabel,
BigDecimal
x)
throws
SQLException
Updates the designated column with a
java.sql.BigDecimal
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
x
- the new column value
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateString
void
updateString
(
String
columnLabel,
String
x)
throws
SQLException
Updates the designated column with a
String
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
x
- the new column value
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateBytes
void
updateBytes
(
String
columnLabel,
 byte[] x)
throws
SQLException
Updates the designated column with a byte array value.

 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
x
- the new column value
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateDate
void
updateDate
(
String
columnLabel,
Date
x)
throws
SQLException
Updates the designated column with a
java.sql.Date
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
x
- the new column value
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateTime
void
updateTime
(
String
columnLabel,
Time
x)
throws
SQLException
Updates the designated column with a
java.sql.Time
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
x
- the new column value
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateTimestamp
void
updateTimestamp
(
String
columnLabel,
Timestamp
x)
throws
SQLException
Updates the designated column with a
java.sql.Timestamp
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
x
- the new column value
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateAsciiStream
void
updateAsciiStream
(
String
columnLabel,
InputStream
x,
 int length)
throws
SQLException
Updates the designated column with an ascii stream value, which will have
 the specified number of bytes.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
x
- the new column value
length
- the length of the stream
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateBinaryStream
void
updateBinaryStream
(
String
columnLabel,
InputStream
x,
 int length)
throws
SQLException
Updates the designated column with a binary stream value, which will have
 the specified number of bytes.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
x
- the new column value
length
- the length of the stream
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateCharacterStream
void
updateCharacterStream
(
String
columnLabel,
Reader
reader,
 int length)
throws
SQLException
Updates the designated column with a character stream value, which will have
 the specified number of bytes.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
reader
- the
java.io.Reader
object containing
        the new column value
length
- the length of the stream
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateObject
void
updateObject
(
String
columnLabel,
Object
x,
 int scaleOrLength)
throws
SQLException
Updates the designated column with an
Object
value.

 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
If the second argument is an
InputStream
then the stream must contain
 the number of bytes specified by scaleOrLength.  If the second argument is a
Reader
then the reader must contain the number of characters specified
 by scaleOrLength. If these conditions are not true the driver will generate a
SQLException
when the statement is executed.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
x
- the new column value
scaleOrLength
- for an object of
java.math.BigDecimal
,
          this is the number of digits after the decimal point. For
          Java Object types
InputStream
and
Reader
,
          this is the length
          of the data in the stream or reader.  For all other types,
          this value will be ignored.
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateObject
void
updateObject
(
String
columnLabel,
Object
x)
throws
SQLException
Updates the designated column with an
Object
value.

 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
x
- the new column value
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
insertRow
void
insertRow
()
        throws
SQLException
Inserts the contents of the insert row into this
ResultSet
object and into the database.
 The cursor must be on the insert row when this method is called.
Throws:
SQLException
- if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
,
 this method is called on a closed result set,
 if this method is called when the cursor is not on the insert row,
 or if not all of non-nullable columns in
 the insert row have been given a non-null value
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
updateRow
void
updateRow
()
        throws
SQLException
Updates the underlying database with the new contents of the
 current row of this
ResultSet
object.
 This method cannot be called when the cursor is on the insert row.
Throws:
SQLException
- if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
;
  this method is called on a closed result set or
 if this method is called when the cursor is on the insert row
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
deleteRow
void
deleteRow
()
        throws
SQLException
Deletes the current row from this
ResultSet
object
 and from the underlying database.  This method cannot be called when
 the cursor is on the insert row.
Throws:
SQLException
- if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
;
 this method is called on a closed result set
 or if this method is called when the cursor is on the insert row
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
refreshRow
void
refreshRow
()
         throws
SQLException
Refreshes the current row with its most recent value in
 the database.  This method cannot be called when
 the cursor is on the insert row.
The
refreshRow
method provides a way for an
 application to
 explicitly tell the JDBC driver to refetch a row(s) from the
 database.  An application may want to call
refreshRow
when
 caching or prefetching is being done by the JDBC driver to
 fetch the latest value of a row from the database.  The JDBC driver
 may actually refresh multiple rows at once if the fetch size is
 greater than one.
All values are refetched subject to the transaction isolation
 level and cursor sensitivity.  If
refreshRow
is called after
 calling an updater method, but before calling
 the method
updateRow
, then the
 updates made to the row are lost.  Calling the method
refreshRow
frequently will likely slow performance.
Throws:
SQLException
- if a database access error
 occurs; this method is called on a closed result set;
 the result set type is
TYPE_FORWARD_ONLY
or if this
 method is called when the cursor is on the insert row
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method or this method is not supported for the specified result
 set type and result set concurrency.
Since:
1.2
cancelRowUpdates
void
cancelRowUpdates
()
               throws
SQLException
Cancels the updates made to the current row in this
ResultSet
object.
 This method may be called after calling an
 updater method(s) and before calling
 the method
updateRow
to roll back
 the updates made to a row.  If no updates have been made or
updateRow
has already been called, this method has no
 effect.
Throws:
SQLException
- if a database access error
         occurs; this method is called on a closed result set;
 the result set concurrency is
CONCUR_READ_ONLY
or if this method is called when the cursor is
            on the insert row
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
moveToInsertRow
void
moveToInsertRow
()
              throws
SQLException
Moves the cursor to the insert row.  The current cursor position is
 remembered while the cursor is positioned on the insert row.

 The insert row is a special row associated with an updatable
 result set.  It is essentially a buffer where a new row may
 be constructed by calling the updater methods prior to
 inserting the row into the result set.

 Only the updater, getter,
 and
insertRow
methods may be
 called when the cursor is on the insert row.  All of the columns in
 a result set must be given a value each time this method is
 called before calling
insertRow
.
 An updater method must be called before a
 getter method can be called on a column value.
Throws:
SQLException
- if a database access error occurs; this
 method is called on a closed result set
 or the result set concurrency is
CONCUR_READ_ONLY
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
moveToCurrentRow
void
moveToCurrentRow
()
               throws
SQLException
Moves the cursor to the remembered cursor position, usually the
 current row.  This method has no effect if the cursor is not on
 the insert row.
Throws:
SQLException
- if a database access error occurs; this
 method is called on a closed result set
  or the result set concurrency is
CONCUR_READ_ONLY
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
getStatement
Statement
getStatement
()
                throws
SQLException
Retrieves the
Statement
object that produced this
ResultSet
object.
 If the result set was generated some other way, such as by a
DatabaseMetaData
method, this method  may return
null
.
Returns:
the
Statement
object that produced
 this
ResultSet
object or
null
if the result set was produced some other way
Throws:
SQLException
- if a database access error occurs
 or this method is called on a closed result set
Since:
1.2
getObject
Object
getObject
(int columnIndex,
Map
<
String
,
Class
<?>> map)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as an
Object
in the Java programming language.
 If the value is an SQL
NULL
,
 the driver returns a Java
null
.
 This method uses the given
Map
object
 for the custom mapping of the
 SQL structured or distinct type that is being retrieved.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
map
- a
java.util.Map
object that contains the mapping
 from SQL type names to classes in the Java programming language
Returns:
an
Object
in the Java programming language
 representing the SQL value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs
 or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
getRef
Ref
getRef
(int columnIndex)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
Ref
object
 in the Java programming language.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Returns:
a
Ref
object representing an SQL
REF
value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs
 or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
getBlob
Blob
getBlob
(int columnIndex)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
Blob
object
 in the Java programming language.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Returns:
a
Blob
object representing the SQL
BLOB
value in the specified column
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs
 or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
getClob
Clob
getClob
(int columnIndex)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
Clob
object
 in the Java programming language.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Returns:
a
Clob
object representing the SQL
CLOB
value in the specified column
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs
 or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
getArray
Array
getArray
(int columnIndex)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as an
Array
object
 in the Java programming language.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Returns:
an
Array
object representing the SQL
ARRAY
value in the specified column
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs
 or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
getObject
Object
getObject
(
String
columnLabel,
Map
<
String
,
Class
<?>> map)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as an
Object
in the Java programming language.
 If the value is an SQL
NULL
,
 the driver returns a Java
null
.
 This method uses the specified
Map
object for
 custom mapping if appropriate.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
map
- a
java.util.Map
object that contains the mapping
 from SQL type names to classes in the Java programming language
Returns:
an
Object
representing the SQL value in the
         specified column
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs
 or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
getRef
Ref
getRef
(
String
columnLabel)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
Ref
object
 in the Java programming language.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
a
Ref
object representing the SQL
REF
value in the specified column
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs
 or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
getBlob
Blob
getBlob
(
String
columnLabel)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
Blob
object
 in the Java programming language.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
a
Blob
object representing the SQL
BLOB
value in the specified column
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs
 or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
getClob
Clob
getClob
(
String
columnLabel)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
Clob
object
 in the Java programming language.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
a
Clob
object representing the SQL
CLOB
value in the specified column
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs
 or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
getArray
Array
getArray
(
String
columnLabel)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as an
Array
object
 in the Java programming language.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
an
Array
object representing the SQL
ARRAY
value in
         the specified column
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs
 or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.2
getDate
Date
getDate
(int columnIndex,
Calendar
cal)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.sql.Date
object
 in the Java programming language.
 This method uses the given calendar to construct an appropriate millisecond
 value for the date if the underlying database does not store
 timezone information.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
cal
- the
java.util.Calendar
object
 to use in constructing the date
Returns:
the column value as a
java.sql.Date
object;
 if the value is SQL
NULL
,
 the value returned is
null
in the Java programming language
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs
 or this method is called on a closed result set
Since:
1.2
getDate
Date
getDate
(
String
columnLabel,
Calendar
cal)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.sql.Date
object
 in the Java programming language.
 This method uses the given calendar to construct an appropriate millisecond
 value for the date if the underlying database does not store
 timezone information.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
cal
- the
java.util.Calendar
object
 to use in constructing the date
Returns:
the column value as a
java.sql.Date
object;
 if the value is SQL
NULL
,
 the value returned is
null
in the Java programming language
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs
 or this method is called on a closed result set
Since:
1.2
getTime
Time
getTime
(int columnIndex,
Calendar
cal)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.sql.Time
object
 in the Java programming language.
 This method uses the given calendar to construct an appropriate millisecond
 value for the time if the underlying database does not store
 timezone information.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
cal
- the
java.util.Calendar
object
 to use in constructing the time
Returns:
the column value as a
java.sql.Time
object;
 if the value is SQL
NULL
,
 the value returned is
null
in the Java programming language
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs
 or this method is called on a closed result set
Since:
1.2
getTime
Time
getTime
(
String
columnLabel,
Calendar
cal)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.sql.Time
object
 in the Java programming language.
 This method uses the given calendar to construct an appropriate millisecond
 value for the time if the underlying database does not store
 timezone information.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
cal
- the
java.util.Calendar
object
 to use in constructing the time
Returns:
the column value as a
java.sql.Time
object;
 if the value is SQL
NULL
,
 the value returned is
null
in the Java programming language
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs
 or this method is called on a closed result set
Since:
1.2
getTimestamp
Timestamp
getTimestamp
(int columnIndex,
Calendar
cal)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.sql.Timestamp
object
 in the Java programming language.
 This method uses the given calendar to construct an appropriate millisecond
 value for the timestamp if the underlying database does not store
 timezone information.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
cal
- the
java.util.Calendar
object
 to use in constructing the timestamp
Returns:
the column value as a
java.sql.Timestamp
object;
 if the value is SQL
NULL
,
 the value returned is
null
in the Java programming language
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs
 or this method is called on a closed result set
Since:
1.2
getTimestamp
Timestamp
getTimestamp
(
String
columnLabel,
Calendar
cal)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.sql.Timestamp
object
 in the Java programming language.
 This method uses the given calendar to construct an appropriate millisecond
 value for the timestamp if the underlying database does not store
 timezone information.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
cal
- the
java.util.Calendar
object
 to use in constructing the date
Returns:
the column value as a
java.sql.Timestamp
object;
 if the value is SQL
NULL
,
 the value returned is
null
in the Java programming language
Throws:
SQLException
- if the columnLabel is not valid or
 if a database access error occurs
 or this method is called on a closed result set
Since:
1.2
getURL
URL
getURL
(int columnIndex)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.net.URL
object in the Java programming language.
Parameters:
columnIndex
- the index of the column 1 is the first, 2 is the second,...
Returns:
the column value as a
java.net.URL
object;
 if the value is SQL
NULL
,
 the value returned is
null
in the Java programming language
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs; this method
 is called on a closed result set or if a URL is malformed
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.4
getURL
URL
getURL
(
String
columnLabel)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.net.URL
object in the Java programming language.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
the column value as a
java.net.URL
object;
 if the value is SQL
NULL
,
 the value returned is
null
in the Java programming language
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs; this method
 is called on a closed result set or if a URL is malformed
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.4
updateRef
void
updateRef
(int columnIndex,
Ref
x)
throws
SQLException
Updates the designated column with a
java.sql.Ref
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.4
updateRef
void
updateRef
(
String
columnLabel,
Ref
x)
throws
SQLException
Updates the designated column with a
java.sql.Ref
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
x
- the new column value
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.4
updateBlob
void
updateBlob
(int columnIndex,
Blob
x)
throws
SQLException
Updates the designated column with a
java.sql.Blob
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.4
updateBlob
void
updateBlob
(
String
columnLabel,
Blob
x)
throws
SQLException
Updates the designated column with a
java.sql.Blob
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
x
- the new column value
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.4
updateClob
void
updateClob
(int columnIndex,
Clob
x)
throws
SQLException
Updates the designated column with a
java.sql.Clob
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.4
updateClob
void
updateClob
(
String
columnLabel,
Clob
x)
throws
SQLException
Updates the designated column with a
java.sql.Clob
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
x
- the new column value
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.4
updateArray
void
updateArray
(int columnIndex,
Array
x)
throws
SQLException
Updates the designated column with a
java.sql.Array
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.4
updateArray
void
updateArray
(
String
columnLabel,
Array
x)
throws
SQLException
Updates the designated column with a
java.sql.Array
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
x
- the new column value
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.4
getRowId
RowId
getRowId
(int columnIndex)
throws
SQLException
Retrieves the value of the designated column in the current row of this
ResultSet
object as a
java.sql.RowId
object in the Java
 programming language.
Parameters:
columnIndex
- the first column is 1, the second 2, ...
Returns:
the column value; if the value is a SQL
NULL
the
     value returned is
null
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs
 or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
getRowId
RowId
getRowId
(
String
columnLabel)
throws
SQLException
Retrieves the value of the designated column in the current row of this
ResultSet
object as a
java.sql.RowId
object in the Java
 programming language.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
the column value ; if the value is a SQL
NULL
the
     value returned is
null
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs
 or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateRowId
void
updateRowId
(int columnIndex,
RowId
x)
throws
SQLException
Updates the designated column with a
RowId
value. The updater
 methods are used to update column values in the current row or the insert
 row. The updater methods do not update the underlying database; instead
 the
updateRow
or
insertRow
methods are called
 to update the database.
Parameters:
columnIndex
- the first column is 1, the second 2, ...
x
- the column value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateRowId
void
updateRowId
(
String
columnLabel,
RowId
x)
throws
SQLException
Updates the designated column with a
RowId
value. The updater
 methods are used to update column values in the current row or the insert
 row. The updater methods do not update the underlying database; instead
 the
updateRow
or
insertRow
methods are called
 to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
x
- the column value
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
getHoldability
int
getHoldability
()
            throws
SQLException
Retrieves the holdability of this
ResultSet
object
Returns:
either
ResultSet.HOLD_CURSORS_OVER_COMMIT
or
ResultSet.CLOSE_CURSORS_AT_COMMIT
Throws:
SQLException
- if a database access error occurs
 or this method is called on a closed result set
Since:
1.6
isClosed
boolean
isClosed
()
          throws
SQLException
Retrieves whether this
ResultSet
object has been closed. A
ResultSet
is closed if the
 method close has been called on it, or if it is automatically closed.
Returns:
true if this
ResultSet
object is closed; false if it is still open
Throws:
SQLException
- if a database access error occurs
Since:
1.6
updateNString
void
updateNString
(int columnIndex,
String
nString)
throws
SQLException
Updates the designated column with a
String
value.
 It is intended for use when updating
NCHAR
,
NVARCHAR
and
LONGNVARCHAR
columns.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second 2, ...
nString
- the value for the column to be updated
Throws:
SQLException
- if the columnIndex is not valid;
 if the driver does not support national
         character sets;  if the driver can detect that a data conversion
  error could occur; this method is called on a closed result set;
 the result set concurrency is
CONCUR_READ_ONLY
or if a database access error occurs
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateNString
void
updateNString
(
String
columnLabel,
String
nString)
throws
SQLException
Updates the designated column with a
String
value.
 It is intended for use when updating
NCHAR
,
NVARCHAR
and
LONGNVARCHAR
columns.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
nString
- the value for the column to be updated
Throws:
SQLException
- if the columnLabel is not valid;
 if the driver does not support national
         character sets;  if the driver can detect that a data conversion
  error could occur; this method is called on a closed result set;
 the result set concurrency is
CONCUR_READ_ONLY
or if a database access error occurs
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateNClob
void
updateNClob
(int columnIndex,
NClob
nClob)
throws
SQLException
Updates the designated column with a
java.sql.NClob
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second 2, ...
nClob
- the value for the column to be updated
Throws:
SQLException
- if the columnIndex is not valid;
 if the driver does not support national
         character sets;  if the driver can detect that a data conversion
  error could occur; this method is called on a closed result set;
 if a database access error occurs or
 the result set concurrency is
CONCUR_READ_ONLY
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateNClob
void
updateNClob
(
String
columnLabel,
NClob
nClob)
throws
SQLException
Updates the designated column with a
java.sql.NClob
value.
 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
nClob
- the value for the column to be updated
Throws:
SQLException
- if the columnLabel is not valid;
 if the driver does not support national
         character sets;  if the driver can detect that a data conversion
  error could occur; this method is called on a closed result set;
  if a database access error occurs or
 the result set concurrency is
CONCUR_READ_ONLY
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
getNClob
NClob
getNClob
(int columnIndex)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
NClob
object
 in the Java programming language.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Returns:
a
NClob
object representing the SQL
NCLOB
value in the specified column
Throws:
SQLException
- if the columnIndex is not valid;
 if the driver does not support national
         character sets;  if the driver can detect that a data conversion
  error could occur; this method is called on a closed result set
 or if a database access error occurs
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
getNClob
NClob
getNClob
(
String
columnLabel)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
NClob
object
 in the Java programming language.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
a
NClob
object representing the SQL
NCLOB
value in the specified column
Throws:
SQLException
- if the columnLabel is not valid;
 if the driver does not support national
         character sets;  if the driver can detect that a data conversion
  error could occur; this method is called on a closed result set
 or if a database access error occurs
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
getSQLXML
SQLXML
getSQLXML
(int columnIndex)
throws
SQLException
Retrieves the value of the designated column in  the current row of
  this
ResultSet
as a
java.sql.SQLXML
object in the Java programming language.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Returns:
a
SQLXML
object that maps an
SQL XML
value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs
 or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
getSQLXML
SQLXML
getSQLXML
(
String
columnLabel)
throws
SQLException
Retrieves the value of the designated column in  the current row of
  this
ResultSet
as a
java.sql.SQLXML
object in the Java programming language.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
a
SQLXML
object that maps an
SQL XML
value
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs
 or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateSQLXML
void
updateSQLXML
(int columnIndex,
SQLXML
xmlObject)
throws
SQLException
Updates the designated column with a
java.sql.SQLXML
value.
 The updater
 methods are used to update column values in the current row or the insert
 row. The updater methods do not update the underlying database; instead
 the
updateRow
or
insertRow
methods are called
 to update the database.
Parameters:
columnIndex
- the first column is 1, the second 2, ...
xmlObject
- the value for the column to be updated
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs; this method
  is called on a closed result set;
 the
java.xml.transform.Result
,
Writer
or
OutputStream
has not been closed
 for the
SQLXML
object;
  if there is an error processing the XML value or
 the result set concurrency is
CONCUR_READ_ONLY
.  The
getCause
method
  of the exception may provide a more detailed exception, for example, if the
  stream does not contain valid XML.
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateSQLXML
void
updateSQLXML
(
String
columnLabel,
SQLXML
xmlObject)
throws
SQLException
Updates the designated column with a
java.sql.SQLXML
value.
 The updater
 methods are used to update column values in the current row or the insert
 row. The updater methods do not update the underlying database; instead
 the
updateRow
or
insertRow
methods are called
 to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
xmlObject
- the column value
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs; this method
  is called on a closed result set;
 the
java.xml.transform.Result
,
Writer
or
OutputStream
has not been closed
 for the
SQLXML
object;
  if there is an error processing the XML value or
 the result set concurrency is
CONCUR_READ_ONLY
.  The
getCause
method
  of the exception may provide a more detailed exception, for example, if the
  stream does not contain valid XML.
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
getNString
String
getNString
(int columnIndex)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
String
in the Java programming language.
 It is intended for use when
 accessing
NCHAR
,
NVARCHAR
and
LONGNVARCHAR
columns.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
null
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs
 or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
getNString
String
getNString
(
String
columnLabel)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as
 a
String
in the Java programming language.
 It is intended for use when
 accessing
NCHAR
,
NVARCHAR
and
LONGNVARCHAR
columns.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
the column value; if the value is SQL
NULL
, the
 value returned is
null
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs
 or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
getNCharacterStream
Reader
getNCharacterStream
(int columnIndex)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.io.Reader
object.
 It is intended for use when
 accessing
NCHAR
,
NVARCHAR
and
LONGNVARCHAR
columns.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
Returns:
a
java.io.Reader
object that contains the column
 value; if the value is SQL
NULL
, the value returned is
null
in the Java programming language.
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs
 or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
getNCharacterStream
Reader
getNCharacterStream
(
String
columnLabel)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object as a
java.io.Reader
object.
 It is intended for use when
 accessing
NCHAR
,
NVARCHAR
and
LONGNVARCHAR
columns.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
Returns:
a
java.io.Reader
object that contains the column
 value; if the value is SQL
NULL
, the value returned is
null
in the Java programming language
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs
 or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateNCharacterStream
void
updateNCharacterStream
(int columnIndex,
Reader
x,
 long length)
throws
SQLException
Updates the designated column with a character stream value, which will have
 the specified number of bytes.   The
 driver does the necessary conversion from Java character format to
 the national character set in the database.
 It is intended for use when
 updating
NCHAR
,
NVARCHAR
and
LONGNVARCHAR
columns.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
length
- the length of the stream
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateNCharacterStream
void
updateNCharacterStream
(
String
columnLabel,
Reader
reader,
 long length)
throws
SQLException
Updates the designated column with a character stream value, which will have
 the specified number of bytes.  The
 driver does the necessary conversion from Java character format to
 the national character set in the database.
 It is intended for use when
 updating
NCHAR
,
NVARCHAR
and
LONGNVARCHAR
columns.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
reader
- the
java.io.Reader
object containing
        the new column value
length
- the length of the stream
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateAsciiStream
void
updateAsciiStream
(int columnIndex,
InputStream
x,
 long length)
throws
SQLException
Updates the designated column with an ascii stream value, which will have
 the specified number of bytes.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
length
- the length of the stream
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateBinaryStream
void
updateBinaryStream
(int columnIndex,
InputStream
x,
 long length)
throws
SQLException
Updates the designated column with a binary stream value, which will have
 the specified number of bytes.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
length
- the length of the stream
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateCharacterStream
void
updateCharacterStream
(int columnIndex,
Reader
x,
 long length)
throws
SQLException
Updates the designated column with a character stream value, which will have
 the specified number of bytes.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
length
- the length of the stream
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateAsciiStream
void
updateAsciiStream
(
String
columnLabel,
InputStream
x,
 long length)
throws
SQLException
Updates the designated column with an ascii stream value, which will have
 the specified number of bytes.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
x
- the new column value
length
- the length of the stream
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateBinaryStream
void
updateBinaryStream
(
String
columnLabel,
InputStream
x,
 long length)
throws
SQLException
Updates the designated column with a binary stream value, which will have
 the specified number of bytes.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
x
- the new column value
length
- the length of the stream
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateCharacterStream
void
updateCharacterStream
(
String
columnLabel,
Reader
reader,
 long length)
throws
SQLException
Updates the designated column with a character stream value, which will have
 the specified number of bytes.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
reader
- the
java.io.Reader
object containing
        the new column value
length
- the length of the stream
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateBlob
void
updateBlob
(int columnIndex,
InputStream
inputStream,
 long length)
throws
SQLException
Updates the designated column using the given input stream, which
 will have the specified number of bytes.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
inputStream
- An object that contains the data to set the parameter
 value to.
length
- the number of bytes in the parameter data.
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateBlob
void
updateBlob
(
String
columnLabel,
InputStream
inputStream,
 long length)
throws
SQLException
Updates the designated column using the given input stream, which
 will have the specified number of bytes.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
inputStream
- An object that contains the data to set the parameter
 value to.
length
- the number of bytes in the parameter data.
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateClob
void
updateClob
(int columnIndex,
Reader
reader,
 long length)
throws
SQLException
Updates the designated column using the given
Reader
object, which is the given number of characters long.
 When a very large UNICODE value is input to a
LONGVARCHAR
parameter, it may be more practical to send it via a
java.io.Reader
object. The JDBC driver will
 do any necessary conversion from UNICODE to the database char format.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
reader
- An object that contains the data to set the parameter value to.
length
- the number of characters in the parameter data.
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateClob
void
updateClob
(
String
columnLabel,
Reader
reader,
 long length)
throws
SQLException
Updates the designated column using the given
Reader
object, which is the given number of characters long.
 When a very large UNICODE value is input to a
LONGVARCHAR
parameter, it may be more practical to send it via a
java.io.Reader
object.  The JDBC driver will
 do any necessary conversion from UNICODE to the database char format.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
reader
- An object that contains the data to set the parameter value to.
length
- the number of characters in the parameter data.
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateNClob
void
updateNClob
(int columnIndex,
Reader
reader,
 long length)
throws
SQLException
Updates the designated column using the given
Reader
object, which is the given number of characters long.
 When a very large UNICODE value is input to a
LONGVARCHAR
parameter, it may be more practical to send it via a
java.io.Reader
object. The JDBC driver will
 do any necessary conversion from UNICODE to the database char format.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnIndex
- the first column is 1, the second 2, ...
reader
- An object that contains the data to set the parameter value to.
length
- the number of characters in the parameter data.
Throws:
SQLException
- if the columnIndex is not valid;
 if the driver does not support national
         character sets;  if the driver can detect that a data conversion
  error could occur; this method is called on a closed result set,
 if a database access error occurs or
 the result set concurrency is
CONCUR_READ_ONLY
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateNClob
void
updateNClob
(
String
columnLabel,
Reader
reader,
 long length)
throws
SQLException
Updates the designated column using the given
Reader
object, which is the given number of characters long.
 When a very large UNICODE value is input to a
LONGVARCHAR
parameter, it may be more practical to send it via a
java.io.Reader
object. The JDBC driver will
 do any necessary conversion from UNICODE to the database char format.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
reader
- An object that contains the data to set the parameter value to.
length
- the number of characters in the parameter data.
Throws:
SQLException
- if the columnLabel is not valid;
 if the driver does not support national
         character sets;  if the driver can detect that a data conversion
  error could occur; this method is called on a closed result set;
  if a database access error occurs or
 the result set concurrency is
CONCUR_READ_ONLY
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateNCharacterStream
void
updateNCharacterStream
(int columnIndex,
Reader
x)
throws
SQLException
Updates the designated column with a character stream value.
 The data will be read from the stream
 as needed until end-of-stream is reached.  The
 driver does the necessary conversion from Java character format to
 the national character set in the database.
 It is intended for use when
 updating
NCHAR
,
NVARCHAR
and
LONGNVARCHAR
columns.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Note:
Consult your JDBC driver documentation to determine if
 it might be more efficient to use a version of
updateNCharacterStream
which takes a length parameter.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateNCharacterStream
void
updateNCharacterStream
(
String
columnLabel,
Reader
reader)
throws
SQLException
Updates the designated column with a character stream value.
 The data will be read from the stream
 as needed until end-of-stream is reached.  The
 driver does the necessary conversion from Java character format to
 the national character set in the database.
 It is intended for use when
 updating
NCHAR
,
NVARCHAR
and
LONGNVARCHAR
columns.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Note:
Consult your JDBC driver documentation to determine if
 it might be more efficient to use a version of
updateNCharacterStream
which takes a length parameter.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
reader
- the
java.io.Reader
object containing
        the new column value
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateAsciiStream
void
updateAsciiStream
(int columnIndex,
InputStream
x)
throws
SQLException
Updates the designated column with an ascii stream value.
 The data will be read from the stream
 as needed until end-of-stream is reached.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Note:
Consult your JDBC driver documentation to determine if
 it might be more efficient to use a version of
updateAsciiStream
which takes a length parameter.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateBinaryStream
void
updateBinaryStream
(int columnIndex,
InputStream
x)
throws
SQLException
Updates the designated column with a binary stream value.
 The data will be read from the stream
 as needed until end-of-stream is reached.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Note:
Consult your JDBC driver documentation to determine if
 it might be more efficient to use a version of
updateBinaryStream
which takes a length parameter.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateCharacterStream
void
updateCharacterStream
(int columnIndex,
Reader
x)
throws
SQLException
Updates the designated column with a character stream value.
 The data will be read from the stream
 as needed until end-of-stream is reached.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Note:
Consult your JDBC driver documentation to determine if
 it might be more efficient to use a version of
updateCharacterStream
which takes a length parameter.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateAsciiStream
void
updateAsciiStream
(
String
columnLabel,
InputStream
x)
throws
SQLException
Updates the designated column with an ascii stream value.
 The data will be read from the stream
 as needed until end-of-stream is reached.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Note:
Consult your JDBC driver documentation to determine if
 it might be more efficient to use a version of
updateAsciiStream
which takes a length parameter.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
x
- the new column value
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateBinaryStream
void
updateBinaryStream
(
String
columnLabel,
InputStream
x)
throws
SQLException
Updates the designated column with a binary stream value.
 The data will be read from the stream
 as needed until end-of-stream is reached.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Note:
Consult your JDBC driver documentation to determine if
 it might be more efficient to use a version of
updateBinaryStream
which takes a length parameter.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
x
- the new column value
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateCharacterStream
void
updateCharacterStream
(
String
columnLabel,
Reader
reader)
throws
SQLException
Updates the designated column with a character stream value.
 The data will be read from the stream
 as needed until end-of-stream is reached.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Note:
Consult your JDBC driver documentation to determine if
 it might be more efficient to use a version of
updateCharacterStream
which takes a length parameter.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
reader
- the
java.io.Reader
object containing
        the new column value
Throws:
SQLException
- if the columnLabel is not valid; if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateBlob
void
updateBlob
(int columnIndex,
InputStream
inputStream)
throws
SQLException
Updates the designated column using the given input stream. The data will be read from the stream
 as needed until end-of-stream is reached.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Note:
Consult your JDBC driver documentation to determine if
 it might be more efficient to use a version of
updateBlob
which takes a length parameter.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
inputStream
- An object that contains the data to set the parameter
 value to.
Throws:
SQLException
- if the columnIndex is not valid; if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateBlob
void
updateBlob
(
String
columnLabel,
InputStream
inputStream)
throws
SQLException
Updates the designated column using the given input stream. The data will be read from the stream
 as needed until end-of-stream is reached.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Note:
Consult your JDBC driver documentation to determine if
 it might be more efficient to use a version of
updateBlob
which takes a length parameter.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
inputStream
- An object that contains the data to set the parameter
 value to.
Throws:
SQLException
- if the columnLabel is not valid; if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateClob
void
updateClob
(int columnIndex,
Reader
reader)
throws
SQLException
Updates the designated column using the given
Reader
object.
  The data will be read from the stream
 as needed until end-of-stream is reached.  The JDBC driver will
 do any necessary conversion from UNICODE to the database char format.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Note:
Consult your JDBC driver documentation to determine if
 it might be more efficient to use a version of
updateClob
which takes a length parameter.
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
reader
- An object that contains the data to set the parameter value to.
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateClob
void
updateClob
(
String
columnLabel,
Reader
reader)
throws
SQLException
Updates the designated column using the given
Reader
object.
  The data will be read from the stream
 as needed until end-of-stream is reached.  The JDBC driver will
 do any necessary conversion from UNICODE to the database char format.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Note:
Consult your JDBC driver documentation to determine if
 it might be more efficient to use a version of
updateClob
which takes a length parameter.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
reader
- An object that contains the data to set the parameter value to.
Throws:
SQLException
- if the columnLabel is not valid; if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateNClob
void
updateNClob
(int columnIndex,
Reader
reader)
throws
SQLException
Updates the designated column using the given
Reader
The data will be read from the stream
 as needed until end-of-stream is reached.  The JDBC driver will
 do any necessary conversion from UNICODE to the database char format.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Note:
Consult your JDBC driver documentation to determine if
 it might be more efficient to use a version of
updateNClob
which takes a length parameter.
Parameters:
columnIndex
- the first column is 1, the second 2, ...
reader
- An object that contains the data to set the parameter value to.
Throws:
SQLException
- if the columnIndex is not valid;
 if the driver does not support national
         character sets;  if the driver can detect that a data conversion
  error could occur; this method is called on a closed result set,
 if a database access error occurs or
 the result set concurrency is
CONCUR_READ_ONLY
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
updateNClob
void
updateNClob
(
String
columnLabel,
Reader
reader)
throws
SQLException
Updates the designated column using the given
Reader
object.
 The data will be read from the stream
 as needed until end-of-stream is reached.  The JDBC driver will
 do any necessary conversion from UNICODE to the database char format.
The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
Note:
Consult your JDBC driver documentation to determine if
 it might be more efficient to use a version of
updateNClob
which takes a length parameter.
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
reader
- An object that contains the data to set the parameter value to.
Throws:
SQLException
- if the columnLabel is not valid; if the driver does not support national
         character sets;  if the driver can detect that a data conversion
  error could occur; this method is called on a closed result set;
  if a database access error occurs or
 the result set concurrency is
CONCUR_READ_ONLY
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.6
getObject
<T>
T
getObject
(int columnIndex,
Class
<T> type)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object and will convert from the
 SQL type of the column to the requested Java data type, if the
 conversion is supported. If the conversion is not
 supported  or null is specified for the type, a
SQLException
is thrown.
At a minimum, an implementation must support the conversions defined in
 Appendix B, Table B-3 and conversion of appropriate user defined SQL
 types to a Java type which implements
SQLData
, or
Struct
.
 Additional conversions may be supported and are vendor defined.
Type Parameters:
T
- the type of the class modeled by this Class object
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
type
- Class representing the Java data type to convert the designated
 column to.
Returns:
an instance of
type
holding the column value
Throws:
SQLException
- if conversion is not supported, type is null or
         another error occurs. The getCause() method of the
 exception may provide a more detailed exception, for example, if
 a conversion error occurs
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.7
getObject
<T>
T
getObject
(
String
columnLabel,
Class
<T> type)
throws
SQLException
Retrieves the value of the designated column in the current row
 of this
ResultSet
object and will convert from the
 SQL type of the column to the requested Java data type, if the
 conversion is supported. If the conversion is not
 supported  or null is specified for the type, a
SQLException
is thrown.
At a minimum, an implementation must support the conversions defined in
 Appendix B, Table B-3 and conversion of appropriate user defined SQL
 types to a Java type which implements
SQLData
, or
Struct
.
 Additional conversions may be supported and are vendor defined.
Type Parameters:
T
- the type of the class modeled by this Class object
Parameters:
columnLabel
- the label for the column specified with the SQL AS clause.
 If the SQL AS clause was not specified, then the label is the name
 of the column
type
- Class representing the Java data type to convert the designated
 column to.
Returns:
an instance of
type
holding the column value
Throws:
SQLException
- if conversion is not supported, type is null or
         another error occurs. The getCause() method of the
 exception may provide a more detailed exception, for example, if
 a conversion error occurs
SQLFeatureNotSupportedException
- if the JDBC driver does not support
 this method
Since:
1.7
updateObject
default
void
updateObject
(int columnIndex,
Object
x,
SQLType
targetSqlType,
 int scaleOrLength)
throws
SQLException
Updates the designated column with an
Object
value.

 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
If the second argument is an
InputStream
then the stream must contain
 the number of bytes specified by scaleOrLength.  If the second argument is a
Reader
then the reader must contain the number of characters specified
 by scaleOrLength. If these conditions are not true the driver will generate a
SQLException
when the statement is executed.
The default implementation will throw
SQLFeatureNotSupportedException
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
targetSqlType
- the SQL type to be sent to the database
scaleOrLength
- for an object of
java.math.BigDecimal
,
          this is the number of digits after the decimal point. For
          Java Object types
InputStream
and
Reader
,
          this is the length
          of the data in the stream or reader.  For all other types,
          this value will be ignored.
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not
 support this method; if the JDBC driver does not support the specified targetSqlType
Since:
1.8
See Also:
JDBCType
SQLType
updateObject
default
void
updateObject
(
String
columnLabel,
Object
x,
SQLType
targetSqlType,
 int scaleOrLength)
throws
SQLException
Updates the designated column with an
Object
value.

 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
If the second argument is an
InputStream
then the stream must
 contain number of bytes specified by scaleOrLength.  If the second
 argument is a
Reader
then the reader must contain the number
 of characters specified by scaleOrLength. If these conditions are not
 true the driver will generate a
SQLException
when the statement is executed.
The default implementation will throw
SQLFeatureNotSupportedException
Parameters:
columnLabel
- the label for the column specified with the SQL AS
 clause.  If the SQL AS clause was not specified, then the label is
 the name of the column
x
- the new column value
targetSqlType
- the SQL type to be sent to the database
scaleOrLength
- for an object of
java.math.BigDecimal
,
          this is the number of digits after the decimal point. For
          Java Object types
InputStream
and
Reader
,
          this is the length
          of the data in the stream or reader.  For all other types,
          this value will be ignored.
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not
 support this method; if the JDBC driver does not support the specified targetSqlType
Since:
1.8
See Also:
JDBCType
SQLType
updateObject
default
void
updateObject
(int columnIndex,
Object
x,
SQLType
targetSqlType)
throws
SQLException
Updates the designated column with an
Object
value.

 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
The default implementation will throw
SQLFeatureNotSupportedException
Parameters:
columnIndex
- the first column is 1, the second is 2, ...
x
- the new column value
targetSqlType
- the SQL type to be sent to the database
Throws:
SQLException
- if the columnIndex is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not
 support this method; if the JDBC driver does not support the specified targetSqlType
Since:
1.8
See Also:
JDBCType
SQLType
updateObject
default
void
updateObject
(
String
columnLabel,
Object
x,
SQLType
targetSqlType)
throws
SQLException
Updates the designated column with an
Object
value.

 The updater methods are used to update column values in the
 current row or the insert row.  The updater methods do not
 update the underlying database; instead the
updateRow
or
insertRow
methods are called to update the database.
The default implementation will throw
SQLFeatureNotSupportedException
Parameters:
columnLabel
- the label for the column specified with the SQL AS
 clause.  If the SQL AS clause was not specified, then the label is
 the name of the column
x
- the new column value
targetSqlType
- the SQL type to be sent to the database
Throws:
SQLException
- if the columnLabel is not valid;
 if a database access error occurs;
 the result set concurrency is
CONCUR_READ_ONLY
or this method is called on a closed result set
SQLFeatureNotSupportedException
- if the JDBC driver does not
 support this method; if the JDBC driver does not support the specified targetSqlType
Since:
1.8
See Also:
JDBCType
SQLType
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.