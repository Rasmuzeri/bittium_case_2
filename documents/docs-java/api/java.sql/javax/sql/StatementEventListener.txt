StatementEventListener (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr |
Method
Detail:
Field |
Constr |
Method
SEARCH
Module
java.sql
Package
javax.sql
Interface StatementEventListener
All Superinterfaces:
EventListener
public interface
StatementEventListener
extends
EventListener
An object that registers to be notified of events that occur on PreparedStatements
 that are in the Statement pool.
The JDBC 3.0 specification added the maxStatements
ConnectionPooledDataSource
property to provide a standard mechanism for
 enabling the pooling of
PreparedStatements
and to specify the size of the statement
 pool.  However, there was no way for a driver to notify an external
 statement pool when a
PreparedStatement
becomes invalid.  For some databases, a
 statement becomes invalid if a DDL operation is performed that affects the
 table.  For example an application may create a temporary table to do some work
 on the table and then destroy it.  It may later recreate the same table when
 it is needed again.  Some databases will invalidate any prepared statements
 that reference the temporary table when the table is dropped.
Similar to the methods defined in the
ConnectionEventListener
interface,
 the driver will call the
StatementEventListener.statementErrorOccurred
method prior to throwing any exceptions when it detects a statement is invalid.
 The driver will also call the
StatementEventListener.statementClosed
method when a
PreparedStatement
is closed.
Methods which allow a component to register a StatementEventListener with a
PooledConnection
have been added to the
PooledConnection
interface.
Since:
1.6
Method Summary
All Methods
Instance Methods
Abstract Methods
Modifier and Type
Method
Description
void
statementClosed
(
StatementEvent
event)
The driver calls this method on all
StatementEventListener
s registered on the connection when it detects that a
PreparedStatement
is closed.
void
statementErrorOccurred
(
StatementEvent
event)
The driver calls this method on all
StatementEventListener
s
 registered on the connection when it detects that a
PreparedStatement
is invalid.
Method Details
statementClosed
void
statementClosed
(
StatementEvent
event)
The driver calls this method on all
StatementEventListener
s registered on the connection when it detects that a
PreparedStatement
is closed.
Parameters:
event
- an event object describing the source of
 the event and that the
PreparedStatement
was closed.
Since:
1.6
statementErrorOccurred
void
statementErrorOccurred
(
StatementEvent
event)
The driver calls this method on all
StatementEventListener
s
 registered on the connection when it detects that a
PreparedStatement
is invalid. The driver calls this method
 just before it throws the
SQLException
,
 contained in the given event, to the application.
Parameters:
event
- an event object describing the source of the event,
                 the statement that is invalid and the exception the
                 driver is about to throw.  The source of the event is
                 the
PooledConnection
which the invalid
PreparedStatement
is associated with.
Since:
1.6
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.