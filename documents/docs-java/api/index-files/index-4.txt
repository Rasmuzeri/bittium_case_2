D-Index (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Index
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
_
All Classes and Interfaces
|
All Packages
|
Constant Field Values
|
Serialized Form
|
System Properties
D
1. Direct access to an MXBean interface
- Search tag in class java.lang.management.ManagementFactory
Section
6.0 Default Behavior
- Search tag in class javax.sql.rowset.BaseRowSet
Section
D
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for Engineering D, 22 x 34 in.
D
- Static variable in class javax.print.attribute.standard.
MediaSize.Engineering
Specifies the engineering D size, 22 inch by 34 inch.
D
- Static variable in class javax.print.attribute.standard.
MediaSizeName
D size.
D2B
- Static variable in class jdk.incubator.vector.
VectorOperators
Convert
doubleVal
to
(byte)doubleVal
.
D2F
- Static variable in class jdk.incubator.vector.
VectorOperators
Convert
doubleVal
to
(float)doubleVal
.
D2I
- Static variable in class jdk.incubator.vector.
VectorOperators
Convert
doubleVal
to
(int)doubleVal
.
D2L
- Static variable in class jdk.incubator.vector.
VectorOperators
Convert
doubleVal
to
(long)doubleVal
.
D2S
- Static variable in class jdk.incubator.vector.
VectorOperators
Convert
doubleVal
to
(short)doubleVal
.
daemon()
- Method in interface java.lang.
Thread.Builder.OfPlatform
Sets the daemon status to
true
.
daemon(boolean)
- Method in interface java.lang.
Thread.Builder.OfPlatform
Sets the daemon status.
damage(Rectangle)
- Method in class javax.swing.text.
DefaultCaret
Damages the area surrounding the caret to cause
 it to be repainted in a new location.
damageLineRange(int, int, Shape, Component)
- Method in class javax.swing.text.
PlainView
Repaint the given line range.
damageRange(JTextComponent, int, int)
- Method in class javax.swing.plaf.basic.
BasicTextUI
Causes the portion of the view responsible for the
 given part of the model to be repainted.
damageRange(JTextComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiTextUI
Invokes the
damageRange
method on each UI handled by this object.
damageRange(JTextComponent, int, int)
- Method in class javax.swing.plaf.
TextUI
Causes the portion of the view responsible for the
 given part of the model to be repainted.
damageRange(JTextComponent, int, int, Position.Bias, Position.Bias)
- Method in class javax.swing.plaf.basic.
BasicTextUI
Causes the portion of the view responsible for the
 given part of the model to be repainted.
damageRange(JTextComponent, int, int, Position.Bias, Position.Bias)
- Method in class javax.swing.plaf.multi.
MultiTextUI
Invokes the
damageRange
method on each UI handled by this object.
damageRange(JTextComponent, int, int, Position.Bias, Position.Bias)
- Method in class javax.swing.plaf.
TextUI
Causes the portion of the view responsible for the
 given part of the model to be repainted.
DARK
- Static variable in class javax.swing.plaf.metal.
MetalIconFactory
DARK
is used for the property
Tree.expandedIcon
.
DARK_GRAY
- Static variable in class java.awt.
Color
The color dark gray.
darker()
- Method in class java.awt.
Color
Creates a new
Color
that is a darker version of this
Color
.
darkGray
- Static variable in class java.awt.
Color
The color dark gray.
darkShadow
- Variable in class javax.swing.plaf.basic.
BasicBorders.ButtonBorder
The color of dark shadow.
darkShadow
- Variable in class javax.swing.plaf.basic.
BasicBorders.FieldBorder
The color of dark shadow.
darkShadow
- Variable in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Dark shadow color
darkShadowColor
- Static variable in class javax.swing.plaf.metal.
MetalSliderUI
The color of dark shadow.
DASH_PUNCTUATION
- Static variable in class java.lang.
Character
General category "Pd" in the Unicode specification.
data
- Variable in class javax.sound.midi.
MidiMessage
The MIDI message data.
data
- Variable in class javax.swing.text.html.parser.
Element
A field to store user data.
data
- Variable in class javax.swing.text.html.parser.
Entity
The char array of data.
Data
- Interface in
javax.xml.crypto
An abstract representation of the result of dereferencing a
URIReference
or the input/output of subsequent
Transform
s.
DATA
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "data"
DATA_TRANSFER_COMPLETE
- Static variable in class javax.print.event.
PrintJobEvent
The job is not necessarily printed yet, but the data has been transferred
 successfully from the client to the print service.
DataAmount
- Annotation Interface in
jdk.jfr
Event field annotation, specifies that a value represents an amount of data (for example, bytes).
DatabaseMetaData
- Interface in
java.sql
Comprehensive information about the database as a whole.
dataBuffer
- Variable in class java.awt.image.
Raster
The DataBuffer that stores the image data.
DataBuffer
- Class in
java.awt.image
This class exists to wrap one or more data arrays.
DataBuffer(int, int)
- Constructor for class java.awt.image.
DataBuffer
Constructs a DataBuffer containing one bank of the specified
  data type and size.
DataBuffer(int, int, int)
- Constructor for class java.awt.image.
DataBuffer
Constructs a DataBuffer containing the specified number of
  banks.
DataBuffer(int, int, int, int)
- Constructor for class java.awt.image.
DataBuffer
Constructs a DataBuffer that contains the specified number
  of banks.
DataBuffer(int, int, int, int[])
- Constructor for class java.awt.image.
DataBuffer
Constructs a DataBuffer which contains the specified number
  of banks.
DataBufferByte
- Class in
java.awt.image
This class extends
DataBuffer
and stores data internally as bytes.
DataBufferByte(byte[][], int)
- Constructor for class java.awt.image.
DataBufferByte
Constructs a byte-based
DataBuffer
with the specified arrays.
DataBufferByte(byte[][], int, int[])
- Constructor for class java.awt.image.
DataBufferByte
Constructs a byte-based
DataBuffer
with the specified arrays, size,
 and offsets.
DataBufferByte(byte[], int)
- Constructor for class java.awt.image.
DataBufferByte
Constructs a byte-based
DataBuffer
with a single bank using the
 specified array.
DataBufferByte(byte[], int, int)
- Constructor for class java.awt.image.
DataBufferByte
Constructs a byte-based
DataBuffer
with a single bank using the
 specified array, size, and offset.
DataBufferByte(int)
- Constructor for class java.awt.image.
DataBufferByte
Constructs a byte-based
DataBuffer
with a single bank and the
 specified size.
DataBufferByte(int, int)
- Constructor for class java.awt.image.
DataBufferByte
Constructs a byte based
DataBuffer
with the specified number of
 banks all of which are the specified size.
DataBufferDouble
- Class in
java.awt.image
This class extends
DataBuffer
and stores data internally
 in
double
form.
DataBufferDouble(double[][], int)
- Constructor for class java.awt.image.
DataBufferDouble
Constructs a
double
-based
DataBuffer
with the specified data arrays.
DataBufferDouble(double[][], int, int[])
- Constructor for class java.awt.image.
DataBufferDouble
Constructs a
double
-based
DataBuffer
with the specified data arrays, size, and per-bank offsets.
DataBufferDouble(double[], int)
- Constructor for class java.awt.image.
DataBufferDouble
Constructs a
double
-based
DataBuffer
with the specified data array.
DataBufferDouble(double[], int, int)
- Constructor for class java.awt.image.
DataBufferDouble
Constructs a
double
-based
DataBuffer
with the specified data array.
DataBufferDouble(int)
- Constructor for class java.awt.image.
DataBufferDouble
Constructs a
double
-based
DataBuffer
with a specified size.
DataBufferDouble(int, int)
- Constructor for class java.awt.image.
DataBufferDouble
Constructs a
double
-based
DataBuffer
with a specified number of banks, all of which are of a
 specified size.
DataBufferFloat
- Class in
java.awt.image
This class extends
DataBuffer
and stores data internally
 in
float
form.
DataBufferFloat(float[][], int)
- Constructor for class java.awt.image.
DataBufferFloat
Constructs a
float
-based
DataBuffer
with the specified data arrays.
DataBufferFloat(float[][], int, int[])
- Constructor for class java.awt.image.
DataBufferFloat
Constructs a
float
-based
DataBuffer
with the specified data arrays, size, and per-bank offsets.
DataBufferFloat(float[], int)
- Constructor for class java.awt.image.
DataBufferFloat
Constructs a
float
-based
DataBuffer
with the specified data array.
DataBufferFloat(float[], int, int)
- Constructor for class java.awt.image.
DataBufferFloat
Constructs a
float
-based
DataBuffer
with the specified data array.
DataBufferFloat(int)
- Constructor for class java.awt.image.
DataBufferFloat
Constructs a
float
-based
DataBuffer
with a specified size.
DataBufferFloat(int, int)
- Constructor for class java.awt.image.
DataBufferFloat
Constructs a
float
-based
DataBuffer
with a specified number of banks, all of which are of a
 specified size.
DataBufferInt
- Class in
java.awt.image
This class extends
DataBuffer
and stores data internally
 as integers.
DataBufferInt(int)
- Constructor for class java.awt.image.
DataBufferInt
Constructs an integer-based
DataBuffer
with a single bank
 and the specified size.
DataBufferInt(int[][], int)
- Constructor for class java.awt.image.
DataBufferInt
Constructs an integer-based
DataBuffer
with the specified arrays.
DataBufferInt(int[][], int, int[])
- Constructor for class java.awt.image.
DataBufferInt
Constructs an integer-based
DataBuffer
with the specified arrays, size,
 and offsets.
DataBufferInt(int[], int)
- Constructor for class java.awt.image.
DataBufferInt
Constructs an integer-based
DataBuffer
with a single bank using the
 specified array.
DataBufferInt(int[], int, int)
- Constructor for class java.awt.image.
DataBufferInt
Constructs an integer-based
DataBuffer
with a single bank using the
 specified array, size, and offset.
DataBufferInt(int, int)
- Constructor for class java.awt.image.
DataBufferInt
Constructs an integer-based
DataBuffer
with the specified number of
 banks, all of which are the specified size.
DataBufferShort
- Class in
java.awt.image
This class extends
DataBuffer
and stores data internally as shorts.
DataBufferShort(int)
- Constructor for class java.awt.image.
DataBufferShort
Constructs a short-based
DataBuffer
with a single bank and the
 specified size.
DataBufferShort(int, int)
- Constructor for class java.awt.image.
DataBufferShort
Constructs a short-based
DataBuffer
with the specified number of
 banks all of which are the specified size.
DataBufferShort(short[][], int)
- Constructor for class java.awt.image.
DataBufferShort
Constructs a short-based
DataBuffer
with the specified arrays.
DataBufferShort(short[][], int, int[])
- Constructor for class java.awt.image.
DataBufferShort
Constructs a short-based
DataBuffer
with the specified arrays, size,
 and offsets.
DataBufferShort(short[], int)
- Constructor for class java.awt.image.
DataBufferShort
Constructs a short-based
DataBuffer
with a single bank using the
 specified array.
DataBufferShort(short[], int, int)
- Constructor for class java.awt.image.
DataBufferShort
Constructs a short-based
DataBuffer
with a single bank using the
 specified array, size, and offset.
DataBufferUShort
- Class in
java.awt.image
This class extends
DataBuffer
and stores data internally as
 shorts.
DataBufferUShort(int)
- Constructor for class java.awt.image.
DataBufferUShort
Constructs an unsigned-short based
DataBuffer
with a single bank and the
 specified size.
DataBufferUShort(int, int)
- Constructor for class java.awt.image.
DataBufferUShort
Constructs an unsigned-short based
DataBuffer
with the specified number of
 banks, all of which are the specified size.
DataBufferUShort(short[][], int)
- Constructor for class java.awt.image.
DataBufferUShort
Constructs an unsigned-short based
DataBuffer
with the specified arrays.
DataBufferUShort(short[][], int, int[])
- Constructor for class java.awt.image.
DataBufferUShort
Constructs an unsigned-short based
DataBuffer
with specified arrays,
 size, and offsets.
DataBufferUShort(short[], int)
- Constructor for class java.awt.image.
DataBufferUShort
Constructs an unsigned-short based
DataBuffer
with a single bank
 using the specified array.
DataBufferUShort(short[], int, int)
- Constructor for class java.awt.image.
DataBufferUShort
Constructs an unsigned-short based
DataBuffer
with a single bank
 using the specified array, size, and offset.
dataDefinitionCausesTransactionCommit()
- Method in interface java.sql.
DatabaseMetaData
Retrieves whether a data definition statement within a transaction forces
 the transaction to commit.
dataDefinitionIgnoredInTransactions()
- Method in interface java.sql.
DatabaseMetaData
Retrieves whether this database ignores a data definition statement
 within a transaction.
DataFlavor
- Class in
java.awt.datatransfer
A
DataFlavor
provides meta information about data.
DataFlavor()
- Constructor for class java.awt.datatransfer.
DataFlavor
Constructs a new
DataFlavor
.
DataFlavor(Class<?>, String)
- Constructor for class java.awt.datatransfer.
DataFlavor
Constructs a
DataFlavor
that represents a Java class.
DataFlavor(String)
- Constructor for class java.awt.datatransfer.
DataFlavor
Constructs a
DataFlavor
from a
mimeType
string.
DataFlavor(String, String)
- Constructor for class java.awt.datatransfer.
DataFlavor
Constructs a
DataFlavor
that represents a
MimeType
.
DataFlavor(String, String, ClassLoader)
- Constructor for class java.awt.datatransfer.
DataFlavor
Constructs a
DataFlavor
that represents a
MimeType
.
DataFormatException
- Exception Class in
java.util.zip
Signals that a data format error has occurred.
DataFormatException()
- Constructor for exception class java.util.zip.
DataFormatException
Constructs a DataFormatException with no detail message.
DataFormatException(String)
- Constructor for exception class java.util.zip.
DataFormatException
Constructs a DataFormatException with the specified detail message.
DatagramChannel
- Class in
java.nio.channels
A selectable channel for datagram-oriented sockets.
DatagramChannel(SelectorProvider)
- Constructor for class java.nio.channels.
DatagramChannel
Initializes a new instance of this class.
DatagramPacket
- Class in
java.net
This class represents a datagram packet.
DatagramPacket(byte[], int)
- Constructor for class java.net.
DatagramPacket
Constructs a
DatagramPacket
for receiving packets of
 length
length
.
DatagramPacket(byte[], int, int)
- Constructor for class java.net.
DatagramPacket
Constructs a
DatagramPacket
for receiving packets of
 length
length
, specifying an offset into the buffer.
DatagramPacket(byte[], int, int, InetAddress, int)
- Constructor for class java.net.
DatagramPacket
Constructs a datagram packet for sending packets of length
length
with offset
offset
to the
 specified port number on the specified host.
DatagramPacket(byte[], int, int, SocketAddress)
- Constructor for class java.net.
DatagramPacket
Constructs a datagram packet for sending packets of length
length
with offset
offset
to the
 specified port number on the specified host.
DatagramPacket(byte[], int, InetAddress, int)
- Constructor for class java.net.
DatagramPacket
Constructs a datagram packet for sending packets of length
length
to the specified port number on the specified
 host.
DatagramPacket(byte[], int, SocketAddress)
- Constructor for class java.net.
DatagramPacket
Constructs a datagram packet for sending packets of length
length
to the specified port number on the specified
 host.
DatagramSocket
- Class in
java.net
This class represents a socket for sending and receiving datagram packets.
DatagramSocket()
- Constructor for class java.net.
DatagramSocket
Constructs a datagram socket and binds it to any available port
 on the local host machine.
DatagramSocket(int)
- Constructor for class java.net.
DatagramSocket
Constructs a datagram socket and binds it to the specified port
 on the local host machine.
DatagramSocket(int, InetAddress)
- Constructor for class java.net.
DatagramSocket
Creates a datagram socket, bound to the specified local
 address.
DatagramSocket(DatagramSocketImpl)
- Constructor for class java.net.
DatagramSocket
Creates an unbound datagram socket with the specified
 DatagramSocketImpl.
DatagramSocket(SocketAddress)
- Constructor for class java.net.
DatagramSocket
Creates a datagram socket, bound to the specified local
 socket address.
DatagramSocketImpl
- Class in
java.net
Abstract datagram and multicast socket implementation base class.
DatagramSocketImpl()
- Constructor for class java.net.
DatagramSocketImpl
Constructor for subclasses to call.
DatagramSocketImplFactory
- Interface in
java.net
This interface defines a factory for datagram socket implementations.
DataInput
- Interface in
java.io
The
DataInput
interface provides
 for reading bytes from a binary stream and
 reconstructing from them data in any of
 the Java primitive types.
DataInputStream
- Class in
java.io
A data input stream lets an application read primitive Java data
 types from an underlying input stream in a machine-independent
 way.
DataInputStream(InputStream)
- Constructor for class java.io.
DataInputStream
Creates a DataInputStream that uses the specified
 underlying InputStream.
DataLine
- Interface in
javax.sound.sampled
DataLine
adds media-related functionality to its superinterface,
Line
.
DataLine.Info
- Class in
javax.sound.sampled
Besides the class information inherited from its superclass,
DataLine.Info
provides additional information specific to data
 lines.
DATALINK
- Enum constant in enum class java.sql.
JDBCType
Identifies the generic SQL type
DATALINK
.
DATALINK
- Static variable in class java.sql.
Types
The constant in the Java programming language, sometimes referred to
 as a type code, that identifies the generic SQL type
DATALINK
.
dataModel
- Variable in class javax.swing.
JComboBox
This protected field is implementation specific.
dataModel
- Variable in class javax.swing.
JTable
The
TableModel
of the table.
DataOutput
- Interface in
java.io
The
DataOutput
interface provides
 for converting data from any of the Java
 primitive types to a series of bytes and
 writing these bytes to a binary stream.
DataOutputStream
- Class in
java.io
A data output stream lets an application write primitive Java data
 types to an output stream in a portable way.
DataOutputStream(OutputStream)
- Constructor for class java.io.
DataOutputStream
Creates a new data output stream to write data to the specified
 underlying output stream.
DataSource
- Interface in
javax.sql
A factory for connections to the physical data source that this
DataSource
object represents.
DATASOURCE_DB_LOCK
- Static variable in class javax.sql.rowset.spi.
SyncProvider
Indicates that a lock is placed on the entire data source that is the source of
 data for the
RowSet
object
 that is using this
SyncProvider
object.
DATASOURCE_NO_LOCK
- Static variable in class javax.sql.rowset.spi.
SyncProvider
Indicates that no locks remain on the originating data source.
DATASOURCE_ROW_LOCK
- Static variable in class javax.sql.rowset.spi.
SyncProvider
Indicates that a lock is placed on the rows that are touched by the original
 SQL statement used to populate the
RowSet
object
 that is using this
SyncProvider
object.
DATASOURCE_TABLE_LOCK
- Static variable in class javax.sql.rowset.spi.
SyncProvider
Indicates that a lock is placed on all tables that are touched by the original
 SQL statement used to populate the
RowSet
object
 that is using this
SyncProvider
object.
DataTruncation
- Exception Class in
java.sql
An exception  thrown as a
DataTruncation
exception
 (on writes) or reported as a
DataTruncation
warning (on reads)
  when a data values is unexpectedly truncated for reasons other than its having
  exceeded
MaxFieldSize
.
DataTruncation(int, boolean, boolean, int, int)
- Constructor for exception class java.sql.
DataTruncation
Creates a
DataTruncation
object
 with the SQLState initialized
 to 01004 when
read
is set to
true
and 22001
 when
read
is set to
false
,
 the reason set to "Data truncation", the
 vendor code set to 0, and
 the other fields set to the given values.
DataTruncation(int, boolean, boolean, int, int, Throwable)
- Constructor for exception class java.sql.
DataTruncation
Creates a
DataTruncation
object
 with the SQLState initialized
 to 01004 when
read
is set to
true
and 22001
 when
read
is set to
false
,
 the reason set to "Data truncation", the
 vendor code set to 0, and
 the other fields set to the given values.
dataType
- Variable in class java.awt.image.
DataBuffer
The data type of this DataBuffer.
dataType
- Variable in class java.awt.image.
SampleModel
Data type of the DataBuffer storing the pixel data.
DATATYPE_BOOLEAN
- Static variable in interface javax.imageio.metadata.
IIOMetadataFormat
A constant returned by
getAttributeDataType
indicating that the value of an attribute is one of the boolean
 values 'true' or 'false'.
DATATYPE_DOUBLE
- Static variable in interface javax.imageio.metadata.
IIOMetadataFormat
A constant returned by
getAttributeDataType
indicating that the value of an attribute is a string
 representation of a double-precision decimal floating-point
 number.
DATATYPE_FLOAT
- Static variable in interface javax.imageio.metadata.
IIOMetadataFormat
A constant returned by
getAttributeDataType
indicating that the value of an attribute is a string
 representation of a decimal floating-point number.
DATATYPE_INTEGER
- Static variable in interface javax.imageio.metadata.
IIOMetadataFormat
A constant returned by
getAttributeDataType
indicating that the value of an attribute is a string
 representation of an integer.
DATATYPE_STRING
- Static variable in interface javax.imageio.metadata.
IIOMetadataFormat
A constant returned by
getAttributeDataType
indicating that the value of an attribute is a general Unicode
 string.
DatatypeConfigurationException
- Exception Class in
javax.xml.datatype
Indicates a serious configuration error.
DatatypeConfigurationException()
- Constructor for exception class javax.xml.datatype.
DatatypeConfigurationException
Create a new
DatatypeConfigurationException
with
 no specified detail message and cause.
DatatypeConfigurationException(String)
- Constructor for exception class javax.xml.datatype.
DatatypeConfigurationException
Create a new
DatatypeConfigurationException
with
 the specified detail message.
DatatypeConfigurationException(String, Throwable)
- Constructor for exception class javax.xml.datatype.
DatatypeConfigurationException
Create a new
DatatypeConfigurationException
with
 the specified detail message and cause.
DatatypeConfigurationException(Throwable)
- Constructor for exception class javax.xml.datatype.
DatatypeConfigurationException
Create a new
DatatypeConfigurationException
with
 the specified cause.
DatatypeConstants
- Class in
javax.xml.datatype
Utility class to contain basic Datatype values as constants.
DatatypeConstants.Field
- Class in
javax.xml.datatype
Type-safe enum class that represents six fields
 of the
Duration
class.
DatatypeFactory
- Class in
javax.xml.datatype
Factory that creates new
javax.xml.datatype
Object
s that map XML to/from Java
Object
s.
DatatypeFactory()
- Constructor for class javax.xml.datatype.
DatatypeFactory
Protected constructor to prevent instantiation outside of package.
DATATYPEFACTORY_IMPLEMENTATION_CLASS
- Static variable in class javax.xml.datatype.
DatatypeFactory
Default implementation class name as defined in
JSR 206: Java(TM) API for XML Processing (JAXP) 1.3
.
DATATYPEFACTORY_PROPERTY
- Static variable in class javax.xml.datatype.
DatatypeFactory
Default property name as defined in JSR 206: Java(TM) API for XML Processing (JAXP) 1.3.
dataVector
- Variable in class javax.swing.table.
DefaultTableModel
The
Vector
of
Vectors
of
Object
values.
date()
- Element in annotation interface javax.annotation.processing.
Generated
Date when the source was generated.
date(int, int, int)
- Method in interface java.time.chrono.
Chronology
Obtains a local date in this chronology from the proleptic-year,
 month-of-year and day-of-month fields.
date(int, int, int)
- Method in class java.time.chrono.
HijrahChronology
Obtains a local date in Hijrah calendar system from the
 proleptic-year, month-of-year and day-of-month fields.
date(int, int, int)
- Method in class java.time.chrono.
IsoChronology
Obtains an ISO local date from the proleptic-year, month-of-year
 and day-of-month fields.
date(int, int, int)
- Method in class java.time.chrono.
JapaneseChronology
Obtains a local date in Japanese calendar system from the
 proleptic-year, month-of-year and day-of-month fields.
date(int, int, int)
- Method in class java.time.chrono.
MinguoChronology
Obtains a local date in Minguo calendar system from the
 proleptic-year, month-of-year and day-of-month fields.
date(int, int, int)
- Method in class java.time.chrono.
ThaiBuddhistChronology
Obtains a local date in Thai Buddhist calendar system from the
 proleptic-year, month-of-year and day-of-month fields.
date(Era, int, int, int)
- Method in interface java.time.chrono.
Chronology
Obtains a local date in this chronology from the era, year-of-era,
 month-of-year and day-of-month fields.
date(Era, int, int, int)
- Method in class java.time.chrono.
HijrahChronology
Obtains a local date in Hijrah calendar system from the
 era, year-of-era, month-of-year and day-of-month fields.
date(Era, int, int, int)
- Method in class java.time.chrono.
IsoChronology
Obtains an ISO local date from the era, year-of-era, month-of-year
 and day-of-month fields.
date(Era, int, int, int)
- Method in class java.time.chrono.
JapaneseChronology
Obtains a local date in Japanese calendar system from the
 era, year-of-era, month-of-year and day-of-month fields.
date(Era, int, int, int)
- Method in class java.time.chrono.
MinguoChronology
Obtains a local date in Minguo calendar system from the
 era, year-of-era, month-of-year and day-of-month fields.
date(Era, int, int, int)
- Method in class java.time.chrono.
ThaiBuddhistChronology
Obtains a local date in Thai Buddhist calendar system from the
 era, year-of-era, month-of-year and day-of-month fields.
date(TemporalAccessor)
- Method in interface java.time.chrono.
Chronology
Obtains a local date in this chronology from another temporal object.
date(TemporalAccessor)
- Method in class java.time.chrono.
HijrahChronology
date(TemporalAccessor)
- Method in class java.time.chrono.
IsoChronology
Obtains an ISO local date from another date-time object.
date(TemporalAccessor)
- Method in class java.time.chrono.
JapaneseChronology
date(TemporalAccessor)
- Method in class java.time.chrono.
MinguoChronology
date(TemporalAccessor)
- Method in class java.time.chrono.
ThaiBuddhistChronology
Date
- Class in
java.sql
A thin wrapper around a millisecond value that allows
 JDBC to identify this as an SQL
DATE
value.
Date
- Class in
java.util
The class
Date
represents a specific instant
 in time, with millisecond precision.
Date()
- Constructor for class java.util.
Date
Allocates a
Date
object and initializes it so that
 it represents the time at which it was allocated, measured to the
 nearest millisecond.
Date(int, int, int)
- Constructor for class java.sql.
Date
Deprecated.
instead use the constructor
Date(long date)
Date(int, int, int)
- Constructor for class java.util.
Date
Deprecated.
As of JDK version 1.1,
 replaced by
Calendar.set(year + 1900, month, date)
or
GregorianCalendar(year + 1900, month, date)
.
Date(int, int, int, int, int)
- Constructor for class java.util.
Date
Deprecated.
As of JDK version 1.1,
 replaced by
Calendar.set(year + 1900, month, date, hrs, min)
or
GregorianCalendar(year + 1900, month, date, hrs, min)
.
Date(int, int, int, int, int, int)
- Constructor for class java.util.
Date
Deprecated.
As of JDK version 1.1,
 replaced by
Calendar.set(year + 1900, month, date, hrs, min, sec)
or
GregorianCalendar(year + 1900, month, date, hrs, min, sec)
.
Date(long)
- Constructor for class java.sql.
Date
Constructs a
Date
object using the given milliseconds
 time value.
Date(long)
- Constructor for class java.util.
Date
Allocates a
Date
object and initializes it to
 represent the specified number of milliseconds since the
 standard base time known as "the epoch", namely January 1,
 1970, 00:00:00 GMT.
Date(String)
- Constructor for class java.util.
Date
Deprecated.
As of JDK version 1.1,
 replaced by
DateFormat.parse(String s)
.
DATE
- Enum constant in enum class java.sql.
JDBCType
Identifies the generic SQL type
DATE
.
DATE
- Static variable in class java.sql.
Types
The constant in the Java programming language, sometimes referred
 to as a type code, that identifies the generic SQL type
DATE
.
DATE
- Static variable in class java.util.
Calendar
Field number for
get
and
set
indicating the
 day of the month.
DATE
- Static variable in class javax.management.openmbean.
SimpleType
The
SimpleType
instance describing values whose
 Java class name is
java.util.Date
.
DATE
- Static variable in class javax.xml.datatype.
DatatypeConstants
Fully qualified name for W3C XML Schema 1.0 datatype
date
.
DATE_EDITOR
- Static variable in class javax.accessibility.
AccessibleRole
A
DATE_EDITOR
is a component that allows users to edit
java.util.Date
and
java.util.Time
objects.
DATE_FIELD
- Static variable in class java.text.
DateFormat
Useful constant for DATE field alignment.
Date/Time
- Search tag in class java.util.Formatter
Section
Date/Time Conversions
- Search tag in class java.util.Formatter
Section
Date and Time Formats
- Search tag in class java.util.Formatter
External Specification
Date and Time Formats
- Search tag in java.nio.file.attribute.FileTime.toString()
External Specification
Date and Time Patterns
- Search tag in class java.text.SimpleDateFormat
Section
DateEditor(JSpinner)
- Constructor for class javax.swing.
JSpinner.DateEditor
Construct a
JSpinner
editor that supports displaying
 and editing the value of a
SpinnerDateModel
with a
JFormattedTextField
.
DateEditor(JSpinner, String)
- Constructor for class javax.swing.
JSpinner.DateEditor
Construct a
JSpinner
editor that supports displaying
 and editing the value of a
SpinnerDateModel
with a
JFormattedTextField
.
dateEpochDay(long)
- Method in interface java.time.chrono.
Chronology
Obtains a local date in this chronology from the epoch-day.
dateEpochDay(long)
- Method in class java.time.chrono.
HijrahChronology
Obtains a local date in the Hijrah calendar system from the epoch-day.
dateEpochDay(long)
- Method in class java.time.chrono.
IsoChronology
Obtains an ISO local date from the epoch-day.
dateEpochDay(long)
- Method in class java.time.chrono.
JapaneseChronology
Obtains a local date in the Japanese calendar system from the epoch-day.
dateEpochDay(long)
- Method in class java.time.chrono.
MinguoChronology
Obtains a local date in the Minguo calendar system from the epoch-day.
dateEpochDay(long)
- Method in class java.time.chrono.
ThaiBuddhistChronology
Obtains a local date in the Thai Buddhist calendar system from the epoch-day.
dateFilter(RowFilter.ComparisonType, Date, int...)
- Static method in class javax.swing.
RowFilter
Returns a
RowFilter
that includes entries that
 have at least one
Date
value meeting the specified
 criteria.
DateFormat
- Class in
java.text
DateFormat
is an abstract class for date/time formatting subclasses which
 formats and parses dates or time in a language-independent manner.
DateFormat()
- Constructor for class java.text.
DateFormat
Create a new date format.
DateFormat.Field
- Class in
java.text
Defines constants that are used as attribute keys in the
AttributedCharacterIterator
returned
 from
DateFormat.formatToCharacterIterator
and as
 field identifiers in
FieldPosition
.
DateFormatProvider
- Class in
java.text.spi
An abstract class for service providers that
 provide concrete implementations of the
DateFormat
class.
DateFormatProvider()
- Constructor for class java.text.spi.
DateFormatProvider
Sole constructor.
DateFormatSymbols
- Class in
java.text
DateFormatSymbols
is a public class for encapsulating
 localizable date-time formatting data, such as the names of the
 months, the names of the days of the week, and the time zone data.
DateFormatSymbols()
- Constructor for class java.text.
DateFormatSymbols
Construct a DateFormatSymbols object by loading format data from
 resources for the default
FORMAT
locale.
DateFormatSymbols(Locale)
- Constructor for class java.text.
DateFormatSymbols
Construct a DateFormatSymbols object by loading format data from
 resources for the given locale.
DateFormatSymbolsProvider
- Class in
java.text.spi
An abstract class for service providers that
 provide instances of the
DateFormatSymbols
class.
DateFormatSymbolsProvider()
- Constructor for class java.text.spi.
DateFormatSymbolsProvider
Sole constructor.
DateFormatter
- Class in
javax.swing.text
DateFormatter is an
InternationalFormatter
that does its
 formatting by way of an instance of
java.text.DateFormat
.
DateFormatter()
- Constructor for class javax.swing.text.
DateFormatter
This is shorthand for
new DateFormatter(DateFormat.getDateInstance())
.
DateFormatter(DateFormat)
- Constructor for class javax.swing.text.
DateFormatter
Returns a DateFormatter configured with the specified
Format
instance.
dateNow()
- Method in interface java.time.chrono.
Chronology
Obtains the current local date in this chronology from the system clock in the default time-zone.
dateNow()
- Method in class java.time.chrono.
HijrahChronology
dateNow()
- Method in class java.time.chrono.
IsoChronology
Obtains the current ISO local date from the system clock in the default time-zone.
dateNow()
- Method in class java.time.chrono.
JapaneseChronology
dateNow()
- Method in class java.time.chrono.
MinguoChronology
dateNow()
- Method in class java.time.chrono.
ThaiBuddhistChronology
dateNow(Clock)
- Method in interface java.time.chrono.
Chronology
Obtains the current local date in this chronology from the specified clock.
dateNow(Clock)
- Method in class java.time.chrono.
HijrahChronology
dateNow(Clock)
- Method in class java.time.chrono.
IsoChronology
Obtains the current ISO local date from the specified clock.
dateNow(Clock)
- Method in class java.time.chrono.
JapaneseChronology
dateNow(Clock)
- Method in class java.time.chrono.
MinguoChronology
dateNow(Clock)
- Method in class java.time.chrono.
ThaiBuddhistChronology
dateNow(ZoneId)
- Method in interface java.time.chrono.
Chronology
Obtains the current local date in this chronology from the system clock in the specified time-zone.
dateNow(ZoneId)
- Method in class java.time.chrono.
HijrahChronology
dateNow(ZoneId)
- Method in class java.time.chrono.
IsoChronology
Obtains the current ISO local date from the system clock in the specified time-zone.
dateNow(ZoneId)
- Method in class java.time.chrono.
JapaneseChronology
dateNow(ZoneId)
- Method in class java.time.chrono.
MinguoChronology
dateNow(ZoneId)
- Method in class java.time.chrono.
ThaiBuddhistChronology
Dates and Times
- Search tag in package java.time
Section
datesUntil(LocalDate)
- Method in class java.time.
LocalDate
Returns a sequential ordered stream of dates.
datesUntil(LocalDate, Period)
- Method in class java.time.
LocalDate
Returns a sequential ordered stream of dates by given incremental step.
DATETIME
- Static variable in class javax.xml.datatype.
DatatypeConstants
Fully qualified name for W3C XML Schema 1.0 datatype
dateTime
.
DateTimeAtCompleted
- Class in
javax.print.attribute.standard
Class
DateTimeAtCompleted
is a printing attribute class, a date-time
 attribute, that indicates the date and time at which the Print Job completed
 (or was canceled or aborted).
DateTimeAtCompleted(Date)
- Constructor for class javax.print.attribute.standard.
DateTimeAtCompleted
Construct a new date-time at completed attribute with the given
Date
value.
DateTimeAtCreation
- Class in
javax.print.attribute.standard
Class
DateTimeAtCreation
is a printing attribute class, a date-time
 attribute, that indicates the date and time at which the Print Job was
 created.
DateTimeAtCreation(Date)
- Constructor for class javax.print.attribute.standard.
DateTimeAtCreation
Construct a new date-time at creation attribute with the given
Date
value.
DateTimeAtProcessing
- Class in
javax.print.attribute.standard
Class
DateTimeAtProcessing
is a printing attribute class, a date-time
 attribute, that indicates the date and time at which the Print Job first
 began processing.
DateTimeAtProcessing(Date)
- Constructor for class javax.print.attribute.standard.
DateTimeAtProcessing
Construct a new date-time at processing attribute with the given
Date
value.
DateTimeException
- Exception Class in
java.time
Exception used to indicate a problem while calculating a date-time.
DateTimeException(String)
- Constructor for exception class java.time.
DateTimeException
Constructs a new date-time exception with the specified message.
DateTimeException(String, Throwable)
- Constructor for exception class java.time.
DateTimeException
Constructs a new date-time exception with the specified message and cause.
DateTimeFormatter
- Class in
java.time.format
Formatter for printing and parsing date-time objects.
DateTimeFormatterBuilder
- Class in
java.time.format
Builder to create date-time formatters.
DateTimeFormatterBuilder()
- Constructor for class java.time.format.
DateTimeFormatterBuilder
Constructs a new instance of the builder.
DateTimeParseException
- Exception Class in
java.time.format
An exception thrown when an error occurs during parsing.
DateTimeParseException(String, CharSequence, int)
- Constructor for exception class java.time.format.
DateTimeParseException
Constructs a new exception with the specified message.
DateTimeParseException(String, CharSequence, int, Throwable)
- Constructor for exception class java.time.format.
DateTimeParseException
Constructs a new exception with the specified message and cause.
DateTimeSyntax
- Class in
javax.print.attribute
Class
DateTimeSyntax
is an abstract base class providing the common
 implementation of all attributes whose value is a date and time.
DateTimeSyntax(Date)
- Constructor for class javax.print.attribute.
DateTimeSyntax
Construct a new date-time attribute with the given
java.util.Date
value.
dateYearDay(int, int)
- Method in interface java.time.chrono.
Chronology
Obtains a local date in this chronology from the proleptic-year and
 day-of-year fields.
dateYearDay(int, int)
- Method in class java.time.chrono.
HijrahChronology
Obtains a local date in Hijrah calendar system from the
 proleptic-year and day-of-year fields.
dateYearDay(int, int)
- Method in class java.time.chrono.
IsoChronology
Obtains an ISO local date from the proleptic-year and day-of-year fields.
dateYearDay(int, int)
- Method in class java.time.chrono.
JapaneseChronology
Obtains a local date in Japanese calendar system from the
 proleptic-year and day-of-year fields.
dateYearDay(int, int)
- Method in class java.time.chrono.
MinguoChronology
Obtains a local date in Minguo calendar system from the
 proleptic-year and day-of-year fields.
dateYearDay(int, int)
- Method in class java.time.chrono.
ThaiBuddhistChronology
Obtains a local date in Thai Buddhist calendar system from the
 proleptic-year and day-of-year fields.
dateYearDay(Era, int, int)
- Method in interface java.time.chrono.
Chronology
Obtains a local date in this chronology from the era, year-of-era and
 day-of-year fields.
dateYearDay(Era, int, int)
- Method in class java.time.chrono.
HijrahChronology
Obtains a local date in Hijrah calendar system from the
 era, year-of-era and day-of-year fields.
dateYearDay(Era, int, int)
- Method in class java.time.chrono.
IsoChronology
Obtains an ISO local date from the era, year-of-era and day-of-year fields.
dateYearDay(Era, int, int)
- Method in class java.time.chrono.
JapaneseChronology
Obtains a local date in Japanese calendar system from the
 era, year-of-era and day-of-year fields.
dateYearDay(Era, int, int)
- Method in class java.time.chrono.
MinguoChronology
Obtains a local date in Minguo calendar system from the
 era, year-of-era and day-of-year fields.
dateYearDay(Era, int, int)
- Method in class java.time.chrono.
ThaiBuddhistChronology
Obtains a local date in Thai Buddhist calendar system from the
 era, year-of-era and day-of-year fields.
DAY_OF_MONTH
- Enum constant in enum class java.time.temporal.
ChronoField
The day-of-month.
DAY_OF_MONTH
- Static variable in class java.text.
DateFormat.Field
Constant identifying the day of month field.
DAY_OF_MONTH
- Static variable in class java.util.
Calendar
Field number for
get
and
set
indicating the
 day of the month.
DAY_OF_QUARTER
- Static variable in class java.time.temporal.
IsoFields
The field that represents the day-of-quarter.
DAY_OF_WEEK
- Enum constant in enum class java.time.temporal.
ChronoField
The day-of-week, such as Tuesday.
DAY_OF_WEEK
- Static variable in class java.text.
DateFormat.Field
Constant identifying the day of week field.
DAY_OF_WEEK
- Static variable in class java.util.
Calendar
Field number for
get
and
set
indicating the day
 of the week.
DAY_OF_WEEK_FIELD
- Static variable in class java.text.
DateFormat
Useful constant for DAY_OF_WEEK field alignment.
DAY_OF_WEEK_IN_MONTH
- Static variable in class java.text.
DateFormat.Field
Constant identifying the day of week field.
DAY_OF_WEEK_IN_MONTH
- Static variable in class java.util.
Calendar
Field number for
get
and
set
indicating the
 ordinal number of the day of the week within the current month.
DAY_OF_WEEK_IN_MONTH_FIELD
- Static variable in class java.text.
DateFormat
Useful constant for DAY_OF_WEEK_IN_MONTH field alignment.
DAY_OF_YEAR
- Enum constant in enum class java.time.temporal.
ChronoField
The day-of-year.
DAY_OF_YEAR
- Static variable in class java.text.
DateFormat.Field
Constant identifying the day of year field.
DAY_OF_YEAR
- Static variable in class java.util.
Calendar
Field number for
get
and
set
indicating the day
 number within the current year.
DAY_OF_YEAR_FIELD
- Static variable in class java.text.
DateFormat
Useful constant for DAY_OF_YEAR field alignment.
dayOfWeek()
- Method in class java.time.temporal.
WeekFields
Returns a field to access the day of week based on this
WeekFields
.
DayOfWeek
- Enum Class in
java.time
A day-of-week, such as 'Tuesday'.
dayOfWeekInMonth(int, DayOfWeek)
- Static method in class java.time.temporal.
TemporalAdjusters
Returns the day-of-week in month adjuster, which returns a new date
 with the ordinal day-of-week based on the month.
DAYS
- Enum constant in enum class java.time.temporal.
ChronoUnit
Unit that represents the concept of a day.
DAYS
- Enum constant in enum class java.util.concurrent.
TimeUnit
Time unit representing twenty four hours.
DAYS
- Static variable in class javax.xml.datatype.
DatatypeConstants
A constant that represents the days field.
dbgTag
- Variable in class javax.management.monitor.
Monitor
Deprecated.
No replacement.
DD
- Static variable in class javax.swing.text.html.
HTML.Tag
Tag <dd>
deactivate(boolean)
- Method in interface java.awt.im.spi.
InputMethod
Deactivates the input method.
deactivateFrame(JInternalFrame)
- Method in class javax.swing.
DefaultDesktopManager
deactivateFrame(JInternalFrame)
- Method in interface javax.swing.
DesktopManager
Generally, indicate that this frame has lost focus.
deactivateFrame(JInternalFrame)
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI
This method is called when the frame is no longer selected.
DEBUG
- Enum constant in enum class java.lang.
System.Logger.Level
DEBUG
level: usually used to log debug information traces.
DebugGraphics
- Class in
javax.swing
Graphics subclass supporting graphics debugging.
DebugGraphics()
- Constructor for class javax.swing.
DebugGraphics
Constructs a new debug graphics context that supports slowed
 down drawing.
DebugGraphics(Graphics)
- Constructor for class javax.swing.
DebugGraphics
Constructs a debug graphics context from an existing graphics
 context that supports slowed down drawing.
DebugGraphics(Graphics, JComponent)
- Constructor for class javax.swing.
DebugGraphics
Constructs a debug graphics context from an existing graphics
 context that slows down drawing for the specified component.
DECADES
- Enum constant in enum class java.time.temporal.
ChronoUnit
Unit that represents the concept of a decade.
decapitalize(String)
- Static method in class java.beans.
Introspector
Utility method to take a string and convert it to normal Java variable
 name capitalization.
decapsulate(byte[])
- Method in class javax.crypto.
KEM.Decapsulator
The key decapsulation function.
decapsulate(byte[], int, int, String)
- Method in class javax.crypto.
KEM.Decapsulator
The key decapsulation function.
DecapsulateException
- Exception Class in
javax.crypto
An exception that is thrown by the
KEM.Decapsulator.decapsulate(byte[])
method to denote an
 error during decapsulation.
DecapsulateException(String)
- Constructor for exception class javax.crypto.
DecapsulateException
Creates a
DecapsulateException
with the specified
 detail message.
DecapsulateException(String, Throwable)
- Constructor for exception class javax.crypto.
DecapsulateException
Creates a
DecapsulateException
with the specified
 detail message and cause.
DECEMBER
- Enum constant in enum class java.time.
Month
The singleton instance for the month of December with 31 days.
DECEMBER
- Static variable in class java.util.
Calendar
Value of the
Calendar.MONTH
field indicating the
 twelfth month of the year in the Gregorian and Julian calendars.
DECEMBER
- Static variable in class javax.xml.datatype.
DatatypeConstants
Value for twelve month of year.
DECIMAL
- Enum constant in enum class java.sql.
JDBCType
Identifies the generic SQL type
DECIMAL
.
DECIMAL
- Static variable in class java.sql.
Types
The constant in the Java programming language, sometimes referred
 to as a type code, that identifies the generic SQL type
DECIMAL
.
DECIMAL_DIGIT_NUMBER
- Static variable in class java.lang.
Character
General category "Nd" in the Unicode specification.
DECIMAL_FLOAT
- Enum constant in enum class java.util.
Formatter.BigDecimalLayoutForm
Format the
BigDecimal
as a decimal number.
DECIMAL_SEPARATOR
- Static variable in class java.text.
NumberFormat.Field
Constant identifying the decimal separator field.
DECIMAL128
- Static variable in class java.math.
MathContext
A
MathContext
object with a precision setting
 matching the precision of the IEEE 754-2019 decimal128 format, 34 digits, and a
 rounding mode of
HALF_EVEN
.
DECIMAL32
- Static variable in class java.math.
MathContext
A
MathContext
object with a precision setting
 matching the precision of the IEEE 754-2019 decimal32 format, 7 digits, and a
 rounding mode of
HALF_EVEN
.
DECIMAL64
- Static variable in class java.math.
MathContext
A
MathContext
object with a precision setting
 matching the precision of the IEEE 754-2019 decimal64 format, 16 digits, and a
 rounding mode of
HALF_EVEN
.
DecimalFormat
- Class in
java.text
DecimalFormat
is a concrete subclass of
NumberFormat
that formats decimal numbers.
DecimalFormat()
- Constructor for class java.text.
DecimalFormat
Creates a DecimalFormat using the default pattern and symbols
 for the default
FORMAT
locale.
DecimalFormat(String)
- Constructor for class java.text.
DecimalFormat
Creates a DecimalFormat using the given pattern and the symbols
 for the default
FORMAT
locale.
DecimalFormat(String, DecimalFormatSymbols)
- Constructor for class java.text.
DecimalFormat
Creates a DecimalFormat using the given pattern and symbols.
DecimalFormatSymbols
- Class in
java.text
This class represents the set of symbols (such as the decimal separator,
 the grouping separator, and so on) needed by
DecimalFormat
to format numbers.
DecimalFormatSymbols()
- Constructor for class java.text.
DecimalFormatSymbols
Create a DecimalFormatSymbols object for the default
FORMAT
locale.
DecimalFormatSymbols(Locale)
- Constructor for class java.text.
DecimalFormatSymbols
Create a DecimalFormatSymbols object for the given locale.
DecimalFormatSymbolsProvider
- Class in
java.text.spi
An abstract class for service providers that
 provide instances of the
DecimalFormatSymbols
class.
DecimalFormatSymbolsProvider()
- Constructor for class java.text.spi.
DecimalFormatSymbolsProvider
Sole constructor.
DecimalStyle
- Class in
java.time.format
Localized decimal style used in date and time formatting.
declaration(String, String, String)
- Method in interface org.xml.sax.
ContentHandler
Receives notification of the XML declaration.
DECLARATION
- Enum constant in enum class jdk.jshell.
SourceCodeAnalysis.Attribute
The span refers to a declaration of an element.
DeclarationSnippet
- Class in
jdk.jshell
Grouping for all declaration Snippets: variable declarations
 (
VarSnippet
), method declarations
 (
MethodSnippet
), and type declarations
 (
TypeDeclSnippet
).
DECLARE
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "declare"
DECLARED
- Enum constant in enum class javax.lang.model.type.
TypeKind
A class or interface type.
DECLARED
- Static variable in interface java.lang.reflect.
Member
Identifies the set of declared members of a class or interface.
DeclaredType
- Interface in
javax.lang.model.type
Represents a declared type, either a class type or an interface type.
declarePrefix(String, String)
- Method in class org.xml.sax.helpers.
NamespaceSupport
Declare a Namespace prefix.
declaringType()
- Method in interface com.sun.jdi.
Location
Gets the type to which this Location belongs.
declaringType()
- Method in interface com.sun.jdi.
TypeComponent
Returns the type in which this component was declared.
DeclHandler
- Interface in
org.xml.sax.ext
SAX2 extension handler for DTD declaration events.
decode(byte[])
- Method in class java.util.
Base64.Decoder
Decodes all bytes from the input byte array using the
Base64
encoding scheme, writing the results into a newly-allocated output
 byte array.
decode(byte[], byte[])
- Method in class java.util.
Base64.Decoder
Decodes all bytes from the input byte array using the
Base64
encoding scheme, writing the results into the given output byte array,
 starting at offset 0.
decode(InputStream)
- Method in interface java.security.
Certificate
Deprecated.
Decodes a certificate from an input stream.
decode(String)
- Static method in class java.awt.
Color
Converts a
String
to an integer and returns the
 specified opaque
Color
.
decode(String)
- Static method in class java.awt.
Font
Returns the
Font
that the
str
argument describes.
decode(String)
- Static method in class java.lang.
Byte
Decodes a
String
into a
Byte
.
decode(String)
- Static method in class java.lang.
Integer
Decodes a
String
into an
Integer
.
decode(String)
- Static method in class java.lang.
Long
Decodes a
String
into a
Long
.
decode(String)
- Static method in class java.lang.
Short
Decodes a
String
into a
Short
.
decode(String)
- Static method in class java.net.
URLDecoder
Deprecated.
The resulting string may vary depending on the
          default charset. Instead, use the decode(String,String) method
          to specify the encoding.
decode(String)
- Method in class java.util.
Base64.Decoder
Decodes a Base64 encoded String into a newly-allocated byte array
 using the
Base64
encoding scheme.
decode(String, String)
- Static method in class java.net.
URLDecoder
Decodes an
application/x-www-form-urlencoded
string using
 a specific encoding scheme.
decode(String, Charset)
- Static method in class java.net.
URLDecoder
Decodes an
application/x-www-form-urlencoded
string using
 a specific
Charset
.
decode(ByteBuffer)
- Method in class java.nio.charset.
Charset
Convenience method that decodes bytes in this charset into Unicode
 characters.
decode(ByteBuffer)
- Method in class java.nio.charset.
CharsetDecoder
Convenience method that decodes the remaining content of a single input
 byte buffer into a newly-allocated character buffer.
decode(ByteBuffer)
- Method in class java.util.
Base64.Decoder
Decodes all bytes from the input byte buffer using the
Base64
encoding scheme, writing the results into a newly-allocated ByteBuffer.
decode(ByteBuffer, CharBuffer, boolean)
- Method in class java.nio.charset.
CharsetDecoder
Decodes as many bytes as possible from the given input buffer,
 writing the results to the given output buffer.
decodeAnchorX(float, float)
- Method in class javax.swing.plaf.nimbus.
AbstractRegionPainter
Decodes and returns a float value representing the actual pixel location for
 the anchor point given the encoded X value of the control point, and the offset
 distance to the anchor from that control point.
decodeAnchorY(float, float)
- Method in class javax.swing.plaf.nimbus.
AbstractRegionPainter
Decodes and returns a float value representing the actual pixel location for
 the anchor point given the encoded Y value of the control point, and the offset
 distance to the anchor from that control point.
decodeColor(Color, Color, float)
- Method in class javax.swing.plaf.nimbus.
AbstractRegionPainter
Decodes and returns a color, which is derived from a offset between two
 other colors.
decodeColor(String, float, float, float, int)
- Method in class javax.swing.plaf.nimbus.
AbstractRegionPainter
Decodes and returns a color, which is derived from a base color in UI
 defaults.
decodeDataFlavor(String)
- Static method in class java.awt.datatransfer.
SystemFlavorMap
Decodes a
String
native for use as a
DataFlavor
.
decodeGradient(float, float, float, float, float[], Color[])
- Method in class javax.swing.plaf.nimbus.
AbstractRegionPainter
Given parameters for creating a LinearGradientPaint, this method will
 create and return a linear gradient paint.
decodeJavaMIMEType(String)
- Static method in class java.awt.datatransfer.
SystemFlavorMap
Decodes a
String
native for use as a Java MIME type.
decodeLineStyle(Object)
- Method in class javax.swing.plaf.metal.
MetalTreeUI
Converts between the string passed into the client property
 and the internal representation (currently and int)
decodeLoop(ByteBuffer, CharBuffer)
- Method in class java.nio.charset.
CharsetDecoder
Decodes one or more bytes into one or more characters.
decodeRadialGradient(float, float, float, float[], Color[])
- Method in class javax.swing.plaf.nimbus.
AbstractRegionPainter
Given parameters for creating a RadialGradientPaint, this method will
 create and return a radial gradient paint.
decodeX(float)
- Method in class javax.swing.plaf.nimbus.
AbstractRegionPainter
Decodes and returns a float value representing the actual pixel location for
 the given encoded X value.
decodeY(float)
- Method in class javax.swing.plaf.nimbus.
AbstractRegionPainter
Decodes and returns a float value representing the actual pixel location for
 the given encoded y value.
DECONSTRUCTION_PATTERN
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
DeconstructionPatternTree
.
DeconstructionPatternTree
- Interface in
com.sun.source.tree
A deconstruction pattern tree.
decorateTask(Runnable, RunnableScheduledFuture<V>)
- Method in class java.util.concurrent.
ScheduledThreadPoolExecutor
Modifies or replaces the task used to execute a runnable.
decorateTask(Callable<V>, RunnableScheduledFuture<V>)
- Method in class java.util.concurrent.
ScheduledThreadPoolExecutor
Modifies or replaces the task used to execute a callable.
decrButton
- Variable in class javax.swing.plaf.basic.
BasicScrollBarUI
Decrement button
DECREASE_HIGHLIGHT
- Static variable in class javax.swing.plaf.basic.
BasicScrollBarUI
Decrease highlight
decreaseButton
- Variable in class javax.swing.plaf.metal.
MetalScrollBarUI
The decrease button.
decrement()
- Method in class java.util.concurrent.atomic.
LongAdder
Equivalent to
add(-1)
.
DECREMENT
- Static variable in interface javax.accessibility.
AccessibleAction
An action which decrements a value.
decrementAndGet()
- Method in class java.util.concurrent.atomic.
AtomicInteger
Atomically decrements the current value,
 with memory effects as specified by
VarHandle.getAndAdd(java.lang.Object...)
.
decrementAndGet()
- Method in class java.util.concurrent.atomic.
AtomicLong
Atomically decrements the current value,
 with memory effects as specified by
VarHandle.getAndAdd(java.lang.Object...)
.
decrementAndGet(int)
- Method in class java.util.concurrent.atomic.
AtomicIntegerArray
Atomically decrements the value of the element at index
i
,
 with memory effects as specified by
VarHandle.getAndAdd(java.lang.Object...)
.
decrementAndGet(int)
- Method in class java.util.concurrent.atomic.
AtomicLongArray
Atomically decrements the value of the element at index
i
,
 with memory effects as specified by
VarHandle.getAndAdd(java.lang.Object...)
.
decrementAndGet(T)
- Method in class java.util.concurrent.atomic.
AtomicIntegerFieldUpdater
Atomically decrements by one the current value of the field of the
 given object managed by this updater.
decrementAndGet(T)
- Method in class java.util.concurrent.atomic.
AtomicLongFieldUpdater
Atomically decrements by one the current value of the field of the
 given object managed by this updater.
decrementExact(int)
- Static method in class java.lang.
Math
Returns the argument decremented by one, throwing an exception if the
 result overflows an
int
.
decrementExact(int)
- Static method in class java.lang.
StrictMath
Returns the argument decremented by one,
 throwing an exception if the result overflows an
int
.
decrementExact(long)
- Static method in class java.lang.
Math
Returns the argument decremented by one, throwing an exception if the
 result overflows a
long
.
decrementExact(long)
- Static method in class java.lang.
StrictMath
Returns the argument decremented by one,
 throwing an exception if the result overflows a
long
.
decrementPendingCountUnlessZero()
- Method in class java.util.concurrent.
CountedCompleter
If the pending count is nonzero, (atomically) decrements it.
decrGap
- Variable in class javax.swing.plaf.basic.
BasicScrollBarUI
Distance between the decrement button and the track.
decrIndent()
- Method in class javax.swing.text.
AbstractWriter
Decrements the indent level.
DECRYPT
- Static variable in class javax.xml.crypto.
KeySelector.Purpose
A key for decrypting.
DECRYPT_MODE
- Static variable in class javax.crypto.
Cipher
Constant used to initialize cipher to decryption mode.
deepEquals(Object[], Object[])
- Static method in class java.util.
Arrays
Returns
true
if the two specified arrays are
deeply
 equal
to one another.
deepEquals(Object, Object)
- Static method in class java.util.
Objects
Returns
true
if the arguments are deeply equal to each other
 and
false
otherwise.
deepHashCode(Object[])
- Static method in class java.util.
Arrays
Returns a hash code based on the "deep contents" of the specified
 array.
deepToString(Object[])
- Static method in class java.util.
Arrays
Returns a string representation of the "deep contents" of the specified
 array.
def
- Variable in class java.util.zip.
DeflaterInputStream
Compressor for this stream.
def
- Variable in class java.util.zip.
DeflaterOutputStream
Compressor for this stream.
defAttributeList(String, int, int, String, String, AttributeList)
- Method in class javax.swing.text.html.parser.
DTD
Creates and returns an
AttributeList
responding to a new attribute.
DEFAULT
- Enum constant in enum class com.sun.management.
VMOption.Origin
The VM option has not been set and its value
 is the default value.
DEFAULT
- Enum constant in enum class javax.lang.model.element.
Modifier
The modifier
default
DEFAULT
- Static variable in class java.awt.dnd.
DragSourceContext
An
int
used by updateCurrentCursor()
 indicating that the
Cursor
should change
 to the default (no drop)
Cursor
.
DEFAULT
- Static variable in class java.security.spec.
PSSParameterSpec
Deprecated.
This field uses the default values defined in the PKCS #1
         standard. Some of these defaults are no longer recommended due
         to advances in cryptanalysis -- see the
PKCS#1 v2.2
standard for more details. Thus, it is recommended to create
         a new
PSSParameterSpec
with the desired parameter values
         using the
PSSParameterSpec(String, String, AlgorithmParameterSpec, int, int)
constructor.
DEFAULT
- Static variable in class java.text.
DateFormat
Constant for default style pattern.
DEFAULT
- Static variable in class javax.crypto.spec.
OAEPParameterSpec
Deprecated.
This field uses the default values defined in the PKCS #1
         standard. Some of these defaults are no longer recommended due
         to advances in cryptanalysis -- see
Appendix B.1 of PKCS #1
for more details. Thus, it is recommended to create
         a new
OAEPParameterSpec
with the desired parameter values
         using the
OAEPParameterSpec(String, String, AlgorithmParameterSpec, PSource)
constructor.
DEFAULT
- Static variable in class javax.crypto.spec.
PSource.PSpecified
The encoding input P whose value equals byte[0].
DEFAULT
- Static variable in interface javax.swing.
Action
Not currently used.
DEFAULT
- Static variable in interface javax.swing.plaf.synth.
SynthConstants
Indicates the region is the default.
DEFAULT
- Static variable in interface javax.swing.text.html.parser.
DTDConstants
The DTD constant corresponds to DEFAULT
DEFAULT
- Static variable in class javax.xml.crypto.dsig.spec.
ExcC14NParameterSpec
Indicates the default namespace ("#default").
DEFAULT_CARET_POLICY
- Static variable in class java.awt.font.
TextLayout
This
CaretPolicy
is used when a policy is not specified
 by the client.
DEFAULT_CASE_LABEL
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
DefaultCaseLabelTree
.
DEFAULT_CLASS_LOADER
- Static variable in class javax.management.remote.
JMXConnectorFactory
Name of the attribute that specifies the default class
 loader.
DEFAULT_CLASS_LOADER
- Static variable in class javax.management.remote.
JMXConnectorServerFactory
Name of the attribute that specifies the default class
 loader.
DEFAULT_CLASS_LOADER_NAME
- Static variable in class javax.management.remote.
JMXConnectorServerFactory
Name of the attribute that specifies the default class
 loader MBean name.
DEFAULT_COMPRESSION
- Static variable in class java.util.zip.
Deflater
Default compression level.
DEFAULT_CSS
- Static variable in class javax.swing.text.html.
HTMLEditorKit
Default Cascading Style Sheet file that sets
 up the tag views.
DEFAULT_CURSOR
- Static variable in class java.awt.
Cursor
The default cursor type (gets set if no cursor is defined).
DEFAULT_CURSOR
- Static variable in class java.awt.
Frame
Deprecated.
replaced by
Cursor.DEFAULT_CURSOR
.
DEFAULT_JUSTIFICATION
- Static variable in class javax.swing.border.
TitledBorder
Use the default justification for the title text.
DEFAULT_KEYMAP
- Static variable in class javax.swing.text.
JTextComponent
The default keymap that will be shared by all
JTextComponent
instances unless they
 have had a different keymap set.
DEFAULT_LAYER
- Static variable in class javax.swing.
JLayeredPane
Convenience object defining the Default layer.
DEFAULT_LIFETIME
- Static variable in interface org.ietf.jgss.
GSSContext
A lifetime constant representing the default context lifetime.
DEFAULT_LIFETIME
- Static variable in interface org.ietf.jgss.
GSSCredential
A lifetime constant representing the default credential lifetime.
DEFAULT_MODALITY_TYPE
- Static variable in class java.awt.
Dialog
Default modality type for modal dialogs.
DEFAULT_NAME
- Static variable in class java.lang.constant.
ConstantDescs
Invocation name to use when no name is needed, such as the name of a
 constructor, or the invocation name of a dynamic constant or dynamic
 callsite when the bootstrap is known to ignore the invocation name.
DEFAULT_NS_PREFIX
- Static variable in class javax.xml.
XMLConstants
Prefix to use to represent the default XML Namespace.
DEFAULT_OBJECT_MODEL_URI
- Static variable in class javax.xml.xpath.
XPathFactory
Default Object Model URI.
DEFAULT_OPTION
- Static variable in class javax.swing.
JOptionPane
Type meaning Look and Feel should not supply any options -- only
 use the options from the
JOptionPane
.
DEFAULT_POSITION
- Static variable in class javax.swing.border.
TitledBorder
Use the default vertical orientation for the title text.
DEFAULT_PROPERTY_NAME
- Static variable in class javax.xml.xpath.
XPathFactory
The default property name according to the JAXP spec.
DEFAULT_SIZE
- Static variable in class javax.swing.
GroupLayout
Indicates the size from the component or gap should be used for a
 particular range value.
DEFAULT_STRATEGY
- Static variable in class java.util.zip.
Deflater
Default compression strategy.
DEFAULT_STYLE
- Static variable in class javax.swing.text.
StyleContext
The name given to the default logical style attached
 to paragraphs.
DEFAULT_VALUE
- Variable in class com.sun.source.util.
SimpleDocTreeVisitor
The default value, returned by the
default action
.
DEFAULT_VALUE
- Variable in class com.sun.source.util.
SimpleTreeVisitor
The default value, returned by the
default action
.
DEFAULT_VALUE
- Variable in class javax.lang.model.util.
ElementScanner6
The specified default value.
DEFAULT_VALUE
- Variable in class javax.lang.model.util.
SimpleAnnotationValueVisitor6
Default value to be returned;
defaultAction
returns this value unless the method is
 overridden.
DEFAULT_VALUE
- Variable in class javax.lang.model.util.
SimpleElementVisitor6
Default value to be returned;
defaultAction
returns this value unless the method is
 overridden.
DEFAULT_VALUE
- Variable in class javax.lang.model.util.
SimpleTypeVisitor6
Default value to be returned;
defaultAction
returns this value unless the method is
 overridden.
DEFAULT_VALUE_FIELD
- Static variable in class javax.management.
JMX
The name of the
defaultValue
field.
defaultAction(DocTree, P)
- Method in class com.sun.source.util.
SimpleDocTreeVisitor
The default action, used by all visit methods that are not overridden.
defaultAction(Tree, P)
- Method in class com.sun.source.util.
SimpleTreeVisitor
The default action, used by all visit methods that are not overridden.
defaultAction(Object, P)
- Method in class javax.lang.model.util.
SimpleAnnotationValueVisitor6
The default action for visit methods.
defaultAction(Element, P)
- Method in class javax.lang.model.util.
SimpleElementVisitor6
The default action for visit methods.
defaultAction(TypeMirror, P)
- Method in class javax.lang.model.util.
SimpleTypeVisitor6
The default action for visit methods.
Default and Platform Encodings
- Search tag in class javax.print.DocFlavor
Section
defaultArguments()
- Method in interface com.sun.jdi.connect.
Connector
Returns the arguments accepted by this Connector and their
 default values.
DefaultBoundedRangeModel
- Class in
javax.swing
A generic implementation of BoundedRangeModel.
DefaultBoundedRangeModel()
- Constructor for class javax.swing.
DefaultBoundedRangeModel
Initializes all of the properties with default values.
DefaultBoundedRangeModel(int, int, int, int)
- Constructor for class javax.swing.
DefaultBoundedRangeModel
Initializes value, extent, minimum and maximum.
defaultBufferSize()
- Static method in class java.util.concurrent.
Flow
Returns a default value for Publisher or Subscriber buffering,
 that may be used in the absence of other constraints.
defaultButton
- Variable in class javax.swing.
JRootPane
The button that gets activated when the pane has the focus and
 a UI-specific action like pressing the
Enter
key occurs.
DefaultButtonModel
- Class in
javax.swing
The default implementation of a
Button
component's data model.
DefaultButtonModel()
- Constructor for class javax.swing.
DefaultButtonModel
Constructs a
DefaultButtonModel
.
DefaultCaret
- Class in
javax.swing.text
A default implementation of Caret.
DefaultCaret()
- Constructor for class javax.swing.text.
DefaultCaret
Constructs a default caret.
DefaultCaseLabelTree
- Interface in
com.sun.source.tree
A case label that marks
default
in
case null, default
.
DefaultCellEditor
- Class in
javax.swing
The default editor for table and tree cells.
DefaultCellEditor(JCheckBox)
- Constructor for class javax.swing.
DefaultCellEditor
Constructs a
DefaultCellEditor
object that uses a check box.
DefaultCellEditor(JComboBox<?>)
- Constructor for class javax.swing.
DefaultCellEditor
Constructs a
DefaultCellEditor
object that uses a
 combo box.
DefaultCellEditor(JTextField)
- Constructor for class javax.swing.
DefaultCellEditor
Constructs a
DefaultCellEditor
that uses a text field.
DefaultCellEditor.EditorDelegate
- Class in
javax.swing
The protected
EditorDelegate
class.
defaultCharset()
- Static method in class java.nio.charset.
Charset
Returns the default charset of this Java virtual machine.
defaultChoosers
- Variable in class javax.swing.plaf.basic.
BasicColorChooserUI
The array of default color choosers.
DefaultColorSelectionModel
- Class in
javax.swing.colorchooser
A generic implementation of
ColorSelectionModel
.
DefaultColorSelectionModel()
- Constructor for class javax.swing.colorchooser.
DefaultColorSelectionModel
Creates a
DefaultColorSelectionModel
with the
 current color set to
Color.white
.
DefaultColorSelectionModel(Color)
- Constructor for class javax.swing.colorchooser.
DefaultColorSelectionModel
Creates a
DefaultColorSelectionModel
with the
 current color set to
color
, which should be
 non-
null
.
DefaultComboBoxModel<E>
- Class in
javax.swing
The default model for combo boxes.
DefaultComboBoxModel()
- Constructor for class javax.swing.
DefaultComboBoxModel
Constructs an empty DefaultComboBoxModel object.
DefaultComboBoxModel(E[])
- Constructor for class javax.swing.
DefaultComboBoxModel
Constructs a DefaultComboBoxModel object initialized with
 an array of objects.
DefaultComboBoxModel(Vector<E>)
- Constructor for class javax.swing.
DefaultComboBoxModel
Constructs a DefaultComboBoxModel object initialized with
 a vector.
defaultConnector()
- Method in interface com.sun.jdi.
VirtualMachineManager
Identifies the default connector.
defaultConstraints
- Variable in class java.awt.
GridBagLayout
This field holds a gridbag constraints instance
 containing the default values, so if a component
 does not have gridbag constraints associated with
 it, then the component will be assigned a
 copy of the
defaultConstraints
.
defaultController
- Variable in class javax.imageio.
IIOParam
The default
IIOParamController
that will be
 used to provide settings for this
IIOParam
object when the
activateController
method
 is called.
defaultController
- Variable in class javax.imageio.metadata.
IIOMetadata
An
IIOMetadataController
that is suggested for use
 as the controller for this
IIOMetadata
object.
DefaultCopyDrop
- Static variable in class java.awt.dnd.
DragSource
The default
Cursor
to use with a copy operation indicating
 that a drop is currently allowed.
DefaultCopyNoDrop
- Static variable in class java.awt.dnd.
DragSource
The default
Cursor
to use with a copy operation indicating
 that a drop is currently not allowed.
DefaultDesktopManager
- Class in
javax.swing
This is an implementation of the
DesktopManager
.
DefaultDesktopManager()
- Constructor for class javax.swing.
DefaultDesktopManager
Constructs a
DefaultDesktopManager
.
DefaultDocumentEvent(int, int, DocumentEvent.EventType)
- Constructor for class javax.swing.text.
AbstractDocument.DefaultDocumentEvent
Constructs a change record.
defaulted(String)
- Method in class java.io.
ObjectInputStream.GetField
Return true if the named field is defaulted and has no value in this
 stream.
DefaultEditor(JSpinner)
- Constructor for class javax.swing.
JSpinner.DefaultEditor
Constructs an editor component for the specified
JSpinner
.
DefaultEditorKit
- Class in
javax.swing.text
This is the set of things needed by a text component
 to be a reasonably functioning editor for some
type
of text document.
DefaultEditorKit()
- Constructor for class javax.swing.text.
DefaultEditorKit
default constructor for DefaultEditorKit
DefaultEditorKit.BeepAction
- Class in
javax.swing.text
Creates a beep.
DefaultEditorKit.CopyAction
- Class in
javax.swing.text
Copies the selected region and place its contents
 into the system clipboard.
DefaultEditorKit.CutAction
- Class in
javax.swing.text
Cuts the selected region and place its contents
 into the system clipboard.
DefaultEditorKit.DefaultKeyTypedAction
- Class in
javax.swing.text
The action that is executed by default if
 a
key typed event
is received and there
 is no keymap entry.
DefaultEditorKit.InsertBreakAction
- Class in
javax.swing.text
Places a line/paragraph break into the document.
DefaultEditorKit.InsertContentAction
- Class in
javax.swing.text
Places content into the associated document.
DefaultEditorKit.InsertTabAction
- Class in
javax.swing.text
Places a tab character into the document.
DefaultEditorKit.PasteAction
- Class in
javax.swing.text
Pastes the contents of the system clipboard into the
 selected region, or before the caret if nothing is
 selected.
defaultEditorsByColumnClass
- Variable in class javax.swing.
JTable
A table of objects that display and edit the contents of a cell,
 indexed by class as declared in
getColumnClass
in the
TableModel
interface.
defaultEventSet()
- Element in annotation interface java.beans.
JavaBean
The name of the default event set is used to calculate its
index
in the
array
of event sets
 defined in the annotated class.
defaultExecutor()
- Method in class java.util.concurrent.
CompletableFuture
Returns the default Executor used for async methods that do not
 specify an Executor.
Default Fields Values
- Search tag in class java.util.GregorianCalendar
Section
DefaultFocusManager
- Class in
javax.swing
This class has been obsoleted by the 1.4 focus APIs.
DefaultFocusManager()
- Constructor for class javax.swing.
DefaultFocusManager
Constructs a
DefaultFocusManager
.
DefaultFocusTraversalPolicy
- Class in
java.awt
A FocusTraversalPolicy that determines traversal order based on the order
 of child Components in a Container.
DefaultFocusTraversalPolicy()
- Constructor for class java.awt.
DefaultFocusTraversalPolicy
Constructs a
DefaultFocusTraversalPolicy
.
defaultForkJoinWorkerThreadFactory
- Static variable in class java.util.concurrent.
ForkJoinPool
Creates a new ForkJoinWorkerThread.
DefaultFormatter
- Class in
javax.swing.text
DefaultFormatter
formats arbitrary objects.
DefaultFormatter()
- Constructor for class javax.swing.text.
DefaultFormatter
Creates a DefaultFormatter.
DefaultFormatterFactory
- Class in
javax.swing.text
An implementation of
JFormattedTextField.AbstractFormatterFactory
.
DefaultFormatterFactory()
- Constructor for class javax.swing.text.
DefaultFormatterFactory
Constructs a
DefaultFormatterFactory
.
DefaultFormatterFactory(JFormattedTextField.AbstractFormatter)
- Constructor for class javax.swing.text.
DefaultFormatterFactory
Creates a
DefaultFormatterFactory
with the specified
JFormattedTextField.AbstractFormatter
.
DefaultFormatterFactory(JFormattedTextField.AbstractFormatter, JFormattedTextField.AbstractFormatter)
- Constructor for class javax.swing.text.
DefaultFormatterFactory
Creates a
DefaultFormatterFactory
with the specified
JFormattedTextField.AbstractFormatter
s.
DefaultFormatterFactory(JFormattedTextField.AbstractFormatter, JFormattedTextField.AbstractFormatter, JFormattedTextField.AbstractFormatter)
- Constructor for class javax.swing.text.
DefaultFormatterFactory
Creates a DefaultFormatterFactory with the specified
 JFormattedTextField.AbstractFormatters.
DefaultFormatterFactory(JFormattedTextField.AbstractFormatter, JFormattedTextField.AbstractFormatter, JFormattedTextField.AbstractFormatter, JFormattedTextField.AbstractFormatter)
- Constructor for class javax.swing.text.
DefaultFormatterFactory
Creates a DefaultFormatterFactory with the specified
 JFormattedTextField.AbstractFormatters.
DefaultHandler
- Class in
org.xml.sax.helpers
Default base class for SAX2 event handlers.
DefaultHandler()
- Constructor for class org.xml.sax.helpers.
DefaultHandler
Constructs a
DefaultHandler
.
DefaultHandler2
- Class in
org.xml.sax.ext
This class extends the SAX2 base handler class to support the
 SAX2
LexicalHandler
,
DeclHandler
, and
EntityResolver2
extensions.
DefaultHandler2()
- Constructor for class org.xml.sax.ext.
DefaultHandler2
Constructs a handler which ignores all parsing events.
DefaultHighlighter
- Class in
javax.swing.text
Implements the Highlighter interfaces.
DefaultHighlighter()
- Constructor for class javax.swing.text.
DefaultHighlighter
Creates a new DefaultHighlighter object.
DefaultHighlighter.DefaultHighlightPainter
- Class in
javax.swing.text
Simple highlight painter that fills a highlighted area with
 a solid color.
DefaultHighlightPainter(Color)
- Constructor for class javax.swing.text.
DefaultHighlighter.DefaultHighlightPainter
Constructs a new highlight painter.
defaultInitCtx
- Variable in class javax.naming.
InitialContext
Field holding the result of calling NamingManager.getInitialContext().
DefaultInternalObjectFilter
- Class in
jdk.dynalink.linker.support
Default implementation for a
DynamicLinkerFactory.setInternalObjectsFilter(MethodHandleTransformer)
that delegates to a pair of filtering method handles.
DefaultInternalObjectFilter(MethodHandle, MethodHandle)
- Constructor for class jdk.dynalink.linker.support.
DefaultInternalObjectFilter
Creates a new filter.
DefaultKeyboardFocusManager
- Class in
java.awt
The default KeyboardFocusManager for AWT applications.
DefaultKeyboardFocusManager()
- Constructor for class java.awt.
DefaultKeyboardFocusManager
Constructs a
DefaultKeyboardFocusManager
.
defaultKeyTypedAction
- Static variable in class javax.swing.text.
DefaultEditorKit
Name of the action that is executed by default if
 a
key typed event
is received and there
 is no keymap entry.
DefaultKeyTypedAction()
- Constructor for class javax.swing.text.
DefaultEditorKit.DefaultKeyTypedAction
Creates this object with the appropriate identifier.
DefaultLinkDrop
- Static variable in class java.awt.dnd.
DragSource
The default
Cursor
to use with a link operation indicating
 that a drop is currently allowed.
DefaultLinkNoDrop
- Static variable in class java.awt.dnd.
DragSource
The default
Cursor
to use with a link operation indicating
 that a drop is currently not allowed.
DefaultListCellRenderer
- Class in
javax.swing
Renders an item in a list.
DefaultListCellRenderer()
- Constructor for class javax.swing.
DefaultListCellRenderer
Constructs a default renderer object for an item
 in a list.
DefaultListCellRenderer.UIResource
- Class in
javax.swing
A subclass of DefaultListCellRenderer that implements UIResource.
DefaultListModel<E>
- Class in
javax.swing
This class loosely implements the
java.util.Vector
API, in that it implements the 1.1.x version of
java.util.Vector
, has no collection class support,
 and notifies the
ListDataListener
s when changes occur.
DefaultListModel()
- Constructor for class javax.swing.
DefaultListModel
Constructs a
DefaultListModel
.
DefaultListSelectionModel
- Class in
javax.swing
Default data model for list selections.
DefaultListSelectionModel()
- Constructor for class javax.swing.
DefaultListSelectionModel
Constructs a
DefaultListSelectionModel
.
DefaultLoaderRepository
- Class in
javax.management
Deprecated.
Use
MBeanServer.getClassLoaderRepository()
instead.
DefaultLoaderRepository
- Class in
javax.management.loading
Deprecated.
Use
MBeanServer.getClassLoaderRepository()
instead.
DefaultLoaderRepository()
- Constructor for class javax.management.
DefaultLoaderRepository
Deprecated.
Constructs an
DefaultLoaderRepository
.
DefaultLoaderRepository()
- Constructor for class javax.management.loading.
DefaultLoaderRepository
Deprecated.
Constructs a
DefaultLoaderRepository
.
Default look and feel
- Search tag in class javax.swing.UIManager
Section
defaultLookup()
- Method in interface java.lang.foreign.
Linker
PREVIEW
Returns a symbol lookup for symbols in a set of commonly used libraries.
defaultManager()
- Static method in class javax.swing.
MenuSelectionManager
Returns the default menu selection manager.
DefaultMenuLayout
- Class in
javax.swing.plaf.basic
The default layout manager for Popup menus and menubars.
DefaultMenuLayout(Container, int)
- Constructor for class javax.swing.plaf.basic.
DefaultMenuLayout
Constructs a new instance of
DefaultMenuLayout
.
DefaultMetalTheme
- Class in
javax.swing.plaf.metal
A concrete implementation of
MetalTheme
providing
 the original look of the Java Look and Feel, code-named "Steel".
DefaultMetalTheme()
- Constructor for class javax.swing.plaf.metal.
DefaultMetalTheme
Creates and returns an instance of
DefaultMetalTheme
.
Default missing member behavior
- Search tag in interface jdk.dynalink.beans.MissingMemberHandlerFactory
Section
DefaultMoveDrop
- Static variable in class java.awt.dnd.
DragSource
The default
Cursor
to use with a move operation indicating
 that a drop is currently allowed.
DefaultMoveNoDrop
- Static variable in class java.awt.dnd.
DragSource
The default
Cursor
to use with a move operation indicating
 that a drop is currently not allowed.
DefaultMutableTreeNode
- Class in
javax.swing.tree
A
DefaultMutableTreeNode
is a general-purpose node in a tree data
 structure.
DefaultMutableTreeNode()
- Constructor for class javax.swing.tree.
DefaultMutableTreeNode
Creates a tree node that has no parent and no children, but which
 allows children.
DefaultMutableTreeNode(Object)
- Constructor for class javax.swing.tree.
DefaultMutableTreeNode
Creates a tree node with no parent, no children, but which allows
 children, and initializes it with the specified user object.
DefaultMutableTreeNode(Object, boolean)
- Constructor for class javax.swing.tree.
DefaultMutableTreeNode
Creates a tree node with no parent, no children, initialized with
 the specified user object, and that allows children only if
 specified.
defaultPage()
- Method in class java.awt.print.
PrinterJob
Creates a new
PageFormat
instance and
 sets it to a default size and orientation.
defaultPage(PageFormat)
- Method in class java.awt.print.
PrinterJob
Clones the
PageFormat
argument and alters the
 clone to describe a default page size and orientation.
DefaultPainter
- Static variable in class javax.swing.text.
DefaultHighlighter
Default implementation of LayeredHighlighter.LayerPainter that can
 be used for painting highlights.
defaultParameters()
- Method in class jdk.jshell.execution.
FailOverExecutionControlProvider
Create and return the default parameter map for this
ExecutionControlProvider
.
defaultParameters()
- Method in class jdk.jshell.execution.
JdiExecutionControlProvider
Create and return the default parameter map for this
ExecutionControlProvider
.
defaultParameters()
- Method in class jdk.jshell.execution.
LocalExecutionControlProvider
Create and return the default parameter map for
LocalExecutionControlProvider
.
defaultParameters()
- Method in interface jdk.jshell.spi.
ExecutionControlProvider
Create and return the default parameter map for this
ExecutionControlProvider
.
DefaultPersistenceDelegate
- Class in
java.beans
The
DefaultPersistenceDelegate
is a concrete implementation of
 the abstract
PersistenceDelegate
class and
 is the delegate used by default for classes about
 which no information is available.
DefaultPersistenceDelegate()
- Constructor for class java.beans.
DefaultPersistenceDelegate
Creates a persistence delegate for a class with a nullary constructor.
DefaultPersistenceDelegate(String[])
- Constructor for class java.beans.
DefaultPersistenceDelegate
Creates a default persistence delegate for a class with a
 constructor whose arguments are the values of the property
 names as specified by
constructorPropertyNames
.
defaultProperty()
- Element in annotation interface java.beans.
JavaBean
The name of the default property is used to calculate its
index
in the
array
of properties
 defined in the annotated class.
defaultReadObject()
- Method in class java.io.
ObjectInputStream
Read the non-static and non-transient fields of the current class from
 this stream.
defaultRenderersByColumnClass
- Variable in class javax.swing.
JTable
A table of objects that display the contents of a cell,
 indexed by class as declared in
getColumnClass
in the
TableModel
interface.
Default Rendering Attributes
- Search tag in class java.awt.Graphics2D
Section
DefaultRowSorter<M,
I>
- Class in
javax.swing
An implementation of
RowSorter
that provides sorting and
 filtering around a grid-based data model.
DefaultRowSorter()
- Constructor for class javax.swing.
DefaultRowSorter
Creates an empty
DefaultRowSorter
.
DefaultRowSorter.ModelWrapper<M,
I>
- Class in
javax.swing
DefaultRowSorter.ModelWrapper
is responsible for providing
 the data that gets sorted by
DefaultRowSorter
.
defaults
- Variable in class java.util.
Properties
A property list that contains default values for any keys not
 found in this property list.
defaults()
- Static method in class javax.xml.catalog.
CatalogFeatures
Returns a CatalogFeatures instance with default settings.
Defaults
- Search tag in class javax.swing.UIManager
Section
DefaultSingleSelectionModel
- Class in
javax.swing
A generic implementation of SingleSelectionModel.
DefaultSingleSelectionModel()
- Constructor for class javax.swing.
DefaultSingleSelectionModel
Constructs a
DefaultSingleSelectionModel
.
defaultStratum()
- Method in interface com.sun.jdi.
ReferenceType
Returns the default stratum for this reference type.
DefaultStyledDocument
- Class in
javax.swing.text
A document that can be marked up with character and paragraph
 styles in a manner similar to the Rich Text Format.
DefaultStyledDocument()
- Constructor for class javax.swing.text.
DefaultStyledDocument
Constructs a default styled document.
DefaultStyledDocument(AbstractDocument.Content, StyleContext)
- Constructor for class javax.swing.text.
DefaultStyledDocument
Constructs a styled document.
DefaultStyledDocument(StyleContext)
- Constructor for class javax.swing.text.
DefaultStyledDocument
Constructs a styled document with the default content
 storage implementation and a shared set of styles.
DefaultStyledDocument.AttributeUndoableEdit
- Class in
javax.swing.text
An UndoableEdit used to remember AttributeSet changes to an
 Element.
DefaultStyledDocument.ElementBuffer
- Class in
javax.swing.text
Class to manage changes to the element
 hierarchy.
DefaultStyledDocument.ElementSpec
- Class in
javax.swing.text
Specification for building elements.
DefaultStyledDocument.SectionElement
- Class in
javax.swing.text
Default root element for a document... maps out the
 paragraphs/lines contained.
DefaultTableCellRenderer
- Class in
javax.swing.table
The standard class for rendering (displaying) individual cells
 in a
JTable
.
DefaultTableCellRenderer()
- Constructor for class javax.swing.table.
DefaultTableCellRenderer
Creates a default table cell renderer.
DefaultTableCellRenderer.UIResource
- Class in
javax.swing.table
A subclass of
DefaultTableCellRenderer
that
 implements
UIResource
.
DefaultTableColumnModel
- Class in
javax.swing.table
The standard column-handler for a
JTable
.
DefaultTableColumnModel()
- Constructor for class javax.swing.table.
DefaultTableColumnModel
Creates a default table column model.
DefaultTableModel
- Class in
javax.swing.table
This is an implementation of
TableModel
that
 uses a
Vector
of
Vectors
to store the
 cell value objects.
DefaultTableModel()
- Constructor for class javax.swing.table.
DefaultTableModel
Constructs a default
DefaultTableModel
which is a table of zero columns and zero rows.
DefaultTableModel(int, int)
- Constructor for class javax.swing.table.
DefaultTableModel
Constructs a
DefaultTableModel
with
rowCount
and
columnCount
of
null
object values.
DefaultTableModel(Object[][], Object[])
- Constructor for class javax.swing.table.
DefaultTableModel
Constructs a
DefaultTableModel
and initializes the table
  by passing
data
and
columnNames
to the
setDataVector
method.
DefaultTableModel(Object[], int)
- Constructor for class javax.swing.table.
DefaultTableModel
Constructs a
DefaultTableModel
with as many
  columns as there are elements in
columnNames
and
rowCount
of
null
object values.
DefaultTableModel(Vector<?>, int)
- Constructor for class javax.swing.table.
DefaultTableModel
Constructs a
DefaultTableModel
with as many columns
  as there are elements in
columnNames
and
rowCount
of
null
object values.
DefaultTableModel(Vector<? extends Vector>, Vector<?>)
- Constructor for class javax.swing.table.
DefaultTableModel
Constructs a
DefaultTableModel
and initializes the table
  by passing
data
and
columnNames
to the
setDataVector
method.
DefaultTextField(Border)
- Constructor for class javax.swing.tree.
DefaultTreeCellEditor.DefaultTextField
Constructs a
DefaultTreeCellEditor.DefaultTextField
object.
defaultTextIconGap
- Variable in class javax.swing.plaf.basic.
BasicButtonUI
The default gap between a text and an icon.
defaultTextIconGap
- Variable in class javax.swing.plaf.basic.
BasicMenuItemUI
The gap between the text and the icon.
defaultTextShiftOffset
- Variable in class javax.swing.plaf.basic.
BasicButtonUI
The default offset of a text.
DefaultTextUI
- Class in
javax.swing.text
Deprecated.
DefaultTextUI()
- Constructor for class javax.swing.text.
DefaultTextUI
Deprecated.
Constructor for subclasses to call.
defaultThreadFactory()
- Static method in class java.util.concurrent.
Executors
Returns a default thread factory used to create new threads.
DefaultTreeCellEditor
- Class in
javax.swing.tree
A
TreeCellEditor
.
DefaultTreeCellEditor(JTree, DefaultTreeCellRenderer)
- Constructor for class javax.swing.tree.
DefaultTreeCellEditor
Constructs a
DefaultTreeCellEditor
object for a JTree using the specified renderer and
 a default editor.
DefaultTreeCellEditor(JTree, DefaultTreeCellRenderer, TreeCellEditor)
- Constructor for class javax.swing.tree.
DefaultTreeCellEditor
Constructs a
DefaultTreeCellEditor
object for a
JTree
using the
 specified renderer and the specified editor.
DefaultTreeCellEditor.DefaultTextField
- Class in
javax.swing.tree
TextField
used when no editor is supplied.
DefaultTreeCellEditor.EditorContainer
- Class in
javax.swing.tree
Container responsible for placing the
editingComponent
.
DefaultTreeCellRenderer
- Class in
javax.swing.tree
Displays an entry in a tree.
DefaultTreeCellRenderer()
- Constructor for class javax.swing.tree.
DefaultTreeCellRenderer
Creates a
DefaultTreeCellRenderer
.
DefaultTreeModel
- Class in
javax.swing.tree
A simple tree data model that uses TreeNodes.
DefaultTreeModel(TreeNode)
- Constructor for class javax.swing.tree.
DefaultTreeModel
Creates a tree in which any node can have children.
DefaultTreeModel(TreeNode, boolean)
- Constructor for class javax.swing.tree.
DefaultTreeModel
Creates a tree specifying whether any node can have children,
 or whether only certain nodes can have children.
DefaultTreeSelectionModel
- Class in
javax.swing.tree
Default implementation of TreeSelectionModel.
DefaultTreeSelectionModel()
- Constructor for class javax.swing.tree.
DefaultTreeSelectionModel
Creates a new instance of DefaultTreeSelectionModel that is
 empty, with a selection mode of DISCONTIGUOUS_TREE_SELECTION.
defaultValue()
- Method in enum class javax.xml.catalog.
CatalogFeatures.Feature
Returns the default value of the property.
Default value:
- Search tag in class javax.xml.XMLConstants
Section
Default values and constraints
- Search tag in package javax.management.openmbean
Section
defaultWriteObject()
- Method in class java.io.
ObjectOutputStream
Write the non-static and non-transient fields of the current class to
 this stream.
defContentModel(int, Object, ContentModel)
- Method in class javax.swing.text.html.parser.
DTD
Creates and returns a new content model.
DEFECTIVE_CREDENTIAL
- Static variable in exception class org.ietf.jgss.
GSSException
Defective credentials.
DEFECTIVE_TOKEN
- Static variable in exception class org.ietf.jgss.
GSSException
Defective token.
defElement(String, int, boolean, boolean, ContentModel, String[], String[], AttributeList)
- Method in class javax.swing.text.html.parser.
DTD
Creates and returns an
Element
.
defEntity(String, int, int)
- Method in class javax.swing.text.html.parser.
DTD
Creates and returns a character
Entity
.
defEntity(String, int, String)
- Method in class javax.swing.text.html.parser.
DTD
Creates and returns an
Entity
.
DEFER
- Enum constant in enum class javax.xml.catalog.
CatalogFeatures.Feature
The
javax.xml.catalog.defer
property as described in
 item
DEFER
of the
 Catalog Features table.
defineAttributes(String, AttributeList)
- Method in class javax.swing.text.html.parser.
DTD
Defines attributes for an
Element
.
defineClass(byte[])
- Method in class java.lang.invoke.
MethodHandles.Lookup
Creates and links a class or interface from
bytes
with the same class loader and in the same runtime package and
protection domain
as this lookup's
lookup class
as if calling
ClassLoader::defineClass
.
defineClass(byte[], int, int)
- Method in class java.lang.
ClassLoader
Deprecated.
Replaced by
defineClass(String, byte[], int, int)
defineClass(String, byte[], int, int)
- Method in class java.lang.
ClassLoader
Converts an array of bytes into an instance of class
Class
.
defineClass(String, byte[], int, int, CodeSource)
- Method in class java.security.
SecureClassLoader
Converts an array of bytes into an instance of class
Class
,
 with an optional CodeSource.
defineClass(String, byte[], int, int, ProtectionDomain)
- Method in class java.lang.
ClassLoader
Converts an array of bytes into an instance of class
Class
,
 with a given
ProtectionDomain
.
defineClass(String, ByteBuffer, CodeSource)
- Method in class java.security.
SecureClassLoader
Converts a
ByteBuffer
into an instance of class
Class
, with an optional CodeSource.
defineClass(String, ByteBuffer, ProtectionDomain)
- Method in class java.lang.
ClassLoader
Converts a
ByteBuffer
into an instance
 of class
Class
, with the given
ProtectionDomain
.
definedClasses()
- Method in interface com.sun.jdi.
ClassLoaderReference
Returns a list of all classes defined by this class loader.
defineElement(String, int, boolean, boolean, ContentModel, BitSet, BitSet, AttributeList)
- Method in class javax.swing.text.html.parser.
DTD
Returns the
Element
which matches the
 specified parameters.
defineEntity(String, int, char[])
- Method in class javax.swing.text.html.parser.
DTD
Defines an entity.
defineHiddenClass(byte[], boolean, MethodHandles.Lookup.ClassOption...)
- Method in class java.lang.invoke.
MethodHandles.Lookup
Creates a
hidden
class or interface from
bytes
,
 returning a
Lookup
on the newly created class or interface.
defineHiddenClassWithClassData(byte[], Object, boolean, MethodHandles.Lookup.ClassOption...)
- Method in class java.lang.invoke.
MethodHandles.Lookup
Creates a
hidden
class or interface from
bytes
with associated
class data
,
 returning a
Lookup
on the newly created class or interface.
defineModules(Configuration, Function<String, ClassLoader>)
- Method in class java.lang.
ModuleLayer
Creates a new module layer, with this layer as its parent, by defining the
 modules in the given
Configuration
to the Java virtual machine.
defineModules(Configuration, List<ModuleLayer>, Function<String, ClassLoader>)
- Static method in class java.lang.
ModuleLayer
Creates a new module layer by defining the modules in the given
Configuration
to the Java virtual machine.
defineModulesWithManyLoaders(Configuration, ClassLoader)
- Method in class java.lang.
ModuleLayer
Creates a new module layer, with this layer as its parent, by defining the
 modules in the given
Configuration
to the Java virtual machine.
defineModulesWithManyLoaders(Configuration, List<ModuleLayer>, ClassLoader)
- Static method in class java.lang.
ModuleLayer
Creates a new module layer by defining the modules in the given
Configuration
to the Java virtual machine.
defineModulesWithOneLoader(Configuration, ClassLoader)
- Method in class java.lang.
ModuleLayer
Creates a new module layer, with this layer as its parent, by defining the
 modules in the given
Configuration
to the Java virtual machine.
defineModulesWithOneLoader(Configuration, List<ModuleLayer>, ClassLoader)
- Static method in class java.lang.
ModuleLayer
Creates a new module layer by defining the modules in the given
Configuration
to the Java virtual machine.
definePackage(String, String, String, String, String, String, String, URL)
- Method in class java.lang.
ClassLoader
Defines a package by
name
in this
ClassLoader
.
definePackage(String, Manifest, URL)
- Method in class java.net.
URLClassLoader
Defines a new package by name in this
URLClassLoader
.
DEFINITELY_INCOMPLETE
- Enum constant in enum class jdk.jshell.
SourceCodeAnalysis.Completeness
There must be further source beyond the given input in order for it
 to be complete.
Definition
- Search tag in javax.swing.JTable.doLayout()
Section
Definition of an MXBean
- Search tag in annotation interface javax.management.MXBean
Section
Definitions
- Search tag in package java.awt
Section
deflate()
- Method in class java.util.zip.
DeflaterOutputStream
Writes next block of compressed data to the output stream.
deflate(byte[])
- Method in class java.util.zip.
Deflater
Compresses the input data and fills specified buffer with compressed
 data.
deflate(byte[], int, int)
- Method in class java.util.zip.
Deflater
Compresses the input data and fills specified buffer with compressed
 data.
deflate(byte[], int, int, int)
- Method in class java.util.zip.
Deflater
Compresses the input data and fills the specified buffer with compressed
 data.
deflate(ByteBuffer)
- Method in class java.util.zip.
Deflater
Compresses the input data and fills specified buffer with compressed
 data.
deflate(ByteBuffer, int)
- Method in class java.util.zip.
Deflater
Compresses the input data and fills the specified buffer with compressed
 data.
DEFLATE
- Static variable in class javax.print.attribute.standard.
Compression
ZIP public domain inflate/deflate compression technology.
DEFLATED
- Static variable in class java.util.zip.
Deflater
Compression method for the deflate algorithm (the only one currently
 supported).
DEFLATED
- Static variable in class java.util.zip.
ZipEntry
Compression method for compressed (deflated) entries.
DEFLATED
- Static variable in class java.util.zip.
ZipOutputStream
Compression method for compressed (DEFLATED) entries.
Deflater
- Class in
java.util.zip
This class provides support for general purpose compression using the
 popular ZLIB compression library.
Deflater()
- Constructor for class java.util.zip.
Deflater
Creates a new compressor with the default compression level.
Deflater(int)
- Constructor for class java.util.zip.
Deflater
Creates a new compressor using the specified compression level.
Deflater(int, boolean)
- Constructor for class java.util.zip.
Deflater
Creates a new compressor using the specified compression level.
DeflaterInputStream
- Class in
java.util.zip
Implements an input stream filter for compressing data in the "deflate"
 compression format.
DeflaterInputStream(InputStream)
- Constructor for class java.util.zip.
DeflaterInputStream
Creates a new input stream with a default compressor and buffer
 size.
DeflaterInputStream(InputStream, Deflater)
- Constructor for class java.util.zip.
DeflaterInputStream
Creates a new input stream with the specified compressor and a
 default buffer size.
DeflaterInputStream(InputStream, Deflater, int)
- Constructor for class java.util.zip.
DeflaterInputStream
Creates a new input stream with the specified compressor and buffer
 size.
DeflaterOutputStream
- Class in
java.util.zip
This class implements an output stream filter for compressing data in
 the "deflate" compression format.
DeflaterOutputStream(OutputStream)
- Constructor for class java.util.zip.
DeflaterOutputStream
Creates a new output stream with a default compressor and buffer size.
DeflaterOutputStream(OutputStream, boolean)
- Constructor for class java.util.zip.
DeflaterOutputStream
Creates a new output stream with a default compressor, a default
 buffer size and the specified flush mode.
DeflaterOutputStream(OutputStream, Deflater)
- Constructor for class java.util.zip.
DeflaterOutputStream
Creates a new output stream with the specified compressor and
 a default buffer size.
DeflaterOutputStream(OutputStream, Deflater, boolean)
- Constructor for class java.util.zip.
DeflaterOutputStream
Creates a new output stream with the specified compressor, flush
 mode and a default buffer size.
DeflaterOutputStream(OutputStream, Deflater, int)
- Constructor for class java.util.zip.
DeflaterOutputStream
Creates a new output stream with the specified compressor and
 buffer size.
DeflaterOutputStream(OutputStream, Deflater, int, boolean)
- Constructor for class java.util.zip.
DeflaterOutputStream
Creates a new output stream with the specified compressor,
 buffer size and flush mode.
deiconifyFrame(JInternalFrame)
- Method in class javax.swing.
DefaultDesktopManager
Removes the desktopIcon from its parent and adds its frame
 to the parent.
deiconifyFrame(JInternalFrame)
- Method in interface javax.swing.
DesktopManager
Generally, remove any iconic representation that is present and restore the
 frame to it's original size and location.
deiconifyFrame(JInternalFrame)
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI
This method is called when the user wants to deiconify the frame.
deiconize()
- Method in class javax.swing.plaf.basic.
BasicDesktopIconUI
De-iconifies the internal frame.
deinstall(JEditorPane)
- Method in class javax.swing.text.
EditorKit
Called when the kit is being removed from the
 JEditorPane.
deinstall(JEditorPane)
- Method in class javax.swing.text.html.
HTMLEditorKit
Called when the kit is being removed from the
 JEditorPane.
deinstall(JEditorPane)
- Method in class javax.swing.text.
StyledEditorKit
Called when the kit is being removed from the
 JEditorPane.
deinstall(JTextComponent)
- Method in interface javax.swing.text.
Caret
Called when the UI is being removed from the
 interface of a JTextComponent.
deinstall(JTextComponent)
- Method in class javax.swing.text.
DefaultCaret
Called when the UI is being removed from the
 interface of a JTextComponent.
deinstall(JTextComponent)
- Method in class javax.swing.text.
DefaultHighlighter
Called when the UI is being removed from the interface of
 a JTextComponent.
deinstall(JTextComponent)
- Method in interface javax.swing.text.
Highlighter
Called when the UI is being removed from the
 interface of a JTextComponent.
deinstallMouseHandlers(JComponent)
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI
Deinstalls the mouse handlers.
delay(int)
- Method in class java.awt.
Robot
Sleeps for the specified time.
Delayed
- Interface in
java.util.concurrent
A mix-in style interface for marking objects that should be
 acted upon after a given delay.
DELAYED
- Enum constant in enum class jdk.jfr.
RecordingState
The recording is scheduled to start with a start time in the future.
delayedExecutor(long, TimeUnit)
- Static method in class java.util.concurrent.
CompletableFuture
Returns a new Executor that submits a task to the default
 executor after the given delay (or no delay if non-positive).
delayedExecutor(long, TimeUnit, Executor)
- Static method in class java.util.concurrent.
CompletableFuture
Returns a new Executor that submits a task to the given base
 executor after the given delay (or no delay if non-positive).
DelayQueue<E>
- Class in
java.util.concurrent
An unbounded
blocking queue
of
Delayed
elements, in which an element generally becomes eligible for removal when its
 delay has expired.
DelayQueue()
- Constructor for class java.util.concurrent.
DelayQueue
Creates a new
DelayQueue
that is initially empty.
DelayQueue(Collection<? extends E>)
- Constructor for class java.util.concurrent.
DelayQueue
Creates a
DelayQueue
initially containing the elements of the
 given collection of
Delayed
instances.
delegate
- Variable in class javax.swing.
DefaultCellEditor
The delegate class which handles all methods sent from the
CellEditor
.
delegate()
- Element in annotation interface javax.swing.
SwingContainer
The name of the getter method in the annotated class,
 which returns the corresponding Swing container,
 if it is not recommended to add subcomponents
 to the annotated class directly.
DELEGATE_NAME
- Static variable in class javax.management.
MBeanServerDelegate
Defines the default ObjectName of the MBeanServerDelegate.
delegateFocus(MouseEvent)
- Method in class javax.swing.plaf.basic.
BasicComboPopup
This is a utility method that helps event handlers figure out where to
 send the focus when the popup is brought up.
delegateFocus(MouseEvent)
- Method in class javax.swing.plaf.metal.
MetalComboBoxUI.MetalComboPopup
Deprecated.
DelegationPermission
- Class in
javax.security.auth.kerberos
This class is used to restrict the usage of the Kerberos
 delegation model, ie: forwardable and proxiable tickets.
DelegationPermission(String)
- Constructor for class javax.security.auth.kerberos.
DelegationPermission
Create a new
DelegationPermission
with the specified subordinate and target principals.
DelegationPermission(String, String)
- Constructor for class javax.security.auth.kerberos.
DelegationPermission
Create a new
DelegationPermission
with the specified subordinate and target principals.
delete()
- Method in class java.io.
File
Deletes the file or directory denoted by this abstract pathname.
delete()
- Method in interface javax.tools.
FileObject
Deletes this file object.
delete()
- Method in class javax.tools.
ForwardingFileObject
delete()
- Method in class javax.tools.
SimpleJavaFileObject
This implementation does nothing.
delete(int, int)
- Method in class java.lang.
StringBuffer
delete(int, int)
- Method in class java.lang.
StringBuilder
delete(int, int)
- Method in interface javax.accessibility.
AccessibleEditableText
Deletes the text between two indices.
delete(int, int)
- Method in class javax.swing.
JSpinner.AccessibleJSpinner
Deletes the text between two indices
delete(int, int)
- Method in class javax.swing.text.
JTextComponent.AccessibleJTextComponent
Deletes the text between two indices
delete(String)
- Method in interface java.nio.file.attribute.
UserDefinedFileAttributeView
Deletes a user-defined attribute.
delete(Path)
- Static method in class java.nio.file.
Files
Deletes a file.
delete(Path)
- Method in class java.nio.file.spi.
FileSystemProvider
Deletes a file.
DELETE
- Enum constant in enum class java.nio.file.attribute.
AclEntryPermission
Permission to delete the file.
DELETE
- Static variable in class java.awt.
Event
Deprecated.
The Delete key.
DELETE
- Static variable in interface javax.accessibility.
AccessibleTableModelChange
Identifies the deletion of rows and/or columns.
DELETE
- Static variable in class javax.swing.event.
TableModelEvent
Identifies the removal of rows or columns.
DELETE()
- Method in interface java.net.http.
HttpRequest.Builder
Sets the request method of this builder to DELETE.
DELETE_CHILD
- Enum constant in enum class java.nio.file.attribute.
AclEntryPermission
Permission to delete a file or directory within a directory.
DELETE_ON_CLOSE
- Enum constant in enum class java.nio.file.
StandardOpenOption
Delete on close.
DELETE_ROW_CONFLICT
- Static variable in interface javax.sql.rowset.spi.
SyncResolver
Indicates that a conflict occurred while the
RowSet
object was
 attempting to delete a row in the data source.
deleteAllBreakpoints()
- Method in interface com.sun.jdi.request.
EventRequestManager
Remove all breakpoints managed by this EventRequestManager.
deleteCaption()
- Method in interface org.w3c.dom.html.
HTMLTableElement
Delete the table caption, if one exists.
deleteCell(int)
- Method in interface org.w3c.dom.html.
HTMLTableRowElement
Delete a cell from the current row.
deleteChar(AttributedCharacterIterator, int)
- Method in class java.awt.font.
LineBreakMeasurer
Updates this
LineBreakMeasurer
after a single
 character is deleted from the text, and sets the current
 position to the beginning of the paragraph.
deleteChar(AttributedCharacterIterator, int)
- Method in class java.awt.font.
TextMeasurer
Updates the
TextMeasurer
after a single character has
 been deleted
 from the paragraph currently represented by this
TextMeasurer
.
deleteCharAt(int)
- Method in class java.lang.
StringBuffer
deleteCharAt(int)
- Method in class java.lang.
StringBuilder
deleteContents()
- Method in interface org.w3c.dom.ranges.
Range
Removes the contents of a Range from the containing document or
 document fragment without returning a reference to the removed
 content.
deleteData(int, int)
- Method in interface org.w3c.dom.
CharacterData
Remove a range of 16-bit units from the node.
deleteDirectory(T)
- Method in interface java.nio.file.
SecureDirectoryStream
Deletes a directory.
deleteEntry(String)
- Method in class java.security.
KeyStore
Deletes the entry identified by the given alias from this keystore.
deleteEventRequest(EventRequest)
- Method in interface com.sun.jdi.request.
EventRequestManager
Removes an eventRequest.
deleteEventRequests(List<? extends EventRequest>)
- Method in interface com.sun.jdi.request.
EventRequestManager
Removes a list of
EventRequest
s.
deleteFile(T)
- Method in interface java.nio.file.
SecureDirectoryStream
Deletes a file.
deleteIfExists(Path)
- Static method in class java.nio.file.
Files
Deletes a file if it exists.
deleteIfExists(Path)
- Method in class java.nio.file.spi.
FileSystemProvider
Deletes a file if it exists.
deleteMedium(String)
- Method in interface org.w3c.dom.stylesheets.
MediaList
Deletes the medium indicated by
oldMedium
from the list.
deleteNextCharAction
- Static variable in class javax.swing.text.
DefaultEditorKit
Name of the action to delete the character of content that
 follows the current caret position.
deleteNextWordAction
- Static variable in class javax.swing.text.
DefaultEditorKit
Name of the action to delete the word that
 follows the beginning of the selection.
deleteObserver(Observer)
- Method in class java.util.
Observable
Deprecated.
Deletes an observer from the set of observers of this object.
deleteObservers()
- Method in class java.util.
Observable
Deprecated.
Clears the observer list so that this object no longer has any observers.
deleteOnExit()
- Method in class java.io.
File
Requests that the file or directory denoted by this abstract
 pathname be deleted when the virtual machine terminates.
deletePrevCharAction
- Static variable in class javax.swing.text.
DefaultEditorKit
Name of the action to delete the character of content that
 precedes the current caret position.
deletePrevWordAction
- Static variable in class javax.swing.text.
DefaultEditorKit
Name of the action to delete the word that
 precedes the beginning of the selection.
deleteRow()
- Method in interface java.sql.
ResultSet
Deletes the current row from this
ResultSet
object
 and from the underlying database.
deleteRow(int)
- Method in interface org.w3c.dom.html.
HTMLTableElement
Delete a table row.
deleteRow(int)
- Method in interface org.w3c.dom.html.
HTMLTableSectionElement
Delete a row from this section.
deleteRule(int)
- Method in interface org.w3c.dom.css.
CSSMediaRule
Used to delete a rule from the media block.
deleteRule(int)
- Method in interface org.w3c.dom.css.
CSSStyleSheet
Used to delete a rule from the style sheet.
deletesAreDetected(int)
- Method in interface java.sql.
DatabaseMetaData
Retrieves whether or not a visible row delete can be detected by
 calling the method
ResultSet.rowDeleted
.
deleteShortcut()
- Method in class java.awt.
MenuItem
Delete any
MenuShortcut
object associated
 with this menu item.
deleteShortcut(MenuShortcut)
- Method in class java.awt.
MenuBar
Deletes the specified menu shortcut.
deleteTFoot()
- Method in interface org.w3c.dom.html.
HTMLTableElement
Delete the footer from the table, if one exists.
deleteTHead()
- Method in interface org.w3c.dom.html.
HTMLTableElement
Delete the header from the table, if one exists.
deleteTrack(Track)
- Method in class javax.sound.midi.
Sequence
Removes the specified track from the sequence.
delimiter()
- Method in class java.util.
HexFormat
Returns the delimiter between hexadecimal values in formatted hexadecimal strings.
delimiter()
- Method in class java.util.
Scanner
Returns the
Pattern
this
Scanner
is currently
 using to match delimiters.
delItem(int)
- Method in class java.awt.
List
Deprecated.
replaced by
remove(String)
and
remove(int)
.
delItems(int, int)
- Method in class java.awt.
List
Deprecated.
As of JDK version 1.1,
 Not for public use in the future.
 This method is expected to be retained only as a package
 private method.
deliverEvent(Event)
- Method in class java.awt.
Component
Deprecated.
As of JDK version 1.1,
 replaced by
dispatchEvent(AWTEvent e)
.
deliverEvent(Event)
- Method in class java.awt.
Container
Deprecated.
As of JDK version 1.1,
 replaced by
dispatchEvent(AWTEvent e)
deltaTransform(double[], int, double[], int, int)
- Method in class java.awt.geom.
AffineTransform
Transforms an array of relative distance vectors by this
 transform.
deltaTransform(Point2D, Point2D)
- Method in class java.awt.geom.
AffineTransform
Transforms the relative distance vector specified by
ptSrc
and stores the result in
ptDst
.
DENY
- Enum constant in enum class java.nio.file.attribute.
AclEntryType
Explicitly denies access to a file or directory.
dependents(Snippet)
- Method in class jdk.jshell.
SourceCodeAnalysis
Returns a collection of
Snippet
s which might need updating if the
 given
Snippet
is updated.
Deploying resource bundle service providers
- Search tag in interface java.util.spi.ResourceBundleProvider
Section
Deploying service providers as modules
- Search tag in class java.util.ServiceLoader
Section
Deploying service providers on the class path
- Search tag in class java.util.ServiceLoader
Section
Deprecated
- Annotation Interface in
java.lang
A program element annotated
@Deprecated
is one that programmers
 are discouraged from using.
DEPRECATED
- Enum constant in enum class com.sun.source.doctree.
DocTree.Kind
Used for instances of
DeprecatedTree
representing an
@deprecated
tag.
DEPRECATED
- Enum constant in enum class jdk.jshell.
SourceCodeAnalysis.Attribute
The span refers to a deprecated element.
DeprecatedTree
- Interface in
com.sun.source.doctree
A tree node for an
@deprecated
block tag.
depth()
- Method in interface com.sun.jdi.request.
StepRequest
depth()
- Method in interface java.io.
ObjectInputFilter.FilterInfo
The current depth.
depth()
- Method in class javax.swing.text.
ElementIterator
Fetches the current depth of element tree.
depthFirstEnumeration()
- Method in class javax.swing.tree.
DefaultMutableTreeNode
Creates and returns an enumeration that traverses the subtree rooted at
 this node in depth-first order.
depthOffset
- Variable in class javax.swing.plaf.basic.
BasicTreeUI
How much the depth should be offset to properly calculate
 x locations.
Deque<E>
- Interface in
java.util
A linear collection that supports element insertion and removal at
 both ends.
dequeueKeyEvents(long, Component)
- Method in class java.awt.
DefaultKeyboardFocusManager
Releases for normal dispatching to the current focus owner all
 KeyEvents which were enqueued because of a call to
enqueueKeyEvents
with the same timestamp and Component.
dequeueKeyEvents(long, Component)
- Method in class java.awt.
KeyboardFocusManager
Called by the AWT to notify the KeyboardFocusManager that it should
 cancel delayed dispatching of KeyEvents.
dereference(URIReference, XMLCryptoContext)
- Method in interface javax.xml.crypto.
URIDereferencer
Dereferences the specified
URIReference
and returns the
 dereferenced data.
dereference(XMLCryptoContext)
- Method in interface javax.xml.crypto.dsig.keyinfo.
RetrievalMethod
Dereferences the
KeyInfo
information referenced by this
RetrievalMethod
and applies the specified
Transform
s.
dereferenceElement()
- Static method in interface java.lang.foreign.
MemoryLayout.PathElement
PREVIEW
Returns a path element which dereferences an address layout as its
target layout
PREVIEW
(where set).
Dereference path elements
- Search tag in interface java.lang.foreign.MemoryLayout
Section
deregister()
- Method in interface java.sql.
DriverAction
Method called by
DriverManager.deregisterDriver(Driver)
to notify the JDBC driver that it was de-registered.
deregister(AbstractSelectionKey)
- Method in class java.nio.channels.spi.
AbstractSelector
Removes the given key from its channel's key set.
deregisterAll()
- Method in class javax.imageio.spi.
ServiceRegistry
Deregisters all currently registered service providers from all
 categories.
deregisterAll(Class<?>)
- Method in class javax.imageio.spi.
ServiceRegistry
Deregisters all service provider object currently registered
 under the given category.
deregisterDriver(Driver)
- Static method in class java.sql.
DriverManager
Removes the specified driver from the
DriverManager
's list of
 registered drivers.
deregisterServiceProvider(Object)
- Method in class javax.imageio.spi.
ServiceRegistry
Removes a service provider object from all categories that
 contain it.
deregisterServiceProvider(T, Class<T>)
- Method in class javax.imageio.spi.
ServiceRegistry
Removes a service provider object from the given category.
DERIVATION_EXTENSION
- Static variable in interface org.w3c.dom.
TypeInfo
If the document's schema is an XML Schema [
XML Schema Part 1
]
 , this constant represents the derivation by
extension
.
DERIVATION_LIST
- Static variable in interface org.w3c.dom.
TypeInfo
If the document's schema is an XML Schema [
XML Schema Part 1
]
 , this constant represents the
list
.
DERIVATION_RESTRICTION
- Static variable in interface org.w3c.dom.
TypeInfo
If the document's schema is an XML Schema [
XML Schema Part 1
]
 , this constant represents the derivation by
restriction
if complex types are involved, or a
restriction
if simple types are involved.
DERIVATION_UNION
- Static variable in interface org.w3c.dom.
TypeInfo
If the document's schema is an XML Schema [
XML Schema Part 1
]
 , this constant represents the
union
if simple types are involved.
derive(float)
- Method in class java.awt.
AlphaComposite
Returns a similar
AlphaComposite
object that uses
 the specified alpha value.
derive(int)
- Method in class java.awt.
AlphaComposite
Returns a similar
AlphaComposite
object that uses
 the specified compositing rule.
deriveFont(float)
- Method in class java.awt.
Font
Creates a new
Font
object by replicating the current
Font
object and applying a new size to it.
deriveFont(int)
- Method in class java.awt.
Font
Creates a new
Font
object by replicating the current
Font
object and applying a new style to it.
deriveFont(int, float)
- Method in class java.awt.
Font
Creates a new
Font
object by replicating this
Font
object and applying a new style and size.
deriveFont(int, AffineTransform)
- Method in class java.awt.
Font
Creates a new
Font
object by replicating this
Font
object and applying a new style and transform.
deriveFont(AffineTransform)
- Method in class java.awt.
Font
Creates a new
Font
object by replicating the current
Font
object and applying a new transform to it.
deriveFont(Map<? extends AttributedCharacterIterator.Attribute, ?>)
- Method in class java.awt.
Font
Creates a new
Font
object by replicating the current
Font
object and applying a new set of font attributes
 to it.
deriveMMFont(float[])
- Method in interface java.awt.font.
MultipleMaster
Creates a new instance of a multiple master font based on the design
 axis values contained in the specified array.
deriveMMFont(float[], float, float, float, float)
- Method in interface java.awt.font.
MultipleMaster
Creates a new instance of a multiple master font based on detailed metric
 information.
DES_EDE_KEY_LEN
- Static variable in class javax.crypto.spec.
DESedeKeySpec
The constant which defines the length of a DESede key in bytes.
DES_KEY_LEN
- Static variable in class javax.crypto.spec.
DESKeySpec
The constant which defines the length of a DES key in bytes.
descendants()
- Method in class java.lang.
Process
Returns a snapshot of the descendants of the process.
descendants()
- Method in interface java.lang.
ProcessHandle
Returns a snapshot of the descendants of the process.
DESCENDING
- Enum constant in enum class javax.swing.
SortOrder
Enumeration value indicating the items are sorted in decreasing order.
descendingIterator()
- Method in class java.util.
ArrayDeque
descendingIterator()
- Method in class java.util.concurrent.
ConcurrentLinkedDeque
Returns an iterator over the elements in this deque in reverse
 sequential order.
descendingIterator()
- Method in class java.util.concurrent.
ConcurrentSkipListSet
Returns an iterator over the elements in this set in descending order.
descendingIterator()
- Method in class java.util.concurrent.
LinkedBlockingDeque
Returns an iterator over the elements in this deque in reverse
 sequential order.
descendingIterator()
- Method in interface java.util.
Deque
Returns an iterator over the elements in this deque in reverse
 sequential order.
descendingIterator()
- Method in class java.util.
LinkedList
descendingIterator()
- Method in interface java.util.
NavigableSet
Returns an iterator over the elements in this set, in descending order.
descendingIterator()
- Method in class java.util.
TreeSet
Returns an iterator over the elements in this set in descending order.
descendingKeySet()
- Method in interface java.util.concurrent.
ConcurrentNavigableMap
Returns a reverse order
NavigableSet
view of the keys contained in this map.
descendingKeySet()
- Method in class java.util.concurrent.
ConcurrentSkipListMap
descendingKeySet()
- Method in interface java.util.
NavigableMap
Returns a reverse order
NavigableSet
view of the keys contained in this map.
descendingKeySet()
- Method in class java.util.
TreeMap
descendingMap()
- Method in interface java.util.concurrent.
ConcurrentNavigableMap
Returns a reverse order view of the mappings contained in this map.
descendingMap()
- Method in class java.util.concurrent.
ConcurrentSkipListMap
descendingMap()
- Method in interface java.util.
NavigableMap
Returns a reverse order view of the mappings contained in this map.
descendingMap()
- Method in class java.util.
TreeMap
descendingSet()
- Method in class java.util.concurrent.
ConcurrentSkipListSet
Returns a reverse order view of the elements contained in this set.
descendingSet()
- Method in interface java.util.
NavigableSet
Returns a reverse order view of the elements contained in this set.
descendingSet()
- Method in class java.util.
TreeSet
describeConstable()
- Method in class java.lang.
Boolean
Returns an
Optional
containing the nominal descriptor for this
 instance.
describeConstable()
- Method in class java.lang.
Byte
Returns an
Optional
containing the nominal descriptor for this
 instance.
describeConstable()
- Method in class java.lang.
Character
Returns an
Optional
containing the nominal descriptor for this
 instance.
describeConstable()
- Method in class java.lang.
Class
Returns a nominal descriptor for this instance, if one can be
 constructed, or an empty
Optional
if one cannot be.
describeConstable()
- Method in interface java.lang.constant.
Constable
Returns an
Optional
containing the nominal descriptor for this
 instance, if one can be constructed, or an empty
Optional
if one cannot be constructed.
describeConstable()
- Method in class java.lang.
Double
Returns an
Optional
containing the nominal descriptor for this
 instance, which is the instance itself.
describeConstable()
- Method in class java.lang.
Enum
Returns an enum descriptor
EnumDesc
for this instance, if one can be
 constructed, or an empty
Optional
if one cannot be.
describeConstable()
- Method in class java.lang.
Float
Returns an
Optional
containing the nominal descriptor for this
 instance, which is the instance itself.
describeConstable()
- Method in class java.lang.
Integer
Returns an
Optional
containing the nominal descriptor for this
 instance, which is the instance itself.
describeConstable()
- Method in class java.lang.invoke.
MethodHandle
Return a nominal descriptor for this instance, if one can be
 constructed, or an empty
Optional
if one cannot be.
describeConstable()
- Method in class java.lang.invoke.
MethodType
Returns a nominal descriptor for this instance, if one can be
 constructed, or an empty
Optional
if one cannot be.
describeConstable()
- Method in class java.lang.invoke.
VarHandle
Return a nominal descriptor for this instance, if one can be
 constructed, or an empty
Optional
if one cannot be.
describeConstable()
- Method in class java.lang.
Long
Returns an
Optional
containing the nominal descriptor for this
 instance, which is the instance itself.
describeConstable()
- Method in class java.lang.
Short
Returns an
Optional
containing the nominal descriptor for this
 instance.
describeConstable()
- Method in class java.lang.
String
Returns an
Optional
containing the nominal descriptor for this
 instance, which is the instance itself.
Describing C signatures
- Search tag in interface java.lang.foreign.Linker
Section
description
- Variable in class java.sql.
DriverPropertyInfo
A brief description of the property, which may be null.
description
- Variable in class javax.management.
MBeanFeatureInfo
The human-readable description of the feature.
description()
- Method in interface com.sun.jdi.connect.
Connector.Argument
Returns a human-readable description of this argument
 and its purpose.
description()
- Method in interface com.sun.jdi.connect.
Connector
Returns a human-readable description of this connector
 and its purpose.
description()
- Method in class com.sun.jdi.connect.spi.
TransportService
Returns a description of the transport service.
description()
- Method in interface com.sun.jdi.
VirtualMachine
Returns text information on the target VM and the
 debugger support that mirrors it.
description()
- Method in class com.sun.net.httpserver.
Filter
Returns a short description of this
Filter
.
description()
- Element in annotation interface java.beans.
BeanProperty
The
short description
for the
descriptor
of the annotated property.
description()
- Element in annotation interface java.beans.
JavaBean
The
short description
for the
bean descriptor
of the annotated class.
description()
- Method in interface java.util.spi.
ToolProvider
Returns a short description of the tool, or an empty
Optional
if no description is available.
Description
- Annotation Interface in
jdk.jfr
Annotation that describes an element by using a sentence or two.
Description of a SyncResolver Object
- Search tag in interface javax.sql.rowset.spi.SyncResolver
Section
descriptor()
- Method in class java.lang.module.
ModuleReference
Returns the module descriptor.
Descriptor
- Interface in
javax.management
Additional metadata for a JMX element.
DescriptorAccess
- Interface in
javax.management
This interface is used to gain access to descriptors of the Descriptor class
 which are associated with a JMX component, i.e.
DescriptorKey
- Annotation Interface in
javax.management
Meta-annotation that describes how an annotation element relates
 to a field in a
Descriptor
.
DescriptorRead
- Interface in
javax.management
Interface to read the Descriptor of a management interface element
 such as an MBeanInfo.
descriptorString()
- Method in class java.lang.
Class
Returns the descriptor string of the entity (class, interface, array class,
 primitive type, or
void
) represented by this
Class
object.
descriptorString()
- Method in interface java.lang.constant.
ClassDesc
Returns a field type descriptor string for this type
descriptorString()
- Method in interface java.lang.constant.
MethodTypeDesc
Returns the method type descriptor string.
descriptorString()
- Method in class java.lang.invoke.
MethodType
Returns the descriptor string for this method type.
descriptorString()
- Method in interface java.lang.invoke.
TypeDescriptor
Returns the descriptor string for this
TypeDescriptor
object.
DescriptorSupport
- Class in
javax.management.modelmbean
This class represents the metadata set for a ModelMBean element.
DescriptorSupport()
- Constructor for class javax.management.modelmbean.
DescriptorSupport
Descriptor default constructor.
DescriptorSupport(int)
- Constructor for class javax.management.modelmbean.
DescriptorSupport
Descriptor constructor.
DescriptorSupport(String)
- Constructor for class javax.management.modelmbean.
DescriptorSupport
Descriptor constructor taking an XML String.
DescriptorSupport(String...)
- Constructor for class javax.management.modelmbean.
DescriptorSupport
Constructor taking fields in the
fieldName=fieldValue
format.
DescriptorSupport(String[], Object[])
- Constructor for class javax.management.modelmbean.
DescriptorSupport
Constructor taking field names and field values.
DescriptorSupport(DescriptorSupport)
- Constructor for class javax.management.modelmbean.
DescriptorSupport
Descriptor constructor taking a Descriptor as parameter.
DESedeKeySpec
- Class in
javax.crypto.spec
This class specifies a DES-EDE ("triple-DES") key.
DESedeKeySpec(byte[])
- Constructor for class javax.crypto.spec.
DESedeKeySpec
Creates a DESedeKeySpec object using the first 24 bytes in
key
as the key material for the DES-EDE key.
DESedeKeySpec(byte[], int)
- Constructor for class javax.crypto.spec.
DESedeKeySpec
Creates a DESedeKeySpec object using the first 24 bytes in
key
, beginning at
offset
inclusive,
 as the key material for the DES-EDE key.
deselect(int)
- Method in class java.awt.
List
Deselects the item at the specified index.
DESELECTED
- Static variable in class java.awt.event.
ItemEvent
This state-change-value indicates that a selected item was deselected.
DESERET
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Deseret".
DESERET
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Deseret" Unicode character block.
Deserialization Filtering Factory and Filters
- Search tag in interface java.io.ObjectInputFilter
Section
deserialize(ObjectInputStream, Collection)
- Method in class java.beans.beancontext.
BeanContextSupport
used by readObject to deserialize a collection.
deserialize(String, byte[])
- Method in interface javax.management.
MBeanServer
Deprecated.
Use
MBeanServer.getClassLoaderRepository()
to obtain the
 class loader repository and use it to deserialize.
deserialize(String, ObjectName, byte[])
- Method in interface javax.management.
MBeanServer
Deprecated.
Use
getClassLoader
to obtain
 the class loader for deserialization.
deserialize(ObjectName, byte[])
- Method in interface javax.management.
MBeanServer
Deprecated.
Use
getClassLoaderFor
to
 obtain the appropriate class loader for deserialization.
DESIGNATED_LONG
- Static variable in class javax.print.attribute.standard.
MediaSize.ISO
Specifies the ISO Designated Long size, 110 mm by 220 mm.
Design Goals
- Search tag in package java.util
Section
Designing services
- Search tag in class java.util.ServiceLoader
Section
DesignMode
- Interface in
java.beans
This interface is intended to be implemented by, or delegated from, instances
 of java.beans.beancontext.BeanContext, in order to propagate to its nested hierarchy
 of java.beans.beancontext.BeanContextChild instances, the current "designTime" property.
Design notes (non normative)
- Search tag in package java.time
Section
Design Rationale
- Search tag in class javax.print.DocFlavor
Section
designTime
- Variable in class java.beans.beancontext.
BeanContextSupport
A
boolean
indicating whether or not
 this object is currently in design time mode.
desiredAssertionStatus()
- Method in class java.lang.
Class
Returns the assertion status that would be assigned to this
 class if it were to be initialized at the time this method is invoked.
DESKeySpec
- Class in
javax.crypto.spec
This class specifies a DES key.
DESKeySpec(byte[])
- Constructor for class javax.crypto.spec.
DESKeySpec
Creates a DESKeySpec object using the first 8 bytes in
key
as the key material for the DES key.
DESKeySpec(byte[], int)
- Constructor for class javax.crypto.spec.
DESKeySpec
Creates a DESKeySpec object using the first 8 bytes in
key
, beginning at
offset
inclusive,
 as the key material for the DES key.
desktop
- Static variable in class java.awt.
SystemColor
The color rendered for the background of the desktop.
desktop
- Variable in class javax.swing.plaf.basic.
BasicDesktopPaneUI
The instance of
JDesktopPane
.
Desktop
- Class in
java.awt
The
Desktop
class allows interact with various desktop capabilities.
DESKTOP
- Static variable in class java.awt.
SystemColor
The array index for the
SystemColor.desktop
system color.
DESKTOP_ICON
- Static variable in class javax.accessibility.
AccessibleRole
An iconified internal frame in a
DESKTOP_PANE
.
DESKTOP_ICON
- Static variable in class javax.swing.plaf.synth.
Region
DesktopIcon region.
DESKTOP_PANE
- Static variable in class javax.accessibility.
AccessibleRole
A pane that supports internal frames and iconified versions of those
 internal frames.
DESKTOP_PANE
- Static variable in class javax.swing.plaf.synth.
Region
DesktopPane region.
Desktop.Action
- Enum Class in
java.awt
Represents an action type.
Desktop Font Rendering Hints
- Search tag in package java.awt
Section
desktopIcon
- Variable in class javax.swing.
JInternalFrame
The icon that is displayed when this internal frame is iconified.
desktopIcon
- Variable in class javax.swing.plaf.basic.
BasicDesktopIconUI
The instance of
JInternalFrame.JDesktopIcon
.
DesktopIconUI
- Class in
javax.swing.plaf
Pluggable look and feel interface for JDesktopIcon.
DesktopIconUI()
- Constructor for class javax.swing.plaf.
DesktopIconUI
Constructor for subclasses to call.
desktopManager
- Variable in class javax.swing.plaf.basic.
BasicDesktopPaneUI
The instance of
DesktopManager
.
DesktopManager
- Interface in
javax.swing
DesktopManager objects are owned by a JDesktopPane object.
DesktopPaneUI
- Class in
javax.swing.plaf
Pluggable look and feel interface for JDesktopPane.
DesktopPaneUI()
- Constructor for class javax.swing.plaf.
DesktopPaneUI
Constructor for subclasses to call.
desktopProperties
- Variable in class java.awt.
Toolkit
The desktop properties.
desktopPropsSupport
- Variable in class java.awt.
Toolkit
The desktop properties change support.
DEST_DISTANCE_REF_KILOMETERS
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A value to be used with the "GPSDestDistanceRef" tag.
DEST_DISTANCE_REF_KNOTS
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A value to be used with the "GPSDestDistanceRef" tag.
DEST_DISTANCE_REF_MILES
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A value to be used with the "GPSDestDistanceRef" tag.
destHeight
- Variable in class java.awt.image.
ReplicateScaleFilter
The target height to scale the image.
destination
- Variable in class javax.imageio.
ImageReadParam
The current destination
BufferedImage
, or
null
if none has been set.
destination
- Variable in class javax.swing.plaf.basic.
BasicTreeUI.MouseInputHandler
Destination that receives all events.
Destination
- Class in
javax.print.attribute.standard
Class
Destination
is a printing attribute class, a
URI
, that
 is used to indicate an alternate destination for the spooled printer
 formatted data.
Destination(URI)
- Constructor for class javax.print.attribute.standard.
Destination
Constructs a new destination attribute with the specified
URI
.
destinationBands
- Variable in class javax.imageio.
ImageReadParam
The set of destination bands to be used, as an array of
int
s.
destinationOffset
- Variable in class javax.imageio.
IIOParam
The offset in the destination where the upper-left decoded
 pixel should be placed.
destinationType
- Variable in class javax.imageio.
IIOParam
An
ImageTypeSpecifier
to be used to generate a
 destination image when reading, or to set the output color type
 when writing.
destroy()
- Method in class java.applet.
Applet
Deprecated.
Called by the browser or applet viewer to inform this applet that it is
 being reclaimed and that it should destroy any resources that it has
 allocated.
destroy()
- Method in class java.lang.
Process
Kills the process.
destroy()
- Method in interface java.lang.
ProcessHandle
Requests the process to be killed.
destroy()
- Method in class java.lang.
ThreadGroup
Deprecated, for removal: This API element is subject to removal in a future version.
This method was originally specified to destroy an empty
             thread group. The ability to explicitly destroy a thread group
             no longer exists. A thread group is eligible to be GC'ed when
             there are no live threads in the group and it is otherwise
             unreachable.
destroy()
- Method in class java.security.
KeyStore.PasswordProtection
Clears the password.
destroy()
- Method in interface javax.security.auth.
Destroyable
Destroy this
Object
.
destroy()
- Method in class javax.security.auth.kerberos.
EncryptionKey
Destroys this key by clearing out the key material of this key.
destroy()
- Method in class javax.security.auth.kerberos.
KerberosCredMessage
Destroys this object by clearing out the message.
destroy()
- Method in class javax.security.auth.kerberos.
KerberosKey
Destroys this key by clearing out the key material of this secret key.
destroy()
- Method in class javax.security.auth.kerberos.
KerberosTicket
Destroys the ticket and destroys any sensitive information stored in
 it.
destroy()
- Method in class javax.security.auth.x500.
X500PrivateCredential
Clears the references to the X.509 certificate, private key and the
 KeyStore alias in this object.
Destroyable
- Interface in
javax.security.auth
Objects such as credentials may optionally implement this interface
 to provide the capability to destroy its contents.
destroyBuffers()
- Method in class java.awt.
Component.FlipBufferStrategy
Destroys the buffers created through this object
DestroyFailedException
- Exception Class in
javax.security.auth
Signals that a
destroy
operation failed.
DestroyFailedException()
- Constructor for exception class javax.security.auth.
DestroyFailedException
Constructs a DestroyFailedException with no detail message.
DestroyFailedException(String)
- Constructor for exception class javax.security.auth.
DestroyFailedException
Constructs a DestroyFailedException with the specified detail
 message.
destroyForcibly()
- Method in class java.lang.
Process
Kills the process forcibly.
destroyForcibly()
- Method in interface java.lang.
ProcessHandle
Requests the process to be killed forcibly.
destroySubcontext(String)
- Method in interface javax.naming.
Context
Destroys the named context and removes it from the namespace.
destroySubcontext(String)
- Method in class javax.naming.
InitialContext
destroySubcontext(Name)
- Method in interface javax.naming.
Context
Destroys the named context and removes it from the namespace.
destroySubcontext(Name)
- Method in class javax.naming.
InitialContext
destWidth
- Variable in class java.awt.image.
ReplicateScaleFilter
The target width to scale the image.
detach()
- Method in class com.sun.tools.attach.
VirtualMachine
Detach from the virtual machine.
detach()
- Method in interface org.w3c.dom.ranges.
Range
Called to indicate that the Range is no longer in use and that the
 implementation may relinquish any resources associated with this
 Range.
detach()
- Method in interface org.w3c.dom.traversal.
NodeIterator
Detaches the
NodeIterator
from the set which it iterated
 over, releasing any computational resources and placing the
NodeIterator
in the INVALID state.
detail
- Variable in exception class java.io.
WriteAbortedException
Deprecated.
This field predates the general-purpose exception
 chaining facility.  The
Throwable.getCause()
method is
 now the preferred means of obtaining this information.
detail
- Variable in exception class java.rmi.
RemoteException
The cause of the remote exception.
detail
- Variable in exception class java.rmi.server.
ServerCloneException
The cause of the exception.
Details
- Search tag in class java.util.Formatter
Section
Details
- Search tag in class javax.swing.JLayeredPane
Section
Details
- Search tag in javax.swing.JTable.doLayout()
Section
Details
- Search tag in package java.awt
Section
detailsViewIcon
- Variable in class javax.swing.plaf.basic.
BasicFileChooserUI
Details view icon
detectedCharset()
- Method in class java.nio.charset.
CharsetDecoder
Retrieves the charset that was detected by this
 decoder
(optional operation)
.
detectJdiExitEvent(VirtualMachine, Consumer<String>)
- Static method in class jdk.jshell.execution.
Util
Monitor the JDI event stream for
VMDeathEvent
and
VMDisconnectEvent
.
determineOffset(JTree, Object, boolean, boolean, boolean, int)
- Method in class javax.swing.tree.
DefaultTreeCellEditor
Determine the offset.
DEVANAGARI
- Enum constant in enum class java.awt.font.
NumericShaper.Range
The Devanagari range with the Devanagari digits.
DEVANAGARI
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Devanagari".
DEVANAGARI
- Static variable in class java.awt.font.
NumericShaper
Identifies the DEVANAGARI range and decimal base.
DEVANAGARI
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Devanagari" Unicode character block.
DEVANAGARI_EXTENDED
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Devanagari Extended" Unicode character block.
DEVANAGARI_EXTENDED_A
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Devanagari Extended-A" Unicode
 character block.
DEVELOPER_EMPTY
- Static variable in class javax.print.attribute.standard.
PrinterStateReason
The device is out of developer.
DEVELOPER_LOW
- Static variable in class javax.print.attribute.standard.
PrinterStateReason
The device is low on developer.
Developing resource bundle services
- Search tag in interface java.util.spi.ResourceBundleProvider
Section
Developing service providers
- Search tag in class java.util.ServiceLoader
Section
DFN
- Static variable in class javax.swing.text.html.
HTML.Tag
Tag <dfn>
DGC
- Interface in
java.rmi.dgc
The DGC abstraction is used for the server side of the distributed
 garbage collection algorithm.
DGC_ID
- Static variable in class java.rmi.server.
ObjID
Object number for well-known
ObjID
of
 the distributed garbage collector.
DHGenParameterSpec
- Class in
javax.crypto.spec
This class specifies the set of parameters used for generating
 Diffie-Hellman (system) parameters for use in Diffie-Hellman key
 agreement.
DHGenParameterSpec(int, int)
- Constructor for class javax.crypto.spec.
DHGenParameterSpec
Constructs a parameter set for the generation of Diffie-Hellman
 (system) parameters.
DHKey
- Interface in
javax.crypto.interfaces
The interface to a Diffie-Hellman key.
DHParameterSpec
- Class in
javax.crypto.spec
This class specifies the set of parameters used with the Diffie-Hellman
 algorithm, as specified in PKCS #3:
Diffie-Hellman Key-Agreement
 Standard
.
DHParameterSpec(BigInteger, BigInteger)
- Constructor for class javax.crypto.spec.
DHParameterSpec
Constructs a parameter set for Diffie-Hellman, using a prime modulus
p
and a base generator
g
.
DHParameterSpec(BigInteger, BigInteger, int)
- Constructor for class javax.crypto.spec.
DHParameterSpec
Constructs a parameter set for Diffie-Hellman, using a prime modulus
p
, a base generator
g
,
 and the size in bits,
l
, of the random exponent
 (private value).
DHPrivateKey
- Interface in
javax.crypto.interfaces
The interface to a Diffie-Hellman private key.
DHPrivateKeySpec
- Class in
javax.crypto.spec
This class specifies a Diffie-Hellman private key with its associated
 parameters.
DHPrivateKeySpec(BigInteger, BigInteger, BigInteger)
- Constructor for class javax.crypto.spec.
DHPrivateKeySpec
Constructor that takes a private value
x
, a prime
 modulus
p
, and a base generator
g
.
DHPublicKey
- Interface in
javax.crypto.interfaces
The interface to a Diffie-Hellman public key.
DHPublicKeySpec
- Class in
javax.crypto.spec
This class specifies a Diffie-Hellman public key with its associated
 parameters.
DHPublicKeySpec(BigInteger, BigInteger, BigInteger)
- Constructor for class javax.crypto.spec.
DHPublicKeySpec
Constructor that takes a public value
y
, a prime
 modulus
p
, and a base generator
g
.
Diag
- Class in
jdk.jshell
Diagnostic information for a Snippet.
Diagnostic<S>
- Interface in
javax.tools
Interface for diagnostics from tools.
Diagnostic.Kind
- Enum Class in
javax.tools
Kinds of diagnostics, for example, error or warning.
DiagnosticCollector<S>
- Class in
javax.tools
Provides an easy way to collect diagnostics in a list.
DiagnosticCollector()
- Constructor for class javax.tools.
DiagnosticCollector
Creates a new instance of DiagnosticCollector.
DiagnosticCommandMBean
- Interface in
com.sun.management
Management interface for the diagnostic commands for the HotSpot Virtual Machine.
DiagnosticListener<S>
- Interface in
javax.tools
Interface for receiving diagnostics from tools.
diagnostics(Snippet)
- Method in class jdk.jshell.
JShell
Return the diagnostics of the most recent evaluation of the snippet.
Dialog
- Class in
java.awt
A Dialog is a top-level window with a title and a border
 that is typically used to take some form of input from the user.
Dialog(Dialog)
- Constructor for class java.awt.
Dialog
Constructs an initially invisible, modeless
Dialog
with
 the specified owner
Dialog
and an empty title.
Dialog(Dialog, String)
- Constructor for class java.awt.
Dialog
Constructs an initially invisible, modeless
Dialog
with the specified owner
Dialog
and title.
Dialog(Dialog, String, boolean)
- Constructor for class java.awt.
Dialog
Constructs an initially invisible
Dialog
with the
 specified owner
Dialog
, title, and modality.
Dialog(Dialog, String, boolean, GraphicsConfiguration)
- Constructor for class java.awt.
Dialog
Constructs an initially invisible
Dialog
with the
 specified owner
Dialog
, title, modality and
GraphicsConfiguration
.
Dialog(Frame)
- Constructor for class java.awt.
Dialog
Constructs an initially invisible, modeless
Dialog
with
 the specified owner
Frame
and an empty title.
Dialog(Frame, boolean)
- Constructor for class java.awt.
Dialog
Constructs an initially invisible
Dialog
with the specified
 owner
Frame
and modality and an empty title.
Dialog(Frame, String)
- Constructor for class java.awt.
Dialog
Constructs an initially invisible, modeless
Dialog
with
 the specified owner
Frame
and title.
Dialog(Frame, String, boolean)
- Constructor for class java.awt.
Dialog
Constructs an initially invisible
Dialog
with the
 specified owner
Frame
, title and modality.
Dialog(Frame, String, boolean, GraphicsConfiguration)
- Constructor for class java.awt.
Dialog
Constructs an initially invisible
Dialog
with the specified owner
Frame
, title, modality, and
GraphicsConfiguration
.
Dialog(Window)
- Constructor for class java.awt.
Dialog
Constructs an initially invisible, modeless
Dialog
with the
 specified owner
Window
and an empty title.
Dialog(Window, Dialog.ModalityType)
- Constructor for class java.awt.
Dialog
Constructs an initially invisible
Dialog
with the
 specified owner
Window
and modality and an empty title.
Dialog(Window, String)
- Constructor for class java.awt.
Dialog
Constructs an initially invisible, modeless
Dialog
with
 the specified owner
Window
and title.
Dialog(Window, String, Dialog.ModalityType)
- Constructor for class java.awt.
Dialog
Constructs an initially invisible
Dialog
with the
 specified owner
Window
, title and modality.
Dialog(Window, String, Dialog.ModalityType, GraphicsConfiguration)
- Constructor for class java.awt.
Dialog
Constructs an initially invisible
Dialog
with the
 specified owner
Window
, title, modality and
GraphicsConfiguration
.
DIALOG
- Static variable in class java.awt.
Font
A String constant for the canonical family name of the
 logical font "Dialog".
DIALOG
- Static variable in class javax.accessibility.
AccessibleRole
A top level window with title bar and a border.
DIALOG_INPUT
- Static variable in class java.awt.
Font
A String constant for the canonical family name of the
 logical font "DialogInput".
DIALOG_TITLE_CHANGED_PROPERTY
- Static variable in class javax.swing.
JFileChooser
Identifies a change in the dialog title.
DIALOG_TYPE_CHANGED_PROPERTY
- Static variable in class javax.swing.
JFileChooser
Identifies a change in the type of files displayed (files only,
 directories only, or both files and directories).
DIALOG_UI
- Static variable in class javax.print.
ServiceUIFactory
Denotes a UI implemented as an AWT dialog.
Dialog.AccessibleAWTDialog
- Class in
java.awt
This class implements accessibility support for the
Dialog
class.
Dialog.ModalExclusionType
- Enum Class in
java.awt
Any top-level window can be marked not to be blocked by modal
 dialogs.
Dialog.ModalityType
- Enum Class in
java.awt
Modal dialogs block all input to some top-level windows.
dialogInit()
- Method in class javax.swing.
JDialog
Called by the constructors to init the
JDialog
properly.
DialogOwner
- Class in
javax.print.attribute.standard
An attribute class used to support requesting a print or page setup dialog
 be kept displayed on top of all windows or some specific window.
DialogOwner()
- Constructor for class javax.print.attribute.standard.
DialogOwner
Constructs an instance which can be used to request
java.awt.Window.setAlwaysOnTop(true)
behaviour.
DialogOwner(Window)
- Constructor for class javax.print.attribute.standard.
DialogOwner
Constructs an instance which can be used to request that the
 specified
Window
be the owner of the dialog.
DialogTypeSelection
- Class in
javax.print.attribute.standard
Class
DialogTypeSelection
is a printing attribute class, an
 enumeration, that indicates the user dialog type to be used for specifying
 printing options.
DialogTypeSelection(int)
- Constructor for class javax.print.attribute.standard.
DialogTypeSelection
Constructs a new dialog type selection enumeration value with the given
 integer value.
Dictionary<K,
V>
- Class in
java.util
The
Dictionary
class is the abstract parent of any
 class, such as
Hashtable
, which maps keys to values.
Dictionary()
- Constructor for class java.util.
Dictionary
Sole constructor.
die()
- Method in class javax.swing.undo.
AbstractUndoableEdit
Sets
alive
to false.
die()
- Method in class javax.swing.undo.
CompoundEdit
Sends
die
to each subedit,
 in the reverse of the order that they were added.
die()
- Method in interface javax.swing.undo.
UndoableEdit
Informs the edit that it should no longer be used.
DIFFERENTIAL_CORRECTION_APPLIED
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A value to be used with the "GPSDifferential" tag.
DIFFERENTIAL_CORRECTION_NONE
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A value to be used with the "GPSDifferential" tag.
digest
- Variable in class java.security.
DigestInputStream
The message digest associated with this stream.
digest
- Variable in class java.security.
DigestOutputStream
The message digest associated with this stream.
digest()
- Method in class java.security.
MessageDigest
Completes the hash computation by performing final operations
 such as padding.
digest(byte[])
- Method in class java.security.
MessageDigest
Performs a final update on the digest using the specified array
 of bytes, then completes the digest computation.
digest(byte[], int, int)
- Method in class java.security.
MessageDigest
Completes the hash computation by performing final operations
 such as padding.
digestAlgorithm(String)
- Method in class jdk.security.jarsigner.
JarSigner.Builder
Sets the digest algorithm.
digestAlgorithm(String, Provider)
- Method in class jdk.security.jarsigner.
JarSigner.Builder
Sets the digest algorithm from the specified provider.
DigestException
- Exception Class in
java.security
This is the generic Message Digest exception.
DigestException()
- Constructor for exception class java.security.
DigestException
Constructs a
DigestException
with no detail message.
DigestException(String)
- Constructor for exception class java.security.
DigestException
Constructs a
DigestException
with the specified detail
 message.
DigestException(String, Throwable)
- Constructor for exception class java.security.
DigestException
Creates a
DigestException
with the specified
 detail message and cause.
DigestException(Throwable)
- Constructor for exception class java.security.
DigestException
Creates a
DigestException
with the specified cause
 and a detail message of
(cause==null ? null : cause.toString())
(which typically contains the class and detail message of
cause
).
DigestInputStream
- Class in
java.security
A transparent stream that updates the associated message digest using
 the bits going through the stream.
DigestInputStream(InputStream, MessageDigest)
- Constructor for class java.security.
DigestInputStream
Creates a digest input stream, using the specified input stream
 and message digest.
DigestMethod
- Interface in
javax.xml.crypto.dsig
A representation of the XML
DigestMethod
element as
 defined in the
W3C Recommendation for XML-Signature Syntax and Processing
.
DigestMethodParameterSpec
- Interface in
javax.xml.crypto.dsig.spec
A specification of algorithm parameters for a
DigestMethod
algorithm.
DigestOutputStream
- Class in
java.security
A transparent stream that updates the associated message digest using
 the bits going through the stream.
DigestOutputStream(OutputStream, MessageDigest)
- Constructor for class java.security.
DigestOutputStream
Creates a digest output stream, using the specified output stream
 and message digest.
digit(char, int)
- Static method in class java.lang.
Character
Returns the numeric value of the character
ch
in the
 specified radix.
digit(int, int)
- Static method in class java.lang.
Character
Returns the numeric value of the specified character (Unicode
 code point) in the specified radix.
Digits
- Search tag in class java.text.DecimalFormat
Section
Dimension
- Class in
java.awt
The
Dimension
class encapsulates the width and
 height of a component (in integer precision) in a single object.
Dimension()
- Constructor for class java.awt.
Dimension
Creates an instance of
Dimension
with a width
 of zero and a height of zero.
Dimension(int, int)
- Constructor for class java.awt.
Dimension
Constructs a
Dimension
and initializes
 it to the specified width and specified height.
Dimension(Dimension)
- Constructor for class java.awt.
Dimension
Creates an instance of
Dimension
whose width
 and height are the same as for the specified dimension.
Dimension2D
- Class in
java.awt.geom
The
Dimension2D
class is to encapsulate a width
 and a height dimension.
Dimension2D()
- Constructor for class java.awt.geom.
Dimension2D
This is an abstract class that cannot be instantiated directly.
DimensionUIResource
- Class in
javax.swing.plaf
A subclass of
Dimension
that implements
UIResource
.
DimensionUIResource(int, int)
- Constructor for class javax.swing.plaf.
DimensionUIResource
Constructs a
DimensionUIResource
.
DINGBATS
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Dingbats" Unicode character block.
DIR
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "dir"
DIR
- Static variable in class javax.swing.text.html.
HTML.Tag
Tag <dir>
DirContext
- Interface in
javax.naming.directory
The directory service interface, containing
 methods for examining and updating attributes
 associated with objects, and for searching the directory.
DIRECT
- Enum constant in enum class java.net.
Proxy.Type
Represents a direct connection, or the absence of a proxy.
DirectColorModel
- Class in
java.awt.image
The
DirectColorModel
class is a
ColorModel
class that works with pixel values that represent RGB
 color and alpha information as separate samples and that pack all
 samples for a single pixel into a single int, short, or byte quantity.
DirectColorModel(int, int, int, int)
- Constructor for class java.awt.image.
DirectColorModel
Constructs a
DirectColorModel
from the specified masks
 that indicate which bits in an
int
pixel representation
 contain the red, green and blue color samples.
DirectColorModel(int, int, int, int, int)
- Constructor for class java.awt.image.
DirectColorModel
Constructs a
DirectColorModel
from the specified masks
 that indicate which bits in an
int
pixel representation
 contain the red, green and blue color samples and the alpha sample,
 if present.
DirectColorModel(ColorSpace, int, int, int, int, int, boolean, int)
- Constructor for class java.awt.image.
DirectColorModel
Constructs a
DirectColorModel
from the specified
 parameters.
DirectExecutionControl
- Class in
jdk.jshell.execution
An
ExecutionControl
implementation that runs in the current process.
DirectExecutionControl()
- Constructor for class jdk.jshell.execution.
DirectExecutionControl
Create an instance using the default class loading.
DirectExecutionControl(LoaderDelegate)
- Constructor for class jdk.jshell.execution.
DirectExecutionControl
Creates an instance, delegating loader operations to the specified
 delegate.
direction
- Variable in class javax.swing.plaf.basic.
BasicArrowButton
The direction of the arrow.
direction
- Variable in class javax.swing.plaf.basic.
BasicTreeUI.TreeHomeAction
The direction.
direction
- Variable in class javax.swing.plaf.basic.
BasicTreeUI.TreeIncrementAction
Specifies the direction to adjust the selection by.
direction
- Variable in class javax.swing.plaf.basic.
BasicTreeUI.TreePageAction
Specifies the direction to adjust the selection by.
direction
- Variable in class javax.swing.plaf.basic.
BasicTreeUI.TreeTraverseAction
Determines direction to traverse, 1 means expand, -1 means
 collapse.
DIRECTION_DEFAULT_LEFT_TO_RIGHT
- Static variable in class java.text.
Bidi
Constant indicating that the base direction depends on the first strong
 directional character in the text according to the Unicode
 Bidirectional Algorithm.
DIRECTION_DEFAULT_RIGHT_TO_LEFT
- Static variable in class java.text.
Bidi
Constant indicating that the base direction depends on the first strong
 directional character in the text according to the Unicode
 Bidirectional Algorithm.
DIRECTION_LEFT_TO_RIGHT
- Static variable in class java.text.
Bidi
Constant indicating base direction is left-to-right.
DIRECTION_REF_MAGNETIC
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A value to be used with the "GPSTrackRef", "GPSImgDirectionRef",
 and "GPSDestBearingRef" tags.
DIRECTION_REF_TRUE
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A value to be used with the "GPSTrackRef", "GPSImgDirectionRef",
 and "GPSDestBearingRef" tags.
DIRECTION_RIGHT_TO_LEFT
- Static variable in class java.text.
Bidi
Constant indicating base direction is right-to-left.
DIRECTIONALITY_ARABIC_NUMBER
- Static variable in class java.lang.
Character
Weak bidirectional character type "AN" in the Unicode specification.
DIRECTIONALITY_BOUNDARY_NEUTRAL
- Static variable in class java.lang.
Character
Weak bidirectional character type "BN" in the Unicode specification.
DIRECTIONALITY_COMMON_NUMBER_SEPARATOR
- Static variable in class java.lang.
Character
Weak bidirectional character type "CS" in the Unicode specification.
DIRECTIONALITY_EUROPEAN_NUMBER
- Static variable in class java.lang.
Character
Weak bidirectional character type "EN" in the Unicode specification.
DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR
- Static variable in class java.lang.
Character
Weak bidirectional character type "ES" in the Unicode specification.
DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR
- Static variable in class java.lang.
Character
Weak bidirectional character type "ET" in the Unicode specification.
DIRECTIONALITY_FIRST_STRONG_ISOLATE
- Static variable in class java.lang.
Character
Weak bidirectional character type "FSI" in the Unicode specification.
DIRECTIONALITY_LEFT_TO_RIGHT
- Static variable in class java.lang.
Character
Strong bidirectional character type "L" in the Unicode specification.
DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING
- Static variable in class java.lang.
Character
Strong bidirectional character type "LRE" in the Unicode specification.
DIRECTIONALITY_LEFT_TO_RIGHT_ISOLATE
- Static variable in class java.lang.
Character
Weak bidirectional character type "LRI" in the Unicode specification.
DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE
- Static variable in class java.lang.
Character
Strong bidirectional character type "LRO" in the Unicode specification.
DIRECTIONALITY_NONSPACING_MARK
- Static variable in class java.lang.
Character
Weak bidirectional character type "NSM" in the Unicode specification.
DIRECTIONALITY_OTHER_NEUTRALS
- Static variable in class java.lang.
Character
Neutral bidirectional character type "ON" in the Unicode specification.
DIRECTIONALITY_PARAGRAPH_SEPARATOR
- Static variable in class java.lang.
Character
Neutral bidirectional character type "B" in the Unicode specification.
DIRECTIONALITY_POP_DIRECTIONAL_FORMAT
- Static variable in class java.lang.
Character
Weak bidirectional character type "PDF" in the Unicode specification.
DIRECTIONALITY_POP_DIRECTIONAL_ISOLATE
- Static variable in class java.lang.
Character
Weak bidirectional character type "PDI" in the Unicode specification.
DIRECTIONALITY_RIGHT_TO_LEFT
- Static variable in class java.lang.
Character
Strong bidirectional character type "R" in the Unicode specification.
DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC
- Static variable in class java.lang.
Character
Strong bidirectional character type "AL" in the Unicode specification.
DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING
- Static variable in class java.lang.
Character
Strong bidirectional character type "RLE" in the Unicode specification.
DIRECTIONALITY_RIGHT_TO_LEFT_ISOLATE
- Static variable in class java.lang.
Character
Weak bidirectional character type "RLI" in the Unicode specification.
DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE
- Static variable in class java.lang.
Character
Strong bidirectional character type "RLO" in the Unicode specification.
DIRECTIONALITY_SEGMENT_SEPARATOR
- Static variable in class java.lang.
Character
Neutral bidirectional character type "S" in the Unicode specification.
DIRECTIONALITY_UNDEFINED
- Static variable in class java.lang.
Character
Undefined bidirectional character type.
DIRECTIONALITY_WHITESPACE
- Static variable in class java.lang.
Character
Neutral bidirectional character type "WS" in the Unicode specification.
DirectiveTree
- Interface in
com.sun.source.tree
A super-type for all the directives in a ModuleTree.
DirectMethodHandleDesc
- Interface in
java.lang.constant
A
nominal descriptor
for a direct
MethodHandle
.
DirectMethodHandleDesc.Kind
- Enum Class in
java.lang.constant
Kinds of method handles that can be described with
DirectMethodHandleDesc
.
Direct Method Handles
- Search tag in interface java.lang.invoke.MethodHandleInfo
Section
DIRECTORIES_ONLY
- Static variable in class javax.swing.
JFileChooser
Instruction to display only directories.
directory()
- Method in class java.lang.
ProcessBuilder
Returns this process builder's working directory.
directory(File)
- Method in class java.lang.
ProcessBuilder
Sets this process builder's working directory.
DIRECTORY_CHANGED_PROPERTY
- Static variable in class javax.swing.
JFileChooser
Identifies user's directory change.
DIRECTORY_INHERIT
- Enum constant in enum class java.nio.file.attribute.
AclEntryFlag
Can be placed on a directory and indicates that the ACL entry should be
 added to each new directory created.
DIRECTORY_PANE
- Static variable in class javax.accessibility.
AccessibleRole
A pane that allows the user to navigate through and select the contents
 of a directory.
DirectoryComboBoxAction()
- Constructor for class javax.swing.plaf.metal.
MetalFileChooserUI.DirectoryComboBoxAction
Constructs a new instance of
DirectoryComboBoxAction
.
DirectoryComboBoxModel()
- Constructor for class javax.swing.plaf.metal.
MetalFileChooserUI.DirectoryComboBoxModel
Constructs an instance of
DirectoryComboBoxModel
.
directoryIcon
- Variable in class javax.swing.plaf.basic.
BasicFileChooserUI
Directory icon
DirectoryIteratorException
- Exception Class in
java.nio.file
Runtime exception thrown if an I/O error is encountered when iterating over
 the entries in a directory.
DirectoryIteratorException(IOException)
- Constructor for exception class java.nio.file.
DirectoryIteratorException
Constructs an instance of this class.
DirectoryManager
- Class in
javax.naming.spi
This class contains methods for supporting
DirContext
implementations.
DirectoryNotEmptyException
- Exception Class in
java.nio.file
Checked exception thrown when a file system operation fails because a
 directory is not empty.
DirectoryNotEmptyException(String)
- Constructor for exception class java.nio.file.
DirectoryNotEmptyException
Constructs an instance of this class.
directoryOpenButtonMnemonic
- Variable in class javax.swing.plaf.basic.
BasicFileChooserUI
The mnemonic keycode used for the approve button when a directory
 is selected and the current selection mode is FILES_ONLY.
directoryOpenButtonText
- Variable in class javax.swing.plaf.basic.
BasicFileChooserUI
The label text displayed on the approve button when a directory
 is selected and the current selection mode is FILES_ONLY.
directoryOpenButtonToolTipText
- Variable in class javax.swing.plaf.basic.
BasicFileChooserUI
The tooltip text displayed on the approve button when a directory
 is selected and the current selection mode is FILES_ONLY.
DirectoryStream<T>
- Interface in
java.nio.file
An object to iterate over the entries in a directory.
DirectoryStream.Filter<T>
- Interface in
java.nio.file
An interface that is implemented by objects that decide if a directory
 entry should be accepted or filtered.
directSupertypes(TypeMirror)
- Method in interface javax.lang.model.util.
Types
Returns the direct supertypes of a type.
Direct vs. non-direct buffers
- Search tag in class java.nio.ByteBuffer
Section
DirObjectFactory
- Interface in
javax.naming.spi
This interface represents a factory for creating an object given
 an object and attributes about the object.
DirStateFactory
- Interface in
javax.naming.spi
This interface represents a factory for obtaining the state of an
 object and corresponding attributes for binding.
DirStateFactory.Result
- Class in
javax.naming.spi
An object/attributes pair for returning the result of
 DirStateFactory.getStateToBind().
dirty(ObjID[], long, Lease)
- Method in interface java.rmi.dgc.
DGC
The dirty call requests leases for the remote object references
 associated with the object identifiers contained in the array
 'ids'.
disable()
- Method in interface com.sun.jdi.request.
EventRequest
Same as
setEnabled(false)
.
disable()
- Method in class java.awt.
Component
Deprecated.
As of JDK version 1.1,
 replaced by
setEnabled(boolean)
.
disable()
- Method in class java.awt.
MenuItem
Deprecated.
As of JDK version 1.1,
 replaced by
setEnabled(boolean)
.
disable()
- Method in class javax.swing.
JComponent
Deprecated.
As of JDK version 1.1,
 replaced by
java.awt.Component.setEnabled(boolean)
.
disable(Class<? extends Event>)
- Method in class jdk.jfr.consumer.
RecordingStream
Disables event.
disable(Class<? extends Event>)
- Method in class jdk.jfr.
Recording
Disables event.
disable(String)
- Method in class jdk.jfr.consumer.
RecordingStream
Disables event with the specified name.
disable(String)
- Method in class jdk.jfr.
Recording
Disables event with the specified name.
disable(String)
- Method in class jdk.management.jfr.
RemoteRecordingStream
Disables event with the specified name.
disableAllAttributes()
- Method in class javax.management.
AttributeChangeNotificationFilter
Disables all the attribute names.
disableAllObjectNames()
- Method in class javax.management.relation.
MBeanServerNotificationFilter
Disables any MBeanServerNotification (all ObjectNames are
 deselected).
disableAllTypes()
- Method in class javax.management.
NotificationFilterSupport
Disables all notification types.
disableAttribute(String)
- Method in class javax.management.
AttributeChangeNotificationFilter
Disables all the attribute change notifications the attribute name of which equals
 the specified attribute name to be sent to the listener.
disableCollection()
- Method in interface com.sun.jdi.
ObjectReference
Prevents garbage collection for this object.
DISABLED
- Static variable in interface javax.swing.plaf.synth.
SynthConstants
Primary state indicating the region is not enabled.
DISABLED_ICON_CHANGED_PROPERTY
- Static variable in class javax.swing.
AbstractButton
Identifies a change to the icon used when the button has
 been disabled.
DISABLED_SELECTED_ICON_CHANGED_PROPERTY
- Static variable in class javax.swing.
AbstractButton
Identifies a change to the icon used when the button has been
 disabled and selected.
disabledForeground
- Variable in class javax.swing.plaf.basic.
BasicMenuItemUI
The color of the disabled foreground.
disabledTextColor
- Variable in class javax.swing.plaf.metal.
MetalButtonUI
The color of the disabled color.
disabledTextColor
- Variable in class javax.swing.plaf.metal.
MetalRadioButtonUI
The color of a disabled text.
disabledTextColor
- Variable in class javax.swing.plaf.metal.
MetalToggleButtonUI
The color of a disabled text.
disableEvents(long)
- Method in class java.awt.
Component
Disables the events defined by the specified event mask parameter
 from being delivered to this component.
disableEvents(long)
- Method in class java.awt.
MenuItem
Disables event delivery to this menu item for events
 defined by the specified event mask parameter.
disableObjectName(ObjectName)
- Method in class javax.management.relation.
MBeanServerNotificationFilter
Disables MBeanServerNotifications concerning given ObjectName.
disableResizedPosting()
- Method in class javax.swing.table.
TableColumn
Deprecated.
as of Java 2 platform v1.3
disableSuddenTermination()
- Method in class java.awt.
Desktop
Prevents this application from being suddenly terminated.
disableSwingFocusManager()
- Static method in class javax.swing.
FocusManager
Deprecated.
as of 1.4, replaced by
KeyboardFocusManager.setDefaultFocusTraversalPolicy(FocusTraversalPolicy)
disableType(String)
- Method in class javax.management.
NotificationFilterSupport
Removes the given prefix from the prefix list.
DISCARD
- Static variable in class java.lang.
ProcessBuilder.Redirect
Indicates that subprocess output will be discarded.
discardAllEdits()
- Method in class javax.swing.undo.
UndoManager
Empties the undo manager sending each edit a
die
message
 in the process.
discarding()
- Static method in class java.net.http.
HttpResponse.BodyHandlers
Returns a response body handler that discards the response body.
discarding()
- Static method in class java.net.http.
HttpResponse.BodySubscribers
Returns a response subscriber which discards the response body.
discardKeyEvents(Component)
- Method in class java.awt.
DefaultKeyboardFocusManager
Discards all KeyEvents which were enqueued because of one or more calls
 to
enqueueKeyEvents
with the specified Component, or one of
 its descendants.
discardKeyEvents(Component)
- Method in class java.awt.
KeyboardFocusManager
Called by the AWT to notify the KeyboardFocusManager that it should
 cancel delayed dispatching of KeyEvents.
DiscardOldestPolicy()
- Constructor for class java.util.concurrent.
ThreadPoolExecutor.DiscardOldestPolicy
Creates a
DiscardOldestPolicy
for the given executor.
DiscardPolicy()
- Constructor for class java.util.concurrent.
ThreadPoolExecutor.DiscardPolicy
Creates a
DiscardPolicy
.
disconnect()
- Method in class java.net.
DatagramSocket
Disconnects the socket.
disconnect()
- Method in class java.net.
DatagramSocketImpl
Disconnects a datagram socket from its remote destination.
disconnect()
- Method in class java.net.
HttpURLConnection
Indicates that other requests to the server
 are unlikely in the near future.
disconnect()
- Method in class java.nio.channels.
DatagramChannel
Disconnects this channel's socket.
disconnect(boolean)
- Method in class javax.smartcardio.
Card
Disconnects the connection with this card.
DISCONNECTED
- Enum constant in enum class com.sun.tools.jconsole.
JConsoleContext.ConnectionState
No connection present.
DISCONTIGUOUS_TREE_SELECTION
- Static variable in interface javax.swing.tree.
TreeSelectionModel
Selection can contain any number of items that are not necessarily
 contiguous.
disjoint(Collection<?>, Collection<?>)
- Static method in class java.util.
Collections
Returns
true
if the two specified collections have no
 elements in common.
dismiss(JSpinner)
- Method in class javax.swing.
JSpinner.DefaultEditor
Disconnect
this
editor from the specified
JSpinner
.
dispatch()
- Method in interface java.awt.
ActiveEvent
Dispatch the event to its target, listeners of the events source,
 or do whatever it is this event is supposed to do.
dispatch()
- Method in class java.awt.event.
InvocationEvent
Executes the Runnable's
run()
method and notifies the
 notifier (if any) when
run()
has returned or thrown an exception.
dispatch(Remote, RemoteCall, int, long)
- Method in interface java.rmi.server.
Skeleton
Deprecated.
no replacement
dispatch(NamingListener)
- Method in class javax.naming.event.
NamingEvent
Invokes the appropriate listener method on this event.
dispatch(NamingListener)
- Method in class javax.naming.event.
NamingExceptionEvent
Invokes the
namingExceptionThrown()
method on
 a listener using this event.
dispatch(UnsolicitedNotificationListener)
- Method in class javax.naming.ldap.
UnsolicitedNotificationEvent
Invokes the
notificationReceived()
method on
 a listener using this event.
dispatchEvent(AWTEvent)
- Method in class java.awt.
Component
Dispatches an event to this component or one of its sub components.
dispatchEvent(AWTEvent)
- Method in class java.awt.
DefaultKeyboardFocusManager
This method is called by the AWT event dispatcher requesting that the
 current KeyboardFocusManager dispatch the specified event on its behalf.
dispatchEvent(AWTEvent)
- Method in class java.awt.
EventQueue
Dispatches an event.
dispatchEvent(AWTEvent)
- Method in class java.awt.im.
InputContext
Dispatches an event to the active input method.
dispatchEvent(AWTEvent)
- Method in interface java.awt.im.spi.
InputMethod
Dispatches the event to the input method.
dispatchEvent(AWTEvent)
- Method in class java.awt.
KeyboardFocusManager
This method is called by the AWT event dispatcher requesting that the
 current KeyboardFocusManager dispatch the specified event on its behalf.
dispatchEvent(AWTEvent)
- Method in class java.awt.
MenuComponent
Delivers an event to this component or one of its sub components.
dispatchEvent(Event)
- Method in interface org.w3c.dom.events.
EventTarget
This method allows the dispatch of events into the implementations
 event model.
dispatchInputMethodEvent(int, AttributedCharacterIterator, int, TextHitInfo, TextHitInfo)
- Method in interface java.awt.im.spi.
InputMethodContext
Creates an input method event from the arguments given
 and dispatches it to the client component.
dispatchKeyEvent(KeyEvent)
- Method in class java.awt.
DefaultKeyboardFocusManager
Called by
dispatchEvent
if no other
 KeyEventDispatcher in the dispatcher chain dispatched the KeyEvent, or
 if no other KeyEventDispatchers are registered.
dispatchKeyEvent(KeyEvent)
- Method in class java.awt.
KeyboardFocusManager
Typically this method will be called by
dispatchEvent
if no
 other KeyEventDispatcher in the dispatcher chain dispatched the
 KeyEvent, or if no other KeyEventDispatchers are registered.
dispatchKeyEvent(KeyEvent)
- Method in interface java.awt.
KeyEventDispatcher
This method is called by the current KeyboardFocusManager requesting
 that this KeyEventDispatcher dispatch the specified event on its behalf.
DISPLAY
- Enum constant in enum class java.util.
Locale.Category
Category used to represent the default locale for
 displaying user interfaces.
DISPLAY
- Static variable in class javax.swing.text.html.
CSS.Attribute
CSS attribute "display".
DISPLAYABILITY_CHANGED
- Static variable in class java.awt.event.
HierarchyEvent
A change flag indicates that the
HIERARCHY_CHANGED
event
 was generated due to the changing of the hierarchy displayability.
displayDescriptor()
- Method in interface java.lang.constant.
MethodTypeDesc
Returns a human-readable descriptor for this method type, using the
 canonical names for parameter and return types.
DISPLAYED_MNEMONIC_INDEX_KEY
- Static variable in interface javax.swing.
Action
The key used for storing an
Integer
that corresponds
 to the index in the text (identified by the
NAME
property) that the decoration for a mnemonic should be rendered at.
displayMessage(String, String, TrayIcon.MessageType)
- Method in class java.awt.
TrayIcon
Displays a popup message near the tray icon.
DisplayMode
- Class in
java.awt
The
DisplayMode
class encapsulates the bit depth, height,
 width, and refresh rate of a
GraphicsDevice
.
DisplayMode(int, int, int, int)
- Constructor for class java.awt.
DisplayMode
Create a new display mode object with the supplied parameters.
displayName()
- Method in class com.sun.tools.attach.
VirtualMachineDescriptor
Return the
display name
component of this descriptor.
displayName()
- Method in interface java.lang.constant.
ClassDesc
Returns a human-readable name for the type described by this descriptor.
displayName()
- Method in class java.nio.charset.
Charset
Returns this charset's human-readable name for the default locale.
displayName(Locale)
- Method in class java.nio.charset.
Charset
Returns this charset's human-readable name for the given locale.
dispose()
- Method in interface com.sun.jdi.
VirtualMachine
Invalidates this virtual machine mirror.
dispose()
- Method in class com.sun.tools.jconsole.
JConsolePlugin
Dispose this plugin.
dispose()
- Method in class java.awt.
Component.BltBufferStrategy
Releases system resources currently consumed by this
BufferStrategy
and
 removes it from the associated Component.
dispose()
- Method in class java.awt.
Component.FlipBufferStrategy
Releases system resources currently consumed by this
BufferStrategy
and
 removes it from the associated Component.
dispose()
- Method in interface java.awt.
CompositeContext
Releases resources allocated for a context.
dispose()
- Method in class java.awt.
Graphics
Disposes of this graphics context and releases
 any system resources that it is using.
dispose()
- Method in class java.awt.im.
InputContext
Releases the resources used by this input context.
dispose()
- Method in interface java.awt.im.spi.
InputMethod
Releases the resources used by this input method.
dispose()
- Method in class java.awt.image.
BufferStrategy
Releases system resources currently consumed by this
BufferStrategy
and
 removes it from the associated Component.
dispose()
- Method in interface java.awt.
PaintContext
Releases the resources allocated for the operation.
dispose()
- Method in class java.awt.
Window
Releases all of the native screen resources used by this
Window
, its subcomponents, and all of its owned
 children.
dispose()
- Method in class javax.imageio.
ImageReader
Allows any resources held by this object to be released.
dispose()
- Method in class javax.imageio.
ImageWriter
Allows any resources held by this object to be released.
dispose()
- Method in class javax.print.
StreamPrintService
Disposes this
StreamPrintService
.
dispose()
- Method in interface javax.security.sasl.
SaslClient
Disposes of any system resources or security-sensitive information
 the SaslClient might be using.
dispose()
- Method in interface javax.security.sasl.
SaslServer
Disposes of any system resources or security-sensitive information
 the SaslServer might be using.
dispose()
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.dispose
.
dispose()
- Method in class javax.swing.
JInternalFrame
Makes this internal frame
 invisible, unselected, and closed.
dispose()
- Method in interface org.ietf.jgss.
GSSContext
Releases any system resources and cryptographic information stored in
 the context object and invalidates the context.
dispose()
- Method in interface org.ietf.jgss.
GSSCredential
Releases any sensitive information that the GSSCredential object may
 be containing.
DISPOSE_ON_CLOSE
- Static variable in interface javax.swing.
WindowConstants
The dispose-window default window close operation.
distance(double, double)
- Method in class java.awt.geom.
Point2D
Returns the distance from this
Point2D
to
 a specified point.
distance(double, double, double, double)
- Static method in class java.awt.geom.
Point2D
Returns the distance between two points.
distance(Point2D)
- Method in class java.awt.geom.
Point2D
Returns the distance from this
Point2D
to a
 specified
Point2D
.
distanceSq(double, double)
- Method in class java.awt.geom.
Point2D
Returns the square of the distance from this
Point2D
to a specified point.
distanceSq(double, double, double, double)
- Static method in class java.awt.geom.
Point2D
Returns the square of the distance between two points.
distanceSq(Point2D)
- Method in class java.awt.geom.
Point2D
Returns the square of the distance from this
Point2D
to a specified
Point2D
.
distinct()
- Method in interface java.util.stream.
DoubleStream
Returns a stream consisting of the distinct elements of this stream.
distinct()
- Method in interface java.util.stream.
IntStream
Returns a stream consisting of the distinct elements of this stream.
distinct()
- Method in interface java.util.stream.
LongStream
Returns a stream consisting of the distinct elements of this stream.
distinct()
- Method in interface java.util.stream.
Stream
Returns a stream consisting of the distinct elements (according to
Object.equals(Object)
) of this stream.
DISTINCT
- Enum constant in enum class java.sql.
JDBCType
Identifies the generic SQL type
DISTINCT
.
DISTINCT
- Static variable in class java.sql.
Types
The constant in the Java programming language, sometimes referred to
 as a type code, that identifies the generic SQL type
DISTINCT
.
DISTINCT
- Static variable in interface java.util.
Spliterator
Characteristic value signifying that, for each pair of
 encountered elements
x, y
,
!x.equals(y)
.
Distributed Transactions
- Search tag in package javax.sql
Section
Distributing the delta
- Search tag in javax.swing.JTable.doLayout()
Section
div(byte)
- Method in class jdk.incubator.vector.
ByteVector
Divides this vector by the broadcast of an input scalar.
div(byte, VectorMask<Byte>)
- Method in class jdk.incubator.vector.
ByteVector
Divides this vector by the broadcast of an input scalar,
 selecting lane elements controlled by a mask.
div(double)
- Method in class jdk.incubator.vector.
DoubleVector
Divides this vector by the broadcast of an input scalar.
div(double, VectorMask<Double>)
- Method in class jdk.incubator.vector.
DoubleVector
Divides this vector by the broadcast of an input scalar,
 selecting lane elements controlled by a mask.
div(float)
- Method in class jdk.incubator.vector.
FloatVector
Divides this vector by the broadcast of an input scalar.
div(float, VectorMask<Float>)
- Method in class jdk.incubator.vector.
FloatVector
Divides this vector by the broadcast of an input scalar,
 selecting lane elements controlled by a mask.
div(int)
- Method in class jdk.incubator.vector.
IntVector
Divides this vector by the broadcast of an input scalar.
div(int, VectorMask<Integer>)
- Method in class jdk.incubator.vector.
IntVector
Divides this vector by the broadcast of an input scalar,
 selecting lane elements controlled by a mask.
div(long)
- Method in class jdk.incubator.vector.
LongVector
Divides this vector by the broadcast of an input scalar.
div(long, VectorMask<Long>)
- Method in class jdk.incubator.vector.
LongVector
Divides this vector by the broadcast of an input scalar,
 selecting lane elements controlled by a mask.
div(short)
- Method in class jdk.incubator.vector.
ShortVector
Divides this vector by the broadcast of an input scalar.
div(short, VectorMask<Short>)
- Method in class jdk.incubator.vector.
ShortVector
Divides this vector by the broadcast of an input scalar,
 selecting lane elements controlled by a mask.
div(ValueExp, ValueExp)
- Static method in class javax.management.
Query
Returns a binary expression representing the quotient of two numeric
 values.
div(Vector<E>)
- Method in class jdk.incubator.vector.
Vector
Divides this vector by a second input vector.
div(Vector<E>, VectorMask<E>)
- Method in class jdk.incubator.vector.
Vector
Divides this vector by a second input vector
 under the control of a mask.
div(Vector<Byte>)
- Method in class jdk.incubator.vector.
ByteVector
Divides this vector by a second input vector.
div(Vector<Byte>, VectorMask<Byte>)
- Method in class jdk.incubator.vector.
ByteVector
Divides this vector by a second input vector
 under the control of a mask.
div(Vector<Double>)
- Method in class jdk.incubator.vector.
DoubleVector
Divides this vector by a second input vector.
div(Vector<Double>, VectorMask<Double>)
- Method in class jdk.incubator.vector.
DoubleVector
Divides this vector by a second input vector
 under the control of a mask.
div(Vector<Float>)
- Method in class jdk.incubator.vector.
FloatVector
Divides this vector by a second input vector.
div(Vector<Float>, VectorMask<Float>)
- Method in class jdk.incubator.vector.
FloatVector
Divides this vector by a second input vector
 under the control of a mask.
div(Vector<Integer>)
- Method in class jdk.incubator.vector.
IntVector
Divides this vector by a second input vector.
div(Vector<Integer>, VectorMask<Integer>)
- Method in class jdk.incubator.vector.
IntVector
Divides this vector by a second input vector
 under the control of a mask.
div(Vector<Long>)
- Method in class jdk.incubator.vector.
LongVector
Divides this vector by a second input vector.
div(Vector<Long>, VectorMask<Long>)
- Method in class jdk.incubator.vector.
LongVector
Divides this vector by a second input vector
 under the control of a mask.
div(Vector<Short>)
- Method in class jdk.incubator.vector.
ShortVector
Divides this vector by a second input vector.
div(Vector<Short>, VectorMask<Short>)
- Method in class jdk.incubator.vector.
ShortVector
Divides this vector by a second input vector
 under the control of a mask.
DIV
- Static variable in class javax.management.
Query
A code representing the
Query.div(javax.management.ValueExp, javax.management.ValueExp)
expression.
DIV
- Static variable in class javax.swing.text.html.
HTML.Tag
Tag <div>
DIV
- Static variable in class jdk.incubator.vector.
VectorOperators
Produce
a/b
.
DIVES_AKURU
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Dives Akuru".
DIVES_AKURU
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Dives Akuru" Unicode
 character block.
divide(BigDecimal)
- Method in class java.math.
BigDecimal
Returns a
BigDecimal
whose value is
(this /
 divisor)
, and whose preferred scale is
(this.scale() -
 divisor.scale())
; if the exact quotient cannot be
 represented (because it has a non-terminating decimal
 expansion) an
ArithmeticException
is thrown.
divide(BigDecimal, int)
- Method in class java.math.
BigDecimal
Deprecated.
The method
BigDecimal.divide(BigDecimal, RoundingMode)
should be used in preference to this legacy method.
divide(BigDecimal, int, int)
- Method in class java.math.
BigDecimal
Deprecated.
The method
BigDecimal.divide(BigDecimal, int, RoundingMode)
should be used in preference to this legacy method.
divide(BigDecimal, int, RoundingMode)
- Method in class java.math.
BigDecimal
Returns a
BigDecimal
whose value is
(this /
 divisor)
, and whose scale is as specified.
divide(BigDecimal, MathContext)
- Method in class java.math.
BigDecimal
Returns a
BigDecimal
whose value is
(this /
 divisor)
, with rounding according to the context settings.
divide(BigDecimal, RoundingMode)
- Method in class java.math.
BigDecimal
Returns a
BigDecimal
whose value is
(this /
 divisor)
, and whose scale is
this.scale()
.
divide(BigInteger)
- Method in class java.math.
BigInteger
Returns a BigInteger whose value is
(this / val)
.
DIVIDE
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
BinaryTree
representing
 division
/
.
DIVIDE_ASSIGNMENT
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
CompoundAssignmentTree
representing
 division assignment
/=
.
divideAndRemainder(BigDecimal)
- Method in class java.math.
BigDecimal
Returns a two-element
BigDecimal
array containing the
 result of
divideToIntegralValue
followed by the result of
remainder
on the two operands.
divideAndRemainder(BigDecimal, MathContext)
- Method in class java.math.
BigDecimal
Returns a two-element
BigDecimal
array containing the
 result of
divideToIntegralValue
followed by the result of
remainder
on the two operands calculated with rounding
 according to the context settings.
divideAndRemainder(BigInteger)
- Method in class java.math.
BigInteger
Returns an array of two BigIntegers containing
(this / val)
followed by
(this % val)
.
dividedBy(long)
- Method in class java.time.
Duration
Returns a copy of this duration divided by the specified value.
dividedBy(Duration)
- Method in class java.time.
Duration
Returns number of whole times a specified Duration occurs within this Duration.
divideExact(int, int)
- Static method in class java.lang.
Math
Returns the quotient of the arguments, throwing an exception if the
 result overflows an
int
.
divideExact(int, int)
- Static method in class java.lang.
StrictMath
Returns the quotient of the arguments, throwing an exception if the
 result overflows an
int
.
divideExact(long, long)
- Static method in class java.lang.
Math
Returns the quotient of the arguments, throwing an exception if the
 result overflows a
long
.
divideExact(long, long)
- Static method in class java.lang.
StrictMath
Returns the quotient of the arguments, throwing an exception if the
 result overflows a
long
.
divider
- Variable in class javax.swing.plaf.basic.
BasicSplitPaneUI
Instance of the divider for this JSplitPane.
DIVIDER
- Static variable in class javax.swing.
JSplitPane
Used to add a
Component
that will represent the divider.
DIVIDER_LOCATION_PROPERTY
- Static variable in class javax.swing.
JSplitPane
Bound property for the dividerLocation.
DIVIDER_SIZE_PROPERTY
- Static variable in class javax.swing.
JSplitPane
Bound property name for border.
DividerLayout()
- Constructor for class javax.swing.plaf.basic.
BasicSplitPaneDivider.DividerLayout
Constructs a
DividerLayout
.
dividerResizeToggleKey
- Variable in class javax.swing.plaf.basic.
BasicSplitPaneUI
Deprecated.
As of Java 2 platform v1.3.
dividerSize
- Variable in class javax.swing.
JSplitPane
Size of the divider.
dividerSize
- Variable in class javax.swing.plaf.basic.
BasicSplitPaneDivider
Size of the divider.
dividerSize
- Variable in class javax.swing.plaf.basic.
BasicSplitPaneUI
The size of the divider while the dragging session is valid.
divideToIntegralValue(BigDecimal)
- Method in class java.math.
BigDecimal
Returns a
BigDecimal
whose value is the integer part
 of the quotient
(this / divisor)
rounded down.
divideToIntegralValue(BigDecimal, MathContext)
- Method in class java.math.
BigDecimal
Returns a
BigDecimal
whose value is the integer part
 of
(this / divisor)
.
divideUnsigned(int, int)
- Static method in class java.lang.
Integer
Returns the unsigned quotient of dividing the first argument by
 the second where each argument and the result is interpreted as
 an unsigned value.
divideUnsigned(long, long)
- Static method in class java.lang.
Long
Returns the unsigned quotient of dividing the first argument by
 the second where each argument and the result is interpreted as
 an unsigned value.
divisionType
- Variable in class javax.sound.midi.
MidiFileFormat
The division type of the MIDI file.
divisionType
- Variable in class javax.sound.midi.
Sequence
The timing division type of the sequence.
DL
- Static variable in class javax.swing.text.html.
HTML.Tag
Tag <dl>
DnDConstants
- Class in
java.awt.dnd
This class contains constant values representing
 the type of action(s) to be performed by a Drag and Drop operation.
DNS_URL
- Static variable in interface javax.naming.
Context
Constant that holds the name of the environment property
 for specifying the DNS host and domain names to use for the
 JNDI URL context (for example, "dns://somehost/wiz.com").
DO_NOTHING_ON_CLOSE
- Static variable in interface javax.swing.
WindowConstants
The do-nothing default window close operation.
DO_WHILE_LOOP
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
DoWhileLoopTree
.
doAccessibleAction(int)
- Method in class java.awt.
Button.AccessibleAWTButton
Perform the specified Action on the object
doAccessibleAction(int)
- Method in class java.awt.
Checkbox.AccessibleAWTCheckbox
Perform the specified Action on the object
doAccessibleAction(int)
- Method in class java.awt.
CheckboxMenuItem.AccessibleAWTCheckboxMenuItem
Perform the specified Action on the object
doAccessibleAction(int)
- Method in class java.awt.
Choice.AccessibleAWTChoice
Perform the specified Action on the object
doAccessibleAction(int)
- Method in class java.awt.
MenuItem.AccessibleAWTMenuItem
Perform the specified Action on the object
doAccessibleAction(int)
- Method in interface javax.accessibility.
AccessibleAction
Performs the specified action on the object.
doAccessibleAction(int)
- Method in class javax.accessibility.
AccessibleHyperlink
Performs the specified action on the object.
doAccessibleAction(int)
- Method in class javax.swing.
AbstractButton.AccessibleAbstractButton
Perform the specified Action on the object
doAccessibleAction(int)
- Method in class javax.swing.
JComboBox.AccessibleJComboBox
Perform the specified Action on the object
doAccessibleAction(int)
- Method in class javax.swing.
JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink
Perform the specified Action on the object
doAccessibleAction(int)
- Method in class javax.swing.
JList.AccessibleJList.AccessibleJListChild
Performs the specified action on the object.
doAccessibleAction(int)
- Method in class javax.swing.
JSlider.AccessibleJSlider
Performs the specified Action on the object
doAccessibleAction(int)
- Method in class javax.swing.
JSpinner.AccessibleJSpinner
Performs the specified Action on the object
doAccessibleAction(int)
- Method in class javax.swing.
JTree.AccessibleJTree.AccessibleJTreeNode
Perform the specified Action on the tree node.
doAccessibleAction(int)
- Method in class javax.swing.text.
JTextComponent.AccessibleJTextComponent
Performs the specified Action on the object
doAs(Subject, PrivilegedAction<T>)
- Static method in class javax.security.auth.
Subject
Deprecated, for removal: This API element is subject to removal in a future version.
This method depends on
AccessControlContext
which, in conjunction with
the Security Manager
, is deprecated
       and subject to removal in a future release. However, performing
       work as a Subject is useful independent of the Security Manager.
       Thus, a replacement API named
Subject.callAs(javax.security.auth.Subject, java.util.concurrent.Callable<T>)
has been added
       which can be used to perform the same work.
doAs(Subject, PrivilegedExceptionAction<T>)
- Static method in class javax.security.auth.
Subject
Deprecated, for removal: This API element is subject to removal in a future version.
This method depends on
AccessControlContext
which, in conjunction with
the Security Manager
, is deprecated
       and subject to removal in a future release. However, performing
       work as a Subject is useful independent of the Security Manager.
       Thus, a replacement API named
Subject.callAs(javax.security.auth.Subject, java.util.concurrent.Callable<T>)
has been added
       which can be used to perform the same work.
doAsPrivileged(Subject, PrivilegedAction<T>, AccessControlContext)
- Static method in class javax.security.auth.
Subject
Deprecated, for removal: This API element is subject to removal in a future version.
This method is only useful in conjunction with
the Security Manager
, which is
       deprecated and subject to removal in a future release.
       Consequently, this method is also deprecated and subject to
       removal. There is no replacement for the Security Manager or this
       method.
doAsPrivileged(Subject, PrivilegedExceptionAction<T>, AccessControlContext)
- Static method in class javax.security.auth.
Subject
Deprecated, for removal: This API element is subject to removal in a future version.
This method is only useful in conjunction with
the Security Manager
, which is
       deprecated and subject to removal in a future release.
       Consequently, this method is also deprecated and subject to
       removal. There is no replacement for the Security Manager or this
       method.
Doc
- Interface in
javax.print
Interface
Doc
specifies the interface for an object that supplies one
 piece of print data for a Print Job.
DOC_COMMENT
- Enum constant in enum class com.sun.source.doctree.
DocTree.Kind
Used for instances of
DocCommentTree
representing a complete doc comment.
DOC_ROOT
- Enum constant in enum class com.sun.source.doctree.
DocTree.Kind
Used for instances of
DocRootTree
representing an
@docRoot
tag.
DOC_TYPE
- Enum constant in enum class com.sun.source.doctree.
DocTree.Kind
Used for instances of
DocTypeTree
representing an HTML DocType declaration.
DocAttribute
- Interface in
javax.print.attribute
Interface
DocAttribute
is a tagging interface which a printing
 attribute class implements to indicate the attribute denotes a setting for a
 doc.
Doc Attributes
- Search tag in package javax.print.attribute.standard
Section
DocAttributeSet
- Interface in
javax.print.attribute
Interface
DocAttributeSet
specifies the interface for a set of doc
 attributes, i.e. printing attributes that implement interface
DocAttribute
.
DocCommentTree
- Interface in
com.sun.source.doctree
The top-level representation of a documentation comment.
DocFlavor
- Class in
javax.print
Class
DocFlavor
encapsulates an object that specifies the format in
 which print data is supplied to a
DocPrintJob
.
DocFlavor(String, String)
- Constructor for class javax.print.
DocFlavor
Constructs a new doc flavor object from the given MIME type and
 representation class name.
DocFlavor.BYTE_ARRAY
- Class in
javax.print
Class
DocFlavor.BYTE_ARRAY
provides predefined static constant
DocFlavor
objects for example doc flavors using a byte array
 (
byte[]
) as the print data representation class.
DocFlavor.CHAR_ARRAY
- Class in
javax.print
Class
DocFlavor.CHAR_ARRAY
provides predefined static constant
DocFlavor
objects for example doc flavors using a character array
 (
char[]
) as the print data representation class.
DocFlavor.INPUT_STREAM
- Class in
javax.print
Class
DocFlavor.INPUT_STREAM
provides predefined static constant
DocFlavor
objects for example doc flavors using a byte stream
 (
java.io.InputStream
) as the print data
 representation class.
DocFlavor.READER
- Class in
javax.print
Class
DocFlavor.READER
provides predefined static constant
DocFlavor
objects for example doc flavors using a character
 stream (
java.io.Reader
) as the print data
 representation class.
DocFlavor.SERVICE_FORMATTED
- Class in
javax.print
Class
DocFlavor.SERVICE_FORMATTED
provides predefined static
 constant
DocFlavor
objects for example doc flavors for service
 formatted print data.
DocFlavor.STRING
- Class in
javax.print
Class
DocFlavor.STRING
provides predefined static constant
DocFlavor
objects for example doc flavors using a string
 (
java.lang.String
) as the print data representation class.
DocFlavor.URL
- Class in
javax.print
Class
DocFlavor.URL
provides predefined static constant
DocFlavor
objects.
dockingBorderColor
- Variable in class javax.swing.plaf.basic.
BasicToolBarUI
The color of the docking border.
dockingColor
- Variable in class javax.swing.plaf.basic.
BasicToolBarUI
The background color of the docking border.
dockingListener
- Variable in class javax.swing.plaf.basic.
BasicToolBarUI
The instance of a
MouseInputListener
.
DockingListener(JToolBar)
- Constructor for class javax.swing.plaf.basic.
BasicToolBarUI.DockingListener
Constructs a new instance of
DockingListener
.
Doclet
- Interface in
jdk.javadoc.doclet
The user doclet must implement this interface, as described in the
package description
.
DOCLET_PATH
- Enum constant in enum class javax.tools.
DocumentationTool.Location
Location to search for doclets.
Doclet.Option
- Interface in
jdk.javadoc.doclet
An encapsulation of option name, aliases, parameters and descriptions
 as used by the Doclet.
Doclet.Option.Kind
- Enum Class in
jdk.javadoc.doclet
The kind of an option.
DocletEnvironment
- Interface in
jdk.javadoc.doclet
Represents the operating environment of a single invocation
 of the doclet.
DocletEnvironment.ModuleMode
- Enum Class in
jdk.javadoc.doclet
The mode specifying the level of detail of module documentation.
doClick()
- Method in class javax.swing.
AbstractButton
Programmatically perform a "click".
doClick(int)
- Method in class javax.swing.
AbstractButton
Programmatically perform a "click".
doClick(int)
- Method in class javax.swing.
JMenu
Programmatically performs a "click".
doClick(MenuSelectionManager)
- Method in class javax.swing.plaf.basic.
BasicMenuItemUI
Call this method when a menu item is to be activated.
DocPrintJob
- Interface in
javax.print
This interface represents a print job that can print a specified document
 with a set of job attributes.
DocRootTree
- Interface in
com.sun.source.doctree
A tree node for an
@docRoot
inline tag.
DocSourcePositions
- Interface in
com.sun.source.util
Provides methods to obtain the position of a DocTree within a javadoc comment.
DocTree
- Interface in
com.sun.source.doctree
Common interface for all nodes in a documentation syntax tree.
DocTree.Kind
- Enum Class in
com.sun.source.doctree
Enumerates all kinds of trees.
DocTreeFactory
- Interface in
com.sun.source.util
Factory for creating
DocTree
nodes.
DocTreePath
- Class in
com.sun.source.util
A path of tree nodes, typically used to represent the sequence of ancestor
 nodes of a tree node up to the top-level
DocCommentTree
node.
DocTreePath(DocTreePath, DocTree)
- Constructor for class com.sun.source.util.
DocTreePath
Creates a
DocTreePath
for a child node.
DocTreePath(TreePath, DocCommentTree)
- Constructor for class com.sun.source.util.
DocTreePath
Creates a
DocTreePath
for a root node.
DocTreePathScanner<R,
P>
- Class in
com.sun.source.util
A DocTreeVisitor that visits all the child tree nodes, and provides
 support for maintaining a path for the parent nodes.
DocTreePathScanner()
- Constructor for class com.sun.source.util.
DocTreePathScanner
Constructs a
DocTreePathScanner
.
DocTrees
- Class in
com.sun.source.util
Provides access to syntax trees for doc comments.
DocTrees()
- Constructor for class com.sun.source.util.
DocTrees
Constructor for subclasses to call.
DocTreeScanner<R,
P>
- Class in
com.sun.source.util
A DocTreeVisitor that visits all the child tree nodes.
DocTreeScanner()
- Constructor for class com.sun.source.util.
DocTreeScanner
Constructs a
DocTreeScanner
.
DocTreeVisitor<R,
P>
- Interface in
com.sun.source.doctree
A visitor of trees, in the style of the visitor design pattern.
DOCTYPE_PUBLIC
- Static variable in class javax.xml.transform.
OutputKeys
doctype-public =
string
.
DOCTYPE_SYSTEM
- Static variable in class javax.xml.transform.
OutputKeys
doctype-system =
string
.
DocTypeTree
- Interface in
com.sun.source.doctree
A tree node for a
doctype
declaration.
Document
- Interface in
javax.swing.text
The
Document
is a container for text that serves
 as the model for swing text components.
Document
- Interface in
org.w3c.dom
The
Document
interface represents the entire HTML or XML
 document.
DOCUMENT
- Static variable in class com.sun.java.accessibility.util.
EventID
Maps to Swing Document support (i.e., DocumentListener and
 DocumentEvent)
DOCUMENT_ACCESS_ERROR
- Static variable in class javax.print.attribute.standard.
JobStateReason
The printer could not access one or more documents passed by reference
 (i.e., the print data representation object is a
URL
).
DOCUMENT_FORMAT_ERROR
- Static variable in class javax.print.attribute.standard.
JobStateReason
The job was aborted by the system because the printer encountered an
 error in the document data while processing it.
DOCUMENT_FRAGMENT_NODE
- Static variable in interface org.w3c.dom.
Node
The node is a
DocumentFragment
.
DOCUMENT_MODAL
- Enum constant in enum class java.awt.
Dialog.ModalityType
A
DOCUMENT_MODAL
dialog blocks input to all top-level windows
 from the same document except those from its own child hierarchy.
DOCUMENT_NODE
- Static variable in interface org.w3c.dom.
Node
The node is a
Document
.
DOCUMENT_POSITION_CONTAINED_BY
- Static variable in interface org.w3c.dom.
Node
The node is contained by the reference node.
DOCUMENT_POSITION_CONTAINS
- Static variable in interface org.w3c.dom.
Node
The node contains the reference node.
DOCUMENT_POSITION_DISCONNECTED
- Static variable in interface org.w3c.dom.
Node
The two nodes are disconnected.
DOCUMENT_POSITION_FOLLOWING
- Static variable in interface org.w3c.dom.
Node
The node follows the reference node.
DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC
- Static variable in interface org.w3c.dom.
Node
The determination of preceding versus following is
 implementation-specific.
DOCUMENT_POSITION_PRECEDING
- Static variable in interface org.w3c.dom.
Node
The second node precedes the reference node.
DOCUMENT_TYPE_NODE
- Static variable in interface org.w3c.dom.
Node
The node is a
DocumentType
.
documentation(String, int, boolean)
- Method in class jdk.jshell.
SourceCodeAnalysis
Compute documentation for the given user's input.
DOCUMENTATION_OUTPUT
- Enum constant in enum class javax.tools.
DocumentationTool.Location
Location of new documentation files.
Documentation Comment Specification for the Standard Doclet
- Search tag in class jdk.javadoc.doclet.StandardDoclet
External Specification
Documentation Comment Specification for the Standard Doclet
- Search tag in module jdk.javadoc
External Specification
Documentation Comment Specification for the Standard Doclet
- Search tag in package com.sun.source.doctree
External Specification
DocumentationTool
- Interface in
javax.tools
Interface to invoke Java programming language documentation tools from
 programs.
DocumentationTool.DocumentationTask
- Interface in
javax.tools
Interface representing a future for a documentation task.
DocumentationTool.Location
- Enum Class in
javax.tools
Locations specific to
DocumentationTool
.
documentBaseKey
- Static variable in class javax.swing.plaf.basic.
BasicHTML
Key stored as a client property to indicate the base that relative
 references are resolved against.
DocumentBuilder
- Class in
javax.xml.parsers
Defines the API to obtain DOM Document instances from an XML
 document.
DocumentBuilder()
- Constructor for class javax.xml.parsers.
DocumentBuilder
Protected constructor
DocumentBuilderFactory
- Class in
javax.xml.parsers
Defines a factory API that enables applications to obtain a
 parser that produces DOM object trees from XML documents.
DocumentBuilderFactory()
- Constructor for class javax.xml.parsers.
DocumentBuilderFactory
Protected constructor to prevent instantiation.
DocumentCSS
- Interface in
org.w3c.dom.css
This interface represents a document with a CSS view.
Documented
- Annotation Interface in
java.lang.annotation
If the annotation
@Documented
is present on the declaration
 of an annotation interface
A
, then any
@A
annotation on
 an element is considered part of the element's public contract.
DocumentEvent
- Interface in
javax.swing.event
Interface for document change notifications.
DocumentEvent
- Interface in
org.w3c.dom.events
The
DocumentEvent
interface provides a mechanism by which the
 user can create an Event of a type supported by the implementation.
DocumentEvent.ElementChange
- Interface in
javax.swing.event
Describes changes made to a specific element.
DocumentEvent.EventType
- Class in
javax.swing.event
Enumeration for document event types
DocumentFilter
- Class in
javax.swing.text
DocumentFilter
, as the name implies, is a filter for the
Document
mutation methods.
DocumentFilter()
- Constructor for class javax.swing.text.
DocumentFilter
Constructs a
DocumentFilter
.
DocumentFilter.FilterBypass
- Class in
javax.swing.text
Used as a way to circumvent calling back into the Document to
 change it.
DocumentFragment
- Interface in
org.w3c.dom
DocumentFragment
is a "lightweight" or "minimal"
Document
object.
DocumentHandler
- Interface in
org.xml.sax
Deprecated.
This interface has been replaced by the SAX2
ContentHandler
interface, which includes Namespace support.
DocumentListener
- Interface in
javax.swing.event
Interface for an observer to register to receive notifications
 of changes to a text document.
DocumentName
- Class in
javax.print.attribute.standard
Class
DocumentName
is a printing attribute class, a text attribute,
 that specifies the name of a document.
DocumentName(String, Locale)
- Constructor for class javax.print.attribute.standard.
DocumentName
Constructs a new document name attribute with the given document name and
 locale.
DocumentParser
- Class in
javax.swing.text.html.parser
A Parser for HTML Documents (actually, you can specify a DTD, but
 you should really only use this class with the html dtd in swing).
DocumentParser(DTD)
- Constructor for class javax.swing.text.html.parser.
DocumentParser
Creates document parser with the specified
dtd
.
DocumentRange
- Interface in
org.w3c.dom.ranges
See also the
Document Object Model (DOM) Level 2 Traversal and Range Specification
.
DocumentStyle
- Interface in
org.w3c.dom.stylesheets
The
DocumentStyle
interface provides a mechanism by which the
 style sheets embedded in a document can be retrieved.
DocumentTraversal
- Interface in
org.w3c.dom.traversal
DocumentTraversal
contains methods that create
NodeIterators
and
TreeWalkers
to traverse a
 node and its children in document order (depth first, pre-order
 traversal, which is equivalent to the order in which the start tags occur
 in the text representation of the document).
DocumentType
- Interface in
org.w3c.dom
Each
Document
has a
doctype
attribute whose value
 is either
null
or a
DocumentType
object.
Document Type Specification
- Search tag in package javax.print
Section
DocumentView
- Interface in
org.w3c.dom.views
The
DocumentView
interface is implemented by
Document
objects in DOM implementations supporting DOM
 Views.
doDefaultCloseAction()
- Method in class javax.swing.
JInternalFrame
Fires an
INTERNAL_FRAME_CLOSING
event
 and then performs the action specified by
 the internal frame's default close operation.
doesMaxRowSizeIncludeBlobs()
- Method in interface java.sql.
DatabaseMetaData
Retrieves whether the return value for the method
getMaxRowSize
includes the SQL data types
LONGVARCHAR
and
LONGVARBINARY
.
doFilter(HttpExchange)
- Method in class com.sun.net.httpserver.
Filter.Chain
Calls the next filter in the chain, or else the users exchange
 handler, if this is the final filter in the chain.
doFilter(HttpExchange, Filter.Chain)
- Method in class com.sun.net.httpserver.
Filter
Asks this filter to pre/post-process the given exchange.
doFinal()
- Method in class javax.crypto.
Cipher
Finishes a multiple-part encryption or decryption operation, depending
 on how this
Cipher
object was initialized.
doFinal()
- Method in class javax.crypto.
Mac
Finishes the MAC operation.
doFinal(byte[])
- Method in class javax.crypto.
Cipher
Encrypts or decrypts data in a single-part operation, or finishes a
 multiple-part operation.
doFinal(byte[])
- Method in class javax.crypto.
Mac
Processes the given array of bytes and finishes the MAC operation.
doFinal(byte[], int)
- Method in class javax.crypto.
Cipher
Finishes a multiple-part encryption or decryption operation, depending
 on how this
Cipher
object was initialized.
doFinal(byte[], int)
- Method in class javax.crypto.
Mac
Finishes the MAC operation.
doFinal(byte[], int, int)
- Method in class javax.crypto.
Cipher
Encrypts or decrypts data in a single-part operation, or finishes a
 multiple-part operation.
doFinal(byte[], int, int, byte[])
- Method in class javax.crypto.
Cipher
Encrypts or decrypts data in a single-part operation, or finishes a
 multiple-part operation.
doFinal(byte[], int, int, byte[], int)
- Method in class javax.crypto.
Cipher
Encrypts or decrypts data in a single-part operation, or finishes a
 multiple-part operation.
doFinal(ByteBuffer, ByteBuffer)
- Method in class javax.crypto.
Cipher
Encrypts or decrypts data in a single-part operation, or finishes a
 multiple-part operation.
DOGRA
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Dogra".
DOGRA
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Dogra" Unicode
 character block.
doInBackground()
- Method in class javax.swing.
SwingWorker
Computes a result, or throws an exception if unable to do so.
doInput
- Variable in class java.net.
URLConnection
This variable is set by the
setDoInput
method.
doLayout()
- Method in class java.awt.
Component
Prompts the layout manager to lay out this component.
doLayout()
- Method in class java.awt.
Container
Causes this container to lay out its components.
doLayout()
- Method in class java.awt.
ScrollPane
Lays out this container by resizing its child to its preferred size.
doLayout()
- Method in class javax.swing.
JLayer
Delegates its functionality to the
LayerUI.doLayout(JLayer)
method,
 if
LayerUI
is set.
doLayout()
- Method in class javax.swing.
JTable
Causes this table to lay out its rows and columns.
doLayout()
- Method in class javax.swing.tree.
DefaultTreeCellEditor.EditorContainer
Lays out this
Container
.
doLayout(JLayer<? extends V>)
- Method in class javax.swing.plaf.
LayerUI
Causes the passed instance of
JLayer
to lay out its components.
doLookup(String)
- Static method in class javax.naming.
InitialContext
A static method to retrieve the named object.
doLookup(Name)
- Static method in class javax.naming.
InitialContext
A static method to retrieve the named object.
DOM_OBJECT_MODEL
- Static variable in class javax.xml.xpath.
XPathConstants
The URI for the DOM object model, "http://java.sun.com/jaxp/xpath/dom".
DomainCombiner
- Interface in
java.security
Deprecated, for removal: This API element is subject to removal in a future version.
This class is only useful in conjunction with
the Security Manager
, which is deprecated
       and subject to removal in a future release. Consequently, this class
       is also deprecated and subject to removal. There is no replacement for
       the Security Manager or this class.
DomainLoadStoreParameter
- Class in
java.security
Configuration data that specifies the keystores in a keystore domain.
DomainLoadStoreParameter(URI, Map<String, KeyStore.ProtectionParameter>)
- Constructor for class java.security.
DomainLoadStoreParameter
Constructs a
DomainLoadStoreParameter
for a keystore domain with
 the parameters used to protect keystore data.
domainMatches(String, String)
- Static method in class java.net.
HttpCookie
The utility method to check whether a host name is in a domain or not.
domainType()
- Method in interface jdk.incubator.vector.
VectorOperators.Conversion
The domain of this conversion, a primitive type.
DOMConfiguration
- Interface in
org.w3c.dom
The
DOMConfiguration
interface represents the configuration
 of a document and maintains a table of recognized parameters.
DOMCryptoContext
- Class in
javax.xml.crypto.dom
This class provides a DOM-specific implementation of the
XMLCryptoContext
interface.
DOMCryptoContext()
- Constructor for class javax.xml.crypto.dom.
DOMCryptoContext
Default constructor.
DOMError
- Interface in
org.w3c.dom
DOMError
is an interface that describes an error.
DOMErrorHandler
- Interface in
org.w3c.dom
DOMErrorHandler
is a callback interface that the DOM
 implementation can call when reporting errors that happens while
 processing XML data, or when doing some other processing (e.g. validating
 a document).
DOMException
- Exception Class in
org.w3c.dom
DOM operations only raise exceptions in "exceptional" circumstances, i.e.,
 when an operation is impossible to perform (either for logical reasons,
 because data is lost, or because the implementation has become unstable).
DOMException(short, String)
- Constructor for exception class org.w3c.dom.
DOMException
DOMImplementation
- Interface in
org.w3c.dom
The
DOMImplementation
interface provides a number of methods
 for performing operations that are independent of any particular instance
 of the document object model.
DOMImplementationCSS
- Interface in
org.w3c.dom.css
This interface allows the DOM user to create a
CSSStyleSheet
outside the context of a document.
DOMImplementationList
- Interface in
org.w3c.dom
The
DOMImplementationList
interface provides the abstraction
 of an ordered collection of DOM implementations, without defining or
 constraining how this collection is implemented.
DOMImplementationLS
- Interface in
org.w3c.dom.ls
DOMImplementationLS
contains the factory methods for creating
 Load and Save objects.
DOMImplementationRegistry
- Class in
org.w3c.dom.bootstrap
A factory that enables applications to obtain instances of
DOMImplementation
.
DOMImplementationSource
- Interface in
org.w3c.dom
This interface permits a DOM implementer to supply one or more
 implementations, based upon requested features and versions, as specified
 in
DOM
 Features
.
DOMINO_TILES
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Domino Tiles" Unicode character block.
DOMLocator
- Interface in
javax.xml.transform.dom
Indicates the position of a node in a source DOM, intended
 primarily for error reporting.
DOMLocator
- Interface in
org.w3c.dom
DOMLocator
is an interface that describes a location (e.g.
DOM Mechanism Requirements
- Search tag in package javax.xml.crypto.dsig
Section
DOMResult
- Class in
javax.xml.transform.dom
Acts as a holder for a transformation result tree
 in the form of a Document Object Model (DOM) tree.
DOMResult()
- Constructor for class javax.xml.transform.dom.
DOMResult
Zero-argument default constructor.
DOMResult(Node)
- Constructor for class javax.xml.transform.dom.
DOMResult
Use a DOM node to create a new output target.
DOMResult(Node, String)
- Constructor for class javax.xml.transform.dom.
DOMResult
Use a DOM node to create a new output target with the specified System ID.
DOMResult(Node, Node)
- Constructor for class javax.xml.transform.dom.
DOMResult
Use a DOM node to create a new output target specifying
 the child node where the result nodes should be inserted before.
DOMResult(Node, Node, String)
- Constructor for class javax.xml.transform.dom.
DOMResult
Use a DOM node to create a new output target specifying the child
 node where the result nodes should be inserted before and
 the specified System ID.
DOMSignContext
- Class in
javax.xml.crypto.dsig.dom
A DOM-specific
XMLSignContext
.
DOMSignContext(Key, Node)
- Constructor for class javax.xml.crypto.dsig.dom.
DOMSignContext
Creates a
DOMSignContext
with the specified signing key
 and parent node.
DOMSignContext(Key, Node, Node)
- Constructor for class javax.xml.crypto.dsig.dom.
DOMSignContext
Creates a
DOMSignContext
with the specified signing key,
 parent and next sibling nodes.
DOMSignContext(KeySelector, Node)
- Constructor for class javax.xml.crypto.dsig.dom.
DOMSignContext
Creates a
DOMSignContext
with the specified key selector
 and parent node.
DOMSignContext(KeySelector, Node, Node)
- Constructor for class javax.xml.crypto.dsig.dom.
DOMSignContext
Creates a
DOMSignContext
with the specified key selector,
 parent and next sibling nodes.
DOMSource
- Class in
javax.xml.transform.dom
Acts as a holder for a transformation Source tree in the
 form of a Document Object Model (DOM) tree.
DOMSource()
- Constructor for class javax.xml.transform.dom.
DOMSource
Zero-argument default constructor.
DOMSource(Node)
- Constructor for class javax.xml.transform.dom.
DOMSource
Create a new input source with a DOM node.
DOMSource(Node, String)
- Constructor for class javax.xml.transform.dom.
DOMSource
Create a new input source with a DOM node, and with the
 system ID also passed in as the base URI.
DOMSTRING_SIZE_ERR
- Static variable in exception class org.w3c.dom.
DOMException
If the specified range of text does not fit into a
DOMString
.
DOMStringList
- Interface in
org.w3c.dom
The
DOMStringList
interface provides the abstraction of an
 ordered collection of
DOMString
values, without defining or
 constraining how this collection is implemented.
DOMStructure
- Class in
javax.xml.crypto.dom
A DOM-specific
XMLStructure
.
DOMStructure(Node)
- Constructor for class javax.xml.crypto.dom.
DOMStructure
Creates a
DOMStructure
containing the specified node.
DOMURIReference
- Interface in
javax.xml.crypto.dom
A DOM-specific
URIReference
.
DOMValidateContext
- Class in
javax.xml.crypto.dsig.dom
A DOM-specific
XMLValidateContext
.
DOMValidateContext(Key, Node)
- Constructor for class javax.xml.crypto.dsig.dom.
DOMValidateContext
Creates a
DOMValidateContext
containing the specified key
 and node.
DOMValidateContext(KeySelector, Node)
- Constructor for class javax.xml.crypto.dsig.dom.
DOMValidateContext
Creates a
DOMValidateContext
containing the specified key
 selector and node.
Don't extend visual look and feels.
- Search tag in package javax.swing.plaf.multi
Section
done()
- Method in interface java.rmi.server.
RemoteCall
Deprecated.
no replacement
done()
- Method in class java.util.concurrent.
FutureTask
Protected method invoked when this task transitions to state
isDone
(whether normally or via cancellation).
done()
- Method in class javax.swing.
SwingWorker
Executed on the
Event Dispatch Thread
after the
doInBackground
method is finished.
done(RemoteCall)
- Method in interface java.rmi.server.
RemoteRef
Deprecated.
1.2 style stubs no longer use this method. Instead of
 using a sequence of method calls to the remote reference
 (
newCall
,
invoke
, and
done
), a
 stub uses a single method,
invoke(Remote, Method, Object[],
 int)
, on the remote reference to carry out parameter
 marshalling, remote method executing and unmarshalling of the return
 value.
DONE
- Enum constant in enum class javax.swing.
SwingWorker.StateValue
SwingWorker
is
DONE
after
doInBackground
method
 is finished.
DONE
- Static variable in class java.text.
BreakIterator
DONE is returned by previous(), next(), next(int), preceding(int)
 and following(int) when either the first or last text boundary has been
 reached.
DONE
- Static variable in interface java.text.
CharacterIterator
Constant that is returned when the iterator has reached either the end
 or the beginning of the text.
dontUseGui()
- Method in class java.beans.beancontext.
BeanContextSupport
notify this instance that it may no longer render a GUI.
dontUseGui()
- Method in interface java.beans.
Visibility
This method instructs the bean that it should not use the Gui.
DOOR_OPEN
- Static variable in class javax.print.attribute.standard.
PrinterStateReason
One or more doors on the device are open.
doOutput
- Variable in class java.net.
URLConnection
This variable is set by the
setDoOutput
method.
doPaint(Graphics2D, JComponent, int, int, Object[])
- Method in class javax.swing.plaf.nimbus.
AbstractRegionPainter
Actually performs the painting operation.
doPhase(Key, boolean)
- Method in class javax.crypto.
KeyAgreement
Executes the next phase of this key agreement with the given
 key that was received from one of the other parties involved in this key
 agreement.
doPrivileged(PrivilegedAction<T>)
- Static method in class java.security.
AccessController
Deprecated.
Performs the specified
PrivilegedAction
with privileges
 enabled.
doPrivileged(PrivilegedAction<T>, AccessControlContext)
- Static method in class java.security.
AccessController
Deprecated.
Performs the specified
PrivilegedAction
with privileges
 enabled and restricted by the specified
AccessControlContext
.
doPrivileged(PrivilegedAction<T>, AccessControlContext, Permission...)
- Static method in class java.security.
AccessController
Deprecated.
Performs the specified
PrivilegedAction
with privileges
 enabled and restricted by the specified
AccessControlContext
and with a privilege scope limited
 by specified
Permission
arguments.
doPrivileged(PrivilegedExceptionAction<T>)
- Static method in class java.security.
AccessController
Deprecated.
Performs the specified
PrivilegedExceptionAction
with
 privileges enabled.
doPrivileged(PrivilegedExceptionAction<T>, AccessControlContext)
- Static method in class java.security.
AccessController
Deprecated.
Performs the specified
PrivilegedExceptionAction
with
 privileges enabled and restricted by the specified
AccessControlContext
.
doPrivileged(PrivilegedExceptionAction<T>, AccessControlContext, Permission...)
- Static method in class java.security.
AccessController
Deprecated.
Performs the specified
PrivilegedExceptionAction
with
 privileges enabled and restricted by the specified
AccessControlContext
and with a privilege scope limited by
 specified
Permission
arguments.
doPrivilegedWithCombiner(PrivilegedAction<T>)
- Static method in class java.security.
AccessController
Deprecated.
Performs the specified
PrivilegedAction
with privileges
 enabled.
doPrivilegedWithCombiner(PrivilegedAction<T>, AccessControlContext, Permission...)
- Static method in class java.security.
AccessController
Deprecated.
Performs the specified
PrivilegedAction
with privileges
 enabled and restricted by the specified
AccessControlContext
and with a privilege scope limited
 by specified
Permission
arguments.
doPrivilegedWithCombiner(PrivilegedExceptionAction<T>)
- Static method in class java.security.
AccessController
Deprecated.
Performs the specified
PrivilegedExceptionAction
with
 privileges enabled.
doPrivilegedWithCombiner(PrivilegedExceptionAction<T>, AccessControlContext, Permission...)
- Static method in class java.security.
AccessController
Deprecated.
Performs the specified
PrivilegedExceptionAction
with
 privileges enabled and restricted by the specified
AccessControlContext
and with a privilege scope limited by
 specified
Permission
arguments.
Dos and Don'ts
- Search tag in package javax.swing.plaf.multi
Section
DosFileAttributes
- Interface in
java.nio.file.attribute
File attributes associated with a file in a file system that supports
 legacy "DOS" attributes.
DosFileAttributeView
- Interface in
java.nio.file.attribute
A file attribute view that provides a view of the legacy "DOS" file attributes.
DOTALL
- Static variable in class java.util.regex.
Pattern
Enables dotall mode.
Double
- Class in
java.lang
The
Double
class wraps a value of the primitive type
double
in an object.
Double()
- Constructor for class java.awt.geom.
Arc2D.Double
Constructs a new OPEN arc, initialized to location (0, 0),
 size (0, 0), angular extents (start = 0, extent = 0).
Double()
- Constructor for class java.awt.geom.
CubicCurve2D.Double
Constructs and initializes a CubicCurve with coordinates
 (0, 0, 0, 0, 0, 0, 0, 0).
Double()
- Constructor for class java.awt.geom.
Ellipse2D.Double
Constructs a new
Ellipse2D
, initialized to
 location (0, 0) and size (0, 0).
Double()
- Constructor for class java.awt.geom.
Line2D.Double
Constructs and initializes a Line with coordinates (0, 0) → (0, 0).
Double()
- Constructor for class java.awt.geom.
Path2D.Double
Constructs a new empty double precision
Path2D
object
 with a default winding rule of
Path2D.WIND_NON_ZERO
.
Double()
- Constructor for class java.awt.geom.
Point2D.Double
Constructs and initializes a
Point2D
with
 coordinates (0, 0).
Double()
- Constructor for class java.awt.geom.
QuadCurve2D.Double
Constructs and initializes a
QuadCurve2D
with
 coordinates (0, 0, 0, 0, 0, 0).
Double()
- Constructor for class java.awt.geom.
Rectangle2D.Double
Constructs a new
Rectangle2D
, initialized to
 location (0, 0) and size (0, 0).
Double()
- Constructor for class java.awt.geom.
RoundRectangle2D.Double
Constructs a new
RoundRectangle2D
, initialized to
 location (0.0, 0.0), size (0.0, 0.0), and corner arcs
 of radius 0.0.
Double(double)
- Constructor for class java.lang.
Double
Deprecated, for removal: This API element is subject to removal in a future version.
It is rarely appropriate to use this constructor. The static factory
Double.valueOf(double)
is generally a better choice, as it is
 likely to yield significantly better space and time performance.
Double(double, double)
- Constructor for class java.awt.geom.
Point2D.Double
Constructs and initializes a
Point2D
with the
 specified coordinates.
Double(double, double, double, double)
- Constructor for class java.awt.geom.
Ellipse2D.Double
Constructs and initializes an
Ellipse2D
from the
 specified coordinates.
Double(double, double, double, double)
- Constructor for class java.awt.geom.
Line2D.Double
Constructs and initializes a
Line2D
from the
 specified coordinates.
Double(double, double, double, double)
- Constructor for class java.awt.geom.
Rectangle2D.Double
Constructs and initializes a
Rectangle2D
from the specified
double
coordinates.
Double(double, double, double, double, double, double)
- Constructor for class java.awt.geom.
QuadCurve2D.Double
Constructs and initializes a
QuadCurve2D
from the
 specified
double
coordinates.
Double(double, double, double, double, double, double)
- Constructor for class java.awt.geom.
RoundRectangle2D.Double
Constructs and initializes a
RoundRectangle2D
from the specified
double
coordinates.
Double(double, double, double, double, double, double, double, double)
- Constructor for class java.awt.geom.
CubicCurve2D.Double
Constructs and initializes a
CubicCurve2D
from
 the specified
double
coordinates.
Double(double, double, double, double, double, double, int)
- Constructor for class java.awt.geom.
Arc2D.Double
Constructs a new arc, initialized to the specified location,
 size, angular extents, and closure type.
Double(int)
- Constructor for class java.awt.geom.
Arc2D.Double
Constructs a new arc, initialized to location (0, 0),
 size (0, 0), angular extents (start = 0, extent = 0), and
 the specified closure type.
Double(int)
- Constructor for class java.awt.geom.
Path2D.Double
Constructs a new empty double precision
Path2D
object
 with the specified winding rule to control operations that
 require the interior of the path to be defined.
Double(int, int)
- Constructor for class java.awt.geom.
Path2D.Double
Constructs a new empty double precision
Path2D
object
 with the specified winding rule and the specified initial
 capacity to store path segments.
Double(Point2D, Point2D)
- Constructor for class java.awt.geom.
Line2D.Double
Constructs and initializes a
Line2D
from the
 specified
Point2D
objects.
Double(Rectangle2D, double, double, int)
- Constructor for class java.awt.geom.
Arc2D.Double
Constructs a new arc, initialized to the specified location,
 size, angular extents, and closure type.
Double(Shape)
- Constructor for class java.awt.geom.
Path2D.Double
Constructs a new double precision
Path2D
object
 from an arbitrary
Shape
object.
Double(Shape, AffineTransform)
- Constructor for class java.awt.geom.
Path2D.Double
Constructs a new double precision
Path2D
object
 from an arbitrary
Shape
object, transformed by an
AffineTransform
object.
Double(String)
- Constructor for class java.lang.
Double
Deprecated, for removal: This API element is subject to removal in a future version.
It is rarely appropriate to use this constructor.
 Use
Double.parseDouble(String)
to convert a string to a
double
primitive, or use
Double.valueOf(String)
to convert a string to a
Double
object.
DOUBLE
- Enum constant in enum class com.sun.source.doctree.
AttributeTree.ValueKind
The attribute value is enclosed in double quotation marks.
DOUBLE
- Enum constant in enum class java.sql.
JDBCType
Identifies the generic SQL type
DOUBLE
.
DOUBLE
- Enum constant in enum class javax.lang.model.type.
TypeKind
The primitive type
double
.
DOUBLE
- Static variable in class java.sql.
Types
The constant in the Java programming language, sometimes referred
 to as a type code, that identifies the generic SQL type
DOUBLE
.
DOUBLE
- Static variable in class javax.management.openmbean.
SimpleType
The
SimpleType
instance describing values whose
 Java class name is
java.lang.Double
.
DOUBLE_LITERAL
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
LiteralTree
representing
 a floating-point literal expression of type
double
.
DoubleAccumulator
- Class in
java.util.concurrent.atomic
One or more variables that together maintain a running
double
value updated using a supplied function.
DoubleAccumulator(DoubleBinaryOperator, double)
- Constructor for class java.util.concurrent.atomic.
DoubleAccumulator
Creates a new instance using the given accumulator function
 and identity element.
DoubleAdder
- Class in
java.util.concurrent.atomic
One or more variables that together maintain an initially zero
double
sum.
DoubleAdder()
- Constructor for class java.util.concurrent.atomic.
DoubleAdder
Creates a new adder with initial sum of zero.
DoubleBinaryOperator
- Interface in
java.util.function
Represents an operation upon two
double
-valued operands and producing a
double
-valued result.
DoubleBuffer
- Class in
java.nio
A double buffer.
DoubleClickListener(JList<?>)
- Constructor for class javax.swing.plaf.basic.
BasicFileChooserUI.DoubleClickListener
Constructs a
DoubleClickListener
.
DoubleConsumer
- Interface in
java.util.function
Represents an operation that accepts a single
double
-valued argument and
 returns no result.
DoubleFunction<R>
- Interface in
java.util.function
Represents a function that accepts a double-valued argument and produces a
 result.
DoublePredicate
- Interface in
java.util.function
Represents a predicate (boolean-valued function) of one
double
-valued
 argument.
doubles()
- Method in class java.util.concurrent.
ThreadLocalRandom
Returns an effectively unlimited stream of pseudorandom
double
values, each between zero (inclusive) and one
 (exclusive).
doubles()
- Method in class java.util.
Random
Returns an effectively unlimited stream of pseudorandom
double
values, each between zero (inclusive) and one
 (exclusive).
doubles()
- Method in interface java.util.random.
RandomGenerator
Returns an effectively unlimited stream of pseudorandomly chosen
double
values.
doubles()
- Method in class java.util.
SplittableRandom
Returns an effectively unlimited stream of pseudorandom
double
values from this generator and/or one split from it; each value
 is between zero (inclusive) and one (exclusive).
doubles(double, double)
- Method in class java.util.concurrent.
ThreadLocalRandom
Returns an effectively unlimited stream of pseudorandom
double
values, each conforming to the given origin (inclusive) and bound
 (exclusive).
doubles(double, double)
- Method in class java.util.
Random
Returns an effectively unlimited stream of pseudorandom
double
values, each conforming to the given origin (inclusive) and bound
 (exclusive).
doubles(double, double)
- Method in interface java.util.random.
RandomGenerator
Returns an effectively unlimited stream of pseudorandomly chosen
double
values, where each value is between the specified origin
 (inclusive) and the specified bound (exclusive).
doubles(double, double)
- Method in class java.util.
SplittableRandom
Returns an effectively unlimited stream of pseudorandom
double
values from this generator and/or one split from it; each value
 conforms to the given origin (inclusive) and bound (exclusive).
doubles(long)
- Method in class java.util.concurrent.
ThreadLocalRandom
Returns a stream producing the given
streamSize
number of
 pseudorandom
double
values, each between zero
 (inclusive) and one (exclusive).
doubles(long)
- Method in class java.util.
Random
Returns a stream producing the given
streamSize
number of
 pseudorandom
double
values, each between zero
 (inclusive) and one (exclusive).
doubles(long)
- Method in interface java.util.random.
RandomGenerator
Returns a stream producing the given
streamSize
number of
 pseudorandomly chosen
double
values.
doubles(long)
- Method in class java.util.
SplittableRandom
Returns a stream producing the given
streamSize
number of
 pseudorandom
double
values from this generator and/or one split
 from it; each value is between zero (inclusive) and one (exclusive).
doubles(long, double, double)
- Method in class java.util.concurrent.
ThreadLocalRandom
Returns a stream producing the given
streamSize
number of
 pseudorandom
double
values, each conforming to the given origin
 (inclusive) and bound (exclusive).
doubles(long, double, double)
- Method in class java.util.
Random
Returns a stream producing the given
streamSize
number of
 pseudorandom
double
values, each conforming to the given origin
 (inclusive) and bound (exclusive).
doubles(long, double, double)
- Method in interface java.util.random.
RandomGenerator
Returns a stream producing the given
streamSize
number of
 pseudorandomly chosen
double
values, where each value is
 between the specified origin (inclusive) and the specified bound
 (exclusive).
doubles(long, double, double)
- Method in class java.util.
SplittableRandom
Returns a stream producing the given
streamSize
number of
 pseudorandom
double
values from this generator and/or one split
 from it; each value conforms to the given origin (inclusive) and bound
 (exclusive).
doubleStream(Supplier<? extends Spliterator.OfDouble>, int, boolean)
- Static method in class java.util.stream.
StreamSupport
Creates a new sequential or parallel
DoubleStream
from a
Supplier
of
Spliterator.OfDouble
.
doubleStream(Spliterator.OfDouble, boolean)
- Static method in class java.util.stream.
StreamSupport
Creates a new sequential or parallel
DoubleStream
from a
Spliterator.OfDouble
.
DoubleStream
- Interface in
java.util.stream
A sequence of primitive double-valued elements supporting sequential and parallel
 aggregate operations.
DoubleStream.Builder
- Interface in
java.util.stream
A mutable builder for a
DoubleStream
.
DoubleStream.DoubleMapMultiConsumer
- Interface in
java.util.stream
Represents an operation that accepts a
double
-valued argument
 and a DoubleConsumer, and returns no result.
DoubleSummaryStatistics
- Class in
java.util
A state object for collecting statistics such as count, min, max, sum, and
 average.
DoubleSummaryStatistics()
- Constructor for class java.util.
DoubleSummaryStatistics
Constructs an empty instance with zero count, zero sum,
Double.POSITIVE_INFINITY
min,
Double.NEGATIVE_INFINITY
max and zero average.
DoubleSummaryStatistics(long, double, double, double)
- Constructor for class java.util.
DoubleSummaryStatistics
Constructs a non-empty instance with the specified
count
,
min
,
max
, and
sum
.
DoubleSupplier
- Interface in
java.util.function
Represents a supplier of
double
-valued results.
DoubleToIntFunction
- Interface in
java.util.function
Represents a function that accepts a double-valued argument and produces an
 int-valued result.
doubleToLongBits(double)
- Static method in class java.lang.
Double
Returns a representation of the specified floating-point value
 according to the IEEE 754 floating-point "double
 format" bit layout.
DoubleToLongFunction
- Interface in
java.util.function
Represents a function that accepts a double-valued argument and produces a
 long-valued result.
doubleToRawLongBits(double)
- Static method in class java.lang.
Double
Returns a representation of the specified floating-point value
 according to the IEEE 754 floating-point "double
 format" bit layout, preserving Not-a-Number (NaN) values.
DoubleType
- Interface in
com.sun.jdi
The type of all primitive double values accessed in
 the target VM.
DoubleUnaryOperator
- Interface in
java.util.function
Represents an operation on a single
double
-valued operand that produces
 a
double
-valued result.
doubleValue()
- Method in interface com.sun.jdi.
PrimitiveValue
Converts this value to a DoubleValue and returns the result
 as a double.
doubleValue()
- Method in class java.lang.
Byte
Returns the value of this
Byte
as a
double
after a widening primitive conversion.
doubleValue()
- Method in class java.lang.
Double
Returns the
double
value of this
Double
object.
doubleValue()
- Method in class java.lang.
Float
Returns the value of this
Float
as a
double
after a widening primitive conversion.
doubleValue()
- Method in class java.lang.
Integer
Returns the value of this
Integer
as a
double
after a widening primitive conversion.
doubleValue()
- Method in class java.lang.
Long
Returns the value of this
Long
as a
double
after a widening primitive conversion.
doubleValue()
- Method in class java.lang.
Number
Returns the value of the specified number as a
double
.
doubleValue()
- Method in class java.lang.
Short
Returns the value of this
Short
as a
double
after a widening primitive conversion.
doubleValue()
- Method in class java.math.
BigDecimal
Converts this
BigDecimal
to a
double
.
doubleValue()
- Method in class java.math.
BigInteger
Converts this BigInteger to a
double
.
doubleValue()
- Method in class java.util.concurrent.atomic.
AtomicInteger
Returns the current value of this
AtomicInteger
as a
double
after a widening primitive conversion,
 with memory effects as specified by
VarHandle.getVolatile(java.lang.Object...)
.
doubleValue()
- Method in class java.util.concurrent.atomic.
AtomicLong
Returns the current value of this
AtomicLong
as a
double
after a widening primitive conversion,
 with memory effects as specified by
VarHandle.getVolatile(java.lang.Object...)
.
doubleValue()
- Method in class java.util.concurrent.atomic.
DoubleAccumulator
Equivalent to
DoubleAccumulator.get()
.
doubleValue()
- Method in class java.util.concurrent.atomic.
DoubleAdder
Equivalent to
DoubleAdder.sum()
.
doubleValue()
- Method in class java.util.concurrent.atomic.
LongAccumulator
Returns the
current value
as a
double
after a widening primitive conversion.
doubleValue()
- Method in class java.util.concurrent.atomic.
LongAdder
Returns the
LongAdder.sum()
as a
double
after a widening
 primitive conversion.
DoubleValue
- Interface in
com.sun.jdi
Provides access to a primitive
double
value in
 the target VM.
DoubleVector
- Class in
jdk.incubator.vector
A specialized
Vector
representing an ordered immutable sequence of
double
values.
doWhileLoop(MethodHandle, MethodHandle, MethodHandle)
- Static method in class java.lang.invoke.
MethodHandles
Constructs a
do-while
loop from an initializer, a body, and a predicate.
DoWhileLoopTree
- Interface in
com.sun.source.tree
A tree node for a
do
statement.
DOWN
- Enum constant in enum class java.math.
RoundingMode
Rounding mode to round towards zero.
DOWN
- Static variable in class java.awt.
Event
Deprecated.
The Down Arrow key, a non-ASCII action key.
DOWN_CYCLE_TRAVERSAL_KEYS
- Static variable in class java.awt.
KeyboardFocusManager
The identifier for the Down Cycle focus traversal keys.
downAction
- Static variable in class javax.swing.text.
DefaultEditorKit
Name of the Action for moving the caret
 logically downward one position.
downcallHandle(FunctionDescriptor, Linker.Option...)
- Method in interface java.lang.foreign.
Linker
PREVIEW
Creates a method handle which is used to call a foreign function with the given signature.
downcallHandle(MemorySegment, FunctionDescriptor, Linker.Option...)
- Method in interface java.lang.foreign.
Linker
PREVIEW
Creates a method handle which is used to call a foreign function with the given signature and address.
downFocusCycle()
- Method in class java.awt.
KeyboardFocusManager
Moves the focus down one focus traversal cycle from the current focus
 owner, if and only if the current focus owner is a Container that is a
 focus cycle root.
downFocusCycle(Container)
- Method in class java.awt.
DefaultKeyboardFocusManager
Moves the focus down one focus traversal cycle.
downFocusCycle(Container)
- Method in class java.awt.
KeyboardFocusManager
Moves the focus down one focus traversal cycle.
downKey
- Variable in class javax.swing.plaf.basic.
BasicSplitPaneUI
Deprecated.
As of Java 2 platform v1.3.
downKey
- Variable in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Deprecated.
As of Java 2 platform v1.3.
downKey
- Variable in class javax.swing.plaf.basic.
BasicToolBarUI
Deprecated.
As of Java 2 platform v1.3.
DPCM
- Static variable in class javax.print.attribute.
ResolutionSyntax
Value to indicate units of dots per centimeter (dpcm).
DPI
- Static variable in class javax.print.attribute.
ResolutionSyntax
Value to indicate units of dots per inch (dpi).
DRAFT
- Static variable in class java.awt.
PageAttributes.PrintQualityType
The PrintQualityType instance to use for specifying a draft print
 quality.
DRAFT
- Static variable in class javax.print.attribute.standard.
PrintQuality
Lowest quality available on the printer.
DRAG_LAYER
- Static variable in class javax.swing.
JLayeredPane
Convenience object defining the Drag layer.
DragController(MouseEvent)
- Constructor for class javax.swing.plaf.basic.
BasicSplitPaneDivider.DragController
Constructs a new instance of
DragController
.
dragDividerTo(int)
- Method in class javax.swing.plaf.basic.
BasicSplitPaneDivider
Messages the BasicSplitPaneUI with dragDividerTo that this instance
 is contained in.
dragDividerTo(int)
- Method in class javax.swing.plaf.basic.
BasicSplitPaneUI
Messaged during a dragging session to move the divider to the
 passed in
location
.
dragDropEnd(DragSourceDropEvent)
- Method in class java.awt.dnd.
DragSourceAdapter
This method is invoked to signify that the Drag and Drop
 operation is complete.
dragDropEnd(DragSourceDropEvent)
- Method in class java.awt.dnd.
DragSourceContext
Calls
dragDropEnd
on the
DragSourceListener
s registered with this
DragSourceContext
and with the associated
DragSource
, and passes them the specified
DragSourceDropEvent
.
dragDropEnd(DragSourceDropEvent)
- Method in interface java.awt.dnd.
DragSourceListener
This method is invoked to signify that the Drag and Drop
 operation is complete.
dragEnter(DragSourceDragEvent)
- Method in class java.awt.dnd.
DragSourceAdapter
Called as the cursor's hotspot enters a platform-dependent drop site.
dragEnter(DragSourceDragEvent)
- Method in class java.awt.dnd.
DragSourceContext
Calls
dragEnter
on the
DragSourceListener
s registered with this
DragSourceContext
and with the associated
DragSource
, and passes them the specified
DragSourceDragEvent
.
dragEnter(DragSourceDragEvent)
- Method in interface java.awt.dnd.
DragSourceListener
Called as the cursor's hotspot enters a platform-dependent drop site.
dragEnter(DropTargetDragEvent)
- Method in class java.awt.dnd.
DropTarget
Calls
dragEnter
on the registered
DropTargetListener
and passes it
 the specified
DropTargetDragEvent
.
dragEnter(DropTargetDragEvent)
- Method in class java.awt.dnd.
DropTargetAdapter
Called while a drag operation is ongoing, when the mouse pointer enters
 the operable part of the drop site for the
DropTarget
registered with this listener.
dragEnter(DropTargetDragEvent)
- Method in interface java.awt.dnd.
DropTargetListener
Called while a drag operation is ongoing, when the mouse pointer enters
 the operable part of the drop site for the
DropTarget
registered with this listener.
dragExit(DragSourceEvent)
- Method in class java.awt.dnd.
DragSourceAdapter
Called as the cursor's hotspot exits a platform-dependent drop site.
dragExit(DragSourceEvent)
- Method in class java.awt.dnd.
DragSourceContext
Calls
dragExit
on the
DragSourceListener
s registered with this
DragSourceContext
and with the associated
DragSource
, and passes them the specified
DragSourceEvent
.
dragExit(DragSourceEvent)
- Method in interface java.awt.dnd.
DragSourceListener
Called as the cursor's hotspot exits a platform-dependent drop site.
dragExit(DropTargetEvent)
- Method in class java.awt.dnd.
DropTarget
Calls
dragExit
on the registered
DropTargetListener
and passes it
 the specified
DropTargetEvent
.
dragExit(DropTargetEvent)
- Method in class java.awt.dnd.
DropTargetAdapter
Called while a drag operation is ongoing, when the mouse pointer has
 exited the operable part of the drop site for the
DropTarget
registered with this listener.
dragExit(DropTargetEvent)
- Method in interface java.awt.dnd.
DropTargetListener
Called while a drag operation is ongoing, when the mouse pointer has
 exited the operable part of the drop site for the
DropTarget
registered with this listener.
dragFrame(JComponent, int, int)
- Method in class javax.swing.
DefaultDesktopManager
Moves the visible location of the frame being dragged
 to the location specified.
dragFrame(JComponent, int, int)
- Method in interface javax.swing.
DesktopManager
The user has moved the frame.
draggedColumn
- Variable in class javax.swing.table.
JTableHeader
The index of the column being dragged.
draggedDistance
- Variable in class javax.swing.table.
JTableHeader
The distance from its original position the column has been dragged.
dragger
- Variable in class javax.swing.plaf.basic.
BasicSplitPaneDivider
Handles mouse dragging message to do the actual dragging.
DragGestureEvent
- Class in
java.awt.dnd
A
DragGestureEvent
is passed
 to
DragGestureListener
's
 dragGestureRecognized() method
 when a particular
DragGestureRecognizer
detects that a
 platform dependent drag initiating gesture has occurred
 on the
Component
that it is tracking.
DragGestureEvent(DragGestureRecognizer, int, Point, List<? extends InputEvent>)
- Constructor for class java.awt.dnd.
DragGestureEvent
Constructs a
DragGestureEvent
object given by the
DragGestureRecognizer
instance firing this event,
 an
act
parameter representing
 the user's preferred action, an
ori
parameter
 indicating the origin of the drag, and a
List
of
 events that comprise the gesture(
evs
parameter).
dragGestureListener
- Variable in class java.awt.dnd.
DragGestureRecognizer
The
DragGestureListener
associated with this
DragGestureRecognizer
.
DragGestureListener
- Interface in
java.awt.dnd
The listener interface for receiving drag gesture events.
dragGestureRecognized(DragGestureEvent)
- Method in interface java.awt.dnd.
DragGestureListener
This method is invoked by the
DragGestureRecognizer
when the
DragGestureRecognizer
detects a platform-dependent
 drag initiating gesture.
DragGestureRecognizer
- Class in
java.awt.dnd
The
DragGestureRecognizer
is an
 abstract base class for the specification
 of a platform-dependent listener that can be associated with a particular
Component
in order to
 identify platform-dependent drag initiating gestures.
DragGestureRecognizer(DragSource)
- Constructor for class java.awt.dnd.
DragGestureRecognizer
Construct a new
DragGestureRecognizer
given the
DragSource
to be used in this
 Drag and Drop operation.
DragGestureRecognizer(DragSource, Component)
- Constructor for class java.awt.dnd.
DragGestureRecognizer
Construct a new
DragGestureRecognizer
given the
DragSource
to be used
 in this Drag and Drop operation, and
 the
Component
this
DragGestureRecognizer
should "observe" for drag initiating gestures.
DragGestureRecognizer(DragSource, Component, int)
- Constructor for class java.awt.dnd.
DragGestureRecognizer
Construct a new
DragGestureRecognizer
given the
DragSource
to be used in this
 Drag and Drop
 operation, the
Component
this
DragGestureRecognizer
should "observe"
 for drag initiating gestures, and the action(s)
 supported for this Drag and Drop operation.
DragGestureRecognizer(DragSource, Component, int, DragGestureListener)
- Constructor for class java.awt.dnd.
DragGestureRecognizer
Construct a new
DragGestureRecognizer
given the
DragSource
to be used
 in this Drag and Drop operation, the
Component
this
DragGestureRecognizer
should "observe"
 for drag initiating gestures, the action(s) supported
 for this Drag and Drop operation, and the
DragGestureListener
to notify
 once a drag initiating gesture has been detected.
draggingHW
- Variable in class javax.swing.plaf.basic.
BasicSplitPaneUI
Set to true in startDragging if any of the children
 (not including the nonContinuousLayoutDivider) are heavy weights.
dragMouseMoved(DragSourceDragEvent)
- Method in class java.awt.dnd.
DragSourceAdapter
Called whenever the mouse is moved during a drag operation.
dragMouseMoved(DragSourceDragEvent)
- Method in class java.awt.dnd.
DragSourceContext
Calls
dragMouseMoved
on the
DragSourceMotionListener
s registered with the
DragSource
associated with this
DragSourceContext
, and them passes the specified
DragSourceDragEvent
.
dragMouseMoved(DragSourceDragEvent)
- Method in interface java.awt.dnd.
DragSourceMotionListener
Called whenever the mouse is moved during a drag operation.
dragOver(DragSourceDragEvent)
- Method in class java.awt.dnd.
DragSourceAdapter
Called as the cursor's hotspot moves over a platform-dependent drop site.
dragOver(DragSourceDragEvent)
- Method in class java.awt.dnd.
DragSourceContext
Calls
dragOver
on the
DragSourceListener
s registered with this
DragSourceContext
and with the associated
DragSource
, and passes them the specified
DragSourceDragEvent
.
dragOver(DragSourceDragEvent)
- Method in interface java.awt.dnd.
DragSourceListener
Called as the cursor's hotspot moves over a platform-dependent drop site.
dragOver(DropTargetDragEvent)
- Method in class java.awt.dnd.
DropTarget
Calls
dragOver
on the registered
DropTargetListener
and passes it
 the specified
DropTargetDragEvent
.
dragOver(DropTargetDragEvent)
- Method in class java.awt.dnd.
DropTargetAdapter
Called when a drag operation is ongoing, while the mouse pointer is still
 over the operable part of the drop site for the
DropTarget
registered with this listener.
dragOver(DropTargetDragEvent)
- Method in interface java.awt.dnd.
DropTargetListener
Called when a drag operation is ongoing, while the mouse pointer is still
 over the operable part of the drop site for the
DropTarget
registered with this listener.
dragSource
- Variable in class java.awt.dnd.
DragGestureRecognizer
The
DragSource
associated with this
DragGestureRecognizer
.
DragSource
- Class in
java.awt.dnd
The
DragSource
is the entity responsible
 for the initiation of the Drag
 and Drop operation, and may be used in a number of scenarios:
 
 1 default instance per JVM for the lifetime of that JVM.
DragSource()
- Constructor for class java.awt.dnd.
DragSource
Creates a new
DragSource
.
DragSourceAdapter
- Class in
java.awt.dnd
An abstract adapter class for receiving drag source events.
DragSourceAdapter()
- Constructor for class java.awt.dnd.
DragSourceAdapter
Constructs a
DragSourceAdapter
.
DragSourceContext
- Class in
java.awt.dnd
The
DragSourceContext
class is responsible for managing the
 initiator side of the Drag and Drop protocol.
DragSourceContext(DragGestureEvent, Cursor, Image, Point, Transferable, DragSourceListener)
- Constructor for class java.awt.dnd.
DragSourceContext
Called from
DragSource
, this constructor creates a new
DragSourceContext
given the
DragSourceContextPeer
for this Drag, the
DragGestureEvent
that triggered the Drag, the initial
Cursor
to use for the Drag, an (optional)
Image
to display while the Drag is taking place, the offset
 of the
Image
origin from the hotspot at the instant of the
 triggering event, the
Transferable
subject data, and the
DragSourceListener
to use during the Drag and Drop
 operation.
DragSourceDragEvent
- Class in
java.awt.dnd
The
DragSourceDragEvent
is
 delivered from the
DragSourceContextPeer
,
 via the
DragSourceContext
, to the
DragSourceListener
registered with that
DragSourceContext
and with its associated
DragSource
.
DragSourceDragEvent(DragSourceContext, int, int, int)
- Constructor for class java.awt.dnd.
DragSourceDragEvent
Constructs a
DragSourceDragEvent
.
DragSourceDragEvent(DragSourceContext, int, int, int, int, int)
- Constructor for class java.awt.dnd.
DragSourceDragEvent
Constructs a
DragSourceDragEvent
given the specified
DragSourceContext
, user drop action, target drop action,
 modifiers and coordinates.
DragSourceDropEvent
- Class in
java.awt.dnd
The
DragSourceDropEvent
is delivered
 from the
DragSourceContextPeer
,
 via the
DragSourceContext
, to the
dragDropEnd
method of
DragSourceListener
s registered with that
DragSourceContext
and with its associated
DragSource
.
DragSourceDropEvent(DragSourceContext)
- Constructor for class java.awt.dnd.
DragSourceDropEvent
Construct a
DragSourceDropEvent
for a drag that does not result in a drop.
DragSourceDropEvent(DragSourceContext, int, boolean)
- Constructor for class java.awt.dnd.
DragSourceDropEvent
Construct a
DragSourceDropEvent
for a drop,
 given the
DragSourceContext
, the drop action,
 and a
boolean
indicating if the drop was successful.
DragSourceDropEvent(DragSourceContext, int, boolean, int, int)
- Constructor for class java.awt.dnd.
DragSourceDropEvent
Construct a
DragSourceDropEvent
for a drop, given the
DragSourceContext
, the drop action, a
boolean
indicating if the drop was successful, and coordinates.
DragSourceEvent
- Class in
java.awt.dnd
This class is the base class for
DragSourceDragEvent
and
DragSourceDropEvent
.
DragSourceEvent(DragSourceContext)
- Constructor for class java.awt.dnd.
DragSourceEvent
Construct a
DragSourceEvent
given a specified
DragSourceContext
.
DragSourceEvent(DragSourceContext, int, int)
- Constructor for class java.awt.dnd.
DragSourceEvent
Construct a
DragSourceEvent
given a specified
DragSourceContext
, and coordinates of the cursor
 location.
DragSourceListener
- Interface in
java.awt.dnd
The
DragSourceListener
defines the
 event interface for originators of
 Drag and Drop operations to track the state of the user's gesture, and to
 provide appropriate "drag over"
 feedback to the user throughout the
 Drag and Drop operation.
DragSourceMotionListener
- Interface in
java.awt.dnd
A listener interface for receiving mouse motion events during a drag
 operation.
dragTo(Point, Point)
- Method in class javax.swing.plaf.basic.
BasicToolBarUI
The method is used to drag
DragWindow
during the
JToolBar
is being dragged.
dragWindow
- Variable in class javax.swing.plaf.basic.
BasicToolBarUI
The instance of
DragWindow
.
drain()
- Method in class java.io.
ObjectOutputStream
Drain any buffered data in ObjectOutputStream.
drain()
- Method in interface javax.sound.sampled.
DataLine
Drains queued data from the line by continuing data I/O until the data
 line's internal buffer has been emptied.
drainPermits()
- Method in class java.util.concurrent.
Semaphore
Acquires and returns all permits that are immediately
 available, or if negative permits are available, releases them.
drainTasksTo(Collection<? super ForkJoinTask<?>>)
- Method in class java.util.concurrent.
ForkJoinPool
Removes all available unexecuted submitted and forked tasks
 from scheduling queues and adds them to the given collection,
 without altering their execution status.
drainTo(Collection<? super E>)
- Method in class java.util.concurrent.
ArrayBlockingQueue
drainTo(Collection<? super E>)
- Method in interface java.util.concurrent.
BlockingQueue
Removes all available elements from this queue and adds them
 to the given collection.
drainTo(Collection<? super E>)
- Method in class java.util.concurrent.
DelayQueue
drainTo(Collection<? super E>)
- Method in class java.util.concurrent.
LinkedBlockingDeque
drainTo(Collection<? super E>)
- Method in class java.util.concurrent.
LinkedBlockingQueue
drainTo(Collection<? super E>)
- Method in class java.util.concurrent.
LinkedTransferQueue
drainTo(Collection<? super E>)
- Method in class java.util.concurrent.
PriorityBlockingQueue
drainTo(Collection<? super E>)
- Method in class java.util.concurrent.
SynchronousQueue
drainTo(Collection<? super E>, int)
- Method in class java.util.concurrent.
ArrayBlockingQueue
drainTo(Collection<? super E>, int)
- Method in interface java.util.concurrent.
BlockingQueue
Removes at most the given number of available elements from
 this queue and adds them to the given collection.
drainTo(Collection<? super E>, int)
- Method in class java.util.concurrent.
DelayQueue
drainTo(Collection<? super E>, int)
- Method in class java.util.concurrent.
LinkedBlockingDeque
drainTo(Collection<? super E>, int)
- Method in class java.util.concurrent.
LinkedBlockingQueue
drainTo(Collection<? super E>, int)
- Method in class java.util.concurrent.
LinkedTransferQueue
drainTo(Collection<? super E>, int)
- Method in class java.util.concurrent.
PriorityBlockingQueue
drainTo(Collection<? super E>, int)
- Method in class java.util.concurrent.
SynchronousQueue
draw(Graphics2D, float, float)
- Method in class java.awt.font.
GraphicAttribute
Renders this
GraphicAttribute
at the specified
 location.
draw(Graphics2D, float, float)
- Method in class java.awt.font.
ImageGraphicAttribute
Renders this
GraphicAttribute
at the specified
 location.
draw(Graphics2D, float, float)
- Method in class java.awt.font.
ShapeGraphicAttribute
Renders this
GraphicAttribute
at the specified
 location.
draw(Graphics2D, float, float)
- Method in class java.awt.font.
TextLayout
Renders this
TextLayout
at the specified location in
 the specified
Graphics2D
context.
draw(Shape)
- Method in class java.awt.
Graphics2D
Strokes the outline of a
Shape
using the settings of the
 current
Graphics2D
context.
draw3DRect(int, int, int, int, boolean)
- Method in class java.awt.
Graphics
Draws a 3-D highlighted outline of the specified rectangle.
draw3DRect(int, int, int, int, boolean)
- Method in class java.awt.
Graphics2D
Draws a 3-D highlighted outline of the specified rectangle.
draw3DRect(int, int, int, int, boolean)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.draw3DRect
.
drawArc(int, int, int, int, int, int)
- Method in class java.awt.
Graphics
Draws the outline of a circular or elliptical arc
 covering the specified rectangle.
drawArc(int, int, int, int, int, int)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.drawArc
.
drawBezel(Graphics, int, int, int, int, boolean, boolean, Color, Color, Color, Color)
- Static method in class javax.swing.plaf.basic.
BasicGraphicsUtils
Draws a bezel.
drawBuffer
- Variable in class java.awt.
Component.FlipBufferStrategy
The drawing buffer
drawBytes(byte[], int, int, int, int)
- Method in class java.awt.
Graphics
Draws the text given by the specified byte array, using this
 graphics context's current font and color.
drawBytes(byte[], int, int, int, int)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.drawBytes
.
drawCentered(Component, Graphics, Icon, int, int)
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Draws the
icon
centered at (x,y).
drawChars(char[], int, int, int, int)
- Method in class java.awt.
Graphics
Draws the text given by the specified character array, using this
 graphics context's current font and color.
drawChars(char[], int, int, int, int)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.drawChars
.
drawCheck(Component, Graphics, int, int)
- Method in class javax.swing.plaf.metal.
MetalCheckBoxIcon
Paints
MetalCheckBoxIcon
.
drawDashedHorizontalLine(Graphics, int, int, int)
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Draws a horizontal dashed line.
drawDashedRect(Graphics, int, int, int, int)
- Static method in class javax.swing.plaf.basic.
BasicGraphicsUtils
Draws dashed rectangle.
drawDashedVerticalLine(Graphics, int, int, int)
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Draws a vertical dashed line.
drawEchoCharacter(Graphics2D, float, float, char)
- Method in class javax.swing.text.
PasswordView
Renders the echo character, or whatever graphic should be used
 to display the password characters.
drawEchoCharacter(Graphics, int, int, char)
- Method in class javax.swing.text.
PasswordView
Deprecated.
replaced by
PasswordView.drawEchoCharacter(Graphics2D, float, float, char)
drawEtchedRect(Graphics, int, int, int, int, Color, Color, Color, Color)
- Static method in class javax.swing.plaf.basic.
BasicGraphicsUtils
Draws an etched rectangle.
drawGlyphVector(GlyphVector, float, float)
- Method in class java.awt.
Graphics2D
Renders the text of the specified
GlyphVector
using
 the
Graphics2D
context's rendering attributes.
drawGroove(Graphics, int, int, int, int, Color, Color)
- Static method in class javax.swing.plaf.basic.
BasicGraphicsUtils
Draws a groove.
drawImage(BufferedImage, BufferedImageOp, int, int)
- Method in class java.awt.
Graphics2D
Renders a
BufferedImage
that is
 filtered with a
BufferedImageOp
.
drawImage(Image, int, int, int, int, int, int, int, int, Color, ImageObserver)
- Method in class java.awt.
Graphics
Draws as much of the specified area of the specified image as is
 currently available, scaling it on the fly to fit inside the
 specified area of the destination drawable surface.
drawImage(Image, int, int, int, int, int, int, int, int, Color, ImageObserver)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.drawImage
.
drawImage(Image, int, int, int, int, int, int, int, int, ImageObserver)
- Method in class java.awt.
Graphics
Draws as much of the specified area of the specified image as is
 currently available, scaling it on the fly to fit inside the
 specified area of the destination drawable surface.
drawImage(Image, int, int, int, int, int, int, int, int, ImageObserver)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.drawImage
.
drawImage(Image, int, int, int, int, Color, ImageObserver)
- Method in class java.awt.
Graphics
Draws as much of the specified image as has already been scaled
 to fit inside the specified rectangle.
drawImage(Image, int, int, int, int, Color, ImageObserver)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.drawImage
.
drawImage(Image, int, int, int, int, ImageObserver)
- Method in class java.awt.
Graphics
Draws as much of the specified image as has already been scaled
 to fit inside the specified rectangle.
drawImage(Image, int, int, int, int, ImageObserver)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.drawImage
.
drawImage(Image, int, int, Color, ImageObserver)
- Method in class java.awt.
Graphics
Draws as much of the specified image as is currently available.
drawImage(Image, int, int, Color, ImageObserver)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.drawImage
.
drawImage(Image, int, int, ImageObserver)
- Method in class java.awt.
Graphics
Draws as much of the specified image as is currently available.
drawImage(Image, int, int, ImageObserver)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.drawImage
.
drawImage(Image, AffineTransform, ImageObserver)
- Method in class java.awt.
Graphics2D
Renders an image, applying a transform from image space into user space
 before drawing.
drawingCache
- Variable in class javax.swing.plaf.basic.
BasicTreeUI
Used for minimizing the drawing of vertical lines.
drawInverted()
- Method in class javax.swing.plaf.basic.
BasicSliderUI
Draws inverted.
drawLine(int, int, int, int)
- Method in class java.awt.
Graphics
Draws a line, using the current color, between the points
(x1, y1)
and
(x2, y2)
in this graphics context's coordinate system.
drawLine(int, int, int, int)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.drawLine
.
drawLine(int, int, Graphics2D, float, float)
- Method in class javax.swing.text.
WrappedPlainView
Renders a line of text, suppressing whitespace at the end
 and expanding any tabs.
drawLine(int, int, Graphics, int, int)
- Method in class javax.swing.text.
WrappedPlainView
Deprecated.
replaced by
WrappedPlainView.drawLine(int, int, Graphics2D, float, float)
drawLine(int, Graphics2D, float, float)
- Method in class javax.swing.text.
PlainView
Renders a line of text, suppressing whitespace at the end
 and expanding any tabs.
drawLine(int, Graphics, int, int)
- Method in class javax.swing.text.
PlainView
Deprecated.
replaced by
PlainView.drawLine(int, Graphics2D, float, float)
drawLine(SynthContext, Object, Graphics, int, int, int, int)
- Method in class javax.swing.plaf.synth.
SynthGraphicsUtils
Draws a line between the two end points.
drawLine(SynthContext, Object, Graphics, int, int, int, int, Object)
- Method in class javax.swing.plaf.synth.
SynthGraphicsUtils
Draws a line between the two end points.
drawLoweredBezel(Graphics, int, int, int, int, Color, Color, Color, Color)
- Static method in class javax.swing.plaf.basic.
BasicGraphicsUtils
Draws a lowered bezel.
drawOval(int, int, int, int)
- Method in class java.awt.
Graphics
Draws the outline of an oval.
drawOval(int, int, int, int)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.drawOval
.
drawPolygon(int[], int[], int)
- Method in class java.awt.
Graphics
Draws a closed polygon defined by
 arrays of
x
and
y
coordinates.
drawPolygon(int[], int[], int)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.drawPolygon
.
drawPolygon(Polygon)
- Method in class java.awt.
Graphics
Draws the outline of a polygon defined by the specified
Polygon
object.
drawPolyline(int[], int[], int)
- Method in class java.awt.
Graphics
Draws a sequence of connected lines defined by
 arrays of
x
and
y
coordinates.
drawPolyline(int[], int[], int)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.drawPolyline
.
drawRect(int, int, int, int)
- Method in class java.awt.
Graphics
Draws the outline of the specified rectangle.
drawRect(int, int, int, int)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.drawRect
.
drawRenderableImage(RenderableImage, AffineTransform)
- Method in class java.awt.
Graphics2D
Renders a
RenderableImage
,
 applying a transform from image space into user space before drawing.
drawRenderedImage(RenderedImage, AffineTransform)
- Method in class java.awt.
Graphics2D
Renders a
RenderedImage
,
 applying a transform from image
 space into user space before drawing.
drawRoundRect(int, int, int, int, int, int)
- Method in class java.awt.
Graphics
Draws an outlined round-cornered rectangle using this graphics
 context's current color.
drawRoundRect(int, int, int, int, int, int)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.drawRoundRect
.
drawSelectedText(Graphics2D, float, float, int, int)
- Method in class javax.swing.text.
PlainView
Renders the given range in the model as selected text.
drawSelectedText(Graphics2D, float, float, int, int)
- Method in class javax.swing.text.
WrappedPlainView
Renders the given range in the model as selected text.
drawSelectedText(Graphics, int, int, int, int)
- Method in class javax.swing.text.
PasswordView
Deprecated.
replaced by
PlainView.drawSelectedText(Graphics2D, float, float, int, int)
drawSelectedText(Graphics, int, int, int, int)
- Method in class javax.swing.text.
PlainView
Deprecated.
replaced by
PlainView.drawSelectedText(Graphics2D, float, float, int, int)
drawSelectedText(Graphics, int, int, int, int)
- Method in class javax.swing.text.
WrappedPlainView
Deprecated.
replaced by
WrappedPlainView.drawSelectedText(Graphics2D, float, float, int, int)
drawString(Graphics, String, int, int, int)
- Static method in class javax.swing.plaf.basic.
BasicGraphicsUtils
Draw a string with the graphics
g
at location (x,y)
 just like
g.drawString
would.
drawString(String, float, float)
- Method in class java.awt.
Graphics2D
Renders the text specified by the specified
String
,
 using the current text attribute state in the
Graphics2D
context.
drawString(String, int, int)
- Method in class java.awt.
Graphics
Draws the text given by the specified string, using this
 graphics context's current font and color.
drawString(String, int, int)
- Method in class java.awt.
Graphics2D
Renders the text of the specified
String
, using the
 current text attribute state in the
Graphics2D
context.
drawString(String, int, int)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.drawString
.
drawString(AttributedCharacterIterator, float, float)
- Method in class java.awt.
Graphics2D
Renders the text of the specified iterator applying its attributes
 in accordance with the specification of the
TextAttribute
class.
drawString(AttributedCharacterIterator, int, int)
- Method in class java.awt.
Graphics
Renders the text of the specified iterator applying its attributes
 in accordance with the specification of the
TextAttribute
class.
drawString(AttributedCharacterIterator, int, int)
- Method in class java.awt.
Graphics2D
Renders the text of the specified iterator applying its attributes
 in accordance with the specification of the
TextAttribute
class.
drawString(AttributedCharacterIterator, int, int)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.drawString
.
drawString(JComponent, Graphics2D, String, float, float)
- Static method in class javax.swing.plaf.basic.
BasicGraphicsUtils
Draws the given string at the specified location using text properties
 and anti-aliasing hints from the provided component.
drawStringUnderlineCharAt(Graphics, String, int, int, int)
- Static method in class javax.swing.plaf.basic.
BasicGraphicsUtils
Draw a string with the graphics
g
at location
 (
x
,
y
)
 just like
g.drawString
would.
drawStringUnderlineCharAt(JComponent, Graphics2D, String, int, float, float)
- Static method in class javax.swing.plaf.basic.
BasicGraphicsUtils
Draws the given string at the specified location underlining
 the specified character.
drawTabbedText(Segment, float, float, Graphics2D, TabExpander, int)
- Static method in class javax.swing.text.
Utilities
Draws the given text, expanding any tabs that are contained
 using the given tab expansion technique.
drawTabbedText(Segment, int, int, Graphics, TabExpander, int)
- Static method in class javax.swing.text.
Utilities
Deprecated.
replaced by
Utilities.drawTabbedText(Segment, float, float, Graphics2D, TabExpander, int)
drawUnselectedText(Graphics2D, float, float, int, int)
- Method in class javax.swing.text.
PlainView
Renders the given range in the model as normal unselected
 text.
drawUnselectedText(Graphics2D, float, float, int, int)
- Method in class javax.swing.text.
WrappedPlainView
Renders the given range in the model as normal unselected
 text.
drawUnselectedText(Graphics, int, int, int, int)
- Method in class javax.swing.text.
PasswordView
Deprecated.
replaced by
PlainView.drawUnselectedText(Graphics2D, float, float, int, int)
drawUnselectedText(Graphics, int, int, int, int)
- Method in class javax.swing.text.
PlainView
Deprecated.
replaced by
PlainView.drawUnselectedText(Graphics2D, float, float, int, int)
drawUnselectedText(Graphics, int, int, int, int)
- Method in class javax.swing.text.
WrappedPlainView
Deprecated.
replaced by
WrappedPlainView.drawUnselectedText(Graphics2D, float, float, int, int)
drawVBuffer
- Variable in class java.awt.
Component.FlipBufferStrategy
The drawing buffer as a volatile image
DrbgParameters
- Class in
java.security
This class specifies the parameters used by a DRBG (Deterministic
 Random Bit Generator).
DrbgParameters.Capability
- Enum Class in
java.security
The reseedable and prediction resistance capabilities of a DRBG.
DrbgParameters.Instantiation
- Class in
java.security
DRBG parameters for instantiation.
DrbgParameters.NextBytes
- Class in
java.security
DRBG parameters for random bits generation.
DrbgParameters.Reseed
- Class in
java.security
DRBG parameters for reseed.
Driver
- Interface in
java.sql
The interface that every driver class must implement.
DriverAction
- Interface in
java.sql
An interface that must be implemented when a
Driver
wants to be
 notified by
DriverManager
.
DriverManager
- Class in
java.sql
The basic service for managing a set of JDBC drivers.
DriverPropertyInfo
- Class in
java.sql
Driver properties for making a connection.
DriverPropertyInfo(String, String)
- Constructor for class java.sql.
DriverPropertyInfo
Constructs a
DriverPropertyInfo
object with a  given
 name and value.
drivers()
- Static method in class java.sql.
DriverManager
Retrieves a Stream with all of the currently loaded JDBC drivers
 to which the current caller has access.
drop()
- Method in class java.nio.channels.
MembershipKey
Drop membership.
drop(DropTargetDropEvent)
- Method in class java.awt.dnd.
DropTarget
Calls
drop
on the registered
DropTargetListener
and passes it
 the specified
DropTargetDropEvent
if this
DropTarget
is active.
drop(DropTargetDropEvent)
- Method in interface java.awt.dnd.
DropTargetListener
Called when the drag operation has terminated with a drop on
 the operable part of the drop site for the
DropTarget
registered with this listener.
drop(Snippet)
- Method in class jdk.jshell.
JShell
Remove a declaration from the state.
dropActionChanged(DragSourceDragEvent)
- Method in class java.awt.dnd.
DragSourceAdapter
Called when the user has modified the drop gesture.
dropActionChanged(DragSourceDragEvent)
- Method in class java.awt.dnd.
DragSourceContext
Calls
dropActionChanged
on the
DragSourceListener
s registered with this
DragSourceContext
and with the associated
DragSource
, and passes them the specified
DragSourceDragEvent
.
dropActionChanged(DragSourceDragEvent)
- Method in interface java.awt.dnd.
DragSourceListener
Called when the user has modified the drop gesture.
dropActionChanged(DropTargetDragEvent)
- Method in class java.awt.dnd.
DropTarget
Calls
dropActionChanged
on the registered
DropTargetListener
and passes it
 the specified
DropTargetDragEvent
.
dropActionChanged(DropTargetDragEvent)
- Method in class java.awt.dnd.
DropTargetAdapter
Called if the user has modified
 the current drop gesture.
dropActionChanged(DropTargetDragEvent)
- Method in interface java.awt.dnd.
DropTargetListener
Called if the user has modified
 the current drop gesture.
dropArguments(int, Class<?>...)
- Method in class jdk.dynalink.linker.
GuardedInvocation
Makes an invocation that drops arguments in both the invocation and the
 guard (if it exists and has at least
pos
parameters) with
MethodHandles.dropArguments(MethodHandle, int, Class...)
.
dropArguments(int, List<Class<?>>)
- Method in class jdk.dynalink.linker.
GuardedInvocation
Makes an invocation that drops arguments in both the invocation and the
 guard (if it exists and has at least
pos
parameters) with
MethodHandles.dropArguments(MethodHandle, int, List)
.
dropArguments(MethodHandle, int, Class<?>...)
- Static method in class java.lang.invoke.
MethodHandles
Produces a method handle which will discard some dummy arguments
 before calling some other specified
target
method handle.
dropArguments(MethodHandle, int, List<Class<?>>)
- Static method in class java.lang.invoke.
MethodHandles
Produces a method handle which will discard some dummy arguments
 before calling some other specified
target
method handle.
dropArgumentsToMatch(MethodHandle, int, List<Class<?>>, int)
- Static method in class java.lang.invoke.
MethodHandles
Adapts a target method handle to match the given parameter type list.
dropComplete(boolean)
- Method in class java.awt.dnd.
DropTargetContext
This method signals that the drop is completed and
 if it was successful or not.
dropComplete(boolean)
- Method in class java.awt.dnd.
DropTargetDropEvent
This method notifies the
DragSource
that the drop transfer(s) are completed.
dropCoordinates(VarHandle, int, Class<?>...)
- Static method in class java.lang.invoke.
MethodHandles
Returns a var handle which will discard some dummy coordinates before delegating to the
 target var handle.
DropLocation(Point)
- Constructor for class javax.swing.
TransferHandler.DropLocation
Constructs a drop location for the given point.
dropLookupMode(int)
- Method in class java.lang.invoke.
MethodHandles.Lookup
Creates a lookup on the same lookup class which this lookup object
 finds members, but with a lookup mode that has lost the given lookup mode.
DropMode
- Enum Class in
javax.swing
Drop modes, used to determine the method by which a component
 tracks and indicates a drop location during drag and drop.
dropParameterTypes(int, int)
- Method in interface java.lang.constant.
MethodTypeDesc
Returns a
MethodTypeDesc
that is identical to this one,
 except that a range of parameter types have been removed.
dropParameterTypes(int, int)
- Method in class java.lang.invoke.
MethodType
Finds or creates a method type with some parameter types omitted.
dropParameterTypes(int, int)
- Method in interface java.lang.invoke.
TypeDescriptor.OfMethod
Return a method descriptor that is identical to this one,
 except that a range of parameter types have been removed.
DROPPED
- Enum constant in enum class jdk.jshell.
Snippet.Status
The snippet is inactive because of an explicit call to
 the
JShell.drop(Snippet)
.
dropReturn(MethodHandle)
- Static method in class java.lang.invoke.
MethodHandles
Drop the return value of the target handle (if any).
dropReturnLayout()
- Method in interface java.lang.foreign.
FunctionDescriptor
PREVIEW
Returns a new function descriptor, with no return layout.
DropTarget
- Class in
java.awt.dnd
The
DropTarget
is associated
 with a
Component
when that
Component
wishes
 to accept drops during Drag and Drop operations.
DropTarget()
- Constructor for class java.awt.dnd.
DropTarget
Creates a
DropTarget
.
DropTarget(Component, int, DropTargetListener)
- Constructor for class java.awt.dnd.
DropTarget
Creates a
DropTarget
given the
Component
to associate itself with, an
int
representing
 the default acceptable action(s) to support, and a
DropTargetListener
to handle event processing.
DropTarget(Component, int, DropTargetListener, boolean)
- Constructor for class java.awt.dnd.
DropTarget
Creates a
DropTarget
given the
Component
to associate itself with, an
int
representing
 the default acceptable action(s)
 to support, a
DropTargetListener
to handle event processing, and a
boolean
indicating
 if the
DropTarget
is currently accepting drops.
DropTarget(Component, int, DropTargetListener, boolean, FlavorMap)
- Constructor for class java.awt.dnd.
DropTarget
Creates a new DropTarget given the
Component
to associate itself with, an
int
representing
 the default acceptable action(s) to
 support, a
DropTargetListener
to handle event processing, a
boolean
indicating
 if the
DropTarget
is currently accepting drops, and
 a
FlavorMap
to use (or null for the default
FlavorMap
).
DropTarget(Component, DropTargetListener)
- Constructor for class java.awt.dnd.
DropTarget
Creates a
DropTarget
given the
Component
to associate itself with, and the
DropTargetListener
to handle event processing.
DropTarget.DropTargetAutoScroller
- Class in
java.awt.dnd
this protected nested class implements autoscrolling
DropTargetAdapter
- Class in
java.awt.dnd
An abstract adapter class for receiving drop target events.
DropTargetAdapter()
- Constructor for class java.awt.dnd.
DropTargetAdapter
Constructs a
DropTargetAdapter
.
DropTargetAutoScroller(Component, Point)
- Constructor for class java.awt.dnd.
DropTarget.DropTargetAutoScroller
construct a DropTargetAutoScroller
DropTargetContext
- Class in
java.awt.dnd
A
DropTargetContext
is created
 whenever the logical cursor associated
 with a Drag and Drop operation coincides with the visible geometry of
 a
Component
associated with a
DropTarget
.
DropTargetContext.TransferableProxy
- Class in
java.awt.dnd
TransferableProxy
is a helper inner class that implements
Transferable
interface and serves as a proxy for another
Transferable
object which represents data transfer for
 a particular drag-n-drop operation.
DropTargetDragEvent
- Class in
java.awt.dnd
The
DropTargetDragEvent
is delivered to a
DropTargetListener
via its
 dragEnter() and dragOver() methods.
DropTargetDragEvent(DropTargetContext, Point, int, int)
- Constructor for class java.awt.dnd.
DropTargetDragEvent
Construct a
DropTargetDragEvent
given the
DropTargetContext
for this operation,
 the location of the "Drag"
Cursor
's hotspot
 in the
Component
's coordinates, the
 user drop action, and the source drop actions.
DropTargetDropEvent
- Class in
java.awt.dnd
The
DropTargetDropEvent
is delivered
 via the
DropTargetListener
drop() method.
DropTargetDropEvent(DropTargetContext, Point, int, int)
- Constructor for class java.awt.dnd.
DropTargetDropEvent
Construct a
DropTargetDropEvent
given
 the
DropTargetContext
for this operation,
 the location of the drag
Cursor
's
 hotspot in the
Component
's coordinates,
 the currently
 selected user drop action, and the current set of
 actions supported by the source.
DropTargetDropEvent(DropTargetContext, Point, int, int, boolean)
- Constructor for class java.awt.dnd.
DropTargetDropEvent
Construct a
DropTargetEvent
given the
DropTargetContext
for this operation,
 the location of the drag
Cursor
's hotspot
 in the
Component
's
 coordinates, the currently selected user drop action,
 the current set of actions supported by the source,
 and a
boolean
indicating if the source is in the same JVM
 as the target.
DropTargetEvent
- Class in
java.awt.dnd
The
DropTargetEvent
is the base
 class for both the
DropTargetDragEvent
and the
DropTargetDropEvent
.
DropTargetEvent(DropTargetContext)
- Constructor for class java.awt.dnd.
DropTargetEvent
Construct a
DropTargetEvent
object with
 the specified
DropTargetContext
.
DropTargetListener
- Interface in
java.awt.dnd
The
DropTargetListener
interface
 is the callback interface used by the
DropTarget
class to provide
 notification of DnD operations that involve
 the subject
DropTarget
.
dropWhile(DoublePredicate)
- Method in interface java.util.stream.
DoubleStream
Returns, if this stream is ordered, a stream consisting of the remaining
 elements of this stream after dropping the longest prefix of elements
 that match the given predicate.
dropWhile(IntPredicate)
- Method in interface java.util.stream.
IntStream
Returns, if this stream is ordered, a stream consisting of the remaining
 elements of this stream after dropping the longest prefix of elements
 that match the given predicate.
dropWhile(LongPredicate)
- Method in interface java.util.stream.
LongStream
Returns, if this stream is ordered, a stream consisting of the remaining
 elements of this stream after dropping the longest prefix of elements
 that match the given predicate.
dropWhile(Predicate<? super T>)
- Method in interface java.util.stream.
Stream
Returns, if this stream is ordered, a stream consisting of the remaining
 elements of this stream after dropping the longest prefix of elements
 that match the given predicate.
DSA_SHA1
- Static variable in interface javax.xml.crypto.dsig.
SignatureMethod
The
DSA-SHA1
(DSS) signature method algorithm URI.
DSA_SHA256
- Static variable in interface javax.xml.crypto.dsig.
SignatureMethod
The
DSA-SHA256
(DSS) signature method algorithm URI.
DSA_TYPE
- Static variable in interface javax.xml.crypto.dsig.keyinfo.
KeyValue
URI identifying the DSA KeyValue KeyInfo type:
 http://www.w3.org/2000/09/xmldsig#DSAKeyValue.
DSAGenParameterSpec
- Class in
java.security.spec
This immutable class specifies the set of parameters used for
 generating DSA parameters as specified in
FIPS 186-3 Digital Signature Standard (DSS)
.
DSAGenParameterSpec(int, int)
- Constructor for class java.security.spec.
DSAGenParameterSpec
Creates a domain parameter specification for DSA parameter
 generation using
primePLen
and
subprimeQLen
.
DSAGenParameterSpec(int, int, int)
- Constructor for class java.security.spec.
DSAGenParameterSpec
Creates a domain parameter specification for DSA parameter
 generation using
primePLen
,
subprimeQLen
,
 and
seedLen
.
DSAKey
- Interface in
java.security.interfaces
The interface to a DSA public or private key.
DSAKeyPairGenerator
- Interface in
java.security.interfaces
An interface to an object capable of generating DSA key pairs.
DSAParameterSpec
- Class in
java.security.spec
This class specifies the set of parameters used with the DSA algorithm.
DSAParameterSpec(BigInteger, BigInteger, BigInteger)
- Constructor for class java.security.spec.
DSAParameterSpec
Creates a new DSAParameterSpec with the specified parameter values.
DSAParams
- Interface in
java.security.interfaces
Interface to a DSA-specific set of key parameters, which defines a
 DSA
key family
.
DSAPrivateKey
- Interface in
java.security.interfaces
The standard interface to a DSA private key.
DSAPrivateKeySpec
- Class in
java.security.spec
This class specifies a DSA private key with its associated parameters.
DSAPrivateKeySpec(BigInteger, BigInteger, BigInteger, BigInteger)
- Constructor for class java.security.spec.
DSAPrivateKeySpec
Creates a new DSAPrivateKeySpec with the specified parameter values.
DSAPublicKey
- Interface in
java.security.interfaces
The interface to a DSA public key.
DSAPublicKeySpec
- Class in
java.security.spec
This class specifies a DSA public key with its associated parameters.
DSAPublicKeySpec(BigInteger, BigInteger, BigInteger, BigInteger)
- Constructor for class java.security.spec.
DSAPublicKeySpec
Creates a new DSAPublicKeySpec with the specified parameter values.
Dst
- Static variable in class java.awt.
AlphaComposite
AlphaComposite
object that implements the opaque DST rule
 with an alpha of 1.0f.
DST
- Static variable in class java.awt.
AlphaComposite
The destination is left untouched
 (Porter-Duff Destination rule).
DST_ATOP
- Static variable in class java.awt.
AlphaComposite
The part of the destination lying inside of the source
 is composited over the source and replaces the destination
 (Porter-Duff Destination Atop Source rule).
DST_IN
- Static variable in class java.awt.
AlphaComposite
The part of the destination lying inside of the source
 replaces the destination
 (Porter-Duff Destination In Source rule).
DST_OFFSET
- Static variable in class java.util.
Calendar
Field number for
get
and
set
indicating the
 daylight saving offset in milliseconds.
DST_OUT
- Static variable in class java.awt.
AlphaComposite
The part of the destination lying outside of the source
 replaces the destination
 (Porter-Duff Destination Held Out By Source rule).
DST_OVER
- Static variable in class java.awt.
AlphaComposite
The destination is composited over the source and
 the result replaces the destination
 (Porter-Duff Destination Over Source rule).
DstAtop
- Static variable in class java.awt.
AlphaComposite
AlphaComposite
object that implements the opaque DST_ATOP rule
 with an alpha of 1.0f.
DstIn
- Static variable in class java.awt.
AlphaComposite
AlphaComposite
object that implements the opaque DST_IN rule
 with an alpha of 1.0f.
DstOut
- Static variable in class java.awt.
AlphaComposite
AlphaComposite
object that implements the opaque DST_OUT rule
 with an alpha of 1.0f.
DstOver
- Static variable in class java.awt.
AlphaComposite
AlphaComposite
object that implements the opaque DST_OVER rule
 with an alpha of 1.0f.
DSYNC
- Enum constant in enum class java.nio.file.
StandardOpenOption
Requires that every update to the file's content be written
 synchronously to the underlying storage device.
DT
- Static variable in class javax.swing.text.html.
HTML.Tag
Tag <dt>
dtd
- Variable in class javax.swing.text.html.parser.
Parser
The dtd.
DTD
- Class in
javax.swing.text.html.parser
The representation of an SGML DTD.
DTD
- Interface in
javax.xml.stream.events
This is the top level interface for events dealing with DTDs
DTD
- Static variable in interface javax.xml.stream.
XMLStreamConstants
Indicates an event is a DTD
DTD(String)
- Constructor for class javax.swing.text.html.parser.
DTD
Creates a new DTD with the specified name.
DTDConstants
- Interface in
javax.swing.text.html.parser
SGML constants used in a DTD.
DTDHandler
- Interface in
org.xml.sax
Receive notification of basic DTD-related events.
DUMMY
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "dummy"
dump(PrintStream)
- Method in class javax.swing.text.
AbstractDocument
Gives a diagnostic dump.
dump(PrintStream, int)
- Method in class javax.swing.text.
AbstractDocument.AbstractElement
Dumps a debugging representation of the element hierarchy.
dump(Path)
- Method in class jdk.jfr.consumer.
RecordingStream
Writes recording data to a file.
dump(Path)
- Method in class jdk.jfr.
Recording
Writes recording data to a file.
dump(Path)
- Method in class jdk.management.jfr.
RemoteRecordingStream
Writes recording data to a file.
dumpAllThreads(boolean, boolean)
- Method in interface java.lang.management.
ThreadMXBean
Returns the thread info for all live platform threads with stack trace
 and synchronization information.
dumpAllThreads(boolean, boolean, int)
- Method in interface java.lang.management.
ThreadMXBean
Returns the thread info for all live platform threads
 with stack trace of the specified maximum number of elements
 and synchronization information.
dumpHeap(String, boolean)
- Method in interface com.sun.management.
HotSpotDiagnosticMXBean
Dumps the heap to the
outputFile
file in the same
 format as the hprof heap dump.
dumpStack()
- Static method in class java.lang.
Thread
Prints a stack trace of the current thread to the standard error stream.
dumpThreads(String, HotSpotDiagnosticMXBean.ThreadDumpFormat)
- Method in interface com.sun.management.
HotSpotDiagnosticMXBean
Generate a thread dump to the given file in the given format.
DUPLEX
- Static variable in class javax.print.attribute.standard.
Sides
An alias for "two sided long edge" (see
TWO_SIDED_LONG_EDGE
).
duplicate()
- Method in class java.nio.
Buffer
Creates a new buffer that shares this buffer's content.
duplicate()
- Method in class java.nio.
ByteBuffer
Creates a new byte buffer that shares this buffer's content.
duplicate()
- Method in class java.nio.
CharBuffer
Creates a new char buffer that shares this buffer's content.
duplicate()
- Method in class java.nio.
DoubleBuffer
Creates a new double buffer that shares this buffer's content.
duplicate()
- Method in class java.nio.
FloatBuffer
Creates a new float buffer that shares this buffer's content.
duplicate()
- Method in class java.nio.
IntBuffer
Creates a new int buffer that shares this buffer's content.
duplicate()
- Method in class java.nio.
LongBuffer
Creates a new long buffer that shares this buffer's content.
duplicate()
- Method in class java.nio.
MappedByteBuffer
Creates a new byte buffer that shares this buffer's content.
duplicate()
- Method in class java.nio.
ShortBuffer
Creates a new short buffer that shares this buffer's content.
DUPLICATE_ELEMENT
- Static variable in exception class org.ietf.jgss.
GSSException
Duplicate credential element requested.
DUPLICATE_TOKEN
- Static variable in exception class org.ietf.jgss.
GSSException
The token was a duplicate of an earlier token.
DuplicateFormatFlagsException
- Exception Class in
java.util
Unchecked exception thrown when duplicate flags are provided in the format
 specifier.
DuplicateFormatFlagsException(String)
- Constructor for exception class java.util.
DuplicateFormatFlagsException
Constructs an instance of this class with the specified flags.
DuplicateRequestException
- Exception Class in
com.sun.jdi.request
Thrown to indicate a duplicate event request.
DuplicateRequestException()
- Constructor for exception class com.sun.jdi.request.
DuplicateRequestException
DuplicateRequestException(String)
- Constructor for exception class com.sun.jdi.request.
DuplicateRequestException
DUPLOYAN
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Duployan".
DUPLOYAN
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Duployan" Unicode character block.
Duration
- Class in
java.time
A time-based amount of time, such as '34.5 seconds'.
Duration
- Class in
javax.xml.datatype
Immutable representation of a time span as defined in
 the W3C XML Schema 1.0 specification.
Duration()
- Constructor for class javax.xml.datatype.
Duration
Default no-arg constructor.
DURATION
- Static variable in class javax.xml.datatype.
DatatypeConstants
Fully qualified name for W3C XML Schema datatype
duration
.
DURATION_DAYTIME
- Static variable in class javax.xml.datatype.
DatatypeConstants
Fully qualified name for XQuery 1.0 and XPath 2.0 datatype
dayTimeDuration
.
DURATION_YEARMONTH
- Static variable in class javax.xml.datatype.
DatatypeConstants
Fully qualified name for XQuery 1.0 and XPath 2.0 datatype
yearMonthDuration
.
Duration and Period
- Search tag in package java.time
Section
Dynalink and bytecode creation
- Search tag in module jdk.dynalink
Section
Dynalink and Java objects
- Search tag in module jdk.dynalink
Section
Dynamic Access
- Search tag in interface java.nio.file.attribute.AclFileAttributeView
Section
Dynamic Access
- Search tag in interface java.nio.file.attribute.PosixFileAttributeView
Section
Dynamically-computed call sites
- Search tag in package java.lang.invoke
Section
Dynamically-computed constants
- Search tag in package java.lang.invoke
Section
DynamicCallSiteDesc
- Class in
java.lang.constant
A
nominal descriptor
for an
invokedynamic
call site.
Dynamic code downloading
- Search tag in package javax.management.remote.rmi
Section
DynamicConstantDesc<T>
- Class in
java.lang.constant
A
nominal descriptor
for a
 dynamic constant (one described in the constant pool with
Constant_Dynamic_info
.)
DynamicConstantDesc(DirectMethodHandleDesc, String, ClassDesc, ConstantDesc...)
- Constructor for class java.lang.constant.
DynamicConstantDesc
Creates a nominal descriptor for a dynamic constant.
dynamicInvoker()
- Method in class java.lang.invoke.
CallSite
Produces a method handle equivalent to an invokedynamic instruction
 which has been linked to this call site.
dynamicInvoker()
- Method in class java.lang.invoke.
ConstantCallSite
Returns this call site's permanent target.
dynamicInvoker()
- Method in class java.lang.invoke.
MutableCallSite
Produces a method handle equivalent to an invokedynamic instruction
 which has been linked to this call site.
dynamicInvoker()
- Method in class java.lang.invoke.
VolatileCallSite
Produces a method handle equivalent to an invokedynamic instruction
 which has been linked to this call site.
DynamicLinker
- Class in
jdk.dynalink
The linker for
RelinkableCallSite
objects.
DynamicLinkerFactory
- Class in
jdk.dynalink
A factory class for creating
DynamicLinker
objects.
DynamicLinkerFactory()
- Constructor for class jdk.dynalink.
DynamicLinkerFactory
Creates a new dynamic linker factory with default configuration.
DynamicMBean
- Interface in
javax.management
Defines the methods that should be implemented by
 a Dynamic MBean (MBean that exposes a dynamic management interface).
Dynamic MBeans
- Search tag in package javax.management
Section
Dynamic Modules
- Search tag in class java.lang.reflect.Proxy
Section
Dynamic resolution of call sites and constants
- Search tag in package java.lang.invoke
Section
DynamicUtilTreeNode(Object, Object)
- Constructor for class javax.swing.
JTree.DynamicUtilTreeNode
Creates a node with the specified object as its value and
 with the specified children.
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
_
All Classes and Interfaces
|
All Packages
|
Constant Field Values
|
Serialized Form
|
System Properties
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.