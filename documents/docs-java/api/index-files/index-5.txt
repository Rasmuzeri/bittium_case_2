E-Index (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Index
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
_
All Classes and Interfaces
|
All Packages
|
Constant Field Values
|
Serialized Form
|
System Properties
E
3.3 Enum types
- Search tag in package javax.xml.xpath
Section
5.0 Event Notification
- Search tag in class javax.sql.rowset.BaseRowSet
Section
E
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for Engineering E, 34 x 44 in.
E
- Static variable in class java.lang.
Math
The
double
value that is closer than any other to
e
, the base of the natural logarithms.
E
- Static variable in class java.lang.
StrictMath
The
double
value that is closer than any other to
e
, the base of the natural logarithms.
E
- Static variable in class javax.print.attribute.standard.
MediaSize.Engineering
Specifies the engineering E size, 34 inch by 44 inch.
E
- Static variable in class javax.print.attribute.standard.
MediaSizeName
E size.
E_RESIZE_CURSOR
- Static variable in class java.awt.
Cursor
The east-resize cursor type.
E_RESIZE_CURSOR
- Static variable in class java.awt.
Frame
Deprecated.
replaced by
Cursor.E_RESIZE_CURSOR
.
EARLY_DYNASTIC_CUNEIFORM
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Early Dynastic Cuneiform" Unicode character block.
EAST
- Static variable in class java.awt.
BorderLayout
The east layout constraint (right side of container).
EAST
- Static variable in class java.awt.
GridBagConstraints
Put the component on the right side of its display area,
 centered vertically.
EAST
- Static variable in class javax.swing.
SpringLayout
Specifies the right edge of a component's bounding rectangle.
EAST
- Static variable in interface javax.swing.
SwingConstants
Compass-direction east (right).
EASTERN_ARABIC
- Enum constant in enum class java.awt.font.
NumericShaper.Range
The Arabic range with the Eastern Arabic-Indic digits.
EASTERN_ARABIC
- Static variable in class java.awt.font.
NumericShaper
Identifies the ARABIC range and ARABIC_EXTENDED decimal base.
eastPane
- Variable in class javax.swing.plaf.basic.
BasicInternalFrameUI
East pane
EC_TYPE
- Static variable in interface javax.xml.crypto.dsig.keyinfo.
KeyValue
URI identifying the EC KeyValue KeyInfo type:
 http://www.w3.org/2009/xmldsig11#ECKeyValue.
ECDSA_SHA1
- Static variable in interface javax.xml.crypto.dsig.
SignatureMethod
The
ECDSA-SHA1
(FIPS 180-4) signature method algorithm URI.
ECDSA_SHA224
- Static variable in interface javax.xml.crypto.dsig.
SignatureMethod
The
ECDSA-SHA224
(FIPS 180-4) signature method algorithm URI.
ECDSA_SHA256
- Static variable in interface javax.xml.crypto.dsig.
SignatureMethod
The
ECDSA-SHA256
(FIPS 180-4) signature method algorithm URI.
ECDSA_SHA384
- Static variable in interface javax.xml.crypto.dsig.
SignatureMethod
The
ECDSA-SHA384
(FIPS 180-4) signature method algorithm URI.
ECDSA_SHA512
- Static variable in interface javax.xml.crypto.dsig.
SignatureMethod
The
ECDSA-SHA512
(FIPS 180-4) signature method algorithm URI.
ECField
- Interface in
java.security.spec
This interface represents an elliptic curve (EC) finite field.
ECFieldF2m
- Class in
java.security.spec
This immutable class defines an elliptic curve (EC)
 characteristic 2 finite field.
ECFieldF2m(int)
- Constructor for class java.security.spec.
ECFieldF2m
Creates an elliptic curve characteristic 2 finite
 field which has 2^
m
elements with normal basis.
ECFieldF2m(int, int[])
- Constructor for class java.security.spec.
ECFieldF2m
Creates an elliptic curve characteristic 2 finite
 field which has 2^
m
elements with
 polynomial basis.
ECFieldF2m(int, BigInteger)
- Constructor for class java.security.spec.
ECFieldF2m
Creates an elliptic curve characteristic 2 finite
 field which has 2^
m
elements with
 polynomial basis.
ECFieldFp
- Class in
java.security.spec
This immutable class defines an elliptic curve (EC) prime
 finite field.
ECFieldFp(BigInteger)
- Constructor for class java.security.spec.
ECFieldFp
Creates an elliptic curve prime finite field
 with the specified prime
p
.
ECGenParameterSpec
- Class in
java.security.spec
This immutable class specifies the set of parameters used for
 generating elliptic curve (EC) domain parameters.
ECGenParameterSpec(String)
- Constructor for class java.security.spec.
ECGenParameterSpec
Creates a parameter specification for EC parameter
 generation using a standard (or predefined) name
stdName
in order to generate the corresponding
 (precomputed) elliptic curve domain parameters.
echoCharIsSet()
- Method in class java.awt.
TextField
Indicates whether or not this text field has a
 character set for echoing.
echoCharIsSet()
- Method in class javax.swing.
JPasswordField
Returns true if this
JPasswordField
has a character
 set for echoing.
ECKey
- Interface in
java.security.interfaces
The interface to an elliptic curve (EC) key.
ECParameterSpec
- Class in
java.security.spec
This immutable class specifies the set of domain parameters
 used with elliptic curve cryptography (ECC).
ECParameterSpec(EllipticCurve, ECPoint, BigInteger, int)
- Constructor for class java.security.spec.
ECParameterSpec
Creates elliptic curve domain parameters based on the
 specified values.
ECPoint
- Class in
java.security.spec
This immutable class represents a point on an elliptic curve (EC)
 in affine coordinates.
ECPoint(BigInteger, BigInteger)
- Constructor for class java.security.spec.
ECPoint
Creates an ECPoint from the specified affine x-coordinate
x
and affine y-coordinate
y
.
ECPrivateKey
- Interface in
java.security.interfaces
The interface to an elliptic curve (EC) private key.
ECPrivateKeySpec
- Class in
java.security.spec
This immutable class specifies an elliptic curve private key with
 its associated parameters.
ECPrivateKeySpec(BigInteger, ECParameterSpec)
- Constructor for class java.security.spec.
ECPrivateKeySpec
Creates a new ECPrivateKeySpec with the specified
 parameter values.
ECPublicKey
- Interface in
java.security.interfaces
The interface to an elliptic curve (EC) public key.
ECPublicKeySpec
- Class in
java.security.spec
This immutable class specifies an elliptic curve public key with
 its associated parameters.
ECPublicKeySpec(ECPoint, ECParameterSpec)
- Constructor for class java.security.spec.
ECPublicKeySpec
Creates a new ECPublicKeySpec with the specified
 parameter values.
ED25519
- Static variable in class java.security.spec.
NamedParameterSpec
The Ed25519 parameters
ED25519
- Static variable in interface javax.xml.crypto.dsig.
SignatureMethod
The
ED25519
signature method algorithm URI.
ED448
- Static variable in class java.security.spec.
NamedParameterSpec
The Ed448 parameters
ED448
- Static variable in interface javax.xml.crypto.dsig.
SignatureMethod
The
ED448
signature method algorithm URI.
EdDSAParameterSpec
- Class in
java.security.spec
A class used to specify EdDSA signature and verification parameters.
EdDSAParameterSpec(boolean)
- Constructor for class java.security.spec.
EdDSAParameterSpec
Construct an
EdDSAParameterSpec
by specifying whether the prehash mode
 is used.
EdDSAParameterSpec(boolean, byte[])
- Constructor for class java.security.spec.
EdDSAParameterSpec
Construct an
EdDSAParameterSpec
by specifying a context and whether the
 prehash mode is used.
EdECKey
- Interface in
java.security.interfaces
An interface for an elliptic curve public/private key as defined by
RFC 8032: Edwards-Curve
 Digital Signature Algorithm (EdDSA)
.
EdECPoint
- Class in
java.security.spec
An elliptic curve point used to specify keys as defined by
RFC 8032: Edwards-Curve
 Digital Signature Algorithm (EdDSA)
.
EdECPoint(boolean, BigInteger)
- Constructor for class java.security.spec.
EdECPoint
Construct an EdECPoint.
EdECPrivateKey
- Interface in
java.security.interfaces
An interface for an elliptic curve private key as defined by
RFC 8032: Edwards-Curve
 Digital Signature Algorithm (EdDSA)
.
EdECPrivateKeySpec
- Class in
java.security.spec
A class representing elliptic curve private keys as defined in
RFC 8032: Edwards-Curve
 Digital Signature Algorithm (EdDSA)
, including the curve and other
 algorithm parameters.
EdECPrivateKeySpec(NamedParameterSpec, byte[])
- Constructor for class java.security.spec.
EdECPrivateKeySpec
Construct a private key spec using the supplied parameters and
 bit string.
EdECPublicKey
- Interface in
java.security.interfaces
An interface for an elliptic curve public key as defined by
RFC 8032: Edwards-Curve
 Digital Signature Algorithm (EdDSA)
.
EdECPublicKeySpec
- Class in
java.security.spec
A class representing elliptic curve public keys as defined in
RFC 8032: Edwards-Curve
 Digital Signature Algorithm (EdDSA)
, including the curve and other
 algorithm parameters.
EdECPublicKeySpec(NamedParameterSpec, EdECPoint)
- Constructor for class java.security.spec.
EdECPublicKeySpec
Construct a public key spec using the supplied parameters and
 point.
EDGE_NO_OP
- Static variable in class java.awt.image.
ConvolveOp
Pixels at the edge of the source image are copied to
 the corresponding pixels in the destination without modification.
EDGE_SPACING
- Static variable in class javax.swing.border.
TitledBorder
Space between the border and the component's edge
EDGE_STITCH
- Static variable in class javax.print.attribute.standard.
Finishings
Bind the document(s) with one or more staples (wire stitches) along one
 edge.
EDGE_STITCH_BOTTOM
- Static variable in class javax.print.attribute.standard.
Finishings
Bind the document(s) with one or more staples (wire stitches) along the
 bottom edge.
EDGE_STITCH_LEFT
- Static variable in class javax.print.attribute.standard.
Finishings
Bind the document(s) with one or more staples (wire stitches) along the
 left edge.
EDGE_STITCH_RIGHT
- Static variable in class javax.print.attribute.standard.
Finishings
Bind the document(s) with one or more staples (wire stitches) along the
 right edge.
EDGE_STITCH_TOP
- Static variable in class javax.print.attribute.standard.
Finishings
Bind the document(s) with one or more staples (wire stitches) along the
 top edge.
EDGE_ZERO_FILL
- Static variable in class java.awt.image.
ConvolveOp
Pixels at the edge of the destination image are set to zero.
edit(File)
- Method in class java.awt.
Desktop
Launches the associated editor application and opens a file for
 editing.
EDIT
- Enum constant in enum class java.awt.
Desktop.Action
Represents an "edit" action.
editable
- Variable in class javax.swing.
JTree
Is the tree editable?
EDITABLE
- Static variable in class javax.accessibility.
AccessibleState
Indicates the user can change the contents of this object.
EDITABLE_PROPERTY
- Static variable in class javax.swing.
JTree
Bound property name for
editable
.
editablePropertyChanged(PropertyChangeEvent)
- Method in class javax.swing.plaf.metal.
MetalComboBoxUI
Deprecated.
As of Java 2 platform v1.4.
EDITBAR
- Static variable in class javax.accessibility.
AccessibleRole
A role indicating the object acts as a formula for calculating a value.
editCellAt(int, int)
- Method in class javax.swing.
JTable
Programmatically starts editing the cell at
row
and
column
, if those indices are in the valid range, and
 the cell at those indices is editable.
editCellAt(int, int, EventObject)
- Method in class javax.swing.
JTable
Programmatically starts editing the cell at
row
and
column
, if those indices are in the valid range, and
 the cell at those indices is editable.
editingCanceled(ChangeEvent)
- Method in interface javax.swing.event.
CellEditorListener
This tells the listeners the editor has canceled editing
editingCanceled(ChangeEvent)
- Method in class javax.swing.
JTable.AccessibleJTable
Invoked when editing is canceled.
editingCanceled(ChangeEvent)
- Method in class javax.swing.
JTable
Invoked when editing is canceled.
editingCanceled(ChangeEvent)
- Method in class javax.swing.plaf.basic.
BasicTreeUI.CellEditorHandler
Messaged when editing has been canceled in the tree.
editingColumn
- Variable in class javax.swing.
JTable
Identifies the column of the cell being edited.
editingComponent
- Variable in class javax.swing.plaf.basic.
BasicTreeUI
When editing, this will be the Component that is doing the actual
 editing.
editingComponent
- Variable in class javax.swing.tree.
DefaultTreeCellEditor
Component used in editing, obtained from the
editingContainer
.
editingContainer
- Variable in class javax.swing.tree.
DefaultTreeCellEditor
Editing container, will contain the
editorComponent
.
editingIcon
- Variable in class javax.swing.tree.
DefaultTreeCellEditor
Icon to use when editing.
editingPath
- Variable in class javax.swing.plaf.basic.
BasicTreeUI
Path that is being edited.
editingRow
- Variable in class javax.swing.
JTable
Identifies the row of the cell being edited.
editingRow
- Variable in class javax.swing.plaf.basic.
BasicTreeUI
Row that is being edited.
editingStopped(ChangeEvent)
- Method in interface javax.swing.event.
CellEditorListener
This tells the listeners the editor has ended editing
editingStopped(ChangeEvent)
- Method in class javax.swing.
JTable.AccessibleJTable
Track changes to a cell's contents.
editingStopped(ChangeEvent)
- Method in class javax.swing.
JTable
Invoked when editing is finished.
editingStopped(ChangeEvent)
- Method in class javax.swing.plaf.basic.
BasicTreeUI.CellEditorHandler
Messaged when editing has stopped in the tree.
editor
- Variable in class javax.swing.
JComboBox
This protected field is implementation specific.
editor
- Variable in class javax.swing.plaf.basic.
BasicComboBoxEditor
An instance of
JTextField
.
editor
- Variable in class javax.swing.plaf.basic.
BasicComboBoxUI
The Component that the
ComboBoxEditor
uses for editing.
EDITOR_PANE
- Static variable in class javax.swing.plaf.synth.
Region
EditorPane region.
editorBorderInsets
- Variable in class javax.swing.plaf.metal.
MetalBorders.TableHeaderBorder
The border insets.
editorBorderInsets
- Static variable in class javax.swing.plaf.metal.
MetalComboBoxEditor
The default editor border
Insets
.
editorComp
- Variable in class javax.swing.
JTable
If editing, the
Component
that is handling the editing.
editorComponent
- Variable in class javax.swing.
DefaultCellEditor
The Swing component being edited.
EditorContainer()
- Constructor for class javax.swing.tree.
DefaultTreeCellEditor.EditorContainer
Constructs an
EditorContainer
object.
EditorContainer()
- Method in class javax.swing.tree.
DefaultTreeCellEditor.EditorContainer
Do not use.
EditorDelegate()
- Constructor for class javax.swing.
DefaultCellEditor.EditorDelegate
Constructs an
EditorDelegate
.
editorHasDifferentSize
- Variable in class javax.swing.plaf.basic.
BasicTreeUI
Set to true if the editor has a different size than the renderer.
EditorKit
- Class in
javax.swing.text
Establishes the set of things needed by a text component
 to be a reasonably functioning editor for some
type
of text content.
EditorKit()
- Constructor for class javax.swing.text.
EditorKit
Construct an EditorKit.
edits
- Variable in class javax.swing.undo.
CompoundEdit
The collection of
UndoableEdit
s
 undone/redone en masse by this
CompoundEdit
.
editToBeRedone()
- Method in class javax.swing.undo.
UndoManager
Returns the next significant edit to be redone if
redo
is invoked.
editToBeUndone()
- Method in class javax.swing.undo.
UndoManager
Returns the next significant edit to be undone if
undo
is invoked.
EGYPTIAN_HIEROGLYPH_FORMAT_CONTROLS
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Egyptian Hieroglyph Format Controls" Unicode
 character block.
EGYPTIAN_HIEROGLYPHS
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Egyptian_Hieroglyphs".
EGYPTIAN_HIEROGLYPHS
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Egyptian Hieroglyphs" Unicode character block.
ELBASAN
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Elbasan".
ELBASAN
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Elbasan" Unicode character block.
element
- Variable in class javax.swing.text.
DefaultStyledDocument.AttributeUndoableEdit
Affected Element.
element()
- Method in exception class java.lang.annotation.
AnnotationTypeMismatchException
Returns the
Method
object for the incorrectly typed element.
element()
- Method in class java.util.
AbstractQueue
Retrieves, but does not remove, the head of this queue.
element()
- Method in class java.util.
ArrayDeque
Retrieves, but does not remove, the head of the queue represented by
 this deque.
element()
- Method in interface java.util.concurrent.
BlockingDeque
Retrieves, but does not remove, the head of the queue represented by
 this deque (in other words, the first element of this deque).
element()
- Method in class java.util.concurrent.
ConcurrentLinkedDeque
element()
- Method in class java.util.concurrent.
LinkedBlockingDeque
Retrieves, but does not remove, the head of the queue represented by
 this deque.
element()
- Method in interface java.util.
Deque
Retrieves, but does not remove, the head of the queue represented by
 this deque (in other words, the first element of this deque).
element()
- Method in class java.util.
LinkedList
Retrieves, but does not remove, the head (first element) of this list.
element()
- Method in interface java.util.
Queue
Retrieves, but does not remove, the head of this queue.
Element
- Class in
javax.swing.text.html.parser
An element as described in a DTD using the ELEMENT construct.
Element
- Interface in
javax.lang.model.element
Represents a program element such as a module, package, class, or method.
Element
- Interface in
javax.swing.text
Interface to describe a structural piece of a document.
Element
- Interface in
org.w3c.dom
The
Element
interface represents an element in an HTML or XML
 document.
ELEMENT
- Enum constant in enum class jdk.dynalink.
StandardNamespace
Standard namespace for elements of a collection object.
ELEMENT_NODE
- Static variable in interface org.w3c.dom.
Node
The node is an
Element
.
elementAt(int)
- Method in class java.util.
Vector
Returns the component at the specified index.
elementAt(int)
- Method in class javax.swing.
DefaultListModel
Returns the component at the specified index.
ElementBuffer(Element)
- Constructor for class javax.swing.text.
DefaultStyledDocument.ElementBuffer
Creates a new ElementBuffer.
elementCount
- Variable in class java.util.
Vector
The number of valid components in this
Vector
object.
elementCount
- Variable in class javax.management.monitor.
Monitor
The number of valid components in the vector of observed objects.
elementCount()
- Method in interface java.lang.foreign.
SequenceLayout
PREVIEW
Returns the element count of this sequence layout.
elementCountToTag(HTMLDocument, int, HTML.Tag)
- Method in class javax.swing.text.html.
HTMLEditorKit.HTMLTextAction
Returns number of elements, starting at the deepest leaf, needed
 to get to an element representing
tag
.
ElementCSSInlineStyle
- Interface in
org.w3c.dom.css
Inline style information attached to elements is exposed through the
style
attribute.
elementData
- Variable in class java.util.
Vector
The array buffer into which the components of the vector are
 stored.
elementDecl(String, String)
- Method in interface org.xml.sax.ext.
DeclHandler
Report an element type declaration.
elementDecl(String, String)
- Method in class org.xml.sax.ext.
DefaultHandler2
ElementEdit(Element, int, Element[], Element[])
- Constructor for class javax.swing.text.
AbstractDocument.ElementEdit
Constructs an edit record.
ElementFilter
- Class in
javax.lang.model.util
Filters for selecting just the elements of interest from a
 collection of elements.
elementHash
- Variable in class javax.swing.text.html.parser.
DTD
The hash table contains the name of element and
 the corresponding element.
ElementIterator
- Class in
javax.swing.text
ElementIterator
, as the name suggests, iterates over the
Element
tree.
ElementIterator(Document)
- Constructor for class javax.swing.text.
ElementIterator
Creates a new
ElementIterator
.
ElementIterator(Element)
- Constructor for class javax.swing.text.
ElementIterator
Creates a new
ElementIterator
.
ElementKind
- Enum Class in
javax.lang.model.element
The
kind
of an element.
ElementKindVisitor14<R,
P>
- Class in
javax.lang.model.util
A visitor of program elements based on their
kind
with default behavior appropriate for the
RELEASE_14
source version.
ElementKindVisitor14()
- Constructor for class javax.lang.model.util.
ElementKindVisitor14
Constructor for concrete subclasses; uses
null
for the
 default value.
ElementKindVisitor14(R)
- Constructor for class javax.lang.model.util.
ElementKindVisitor14
Constructor for concrete subclasses; uses the argument for the
 default value.
ElementKindVisitor6<R,
P>
- Class in
javax.lang.model.util
A visitor of program elements based on their
kind
with default behavior appropriate for the
RELEASE_6
source version.
ElementKindVisitor6()
- Constructor for class javax.lang.model.util.
ElementKindVisitor6
Deprecated.
Release 6 is obsolete; update to a visitor for a newer
 release level.
ElementKindVisitor6(R)
- Constructor for class javax.lang.model.util.
ElementKindVisitor6
Deprecated.
Release 6 is obsolete; update to a visitor for a newer
 release level.
ElementKindVisitor7<R,
P>
- Class in
javax.lang.model.util
A visitor of program elements based on their
kind
with default behavior appropriate for the
RELEASE_7
source version.
ElementKindVisitor7()
- Constructor for class javax.lang.model.util.
ElementKindVisitor7
Deprecated.
Release 7 is obsolete; update to a visitor for a newer
 release level.
ElementKindVisitor7(R)
- Constructor for class javax.lang.model.util.
ElementKindVisitor7
Deprecated.
Release 7 is obsolete; update to a visitor for a newer
 release level.
ElementKindVisitor8<R,
P>
- Class in
javax.lang.model.util
A visitor of program elements based on their
kind
with default behavior appropriate for the
RELEASE_8
source version.
ElementKindVisitor8()
- Constructor for class javax.lang.model.util.
ElementKindVisitor8
Constructor for concrete subclasses; uses
null
for the
 default value.
ElementKindVisitor8(R)
- Constructor for class javax.lang.model.util.
ElementKindVisitor8
Constructor for concrete subclasses; uses the argument for the
 default value.
ElementKindVisitor9<R,
P>
- Class in
javax.lang.model.util
A visitor of program elements based on their
kind
with default behavior appropriate for source
 versions
RELEASE_9
through
RELEASE_14
.
ElementKindVisitor9()
- Constructor for class javax.lang.model.util.
ElementKindVisitor9
Constructor for concrete subclasses; uses
null
for the
 default value.
ElementKindVisitor9(R)
- Constructor for class javax.lang.model.util.
ElementKindVisitor9
Constructor for concrete subclasses; uses the argument for the
 default value.
elementLayout()
- Method in interface java.lang.foreign.
SequenceLayout
PREVIEW
Returns the element layout of this sequence layout.
elementName()
- Method in exception class java.lang.annotation.
IncompleteAnnotationException
Returns the name of the missing element.
ElementNameAttribute
- Static variable in class javax.swing.text.
AbstractDocument
Name of the attribute used to specify element
 names.
elements
- Variable in class javax.swing.text.html.parser.
DTD
The vector of elements
elements()
- Method in class java.security.
PermissionCollection
Returns an enumeration of all the Permission objects in the collection.
elements()
- Method in class java.security.
Permissions
Returns an enumeration of all the
Permission
objects in all the
PermissionCollection
objects in this
Permissions
object.
elements()
- Method in class java.util.concurrent.
ConcurrentHashMap
Returns an enumeration of the values in this table.
elements()
- Method in class java.util.
Dictionary
Returns an enumeration of the values in this dictionary.
elements()
- Method in class java.util.
Hashtable
Returns an enumeration of the values in this hashtable.
elements()
- Method in class java.util.
Vector
Returns an enumeration of the components of this vector.
elements()
- Method in class javax.swing.
DefaultListModel
Returns an enumeration of the components of this list.
elements(MemoryLayout)
- Method in interface java.lang.foreign.
MemorySegment
PREVIEW
Returns a sequential
Stream
over disjoint slices (whose size matches that of the specified layout)
 in this segment.
Elements
- Interface in
javax.lang.model.util
Utility methods for operating on program elements.
Elements.Origin
- Enum Class in
javax.lang.model.util
The
origin
of an element or other language model
 item.
elementsAsStream()
- Method in class java.security.
PermissionCollection
Returns a stream of all the Permission objects in the collection.
ElementScanner14<R,
P>
- Class in
javax.lang.model.util
A scanning visitor of program elements with default behavior
 appropriate for the
RELEASE_14
source version.
ElementScanner14()
- Constructor for class javax.lang.model.util.
ElementScanner14
Constructor for concrete subclasses; uses
null
for the
 default value.
ElementScanner14(R)
- Constructor for class javax.lang.model.util.
ElementScanner14
Constructor for concrete subclasses; uses the argument for the
 default value.
ElementScanner6<R,
P>
- Class in
javax.lang.model.util
A scanning visitor of program elements with default behavior
 appropriate for the
RELEASE_6
source version.
ElementScanner6()
- Constructor for class javax.lang.model.util.
ElementScanner6
Deprecated.
Release 6 is obsolete; update to a visitor for a newer
 release level.
ElementScanner6(R)
- Constructor for class javax.lang.model.util.
ElementScanner6
Deprecated.
Release 6 is obsolete; update to a visitor for a newer
 release level.
ElementScanner7<R,
P>
- Class in
javax.lang.model.util
A scanning visitor of program elements with default behavior
 appropriate for the
RELEASE_7
source version.
ElementScanner7()
- Constructor for class javax.lang.model.util.
ElementScanner7
Deprecated.
Release 7 is obsolete; update to a visitor for a newer
 release level.
ElementScanner7(R)
- Constructor for class javax.lang.model.util.
ElementScanner7
Deprecated.
Release 7 is obsolete; update to a visitor for a newer
 release level.
ElementScanner8<R,
P>
- Class in
javax.lang.model.util
A scanning visitor of program elements with default behavior
 appropriate for the
RELEASE_8
source version.
ElementScanner8()
- Constructor for class javax.lang.model.util.
ElementScanner8
Constructor for concrete subclasses; uses
null
for the
 default value.
ElementScanner8(R)
- Constructor for class javax.lang.model.util.
ElementScanner8
Constructor for concrete subclasses; uses the argument for the
 default value.
ElementScanner9<R,
P>
- Class in
javax.lang.model.util
A scanning visitor of program elements with default behavior
 appropriate for source versions
RELEASE_9
through
RELEASE_14
.
ElementScanner9()
- Constructor for class javax.lang.model.util.
ElementScanner9
Constructor for concrete subclasses; uses
null
for the
 default value.
ElementScanner9(R)
- Constructor for class javax.lang.model.util.
ElementScanner9
Constructor for concrete subclasses; uses the argument for the
 default value.
elementSize()
- Method in class jdk.incubator.vector.
Vector
Returns the size of each lane, in bits, of this vector.
elementSize()
- Method in interface jdk.incubator.vector.
VectorSpecies
Returns the lane size, in bits, of vectors of this
 species.
elementSize(Class<?>)
- Static method in interface jdk.incubator.vector.
VectorSpecies
Returns the bit-size of the given vector element type (
ETYPE
).
ElementSpec(AttributeSet, short)
- Constructor for class javax.swing.text.
DefaultStyledDocument.ElementSpec
Constructor useful for markup when the markup will not
 be stored in the document.
ElementSpec(AttributeSet, short, char[], int, int)
- Constructor for class javax.swing.text.
DefaultStyledDocument.ElementSpec
Constructor for creating a spec externally for batch
 input of content and markup into the document.
ElementSpec(AttributeSet, short, int)
- Constructor for class javax.swing.text.
DefaultStyledDocument.ElementSpec
Constructor for parsing inside the document when
 the data has already been added, but len information
 is needed.
ElementTraversal
- Interface in
org.w3c.dom
The
ElementTraversal
interface is a set of read-only attributes
 which allow an author to easily navigate between elements in a document.
elementType()
- Method in class jdk.incubator.vector.
Vector
Returns the primitive
element type
(
ETYPE
) of this vector.
elementType()
- Method in interface jdk.incubator.vector.
VectorSpecies
Returns the primitive element type of vectors of this
 species.
ElementType
- Enum Class in
java.lang.annotation
The constants of this enumerated class provide a simple classification of the
 syntactic locations where annotations may appear in a Java program.
ElementVisitor<R,
P>
- Interface in
javax.lang.model.element
A visitor of program elements, in the style of the visitor design
 pattern.
Ellipse2D
- Class in
java.awt.geom
The
Ellipse2D
class describes an ellipse that is defined
 by a framing rectangle.
Ellipse2D()
- Constructor for class java.awt.geom.
Ellipse2D
This is an abstract class that cannot be instantiated directly.
Ellipse2D.Double
- Class in
java.awt.geom
The
Double
class defines an ellipse specified
 in
double
precision.
Ellipse2D.Float
- Class in
java.awt.geom
The
Float
class defines an ellipse specified
 in
float
precision.
EllipticCurve
- Class in
java.security.spec
This immutable class holds the necessary values needed to represent
 an elliptic curve.
EllipticCurve(ECField, BigInteger, BigInteger)
- Constructor for class java.security.spec.
EllipticCurve
Creates an elliptic curve with the specified elliptic field
field
and the coefficients
a
and
b
.
EllipticCurve(ECField, BigInteger, BigInteger, byte[])
- Constructor for class java.security.spec.
EllipticCurve
Creates an elliptic curve with the specified elliptic field
field
, the coefficients
a
and
b
, and the
seed
used for curve generation.
ELYMAIC
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Elymaic".
ELYMAIC
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Elymaic" Unicode
 character block.
EM
- Static variable in class javax.swing.text.html.
HTML.Tag
Tag <em>
EMBEDDED_BY
- Static variable in class javax.accessibility.
AccessibleRelation
Indicates that an object is embedded in one or more objects.
EMBEDDED_BY_PROPERTY
- Static variable in class javax.accessibility.
AccessibleRelation
Indicates the
EMBEDDED_BY
relation between two or more objects
 has changed.
EMBEDS
- Static variable in class javax.accessibility.
AccessibleRelation
Indicates that an object has one or more objects embedded in it.
EMBEDS_PROPERTY
- Static variable in class javax.accessibility.
AccessibleRelation
Indicates the
EMBEDS
relation between two or more objects has
 changed.
EMOTICONS
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Emoticons" Unicode character block.
empty()
- Static method in class java.lang.module.
Configuration
Returns the
empty
configuration.
empty()
- Static method in class java.lang.
ModuleLayer
Returns the
empty
layer.
empty()
- Static method in class java.util.
Optional
Returns an empty
Optional
instance.
empty()
- Static method in class java.util.
OptionalDouble
Returns an empty
OptionalDouble
instance.
empty()
- Static method in class java.util.
OptionalInt
Returns an empty
OptionalInt
instance.
empty()
- Static method in class java.util.
OptionalLong
Returns an empty
OptionalLong
instance.
empty()
- Method in class java.util.
Stack
Tests if this stack is empty.
empty()
- Static method in interface java.util.stream.
DoubleStream
Returns an empty sequential
DoubleStream
.
empty()
- Static method in interface java.util.stream.
IntStream
Returns an empty sequential
IntStream
.
empty()
- Static method in interface java.util.stream.
LongStream
Returns an empty sequential
LongStream
.
empty()
- Static method in interface java.util.stream.
Stream
Returns an empty sequential
Stream
.
empty()
- Method in class javax.swing.text.html.parser.
ContentModel
Return true if the content model could
 match an empty input stream.
empty(MethodType)
- Static method in class java.lang.invoke.
MethodHandles
Produces a method handle of the requested type which ignores any arguments, does nothing,
 and returns a suitable default depending on the return type.
EMPTY
- Enum constant in enum class com.sun.source.doctree.
AttributeTree.ValueKind
The attribute value is empty.
EMPTY
- Enum constant in enum class jdk.jshell.
SourceCodeAnalysis.Completeness
An empty input.
EMPTY
- Static variable in interface javax.swing.text.html.parser.
DTDConstants
The DTD constant corresponds to EMPTY
EMPTY
- Static variable in class javax.swing.text.
SimpleAttributeSet
An empty attribute set.
EMPTY_DESCRIPTOR
- Static variable in class javax.management.
ImmutableDescriptor
An empty descriptor.
EMPTY_ENUMERATION
- Static variable in class javax.swing.tree.
DefaultMutableTreeNode
An enumeration that is always empty.
EMPTY_LIST
- Static variable in class java.util.
Collections
The empty list (immutable).
EMPTY_MAP
- Static variable in class java.util.
Collections
The empty map (immutable).
EMPTY_SET
- Static variable in class java.util.
Collections
The empty set (immutable).
EMPTY_STATEMENT
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
EmptyStatementTree
.
EmptyBorder
- Class in
javax.swing.border
A class which provides an empty, transparent border which
 takes up space but does no drawing.
EmptyBorder(int, int, int, int)
- Constructor for class javax.swing.border.
EmptyBorder
Creates an empty border with the specified insets.
EmptyBorder(Insets)
- Constructor for class javax.swing.border.
EmptyBorder
Creates an empty border with the specified insets.
EmptyBorderUIResource(int, int, int, int)
- Constructor for class javax.swing.plaf.
BorderUIResource.EmptyBorderUIResource
Constructs an
EmptyBorderUIResource
.
EmptyBorderUIResource(Insets)
- Constructor for class javax.swing.plaf.
BorderUIResource.EmptyBorderUIResource
Constructs an
EmptyBorderUIResource
.
emptyDoubleSpliterator()
- Static method in class java.util.
Spliterators
Creates an empty
Spliterator.OfDouble
emptyEnumeration()
- Static method in class java.util.
Collections
Returns an enumeration that has no elements.
emptyIntSpliterator()
- Static method in class java.util.
Spliterators
Creates an empty
Spliterator.OfInt
emptyIterator()
- Static method in class java.util.
Collections
Returns an iterator that has no elements.
emptyList()
- Static method in class java.util.
Collections
Returns an empty list (immutable).
emptyListIterator()
- Static method in class java.util.
Collections
Returns a list iterator that has no elements.
emptyLongSpliterator()
- Static method in class java.util.
Spliterators
Creates an empty
Spliterator.OfLong
emptyMap()
- Static method in class java.util.
Collections
Returns an empty map (immutable).
emptyNavigableMap()
- Static method in class java.util.
Collections
Returns an empty navigable map (immutable).
emptyNavigableSet()
- Static method in class java.util.
Collections
Returns an empty navigable set (immutable).
EmptySelectionModel()
- Constructor for class javax.swing.
JTree.EmptySelectionModel
Constructs an
EmptySelectionModel
.
emptySet()
- Static method in class java.util.
Collections
Returns an empty set (immutable).
emptySortedMap()
- Static method in class java.util.
Collections
Returns an empty sorted map (immutable).
emptySortedSet()
- Static method in class java.util.
Collections
Returns an empty sorted set (immutable).
emptySpliterator()
- Static method in class java.util.
Spliterators
Creates an empty
Spliterator
EmptyStackException
- Exception Class in
java.util
Thrown by methods in the
Stack
class to indicate
 that the stack is empty.
EmptyStackException()
- Constructor for exception class java.util.
EmptyStackException
Constructs a new
EmptyStackException
with
null
as its error message string.
EmptyStatementTree
- Interface in
com.sun.source.tree
A tree node for an empty (skip) statement.
emptyTag(Element)
- Method in class javax.swing.text.html.
HTMLWriter
Writes out all empty elements (all tags that have no
 corresponding end tag).
enable()
- Method in interface com.sun.jdi.request.
EventRequest
Same as
setEnabled(true)
.
enable()
- Method in class java.awt.
Component
Deprecated.
As of JDK version 1.1,
 replaced by
setEnabled(boolean)
.
enable()
- Method in class java.awt.
MenuItem
Deprecated.
As of JDK version 1.1,
 replaced by
setEnabled(boolean)
.
enable()
- Method in class javax.swing.
JComponent
Deprecated.
As of JDK version 1.1,
 replaced by
java.awt.Component.setEnabled(boolean)
.
enable(boolean)
- Method in class java.awt.
Component
Deprecated.
As of JDK version 1.1,
 replaced by
setEnabled(boolean)
.
enable(boolean)
- Method in class java.awt.
MenuItem
Deprecated.
As of JDK version 1.1,
 replaced by
setEnabled(boolean)
.
enable(Class<? extends Event>)
- Method in class jdk.jfr.consumer.
RecordingStream
Enables event.
enable(Class<? extends Event>)
- Method in class jdk.jfr.
Recording
Enables event.
enable(String)
- Method in class jdk.jfr.consumer.
RecordingStream
Enables the event with the specified name.
enable(String)
- Method in class jdk.jfr.
Recording
Enables the event with the specified name.
enable(String)
- Method in class jdk.management.jfr.
RemoteRecordingStream
Enables the event with the specified name.
enableActions()
- Method in class javax.swing.plaf.basic.
BasicInternalFrameTitlePane
Enables actions.
enableAllObjectNames()
- Method in class javax.management.relation.
MBeanServerNotificationFilter
Enables all MBeanServerNotifications (all ObjectNames are selected).
enableAttribute(String)
- Method in class javax.management.
AttributeChangeNotificationFilter
Enables all the attribute change notifications the attribute name of which equals
 the specified name to be sent to the listener.
enableClientWindowNotification(InputMethod, boolean)
- Method in interface java.awt.im.spi.
InputMethodContext
Enables or disables notification of the current client window's
 location and state for the specified input method.
enableCollection()
- Method in interface com.sun.jdi.
ObjectReference
Permits garbage collection for this object.
enabled
- Variable in class javax.swing.
AbstractAction
Specifies whether action is enabled; the default is true.
Enabled
- Annotation Interface in
jdk.jfr
Event annotation, determines if an event should be enabled by default.
ENABLED
- Static variable in class javax.accessibility.
AccessibleState
Indicates this object is enabled.
ENABLED
- Static variable in class javax.swing.
DefaultButtonModel
Identifies the "enabled" bit in the bitmask, which
 indicates that the button can be selected by
 an input device (such as a mouse pointer).
ENABLED
- Static variable in interface javax.swing.plaf.synth.
SynthConstants
Primary state indicating the component is enabled.
enableEvents(long)
- Method in class java.awt.
Component
Enables the events defined by the specified event mask parameter
 to be delivered to this component.
enableEvents(long)
- Method in class java.awt.
MenuItem
Enables event delivery to this menu item for events
 to be defined by the specified event mask parameter
enableInputMethods(boolean)
- Method in class java.awt.
Component
Enables or disables input method support for this component.
enableInputMethods(boolean)
- Method in class java.awt.
TextComponent
Enables or disables input method support for this text component.
enableNativeAccess(Module)
- Method in class java.lang.
ModuleLayer.Controller
Enables native access for a module in the layer if the caller's module
 has native access.
enableObjectName(ObjectName)
- Method in class javax.management.relation.
MBeanServerNotificationFilter
Enables MBeanServerNotifications concerning given ObjectName.
enableReplaceObject(boolean)
- Method in class java.io.
ObjectOutputStream
Enables the stream to do replacement of objects written to the stream.
enableResizedPosting()
- Method in class javax.swing.table.
TableColumn
Deprecated.
as of Java 2 platform v1.3
enableResolveObject(boolean)
- Method in class java.io.
ObjectInputStream
Enables the stream to do replacement of objects read from the stream.
enableSuddenTermination()
- Method in class java.awt.
Desktop
Enables this application to be suddenly terminated.
enableType(String)
- Method in class javax.management.
NotificationFilterSupport
Enables all the notifications the type of which starts with the specified prefix
 to be sent to the listener.
encapsulate()
- Method in class javax.crypto.
KEM.Encapsulator
The key encapsulation function.
encapsulate(int, int, String)
- Method in class javax.crypto.
KEM.Encapsulator
The key encapsulation function.
Encapsulated(SecretKey, byte[], byte[])
- Constructor for class javax.crypto.
KEM.Encapsulated
Constructs an
Encapsulated
object.
encapsulation()
- Method in class javax.crypto.
KEM.Encapsulated
Returns the key encapsulation message.
encapsulationSize()
- Method in class javax.crypto.
KEM.Decapsulator
Returns the size of the key encapsulation message.
encapsulationSize()
- Method in class javax.crypto.
KEM.Encapsulator
Returns the size of the key encapsulation message.
ENCLOSED_ALPHANUMERIC_SUPPLEMENT
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Enclosed Alphanumeric Supplement" Unicode character
 block.
ENCLOSED_ALPHANUMERICS
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Enclosed Alphanumerics" Unicode character block.
ENCLOSED_CJK_LETTERS_AND_MONTHS
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Enclosed CJK Letters and Months" Unicode character block.
ENCLOSED_IDEOGRAPHIC_SUPPLEMENT
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Enclosed Ideographic Supplement" Unicode character
 block.
ENCLOSING_MARK
- Static variable in class java.lang.
Character
General category "Me" in the Unicode specification.
encode(byte[])
- Method in class java.util.
Base64.Encoder
Encodes all bytes from the specified byte array into a newly-allocated
 byte array using the
Base64
encoding scheme.
encode(byte[], byte[])
- Method in class java.util.
Base64.Encoder
Encodes all bytes from the specified byte array using the
Base64
encoding scheme, writing the resulting bytes to the
 given output byte array, starting at offset 0.
encode(OutputStream)
- Method in interface java.security.cert.
Extension
Generates the extension's DER encoding and writes it to the output
 stream.
encode(OutputStream)
- Method in interface java.security.
Certificate
Deprecated.
Encodes the certificate to an output stream in a format that can
 be decoded by the
decode
method.
encode(String)
- Static method in class java.net.
URLEncoder
Deprecated.
The resulting string may vary depending on the
             default charset. Instead, use the encode(String,String)
             method to specify the encoding.
encode(String)
- Method in class java.nio.charset.
Charset
Convenience method that encodes a string into bytes in this charset.
encode(String, String)
- Static method in class java.net.
URLEncoder
Translates a string into
application/x-www-form-urlencoded
format using a specific encoding scheme.
encode(String, Charset)
- Static method in class java.net.
URLEncoder
Translates a string into
application/x-www-form-urlencoded
format using a specific
Charset
.
encode(ByteBuffer)
- Method in class java.util.
Base64.Encoder
Encodes all remaining bytes from the specified byte buffer into
 a newly-allocated ByteBuffer using the
Base64
encoding
 scheme.
encode(CharBuffer)
- Method in class java.nio.charset.
Charset
Convenience method that encodes Unicode characters into bytes in this
 charset.
encode(CharBuffer)
- Method in class java.nio.charset.
CharsetEncoder
Convenience method that encodes the remaining content of a single input
 character buffer into a newly-allocated byte buffer.
encode(CharBuffer, ByteBuffer, boolean)
- Method in class java.nio.charset.
CharsetEncoder
Encodes as many characters as possible from the given input buffer,
 writing the results to the given output buffer.
encodeDataFlavor(DataFlavor)
- Static method in class java.awt.datatransfer.
SystemFlavorMap
Encodes a
DataFlavor
for use as a
String
native.
EncodedKeySpec
- Class in
java.security.spec
This class represents a public or private key in encoded format.
EncodedKeySpec(byte[])
- Constructor for class java.security.spec.
EncodedKeySpec
Creates a new
EncodedKeySpec
with the given encoded key.
EncodedKeySpec(byte[], String)
- Constructor for class java.security.spec.
EncodedKeySpec
Creates a new
EncodedKeySpec
with the given encoded key.
encodedParams
- Variable in class javax.crypto.
SealedObject
The cryptographic parameters used by the sealing
Cipher
object,
 encoded in the default format.
encodeJavaMIMEType(String)
- Static method in class java.awt.datatransfer.
SystemFlavorMap
Encodes a MIME type for use as a
String
native.
encodeLoop(CharBuffer, ByteBuffer)
- Method in class java.nio.charset.
CharsetEncoder
Encodes one or more characters into one or more bytes.
Encoder
- Class in
java.beans
An
Encoder
is a class which can be used to create
 files or streams that encode the state of a collection of
 JavaBeans in terms of their public APIs.
Encoder()
- Constructor for class java.beans.
Encoder
Constructs an
Encoder
.
encodeToString(byte[])
- Method in class java.util.
Base64.Encoder
Encodes the specified byte array into a String using the
Base64
encoding scheme.
encoding
- Variable in class javax.sound.sampled.
AudioFormat
The audio encoding technique used by this format.
Encoding(String)
- Constructor for class javax.sound.sampled.
AudioFormat.Encoding
Constructs a new encoding.
ENCODING
- Static variable in class javax.xml.transform.
OutputKeys
encoding =
string
.
encodingSet()
- Method in interface javax.xml.stream.events.
StartDocument
Returns true if CharacterEncodingScheme is set in
 the encoding declaration of the document
ENCRYPT
- Static variable in class javax.xml.crypto.
KeySelector.Purpose
A key for encrypting.
ENCRYPT_MODE
- Static variable in class javax.crypto.
Cipher
Constant used to initialize cipher to encryption mode.
EncryptedPrivateKeyInfo
- Class in
javax.crypto
This class implements the
EncryptedPrivateKeyInfo
type
 as defined in PKCS #8.
EncryptedPrivateKeyInfo(byte[])
- Constructor for class javax.crypto.
EncryptedPrivateKeyInfo
Constructs (i.e., parses) an
EncryptedPrivateKeyInfo
from
 its ASN.1 encoding.
EncryptedPrivateKeyInfo(String, byte[])
- Constructor for class javax.crypto.
EncryptedPrivateKeyInfo
Constructs an
EncryptedPrivateKeyInfo
from the
 encryption algorithm name and the encrypted data.
EncryptedPrivateKeyInfo(AlgorithmParameters, byte[])
- Constructor for class javax.crypto.
EncryptedPrivateKeyInfo
Constructs an
EncryptedPrivateKeyInfo
from the
 encryption algorithm parameters and the encrypted data.
EncryptionKey
- Class in
javax.security.auth.kerberos
This class encapsulates an EncryptionKey used in Kerberos.
EncryptionKey(byte[], int)
- Constructor for class javax.security.auth.kerberos.
EncryptionKey
Constructs an
EncryptionKey
from the given bytes and
 the key type.
ENCTYPE
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "enctype"
end()
- Method in class java.awt.
PrintJob
Ends the print job and does any necessary cleanup.
end()
- Method in class java.nio.channels.spi.
AbstractSelector
Marks the end of an I/O operation that might block indefinitely.
end()
- Method in class java.util.regex.
Matcher
Returns the offset after the last character matched.
end()
- Method in interface java.util.regex.
MatchResult
Returns the offset after the last character matched.
end()
- Method in class java.util.zip.
Deflater
Closes the compressor and discards any unprocessed input.
end()
- Method in class java.util.zip.
Inflater
Closes the decompressor and discards any unprocessed input.
end()
- Method in class javax.swing.undo.
CompoundEdit
Sets
inProgress
to false.
end()
- Method in class javax.swing.undo.
StateEdit
Gets the post-edit state of the StateEditable object and
 ends the edit.
end()
- Method in class javax.swing.undo.
UndoManager
Turns this
UndoManager
into a normal
CompoundEdit
.
end()
- Method in class jdk.jfr.
Event
Ends the timing of this event.
end()
- Method in record class jdk.jshell.
SourceCodeAnalysis.Highlight
Returns the value of the
end
record component.
end(boolean)
- Method in class java.nio.channels.spi.
AbstractInterruptibleChannel
Marks the end of an I/O operation that might block indefinitely.
end(int)
- Method in class java.util.regex.
Matcher
Returns the offset after the last character of the subsequence
 captured by the given group during the previous match operation.
end(int)
- Method in interface java.util.regex.
MatchResult
Returns the offset after the last character of the subsequence
 captured by the given group during this match.
end(String)
- Method in class java.util.regex.
Matcher
Returns the offset after the last character of the subsequence
 captured by the given
named-capturing
 group
during the previous match operation.
end(String)
- Method in interface java.util.regex.
MatchResult
Returns the offset after the last character of the subsequence
 captured by the given
named-capturing
 group
during the previous match operation.
end(HTML.Tag)
- Method in class javax.swing.text.html.
HTMLDocument.HTMLReader.TagAction
Called when an end tag is seen for the
 type of tag this action was registered
 to.
end(Xid, int)
- Method in interface javax.transaction.xa.
XAResource
Ends the work performed on behalf of a transaction branch.
END
- Static variable in class java.awt.
Event
Deprecated.
The End key, a non-ASCII action key.
END_DOCUMENT
- Static variable in interface javax.xml.stream.
XMLStreamConstants
Indicates an event is an end document
END_ELEMENT
- Enum constant in enum class com.sun.source.doctree.
DocTree.Kind
Used for instances of
EndElementTree
representing the end of an HTML element.
END_ELEMENT
- Static variable in interface javax.xml.stream.
XMLStreamConstants
Indicates an event is an end element
END_OF_EXCLUSIVE
- Static variable in class javax.sound.midi.
ShortMessage
Status byte for End of System Exclusive message (0xF7, or 247).
END_PUNCTUATION
- Static variable in class java.lang.
Character
General category "Pe" in the Unicode specification.
END_TO_END
- Static variable in interface org.w3c.dom.ranges.
Range
Compare end boundary-point of
sourceRange
to end
 boundary-point of Range on which
compareBoundaryPoints
is invoked.
END_TO_START
- Static variable in interface org.w3c.dom.ranges.
Range
Compare end boundary-point of
sourceRange
to start
 boundary-point of Range on which
compareBoundaryPoints
is invoked.
endAction
- Static variable in class javax.swing.text.
DefaultEditorKit
Name of the
Action
for moving the caret
 to the end of the document.
endCDATA()
- Method in class org.xml.sax.ext.
DefaultHandler2
endCDATA()
- Method in interface org.xml.sax.ext.
LexicalHandler
Report the end of a CDATA section.
ENDCOM
- Static variable in class java.util.jar.
JarEntry
End of central directory (END) header zip file comment length field offset.
ENDCOM
- Static variable in class java.util.jar.
JarFile
End of central directory (END) header zip file comment length field offset.
ENDCOM
- Static variable in class java.util.jar.
JarInputStream
End of central directory (END) header zip file comment length field offset.
ENDCOM
- Static variable in class java.util.jar.
JarOutputStream
End of central directory (END) header zip file comment length field offset.
ENDCOM
- Static variable in class java.util.zip.
ZipEntry
End of central directory (END) header zip file comment length field offset.
ENDCOM
- Static variable in class java.util.zip.
ZipFile
End of central directory (END) header zip file comment length field offset.
ENDCOM
- Static variable in class java.util.zip.
ZipInputStream
End of central directory (END) header zip file comment length field offset.
ENDCOM
- Static variable in class java.util.zip.
ZipOutputStream
End of central directory (END) header zip file comment length field offset.
endComposition()
- Method in class java.awt.im.
InputContext
Ends any input composition that may currently be going on in this
 context.
endComposition()
- Method in interface java.awt.im.spi.
InputMethod
Ends any input composition that may currently be going on in this
 context.
endDocument()
- Method in interface org.xml.sax.
ContentHandler
Receive notification of the end of a document.
endDocument()
- Method in interface org.xml.sax.
DocumentHandler
Deprecated.
Receive notification of the end of a document.
endDocument()
- Method in class org.xml.sax.
HandlerBase
Deprecated.
Receive notification of the end of the document.
endDocument()
- Method in class org.xml.sax.helpers.
DefaultHandler
Receive notification of the end of the document.
endDocument()
- Method in class org.xml.sax.helpers.
ParserAdapter
Adapter implementation method; do not call.
endDocument()
- Method in class org.xml.sax.helpers.
XMLFilterImpl
Filter an end document event.
endDocument()
- Method in class org.xml.sax.helpers.
XMLReaderAdapter
End document event.
EndDocument
- Interface in
javax.xml.stream.events
A marker interface for the end of the document
endDraggingFrame(JComponent)
- Method in class javax.swing.
DefaultDesktopManager
endDraggingFrame(JComponent)
- Method in interface javax.swing.
DesktopManager
This method signals the end of the dragging session.
endDTD()
- Method in class org.xml.sax.ext.
DefaultHandler2
endDTD()
- Method in interface org.xml.sax.ext.
LexicalHandler
Report the end of DTD declarations.
endElement(String)
- Method in interface org.xml.sax.
DocumentHandler
Deprecated.
Receive notification of the end of an element.
endElement(String)
- Method in class org.xml.sax.
HandlerBase
Deprecated.
Receive notification of the end of an element.
endElement(String)
- Method in class org.xml.sax.helpers.
ParserAdapter
Adapter implementation method; do not call.
endElement(String, String, String)
- Method in interface org.xml.sax.
ContentHandler
Receive notification of the end of an element.
endElement(String, String, String)
- Method in class org.xml.sax.helpers.
DefaultHandler
Receive notification of the end of an element.
endElement(String, String, String)
- Method in class org.xml.sax.helpers.
XMLFilterImpl
Filter an end element event.
endElement(String, String, String)
- Method in class org.xml.sax.helpers.
XMLReaderAdapter
Adapt a SAX2 end element event.
EndElement
- Interface in
javax.xml.stream.events
An interface for the end element event.
EndElementTree
- Interface in
com.sun.source.doctree
A tree node for the end of an HTML element.
endEntity(String)
- Method in class org.xml.sax.ext.
DefaultHandler2
endEntity(String)
- Method in interface org.xml.sax.ext.
LexicalHandler
Report the end of an entity.
endExclusive()
- Method in class javax.smartcardio.
Card
Releases the exclusive access previously established using
beginExclusive
.
endFontTag()
- Method in class javax.swing.text.html.
MinimalHTMLWriter
This is no longer used, instead <span> will be written out.
ENDHDR
- Static variable in class java.util.jar.
JarEntry
End of central directory (END) header size in bytes (including signature).
ENDHDR
- Static variable in class java.util.jar.
JarFile
End of central directory (END) header size in bytes (including signature).
ENDHDR
- Static variable in class java.util.jar.
JarInputStream
End of central directory (END) header size in bytes (including signature).
ENDHDR
- Static variable in class java.util.jar.
JarOutputStream
End of central directory (END) header size in bytes (including signature).
ENDHDR
- Static variable in class java.util.zip.
ZipEntry
End of central directory (END) header size in bytes (including signature).
ENDHDR
- Static variable in class java.util.zip.
ZipFile
End of central directory (END) header size in bytes (including signature).
ENDHDR
- Static variable in class java.util.zip.
ZipInputStream
End of central directory (END) header size in bytes (including signature).
ENDHDR
- Static variable in class java.util.zip.
ZipOutputStream
End of central directory (END) header size in bytes (including signature).
endIndex
- Variable in class javax.accessibility.
AccessibleAttributeSequence
The end index of the text sequence.
endIndex
- Variable in class javax.accessibility.
AccessibleTextSequence
The end index of the text sequence.
endInsertEmpty()
- Method in class javax.imageio.
ImageWriter
Completes the insertion of a new image that was begun with a
 prior call to
prepareInsertEmpty
.
endKey
- Variable in class javax.swing.plaf.basic.
BasicSplitPaneUI
Deprecated.
As of Java 2 platform v1.3.
endLineAction
- Static variable in class javax.swing.text.
DefaultEditorKit
Name of the
Action
for moving the caret
 to the end of a line.
endLineDownAction
- Static variable in class javax.swing.text.
DefaultEditorKit
Name of the
Action
for moving the caret
 to the end of the current line or down to the
 end of the next line if the caret is already
 at the end of the line.
ENDOFF
- Static variable in class java.util.jar.
JarEntry
End of central directory (END) header offset for the first CEN header field offset.
ENDOFF
- Static variable in class java.util.jar.
JarFile
End of central directory (END) header offset for the first CEN header field offset.
ENDOFF
- Static variable in class java.util.jar.
JarInputStream
End of central directory (END) header offset for the first CEN header field offset.
ENDOFF
- Static variable in class java.util.jar.
JarOutputStream
End of central directory (END) header offset for the first CEN header field offset.
ENDOFF
- Static variable in class java.util.zip.
ZipEntry
End of central directory (END) header offset for the first CEN header field offset.
ENDOFF
- Static variable in class java.util.zip.
ZipFile
End of central directory (END) header offset for the first CEN header field offset.
ENDOFF
- Static variable in class java.util.zip.
ZipInputStream
End of central directory (END) header offset for the first CEN header field offset.
ENDOFF
- Static variable in class java.util.zip.
ZipOutputStream
End of central directory (END) header offset for the first CEN header field offset.
EndOfLineStringProperty
- Static variable in class javax.swing.text.
DefaultEditorKit
When reading a document if a CRLF is encountered a property
 with this name is added and the value will be "\r\n".
endParagraphAction
- Static variable in class javax.swing.text.
DefaultEditorKit
Name of the
Action
for moving the caret
 to the end of a paragraph.
endPrefixMapping(String)
- Method in interface org.xml.sax.
ContentHandler
End the scope of a prefix-URI mapping.
endPrefixMapping(String)
- Method in class org.xml.sax.helpers.
DefaultHandler
Receive notification of the end of a Namespace mapping.
endPrefixMapping(String)
- Method in class org.xml.sax.helpers.
XMLFilterImpl
Filter an end Namespace prefix mapping event.
endPrefixMapping(String)
- Method in class org.xml.sax.helpers.
XMLReaderAdapter
Adapt a SAX2 end prefix mapping event.
endReplacePixels()
- Method in class javax.imageio.
ImageWriter
Terminates a sequence of calls to
replacePixels
.
endRequest()
- Method in interface java.sql.
Connection
Hints to the driver that a request, an independent unit of work,
 has completed.
endResizingFrame(JComponent)
- Method in class javax.swing.
DefaultDesktopManager
endResizingFrame(JComponent)
- Method in interface javax.swing.
DesktopManager
This method signals the end of the resize session.
ENDSIG
- Static variable in class java.util.jar.
JarEntry
End of central directory (END) header signature.
ENDSIG
- Static variable in class java.util.jar.
JarFile
End of central directory (END) header signature.
ENDSIG
- Static variable in class java.util.jar.
JarInputStream
End of central directory (END) header signature.
ENDSIG
- Static variable in class java.util.jar.
JarOutputStream
End of central directory (END) header signature.
ENDSIG
- Static variable in class java.util.zip.
ZipEntry
End of central directory (END) header signature.
ENDSIG
- Static variable in class java.util.zip.
ZipFile
End of central directory (END) header signature.
ENDSIG
- Static variable in class java.util.zip.
ZipInputStream
End of central directory (END) header signature.
ENDSIG
- Static variable in class java.util.zip.
ZipOutputStream
End of central directory (END) header signature.
ENDSIZ
- Static variable in class java.util.jar.
JarEntry
End of central directory (END) header central directory size in bytes field offset.
ENDSIZ
- Static variable in class java.util.jar.
JarFile
End of central directory (END) header central directory size in bytes field offset.
ENDSIZ
- Static variable in class java.util.jar.
JarInputStream
End of central directory (END) header central directory size in bytes field offset.
ENDSIZ
- Static variable in class java.util.jar.
JarOutputStream
End of central directory (END) header central directory size in bytes field offset.
ENDSIZ
- Static variable in class java.util.zip.
ZipEntry
End of central directory (END) header central directory size in bytes field offset.
ENDSIZ
- Static variable in class java.util.zip.
ZipFile
End of central directory (END) header central directory size in bytes field offset.
ENDSIZ
- Static variable in class java.util.zip.
ZipInputStream
End of central directory (END) header central directory size in bytes field offset.
ENDSIZ
- Static variable in class java.util.zip.
ZipOutputStream
End of central directory (END) header central directory size in bytes field offset.
ENDSUB
- Static variable in class java.util.jar.
JarEntry
End of central directory (END) header number of entries on this disk field offset.
ENDSUB
- Static variable in class java.util.jar.
JarFile
End of central directory (END) header number of entries on this disk field offset.
ENDSUB
- Static variable in class java.util.jar.
JarInputStream
End of central directory (END) header number of entries on this disk field offset.
ENDSUB
- Static variable in class java.util.jar.
JarOutputStream
End of central directory (END) header number of entries on this disk field offset.
ENDSUB
- Static variable in class java.util.zip.
ZipEntry
End of central directory (END) header number of entries on this disk field offset.
ENDSUB
- Static variable in class java.util.zip.
ZipFile
End of central directory (END) header number of entries on this disk field offset.
ENDSUB
- Static variable in class java.util.zip.
ZipInputStream
End of central directory (END) header number of entries on this disk field offset.
ENDSUB
- Static variable in class java.util.zip.
ZipOutputStream
End of central directory (END) header number of entries on this disk field offset.
endsWith(String)
- Method in class java.lang.
String
Tests if this string ends with the specified suffix.
endsWith(String)
- Method in interface java.nio.file.
Path
Tests if this path ends with a
Path
, constructed by converting
 the given path string, in exactly the manner specified by the
endsWith(Path)
method.
endsWith(Path)
- Method in interface java.nio.file.
Path
Tests if this path ends with the given path.
endsWith(List<Rdn>)
- Method in class javax.naming.ldap.
LdapName
Determines whether the specified RDN sequence forms a suffix of this
 LDAP name.
endsWith(Name)
- Method in class javax.naming.
CompositeName
Determines whether a composite name is a suffix of this composite name.
endsWith(Name)
- Method in class javax.naming.
CompoundName
Determines whether a compound name is a suffix of this compound name.
endsWith(Name)
- Method in class javax.naming.ldap.
LdapName
Determines whether this LDAP name ends with a specified
 LDAP name suffix.
endsWith(Name)
- Method in interface javax.naming.
Name
Determines whether this name ends with a specified suffix.
endTag(boolean)
- Method in class javax.swing.text.html.parser.
Parser
Handle an end tag.
endTag(Element)
- Method in class javax.swing.text.html.
HTMLWriter
Writes out an end tag for the element.
ENDTAG
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "endtag"
ENDTAG
- Static variable in interface javax.swing.text.html.parser.
DTDConstants
The DTD constant corresponds to ENDTAG
EndTagType
- Static variable in class javax.swing.text.
DefaultStyledDocument.ElementSpec
A possible value for getType.
ENDTOT
- Static variable in class java.util.jar.
JarEntry
End of central directory (END) header total number of entries field offset.
ENDTOT
- Static variable in class java.util.jar.
JarFile
End of central directory (END) header total number of entries field offset.
ENDTOT
- Static variable in class java.util.jar.
JarInputStream
End of central directory (END) header total number of entries field offset.
ENDTOT
- Static variable in class java.util.jar.
JarOutputStream
End of central directory (END) header total number of entries field offset.
ENDTOT
- Static variable in class java.util.zip.
ZipEntry
End of central directory (END) header total number of entries field offset.
ENDTOT
- Static variable in class java.util.zip.
ZipFile
End of central directory (END) header total number of entries field offset.
ENDTOT
- Static variable in class java.util.zip.
ZipInputStream
End of central directory (END) header total number of entries field offset.
ENDTOT
- Static variable in class java.util.zip.
ZipOutputStream
End of central directory (END) header total number of entries field offset.
endUpdate()
- Method in class javax.swing.undo.
UndoableEditSupport
DEADLOCK WARNING: Calling this method may call
undoableEditHappened
in all listeners.
endWordAction
- Static variable in class javax.swing.text.
DefaultEditorKit
Name of the Action for moving the caret
 to the end of a word.
endWriteEmpty()
- Method in class javax.imageio.
ImageWriter
Completes the writing of a new image that was begun with a
 prior call to
prepareWriteEmpty
.
endWriteSequence()
- Method in class javax.imageio.
ImageWriter
Completes the writing of a sequence of images begun with
prepareWriteSequence
.
ENGINE
- Static variable in interface javax.script.
ScriptEngine
Reserved key for a named value that is
 the name of the
ScriptEngine
implementation.
ENGINE_SCOPE
- Static variable in interface javax.script.
ScriptContext
EngineScope attributes are visible during the lifetime of a single
ScriptEngine
and a set of attributes is maintained for each
 engine.
ENGINE_VERSION
- Static variable in interface javax.script.
ScriptEngine
Reserved key for a named value that identifies
 the version of the
ScriptEngine
implementation.
engineAliases()
- Method in class java.security.
KeyStoreSpi
Lists all the alias names of this keystore.
engineBuild(CertPathParameters)
- Method in class java.security.cert.
CertPathBuilderSpi
Attempts to build a certification path using the specified
 algorithm parameter set.
engineContainsAlias(String)
- Method in class java.security.
KeyStoreSpi
Checks if the given alias exists in this keystore.
engineCreateSSLEngine()
- Method in class javax.net.ssl.
SSLContextSpi
Creates a new
SSLEngine
using this context.
engineCreateSSLEngine(String, int)
- Method in class javax.net.ssl.
SSLContextSpi
Creates a
SSLEngine
using this context.
engineDecapsulate(byte[], int, int, String)
- Method in interface javax.crypto.
KEMSpi.DecapsulatorSpi
The key decapsulation function.
engineDeleteEntry(String)
- Method in class java.security.
KeyStoreSpi
Deletes the entry identified by the given alias from this keystore.
engineDigest()
- Method in class java.security.
MessageDigestSpi
Completes the hash computation by performing final
 operations such as padding.
engineDigest(byte[], int, int)
- Method in class java.security.
MessageDigestSpi
Completes the hash computation by performing final
 operations such as padding.
engineDoFinal()
- Method in class javax.crypto.
MacSpi
Completes the MAC computation and resets the MAC for further use,
 maintaining the secret key that the MAC was initialized with.
engineDoFinal(byte[], int, int)
- Method in class javax.crypto.
CipherSpi
Encrypts or decrypts data in a single-part operation,
 or finishes a multiple-part operation.
engineDoFinal(byte[], int, int, byte[], int)
- Method in class javax.crypto.
CipherSpi
Encrypts or decrypts data in a single-part operation,
 or finishes a multiple-part operation.
engineDoFinal(ByteBuffer, ByteBuffer)
- Method in class javax.crypto.
CipherSpi
Encrypts or decrypts data in a single-part operation,
 or finishes a multiple-part operation.
engineDoPhase(Key, boolean)
- Method in class javax.crypto.
KeyAgreementSpi
Executes the next phase of this key agreement with the given
 key that was received from one of the other parties involved in this key
 agreement.
engineEncapsulate(int, int, String)
- Method in interface javax.crypto.
KEMSpi.EncapsulatorSpi
The key encapsulation function.
engineEncapsulationSize()
- Method in interface javax.crypto.
KEMSpi.DecapsulatorSpi
Returns the size of the key encapsulation message.
engineEncapsulationSize()
- Method in interface javax.crypto.
KEMSpi.EncapsulatorSpi
Returns the size of the key encapsulation message.
engineEntryInstanceOf(String, Class<? extends KeyStore.Entry>)
- Method in class java.security.
KeyStoreSpi
Determines if the keystore
Entry
for the specified
alias
is an instance or subclass of the specified
entryClass
.
engineGenerateCertificate(InputStream)
- Method in class java.security.cert.
CertificateFactorySpi
Generates a certificate object and initializes it with
 the data read from the input stream
inStream
.
engineGenerateCertificates(InputStream)
- Method in class java.security.cert.
CertificateFactorySpi
Returns a (possibly empty) collection view of the certificates read
 from the given input stream
inStream
.
engineGenerateCertPath(InputStream)
- Method in class java.security.cert.
CertificateFactorySpi
Generates a
CertPath
object and initializes it with
 the data read from the
InputStream
inStream.
engineGenerateCertPath(InputStream, String)
- Method in class java.security.cert.
CertificateFactorySpi
Generates a
CertPath
object and initializes it with
 the data read from the
InputStream
inStream.
engineGenerateCertPath(List<? extends Certificate>)
- Method in class java.security.cert.
CertificateFactorySpi
Generates a
CertPath
object and initializes it with
 a
List
of
Certificate
s.
engineGenerateCRL(InputStream)
- Method in class java.security.cert.
CertificateFactorySpi
Generates a certificate revocation list (CRL) object and initializes it
 with the data read from the input stream
inStream
.
engineGenerateCRLs(InputStream)
- Method in class java.security.cert.
CertificateFactorySpi
Returns a (possibly empty) collection view of the CRLs read
 from the given input stream
inStream
.
engineGenerateKey()
- Method in class javax.crypto.
KeyGeneratorSpi
Generates a secret key.
engineGenerateParameters()
- Method in class java.security.
AlgorithmParameterGeneratorSpi
Generates the parameters.
engineGeneratePrivate(KeySpec)
- Method in class java.security.
KeyFactorySpi
Generates a private key object from the provided key
 specification (key material).
engineGeneratePublic(KeySpec)
- Method in class java.security.
KeyFactorySpi
Generates a public key object from the provided key
 specification (key material).
engineGenerateSecret()
- Method in class javax.crypto.
KeyAgreementSpi
Generates the shared secret and returns it in a new buffer.
engineGenerateSecret(byte[], int)
- Method in class javax.crypto.
KeyAgreementSpi
Generates the shared secret, and places it into the buffer
sharedSecret
, beginning at
offset
inclusive.
engineGenerateSecret(String)
- Method in class javax.crypto.
KeyAgreementSpi
Creates the shared secret and returns it as a secret key object
 of the requested algorithm type.
engineGenerateSecret(KeySpec)
- Method in class javax.crypto.
SecretKeyFactorySpi
Generates a
SecretKey
object from the
 provided key specification (key material).
engineGenerateSeed(int)
- Method in class java.security.
SecureRandomSpi
Returns the given number of seed bytes.
engineGenExemptionBlob()
- Method in class javax.crypto.
ExemptionMechanismSpi
Generates the exemption mechanism key blob.
engineGenExemptionBlob(byte[], int)
- Method in class javax.crypto.
ExemptionMechanismSpi
Generates the exemption mechanism key blob, and stores the result in
 the
output
buffer, starting at
outputOffset
inclusive.
engineGetAppConfigurationEntry(String)
- Method in class javax.security.auth.login.
ConfigurationSpi
Retrieve the AppConfigurationEntries for the specified
name
.
engineGetAttributes(String)
- Method in class java.security.
KeyStoreSpi
Retrieves the attributes associated with the given alias.
engineGetBlockSize()
- Method in class javax.crypto.
CipherSpi
Returns the block size (in bytes).
engineGetCertificate(String)
- Method in class java.security.
KeyStoreSpi
Returns the certificate associated with the given alias.
engineGetCertificateAlias(Certificate)
- Method in class java.security.
KeyStoreSpi
Returns the (alias) name of the first keystore entry whose certificate
 matches the given certificate.
engineGetCertificateChain(String)
- Method in class java.security.
KeyStoreSpi
Returns the certificate chain associated with the given alias.
engineGetCertificates(CertSelector)
- Method in class java.security.cert.
CertStoreSpi
Returns a
Collection
of
Certificate
s that
 match the specified selector.
engineGetCertPathEncodings()
- Method in class java.security.cert.
CertificateFactorySpi
Returns an iteration of the
CertPath
encodings supported
 by this certificate factory, with the default encoding first.
engineGetClientSessionContext()
- Method in class javax.net.ssl.
SSLContextSpi
Returns a client
SSLSessionContext
object for
 this context.
engineGetCreationDate(String)
- Method in class java.security.
KeyStoreSpi
Returns the creation date of the entry identified by the given alias.
engineGetCRLs(CRLSelector)
- Method in class java.security.cert.
CertStoreSpi
Returns a
Collection
of
CRL
s that
 match the specified selector.
engineGetDefaultSSLParameters()
- Method in class javax.net.ssl.
SSLContextSpi
Returns a copy of the SSLParameters indicating the default
 settings for this SSL context.
engineGetDigestLength()
- Method in class java.security.
MessageDigestSpi
Returns the digest length in bytes.
engineGetEncoded()
- Method in class java.security.
AlgorithmParametersSpi
Returns the parameters in their primary encoding format.
engineGetEncoded(String)
- Method in class java.security.
AlgorithmParametersSpi
Returns the parameters encoded in the specified format.
engineGetEntry(String, KeyStore.ProtectionParameter)
- Method in class java.security.
KeyStoreSpi
Gets a
KeyStore.Entry
for the specified alias
 with the specified protection parameter.
engineGetIV()
- Method in class javax.crypto.
CipherSpi
Returns the initialization vector (IV) in a new buffer.
engineGetKey(String, char[])
- Method in class java.security.
KeyStoreSpi
Returns the key associated with the given alias, using the given
 password to recover it.
engineGetKeyManagers()
- Method in class javax.net.ssl.
KeyManagerFactorySpi
Returns one key manager for each type of key material.
engineGetKeySize(Key)
- Method in class javax.crypto.
CipherSpi
Returns the key size of the given key object in bits.
engineGetKeySpec(Key, Class<T>)
- Method in class java.security.
KeyFactorySpi
Returns a specification (key material) of the given key
 object.
engineGetKeySpec(SecretKey, Class<?>)
- Method in class javax.crypto.
SecretKeyFactorySpi
Returns a specification (key material) of the given key
 object in the requested format.
engineGetMacLength()
- Method in class javax.crypto.
MacSpi
Returns the length of the MAC in bytes.
engineGetOutputSize(int)
- Method in class javax.crypto.
CipherSpi
Returns the length in bytes that an output buffer would
 need to be in order to hold the result of the next
update
or
doFinal
operation, given the input length
inputLen
(in bytes).
engineGetOutputSize(int)
- Method in class javax.crypto.
ExemptionMechanismSpi
Returns the length in bytes that an output buffer would need to be in
 order to hold the result of the next
engineGenExemptionBlob
operation, given the input length
inputLen
(in bytes).
engineGetParameter(String)
- Method in class java.security.
SignatureSpi
Deprecated.
engineGetParameters()
- Method in class java.security.
SecureRandomSpi
Returns the effective
SecureRandomParameters
for this
SecureRandom
instance.
engineGetParameters()
- Method in class java.security.
SignatureSpi
Returns the parameters used with this
Signature
object.
engineGetParameters()
- Method in class javax.crypto.
CipherSpi
Returns the parameters used with this cipher.
engineGetParameterSpec(Class<T>)
- Method in class java.security.
AlgorithmParametersSpi
Returns a (transparent) specification of this parameters
 object.
engineGetPermissions(CodeSource)
- Method in class java.security.
PolicySpi
Deprecated.
Return a PermissionCollection object containing the set of
 permissions granted to the specified CodeSource.
engineGetPermissions(ProtectionDomain)
- Method in class java.security.
PolicySpi
Deprecated.
Return a PermissionCollection object containing the set of
 permissions granted to the specified ProtectionDomain.
engineGetRevocationChecker()
- Method in class java.security.cert.
CertPathBuilderSpi
Returns a
CertPathChecker
that this implementation uses to
 check the revocation status of certificates.
engineGetRevocationChecker()
- Method in class java.security.cert.
CertPathValidatorSpi
Returns a
CertPathChecker
that this implementation uses to
 check the revocation status of certificates.
engineGetServerSessionContext()
- Method in class javax.net.ssl.
SSLContextSpi
Returns a server
SSLSessionContext
object for
 this context.
engineGetServerSocketFactory()
- Method in class javax.net.ssl.
SSLContextSpi
Returns a
ServerSocketFactory
object for
 this context.
engineGetSocketFactory()
- Method in class javax.net.ssl.
SSLContextSpi
Returns a
SocketFactory
object for this
 context.
engineGetSupportedSSLParameters()
- Method in class javax.net.ssl.
SSLContextSpi
Returns a copy of the SSLParameters indicating the maximum supported
 settings for this SSL context.
engineGetTrustManagers()
- Method in class javax.net.ssl.
TrustManagerFactorySpi
Returns one trust manager for each type of trust material.
engineImplies(ProtectionDomain, Permission)
- Method in class java.security.
PolicySpi
Deprecated.
Check whether the policy has granted a Permission to a ProtectionDomain.
engineInit(byte[])
- Method in class java.security.
AlgorithmParametersSpi
Imports the specified parameters and decodes them
 according to the primary decoding format for parameters.
engineInit(byte[], String)
- Method in class java.security.
AlgorithmParametersSpi
Imports the parameters from
params
and
 decodes them according to the specified decoding format.
engineInit(int, Key, AlgorithmParameters, SecureRandom)
- Method in class javax.crypto.
CipherSpi
Initializes this
CipherSpi
object with a key, a set of
 algorithm parameters, and a source of randomness.
engineInit(int, Key, SecureRandom)
- Method in class javax.crypto.
CipherSpi
Initializes this
CipherSpi
object with a key and a source
 of randomness.
engineInit(int, Key, AlgorithmParameterSpec, SecureRandom)
- Method in class javax.crypto.
CipherSpi
Initializes this
CipherSpi
object with a key, a set of
 algorithm parameters, and a source of randomness.
engineInit(int, SecureRandom)
- Method in class java.security.
AlgorithmParameterGeneratorSpi
Initializes this parameter generator for a certain size
 and source of randomness.
engineInit(int, SecureRandom)
- Method in class javax.crypto.
KeyGeneratorSpi
Initializes this key generator for a certain keysize, using the given
 source of randomness.
engineInit(Key)
- Method in class javax.crypto.
ExemptionMechanismSpi
Initializes this exemption mechanism with a key.
engineInit(Key, AlgorithmParameters)
- Method in class javax.crypto.
ExemptionMechanismSpi
Initializes this exemption mechanism with a key and a set of algorithm
 parameters.
engineInit(Key, SecureRandom)
- Method in class javax.crypto.
KeyAgreementSpi
Initializes this key agreement with the given key and source of
 randomness.
engineInit(Key, AlgorithmParameterSpec)
- Method in class javax.crypto.
ExemptionMechanismSpi
Initializes this exemption mechanism with a key and a set of algorithm
 parameters.
engineInit(Key, AlgorithmParameterSpec)
- Method in class javax.crypto.
MacSpi
Initializes the MAC with the given (secret) key and algorithm
 parameters.
engineInit(Key, AlgorithmParameterSpec, SecureRandom)
- Method in class javax.crypto.
KeyAgreementSpi
Initializes this key agreement with the given key, set of
 algorithm parameters, and source of randomness.
engineInit(KeyStore)
- Method in class javax.net.ssl.
TrustManagerFactorySpi
Initializes this factory with a source of certificate
 authorities and related trust material.
engineInit(KeyStore, char[])
- Method in class javax.net.ssl.
KeyManagerFactorySpi
Initializes this factory with a source of key material.
engineInit(SecureRandom)
- Method in class javax.crypto.
KeyGeneratorSpi
Initializes the key generator.
engineInit(AlgorithmParameterSpec)
- Method in class java.security.
AlgorithmParametersSpi
Initializes this parameters object using the parameters
 specified in
paramSpec
.
engineInit(AlgorithmParameterSpec, SecureRandom)
- Method in class java.security.
AlgorithmParameterGeneratorSpi
Initializes this parameter generator with a set of
 algorithm-specific parameter generation values.
engineInit(AlgorithmParameterSpec, SecureRandom)
- Method in class javax.crypto.
KeyGeneratorSpi
Initializes the key generator with the specified parameter
 set and a user-provided source of randomness.
engineInit(KeyManager[], TrustManager[], SecureRandom)
- Method in class javax.net.ssl.
SSLContextSpi
Initializes this context.
engineInit(ManagerFactoryParameters)
- Method in class javax.net.ssl.
KeyManagerFactorySpi
Initializes this factory with a source of key material.
engineInit(ManagerFactoryParameters)
- Method in class javax.net.ssl.
TrustManagerFactorySpi
Initializes this factory with a source of provider-specific
 key material.
engineInitSign(PrivateKey)
- Method in class java.security.
SignatureSpi
Initializes this
Signature
object with the specified
 private key for signing operations.
engineInitSign(PrivateKey, SecureRandom)
- Method in class java.security.
SignatureSpi
Initializes this
Signature
object with the specified
 private key and source of randomness for signing operations.
engineInitVerify(PublicKey)
- Method in class java.security.
SignatureSpi
Initializes this
Signature
object with the specified
 public key for verification operations.
engineIsCertificateEntry(String)
- Method in class java.security.
KeyStoreSpi
Returns
true
if the entry identified by the given alias
 was created by a call to
setCertificateEntry
,
 or created by a call to
setEntry
with a
TrustedCertificateEntry
.
engineIsKeyEntry(String)
- Method in class java.security.
KeyStoreSpi
Returns
true
if the entry identified by the given alias
 was created by a call to
setKeyEntry
,
 or created by a call to
setEntry
with a
PrivateKeyEntry
or a
SecretKeyEntry
.
engineLoad(InputStream, char[])
- Method in class java.security.
KeyStoreSpi
Loads the keystore from the given input stream.
engineLoad(KeyStore.LoadStoreParameter)
- Method in class java.security.
KeyStoreSpi
Loads the keystore using the given
KeyStore.LoadStoreParameter
.
engineNewDecapsulator(PrivateKey, AlgorithmParameterSpec)
- Method in interface javax.crypto.
KEMSpi
Creates a KEM decapsulator on the KEM receiver side.
engineNewEncapsulator(PublicKey, AlgorithmParameterSpec, SecureRandom)
- Method in interface javax.crypto.
KEMSpi
Creates a KEM encapsulator on the KEM sender side.
engineNextBytes(byte[])
- Method in class java.security.
SecureRandomSpi
Generates a user-specified number of random bytes.
engineNextBytes(byte[], SecureRandomParameters)
- Method in class java.security.
SecureRandomSpi
Generates a user-specified number of random bytes with
 additional parameters.
engineProbe(InputStream)
- Method in class java.security.
KeyStoreSpi
Probes the specified input stream to determine whether it contains a
 keystore that is supported by this implementation, or not.
engineRefresh()
- Method in class java.security.
PolicySpi
Deprecated.
Refreshes/reloads the policy configuration.
engineRefresh()
- Method in class javax.security.auth.login.
ConfigurationSpi
Refresh and reload the Configuration.
engineReseed(SecureRandomParameters)
- Method in class java.security.
SecureRandomSpi
Reseeds this random object with entropy input read from its
 entropy source with additional parameters.
engineReset()
- Method in class java.security.
MessageDigestSpi
Resets the digest for further use.
engineReset()
- Method in class javax.crypto.
MacSpi
Resets the MAC for further use, maintaining the secret key that the
 MAC was initialized with.
engineScope
- Variable in class javax.script.
SimpleScriptContext
This is the engine scope bindings.
engineSecretSize()
- Method in interface javax.crypto.
KEMSpi.DecapsulatorSpi
Returns the size of the shared secret.
engineSecretSize()
- Method in interface javax.crypto.
KEMSpi.EncapsulatorSpi
Returns the size of the shared secret.
engineSetCertificateEntry(String, Certificate)
- Method in class java.security.
KeyStoreSpi
Assigns the given certificate to the given alias.
engineSetEntry(String, KeyStore.Entry, KeyStore.ProtectionParameter)
- Method in class java.security.
KeyStoreSpi
Saves a
KeyStore.Entry
under the specified alias.
engineSetKeyEntry(String, byte[], Certificate[])
- Method in class java.security.
KeyStoreSpi
Assigns the given key (that has already been protected) to the given
 alias.
engineSetKeyEntry(String, Key, char[], Certificate[])
- Method in class java.security.
KeyStoreSpi
Assigns the given key to the given alias, protecting it with the given
 password.
engineSetMode(String)
- Method in class javax.crypto.
CipherSpi
Sets the mode of this cipher.
engineSetPadding(String)
- Method in class javax.crypto.
CipherSpi
Sets the padding mechanism of this cipher.
engineSetParameter(String, Object)
- Method in class java.security.
SignatureSpi
Deprecated.
Replaced by
engineSetParameter
.
engineSetParameter(AlgorithmParameterSpec)
- Method in class java.security.
SignatureSpi
Initializes this
Signature
object with the specified parameter
 values.
engineSetSeed(byte[])
- Method in class java.security.
SecureRandomSpi
Reseeds this random object with the given seed.
engineSign()
- Method in class java.security.
SignatureSpi
Returns the signature bytes of all the data
 updated so far.
engineSign(byte[], int, int)
- Method in class java.security.
SignatureSpi
Finishes this signature operation and stores the resulting signature
 bytes in the provided buffer
outbuf
, starting at
offset
.
engineSize()
- Method in class java.security.
KeyStoreSpi
Retrieves the number of entries in this keystore.
engineStore(OutputStream, char[])
- Method in class java.security.
KeyStoreSpi
Stores this keystore to the given output stream, and protects its
 integrity with the given password.
engineStore(KeyStore.LoadStoreParameter)
- Method in class java.security.
KeyStoreSpi
Stores this keystore using the given
KeyStore.LoadStoreParameter
.
engineTerminals()
- Method in class javax.smartcardio.
TerminalFactorySpi
Returns the CardTerminals created by this factory.
EngineTerminationException(String)
- Constructor for exception class jdk.jshell.spi.
ExecutionControl.EngineTerminationException
engineToString()
- Method in class java.security.
AlgorithmParametersSpi
Returns a formatted string describing the parameters.
engineTranslateKey(Key)
- Method in class java.security.
KeyFactorySpi
Translates a key object, whose provider may be unknown or
 potentially untrusted, into a corresponding key object of this key
 factory.
engineTranslateKey(SecretKey)
- Method in class javax.crypto.
SecretKeyFactorySpi
Translates a key object, whose provider may be unknown or
 potentially untrusted, into a corresponding key object of this
 secret-key factory.
engineUnwrap(byte[], String, int)
- Method in class javax.crypto.
CipherSpi
Unwrap a previously wrapped key.
engineUpdate(byte)
- Method in class java.security.
MessageDigestSpi
Updates the digest using the specified byte.
engineUpdate(byte)
- Method in class java.security.
SignatureSpi
Updates the data to be signed or verified
 using the specified byte.
engineUpdate(byte)
- Method in class javax.crypto.
MacSpi
Processes the given byte.
engineUpdate(byte[], int, int)
- Method in class java.security.
MessageDigestSpi
Updates the digest using the specified array of bytes,
 starting at the specified offset.
engineUpdate(byte[], int, int)
- Method in class java.security.
SignatureSpi
Updates the data to be signed or verified, using the
 specified array of bytes, starting at the specified offset.
engineUpdate(byte[], int, int)
- Method in class javax.crypto.
CipherSpi
Continues a multiple-part encryption or decryption operation
 (depending on how this
CipherSpi
object was initialized),
 processing another data part.
engineUpdate(byte[], int, int)
- Method in class javax.crypto.
MacSpi
Processes the first
len
bytes in
input
,
 starting at
offset
inclusive.
engineUpdate(byte[], int, int, byte[], int)
- Method in class javax.crypto.
CipherSpi
Continues a multiple-part encryption or decryption operation
 (depending on how this
CipherSpi
object was initialized),
 processing another data part.
engineUpdate(ByteBuffer)
- Method in class java.security.
MessageDigestSpi
Update the digest using the specified ByteBuffer.
engineUpdate(ByteBuffer)
- Method in class java.security.
SignatureSpi
Updates the data to be signed or verified using the specified
 ByteBuffer.
engineUpdate(ByteBuffer)
- Method in class javax.crypto.
MacSpi
Processes
input.remaining()
bytes in the ByteBuffer
input
, starting at
input.position()
.
engineUpdate(ByteBuffer, ByteBuffer)
- Method in class javax.crypto.
CipherSpi
Continues a multiple-part encryption or decryption operation
 (depending on how this
CipherSpi
object was initialized),
 processing another data part.
engineUpdateAAD(byte[], int, int)
- Method in class javax.crypto.
CipherSpi
Continues a multipart update of the Additional Authentication
 Data (AAD), using a subset of the provided buffer.
engineUpdateAAD(ByteBuffer)
- Method in class javax.crypto.
CipherSpi
Continues a multipart update of the Additional Authentication
 Data (AAD).
engineValidate(CertPath, CertPathParameters)
- Method in class java.security.cert.
CertPathValidatorSpi
Validates the specified certification path using the specified
 algorithm parameter set.
engineVerify(byte[])
- Method in class java.security.
SignatureSpi
Verifies the passed-in signature.
engineVerify(byte[], int, int)
- Method in class java.security.
SignatureSpi
Verifies the passed-in signature in the specified array
 of bytes, starting at the specified offset.
engineWrap(Key)
- Method in class javax.crypto.
CipherSpi
Wrap a key.
ENGLISH
- Static variable in class java.util.
Locale
Useful constant for language.
ENHANCED_FOR_LOOP
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
EnhancedForLoopTree
.
Enhanced exception messages
- Search tag in package java.net
Section
EnhancedForLoopTree
- Interface in
com.sun.source.tree
A tree node for an "enhanced"
for
loop statement.
enqueue()
- Method in class java.lang.ref.
Reference
Clears this reference object and adds it to the queue with which
 it is registered, if any.
enqueueKeyEvents(long, Component)
- Method in class java.awt.
DefaultKeyboardFocusManager
Delays dispatching of KeyEvents until the specified Component becomes
 the focus owner.
enqueueKeyEvents(long, Component)
- Method in class java.awt.
KeyboardFocusManager
Called by the AWT to notify the KeyboardFocusManager that it should
 delay dispatching of KeyEvents until the specified Component becomes
 the focus owner.
enquoteIdentifier(String, boolean)
- Method in interface java.sql.
Statement
Returns a SQL identifier.
enquoteLiteral(String)
- Method in interface java.sql.
Statement
Returns a
String
enclosed in single quotes.
enquoteNCharLiteral(String)
- Method in interface java.sql.
Statement
Returns a
String
representing a National Character Set Literal
 enclosed in single quotes and prefixed with a upper case letter N.
ensureCapacity(int)
- Method in class java.lang.
StringBuilder
Ensures that the capacity is at least equal to the specified minimum.
ensureCapacity(int)
- Method in class java.lang.
StringBuffer
ensureCapacity(int)
- Method in class java.util.
ArrayList
Increases the capacity of this
ArrayList
instance, if
 necessary, to ensure that it can hold at least the number of elements
 specified by the minimum capacity argument.
ensureCapacity(int)
- Method in class java.util.
Vector
Increases the capacity of this vector, if necessary, to ensure
 that it can hold at least the number of components specified by
 the minimum capacity argument.
ensureCapacity(int)
- Method in class javax.swing.
DefaultListModel
Increases the capacity of this list, if necessary, to ensure
 that it can hold at least the number of components specified by
 the minimum capacity argument.
ensureFileIsVisible(File)
- Method in class javax.swing.
JFileChooser
Makes sure that the specified file is viewable, and
 not hidden.
ensureFileIsVisible(JFileChooser, File)
- Method in class javax.swing.plaf.basic.
BasicFileChooserUI
Ensure the file in question is visible.
ensureFileIsVisible(JFileChooser, File)
- Method in class javax.swing.plaf.
FileChooserUI
Ensure the file in question is visible.
ensureFileIsVisible(JFileChooser, File)
- Method in class javax.swing.plaf.multi.
MultiFileChooserUI
Invokes the
ensureFileIsVisible
method on each UI handled by this object.
ensureIndexIsVisible(int)
- Method in class javax.swing.
JList
Scrolls the list within an enclosing viewport to make the specified
 cell completely visible.
ensureInitialized(Class<T>)
- Method in class java.lang.invoke.
MethodHandles.Lookup
Ensures that
targetClass
has been initialized.
ensureOwnerAndJoined()
- Method in class java.util.concurrent.
StructuredTaskScope
PREVIEW
Ensures that the current thread is the owner of this task scope and that it joined
 (with
StructuredTaskScope.join()
PREVIEW
or
StructuredTaskScope.joinUntil(Instant)
PREVIEW
) after
forking
PREVIEW
subtasks.
ensureRowsAreVisible(int, int)
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Ensures that the rows identified by
beginRow
through
endRow
are visible.
enter()
- Method in interface java.awt.
SecondaryLoop
Blocks the execution of the current thread and enters a new
 secondary event loop on the event dispatch thread.
ENTER
- Enum constant in enum class com.sun.source.util.
TaskEvent.Kind
For events relating to elements being entered.
ENTER
- Static variable in class java.awt.dnd.
DragSourceContext
An
int
used by updateCurrentCursor()
 indicating that the
Cursor
has entered a
DropTarget
.
ENTER
- Static variable in class java.awt.
Event
Deprecated.
The Enter key.
ENTERED
- Static variable in class javax.swing.event.
HyperlinkEvent.EventType
Entered type.
entering(String, String)
- Method in class java.util.logging.
Logger
Log a method entry.
entering(String, String, Object)
- Method in class java.util.logging.
Logger
Log a method entry, with one parameter.
entering(String, String, Object[])
- Method in class java.util.logging.
Logger
Log a method entry, with an array of parameters.
ENTITIES
- Static variable in interface javax.swing.text.html.parser.
DTDConstants
The DTD constant corresponds to ENTITIES
Entity
- Class in
javax.swing.text.html.parser
An entity is described in a DTD using the ENTITY construct.
Entity
- Interface in
org.w3c.dom
This interface represents a known entity, either parsed or unparsed, in an
 XML document.
Entity(String, int, char[])
- Constructor for class javax.swing.text.html.parser.
Entity
Creates an entity.
ENTITY
- Enum constant in enum class com.sun.source.doctree.
DocTree.Kind
Used for instances of
EntityTree
representing an HTML entity.
ENTITY
- Static variable in interface javax.swing.text.html.parser.
DTDConstants
The DTD constant corresponds to ENTITY
ENTITY_DECLARATION
- Static variable in interface javax.xml.stream.
XMLStreamConstants
Indicates a Entity Declaration
ENTITY_NODE
- Static variable in interface org.w3c.dom.
Node
The node is an
Entity
.
ENTITY_REFERENCE
- Static variable in interface javax.xml.stream.
XMLStreamConstants
Indicates an event is an entity reference
ENTITY_REFERENCE_NODE
- Static variable in interface org.w3c.dom.
Node
The node is an
EntityReference
.
EntityDeclaration
- Interface in
javax.xml.stream.events
An interface for handling Entity Declarations

 This interface is used to record and report unparsed entity declarations.
entityHash
- Variable in class javax.swing.text.html.parser.
DTD
The hash table contains an
Object
and the corresponding
Entity
EntityReference
- Interface in
javax.xml.stream.events
An interface for handling Entity events.
EntityReference
- Interface in
org.w3c.dom
EntityReference
nodes may be used to represent an entity
 reference in the tree.
EntityResolver
- Interface in
org.xml.sax
Basic interface for resolving entities.
EntityResolver2
- Interface in
org.xml.sax.ext
Extended interface for mapping external entity references to input
 sources, or providing a missing external subset.
EntityTree
- Interface in
com.sun.source.doctree
A tree node for an HTML entity.
entries()
- Method in class java.util.jar.
JarFile
Returns an enumeration of the jar file entries.
entries()
- Method in class java.util.zip.
ZipFile
Returns an enumeration of the ZIP file entries.
entry(K, V)
- Static method in interface java.util.
Map
Returns an unmodifiable
Map.Entry
containing the given key and value.
Entry()
- Constructor for class javax.swing.
RowFilter.Entry
Creates an
Entry
.
ENTRY_CREATE
- Static variable in class java.nio.file.
StandardWatchEventKinds
Directory entry created.
ENTRY_DELETE
- Static variable in class java.nio.file.
StandardWatchEventKinds
Directory entry deleted.
ENTRY_MODIFY
- Static variable in class java.nio.file.
StandardWatchEventKinds
Directory entry modified.
entryCount()
- Method in interface com.sun.jdi.
ObjectReference
Returns the number times this object's monitor has been
 entered by the current owning thread.
entryInstanceOf(String, Class<? extends KeyStore.Entry>)
- Method in class java.security.
KeyStore
Determines if the keystore
Entry
for the specified
alias
is an instance or subclass of the specified
entryClass
.
entrySet()
- Method in class com.sun.net.httpserver.
Headers
entrySet()
- Method in class java.awt.
RenderingHints
Returns a
Set
view of the mappings contained
 in this
RenderingHints
.
entrySet()
- Method in class java.security.
Provider
Returns an unmodifiable Set view of the property entries contained
 in this
Provider
.
entrySet()
- Method in class java.util.concurrent.
ConcurrentHashMap
Returns a
Set
view of the mappings contained in this map.
entrySet()
- Method in class java.util.concurrent.
ConcurrentSkipListMap
Returns a
Set
view of the mappings contained in this map.
entrySet()
- Method in class java.util.
EnumMap
Returns a
Set
view of the mappings contained in this map.
entrySet()
- Method in class java.util.
HashMap
Returns a
Set
view of the mappings contained in this map.
entrySet()
- Method in class java.util.
Hashtable
Returns a
Set
view of the mappings contained in this map.
entrySet()
- Method in class java.util.
IdentityHashMap
Returns a
Set
view of the mappings contained in this map.
entrySet()
- Method in class java.util.jar.
Attributes
Returns a Collection view of the attribute name-value mappings
 contained in this Map.
entrySet()
- Method in class java.util.
LinkedHashMap
Returns a
Set
view of the mappings contained in this map.
entrySet()
- Method in interface java.util.
Map
Returns a
Set
view of the mappings contained in this map.
entrySet()
- Method in interface java.util.
SortedMap
Returns a
Set
view of the mappings contained in this map.
entrySet()
- Method in class java.util.
TreeMap
Returns a
Set
view of the mappings contained in this map.
entrySet()
- Method in class java.util.
WeakHashMap
Returns a
Set
view of the mappings contained in this map.
entrySet()
- Method in class javax.management.openmbean.
TabularDataSupport
Returns a collection view of the index to row mappings
 contained in this
TabularDataSupport
instance.
entrySet()
- Method in class javax.script.
SimpleBindings
Returns a
Set
view of the mappings contained in this map.
Enum<E>
- Class in
java.lang
This is the common base class of all Java language enumeration classes.
Enum(String, int)
- Constructor for class java.lang.
Enum
Sole constructor.
ENUM
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
ClassTree
representing enums.
ENUM
- Enum constant in enum class java.lang.reflect.
AccessFlag
The access flag
ACC_ENUM
with a mask value of
0x4000
.
ENUM
- Enum constant in enum class javax.lang.model.element.
ElementKind
An enum class.
ENUM_CONSTANT
- Enum constant in enum class javax.lang.model.element.
ElementKind
An enum constant.
ENUM_SUBKIND
- Enum constant in enum class jdk.jshell.
Snippet.SubKind
An enum declaration.
Enum.EnumDesc<E>
- Class in
java.lang
A
nominal descriptor
for an
enum
constant.
enumConstant(MethodHandles.Lookup, String, Class<E>)
- Static method in class java.lang.invoke.
ConstantBootstraps
Returns an
enum
constant of the type specified by
type
with the name specified by
name
.
EnumConstantNotPresentException
- Exception Class in
java.lang
Thrown when an application tries to access an enum constant by name
 and the enum type contains no constant with the specified name.
EnumConstantNotPresentException(Class<? extends Enum>, String)
- Constructor for exception class java.lang.
EnumConstantNotPresentException
Constructs an
EnumConstantNotPresentException
for the
 specified constant.
EnumControl
- Class in
javax.sound.sampled
An
EnumControl
provides control over a set of discrete possible
 values, each represented by an object.
EnumControl(EnumControl.Type, Object[], Object)
- Constructor for class javax.sound.sampled.
EnumControl
Constructs a new enumerated control object with the given parameters.
EnumControl.Type
- Class in
javax.sound.sampled
An instance of the
EnumControl.Type
inner class identifies one
 kind of enumerated control.
enumerate(Thread[])
- Static method in class java.lang.
Thread
Copies into the specified array every
live
platform thread in the current thread's thread group and its subgroups.
enumerate(Thread[])
- Method in class java.lang.
ThreadGroup
Copies into the specified array every
live
platform thread in this thread group and its subgroups.
enumerate(Thread[], boolean)
- Method in class java.lang.
ThreadGroup
Copies into the specified array every
live
platform thread in this thread group.
enumerate(ThreadGroup[])
- Method in class java.lang.
ThreadGroup
Copies into the specified array references to every subgroup in this
 thread group and its subgroups.
enumerate(ThreadGroup[], boolean)
- Method in class java.lang.
ThreadGroup
Copies into the specified array references to every subgroup in this
 thread group.
enumeration(Collection<T>)
- Static method in class java.util.
Collections
Returns an enumeration over the specified collection.
Enumeration<E>
- Interface in
java.util
An object that implements the Enumeration interface generates a
 series of elements, one at a time.
enumerationValues()
- Element in annotation interface java.beans.
BeanProperty
The array of names for the public static fields
 that contains the valid values of the annotated property.
EnumMap<K,
V>
- Class in
java.util
A specialized
Map
implementation for use with enum type keys.
EnumMap(Class<K>)
- Constructor for class java.util.
EnumMap
Creates an empty enum map with the specified key type.
EnumMap(EnumMap<K, ? extends V>)
- Constructor for class java.util.
EnumMap
Creates an enum map with the same key type as the specified enum
 map, initially containing the same mappings (if any).
EnumMap(Map<K, ? extends V>)
- Constructor for class java.util.
EnumMap
Creates an enum map initialized from the specified map.
EnumSet<E>
- Class in
java.util
A specialized
Set
implementation for use with enum types.
enumSwitch(MethodHandles.Lookup, String, MethodType, Object...)
- Static method in class java.lang.runtime.
SwitchBootstraps
Bootstrap method for linking an
invokedynamic
call site that
 implements a
switch
on a target of an enum type.
EnumSyntax
- Class in
javax.print.attribute
Class
EnumSyntax
is an abstract base class providing the common
 implementation of all "type safe enumeration" objects.
EnumSyntax(int)
- Constructor for class javax.print.attribute.
EnumSyntax
Construct a new enumeration value with the given integer value.
enumType()
- Method in exception class java.lang.
EnumConstantNotPresentException
Returns the type of the missing enum constant.
env(Map<String, String>)
- Method in interface jdk.jshell.tool.
JavaShellToolBuilder
Set the source for environment variables.
ENV_10
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for NA_NUMBER_10_ENVELOPE.
ENV_10X13
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for NA_10X13_ENVELOPE.
ENV_10X14
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for NA_10X14_ENVELOPE.
ENV_10X15
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for NA_10X15_ENVELOPE.
ENV_11
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for NA_NUMBER_11_ENVELOPE.
ENV_12
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for NA_NUMBER_12_ENVELOPE.
ENV_14
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for NA_NUMBER_14_ENVELOPE.
ENV_6X9
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for NA_6X9_ENVELOPE.
ENV_7X9
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for NA_7X9_ENVELOPE.
ENV_9
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for NA_NUMBER_9_ENVELOPE.
ENV_9X11
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for NA_9X11_ENVELOPE.
ENV_9X12
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for NA_9X12_ENVELOPE.
ENV_INVITE
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for INVITE_ENVELOPE.
ENV_ITALY
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ITALY_ENVELOPE.
ENV_MONARCH
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for MONARCH_ENVELOPE.
ENV_PERSONAL
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for PERSONAL_ENVELOPE.
ENVELOPE
- Static variable in class javax.print.attribute.standard.
MediaTray
The envelope input tray in the printer.
ENVELOPED
- Static variable in interface javax.xml.crypto.dsig.
Transform
The
Enveloped Signature
transform algorithm URI.
ENVIRON_VAR
- Enum constant in enum class com.sun.management.
VMOption.Origin
The VM option was set via an environment variable.
environment
- Variable in exception class javax.naming.
CannotProceedException
Contains the environment
 relevant for the Context or DirContext method that cannot proceed.
environment()
- Method in class java.lang.
ProcessBuilder
Returns a string map view of this process builder's environment.
Environment Properties
- Search tag in interface javax.naming.Context
Section
Environment Properties
- Search tag in module jdk.naming.dns
Section
eof
- Variable in exception class java.io.
OptionalDataException
True if there is no more data in the buffered part of the stream.
EOFException
- Exception Class in
java.io
Signals that an end of file or end of stream has been reached
 unexpectedly during input.
EOFException()
- Constructor for exception class java.io.
EOFException
Constructs an
EOFException
with
null
as its error detail message.
EOFException(String)
- Constructor for exception class java.io.
EOFException
Constructs an
EOFException
with the specified detail
 message.
eolIsSignificant(boolean)
- Method in class java.io.
StreamTokenizer
Determines whether or not ends of line are treated as tokens.
eos
- Variable in class java.util.zip.
GZIPInputStream
Indicates end of input stream.
EPOCH
- Static variable in class java.time.
Instant
Constant for the 1970-01-01T00:00:00Z epoch instant.
EPOCH
- Static variable in class java.time.
LocalDate
The epoch year
LocalDate
, '1970-01-01'.
EPOCH_DAY
- Enum constant in enum class java.time.temporal.
ChronoField
The epoch-day, based on the Java epoch of 1970-01-01 (ISO).
epochSecond(int, int, int, int, int, int, ZoneOffset)
- Method in interface java.time.chrono.
Chronology
Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z.
epochSecond(int, int, int, int, int, int, ZoneOffset)
- Method in class java.time.chrono.
IsoChronology
Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z.
epochSecond(Era, int, int, int, int, int, int, ZoneOffset)
- Method in interface java.time.chrono.
Chronology
Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z.
eq(byte)
- Method in class jdk.incubator.vector.
ByteVector
Tests if this vector is equal to an input scalar.
eq(double)
- Method in class jdk.incubator.vector.
DoubleVector
Tests if this vector is equal to an input scalar.
eq(float)
- Method in class jdk.incubator.vector.
FloatVector
Tests if this vector is equal to an input scalar.
eq(int)
- Method in class jdk.incubator.vector.
IntVector
Tests if this vector is equal to an input scalar.
eq(long)
- Method in class jdk.incubator.vector.
LongVector
Tests if this vector is equal to an input scalar.
eq(short)
- Method in class jdk.incubator.vector.
ShortVector
Tests if this vector is equal to an input scalar.
eq(ValueExp, ValueExp)
- Static method in class javax.management.
Query
Returns a query expression that represents an equality constraint on
 two values.
eq(Vector<E>)
- Method in class jdk.incubator.vector.
Vector
Tests if this vector is equal to another input vector.
eq(Vector<Byte>)
- Method in class jdk.incubator.vector.
ByteVector
Tests if this vector is equal to another input vector.
eq(Vector<Double>)
- Method in class jdk.incubator.vector.
DoubleVector
Tests if this vector is equal to another input vector.
eq(Vector<Float>)
- Method in class jdk.incubator.vector.
FloatVector
Tests if this vector is equal to another input vector.
eq(Vector<Integer>)
- Method in class jdk.incubator.vector.
IntVector
Tests if this vector is equal to another input vector.
eq(Vector<Long>)
- Method in class jdk.incubator.vector.
LongVector
Tests if this vector is equal to another input vector.
eq(Vector<Short>)
- Method in class jdk.incubator.vector.
ShortVector
Tests if this vector is equal to another input vector.
eq(VectorMask<E>)
- Method in class jdk.incubator.vector.
VectorMask
Determines logical equivalence of this mask
 to a second input mask (as boolean
a==b
or
a^~b
).
EQ
- Static variable in class javax.management.
Query
A code representing the
Query.eq(javax.management.ValueExp, javax.management.ValueExp)
query.
EQ
- Static variable in class jdk.incubator.vector.
VectorOperators
Compare
a==b
.
EQUAL
- Enum constant in enum class javax.swing.
RowFilter.ComparisonType
Indicates that entries with a value equal to the supplied
 value should be included.
EQUAL
- Static variable in class javax.xml.datatype.
DatatypeConstants
Comparison result.
EQUAL_TO
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
BinaryTree
representing
 equal-to
==
.
equals(boolean[], boolean[])
- Static method in class java.util.
Arrays
Returns
true
if the two specified arrays of booleans are
equal
to one another.
equals(boolean[], int, int, boolean[], int, int)
- Static method in class java.util.
Arrays
Returns true if the two specified arrays of booleans, over the specified
 ranges, are
equal
to one another.
equals(byte[], byte[])
- Static method in class java.util.
Arrays
Returns
true
if the two specified arrays of bytes are
equal
to one another.
equals(byte[], int, int, byte[], int, int)
- Static method in class java.util.
Arrays
Returns true if the two specified arrays of bytes, over the specified
 ranges, are
equal
to one another.
equals(char[], char[])
- Static method in class java.util.
Arrays
Returns
true
if the two specified arrays of chars are
equal
to one another.
equals(char[], int, int, char[], int, int)
- Static method in class java.util.
Arrays
Returns true if the two specified arrays of chars, over the specified
 ranges, are
equal
to one another.
equals(double[], double[])
- Static method in class java.util.
Arrays
Returns
true
if the two specified arrays of doubles are
equal
to one another.
equals(double[], int, int, double[], int, int)
- Static method in class java.util.
Arrays
Returns true if the two specified arrays of doubles, over the specified
 ranges, are
equal
to one another.
equals(float[], float[])
- Static method in class java.util.
Arrays
Returns
true
if the two specified arrays of floats are
equal
to one another.
equals(float[], int, int, float[], int, int)
- Static method in class java.util.
Arrays
Returns true if the two specified arrays of floats, over the specified
 ranges, are
equal
to one another.
equals(int[], int[])
- Static method in class java.util.
Arrays
Returns
true
if the two specified arrays of ints are
equal
to one another.
equals(int[], int, int, int[], int, int)
- Static method in class java.util.
Arrays
Returns true if the two specified arrays of ints, over the specified
 ranges, are
equal
to one another.
equals(long[], int, int, long[], int, int)
- Static method in class java.util.
Arrays
Returns true if the two specified arrays of longs, over the specified
 ranges, are
equal
to one another.
equals(long[], long[])
- Static method in class java.util.
Arrays
Returns
true
if the two specified arrays of longs are
equal
to one another.
equals(short[], int, int, short[], int, int)
- Static method in class java.util.
Arrays
Returns true if the two specified arrays of shorts, over the specified
 ranges, are
equal
to one another.
equals(short[], short[])
- Static method in class java.util.
Arrays
Returns
true
if the two specified arrays of shorts are
equal
to one another.
equals(DataFlavor)
- Method in class java.awt.datatransfer.
DataFlavor
This method has the same behavior as
DataFlavor.equals(Object)
.
equals(DisplayMode)
- Method in class java.awt.
DisplayMode
Returns whether the two display modes are equal.
equals(FontRenderContext)
- Method in class java.awt.font.
FontRenderContext
Return true if rhs has the same transform, antialiasing,
 and fractional metrics values as this.
equals(GlyphVector)
- Method in class java.awt.font.
GlyphVector
Tests if the specified
GlyphVector
exactly
 equals this
GlyphVector
.
equals(ImageGraphicAttribute)
- Method in class java.awt.font.
ImageGraphicAttribute
Compares this
ImageGraphicAttribute
to the specified
ImageGraphicAttribute
.
equals(ShapeGraphicAttribute)
- Method in class java.awt.font.
ShapeGraphicAttribute
Compares this
ShapeGraphicAttribute
to the specified
ShapeGraphicAttribute
.
equals(TextHitInfo)
- Method in class java.awt.font.
TextHitInfo
Returns
true
if the specified
TextHitInfo
has the same
charIndex
and
isLeadingEdge
as this
TextHitInfo
.
equals(TextLayout)
- Method in class java.awt.font.
TextLayout
Returns
true
if the two layouts are equal.
equals(Area)
- Method in class java.awt.geom.
Area
Tests whether the geometries of the two
Area
objects
 are equal.
equals(MenuShortcut)
- Method in class java.awt.
MenuShortcut
Returns whether this MenuShortcut is the same as another:
 equality is defined to mean that both MenuShortcuts use the same key
 and both either use or don't use the SHIFT key.
equals(Object)
- Method in class com.sun.java.accessibility.util.
Translator
Returns true if this object is the same as the one passed in.
equals(Object)
- Method in interface com.sun.jdi.
BooleanValue
Compares the specified Object with this BooleanValue for equality.
equals(Object)
- Method in interface com.sun.jdi.
ByteValue
Compares the specified Object with this ByteValue for equality.
equals(Object)
- Method in interface com.sun.jdi.
CharValue
Compares the specified Object with this CharValue for equality.
equals(Object)
- Method in interface com.sun.jdi.
DoubleValue
Compares the specified Object with this DoubleValue for equality.
equals(Object)
- Method in interface com.sun.jdi.
Field
Compares the specified Object with this field for equality.
equals(Object)
- Method in interface com.sun.jdi.
FloatValue
Compares the specified Object with this FloatValue for equality.
equals(Object)
- Method in interface com.sun.jdi.
IntegerValue
Compares the specified Object with this IntegerValue for equality.
equals(Object)
- Method in interface com.sun.jdi.
LocalVariable
Compares the specified Object with this LocalVariable for equality.
equals(Object)
- Method in interface com.sun.jdi.
Location
Compares the specified Object with this Location for equality.
equals(Object)
- Method in interface com.sun.jdi.
LongValue
Compares the specified Object with this LongValue for equality.
equals(Object)
- Method in interface com.sun.jdi.
Method
Compares the specified Object with this method for equality.
equals(Object)
- Method in interface com.sun.jdi.
ObjectReference
Compares the specified Object with this ObjectReference for equality.
equals(Object)
- Method in interface com.sun.jdi.
ReferenceType
Compares the specified Object with this ReferenceType for equality.
equals(Object)
- Method in interface com.sun.jdi.
ShortValue
Compares the specified Object with this ShortValue for equality.
equals(Object)
- Method in interface com.sun.jdi.
VoidValue
Compares the specified Object with this VoidValue for equality.
equals(Object)
- Method in class com.sun.management.
GcInfo
equals(Object)
- Method in class com.sun.net.httpserver.
Headers
equals(Object)
- Method in class com.sun.net.httpserver.
HttpPrincipal
Compare two instances of
HttpPrincipal
.
equals(Object)
- Method in class com.sun.nio.sctp.
SctpStandardSocketOptions.InitMaxStreams
Returns true if the specified object is another
InitMaxStreams
instance with the same number of in and out bound streams.
equals(Object)
- Method in class com.sun.security.auth.
LdapPrincipal
Compares this principal to the specified object.
equals(Object)
- Method in class com.sun.security.auth.
NTDomainPrincipal
Compares the specified Object with this
NTDomainPrincipal
for equality.
equals(Object)
- Method in class com.sun.security.auth.
NTNumericCredential
Compares the specified Object with this
NTNumericCredential
for equality.
equals(Object)
- Method in class com.sun.security.auth.
NTSid
Compares the specified Object with this
NTSid
for equality.
equals(Object)
- Method in class com.sun.security.auth.
NTSidDomainPrincipal
Compares the specified Object with this
NTSidDomainPrincipal
for equality.
equals(Object)
- Method in class com.sun.security.auth.
NTSidGroupPrincipal
Compares the specified Object with this
NTSidGroupPrincipal
for equality.
equals(Object)
- Method in class com.sun.security.auth.
NTSidPrimaryGroupPrincipal
Compares the specified Object with this
NTSidPrimaryGroupPrincipal
for equality.
equals(Object)
- Method in class com.sun.security.auth.
NTSidUserPrincipal
Compares the specified Object with this
NTSidUserPrincipal
for equality.
equals(Object)
- Method in class com.sun.security.auth.
NTUserPrincipal
Compares the specified Object with this
NTUserPrincipal
for equality.
equals(Object)
- Method in class com.sun.security.auth.
UnixNumericGroupPrincipal
Compares the specified Object with this
UnixNumericGroupPrincipal
for equality.
equals(Object)
- Method in class com.sun.security.auth.
UnixNumericUserPrincipal
Compares the specified Object with this
UnixNumericUserPrincipal
for equality.
equals(Object)
- Method in class com.sun.security.auth.
UnixPrincipal
Compares the specified Object with this
UnixPrincipal
for equality.
equals(Object)
- Method in class com.sun.security.auth.
UserPrincipal
Compares this principal to the specified object.
equals(Object)
- Method in class com.sun.tools.attach.
VirtualMachine
Tests this VirtualMachine for equality with another object.
equals(Object)
- Method in class com.sun.tools.attach.
VirtualMachineDescriptor
Tests this VirtualMachineDescriptor for equality with another object.
equals(Object)
- Method in class java.awt.
AlphaComposite
Determines whether the specified object is equal to this
AlphaComposite
.
equals(Object)
- Method in class java.awt.
AWTKeyStroke
Returns true if this object is identical to the specified object.
equals(Object)
- Method in class java.awt.
BasicStroke
Tests if a specified object is equal to this
BasicStroke
by first testing if it is a
BasicStroke
and then comparing
 its width, join, cap, miter limit, dash, and dash phase attributes with
 those of this
BasicStroke
.
equals(Object)
- Method in class java.awt.
Color
Determines whether another object is equal to this
Color
.
equals(Object)
- Method in class java.awt.datatransfer.
DataFlavor
Indicates whether some other object is "equal to" this one.
equals(Object)
- Method in class java.awt.
Dimension
Checks whether two dimension objects have equal values.
equals(Object)
- Method in class java.awt.
Font
Compares this
Font
object to the specified
Object
.
equals(Object)
- Method in class java.awt.font.
FontRenderContext
Return true if obj is an instance of FontRenderContext and has the same
 transform, antialiasing, and fractional metrics values as this.
equals(Object)
- Method in class java.awt.font.
ImageGraphicAttribute
Compares this
ImageGraphicAttribute
to the specified
Object
.
equals(Object)
- Method in class java.awt.font.
NumericShaper
Returns
true
if the specified object is an instance of
NumericShaper
and shapes identically to this one,
 regardless of the range representations, the bit mask or the
 enum.
equals(Object)
- Method in class java.awt.font.
ShapeGraphicAttribute
Compares this
ShapeGraphicAttribute
to the specified
Object
.
equals(Object)
- Method in class java.awt.font.
TextHitInfo
Returns
true
if the specified
Object
is a
TextHitInfo
and equals this
TextHitInfo
.
equals(Object)
- Method in class java.awt.font.
TransformAttribute
Returns
true
if rhs is a
TransformAttribute
whose transform is equal to this
TransformAttribute
's
 transform.
equals(Object)
- Method in class java.awt.geom.
AffineTransform
Returns
true
if this
AffineTransform
represents the same affine coordinate transform as the specified
 argument.
equals(Object)
- Method in class java.awt.geom.
Arc2D
Determines whether or not the specified
Object
is
 equal to this
Arc2D
.
equals(Object)
- Method in class java.awt.geom.
Ellipse2D
Determines whether or not the specified
Object
is
 equal to this
Ellipse2D
.
equals(Object)
- Method in class java.awt.geom.
Point2D
Determines whether or not two points are equal.
equals(Object)
- Method in class java.awt.geom.
Rectangle2D
Determines whether or not the specified
Object
is
 equal to this
Rectangle2D
.
equals(Object)
- Method in class java.awt.geom.
RoundRectangle2D
Determines whether or not the specified
Object
is
 equal to this
RoundRectangle2D
.
equals(Object)
- Method in class java.awt.image.
ColorModel
This method simply delegates to the default implementation in
Object
which is identical to an
==
test since this class cannot enforce the
 issues of a proper equality test among multiple independent subclass
 branches.
equals(Object)
- Method in class java.awt.image.
ComponentColorModel
Tests if the specified
Object
is an instance
 of
ComponentColorModel
and equals this
ComponentColorModel
.
equals(Object)
- Method in class java.awt.image.
IndexColorModel
Tests if the specified
Object
is an
 instance of
IndexColorModel
and if it equals this
IndexColorModel
equals(Object)
- Method in class java.awt.image.
PackedColorModel
Tests if the specified
Object
is an instance
 of
PackedColorModel
and equals this
PackedColorModel
.
equals(Object)
- Method in class java.awt.
Insets
Checks whether two insets objects are equal.
equals(Object)
- Method in class java.awt.
JobAttributes
Determines whether two JobAttributes are equal to each other.
equals(Object)
- Method in class java.awt.
MenuShortcut
Returns whether this MenuShortcut is the same as another:
 equality is defined to mean that both MenuShortcuts use the same key
 and both either use or don't use the SHIFT key.
equals(Object)
- Method in class java.awt.
PageAttributes
Determines whether two PageAttributes are equal to each other.
equals(Object)
- Method in class java.awt.
Point
Determines whether or not two points are equal.
equals(Object)
- Method in class java.awt.
Rectangle
Checks whether two rectangles are equal.
equals(Object)
- Method in class java.awt.
RenderingHints
Compares the specified
Object
with this
RenderingHints
for equality.
equals(Object)
- Method in class java.awt.
RenderingHints.Key
The equals method for all Key objects will return the same
 result as the equality operator '=='.
equals(Object)
- Method in class java.beans.
IndexedPropertyDescriptor
Compares this
PropertyDescriptor
against the specified object.
equals(Object)
- Method in class java.beans.
PropertyDescriptor
Compares this
PropertyDescriptor
against the specified object.
equals(Object)
- Method in class java.io.
File
Tests this abstract pathname for equality with the given object.
equals(Object)
- Method in class java.io.
FilePermission
Checks two FilePermission objects for equality.
equals(Object)
- Method in interface java.lang.annotation.
Annotation
Returns true if the specified object represents an annotation
 that is logically equivalent to this one.
equals(Object)
- Method in class java.lang.
Boolean
Returns
true
if and only if the argument is not
null
and is a
Boolean
object that
 represents the same
boolean
value as this object.
equals(Object)
- Method in class java.lang.
Byte
Compares this object to the specified object.
equals(Object)
- Method in class java.lang.
Character
Compares this object against the specified object.
equals(Object)
- Method in class java.lang.
Character.Subset
Compares two
Subset
objects for equality.
equals(Object)
- Method in interface java.lang.constant.
ClassDesc
Compare the specified object with this descriptor for equality.
equals(Object)
- Method in class java.lang.constant.
DynamicCallSiteDesc
Compares the specified object with this descriptor for equality.
equals(Object)
- Method in class java.lang.constant.
DynamicConstantDesc
Compares the specified object with this descriptor for equality.
equals(Object)
- Method in interface java.lang.constant.
MethodHandleDesc
Compares the specified object with this descriptor for equality.
equals(Object)
- Method in interface java.lang.constant.
MethodTypeDesc
Compares the specified object with this descriptor for equality.
equals(Object)
- Method in interface java.lang.constant.
ModuleDesc
Compare the specified object with this descriptor for equality.
equals(Object)
- Method in interface java.lang.constant.
PackageDesc
Compare the specified object with this descriptor for equality.
equals(Object)
- Method in class java.lang.
Double
Compares this object against the specified object.
equals(Object)
- Method in class java.lang.
Enum
Returns true if the specified object is equal to this
 enum constant.
equals(Object)
- Method in class java.lang.
Float
Compares this object against the specified object.
equals(Object)
- Method in interface java.lang.foreign.
MemoryLayout
PREVIEW
Compares the specified object with this layout for equality.
equals(Object)
- Method in interface java.lang.foreign.
MemorySegment
PREVIEW
Compares the specified object with this memory segment for equality.
equals(Object)
- Method in interface java.lang.foreign.
MemorySegment.Scope
PREVIEW
Returns
true
, if the provided object is also a scope, which models the same lifetime as that
 modelled by this scope.
equals(Object)
- Method in class java.lang.
Integer
Compares this object to the specified object.
equals(Object)
- Method in class java.lang.invoke.
MethodType
Compares the specified object with this type for equality.
equals(Object)
- Method in class java.lang.
Long
Compares this object to the specified object.
equals(Object)
- Method in class java.lang.module.
ModuleDescriptor
Tests this module descriptor for equality with the given object.
equals(Object)
- Method in class java.lang.module.
ModuleDescriptor.Exports
Tests this module export for equality with the given object.
equals(Object)
- Method in class java.lang.module.
ModuleDescriptor.Opens
Tests this module
Opens
for equality with the given object.
equals(Object)
- Method in class java.lang.module.
ModuleDescriptor.Provides
Tests this
Provides
for equality with the given object.
equals(Object)
- Method in class java.lang.module.
ModuleDescriptor.Requires
Tests this module dependence for equality with the given object.
equals(Object)
- Method in class java.lang.module.
ModuleDescriptor.Version
Tests this module version for equality with the given object.
equals(Object)
- Method in class java.lang.module.
ResolvedModule
Tests this resolved module for equality with the given object.
equals(Object)
- Method in class java.lang.
Object
Indicates whether some other object is "equal to" this one.
equals(Object)
- Method in class java.lang.
ProcessBuilder.Redirect
Compares the specified object with this
Redirect
for
 equality.
equals(Object)
- Method in interface java.lang.
ProcessHandle
Returns
true
if
other
object is non-null, is of the
 same implementation, and represents the same system process;
 otherwise it returns
false
.
equals(Object)
- Method in class java.lang.
Record
Indicates whether some other object is "equal to" this one.
equals(Object)
- Method in class java.lang.reflect.
Constructor
Compares this
Constructor
against the specified object.
equals(Object)
- Method in class java.lang.reflect.
Field
Compares this
Field
against the specified object.
equals(Object)
- Method in class java.lang.reflect.
Method
Compares this
Method
against the specified object.
equals(Object)
- Method in class java.lang.reflect.
Parameter
Compares based on the executable and the index.
equals(Object)
- Method in class java.lang.
Runtime.Version
Determines whether this
Version
is equal to another object.
equals(Object)
- Method in class java.lang.
Short
Compares this object to the specified object.
equals(Object)
- Method in class java.lang.
StackTraceElement
Returns true if the specified object is another
StackTraceElement
instance representing the same execution
 point as this instance.
equals(Object)
- Method in class java.lang.
String
Compares this string to the specified object.
equals(Object)
- Method in class java.math.
BigDecimal
Compares this
BigDecimal
with the specified
Object
for equality.
equals(Object)
- Method in class java.math.
BigInteger
Compares this BigInteger with the specified Object for equality.
equals(Object)
- Method in class java.math.
MathContext
Compares this
MathContext
with the specified
Object
for equality.
equals(Object)
- Method in class java.net.http.
HttpHeaders
Tests this HTTP headers instance for equality with the given object.
equals(Object)
- Method in class java.net.http.
HttpRequest
Tests this HTTP request instance for equality with the given object.
equals(Object)
- Method in class java.net.
HttpCookie
Test the equality of two HTTP cookies.
equals(Object)
- Method in class java.net.
Inet4Address
Compares this object against the specified object.
equals(Object)
- Method in class java.net.
Inet6Address
Compares this object against the specified object.
equals(Object)
- Method in class java.net.
InetAddress
Compares this object against the specified object.
equals(Object)
- Method in class java.net.
InetSocketAddress
Compares this object against the specified object.
equals(Object)
- Method in class java.net.
InterfaceAddress
Compares this object against the specified object.
equals(Object)
- Method in class java.net.
NetworkInterface
Compares this object against the specified object.
equals(Object)
- Method in class java.net.
Proxy
Compares this object against the specified object.
equals(Object)
- Method in class java.net.
SocketPermission
Checks two SocketPermission objects for equality.
equals(Object)
- Method in class java.net.
UnixDomainSocketAddress
Compares this address with another object.
equals(Object)
- Method in class java.net.
URI
Tests this URI for equality with another object.
equals(Object)
- Method in class java.net.
URL
Compares this URL for equality with another object.
equals(Object)
- Method in class java.net.
URLPermission
Returns true if, this.getActions().equals(p.getActions())
 and p's url equals this's url.
equals(Object)
- Method in class java.nio.
ByteBuffer
Tells whether or not this buffer is equal to another object.
equals(Object)
- Method in class java.nio.
CharBuffer
Tells whether or not this buffer is equal to another object.
equals(Object)
- Method in class java.nio.charset.
Charset
Tells whether or not this object is equal to another.
equals(Object)
- Method in class java.nio.
DoubleBuffer
Tells whether or not this buffer is equal to another object.
equals(Object)
- Method in class java.nio.file.attribute.
AclEntry
Compares the specified object with this ACL entry for equality.
equals(Object)
- Method in class java.nio.file.attribute.
FileTime
Tests this
FileTime
for equality with the given object.
equals(Object)
- Method in interface java.nio.file.
Path
Tests this path for equality with the given object.
equals(Object)
- Method in class java.nio.
FloatBuffer
Tells whether or not this buffer is equal to another object.
equals(Object)
- Method in class java.nio.
IntBuffer
Tells whether or not this buffer is equal to another object.
equals(Object)
- Method in class java.nio.
LongBuffer
Tells whether or not this buffer is equal to another object.
equals(Object)
- Method in class java.nio.
ShortBuffer
Tells whether or not this buffer is equal to another object.
equals(Object)
- Method in class java.rmi.dgc.
VMID
Compare this VMID to another, and return true if they are the
 same identifier.
equals(Object)
- Method in class java.rmi.
MarshalledObject
Compares this
MarshalledObject
to another object.
equals(Object)
- Method in class java.rmi.server.
ObjID
Compares the specified object with this
ObjID
for
 equality.
equals(Object)
- Method in class java.rmi.server.
RemoteObject
Compares two remote objects for equality.
equals(Object)
- Method in class java.rmi.server.
UID
Compares the specified object with this
UID
for
 equality.
equals(Object)
- Method in class java.security.
AccessControlContext
Deprecated.
Checks two
AccessControlContext
objects for equality.
equals(Object)
- Method in class java.security.
AllPermission
Checks two
AllPermission
objects for equality.
equals(Object)
- Method in class java.security.
BasicPermission
Checks two
BasicPermission
objects for equality.
equals(Object)
- Method in class java.security.cert.
Certificate
Compares this certificate for equality with the specified
 object.
equals(Object)
- Method in class java.security.cert.
CertPath
Compares this certification path for equality with the specified
 object.
equals(Object)
- Method in class java.security.cert.
URICertStoreParameters
Compares the specified object with this parameters object for equality.
equals(Object)
- Method in class java.security.cert.
X509CRL
Compares this CRL for equality with the given
 object.
equals(Object)
- Method in class java.security.cert.
X509CRLEntry
Compares this CRL entry for equality with the given
 object.
equals(Object)
- Method in class java.security.
CodeSigner
Tests for equality between the specified object and this
 code signer.
equals(Object)
- Method in class java.security.
CodeSource
Tests for equality between the specified object and this
 object.
equals(Object)
- Method in class java.security.
Identity
Deprecated.
Tests for equality between the specified object and this
Identity
.
equals(Object)
- Method in class java.security.
Permission
Checks two
Permission
objects for equality.
equals(Object)
- Method in class java.security.
PKCS12Attribute
Compares this
PKCS12Attribute
and a specified object for
 equality.
equals(Object)
- Method in interface java.security.
Principal
Compares this
Principal
to the specified object.
equals(Object)
- Method in class java.security.spec.
ECFieldF2m
Compares this finite field for equality with the
 specified object.
equals(Object)
- Method in class java.security.spec.
ECFieldFp
Compares this prime finite field for equality with the
 specified object.
equals(Object)
- Method in class java.security.spec.
ECPoint
Compares this elliptic curve point for equality with
 the specified object.
equals(Object)
- Method in class java.security.spec.
EllipticCurve
Compares this elliptic curve for equality with the
 specified object.
equals(Object)
- Method in class java.security.
Timestamp
Tests for equality between the specified object and this
Timestamp
.
equals(Object)
- Method in class java.security.
UnresolvedPermission
Checks two
UnresolvedPermission
objects for equality.
equals(Object)
- Method in interface java.sql.
RowId
Compares this
RowId
to the specified object.
equals(Object)
- Method in class java.sql.
Timestamp
Tests to see if this
Timestamp
object is
 equal to the given object.
equals(Object)
- Method in class java.text.
AttributedCharacterIterator.Attribute
Compares two objects for equality.
equals(Object)
- Method in class java.text.
ChoiceFormat
Equality comparison between two
equals(Object)
- Method in class java.text.
Collator
Compares the equality of two Collators.
equals(Object)
- Method in class java.text.
CompactNumberFormat
Checks if this
CompactNumberFormat
is equal to the
 specified
obj
.
equals(Object)
- Method in class java.text.
DateFormat
Overrides equals
equals(Object)
- Method in class java.text.
DateFormatSymbols
Override equals
equals(Object)
- Method in class java.text.
DecimalFormat
Overrides equals
equals(Object)
- Method in class java.text.
DecimalFormatSymbols
Override equals.
equals(Object)
- Method in class java.text.
FieldPosition
Overrides equals
equals(Object)
- Method in class java.text.
MessageFormat
Equality comparison between two message format objects
equals(Object)
- Method in class java.text.
NumberFormat
Overrides equals.
equals(Object)
- Method in class java.text.
ParsePosition
Overrides equals
equals(Object)
- Method in class java.text.
RuleBasedCollator
Compares the equality of two collation objects.
equals(Object)
- Method in class java.text.
SimpleDateFormat
Compares the given object with this
SimpleDateFormat
for
 equality.
equals(Object)
- Method in class java.text.
StringCharacterIterator
Compares the equality of two StringCharacterIterator objects.
equals(Object)
- Method in class java.time.chrono.
AbstractChronology
Checks if this chronology is equal to another chronology.
equals(Object)
- Method in interface java.time.chrono.
ChronoLocalDate
Checks if this date is equal to another date, including the chronology.
equals(Object)
- Method in interface java.time.chrono.
ChronoLocalDateTime
Checks if this date-time is equal to another date-time, including the chronology.
equals(Object)
- Method in interface java.time.chrono.
Chronology
Checks if this chronology is equal to another chronology.
equals(Object)
- Method in interface java.time.chrono.
ChronoPeriod
Checks if this period is equal to another period, including the chronology.
equals(Object)
- Method in interface java.time.chrono.
ChronoZonedDateTime
Checks if this date-time is equal to another date-time.
equals(Object)
- Method in class java.time.chrono.
HijrahDate
Compares this date to another date, including the chronology.
equals(Object)
- Method in class java.time.chrono.
JapaneseDate
Compares this date to another date, including the chronology.
equals(Object)
- Method in class java.time.chrono.
MinguoDate
Compares this date to another date, including the chronology.
equals(Object)
- Method in class java.time.chrono.
ThaiBuddhistDate
Compares this date to another date, including the chronology.
equals(Object)
- Method in class java.time.
Clock
Checks if this clock is equal to another clock.
equals(Object)
- Method in class java.time.
Duration
Checks if this duration is equal to the specified
Duration
.
equals(Object)
- Method in class java.time.format.
DecimalStyle
Checks if this DecimalStyle is equal to another DecimalStyle.
equals(Object)
- Method in class java.time.
Instant
Checks if this instant is equal to the specified instant.
equals(Object)
- Method in class java.time.
LocalDate
Checks if this date is equal to another date.
equals(Object)
- Method in class java.time.
LocalDateTime
Checks if this date-time is equal to another date-time.
equals(Object)
- Method in class java.time.
LocalTime
Checks if this time is equal to another time.
equals(Object)
- Method in class java.time.
MonthDay
Checks if this month-day is equal to another month-day.
equals(Object)
- Method in class java.time.
OffsetDateTime
Checks if this date-time is equal to another date-time.
equals(Object)
- Method in class java.time.
OffsetTime
Checks if this time is equal to another time.
equals(Object)
- Method in class java.time.
Period
Checks if this period is equal to another period.
equals(Object)
- Method in class java.time.temporal.
ValueRange
Checks if this range is equal to another range.
equals(Object)
- Method in class java.time.temporal.
WeekFields
Checks if this
WeekFields
is equal to the specified object.
equals(Object)
- Method in class java.time.
Year
Checks if this year is equal to another year.
equals(Object)
- Method in class java.time.
YearMonth
Checks if this year-month is equal to another year-month.
equals(Object)
- Method in class java.time.zone.
ZoneOffsetTransition
Checks if this object equals another.
equals(Object)
- Method in class java.time.zone.
ZoneOffsetTransitionRule
Checks if this object equals another.
equals(Object)
- Method in class java.time.zone.
ZoneRules
Checks if this set of rules equals another.
equals(Object)
- Method in class java.time.
ZonedDateTime
Checks if this date-time is equal to another date-time.
equals(Object)
- Method in class java.time.
ZoneId
Checks if this time-zone ID is equal to another time-zone ID.
equals(Object)
- Method in class java.time.
ZoneOffset
Checks if this offset is equal to another offset.
equals(Object)
- Method in class java.util.
AbstractList
Compares the specified object with this list for equality.
equals(Object)
- Method in class java.util.
AbstractMap
Compares the specified object with this map for equality.
equals(Object)
- Method in class java.util.
AbstractMap.SimpleEntry
Compares the specified object with this entry for equality.
equals(Object)
- Method in class java.util.
AbstractMap.SimpleImmutableEntry
Compares the specified object with this entry for equality.
equals(Object)
- Method in class java.util.
AbstractSet
Compares the specified object with this set for equality.
equals(Object)
- Method in class java.util.
ArrayList
Compares the specified object with this list for equality.
equals(Object)
- Method in class java.util.
BitSet
Compares this object against the specified object.
equals(Object)
- Method in class java.util.
Calendar
Compares this
Calendar
to the specified
Object
.
equals(Object)
- Method in interface java.util.
Collection
Compares the specified object with this collection for equality.
equals(Object)
- Method in interface java.util.
Comparator
Indicates whether some other object is "equal to"
 this comparator.
equals(Object)
- Method in class java.util.concurrent.
ConcurrentHashMap
Compares the specified object with this map for equality.
equals(Object)
- Method in class java.util.concurrent.
ConcurrentHashMap.KeySetView
equals(Object)
- Method in class java.util.concurrent.
ConcurrentSkipListMap
Compares the specified object with this map for equality.
equals(Object)
- Method in class java.util.concurrent.
ConcurrentSkipListSet
Compares the specified object with this set for equality.
equals(Object)
- Method in class java.util.concurrent.
CopyOnWriteArrayList
Compares the specified object with this list for equality.
equals(Object)
- Method in class java.util.concurrent.
CopyOnWriteArraySet
Compares the specified object with this set for equality.
equals(Object)
- Method in class java.util.
Date
Compares two dates for equality.
equals(Object)
- Method in class java.util.
EnumMap
Compares the specified object with this map for equality.
equals(Object)
- Method in class java.util.
GregorianCalendar
Compares this
GregorianCalendar
to the specified
Object
.
equals(Object)
- Method in class java.util.
Hashtable
Compares the specified Object with this Map for equality,
 as per the definition in the Map interface.
equals(Object)
- Method in class java.util.
HexFormat
Returns
true
if the other object is a
HexFormat
with the same parameters.
equals(Object)
- Method in class java.util.
IdentityHashMap
Compares the specified object with this map for equality.
equals(Object)
- Method in class java.util.jar.
Attributes
Compares the specified object to the underlying
map
for equality.
equals(Object)
- Method in class java.util.jar.
Attributes.Name
Compares this attribute name to another for equality.
equals(Object)
- Method in class java.util.jar.
Manifest
Returns true if the specified Object is also a Manifest and has
 the same main Attributes and entries.
equals(Object)
- Method in interface java.util.
List
Compares the specified object with this list for equality.
equals(Object)
- Method in class java.util.
Locale
Returns true if this Locale is equal to another object.
equals(Object)
- Method in class java.util.
Locale.LanguageRange
Compares this object to the specified object.
equals(Object)
- Method in class java.util.logging.
Level
Compare two objects for value equality.
equals(Object)
- Method in interface java.util.
Map.Entry
Compares the specified object with this entry for equality.
equals(Object)
- Method in interface java.util.
Map
Compares the specified object with this map for equality.
equals(Object)
- Method in class java.util.
Optional
Indicates whether some other object is "equal to" this
Optional
.
equals(Object)
- Method in class java.util.
OptionalDouble
Indicates whether some other object is "equal to" this
OptionalDouble
.
equals(Object)
- Method in class java.util.
OptionalInt
Indicates whether some other object is "equal to" this
OptionalInt
.
equals(Object)
- Method in class java.util.
OptionalLong
Indicates whether some other object is "equal to" this
OptionalLong
.
equals(Object)
- Method in class java.util.
PropertyPermission
Checks two PropertyPermission objects for equality.
equals(Object)
- Method in interface java.util.
Set
Compares the specified object with this set for equality.
equals(Object)
- Method in class java.util.
SimpleTimeZone
Compares the equality of two
SimpleTimeZone
objects.
equals(Object)
- Method in class java.util.
UUID
Compares this object to the specified object.
equals(Object)
- Method in class java.util.
Vector
Compares the specified Object with this Vector for equality.
equals(Object)
- Method in class javax.crypto.spec.
RC2ParameterSpec
Tests for equality between the specified object and this
 object.
equals(Object)
- Method in class javax.crypto.spec.
RC5ParameterSpec
Tests for equality between the specified object and this
 object.
equals(Object)
- Method in class javax.crypto.spec.
SecretKeySpec
Tests for equality between the specified object and this
 object.
equals(Object)
- Method in class javax.imageio.
ImageTypeSpecifier
Returns
true
if the given
Object
is
 an
ImageTypeSpecifier
and has a
SampleModel
and
ColorModel
that are
 equal to those of this object.
equals(Object)
- Method in interface javax.lang.model.element.
Element
Returns
true
if the argument represents the same
 element as
this
, or
false
otherwise.
equals(Object)
- Method in interface javax.lang.model.element.
Name
Returns
true
if the argument represents the same
 name as
this
, and
false
otherwise.
equals(Object)
- Method in interface javax.lang.model.type.
TypeMirror
Obeys the general contract of
Object.equals
.
equals(Object)
- Method in class javax.management.
Attribute
Compares the current Attribute Object with another Attribute Object.
equals(Object)
- Method in interface javax.management.
Descriptor
Compares this descriptor to the given object.
equals(Object)
- Method in class javax.management.
ImmutableDescriptor
Compares this descriptor to the given object.
equals(Object)
- Method in class javax.management.
MBeanAttributeInfo
Compare this MBeanAttributeInfo to another.
equals(Object)
- Method in class javax.management.
MBeanConstructorInfo
Compare this MBeanConstructorInfo to another.
equals(Object)
- Method in class javax.management.
MBeanFeatureInfo
Compare this MBeanFeatureInfo to another.
equals(Object)
- Method in class javax.management.
MBeanInfo
Compare this MBeanInfo to another.
equals(Object)
- Method in class javax.management.
MBeanNotificationInfo
Compare this MBeanNotificationInfo to another.
equals(Object)
- Method in class javax.management.
MBeanOperationInfo
Compare this MBeanOperationInfo to another.
equals(Object)
- Method in class javax.management.
MBeanParameterInfo
Compare this MBeanParameterInfo to another.
equals(Object)
- Method in class javax.management.
MBeanPermission
Checks two MBeanPermission objects for equality.
equals(Object)
- Method in class javax.management.
MBeanServerPermission
Checks two MBeanServerPermission objects for equality.
equals(Object)
- Method in class javax.management.modelmbean.
DescriptorSupport
Compares this descriptor to the given object.
equals(Object)
- Method in class javax.management.
ObjectInstance
Compares the current object instance with another object instance.
equals(Object)
- Method in class javax.management.
ObjectName
Compares the current object name with another object name.
equals(Object)
- Method in class javax.management.openmbean.
ArrayType
Compares the specified
obj
parameter with this
ArrayType
instance for equality.
equals(Object)
- Method in interface javax.management.openmbean.
CompositeData
Compares the specified
obj
parameter with this
CompositeData
instance for equality.
equals(Object)
- Method in class javax.management.openmbean.
CompositeDataSupport
Compares the specified
obj
parameter with this
CompositeDataSupport
instance for equality.
equals(Object)
- Method in class javax.management.openmbean.
CompositeType
Compares the specified
obj
parameter with this
CompositeType
instance for equality.
equals(Object)
- Method in interface javax.management.openmbean.
OpenMBeanAttributeInfo
Compares the specified
obj
parameter with this
OpenMBeanAttributeInfo
instance for equality.
equals(Object)
- Method in class javax.management.openmbean.
OpenMBeanAttributeInfoSupport
Compares the specified
obj
parameter with this
OpenMBeanAttributeInfoSupport
instance for equality.
equals(Object)
- Method in interface javax.management.openmbean.
OpenMBeanConstructorInfo
Compares the specified
obj
parameter with this
OpenMBeanConstructorInfo
instance for equality.
equals(Object)
- Method in class javax.management.openmbean.
OpenMBeanConstructorInfoSupport
Compares the specified
obj
parameter with this
OpenMBeanConstructorInfoSupport
instance for
 equality.
equals(Object)
- Method in interface javax.management.openmbean.
OpenMBeanInfo
Compares the specified
obj
parameter with this
OpenMBeanInfo
instance for equality.
equals(Object)
- Method in class javax.management.openmbean.
OpenMBeanInfoSupport
Compares the specified
obj
parameter with this
OpenMBeanInfoSupport
instance for equality.
equals(Object)
- Method in interface javax.management.openmbean.
OpenMBeanOperationInfo
Compares the specified
obj
parameter with this
OpenMBeanOperationInfo
instance for equality.
equals(Object)
- Method in class javax.management.openmbean.
OpenMBeanOperationInfoSupport
Compares the specified
obj
parameter with this
OpenMBeanOperationInfoSupport
instance for
 equality.
equals(Object)
- Method in interface javax.management.openmbean.
OpenMBeanParameterInfo
Compares the specified
obj
parameter with this
OpenMBeanParameterInfo
instance for equality.
equals(Object)
- Method in class javax.management.openmbean.
OpenMBeanParameterInfoSupport
Compares the specified
obj
parameter with this
OpenMBeanParameterInfoSupport
instance for equality.
equals(Object)
- Method in class javax.management.openmbean.
OpenType
Compares the specified
obj
parameter with this
 open type instance for equality.
equals(Object)
- Method in class javax.management.openmbean.
SimpleType
Compares the specified
obj
parameter with this
SimpleType
instance for equality.
equals(Object)
- Method in interface javax.management.openmbean.
TabularData
Compares the specified
obj
parameter with this
TabularData
instance for equality.
equals(Object)
- Method in class javax.management.openmbean.
TabularDataSupport
Compares the specified
obj
parameter with this
TabularDataSupport
instance for equality.
equals(Object)
- Method in class javax.management.openmbean.
TabularType
Compares the specified
obj
parameter with this
TabularType
instance for equality.
equals(Object)
- Method in class javax.management.remote.
JMXPrincipal
Compares the specified Object with this
JMXPrincipal
for equality.
equals(Object)
- Method in class javax.management.remote.
JMXServiceURL
Indicates whether some other object is equal to this one.
equals(Object)
- Method in class javax.naming.
BinaryRefAddr
Determines whether obj is equal to this address.
equals(Object)
- Method in class javax.naming.
CompositeName
Determines whether two composite names are equal.
equals(Object)
- Method in class javax.naming.
CompoundName
Determines whether obj is syntactically equal to this compound name.
equals(Object)
- Method in class javax.naming.directory.
BasicAttribute
Determines whether obj is equal to this attribute.
equals(Object)
- Method in class javax.naming.directory.
BasicAttributes
Determines whether this
BasicAttributes
is equal to another
Attributes
Two
Attributes
are equal if they are both instances of
Attributes
,
 treat the case of attribute IDs the same way, and contain the
 same attributes.
equals(Object)
- Method in class javax.naming.ldap.
LdapName
Determines whether two LDAP names are equal.
equals(Object)
- Method in class javax.naming.ldap.
Rdn
Compares the specified Object with this Rdn for equality.
equals(Object)
- Method in class javax.naming.
RefAddr
Determines whether obj is equal to this RefAddr.
equals(Object)
- Method in class javax.naming.
Reference
Determines whether obj is a reference with the same addresses
 (in same order) as this reference.
equals(Object)
- Method in class javax.net.ssl.
SNIHostName
Compares this server name to the specified object.
equals(Object)
- Method in class javax.net.ssl.
SNIServerName
Indicates whether some other object is "equal to" this server name.
equals(Object)
- Method in interface javax.print.attribute.
AttributeSet
Compares the specified object with this attribute set for equality.
equals(Object)
- Method in class javax.print.attribute.
DateTimeSyntax
Returns whether this date-time attribute is equivalent to the passed in
 object.
equals(Object)
- Method in class javax.print.attribute.
HashAttributeSet
Compares the specified object with this attribute set for equality.
equals(Object)
- Method in class javax.print.attribute.
IntegerSyntax
Returns whether this integer attribute is equivalent to the passed in
 object.
equals(Object)
- Method in class javax.print.attribute.
ResolutionSyntax
Returns whether this resolution attribute is equivalent to the passed in
 object.
equals(Object)
- Method in class javax.print.attribute.
SetOfIntegerSyntax
Returns whether this set-of-integer attribute is equivalent to the passed
 in object.
equals(Object)
- Method in class javax.print.attribute.
Size2DSyntax
Returns whether this two-dimensional size attribute is equivalent to the
 passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
Copies
Returns whether this copies attribute is equivalent to the passed in
 object.
equals(Object)
- Method in class javax.print.attribute.standard.
CopiesSupported
Returns whether this copies supported attribute is equivalent to the
 passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
DateTimeAtCompleted
Returns whether this date-time at completed attribute is equivalent to
 the passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
DateTimeAtCreation
Returns whether this date-time at creation attribute is equivalent to the
 passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
DateTimeAtProcessing
Returns whether this date-time at processing attribute is equivalent to
 the passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
Destination
Returns whether this destination attribute is equivalent to the passed in
 object.
equals(Object)
- Method in class javax.print.attribute.standard.
DocumentName
Returns whether this document name attribute is equivalent to the passed
 in object.
equals(Object)
- Method in class javax.print.attribute.standard.
JobHoldUntil
Returns whether this job hold until attribute is equivalent to the passed
 in object.
equals(Object)
- Method in class javax.print.attribute.standard.
JobImpressions
Returns whether this job impressions attribute is equivalent to the
 passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
JobImpressionsCompleted
Returns whether this job impressions completed attribute is equivalent tp
 the passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
JobImpressionsSupported
Returns whether this job impressions supported attribute is equivalent to
 the passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
JobKOctets
Returns whether this job K octets attribute is equivalent to the passed
 in object.
equals(Object)
- Method in class javax.print.attribute.standard.
JobKOctetsProcessed
Returns whether this job K octets processed attribute is equivalent to
 the passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
JobKOctetsSupported
Returns whether this job K octets supported attribute is equivalent to
 the passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
JobMediaSheets
Returns whether this job media sheets attribute is equivalent to the
 passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
JobMediaSheetsCompleted
Returns whether this job media sheets completed attribute is equivalent
 to the passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
JobMediaSheetsSupported
Returns whether this job media sheets supported attribute is equivalent
 to the passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
JobMessageFromOperator
Returns whether this job message from operator attribute is equivalent to
 the passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
JobName
Returns whether this job name attribute is equivalent to the passed in
 object.
equals(Object)
- Method in class javax.print.attribute.standard.
JobOriginatingUserName
Returns whether this job originating user name attribute is equivalent to
 the passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
JobPriority
Returns whether this job priority attribute is equivalent to the passed
 in object.
equals(Object)
- Method in class javax.print.attribute.standard.
JobPrioritySupported
Returns whether this job priority supported attribute is equivalent to
 the passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
Media
Returns whether this media attribute is equivalent to the passed in
 object.
equals(Object)
- Method in class javax.print.attribute.standard.
MediaPrintableArea
Returns whether this media margins attribute is equivalent to the passed
 in object.
equals(Object)
- Method in class javax.print.attribute.standard.
MediaSize
Returns whether this media size attribute is equivalent to the passed in
 object.
equals(Object)
- Method in class javax.print.attribute.standard.
NumberOfDocuments
Returns whether this number of documents attribute is equivalent to the
 passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
NumberOfInterveningJobs
Returns whether this number of intervening jobs attribute is equivalent
 to the passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
NumberUp
Returns whether this number up attribute is equivalent to the passed in
 object.
equals(Object)
- Method in class javax.print.attribute.standard.
NumberUpSupported
Returns whether this number up supported attribute is equivalent to the
 passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
OutputDeviceAssigned
Returns whether this output device assigned attribute is equivalent to
 the passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
PageRanges
Returns whether this page ranges attribute is equivalent to the passed in
 object.
equals(Object)
- Method in class javax.print.attribute.standard.
PagesPerMinute
Returns whether this pages per minute attribute is equivalent to the
 passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
PagesPerMinuteColor
Returns whether this pages per minute color attribute is equivalent to
 the passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
PrinterInfo
Returns whether this printer info attribute is equivalent to the passed
 in object.
equals(Object)
- Method in class javax.print.attribute.standard.
PrinterLocation
Returns whether this printer location attribute is equivalent to the
 passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
PrinterMakeAndModel
Returns whether this printer make and model attribute is equivalent to
 the passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
PrinterMessageFromOperator
Returns whether this printer message from operator attribute is
 equivalent to the passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
PrinterMoreInfo
Returns whether this printer more info attribute is equivalent to the
 passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
PrinterMoreInfoManufacturer
Returns whether this printer more info manufacturer attribute is
 equivalent to the passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
PrinterName
Returns whether this printer name attribute is equivalent to the passed
 in object.
equals(Object)
- Method in class javax.print.attribute.standard.
PrinterResolution
Returns whether this printer resolution attribute is equivalent to the
 passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
PrinterURI
Returns whether this printer name attribute is equivalent to the passed
 in object.
equals(Object)
- Method in class javax.print.attribute.standard.
QueuedJobCount
Returns whether this queued job count attribute is equivalent to the
 passed in object.
equals(Object)
- Method in class javax.print.attribute.standard.
RequestingUserName
Returns whether this requesting user name attribute is equivalent to the
 passed in object.
equals(Object)
- Method in class javax.print.attribute.
TextSyntax
Returns whether this text attribute is equivalent to the passed in
 object.
equals(Object)
- Method in class javax.print.attribute.
URISyntax
Returns whether this
URI
attribute is equivalent to the passed in
 object.
equals(Object)
- Method in class javax.print.
DocFlavor
Determines if this doc flavor object is equal to the given object.
equals(Object)
- Method in interface javax.print.
PrintService
Determines if two services are referring to the same underlying service.
equals(Object)
- Method in class javax.rmi.ssl.
SslRMIClientSocketFactory
Indicates whether some other object is "equal to" this one.
equals(Object)
- Method in class javax.rmi.ssl.
SslRMIServerSocketFactory
Indicates whether some other object is "equal to" this one.
equals(Object)
- Method in class javax.security.auth.kerberos.
DelegationPermission
Checks two DelegationPermission objects for equality.
equals(Object)
- Method in class javax.security.auth.kerberos.
EncryptionKey
Compares the specified object with this key for equality.
equals(Object)
- Method in class javax.security.auth.kerberos.
KerberosCredMessage
Compares the specified object with this
KerberosCredMessage
for equality.
equals(Object)
- Method in class javax.security.auth.kerberos.
KerberosKey
Compares the specified object with this
KerberosKey
for
 equality.
equals(Object)
- Method in class javax.security.auth.kerberos.
KerberosPrincipal
Compares the specified object with this principal for equality.
equals(Object)
- Method in class javax.security.auth.kerberos.
KerberosTicket
Compares the specified object with this
KerberosTicket
for equality.
equals(Object)
- Method in class javax.security.auth.kerberos.
KeyTab
Compares the specified object with this
KeyTab
for equality.
equals(Object)
- Method in class javax.security.auth.kerberos.
ServicePermission
Checks two ServicePermission objects for equality.
equals(Object)
- Method in class javax.security.auth.
PrivateCredentialPermission
Checks two
PrivateCredentialPermission
objects for
 equality.
equals(Object)
- Method in class javax.security.auth.
Subject
Compares the specified Object with this
Subject
for equality.
equals(Object)
- Method in class javax.security.auth.x500.
X500Principal
Compares the specified
Object
with this
X500Principal
for equality.
equals(Object)
- Method in class javax.security.cert.
Certificate
Deprecated.
Compares this certificate for equality with the specified
 object.
equals(Object)
- Method in class javax.smartcardio.
ATR
Compares the specified object with this ATR for equality.
equals(Object)
- Method in class javax.smartcardio.
CardPermission
Compares the specified object with this CardPermission for equality.
equals(Object)
- Method in class javax.smartcardio.
CommandAPDU
Compares the specified object with this command APDU for equality.
equals(Object)
- Method in class javax.smartcardio.
ResponseAPDU
Compares the specified object with this response APDU for equality.
equals(Object)
- Method in class javax.sound.midi.
MidiDevice.Info
Indicates whether the specified object is equal to this info object,
 returning
true
if the objects are the same.
equals(Object)
- Method in class javax.sound.midi.
Sequencer.SyncMode
Indicates whether the specified object is equal to this
 synchronization mode, returning
true
if the objects are the
 same.
equals(Object)
- Method in class javax.sound.sampled.
AudioFileFormat.Type
Indicates whether the specified object is equal to this file type,
 returning
true
if the objects are equal.
equals(Object)
- Method in class javax.sound.sampled.
AudioFormat.Encoding
Indicates whether the specified object is equal to this encoding,
 returning
true
if the objects are equal.
equals(Object)
- Method in class javax.sound.sampled.
Control.Type
Indicates whether the specified object is equal to this control type,
 returning
true
if the objects are the same.
equals(Object)
- Method in class javax.sound.sampled.
LineEvent.Type
Indicates whether the specified object is equal to this event type,
 returning
true
if the objects are the same.
equals(Object)
- Method in class javax.sound.sampled.
Mixer.Info
Indicates whether the specified object is equal to this info object,
 returning
true
if the objects are the same.
equals(Object)
- Method in class javax.sound.sampled.
Port.Info
Indicates whether the specified object is equal to this info object,
 returning
true
if the objects are the same.
equals(Object)
- Method in class javax.sound.sampled.
ReverbType
Indicates whether the specified object is equal to this reverb type,
 returning
true
if the objects are the same.
equals(Object)
- Method in class javax.sql.rowset.serial.
SerialArray
Compares this SerialArray to the specified object.
equals(Object)
- Method in class javax.sql.rowset.serial.
SerialBlob
Compares this SerialBlob to the specified object.
equals(Object)
- Method in class javax.sql.rowset.serial.
SerialClob
Compares this SerialClob to the specified object.
equals(Object)
- Method in class javax.sql.rowset.serial.
SerialDatalink
Compares this
SerialDatalink
to the specified object.
equals(Object)
- Method in class javax.sql.rowset.serial.
SerialJavaObject
Compares this SerialJavaObject to the specified object.
equals(Object)
- Method in class javax.sql.rowset.serial.
SerialRef
Compares this SerialRef to the specified object.
equals(Object)
- Method in class javax.sql.rowset.serial.
SerialStruct
Compares this SerialStruct to the specified object.
equals(Object)
- Method in class javax.swing.
RowSorter.SortKey
Returns true if this object equals the specified object.
equals(Object)
- Method in class javax.swing.text.
DefaultCaret
Compares this object to the specified object.
equals(Object)
- Method in class javax.swing.text.html.
HTML.UnknownTag
Compares this object to the specified object.
equals(Object)
- Method in class javax.swing.text.
SimpleAttributeSet
Compares this object to the specified object.
equals(Object)
- Method in class javax.swing.text.
StyleContext.SmallAttributeSet
Compares this object to the specified object.
equals(Object)
- Method in class javax.swing.text.
TabSet
Indicates whether this
TabSet
is equal to another one.
equals(Object)
- Method in class javax.swing.text.
TabStop
Returns true if the tabs are equal.
equals(Object)
- Method in class javax.swing.tree.
TreePath
Compares this
TreePath
to the specified object.
equals(Object)
- Method in class javax.xml.datatype.
Duration
Checks if this duration object has the same duration
 as another
Duration
object.
equals(Object)
- Method in class javax.xml.datatype.
XMLGregorianCalendar
Compares this calendar to the specified object.
equals(Object)
- Method in class javax.xml.namespace.
QName
Test this
QName
for equality with another
Object
.
equals(Object)
- Method in class jdk.dynalink.
CallSiteDescriptor
Returns true if this call site descriptor is equal to the passed object.
equals(Object)
- Method in class jdk.dynalink.
NamedOperation
Compares this named operation to another object.
equals(Object)
- Method in class jdk.dynalink.
NamespaceOperation
Returns true if the other object is also a namespace operation and their
 base operation and namespaces are equal.
equals(Object)
- Method in class jdk.incubator.vector.
ByteVector
Indicates whether this vector is identical to some other object.
equals(Object)
- Method in class jdk.incubator.vector.
DoubleVector
Indicates whether this vector is identical to some other object.
equals(Object)
- Method in class jdk.incubator.vector.
FloatVector
Indicates whether this vector is identical to some other object.
equals(Object)
- Method in class jdk.incubator.vector.
IntVector
Indicates whether this vector is identical to some other object.
equals(Object)
- Method in class jdk.incubator.vector.
LongVector
Indicates whether this vector is identical to some other object.
equals(Object)
- Method in class jdk.incubator.vector.
ShortVector
Indicates whether this vector is identical to some other object.
equals(Object)
- Method in class jdk.incubator.vector.
Vector
Indicates whether this vector is identical to some other object.
equals(Object)
- Method in class jdk.incubator.vector.
VectorMask
Indicates whether this mask is identical to some other object.
equals(Object)
- Method in class jdk.incubator.vector.
VectorShuffle
Indicates whether this shuffle is identical to some other object.
equals(Object)
- Method in interface jdk.incubator.vector.
VectorSpecies
Indicates whether this species is identical to some other object.
equals(Object)
- Method in record class jdk.jshell.
SourceCodeAnalysis.Highlight
Indicates whether some other object is "equal to" this one.
equals(Object)
- Method in record class jdk.net.
UnixDomainPrincipal
Indicates whether some other object is "equal to" this one.
equals(Object)
- Method in class org.ietf.jgss.
ChannelBinding
Compares two instances of ChannelBinding.
equals(Object)
- Method in interface org.ietf.jgss.
GSSCredential
Tests if this GSSCredential asserts the same entity as the supplied
 object.
equals(Object)
- Method in interface org.ietf.jgss.
GSSName
Compares this
GSSName
object to another Object that might be a
GSSName
.
equals(Object)
- Method in class org.ietf.jgss.
Oid
Tests if two Oid objects represent the same Object identifier
 value.
equals(Object[], int, int, Object[], int, int)
- Static method in class java.util.
Arrays
Returns true if the two specified arrays of Objects, over the specified
 ranges, are
equal
to one another.
equals(Object[], Object[])
- Static method in class java.util.
Arrays
Returns
true
if the two specified arrays of Objects are
equal
to one another.
equals(Object, Object)
- Static method in class java.util.
Objects
Returns
true
if the arguments are equal to each other
 and
false
otherwise.
equals(String)
- Method in class java.awt.datatransfer.
DataFlavor
Deprecated.
As inconsistent with
hashCode()
contract, use
DataFlavor.isMimeTypeEqual(String)
instead.
equals(String, String)
- Method in class java.text.
Collator
Convenience method for comparing the equality of two strings based on
 this Collator's collation rules.
equals(URL, URL)
- Method in class java.net.
URLStreamHandler
Provides the default equals calculation.
equals(Timestamp)
- Method in class java.sql.
Timestamp
Tests to see if this
Timestamp
object is
 equal to the given
Timestamp
object.
equals(GSSName)
- Method in interface org.ietf.jgss.
GSSName
Compares two
GSSName
objects to determine if they refer to the
 same entity.
equals(T[], int, int, T[], int, int, Comparator<? super T>)
- Static method in class java.util.
Arrays
Returns true if the two specified arrays of Objects, over the specified
 ranges, are
equal
to one another.
equals(T[], T[], Comparator<? super T>)
- Static method in class java.util.
Arrays
Returns
true
if the two specified arrays of Objects are
equal
to one another.
equalsIgnoreCase(String)
- Method in class java.lang.
String
Compares this
String
to another
String
, ignoring case
 considerations.
equalsIgnoreOptional(Object)
- Method in class java.lang.
Runtime.Version
Determines whether this
Version
is equal to another
 disregarding optional build information.
equidistribution()
- Method in class java.util.random.
RandomGeneratorFactory
Returns the equidistribution of the
algorithm
.
Era
- Interface in
java.time.chrono
An era of the time-line.
ERA
- Enum constant in enum class java.time.temporal.
ChronoField
The era.
ERA
- Static variable in class java.text.
DateFormat.Field
Constant identifying the era field.
ERA
- Static variable in class java.util.
Calendar
Field number for
get
and
set
indicating the
 era, e.g., AD or BC in the Julian calendar.
ERA_FIELD
- Static variable in class java.text.
DateFormat
Useful constant for ERA field alignment.
eraOf(int)
- Method in interface java.time.chrono.
Chronology
Creates the chronology era object from the numeric value.
eraOf(int)
- Method in class java.time.chrono.
HijrahChronology
Creates the HijrahEra object from the numeric value.
eraOf(int)
- Method in class java.time.chrono.
IsoChronology
eraOf(int)
- Method in class java.time.chrono.
JapaneseChronology
Returns the calendar system era object from the given numeric value.
eraOf(int)
- Method in class java.time.chrono.
MinguoChronology
eraOf(int)
- Method in class java.time.chrono.
ThaiBuddhistChronology
eras()
- Method in interface java.time.chrono.
Chronology
Gets the list of eras for the chronology.
eras()
- Method in class java.time.chrono.
HijrahChronology
eras()
- Method in class java.time.chrono.
IsoChronology
eras()
- Method in class java.time.chrono.
JapaneseChronology
eras()
- Method in class java.time.chrono.
MinguoChronology
eras()
- Method in class java.time.chrono.
ThaiBuddhistChronology
ERAS
- Enum constant in enum class java.time.temporal.
ChronoUnit
Unit that represents the concept of an era.
erase()
- Method in class java.lang.invoke.
MethodType
Erases all reference types to
Object
.
erasure(TypeMirror)
- Method in interface javax.lang.model.util.
Types
Returns the erasure of a type.
ERGONOMIC
- Enum constant in enum class com.sun.management.
VMOption.Origin
The VM option was set via the VM ergonomic support.
err
- Static variable in class java.io.
FileDescriptor
A handle to the standard error stream.
err
- Static variable in class java.lang.
System
The "standard" error output stream.
err(PrintStream)
- Method in class jdk.jshell.
JShell.Builder
Sets the error output for the running evaluation (it's
System.err
).
err(PrintStream)
- Method in interface jdk.jshell.tool.
JavaShellToolBuilder
Set the error channels.
err(PrintStream, PrintStream)
- Method in interface jdk.jshell.tool.
JavaShellToolBuilder
Set the error channels.
ERRONEOUS
- Enum constant in enum class com.sun.source.doctree.
DocTree.Kind
Used for instances of
ErroneousTree
representing some invalid text.
ERRONEOUS
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
ErroneousTree
.
ERRONEOUS
- Enum constant in enum class jdk.jshell.
Snippet.Kind
A syntactically incorrect input for which the specific
 kind could not be determined.
ErroneousSnippet
- Class in
jdk.jshell
A snippet of code that is not valid Java programming language code.
ErroneousTree
- Interface in
com.sun.source.doctree
A tree node to stand in for malformed text.
ErroneousTree
- Interface in
com.sun.source.tree
A tree node to stand in for a malformed expression.
error(String)
- Method in class javax.swing.text.html.parser.
Parser
Invokes the error handler with the 1st, 2nd and 3rd error message argument "?".
error(String, Exception, int)
- Method in class java.util.logging.
ErrorManager
The error method is called when a Handler failure occurs.
error(String, String)
- Method in class javax.swing.text.html.parser.
Parser
Invokes the error handler with the 2nd and 3rd error message argument "?".
error(String, String, String)
- Method in class javax.swing.text.html.parser.
Parser
Invokes the error handler with the 3rd error message argument "?".
error(String, String, String, String)
- Method in class javax.swing.text.html.parser.
Parser
Invokes the error handler.
error(TransformerException)
- Method in interface javax.xml.transform.
ErrorListener
Receive notification of a recoverable error.
error(SAXParseException)
- Method in interface org.xml.sax.
ErrorHandler
Receive notification of a recoverable error.
error(SAXParseException)
- Method in class org.xml.sax.
HandlerBase
Deprecated.
Receive notification of a recoverable parser error.
error(SAXParseException)
- Method in class org.xml.sax.helpers.
DefaultHandler
Receive notification of a recoverable parser error.
error(SAXParseException)
- Method in class org.xml.sax.helpers.
XMLFilterImpl
Filter an error event.
Error
- Exception Class in
java.lang
An
Error
is a subclass of
Throwable
that indicates serious problems that a reasonable application
 should not try to catch.
Error()
- Constructor for exception class java.lang.
Error
Constructs a new error with
null
as its detail message.
Error(String)
- Constructor for exception class java.lang.
Error
Constructs a new error with the specified detail message.
Error(String, Throwable)
- Constructor for exception class java.lang.
Error
Constructs a new error with the specified detail message and
 cause.
Error(String, Throwable, boolean, boolean)
- Constructor for exception class java.lang.
Error
Constructs a new error with the specified detail message,
 cause, suppression enabled or disabled, and writable stack
 trace enabled or disabled.
Error(Throwable)
- Constructor for exception class java.lang.
Error
Constructs a new error with the specified cause and a detail
 message of
(cause==null ? null : cause.toString())
(which
 typically contains the class and detail message of
cause
).
ERROR
- Enum constant in enum class java.awt.
Taskbar.State
Shows that an error has occurred.
ERROR
- Enum constant in enum class java.awt.
TrayIcon.MessageType
An error message
ERROR
- Enum constant in enum class java.lang.
System.Logger.Level
ERROR
level: usually used to log error messages.
ERROR
- Enum constant in enum class javax.lang.model.type.
TypeKind
A class or interface type that could not be resolved.
ERROR
- Enum constant in enum class javax.tools.
Diagnostic.Kind
Problem which prevents the tool's normal completion.
ERROR
- Static variable in interface java.awt.image.
ImageObserver
This flag in the infoflags argument to imageUpdate indicates that
 an image which was being tracked asynchronously has encountered
 an error.
ERROR
- Static variable in class javax.print.attribute.standard.
Severity
Indicates that the
PrinterStateReason
is an
 "error" (most severe).
ERROR
- Static variable in class javax.security.auth.callback.
ConfirmationCallback
ERROR message type.
ERROR
- Static variable in class javax.security.auth.callback.
TextOutputCallback
Error message.
ERROR_DIALOG
- Static variable in class javax.swing.
JRootPane
Constant used for the windowDecorationStyle property.
ERROR_MESSAGE
- Static variable in class javax.swing.
JOptionPane
Used for error messages.
ERROR_OPTION
- Static variable in class javax.swing.
JFileChooser
Return value if an error occurred.
errorCode
- Variable in exception class javax.transaction.xa.
XAException
The error code with which to create the SystemException.
errorCode()
- Method in exception class com.sun.jdi.
InternalException
errorCode()
- Method in class com.sun.nio.sctp.
SendFailedNotification
Returns the error code.
ERRORED
- Static variable in class java.awt.
MediaTracker
Flag indicating that the downloading of media encountered
 an error.
ErrorHandler
- Interface in
org.xml.sax
Basic interface for SAX error handlers.
Error Handling
- Search tag in interface javax.xml.catalog.CatalogResolver
Section
ErrorListener
- Interface in
javax.xml.transform
The listener interface used by a
TransformerFactory
or
Transformer
to notify callers of error messages that occur during a transformation process.
ErrorManager
- Class in
java.util.logging
ErrorManager objects can be attached to Handlers to process
 any error that occurs on a Handler during Logging.
ErrorManager()
- Constructor for class java.util.logging.
ErrorManager
Create an
ErrorManager
.
errorRaised()
- Method in interface javax.annotation.processing.
RoundEnvironment
Returns
true
if an error was raised in the prior round
 of processing; returns
false
otherwise.
errorReader()
- Method in class java.lang.
Process
Returns a
BufferedReader
connected to the standard
 error of the process.
errorReader(Charset)
- Method in class java.lang.
Process
Returns a
BufferedReader
connected to the
 standard error of this process using a Charset.
Errors
- Search tag in class java.util.ServiceLoader
Section
ErrorType
- Interface in
javax.lang.model.type
Represents a class or interface type that cannot be properly modeled.
errorWriter
- Variable in class javax.script.
SimpleScriptContext
This is the writer to be used to output errors from scripts.
ESCAPE
- Enum constant in enum class com.sun.source.doctree.
DocTree.Kind
Used for instances of
EscapeTree
representing some escaped documentation text.
ESCAPE
- Static variable in class java.awt.
Event
Deprecated.
The Escape key.
Escaped octets, quotation, encoding, and decoding
- Search tag in class java.net.URI
Section
EscapeTree
- Interface in
com.sun.source.doctree
A tree node for a character represented by an escape sequence.
escapeValue(Object)
- Static method in class javax.naming.ldap.
Rdn
Given the value of an attribute, returns a string escaped according
 to the rules specified in
RFC 2253
.
estimateMaximumLag()
- Method in class java.util.concurrent.
SubmissionPublisher
Returns an estimate of the maximum number of items produced but
 not yet consumed among all current subscribers.
estimateMinimumDemand()
- Method in class java.util.concurrent.
SubmissionPublisher
Returns an estimate of the minimum number of items requested
 (via
request
) but not
 yet produced, among all current subscribers.
estimateSize()
- Method in interface java.util.
Spliterator
Returns an estimate of the number of elements that would be
 encountered by a
Spliterator.forEachRemaining(java.util.function.Consumer<? super T>)
traversal, or returns
Long.MAX_VALUE
if infinite, unknown, or too expensive to compute.
estimateSize()
- Method in class java.util.
Spliterators.AbstractDoubleSpliterator
Returns an estimate of the number of elements that would be
 encountered by a
Spliterator.forEachRemaining(java.util.function.Consumer<? super T>)
traversal, or returns
Long.MAX_VALUE
if infinite, unknown, or too expensive to compute.
estimateSize()
- Method in class java.util.
Spliterators.AbstractIntSpliterator
Returns an estimate of the number of elements that would be
 encountered by a
Spliterator.forEachRemaining(java.util.function.Consumer<? super T>)
traversal, or returns
Long.MAX_VALUE
if infinite, unknown, or too expensive to compute.
estimateSize()
- Method in class java.util.
Spliterators.AbstractLongSpliterator
Returns an estimate of the number of elements that would be
 encountered by a
Spliterator.forEachRemaining(java.util.function.Consumer<? super T>)
traversal, or returns
Long.MAX_VALUE
if infinite, unknown, or too expensive to compute.
estimateSize()
- Method in class java.util.
Spliterators.AbstractSpliterator
Returns an estimate of the number of elements that would be
 encountered by a
Spliterator.forEachRemaining(java.util.function.Consumer<? super T>)
traversal, or returns
Long.MAX_VALUE
if infinite, unknown, or too expensive to compute.
EtchedBorder
- Class in
javax.swing.border
A class which implements a simple etched border which can
 either be etched-in or etched-out.
EtchedBorder()
- Constructor for class javax.swing.border.
EtchedBorder
Creates a lowered etched border whose colors will be derived
 from the background color of the component passed into
 the paintBorder method.
EtchedBorder(int)
- Constructor for class javax.swing.border.
EtchedBorder
Creates an etched border with the specified etch-type
 whose colors will be derived
 from the background color of the component passed into
 the paintBorder method.
EtchedBorder(int, Color, Color)
- Constructor for class javax.swing.border.
EtchedBorder
Creates an etched border with the specified etch-type,
 highlight and shadow colors.
EtchedBorder(Color, Color)
- Constructor for class javax.swing.border.
EtchedBorder
Creates a lowered etched border with the specified highlight and
 shadow colors.
EtchedBorderUIResource()
- Constructor for class javax.swing.plaf.
BorderUIResource.EtchedBorderUIResource
Constructs an
EtchedBorderUIResource
.
EtchedBorderUIResource(int)
- Constructor for class javax.swing.plaf.
BorderUIResource.EtchedBorderUIResource
Constructs an
EtchedBorderUIResource
.
EtchedBorderUIResource(int, Color, Color)
- Constructor for class javax.swing.plaf.
BorderUIResource.EtchedBorderUIResource
Constructs an
EtchedBorderUIResource
.
EtchedBorderUIResource(Color, Color)
- Constructor for class javax.swing.plaf.
BorderUIResource.EtchedBorderUIResource
Constructs an
EtchedBorderUIResource
.
etchType
- Variable in class javax.swing.border.
EtchedBorder
The type of etch to be drawn by the border.
ETHIOPIC
- Enum constant in enum class java.awt.font.
NumericShaper.Range
The Ethiopic range with the Ethiopic digits.
ETHIOPIC
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Ethiopic".
ETHIOPIC
- Static variable in class java.awt.font.
NumericShaper
Identifies the ETHIOPIC range and decimal base.
ETHIOPIC
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Ethiopic" Unicode character block.
ETHIOPIC_EXTENDED
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Ethiopic Extended" Unicode character block.
ETHIOPIC_EXTENDED_A
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Ethiopic Extended-A" Unicode character block.
ETHIOPIC_EXTENDED_B
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Ethiopic Extended-B" Unicode
 character block.
ETHIOPIC_SUPPLEMENT
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Ethiopic Supplement" Unicode character block.
EUROPEAN
- Enum constant in enum class java.awt.font.
NumericShaper.Range
The Latin (European) range with the Latin (ASCII) digits.
EUROPEAN
- Static variable in class java.awt.font.
NumericShaper
Identifies the Latin-1 (European) and extended range, and
  Latin-1 (European) decimal base.
eval()
- Method in class javax.script.
CompiledScript
Executes the program stored in the
CompiledScript
object.
eval(Reader)
- Method in class javax.script.
AbstractScriptEngine
eval(Reader)
calls the abstract
eval(Reader, ScriptContext)
passing the value of the
context
field.
eval(Reader)
- Method in interface javax.script.
ScriptEngine
Same as
eval(String)
except that the source of the script is
 provided as a
Reader
eval(Reader, Bindings)
- Method in class javax.script.
AbstractScriptEngine
eval(Reader, Bindings)
calls the abstract
eval(Reader, ScriptContext)
method, passing it a
ScriptContext
whose Reader, Writers and Bindings for scopes other that
ENGINE_SCOPE
are identical to those members of the protected
context
field.
eval(Reader, Bindings)
- Method in interface javax.script.
ScriptEngine
Same as
eval(String, Bindings)
except that the source of the script
 is provided as a
Reader
.
eval(Reader, ScriptContext)
- Method in interface javax.script.
ScriptEngine
Same as
eval(String, ScriptContext)
where the source of the script
 is read from a
Reader
.
eval(String)
- Method in class javax.script.
AbstractScriptEngine
Same as
eval(Reader)
except that the abstract
eval(String, ScriptContext)
is used.
eval(String)
- Method in interface javax.script.
ScriptEngine
Executes the specified script.
eval(String)
- Method in class jdk.jshell.
JShell
Evaluate the input String, including definition and/or execution, if
 applicable.
eval(String)
- Method in class netscape.javascript.
JSObject
Evaluates a JavaScript expression.
eval(String, Bindings)
- Method in class javax.script.
AbstractScriptEngine
Same as
eval(Reader, Bindings)
except that the abstract
eval(String, ScriptContext)
is used.
eval(String, Bindings)
- Method in interface javax.script.
ScriptEngine
Executes the script using the
Bindings
argument as the
ENGINE_SCOPE
Bindings
of the
ScriptEngine
during the script execution.
eval(String, ScriptContext)
- Method in interface javax.script.
ScriptEngine
Causes the immediate execution of the script whose source is the String
 passed as the first argument.
eval(Bindings)
- Method in class javax.script.
CompiledScript
Executes the program stored in the
CompiledScript
object using
 the supplied
Bindings
of attributes as the
ENGINE_SCOPE
of the
 associated
ScriptEngine
during script execution.
eval(ScriptContext)
- Method in class javax.script.
CompiledScript
Executes the program stored in this
CompiledScript
object.
EvalException
- Exception Class in
jdk.jshell
Wraps an throwable thrown in the executing client.
evaluate(Object)
- Method in interface javax.xml.xpath.
XPathExpression
Evaluate the compiled XPath expression in the specified context and return the result as a
String
.
evaluate(Object, int)
- Method in interface javax.sql.rowset.
Predicate
This method is called by a
FilteredRowSet
object
 to check whether the value lies between the filtering criterion (or criteria
 if multiple constraints exist) set using the
setFilter()
method.
evaluate(Object, String)
- Method in interface javax.sql.rowset.
Predicate
This method is called by the
FilteredRowSet
object
 to check whether the value lies between the filtering criteria set
 using the setFilter method.
evaluate(Object, QName)
- Method in interface javax.xml.xpath.
XPathExpression
Evaluate the compiled XPath expression in the specified context and return the result as the specified type.
evaluate(String, Object)
- Method in interface javax.xml.xpath.
XPath
Evaluate an XPath expression in the specified context and return the result as a
String
.
evaluate(String, Object, QName)
- Method in interface javax.xml.xpath.
XPath
Evaluate an
XPath
expression in the specified context and
 return the result as the specified type.
evaluate(String, Node, XPathNSResolver, short, Object)
- Method in interface org.w3c.dom.xpath.
XPathEvaluator
Evaluates an XPath expression string and returns a result of the
 specified type if possible.
evaluate(String, InputSource)
- Method in interface javax.xml.xpath.
XPath
Evaluate an XPath expression in the context of the specified
InputSource
and return the result as a
String
.
evaluate(String, InputSource, QName)
- Method in interface javax.xml.xpath.
XPath
Evaluate an XPath expression in the context of the specified
InputSource
and return the result as the specified type.
evaluate(List<?>)
- Method in interface javax.xml.xpath.
XPathFunction
Evaluate the function with the specified arguments.
evaluate(RowSet)
- Method in interface javax.sql.rowset.
Predicate
This method is typically called a
FilteredRowSet
object
 internal methods (not public) that control the
RowSet
object's
 cursor moving  from row to the next.
evaluate(Node, short, Object)
- Method in interface org.w3c.dom.xpath.
XPathExpression
Evaluates this XPath expression and returns a result.
evaluate(InputSource)
- Method in interface javax.xml.xpath.
XPathExpression
Evaluate the compiled XPath expression in the context
 of the specified
InputSource
and return the result as a
String
.
evaluate(InputSource, QName)
- Method in interface javax.xml.xpath.
XPathExpression
Evaluate the compiled XPath expression in the context
 of the specified
InputSource
and return the result as the
 specified type.
evaluateChallenge(byte[])
- Method in interface javax.security.sasl.
SaslClient
Evaluates the challenge data and generates a response.
evaluateExpression(Object)
- Method in interface javax.xml.xpath.
XPathExpression
Evaluate the compiled XPath expression in the specified context.
evaluateExpression(Object, Class<T>)
- Method in interface javax.xml.xpath.
XPathExpression
Evaluate the compiled XPath expression in the specified context, and return
 the result with the type specified through the
class type
.
evaluateExpression(String, Object)
- Method in interface javax.xml.xpath.
XPath
Evaluate an XPath expression in the specified context.
evaluateExpression(String, Object, Class<T>)
- Method in interface javax.xml.xpath.
XPath
Evaluate an XPath expression in the specified context and return
 the result with the type specified through the
class type
evaluateExpression(String, InputSource)
- Method in interface javax.xml.xpath.
XPath
Evaluate an XPath expression in the specified context.
evaluateExpression(String, InputSource, Class<T>)
- Method in interface javax.xml.xpath.
XPath
Evaluate an XPath expression in the context of the specified
source
and return the result as specified.
evaluateExpression(InputSource)
- Method in interface javax.xml.xpath.
XPathExpression
Evaluate the compiled XPath expression in the specified context.
evaluateExpression(InputSource, Class<T>)
- Method in interface javax.xml.xpath.
XPathExpression
Evaluate the compiled XPath expression in the specified context,
 and return the result with the type specified through the
class type
evaluateResponse(byte[])
- Method in interface javax.security.sasl.
SaslServer
Evaluates the response data and generates a challenge.
event
- Variable in exception class javax.swing.tree.
ExpandVetoException
The event that the exception was created for.
event()
- Method in class com.sun.nio.sctp.
AssociationChangeNotification
Returns the type of change event.
event()
- Method in class com.sun.nio.sctp.
PeerAddressChangeNotification
Returns the type of change event.
Event
- Class in
java.awt
Deprecated.
It is recommended that
AWTEvent
and its subclasses be
             used instead
Event
- Class in
jdk.jfr
Base class for events, to be subclassed in order to define events and their
 fields.
Event
- Interface in
com.sun.jdi.event
An occurrence in a target VM that is of interest to a debugger.
Event
- Interface in
org.w3c.dom.events
The
Event
interface is used to provide contextual information
 about an event to the handler processing the event.
Event()
- Constructor for class jdk.jfr.
Event
Sole constructor, for invocation by subclass constructors, typically
 implicit.
Event(Object, int, Object)
- Constructor for class java.awt.
Event
Deprecated.
NOTE:
The
Event
class is obsolete and is
 available only for backwards compatibility.
Event(Object, long, int, int, int, int, int)
- Constructor for class java.awt.
Event
Deprecated.
NOTE:
The
Event
class is obsolete and is
 available only for backwards compatibility.
Event(Object, long, int, int, int, int, int, Object)
- Constructor for class java.awt.
Event
Deprecated.
NOTE:
The
Event
class is obsolete and is
 available only for backwards compatibility.
EventContext
- Interface in
javax.naming.event
Contains methods for registering/deregistering listeners to be notified of
 events fired when objects named in a context changes.
Event Delivery
- Search tag in package java.awt
Section
EventDirContext
- Interface in
javax.naming.event
Contains methods for registering listeners to be notified
 of events fired when objects named in a directory context changes.
eventDispatched(AWTEvent)
- Method in class com.sun.java.accessibility.util.
EventQueueMonitor
Handle events as a result of registering a listener
 on the
EventQueue
in
EventQueueMonitor.maybeInitialize()
.
eventDispatched(AWTEvent)
- Method in interface java.awt.event.
AWTEventListener
Invoked when an event is dispatched in the AWT.
eventDispatched(AWTEvent)
- Method in class java.awt.event.
AWTEventListenerProxy
Forwards the AWT event to the listener delegate.
eventDispatched(AWTEvent, JLayer<? extends V>)
- Method in class javax.swing.plaf.
LayerUI
Processes
AWTEvent
s for
JLayer
and
all its descendants
to this
LayerUI
instance.
EventException
- Exception Class in
org.w3c.dom.events
Event operations may throw an
EventException
as specified in
 their method descriptions.
EventException(short, String)
- Constructor for exception class org.w3c.dom.events.
EventException
EventFactory
- Class in
jdk.jfr
Class for defining an event at runtime.
EventFilter
- Interface in
javax.xml.stream
This interface declares a simple filter interface that one can
 create to filter XMLEventReaders
eventHandler(BiConsumer<String, String>)
- Method in class jdk.security.jarsigner.
JarSigner.Builder
Sets en event handler that will be triggered when a
JarEntry
is to be added, signed, or updated during the signing process.
EventHandler
- Class in
java.beans
The
EventHandler
class provides
 support for dynamically generating event listeners whose methods
 execute a simple statement involving an incoming event object
 and a target object.
EventHandler(Object, String, String, String)
- Constructor for class java.beans.
EventHandler
Creates a new
EventHandler
object;
 you generally use one of the
create
methods
 instead of invoking this constructor directly.
EventID
- Class in
com.sun.java.accessibility.util
EventID contains integer constants that map to event support in
 AWT and Swing.
EventID()
- Constructor for class com.sun.java.accessibility.util.
EventID
Constructs an
EventID
.
eventIterator()
- Method in interface com.sun.jdi.event.
EventSet
Return an iterator specific to
Event
objects.
EventIterator
- Interface in
com.sun.jdi.event
EventIterators are unmodifiable.
EventListener
- Interface in
java.util
A tagging interface that all event listener interfaces must extend.
EventListener
- Interface in
org.w3c.dom.events
The
EventListener
interface is the primary method for
 handling events.
EventListenerList
- Class in
javax.swing.event
A class that holds a list of EventListeners.
EventListenerList()
- Constructor for class javax.swing.event.
EventListenerList
Constructs a
EventListenerList
.
EventListenerProxy<T>
- Class in
java.util
An abstract wrapper class for an
EventListener
class
 which associates a set of additional parameters with the listener.
EventListenerProxy(T)
- Constructor for class java.util.
EventListenerProxy
Creates a proxy for the specified listener.
EventObject
- Class in
java.util
The root class from which all event state objects shall be derived.
EventObject(Object)
- Constructor for class java.util.
EventObject
Constructs a prototypical Event.
eventQueue()
- Method in interface com.sun.jdi.
VirtualMachine
Returns the event queue for this virtual machine.
EventQueue
- Class in
java.awt
EventQueue
is a platform-independent class
 that queues events, both from the underlying peer classes
 and from trusted application classes.
EventQueue
- Interface in
com.sun.jdi.event
Manager of incoming debugger events for a target VM.
EventQueue()
- Constructor for class java.awt.
EventQueue
Initializes a new instance of
EventQueue
.
EventQueueMonitor
- Class in
com.sun.java.accessibility.util
The
EventQueueMonitor
class provides key core functionality for Assistive
 Technologies (and other system-level technologies that need some of the same
 things that Assistive Technology needs).
EventQueueMonitor()
- Constructor for class com.sun.java.accessibility.util.
EventQueueMonitor
Create a new
EventQueueMonitor
instance.
EventReaderDelegate
- Class in
javax.xml.stream.util
This is the base class for deriving an XMLEventReader
 filter.
EventReaderDelegate()
- Constructor for class javax.xml.stream.util.
EventReaderDelegate
Construct an empty filter with no parent.
EventReaderDelegate(XMLEventReader)
- Constructor for class javax.xml.stream.util.
EventReaderDelegate
Construct an filter with the specified parent.
EventRequest
- Interface in
com.sun.jdi.request
Represents a request for notification of an event.
eventRequestManager()
- Method in interface com.sun.jdi.
VirtualMachine
Returns the event request manager for this virtual machine.
EventRequestManager
- Interface in
com.sun.jdi.request
Manages the creation and deletion of
EventRequest
s.
events
- Variable in class java.awt.dnd.
DragGestureRecognizer
The list of events (in order) that
 the
DragGestureRecognizer
"recognized" as a "gesture" that triggers a drag.
EventSet
- Interface in
com.sun.jdi.event
Several
Event
objects may be created at a given time by
 the target
VirtualMachine
.
EventSetDescriptor
- Class in
java.beans
An EventSetDescriptor describes a group of events that a given Java
 bean fires.
EventSetDescriptor(Class<?>, String, Class<?>, String)
- Constructor for class java.beans.
EventSetDescriptor
Creates an
EventSetDescriptor
assuming that you are
 following the most simple standard design pattern where a named
 event "fred" is (1) delivered as a call on the single method of
 interface FredListener, (2) has a single argument of type FredEvent,
 and (3) where the FredListener may be registered with a call on an
 addFredListener method of the source component and removed with a
 call on a removeFredListener method.
EventSetDescriptor(Class<?>, String, Class<?>, String[], String, String)
- Constructor for class java.beans.
EventSetDescriptor
Creates an
EventSetDescriptor
from scratch using
 string names.
EventSetDescriptor(Class<?>, String, Class<?>, String[], String, String, String)
- Constructor for class java.beans.
EventSetDescriptor
This constructor creates an EventSetDescriptor from scratch using
 string names.
EventSetDescriptor(String, Class<?>, MethodDescriptor[], Method, Method)
- Constructor for class java.beans.
EventSetDescriptor
Creates an
EventSetDescriptor
from scratch using
java.lang.reflect.MethodDescriptor
and
java.lang.Class
objects.
EventSetDescriptor(String, Class<?>, Method[], Method, Method)
- Constructor for class java.beans.
EventSetDescriptor
Creates an
EventSetDescriptor
from scratch using
java.lang.reflect.Method
and
java.lang.Class
objects.
EventSetDescriptor(String, Class<?>, Method[], Method, Method, Method)
- Constructor for class java.beans.
EventSetDescriptor
This constructor creates an EventSetDescriptor from scratch using
 java.lang.reflect.Method and java.lang.Class objects.
EventSettings
- Class in
jdk.jfr
Convenience class for applying event settings to a recording.
Event Source
- Search tag in interface javax.naming.event.EventContext
Section
EventStream
- Interface in
jdk.jfr.consumer
Represents a stream of events.
EventTarget
- Interface in
org.w3c.dom.events
The
EventTarget
interface is implemented by all
Nodes
in an implementation which supports the DOM Event
 Model.
EventType
- Class in
jdk.jfr
Describes an event, its fields, settings and annotations.
eventTypeEnabled(int)
- Method in class java.awt.
ScrollPane
If wheel scrolling is enabled, we return true for MouseWheelEvents
EventTypeInfo
- Class in
jdk.management.jfr
Management representation of an
EventType
.
evt
- Variable in class java.awt.
Event
Deprecated.
The next event.
exactInvoker(MethodType)
- Static method in class java.lang.invoke.
MethodHandles
Produces a special
invoker method handle
which can be used to
 invoke any method handle of the given type, as if by
invokeExact
.
Examining Other UI Objects
- Search tag in package javax.swing.plaf.multi
Section
Example
- Search tag in class java.lang.ModuleLayer
Section
Example
- Search tag in class java.lang.module.Configuration
Section
Example
- Search tag in class java.text.DecimalFormat
Section
Example
- Search tag in class java.util.ResourceBundle
Section
Example
- Search tag in module jdk.dynalink
Section
Example
- Search tag in package java.time.chrono
Section
Example
- Search tag in package jdk.javadoc.doclet
Section
Example 1
- Search tag in package java.awt
Section
Example 2
- Search tag in package java.awt
Section
Example 3
- Search tag in package java.awt
Section
Example 4
- Search tag in package java.awt
Section
Examples
- Search tag in class java.text.SimpleDateFormat
Section
Examples
- Search tag in package java.awt
Section
Examples:
- Search tag in annotation interface javax.annotation.processing.Generated
Section
Examples:
- Search tag in module jdk.zipfs
Section
Examples of Using EventHandler
- Search tag in class java.beans.EventHandler
Section
Example to filter every deserialization in a thread
- Search tag in interface java.io.ObjectInputFilter
Section
ExcC14NParameterSpec
- Class in
javax.xml.crypto.dsig.spec
Parameters for the W3C Recommendation:
Exclusive XML Canonicalization (C14N) algorithm
.
ExcC14NParameterSpec()
- Constructor for class javax.xml.crypto.dsig.spec.
ExcC14NParameterSpec
Creates a
ExcC14NParameterSpec
with an empty prefix
 list.
ExcC14NParameterSpec(List<String>)
- Constructor for class javax.xml.crypto.dsig.spec.
ExcC14NParameterSpec
Creates a
ExcC14NParameterSpec
with the specified list
 of prefixes.
EXCEEDS_PAD
- Enum constant in enum class java.time.format.
SignStyle
Style to always output the sign if the value exceeds the pad width.
ExcellentBreakWeight
- Static variable in class javax.swing.text.
View
The weight to indicate a view supports breaking,
 and this represents a very attractive place to
 break.
exception()
- Method in interface com.sun.jdi.event.
ExceptionEvent
Gets the thrown exception object.
exception()
- Method in exception class com.sun.jdi.
InvocationException
exception()
- Method in interface com.sun.jdi.request.
ExceptionRequest
Returns exception type for which exception events are requested.
exception()
- Method in class java.util.concurrent.
StructuredTaskScope.ShutdownOnFailure
PREVIEW
Returns the exception of the first subtask that
failed
PREVIEW
.
exception()
- Method in interface java.util.concurrent.
StructuredTaskScope.Subtask
PREVIEW
Returns the exception thrown by the subtask.
exception()
- Method in class jdk.jshell.
SnippetEvent
An instance of
UnresolvedReferenceException
, if an unresolved reference was
 encountered, or an instance of
EvalException
if an exception was thrown
 during execution, otherwise
null
.
Exception
- Exception Class in
java.lang
The class
Exception
and its subclasses are a form of
Throwable
that indicates conditions that a reasonable
 application might want to catch.
Exception()
- Constructor for exception class java.lang.
Exception
Constructs a new exception with
null
as its detail message.
Exception(String)
- Constructor for exception class java.lang.
Exception
Constructs a new exception with the specified detail message.
Exception(String, Throwable)
- Constructor for exception class java.lang.
Exception
Constructs a new exception with the specified detail message and
 cause.
Exception(String, Throwable, boolean, boolean)
- Constructor for exception class java.lang.
Exception
Constructs a new exception with the specified detail message,
 cause, suppression enabled or disabled, and writable stack
 trace enabled or disabled.
Exception(Throwable)
- Constructor for exception class java.lang.
Exception
Constructs a new exception with the specified cause and a detail
 message of
(cause==null ? null : cause.toString())
(which
 typically contains the class and detail message of
cause
).
EXCEPTION
- Enum constant in enum class com.sun.source.doctree.
DocTree.Kind
Used for instances of
ThrowsTree
representing an
@exception
tag.
EXCEPTION_PARAMETER
- Enum constant in enum class javax.lang.model.element.
ElementKind
A parameter of an exception handler.
exceptionally(Function<Throwable, ? extends T>)
- Method in class java.util.concurrent.
CompletableFuture
exceptionally(Function<Throwable, ? extends T>)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when this stage completes
 exceptionally, is executed with this stage's exception as the
 argument to the supplied function.
exceptionallyAsync(Function<Throwable, ? extends T>)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when this stage completes
 exceptionally, is executed with this stage's exception as the
 argument to the supplied function, using this stage's default
 asynchronous execution facility.
exceptionallyAsync(Function<Throwable, ? extends T>, Executor)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when this stage completes
 exceptionally, is executed with this stage's exception as the
 argument to the supplied function, using the supplied Executor.
exceptionallyCompose(Function<Throwable, ? extends CompletionStage<T>>)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when this stage completes
 exceptionally, is composed using the results of the supplied
 function applied to this stage's exception.
exceptionallyComposeAsync(Function<Throwable, ? extends CompletionStage<T>>)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when this stage completes
 exceptionally, is composed using the results of the supplied
 function applied to this stage's exception, using this stage's
 default asynchronous execution facility.
exceptionallyComposeAsync(Function<Throwable, ? extends CompletionStage<T>>, Executor)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when this stage completes
 exceptionally, is composed using the results of the supplied
 function applied to this stage's exception, using the
 supplied Executor.
ExceptionEvent
- Interface in
com.sun.jdi.event
Notification of an exception in the target VM.
Exception Handling
- Search tag in package javax.naming.event
Section
ExceptionInInitializerError
- Exception Class in
java.lang
Signals that an unexpected exception has occurred in a static initializer.
ExceptionInInitializerError()
- Constructor for exception class java.lang.
ExceptionInInitializerError
Constructs an
ExceptionInInitializerError
with
null
as its detail message string and with no saved
 throwable object.
ExceptionInInitializerError(String)
- Constructor for exception class java.lang.
ExceptionInInitializerError
Constructs an
ExceptionInInitializerError
with the specified detail
 message string.
ExceptionInInitializerError(Throwable)
- Constructor for exception class java.lang.
ExceptionInInitializerError
Constructs a new
ExceptionInInitializerError
class by
 saving a reference to the
Throwable
object thrown for
 later retrieval by the
ExceptionInInitializerError.getException()
method.
ExceptionListener
- Interface in
java.beans
An ExceptionListener is notified of internal exceptions.
exceptionNow()
- Method in interface java.util.concurrent.
Future
Returns the exception thrown by the task, without waiting.
ExceptionRequest
- Interface in
com.sun.jdi.request
Request for notification when an exception occurs in the target VM.
exceptionRequests()
- Method in interface com.sun.jdi.request.
EventRequestManager
Return an unmodifiable list of the enabled and disabled exception requests.
Exceptions
- Search tag in annotation interface javax.management.MXBean
Section
Exceptions
- Search tag in class java.lang.invoke.MethodHandle
Section
Exceptions
- Search tag in class javax.swing.LookAndFeel
Section
Exceptions
- Search tag in interface javax.naming.Context
Section
Exceptions
- Search tag in interface javax.naming.directory.DirContext
Section
Exceptions
- Search tag in package javax.naming
Section
Exceptions and Error Reporting
- Search tag in package javax.xml.transform
Section
exceptionThrown(Exception)
- Method in interface java.beans.
ExceptionListener
This method is called when a recoverable exception has
 been caught.
exchange(V)
- Method in class java.util.concurrent.
Exchanger
Waits for another thread to arrive at this exchange point (unless
 the current thread is
interrupted
),
 and then transfers the given object to it, receiving its object
 in return.
exchange(V, long, TimeUnit)
- Method in class java.util.concurrent.
Exchanger
Waits for another thread to arrive at this exchange point (unless
 the current thread is
interrupted
or
 the specified waiting time elapses), and then transfers the given
 object to it, receiving its object in return.
Exchanger<V>
- Class in
java.util.concurrent
A synchronization point at which threads can pair and swap elements
 within pairs.
Exchanger()
- Constructor for class java.util.concurrent.
Exchanger
Creates a new Exchanger.
exclusions
- Variable in class javax.swing.text.html.parser.
Element
The set of elements that must not occur inside the element
EXCLUSIVE
- Static variable in interface javax.xml.crypto.dsig.
CanonicalizationMethod
The
Exclusive
 Canonical XML (without comments)
canonicalization method algorithm
 URI.
EXCLUSIVE_WITH_COMMENTS
- Static variable in interface javax.xml.crypto.dsig.
CanonicalizationMethod
The
Exclusive Canonical XML with comments
canonicalization method
 algorithm URI.
exclusiveOr(Area)
- Method in class java.awt.geom.
Area
Sets the shape of this
Area
to be the combined area
 of its current shape and the shape of the specified
Area
,
 minus their intersection.
exec()
- Method in class java.util.concurrent.
CountedCompleter
Implements execution conventions for CountedCompleters.
exec()
- Method in class java.util.concurrent.
ForkJoinTask
Immediately performs the base action of this task and returns
 true if, upon return from this method, this task is guaranteed
 to have completed.
exec()
- Method in class java.util.concurrent.
RecursiveAction
Implements execution conventions for RecursiveActions.
exec()
- Method in class java.util.concurrent.
RecursiveTask
Implements execution conventions for RecursiveTask.
exec(String)
- Method in class java.lang.
Runtime
Deprecated.
This method is error-prone and should not be used, the corresponding method
Runtime.exec(String[])
or
ProcessBuilder
should be used instead.
 The command string is broken into tokens using only whitespace characters.
 For an argument with an embedded space, such as a filename, this can cause problems
 as the token does not include the full filename.
exec(String[])
- Method in class java.lang.
Runtime
Executes the specified command and arguments in a separate process.
exec(String[], String[])
- Method in class java.lang.
Runtime
Executes the specified command and arguments in a separate process
 with the specified environment.
exec(String[], String[], File)
- Method in class java.lang.
Runtime
Executes the specified command and arguments in a separate process with
 the specified environment and working directory.
exec(String, String[])
- Method in class java.lang.
Runtime
Deprecated.
This method is error-prone and should not be used, the corresponding method
Runtime.exec(String[], String[])
or
ProcessBuilder
should be used instead.
 The command string is broken into tokens using only whitespace characters.
 For an argument with an embedded space, such as a filename, this can cause problems
 as the token does not include the full filename.
exec(String, String[], File)
- Method in class java.lang.
Runtime
Deprecated.
This method is error-prone and should not be used, the corresponding method
Runtime.exec(String[], String[], File)
or
ProcessBuilder
should be used instead.
 The command string is broken into tokens using only whitespace characters.
 For an argument with an embedded space, such as a filename, this can cause problems
 as the token does not include the full filename.
Executable
- Class in
java.lang.reflect
A shared superclass for the common functionality of
Method
and
Constructor
.
EXECUTABLE
- Enum constant in enum class javax.lang.model.type.
TypeKind
A method, constructor, or initializer.
ExecutableElement
- Interface in
javax.lang.model.element
Represents a method, constructor, or initializer (static or
 instance) of a class or interface, including annotation interface
 elements.
ExecutableType
- Interface in
javax.lang.model.type
Represents the type of an executable.
execute()
- Method in class java.beans.
Expression
The
execute
method finds a method whose name is the same
 as the
methodName
property, and invokes the method on
 the target.
execute()
- Method in class java.beans.
Statement
The
execute
method finds a method whose name is the same
 as the
methodName
property, and invokes the method on
 the target.
execute()
- Method in interface java.sql.
PreparedStatement
Executes the SQL statement in this
PreparedStatement
object,
 which may be any kind of SQL statement.
execute()
- Method in interface javax.sql.
RowSet
Fills this
RowSet
object with data.
execute()
- Method in class javax.swing.
SwingWorker
Schedules this
SwingWorker
for execution on a
worker
thread.
execute(Runnable)
- Method in interface java.util.concurrent.
Executor
Executes the given command at some time in the future.
execute(Runnable)
- Method in class java.util.concurrent.
ForkJoinPool
execute(Runnable)
- Method in class java.util.concurrent.
ScheduledThreadPoolExecutor
Executes
command
with zero required delay.
execute(Runnable)
- Method in class java.util.concurrent.
ThreadPoolExecutor
Executes the given task sometime in the future.
execute(String)
- Method in interface java.sql.
Statement
Executes the given SQL statement, which may return multiple results.
execute(String, int)
- Method in interface java.sql.
Statement
Executes the given SQL statement, which may return multiple results,
 and signals the driver that any
 auto-generated keys should be made available
 for retrieval.
execute(String, int[])
- Method in interface java.sql.
Statement
Executes the given SQL statement, which may return multiple results,
 and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.
execute(String, String[])
- Method in interface java.sql.
Statement
Executes the given SQL statement, which may return multiple results,
 and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.
execute(Connection)
- Method in interface javax.sql.rowset.
CachedRowSet
Populates this
CachedRowSet
object with data, using the
 given connection to produce the result set from which the data will be read.
execute(ForkJoinTask<?>)
- Method in class java.util.concurrent.
ForkJoinPool
Arranges for (asynchronous) execution of the given task.
EXECUTE
- Enum constant in enum class java.nio.file.
AccessMode
Test execute access.
EXECUTE
- Enum constant in enum class java.nio.file.attribute.
AclEntryPermission
Permission to execute a file.
EXECUTE_FAILED
- Static variable in interface java.sql.
Statement
The constant indicating that an error occurred while executing a
 batch statement.
executeBatch()
- Method in interface java.sql.
Statement
Submits a batch of commands to the database for execution and
 if all commands execute successfully, returns an array of update counts.
executeCall()
- Method in interface java.rmi.server.
RemoteCall
Deprecated.
no replacement
executeLargeBatch()
- Method in interface java.sql.
Statement
Submits a batch of commands to the database for execution and
 if all commands execute successfully, returns an array of update counts.
executeLargeUpdate()
- Method in interface java.sql.
PreparedStatement
Executes the SQL statement in this
PreparedStatement
object,
 which must be an SQL Data Manipulation Language (DML) statement,
 such as
INSERT
,
UPDATE
or
DELETE
; or an SQL statement that returns nothing,
 such as a DDL statement.
executeLargeUpdate(String)
- Method in interface java.sql.
Statement
Executes the given SQL statement, which may be an
INSERT
,
UPDATE
, or
DELETE
statement or an
 SQL statement that returns nothing, such as an SQL DDL statement.
executeLargeUpdate(String, int)
- Method in interface java.sql.
Statement
Executes the given SQL statement and signals the driver with the
 given flag about whether the
 auto-generated keys produced by this
Statement
object
 should be made available for retrieval.
executeLargeUpdate(String, int[])
- Method in interface java.sql.
Statement
Executes the given SQL statement and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.
executeLargeUpdate(String, String[])
- Method in interface java.sql.
Statement
Executes the given SQL statement and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.
executeQuery()
- Method in interface java.sql.
PreparedStatement
Executes the SQL query in this
PreparedStatement
object
 and returns the
ResultSet
object generated by the query.
executeQuery(String)
- Method in interface java.sql.
Statement
Executes the given SQL statement, which returns a single
ResultSet
object.
executeUpdate()
- Method in interface java.sql.
PreparedStatement
Executes the SQL statement in this
PreparedStatement
object,
 which must be an SQL Data Manipulation Language (DML) statement, such as
INSERT
,
UPDATE
or
DELETE
; or an SQL statement that returns nothing,
 such as a DDL statement.
executeUpdate(String)
- Method in interface java.sql.
Statement
Executes the given SQL statement, which may be an
INSERT
,
UPDATE
, or
DELETE
statement or an
 SQL statement that returns nothing, such as an SQL DDL statement.
executeUpdate(String, int)
- Method in interface java.sql.
Statement
Executes the given SQL statement and signals the driver with the
 given flag about whether the
 auto-generated keys produced by this
Statement
object
 should be made available for retrieval.
executeUpdate(String, int[])
- Method in interface java.sql.
Statement
Executes the given SQL statement and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.
executeUpdate(String, String[])
- Method in interface java.sql.
Statement
Executes the given SQL statement and signals the driver that the
 auto-generated keys indicated in the given array should be made available
 for retrieval.
ExecutionControl
- Interface in
jdk.jshell.spi
This interface specifies the functionality that must provided to implement a
 pluggable JShell execution engine.
ExecutionControl.ClassBytecodes
- Class in
jdk.jshell.spi
Bundles class name with class bytecodes.
ExecutionControl.ClassInstallException
- Exception Class in
jdk.jshell.spi
A class install (load or redefine) encountered a problem.
ExecutionControl.EngineTerminationException
- Exception Class in
jdk.jshell.spi
Unbidden execution engine termination has occurred.
ExecutionControl.ExecutionControlException
- Exception Class in
jdk.jshell.spi
The abstract base of all
ExecutionControl
exceptions.
ExecutionControl.InternalException
- Exception Class in
jdk.jshell.spi
An internal problem has occurred.
ExecutionControl.NotImplementedException
- Exception Class in
jdk.jshell.spi
The command is not implemented.
ExecutionControl.ResolutionException
- Exception Class in
jdk.jshell.spi
An exception indicating that a
DeclarationSnippet
with unresolved
 references has been encountered.
ExecutionControl.RunException
- Exception Class in
jdk.jshell.spi
The abstract base of of exceptions specific to running user code.
ExecutionControl.StoppedException
- Exception Class in
jdk.jshell.spi
An exception indicating that an
ExecutionControl.invoke(java.lang.String, java.lang.String)
(or theoretically a
ExecutionControl.varValue(java.lang.String, java.lang.String)
)
 has been interrupted by a
ExecutionControl.stop()
.
ExecutionControl.UserException
- Exception Class in
jdk.jshell.spi
A 'normal' user exception occurred.
ExecutionControlException(String)
- Constructor for exception class jdk.jshell.spi.
ExecutionControl.ExecutionControlException
ExecutionControlProvider
- Interface in
jdk.jshell.spi
The provider used by JShell to generate the execution engine needed to
 evaluate Snippets.
executionEngine(String)
- Method in class jdk.jshell.
JShell.Builder
Sets the custom engine for execution.
executionEngine(ExecutionControlProvider, Map<String, String>)
- Method in class jdk.jshell.
JShell.Builder
Sets the custom engine for execution.
ExecutionEnv
- Interface in
jdk.jshell.spi
Functionality made available to a pluggable JShell execution engine.
ExecutionException
- Exception Class in
java.util.concurrent
Exception thrown when attempting to retrieve the result of a task
 that aborted by throwing an exception.
ExecutionException()
- Constructor for exception class java.util.concurrent.
ExecutionException
Constructs an
ExecutionException
with no detail message.
ExecutionException(String)
- Constructor for exception class java.util.concurrent.
ExecutionException
Constructs an
ExecutionException
with the specified detail
 message.
ExecutionException(String, Throwable)
- Constructor for exception class java.util.concurrent.
ExecutionException
Constructs an
ExecutionException
with the specified detail
 message and cause.
ExecutionException(Throwable)
- Constructor for exception class java.util.concurrent.
ExecutionException
Constructs an
ExecutionException
with the specified cause.
Execution information
- Search tag in class java.lang.management.ThreadInfo
Section
Execution of bootstrap methods
- Search tag in package java.lang.invoke
Section
EXECUTIVE
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for Executive, 7 1/4 x 10 1/2 in.
EXECUTIVE
- Static variable in class javax.print.attribute.standard.
MediaSize.Other
Specifies the executive size, 7.25 inches by 10.5 inches.
EXECUTIVE
- Static variable in class javax.print.attribute.standard.
MediaSizeName
executive size.
executor()
- Method in class java.net.http.
HttpClient
Returns an
Optional
containing this client's
Executor
.
executor(Executor)
- Method in interface java.net.http.
HttpClient.Builder
Sets the executor to be used for asynchronous and dependent tasks.
Executor
- Interface in
java.util.concurrent
An object that executes submitted
Runnable
tasks.
ExecutorCompletionService<V>
- Class in
java.util.concurrent
A
CompletionService
that uses a supplied
Executor
to execute tasks.
ExecutorCompletionService(Executor)
- Constructor for class java.util.concurrent.
ExecutorCompletionService
Creates an ExecutorCompletionService using the supplied
 executor for base task execution and a
LinkedBlockingQueue
as a completion queue.
ExecutorCompletionService(Executor, BlockingQueue<Future<V>>)
- Constructor for class java.util.concurrent.
ExecutorCompletionService
Creates an ExecutorCompletionService using the supplied
 executor for base task execution and the supplied queue as its
 completion queue.
Executors
- Search tag in package java.util.concurrent
Section
Executors
- Class in
java.util.concurrent
Factory and utility methods for
Executor
,
ExecutorService
,
ScheduledExecutorService
,
ThreadFactory
, and
Callable
classes defined in this
 package.
ExecutorService
- Interface in
java.util.concurrent
An
Executor
that provides methods to manage termination and
 methods that can produce a
Future
for tracking progress of
 one or more asynchronous tasks.
ExemptionMechanism
- Class in
javax.crypto
This class provides the functionality of an exemption mechanism, examples
 of which are
key recovery
,
key weakening
, and
key escrow
.
ExemptionMechanism(ExemptionMechanismSpi, Provider, String)
- Constructor for class javax.crypto.
ExemptionMechanism
Creates an
ExemptionMechanism
object.
ExemptionMechanismException
- Exception Class in
javax.crypto
This is the generic ExemptionMechanism exception.
ExemptionMechanismException()
- Constructor for exception class javax.crypto.
ExemptionMechanismException
Constructs an
ExemptionMechanismException
with no detailed
 message.
ExemptionMechanismException(String)
- Constructor for exception class javax.crypto.
ExemptionMechanismException
Constructs an
ExemptionMechanismException
with the specified
 detailed message.
ExemptionMechanismSpi
- Class in
javax.crypto
This class defines the
Service Provider Interface
(
SPI
)
 for the
ExemptionMechanism
class.
ExemptionMechanismSpi()
- Constructor for class javax.crypto.
ExemptionMechanismSpi
Constructor for subclasses to call.
EXIF_VERSION_2_1
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "ExifVersion" tag to indicate Exif version
 2.1.
EXIF_VERSION_2_2
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "ExifVersion" tag to indicate Exif version
 2.2.
ExifGPSTagSet
- Class in
javax.imageio.plugins.tiff
A class representing the tags found in an Exif GPS Info IFD.
ExifInteroperabilityTagSet
- Class in
javax.imageio.plugins.tiff
A class representing the tags found in an Exif Interoperability IFD.
ExifParentTIFFTagSet
- Class in
javax.imageio.plugins.tiff
A class containing the TIFF tags used to reference the Exif and GPS IFDs.
ExifTIFFTagSet
- Class in
javax.imageio.plugins.tiff
A class representing the tags found in an Exif IFD.
exists()
- Method in class java.io.
File
Tests whether the file or directory denoted by this abstract pathname
 exists.
exists()
- Method in class javax.security.auth.kerberos.
KeyTab
Checks if the keytab file exists.
exists(Path, LinkOption...)
- Static method in class java.nio.file.
Files
Tests whether a file exists.
exists(Path, LinkOption...)
- Method in class java.nio.file.spi.
FileSystemProvider
Tests whether a file exists.
exit()
- Method in interface java.awt.
SecondaryLoop
Unblocks the execution of the thread blocked by the
SecondaryLoop.enter()
method and exits the secondary loop.
exit(int)
- Method in interface com.sun.jdi.
VirtualMachine
Causes the mirrored VM to terminate with the given error code.
exit(int)
- Method in class java.lang.
Runtime
Initiates the
shutdown sequence
of the Java Virtual Machine.
exit(int)
- Static method in class java.lang.
System
Initiates the
shutdown sequence
of the Java Virtual Machine.
EXIT_ON_CLOSE
- Static variable in interface javax.swing.
WindowConstants
The exit application default window close operation.
EXITED
- Static variable in class javax.swing.event.
HyperlinkEvent.EventType
Exited type.
exiting(String, String)
- Method in class java.util.logging.
Logger
Log a method return.
exiting(String, String, Object)
- Method in class java.util.logging.
Logger
Log a method return, with result object.
exitValue()
- Method in class java.lang.
Process
Returns the exit value for the process.
exp(double)
- Static method in class java.lang.
Math
Returns Euler's number
e
raised to the power of a
double
value.
exp(double)
- Static method in class java.lang.
StrictMath
Returns Euler's number
e
raised to the power of a
double
value.
EXP
- Static variable in class jdk.incubator.vector.
VectorOperators
Produce
exp(a)
.
expand(int, int)
- Static method in class java.lang.
Integer
Returns the value obtained by expanding the bits of the
 specified
int
value,
i
, in accordance with
 the specified bit mask.
expand(long, long)
- Static method in class java.lang.
Long
Returns the value obtained by expanding the bits of the
 specified
long
value,
i
, in accordance with
 the specified bit mask.
expand(VectorMask<E>)
- Method in class jdk.incubator.vector.
Vector
Expands the lane elements of this vector
 under the control of a specific mask.
expand(VectorMask<Byte>)
- Method in class jdk.incubator.vector.
ByteVector
Expands the lane elements of this vector
 under the control of a specific mask.
expand(VectorMask<Double>)
- Method in class jdk.incubator.vector.
DoubleVector
Expands the lane elements of this vector
 under the control of a specific mask.
expand(VectorMask<Float>)
- Method in class jdk.incubator.vector.
FloatVector
Expands the lane elements of this vector
 under the control of a specific mask.
expand(VectorMask<Integer>)
- Method in class jdk.incubator.vector.
IntVector
Expands the lane elements of this vector
 under the control of a specific mask.
expand(VectorMask<Long>)
- Method in class jdk.incubator.vector.
LongVector
Expands the lane elements of this vector
 under the control of a specific mask.
expand(VectorMask<Short>)
- Method in class jdk.incubator.vector.
ShortVector
Expands the lane elements of this vector
 under the control of a specific mask.
EXPAND_BITS
- Static variable in class jdk.incubator.vector.
VectorOperators
Produce
expand(a,n)
.
EXPANDABLE
- Static variable in class javax.accessibility.
AccessibleState
Indicates this object allows progressive disclosure of its children.
EXPANDED
- Static variable in class javax.accessibility.
AccessibleState
Indicates this object is expanded.
expandedIcon
- Variable in class javax.swing.plaf.basic.
BasicTreeUI
The expanded icon.
expandPath(TreePath)
- Method in class javax.swing.
JTree
Ensures that the node identified by the specified path is
 expanded and viewable.
expandRow(int)
- Method in class javax.swing.
JTree
Ensures that the node in the specified row is expanded and
 viewable.
EXPANDS_SELECTED_PATHS_PROPERTY
- Static variable in class javax.swing.
JTree
Bound property name for expands selected paths property
expandTabRunsArray()
- Method in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Expands the tab runs array.
ExpandVetoException
- Exception Class in
javax.swing.tree
Exception used to stop an expand/collapse from happening.
ExpandVetoException(TreeExpansionEvent)
- Constructor for exception class javax.swing.tree.
ExpandVetoException
Constructs an ExpandVetoException object with no message.
ExpandVetoException(TreeExpansionEvent, String)
- Constructor for exception class javax.swing.tree.
ExpandVetoException
Constructs an ExpandVetoException object with the specified message.
Expansions, contractions, and partial results
- Search tag in class jdk.incubator.vector.Vector
Section
expectContinue()
- Method in class java.net.http.
HttpRequest
Returns this request's
expect continue
setting.
expectContinue(boolean)
- Method in interface java.net.http.
HttpRequest.Builder
Requests the server to acknowledge the request before sending the
 body.
Experimental
- Annotation Interface in
jdk.jfr
Annotation that specifies that an element is experimental and may change
 without notice.
expert()
- Element in annotation interface java.beans.
BeanProperty
The value that indicates whether the annotated property is
 an
expert
property or not.
EXPIRED
- Enum constant in enum class java.security.cert.
CertPathValidatorException.BasicReason
The certificate is expired.
EXPLICIT
- Enum constant in enum class javax.lang.model.util.
Elements.Origin
Describes a construct explicitly declared in source code.
explicitCast(MethodHandles.Lookup, String, Class<?>, Object)
- Static method in class java.lang.invoke.
ConstantBootstraps
Applies a conversion from a source type to a destination type.
explicitCastArguments(MethodHandle, MethodType)
- Static method in class java.lang.invoke.
MethodHandles
Produces a method handle which adapts the type of the
 given method handle to a new type by pairwise argument and return type conversion.
expm1(double)
- Static method in class java.lang.
Math
Returns
e
x
-1.
expm1(double)
- Static method in class java.lang.
StrictMath
Returns
e
x
-1.
EXPM1
- Static variable in class jdk.incubator.vector.
VectorOperators
Produce
expm1(a)
.
EXPONENT
- Static variable in class java.text.
NumberFormat.Field
Constant identifying the exponent field.
EXPONENT_SIGN
- Static variable in class java.text.
NumberFormat.Field
Constant identifying the exponent sign field.
EXPONENT_SYMBOL
- Static variable in class java.text.
NumberFormat.Field
Constant identifying the exponent symbol field.
export()
- Method in class javax.management.remote.rmi.
RMIJRMPServerImpl
export()
- Method in class javax.management.remote.rmi.
RMIServerImpl
Exports this RMI object.
export()
- Method in interface org.ietf.jgss.
GSSContext
Exports this context so that another process may
 import it.
export()
- Method in interface org.ietf.jgss.
GSSName
Returns a canonical contiguous byte representation of a mechanism name
 (MN), suitable for direct, byte by byte comparison by authorization
 functions.
exportAsDrag(JComponent, InputEvent, int)
- Method in class javax.swing.
TransferHandler
Causes the Swing drag support to be initiated.
exportDone(JComponent, Transferable, int)
- Method in class javax.swing.
TransferHandler
Invoked after data has been exported.
ExportException
- Exception Class in
java.rmi.server
An
ExportException
is a
RemoteException
thrown if an attempt to export a remote object fails.
ExportException(String)
- Constructor for exception class java.rmi.server.
ExportException
Constructs an
ExportException
with the specified
 detail message.
ExportException(String, Exception)
- Constructor for exception class java.rmi.server.
ExportException
Constructs an
ExportException
with the specified
 detail message and nested exception.
exportNode(OutputStream)
- Method in class java.util.prefs.
AbstractPreferences
Implements the
exportNode
method as per the specification in
Preferences.exportNode(OutputStream)
.
exportNode(OutputStream)
- Method in class java.util.prefs.
Preferences
Emits on the specified output stream an XML document representing all
 of the preferences contained in this node (but not its descendants).
exportObject(Remote)
- Static method in class java.rmi.server.
UnicastRemoteObject
Deprecated.
This method is deprecated because it supports only static stubs.
 Use
exportObject(Remote, port)
or
exportObject(Remote, port, csf, ssf)
instead.
exportObject(Remote, int)
- Static method in class java.rmi.server.
UnicastRemoteObject
Exports the remote object to make it available to receive incoming
 calls, using the particular supplied port.
exportObject(Remote, int, ObjectInputFilter)
- Static method in class java.rmi.server.
UnicastRemoteObject
Exports the remote object to make it available to receive incoming
 calls, using the particular supplied port
 and
filter
.
exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory)
- Static method in class java.rmi.server.
UnicastRemoteObject
Exports the remote object to make it available to receive incoming
 calls, using a transport specified by the given socket factory.
exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory, ObjectInputFilter)
- Static method in class java.rmi.server.
UnicastRemoteObject
Exports the remote object to make it available to receive incoming
 calls, using a transport specified by the given socket factory
 and
filter
.
exportObject(Remote, Object)
- Method in interface java.rmi.server.
ServerRef
Deprecated.
Creates a client stub object for the supplied Remote object.
exports()
- Method in class java.lang.module.
ModuleDescriptor
Returns the set of
Exports
objects representing the exported
 packages.
exports(ModuleDescriptor.Exports)
- Method in class java.lang.module.
ModuleDescriptor.Builder
Adds an exported package.
exports(String)
- Method in class java.lang.module.
ModuleDescriptor.Builder
Adds an exported package.
exports(String, Set<String>)
- Method in class java.lang.module.
ModuleDescriptor.Builder
Adds an exported package.
exports(Set<ModuleDescriptor.Exports.Modifier>, String)
- Method in class java.lang.module.
ModuleDescriptor.Builder
Adds an exported package with the given (and possibly empty) set of
 modifiers.
exports(Set<ModuleDescriptor.Exports.Modifier>, String, Set<String>)
- Method in class java.lang.module.
ModuleDescriptor.Builder
Adds an exported package with the given (and possibly empty) set of
 modifiers.
EXPORTS
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
ExportsTree
representing
 exports directives in a module declaration.
EXPORTS
- Enum constant in enum class javax.lang.model.element.
ModuleElement.DirectiveKind
An "exports package-name [to module-name-list]" directive.
exportsIn(Iterable<? extends ModuleElement.Directive>)
- Static method in class javax.lang.model.util.
ElementFilter
Returns a list of
exports
directives in
directives
.
ExportsTree
- Interface in
com.sun.source.tree
A tree node for an 'exports' directive in a module declaration.
exportSubtree(OutputStream)
- Method in class java.util.prefs.
AbstractPreferences
Implements the
exportSubtree
method as per the specification in
Preferences.exportSubtree(OutputStream)
.
exportSubtree(OutputStream)
- Method in class java.util.prefs.
Preferences
Emits an XML document representing all of the preferences contained
 in this node and all of its descendants.
exportToClipboard(JComponent, Clipboard, int)
- Method in class javax.swing.
TransferHandler
Causes a transfer from the given component to the
 given clipboard.
EXPOSURE_MODE_AUTO_BRACKET
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "ExposureMode" tag.
EXPOSURE_MODE_AUTO_EXPOSURE
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "ExposureMode" tag.
EXPOSURE_MODE_MANUAL_EXPOSURE
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "ExposureMode" tag.
EXPOSURE_PROGRAM_ACTION_PROGRAM
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "ExposureProgram" tag.
EXPOSURE_PROGRAM_APERTURE_PRIORITY
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "ExposureProgram" tag.
EXPOSURE_PROGRAM_CREATIVE_PROGRAM
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "ExposureProgram" tag.
EXPOSURE_PROGRAM_LANDSCAPE_MODE
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "ExposureProgram" tag.
EXPOSURE_PROGRAM_MANUAL
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "ExposureProgram" tag.
EXPOSURE_PROGRAM_MAX_RESERVED
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "ExposureProgram" tag.
EXPOSURE_PROGRAM_NORMAL_PROGRAM
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "ExposureProgram" tag.
EXPOSURE_PROGRAM_NOT_DEFINED
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "ExposureProgram" tag.
EXPOSURE_PROGRAM_PORTRAIT_MODE
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "ExposureProgram" tag.
EXPOSURE_PROGRAM_SHUTTER_PRIORITY
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "ExposureProgram" tag.
Expression
- Class in
java.beans
An
Expression
object represents a primitive expression
 in which a single method is applied to a target and a set of
 arguments to return a result - as in
"a.getFoo()"
.
Expression(Object, Object, String, Object[])
- Constructor for class java.beans.
Expression
Creates a new
Expression
object with the specified value
 for the specified target object to invoke the  method
 specified by the name and by the array of arguments.
Expression(Object, String, Object[])
- Constructor for class java.beans.
Expression
Creates a new
Expression
object
 for the specified target object to invoke the method
 specified by the name and by the array of arguments.
EXPRESSION
- Enum constant in enum class com.sun.source.tree.
LambdaExpressionTree.BodyKind
enum constant for expression lambdas
EXPRESSION
- Enum constant in enum class jdk.jshell.
Snippet.Kind
An expression, with or without side-effects.
EXPRESSION_STATEMENT
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
ExpressionStatementTree
.
ExpressionSnippet
- Class in
jdk.jshell
Snippet for an assignment or variable-value expression.
ExpressionStatementTree
- Interface in
com.sun.source.tree
A tree node for an expression statement.
ExpressionTree
- Interface in
com.sun.source.tree
A tree node used as the base class for the different types of
 expressions.
EXTCRC
- Static variable in class java.util.jar.
JarEntry
Extra local (EXT) header uncompressed file crc-32 value field offset.
EXTCRC
- Static variable in class java.util.jar.
JarFile
Extra local (EXT) header uncompressed file crc-32 value field offset.
EXTCRC
- Static variable in class java.util.jar.
JarInputStream
Extra local (EXT) header uncompressed file crc-32 value field offset.
EXTCRC
- Static variable in class java.util.jar.
JarOutputStream
Extra local (EXT) header uncompressed file crc-32 value field offset.
EXTCRC
- Static variable in class java.util.zip.
ZipEntry
Extra local (EXT) header uncompressed file crc-32 value field offset.
EXTCRC
- Static variable in class java.util.zip.
ZipFile
Extra local (EXT) header uncompressed file crc-32 value field offset.
EXTCRC
- Static variable in class java.util.zip.
ZipInputStream
Extra local (EXT) header uncompressed file crc-32 value field offset.
EXTCRC
- Static variable in class java.util.zip.
ZipOutputStream
Extra local (EXT) header uncompressed file crc-32 value field offset.
EXTENDED
- Enum constant in enum class jdk.javadoc.doclet.
Doclet.Option.Kind
An extended option, such as those prefixed with
-X
.
EXTENDED_FILTERING
- Enum constant in enum class java.util.
Locale.FilteringMode
Specifies extended filtering.
ExtendedGSSContext
- Interface in
com.sun.security.jgss
The extended GSSContext interface for supporting additional
 functionalities not defined by
org.ietf.jgss.GSSContext
,
 such as querying context-specific attributes.
ExtendedGSSCredential
- Interface in
com.sun.security.jgss
The extended GSSCredential interface for supporting additional
 functionalities not defined by
org.ietf.jgss.GSSCredential
.
ExtendedMapMode
- Class in
jdk.nio.mapmode
JDK-specific map modes.
extendedOperation(ExtendedRequest)
- Method in class javax.naming.ldap.
InitialLdapContext
extendedOperation(ExtendedRequest)
- Method in interface javax.naming.ldap.
LdapContext
Performs an extended operation.
Extended Operations
- Search tag in package javax.naming.ldap
Section
ExtendedRequest
- Interface in
javax.naming.ldap
This interface represents an LDAPv3 extended operation request as defined in
RFC 2251
.
ExtendedResponse
- Interface in
javax.naming.ldap
This interface represents an LDAP extended operation response as defined in
RFC 2251
.
ExtendedSocketOptions
- Class in
jdk.net
Defines extended socket options, beyond those defined in
StandardSocketOptions
.
ExtendedSSLSession
- Class in
javax.net.ssl
Extends the
SSLSession
interface to support additional
 session attributes.
ExtendedSSLSession()
- Constructor for class javax.net.ssl.
ExtendedSSLSession
Constructor for subclasses to call.
Extending StructuredTaskScope
- Search tag in class java.util.concurrent.StructuredTaskScope
Section
Extending UIDefaults
- Search tag in package javax.swing.plaf.multi
Section
EXTENDS_WILDCARD
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
WildcardTree
representing
 an upper-bounded wildcard type argument.
Extensible Markup Language (XML) 1.0 (Fifth Edition)
- Search tag in java.util.Properties.loadFromXML(InputStream)
External Specification
Extensible Markup Language (XML) 1.0 (Fifth Edition)
- Search tag in java.util.Properties.storeToXML(OutputStream, String, Charset)
External Specification
Extensible Markup Language (XML) 1.0 (Fifth Edition)
- Search tag in java.util.Properties.storeToXML(OutputStream, String, String)
External Specification
extension
- Variable in enum class javax.tools.
JavaFileObject.Kind
The extension which (by convention) is normally used for
 this kind of file object.
Extension
- Interface in
java.security.cert
This interface represents an X.509 extension.
EXTENSION_INSTALLATION
- Static variable in class java.util.jar.
Attributes.Name
Deprecated.
Extension mechanism is no longer supported.
EXTENSION_LIST
- Static variable in class java.util.jar.
Attributes.Name
Name
object for
Extension-List
manifest attribute
 used for the extension mechanism that is no longer supported.
EXTENSION_NAME
- Static variable in class java.util.jar.
Attributes.Name
Name
object for
Extension-Name
manifest attribute
 used for the extension mechanism that is no longer supported.
extensionCommand(String, Object)
- Method in class jdk.jshell.execution.
DirectExecutionControl
extensionCommand(String, Object)
- Method in class jdk.jshell.execution.
StreamingExecutionControl
extensionCommand(String, Object)
- Method in interface jdk.jshell.spi.
ExecutionControl
Run a non-standard command (or a standard command from a newer version).
extent
- Variable in class java.awt.geom.
Arc2D.Double
The angular extent of the arc in degrees.
extent
- Variable in class java.awt.geom.
Arc2D.Float
The angular extent of the arc in degrees.
External Access Properties
- Search tag in class javax.xml.XMLConstants
Section
externalEntityDecl(String, String, String)
- Method in interface org.xml.sax.ext.
DeclHandler
Report a parsed external entity declaration.
externalEntityDecl(String, String, String)
- Method in class org.xml.sax.ext.
DefaultHandler2
Externalizable
- Interface in
java.io
Only the identity of the class of an Externalizable instance is
 written in the serialization stream and it is the responsibility
 of the class to save and restore the contents of its instances.
externalSubmit(ForkJoinTask<T>)
- Method in class java.util.concurrent.
ForkJoinPool
Submits the given task as if submitted from a non-
ForkJoinTask
client.
EXTHDR
- Static variable in class java.util.jar.
JarEntry
Extra local (EXT) header size in bytes (including signature).
EXTHDR
- Static variable in class java.util.jar.
JarFile
Extra local (EXT) header size in bytes (including signature).
EXTHDR
- Static variable in class java.util.jar.
JarInputStream
Extra local (EXT) header size in bytes (including signature).
EXTHDR
- Static variable in class java.util.jar.
JarOutputStream
Extra local (EXT) header size in bytes (including signature).
EXTHDR
- Static variable in class java.util.zip.
ZipEntry
Extra local (EXT) header size in bytes (including signature).
EXTHDR
- Static variable in class java.util.zip.
ZipFile
Extra local (EXT) header size in bytes (including signature).
EXTHDR
- Static variable in class java.util.zip.
ZipInputStream
Extra local (EXT) header size in bytes (including signature).
EXTHDR
- Static variable in class java.util.zip.
ZipOutputStream
Extra local (EXT) header size in bytes (including signature).
EXTLEN
- Static variable in class java.util.jar.
JarEntry
Extra local (EXT) header uncompressed size field offset.
EXTLEN
- Static variable in class java.util.jar.
JarFile
Extra local (EXT) header uncompressed size field offset.
EXTLEN
- Static variable in class java.util.jar.
JarInputStream
Extra local (EXT) header uncompressed size field offset.
EXTLEN
- Static variable in class java.util.jar.
JarOutputStream
Extra local (EXT) header uncompressed size field offset.
EXTLEN
- Static variable in class java.util.zip.
ZipEntry
Extra local (EXT) header uncompressed size field offset.
EXTLEN
- Static variable in class java.util.zip.
ZipFile
Extra local (EXT) header uncompressed size field offset.
EXTLEN
- Static variable in class java.util.zip.
ZipInputStream
Extra local (EXT) header uncompressed size field offset.
EXTLEN
- Static variable in class java.util.zip.
ZipOutputStream
Extra local (EXT) header uncompressed size field offset.
EXTRA_SAMPLES_ASSOCIATED_ALPHA
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A value to be used with the "ExtraSamples" tag.
EXTRA_SAMPLES_UNASSOCIATED_ALPHA
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A value to be used with the "ExtraSamples" tag.
EXTRA_SAMPLES_UNSPECIFIED
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A value to be used with the "ExtraSamples" tag.
extractContents()
- Method in interface org.w3c.dom.ranges.
Range
Moves the contents of a Range from the containing document or document
 fragment to a new DocumentFragment.
extraImageMetadataFormatClassNames
- Variable in class javax.imageio.spi.
ImageReaderWriterSpi
An array of
String
s containing the class names of
 any additional image metadata formats supported by this
 plug-in, initially
null
.
extraImageMetadataFormatNames
- Variable in class javax.imageio.spi.
ImageReaderWriterSpi
An array of
String
s containing the names of any
 additional image metadata formats supported by this plug-in,
 initially
null
.
extraMetadataFormatClassNames
- Variable in class javax.imageio.metadata.
IIOMetadata
An array of names of classes implementing
IIOMetadataFormat
and representing the metadata formats, other than the standard and
 native formats, that are supported by this plug-in,
 initialized to
null
and set via the constructor.
extraMetadataFormatNames
- Variable in class javax.imageio.metadata.
IIOMetadata
An array of names of formats, other than the standard and
 native formats, that are supported by this plug-in,
 initialized to
null
and set via the constructor.
extraRemoteVMOptions()
- Method in interface jdk.jshell.spi.
ExecutionEnv
Returns the additional VM options to be used when launching the remote
 JVM.
extraStreamMetadataFormatClassNames
- Variable in class javax.imageio.spi.
ImageReaderWriterSpi
An array of
String
s containing the class names of
 any additional stream metadata formats supported by this plug-in,
 initially
null
.
extraStreamMetadataFormatNames
- Variable in class javax.imageio.spi.
ImageReaderWriterSpi
An array of
String
s containing the names of any
 additional stream metadata formats supported by this plug-in,
 initially
null
.
EXTSIG
- Static variable in class java.util.jar.
JarEntry
Extra local (EXT) header signature.
EXTSIG
- Static variable in class java.util.jar.
JarFile
Extra local (EXT) header signature.
EXTSIG
- Static variable in class java.util.jar.
JarInputStream
Extra local (EXT) header signature.
EXTSIG
- Static variable in class java.util.jar.
JarOutputStream
Extra local (EXT) header signature.
EXTSIG
- Static variable in class java.util.zip.
ZipEntry
Extra local (EXT) header signature.
EXTSIG
- Static variable in class java.util.zip.
ZipFile
Extra local (EXT) header signature.
EXTSIG
- Static variable in class java.util.zip.
ZipInputStream
Extra local (EXT) header signature.
EXTSIG
- Static variable in class java.util.zip.
ZipOutputStream
Extra local (EXT) header signature.
EXTSIZ
- Static variable in class java.util.jar.
JarEntry
Extra local (EXT) header compressed size field offset.
EXTSIZ
- Static variable in class java.util.jar.
JarFile
Extra local (EXT) header compressed size field offset.
EXTSIZ
- Static variable in class java.util.jar.
JarInputStream
Extra local (EXT) header compressed size field offset.
EXTSIZ
- Static variable in class java.util.jar.
JarOutputStream
Extra local (EXT) header compressed size field offset.
EXTSIZ
- Static variable in class java.util.zip.
ZipEntry
Extra local (EXT) header compressed size field offset.
EXTSIZ
- Static variable in class java.util.zip.
ZipFile
Extra local (EXT) header compressed size field offset.
EXTSIZ
- Static variable in class java.util.zip.
ZipInputStream
Extra local (EXT) header compressed size field offset.
EXTSIZ
- Static variable in class java.util.zip.
ZipOutputStream
Extra local (EXT) header compressed size field offset.
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
_
All Classes and Interfaces
|
All Packages
|
Constant Field Values
|
Serialized Form
|
System Properties
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.