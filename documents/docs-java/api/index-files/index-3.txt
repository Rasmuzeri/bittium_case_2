C-Index (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Index
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
_
All Classes and Interfaces
|
All Packages
|
Constant Field Values
|
Serialized Form
|
System Properties
C
1.0 Creating a CachedRowSet Object
- Search tag in interface javax.sql.rowset.CachedRowSet
Section
2.0 Creating a JdbcRowSet Object
- Search tag in interface javax.sql.rowset.JdbcRowSet
Section
3.2 Class types
- Search tag in package javax.xml.xpath
Section
4. Collection Usage Threshold
- Search tag in interface java.lang.management.MemoryPoolMXBean
Section
C
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for Engineering C, 17 x 22 in.
C
- Static variable in class javax.print.attribute.standard.
MediaSize.Engineering
Specifies the engineering C size, 17 inch by 22 inch.
C
- Static variable in class javax.print.attribute.standard.
MediaSizeName
C size.
C0
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ISO_C0.
C1
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ISO_C1.
C10
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ISO_C10.
C14NMethodParameterSpec
- Interface in
javax.xml.crypto.dsig.spec
A specification of algorithm parameters for a
CanonicalizationMethod
Algorithm.
C2
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ISO_C2.
C3
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ISO_C3.
C3
- Static variable in class javax.print.attribute.standard.
MediaSize.ISO
Specifies the ISO C3 size, 324 mm by 458 mm.
C4
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ISO_C4.
C4
- Static variable in class javax.print.attribute.standard.
MediaSize.ISO
Specifies the ISO C4 size, 229 mm by 324 mm.
C5
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ISO_C5.
C5
- Static variable in class javax.print.attribute.standard.
MediaSize.ISO
Specifies the ISO C5 size, 162 mm by 229 mm.
C6
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ISO_C6.
C6
- Static variable in class javax.print.attribute.standard.
MediaSize.ISO
Specifies the ISO C6 size, 114 mm by 162 mm.
C7
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ISO_C7.
C8
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ISO_C8.
C9
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ISO_C9.
CA_COMPROMISE
- Enum constant in enum class java.security.cert.
CRLReason
This reason indicates that it is known or suspected that the
 certificate subject's private key has been compromised.
cachedChildren()
- Method in class java.util.prefs.
AbstractPreferences
Returns all known unremoved children of this node.
cachedMinimumSize
- Variable in class javax.swing.plaf.basic.
BasicComboBoxUI
The cached minimum preferred size.
CachedRowSet
- Interface in
javax.sql.rowset
The interface that all standard implementations of
CachedRowSet
must implement.
cacheIcon(File, Icon)
- Method in class javax.swing.plaf.basic.
BasicFileChooserUI.BasicFileView
Caches an icon for a file.
Cache Management
- Search tag in class java.util.ResourceBundle
Section
cacheMBeanInfo(MBeanInfo)
- Method in class javax.management.
StandardMBean
Customization hook:
 cache the MBeanInfo built for this object.
CacheRequest
- Class in
java.net
Represents channels for storing resources in the
 ResponseCache.
CacheRequest()
- Constructor for class java.net.
CacheRequest
Constructor for subclasses to call.
CacheResponse
- Class in
java.net
Represent channels for retrieving resources from the
 ResponseCache.
CacheResponse()
- Constructor for class java.net.
CacheResponse
Constructor for subclasses to call.
calcRect
- Variable in class javax.swing.plaf.basic.
BasicTabbedPaneUI
A rectangle used for general layout calculations in order
 to avoid constructing many new Rectangles on the fly.
calculateAlignedPositions(int, SizeRequirements, SizeRequirements[], int[], int[])
- Static method in class javax.swing.
SizeRequirements
Creates a bunch of offset/span pairs specifying how to
 lay out a set of components with the specified alignments.
calculateAlignedPositions(int, SizeRequirements, SizeRequirements[], int[], int[], boolean)
- Static method in class javax.swing.
SizeRequirements
Creates a set of offset/span pairs specifying how to
 lay out a set of components with the specified alignments.
calculateBreakPosition(int, int)
- Method in class javax.swing.text.
WrappedPlainView
This is called by the nested wrapped line
 views to determine the break location.
calculateContentRect()
- Method in class javax.swing.plaf.basic.
BasicSliderUI
Calculates the content rectangle.
calculateFocusRect()
- Method in class javax.swing.plaf.basic.
BasicSliderUI
Calculates the focus rectangle.
calculateGeometry()
- Method in class javax.swing.plaf.basic.
BasicSliderUI
Calculates the geometry.
calculateIndex(CompositeData)
- Method in interface javax.management.openmbean.
TabularData
Calculates the index that would be used in this
TabularData
instance to refer to the specified
 composite data
value
parameter if it were added to this instance.
calculateIndex(CompositeData)
- Method in class javax.management.openmbean.
TabularDataSupport
Calculates the index that would be used in this
TabularData
instance to refer
 to the specified composite data
value
parameter if it were added to this instance.
calculateInnerArea(JComponent, Rectangle)
- Static method in class javax.swing.
SwingUtilities
Stores the position and size of
 the inner painting area of the specified component
 in
r
and returns
r
.
calculateLabelRect()
- Method in class javax.swing.plaf.basic.
BasicSliderUI
Calculates the label rectangle.
calculateLayoutInfo()
- Method in class javax.swing.plaf.basic.
BasicTabbedPaneUI.TabbedPaneLayout
Calculates the layout info.
calculateMajorAxisRequirements(int, SizeRequirements)
- Method in class javax.swing.text.
BoxView
Calculates the size requirements for the major axis
axis
.
calculateMajorAxisRequirements(int, SizeRequirements)
- Method in class javax.swing.text.html.
BlockView
Calculate the requirements of the block along the major
 axis (i.e. the axis along with it tiles).
calculateMaxTabHeight(int)
- Method in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Calculates the maximum tab height.
calculateMaxTabWidth(int)
- Method in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Calculates the maximum tab width.
calculateMinorAxisRequirements(int, SizeRequirements)
- Method in class javax.swing.text.
BoxView
Calculates the size requirements for the minor axis
axis
.
calculateMinorAxisRequirements(int, SizeRequirements)
- Method in class javax.swing.text.
FlowView
Calculate requirements along the minor axis.
calculateMinorAxisRequirements(int, SizeRequirements)
- Method in class javax.swing.text.html.
BlockView
Calculate the requirements of the block along the minor
 axis (i.e. the axis orthogonal to the axis along with it tiles).
calculateMinorAxisRequirements(int, SizeRequirements)
- Method in class javax.swing.text.html.
ParagraphView
Calculate the needs for the paragraph along the minor axis.
calculateMinorAxisRequirements(int, SizeRequirements)
- Method in class javax.swing.text.
ParagraphView
Calculate the needs for the paragraph along the minor axis.
calculateMinorAxisRequirements(int, SizeRequirements)
- Method in class javax.swing.text.
TableView
Calculate the requirements for the minor axis.
calculateSize(boolean)
- Method in class javax.swing.plaf.basic.
BasicTabbedPaneUI.TabbedPaneLayout
Returns the calculated size.
calculateTabAreaHeight(int, int, int)
- Method in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Calculates the tab area height.
calculateTabAreaWidth(int, int, int)
- Method in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Calculates the tab area width.
calculateTabHeight(int, int, int)
- Method in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Calculates the tab height.
calculateTabRects(int, int)
- Method in class javax.swing.plaf.basic.
BasicTabbedPaneUI.TabbedPaneLayout
Calculate the tab rectangles.
calculateTabWidth(int, int, FontMetrics)
- Method in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Calculates the tab width.
calculateThumbLocation()
- Method in class javax.swing.plaf.basic.
BasicSliderUI
Calculates the thumb location.
calculateThumbSize()
- Method in class javax.swing.plaf.basic.
BasicSliderUI
Calculates the thumb size rectangle.
calculateTickRect()
- Method in class javax.swing.plaf.basic.
BasicSliderUI
Calculates the tick rectangle.
calculateTiledPositions(int, SizeRequirements, SizeRequirements[], int[], int[])
- Static method in class javax.swing.
SizeRequirements
Creates a set of offset/span pairs representing how to
 lay out a set of components end-to-end.
calculateTiledPositions(int, SizeRequirements, SizeRequirements[], int[], int[], boolean)
- Static method in class javax.swing.
SizeRequirements
Creates a set of offset/span pairs representing how to
 lay out a set of components end-to-end.
calculateTrackBuffer()
- Method in class javax.swing.plaf.basic.
BasicSliderUI
Calculates the track buffer.
calculateTrackRect()
- Method in class javax.swing.plaf.basic.
BasicSliderUI
Calculates the track rectangle.
calendar
- Variable in class java.text.
DateFormat
The
Calendar
instance used for calculating the date-time fields
 and the instant of time.
Calendar
- Class in
java.util
The
Calendar
class is an abstract class that provides methods
 for converting between a specific instant in time and a set of
calendar fields
such as
YEAR
,
MONTH
,
DAY_OF_MONTH
,
HOUR
, and so on, and for
 manipulating the calendar fields, such as getting the date of the next
 week.
Calendar()
- Constructor for class java.util.
Calendar
Constructs a Calendar with the default time zone
 and the default
FORMAT
locale.
Calendar(TimeZone, Locale)
- Constructor for class java.util.
Calendar
Constructs a calendar with the specified time zone and locale.
Calendar.Builder
- Class in
java.util
Calendar.Builder
is used for creating a
Calendar
from
 various date-time parameters.
CalendarDataProvider
- Class in
java.util.spi
An abstract class for service providers that provide locale-dependent
Calendar
parameters.
CalendarDataProvider()
- Constructor for class java.util.spi.
CalendarDataProvider
Sole constructor.
Calendar Fields Resolution
- Search tag in class java.util.Calendar
Section
CalendarNameProvider
- Class in
java.util.spi
An abstract class for service providers that provide localized string
 representations (display names) of
Calendar
field values.
CalendarNameProvider()
- Constructor for class java.util.spi.
CalendarNameProvider
Sole constructor.
call()
- Method in interface java.util.concurrent.
Callable
Computes a result, or throws an exception if unable to do so.
call()
- Method in interface javax.tools.
DocumentationTool.DocumentationTask
Performs this documentation task.
call()
- Method in interface javax.tools.
JavaCompiler.CompilationTask
Performs this compilation task.
call(String, Object...)
- Method in class netscape.javascript.
JSObject
Calls a JavaScript method.
call(Callable<? extends R>)
- Method in class java.lang.
ScopedValue.Carrier
PREVIEW
Calls a value-returning operation with each scoped value in this mapping bound
 to its value in the current thread.
CALL
- Enum constant in enum class jdk.dynalink.
StandardOperation
Call a callable object.
callable(Runnable)
- Static method in class java.util.concurrent.
Executors
Returns a
Callable
object that, when
 called, runs the given task and returns
null
.
callable(Runnable, T)
- Static method in class java.util.concurrent.
Executors
Returns a
Callable
object that, when
 called, runs the given task and returns the given result.
callable(PrivilegedAction<?>)
- Static method in class java.util.concurrent.
Executors
Returns a
Callable
object that, when
 called, runs the given privileged action and returns its result.
callable(PrivilegedExceptionAction<?>)
- Static method in class java.util.concurrent.
Executors
Returns a
Callable
object that, when
 called, runs the given privileged exception action and returns
 its result.
Callable<V>
- Interface in
java.util.concurrent
A task that returns a result and may throw an exception.
CallableStatement
- Interface in
java.sql
The interface used to execute SQL stored procedures.
callAs(Subject, Callable<T>)
- Static method in class javax.security.auth.
Subject
Executes a
Callable
with
subject
as the
 current subject.
Callback
- Interface in
javax.security.auth.callback
Implementations of this interface are passed to a
CallbackHandler
, allowing underlying security services
 the ability to interact with a calling application to retrieve specific
 authentication data such as usernames and passwords, or to display
 certain information, such as error and warning messages.
CallbackHandler
- Interface in
javax.security.auth.callback
An application implements a
CallbackHandler
and passes
 it to underlying security services so that they may interact with
 the application to retrieve specific authentication data,
 such as usernames and passwords, or to display certain information,
 such as error and warning messages.
CallbackHandlerProtection(CallbackHandler)
- Constructor for class java.security.
KeyStore.CallbackHandlerProtection
Constructs a new CallbackHandlerProtection from a
 CallbackHandler.
CallerRunsPolicy()
- Constructor for class java.util.concurrent.
ThreadPoolExecutor.CallerRunsPolicy
Creates a
CallerRunsPolicy
.
Caller sensitive methods
- Search tag in class java.lang.invoke.MethodHandles.Lookup
Section
Calling native functions
- Search tag in interface java.lang.foreign.Linker
Section
CallSite
- Class in
java.lang.invoke
A
CallSite
is a holder for a variable
MethodHandle
,
 which is called its
target
.
CallSiteDescriptor
- Class in
jdk.dynalink
Call site descriptors contain all the information necessary for linking a
 call site.
CallSiteDescriptor(MethodHandles.Lookup, Operation, MethodType)
- Constructor for class jdk.dynalink.
CallSiteDescriptor
Creates a new call site descriptor.
callWhere(ScopedValue<T>, T, Callable<? extends R>)
- Static method in class java.lang.
ScopedValue
PREVIEW
Calls a value-returning operation with a
ScopedValue
bound to a value
 in the current thread.
canAccess(Object)
- Method in class java.lang.reflect.
AccessibleObject
Test if the caller can access this reflected object.
CANADA
- Static variable in class java.util.
Locale
Useful constant for country.
CANADA_FRENCH
- Static variable in class java.util.
Locale
Useful constant for country.
canAddMethod()
- Method in interface com.sun.jdi.
VirtualMachine
Deprecated.
A JVM TI based JDWP back-end will never set this capability to true.
CANADIAN_ABORIGINAL
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Canadian_Aboriginal".
canBeModified()
- Method in interface com.sun.jdi.
VirtualMachine
Determines if the target VM is a read-only VM.
cancel()
- Method in class java.awt.print.
PrinterJob
Cancels a print job that is in progress.
cancel()
- Method in class java.nio.channels.
SelectionKey
Requests that the registration of this key's channel with its selector
 be cancelled.
cancel()
- Method in class java.nio.channels.spi.
AbstractSelectionKey
Cancels this key.
cancel()
- Method in interface java.nio.file.
WatchKey
Cancels the registration with the watch service.
cancel()
- Method in interface java.sql.
Statement
Cancels this
Statement
object if both the DBMS and
 driver support aborting an SQL statement.
cancel()
- Method in interface java.util.concurrent.
Flow.Subscription
Causes the Subscriber to (eventually) stop receiving
 messages.
cancel()
- Method in class java.util.
Timer
Terminates this timer, discarding any currently scheduled tasks.
cancel()
- Method in class java.util.
TimerTask
Cancels this timer task.
cancel()
- Method in interface javax.print.
CancelablePrintJob
Stops further processing of a print job.
cancel(boolean)
- Method in class java.util.concurrent.
CompletableFuture
If not already completed, completes this CompletableFuture with
 a
CancellationException
.
cancel(boolean)
- Method in class java.util.concurrent.
ForkJoinTask
Attempts to cancel execution of this task.
cancel(boolean)
- Method in interface java.util.concurrent.
Future
Attempts to cancel execution of this task.
cancel(boolean)
- Method in class java.util.concurrent.
FutureTask
cancel(boolean)
- Method in class javax.swing.
SwingWorker
Attempts to cancel execution of this task.
CANCEL
- Static variable in class javax.security.auth.callback.
ConfirmationCallback
CANCEL option.
CANCEL_OPTION
- Static variable in class javax.swing.
JFileChooser
Return value if cancel is chosen.
CANCEL_OPTION
- Static variable in class javax.swing.
JOptionPane
Return value from class method if CANCEL is chosen.
CANCEL_SELECTION
- Static variable in class javax.swing.
JFileChooser
Instruction to cancel the current selection.
CancelablePrintJob
- Interface in
javax.print
This interface is used by a printing application to cancel a print job.
cancelButtonMnemonic
- Variable in class javax.swing.plaf.basic.
BasicFileChooserUI
Cancel button mnemonic
cancelButtonText
- Variable in class javax.swing.plaf.basic.
BasicFileChooserUI
Cancel button text
cancelButtonToolTipText
- Variable in class javax.swing.plaf.basic.
BasicFileChooserUI
Cancel button tool tip text
cancelCellEditing()
- Method in class javax.swing.
AbstractCellEditor
Calls
fireEditingCanceled
.
cancelCellEditing()
- Method in interface javax.swing.
CellEditor
Tells the editor to cancel editing and not accept any partially
 edited value.
cancelCellEditing()
- Method in class javax.swing.
DefaultCellEditor
Forwards the message from the
CellEditor
to
 the
delegate
.
cancelCellEditing()
- Method in class javax.swing.
DefaultCellEditor.EditorDelegate
Cancels editing.
cancelCellEditing()
- Method in class javax.swing.tree.
DefaultTreeCellEditor
Messages
cancelCellEditing
to the
realEditor
and removes it from this instance.
CANCELED
- Static variable in class javax.print.attribute.standard.
JobState
The job has been canceled by some human agency, the printer has completed
 canceling the job, and all job status attributes have reached their final
 values for the job.
cancelEditing()
- Method in class javax.swing.
JTree
Cancels the current editing session.
cancelEditing(JTree)
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Cancels the current editing session.
cancelEditing(JTree)
- Method in class javax.swing.plaf.multi.
MultiTreeUI
Invokes the
cancelEditing
method on each UI handled by this object.
cancelEditing(JTree)
- Method in class javax.swing.plaf.
TreeUI
Cancels the current editing session.
cancelLatestCommittedText(AttributedCharacterIterator.Attribute[])
- Method in interface java.awt.im.
InputMethodRequests
Gets the latest committed text from the text editing component and
 removes it from the component's text body.
Cancellation
- Search tag in interface java.nio.channels.AsynchronousChannel
Section
CancellationException
- Exception Class in
java.util.concurrent
Exception indicating that the result of a value-producing task,
 such as a
FutureTask
, cannot be retrieved because the task
 was cancelled.
CancellationException()
- Constructor for exception class java.util.concurrent.
CancellationException
Constructs a
CancellationException
with no detail message.
CancellationException(String)
- Constructor for exception class java.util.concurrent.
CancellationException
Constructs a
CancellationException
with the specified detail
 message.
CANCELLED
- Enum constant in enum class java.util.concurrent.
Future.State
The task was cancelled.
CancelledKeyException
- Exception Class in
java.nio.channels
Unchecked exception thrown when an attempt is made to use
 a selection key that is no longer valid.
CancelledKeyException()
- Constructor for exception class java.nio.channels.
CancelledKeyException
Constructs an instance of this class.
cancelledKeys()
- Method in class java.nio.channels.spi.
AbstractSelector
Retrieves this selector's cancelled-key set.
cancelQuit()
- Method in interface java.awt.desktop.
QuitResponse
Notifies the external quit requester that the user has explicitly
 canceled the pending quit, and leaves the application running.
cancelRowUpdates()
- Method in interface java.sql.
ResultSet
Cancels the updates made to the current row in this
ResultSet
object.
cancelSelection()
- Method in class javax.swing.
JFileChooser
Called by the UI when the user chooses the Cancel button.
CancelSelectionAction()
- Constructor for class javax.swing.plaf.basic.
BasicFileChooserUI.CancelSelectionAction
Constructs a
CancelSelectionAction
.
canConvert(Class<?>, Class<?>)
- Method in interface jdk.dynalink.linker.
LinkerServices
Returns true if there might exist a conversion between the requested
 types (either an automatic JVM conversion, or one provided by any
 available
GuardingTypeConverterFactory
), or false if there
 definitely does not exist a conversion between the requested types.
canDecodeInput(Object)
- Method in class javax.imageio.spi.
ImageReaderSpi
Returns
true
if the supplied source object appears
 to be of the format supported by this reader.
canDisplay(char)
- Method in class java.awt.
Font
Checks if this
Font
has a glyph for the specified
 character.
canDisplay(int)
- Method in class java.awt.
Font
Checks if this
Font
has a glyph for the specified
 character.
canDisplayUpTo(char[], int, int)
- Method in class java.awt.
Font
Indicates whether or not this
Font
can display
 the characters in the specified
text
starting at
start
and ending at
limit
.
canDisplayUpTo(String)
- Method in class java.awt.
Font
Indicates whether or not this
Font
can display a
 specified
String
.
canDisplayUpTo(CharacterIterator, int, int)
- Method in class java.awt.
Font
Indicates whether or not this
Font
can display the
 text specified by the
iter
starting at
start
and ending at
limit
.
canDock(Component, Point)
- Method in class javax.swing.plaf.basic.
BasicToolBarUI
Returns
true
if the
JToolBar
can dock at the given position.
canEdit
- Variable in class javax.swing.tree.
DefaultTreeCellEditor
As of Java 2 platform v1.4 this field should no longer be used.
canEditImmediately(EventObject)
- Method in class javax.swing.tree.
DefaultTreeCellEditor
Returns true if
event
is
null
,
 or it is a
MouseEvent
with a click count > 2
 and
inHitRegion
returns true.
canEncode()
- Method in class java.nio.charset.
Charset
Tells whether or not this charset supports encoding.
canEncode(char)
- Method in class java.nio.charset.
CharsetEncoder
Tells whether or not this encoder can encode the given character.
canEncode(CharSequence)
- Method in class java.nio.charset.
CharsetEncoder
Tells whether or not this encoder can encode the given character
 sequence.
canEncodeImage(RenderedImage)
- Method in class javax.imageio.spi.
ImageWriterSpi
Returns
true
if the
ImageWriter
implementation associated with this service provider is able to
 encode the given
RenderedImage
instance.
canEncodeImage(ImageTypeSpecifier)
- Method in class javax.imageio.spi.
ImageWriterSpi
Returns
true
if the
ImageWriter
implementation associated with this service provider is able to
 encode an image with the given layout.
canExecute()
- Method in class java.io.
File
Tests whether the application can execute the file denoted by this
 abstract pathname.
canFilterIndexColorModel
- Variable in class java.awt.image.
RGBImageFilter
This boolean indicates whether or not it is acceptable to apply
 the color filtering of the filterRGB method to the color table
 entries of an IndexColorModel object in lieu of pixel by pixel
 filtering.
canForceEarlyReturn()
- Method in interface com.sun.jdi.
VirtualMachine
Determines if the target VM supports the forcing of a method to
 return early.
canGetBytecodes()
- Method in interface com.sun.jdi.
VirtualMachine
Determines if the target VM supports the retrieval
 of a method's bytecodes.
canGetClassFileVersion()
- Method in interface com.sun.jdi.
VirtualMachine
Determines if the target VM supports reading class file
 major and minor versions.
canGetConstantPool()
- Method in interface com.sun.jdi.
VirtualMachine
Determines if the target VM supports getting constant pool
 information of a class.
canGetCurrentContendedMonitor()
- Method in interface com.sun.jdi.
VirtualMachine
Determines if the target VM supports the retrieval
 of the monitor for which a thread is currently waiting.
canGetInstanceInfo()
- Method in interface com.sun.jdi.
VirtualMachine
Determines if the target VM supports the accessing of class instances,
 instance counts, and referring objects.
canGetMethodReturnValues()
- Method in interface com.sun.jdi.
VirtualMachine
Determines if the target VM supports the inclusion of return values
 in
MethodExitEvent
s.
canGetModuleInfo()
- Method in interface com.sun.jdi.
VirtualMachine
Determines if the target VM supports getting information about modules.
canGetMonitorFrameInfo()
- Method in interface com.sun.jdi.
VirtualMachine
Determines if the target VM supports getting which
 frame has acquired a monitor.
canGetMonitorInfo()
- Method in interface com.sun.jdi.
VirtualMachine
Determines if the target VM supports the retrieval
 of the monitor information for an object.
canGetOwnedMonitorInfo()
- Method in interface com.sun.jdi.
VirtualMachine
Determines if the target VM supports the retrieval
 of the monitors owned by a thread.
canGetSourceDebugExtension()
- Method in interface com.sun.jdi.
VirtualMachine
Determines if the target VM supports getting
 the source debug extension.
canGetSyntheticAttribute()
- Method in interface com.sun.jdi.
VirtualMachine
Determines if the target VM supports the query
 of the synthetic attribute of a method or field.
Can I combine the two techniques to produce a thread that may be safely "stopped" or "suspended"?
- Search tag in package java.lang
Section
canImport(JComponent, DataFlavor[])
- Method in class javax.swing.
TransferHandler
Indicates whether a component will accept an import of the given
 set of data flavors prior to actually attempting to import it.
canImport(TransferHandler.TransferSupport)
- Method in class javax.swing.
TransferHandler
This method is called repeatedly during a drag and drop operation
 to allow the developer to configure properties of, and to return
 the acceptability of transfers; with a return value of
true
indicating that the transfer represented by the given
TransferSupport
(which contains all of the details of the
 transfer) is acceptable at the current time, and a value of
false
rejecting the transfer.
canInsertEmpty(int)
- Method in class javax.imageio.
ImageWriter
Returns
true
if the writer supports the insertion
 of a new, empty image at the given index.
canInsertImage(int)
- Method in class javax.imageio.
ImageWriter
Returns
true
if the writer supports the insertion
 of a new image at the given index.
canLinkType(Class<?>)
- Method in class jdk.dynalink.linker.support.
CompositeTypeBasedGuardingDynamicLinker
Returns true if at least one of the composite linkers returns true from
TypeBasedGuardingDynamicLinker.canLinkType(Class)
for the type.
canLinkType(Class<?>)
- Method in interface jdk.dynalink.linker.
TypeBasedGuardingDynamicLinker
Returns true if the linker can link an invocation where the first argument (receiver) is of the specified type.
canNodeAppear(String, ImageTypeSpecifier)
- Method in interface javax.imageio.metadata.
IIOMetadataFormat
Returns
true
if the element (and the subtree below
 it) is allowed to appear in a metadata document for an image of
 the given type, defined by an
ImageTypeSpecifier
.
CannotProceedException
- Exception Class in
javax.naming
This exception is thrown to indicate that the operation reached
 a point in the name where the operation cannot proceed any further.
CannotProceedException()
- Constructor for exception class javax.naming.
CannotProceedException
Constructs a new instance of CannotProceedException.
CannotProceedException(String)
- Constructor for exception class javax.naming.
CannotProceedException
Constructs a new instance of CannotProceedException using an
 explanation.
CannotRedoException
- Exception Class in
javax.swing.undo
Thrown when an UndoableEdit is told to
redo()
and can't.
CannotRedoException()
- Constructor for exception class javax.swing.undo.
CannotRedoException
Constructs a
CannotRedoException
.
CannotUndoException
- Exception Class in
javax.swing.undo
Thrown when an UndoableEdit is told to
undo()
and can't.
CannotUndoException()
- Constructor for exception class javax.swing.undo.
CannotUndoException
Constructs a
CannotUndoException
.
canOffsetTiles
- Variable in class javax.imageio.
ImageWriteParam
A
boolean
that is
true
if this
ImageWriteParam
allows tiling grid offset
 parameters to be set.
canOffsetTiles()
- Method in class javax.imageio.
ImageWriteParam
Returns
true
if the writer can perform tiling with
 non-zero grid offsets while writing.
CANON_EQ
- Static variable in class java.util.regex.
Pattern
Enables canonical equivalence.
CANONICAL
- Static variable in class javax.security.auth.x500.
X500Principal
Canonical String format of Distinguished Names.
CANONICAL_DECOMPOSITION
- Static variable in class java.text.
Collator
Decomposition mode value.
CanonicalizationMethod
- Interface in
javax.xml.crypto.dsig
A representation of the XML
CanonicalizationMethod
element as defined in the
W3C Recommendation for XML-Signature Syntax and Processing
.
canonicalize(Oid)
- Method in interface org.ietf.jgss.
GSSName
Creates a name that is canonicalized for some
 mechanism.
canPathsBeAdded(TreePath[])
- Method in class javax.swing.tree.
DefaultTreeSelectionModel
Used to test if a particular set of
TreePath
s can
 be added.
canPathsBeRemoved(TreePath[])
- Method in class javax.swing.tree.
DefaultTreeSelectionModel
Returns true if the paths can be removed without breaking the
 continuity of the model.
canPopFrames()
- Method in interface com.sun.jdi.
VirtualMachine
Determines if the target VM supports popping
 frames of a threads stack.
canRead()
- Method in class java.io.
File
Tests whether the application can read the file denoted by this
 abstract pathname.
canRead(Module)
- Method in class java.lang.
Module
Indicates if this module reads the given module.
canReadRaster()
- Method in class javax.imageio.
ImageReader
Returns
true
if this plug-in supports reading
 just a
Raster
of pixel data.
canRedefineClasses()
- Method in interface com.sun.jdi.
VirtualMachine
Determines if the target VM supports any level
 of class redefinition.
canRedo()
- Method in class javax.swing.undo.
AbstractUndoableEdit
Returns
true
if this edit is
alive
and
hasBeenDone
is
false
.
canRedo()
- Method in class javax.swing.undo.
CompoundEdit
Returns false if
isInProgress
or if super
 returns false.
canRedo()
- Method in interface javax.swing.undo.
UndoableEdit
Returns true if this edit may be redone.
canRedo()
- Method in class javax.swing.undo.
UndoManager
Returns true if edits may be redone.
canRemoveImage(int)
- Method in class javax.imageio.
ImageWriter
Returns
true
if the writer supports the removal
 of an existing image at the given index.
canReplaceImageMetadata(int)
- Method in class javax.imageio.
ImageWriter
Returns
true
if it is possible to replace the
 image metadata associated with an existing image with index
imageIndex
.
canReplacePixels(int)
- Method in class javax.imageio.
ImageWriter
Returns
true
if the writer allows pixels of the
 given image to be replaced using the
replacePixels
methods.
canReplaceStreamMetadata()
- Method in class javax.imageio.
ImageWriter
Returns
true
if it is possible to replace the
 stream metadata already present in the output.
canRequestMonitorEvents()
- Method in interface com.sun.jdi.
VirtualMachine
Determines if the target VM supports the creation of
MonitorContendedEnterRequest
s.
canRequestVMDeathEvent()
- Method in interface com.sun.jdi.
VirtualMachine
Determines if the target VM supports the creation of
VMDeathRequest
s.
canSetParameter(String, Object)
- Method in interface org.w3c.dom.
DOMConfiguration
Check if setting a parameter to a specific value is supported.
canSetSourceRenderSize
- Variable in class javax.imageio.
ImageReadParam
true
if this
ImageReadParam
allows
 the source rendering dimensions to be set.
canSetSourceRenderSize()
- Method in class javax.imageio.
ImageReadParam
Returns
true
if this reader allows the source
 image to be rendered at an arbitrary size as part of the
 decoding process, by means of the
setSourceRenderSize
method.
CANT_START
- Enum constant in enum class com.sun.nio.sctp.
AssociationChangeNotification.AssocChangeEvent
The association failed to setup.
canUndo()
- Method in class javax.swing.undo.
AbstractUndoableEdit
Returns true if this edit is
alive
and
hasBeenDone
is
true
.
canUndo()
- Method in class javax.swing.undo.
CompoundEdit
Returns false if
isInProgress
or if super
 returns false.
canUndo()
- Method in interface javax.swing.undo.
UndoableEdit
Returns true if this edit may be undone.
canUndo()
- Method in class javax.swing.undo.
UndoManager
Returns true if edits may be undone.
canUndoOrRedo()
- Method in class javax.swing.undo.
UndoManager
Returns true if it is possible to invoke
undo
or
redo
.
canUnrestrictedlyRedefineClasses()
- Method in interface com.sun.jdi.
VirtualMachine
Deprecated.
A JVM TI based JDWP back-end will never set this capability to true.
canUse(Class<?>)
- Method in class java.lang.
Module
Indicates if this module has a service dependence on the given service
 type.
canUseCacheFile()
- Method in class javax.imageio.spi.
ImageInputStreamSpi
Returns
true
if the
ImageInputStream
implementation associated with this service provider can
 optionally make use of a cache file for improved performance
 and/or memory footrprint.
canUseCacheFile()
- Method in class javax.imageio.spi.
ImageOutputStreamSpi
Returns
true
if the
ImageOutputStream
implementation associated with this service provider can
 optionally make use of a cache
File
for improved
 performance and/or memory footrprint.
canUseInstanceFilters()
- Method in interface com.sun.jdi.
VirtualMachine
Determines if the target VM supports filtering
 events by specific instance object.
canUseSourceNameFilters()
- Method in interface com.sun.jdi.
VirtualMachine
Determines if the target VM supports the filtering of
 class prepare events by source name.
Canvas
- Class in
java.awt
A
Canvas
component represents a blank rectangular
 area of the screen onto which the application can draw or from
 which the application can trap input events from the user.
Canvas()
- Constructor for class java.awt.
Canvas
Constructs a new Canvas.
Canvas(GraphicsConfiguration)
- Constructor for class java.awt.
Canvas
Constructs a new Canvas given a GraphicsConfiguration object.
CANVAS
- Static variable in class javax.accessibility.
AccessibleRole
Object that can be drawn into and is used to trap events.
Canvas.AccessibleAWTCanvas
- Class in
java.awt
This class implements accessibility support for the
Canvas
class.
canWatchFieldAccess()
- Method in interface com.sun.jdi.
VirtualMachine
Determines if the target VM supports watchpoints
 for field access.
canWatchFieldModification()
- Method in interface com.sun.jdi.
VirtualMachine
Determines if the target VM supports watchpoints
 for field modification.
canWrite()
- Method in class java.io.
File
Tests whether the application can modify the file denoted by this
 abstract pathname.
canWriteCompressed
- Variable in class javax.imageio.
ImageWriteParam
A
boolean
that is
true
if this writer
 can write images using compression.
canWriteCompressed()
- Method in class javax.imageio.
ImageWriteParam
Returns
true
if this writer supports compression.
canWriteEmpty()
- Method in class javax.imageio.
ImageWriter
Returns
true
if the writer supports the writing of
 a complete image stream consisting of a single image with
 undefined pixel values and associated metadata and thumbnails
 to the output.
canWriteProgressive
- Variable in class javax.imageio.
ImageWriteParam
A
boolean
that is
true
if this
ImageWriteParam
allows images to be written as a
 progressive sequence of increasing quality passes.
canWriteProgressive()
- Method in class javax.imageio.
ImageWriteParam
Returns
true
if the writer can write out images
 as a series of passes of progressively increasing quality.
canWriteRasters()
- Method in class javax.imageio.
ImageWriter
Returns
true
if the methods that take an
IIOImage
parameter are capable of dealing with a
Raster
(as opposed to
RenderedImage
)
 source image.
canWriteSequence()
- Method in class javax.imageio.
ImageWriter
Returns
true
if the writer is able to append an
 image to an image stream that already contains header
 information and possibly prior images.
canWriteTiles
- Variable in class javax.imageio.
ImageWriteParam
A
boolean
that is
true
if this
ImageWriteParam
allows tile width and tile height
 parameters to be set.
canWriteTiles()
- Method in class javax.imageio.
ImageWriteParam
Returns
true
if the writer can perform tiling
 while writing.
CAP_BUTT
- Static variable in class java.awt.
BasicStroke
Ends unclosed subpaths and dash segments with no added
 decoration.
CAP_ROUND
- Static variable in class java.awt.
BasicStroke
Ends unclosed subpaths and dash segments with a round
 decoration that has a radius equal to half of the width
 of the pen.
CAP_SQUARE
- Static variable in class java.awt.
BasicStroke
Ends unclosed subpaths and dash segments with a square
 projection that extends beyond the end of the segment
 to a distance equal to half of the line width.
capabilities()
- Method in class com.sun.jdi.connect.spi.
TransportService
Returns the capabilities of the transport service.
Capabilities()
- Constructor for class com.sun.jdi.connect.spi.
TransportService.Capabilities
Constructor for subclasses to call.
capacity()
- Method in class java.lang.
StringBuilder
Returns the current capacity.
capacity()
- Method in class java.lang.
StringBuffer
capacity()
- Method in class java.nio.
Buffer
Returns this buffer's capacity.
capacity()
- Method in class java.util.
Vector
Returns the current capacity of this vector.
capacity()
- Method in class javax.swing.
DefaultListModel
Returns the current capacity of this list.
capacityIncrement
- Variable in class java.util.
Vector
The amount by which the capacity of the vector is automatically
 incremented when its size becomes greater than its capacity.
capacityIncrement
- Static variable in class javax.management.monitor.
Monitor
The amount by which the capacity of the monitor arrays are
 automatically incremented when their size becomes greater than
 their capacity.
caps
- Variable in class java.awt.
Component.BltBufferStrategy
The buffering capabilities
caps
- Variable in class java.awt.
Component.FlipBufferStrategy
The buffering capabilities
CAPS_LOCK
- Static variable in class java.awt.
Event
Deprecated.
The Caps Lock key, a non-ASCII action key.
CAPTION
- Static variable in class javax.swing.text.html.
HTML.Tag
Tag <caption>
capture(TypeMirror)
- Method in interface javax.lang.model.util.
Types
Applies capture conversion to a type.
captureCallState(String...)
- Static method in interface java.lang.foreign.
Linker.Option
PREVIEW
Returns a linker option used to save portions of the execution state immediately after
          calling a foreign function associated with a downcall method handle,
          before it can be overwritten by the Java runtime, or read through conventional means.
captureStateLayout()
- Static method in interface java.lang.foreign.
Linker.Option
PREVIEW
Returns a struct layout that represents the layout of the capture state segment that is passed
          to a downcall handle linked with
Linker.Option.captureCallState(String...)
PREVIEW
.
CAPTURING_PHASE
- Static variable in interface org.w3c.dom.events.
Event
The current event phase is the capturing phase.
Card
- Class in
javax.smartcardio
A Smart Card with which a connection has been established.
Card()
- Constructor for class javax.smartcardio.
Card
Constructs a new Card object.
CARD_ABSENT
- Enum constant in enum class javax.smartcardio.
CardTerminals.State
CardTerminals in which a card is not present.
CARD_INSERTION
- Enum constant in enum class javax.smartcardio.
CardTerminals.State
CardTerminals for which a card insertion was detected during the
 latest call to
waitForChange()
call.
CARD_PRESENT
- Enum constant in enum class javax.smartcardio.
CardTerminals.State
CardTerminals in which a card is present.
CARD_REMOVAL
- Enum constant in enum class javax.smartcardio.
CardTerminals.State
CardTerminals for which a card removal was detected during the
 latest call to
waitForChange()
call.
CardChannel
- Class in
javax.smartcardio
A logical channel connection to a Smart Card.
CardChannel()
- Constructor for class javax.smartcardio.
CardChannel
Constructs a new CardChannel object.
CardException
- Exception Class in
javax.smartcardio
Exception for errors that occur during communication with the
 Smart Card stack or the card itself.
CardException(String)
- Constructor for exception class javax.smartcardio.
CardException
Constructs a new CardException with the specified detail message.
CardException(String, Throwable)
- Constructor for exception class javax.smartcardio.
CardException
Constructs a new CardException with the specified detail message and cause.
CardException(Throwable)
- Constructor for exception class javax.smartcardio.
CardException
Constructs a new CardException with the specified cause and a detail message
 of
(cause==null ? null : cause.toString())
.
cardinality()
- Method in class java.util.
BitSet
Returns the number of bits set to
true
in this
BitSet
.
CardLayout
- Class in
java.awt
A
CardLayout
object is a layout manager for a
 container.
CardLayout()
- Constructor for class java.awt.
CardLayout
Creates a new card layout with gaps of size zero.
CardLayout(int, int)
- Constructor for class java.awt.
CardLayout
Creates a new card layout with the specified horizontal and
 vertical gaps.
CardNotPresentException
- Exception Class in
javax.smartcardio
Exception thrown when an application tries to establish a connection with a
 terminal that has no card present.
CardNotPresentException(String)
- Constructor for exception class javax.smartcardio.
CardNotPresentException
Constructs a new CardNotPresentException with the specified detail message.
CardNotPresentException(String, Throwable)
- Constructor for exception class javax.smartcardio.
CardNotPresentException
Constructs a new CardNotPresentException with the specified detail message and cause.
CardNotPresentException(Throwable)
- Constructor for exception class javax.smartcardio.
CardNotPresentException
Constructs a new CardNotPresentException with the specified cause and a detail message
 of
(cause==null ? null : cause.toString())
.
CardPermission
- Class in
javax.smartcardio
A permission for Smart Card operations.
CardPermission(String, String)
- Constructor for class javax.smartcardio.
CardPermission
Constructs a new CardPermission with the specified actions.
CardTerminal
- Class in
javax.smartcardio
A Smart Card terminal, sometimes referred to as a Smart Card Reader.
CardTerminal()
- Constructor for class javax.smartcardio.
CardTerminal
Constructs a new CardTerminal object.
CardTerminals
- Class in
javax.smartcardio
The set of terminals supported by a TerminalFactory.
CardTerminals()
- Constructor for class javax.smartcardio.
CardTerminals
Constructs a new CardTerminals object.
CardTerminals.State
- Enum Class in
javax.smartcardio
Enumeration of attributes of a CardTerminal.
Caret
- Interface in
javax.swing.text
A place within a document view that represents where
 things can be inserted into the document model.
CARET
- Static variable in class com.sun.java.accessibility.util.
EventID
Maps to Swing Text Caret support (i.e., CaretListener and
 CaretEvent)
CARET_POSITION_CHANGED
- Static variable in class java.awt.event.
InputMethodEvent
The event type indicating a changed insertion point in input method text.
CaretEvent
- Class in
javax.swing.event
CaretEvent is used to notify interested parties that
 the text caret has changed in the event source.
CaretEvent(Object)
- Constructor for class javax.swing.event.
CaretEvent
Creates a new CaretEvent object.
CaretListener
- Interface in
javax.swing.event
Listener for changes in the caret position of a text
 component.
CaretPolicy()
- Constructor for class java.awt.font.
TextLayout.CaretPolicy
Constructs a
CaretPolicy
.
caretPositionChanged(InputMethodEvent)
- Method in class java.awt.
AWTEventMulticaster
Handles the caretPositionChanged event by invoking the
 caretPositionChanged methods on listener-a and listener-b.
caretPositionChanged(InputMethodEvent)
- Method in interface java.awt.event.
InputMethodListener
Invoked when the caret within composed text has changed.
caretUpdate(CaretEvent)
- Method in interface javax.swing.event.
CaretListener
Called when the caret position is updated.
caretUpdate(CaretEvent)
- Method in class javax.swing.text.
JTextComponent.AccessibleJTextComponent
Handles caret updates (fire appropriate property change event,
 which are AccessibleContext.ACCESSIBLE_CARET_PROPERTY and
 AccessibleContext.ACCESSIBLE_SELECTION_PROPERTY).
CARIAN
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Carian".
CARIAN
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Carian" Unicode character block.
carrier()
- Method in interface java.lang.foreign.
ValueLayout
PREVIEW
Returns the carrier associated with this value layout.
CASE
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
CaseTree
.
CASE_INSENSITIVE
- Static variable in class java.util.regex.
Pattern
Enables case-insensitive matching.
CASE_INSENSITIVE_ORDER
- Static variable in class java.lang.
String
A Comparator that orders
String
objects as by
compareToIgnoreCase
.
caseFoldLanguageTag(String)
- Static method in class java.util.
Locale
Returns a case folded IETF BCP 47 language tag.
CaseLabelTree
- Interface in
com.sun.source.tree
A marker interface for
Tree
s that may be used as
CaseTree
labels.
CaseTree
- Interface in
com.sun.source.tree
A tree node for a
case
in a
switch
statement or expression.
CaseTree.CaseKind
- Enum Class in
com.sun.source.tree
The syntactic form of this case:
 
     STATEMENT:
case <expression>: <statements>
RULE:
case <expression> -> <expression>/<statement>
cast(Object)
- Method in class java.lang.
Class
Casts an object to the class or interface represented
 by this
Class
object.
cast(VectorSpecies<F>)
- Method in class jdk.incubator.vector.
VectorMask
Converts this mask to a mask of the given species of
 element type
F
.
cast(VectorSpecies<F>)
- Method in class jdk.incubator.vector.
VectorShuffle
Converts this shuffle to a shuffle of the given species of
 element type
F
.
castShape(VectorSpecies<F>, int)
- Method in class jdk.incubator.vector.
ByteVector
Convenience method for converting a vector from one lane type
 to another, reshaping as needed when lane sizes change.
castShape(VectorSpecies<F>, int)
- Method in class jdk.incubator.vector.
DoubleVector
Convenience method for converting a vector from one lane type
 to another, reshaping as needed when lane sizes change.
castShape(VectorSpecies<F>, int)
- Method in class jdk.incubator.vector.
FloatVector
Convenience method for converting a vector from one lane type
 to another, reshaping as needed when lane sizes change.
castShape(VectorSpecies<F>, int)
- Method in class jdk.incubator.vector.
IntVector
Convenience method for converting a vector from one lane type
 to another, reshaping as needed when lane sizes change.
castShape(VectorSpecies<F>, int)
- Method in class jdk.incubator.vector.
LongVector
Convenience method for converting a vector from one lane type
 to another, reshaping as needed when lane sizes change.
castShape(VectorSpecies<F>, int)
- Method in class jdk.incubator.vector.
ShortVector
Convenience method for converting a vector from one lane type
 to another, reshaping as needed when lane sizes change.
castShape(VectorSpecies<F>, int)
- Method in class jdk.incubator.vector.
Vector
Convenience method for converting a vector from one lane type
 to another, reshaping as needed when lane sizes change.
catalog(CatalogFeatures, URI...)
- Static method in class javax.xml.catalog.
CatalogManager
Creates a
Catalog
object using the specified feature settings and
 uri(s) to one or more catalog files.
Catalog
- Interface in
javax.xml.catalog
The Catalog class represents an entity Catalog as defined by
XML Catalogs, OASIS Standard V1.1, 7 October 2005
.
CatalogException
- Exception Class in
javax.xml.catalog
The exception class handles errors that may happen while processing or using
 a catalog.
CatalogException(String)
- Constructor for exception class javax.xml.catalog.
CatalogException
Constructs a new CatalogException with the specified detail message.
CatalogException(String, Throwable)
- Constructor for exception class javax.xml.catalog.
CatalogException
Constructs a new CatalogException with the specified detail message and
 cause.
CatalogFeatures
- Class in
javax.xml.catalog
The CatalogFeatures holds a collection of features and properties.
CatalogFeatures.Builder
- Class in
javax.xml.catalog
The Builder class for building the CatalogFeatures object.
CatalogFeatures.Feature
- Enum Class in
javax.xml.catalog
A Feature type as defined in the
Catalog Features table
.
CatalogManager
- Class in
javax.xml.catalog
The Catalog Manager manages the creation of XML Catalogs and Catalog Resolvers.
catalogResolver(Catalog)
- Static method in class javax.xml.catalog.
CatalogManager
Creates an instance of a
CatalogResolver
using the specified catalog.
catalogResolver(CatalogFeatures, URI...)
- Static method in class javax.xml.catalog.
CatalogManager
Creates an instance of a
CatalogResolver
using the specified feature
 settings and uri(s) to one or more catalog files.
CatalogResolver
- Interface in
javax.xml.catalog
A Catalog Resolver that implements SAX
EntityResolver
,
 StAX
XMLResolver
,
 DOM LS
LSResourceResolver
used by Schema Validation, and
 Transform
URIResolver
, and resolves
 external references using catalogs.
catalogs()
- Method in interface javax.xml.catalog.
Catalog
Returns a sequential Stream of alternative Catalogs specified using the
nextCatalog
entries in the current catalog, and as the input of
 catalog files excluding the current catalog (that is, the first in the
 input list) when the Catalog object is created by the
CatalogManager
.
CATCH
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
CatchTree
.
catchException(MethodHandle, Class<? extends Throwable>, MethodHandle)
- Static method in class java.lang.invoke.
MethodHandles
Makes a method handle which adapts a target method handle,
 by running it inside an exception handler.
catchExceptions
- Variable in class java.awt.event.
InvocationEvent
Set to true if dispatch() catches Throwable and stores it in the
 exception instance variable.
catchLocation()
- Method in interface com.sun.jdi.event.
ExceptionEvent
Gets the location where the exception will be caught.
CatchTree
- Interface in
com.sun.source.tree
A tree node for a
catch
block in a
try
statement.
Categories of Random Number Generator Algorithms
- Search tag in package java.util.random
Section
Category
- Annotation Interface in
jdk.jfr
Event annotation, to associate the event type with a category, in the format
 of a human-readable path.
CAUCASIAN_ALBANIAN
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Caucasian Albanian".
CAUCASIAN_ALBANIAN
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Caucasian Albanian" Unicode character block.
causeExceptionClass()
- Method in exception class jdk.jshell.spi.
ExecutionControl.UserException
Returns the class of the user exception.
causeSnippet()
- Method in class jdk.jshell.
SnippetEvent
Either the snippet whose change caused this update or
null
.
cbrt(double)
- Static method in class java.lang.
Math
Returns the cube root of a
double
value.
cbrt(double)
- Static method in class java.lang.
StrictMath
Returns the cube root of a
double
value.
CBRT
- Static variable in class jdk.incubator.vector.
VectorOperators
Produce
cbrt(a)
.
CD_boolean
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing the primitive type
boolean
CD_Boolean
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
Boolean
CD_byte
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing the primitive type
byte
CD_Byte
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
Byte
CD_CallSite
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
CallSite
CD_char
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing the primitive type
char
CD_Character
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
Character
CD_Class
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
Class
CD_ClassDesc
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
ClassDesc
CD_Collection
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
Collection
CD_ConstantBootstraps
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
ConstantBootstraps
CD_ConstantDesc
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
ConstantDesc
CD_DirectMethodHandleDesc
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
DirectMethodHandleDesc
CD_double
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing the primitive type
double
CD_Double
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
Double
CD_DynamicCallSiteDesc
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
DynamicCallSiteDesc
CD_DynamicConstantDesc
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
DynamicConstantDesc
CD_Enum
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
Enum
CD_EnumDesc
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
Enum.EnumDesc
CD_Exception
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
Exception
CD_float
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing the primitive type
float
CD_Float
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
Float
CD_int
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing the primitive type
int
CD_Integer
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
Integer
CD_List
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
List
CD_long
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing the primitive type
long
CD_Long
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
Long
CD_Map
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
Map
CD_MethodHandle
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
MethodHandle
CD_MethodHandleDesc
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
MethodHandleDesc
CD_MethodHandleDesc_Kind
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
DirectMethodHandleDesc.Kind
CD_MethodHandles
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
MethodHandles
CD_MethodHandles_Lookup
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
MethodHandles.Lookup
CD_MethodType
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
MethodType
CD_MethodTypeDesc
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
MethodTypeDesc
CD_Number
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
Number
CD_Object
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
Object
CD_Set
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
Set
CD_short
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing the primitive type
short
CD_Short
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
Short
CD_String
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
String
CD_Throwable
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
Throwable
CD_VarHandle
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
VarHandle
CD_VarHandleDesc
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
VarHandle.VarHandleDesc
CD_void
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing the primitive type
void
CD_Void
- Static variable in class java.lang.constant.
ConstantDescs
ClassDesc
representing
Void
CDATA
- Static variable in interface javax.swing.text.html.parser.
DTDConstants
The DTD constant corresponds to CDATA
CDATA
- Static variable in interface javax.xml.stream.
XMLStreamConstants
Indicates an event is a CDATA section
CDATA_SECTION_ELEMENTS
- Static variable in class javax.xml.transform.
OutputKeys
cdata-section-elements =
expanded names
.
CDATA_SECTION_NODE
- Static variable in interface org.w3c.dom.
Node
The node is a
CDATASection
.
CDATASection
- Interface in
org.w3c.dom
CDATA sections are used to escape blocks of text containing characters that
 would otherwise be regarded as markup.
CE
- Enum constant in enum class java.time.chrono.
IsoEra
The singleton instance for the current era, 'Current Era',
 which has the numeric value 1.
ceil(double)
- Static method in class java.lang.
Math
Returns the smallest (closest to negative infinity)
double
value that is greater than or equal to the
 argument and is equal to a mathematical integer.
ceil(double)
- Static method in class java.lang.
StrictMath
Returns the smallest (closest to negative infinity)
double
value that is greater than or equal to the
 argument and is equal to a mathematical integer.
ceilDiv(int, int)
- Static method in class java.lang.
Math
Returns the smallest (closest to negative infinity)
int
value that is greater than or equal to the algebraic quotient.
ceilDiv(int, int)
- Static method in class java.lang.
StrictMath
Returns the smallest (closest to negative infinity)
int
value that is greater than or equal to the algebraic quotient.
ceilDiv(long, int)
- Static method in class java.lang.
Math
Returns the smallest (closest to negative infinity)
long
value that is greater than or equal to the algebraic quotient.
ceilDiv(long, int)
- Static method in class java.lang.
StrictMath
Returns the smallest (closest to negative infinity)
long
value that is greater than or equal to the algebraic quotient.
ceilDiv(long, long)
- Static method in class java.lang.
Math
Returns the smallest (closest to negative infinity)
long
value that is greater than or equal to the algebraic quotient.
ceilDiv(long, long)
- Static method in class java.lang.
StrictMath
Returns the smallest (closest to negative infinity)
long
value that is greater than or equal to the algebraic quotient.
ceilDivExact(int, int)
- Static method in class java.lang.
Math
Returns the smallest (closest to negative infinity)
int
value that is greater than or equal to the algebraic quotient.
ceilDivExact(int, int)
- Static method in class java.lang.
StrictMath
Returns the smallest (closest to negative infinity)
int
value that is greater than or equal to the algebraic quotient.
ceilDivExact(long, long)
- Static method in class java.lang.
Math
Returns the smallest (closest to negative infinity)
long
value that is greater than or equal to the algebraic quotient.
ceilDivExact(long, long)
- Static method in class java.lang.
StrictMath
Returns the smallest (closest to negative infinity)
long
value that is greater than or equal to the algebraic quotient.
ceiling(E)
- Method in class java.util.concurrent.
ConcurrentSkipListSet
ceiling(E)
- Method in interface java.util.
NavigableSet
Returns the least element in this set greater than or equal to
 the given element, or
null
if there is no such element.
ceiling(E)
- Method in class java.util.
TreeSet
CEILING
- Enum constant in enum class java.math.
RoundingMode
Rounding mode to round towards positive infinity.
ceilingEntry(K)
- Method in class java.util.concurrent.
ConcurrentSkipListMap
Returns a key-value mapping associated with the least key
 greater than or equal to the given key, or
null
if
 there is no such entry.
ceilingEntry(K)
- Method in interface java.util.
NavigableMap
Returns a key-value mapping associated with the least key
 greater than or equal to the given key, or
null
if
 there is no such key.
ceilingEntry(K)
- Method in class java.util.
TreeMap
ceilingKey(K)
- Method in class java.util.concurrent.
ConcurrentSkipListMap
ceilingKey(K)
- Method in interface java.util.
NavigableMap
Returns the least key greater than or equal to the given key,
 or
null
if there is no such key.
ceilingKey(K)
- Method in class java.util.
TreeMap
ceilMod(int, int)
- Static method in class java.lang.
Math
Returns the ceiling modulus of the
int
arguments.
ceilMod(int, int)
- Static method in class java.lang.
StrictMath
Returns the ceiling modulus of the
int
arguments.
ceilMod(long, int)
- Static method in class java.lang.
Math
Returns the ceiling modulus of the
long
and
int
arguments.
ceilMod(long, int)
- Static method in class java.lang.
StrictMath
Returns the ceiling modulus of the
long
and
int
arguments.
ceilMod(long, long)
- Static method in class java.lang.
Math
Returns the ceiling modulus of the
long
arguments.
ceilMod(long, long)
- Static method in class java.lang.
StrictMath
Returns the ceiling modulus of the
long
arguments.
CELL_EDITOR_PROPERTY
- Static variable in class javax.swing.
JTree
Bound property name for
cellEditor
.
CELL_RENDERER_PROPERTY
- Static variable in class javax.swing.
JTree
Bound property name for
cellRenderer
.
CELL_RENDERER_PROPERTY
- Static variable in class javax.swing.table.
TableColumn
Obsolete as of Java 2 platform v1.3.
cellEditor
- Variable in class javax.swing.
JTable
The active cell editor object, that overwrites the screen real estate
 occupied by the current cell and allows the user to change its contents.
cellEditor
- Variable in class javax.swing.
JTree
Editor for the entries.
cellEditor
- Variable in class javax.swing.plaf.basic.
BasicTreeUI
Editor for the tree.
cellEditor
- Variable in class javax.swing.table.
TableColumn
The editor used to edit the data cells of the column.
CellEditor
- Interface in
javax.swing
This interface defines the methods any general editor should be able
 to implement.
CELLEDITOR
- Static variable in class com.sun.java.accessibility.util.
EventID
Maps to Swing CellEditor support (i.e., CellEditorListener and
 CellEditorEvent)
CellEditorHandler()
- Constructor for class javax.swing.plaf.basic.
BasicTreeUI.CellEditorHandler
Constructs a
CellEditorHandler
.
CellEditorListener
- Interface in
javax.swing.event
CellEditorListener defines the interface for an object that listens
 to changes in a CellEditor
cellHeight
- Variable in class javax.swing.plaf.basic.
BasicListUI
The height of cell.
cellHeights
- Variable in class javax.swing.plaf.basic.
BasicListUI
The array of cells' height
CELLPADDING
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "cellpadding"
cellRenderer
- Variable in class javax.swing.
JTree
The cell used to draw nodes.
cellRenderer
- Variable in class javax.swing.table.
TableColumn
The renderer used to draw the data cells of the column.
cellRendererChanged
- Static variable in class javax.swing.plaf.basic.
BasicListUI
The bit relates to cell renderer changed property.
CellRendererPane
- Class in
javax.swing
This class is inserted in between cell renderers and the components that
 use them.
CellRendererPane()
- Constructor for class javax.swing.
CellRendererPane
Construct a CellRendererPane object.
CellRendererPane.AccessibleCellRendererPane
- Class in
javax.swing
This class implements accessibility support for the
CellRendererPane
class.
cellSelectionEnabled
- Variable in class javax.swing.
JTable
Obsolete as of Java 2 platform v1.3.
CELLSPACING
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "cellspacing"
cellWidth
- Variable in class javax.swing.plaf.basic.
BasicListUI
The width of cell.
CENATT
- Static variable in class java.util.jar.
JarEntry
Central directory (CEN) header internal file attributes field offset.
CENATT
- Static variable in class java.util.jar.
JarFile
Central directory (CEN) header internal file attributes field offset.
CENATT
- Static variable in class java.util.jar.
JarInputStream
Central directory (CEN) header internal file attributes field offset.
CENATT
- Static variable in class java.util.jar.
JarOutputStream
Central directory (CEN) header internal file attributes field offset.
CENATT
- Static variable in class java.util.zip.
ZipEntry
Central directory (CEN) header internal file attributes field offset.
CENATT
- Static variable in class java.util.zip.
ZipFile
Central directory (CEN) header internal file attributes field offset.
CENATT
- Static variable in class java.util.zip.
ZipInputStream
Central directory (CEN) header internal file attributes field offset.
CENATT
- Static variable in class java.util.zip.
ZipOutputStream
Central directory (CEN) header internal file attributes field offset.
CENATX
- Static variable in class java.util.jar.
JarEntry
Central directory (CEN) header external file attributes field offset.
CENATX
- Static variable in class java.util.jar.
JarFile
Central directory (CEN) header external file attributes field offset.
CENATX
- Static variable in class java.util.jar.
JarInputStream
Central directory (CEN) header external file attributes field offset.
CENATX
- Static variable in class java.util.jar.
JarOutputStream
Central directory (CEN) header external file attributes field offset.
CENATX
- Static variable in class java.util.zip.
ZipEntry
Central directory (CEN) header external file attributes field offset.
CENATX
- Static variable in class java.util.zip.
ZipFile
Central directory (CEN) header external file attributes field offset.
CENATX
- Static variable in class java.util.zip.
ZipInputStream
Central directory (CEN) header external file attributes field offset.
CENATX
- Static variable in class java.util.zip.
ZipOutputStream
Central directory (CEN) header external file attributes field offset.
CENCOM
- Static variable in class java.util.jar.
JarEntry
Central directory (CEN) header comment length field offset.
CENCOM
- Static variable in class java.util.jar.
JarFile
Central directory (CEN) header comment length field offset.
CENCOM
- Static variable in class java.util.jar.
JarInputStream
Central directory (CEN) header comment length field offset.
CENCOM
- Static variable in class java.util.jar.
JarOutputStream
Central directory (CEN) header comment length field offset.
CENCOM
- Static variable in class java.util.zip.
ZipEntry
Central directory (CEN) header comment length field offset.
CENCOM
- Static variable in class java.util.zip.
ZipFile
Central directory (CEN) header comment length field offset.
CENCOM
- Static variable in class java.util.zip.
ZipInputStream
Central directory (CEN) header comment length field offset.
CENCOM
- Static variable in class java.util.zip.
ZipOutputStream
Central directory (CEN) header comment length field offset.
CENCRC
- Static variable in class java.util.jar.
JarEntry
Central directory (CEN) header uncompressed file crc-32 value field offset.
CENCRC
- Static variable in class java.util.jar.
JarFile
Central directory (CEN) header uncompressed file crc-32 value field offset.
CENCRC
- Static variable in class java.util.jar.
JarInputStream
Central directory (CEN) header uncompressed file crc-32 value field offset.
CENCRC
- Static variable in class java.util.jar.
JarOutputStream
Central directory (CEN) header uncompressed file crc-32 value field offset.
CENCRC
- Static variable in class java.util.zip.
ZipEntry
Central directory (CEN) header uncompressed file crc-32 value field offset.
CENCRC
- Static variable in class java.util.zip.
ZipFile
Central directory (CEN) header uncompressed file crc-32 value field offset.
CENCRC
- Static variable in class java.util.zip.
ZipInputStream
Central directory (CEN) header uncompressed file crc-32 value field offset.
CENCRC
- Static variable in class java.util.zip.
ZipOutputStream
Central directory (CEN) header uncompressed file crc-32 value field offset.
CENDSK
- Static variable in class java.util.jar.
JarEntry
Central directory (CEN) header disk number start field offset.
CENDSK
- Static variable in class java.util.jar.
JarFile
Central directory (CEN) header disk number start field offset.
CENDSK
- Static variable in class java.util.jar.
JarInputStream
Central directory (CEN) header disk number start field offset.
CENDSK
- Static variable in class java.util.jar.
JarOutputStream
Central directory (CEN) header disk number start field offset.
CENDSK
- Static variable in class java.util.zip.
ZipEntry
Central directory (CEN) header disk number start field offset.
CENDSK
- Static variable in class java.util.zip.
ZipFile
Central directory (CEN) header disk number start field offset.
CENDSK
- Static variable in class java.util.zip.
ZipInputStream
Central directory (CEN) header disk number start field offset.
CENDSK
- Static variable in class java.util.zip.
ZipOutputStream
Central directory (CEN) header disk number start field offset.
CENEXT
- Static variable in class java.util.jar.
JarEntry
Central directory (CEN) header extra field length field offset.
CENEXT
- Static variable in class java.util.jar.
JarFile
Central directory (CEN) header extra field length field offset.
CENEXT
- Static variable in class java.util.jar.
JarInputStream
Central directory (CEN) header extra field length field offset.
CENEXT
- Static variable in class java.util.jar.
JarOutputStream
Central directory (CEN) header extra field length field offset.
CENEXT
- Static variable in class java.util.zip.
ZipEntry
Central directory (CEN) header extra field length field offset.
CENEXT
- Static variable in class java.util.zip.
ZipFile
Central directory (CEN) header extra field length field offset.
CENEXT
- Static variable in class java.util.zip.
ZipInputStream
Central directory (CEN) header extra field length field offset.
CENEXT
- Static variable in class java.util.zip.
ZipOutputStream
Central directory (CEN) header extra field length field offset.
CENFLG
- Static variable in class java.util.jar.
JarEntry
Central directory (CEN) header encrypt, decrypt flags field offset.
CENFLG
- Static variable in class java.util.jar.
JarFile
Central directory (CEN) header encrypt, decrypt flags field offset.
CENFLG
- Static variable in class java.util.jar.
JarInputStream
Central directory (CEN) header encrypt, decrypt flags field offset.
CENFLG
- Static variable in class java.util.jar.
JarOutputStream
Central directory (CEN) header encrypt, decrypt flags field offset.
CENFLG
- Static variable in class java.util.zip.
ZipEntry
Central directory (CEN) header encrypt, decrypt flags field offset.
CENFLG
- Static variable in class java.util.zip.
ZipFile
Central directory (CEN) header encrypt, decrypt flags field offset.
CENFLG
- Static variable in class java.util.zip.
ZipInputStream
Central directory (CEN) header encrypt, decrypt flags field offset.
CENFLG
- Static variable in class java.util.zip.
ZipOutputStream
Central directory (CEN) header encrypt, decrypt flags field offset.
CENHDR
- Static variable in class java.util.jar.
JarEntry
Central directory (CEN) header size in bytes (including signature).
CENHDR
- Static variable in class java.util.jar.
JarFile
Central directory (CEN) header size in bytes (including signature).
CENHDR
- Static variable in class java.util.jar.
JarInputStream
Central directory (CEN) header size in bytes (including signature).
CENHDR
- Static variable in class java.util.jar.
JarOutputStream
Central directory (CEN) header size in bytes (including signature).
CENHDR
- Static variable in class java.util.zip.
ZipEntry
Central directory (CEN) header size in bytes (including signature).
CENHDR
- Static variable in class java.util.zip.
ZipFile
Central directory (CEN) header size in bytes (including signature).
CENHDR
- Static variable in class java.util.zip.
ZipInputStream
Central directory (CEN) header size in bytes (including signature).
CENHDR
- Static variable in class java.util.zip.
ZipOutputStream
Central directory (CEN) header size in bytes (including signature).
CENHOW
- Static variable in class java.util.jar.
JarEntry
Central directory (CEN) header compression method field offset.
CENHOW
- Static variable in class java.util.jar.
JarFile
Central directory (CEN) header compression method field offset.
CENHOW
- Static variable in class java.util.jar.
JarInputStream
Central directory (CEN) header compression method field offset.
CENHOW
- Static variable in class java.util.jar.
JarOutputStream
Central directory (CEN) header compression method field offset.
CENHOW
- Static variable in class java.util.zip.
ZipEntry
Central directory (CEN) header compression method field offset.
CENHOW
- Static variable in class java.util.zip.
ZipFile
Central directory (CEN) header compression method field offset.
CENHOW
- Static variable in class java.util.zip.
ZipInputStream
Central directory (CEN) header compression method field offset.
CENHOW
- Static variable in class java.util.zip.
ZipOutputStream
Central directory (CEN) header compression method field offset.
CENLEN
- Static variable in class java.util.jar.
JarEntry
Central directory (CEN) header uncompressed size field offset.
CENLEN
- Static variable in class java.util.jar.
JarFile
Central directory (CEN) header uncompressed size field offset.
CENLEN
- Static variable in class java.util.jar.
JarInputStream
Central directory (CEN) header uncompressed size field offset.
CENLEN
- Static variable in class java.util.jar.
JarOutputStream
Central directory (CEN) header uncompressed size field offset.
CENLEN
- Static variable in class java.util.zip.
ZipEntry
Central directory (CEN) header uncompressed size field offset.
CENLEN
- Static variable in class java.util.zip.
ZipFile
Central directory (CEN) header uncompressed size field offset.
CENLEN
- Static variable in class java.util.zip.
ZipInputStream
Central directory (CEN) header uncompressed size field offset.
CENLEN
- Static variable in class java.util.zip.
ZipOutputStream
Central directory (CEN) header uncompressed size field offset.
CENNAM
- Static variable in class java.util.jar.
JarEntry
Central directory (CEN) header filename length field offset.
CENNAM
- Static variable in class java.util.jar.
JarFile
Central directory (CEN) header filename length field offset.
CENNAM
- Static variable in class java.util.jar.
JarInputStream
Central directory (CEN) header filename length field offset.
CENNAM
- Static variable in class java.util.jar.
JarOutputStream
Central directory (CEN) header filename length field offset.
CENNAM
- Static variable in class java.util.zip.
ZipEntry
Central directory (CEN) header filename length field offset.
CENNAM
- Static variable in class java.util.zip.
ZipFile
Central directory (CEN) header filename length field offset.
CENNAM
- Static variable in class java.util.zip.
ZipInputStream
Central directory (CEN) header filename length field offset.
CENNAM
- Static variable in class java.util.zip.
ZipOutputStream
Central directory (CEN) header filename length field offset.
CENOFF
- Static variable in class java.util.jar.
JarEntry
Central directory (CEN) header LOC header offset field offset.
CENOFF
- Static variable in class java.util.jar.
JarFile
Central directory (CEN) header LOC header offset field offset.
CENOFF
- Static variable in class java.util.jar.
JarInputStream
Central directory (CEN) header LOC header offset field offset.
CENOFF
- Static variable in class java.util.jar.
JarOutputStream
Central directory (CEN) header LOC header offset field offset.
CENOFF
- Static variable in class java.util.zip.
ZipEntry
Central directory (CEN) header LOC header offset field offset.
CENOFF
- Static variable in class java.util.zip.
ZipFile
Central directory (CEN) header LOC header offset field offset.
CENOFF
- Static variable in class java.util.zip.
ZipInputStream
Central directory (CEN) header LOC header offset field offset.
CENOFF
- Static variable in class java.util.zip.
ZipOutputStream
Central directory (CEN) header LOC header offset field offset.
CENSIG
- Static variable in class java.util.jar.
JarEntry
Central directory (CEN) header signature.
CENSIG
- Static variable in class java.util.jar.
JarFile
Central directory (CEN) header signature.
CENSIG
- Static variable in class java.util.jar.
JarInputStream
Central directory (CEN) header signature.
CENSIG
- Static variable in class java.util.jar.
JarOutputStream
Central directory (CEN) header signature.
CENSIG
- Static variable in class java.util.zip.
ZipEntry
Central directory (CEN) header signature.
CENSIG
- Static variable in class java.util.zip.
ZipFile
Central directory (CEN) header signature.
CENSIG
- Static variable in class java.util.zip.
ZipInputStream
Central directory (CEN) header signature.
CENSIG
- Static variable in class java.util.zip.
ZipOutputStream
Central directory (CEN) header signature.
CENSIZ
- Static variable in class java.util.jar.
JarEntry
Central directory (CEN) header compressed size field offset.
CENSIZ
- Static variable in class java.util.jar.
JarFile
Central directory (CEN) header compressed size field offset.
CENSIZ
- Static variable in class java.util.jar.
JarInputStream
Central directory (CEN) header compressed size field offset.
CENSIZ
- Static variable in class java.util.jar.
JarOutputStream
Central directory (CEN) header compressed size field offset.
CENSIZ
- Static variable in class java.util.zip.
ZipEntry
Central directory (CEN) header compressed size field offset.
CENSIZ
- Static variable in class java.util.zip.
ZipFile
Central directory (CEN) header compressed size field offset.
CENSIZ
- Static variable in class java.util.zip.
ZipInputStream
Central directory (CEN) header compressed size field offset.
CENSIZ
- Static variable in class java.util.zip.
ZipOutputStream
Central directory (CEN) header compressed size field offset.
CENTER
- Enum constant in enum class javax.swing.
GroupLayout.Alignment
Indicates the elements should be centered in
 the region.
CENTER
- Static variable in class java.awt.
BorderLayout
The center layout constraint (middle of container).
CENTER
- Static variable in class java.awt.
FlowLayout
This value indicates that each row of components
 should be centered.
CENTER
- Static variable in class java.awt.
GridBagConstraints
Put the component in the center of its display area.
CENTER
- Static variable in class java.awt.
Label
Indicates that the label should be centered.
CENTER
- Static variable in class javax.swing.border.
TitledBorder
Position title text in the center of the border line.
CENTER
- Static variable in interface javax.swing.
SwingConstants
The central position in an area.
CENTER
- Static variable in class javax.swing.text.html.
HTML.Tag
Tag <center>
CENTER_ALIGNMENT
- Static variable in class java.awt.
Component
Ease-of-use constant for
getAlignmentY
and
getAlignmentX
.
CENTER_BASELINE
- Static variable in class java.awt.
Font
The baseline used in ideographic scripts like Chinese, Japanese,
 and Korean when laying out text.
CENTER_BASELINE
- Static variable in class java.awt.font.
GraphicAttribute
Aligns origin of graphic to center baseline of line.
CENTER_OFFSET
- Enum constant in enum class java.awt.
Component.BaselineResizeBehavior
Indicates the baseline remains a fixed distance from
 the center of the component.
centersChildren
- Variable in class javax.swing.plaf.basic.
BasicOptionPaneUI.ButtonAreaLayout
If true, children are lumped together in parent.
CENTIM
- Static variable in class java.util.jar.
JarEntry
Central directory (CEN) header modification time field offset.
CENTIM
- Static variable in class java.util.jar.
JarFile
Central directory (CEN) header modification time field offset.
CENTIM
- Static variable in class java.util.jar.
JarInputStream
Central directory (CEN) header modification time field offset.
CENTIM
- Static variable in class java.util.jar.
JarOutputStream
Central directory (CEN) header modification time field offset.
CENTIM
- Static variable in class java.util.zip.
ZipEntry
Central directory (CEN) header modification time field offset.
CENTIM
- Static variable in class java.util.zip.
ZipFile
Central directory (CEN) header modification time field offset.
CENTIM
- Static variable in class java.util.zip.
ZipInputStream
Central directory (CEN) header modification time field offset.
CENTIM
- Static variable in class java.util.zip.
ZipOutputStream
Central directory (CEN) header modification time field offset.
CENTURIES
- Enum constant in enum class java.time.temporal.
ChronoUnit
Unit that represents the concept of a century.
CENVEM
- Static variable in class java.util.jar.
JarEntry
Central directory (CEN) header version made by field offset.
CENVEM
- Static variable in class java.util.jar.
JarFile
Central directory (CEN) header version made by field offset.
CENVEM
- Static variable in class java.util.jar.
JarInputStream
Central directory (CEN) header version made by field offset.
CENVEM
- Static variable in class java.util.jar.
JarOutputStream
Central directory (CEN) header version made by field offset.
CENVEM
- Static variable in class java.util.zip.
ZipEntry
Central directory (CEN) header version made by field offset.
CENVEM
- Static variable in class java.util.zip.
ZipFile
Central directory (CEN) header version made by field offset.
CENVEM
- Static variable in class java.util.zip.
ZipInputStream
Central directory (CEN) header version made by field offset.
CENVEM
- Static variable in class java.util.zip.
ZipOutputStream
Central directory (CEN) header version made by field offset.
CENVER
- Static variable in class java.util.jar.
JarEntry
Central directory (CEN) header version needed to extract field offset.
CENVER
- Static variable in class java.util.jar.
JarFile
Central directory (CEN) header version needed to extract field offset.
CENVER
- Static variable in class java.util.jar.
JarInputStream
Central directory (CEN) header version needed to extract field offset.
CENVER
- Static variable in class java.util.jar.
JarOutputStream
Central directory (CEN) header version needed to extract field offset.
CENVER
- Static variable in class java.util.zip.
ZipEntry
Central directory (CEN) header version needed to extract field offset.
CENVER
- Static variable in class java.util.zip.
ZipFile
Central directory (CEN) header version needed to extract field offset.
CENVER
- Static variable in class java.util.zip.
ZipInputStream
Central directory (CEN) header version needed to extract field offset.
CENVER
- Static variable in class java.util.zip.
ZipOutputStream
Central directory (CEN) header version needed to extract field offset.
Certificate
- Class in
java.security.cert
Abstract class for managing a variety of identity certificates.
Certificate
- Class in
javax.security.cert
Deprecated, for removal: This API element is subject to removal in a future version.
Use the classes in
java.security.cert
instead.
Certificate
- Interface in
java.security
Deprecated, for removal: This API element is subject to removal in a future version.
This class is deprecated and subject to removal in a future
     version of Java SE. It has been replaced by
java.security.cert.Certificate
and related classes.
Certificate()
- Constructor for class javax.security.cert.
Certificate
Deprecated.
Constructor for subclasses to call.
Certificate(String)
- Constructor for class java.security.cert.
Certificate
Creates a certificate of the specified type.
CERTIFICATE_HOLD
- Enum constant in enum class java.security.cert.
CRLReason
This reason indicates that the certificate has been put on hold.
Certificate.CertificateRep
- Class in
java.security.cert
Alternate
Certificate
class for serialization.
CertificateEncodingException
- Exception Class in
java.security.cert
Certificate Encoding Exception.
CertificateEncodingException
- Exception Class in
javax.security.cert
Deprecated, for removal: This API element is subject to removal in a future version.
Use the classes in
java.security.cert
instead.
CertificateEncodingException()
- Constructor for exception class java.security.cert.
CertificateEncodingException
Constructs a CertificateEncodingException with no detail message.
CertificateEncodingException()
- Constructor for exception class javax.security.cert.
CertificateEncodingException
Deprecated.
Constructs a CertificateEncodingException with no detail message.
CertificateEncodingException(String)
- Constructor for exception class java.security.cert.
CertificateEncodingException
Constructs a CertificateEncodingException with the specified detail
 message.
CertificateEncodingException(String)
- Constructor for exception class javax.security.cert.
CertificateEncodingException
Deprecated.
Constructs a CertificateEncodingException with the specified detail
 message.
CertificateEncodingException(String, Throwable)
- Constructor for exception class java.security.cert.
CertificateEncodingException
Creates a
CertificateEncodingException
with the specified
 detail message and cause.
CertificateEncodingException(Throwable)
- Constructor for exception class java.security.cert.
CertificateEncodingException
Creates a
CertificateEncodingException
with the specified cause and a detail message of
(cause==null ? null : cause.toString())
(which typically contains the class and detail message of
cause
).
CertificateException
- Exception Class in
java.security.cert
This exception indicates one of a variety of certificate problems.
CertificateException
- Exception Class in
javax.security.cert
Deprecated, for removal: This API element is subject to removal in a future version.
Use the classes in
java.security.cert
instead.
CertificateException()
- Constructor for exception class java.security.cert.
CertificateException
Constructs a certificate exception with no detail message.
CertificateException()
- Constructor for exception class javax.security.cert.
CertificateException
Deprecated.
Constructs a certificate exception with no detail message.
CertificateException(String)
- Constructor for exception class java.security.cert.
CertificateException
Constructs a certificate exception with the given detail
 message.
CertificateException(String)
- Constructor for exception class javax.security.cert.
CertificateException
Deprecated.
Constructs a certificate exception with the given detail
 message.
CertificateException(String, Throwable)
- Constructor for exception class java.security.cert.
CertificateException
Creates a
CertificateException
with the specified
 detail message and cause.
CertificateException(Throwable)
- Constructor for exception class java.security.cert.
CertificateException
Creates a
CertificateException
with the specified cause
 and a detail message of
(cause==null ? null : cause.toString())
(which typically contains the class and detail message of
cause
).
CertificateExpiredException
- Exception Class in
java.security.cert
Certificate Expired Exception.
CertificateExpiredException
- Exception Class in
javax.security.cert
Deprecated, for removal: This API element is subject to removal in a future version.
Use the classes in
java.security.cert
instead.
CertificateExpiredException()
- Constructor for exception class java.security.cert.
CertificateExpiredException
Constructs a CertificateExpiredException with no detail message.
CertificateExpiredException()
- Constructor for exception class javax.security.cert.
CertificateExpiredException
Deprecated.
Constructs a CertificateExpiredException with no detail message.
CertificateExpiredException(String)
- Constructor for exception class java.security.cert.
CertificateExpiredException
Constructs a CertificateExpiredException with the specified detail
 message.
CertificateExpiredException(String)
- Constructor for exception class javax.security.cert.
CertificateExpiredException
Deprecated.
Constructs a CertificateExpiredException with the specified detail
 message.
CertificateFactory
- Class in
java.security.cert
This class defines the functionality of a certificate factory, which is
 used to generate certificate, certification path (
CertPath
)
 and certificate revocation list (CRL) objects from their encodings.
CertificateFactory(CertificateFactorySpi, Provider, String)
- Constructor for class java.security.cert.
CertificateFactory
Creates a CertificateFactory object of the given type, and encapsulates
 the given provider implementation (SPI object) in it.
CertificateFactorySpi
- Class in
java.security.cert
This class defines the
Service Provider Interface
(
SPI
)
 for the
CertificateFactory
class.
CertificateFactorySpi()
- Constructor for class java.security.cert.
CertificateFactorySpi
Constructor for subclasses to call.
CertificateNotYetValidException
- Exception Class in
java.security.cert
Certificate is not yet valid exception.
CertificateNotYetValidException
- Exception Class in
javax.security.cert
Deprecated, for removal: This API element is subject to removal in a future version.
Use the classes in
java.security.cert
instead.
CertificateNotYetValidException()
- Constructor for exception class java.security.cert.
CertificateNotYetValidException
Constructs a CertificateNotYetValidException with no detail message.
CertificateNotYetValidException()
- Constructor for exception class javax.security.cert.
CertificateNotYetValidException
Deprecated.
Constructs a CertificateNotYetValidException with no detail message.
CertificateNotYetValidException(String)
- Constructor for exception class java.security.cert.
CertificateNotYetValidException
Constructs a CertificateNotYetValidException with the specified detail
 message.
CertificateNotYetValidException(String)
- Constructor for exception class javax.security.cert.
CertificateNotYetValidException
Deprecated.
Constructs a CertificateNotYetValidException with the specified detail
 message.
CertificateParsingException
- Exception Class in
java.security.cert
Certificate Parsing Exception.
CertificateParsingException
- Exception Class in
javax.security.cert
Deprecated, for removal: This API element is subject to removal in a future version.
Use the classes in
java.security.cert
instead.
CertificateParsingException()
- Constructor for exception class java.security.cert.
CertificateParsingException
Constructs a CertificateParsingException with no detail message.
CertificateParsingException()
- Constructor for exception class javax.security.cert.
CertificateParsingException
Deprecated.
Constructs a CertificateParsingException with no detail message.
CertificateParsingException(String)
- Constructor for exception class java.security.cert.
CertificateParsingException
Constructs a CertificateParsingException with the specified detail
 message.
CertificateParsingException(String)
- Constructor for exception class javax.security.cert.
CertificateParsingException
Deprecated.
Constructs a CertificateParsingException with the specified detail
 message.
CertificateParsingException(String, Throwable)
- Constructor for exception class java.security.cert.
CertificateParsingException
Creates a
CertificateParsingException
with the specified
 detail message and cause.
CertificateParsingException(Throwable)
- Constructor for exception class java.security.cert.
CertificateParsingException
Creates a
CertificateParsingException
with the
 specified cause and a detail message of
(cause==null ? null : cause.toString())
(which typically contains the class and detail message of
cause
).
CertificateRep(String, byte[])
- Constructor for class java.security.cert.
Certificate.CertificateRep
Construct the alternate
Certificate
class with the
Certificate
type and
Certificate
encoding bytes.
CertificateRevokedException
- Exception Class in
java.security.cert
An exception that indicates an X.509 certificate is revoked.
CertificateRevokedException(Date, CRLReason, X500Principal, Map<String, Extension>)
- Constructor for exception class java.security.cert.
CertificateRevokedException
Constructs a
CertificateRevokedException
with
 the specified revocation date, reason code, authority name, and map
 of extensions.
certificates()
- Method in class java.security.
Identity
Deprecated.
Returns a copy of all the certificates for this
Identity
.
CertPath
- Class in
java.security.cert
An immutable sequence of certificates (a certification path).
CertPath(String)
- Constructor for class java.security.cert.
CertPath
Creates a
CertPath
of the specified type.
CertPath.CertPathRep
- Class in
java.security.cert
Alternate
CertPath
class for serialization.
CertPathBuilder
- Class in
java.security.cert
A class for building certification paths (also known as certificate chains).
CertPathBuilder(CertPathBuilderSpi, Provider, String)
- Constructor for class java.security.cert.
CertPathBuilder
Creates a
CertPathBuilder
object of the given algorithm,
 and encapsulates the given provider implementation (SPI object) in it.
CertPathBuilderException
- Exception Class in
java.security.cert
An exception indicating one of a variety of problems encountered when
 building a certification path with a
CertPathBuilder
.
CertPathBuilderException()
- Constructor for exception class java.security.cert.
CertPathBuilderException
Creates a
CertPathBuilderException
with
null
as its detail message.
CertPathBuilderException(String)
- Constructor for exception class java.security.cert.
CertPathBuilderException
Creates a
CertPathBuilderException
with the given
 detail message.
CertPathBuilderException(String, Throwable)
- Constructor for exception class java.security.cert.
CertPathBuilderException
Creates a
CertPathBuilderException
with the specified
 detail message and cause.
CertPathBuilderException(Throwable)
- Constructor for exception class java.security.cert.
CertPathBuilderException
Creates a
CertPathBuilderException
that wraps the specified
 throwable.
CertPathBuilderResult
- Interface in
java.security.cert
A specification of the result of a certification path builder algorithm.
CertPathBuilderSpi
- Class in
java.security.cert
The
Service Provider Interface
(
SPI
)
 for the
CertPathBuilder
class.
CertPathBuilderSpi()
- Constructor for class java.security.cert.
CertPathBuilderSpi
The default constructor.
CertPathChecker
- Interface in
java.security.cert
Performs one or more checks on each
Certificate
of a
CertPath
.
CertPathParameters
- Interface in
java.security.cert
A specification of certification path algorithm parameters.
CertPathRep(String, byte[])
- Constructor for class java.security.cert.
CertPath.CertPathRep
Creates a
CertPathRep
with the specified
 type and encoded form of a certification path.
CertPathTrustManagerParameters
- Class in
javax.net.ssl
A wrapper for CertPathParameters.
CertPathTrustManagerParameters(CertPathParameters)
- Constructor for class javax.net.ssl.
CertPathTrustManagerParameters
Construct new CertPathTrustManagerParameters from the specified
 parameters.
CertPathValidator
- Class in
java.security.cert
A class for validating certification paths (also known as certificate
 chains).
CertPathValidator(CertPathValidatorSpi, Provider, String)
- Constructor for class java.security.cert.
CertPathValidator
Creates a
CertPathValidator
object of the given algorithm,
 and encapsulates the given provider implementation (SPI object) in it.
CertPathValidatorException
- Exception Class in
java.security.cert
An exception indicating one of a variety of problems encountered when
 validating a certification path.
CertPathValidatorException()
- Constructor for exception class java.security.cert.
CertPathValidatorException
Creates a
CertPathValidatorException
with
 no detail message.
CertPathValidatorException(String)
- Constructor for exception class java.security.cert.
CertPathValidatorException
Creates a
CertPathValidatorException
with the given
 detail message.
CertPathValidatorException(String, Throwable)
- Constructor for exception class java.security.cert.
CertPathValidatorException
Creates a
CertPathValidatorException
with the specified
 detail message and cause.
CertPathValidatorException(String, Throwable, CertPath, int)
- Constructor for exception class java.security.cert.
CertPathValidatorException
Creates a
CertPathValidatorException
with the specified
 detail message, cause, certification path, and index.
CertPathValidatorException(String, Throwable, CertPath, int, CertPathValidatorException.Reason)
- Constructor for exception class java.security.cert.
CertPathValidatorException
Creates a
CertPathValidatorException
with the specified
 detail message, cause, certification path, index, and reason.
CertPathValidatorException(Throwable)
- Constructor for exception class java.security.cert.
CertPathValidatorException
Creates a
CertPathValidatorException
that wraps the
 specified throwable.
CertPathValidatorException.BasicReason
- Enum Class in
java.security.cert
The BasicReason enumerates the potential reasons that a certification
 path of any type may be invalid.
CertPathValidatorException.Reason
- Interface in
java.security.cert
The reason the validation algorithm failed.
CertPathValidatorResult
- Interface in
java.security.cert
A specification of the result of a certification path validator algorithm.
CertPathValidatorSpi
- Class in
java.security.cert
The
Service Provider Interface
(
SPI
)
 for the
CertPathValidator
class.
CertPathValidatorSpi()
- Constructor for class java.security.cert.
CertPathValidatorSpi
The default constructor.
CertSelector
- Interface in
java.security.cert
A selector that defines a set of criteria for selecting
Certificate
s.
CertStore
- Class in
java.security.cert
A class for retrieving
Certificate
s and
CRL
s
 from a repository.
CertStore(CertStoreSpi, Provider, String, CertStoreParameters)
- Constructor for class java.security.cert.
CertStore
Creates a
CertStore
object of the given type, and
 encapsulates the given provider implementation (SPI object) in it.
CertStoreException
- Exception Class in
java.security.cert
An exception indicating one of a variety of problems retrieving
 certificates and CRLs from a
CertStore
.
CertStoreException()
- Constructor for exception class java.security.cert.
CertStoreException
Creates a
CertStoreException
with
null
as
 its detail message.
CertStoreException(String)
- Constructor for exception class java.security.cert.
CertStoreException
Creates a
CertStoreException
with the given detail
 message.
CertStoreException(String, Throwable)
- Constructor for exception class java.security.cert.
CertStoreException
Creates a
CertStoreException
with the specified detail
 message and cause.
CertStoreException(Throwable)
- Constructor for exception class java.security.cert.
CertStoreException
Creates a
CertStoreException
that wraps the specified
 throwable.
CertStoreParameters
- Interface in
java.security.cert
A specification of
CertStore
parameters.
CertStoreSpi
- Class in
java.security.cert
The
Service Provider Interface
(
SPI
)
 for the
CertStore
class.
CertStoreSpi(CertStoreParameters)
- Constructor for class java.security.cert.
CertStoreSpi
The sole constructor.
CESSATION_OF_OPERATION
- Enum constant in enum class java.security.cert.
CRLReason
This reason indicates that the certificate is no longer needed.
ChaCha20ParameterSpec
- Class in
javax.crypto.spec
This class specifies the parameters used with the
ChaCha20
algorithm.
ChaCha20ParameterSpec(byte[], int)
- Constructor for class javax.crypto.spec.
ChaCha20ParameterSpec
Constructs a parameter set for ChaCha20 from the given nonce
 and counter.
Chain(List<Filter>, HttpHandler)
- Constructor for class com.sun.net.httpserver.
Filter.Chain
Creates a
Chain
instance with given filters and handler.
ChainedCallSite
- Class in
jdk.dynalink.support
A relinkable call site that implements a polymorphic inline caching strategy.
ChainedCallSite(CallSiteDescriptor)
- Constructor for class jdk.dynalink.support.
ChainedCallSite
Creates a new chained call site.
CHAKMA
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Chakma".
CHAKMA
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Chakma" Unicode character block.
CHAM
- Enum constant in enum class java.awt.font.
NumericShaper.Range
The Cham range with the Cham digits.
CHAM
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Cham".
CHAM
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Cham" Unicode character block.
change(int, int, AbstractDocument.DefaultDocumentEvent)
- Method in class javax.swing.text.
DefaultStyledDocument.ElementBuffer
Changes content.
CHANGE
- Static variable in class com.sun.java.accessibility.util.
EventID
Maps to Swing Change support (i.e., ChangeListener and
 ChangeEvent)
CHANGE
- Static variable in class javax.swing.event.
DocumentEvent.EventType
Change type.
CHANGED
- Static variable in class java.awt.dnd.
DragSourceContext
An
int
used by updateCurrentCursor()
 indicating that the user operation has changed.
ChangedCharSetException
- Exception Class in
javax.swing.text
ChangedCharSetException as the name indicates is an exception
 thrown when the charset is changed.
ChangedCharSetException(String, boolean)
- Constructor for exception class javax.swing.text.
ChangedCharSetException
Constructs a
ChangedCharSetException
.
changedUpdate(DocumentEvent)
- Method in interface javax.swing.event.
DocumentListener
Gives notification that an attribute or set of attributes changed.
changedUpdate(DocumentEvent)
- Method in class javax.swing.text.
JTextComponent.AccessibleJTextComponent
Handles document remove (fire appropriate property change event,
 which is AccessibleContext.ACCESSIBLE_TEXT_PROPERTY).
changedUpdate(DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.
FlowView
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.
changedUpdate(DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.
GlyphView
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.
changedUpdate(DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.html.
ImageView
Invoked when the Elements attributes have changed.
changedUpdate(DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.html.
InlineView
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.
changedUpdate(DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.
LabelView
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.
changedUpdate(DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.
ParagraphView
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.
changedUpdate(DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.
PlainView
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.
changedUpdate(DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.
View
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.
changedUpdate(DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.
WrappedPlainView
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.
changedUpdate(FlowView, DocumentEvent, Rectangle)
- Method in class javax.swing.text.
FlowView.FlowStrategy
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.
changeEvent
- Variable in class javax.swing.
AbstractButton
Only one
ChangeEvent
is needed per button
 instance since the
 event's only state is the source property.
changeEvent
- Variable in class javax.swing.
AbstractCellEditor
The change event.
changeEvent
- Variable in class javax.swing.colorchooser.
DefaultColorSelectionModel
Only one
ChangeEvent
is needed per model instance
 since the event's only (read-only) state is the source property.
changeEvent
- Variable in class javax.swing.
DefaultBoundedRangeModel
Only one
ChangeEvent
is needed per model instance since the
 event's only (read-only) state is the source property.
changeEvent
- Variable in class javax.swing.
DefaultButtonModel
Only one
ChangeEvent
is needed per button model
 instance since the event's only state is the source property.
changeEvent
- Variable in class javax.swing.
DefaultSingleSelectionModel
Only one ModelChangeEvent is needed per model instance since the
 event's only (read-only) state is the source property.
changeEvent
- Variable in class javax.swing.
JProgressBar
Only one
ChangeEvent
is needed per instance since the
 event's only interesting property is the immutable source, which
 is the progress bar.
changeEvent
- Variable in class javax.swing.
JSlider
Only one
ChangeEvent
is needed per slider instance since the
 event's only (read-only) state is the source property.
changeEvent
- Variable in class javax.swing.
JTabbedPane
Only one
ChangeEvent
is needed per
TabPane
instance since the
 event's only (read-only) state is the source property.
changeEvent
- Variable in class javax.swing.
MenuSelectionManager
Only one ChangeEvent is needed per button model instance since the
 event's only state is the source property.
changeEvent
- Variable in class javax.swing.table.
DefaultTableColumnModel
Change event (only one needed)
changeEvent
- Variable in class javax.swing.text.
DefaultCaret
The change event for the model.
changeEvent
- Variable in class javax.swing.text.
StyleContext.NamedStyle
Only one ChangeEvent is needed per model instance since the
 event's only (read-only) state is the source property.
ChangeEvent
- Class in
javax.swing.event
ChangeEvent is used to notify interested parties that
 state has changed in the event source.
ChangeEvent(Object)
- Constructor for class javax.swing.event.
ChangeEvent
Constructs a ChangeEvent object.
ChangeHandler()
- Constructor for class javax.swing.plaf.basic.
BasicProgressBarUI.ChangeHandler
Constructs a
ChangeHandler
.
ChangeHandler()
- Constructor for class javax.swing.plaf.basic.
BasicSliderUI.ChangeHandler
Constructs a
ChangeHandler
.
ChangeHandler(JMenu, BasicMenuUI)
- Constructor for class javax.swing.plaf.basic.
BasicMenuUI.ChangeHandler
Constructs a new instance of
ChangeHandler
.
changeHighlight(Object, int, int)
- Method in class javax.swing.text.
DefaultHighlighter
Changes a highlight.
changeHighlight(Object, int, int)
- Method in interface javax.swing.text.
Highlighter
Changes the given highlight to span a different portion of
 the document.
changeInfo
- Variable in class javax.naming.event.
NamingEvent
Contains information about the change that generated this event.
changeListener
- Variable in class javax.swing.
AbstractButton
The button model's
changeListener
.
changeListener
- Variable in class javax.swing.
JProgressBar
Listens for change events sent by the progress bar's model,
 redispatching them
 to change-event listeners registered upon
 this progress bar.
changeListener
- Variable in class javax.swing.
JSlider
The changeListener (no suffix) is the listener we add to the
 slider's model.
changeListener
- Variable in class javax.swing.
JTabbedPane
The
changeListener
is the listener we add to the
 model.
changeListener
- Variable in class javax.swing.plaf.basic.
BasicMenuBarUI
The instance of
ChangeListener
.
changeListener
- Variable in class javax.swing.plaf.basic.
BasicMenuUI
The instance of
ChangeListener
.
changeListener
- Variable in class javax.swing.plaf.basic.
BasicProgressBarUI
The instance of
ChangeListener
.
changeListener
- Variable in class javax.swing.plaf.basic.
BasicSliderUI
Change listener
ChangeListener
- Interface in
javax.swing.event
Defines an object which listens for ChangeEvents.
changeMethodType(MethodType)
- Method in class jdk.dynalink.
CallSiteDescriptor
Finds or creates a call site descriptor that only differs in its
 method type from this descriptor.
changeMethodTypeInternal(MethodType)
- Method in class jdk.dynalink.
CallSiteDescriptor
Finds or creates a call site descriptor that only differs in its
 method type from this descriptor.
changeName(String)
- Method in class jdk.dynalink.
NamedOperation
Finds or creates a named operation that differs from this one only in the name.
changeOperation(Operation)
- Method in class jdk.dynalink.
CallSiteDescriptor
Finds or creates a call site descriptor that only differs in its
 operation from this descriptor.
changeOperationInternal(Operation)
- Method in class jdk.dynalink.
CallSiteDescriptor
Finds or creates a call site descriptor that only differs in its
 operation from this descriptor.
changeParameterType(int, F)
- Method in interface java.lang.invoke.
TypeDescriptor.OfMethod
Return a method descriptor that is identical to this one,
 except that a single parameter type has been changed to the specified type.
changeParameterType(int, Class<?>)
- Method in class java.lang.invoke.
MethodType
Finds or creates a method type with a single different parameter type.
changeParameterType(int, ClassDesc)
- Method in interface java.lang.constant.
MethodTypeDesc
Returns a
MethodTypeDesc
that is identical to this one,
 except that a single parameter type has been changed to the specified type.
changeReturnLayout(MemoryLayout)
- Method in interface java.lang.foreign.
FunctionDescriptor
PREVIEW
Returns a function descriptor with the provided return layout.
changeReturnType(F)
- Method in interface java.lang.invoke.
TypeDescriptor.OfMethod
Return a method descriptor that is identical to this one, except that the return
 type has been changed to the specified type
changeReturnType(Class<?>)
- Method in class java.lang.invoke.
MethodType
Finds or creates a method type with a different return type.
changeReturnType(ClassDesc)
- Method in interface java.lang.constant.
MethodTypeDesc
Returns a
MethodTypeDesc
that is identical to
 this one, except with the specified return type.
changeSelection(int, int, boolean, boolean)
- Method in class javax.swing.
JTable
Updates the selection models of the table, depending on the state of the
 two flags:
toggle
and
extend
.
changeShape(Dimension, Dimension, Dimension)
- Method in class javax.swing.
Box.Filler
Change the size requests for this shape.
changeSupport
- Variable in class javax.swing.
AbstractAction
If any
PropertyChangeListeners
have been registered, the
changeSupport
field describes them.
changeSupport
- Variable in class javax.swing.tree.
DefaultTreeSelectionModel
Used to messaged registered listeners.
changeToParentDirectory()
- Method in class javax.swing.
JFileChooser
Changes the directory to be set to the parent of the
 current directory.
ChangeToParentDirectoryAction()
- Constructor for class javax.swing.plaf.basic.
BasicFileChooserUI.ChangeToParentDirectoryAction
Constructs a
ChangeToParentDirectoryAction
.
changeUpdate()
- Method in class javax.swing.text.
DefaultStyledDocument.ElementBuffer
Updates the element structure in response to a change in the
 document.
channel
- Variable in class javax.sound.midi.
VoiceStatus
The MIDI channel on which this voice is playing.
channel()
- Method in class java.nio.channels.
FileLock
Returns the file channel upon whose file this lock was acquired.
channel()
- Method in class java.nio.channels.
MembershipKey
Returns the channel for which this membership key was created.
channel()
- Method in class java.nio.channels.
SelectionKey
Returns the channel for which this key was created.
Channel
- Interface in
java.nio.channels
A nexus for I/O operations.
CHANNEL_PRESSURE
- Static variable in class javax.sound.midi.
ShortMessage
Command value for Channel Pressure (Aftertouch) message (0xD0, or 208).
ChannelBinding
- Class in
org.ietf.jgss
This class encapsulates the concept of caller-provided channel
 binding information.
ChannelBinding(byte[])
- Constructor for class org.ietf.jgss.
ChannelBinding
Creates a ChannelBinding object without any addressing information.
ChannelBinding(InetAddress, InetAddress, byte[])
- Constructor for class org.ietf.jgss.
ChannelBinding
Create a ChannelBinding object with user supplied address information
 and data.
channels
- Variable in class javax.sound.sampled.
AudioFormat
The number of audio channels in this format (1 for mono, 2 for stereo).
Channels
- Class in
java.nio.channels
Utility methods for channels and streams.
Channels
- Class in
jdk.nio
Defines static methods to create
channels
.
Channels.SelectableChannelCloser
- Interface in
jdk.nio
An object used to coordinate the closing of a selectable channel created
 by
readWriteSelectableChannel
.
CHAR
- Enum constant in enum class java.sql.
JDBCType
Identifies the generic SQL type
CHAR
.
CHAR
- Enum constant in enum class javax.lang.model.type.
TypeKind
The primitive type
char
.
CHAR
- Static variable in class java.sql.
Types
The constant in the Java programming language, sometimes referred
 to as a type code, that identifies the generic SQL type
CHAR
.
CHAR_ARRAY(String)
- Constructor for class javax.print.
DocFlavor.CHAR_ARRAY
Constructs a new doc flavor with the given MIME type and a print data
 representation class name of
"[C"
(character array).
CHAR_LITERAL
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
LiteralTree
representing
 a character literal expression of type
char
.
CHAR_REPLACEMENT
- Static variable in class java.awt.font.
TextAttribute
Attribute key for a user-defined glyph to display in lieu
 of the font's standard glyph for a character.
CHAR_UNDEFINED
- Static variable in class java.awt.event.
KeyEvent
KEY_PRESSED and KEY_RELEASED events which do not map to a
 valid Unicode character use this for the keyChar value.
Character
- Search tag in class java.util.Formatter
Section
Character
- Class in
java.lang
The
Character
class wraps a value of the primitive
 type
char
in an object.
Character(char)
- Constructor for class java.lang.
Character
Deprecated, for removal: This API element is subject to removal in a future version.
It is rarely appropriate to use this constructor. The static factory
Character.valueOf(char)
is generally a better choice, as it is
 likely to yield significantly better space and time performance.
CHARACTER
- Static variable in interface javax.accessibility.
AccessibleText
Constant used to indicate that the part of the text that should be
 retrieved is a character.
CHARACTER
- Static variable in class javax.management.openmbean.
SimpleType
The
SimpleType
instance describing values whose
 Java class name is
java.lang.Character
.
Character.Subset
- Class in
java.lang
Instances of this class represent particular subsets of the Unicode
 character set.
Character.UnicodeBlock
- Class in
java.lang
A family of character subsets representing the character blocks in the
 Unicode specification.
Character.UnicodeScript
- Enum Class in
java.lang
A family of character subsets representing the character scripts
 defined in the
Unicode Standard Annex #24: Script Names
.
CharacterAction()
- Constructor for class javax.swing.text.html.
HTMLDocument.HTMLReader.CharacterAction
Constructs a
CharacterAction
.
Character categories
- Search tag in class java.net.URI
Section
Character Classes
- Search tag in class java.util.regex.Pattern
Section
CharacterCodingException
- Exception Class in
java.nio.charset
Checked exception thrown when a character encoding
 or decoding error occurs.
CharacterCodingException()
- Constructor for exception class java.nio.charset.
CharacterCodingException
Constructs an instance of this class.
CharacterData
- Interface in
org.w3c.dom
The
CharacterData
interface extends Node with a set of
 attributes and methods for accessing character data in the DOM.
Character Encodings
- Search tag in package java.lang
Section
characteristics()
- Method in class java.net.spi.
InetAddressResolver.LookupPolicy
Returns the set of characteristics of this lookup policy.
characteristics()
- Method in interface java.util.
Spliterator
Returns a set of characteristics of this Spliterator and its
 elements.
characteristics()
- Method in class java.util.
Spliterators.AbstractDoubleSpliterator
Returns a set of characteristics of this Spliterator and its
 elements.
characteristics()
- Method in class java.util.
Spliterators.AbstractIntSpliterator
Returns a set of characteristics of this Spliterator and its
 elements.
characteristics()
- Method in class java.util.
Spliterators.AbstractLongSpliterator
Returns a set of characteristics of this Spliterator and its
 elements.
characteristics()
- Method in class java.util.
Spliterators.AbstractSpliterator
Returns a set of characteristics of this Spliterator and its
 elements.
characteristics()
- Method in interface java.util.stream.
Collector
Returns a
Set
of
Collector.Characteristics
indicating
 the characteristics of this Collector.
Characteristics of memory layouts
- Search tag in interface java.lang.foreign.MemoryLayout
Section
Characteristics of memory segments
- Search tag in interface java.lang.foreign.MemorySegment
Section
CharacterIterator
- Interface in
java.text
This interface defines a protocol for bidirectional iteration over text.
characters(char[], int, int)
- Method in interface org.xml.sax.
ContentHandler
Receive notification of character data.
characters(char[], int, int)
- Method in interface org.xml.sax.
DocumentHandler
Deprecated.
Receive notification of character data.
characters(char[], int, int)
- Method in class org.xml.sax.
HandlerBase
Deprecated.
Receive notification of character data inside an element.
characters(char[], int, int)
- Method in class org.xml.sax.helpers.
DefaultHandler
Receive notification of character data inside an element.
characters(char[], int, int)
- Method in class org.xml.sax.helpers.
ParserAdapter
Adapter implementation method; do not call.
characters(char[], int, int)
- Method in class org.xml.sax.helpers.
XMLFilterImpl
Filter a character data event.
characters(char[], int, int)
- Method in class org.xml.sax.helpers.
XMLReaderAdapter
Adapt a SAX2 characters event.
Characters
- Interface in
javax.xml.stream.events
This describes the interface to Characters events.
CHARACTERS
- Static variable in interface javax.xml.stream.
XMLStreamConstants
Indicates an event is characters
Characters and Glyphs
- Search tag in class java.awt.Font
Section
Character Sets
- Search tag in class java.nio.charset.Charset
External Specification
Character Sets
- Search tag in java.nio.charset.Charset.isRegistered()
External Specification
CharArrayReader
- Class in
java.io
This class implements a character buffer that can be used as a
 character-input stream.
CharArrayReader(char[])
- Constructor for class java.io.
CharArrayReader
Creates a CharArrayReader from the specified array of chars.
CharArrayReader(char[], int, int)
- Constructor for class java.io.
CharArrayReader
Creates a CharArrayReader from the specified array of chars.
CharArrayWriter
- Class in
java.io
This class implements a character buffer that can be used as a Writer.
CharArrayWriter()
- Constructor for class java.io.
CharArrayWriter
Creates a new CharArrayWriter.
CharArrayWriter(int)
- Constructor for class java.io.
CharArrayWriter
Creates a new CharArrayWriter with the specified initial size.
charAt(int)
- Method in class java.lang.
StringBuilder
Returns the
char
value in this sequence at the specified index.
charAt(int)
- Method in interface java.lang.
CharSequence
Returns the
char
value at the specified index.
charAt(int)
- Method in class java.lang.
String
Returns the
char
value at the
 specified index.
charAt(int)
- Method in class java.lang.
StringBuffer
charAt(int)
- Method in class java.nio.
CharBuffer
Reads the character at the given index relative to the current
 position.
charAt(int)
- Method in class javax.swing.text.
Segment
Returns the
char
value at the specified index.
charAttr
- Variable in class javax.swing.text.html.
HTMLDocument.HTMLReader
Current character attribute set.
CharBuffer
- Class in
java.nio
A char buffer.
CharConversionException
- Exception Class in
java.io
Base class for character conversion exceptions.
CharConversionException()
- Constructor for exception class java.io.
CharConversionException
This provides no detailed message.
CharConversionException(String)
- Constructor for exception class java.io.
CharConversionException
This provides a detailed message.
charCount(int)
- Static method in class java.lang.
Character
Determines the number of
char
values needed to
 represent the specified character (Unicode code point).
chars()
- Method in class java.lang.
StringBuffer
Returns a stream of
int
zero-extending the
char
values
 from this sequence.
chars()
- Method in class java.lang.
StringBuilder
Returns a stream of
int
zero-extending the
char
values
 from this sequence.
chars()
- Method in interface java.lang.
CharSequence
Returns a stream of
int
zero-extending the
char
values
 from this sequence.
chars()
- Method in class java.lang.
String
Returns a stream of
int
zero-extending the
char
values
 from this sequence.
CharSequence
- Interface in
java.lang
A
CharSequence
is a readable sequence of
char
values.
charset()
- Method in class java.io.
Console
Returns the
Charset
object used for
 the
Console
.
charset()
- Method in class java.io.
PrintStream
Returns the charset used in this
PrintStream
instance.
charset()
- Method in class java.nio.charset.
CharsetDecoder
Returns the charset that created this decoder.
charset()
- Method in class java.nio.charset.
CharsetEncoder
Returns the charset that created this encoder.
charset()
- Method in interface jdk.jshell.
JShellConsole
Returns the
Charset
object used for
 the
Console
.
Charset
- Class in
java.nio.charset
A named mapping between sequences of sixteen-bit Unicode
code units
and sequences of
 bytes.
Charset(String, String[])
- Constructor for class java.nio.charset.
Charset
Initializes a new charset with the given canonical name and alias
 set.
CHARSET_RULE
- Static variable in interface org.w3c.dom.css.
CSSRule
The rule is a
CSSCharsetRule
.
CharsetDecoder
- Class in
java.nio.charset
An engine that can transform a sequence of bytes in a specific charset into a sequence of
 sixteen-bit Unicode characters.
CharsetDecoder(Charset, float, float)
- Constructor for class java.nio.charset.
CharsetDecoder
Initializes a new decoder.
CharsetEncoder
- Class in
java.nio.charset
An engine that can transform a sequence of sixteen-bit Unicode characters into a sequence of
 bytes in a specific charset.
CharsetEncoder(Charset, float, float)
- Constructor for class java.nio.charset.
CharsetEncoder
Initializes a new encoder.
CharsetEncoder(Charset, float, float, byte[])
- Constructor for class java.nio.charset.
CharsetEncoder
Initializes a new encoder.
charsetForName(String)
- Method in class java.nio.charset.spi.
CharsetProvider
Retrieves a charset for the given charset name.
Charset names
- Search tag in class java.nio.charset.Charset
Section
CharsetProvider
- Class in
java.nio.charset.spi
Charset service-provider class.
CharsetProvider()
- Constructor for class java.nio.charset.spi.
CharsetProvider
Initializes a new charset provider.
charsets()
- Method in class java.nio.charset.spi.
CharsetProvider
Creates an iterator that iterates over the charsets supported by this
 provider.
charStream
- Variable in class javax.sql.rowset.
BaseRowSet
The
Reader
object that will be
 returned by the method
getCharacterStream
,
 which is specified in the
ResultSet
interface.
charsWidth(char[], int, int)
- Method in class java.awt.
FontMetrics
Returns the total advance width for showing the specified array
 of characters in this
Font
.
CharType
- Interface in
com.sun.jdi
The type of all primitive char values accessed in
 the target VM.
charValue()
- Method in interface com.sun.jdi.
PrimitiveValue
Converts this value to a CharValue and returns the result
 as a char.
charValue()
- Method in class java.lang.
Character
Returns the value of this
Character
object.
CharValue
- Interface in
com.sun.jdi
Provides access to a primitive
char
value in
 the target VM.
charWidth(char)
- Method in class java.awt.
FontMetrics
Returns the advance width of the specified character in this
Font
.
charWidth(int)
- Method in class java.awt.
FontMetrics
Returns the advance width of the specified character in this
Font
.
check(Class<E>, Class<F>)
- Method in interface jdk.incubator.vector.
VectorOperators.Conversion
Ensures that this conversion has the
 desired domain and range types.
check(Class<F>)
- Method in class jdk.incubator.vector.
ByteVector
Checks that this vector has the given element type,
 and returns this vector unchanged.
check(Class<F>)
- Method in class jdk.incubator.vector.
DoubleVector
Checks that this vector has the given element type,
 and returns this vector unchanged.
check(Class<F>)
- Method in class jdk.incubator.vector.
FloatVector
Checks that this vector has the given element type,
 and returns this vector unchanged.
check(Class<F>)
- Method in class jdk.incubator.vector.
IntVector
Checks that this vector has the given element type,
 and returns this vector unchanged.
check(Class<F>)
- Method in class jdk.incubator.vector.
LongVector
Checks that this vector has the given element type,
 and returns this vector unchanged.
check(Class<F>)
- Method in class jdk.incubator.vector.
ShortVector
Checks that this vector has the given element type,
 and returns this vector unchanged.
check(Class<F>)
- Method in class jdk.incubator.vector.
Vector
Checks that this vector has the given element type,
 and returns this vector unchanged.
check(Class<F>)
- Method in class jdk.incubator.vector.
VectorMask
Checks that this mask applies to vectors with the given element type,
 and returns this mask unchanged.
check(Class<F>)
- Method in interface jdk.incubator.vector.
VectorSpecies
Checks that this species has the given element type,
 and returns this species unchanged.
check(String, URL, String, MLetContent)
- Method in class javax.management.loading.
MLet
Deprecated.
This method is to be overridden when extending this service to
 support caching and versioning.
check(Certificate)
- Method in interface java.security.cert.
CertPathChecker
Performs the check(s) on the specified certificate using its internal
 state.
check(Certificate)
- Method in class java.security.cert.
PKIXCertPathChecker
Performs the check(s) on the specified certificate using its internal
 state.
check(Certificate, Collection<String>)
- Method in class java.security.cert.
PKIXCertPathChecker
Performs the check(s) on the specified certificate using its internal
 state and removes any critical extensions that it processes from the
 specified collection of OID strings that represent the unresolved
 critical extensions.
check(VectorSpecies<F>)
- Method in class jdk.incubator.vector.
ByteVector
check(VectorSpecies<F>)
- Method in class jdk.incubator.vector.
DoubleVector
check(VectorSpecies<F>)
- Method in class jdk.incubator.vector.
FloatVector
check(VectorSpecies<F>)
- Method in class jdk.incubator.vector.
IntVector
check(VectorSpecies<F>)
- Method in class jdk.incubator.vector.
LongVector
check(VectorSpecies<F>)
- Method in class jdk.incubator.vector.
ShortVector
check(VectorSpecies<F>)
- Method in class jdk.incubator.vector.
Vector
Checks that this vector has the given species,
 and returns this vector unchanged.
check(VectorSpecies<F>)
- Method in class jdk.incubator.vector.
VectorMask
Checks that this mask has the given species,
 and returns this mask unchanged.
check(VectorSpecies<F>)
- Method in class jdk.incubator.vector.
VectorShuffle
Checks that this shuffle has the given species,
 and returns this shuffle unchanged.
CHECK_BOX
- Static variable in class javax.accessibility.
AccessibleRole
A choice that can be checked or unchecked and provides a separate
 indicator for the current state.
CHECK_BOX
- Static variable in class javax.swing.plaf.synth.
Region
CheckBox region.
CHECK_BOX_MENU_ITEM
- Static variable in class javax.swing.plaf.synth.
Region
CheckBoxMenuItem region.
checkAccept(String, int)
- Method in class java.lang.
SecurityManager
Deprecated.
Throws a
SecurityException
if the
 calling thread is not permitted to accept a socket connection from
 the specified host and port number.
checkAccess()
- Method in class java.lang.
Thread
Deprecated, for removal: This API element is subject to removal in a future version.
This method is only useful in conjunction with
the Security Manager
, which is
       deprecated and subject to removal in a future release.
       Consequently, this method is also deprecated and subject to
       removal. There is no replacement for the Security Manager or this
       method.
checkAccess()
- Method in class java.lang.
ThreadGroup
Deprecated, for removal: This API element is subject to removal in a future version.
This method is only useful in conjunction with
the Security Manager
, which is
       deprecated and subject to removal in a future release.
       Consequently, this method is also deprecated and subject to
       removal. There is no replacement for the Security Manager or this
       method.
checkAccess()
- Method in class java.util.logging.
LogManager
Deprecated, for removal: This API element is subject to removal in a future version.
This method is only useful in conjunction with
the Security Manager
, which is
       deprecated and subject to removal in a future release.
       Consequently, this method is also deprecated and subject to
       removal. There is no replacement for the Security Manager or this
       method.
checkAccess(Thread)
- Method in class java.lang.
SecurityManager
Deprecated.
Throws a
SecurityException
if the
 calling thread is not allowed to modify the thread argument.
checkAccess(ThreadGroup)
- Method in class java.lang.
SecurityManager
Deprecated.
Throws a
SecurityException
if the
 calling thread is not allowed to modify the thread group argument.
checkAccess(Path, AccessMode...)
- Method in class java.nio.file.spi.
FileSystemProvider
Checks the existence, and optionally the accessibility, of a file.
checkAll()
- Method in class java.awt.
MediaTracker
Checks to see if all images being tracked by this media tracker
 have finished loading.
checkAll(boolean)
- Method in class java.awt.
MediaTracker
Checks to see if all images being tracked by this media tracker
 have finished loading.
Checkbox
- Class in
java.awt
A check box is a graphical component that can be in either an
 "on" (
true
) or "off" (
false
) state.
Checkbox()
- Constructor for class java.awt.
Checkbox
Creates a check box with an empty string for its label.
Checkbox(String)
- Constructor for class java.awt.
Checkbox
Creates a check box with the specified label.
Checkbox(String, boolean)
- Constructor for class java.awt.
Checkbox
Creates a check box with the specified label
 and sets the specified state.
Checkbox(String, boolean, CheckboxGroup)
- Constructor for class java.awt.
Checkbox
Constructs a Checkbox with the specified label, set to the
 specified state, and in the specified check box group.
Checkbox(String, CheckboxGroup, boolean)
- Constructor for class java.awt.
Checkbox
Creates a check box with the specified label, in the specified
 check box group, and set to the specified state.
Checkbox.AccessibleAWTCheckbox
- Class in
java.awt
This class implements accessibility support for the
Checkbox
class.
CheckboxGroup
- Class in
java.awt
The
CheckboxGroup
class is used to group together
 a set of
Checkbox
buttons.
CheckboxGroup()
- Constructor for class java.awt.
CheckboxGroup
Creates a new instance of
CheckboxGroup
.
CheckboxMenuItem
- Class in
java.awt
This class represents a check box that can be included in a menu.
CheckboxMenuItem()
- Constructor for class java.awt.
CheckboxMenuItem
Create a check box menu item with an empty label.
CheckboxMenuItem(String)
- Constructor for class java.awt.
CheckboxMenuItem
Create a check box menu item with the specified label.
CheckboxMenuItem(String, boolean)
- Constructor for class java.awt.
CheckboxMenuItem
Create a check box menu item with the specified label and state.
CheckboxMenuItem.AccessibleAWTCheckboxMenuItem
- Class in
java.awt
Inner class of CheckboxMenuItem used to provide default support for
 accessibility.
checkClientTrusted(X509Certificate[], String)
- Method in interface javax.net.ssl.
X509TrustManager
Given the partial or complete certificate chain provided by the
 peer, build a certificate path to a trusted root and return if
 it can be validated and is trusted for client SSL
 authentication based on the authentication type.
checkClientTrusted(X509Certificate[], String, Socket)
- Method in class javax.net.ssl.
X509ExtendedTrustManager
Given the partial or complete certificate chain provided by the
 peer, build and validate the certificate path based on the
 authentication type and ssl parameters.
checkClientTrusted(X509Certificate[], String, SSLEngine)
- Method in class javax.net.ssl.
X509ExtendedTrustManager
Given the partial or complete certificate chain provided by the
 peer, build and validate the certificate path based on the
 authentication type and ssl parameters.
checkClosed()
- Method in class javax.imageio.stream.
ImageInputStreamImpl
Throws an
IOException
if the stream has been closed.
checkConnect(String, int)
- Method in class java.lang.
SecurityManager
Deprecated.
Throws a
SecurityException
if the
 calling thread is not allowed to open a socket connection to the
 specified host and port number.
checkConnect(String, int, Object)
- Method in class java.lang.
SecurityManager
Deprecated.
Throws a
SecurityException
if the
 specified security context is not allowed to open a socket
 connection to the specified host and port number.
checkCreateClassLoader()
- Method in class java.lang.
SecurityManager
Deprecated.
Throws a
SecurityException
if the
 calling thread is not allowed to create a new class loader.
checkCredentials(String, String)
- Method in class com.sun.net.httpserver.
BasicAuthenticator
Called for each incoming request to verify the
 given name and password in the context of this
 authenticator's realm.
checkDelete(String)
- Method in class java.lang.
SecurityManager
Deprecated.
Throws a
SecurityException
if the
 calling thread is not allowed to delete the specified file.
CHECKED
- Static variable in class javax.accessibility.
AccessibleState
Indicates this object is currently checked.
CHECKED
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "checked"
checkedCollection(Collection<E>, Class<E>)
- Static method in class java.util.
Collections
Returns a dynamically typesafe view of the specified collection.
CheckedInputStream
- Class in
java.util.zip
An input stream that also maintains a checksum of the data being read.
CheckedInputStream(InputStream, Checksum)
- Constructor for class java.util.zip.
CheckedInputStream
Creates an input stream using the specified Checksum.
checkedList(List<E>, Class<E>)
- Static method in class java.util.
Collections
Returns a dynamically typesafe view of the specified list.
checkedMap(Map<K, V>, Class<K>, Class<V>)
- Static method in class java.util.
Collections
Returns a dynamically typesafe view of the specified map.
checkedNavigableMap(NavigableMap<K, V>, Class<K>, Class<V>)
- Static method in class java.util.
Collections
Returns a dynamically typesafe view of the specified navigable map.
checkedNavigableSet(NavigableSet<E>, Class<E>)
- Static method in class java.util.
Collections
Returns a dynamically typesafe view of the specified navigable set.
CheckedOutputStream
- Class in
java.util.zip
An output stream that also maintains a checksum of the data being
 written.
CheckedOutputStream(OutputStream, Checksum)
- Constructor for class java.util.zip.
CheckedOutputStream
Creates an output stream with the specified Checksum.
checkedQueue(Queue<E>, Class<E>)
- Static method in class java.util.
Collections
Returns a dynamically typesafe view of the specified queue.
checkedSet(Set<E>, Class<E>)
- Static method in class java.util.
Collections
Returns a dynamically typesafe view of the specified set.
checkedSortedMap(SortedMap<K, V>, Class<K>, Class<V>)
- Static method in class java.util.
Collections
Returns a dynamically typesafe view of the specified sorted map.
checkedSortedSet(SortedSet<E>, Class<E>)
- Static method in class java.util.
Collections
Returns a dynamically typesafe view of the specified sorted set.
checkError()
- Method in class java.io.
PrintStream
Flushes the stream if it's not closed and checks its error state.
checkError()
- Method in class java.io.
PrintWriter
Flushes the stream if it's not closed and checks its error state.
checkExec(String)
- Method in class java.lang.
SecurityManager
Deprecated.
Throws a
SecurityException
if the
 calling thread is not allowed to create a subprocess.
checkExit(int)
- Method in class java.lang.
SecurityManager
Deprecated.
Throws a
SecurityException
if the
 calling thread is not allowed to cause the Java Virtual Machine to
 halt with the specified status code.
checkForClickInExpandControl(TreePath, int, int)
- Method in class javax.swing.plaf.basic.
BasicTreeUI
If the
mouseX
and
mouseY
are in the
 expand/collapse region of the
row
, this will toggle
 the row.
checkFromIndexSize(int, int, int)
- Static method in class java.util.
Objects
Checks if the sub-range from
fromIndex
(inclusive) to
fromIndex + size
(exclusive) is within the bounds of range from
0
(inclusive) to
length
(exclusive).
checkFromIndexSize(long, long, long)
- Static method in class java.util.
Objects
Checks if the sub-range from
fromIndex
(inclusive) to
fromIndex + size
(exclusive) is within the bounds of range from
0
(inclusive) to
length
(exclusive).
checkFromToIndex(int, int, int)
- Static method in class java.util.
Objects
Checks if the sub-range from
fromIndex
(inclusive) to
toIndex
(exclusive) is within the bounds of range from
0
(inclusive) to
length
(exclusive).
checkFromToIndex(long, long, long)
- Static method in class java.util.
Objects
Checks if the sub-range from
fromIndex
(inclusive) to
toIndex
(exclusive) is within the bounds of range from
0
(inclusive) to
length
(exclusive).
checkGuard(Object)
- Method in interface java.security.
Guard
Determines whether to allow access to the guarded object
object
.
checkGuard(Object)
- Method in class java.security.
Permission
Implements the guard interface for a permission.
checkHorizontalKey(int, String)
- Method in class javax.swing.
AbstractButton
Verify that the
key
argument is a legal value for the
horizontalAlignment
and
horizontalTextPosition
properties.
checkHorizontalKey(int, String)
- Method in class javax.swing.
JLabel
Verify that key is a legal value for the horizontalAlignment properties.
checkIcon
- Variable in class javax.swing.plaf.basic.
BasicMenuItemUI
The check icon.
checkID(int)
- Method in class java.awt.
MediaTracker
Checks to see if all images tracked by this media tracker that
 are tagged with the specified identifier have finished loading.
checkID(int, boolean)
- Method in class java.awt.
MediaTracker
Checks to see if all images tracked by this media tracker that
 are tagged with the specified identifier have finished loading.
checkImage(Image, int, int, ImageObserver)
- Method in class java.awt.
Component
Returns the status of the construction of a screen representation
 of the specified image.
checkImage(Image, int, int, ImageObserver)
- Method in class java.awt.
Toolkit
Indicates the construction status of a specified image that is
 being prepared for display.
checkImage(Image, ImageObserver)
- Method in class java.awt.
Component
Returns the status of the construction of a screen representation
 of the specified image.
checkIndex(int)
- Method in class jdk.incubator.vector.
VectorShuffle
Validation function for lane indexes which may be out of the
 valid range of
[0..VLENGTH-1]
.
checkIndex(int, int)
- Static method in class java.util.
Objects
Checks if the
index
is within the bounds of the range from
0
(inclusive) to
length
(exclusive).
checkIndex(long, long)
- Static method in class java.util.
Objects
Checks if the
index
is within the bounds of the range from
0
(inclusive) to
length
(exclusive).
checkIndexes()
- Method in class jdk.incubator.vector.
VectorShuffle
Apply the
checkIndex()
validation
 function to all lanes, throwing
IndexOutOfBoundsException
if there are any exceptional
 indexes in this shuffle.
Checking Permissions
- Search tag in class java.lang.SecurityManager
Section
checkInput(ObjectInputFilter.FilterInfo)
- Method in interface java.io.
ObjectInputFilter
Check the class, array length, number of object references, depth,
 stream size, and other available filtering information.
checkLink(String)
- Method in class java.lang.
SecurityManager
Deprecated.
Throws a
SecurityException
if the
 calling thread is not allowed to dynamic link the library code
 specified by the string argument file.
checkListen(int)
- Method in class java.lang.
SecurityManager
Deprecated.
Throws a
SecurityException
if the
 calling thread is not allowed to wait for a connection request on
 the specified local port number.
checkMaxDegree(int)
- Method in class javax.management.relation.
RoleInfo
Returns true if the
value
parameter is lower than or equal to
 the expected maximum degree, false otherwise.
checkMinDegree(int)
- Method in class javax.management.relation.
RoleInfo
Returns true if the
value
parameter is greater than or equal to
 the expected minimum degree, false otherwise.
checkMulticast(InetAddress)
- Method in class java.lang.
SecurityManager
Deprecated.
Throws a
SecurityException
if the
 calling thread is not allowed to use
 (join/leave/send/receive) IP multicast.
checkMulticast(InetAddress, byte)
- Method in class java.lang.
SecurityManager
Deprecated, for removal: This API element is subject to removal in a future version.
checkOpacity(AbstractButton)
- Method in class javax.swing.plaf.basic.
BasicButtonListener
Checks the opacity of the
AbstractButton
.
checkPackageAccess(String)
- Method in class java.lang.
SecurityManager
Deprecated.
Throws a
SecurityException
if the calling thread is not allowed
 to access the specified package.
checkPackageDefinition(String)
- Method in class java.lang.
SecurityManager
Deprecated.
Throws a
SecurityException
if the calling thread is not
 allowed to define classes in the specified package.
checkPainter()
- Method in class javax.swing.text.
GlyphView
Check to see that a glyph painter exists.
checkPermission(Permission)
- Method in class java.lang.
SecurityManager
Deprecated.
Throws a
SecurityException
if the requested
 access, specified by the given permission, is not permitted based
 on the security policy currently in effect.
checkPermission(Permission)
- Method in class java.security.
AccessControlContext
Deprecated.
Determines whether the access request indicated by the
 specified permission should be allowed or denied, based on
 the security policy currently in effect, and the context in
 this object.
checkPermission(Permission)
- Static method in class java.security.
AccessController
Deprecated.
Determines whether the access request indicated by the
 specified permission should be allowed or denied, based on
 the current
AccessControlContext
and security policy.
checkPermission(Permission, Object)
- Method in class java.lang.
SecurityManager
Deprecated.
Throws a
SecurityException
if the
 specified security context is denied access to the resource
 specified by the given permission.
checkPrintJobAccess()
- Method in class java.lang.
SecurityManager
Deprecated.
Throws a
SecurityException
if the
 calling thread is not allowed to initiate a print job request.
checkPropertiesAccess()
- Method in class java.lang.
SecurityManager
Deprecated.
Throws a
SecurityException
if the
 calling thread is not allowed to access or modify the system
 properties.
checkPropertyAccess(String)
- Method in class java.lang.
SecurityManager
Deprecated.
Throws a
SecurityException
if the
 calling thread is not allowed to access the system property with
 the specified
key
name.
checkRead(FileDescriptor)
- Method in class java.lang.
SecurityManager
Deprecated.
Throws a
SecurityException
if the
 calling thread is not allowed to read from the specified file
 descriptor.
checkRead(String)
- Method in class java.lang.
SecurityManager
Deprecated.
Throws a
SecurityException
if the
 calling thread is not allowed to read the file specified by the
 string argument.
checkRead(String, Object)
- Method in class java.lang.
SecurityManager
Deprecated.
Throws a
SecurityException
if the
 specified security context is not allowed to read the file
 specified by the string argument.
checkReadParamBandSettings(ImageReadParam, int, int)
- Static method in class javax.imageio.
ImageReader
A utility method that may be used by readers to test the
 validity of the source and destination band settings of an
ImageReadParam
.
checkRoleReading(String, String)
- Method in class javax.management.relation.
RelationService
Checks if given Role can be read in a relation of the given type.
checkRoleReading(String, String)
- Method in interface javax.management.relation.
RelationServiceMBean
Checks if given Role can be read in a relation of the given type.
checkRoleWriting(Role, String, Boolean)
- Method in class javax.management.relation.
RelationService
Checks if given Role can be set in a relation of given type.
checkRoleWriting(Role, String, Boolean)
- Method in interface javax.management.relation.
RelationServiceMBean
Checks if given Role can be set in a relation of given type.
checkSecurityAccess(String)
- Method in class java.lang.
SecurityManager
Deprecated.
Determines whether the permission with the specified permission target
 name should be granted or denied.
checkServerTrusted(X509Certificate[], String)
- Method in interface javax.net.ssl.
X509TrustManager
Given the partial or complete certificate chain provided by the
 peer, build a certificate path to a trusted root and return if
 it can be validated and is trusted for server SSL
 authentication based on the authentication type.
checkServerTrusted(X509Certificate[], String, Socket)
- Method in class javax.net.ssl.
X509ExtendedTrustManager
Given the partial or complete certificate chain provided by the
 peer, build and validate the certificate path based on the
 authentication type and ssl parameters.
checkServerTrusted(X509Certificate[], String, SSLEngine)
- Method in class javax.net.ssl.
X509ExtendedTrustManager
Given the partial or complete certificate chain provided by the
 peer, build and validate the certificate path based on the
 authentication type and ssl parameters.
checkSetFactory()
- Method in class java.lang.
SecurityManager
Deprecated.
Throws a
SecurityException
if the
 calling thread is not allowed to set the socket factory used by
ServerSocket
or
Socket
, or the stream
 handler factory used by
URL
.
Checksum
- Interface in
java.util.zip
An interface representing a data checksum.
checkValidIntValue(long)
- Method in enum class java.time.temporal.
ChronoField
Checks that the specified value is valid and fits in an
int
.
checkValidIntValue(long, TemporalField)
- Method in class java.time.temporal.
ValueRange
Checks that the specified value is valid and fits in an
int
.
checkValidity()
- Method in class java.security.cert.
X509Certificate
Checks that the certificate is currently valid.
checkValidity()
- Method in class javax.security.cert.
X509Certificate
Deprecated.
Checks that the certificate is currently valid.
checkValidity(Date)
- Method in class java.security.cert.
X509Certificate
Checks that the given date is within the certificate's
 validity period.
checkValidity(Date)
- Method in class javax.security.cert.
X509Certificate
Deprecated.
Checks that the specified date is within the certificate's
 validity period.
checkValidValue(long)
- Method in enum class java.time.temporal.
ChronoField
Checks that the specified value is valid for this field.
checkValidValue(long, TemporalField)
- Method in class java.time.temporal.
ValueRange
Checks that the specified value is valid.
checkValue(long)
- Method in interface jdk.incubator.vector.
VectorSpecies
Checks that this species can represent the given element value,
 and returns the value unchanged.
checkVerticalKey(int, String)
- Method in class javax.swing.
AbstractButton
Verify that the
key
argument is a legal value for the
 vertical properties.
checkVerticalKey(int, String)
- Method in class javax.swing.
JLabel
Verify that key is a legal value for the
 verticalAlignment or verticalTextPosition properties.
checkWrite(FileDescriptor)
- Method in class java.lang.
SecurityManager
Deprecated.
Throws a
SecurityException
if the
 calling thread is not allowed to write to the specified file
 descriptor.
checkWrite(String)
- Method in class java.lang.
SecurityManager
Deprecated.
Throws a
SecurityException
if the
 calling thread is not allowed to write to the file specified by
 the string argument.
CHEROKEE
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Cherokee".
CHEROKEE
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Cherokee" Unicode character block.
CHEROKEE_SUPPLEMENT
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Cherokee Supplement" Unicode character block.
CHESS_SYMBOLS
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Chess Symbols" Unicode
 character block.
CHILD_NODE_OF
- Static variable in class javax.accessibility.
AccessibleRelation
Indicates that an object is a child node of one or more objects.
CHILD_NODE_OF_PROPERTY
- Static variable in class javax.accessibility.
AccessibleRelation
Indicates the
CHILD_NODE_OF
relation between two or more objects
 has changed.
CHILD_POLICY_ALL
- Static variable in interface javax.imageio.metadata.
IIOMetadataFormat
A constant returned by
getChildPolicy
to indicate
 that an element must have a single instance of each of its
 legal child elements, in order.
CHILD_POLICY_CHOICE
- Static variable in interface javax.imageio.metadata.
IIOMetadataFormat
A constant returned by
getChildPolicy
to indicate
 that an element must have zero or one children, selected from
 among its legal child elements.
CHILD_POLICY_EMPTY
- Static variable in interface javax.imageio.metadata.
IIOMetadataFormat
A constant returned by
getChildPolicy
to indicate
 that an element may not have any children.
CHILD_POLICY_MAX
- Static variable in interface javax.imageio.metadata.
IIOMetadataFormat
The largest valid
CHILD_POLICY_*
constant,
 to be used for range checks.
CHILD_POLICY_REPEAT
- Static variable in interface javax.imageio.metadata.
IIOMetadataFormat
A constant returned by
getChildPolicy
to indicate
 that an element must have zero or more instances of its unique
 legal child element.
CHILD_POLICY_SEQUENCE
- Static variable in interface javax.imageio.metadata.
IIOMetadataFormat
A constant returned by
getChildPolicy
to indicate
 that an element must have a sequence of instances of any of its
 legal child elements.
CHILD_POLICY_SOME
- Static variable in interface javax.imageio.metadata.
IIOMetadataFormat
A constant returned by
getChildPolicy
to indicate
 that an element must have zero or one instance of each of its
 legal child elements, in order.
childAdded(NodeChangeEvent)
- Method in interface java.util.prefs.
NodeChangeListener
This method gets called when a child node is added.
childAlloc
- Variable in class javax.swing.text.
AsyncBoxView.ChildLocator
A shape to use for the child allocation to avoid
 creating a lot of garbage.
childAllocation(int, Rectangle)
- Method in class javax.swing.text.
BoxView
Allocates a region for a child view.
childAllocation(int, Rectangle)
- Method in class javax.swing.text.
CompositeView
Returns the allocation for a given child.
childChanged(AsyncBoxView.ChildState)
- Method in class javax.swing.text.
AsyncBoxView.ChildLocator
Notification that a child changed.
childDeserializedHook(Object, BeanContextSupport.BCSChild)
- Method in class java.beans.beancontext.
BeanContextSupport
Called by readObject with the newly deserialized child and BCSChild.
childIndices
- Variable in class javax.swing.event.
TreeModelEvent
Indices identifying the position of where the children were.
childJustAddedHook(Object, BeanContextSupport.BCSChild)
- Method in class java.beans.beancontext.
BeanContextSupport
subclasses may override this method to simply extend add() semantics
 after the child has been added and before the event notification has
 occurred.
childJustRemovedHook(Object, BeanContextSupport.BCSChild)
- Method in class java.beans.beancontext.
BeanContextServicesSupport
called from superclass child removal operations after a child
 has been successfully removed. called with child synchronized.
childJustRemovedHook(Object, BeanContextSupport.BCSChild)
- Method in class java.beans.beancontext.
BeanContextSupport
subclasses may override this method to simply extend remove() semantics
 after the child has been removed and before the event notification has
 occurred.
ChildLocator()
- Constructor for class javax.swing.text.
AsyncBoxView.ChildLocator
construct a child locator.
childRemoved(NodeChangeEvent)
- Method in interface java.util.prefs.
NodeChangeListener
This method gets called when a child node is removed.
children
- Variable in class java.beans.beancontext.
BeanContextMembershipEvent
The list of children affected by this
 event notification.
children
- Variable in class java.beans.beancontext.
BeanContextSupport
all accesses to the
protected HashMap children
field
 shall be synchronized on that object.
children
- Variable in class javax.swing.event.
TreeModelEvent
Children that have been removed.
children
- Variable in class javax.swing.tree.
DefaultMutableTreeNode
array of children, may be null if this node has no children
children()
- Method in class java.lang.
Process
Returns a snapshot of the direct children of the process.
children()
- Method in interface java.lang.
ProcessHandle
Returns a snapshot of the current direct children of the process.
children()
- Method in class javax.swing.
JTree.DynamicUtilTreeNode
Subclassed to load the children, if necessary.
children()
- Method in class javax.swing.text.
AbstractDocument.AbstractElement
Returns the children of the receiver as an
Enumeration
.
children()
- Method in class javax.swing.text.
AbstractDocument.BranchElement
Returns the children of the receiver as an
Enumeration
.
children()
- Method in class javax.swing.text.
AbstractDocument.LeafElement
Returns the children of the receiver as an
Enumeration
.
children()
- Method in class javax.swing.tree.
DefaultMutableTreeNode
Creates and returns a forward-order enumeration of this node's
 children.
children()
- Method in interface javax.swing.tree.
TreeNode
Returns the children of the receiver as an
Enumeration
.
childrenAdded(BeanContextMembershipEvent)
- Method in interface java.beans.beancontext.
BeanContextMembershipListener
Called when a child or list of children is added to a
BeanContext
that this listener is registered with.
childrenNames()
- Method in class java.util.prefs.
AbstractPreferences
Implements the
children
method as per the specification in
Preferences.childrenNames()
.
childrenNames()
- Method in class java.util.prefs.
Preferences
Returns the names of the children of this preference node, relative to
 this node.
childrenNamesSpi()
- Method in class java.util.prefs.
AbstractPreferences
Returns the names of the children of this preference node.
childrenRemoved(BeanContextMembershipEvent)
- Method in interface java.beans.beancontext.
BeanContextMembershipListener
Called when a child or list of children is removed
 from a
BeanContext
that this listener
 is registered with.
childSpi(String)
- Method in class java.util.prefs.
AbstractPreferences
Returns the named child of this preference node, creating it if it does
 not already exist.
ChildState(View)
- Constructor for class javax.swing.text.
AsyncBoxView.ChildState
Construct a child status.
childValue
- Variable in class javax.swing.
JTree.DynamicUtilTreeNode
Value to create children with.
childValue(T)
- Method in class java.lang.
InheritableThreadLocal
Computes the child's initial value for this inheritable thread-local
 variable as a function of the parent's value at the time the child
 thread is created.
CHINA
- Static variable in class java.util.
Locale
Useful constant for country.
CHINESE
- Static variable in class java.util.
Locale
Useful constant for language.
Choice
- Class in
java.awt
The
Choice
class presents a pop-up menu of choices.
Choice()
- Constructor for class java.awt.
Choice
Creates a new choice menu.
Choice.AccessibleAWTChoice
- Class in
java.awt
This class implements accessibility support for the
Choice
class.
ChoiceCallback
- Class in
javax.security.auth.callback
Underlying security services instantiate and pass a
ChoiceCallback
to the
handle
method of a
CallbackHandler
to display a list of choices
 and to retrieve the selected choice(s).
ChoiceCallback(String, String[], int, boolean)
- Constructor for class javax.security.auth.callback.
ChoiceCallback
Construct a
ChoiceCallback
with a prompt,
 a list of choices, a default choice, and a boolean specifying
 whether multiple selections from the list of choices are allowed.
ChoiceFormat
- Class in
java.text
A
ChoiceFormat
allows you to attach a format to a range of numbers.
ChoiceFormat(double[], String[])
- Constructor for class java.text.
ChoiceFormat
Constructs with the limits and the corresponding formats.
ChoiceFormat(String)
- Constructor for class java.text.
ChoiceFormat
Constructs with limits and corresponding formats based on the pattern.
choices
- Variable in class java.sql.
DriverPropertyInfo
An array of possible values if the value for the field
DriverPropertyInfo.value
may be selected
 from a particular set of values; otherwise null.
choices()
- Method in interface com.sun.jdi.connect.
Connector.SelectedArgument
Return the possible values for the argument
CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY
- Static variable in class javax.swing.
JFileChooser
Identifies a change in the list of predefined file filters
 the user can choose from.
chooseClientAlias(String[], Principal[], Socket)
- Method in interface javax.net.ssl.
X509KeyManager
Choose an alias to authenticate the client side of a secure
 socket given the public key type and the list of
 certificate issuer authorities recognized by the peer (if any).
chooseEngineClientAlias(String[], Principal[], SSLEngine)
- Method in class javax.net.ssl.
X509ExtendedKeyManager
Choose an alias to authenticate the client side of an
SSLEngine
connection given the public key type
 and the list of certificate issuer authorities recognized by
 the peer (if any).
chooseEngineServerAlias(String, Principal[], SSLEngine)
- Method in class javax.net.ssl.
X509ExtendedKeyManager
Choose an alias to authenticate the server side of an
SSLEngine
connection given the public key type
 and the list of certificate issuer authorities recognized by
 the peer (if any).
chooser
- Variable in class javax.swing.plaf.basic.
BasicColorChooserUI
JColorChooser this BasicColorChooserUI is installed on.
CHOOSER_PANELS_PROPERTY
- Static variable in class javax.swing.
JColorChooser
The chooserPanel array property name.
chooseServerAlias(String, Principal[], Socket)
- Method in interface javax.net.ssl.
X509KeyManager
Choose an alias to authenticate the server side of a secure
 socket given the public key type and the list of
 certificate issuer authorities recognized by the peer (if any).
Choosing a Random Number Generator Algorithm
- Search tag in package java.util.random
Section
Choosing the RMI transport
- Search tag in package javax.management.remote.rmi
Section
CHORASMIAN
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Chorasmian".
CHORASMIAN
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Chorasmian" Unicode
 character block.
CHORD
- Static variable in class java.awt.geom.
Arc2D
The closure type for an arc closed by drawing a straight
 line segment from the start of the arc segment to the end of the
 arc segment.
CHOU_1
- Static variable in class javax.print.attribute.standard.
MediaSize.JIS
Specifies the JIS Chou ("long") #1 envelope size, 142 mm by 332 mm.
CHOU_2
- Static variable in class javax.print.attribute.standard.
MediaSize.JIS
Specifies the JIS Chou ("long") #2 envelope size, 119 mm by 277 mm.
CHOU_3
- Static variable in class javax.print.attribute.standard.
MediaSize.JIS
Specifies the JIS Chou ("long") #3 envelope size, 120 mm by 235 mm.
CHOU_30
- Static variable in class javax.print.attribute.standard.
MediaSize.JIS
Specifies the JIS Chou ("long") #30 envelope size, 92 mm by 235 mm.
CHOU_4
- Static variable in class javax.print.attribute.standard.
MediaSize.JIS
Specifies the JIS Chou ("long") #4 envelope size, 90 mm by 205 mm.
CHOU_40
- Static variable in class javax.print.attribute.standard.
MediaSize.JIS
Specifies the JIS Chou ("long") #40 envelope size, 90 mm by 225 mm.
Chromaticity
- Class in
javax.print.attribute.standard
Class
Chromaticity
is a printing attribute class, an enumeration,
 that specifies monochrome or color printing.
Chromaticity(int)
- Constructor for class javax.print.attribute.standard.
Chromaticity
Construct a new chromaticity enumeration value with the given integer
 value.
ChronoField
- Enum Class in
java.time.temporal
A standard set of fields.
ChronoLocalDate
- Interface in
java.time.chrono
A date without time-of-day or time-zone in an arbitrary chronology, intended
 for advanced globalization use cases.
ChronoLocalDateTime<D>
- Interface in
java.time.chrono
A date-time without a time-zone in an arbitrary chronology, intended
 for advanced globalization use cases.
chronology()
- Static method in class java.time.temporal.
TemporalQueries
A query for the
Chronology
.
Chronology
- Interface in
java.time.chrono
A calendar system, used to organize and identify dates.
ChronoPeriod
- Interface in
java.time.chrono
A date-based amount of time, such as '3 years, 4 months and 5 days' in an
 arbitrary chronology, intended for advanced globalization use cases.
ChronoUnit
- Enum Class in
java.time.temporal
A standard set of date periods units.
ChronoZonedDateTime<D>
- Interface in
java.time.chrono
A date-time with a time-zone in an arbitrary chronology,
 intended for advanced globalization use cases.
chunkLength
- Variable in class java.net.
HttpURLConnection
The chunk-length when using chunked encoding streaming mode for output.
Cipher
- Class in
javax.crypto
This class provides the functionality of a cryptographic cipher for
 encryption and decryption.
Cipher(CipherSpi, Provider, String)
- Constructor for class javax.crypto.
Cipher
Creates a
Cipher
object.
CipherInputStream
- Class in
javax.crypto
A
CipherInputStream
is composed of an
InputStream
and a
Cipher
object so that read() methods return data that are
 read in from the underlying
InputStream
but have been
 additionally processed by the
Cipher
object.
CipherInputStream(InputStream)
- Constructor for class javax.crypto.
CipherInputStream
Constructs a
CipherInputStream
from an
InputStream
without specifying a
Cipher
object.
CipherInputStream(InputStream, Cipher)
- Constructor for class javax.crypto.
CipherInputStream
Constructs a
CipherInputStream
from an
InputStream
and a
Cipher
object.
CipherOutputStream
- Class in
javax.crypto
A
CipherOutputStream
is composed of an
OutputStream
and a
Cipher
object so that write() methods first process the data
 before writing them out to the underlying
OutputStream
.
CipherOutputStream(OutputStream)
- Constructor for class javax.crypto.
CipherOutputStream
Constructs a
CipherOutputStream
from an
OutputStream
without specifying a
Cipher
object.
CipherOutputStream(OutputStream, Cipher)
- Constructor for class javax.crypto.
CipherOutputStream
Constructs a
CipherOutputStream
from an
OutputStream
and a
Cipher
object.
CipherSpi
- Class in
javax.crypto
This class defines the
Service Provider Interface
(
SPI
)
 for the
Cipher
class.
CipherSpi()
- Constructor for class javax.crypto.
CipherSpi
Constructor for subclasses to call.
CITE
- Static variable in class javax.swing.text.html.
HTML.Tag
Tag <cite>
CJK_COMPATIBILITY
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "CJK Compatibility" Unicode character block.
CJK_COMPATIBILITY_FORMS
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "CJK Compatibility Forms" Unicode character block.
CJK_COMPATIBILITY_IDEOGRAPHS
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "CJK Compatibility Ideographs" Unicode character
 block.
CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "CJK Compatibility Ideographs Supplement" Unicode character block.
CJK_RADICALS_SUPPLEMENT
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "CJK Radicals Supplement" Unicode character block.
CJK_STROKES
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "CJK Strokes" Unicode character block.
CJK_SYMBOLS_AND_PUNCTUATION
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "CJK Symbols and Punctuation" Unicode character block.
CJK_UNIFIED_IDEOGRAPHS
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "CJK Unified Ideographs" Unicode character block.
CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "CJK Unified Ideographs Extension A" Unicode character block.
CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "CJK Unified Ideographs Extension B" Unicode
 character block.
CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "CJK Unified Ideographs Extension C" Unicode
 character block.
CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "CJK Unified Ideographs Extension D" Unicode
 character block.
CJK_UNIFIED_IDEOGRAPHS_EXTENSION_E
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "CJK Unified Ideographs Extension E" Unicode
 character block.
CJK_UNIFIED_IDEOGRAPHS_EXTENSION_F
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "CJK Unified Ideographs Extension F" Unicode
 character block.
CJK_UNIFIED_IDEOGRAPHS_EXTENSION_G
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "CJK Unified Ideographs Extension G" Unicode
 character block.
CJK_UNIFIED_IDEOGRAPHS_EXTENSION_H
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "CJK Unified Ideographs Extension H" Unicode
 character block.
clamp(double, double, double)
- Static method in class java.lang.
Math
Clamps the value to fit between min and max.
clamp(double, double, double)
- Static method in class java.lang.
StrictMath
Clamps the value to fit between min and max.
clamp(float, float, float)
- Static method in class java.lang.
Math
Clamps the value to fit between min and max.
clamp(float, float, float)
- Static method in class java.lang.
StrictMath
Clamps the value to fit between min and max.
clamp(long, int, int)
- Static method in class java.lang.
Math
Clamps the value to fit between min and max.
clamp(long, int, int)
- Static method in class java.lang.
StrictMath
Clamps the value to fit between min and max.
clamp(long, long, long)
- Static method in class java.lang.
Math
Clamps the value to fit between min and max.
clamp(long, long, long)
- Static method in class java.lang.
StrictMath
Clamps the value to fit between min and max.
Class<T>
- Class in
java.lang
Instances of the class
Class
represent classes and
 interfaces in a running Java application.
CLASS
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
ClassTree
representing classes.
CLASS
- Enum constant in enum class java.lang.annotation.
RetentionPolicy
Annotations are to be recorded in the class file by the compiler
 but need not be retained by the VM at run time.
CLASS
- Enum constant in enum class java.lang.reflect.
AccessFlag.Location
Class location.
CLASS
- Enum constant in enum class javax.lang.model.element.
ElementKind
A class not described by a more specific kind (like
ENUM
or
RECORD
).
CLASS
- Enum constant in enum class javax.tools.
JavaFileObject.Kind
Class files for the Java Virtual Machine.
CLASS
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "class"
CLASS_ABSTRACT
- Static variable in class java.awt.color.
ICC_Profile
Profile class is abstract.
CLASS_COLORSPACECONVERSION
- Static variable in class java.awt.color.
ICC_Profile
Profile class is color space conversion.
CLASS_DEVICELINK
- Static variable in class java.awt.color.
ICC_Profile
Profile class is device link.
CLASS_DISPLAY
- Static variable in class java.awt.color.
ICC_Profile
Profile class is display.
CLASS_INIT_NAME
- Static variable in class java.lang.constant.
ConstantDescs
The special name of class initialization methods, "<clinit>".
CLASS_INPUT
- Static variable in class java.awt.color.
ICC_Profile
Profile class is input.
CLASS_LOADING_MXBEAN_NAME
- Static variable in class java.lang.management.
ManagementFactory
String representation of the
ObjectName
for the
ClassLoadingMXBean
.
CLASS_NAMEDCOLOR
- Static variable in class java.awt.color.
ICC_Profile
Profile class is named color.
CLASS_OUTPUT
- Enum constant in enum class javax.tools.
StandardLocation
Location of new class files.
CLASS_OUTPUT
- Static variable in class java.awt.color.
ICC_Profile
Profile class is output.
CLASS_PATH
- Enum constant in enum class javax.tools.
StandardLocation
Location to search for user class files.
CLASS_PATH
- Static variable in class java.util.jar.
Attributes.Name
Name
object for
Class-Path
manifest attribute.
CLASS_SUBKIND
- Enum constant in enum class jdk.jshell.
Snippet.SubKind
A class declaration.
Class AccessibleBundle
- Search tag in package javax.accessibility
Section
Class AccessibleContext
- Search tag in package javax.accessibility
Section
Class AccessibleRole
- Search tag in package javax.accessibility
Section
Class AccessibleState
- Search tag in package javax.accessibility
Section
Class AccessibleStateSet
- Search tag in package javax.accessibility
Section
classattr()
- Static method in class javax.management.
Query
Returns a new class attribute expression which can be used in any
 Query call that expects a ValueExp.
ClassBytecodes(String, byte[])
- Constructor for class jdk.jshell.spi.
ExecutionControl.ClassBytecodes
Creates a name/bytecode pair.
ClassCastException
- Exception Class in
java.lang
Thrown to indicate that the code has attempted to cast an object
 to a subclass of which it is not an instance.
ClassCastException()
- Constructor for exception class java.lang.
ClassCastException
Constructs a
ClassCastException
with no detail message.
ClassCastException(String)
- Constructor for exception class java.lang.
ClassCastException
Constructs a
ClassCastException
with the specified
 detail message.
ClassCircularityError
- Exception Class in
java.lang
Thrown when the Java Virtual Machine detects a circularity in the
 superclass hierarchy of a class being loaded.
ClassCircularityError()
- Constructor for exception class java.lang.
ClassCircularityError
Constructs a
ClassCircularityError
with no detail message.
ClassCircularityError(String)
- Constructor for exception class java.lang.
ClassCircularityError
Constructs a
ClassCircularityError
with the specified detail
 message.
classData(MethodHandles.Lookup, String, Class<T>)
- Static method in class java.lang.invoke.
MethodHandles
Returns the
class data
associated with the lookup class
 of the given
caller
lookup object, or
null
.
classDataAt(MethodHandles.Lookup, String, Class<T>, int)
- Static method in class java.lang.invoke.
MethodHandles
Returns the element at the specified index in the
class data
,
 if the class data associated with the lookup class
 of the given
caller
lookup object is a
List
.
ClassDefinition
- Class in
java.lang.instrument
This class serves as a parameter block to the
Instrumentation.redefineClasses
method.
ClassDefinition(Class<?>, byte[])
- Constructor for class java.lang.instrument.
ClassDefinition
Creates a new
ClassDefinition
binding using the supplied
  class and class file bytes.
ClassDesc
- Interface in
java.lang.constant
A
nominal descriptor
for a
Class
constant.
classEquals(Class<?>, Class<?>)
- Static method in class java.beans.beancontext.
BeanContextSupport
Tests to see if two class objects,
 or their names are equal.
classesByName(String)
- Method in interface com.sun.jdi.
VirtualMachine
Returns the loaded reference types that
 match a given name.
classesRedefined(ExecutionControl.ClassBytecodes[])
- Method in class jdk.jshell.execution.
DirectExecutionControl
Notify that classes have been redefined.
classesRedefined(ExecutionControl.ClassBytecodes[])
- Method in interface jdk.jshell.execution.
LoaderDelegate
Notify that classes have been redefined.
classFactory
- Variable in class javax.naming.
Reference
Contains the name of the factory class for creating
 an instance of the object to which this Reference refers.
classFactoryLocation
- Variable in class javax.naming.
Reference
Contains the location of the factory class.
ClassFileFormatVersion
- Enum Class in
java.lang.reflect
Class file format versions of the Java virtual machine.
ClassFileTransformer
- Interface in
java.lang.instrument
A transformer of class files.
ClassFormatError
- Exception Class in
java.lang
Thrown when the Java Virtual Machine attempts to read a class
 file and determines that the file is malformed or otherwise cannot
 be interpreted as a class file.
ClassFormatError()
- Constructor for exception class java.lang.
ClassFormatError
Constructs a
ClassFormatError
with no detail message.
ClassFormatError(String)
- Constructor for exception class java.lang.
ClassFormatError
Constructs a
ClassFormatError
with the specified
 detail message.
CLASSID
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "classid"
ClassInstallException(String, boolean[])
- Constructor for exception class jdk.jshell.spi.
ExecutionControl.ClassInstallException
classLoader()
- Method in interface com.sun.jdi.
ModuleReference
Returns the
ClassLoaderReference
object for this module.
classLoader()
- Method in interface com.sun.jdi.
ReferenceType
Gets the classloader object which loaded the class corresponding
 to this type.
ClassLoader
- Class in
java.lang
A class loader is an object that is responsible for loading classes.
ClassLoader()
- Constructor for class java.lang.
ClassLoader
Creates a new class loader using the
ClassLoader
returned by
 the method
getSystemClassLoader()
as the parent class loader.
ClassLoader(ClassLoader)
- Constructor for class java.lang.
ClassLoader
Creates a new class loader using the specified parent class loader for
 delegation.
ClassLoader(String, ClassLoader)
- Constructor for class java.lang.
ClassLoader
Creates a new class loader of the specified name and using the
 specified parent class loader for delegation.
ClassLoaderReference
- Interface in
com.sun.jdi
A class loader object from the target VM.
ClassLoaderRepository
- Interface in
javax.management.loading
Instances of this interface are used to keep the list of ClassLoaders
 registered in an MBean Server.
ClassLoadingMXBean
- Interface in
java.lang.management
The management interface for the class loading system of
 the Java virtual machine.
classModifiers()
- Static method in class java.lang.reflect.
Modifier
Return an
int
value OR-ing together the source language
 modifiers that can be applied to a class.
classname
- Variable in exception class java.io.
InvalidClassException
Name of the invalid class.
className
- Variable in class javax.naming.
Reference
Contains the fully-qualified name of the class of the object to which
 this Reference refers.
className()
- Method in exception class com.sun.jdi.
ClassNotLoadedException
className()
- Method in interface com.sun.jdi.event.
ClassUnloadEvent
Returns the
name of the class
that has been unloaded.
ClassNotFoundException
- Exception Class in
java.lang
Thrown when an application tries to load in a class through its
 string name using:
 
 The
forName
method in class
Class
.
ClassNotFoundException()
- Constructor for exception class java.lang.
ClassNotFoundException
Constructs a
ClassNotFoundException
with no detail message.
ClassNotFoundException(String)
- Constructor for exception class java.lang.
ClassNotFoundException
Constructs a
ClassNotFoundException
with the
 specified detail message.
ClassNotFoundException(String, Throwable)
- Constructor for exception class java.lang.
ClassNotFoundException
Constructs a
ClassNotFoundException
with the
 specified detail message and optional exception that was
 raised while loading the class.
ClassNotLoadedException
- Exception Class in
com.sun.jdi
Thrown to indicate that the requested class has
 not yet been loaded through the appropriate class loader.
ClassNotLoadedException(String)
- Constructor for exception class com.sun.jdi.
ClassNotLoadedException
ClassNotLoadedException(String, String)
- Constructor for exception class com.sun.jdi.
ClassNotLoadedException
ClassNotPreparedException
- Exception Class in
com.sun.jdi
Thrown to indicate that the requested operation cannot be
 completed because the specified class has not yet been prepared.
ClassNotPreparedException()
- Constructor for exception class com.sun.jdi.
ClassNotPreparedException
ClassNotPreparedException(String)
- Constructor for exception class com.sun.jdi.
ClassNotPreparedException
classObject()
- Method in interface com.sun.jdi.
ReferenceType
Returns the class object that corresponds to this type in the
 target VM.
ClassObjectReference
- Interface in
com.sun.jdi
An instance of java.lang.Class from the target VM.
classPath()
- Method in interface com.sun.jdi.
PathSearchingVirtualMachine
Get the class path for this virtual machine.
ClassPrepareEvent
- Interface in
com.sun.jdi.event
Notification of a class prepare in the target VM.
ClassPrepareRequest
- Interface in
com.sun.jdi.request
Request for notification when a class is prepared in the target VM.
classPrepareRequests()
- Method in interface com.sun.jdi.request.
EventRequestManager
Return an unmodifiable list of the enabled and disabled class prepare requests.
classSignature()
- Method in interface com.sun.jdi.event.
ClassUnloadEvent
Returns the
type signature of the class
that has been unloaded.
ClassTree
- Interface in
com.sun.source.tree
A tree node for a class, interface, enum, record, or annotation
 type declaration.
ClassType
- Interface in
com.sun.jdi
A mirror of a class in the target VM.
ClassUnloadEvent
- Interface in
com.sun.jdi.event
Notification of a class unload in the target VM.
ClassUnloadRequest
- Interface in
com.sun.jdi.request
Request for notification when a class is unloaded in the target VM.
classUnloadRequests()
- Method in interface com.sun.jdi.request.
EventRequestManager
Return an unmodifiable list of the enabled and disabled class unload requests.
ClassValue<T>
- Class in
java.lang
Lazily associate a computed value with (potentially) every type.
ClassValue()
- Constructor for class java.lang.
ClassValue
Sole constructor.
clean()
- Method in interface java.lang.ref.
Cleaner.Cleanable
Unregisters the cleanable and invokes the cleaning action.
clean(ObjID[], long, VMID, boolean)
- Method in interface java.rmi.dgc.
DGC
The clean call removes the 'vmid' from the reference list of
 each remote object indicated in 'id's.
CLEAN_FAX_DATA_ERRORS_CORRECTED
- Static variable in class javax.imageio.plugins.tiff.
FaxTIFFTagSet
A value to be used with the "CleanFaxData" tag.
CLEAN_FAX_DATA_ERRORS_UNCORRECTED
- Static variable in class javax.imageio.plugins.tiff.
FaxTIFFTagSet
A value to be used with the "CleanFaxData" tag.
CLEAN_FAX_DATA_NO_ERRORS
- Static variable in class javax.imageio.plugins.tiff.
FaxTIFFTagSet
A value to be used with the "CleanFaxData" tag.
Cleaner
- Class in
java.lang.ref
Cleaner
manages a set of object references and corresponding cleaning actions.
Cleaner.Cleanable
- Interface in
java.lang.ref
Cleanable
represents an object and a
 cleaning action registered in a
Cleaner
.
clear()
- Method in class com.sun.net.httpserver.
Headers
clear()
- Method in class java.awt.
List
Deprecated.
As of JDK version 1.1,
 replaced by
removeAll()
.
clear()
- Method in class java.awt.
RenderingHints
Clears this
RenderingHints
object of all key/value
 pairs.
clear()
- Method in class java.beans.beancontext.
BeanContextSupport
clear the children (Unsupported)
 implementations must synchronized on the hierarchy lock and "children" protected field
clear()
- Method in class java.lang.ref.
Reference
Clears this reference object.
clear()
- Method in class java.nio.
Buffer
Clears this buffer.
clear()
- Method in class java.nio.
ByteBuffer
Clears this buffer.
clear()
- Method in class java.nio.
CharBuffer
Clears this buffer.
clear()
- Method in class java.nio.
DoubleBuffer
Clears this buffer.
clear()
- Method in class java.nio.
FloatBuffer
Clears this buffer.
clear()
- Method in class java.nio.
IntBuffer
Clears this buffer.
clear()
- Method in class java.nio.
LongBuffer
Clears this buffer.
clear()
- Method in class java.nio.
MappedByteBuffer
Clears this buffer.
clear()
- Method in class java.nio.
ShortBuffer
Clears this buffer.
clear()
- Method in class java.security.
Provider
Clears this
Provider
so that it no longer contains the properties
 used to look up facilities implemented by the
Provider
.
clear()
- Method in class java.util.
AbstractCollection
Removes all of the elements from this collection (optional operation).
clear()
- Method in class java.util.
AbstractList
Removes all of the elements from this list (optional operation).
clear()
- Method in class java.util.
AbstractMap
Removes all of the mappings from this map (optional operation).
clear()
- Method in class java.util.
AbstractQueue
Removes all of the elements from this queue.
clear()
- Method in class java.util.
ArrayDeque
Removes all of the elements from this deque.
clear()
- Method in class java.util.
ArrayList
Removes all of the elements from this list.
clear()
- Method in class java.util.
BitSet
Sets all of the bits in this BitSet to
false
.
clear()
- Method in class java.util.
Calendar
Sets all the calendar field values and the time value
 (millisecond offset from the
Epoch
) of
 this
Calendar
undefined.
clear()
- Method in interface java.util.
Collection
Removes all of the elements from this collection (optional operation).
clear()
- Method in class java.util.concurrent.
ArrayBlockingQueue
Atomically removes all of the elements from this queue.
clear()
- Method in class java.util.concurrent.
ConcurrentHashMap
Removes all of the mappings from this map.
clear()
- Method in class java.util.concurrent.
ConcurrentHashMap.KeySetView
Removes all of the elements from this view, by removing all
 the mappings from the map backing this view.
clear()
- Method in class java.util.concurrent.
ConcurrentLinkedDeque
Removes all of the elements from this deque.
clear()
- Method in class java.util.concurrent.
ConcurrentLinkedQueue
clear()
- Method in class java.util.concurrent.
ConcurrentSkipListMap
Removes all of the mappings from this map.
clear()
- Method in class java.util.concurrent.
ConcurrentSkipListSet
Removes all of the elements from this set.
clear()
- Method in class java.util.concurrent.
CopyOnWriteArrayList
Removes all of the elements from this list.
clear()
- Method in class java.util.concurrent.
CopyOnWriteArraySet
Removes all of the elements from this set.
clear()
- Method in class java.util.concurrent.
DelayQueue
Atomically removes all of the elements from this delay queue.
clear()
- Method in class java.util.concurrent.
LinkedBlockingDeque
Atomically removes all of the elements from this deque.
clear()
- Method in class java.util.concurrent.
LinkedBlockingQueue
Atomically removes all of the elements from this queue.
clear()
- Method in class java.util.concurrent.
LinkedTransferQueue
clear()
- Method in class java.util.concurrent.
PriorityBlockingQueue
Atomically removes all of the elements from this queue.
clear()
- Method in class java.util.concurrent.
SynchronousQueue
Does nothing.
clear()
- Method in class java.util.
EnumMap
Removes all mappings from this map.
clear()
- Method in class java.util.
HashMap
Removes all of the mappings from this map.
clear()
- Method in class java.util.
HashSet
Removes all of the elements from this set.
clear()
- Method in class java.util.
Hashtable
Clears this hashtable so that it contains no keys.
clear()
- Method in class java.util.
IdentityHashMap
Removes all of the mappings from this map.
clear()
- Method in class java.util.jar.
Attributes
Removes all attributes from this Map.
clear()
- Method in class java.util.jar.
Manifest
Clears the main Attributes as well as the entries in this Manifest.
clear()
- Method in class java.util.
LinkedHashMap
Removes all of the mappings from this map.
clear()
- Method in class java.util.
LinkedList
Removes all of the elements from this list.
clear()
- Method in interface java.util.
List
Removes all of the elements from this list (optional operation).
clear()
- Method in class java.util.
Locale.Builder
Resets the builder to its initial, empty state.
clear()
- Method in interface java.util.
Map
Removes all of the mappings from this map (optional operation).
clear()
- Method in class java.util.prefs.
AbstractPreferences
Implements the
clear
method as per the specification in
Preferences.clear()
.
clear()
- Method in class java.util.prefs.
Preferences
Removes all of the preferences (key-value associations) in this
 preference node.
clear()
- Method in class java.util.
PriorityQueue
Removes all of the elements from this priority queue.
clear()
- Method in interface java.util.
Set
Removes all of the elements from this set (optional operation).
clear()
- Method in class java.util.
TreeMap
Removes all of the mappings from this map.
clear()
- Method in class java.util.
TreeSet
Removes all of the elements from this set.
clear()
- Method in class java.util.
Vector
Removes all of the elements from this Vector.
clear()
- Method in class java.util.
WeakHashMap
Removes all of the mappings from this map.
clear()
- Method in class javax.accessibility.
AccessibleRelationSet
Removes all the relations from the current relation set.
clear()
- Method in class javax.accessibility.
AccessibleStateSet
Removes all the states from the current state set.
clear()
- Method in interface javax.management.openmbean.
TabularData
Removes all
CompositeData
values (ie rows) from this
TabularData
instance.
clear()
- Method in class javax.management.openmbean.
TabularDataSupport
Removes all rows from this
TabularDataSupport
instance.
clear()
- Method in interface javax.naming.directory.
Attribute
Removes all values from this attribute.
clear()
- Method in class javax.naming.directory.
BasicAttribute
clear()
- Method in class javax.naming.
Reference
Deletes all addresses from this reference.
clear()
- Method in interface javax.print.attribute.
AttributeSet
Removes all attributes from this attribute set.
clear()
- Method in class javax.print.attribute.
HashAttributeSet
Removes all attributes from this attribute set.
clear()
- Method in class javax.script.
SimpleBindings
Removes all of the mappings from this map (optional operation).
clear()
- Method in class javax.swing.
ActionMap
Removes all the mappings from this
ActionMap
.
clear()
- Method in class javax.swing.
ComponentInputMap
Removes all the mappings from this object.
clear()
- Method in class javax.swing.
DefaultListModel
Removes all of the elements from this list.
clear()
- Method in class javax.swing.
InputMap
Removes all the mappings from this
InputMap
.
clear()
- Method in class javax.xml.datatype.
XMLGregorianCalendar
Unset all fields to undefined.
clear()
- Method in class org.xml.sax.helpers.
AttributeListImpl
Deprecated.
Clear the attribute list.
clear()
- Method in class org.xml.sax.helpers.
AttributesImpl
Clear the attribute list for reuse.
clear(int)
- Method in class java.util.
BitSet
Sets the bit specified by the index to
false
.
clear(int)
- Method in class java.util.
Calendar
Sets the given calendar field value and the time value
 (millisecond offset from the
Epoch
) of
 this
Calendar
undefined.
clear(int, int)
- Method in class java.util.
BitSet
Sets the bits from the specified
fromIndex
(inclusive) to the
 specified
toIndex
(exclusive) to
false
.
Clear
- Static variable in class java.awt.
AlphaComposite
AlphaComposite
object that implements the opaque CLEAR rule
 with an alpha of 1.0f.
CLEAR
- Static variable in class java.awt.
AlphaComposite
Both the color and the alpha of the destination are cleared
 (Porter-Duff Clear rule).
CLEAR
- Static variable in class javax.swing.text.html.
CSS.Attribute
CSS attribute "clear".
CLEAR
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "clear"
CLEAR_GLOBAL_FOCUS_OWNER
- Enum constant in enum class java.awt.event.
FocusEvent.Cause
Clearing global focus owner.
clearAbortRequest()
- Method in class javax.imageio.
ImageReader
Clears any previous abort request.
clearAbortRequest()
- Method in class javax.imageio.
ImageWriter
Clears any previous abort request.
clearAccessibleSelection()
- Method in class java.awt.
List.AccessibleAWTList
Clears the selection in the object, so that nothing in the
 object is selected.
clearAccessibleSelection()
- Method in class java.awt.
MenuComponent.AccessibleAWTMenuComponent
Clears the selection in the object, so that no children in the
 object are selected.
clearAccessibleSelection()
- Method in interface javax.accessibility.
AccessibleSelection
Clears the selection in the object, so that no children in the object are
 selected.
clearAccessibleSelection()
- Method in class javax.swing.
JComboBox.AccessibleJComboBox
Clears the selection in the object, so that no children in the
 object are selected.
clearAccessibleSelection()
- Method in class javax.swing.
JList.AccessibleJList
Clears the selection in the object, so that nothing in the
 object is selected.
clearAccessibleSelection()
- Method in class javax.swing.
JMenu.AccessibleJMenu
Clears the selection in the object, so that nothing in the
 object is selected.
clearAccessibleSelection()
- Method in class javax.swing.
JMenuBar.AccessibleJMenuBar
Clears the selection in the object, so that nothing in the
 object is selected.
clearAccessibleSelection()
- Method in class javax.swing.
JTabbedPane.AccessibleJTabbedPane
clearAccessibleSelection()
- Method in class javax.swing.
JTable.AccessibleJTable
Clears the selection in the object, so that no children in the
 object are selected.
clearAccessibleSelection()
- Method in class javax.swing.
JTree.AccessibleJTree.AccessibleJTreeNode
Clears the selection in the object, so that nothing in the
 object is selected.
clearAccessibleSelection()
- Method in class javax.swing.
JTree.AccessibleJTree
Clears the selection in the object, so that nothing in the
 object is selected.
clearAssertionStatus()
- Method in class java.lang.
ClassLoader
Sets the default assertion status for this class loader to
false
and discards any package defaults or class assertion
 status settings associated with the class loader.
clearAutoscroll()
- Method in class java.awt.dnd.
DropTarget
clear autoscrolling
clearBatch()
- Method in interface java.sql.
Statement
Empties this
Statement
object's current list of
 SQL commands.
clearBit(int)
- Method in class java.math.
BigInteger
Returns a BigInteger whose value is equivalent to this BigInteger
 with the designated bit cleared.
clearCache()
- Static method in class java.util.
ResourceBundle
Removes all resource bundles from the cache that have been loaded
 by the caller's module.
clearCache(ClassLoader)
- Static method in class java.util.
ResourceBundle
Removes all resource bundles from the cache that have been loaded
 by the given class loader.
clearChanged()
- Method in class java.util.
Observable
Deprecated.
Indicates that this object has no longer changed, or that it has
 already notified all of its observers of its most recent change,
 so that the
hasChanged
method will now return
false
.
clearError()
- Method in class java.io.
PrintStream
Clears the error state of this stream.
clearError()
- Method in class java.io.
PrintWriter
Clears the error state of this stream.
clearExtensions()
- Method in class java.util.
Locale.Builder
Resets the extensions to their initial, empty state.
clearFocusOwner()
- Method in class java.awt.
KeyboardFocusManager
Clears the focus owner at both the Java and native levels if the
 focus owner exists and resides in the same context as the calling thread,
 otherwise the method returns silently.
clearGlobalFocusOwner()
- Method in class java.awt.
KeyboardFocusManager
Clears the global focus owner at both the Java and native levels.
clearIconCache()
- Method in class javax.swing.plaf.basic.
BasicFileChooserUI.BasicFileView
Clears the icon cache.
clearIconCache()
- Method in class javax.swing.plaf.basic.
BasicFileChooserUI
Clears the icon cache.
clearParameters()
- Method in interface java.sql.
PreparedStatement
Clears the current parameter values immediately.
clearParameters()
- Method in class javax.sql.rowset.
BaseRowSet
Clears all of the current parameter values in this
RowSet
object's internal representation of the parameters to be set in
 this
RowSet
object's command when it is executed.
clearParameters()
- Method in interface javax.sql.
RowSet
Clears the parameters set for this
RowSet
object's command.
clearParameters()
- Method in class javax.xml.transform.
Transformer
Clear all parameters set with setParameter.
clearPassword()
- Method in class javax.crypto.spec.
PBEKeySpec
Clears the internal copy of the password.
clearPassword()
- Method in class javax.security.auth.callback.
PasswordCallback
Clear the retrieved password.
clearProperty(String)
- Static method in class java.lang.
System
Removes the system property indicated by the specified key.
clearRect(int, int, int, int)
- Method in class java.awt.
Graphics
Clears the specified rectangle by filling it with the background
 color of the current drawing surface.
clearRect(int, int, int, int)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.clearRect
.
clearSelectedPath()
- Method in class javax.swing.
MenuSelectionManager
Tell the menu selection to close and unselect all the menu components.
clearSelection()
- Method in class javax.swing.
ButtonGroup
Clears the selection such that none of the buttons
 in the
ButtonGroup
are selected.
clearSelection()
- Method in class javax.swing.
DefaultListSelectionModel
Change the selection to the empty set.
clearSelection()
- Method in class javax.swing.
DefaultSingleSelectionModel
Clears the selection (to -1).
clearSelection()
- Method in class javax.swing.
JList
Clears the selection; after calling this method,
isSelectionEmpty
will return
true
.
clearSelection()
- Method in class javax.swing.
JTable
Deselects all selected columns and rows.
clearSelection()
- Method in class javax.swing.
JTree
Clears the selection.
clearSelection()
- Method in interface javax.swing.
ListSelectionModel
Change the selection to the empty set.
clearSelection()
- Method in interface javax.swing.
SingleSelectionModel
Clears the selection (to -1).
clearSelection()
- Method in class javax.swing.tree.
DefaultTreeSelectionModel
Empties the current selection.
clearSelection()
- Method in interface javax.swing.tree.
TreeSelectionModel
Empties the current selection.
clearTextShiftOffset()
- Method in class javax.swing.plaf.basic.
BasicButtonUI
Clears the offset of the text.
clearToggledPaths()
- Method in class javax.swing.
JTree
Clears the cache of toggled tree paths.
clearWarnings()
- Method in interface java.sql.
Connection
Clears all warnings reported for this
Connection
object.
clearWarnings()
- Method in interface java.sql.
ResultSet
Clears all warnings reported on this
ResultSet
object.
clearWarnings()
- Method in interface java.sql.
Statement
Clears all the warnings reported on this
Statement
object.
click()
- Method in interface org.w3c.dom.html.
HTMLInputElement
Simulate a mouse-click.
CLICK
- Static variable in interface javax.accessibility.
AccessibleAction
An action which causes a component to execute its default action.
clickCount
- Variable in class java.awt.
Event
Deprecated.
For
MOUSE_DOWN
events, this field indicates the
 number of consecutive clicks.
clickCountToStart
- Variable in class javax.swing.
DefaultCellEditor
An integer specifying the number of clicks needed to start editing.
clientClosed(RMIConnection)
- Method in class javax.management.remote.rmi.
RMIServerImpl
Method called when a client connection created by
makeClient
is closed.
clientCodeEnter()
- Method in class jdk.jshell.execution.
DirectExecutionControl
Marks entry into user code.
clientCodeEnter()
- Method in class jdk.jshell.execution.
LocalExecutionControl
clientCodeEnter()
- Method in class jdk.jshell.execution.
RemoteExecutionControl
clientCodeLeave()
- Method in class jdk.jshell.execution.
DirectExecutionControl
Marks departure from user code.
clientCodeLeave()
- Method in class jdk.jshell.execution.
LocalExecutionControl
Client Formatted Print Data
- Search tag in class javax.print.DocFlavor
Section
ClientInfoStatus
- Enum Class in
java.sql
Enumeration for status of the reason that a property could not be set
 via a call to
Connection.setClientInfo
clip(Shape)
- Method in class java.awt.
Graphics2D
Intersects the current
Clip
with the interior of the
 specified
Shape
and sets the
Clip
to the
 resulting intersection.
Clip
- Interface in
javax.sound.sampled
The
Clip
interface represents a special kind of data line whose audio
 data can be loaded prior to playback, instead of being streamed in real time.
Clipboard
- Class in
java.awt.datatransfer
A class that implements a mechanism to transfer data using cut/copy/paste
 operations.
Clipboard(String)
- Constructor for class java.awt.datatransfer.
Clipboard
Creates a clipboard object.
ClipboardOwner
- Interface in
java.awt.datatransfer
Defines the interface for classes that will provide data to a clipboard.
clipRect(int, int, int, int)
- Method in class java.awt.
Graphics
Intersects the current clip with the specified rectangle.
clipRect(int, int, int, int)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.clipRect
.
Clob
- Interface in
java.sql
The mapping in the Java programming language
 for the SQL
CLOB
type.
CLOB
- Enum constant in enum class java.sql.
JDBCType
Identifies the generic SQL type
CLOB
.
CLOB
- Static variable in class java.sql.
Types
The constant in the Java programming language, sometimes referred to
 as a type code, that identifies the generic SQL type
CLOB
.
Clock
- Class in
java.time
A clock providing access to the current instant, date and time using a time-zone.
Clock()
- Constructor for class java.time.
Clock
Constructor accessible by subclasses.
CLOCK_HOUR_OF_AMPM
- Enum constant in enum class java.time.temporal.
ChronoField
The clock-hour-of-am-pm.
CLOCK_HOUR_OF_DAY
- Enum constant in enum class java.time.temporal.
ChronoField
The clock-hour-of-day.
clockSequence()
- Method in class java.util.
UUID
The clock sequence value associated with this UUID.
clone()
- Method in class java.awt.
BufferCapabilities
clone()
- Method in class java.awt.datatransfer.
DataFlavor
Returns a clone of this
DataFlavor
.
clone()
- Method in class java.awt.font.
TextLayout
Creates a copy of this
TextLayout
.
clone()
- Method in class java.awt.font.
TextMeasurer
clone()
- Method in class java.awt.geom.
AffineTransform
Returns a copy of this
AffineTransform
object.
clone()
- Method in class java.awt.geom.
Area
Returns an exact copy of this
Area
object.
clone()
- Method in class java.awt.geom.
CubicCurve2D
Creates a new object of the same class as this object.
clone()
- Method in class java.awt.geom.
Dimension2D
Creates a new object of the same class as this object.
clone()
- Method in class java.awt.geom.
Line2D
Creates a new object of the same class as this object.
clone()
- Method in class java.awt.geom.
Path2D
Creates a new object of the same class as this object.
clone()
- Method in class java.awt.geom.
Path2D.Double
Creates a new object of the same class as this object.
clone()
- Method in class java.awt.geom.
Path2D.Float
Creates a new object of the same class as this object.
clone()
- Method in class java.awt.geom.
Point2D
Creates a new object of the same class and with the
 same contents as this object.
clone()
- Method in class java.awt.geom.
QuadCurve2D
Creates a new object of the same class and with the same contents
 as this object.
clone()
- Method in class java.awt.geom.
RectangularShape
Creates a new object of the same class and with the same
 contents as this object.
clone()
- Method in class java.awt.
GridBagConstraints
Creates a copy of this grid bag constraint.
clone()
- Method in class java.awt.image.
ImageFilter
Clones this object.
clone()
- Method in class java.awt.image.
Kernel
Clones this object.
clone()
- Method in class java.awt.image.renderable.
ParameterBlock
Creates a copy of a
ParameterBlock
.
clone()
- Method in class java.awt.image.renderable.
RenderContext
Makes a copy of a RenderContext.
clone()
- Method in class java.awt.
ImageCapabilities
clone()
- Method in class java.awt.
Insets
Create a copy of this object.
clone()
- Method in class java.awt.
JobAttributes
Creates and returns a copy of this
JobAttributes
.
clone()
- Method in class java.awt.
PageAttributes
Creates and returns a copy of this PageAttributes.
clone()
- Method in class java.awt.print.
PageFormat
Makes a copy of this
PageFormat
with the same
 contents as this
PageFormat
.
clone()
- Method in class java.awt.print.
Paper
Creates a copy of this
Paper
with the same contents
 as this
Paper
.
clone()
- Method in class java.awt.
RenderingHints
Creates a clone of this
RenderingHints
object
 that has the same contents as this
RenderingHints
object.
clone()
- Method in class java.lang.
Enum
Throws CloneNotSupportedException.
clone()
- Method in class java.lang.
Object
Creates and returns a copy of this object.
clone()
- Method in class java.lang.ref.
Reference
Throws
CloneNotSupportedException
.
clone()
- Method in class java.lang.
Thread
Throws CloneNotSupportedException as a Thread can not be meaningfully
 cloned.
clone()
- Method in class java.net.
HttpCookie
Create and return a copy of this object.
clone()
- Method in class java.rmi.server.
UnicastRemoteObject
Returns a clone of the remote object that is distinct from
 the original.
clone()
- Method in interface java.security.cert.
CertPathBuilderResult
Makes a copy of this
CertPathBuilderResult
.
clone()
- Method in interface java.security.cert.
CertPathParameters
Makes a copy of this
CertPathParameters
.
clone()
- Method in interface java.security.cert.
CertPathValidatorResult
Makes a copy of this
CertPathValidatorResult
.
clone()
- Method in interface java.security.cert.
CertSelector
Makes a copy of this
CertSelector
.
clone()
- Method in interface java.security.cert.
CertStoreParameters
Makes a copy of this
CertStoreParameters
.
clone()
- Method in class java.security.cert.
CollectionCertStoreParameters
Returns a copy of this object.
clone()
- Method in interface java.security.cert.
CRLSelector
Makes a copy of this
CRLSelector
.
clone()
- Method in class java.security.cert.
LDAPCertStoreParameters
Returns a copy of this object.
clone()
- Method in class java.security.cert.
PKIXCertPathChecker
Returns a clone of this object.
clone()
- Method in class java.security.cert.
PKIXCertPathValidatorResult
Returns a copy of this object.
clone()
- Method in class java.security.cert.
PKIXParameters
Makes a copy of this
PKIXParameters
object.
clone()
- Method in class java.security.cert.
PKIXRevocationChecker
clone()
- Method in class java.security.cert.
URICertStoreParameters
Returns a copy of this object.
clone()
- Method in class java.security.cert.
X509CertSelector
Returns a copy of this object.
clone()
- Method in class java.security.cert.
X509CRLSelector
Returns a copy of this object.
clone()
- Method in class java.security.
MessageDigest
Returns a clone if the implementation is cloneable.
clone()
- Method in class java.security.
MessageDigestSpi
Returns a clone if the implementation is cloneable.
clone()
- Method in class java.security.
Signature
Returns a clone if the implementation is cloneable.
clone()
- Method in class java.security.
SignatureSpi
Returns a clone if the implementation is cloneable.
clone()
- Method in class java.text.
BreakIterator
Create a copy of this iterator
clone()
- Method in interface java.text.
CharacterIterator
Create a copy of this iterator
clone()
- Method in class java.text.
ChoiceFormat
Overrides Cloneable
clone()
- Method in class java.text.
Collator
Overrides Cloneable
clone()
- Method in class java.text.
CompactNumberFormat
Creates and returns a copy of this
CompactNumberFormat
instance.
clone()
- Method in class java.text.
DateFormat
Overrides Cloneable
clone()
- Method in class java.text.
DateFormatSymbols
Overrides Cloneable
clone()
- Method in class java.text.
DecimalFormat
Standard override; no change in semantics.
clone()
- Method in class java.text.
DecimalFormatSymbols
Standard override.
clone()
- Method in class java.text.
Format
Creates and returns a copy of this object.
clone()
- Method in class java.text.
MessageFormat
Creates and returns a copy of this object.
clone()
- Method in class java.text.
NumberFormat
Overrides Cloneable.
clone()
- Method in class java.text.
RuleBasedCollator
Standard override; no change in semantics.
clone()
- Method in class java.text.
SimpleDateFormat
Creates a copy of this
SimpleDateFormat
.
clone()
- Method in class java.text.
StringCharacterIterator
Creates a copy of this iterator.
clone()
- Method in class java.util.
AbstractMap
Returns a shallow copy of this
AbstractMap
instance: the keys
 and values themselves are not cloned.
clone()
- Method in class java.util.
ArrayDeque
Returns a copy of this deque.
clone()
- Method in class java.util.
ArrayList
Returns a shallow copy of this
ArrayList
instance.
clone()
- Method in class java.util.
BitSet
Cloning this
BitSet
produces a new
BitSet
that is equal to it.
clone()
- Method in class java.util.
Calendar
Creates and returns a copy of this object.
clone()
- Method in class java.util.concurrent.
ConcurrentSkipListMap
Returns a shallow copy of this
ConcurrentSkipListMap
instance.
clone()
- Method in class java.util.concurrent.
ConcurrentSkipListSet
Returns a shallow copy of this
ConcurrentSkipListSet
instance.
clone()
- Method in class java.util.concurrent.
CopyOnWriteArrayList
Returns a shallow copy of this list.
clone()
- Method in class java.util.
Date
Return a copy of this object.
clone()
- Method in class java.util.
EnumMap
Returns a shallow copy of this enum map.
clone()
- Method in class java.util.
EnumSet
Returns a copy of this set.
clone()
- Method in class java.util.
HashMap
Returns a shallow copy of this
HashMap
instance: the keys and
 values themselves are not cloned.
clone()
- Method in class java.util.
HashSet
Returns a shallow copy of this
HashSet
instance: the elements
 themselves are not cloned.
clone()
- Method in class java.util.
Hashtable
Creates a shallow copy of this hashtable.
clone()
- Method in class java.util.
IdentityHashMap
Returns a shallow copy of this identity hash map: the keys and values
 themselves are not cloned.
clone()
- Method in class java.util.jar.
Attributes
Returns a copy of the Attributes, implemented as follows:
clone()
- Method in class java.util.jar.
Manifest
Returns a shallow copy of this Manifest.
clone()
- Method in class java.util.
LinkedList
Returns a shallow copy of this
LinkedList
.
clone()
- Method in class java.util.
Locale
Overrides Cloneable.
clone()
- Method in class java.util.
SimpleTimeZone
Returns a clone of this
SimpleTimeZone
instance.
clone()
- Method in class java.util.
TimeZone
Creates a copy of this
TimeZone
.
clone()
- Method in class java.util.
TreeMap
Returns a shallow copy of this
TreeMap
instance.
clone()
- Method in class java.util.
TreeSet
Returns a shallow copy of this
TreeSet
instance.
clone()
- Method in class java.util.
Vector
Returns a clone of this vector.
clone()
- Method in class java.util.zip.
ZipEntry
Returns a copy of this entry.
clone()
- Method in class javax.crypto.
Mac
Returns a clone if the provider implementation is cloneable.
clone()
- Method in class javax.crypto.
MacSpi
Returns a clone if the implementation is cloneable.
clone()
- Method in class javax.imageio.plugins.tiff.
TIFFDirectory
Clones the directory and all the fields contained therein.
clone()
- Method in class javax.imageio.plugins.tiff.
TIFFField
Clones the field and all the information contained therein.
clone()
- Method in interface javax.management.
Descriptor
Returns a descriptor which is equal to this descriptor.
clone()
- Method in class javax.management.
ImmutableDescriptor
Returns a descriptor which is equal to this descriptor.
clone()
- Method in class javax.management.
MBeanAttributeInfo
Returns a shallow clone of this instance.
clone()
- Method in class javax.management.
MBeanConstructorInfo
Returns a shallow clone of this instance.
clone()
- Method in class javax.management.
MBeanInfo
Returns a shallow clone of this instance.
clone()
- Method in class javax.management.
MBeanNotificationInfo
Returns a shallow clone of this instance.
clone()
- Method in class javax.management.
MBeanOperationInfo
Returns a shallow clone of this instance.
clone()
- Method in class javax.management.
MBeanParameterInfo
Returns a shallow clone of this instance.
clone()
- Method in class javax.management.modelmbean.
DescriptorSupport
Returns a new Descriptor which is a duplicate of the Descriptor.
clone()
- Method in class javax.management.modelmbean.
ModelMBeanAttributeInfo
Creates and returns a new ModelMBeanAttributeInfo which is a duplicate of this ModelMBeanAttributeInfo.
clone()
- Method in class javax.management.modelmbean.
ModelMBeanConstructorInfo
Creates and returns a new ModelMBeanConstructorInfo which is a duplicate of this ModelMBeanConstructorInfo.
clone()
- Method in interface javax.management.modelmbean.
ModelMBeanInfo
Creates and returns a copy of this object.
clone()
- Method in class javax.management.modelmbean.
ModelMBeanInfoSupport
Returns a shallow clone of this instance.
clone()
- Method in class javax.management.modelmbean.
ModelMBeanNotificationInfo
Creates and returns a new ModelMBeanNotificationInfo which is a
 duplicate of this ModelMBeanNotificationInfo.
clone()
- Method in class javax.management.modelmbean.
ModelMBeanOperationInfo
Creates and returns a new ModelMBeanOperationInfo which is a
 duplicate of this ModelMBeanOperationInfo.
clone()
- Method in class javax.management.openmbean.
TabularDataSupport
Returns a clone of this
TabularDataSupport
instance:
 the clone is obtained by calling
super.clone()
, and then cloning the underlying map.
clone()
- Method in class javax.management.relation.
Role
Clone the role object.
clone()
- Method in class javax.management.relation.
RoleUnresolved
Clone this object.
clone()
- Method in class javax.naming.
CompositeName
Generates a copy of this composite name.
clone()
- Method in class javax.naming.
CompoundName
Creates a copy of this compound name.
clone()
- Method in interface javax.naming.directory.
Attribute
Makes a copy of the attribute.
clone()
- Method in interface javax.naming.directory.
Attributes
Makes a copy of the attribute set.
clone()
- Method in class javax.naming.directory.
BasicAttribute
clone()
- Method in class javax.naming.directory.
BasicAttributes
clone()
- Method in class javax.naming.ldap.
LdapName
Generates a new copy of this name.
clone()
- Method in interface javax.naming.
Name
Generates a new copy of this name.
clone()
- Method in class javax.naming.
Reference
Makes a copy of this reference using its class name
 list of addresses, class factory name and class factory location.
clone()
- Method in class javax.print.attribute.
EnumSyntax
Returns a clone of this enumeration value, which to preserve the
 semantics of enumeration values is the same object as this enumeration
 value.
clone()
- Method in class javax.sound.midi.
MetaMessage
Creates a new object of the same class and with the same contents as this
 object.
clone()
- Method in class javax.sound.midi.
MidiMessage
Creates a new object of the same class and with the same contents as this
 object.
clone()
- Method in class javax.sound.midi.
ShortMessage
Creates a new object of the same class and with the same contents as this
 object.
clone()
- Method in class javax.sound.midi.
SysexMessage
Creates a new object of the same class and with the same contents as this
 object.
clone()
- Method in class javax.sql.rowset.serial.
SerialArray
Returns a clone of this
SerialArray
.
clone()
- Method in class javax.sql.rowset.serial.
SerialBlob
Returns a clone of this
SerialBlob
.
clone()
- Method in class javax.sql.rowset.serial.
SerialClob
Returns a clone of this
SerialClob
.
clone()
- Method in class javax.sql.rowset.serial.
SerialDatalink
Returns a clone of this
SerialDatalink
.
clone()
- Method in class javax.sql.rowset.serial.
SerialJavaObject
Returns a clone of this
SerialJavaObject
.
clone()
- Method in class javax.sql.rowset.serial.
SerialRef
Returns a clone of this
SerialRef
.
clone()
- Method in class javax.sql.rowset.serial.
SerialStruct
Returns a clone of this
SerialStruct
.
clone()
- Method in class javax.swing.
AbstractAction
Clones the abstract action.
clone()
- Method in class javax.swing.
DefaultListSelectionModel
Returns a clone of this selection model with the same selection.
clone()
- Method in class javax.swing.
JFormattedTextField.AbstractFormatter
Clones the
AbstractFormatter
.
clone()
- Method in class javax.swing.text.
DefaultFormatter
Creates a copy of the DefaultFormatter.
clone()
- Method in class javax.swing.text.
EditorKit
Creates a copy of the editor kit.
clone()
- Method in class javax.swing.text.
ElementIterator
Clones the
ElementIterator
.
clone()
- Method in class javax.swing.text.
GlyphView
Creates a shallow copy.
clone()
- Method in class javax.swing.text.html.
HTMLEditorKit
Creates a copy of the editor kit.
clone()
- Method in class javax.swing.text.
InternationalFormatter
Creates a copy of the DefaultFormatter.
clone()
- Method in class javax.swing.text.
Segment
Creates a shallow copy.
clone()
- Method in class javax.swing.text.
SimpleAttributeSet
Clones a set of attributes.
clone()
- Method in class javax.swing.text.
StyleContext.SmallAttributeSet
Clones a set of attributes.
clone()
- Method in class javax.swing.text.
StyledEditorKit
Creates a copy of the editor kit.
clone()
- Method in class javax.swing.tree.
DefaultMutableTreeNode
Overridden to make clone public.
clone()
- Method in class javax.swing.tree.
DefaultTreeSelectionModel
Returns a clone of this object with the same selection.
clone()
- Method in class javax.xml.datatype.
XMLGregorianCalendar
Creates and returns a copy of this object.
clone(Element, Element)
- Method in class javax.swing.text.
DefaultStyledDocument.ElementBuffer
Creates a copy of this element, with a different
 parent.
Cloneable
- Interface in
java.lang
A class implements the
Cloneable
interface to
 indicate to the
Object.clone()
method that it
 is legal for that method to make a
 field-for-field copy of instances of that class.
cloneContents()
- Method in interface org.w3c.dom.ranges.
Range
Duplicates the contents of a Range
cloneNode(boolean)
- Method in class javax.imageio.metadata.
IIOMetadataNode
Returns a duplicate of this node.
cloneNode(boolean)
- Method in interface org.w3c.dom.
Node
Returns a duplicate of this node, i.e., serves as a generic copy
 constructor for nodes.
CloneNotSupportedException
- Exception Class in
java.lang
Thrown to indicate that the
clone
method in class
Object
has been called to clone an object, but that
 the object's class does not implement the
Cloneable
interface.
CloneNotSupportedException()
- Constructor for exception class java.lang.
CloneNotSupportedException
Constructs a
CloneNotSupportedException
with no
 detail message.
CloneNotSupportedException(String)
- Constructor for exception class java.lang.
CloneNotSupportedException
Constructs a
CloneNotSupportedException
with the
 specified detail message.
cloneRange()
- Method in interface org.w3c.dom.ranges.
Range
Produces a new Range whose boundary-points are equal to the
 boundary-points of the Range.
cloneRecording(long, boolean)
- Method in interface jdk.management.jfr.
FlightRecorderMXBean
Creates a copy of an existing recording, useful for extracting parts of a
 recording.
cloneWithSource(Object)
- Method in class javax.swing.event.
TreeSelectionEvent
Returns a copy of the receiver, but with the source being newSource.
closable
- Variable in class javax.swing.
JInternalFrame
The frame can be closed.
close()
- Method in class com.sun.jdi.connect.spi.
Connection
Closes this connection.
close()
- Method in class com.sun.net.httpserver.
HttpExchange
Ends this exchange by doing the following in sequence:
 
       close the request
InputStream
, if not already closed.
close()
- Method in class java.awt.
SplashScreen
Hides the splash screen, closes the window, and releases all associated
 resources.
close()
- Method in class java.beans.
XMLDecoder
This method closes the input stream associated
 with this stream.
close()
- Method in class java.beans.
XMLEncoder
This method calls
flush
, writes the closing
 postamble and then closes the output stream associated
 with this stream.
close()
- Method in class java.io.
BufferedInputStream
Closes this input stream and releases any system resources
 associated with the stream.
close()
- Method in class java.io.
BufferedReader
close()
- Method in class java.io.
BufferedWriter
close()
- Method in class java.io.
ByteArrayInputStream
Closing a
ByteArrayInputStream
has no effect.
close()
- Method in class java.io.
ByteArrayOutputStream
Closing a
ByteArrayOutputStream
has no effect.
close()
- Method in class java.io.
CharArrayReader
Closes the stream and releases any system resources associated with
 it.
close()
- Method in class java.io.
CharArrayWriter
Close the stream.
close()
- Method in interface java.io.
Closeable
Closes this stream and releases any system resources associated
 with it.
close()
- Method in class java.io.
FileInputStream
Closes this file input stream and releases any system resources
 associated with the stream.
close()
- Method in class java.io.
FileOutputStream
Closes this file output stream and releases any system resources
 associated with this stream.
close()
- Method in class java.io.
FilterInputStream
Closes this input stream and releases any system resources associated
 with the stream.
close()
- Method in class java.io.
FilterOutputStream
Closes this output stream and releases any system resources
 associated with the stream.
close()
- Method in class java.io.
FilterReader
close()
- Method in class java.io.
FilterWriter
close()
- Method in class java.io.
InputStream
Closes this input stream and releases any system resources associated
 with the stream.
close()
- Method in class java.io.
InputStreamReader
close()
- Method in interface java.io.
ObjectInput
Closes the input stream.
close()
- Method in class java.io.
ObjectInputStream
Closes this input stream and releases any system resources associated
 with the stream.
close()
- Method in interface java.io.
ObjectOutput
Closes the stream.
close()
- Method in class java.io.
ObjectOutputStream
Closes the stream.
close()
- Method in class java.io.
OutputStream
Closes this output stream and releases any system resources
 associated with this stream.
close()
- Method in class java.io.
OutputStreamWriter
close()
- Method in class java.io.
PipedInputStream
Closes this input stream and releases any system resources associated
 with the stream.
close()
- Method in class java.io.
PipedOutputStream
Closes this piped output stream and releases any system resources
 associated with this stream.
close()
- Method in class java.io.
PipedReader
Closes this piped stream and releases any system resources
 associated with the stream.
close()
- Method in class java.io.
PipedWriter
Closes this piped output stream and releases any system resources
 associated with this stream.
close()
- Method in class java.io.
PrintStream
Closes the stream.
close()
- Method in class java.io.
PrintWriter
Closes the stream and releases any system resources associated
 with it.
close()
- Method in class java.io.
PushbackInputStream
Closes this input stream and releases any system resources
 associated with the stream.
close()
- Method in class java.io.
PushbackReader
Closes the stream and releases any system resources associated with
 it.
close()
- Method in class java.io.
RandomAccessFile
Closes this random access file stream and releases any system
 resources associated with the stream.
close()
- Method in class java.io.
Reader
Closes the stream and releases any system resources associated with
 it.
close()
- Method in class java.io.
SequenceInputStream
Closes this input stream and releases any system resources associated
 with the stream.
close()
- Method in class java.io.
StringReader
Closes the stream and releases any system resources associated with
 it.
close()
- Method in class java.io.
StringWriter
Closing a
StringWriter
has no effect.
close()
- Method in class java.io.
Writer
Closes the stream, flushing it first.
close()
- Method in interface java.lang.
AutoCloseable
Closes this resource, relinquishing any underlying resources.
close()
- Method in interface java.lang.foreign.
Arena
PREVIEW
Closes this arena.
close()
- Method in interface java.lang.module.
ModuleReader
Closes the module reader.
close()
- Method in class java.net.
DatagramSocket
Closes this datagram socket.
close()
- Method in class java.net.
DatagramSocketImpl
Close the socket.
close()
- Method in class java.net.http.
HttpClient
Initiates an orderly shutdown in which  requests previously
 submitted to
send
or
sendAsync
are run to completion, but no new request will be accepted.
close()
- Method in class java.net.
ServerSocket
Closes this socket.
close()
- Method in class java.net.
Socket
Closes this socket.
close()
- Method in class java.net.
SocketImpl
Closes this socket.
close()
- Method in class java.net.
URLClassLoader
Closes this URLClassLoader, so that it can no longer be used to load
 new classes or resources that are defined by this loader.
close()
- Method in interface java.nio.channels.
AsynchronousChannel
Closes this channel.
close()
- Method in interface java.nio.channels.
Channel
Closes this channel.
close()
- Method in class java.nio.channels.
FileLock
This method invokes the
FileLock.release()
method.
close()
- Method in interface java.nio.channels.
InterruptibleChannel
Closes this channel.
close()
- Method in interface java.nio.channels.
MulticastChannel
Closes this channel.
close()
- Method in class java.nio.channels.
Selector
Closes this selector.
close()
- Method in class java.nio.channels.spi.
AbstractInterruptibleChannel
Closes this channel.
close()
- Method in class java.nio.channels.spi.
AbstractSelector
Closes this selector.
close()
- Method in class java.nio.file.
FileSystem
Closes this file system.
close()
- Method in interface java.nio.file.
WatchService
Closes this watch service.
close()
- Method in interface java.sql.
Connection
Releases this
Connection
object's database and JDBC resources
 immediately instead of waiting for them to be automatically released.
close()
- Method in interface java.sql.
ResultSet
Releases this
ResultSet
object's database and
 JDBC resources immediately instead of waiting for
 this to happen when it is automatically closed.
close()
- Method in interface java.sql.
Statement
Releases this
Statement
object's database
 and JDBC resources immediately instead of waiting for
 this to happen when it is automatically closed.
close()
- Method in interface java.util.concurrent.
ExecutorService
Initiates an orderly shutdown in which previously submitted tasks are
 executed, but no new tasks will be accepted.
close()
- Method in class java.util.concurrent.
ForkJoinPool
Unless this is the
ForkJoinPool.commonPool()
, initiates an orderly
 shutdown in which previously submitted tasks are executed, but
 no new tasks will be accepted, and waits until all tasks have
 completed execution and the executor has terminated.
close()
- Method in class java.util.concurrent.
StructuredTaskScope
PREVIEW
Closes this task scope.
close()
- Method in class java.util.concurrent.
SubmissionPublisher
Unless already closed, issues
onComplete
signals to current
 subscribers, and disallows subsequent attempts to publish.
close()
- Method in class java.util.
Formatter
Closes this formatter.
close()
- Method in class java.util.logging.
ConsoleHandler
Override
StreamHandler.close
to do a flush but not
 to close the output stream.
close()
- Method in class java.util.logging.
FileHandler
Close all the files.
close()
- Method in class java.util.logging.
Handler
Close the
Handler
and free all associated resources.
close()
- Method in class java.util.logging.
MemoryHandler
Close the
Handler
and free all associated resources.
close()
- Method in class java.util.logging.
SocketHandler
Close this output stream.
close()
- Method in class java.util.logging.
StreamHandler
Close the current output stream.
close()
- Method in class java.util.
Scanner
Closes this scanner.
close()
- Method in interface java.util.stream.
BaseStream
Closes this stream, causing all close handlers for this stream pipeline
 to be called.
close()
- Method in class java.util.zip.
DeflaterInputStream
Closes this input stream and its underlying input stream, discarding
 any pending uncompressed data.
close()
- Method in class java.util.zip.
DeflaterOutputStream
Writes remaining compressed data to the output stream and closes the
 underlying stream.
close()
- Method in class java.util.zip.
GZIPInputStream
Closes this input stream and releases any system resources associated
 with the stream.
close()
- Method in class java.util.zip.
InflaterInputStream
Closes this input stream and releases any system resources associated
 with the stream.
close()
- Method in class java.util.zip.
InflaterOutputStream
Writes any remaining uncompressed data to the output stream and closes
 the underlying output stream.
close()
- Method in class java.util.zip.
ZipFile
Closes the ZIP file.
close()
- Method in class java.util.zip.
ZipInputStream
Closes this input stream and releases any system resources associated
 with the stream.
close()
- Method in class java.util.zip.
ZipOutputStream
Closes the ZIP output stream as well as the stream being filtered.
close()
- Method in class javax.crypto.
CipherInputStream
Closes this input stream and releases any system resources
 associated with the stream.
close()
- Method in class javax.crypto.
CipherOutputStream
Closes this output stream and releases any system resources
 associated with this stream.
close()
- Method in class javax.imageio.stream.
FileCacheImageInputStream
Closes this
FileCacheImageInputStream
, closing
 and removing the cache file.
close()
- Method in class javax.imageio.stream.
FileCacheImageOutputStream
Closes this
FileCacheImageOutputStream
.
close()
- Method in class javax.imageio.stream.
FileImageOutputStream
close()
- Method in interface javax.imageio.stream.
ImageInputStream
Closes the stream.
close()
- Method in class javax.imageio.stream.
ImageInputStreamImpl
close()
- Method in class javax.imageio.stream.
MemoryCacheImageInputStream
Closes this
MemoryCacheImageInputStream
, freeing
 the cache.
close()
- Method in class javax.imageio.stream.
MemoryCacheImageOutputStream
Closes this
MemoryCacheImageOutputStream
.
close()
- Method in interface javax.management.remote.
JMXConnector
Closes the client connection to its server.
close()
- Method in interface javax.management.remote.rmi.
RMIConnection
Closes this connection.
close()
- Method in class javax.management.remote.rmi.
RMIConnectionImpl_Stub
close()
- Method in class javax.management.remote.rmi.
RMIConnectionImpl
close()
- Method in class javax.management.remote.rmi.
RMIConnector
close()
- Method in class javax.management.remote.rmi.
RMIServerImpl
Closes this connection server.
close()
- Method in interface javax.naming.
Context
Closes this context.
close()
- Method in class javax.naming.
InitialContext
close()
- Method in class javax.naming.ldap.
StartTlsResponse
Closes the TLS connection gracefully and reverts back to the underlying
 connection.
close()
- Method in interface javax.naming.
NamingEnumeration
Closes this enumeration.
close()
- Method in class javax.smartcardio.
CardChannel
Closes this CardChannel.
close()
- Method in interface javax.sound.midi.
MidiDevice
Closes the device, indicating that the device should now release any
 system resources it is using.
close()
- Method in interface javax.sound.midi.
Receiver
Indicates that the application has finished using the receiver, and that
 limited resources it requires may be released or made available.
close()
- Method in interface javax.sound.midi.
Transmitter
Indicates that the application has finished using the transmitter, and
 that limited resources it requires may be released or made available.
close()
- Method in class javax.sound.sampled.
AudioInputStream
Closes this audio input stream and releases any system resources
 associated with the stream.
close()
- Method in interface javax.sound.sampled.
Line
Closes the line, indicating that any system resources in use by the line
 can be released.
close()
- Method in interface javax.sql.
PooledConnection
Closes the physical connection that this
PooledConnection
object represents.
close()
- Method in class javax.swing.
ProgressMonitor
Indicate that the operation is complete.
close()
- Method in class javax.swing.
ProgressMonitorInputStream
Overrides
FilterInputStream.close
to close the progress monitor as well as the stream.
close()
- Method in class javax.tools.
ForwardingJavaFileManager
close()
- Method in interface javax.tools.
JavaFileManager
Releases any resources opened by this file manager directly or
 indirectly.
close()
- Method in class javax.xml.stream.util.
EventReaderDelegate
close()
- Method in class javax.xml.stream.util.
StreamReaderDelegate
close()
- Method in interface javax.xml.stream.
XMLEventReader
Frees any resources associated with this Reader.
close()
- Method in interface javax.xml.stream.
XMLEventWriter
Frees any resources associated with this stream
close()
- Method in interface javax.xml.stream.
XMLStreamReader
Frees any resources associated with this Reader.
close()
- Method in interface javax.xml.stream.
XMLStreamWriter
Close this writer and free any resources associated with the
 writer.
close()
- Method in interface jdk.jfr.consumer.
EventStream
Releases all resources associated with this stream.
close()
- Method in class jdk.jfr.consumer.
RecordingFile
Closes this recording file and releases any system resources that are
 associated with it.
close()
- Method in class jdk.jfr.consumer.
RecordingStream
close()
- Method in class jdk.jfr.
Recording
Releases all data that is associated with this recording.
close()
- Method in class jdk.jshell.execution.
DirectExecutionControl
close()
- Method in class jdk.jshell.execution.
JdiDefaultExecutionControl
close()
- Method in class jdk.jshell.execution.
StreamingExecutionControl
Closes the execution engine.
close()
- Method in class jdk.jshell.
JShell
Close this state engine.
close()
- Method in interface jdk.jshell.spi.
ExecutionControl
Shuts down this execution engine.
close()
- Method in class jdk.management.jfr.
RemoteRecordingStream
close()
- Method in interface org.w3c.dom.html.
HTMLDocument
Closes a document stream opened by
open()
and forces
 rendering.
CLOSE
- Static variable in class javax.sound.sampled.
LineEvent.Type
A type of event that is sent when a line closes, freeing the system
 resources it had obtained when it was opened.
CLOSE_ALL_RESULTS
- Static variable in interface java.sql.
Statement
The constant indicating that all
ResultSet
objects that
 have previously been kept open should be closed when calling
getMoreResults
.
CLOSE_ALL_WINDOWS
- Enum constant in enum class java.awt.desktop.
QuitStrategy
Shuts down the application by closing each window from back-to-front.
CLOSE_CMD
- Static variable in class javax.swing.plaf.basic.
BasicInternalFrameTitlePane
The close button text property.
CLOSE_CURRENT_RESULT
- Static variable in interface java.sql.
Statement
The constant indicating that the current
ResultSet
object
 should be closed when calling
getMoreResults
.
CLOSE_CURSORS_AT_COMMIT
- Static variable in interface java.sql.
ResultSet
The constant indicating that open
ResultSet
objects with this
 holdability will be closed when the current transaction is committed.
CLOSE_FAILURE
- Static variable in class java.util.logging.
ErrorManager
CLOSE_FAILURE is used when a close of an output stream fails.
Closeable
- Interface in
java.io
A
Closeable
is a source or destination of data that can be closed.
closeAction
- Variable in class javax.swing.plaf.basic.
BasicInternalFrameTitlePane
The instance of a
CloseAction
.
CloseAction()
- Constructor for class javax.swing.plaf.basic.
BasicDesktopPaneUI.CloseAction
Constructs a
CloseAction
.
CloseAction()
- Constructor for class javax.swing.plaf.basic.
BasicInternalFrameTitlePane.CloseAction
Constructs a new instance of a
CloseAction
.
closeButton
- Variable in class javax.swing.plaf.basic.
BasicInternalFrameTitlePane
The close button.
closeClient(RMIConnection)
- Method in class javax.management.remote.rmi.
RMIJRMPServerImpl
closeClient(RMIConnection)
- Method in class javax.management.remote.rmi.
RMIServerImpl
Closes a client connection made by
makeClient
.
CLOSED
- Enum constant in enum class javax.net.ssl.
SSLEngineResult.Status
The operation just closed this side of the
SSLEngine
, or the operation
 could not be completed because it was already closed.
CLOSED
- Enum constant in enum class jdk.jfr.
RecordingState
The recording is closed and all resources that are associated with the
 recording are released.
CLOSED
- Static variable in class javax.management.remote.
JMXConnectionNotification
Notification type string for a connection-closed notification.
CLOSED_OPTION
- Static variable in class javax.swing.
JOptionPane
Return value from class method if user closes window without selecting
 anything, more than likely this should be treated as either a
CANCEL_OPTION
or
NO_OPTION
.
ClosedByInterruptException
- Exception Class in
java.nio.channels
Checked exception received by a thread when another thread interrupts it
 while it is blocked in an I/O operation upon a channel.
ClosedByInterruptException()
- Constructor for exception class java.nio.channels.
ClosedByInterruptException
Constructs an instance of this class.
ClosedChannelException
- Exception Class in
java.nio.channels
Checked exception thrown when an attempt is made to invoke or complete an
 I/O operation upon channel that is closed, or at least closed to that
 operation.
ClosedChannelException()
- Constructor for exception class java.nio.channels.
ClosedChannelException
Constructs an instance of this class.
ClosedConnectionException
- Exception Class in
com.sun.jdi.connect.spi
This exception may be thrown as a result of an asynchronous
 close of a
Connection
while an I/O operation is
 in progress.
ClosedConnectionException()
- Constructor for exception class com.sun.jdi.connect.spi.
ClosedConnectionException
Constructs a
ClosedConnectionException
with no detail
 message.
ClosedConnectionException(String)
- Constructor for exception class com.sun.jdi.connect.spi.
ClosedConnectionException
Constructs a
ClosedConnectionException
with the
 specified detail message.
ClosedDirectoryStreamException
- Exception Class in
java.nio.file
Unchecked exception thrown when an attempt is made to invoke an operation on
 a directory stream that is closed.
ClosedDirectoryStreamException()
- Constructor for exception class java.nio.file.
ClosedDirectoryStreamException
Constructs an instance of this class.
ClosedFileSystemException
- Exception Class in
java.nio.file
Unchecked exception thrown when an attempt is made to invoke an operation on
 a file and the file system is closed.
ClosedFileSystemException()
- Constructor for exception class java.nio.file.
ClosedFileSystemException
Constructs an instance of this class.
closedIcon
- Variable in class javax.swing.tree.
DefaultTreeCellRenderer
Icon used to show non-leaf nodes that aren't expanded.
closeDown()
- Method in interface jdk.jshell.spi.
ExecutionEnv
Reports that the execution engine has shutdown.
ClosedSelectorException
- Exception Class in
java.nio.channels
Unchecked exception thrown when an attempt is made to invoke an I/O
 operation upon a closed selector.
ClosedSelectorException()
- Constructor for exception class java.nio.channels.
ClosedSelectorException
Constructs an instance of this class.
ClosedWatchServiceException
- Exception Class in
java.nio.file
Unchecked exception thrown when an attempt is made to invoke an operation on
 a watch service that is closed.
ClosedWatchServiceException()
- Constructor for exception class java.nio.file.
ClosedWatchServiceException
Constructs an instance of this class.
closeEntry()
- Method in class java.util.zip.
ZipInputStream
Closes the current ZIP entry and positions the stream for reading the
 next entry.
closeEntry()
- Method in class java.util.zip.
ZipOutputStream
Closes the current ZIP entry and positions the stream for writing
 the next entry.
closeExceptionally(Throwable)
- Method in class java.util.concurrent.
SubmissionPublisher
Unless already closed, issues
onError
signals to current
 subscribers with the given error, and disallows subsequent
 attempts to publish.
closeFrame(JInternalFrame)
- Method in class javax.swing.
DefaultDesktopManager
Removes the frame, and, if necessary, the
desktopIcon
, from its parent.
closeFrame(JInternalFrame)
- Method in interface javax.swing.
DesktopManager
Generally, this call should remove the frame from its parent.
closeFrame(JInternalFrame)
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI
This method is called when the user wants to close the frame.
closeIcon
- Variable in class javax.swing.plaf.basic.
BasicInternalFrameTitlePane
The close icon.
closeInbound()
- Method in class javax.net.ssl.
SSLEngine
Signals that no more inbound network data will be sent
 to this
SSLEngine
.
closeKey
- Variable in class javax.swing.plaf.basic.
BasicDesktopPaneUI
Deprecated.
As of 1.3.
closeOnCompletion()
- Method in interface java.sql.
Statement
Specifies that this
Statement
will be closed when all its
 dependent result sets are closed.
closeOutbound()
- Method in class javax.net.ssl.
SSLEngine
Signals that no more outbound application data will be sent
 on this
SSLEngine
.
closeOutUnwantedEmbeddedTags(AttributeSet)
- Method in class javax.swing.text.html.
HTMLWriter
Searches the attribute set and for each tag
 that is stored in the tag vector.
closePath()
- Method in class java.awt.geom.
Path2D
Closes the current subpath by drawing a straight line back to
 the coordinates of the last
moveTo
.
closeRecording(long)
- Method in interface jdk.management.jfr.
FlightRecorderMXBean
Closes the recording with the specified ID and releases any system
 resources that are associated with the recording.
closeServer()
- Method in class javax.management.remote.rmi.
RMIJRMPServerImpl
Called by
RMIServerImpl.close()
to close the connector server by
 unexporting this object.
closeServer()
- Method in class javax.management.remote.rmi.
RMIServerImpl
Called by
RMIServerImpl.close()
to close the connector server.
closeStream(long)
- Method in interface jdk.management.jfr.
FlightRecorderMXBean
Closes the recording stream with the specified ID and releases any system
 resources that are associated with the stream.
CMMException
- Exception Class in
java.awt.color
This exception is thrown if the native CMM returns an error.
CMMException(String)
- Constructor for exception class java.awt.color.
CMMException
Constructs a
CMMException
with the specified detail message.
coalesceEvents(AWTEvent, AWTEvent)
- Method in class java.awt.
Component
Potentially coalesce an event being posted with an existing
 event.
code
- Variable in exception class org.w3c.dom.
DOMException
code
- Variable in exception class org.w3c.dom.events.
EventException
code
- Variable in exception class org.w3c.dom.ls.
LSException
code
- Variable in exception class org.w3c.dom.ranges.
RangeException
code
- Variable in exception class org.w3c.dom.xpath.
XPathException
CODE
- Enum constant in enum class com.sun.source.doctree.
DocTree.Kind
Used for instances of
LiteralTree
representing an
@code
tag.
CODE
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "code"
CODE
- Static variable in class javax.swing.text.html.
HTML.Tag
Tag <code>
CODEBASE
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "codebase"
Code Example
- Search tag in interface javax.sql.rowset.spi.SyncResolver
Section
codeIndex()
- Method in interface com.sun.jdi.
Location
Gets the code position within this location's method.
codePointAt(char[], int)
- Static method in class java.lang.
Character
Returns the code point at the given index of the
char
array.
codePointAt(char[], int, int)
- Static method in class java.lang.
Character
Returns the code point at the given index of the
char
array, where only array elements with
index
less than
limit
can be used.
codePointAt(int)
- Method in class java.lang.
StringBuilder
Returns the character (Unicode code point) at the specified
 index.
codePointAt(int)
- Method in class java.lang.
String
Returns the character (Unicode code point) at the specified
 index.
codePointAt(int)
- Method in class java.lang.
StringBuffer
codePointAt(CharSequence, int)
- Static method in class java.lang.
Character
Returns the code point at the given index of the
CharSequence
.
codePointBefore(char[], int)
- Static method in class java.lang.
Character
Returns the code point preceding the given index of the
char
array.
codePointBefore(char[], int, int)
- Static method in class java.lang.
Character
Returns the code point preceding the given index of the
char
array, where only array elements with
index
greater than or equal to
start
can be used.
codePointBefore(int)
- Method in class java.lang.
StringBuilder
Returns the character (Unicode code point) before the specified
 index.
codePointBefore(int)
- Method in class java.lang.
String
Returns the character (Unicode code point) before the specified
 index.
codePointBefore(int)
- Method in class java.lang.
StringBuffer
codePointBefore(CharSequence, int)
- Static method in class java.lang.
Character
Returns the code point preceding the given index of the
CharSequence
.
codePointCount(char[], int, int)
- Static method in class java.lang.
Character
Returns the number of Unicode code points in a subarray of the
char
array argument.
codePointCount(int, int)
- Method in class java.lang.
StringBuilder
Returns the number of Unicode code points in the specified text
 range of this sequence.
codePointCount(int, int)
- Method in class java.lang.
String
Returns the number of Unicode code points in the specified text
 range of this
String
.
codePointCount(int, int)
- Method in class java.lang.
StringBuffer
codePointCount(CharSequence, int, int)
- Static method in class java.lang.
Character
Returns the number of Unicode code points in the text range of
 the specified char sequence.
codePointOf(String)
- Static method in class java.lang.
Character
Returns the code point value of the Unicode character specified by
 the given character name.
codePoints()
- Method in class java.lang.
StringBuffer
Returns a stream of code point values from this sequence.
codePoints()
- Method in class java.lang.
StringBuilder
Returns a stream of code point values from this sequence.
codePoints()
- Method in interface java.lang.
CharSequence
Returns a stream of code point values from this sequence.
codePoints()
- Method in class java.lang.
String
Returns a stream of code point values from this sequence.
CoderMalfunctionError
- Exception Class in
java.nio.charset
Error thrown when the
decodeLoop
method of
 a
CharsetDecoder
, or the
encodeLoop
method of a
CharsetEncoder
, throws an unexpected
 exception.
CoderMalfunctionError(Exception)
- Constructor for exception class java.nio.charset.
CoderMalfunctionError
Initializes an instance of this class.
CoderResult
- Class in
java.nio.charset
A description of the result state of a coder.
CodeSigner
- Class in
java.security
This class encapsulates information about a code signer.
CodeSigner(CertPath, Timestamp)
- Constructor for class java.security.
CodeSigner
Constructs a
CodeSigner
object.
CodeSource
- Class in
java.security
This class extends the concept of a codebase to
 encapsulate not only the location (URL) but also the certificate chains
 that were used to verify signed code originating from that location.
CodeSource(URL, Certificate[])
- Constructor for class java.security.
CodeSource
Constructs a
CodeSource
and associates it with the specified
 location and set of certificates.
CodeSource(URL, CodeSigner[])
- Constructor for class java.security.
CodeSource
Constructs a
CodeSource
and associates it with the specified
 location and set of code signers.
CODETYPE
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "codetype"
CodingErrorAction
- Class in
java.nio.charset
A typesafe enumeration for coding-error actions.
coerceData(boolean)
- Method in class java.awt.image.
BufferedImage
Forces the data to match the state specified in the
isAlphaPremultiplied
variable.
coerceData(WritableRaster, boolean)
- Method in class java.awt.image.
ColorModel
Forces the raster data to match the state specified in the
isAlphaPremultiplied
variable, assuming the data is
 currently correctly described by this
ColorModel
.
coerceData(WritableRaster, boolean)
- Method in class java.awt.image.
ComponentColorModel
Forces the raster data to match the state specified in the
isAlphaPremultiplied
variable, assuming the data
 is currently correctly described by this
ColorModel
.
coerceData(WritableRaster, boolean)
- Method in class java.awt.image.
DirectColorModel
Forces the raster data to match the state specified in the
isAlphaPremultiplied
variable, assuming the data is
 currently correctly described by this
ColorModel
.
colHead
- Variable in class javax.swing.
ScrollPaneLayout
The column header child.
collapse(boolean)
- Method in interface org.w3c.dom.ranges.
Range
Collapse a Range onto one of its boundary-points
COLLAPSED
- Static variable in class javax.accessibility.
AccessibleState
Indicates this object is collapsed.
collapsedIcon
- Variable in class javax.swing.plaf.basic.
BasicTreeUI
The collapsed icon.
collapsePath(TreePath)
- Method in class javax.swing.
JTree
Ensures that the node identified by the specified path is
 collapsed and viewable.
collapseRow(int)
- Method in class javax.swing.
JTree
Ensures that the node in the specified row is collapsed.
COLLATED
- Static variable in class javax.print.attribute.standard.
SheetCollate
Sheets within a document appear in collated order when multiple copies
 are printed.
CollationElementIterator
- Class in
java.text
The
CollationElementIterator
class is used as an iterator
 to walk through each character of an international string.
CollationKey
- Class in
java.text
A
CollationKey
represents a
String
under the
 rules of a specific
Collator
object.
CollationKey(String)
- Constructor for class java.text.
CollationKey
CollationKey constructor.
Collator
- Class in
java.text
The
Collator
class performs locale-sensitive
String
comparison.
Collator()
- Constructor for class java.text.
Collator
Default constructor.
CollatorProvider
- Class in
java.text.spi
An abstract class for service providers that
 provide concrete implementations of the
Collator
class.
CollatorProvider()
- Constructor for class java.text.spi.
CollatorProvider
Sole constructor.
collect(Supplier<R>, BiConsumer<R, ? super T>, BiConsumer<R, R>)
- Method in interface java.util.stream.
Stream
Performs a
mutable
 reduction
operation on the elements of this stream.
collect(Supplier<R>, ObjDoubleConsumer<R>, BiConsumer<R, R>)
- Method in interface java.util.stream.
DoubleStream
Performs a
mutable
 reduction
operation on the elements of this stream.
collect(Supplier<R>, ObjIntConsumer<R>, BiConsumer<R, R>)
- Method in interface java.util.stream.
IntStream
Performs a
mutable
 reduction
operation on the elements of this stream.
collect(Supplier<R>, ObjLongConsumer<R>, BiConsumer<R, R>)
- Method in interface java.util.stream.
LongStream
Performs a
mutable
 reduction
operation on the elements of this stream.
collect(Collector<? super T, A, R>)
- Method in interface java.util.stream.
Stream
Performs a
mutable
 reduction
operation on the elements of this stream using a
Collector
.
collectArguments(MethodHandle, int, MethodHandle)
- Static method in class java.lang.invoke.
MethodHandles
Adapts a target method handle by pre-processing
 a sub-sequence of its arguments with a filter (another method handle).
collectCoordinates(VarHandle, int, MethodHandle)
- Static method in class java.lang.invoke.
MethodHandles
Adapts a target var handle by pre-processing
 a sub-sequence of its coordinate values with a filter (a method handle).
collectingAndThen(Collector<T, A, R>, Function<R, RR>)
- Static method in class java.util.stream.
Collectors
Adapts a
Collector
to perform an additional finishing
 transformation.
Collection<E>
- Interface in
java.util
The root interface in the
collection hierarchy
.
CollectionCertStoreParameters
- Class in
java.security.cert
Parameters used as input for the Collection
CertStore
algorithm.
CollectionCertStoreParameters()
- Constructor for class java.security.cert.
CollectionCertStoreParameters
Creates an instance of
CollectionCertStoreParameters
with
 the default parameter values (an empty and immutable
Collection
).
CollectionCertStoreParameters(Collection<?>)
- Constructor for class java.security.cert.
CollectionCertStoreParameters
Creates an instance of
CollectionCertStoreParameters
which will allow certificates and CRLs to be retrieved from the
 specified
Collection
.
Collection Implementations
- Search tag in package java.util
Section
Collection Interface
- Search tag in package java.util
Section
Collection Interface
- Search tag in package java.util
Section
Collection Interfaces
- Search tag in package java.util
Section
Collections
- Class in
java.util
This class consists exclusively of static methods that operate on or return
 collections.
Collections Framework Overview
- Search tag in package java.util
Section
Collector<T,
A,
R>
- Interface in
java.util.stream
A
mutable reduction operation
that
 accumulates input elements into a mutable result container, optionally transforming
 the accumulated result into a final representation after all input elements
 have been processed.
Collector.Characteristics
- Enum Class in
java.util.stream
Characteristics indicating properties of a
Collector
, which can
 be used to optimize reduction implementations.
Collectors
- Class in
java.util.stream
Implementations of
Collector
that implement various useful reduction
 operations, such as accumulating elements into collections, summarizing
 elements according to various criteria, etc.
color
- Variable in class javax.swing.border.
MatteBorder
The color rendered for the border.
Color
- Class in
java.awt
The
Color
class is used to encapsulate colors in the default
 sRGB color space or colors in arbitrary color spaces identified by a
ColorSpace
.
Color(float, float, float)
- Constructor for class java.awt.
Color
Creates an opaque sRGB color with the specified red, green, and blue
 values in the range (0.0 - 1.0).
Color(float, float, float, float)
- Constructor for class java.awt.
Color
Creates an sRGB color with the specified red, green, blue, and
 alpha values in the range (0.0 - 1.0).
Color(int)
- Constructor for class java.awt.
Color
Creates an opaque sRGB color with the specified combined RGB value
 consisting of the red component in bits 16-23, the green component
 in bits 8-15, and the blue component in bits 0-7.
Color(int, boolean)
- Constructor for class java.awt.
Color
Creates an sRGB color with the specified combined RGBA value consisting
 of the alpha component in bits 24-31, the red component in bits 16-23,
 the green component in bits 8-15, and the blue component in bits 0-7.
Color(int, int, int)
- Constructor for class java.awt.
Color
Creates an opaque sRGB color with the specified red, green,
 and blue values in the range (0 - 255).
Color(int, int, int, int)
- Constructor for class java.awt.
Color
Creates an sRGB color with the specified red, green, blue, and alpha
 values in the range (0 - 255).
Color(ColorSpace, float[], float)
- Constructor for class java.awt.
Color
Creates a color in the specified
ColorSpace
with the color components specified in the
float
array and the specified alpha.
COLOR
- Static variable in class java.awt.
PageAttributes.ColorType
The ColorType instance to use for specifying color printing.
COLOR
- Static variable in class javax.print.attribute.standard.
Chromaticity
Color printing.
COLOR
- Static variable in class javax.swing.text.html.
CSS.Attribute
CSS attribute "color".
COLOR
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "color"
COLOR_ACTION
- Static variable in class javax.swing.text.html.
HTMLEditorKit
The Color choice action identifier
     The color is passed as an argument
COLOR_CHOOSER
- Static variable in class javax.accessibility.
AccessibleRole
A specialized pane that lets the user choose a color.
COLOR_CHOOSER
- Static variable in class javax.swing.plaf.synth.
Region
ColorChooser region.
COLOR_CHOOSER_DIALOG
- Static variable in class javax.swing.
JRootPane
Constant used for the windowDecorationStyle property.
COLOR_SPACE_SRGB
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "ColorSpace" tag.
COLOR_SPACE_UNCALIBRATED
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "ColorSpace" tag.
ColorChooserComponentFactory
- Class in
javax.swing.colorchooser
A class designed to produce preconfigured "accessory" objects to
 insert into color choosers.
ColorChooserUI
- Class in
javax.swing.plaf
Pluggable look and feel interface for JColorChooser.
ColorChooserUI()
- Constructor for class javax.swing.plaf.
ColorChooserUI
Constructor for subclasses to call.
Color Conversion
- Search tag in package javax.imageio.metadata
Section
Color Conversion
- Search tag in package javax.imageio.metadata
Section
ColorConvertOp
- Class in
java.awt.image
This class performs a pixel-by-pixel color conversion of the data in
 the source image.
ColorConvertOp(ColorSpace, ColorSpace, RenderingHints)
- Constructor for class java.awt.image.
ColorConvertOp
Constructs a new ColorConvertOp from two ColorSpace objects.
ColorConvertOp(ColorSpace, RenderingHints)
- Constructor for class java.awt.image.
ColorConvertOp
Constructs a new ColorConvertOp from a ColorSpace object.
ColorConvertOp(ICC_Profile[], RenderingHints)
- Constructor for class java.awt.image.
ColorConvertOp
Constructs a new ColorConvertOp from an array of ICC_Profiles.
ColorConvertOp(RenderingHints)
- Constructor for class java.awt.image.
ColorConvertOp
Constructs a new ColorConvertOp which will convert
 from a source color space to a destination color space.
colorModel
- Variable in class javax.imageio.
ImageTypeSpecifier
The
ColorModel
to be used as a prototype.
ColorModel
- Class in
java.awt.image
The
ColorModel
abstract class encapsulates the
 methods for translating a pixel value to color components
 (for example, red, green, and blue) and an alpha component.
ColorModel(int)
- Constructor for class java.awt.image.
ColorModel
Constructs a
ColorModel
that translates pixels of the
 specified number of bits to color/alpha components.
ColorModel(int, int[], ColorSpace, boolean, boolean, int, int)
- Constructor for class java.awt.image.
ColorModel
Constructs a
ColorModel
that translates pixel values
 to color/alpha components.
ColorSelectionModel
- Interface in
javax.swing.colorchooser
A model that supports selecting a
Color
.
ColorSpace
- Class in
java.awt.color
This abstract class is used to serve as a color space tag to identify the
 specific color space of a
Color
object or, via a
ColorModel
object, of an
Image
, a
BufferedImage
, or a
GraphicsDevice
.
ColorSpace(int, int)
- Constructor for class java.awt.color.
ColorSpace
Constructs a
ColorSpace
object given a color space type and the
 number of components.
Color Spaces
- Search tag in package javax.imageio.metadata
Section
Colorspace Transformations and Conventional Markers
- Search tag in package javax.imageio.metadata
Section
ColorSupported
- Class in
javax.print.attribute.standard
Class
ColorSupported
is a printing attribute class, an enumeration,
 that identifies whether the device is capable of any type of color printing
 at all, including highlight color as well as full process color.
ColorSupported(int)
- Constructor for class javax.print.attribute.standard.
ColorSupported
Construct a new color supported enumeration value with the given integer
 value.
Colors Used in Nimbus Look and Feel
- Search tag in package javax.swing.plaf.nimbus
Section
ColorType
- Class in
javax.swing.plaf.synth
A typesafe enumeration of colors that can be fetched from a style.
ColorType(String)
- Constructor for class javax.swing.plaf.synth.
ColorType
Creates a new ColorType with the specified description.
ColorUIResource
- Class in
javax.swing.plaf
A subclass of Color that implements UIResource.
ColorUIResource(float, float, float)
- Constructor for class javax.swing.plaf.
ColorUIResource
Constructs a
ColorUIResource
.
ColorUIResource(int)
- Constructor for class javax.swing.plaf.
ColorUIResource
Constructs a
ColorUIResource
.
ColorUIResource(int, int, int)
- Constructor for class javax.swing.plaf.
ColorUIResource
Constructs a
ColorUIResource
.
ColorUIResource(Color)
- Constructor for class javax.swing.plaf.
ColorUIResource
Constructs a
ColorUIResource
.
COLS
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "cols"
COLSPAN
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "colspan"
column
- Variable in class javax.swing.event.
TableModelEvent
The column for the event.
COLUMN_HEADER
- Static variable in class javax.accessibility.
AccessibleRole
The header for a column of data.
COLUMN_HEADER
- Static variable in interface javax.swing.
ScrollPaneConstants
Identifies the area at the top the viewport between the
 upper left corner and the upper right corner.
COLUMN_WIDTH_PROPERTY
- Static variable in class javax.swing.table.
TableColumn
Obsolete as of Java 2 platform v1.3.
columnAdded(TableColumnModelEvent)
- Method in interface javax.swing.event.
TableColumnModelListener
Tells listeners that a column was added to the model.
columnAdded(TableColumnModelEvent)
- Method in class javax.swing.
JTable.AccessibleJTable
Track changes to the table contents (column insertions)
columnAdded(TableColumnModelEvent)
- Method in class javax.swing.
JTable
Invoked when a column is added to the table column model.
columnAdded(TableColumnModelEvent)
- Method in class javax.swing.table.
JTableHeader
Invoked when a column is added to the table column model.
columnAtPoint(Point)
- Method in class javax.swing.
JTable
Returns the index of the column that
point
lies in,
 or -1 if the result is not in the range
 [0,
getColumnCount()
-1].
columnAtPoint(Point)
- Method in class javax.swing.table.
JTableHeader
Returns the index of the column that
point
lies in, or -1 if it
 lies out of bounds.
columnHeader
- Variable in class javax.swing.
JScrollPane
The column header child.
columnIdentifiers
- Variable in class javax.swing.table.
DefaultTableModel
The
Vector
of column identifiers.
columnMargin
- Variable in class javax.swing.table.
DefaultTableColumnModel
Width margin between each column
columnMarginChanged(ChangeEvent)
- Method in interface javax.swing.event.
TableColumnModelListener
Tells listeners that a column was moved due to a margin change.
columnMarginChanged(ChangeEvent)
- Method in class javax.swing.
JTable.AccessibleJTable
Track changes of a column moving due to margin changes.
columnMarginChanged(ChangeEvent)
- Method in class javax.swing.
JTable
Invoked when a column is moved due to a margin change.
columnMarginChanged(ChangeEvent)
- Method in class javax.swing.table.
JTableHeader
Invoked when a column is moved due to a margin change.
columnModel
- Variable in class javax.swing.
JTable
The
TableColumnModel
of the table.
columnModel
- Variable in class javax.swing.table.
JTableHeader
The
TableColumnModel
of the table header.
COLUMNMODEL
- Static variable in class com.sun.java.accessibility.util.
EventID
Maps to Swing TableColumnModel support (i.e.,
 TableColumnModelListener and TableColumnModelEvent)
columnMoved(TableColumnModelEvent)
- Method in interface javax.swing.event.
TableColumnModelListener
Tells listeners that a column was repositioned.
columnMoved(TableColumnModelEvent)
- Method in class javax.swing.
JTable.AccessibleJTable
Track changes of a column repositioning.
columnMoved(TableColumnModelEvent)
- Method in class javax.swing.
JTable
Invoked when a column is repositioned.
columnMoved(TableColumnModelEvent)
- Method in class javax.swing.table.
JTableHeader
Invoked when a column is repositioned.
columnNoNulls
- Static variable in interface java.sql.
DatabaseMetaData
Indicates that the column might not allow
NULL
values.
columnNoNulls
- Static variable in interface java.sql.
ResultSetMetaData
The constant indicating that a
 column does not allow
NULL
values.
columnNullable
- Static variable in interface java.sql.
DatabaseMetaData
Indicates that the column definitely allows
NULL
values.
columnNullable
- Static variable in interface java.sql.
ResultSetMetaData
The constant indicating that a
 column allows
NULL
values.
columnNullableUnknown
- Static variable in interface java.sql.
DatabaseMetaData
Indicates that the nullability of columns is unknown.
columnNullableUnknown
- Static variable in interface java.sql.
ResultSetMetaData
The constant indicating that the
 nullability of a column's values is unknown.
columnRemoved(TableColumnModelEvent)
- Method in interface javax.swing.event.
TableColumnModelListener
Tells listeners that a column was removed from the model.
columnRemoved(TableColumnModelEvent)
- Method in class javax.swing.
JTable.AccessibleJTable
Track changes to the table contents (column deletions)
columnRemoved(TableColumnModelEvent)
- Method in class javax.swing.
JTable
Invoked when a column is removed from the table column model.
columnRemoved(TableColumnModelEvent)
- Method in class javax.swing.table.
JTableHeader
Invoked when a column is removed from the table column model.
columnSelectionAllowed
- Variable in class javax.swing.table.
DefaultTableColumnModel
Column selection allowed in this column model
columnSelectionChanged(ListSelectionEvent)
- Method in interface javax.swing.event.
TableColumnModelListener
Tells listeners that the selection model of the
 TableColumnModel changed.
columnSelectionChanged(ListSelectionEvent)
- Method in class javax.swing.
JTable.AccessibleJTable
Track that the selection model of the TableColumnModel changed.
columnSelectionChanged(ListSelectionEvent)
- Method in class javax.swing.
JTable
Invoked when the selection model of the
TableColumnModel
is changed.
columnSelectionChanged(ListSelectionEvent)
- Method in class javax.swing.table.
JTableHeader
Invoked when the selection model of the
TableColumnModel
is changed.
columnUpdated(int)
- Method in interface javax.sql.rowset.
CachedRowSet
Indicates whether the designated column in the current row of this
CachedRowSet
object has been updated.
columnUpdated(String)
- Method in interface javax.sql.rowset.
CachedRowSet
Indicates whether the designated column in the current row of this
CachedRowSet
object has been updated.
columnWeights
- Variable in class java.awt.
GridBagLayout
This field holds the overrides to the column weights.
columnWidths
- Variable in class java.awt.
GridBagLayout
This field holds the overrides to the column minimum
 width.
com.sun.java.accessibility.util
- package com.sun.java.accessibility.util
Provides a collection of interfaces and classes that compose the Java Accessibility
 Utilities.
com.sun.jdi
- package com.sun.jdi
This is the core package of the Java Debug
 Interface (JDI), it defines mirrors for values, types, and the target
 VirtualMachine itself - as well bootstrapping facilities.
com.sun.jdi.connect
- package com.sun.jdi.connect
This package defines connections between the virtual machine
 using the JDI and the target virtual machine.
com.sun.jdi.connect.spi
- package com.sun.jdi.connect.spi
This package comprises the interfaces and classes used to
 develop new
TransportService
implementations.
com.sun.jdi.event
- package com.sun.jdi.event
This package defines JDI events and event processing.
com.sun.jdi.request
- package com.sun.jdi.request
This package is used to request that a JDI
 event be sent under specified conditions.
com.sun.jndi.ldap.object.trustSerialData
- Search tag in module java.naming
System Property
com.sun.management
- package com.sun.management
This package contains the JDK's extension to
 the standard implementation of the
java.lang.management
API and also defines the management
 interface for some other components of the platform.
com.sun.net.httpserver
- package com.sun.net.httpserver
Provides a simple high-level Http server API, which can be used to build
   embedded HTTP servers.
com.sun.net.httpserver.HttpServerProvider
- Search tag in com.sun.net.httpserver.spi.HttpServerProvider.provider()
System Property
com.sun.net.httpserver.spi
- package com.sun.net.httpserver.spi
Provides a pluggable service provider interface, which allows the HTTP server
 implementation to be replaced with other implementations.
com.sun.nio.sctp
- package com.sun.nio.sctp
A Java API for Stream Control Transport Protocol.
com.sun.security.auth
- package com.sun.security.auth
Provides implementations of
Principal
.
com.sun.security.auth.callback
- package com.sun.security.auth.callback
Provides an implementation of
CallbackHandler
.
com.sun.security.auth.login
- package com.sun.security.auth.login
Provides an implementation of
Configuration
.
com.sun.security.auth.module
- package com.sun.security.auth.module
Provides implementations of
LoginModule
.
com.sun.security.jgss
- package com.sun.security.jgss
This package defines classes and interfaces for the JDK extensions
 to the GSS-API.
com.sun.source.doctree
- package com.sun.source.doctree
Provides interfaces to represent documentation comments as abstract syntax
 trees (AST).
com.sun.source.tree
- package com.sun.source.tree
Provides interfaces to represent source code as abstract syntax
 trees (AST).
com.sun.source.util
- package com.sun.source.util
Provides utilities for operations on abstract syntax trees (AST).
com.sun.tools.attach
- package com.sun.tools.attach
Provides the API to attach to a Java virtual machine.
com.sun.tools.attach.spi
- package com.sun.tools.attach.spi
Only developers who are defining new attach providers should need to make
 direct use of this package.
com.sun.tools.javac
- package com.sun.tools.javac
This package provides a legacy entry point for the
javac
tool.
com.sun.tools.jconsole
- package com.sun.tools.jconsole
This package contains the JConsole API.
combine(StringTemplate...)
- Static method in interface java.lang.
StringTemplate
PREVIEW
Combine zero or more
StringTemplates
PREVIEW
into a single
StringTemplate
PREVIEW
.
combine(ProtectionDomain[], ProtectionDomain[])
- Method in interface java.security.
DomainCombiner
Deprecated.
Modify or update the provided ProtectionDomains.
combine(ProtectionDomain[], ProtectionDomain[])
- Method in class javax.security.auth.
SubjectDomainCombiner
Deprecated.
Update the relevant ProtectionDomains with the Principals
 from the
Subject
associated with this
SubjectDomainCombiner
.
combine(DoubleSummaryStatistics)
- Method in class java.util.
DoubleSummaryStatistics
Combines the state of another
DoubleSummaryStatistics
into this
 one.
combine(IntSummaryStatistics)
- Method in class java.util.
IntSummaryStatistics
Combines the state of another
IntSummaryStatistics
into this one.
combine(List<StringTemplate>)
- Static method in interface java.lang.
StringTemplate
PREVIEW
Combine a list of
StringTemplates
PREVIEW
into a single
StringTemplate
PREVIEW
.
combine(LongSummaryStatistics)
- Method in class java.util.
LongSummaryStatistics
Combines the state of another
LongSummaryStatistics
into this
 one.
combine(Set<String>)
- Method in class jdk.jfr.
SettingControl
Combines the setting values for all running recordings into one value when
 multiple recordings are running at the same time,
combiner()
- Method in interface java.util.stream.
Collector
A function that accepts two partial results and merges them.
COMBINING
- Static variable in class java.awt.font.
GlyphMetrics
Indicates a glyph that represents a combining character,
 such as an umlaut.
COMBINING_DIACRITICAL_MARKS
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Combining Diacritical Marks" Unicode character block.
COMBINING_DIACRITICAL_MARKS_EXTENDED
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Combining Diacritical Marks Extended" Unicode
 character block.
COMBINING_DIACRITICAL_MARKS_SUPPLEMENT
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Combining Diacritical Marks Supplement" Unicode
 character block.
COMBINING_HALF_MARKS
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Combining Half Marks" Unicode character block.
COMBINING_MARKS_FOR_SYMBOLS
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Combining Diacritical Marks for Symbols" Unicode
 character block.
COMBINING_SPACING_MARK
- Static variable in class java.lang.
Character
General category "Mc" in the Unicode specification.
COMBO_BOX
- Static variable in class javax.accessibility.
AccessibleRole
A list of choices the user can select from.
COMBO_BOX
- Static variable in class javax.swing.plaf.synth.
Region
ComboBox region.
comboBox
- Variable in class javax.swing.plaf.basic.
BasicComboBoxUI
The instance of
JComboBox
.
comboBox
- Variable in class javax.swing.plaf.basic.
BasicComboPopup
The instance of
JComboBox
.
comboBox
- Variable in class javax.swing.plaf.metal.
MetalComboBoxButton
The instance of
JComboBox
.
ComboBoxEditor
- Interface in
javax.swing
The editor component used for JComboBox components.
ComboBoxLayoutManager()
- Constructor for class javax.swing.plaf.basic.
BasicComboBoxUI.ComboBoxLayoutManager
Constructs a
ComboBoxLayoutManager
.
ComboBoxModel<E>
- Interface in
javax.swing
A data model for a combo box.
ComboBoxUI
- Class in
javax.swing.plaf
Pluggable look and feel interface for JComboBox.
ComboBoxUI()
- Constructor for class javax.swing.plaf.
ComboBoxUI
Constructor for subclasses to call.
comboIcon
- Variable in class javax.swing.plaf.metal.
MetalComboBoxButton
The icon.
ComboPopup
- Interface in
javax.swing.plaf.basic
The interface which defines the methods required for the implementation of the popup
 portion of a combo box.
COMM_LOST
- Enum constant in enum class com.sun.nio.sctp.
AssociationChangeNotification.AssocChangeEvent
The association has failed.
COMM_UP
- Enum constant in enum class com.sun.nio.sctp.
AssociationChangeNotification.AssocChangeEvent
A new association is now ready and data may be exchanged with this peer.
command()
- Method in class java.lang.
ProcessBuilder
Returns this process builder's operating system program and
 arguments.
command()
- Method in interface java.lang.
ProcessHandle.Info
Returns the executable pathname of the process.
command(String...)
- Method in class java.lang.
ProcessBuilder
Sets this process builder's operating system program and
 arguments.
command(List<String>)
- Method in class java.lang.
ProcessBuilder
Sets this process builder's operating system program and
 arguments.
CommandAPDU
- Class in
javax.smartcardio
A command APDU following the structure defined in ISO/IEC 7816-4.
CommandAPDU(byte[])
- Constructor for class javax.smartcardio.
CommandAPDU
Constructs a CommandAPDU from a byte array containing the complete
 APDU contents (header and body).
CommandAPDU(byte[], int, int)
- Constructor for class javax.smartcardio.
CommandAPDU
Constructs a CommandAPDU from a byte array containing the complete
 APDU contents (header and body).
CommandAPDU(int, int, int, int)
- Constructor for class javax.smartcardio.
CommandAPDU
Constructs a CommandAPDU from the four header bytes.
CommandAPDU(int, int, int, int, byte[])
- Constructor for class javax.smartcardio.
CommandAPDU
Constructs a CommandAPDU from the four header bytes and command data.
CommandAPDU(int, int, int, int, byte[], int)
- Constructor for class javax.smartcardio.
CommandAPDU
Constructs a CommandAPDU from the four header bytes, command data,
 and expected response data length.
CommandAPDU(int, int, int, int, byte[], int, int)
- Constructor for class javax.smartcardio.
CommandAPDU
Constructs a CommandAPDU from the four header bytes and command data.
CommandAPDU(int, int, int, int, byte[], int, int, int)
- Constructor for class javax.smartcardio.
CommandAPDU
Constructs a CommandAPDU from the four header bytes, command data,
 and expected response data length.
CommandAPDU(int, int, int, int, int)
- Constructor for class javax.smartcardio.
CommandAPDU
Constructs a CommandAPDU from the four header bytes and the expected
 response data length.
CommandAPDU(ByteBuffer)
- Constructor for class javax.smartcardio.
CommandAPDU
Creates a CommandAPDU from the ByteBuffer containing the complete APDU
 contents (header and body).
commandLine()
- Method in interface java.lang.
ProcessHandle.Info
Returns the command line of the process.
comment(char[], int, int)
- Method in class org.xml.sax.ext.
DefaultHandler2
comment(char[], int, int)
- Method in interface org.xml.sax.ext.
LexicalHandler
Report an XML comment anywhere in the document.
comment(Element)
- Method in class javax.swing.text.html.
HTMLWriter
Writes out comments.
Comment
- Interface in
javax.xml.stream.events
An interface for comment events
Comment
- Interface in
org.w3c.dom
This interface inherits from
CharacterData
and represents the
 content of a comment, i.e., all the characters between the starting
 '
<!--
' and ending '
-->
'.
COMMENT
- Enum constant in enum class com.sun.source.doctree.
DocTree.Kind
Used for instances of
CommentTree
representing an HTML comment.
COMMENT
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "comment"
COMMENT
- Static variable in class javax.swing.text.html.
HTML.Tag
All comments are labeled with this tag.
COMMENT
- Static variable in interface javax.xml.stream.
XMLStreamConstants
Indicates an event is a comment
COMMENT_NODE
- Static variable in interface org.w3c.dom.
Node
The node is a
Comment
.
commentChar(int)
- Method in class java.io.
StreamTokenizer
Specified that the character argument starts a single-line
 comment.
comments()
- Element in annotation interface javax.annotation.processing.
Generated
A place holder for any comments that the code generator may want to
 include in the generated code.
COMMENTS
- Static variable in class java.util.regex.
Pattern
Permits whitespace and comments in pattern.
CommentTree
- Interface in
com.sun.source.doctree
An embedded HTML comment.
commit()
- Method in class com.sun.security.auth.module.
JndiLoginModule
Abstract method to commit the authentication process (phase 2).
commit()
- Method in class com.sun.security.auth.module.
KeyStoreLoginModule
Abstract method to commit the authentication process (phase 2).
commit()
- Method in class com.sun.security.auth.module.
Krb5LoginModule
This method is called if the LoginContext's
 overall authentication succeeded
 (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL
 LoginModules succeeded).
commit()
- Method in class com.sun.security.auth.module.
LdapLoginModule
Complete user authentication.
commit()
- Method in class com.sun.security.auth.module.
NTLoginModule
This method is called if the LoginContext's
 overall authentication succeeded
 (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
 succeeded).
commit()
- Method in class com.sun.security.auth.module.
UnixLoginModule
Commit the authentication (second phase).
commit()
- Method in interface java.sql.
Connection
Makes all changes made since the previous
 commit/rollback permanent and releases any database locks
 currently held by this
Connection
object.
commit()
- Method in interface javax.security.auth.spi.
LoginModule
Method to commit the authentication process (phase 2).
commit()
- Method in interface javax.sql.rowset.
CachedRowSet
Each
CachedRowSet
object's
SyncProvider
contains
 a
Connection
object from the
ResultSet
or JDBC
 properties passed to it's constructors.
commit()
- Method in interface javax.sql.rowset.
JdbcRowSet
Each
JdbcRowSet
contains a
Connection
object from
 the
ResultSet
or JDBC properties passed to it's constructors.
commit()
- Method in interface javax.sql.rowset.spi.
TransactionalWriter
Makes permanent all changes that have been performed by the
acceptChanges
method since the last call to either the
commit
or
rollback
methods.
commit()
- Method in class jdk.jfr.
Event
Writes the field values, time stamp, and event duration to the Flight
 Recorder system.
commit(Xid, boolean)
- Method in interface javax.transaction.xa.
XAResource
Commits the global transaction specified by xid.
COMMIT
- Static variable in class javax.swing.
JFormattedTextField
Constant identifying that when focus is lost,
commitEdit
should be invoked.
COMMIT_ON_ACCEPT_CHANGES
- Static variable in interface javax.sql.rowset.
CachedRowSet
Deprecated.
Because this field is final (it is part of an interface),
  its value cannot be changed.
COMMIT_OR_REVERT
- Static variable in class javax.swing.
JFormattedTextField
Constant identifying that when focus is lost,
commitEdit
should be invoked.
commitEdit()
- Method in class javax.swing.
JFormattedTextField
Forces the current value to be taken from the
AbstractFormatter
and set as the current value.
commitEdit()
- Method in class javax.swing.
JSpinner
Commits the currently edited value to the
SpinnerModel
.
commitEdit()
- Method in class javax.swing.
JSpinner.DefaultEditor
Pushes the currently edited value to the
SpinnerModel
.
COMMON
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Common".
COMMON
- Static variable in class java.awt.
JobAttributes.DialogType
The
DialogType
instance to use for
 specifying the cross-platform, pure Java print dialog.
COMMON
- Static variable in class javax.print.attribute.standard.
DialogTypeSelection
The cross-platform print dialog should be used.
COMMON_INDIC_NUMBER_FORMS
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Common Indic Number Forms" Unicode character block.
CommonDataSource
- Interface in
javax.sql
Interface that defines the methods which are common between
DataSource
,
XADataSource
and
ConnectionPoolDataSource
.
commonPool()
- Static method in class java.util.concurrent.
ForkJoinPool
Returns the common pool instance.
CommunicationException
- Exception Class in
javax.naming
This exception is thrown when the client is
 unable to communicate with the directory or naming service.
CommunicationException()
- Constructor for exception class javax.naming.
CommunicationException
Constructs a new instance of CommunicationException.
CommunicationException(String)
- Constructor for exception class javax.naming.
CommunicationException
Constructs a new instance of CommunicationException using the
 arguments supplied.
compact()
- Method in class java.nio.
ByteBuffer
Compacts this buffer
(optional operation)
.
compact()
- Method in class java.nio.
CharBuffer
Compacts this buffer
(optional operation)
.
compact()
- Method in class java.nio.
DoubleBuffer
Compacts this buffer
(optional operation)
.
compact()
- Method in class java.nio.
FloatBuffer
Compacts this buffer
(optional operation)
.
compact()
- Method in class java.nio.
IntBuffer
Compacts this buffer
(optional operation)
.
compact()
- Method in class java.nio.
LongBuffer
Compacts this buffer
(optional operation)
.
compact()
- Method in class java.nio.
MappedByteBuffer
Compacts this buffer
(optional operation)
.
compact()
- Method in class java.nio.
ShortBuffer
Compacts this buffer
(optional operation)
.
COMPACT
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "compact"
COMPACT_DISC
- Static variable in class javax.sound.sampled.
Port.Info
A type of port that gets audio from a CD-ROM drive.
CompactNumberFormat
- Class in
java.text
CompactNumberFormat
is a concrete subclass of
NumberFormat
that formats a decimal number in its compact form.
CompactNumberFormat(String, DecimalFormatSymbols, String[])
- Constructor for class java.text.
CompactNumberFormat
Creates a
CompactNumberFormat
using the given decimal pattern,
 decimal format symbols and compact patterns.
CompactNumberFormat(String, DecimalFormatSymbols, String[], String)
- Constructor for class java.text.
CompactNumberFormat
Creates a
CompactNumberFormat
using the given decimal pattern,
 decimal format symbols, compact patterns, and plural rules.
Compact Number Patterns
- Search tag in class java.text.CompactNumberFormat
Section
Comparable<T>
- Interface in
java.lang
This interface imposes a total ordering on the objects of each class that
 implements it.
comparator()
- Method in class java.util.concurrent.
ConcurrentSkipListMap
comparator()
- Method in class java.util.concurrent.
ConcurrentSkipListSet
comparator()
- Method in class java.util.concurrent.
PriorityBlockingQueue
Returns the comparator used to order the elements in this queue,
 or
null
if this queue uses the
natural ordering
of its elements.
comparator()
- Method in class java.util.
PriorityQueue
Returns the comparator used to order the elements in this
 queue, or
null
if this queue is sorted according to
 the
natural ordering
of its elements.
comparator()
- Method in interface java.util.
SortedMap
Returns the comparator used to order the keys in this map, or
null
if this map uses the
natural ordering
of its keys.
comparator()
- Method in interface java.util.
SortedSet
Returns the comparator used to order the elements in this set,
 or
null
if this set uses the
natural ordering
of its elements.
comparator()
- Method in class java.util.
TreeMap
comparator()
- Method in class java.util.
TreeSet
Comparator<T>
- Interface in
java.util
A comparison function, which imposes a
total ordering
on
 some collection of objects.
compare(boolean[], boolean[])
- Static method in class java.util.
Arrays
Compares two
boolean
arrays lexicographically.
compare(boolean[], int, int, boolean[], int, int)
- Static method in class java.util.
Arrays
Compares two
boolean
arrays lexicographically over the specified
 ranges.
compare(boolean, boolean)
- Static method in class java.lang.
Boolean
Compares two
boolean
values.
compare(byte[], byte[])
- Static method in class java.util.
Arrays
Compares two
byte
arrays lexicographically.
compare(byte[], int, int, byte[], int, int)
- Static method in class java.util.
Arrays
Compares two
byte
arrays lexicographically over the specified
 ranges.
compare(byte, byte)
- Static method in class java.lang.
Byte
Compares two
byte
values numerically.
compare(char[], char[])
- Static method in class java.util.
Arrays
Compares two
char
arrays lexicographically.
compare(char[], int, int, char[], int, int)
- Static method in class java.util.
Arrays
Compares two
char
arrays lexicographically over the specified
 ranges.
compare(char, char)
- Static method in class java.lang.
Character
Compares two
char
values numerically.
compare(double[], double[])
- Static method in class java.util.
Arrays
Compares two
double
arrays lexicographically.
compare(double[], int, int, double[], int, int)
- Static method in class java.util.
Arrays
Compares two
double
arrays lexicographically over the specified
 ranges.
compare(double, double)
- Static method in class java.lang.
Double
Compares the two specified
double
values.
compare(float[], float[])
- Static method in class java.util.
Arrays
Compares two
float
arrays lexicographically.
compare(float[], int, int, float[], int, int)
- Static method in class java.util.
Arrays
Compares two
float
arrays lexicographically over the specified
 ranges.
compare(float, float)
- Static method in class java.lang.
Float
Compares the two specified
float
values.
compare(int[], int[])
- Static method in class java.util.
Arrays
Compares two
int
arrays lexicographically.
compare(int[], int, int, int[], int, int)
- Static method in class java.util.
Arrays
Compares two
int
arrays lexicographically over the specified
 ranges.
compare(int, int)
- Static method in class java.lang.
Integer
Compares two
int
values numerically.
compare(long[], int, int, long[], int, int)
- Static method in class java.util.
Arrays
Compares two
long
arrays lexicographically over the specified
 ranges.
compare(long[], long[])
- Static method in class java.util.
Arrays
Compares two
long
arrays lexicographically.
compare(long, long)
- Static method in class java.lang.
Long
Compares two
long
values numerically.
compare(short[], int, int, short[], int, int)
- Static method in class java.util.
Arrays
Compares two
short
arrays lexicographically over the specified
 ranges.
compare(short[], short[])
- Static method in class java.util.
Arrays
Compares two
short
arrays lexicographically.
compare(short, short)
- Static method in class java.lang.
Short
Compares two
short
values numerically.
compare(CharSequence, CharSequence)
- Static method in interface java.lang.
CharSequence
Compares two
CharSequence
instances lexicographically.
compare(Object, Object)
- Method in class java.text.
Collator
Compares its two arguments for order.
compare(String, String)
- Method in class java.text.
Collator
Compares the source string to the target string according to the
 collation rules for this Collator.
compare(String, String)
- Method in class java.text.
RuleBasedCollator
Compares the character data stored in two different strings based on the
 collation rules.
compare(Duration)
- Method in class javax.xml.datatype.
Duration
Partial order relation comparison with this
Duration
instance.
compare(XMLGregorianCalendar)
- Method in class javax.xml.datatype.
XMLGregorianCalendar
Compare two instances of W3C XML Schema 1.0 date/time datatypes
 according to partial order relation defined in
W3C XML Schema 1.0 Part 2, Section 3.2.7.3,
Order relation on dateTime
.
compare(VectorOperators.Comparison, byte)
- Method in class jdk.incubator.vector.
ByteVector
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation.
compare(VectorOperators.Comparison, byte, VectorMask<Byte>)
- Method in class jdk.incubator.vector.
ByteVector
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
compare(VectorOperators.Comparison, double)
- Method in class jdk.incubator.vector.
DoubleVector
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation.
compare(VectorOperators.Comparison, double, VectorMask<Double>)
- Method in class jdk.incubator.vector.
DoubleVector
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
compare(VectorOperators.Comparison, float)
- Method in class jdk.incubator.vector.
FloatVector
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation.
compare(VectorOperators.Comparison, float, VectorMask<Float>)
- Method in class jdk.incubator.vector.
FloatVector
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
compare(VectorOperators.Comparison, int)
- Method in class jdk.incubator.vector.
IntVector
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation.
compare(VectorOperators.Comparison, int, VectorMask<Integer>)
- Method in class jdk.incubator.vector.
IntVector
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
compare(VectorOperators.Comparison, long)
- Method in class jdk.incubator.vector.
ByteVector
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation.
compare(VectorOperators.Comparison, long)
- Method in class jdk.incubator.vector.
DoubleVector
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation.
compare(VectorOperators.Comparison, long)
- Method in class jdk.incubator.vector.
FloatVector
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation.
compare(VectorOperators.Comparison, long)
- Method in class jdk.incubator.vector.
IntVector
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation.
compare(VectorOperators.Comparison, long)
- Method in class jdk.incubator.vector.
LongVector
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation.
compare(VectorOperators.Comparison, long)
- Method in class jdk.incubator.vector.
ShortVector
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation.
compare(VectorOperators.Comparison, long)
- Method in class jdk.incubator.vector.
Vector
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation.
compare(VectorOperators.Comparison, long, VectorMask<E>)
- Method in class jdk.incubator.vector.
Vector
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
compare(VectorOperators.Comparison, long, VectorMask<Byte>)
- Method in class jdk.incubator.vector.
ByteVector
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
compare(VectorOperators.Comparison, long, VectorMask<Double>)
- Method in class jdk.incubator.vector.
DoubleVector
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
compare(VectorOperators.Comparison, long, VectorMask<Float>)
- Method in class jdk.incubator.vector.
FloatVector
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
compare(VectorOperators.Comparison, long, VectorMask<Integer>)
- Method in class jdk.incubator.vector.
IntVector
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
compare(VectorOperators.Comparison, long, VectorMask<Long>)
- Method in class jdk.incubator.vector.
LongVector
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
compare(VectorOperators.Comparison, long, VectorMask<Short>)
- Method in class jdk.incubator.vector.
ShortVector
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
compare(VectorOperators.Comparison, short)
- Method in class jdk.incubator.vector.
ShortVector
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation.
compare(VectorOperators.Comparison, short, VectorMask<Short>)
- Method in class jdk.incubator.vector.
ShortVector
Tests this vector by comparing it with an input scalar,
 according to the given comparison operation,
 in lanes selected by a mask.
compare(VectorOperators.Comparison, Vector<E>)
- Method in class jdk.incubator.vector.
Vector
Tests this vector by comparing it with another input vector,
 according to the given comparison operation.
compare(VectorOperators.Comparison, Vector<E>, VectorMask<E>)
- Method in class jdk.incubator.vector.
Vector
Tests this vector by comparing it with another input vector,
 according to the given comparison operation,
 in lanes selected by a mask.
compare(VectorOperators.Comparison, Vector<Byte>)
- Method in class jdk.incubator.vector.
ByteVector
Tests this vector by comparing it with another input vector,
 according to the given comparison operation.
compare(VectorOperators.Comparison, Vector<Double>)
- Method in class jdk.incubator.vector.
DoubleVector
Tests this vector by comparing it with another input vector,
 according to the given comparison operation.
compare(VectorOperators.Comparison, Vector<Float>)
- Method in class jdk.incubator.vector.
FloatVector
Tests this vector by comparing it with another input vector,
 according to the given comparison operation.
compare(VectorOperators.Comparison, Vector<Integer>)
- Method in class jdk.incubator.vector.
IntVector
Tests this vector by comparing it with another input vector,
 according to the given comparison operation.
compare(VectorOperators.Comparison, Vector<Long>)
- Method in class jdk.incubator.vector.
LongVector
Tests this vector by comparing it with another input vector,
 according to the given comparison operation.
compare(VectorOperators.Comparison, Vector<Short>)
- Method in class jdk.incubator.vector.
ShortVector
Tests this vector by comparing it with another input vector,
 according to the given comparison operation.
compare(T[], int, int, T[], int, int)
- Static method in class java.util.
Arrays
Compares two
Object
arrays lexicographically over the specified
 ranges.
compare(T[], int, int, T[], int, int, Comparator<? super T>)
- Static method in class java.util.
Arrays
Compares two
Object
arrays lexicographically over the specified
 ranges.
compare(T[], T[])
- Static method in class java.util.
Arrays
Compares two
Object
arrays, within comparable elements,
 lexicographically.
compare(T[], T[], Comparator<? super T>)
- Static method in class java.util.
Arrays
Compares two
Object
arrays lexicographically using a specified
 comparator.
compare(T, T)
- Method in interface java.util.
Comparator
Compares its two arguments for order.
compare(T, T, Comparator<? super T>)
- Static method in class java.util.
Objects
Returns 0 if the arguments are identical and
c.compare(a, b)
otherwise.
COMPARE_AND_EXCHANGE
- Enum constant in enum class java.lang.invoke.
VarHandle.AccessMode
The access mode whose access is specified by the corresponding
 method
VarHandle.compareAndExchange
COMPARE_AND_EXCHANGE_ACQUIRE
- Enum constant in enum class java.lang.invoke.
VarHandle.AccessMode
The access mode whose access is specified by the corresponding
 method
VarHandle.compareAndExchangeAcquire
COMPARE_AND_EXCHANGE_RELEASE
- Enum constant in enum class java.lang.invoke.
VarHandle.AccessMode
The access mode whose access is specified by the corresponding
 method
VarHandle.compareAndExchangeRelease
COMPARE_AND_SET
- Enum constant in enum class java.lang.invoke.
VarHandle.AccessMode
The access mode whose access is specified by the corresponding
 method
VarHandle.compareAndSet
compareAndExchange(boolean, boolean)
- Method in class java.util.concurrent.atomic.
AtomicBoolean
Atomically sets the value to
newValue
if the current value,
 referred to as the
witness value
,
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndExchange(java.lang.Object...)
.
compareAndExchange(int, int)
- Method in class java.util.concurrent.atomic.
AtomicInteger
Atomically sets the value to
newValue
if the current value,
 referred to as the
witness value
,
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndExchange(java.lang.Object...)
.
compareAndExchange(int, int, int)
- Method in class java.util.concurrent.atomic.
AtomicIntegerArray
Atomically sets the element at index
i
to
newValue
if the element's current value, referred to as the
witness
 value
,
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndExchange(java.lang.Object...)
.
compareAndExchange(int, long, long)
- Method in class java.util.concurrent.atomic.
AtomicLongArray
Atomically sets the element at index
i
to
newValue
if the element's current value, referred to as the
witness
 value
,
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndExchange(java.lang.Object...)
.
compareAndExchange(int, E, E)
- Method in class java.util.concurrent.atomic.
AtomicReferenceArray
Atomically sets the element at index
i
to
newValue
if the element's current value, referred to as the
witness
 value
,
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndExchange(java.lang.Object...)
.
compareAndExchange(long, long)
- Method in class java.util.concurrent.atomic.
AtomicLong
Atomically sets the value to
newValue
if the current value,
 referred to as the
witness value
,
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndExchange(java.lang.Object...)
.
compareAndExchange(Object...)
- Method in class java.lang.invoke.
VarHandle
Atomically sets the value of a variable to the
newValue
with the
 memory semantics of
VarHandle.setVolatile(java.lang.Object...)
if the variable's current value,
 referred to as the
witness value
,
==
the
expectedValue
, as accessed with the memory semantics of
VarHandle.getVolatile(java.lang.Object...)
.
compareAndExchange(V, V)
- Method in class java.util.concurrent.atomic.
AtomicReference
Atomically sets the value to
newValue
if the current value,
 referred to as the
witness value
,
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndExchange(java.lang.Object...)
.
compareAndExchangeAcquire(boolean, boolean)
- Method in class java.util.concurrent.atomic.
AtomicBoolean
Atomically sets the value to
newValue
if the current value,
 referred to as the
witness value
,
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndExchangeAcquire(java.lang.Object...)
.
compareAndExchangeAcquire(int, int)
- Method in class java.util.concurrent.atomic.
AtomicInteger
Atomically sets the value to
newValue
if the current value,
 referred to as the
witness value
,
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndExchangeAcquire(java.lang.Object...)
.
compareAndExchangeAcquire(int, int, int)
- Method in class java.util.concurrent.atomic.
AtomicIntegerArray
Atomically sets the element at index
i
to
newValue
if the element's current value, referred to as the
witness
 value
,
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndExchangeAcquire(java.lang.Object...)
.
compareAndExchangeAcquire(int, long, long)
- Method in class java.util.concurrent.atomic.
AtomicLongArray
Atomically sets the element at index
i
to
newValue
if the element's current value, referred to as the
witness
 value
,
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndExchangeAcquire(java.lang.Object...)
.
compareAndExchangeAcquire(int, E, E)
- Method in class java.util.concurrent.atomic.
AtomicReferenceArray
Atomically sets the element at index
i
to
newValue
if the element's current value, referred to as the
witness
 value
,
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndExchangeAcquire(java.lang.Object...)
.
compareAndExchangeAcquire(long, long)
- Method in class java.util.concurrent.atomic.
AtomicLong
Atomically sets the value to
newValue
if the current value,
 referred to as the
witness value
,
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndExchangeAcquire(java.lang.Object...)
.
compareAndExchangeAcquire(Object...)
- Method in class java.lang.invoke.
VarHandle
Atomically sets the value of a variable to the
newValue
with the
 memory semantics of
VarHandle.set(java.lang.Object...)
if the variable's current value,
 referred to as the
witness value
,
==
the
expectedValue
, as accessed with the memory semantics of
VarHandle.getAcquire(java.lang.Object...)
.
compareAndExchangeAcquire(V, V)
- Method in class java.util.concurrent.atomic.
AtomicReference
Atomically sets the value to
newValue
if the current value,
 referred to as the
witness value
,
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndExchangeAcquire(java.lang.Object...)
.
compareAndExchangeRelease(boolean, boolean)
- Method in class java.util.concurrent.atomic.
AtomicBoolean
Atomically sets the value to
newValue
if the current value,
 referred to as the
witness value
,
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndExchangeRelease(java.lang.Object...)
.
compareAndExchangeRelease(int, int)
- Method in class java.util.concurrent.atomic.
AtomicInteger
Atomically sets the value to
newValue
if the current value,
 referred to as the
witness value
,
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndExchangeRelease(java.lang.Object...)
.
compareAndExchangeRelease(int, int, int)
- Method in class java.util.concurrent.atomic.
AtomicIntegerArray
Atomically sets the element at index
i
to
newValue
if the element's current value, referred to as the
witness
 value
,
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndExchangeRelease(java.lang.Object...)
.
compareAndExchangeRelease(int, long, long)
- Method in class java.util.concurrent.atomic.
AtomicLongArray
Atomically sets the element at index
i
to
newValue
if the element's current value, referred to as the
witness
 value
,
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndExchangeRelease(java.lang.Object...)
.
compareAndExchangeRelease(int, E, E)
- Method in class java.util.concurrent.atomic.
AtomicReferenceArray
Atomically sets the element at index
i
to
newValue
if the element's current value, referred to as the
witness
 value
,
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndExchangeRelease(java.lang.Object...)
.
compareAndExchangeRelease(long, long)
- Method in class java.util.concurrent.atomic.
AtomicLong
Atomically sets the value to
newValue
if the current value,
 referred to as the
witness value
,
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndExchangeRelease(java.lang.Object...)
.
compareAndExchangeRelease(Object...)
- Method in class java.lang.invoke.
VarHandle
Atomically sets the value of a variable to the
newValue
with the
 memory semantics of
VarHandle.setRelease(java.lang.Object...)
if the variable's current value,
 referred to as the
witness value
,
==
the
expectedValue
, as accessed with the memory semantics of
VarHandle.get(java.lang.Object...)
.
compareAndExchangeRelease(V, V)
- Method in class java.util.concurrent.atomic.
AtomicReference
Atomically sets the value to
newValue
if the current value,
 referred to as the
witness value
,
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndExchangeRelease(java.lang.Object...)
.
compareAndSet(boolean, boolean)
- Method in class java.util.concurrent.atomic.
AtomicBoolean
Atomically sets the value to
newValue
if the current value
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndSet(java.lang.Object...)
.
compareAndSet(int, int)
- Method in class java.util.concurrent.atomic.
AtomicInteger
Atomically sets the value to
newValue
if the current value
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndSet(java.lang.Object...)
.
compareAndSet(int, int, int)
- Method in class java.util.concurrent.atomic.
AtomicIntegerArray
Atomically sets the element at index
i
to
newValue
if the element's current value
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndSet(java.lang.Object...)
.
compareAndSet(int, long, long)
- Method in class java.util.concurrent.atomic.
AtomicLongArray
Atomically sets the element at index
i
to
newValue
if the element's current value
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndSet(java.lang.Object...)
.
compareAndSet(int, E, E)
- Method in class java.util.concurrent.atomic.
AtomicReferenceArray
Atomically sets the element at index
i
to
newValue
if the element's current value
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndSet(java.lang.Object...)
.
compareAndSet(long, long)
- Method in class java.util.concurrent.atomic.
AtomicLong
Atomically sets the value to
newValue
if the current value
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndSet(java.lang.Object...)
.
compareAndSet(Object...)
- Method in class java.lang.invoke.
VarHandle
Atomically sets the value of a variable to the
newValue
with the
 memory semantics of
VarHandle.setVolatile(java.lang.Object...)
if the variable's current value,
 referred to as the
witness value
,
==
the
expectedValue
, as accessed with the memory semantics of
VarHandle.getVolatile(java.lang.Object...)
.
compareAndSet(T, int, int)
- Method in class java.util.concurrent.atomic.
AtomicIntegerFieldUpdater
Atomically sets the field of the given object managed by this updater
 to the given updated value if the current value
==
the
 expected value.
compareAndSet(T, long, long)
- Method in class java.util.concurrent.atomic.
AtomicLongFieldUpdater
Atomically sets the field of the given object managed by this updater
 to the given updated value if the current value
==
the
 expected value.
compareAndSet(T, V, V)
- Method in class java.util.concurrent.atomic.
AtomicReferenceFieldUpdater
Atomically sets the field of the given object managed by this updater
 to the given updated value if the current value
==
the
 expected value.
compareAndSet(V, V)
- Method in class java.util.concurrent.atomic.
AtomicReference
Atomically sets the value to
newValue
if the current value
== expectedValue
,
 with memory effects as specified by
VarHandle.compareAndSet(java.lang.Object...)
.
compareAndSet(V, V, boolean, boolean)
- Method in class java.util.concurrent.atomic.
AtomicMarkableReference
Atomically sets the value of both the reference and mark
 to the given update values if the
 current reference is
==
to the expected reference
 and the current mark is equal to the expected mark.
compareAndSet(V, V, int, int)
- Method in class java.util.concurrent.atomic.
AtomicStampedReference
Atomically sets the value of both the reference and stamp
 to the given update values if the
 current reference is
==
to the expected reference
 and the current stamp is equal to the expected stamp.
compareAndSetForkJoinTaskTag(short, short)
- Method in class java.util.concurrent.
ForkJoinTask
Atomically conditionally sets the tag value for this task.
compareAndSetPendingCount(int, int)
- Method in class java.util.concurrent.
CountedCompleter
Sets (atomically) the pending count to the given count only if
 it currently holds the given expected value.
compareAndSetState(int, int)
- Method in class java.util.concurrent.locks.
AbstractQueuedSynchronizer
Atomically sets synchronization state to the given updated
 value if the current state value equals the expected value.
compareAndSetState(long, long)
- Method in class java.util.concurrent.locks.
AbstractQueuedLongSynchronizer
Atomically sets synchronization state to the given updated
 value if the current state value equals the expected value.
compareBoundaryPoints(short, Range)
- Method in interface org.w3c.dom.ranges.
Range
Compare the boundary-points of two Ranges in a document.
compareConversion(Class<?>, Class<?>, Class<?>)
- Method in interface jdk.dynalink.linker.
ConversionComparator
Determines which of the two target types is the preferred conversion
 target from a source type.
compareConversion(Class<?>, Class<?>, Class<?>)
- Method in interface jdk.dynalink.linker.
LinkerServices
Determines which of the two type conversions from a source type to the
 two target types is preferred.
compareDocumentPosition(Node)
- Method in class javax.imageio.metadata.
IIOMetadataNode
This DOM Level 3 method is not supported for
IIOMetadataNode
and will throw a
DOMException
.
compareDocumentPosition(Node)
- Method in interface org.w3c.dom.
Node
Compares the reference node, i.e. the node on which this method is
 being called, with a node, i.e. the one passed as a parameter, with
 regard to their position in the document and according to the
 document order.
compareTabOrder(Component, Component)
- Method in class javax.swing.
DefaultFocusManager
Compares the components by their focus traversal cycle order.
compareTo(E)
- Method in class java.lang.
Enum
Compares this enum with the specified object for order.
compareTo(File)
- Method in class java.io.
File
Compares two abstract pathnames lexicographically.
compareTo(Boolean)
- Method in class java.lang.
Boolean
Compares this
Boolean
instance with another.
compareTo(Byte)
- Method in class java.lang.
Byte
Compares two
Byte
objects numerically.
compareTo(Character)
- Method in class java.lang.
Character
Compares two
Character
objects numerically.
compareTo(Double)
- Method in class java.lang.
Double
Compares two
Double
objects numerically.
compareTo(Float)
- Method in class java.lang.
Float
Compares two
Float
objects numerically.
compareTo(Integer)
- Method in class java.lang.
Integer
Compares two
Integer
objects numerically.
compareTo(Long)
- Method in class java.lang.
Long
Compares two
Long
objects numerically.
compareTo(ModuleDescriptor)
- Method in class java.lang.module.
ModuleDescriptor
Compares this module descriptor to another.
compareTo(ModuleDescriptor.Exports)
- Method in class java.lang.module.
ModuleDescriptor.Exports
Compares this module export to another.
compareTo(ModuleDescriptor.Opens)
- Method in class java.lang.module.
ModuleDescriptor.Opens
Compares this module
Opens
to another.
compareTo(ModuleDescriptor.Provides)
- Method in class java.lang.module.
ModuleDescriptor.Provides
Compares this
Provides
to another.
compareTo(ModuleDescriptor.Requires)
- Method in class java.lang.module.
ModuleDescriptor.Requires
Compares this module dependence to another.
compareTo(ModuleDescriptor.Version)
- Method in class java.lang.module.
ModuleDescriptor.Version
Compares this module version to another module version.
compareTo(Object)
- Method in class java.io.
ObjectStreamField
Compare this field with another
ObjectStreamField
.
compareTo(Object)
- Method in class javax.naming.
CompositeName
Compares this CompositeName with the specified Object for order.
compareTo(Object)
- Method in class javax.naming.
CompoundName
Compares this CompoundName with the specified Object for order.
compareTo(Object)
- Method in class javax.naming.ldap.
LdapName
Compares this LdapName with the specified Object for order.
compareTo(Object)
- Method in class javax.naming.ldap.
Rdn
Compares this Rdn with the specified Object for order.
compareTo(Object)
- Method in interface javax.naming.
Name
Compares this name with another name for order.
compareTo(ProcessHandle)
- Method in interface java.lang.
ProcessHandle
Compares this ProcessHandle with the specified ProcessHandle for order.
compareTo(Runtime.Version)
- Method in class java.lang.
Runtime.Version
Compares this version to another.
compareTo(Short)
- Method in class java.lang.
Short
Compares two
Short
objects numerically.
compareTo(String)
- Method in class java.lang.
String
Compares two strings lexicographically.
compareTo(StringBuffer)
- Method in class java.lang.
StringBuffer
Compares two
StringBuffer
instances lexicographically.
compareTo(StringBuilder)
- Method in class java.lang.
StringBuilder
Compares two
StringBuilder
instances lexicographically.
compareTo(BigDecimal)
- Method in class java.math.
BigDecimal
Compares this
BigDecimal
numerically with the specified
BigDecimal
.
compareTo(BigInteger)
- Method in class java.math.
BigInteger
Compares this BigInteger with the specified BigInteger.
compareTo(URI)
- Method in class java.net.
URI
Compares this URI to another object, which must be a URI.
compareTo(ByteBuffer)
- Method in class java.nio.
ByteBuffer
Compares this buffer to another.
compareTo(CharBuffer)
- Method in class java.nio.
CharBuffer
Compares this buffer to another.
compareTo(Charset)
- Method in class java.nio.charset.
Charset
Compares this charset to another.
compareTo(DoubleBuffer)
- Method in class java.nio.
DoubleBuffer
Compares this buffer to another.
compareTo(FileTime)
- Method in class java.nio.file.attribute.
FileTime
Compares the value of two
FileTime
objects for order.
compareTo(Path)
- Method in interface java.nio.file.
Path
Compares two abstract paths lexicographically.
compareTo(FloatBuffer)
- Method in class java.nio.
FloatBuffer
Compares this buffer to another.
compareTo(IntBuffer)
- Method in class java.nio.
IntBuffer
Compares this buffer to another.
compareTo(LongBuffer)
- Method in class java.nio.
LongBuffer
Compares this buffer to another.
compareTo(ShortBuffer)
- Method in class java.nio.
ShortBuffer
Compares this buffer to another.
compareTo(Timestamp)
- Method in class java.sql.
Timestamp
Compares this
Timestamp
object to the given
Timestamp
object.
compareTo(CollationKey)
- Method in class java.text.
CollationKey
Compare this CollationKey to the target CollationKey.
compareTo(ChronoLocalDate)
- Method in interface java.time.chrono.
ChronoLocalDate
Compares this date to another date, including the chronology.
compareTo(ChronoLocalDate)
- Method in class java.time.
LocalDate
Compares this date to another date.
compareTo(ChronoLocalDateTime<?>)
- Method in interface java.time.chrono.
ChronoLocalDateTime
Compares this date-time to another date-time, including the chronology.
compareTo(ChronoLocalDateTime<?>)
- Method in class java.time.
LocalDateTime
Compares this date-time to another date-time.
compareTo(Chronology)
- Method in class java.time.chrono.
AbstractChronology
Compares this chronology to another chronology.
compareTo(Chronology)
- Method in interface java.time.chrono.
Chronology
Compares this chronology to another chronology.
compareTo(ChronoZonedDateTime<?>)
- Method in interface java.time.chrono.
ChronoZonedDateTime
Compares this date-time to another date-time, including the chronology.
compareTo(Duration)
- Method in class java.time.
Duration
Compares this duration to the specified
Duration
.
compareTo(Instant)
- Method in class java.time.
Instant
Compares this instant to the specified instant.
compareTo(LocalTime)
- Method in class java.time.
LocalTime
Compares this time to another time.
compareTo(MonthDay)
- Method in class java.time.
MonthDay
Compares this month-day to another month-day.
compareTo(OffsetDateTime)
- Method in class java.time.
OffsetDateTime
Compares this date-time to another date-time.
compareTo(OffsetTime)
- Method in class java.time.
OffsetTime
Compares this
OffsetTime
to another time.
compareTo(Year)
- Method in class java.time.
Year
Compares this year to another year.
compareTo(YearMonth)
- Method in class java.time.
YearMonth
Compares this year-month to another year-month.
compareTo(ZoneOffsetTransition)
- Method in class java.time.zone.
ZoneOffsetTransition
Compares this transition to another based on the transition instant.
compareTo(ZoneOffset)
- Method in class java.time.
ZoneOffset
Compares this offset to another offset in descending order.
compareTo(Calendar)
- Method in class java.util.
Calendar
Compares the time values (millisecond offsets from the
Epoch
) represented by two
Calendar
objects.
compareTo(Date)
- Method in class java.sql.
Timestamp
Compares this
Timestamp
object to the given
Date
object.
compareTo(Date)
- Method in class java.util.
Date
Compares two Dates for ordering.
compareTo(UUID)
- Method in class java.util.
UUID
Compares this UUID with the specified UUID.
compareTo(ObjectName)
- Method in class javax.management.
ObjectName
Compares two ObjectName instances.
compareTo(T)
- Method in interface java.lang.
Comparable
Compares this object with the specified object for order.
compareToIgnoreCase(String)
- Method in class java.lang.
String
Compares two strings lexicographically, ignoring case
 differences.
compareToIgnoreOptional(Runtime.Version)
- Method in class java.lang.
Runtime.Version
Compares this version to another disregarding optional build
 information.
compareUnsigned(byte[], byte[])
- Static method in class java.util.
Arrays
Compares two
byte
arrays lexicographically, numerically treating
 elements as unsigned.
compareUnsigned(byte[], int, int, byte[], int, int)
- Static method in class java.util.
Arrays
Compares two
byte
arrays lexicographically over the specified
 ranges, numerically treating elements as unsigned.
compareUnsigned(byte, byte)
- Static method in class java.lang.
Byte
Compares two
byte
values numerically treating the values
 as unsigned.
compareUnsigned(int[], int[])
- Static method in class java.util.
Arrays
Compares two
int
arrays lexicographically, numerically treating
 elements as unsigned.
compareUnsigned(int[], int, int, int[], int, int)
- Static method in class java.util.
Arrays
Compares two
int
arrays lexicographically over the specified
 ranges, numerically treating elements as unsigned.
compareUnsigned(int, int)
- Static method in class java.lang.
Integer
Compares two
int
values numerically treating the values
 as unsigned.
compareUnsigned(long[], int, int, long[], int, int)
- Static method in class java.util.
Arrays
Compares two
long
arrays lexicographically over the specified
 ranges, numerically treating elements as unsigned.
compareUnsigned(long[], long[])
- Static method in class java.util.
Arrays
Compares two
long
arrays lexicographically, numerically treating
 elements as unsigned.
compareUnsigned(long, long)
- Static method in class java.lang.
Long
Compares two
long
values numerically treating the values
 as unsigned.
compareUnsigned(short[], int, int, short[], int, int)
- Static method in class java.util.
Arrays
Compares two
short
arrays lexicographically over the specified
 ranges, numerically treating elements as unsigned.
compareUnsigned(short[], short[])
- Static method in class java.util.
Arrays
Compares two
short
arrays lexicographically, numerically treating
 elements as unsigned.
compareUnsigned(short, short)
- Static method in class java.lang.
Short
Compares two
short
values numerically treating the values
 as unsigned.
comparing(Function<? super T, ? extends U>)
- Static method in interface java.util.
Comparator
Accepts a function that extracts a
Comparable
sort key from a type
T
, and returns a
Comparator<T>
that compares by that sort key.
comparing(Function<? super T, ? extends U>, Comparator<? super U>)
- Static method in interface java.util.
Comparator
Accepts a function that extracts a sort key from a type
T
, and
 returns a
Comparator<T>
that compares by that sort key using
 the specified
Comparator
.
comparingByKey()
- Static method in interface java.util.
Map.Entry
Returns a comparator that compares
Map.Entry
in natural order on key.
comparingByKey(Comparator<? super K>)
- Static method in interface java.util.
Map.Entry
Returns a comparator that compares
Map.Entry
by key using the given
Comparator
.
comparingByValue()
- Static method in interface java.util.
Map.Entry
Returns a comparator that compares
Map.Entry
in natural order on value.
comparingByValue(Comparator<? super V>)
- Static method in interface java.util.
Map.Entry
Returns a comparator that compares
Map.Entry
by value using the given
Comparator
.
comparingDouble(ToDoubleFunction<? super T>)
- Static method in interface java.util.
Comparator
Accepts a function that extracts a
double
sort key from a type
T
, and returns a
Comparator<T>
that compares by that
 sort key.
comparingInt(ToIntFunction<? super T>)
- Static method in interface java.util.
Comparator
Accepts a function that extracts an
int
sort key from a type
T
, and returns a
Comparator<T>
that compares by that
 sort key.
comparingLong(ToLongFunction<? super T>)
- Static method in interface java.util.
Comparator
Accepts a function that extracts a
long
sort key from a type
T
, and returns a
Comparator<T>
that compares by that
 sort key.
Comparison to Perl 5
- Search tag in class java.util.regex.Pattern
Section
Compatibility
- Search tag in class java.util.Locale
Section
Compatibility
- Search tag in package java.awt
Section
compatibleWith(Class<?>)
- Method in interface jdk.incubator.vector.
VectorOperators.Operator
Reports whether this operator is compatible with
 the proposed element type.
Compilable
- Interface in
javax.script
The optional interface implemented by ScriptEngines whose methods compile scripts
 to a form that can be executed repeatedly without recompilation.
COMPILATION
- Enum constant in enum class com.sun.source.util.
TaskEvent.Kind
Sent before parsing first source file, and after writing the last output file.
COMPILATION_MXBEAN_NAME
- Static variable in class java.lang.management.
ManagementFactory
String representation of the
ObjectName
for the
CompilationMXBean
.
COMPILATION_UNIT
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
CompilationUnitTree
.
CompilationMXBean
- Interface in
java.lang.management
The management interface for the compilation system of
 the Java virtual machine.
CompilationUnitTree
- Interface in
com.sun.source.tree
Represents the abstract syntax tree for ordinary compilation units
 and modular compilation units.
compile(Reader)
- Method in interface javax.script.
Compilable
Compiles the script (source read from
Reader
) for
 later execution.
compile(String)
- Static method in class java.util.regex.
Pattern
Compiles the given regular expression into a pattern.
compile(String)
- Method in interface javax.script.
Compilable
Compiles the script (source represented as a
String
) for
 later execution.
compile(String)
- Method in interface javax.xml.xpath.
XPath
Compile an XPath expression for later evaluation.
compile(String[])
- Static method in class com.sun.tools.javac.
Main
Programmatic interface to the Java Programming Language
 compiler, javac.
compile(String[], PrintWriter)
- Static method in class com.sun.tools.javac.
Main
Programmatic interface to the Java Programming Language
 compiler, javac.
compile(String, int)
- Static method in class java.util.regex.
Pattern
Compiles the given regular expression into a pattern with the given
 flags.
CompiledScript
- Class in
javax.script
Extended by classes that store results of compilations.
CompiledScript()
- Constructor for class javax.script.
CompiledScript
Constructor for subclasses to call.
compiledVersion()
- Method in class java.lang.module.
ModuleDescriptor.Requires
Returns the version of the module if recorded at compile-time.
compilerOptions(String...)
- Method in class jdk.jshell.
JShell.Builder
Adds compiler options.
Compiler Tree API
- Search tag in module jdk.compiler
Compiling invocation of access mode methods
- Search tag in class java.lang.invoke.VarHandle
Section
complementOf(EnumSet<E>)
- Static method in class java.util.
EnumSet
Creates an enum set with the same element type as the specified enum
 set, initially containing all the elements of this type that are
not
contained in the specified set.
CompletableFuture<T>
- Class in
java.util.concurrent
A
Future
that may be explicitly completed (setting its
 value and status), and may be used as a
CompletionStage
,
 supporting dependent functions and actions that trigger upon its
 completion.
CompletableFuture()
- Constructor for class java.util.concurrent.
CompletableFuture
Creates a new incomplete CompletableFuture.
CompletableFuture.AsynchronousCompletionTask
- Interface in
java.util.concurrent
A marker interface identifying asynchronous tasks produced by
async
methods.
complete()
- Method in class java.util.
Calendar
Fills in any unset fields in the calendar fields.
complete(boolean)
- Method in class com.sun.nio.sctp.
MessageInfo
Sets whether or not the message is complete.
complete(T)
- Method in class java.util.concurrent.
CompletableFuture
If not already completed, sets the value returned by
CompletableFuture.get()
and related methods to the given value.
complete(T)
- Method in class java.util.concurrent.
CountedCompleter
Regardless of pending count, invokes
CountedCompleter.onCompletion(CountedCompleter)
, marks this task as
 complete and further triggers
CountedCompleter.tryComplete()
on this
 task's completer, if one exists.
complete(V)
- Method in class java.util.concurrent.
ForkJoinTask
Completes this task, and if not already aborted or cancelled,
 returning the given value as the result of subsequent
 invocations of
join
and related operations.
COMPLETE
- Enum constant in enum class jdk.jshell.
SourceCodeAnalysis.Completeness
The input is a complete source snippet (declaration or statement) as is.
COMPLETE
- Static variable in class java.awt.
MediaTracker
Flag indicating that the downloading of media was completed
 successfully.
COMPLETE_WITH_SEMI
- Enum constant in enum class jdk.jshell.
SourceCodeAnalysis.Completeness
With this addition of a semicolon the input is a complete source snippet.
completeAsync(Supplier<? extends T>)
- Method in class java.util.concurrent.
CompletableFuture
Completes this CompletableFuture with the result of the given
 Supplier function invoked from an asynchronous task using the
 default executor.
completeAsync(Supplier<? extends T>, Executor)
- Method in class java.util.concurrent.
CompletableFuture
Completes this CompletableFuture with the result of
 the given Supplier function invoked from an asynchronous
 task using the given executor.
completed(V, A)
- Method in interface java.nio.channels.
CompletionHandler
Invoked when an operation has completed.
COMPLETED
- Static variable in class javax.print.attribute.standard.
JobState
The job has completed successfully or with warnings or errors after
 processing, all of the job media sheets have been successfully stacked in
 the appropriate output bin(s), and all job status attributes have reached
 their final values for the job.
completedFuture(U)
- Static method in class java.util.concurrent.
CompletableFuture
Returns a new CompletableFuture that is already completed with
 the given value.
completeDrag(int, int)
- Method in class javax.swing.plaf.basic.
BasicSplitPaneDivider.DragController
Messages finishDraggingTo with the new location for the mouse
 event.
completeDrag(MouseEvent)
- Method in class javax.swing.plaf.basic.
BasicSplitPaneDivider.DragController
Messages finishDraggingTo with the new location for the mouse
 event.
completedStage(U)
- Static method in class java.util.concurrent.
CompletableFuture
Returns a new CompletionStage that is already completed with
 the given value and supports only those methods in
 interface
CompletionStage
.
completeEditing()
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Messages to stop the editing session.
completeEditing(boolean, boolean, boolean)
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Stops the editing session.
completeExceptionally(Throwable)
- Method in class java.util.concurrent.
CompletableFuture
If not already completed, causes invocations of
CompletableFuture.get()
and related methods to throw the given exception.
completeExceptionally(Throwable)
- Method in class java.util.concurrent.
ForkJoinTask
Completes this task abnormally, and if not already aborted or
 cancelled, causes it to throw the given exception upon
join
and related operations.
completeness()
- Method in interface jdk.jshell.
SourceCodeAnalysis.CompletionInfo
The analyzed completeness of the input.
Completeness
- Search tag in package java.lang.module
Section
completeOnTimeout(T, long, TimeUnit)
- Method in class java.util.concurrent.
CompletableFuture
Completes this CompletableFuture with the given value if not
 otherwise completed before the given timeout.
COMPLETESCANLINES
- Static variable in interface java.awt.image.
ImageConsumer
The pixels will be delivered in (multiples of) complete scanlines
 at a time.
completeUIInstall()
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Invoked from installUI after all the defaults/listeners have been
 installed.
completeUIUninstall()
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Uninstalls UI.
Completion
- Interface in
javax.annotation.processing
A suggested
completion
for an
 annotation.
CompletionException
- Exception Class in
java.util.concurrent
Exception thrown when an error or other exception is encountered
 in the course of completing a result or task.
CompletionException()
- Constructor for exception class java.util.concurrent.
CompletionException
Constructs a
CompletionException
with no detail message.
CompletionException(String)
- Constructor for exception class java.util.concurrent.
CompletionException
Constructs a
CompletionException
with the specified detail
 message.
CompletionException(String, Throwable)
- Constructor for exception class java.util.concurrent.
CompletionException
Constructs a
CompletionException
with the specified detail
 message and cause.
CompletionException(Throwable)
- Constructor for exception class java.util.concurrent.
CompletionException
Constructs a
CompletionException
with the specified cause.
CompletionHandler<V,
A>
- Interface in
java.nio.channels
A handler for consuming the result of an asynchronous I/O operation.
Completions
- Class in
javax.annotation.processing
Utility class for assembling
Completion
objects.
CompletionService<V>
- Interface in
java.util.concurrent
A service that decouples the production of new asynchronous tasks
 from the consumption of the results of completed tasks.
CompletionStage<T>
- Interface in
java.util.concurrent
A stage of a possibly asynchronous computation, that performs an
 action or computes a value when another CompletionStage completes.
completionSuggestions(String, int, int[])
- Method in class jdk.jshell.
SourceCodeAnalysis
Compute possible follow-ups for the given input.
component
- Variable in class java.awt.dnd.
DragGestureRecognizer
The
Component
associated with this
DragGestureRecognizer
.
component
- Static variable in class javax.swing.
ImageIcon
Deprecated.
since 1.8
Component
- Class in
java.awt
A
component
is an object having a graphical representation
 that can be displayed on the screen and that can interact with the
 user.
Component()
- Constructor for class java.awt.
Component
Constructs a new component.
COMPONENT
- Static variable in class com.sun.java.accessibility.util.
EventID
Maps to AWT Component support (i.e., ComponentListener
 and ComponentEvent)
COMPONENT
- Static variable in class java.awt.font.
GlyphMetrics
Indicates a glyph with no corresponding character in the
 backing store.
COMPONENT_ADDED
- Static variable in class java.awt.event.
ContainerEvent
This event indicates that a component was added to the container.
COMPONENT_EVENT_MASK
- Static variable in class java.awt.
AWTEvent
The event mask for selecting component events.
COMPONENT_FIRST
- Static variable in class java.awt.event.
ComponentEvent
The first number in the range of ids used for component events.
COMPONENT_HIDDEN
- Static variable in class java.awt.event.
ComponentEvent
This event indicates that the component was rendered invisible.
COMPONENT_LAST
- Static variable in class java.awt.event.
ComponentEvent
The last number in the range of ids used for component events.
COMPONENT_MOVED
- Static variable in class java.awt.event.
ComponentEvent
This event indicates that the component's position changed.
COMPONENT_REMOVED
- Static variable in class java.awt.event.
ContainerEvent
This event indicates that a component was removed from the container.
COMPONENT_RESIZED
- Static variable in class java.awt.event.
ComponentEvent
This event indicates that the component's size changed.
COMPONENT_SHOWN
- Static variable in class java.awt.event.
ComponentEvent
This event indicates that the component was made visible.
Component.AccessibleAWTComponent
- Class in
java.awt
Inner class of Component used to provide default support for
 accessibility.
Component.AccessibleAWTComponent.AccessibleAWTComponentHandler
- Class in
java.awt
Fire PropertyChange listener, if one is registered,
 when shown/hidden..
Component.AccessibleAWTComponent.AccessibleAWTFocusHandler
- Class in
java.awt
Fire PropertyChange listener, if one is registered,
 when focus events happen
Component.BaselineResizeBehavior
- Enum Class in
java.awt
Enumeration of the common ways the baseline of a component can
 change as the size changes.
Component.BltBufferStrategy
- Class in
java.awt
Inner class for blitting offscreen surfaces to a component.
Component.FlipBufferStrategy
- Class in
java.awt
Inner class for flipping buffers on a component.
ComponentAdapter
- Class in
java.awt.event
An abstract adapter class for receiving component events.
ComponentAdapter()
- Constructor for class java.awt.event.
ComponentAdapter
Constructs a
ComponentAdapter
.
componentAdded(ContainerEvent)
- Method in class java.awt.
AWTEventMulticaster
Handles the componentAdded container event by invoking the
 componentAdded methods on listener-a and listener-b.
componentAdded(ContainerEvent)
- Method in class java.awt.
Container.AccessibleAWTContainer.AccessibleContainerHandler
componentAdded(ContainerEvent)
- Method in class java.awt.event.
ContainerAdapter
Invoked when a component has been added to the container.
componentAdded(ContainerEvent)
- Method in interface java.awt.event.
ContainerListener
Invoked when a component has been added to the container.
componentAdded(ContainerEvent)
- Method in class javax.swing.
JComponent.AccessibleJComponent.AccessibleContainerHandler
componentAdded(ContainerEvent)
- Method in class javax.swing.plaf.basic.
BasicToolBarUI.ToolBarContListener
ComponentAttribute
- Static variable in class javax.swing.text.
StyleConstants
Name of the component attribute.
ComponentColorModel
- Class in
java.awt.image
A
ColorModel
class that works with pixel values that
 represent color and alpha information as separate samples and that
 store each sample in a separate data element.
ComponentColorModel(ColorSpace, boolean, boolean, int, int)
- Constructor for class java.awt.image.
ComponentColorModel
Constructs a
ComponentColorModel
from the specified
 parameters.
ComponentColorModel(ColorSpace, int[], boolean, boolean, int, int)
- Constructor for class java.awt.image.
ComponentColorModel
Constructs a
ComponentColorModel
from the specified
 parameters.
ComponentElementName
- Static variable in class javax.swing.text.
StyleConstants
Name of elements used to represent components.
ComponentEvent
- Class in
java.awt.event
A low-level event which indicates that a component moved, changed
 size, or changed visibility (also, the root class for the other
 component-level events).
ComponentEvent(Component, int)
- Constructor for class java.awt.event.
ComponentEvent
Constructs a
ComponentEvent
object.
componentForPoint(Component, Point)
- Method in class javax.swing.
MenuSelectionManager
Returns the component in the currently selected path
 which contains sourcePoint.
ComponentHandler()
- Constructor for class javax.swing.plaf.basic.
BasicInternalFrameUI.ComponentHandler
Constructs a
ComponentHandler
.
ComponentHandler()
- Constructor for class javax.swing.plaf.basic.
BasicSliderUI.ComponentHandler
Constructs a
ComponentHandler
.
ComponentHandler()
- Constructor for class javax.swing.plaf.basic.
BasicTreeUI.ComponentHandler
Constructs a
ComponentHandler
.
componentHidden(ComponentEvent)
- Method in class java.awt.
AWTEventMulticaster
Handles the componentHidden event by invoking the
 componentHidden methods on listener-a and listener-b.
componentHidden(ComponentEvent)
- Method in class java.awt.
Component.AccessibleAWTComponent.AccessibleAWTComponentHandler
componentHidden(ComponentEvent)
- Method in class java.awt.event.
ComponentAdapter
Invoked when the component has been made invisible.
componentHidden(ComponentEvent)
- Method in interface java.awt.event.
ComponentListener
Invoked when the component has been made invisible.
componentHidden(ComponentEvent)
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI.ComponentHandler
Invoked when the component has been made invisible.
ComponentInputMap
- Class in
javax.swing
A
ComponentInputMap
is an
InputMap
associated with a particular
JComponent
.
ComponentInputMap(JComponent)
- Constructor for class javax.swing.
ComponentInputMap
Creates a
ComponentInputMap
associated with the
 specified component.
ComponentInputMapUIResource
- Class in
javax.swing.plaf
A subclass of javax.swing.ComponentInputMap that implements UIResource.
ComponentInputMapUIResource(JComponent)
- Constructor for class javax.swing.plaf.
ComponentInputMapUIResource
Constructs a
ComponentInputMapUIResource
.
componentListener
- Variable in class javax.swing.plaf.basic.
BasicInternalFrameUI
Component listener
componentListener
- Variable in class javax.swing.plaf.basic.
BasicSliderUI
Component listener
ComponentListener
- Interface in
java.awt.event
The listener interface for receiving component events.
componentMoved(ComponentEvent)
- Method in class java.awt.
AWTEventMulticaster
Handles the componentMoved event by invoking the
 componentMoved methods on listener-a and listener-b.
componentMoved(ComponentEvent)
- Method in class java.awt.
Component.AccessibleAWTComponent.AccessibleAWTComponentHandler
componentMoved(ComponentEvent)
- Method in class java.awt.event.
ComponentAdapter
Invoked when the component's position changes.
componentMoved(ComponentEvent)
- Method in interface java.awt.event.
ComponentListener
Invoked when the component's position changes.
componentMoved(ComponentEvent)
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI.ComponentHandler
Invoked when the component's position changes.
ComponentOrientation
- Class in
java.awt
The ComponentOrientation class encapsulates the language-sensitive
 orientation that is to be used to order the elements of a component
 or of text.
componentRemoved(ContainerEvent)
- Method in class java.awt.
AWTEventMulticaster
Handles the componentRemoved container event by invoking the
 componentRemoved methods on listener-a and listener-b.
componentRemoved(ContainerEvent)
- Method in class java.awt.
Container.AccessibleAWTContainer.AccessibleContainerHandler
componentRemoved(ContainerEvent)
- Method in class java.awt.event.
ContainerAdapter
Invoked when a component has been removed from the container.
componentRemoved(ContainerEvent)
- Method in interface java.awt.event.
ContainerListener
Invoked when a component has been removed from the container.
componentRemoved(ContainerEvent)
- Method in class javax.swing.
JComponent.AccessibleJComponent.AccessibleContainerHandler
componentRemoved(ContainerEvent)
- Method in class javax.swing.plaf.basic.
BasicToolBarUI.ToolBarContListener
componentResized(ComponentEvent)
- Method in class java.awt.
AWTEventMulticaster
Handles the componentResized event by invoking the
 componentResized methods on listener-a and listener-b.
componentResized(ComponentEvent)
- Method in class java.awt.
Component.AccessibleAWTComponent.AccessibleAWTComponentHandler
componentResized(ComponentEvent)
- Method in class java.awt.event.
ComponentAdapter
Invoked when the component's size changes.
componentResized(ComponentEvent)
- Method in interface java.awt.event.
ComponentListener
Invoked when the component's size changes.
componentResized(ComponentEvent)
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI.ComponentHandler
Invoked when a JInternalFrame's parent's size changes.
components
- Variable in class javax.swing.plaf.basic.
BasicSplitPaneUI.BasicHorizontalLayoutManager
The components.
COMPONENTS_CONFIGURATION_B
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "ComponentsConfiguration" tag.
COMPONENTS_CONFIGURATION_CB
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "ComponentsConfiguration" tag.
COMPONENTS_CONFIGURATION_CR
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "ComponentsConfiguration" tag.
COMPONENTS_CONFIGURATION_DOES_NOT_EXIST
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "ComponentsConfiguration" tag.
COMPONENTS_CONFIGURATION_G
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "ComponentsConfiguration" tag.
COMPONENTS_CONFIGURATION_R
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "ComponentsConfiguration" tag.
COMPONENTS_CONFIGURATION_Y
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "ComponentsConfiguration" tag.
ComponentSampleModel
- Class in
java.awt.image
This class represents image data which is stored such that each sample
  of a pixel occupies one data element of the DataBuffer.
ComponentSampleModel(int, int, int, int, int, int[])
- Constructor for class java.awt.image.
ComponentSampleModel
Constructs a ComponentSampleModel with the specified parameters.
ComponentSampleModel(int, int, int, int, int, int[], int[])
- Constructor for class java.awt.image.
ComponentSampleModel
Constructs a ComponentSampleModel with the specified parameters.
componentShown(ComponentEvent)
- Method in class java.awt.
AWTEventMulticaster
Handles the componentShown event by invoking the
 componentShown methods on listener-a and listener-b.
componentShown(ComponentEvent)
- Method in class java.awt.
Component.AccessibleAWTComponent.AccessibleAWTComponentHandler
componentShown(ComponentEvent)
- Method in class java.awt.event.
ComponentAdapter
Invoked when the component has been made visible.
componentShown(ComponentEvent)
- Method in interface java.awt.event.
ComponentListener
Invoked when the component has been made visible.
componentShown(ComponentEvent)
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI.ComponentHandler
Invoked when the component has been made visible.
componentSignature()
- Method in interface com.sun.jdi.
ArrayType
Gets the JNI signature of the components of this
 array class.
Component Specific Properties
- Search tag in package javax.swing.plaf.synth
Section
componentType()
- Method in interface com.sun.jdi.
ArrayType
Returns the component type of this array,
 as specified in the array declaration.
componentType()
- Method in class java.lang.
Class
Returns the component type of this
Class
, if it describes
 an array type, or
null
otherwise.
componentType()
- Method in interface java.lang.constant.
ClassDesc
Returns the component type of this
ClassDesc
, if it describes
 an array type, or
null
otherwise.
componentType()
- Method in interface java.lang.invoke.
TypeDescriptor.OfField
If this field descriptor describes an array type, return
 a descriptor for its component type, otherwise return
null
.
componentTypeName()
- Method in interface com.sun.jdi.
ArrayType
Returns a text representation of the component
 type of this array.
ComponentUI
- Class in
javax.swing.plaf
The base class for all UI delegate objects in the Swing pluggable
 look and feel architecture.
ComponentUI()
- Constructor for class javax.swing.plaf.
ComponentUI
Sole constructor.
ComponentUIs and defaults
- Search tag in class javax.swing.LookAndFeel
Section
ComponentView
- Class in
javax.swing.text
Component decorator that implements the view interface.
ComponentView(Element)
- Constructor for class javax.swing.text.
ComponentView
Creates a new ComponentView object.
compose(Raster, Raster, WritableRaster)
- Method in interface java.awt.
CompositeContext
Composes the two source
Raster
objects and
 places the result in the destination
WritableRaster
.
compose(MethodHandle)
- Method in class jdk.dynalink.linker.
GuardedInvocation
Composes the invocation, guard, switch points, and the exception into a
 composite method handle that knows how to fall back when the guard fails
 or the invocation is invalidated.
compose(MethodHandle, MethodHandle, MethodHandle)
- Method in class jdk.dynalink.linker.
GuardedInvocation
Composes the invocation, guard, switch points, and the exception into a
 composite method handle that knows how to fall back when the guard fails
 or the invocation is invalidated.
compose(ModuleFinder...)
- Static method in interface java.lang.module.
ModuleFinder
Returns a module finder that is composed from a sequence of zero or more
 module finders.
compose(DoubleUnaryOperator)
- Method in interface java.util.function.
DoubleUnaryOperator
Returns a composed operator that first applies the
before
operator to its input, and then applies this operator to the result.
compose(Function<? super V, ? extends T>)
- Method in interface java.util.function.
Function
Returns a composed function that first applies the
before
function to its input, and then applies this function to the result.
compose(IntUnaryOperator)
- Method in interface java.util.function.
IntUnaryOperator
Returns a composed operator that first applies the
before
operator to its input, and then applies this operator to the result.
compose(LongUnaryOperator)
- Method in interface java.util.function.
LongUnaryOperator
Returns a composed operator that first applies the
before
operator to its input, and then applies this operator to the result.
ComposedTextAttribute
- Static variable in class javax.swing.text.
StyleConstants
Name of the input method composed text attribute.
composeName(String, String)
- Method in interface javax.naming.
Context
Composes the name of this context with a name relative to
 this context.
composeName(String, String)
- Method in class javax.naming.
InitialContext
Composes the name of this context with a name relative to
 this context.
composeName(Name, Name)
- Method in interface javax.naming.
Context
Composes the name of this context with a name relative to
 this context.
composeName(Name, Name)
- Method in class javax.naming.
InitialContext
Composes the name of this context with a name relative to
 this context.
Composite
- Interface in
java.awt
The
Composite
interface, along with
CompositeContext
, defines the methods to compose a draw
 primitive with the underlying graphics area.
CompositeContext
- Interface in
java.awt
The
CompositeContext
interface defines the encapsulated
 and optimized environment for a compositing operation.
CompositeData
- Interface in
javax.management.openmbean
The
CompositeData
interface specifies
 the behavior of a specific type of complex
open data
objects
 which represent
composite data
structures.
CompositeDataInvocationHandler
- Class in
javax.management.openmbean
An
InvocationHandler
that forwards getter methods to a
CompositeData
.
CompositeDataInvocationHandler(CompositeData)
- Constructor for class javax.management.openmbean.
CompositeDataInvocationHandler
Construct a handler backed by the given
CompositeData
.
CompositeDataSupport
- Class in
javax.management.openmbean
The
CompositeDataSupport
class is the
open data
class which
 implements the
CompositeData
interface.
CompositeDataSupport(CompositeType, String[], Object[])
- Constructor for class javax.management.openmbean.
CompositeDataSupport
Constructs a
CompositeDataSupport
instance with the specified
compositeType
, whose item values
 are specified by
itemValues[]
, in the same order as in
itemNames[]
.
CompositeDataSupport(CompositeType, Map<String, ?>)
- Constructor for class javax.management.openmbean.
CompositeDataSupport
Constructs a
CompositeDataSupport
instance with the specified
compositeType
,
 whose item names and corresponding values
 are given by the mappings in the map
items
.
CompositeDataView
- Interface in
javax.management.openmbean
A Java class can implement this interface to indicate how it is
 to be converted into a
CompositeData
by the MXBean framework.
CompositeGuardingDynamicLinker
- Class in
jdk.dynalink.linker.support
A
GuardingDynamicLinker
that delegates sequentially to a list of
 other guarding dynamic linkers in its
CompositeGuardingDynamicLinker.getGuardedInvocation(LinkRequest, LinkerServices)
.
CompositeGuardingDynamicLinker(Iterable<? extends GuardingDynamicLinker>)
- Constructor for class jdk.dynalink.linker.support.
CompositeGuardingDynamicLinker
Creates a new composite linker.
CompositeName
- Class in
javax.naming
This class represents a composite name -- a sequence of
 component names spanning multiple namespaces.
CompositeName()
- Constructor for class javax.naming.
CompositeName
Constructs a new empty composite name.
CompositeName(String)
- Constructor for class javax.naming.
CompositeName
Constructs a new composite name instance by parsing the string n
 using the composite name syntax (left-to-right, slash separated).
CompositeName(Enumeration<String>)
- Constructor for class javax.naming.
CompositeName
Constructs a new composite name instance using the components
 specified by 'comps'.
Composite Name Examples
- Search tag in class javax.naming.CompositeName
Section
CompositeType
- Class in
javax.management.openmbean
The
CompositeType
class is the
open type
class
 whose instances describe the types of
CompositeData
values.
CompositeType(String, String, String[], String[], OpenType<?>[])
- Constructor for class javax.management.openmbean.
CompositeType
Constructs a
CompositeType
instance, checking for the validity of the given parameters.
CompositeTypeBasedGuardingDynamicLinker
- Class in
jdk.dynalink.linker.support
A composite type-based guarding dynamic linker.
CompositeTypeBasedGuardingDynamicLinker(Iterable<? extends TypeBasedGuardingDynamicLinker>)
- Constructor for class jdk.dynalink.linker.support.
CompositeTypeBasedGuardingDynamicLinker
Creates a new composite type-based linker.
CompositeView
- Class in
javax.swing.text
CompositeView
is an abstract
View
implementation which manages one or more child views.
CompositeView(Element)
- Constructor for class javax.swing.text.
CompositeView
Constructs a
CompositeView
for the given element.
Composition Examples
- Search tag in class javax.naming.CompositeName
Section
CompoundAssignmentTree
- Interface in
com.sun.source.tree
A tree node for compound assignment operator.
CompoundBorder
- Class in
javax.swing.border
A composite Border class used to compose two Border objects
 into a single border by nesting an inside Border object within
 the insets of an outside Border object.
CompoundBorder()
- Constructor for class javax.swing.border.
CompoundBorder
Creates a compound border with null outside and inside borders.
CompoundBorder(Border, Border)
- Constructor for class javax.swing.border.
CompoundBorder
Creates a compound border with the specified outside and
 inside borders.
CompoundBorderUIResource(Border, Border)
- Constructor for class javax.swing.plaf.
BorderUIResource.CompoundBorderUIResource
Constructs a
CompoundBorderUIResource
.
CompoundControl
- Class in
javax.sound.sampled
A
CompoundControl
, such as a graphic equalizer, provides control over
 two or more related properties, each of which is itself represented as a
Control
.
CompoundControl(CompoundControl.Type, Control[])
- Constructor for class javax.sound.sampled.
CompoundControl
Constructs a new compound control object with the given parameters.
CompoundControl.Type
- Class in
javax.sound.sampled
An instance of the
CompoundControl.Type
inner class identifies
 one kind of compound control.
compoundEdit
- Variable in class javax.swing.undo.
UndoableEditSupport
The compound edit.
CompoundEdit
- Class in
javax.swing.undo
A concrete subclass of AbstractUndoableEdit, used to assemble little
 UndoableEdits into great big ones.
CompoundEdit()
- Constructor for class javax.swing.undo.
CompoundEdit
Constructs a
CompoundEdit
.
CompoundName
- Class in
javax.naming
This class represents a compound name -- a name from
 a hierarchical name space.
CompoundName(String, Properties)
- Constructor for class javax.naming.
CompoundName
Constructs a new compound name instance by parsing the string n
 using the syntax specified by the syntax properties supplied.
CompoundName(Enumeration<String>, Properties)
- Constructor for class javax.naming.
CompoundName
Constructs a new compound name instance using the components
 specified in comps and syntax.
Compound Name Syntax
- Search tag in class javax.naming.CompoundName
Section
compress()
- Method in class jdk.incubator.vector.
VectorMask
Compresses set lanes from this mask.
compress(int, int)
- Static method in class java.lang.
Integer
Returns the value obtained by compressing the bits of the
 specified
int
value,
i
, in accordance with
 the specified bit mask.
compress(long, long)
- Static method in class java.lang.
Long
Returns the value obtained by compressing the bits of the
 specified
long
value,
i
, in accordance with
 the specified bit mask.
compress(VectorMask<E>)
- Method in class jdk.incubator.vector.
Vector
Compresses the lane elements of this vector selecting lanes
 under the control of a specific mask.
compress(VectorMask<Byte>)
- Method in class jdk.incubator.vector.
ByteVector
Compresses the lane elements of this vector selecting lanes
 under the control of a specific mask.
compress(VectorMask<Double>)
- Method in class jdk.incubator.vector.
DoubleVector
Compresses the lane elements of this vector selecting lanes
 under the control of a specific mask.
compress(VectorMask<Float>)
- Method in class jdk.incubator.vector.
FloatVector
Compresses the lane elements of this vector selecting lanes
 under the control of a specific mask.
compress(VectorMask<Integer>)
- Method in class jdk.incubator.vector.
IntVector
Compresses the lane elements of this vector selecting lanes
 under the control of a specific mask.
compress(VectorMask<Long>)
- Method in class jdk.incubator.vector.
LongVector
Compresses the lane elements of this vector selecting lanes
 under the control of a specific mask.
compress(VectorMask<Short>)
- Method in class jdk.incubator.vector.
ShortVector
Compresses the lane elements of this vector selecting lanes
 under the control of a specific mask.
COMPRESS
- Static variable in class javax.print.attribute.standard.
Compression
UNIX compression technology.
COMPRESS_BITS
- Static variable in class jdk.incubator.vector.
VectorOperators
Produce
compress(a,n)
.
Compression
- Search tag in package javax.imageio.metadata
Section
Compression
- Class in
javax.print.attribute.standard
Class
Compression
is a printing attribute class, an enumeration, that
 specifies how print data is compressed.
Compression(int)
- Constructor for class javax.print.attribute.standard.
Compression
Construct a new compression enumeration value with the given integer
 value.
COMPRESSION_CCITT_RLE
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A value to be used with the "Compression" tag.
COMPRESSION_CCITT_T_4
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A value to be used with the "Compression" tag.
COMPRESSION_CCITT_T_6
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A value to be used with the "Compression" tag.
COMPRESSION_DEFLATE
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A value to be used with the "Compression" tag.
COMPRESSION_ERROR
- Static variable in class javax.print.attribute.standard.
JobStateReason
The job was aborted by the system because the printer encountered an
 error in the document data while decompressing it.
COMPRESSION_JPEG
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A value to be used with the "Compression" tag.
COMPRESSION_LZW
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A value to be used with the "Compression" tag.
COMPRESSION_NONE
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A value to be used with the "Compression" tag.
COMPRESSION_OLD_JPEG
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A value to be used with the "Compression" tag.
COMPRESSION_PACKBITS
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A value to be used with the "Compression" tag.
COMPRESSION_ZLIB
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A value to be used with the "Compression" tag.
compressionMode
- Variable in class javax.imageio.
ImageWriteParam
The mode controlling compression settings, which must be set to
 one of the four
MODE_*
values.
compressionQuality
- Variable in class javax.imageio.
ImageWriteParam
A
float
containing the current compression quality
 setting.
compressionType
- Variable in class javax.imageio.
ImageWriteParam
A
String
containing the name of the current
 compression type, or
null
if none is set.
compressionTypes
- Variable in class javax.imageio.
ImageWriteParam
An array of
String
s containing the names of the
 available compression types.
comptable
- Variable in class java.awt.
GridBagLayout
This hashtable maintains the association between
 a component and its gridbag constraints.
compute()
- Method in class java.util.concurrent.
CountedCompleter
The main computation performed by this task.
compute()
- Method in class java.util.concurrent.
RecursiveAction
The main computation performed by this task.
compute()
- Method in class java.util.concurrent.
RecursiveTask
The main computation performed by this task.
compute(Object, BiFunction<? super Object, ? super Object, ? extends Object>)
- Method in class java.security.
Provider
Attempts to compute a mapping for the specified key and its
 current mapped value (or
null
if there is no current
 mapping).
compute(K, BiFunction<? super K, ? super V, ? extends V>)
- Method in class java.util.concurrent.
ConcurrentHashMap
Attempts to compute a mapping for the specified key and its
 current mapped value (or
null
if there is no current
 mapping).
compute(K, BiFunction<? super K, ? super V, ? extends V>)
- Method in interface java.util.concurrent.
ConcurrentMap
Attempts to compute a mapping for the specified key and its current
 mapped value (or
null
if there is no current mapping).
compute(K, BiFunction<? super K, ? super V, ? extends V>)
- Method in class java.util.concurrent.
ConcurrentSkipListMap
Attempts to compute a mapping for the specified key and its
 current mapped value (or
null
if there is no current
 mapping).
compute(K, BiFunction<? super K, ? super V, ? extends V>)
- Method in class java.util.
HashMap
Attempts to compute a mapping for the specified key and its current
 mapped value (or
null
if there is no current mapping).
compute(K, BiFunction<? super K, ? super V, ? extends V>)
- Method in class java.util.
Hashtable
Attempts to compute a mapping for the specified key and its current
 mapped value (or
null
if there is no current mapping).
compute(K, BiFunction<? super K, ? super V, ? extends V>)
- Method in interface java.util.
Map
Attempts to compute a mapping for the specified key and its current
 mapped value (or
null
if there is no current mapping).
compute(K, BiFunction<? super K, ? super V, ? extends V>)
- Method in class java.util.
TreeMap
Attempts to compute a mapping for the specified key and its current
 mapped value (or
null
if there is no current mapping).
computeBlit(int, int, Point, Point, Dimension, Rectangle)
- Method in class javax.swing.
JViewport
Computes the parameters for a blit where the backing store image
 currently contains
oldLoc
in the upper left hand corner
 and we're scrolling to
newLoc
.
computeDifference(Rectangle, Rectangle)
- Static method in class javax.swing.
SwingUtilities
Convenience returning an array of rect representing the regions within
rectA
that do not overlap with
rectB
.
computeFields()
- Method in class java.util.
Calendar
Converts the current millisecond time value
Calendar.time
to calendar field values in
fields[]
.
computeFields()
- Method in class java.util.
GregorianCalendar
Converts the time value (millisecond offset from the
Epoch
) to calendar field values.
computeIfAbsent(Object, Function<? super Object, ? extends Object>)
- Method in class java.security.
Provider
If the specified key is not already associated with a value (or
 is mapped to
null
), attempts to compute its value using
 the given mapping function and enters it into this map unless
null
.
computeIfAbsent(K, Function<? super K, ? extends V>)
- Method in class java.util.concurrent.
ConcurrentHashMap
If the specified key is not already associated with a value,
 attempts to compute its value using the given mapping function
 and enters it into this map unless
null
.
computeIfAbsent(K, Function<? super K, ? extends V>)
- Method in interface java.util.concurrent.
ConcurrentMap
If the specified key is not already associated with a value (or is mapped
 to
null
), attempts to compute its value using the given mapping
 function and enters it into this map unless
null
.
computeIfAbsent(K, Function<? super K, ? extends V>)
- Method in class java.util.concurrent.
ConcurrentSkipListMap
If the specified key is not already associated with a value,
 attempts to compute its value using the given mapping function
 and enters it into this map unless
null
.
computeIfAbsent(K, Function<? super K, ? extends V>)
- Method in class java.util.
HashMap
If the specified key is not already associated with a value (or is mapped
 to
null
), attempts to compute its value using the given mapping
 function and enters it into this map unless
null
.
computeIfAbsent(K, Function<? super K, ? extends V>)
- Method in class java.util.
Hashtable
If the specified key is not already associated with a value (or is mapped
 to
null
), attempts to compute its value using the given mapping
 function and enters it into this map unless
null
.
computeIfAbsent(K, Function<? super K, ? extends V>)
- Method in interface java.util.
Map
If the specified key is not already associated with a value (or is mapped
 to
null
), attempts to compute its value using the given mapping
 function and enters it into this map unless
null
.
computeIfAbsent(K, Function<? super K, ? extends V>)
- Method in class java.util.
TreeMap
If the specified key is not already associated with a value (or is mapped
 to
null
), attempts to compute its value using the given mapping
 function and enters it into this map unless
null
.
computeIfPresent(Object, BiFunction<? super Object, ? super Object, ? extends Object>)
- Method in class java.security.
Provider
If the value for the specified key is present and non-null, attempts to
 compute a new mapping given the key and its current mapped value.
computeIfPresent(K, BiFunction<? super K, ? super V, ? extends V>)
- Method in class java.util.concurrent.
ConcurrentHashMap
If the value for the specified key is present, attempts to
 compute a new mapping given the key and its current mapped
 value.
computeIfPresent(K, BiFunction<? super K, ? super V, ? extends V>)
- Method in interface java.util.concurrent.
ConcurrentMap
If the value for the specified key is present and non-null, attempts to
 compute a new mapping given the key and its current mapped value.
computeIfPresent(K, BiFunction<? super K, ? super V, ? extends V>)
- Method in class java.util.concurrent.
ConcurrentSkipListMap
If the value for the specified key is present, attempts to
 compute a new mapping given the key and its current mapped
 value.
computeIfPresent(K, BiFunction<? super K, ? super V, ? extends V>)
- Method in class java.util.
HashMap
If the value for the specified key is present and non-null, attempts to
 compute a new mapping given the key and its current mapped value.
computeIfPresent(K, BiFunction<? super K, ? super V, ? extends V>)
- Method in class java.util.
Hashtable
If the value for the specified key is present and non-null, attempts to
 compute a new mapping given the key and its current mapped value.
computeIfPresent(K, BiFunction<? super K, ? super V, ? extends V>)
- Method in interface java.util.
Map
If the value for the specified key is present and non-null, attempts to
 compute a new mapping given the key and its current mapped value.
computeIfPresent(K, BiFunction<? super K, ? super V, ? extends V>)
- Method in class java.util.
TreeMap
If the value for the specified key is present and non-null, attempts to
 compute a new mapping given the key and its current mapped value.
computeIntersection(int, int, int, int, Rectangle)
- Static method in class javax.swing.
SwingUtilities
Convenience to calculate the intersection of two rectangles
 without allocating a new rectangle.
computePopupBounds(int, int, int, int)
- Method in class javax.swing.plaf.basic.
BasicComboPopup
Calculate the placement and size of the popup portion of the combo box based
 on the combo box location and the enclosing screen bounds.
computeRegions(ImageReadParam, int, int, BufferedImage, Rectangle, Rectangle)
- Static method in class javax.imageio.
ImageReader
Computes the source region of interest and the destination
 region of interest, taking the width and height of the source
 image, an optional destination image, and an optional
ImageReadParam
into account.
computerIcon
- Variable in class javax.swing.plaf.basic.
BasicFileChooserUI
Computer icon
computeStringWidth(FontMetrics, String)
- Static method in class javax.swing.
SwingUtilities
Compute the width of the string using a font with the specified
 "metrics" (sizes).
computeStringWidth(SynthContext, Font, FontMetrics, String)
- Method in class javax.swing.plaf.synth.
SynthGraphicsUtils
Returns the size of the passed in string.
computeTime()
- Method in class java.util.
Calendar
Converts the current calendar field values in
fields[]
to the millisecond time value
Calendar.time
.
computeTime()
- Method in class java.util.
GregorianCalendar
Converts calendar field values to the time value (millisecond
 offset from the
Epoch
).
computeUnion(int, int, int, int, Rectangle)
- Static method in class javax.swing.
SwingUtilities
Convenience method that calculates the union of two rectangles
 without allocating a new rectangle.
computeValue(Class<?>)
- Method in class java.lang.
ClassValue
Computes the given class's derived value for this
ClassValue
.
computeVisibleRect(Rectangle)
- Method in class javax.swing.
JComponent
Returns the
Component
's "visible rect rectangle" -  the
 intersection of the visible rectangles for this component
 and all of its ancestors.
concat(String)
- Method in class java.lang.
String
Concatenates the specified string to the end of this string.
concat(HttpRequest.BodyPublisher...)
- Static method in class java.net.http.
HttpRequest.BodyPublishers
Returns a
BodyPublisher
that publishes a request
 body consisting of the concatenation of the request bodies
 published by a sequence of publishers.
concat(DoubleStream, DoubleStream)
- Static method in interface java.util.stream.
DoubleStream
Creates a lazily concatenated stream whose elements are all the
 elements of the first stream followed by all the elements of the
 second stream.
concat(IntStream, IntStream)
- Static method in interface java.util.stream.
IntStream
Creates a lazily concatenated stream whose elements are all the
 elements of the first stream followed by all the elements of the
 second stream.
concat(LongStream, LongStream)
- Static method in interface java.util.stream.
LongStream
Creates a lazily concatenated stream whose elements are all the
 elements of the first stream followed by all the elements of the
 second stream.
concat(Stream<? extends T>, Stream<? extends T>)
- Static method in interface java.util.stream.
Stream
Creates a lazily concatenated stream whose elements are all the
 elements of the first stream followed by all the elements of the
 second stream.
concatenate(AffineTransform)
- Method in class java.awt.geom.
AffineTransform
Concatenates an
AffineTransform Tx
to
 this
AffineTransform
Cx in the most commonly useful
 way to provide a new user space
 that is mapped to the former user space by
Tx
.
concatenateTransform(AffineTransform)
- Method in class java.awt.image.renderable.
RenderContext
Modifies the current user-to-device transform by appending another
 transform.
concetenateTransform(AffineTransform)
- Method in class java.awt.image.renderable.
RenderContext
Deprecated.
replaced by
concatenateTransform(AffineTransform)
.
concreteMethodByName(String, String)
- Method in interface com.sun.jdi.
ClassType
Returns a single non-abstract
Method
visible from
 this class that has the given name and signature.
CONCUR_READ_ONLY
- Static variable in interface java.sql.
ResultSet
The constant indicating the concurrency mode for a
ResultSet
object that may NOT be updated.
CONCUR_UPDATABLE
- Static variable in interface java.sql.
ResultSet
The constant indicating the concurrency mode for a
ResultSet
object that may be updated.
Concurrency
- Search tag in class java.nio.channels.Selector
Section
Concurrency
- Search tag in class java.util.ServiceLoader
Section
Concurrency
- Search tag in interface java.nio.file.Path
Section
CONCURRENT
- Enum constant in enum class java.util.stream.
Collector.Characteristics
Indicates that this collector is
concurrent
, meaning that
 the result container can support the accumulator function being
 called concurrently with the same result container from multiple
 threads.
CONCURRENT
- Static variable in interface java.util.
Spliterator
Characteristic value signifying that the element source may be safely
 concurrently modified (allowing additions, replacements, and/or removals)
 by multiple threads without external synchronization.
Concurrent Access
- Search tag in interface javax.naming.Context
Section
Concurrent Collections
- Search tag in package java.util
Section
Concurrent Collections
- Search tag in package java.util.concurrent
Section
ConcurrentHashMap<K,
V>
- Class in
java.util.concurrent
A hash table supporting full concurrency of retrievals and
 high expected concurrency for updates.
ConcurrentHashMap()
- Constructor for class java.util.concurrent.
ConcurrentHashMap
Creates a new, empty map with the default initial table size (16).
ConcurrentHashMap(int)
- Constructor for class java.util.concurrent.
ConcurrentHashMap
Creates a new, empty map with an initial table size
 accommodating the specified number of elements without the need
 to dynamically resize.
ConcurrentHashMap(int, float)
- Constructor for class java.util.concurrent.
ConcurrentHashMap
Creates a new, empty map with an initial table size based on
 the given number of elements (
initialCapacity
) and
 initial table density (
loadFactor
).
ConcurrentHashMap(int, float, int)
- Constructor for class java.util.concurrent.
ConcurrentHashMap
Creates a new, empty map with an initial table size based on
 the given number of elements (
initialCapacity
), initial
 table density (
loadFactor
), and number of concurrently
 updating threads (
concurrencyLevel
).
ConcurrentHashMap(Map<? extends K, ? extends V>)
- Constructor for class java.util.concurrent.
ConcurrentHashMap
Creates a new map with the same mappings as the given map.
ConcurrentHashMap.KeySetView<K,
V>
- Class in
java.util.concurrent
A view of a ConcurrentHashMap as a
Set
of keys, in
 which additions may optionally be enabled by mapping to a
 common value.
ConcurrentLinkedDeque<E>
- Class in
java.util.concurrent
An unbounded concurrent
deque
based on linked nodes.
ConcurrentLinkedDeque()
- Constructor for class java.util.concurrent.
ConcurrentLinkedDeque
Constructs an empty deque.
ConcurrentLinkedDeque(Collection<? extends E>)
- Constructor for class java.util.concurrent.
ConcurrentLinkedDeque
Constructs a deque initially containing the elements of
 the given collection, added in traversal order of the
 collection's iterator.
ConcurrentLinkedQueue<E>
- Class in
java.util.concurrent
An unbounded thread-safe
queue
based on linked nodes.
ConcurrentLinkedQueue()
- Constructor for class java.util.concurrent.
ConcurrentLinkedQueue
Creates a
ConcurrentLinkedQueue
that is initially empty.
ConcurrentLinkedQueue(Collection<? extends E>)
- Constructor for class java.util.concurrent.
ConcurrentLinkedQueue
Creates a
ConcurrentLinkedQueue
initially containing the elements of the given collection,
 added in traversal order of the collection's iterator.
ConcurrentMap<K,
V>
- Interface in
java.util.concurrent
A
Map
providing thread safety and atomicity guarantees.
ConcurrentModificationException
- Exception Class in
java.util
This exception may be thrown by methods that have detected concurrent
 modification of an object when such modification is not permissible.
ConcurrentModificationException()
- Constructor for exception class java.util.
ConcurrentModificationException
Constructs a ConcurrentModificationException with no
 detail message.
ConcurrentModificationException(String)
- Constructor for exception class java.util.
ConcurrentModificationException
Constructs a
ConcurrentModificationException
with the
 specified detail message.
ConcurrentModificationException(String, Throwable)
- Constructor for exception class java.util.
ConcurrentModificationException
Constructs a new exception with the specified detail message and
 cause.
ConcurrentModificationException(Throwable)
- Constructor for exception class java.util.
ConcurrentModificationException
Constructs a new exception with the specified cause and a detail
 message of
(cause==null ? null : cause.toString())
(which
 typically contains the class and detail message of
cause
.
ConcurrentNavigableMap<K,
V>
- Interface in
java.util.concurrent
A
ConcurrentMap
supporting
NavigableMap
operations,
 and recursively so for its navigable sub-maps.
ConcurrentSkipListMap<K,
V>
- Class in
java.util.concurrent
A scalable concurrent
ConcurrentNavigableMap
implementation.
ConcurrentSkipListMap()
- Constructor for class java.util.concurrent.
ConcurrentSkipListMap
Constructs a new, empty map, sorted according to the
natural ordering
of the keys.
ConcurrentSkipListMap(Comparator<? super K>)
- Constructor for class java.util.concurrent.
ConcurrentSkipListMap
Constructs a new, empty map, sorted according to the specified
 comparator.
ConcurrentSkipListMap(Map<? extends K, ? extends V>)
- Constructor for class java.util.concurrent.
ConcurrentSkipListMap
Constructs a new map containing the same mappings as the given map,
 sorted according to the
natural ordering
of
 the keys.
ConcurrentSkipListMap(SortedMap<K, ? extends V>)
- Constructor for class java.util.concurrent.
ConcurrentSkipListMap
Constructs a new map containing the same mappings and using the
 same ordering as the specified sorted map.
ConcurrentSkipListSet<E>
- Class in
java.util.concurrent
A scalable concurrent
NavigableSet
implementation based on
 a
ConcurrentSkipListMap
.
ConcurrentSkipListSet()
- Constructor for class java.util.concurrent.
ConcurrentSkipListSet
Constructs a new, empty set that orders its elements according to
 their
natural ordering
.
ConcurrentSkipListSet(Collection<? extends E>)
- Constructor for class java.util.concurrent.
ConcurrentSkipListSet
Constructs a new set containing the elements in the specified
 collection, that orders its elements according to their
natural ordering
.
ConcurrentSkipListSet(Comparator<? super E>)
- Constructor for class java.util.concurrent.
ConcurrentSkipListSet
Constructs a new, empty set that orders its elements according to
 the specified comparator.
ConcurrentSkipListSet(SortedSet<E>)
- Constructor for class java.util.concurrent.
ConcurrentSkipListSet
Constructs a new set containing the same elements and using the
 same ordering as the specified sorted set.
Condition
- Interface in
java.util.concurrent.locks
Condition
factors out the
Object
monitor
 methods (
wait
,
notify
and
notifyAll
) into distinct objects to
 give the effect of having multiple wait-sets per object, by
 combining them with the use of arbitrary
Lock
implementations.
CONDITIONAL_AND
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
BinaryTree
representing
 conditional-and
&&
.
CONDITIONAL_EXPRESSION
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
ConditionalExpressionTree
.
CONDITIONAL_OR
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
BinaryTree
representing
 conditional-or
||
.
ConditionalExpressionTree
- Interface in
com.sun.source.tree
A tree node for the conditional operator
? :
.
ConditionObject()
- Constructor for class java.util.concurrent.locks.
AbstractQueuedLongSynchronizer.ConditionObject
Creates a new
ConditionObject
instance.
ConditionObject()
- Constructor for class java.util.concurrent.locks.
AbstractQueuedSynchronizer.ConditionObject
Creates a new
ConditionObject
instance.
config(String)
- Method in class java.util.logging.
Logger
Log a CONFIG message.
config(Supplier<String>)
- Method in class java.util.logging.
Logger
Log a CONFIG message, which is only to be constructed if the logging
 level is such that the message will actually be logged.
CONFIG
- Static variable in class java.util.logging.
Level
CONFIG is a message level for static configuration messages.
CONFIG_FILE
- Enum constant in enum class com.sun.management.
VMOption.Origin
The VM option was set via a configuration file.
ConfigFile
- Class in
com.sun.security.auth.login
This class represents a default implementation for
javax.security.auth.login.Configuration
.
ConfigFile()
- Constructor for class com.sun.security.auth.login.
ConfigFile
Create a new
Configuration
object.
ConfigFile(URI)
- Constructor for class com.sun.security.auth.login.
ConfigFile
Create a new
Configuration
object from the specified
URI
.
configuration()
- Method in class java.lang.module.
ResolvedModule
Returns the configuration that this resolved module is in.
configuration()
- Method in class java.lang.
ModuleLayer
Returns the configuration for this layer.
Configuration
- Search tag in module java.xml
Section
Configuration
- Class in
java.lang.module
A configuration that is the result of
resolution
or resolution with
service binding
.
Configuration
- Class in
javax.security.auth.login
A Configuration object is responsible for specifying which LoginModules
 should be used for a particular application, and in what order the
 LoginModules should be invoked.
Configuration
- Class in
jdk.jfr
A collection of settings and metadata describing the configuration.
Configuration()
- Constructor for class javax.security.auth.login.
Configuration
Sole constructor.
Configuration.Parameters
- Interface in
javax.security.auth.login
This represents a marker interface for Configuration parameters.
ConfigurationException
- Exception Class in
javax.naming
This exception is thrown when there is a configuration problem.
ConfigurationException()
- Constructor for exception class javax.naming.
ConfigurationException
Constructs a new instance of ConfigurationException with
 all name resolution fields and explanation initialized to null.
ConfigurationException(String)
- Constructor for exception class javax.naming.
ConfigurationException
Constructs a new instance of ConfigurationException using an
 explanation.
Configuration File
- Search tag in module java.xml
Section
ConfigurationInfo
- Class in
jdk.management.jfr
Management representation of a
Configuration
.
ConfigurationSpi
- Class in
javax.security.auth.login
This class defines the
Service Provider Interface
(
SPI
)
 for the
Configuration
class.
ConfigurationSpi()
- Constructor for class javax.security.auth.login.
ConfigurationSpi
Constructor for subclasses to call.
configure(HttpsParameters)
- Method in class com.sun.net.httpserver.
HttpsConfigurator
Called by the
HttpsServer
to configure the parameters for a https
 connection currently being established.
configure(String)
- Method in class java.security.
Provider
Apply the supplied configuration argument to this
Provider
instance and return the configured
Provider
.
configureArrowButton()
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI
This public method is implementation specific and should be private.
configureBlocking(boolean)
- Method in class java.nio.channels.
SelectableChannel
Adjusts this channel's blocking mode.
configureBlocking(boolean)
- Method in class java.nio.channels.spi.
AbstractSelectableChannel
Adjusts this channel's blocking mode.
configureEditor()
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI
This protected method is implementation specific and should be private.
configureEditor()
- Method in class javax.swing.plaf.metal.
MetalComboBoxUI
configureEditor(ComboBoxEditor, Object)
- Method in class javax.swing.
JComboBox
Initializes the editor with the specified item.
configureEnclosingScrollPane()
- Method in class javax.swing.
JTable
If this
JTable
is the
viewportView
of an enclosing
JScrollPane
(the usual situation), configure this
ScrollPane
by, amongst other things,
 installing the table's
tableHeader
as the
columnHeaderView
of the scroll pane.
configureGraphics(Graphics2D)
- Method in class javax.swing.plaf.nimbus.
AbstractRegionPainter
Configures the given Graphics2D.
configureLayoutCache()
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Resets the TreeState instance based on the tree we're providing the
 look and feel for.
configureList()
- Method in class javax.swing.plaf.basic.
BasicComboPopup
Configures the list which is used to hold the combo box items in the
 popup.
configurePopup()
- Method in class javax.swing.plaf.basic.
BasicComboPopup
Configures the popup portion of the combo box.
configurePropertiesFromAction(Action)
- Method in class javax.swing.
AbstractButton
Sets the properties on this button to match those in the specified
Action
.
configurePropertiesFromAction(Action)
- Method in class javax.swing.
JComboBox
Sets the properties on this combobox to match those in the specified
Action
.
configurePropertiesFromAction(Action)
- Method in class javax.swing.
JMenuItem
Sets the properties on this button to match those in the specified
Action
.
configurePropertiesFromAction(Action)
- Method in class javax.swing.
JTextField
Sets the properties on this textfield to match those in the specified
Action
.
configureScrollBarColors()
- Method in class javax.swing.plaf.basic.
BasicScrollBarUI
Configures the scroll bar colors.
configureScroller()
- Method in class javax.swing.plaf.basic.
BasicComboPopup
Configures the scrollable portion which holds the list within
 the combo box popup.
ConfirmationCallback
- Class in
javax.security.auth.callback
Underlying security services instantiate and pass a
ConfirmationCallback
to the
handle
method of a
CallbackHandler
to ask for YES/NO,
 OK/CANCEL, YES/NO/CANCEL or other similar confirmations.
ConfirmationCallback(int, int, int)
- Constructor for class javax.security.auth.callback.
ConfirmationCallback
Construct a
ConfirmationCallback
with a
 message type, an option type and a default option.
ConfirmationCallback(int, String[], int)
- Constructor for class javax.security.auth.callback.
ConfirmationCallback
Construct a
ConfirmationCallback
with a
 message type, a list of options and a default option.
ConfirmationCallback(String, int, int, int)
- Constructor for class javax.security.auth.callback.
ConfirmationCallback
Construct a
ConfirmationCallback
with a prompt,
 message type, an option type and a default option.
ConfirmationCallback(String, int, String[], int)
- Constructor for class javax.security.auth.callback.
ConfirmationCallback
Construct a
ConfirmationCallback
with a prompt,
 message type, a list of options and a default option.
connect()
- Method in class java.net.
URLConnection
Opens a communications link to the resource referenced by this
 URL, if such a connection has not already been established.
connect()
- Method in interface javax.management.remote.
JMXConnector
Establishes the connection to the connector server.
connect()
- Method in class javax.management.remote.rmi.
RMIConnector
connect(PipedInputStream)
- Method in class java.io.
PipedOutputStream
Connects this piped output stream to a receiver.
connect(PipedOutputStream)
- Method in class java.io.
PipedInputStream
Causes this piped input stream to be connected
 to the piped  output stream
src
.
connect(PipedReader)
- Method in class java.io.
PipedWriter
Connects this piped writer to a receiver.
connect(PipedWriter)
- Method in class java.io.
PipedReader
Causes this piped reader to be connected
 to the piped  writer
src
.
connect(String)
- Method in class javax.smartcardio.
CardTerminal
Establishes a connection to the card.
connect(String, int)
- Method in class java.net.
SocketImpl
Connects this socket to the specified port on the named host.
connect(String, Properties)
- Method in interface java.sql.
Driver
Attempts to make a database connection to the given URL.
connect(InetAddress, int)
- Method in class java.net.
DatagramSocket
Connects the socket to a remote address for this socket.
connect(InetAddress, int)
- Method in class java.net.
DatagramSocketImpl
Connects a datagram socket to a remote destination.
connect(InetAddress, int)
- Method in class java.net.
SocketImpl
Connects this socket to the specified port number on the specified host.
connect(SocketAddress)
- Method in class com.sun.nio.sctp.
SctpChannel
Connects this channel's socket.
connect(SocketAddress)
- Method in class java.net.
DatagramSocket
Connects this socket to a remote socket address (IP address + port number).
connect(SocketAddress)
- Method in class java.net.
Socket
Connects this socket to the server.
connect(SocketAddress)
- Method in class java.nio.channels.
AsynchronousSocketChannel
Connects this channel.
connect(SocketAddress)
- Method in class java.nio.channels.
DatagramChannel
Connects this channel's socket.
connect(SocketAddress)
- Method in class java.nio.channels.
SocketChannel
Connects this channel's socket.
connect(SocketAddress, int)
- Method in class java.net.
Socket
Connects this socket to the server with a specified timeout value.
connect(SocketAddress, int)
- Method in class java.net.
SocketImpl
Connects this socket to the specified port number on the specified host.
connect(SocketAddress, int, int)
- Method in class com.sun.nio.sctp.
SctpChannel
Connects this channel's socket.
connect(SocketAddress, A, CompletionHandler<Void, ? super A>)
- Method in class java.nio.channels.
AsynchronousSocketChannel
Connects this channel.
connect(Map<String, ?>)
- Method in interface javax.management.remote.
JMXConnector
Establishes the connection to the connector server.
connect(Map<String, ?>)
- Method in class javax.management.remote.rmi.
RMIConnector
connect(JMXServiceURL)
- Static method in class javax.management.remote.
JMXConnectorFactory
Creates a connection to the connector server at the given
 address.
connect(JMXServiceURL, Map<String, ?>)
- Static method in class javax.management.remote.
JMXConnectorFactory
Creates a connection to the connector server at the given
 address.
connected
- Variable in class java.net.
URLConnection
If
false
, this connection object has not created a
 communications link to the specified URL.
CONNECTED
- Enum constant in enum class com.sun.tools.jconsole.
JConsoleContext.ConnectionState
The connection has been successfully established.
connectedVirtualMachines()
- Method in interface com.sun.jdi.
VirtualMachineManager
Lists all target VMs which are connected to the debugger.
ConnectException
- Exception Class in
java.net
Signals that an error occurred while attempting to connect a
 socket to a remote address and port.
ConnectException
- Exception Class in
java.rmi
A
ConnectException
is thrown if a connection is refused
 to the remote host for a remote method call.
ConnectException()
- Constructor for exception class java.net.
ConnectException
Construct a new ConnectException with no detailed message.
ConnectException(String)
- Constructor for exception class java.net.
ConnectException
Constructs a new ConnectException with the specified detail
 message as to why the connect error occurred.
ConnectException(String)
- Constructor for exception class java.rmi.
ConnectException
Constructs a
ConnectException
with the specified
 detail message.
ConnectException(String, Exception)
- Constructor for exception class java.rmi.
ConnectException
Constructs a
ConnectException
with the specified
 detail message and nested exception.
connectFailed(URI, SocketAddress, IOException)
- Method in class java.net.
ProxySelector
Called to indicate that a connection could not be established
 to a proxy/socks server.
CONNECTING
- Enum constant in enum class com.sun.tools.jconsole.
JConsoleContext.ConnectionState
The connection is being attempted.
CONNECTING_TO_DEVICE
- Static variable in class javax.print.attribute.standard.
PrinterStateReason
The printer has scheduled a job on the output device and is in the
 process of connecting to a shared network output device (and might not be
 able to actually start printing the job for an arbitrarily long time
 depending on the usage of the output device by other servers on the
 network).
ConnectIOException
- Exception Class in
java.rmi
A
ConnectIOException
is thrown if an
IOException
occurs while making a connection
 to the remote host for a remote method call.
ConnectIOException(String)
- Constructor for exception class java.rmi.
ConnectIOException
Constructs a
ConnectIOException
with the specified
 detail message.
ConnectIOException(String, Exception)
- Constructor for exception class java.rmi.
ConnectIOException
Constructs a
ConnectIOException
with the specified
 detail message and nested exception.
Connection
- Class in
com.sun.jdi.connect.spi
A connection between a debugger and a target VM which it debugs.
Connection
- Interface in
java.sql
A connection (session) with a specific
 database.
Connection()
- Constructor for class com.sun.jdi.connect.spi.
Connection
Constructor for subclasses to call.
CONNECTION_STATE_PROPERTY
- Static variable in interface com.sun.tools.jconsole.
JConsoleContext
The
ConnectionState
bound property name.
ConnectionBuilder
- Interface in
java.sql
A builder created from a
DataSource
object,
 used to establish a connection to the database that the
data source
object represents.
connectionClosed(String, String, Object)
- Method in class javax.management.remote.
JMXConnectorServer
Called by a subclass when a client connection is closed
 normally.
connectionClosed(ConnectionEvent)
- Method in interface javax.sql.
ConnectionEventListener
Notifies this
ConnectionEventListener
that
 the application has called the method
close
on its
 representation of a pooled connection.
connectionErrorOccurred(ConnectionEvent)
- Method in interface javax.sql.
ConnectionEventListener
Notifies this
ConnectionEventListener
that
 a fatal error has occurred and the pooled connection can
 no longer be used.
ConnectionEvent
- Class in
javax.sql
An
Event
object that provides information about the
 source of a connection-related event.
ConnectionEvent(PooledConnection)
- Constructor for class javax.sql.
ConnectionEvent
Constructs a
ConnectionEvent
object initialized with
 the given
PooledConnection
object.
ConnectionEvent(PooledConnection, SQLException)
- Constructor for class javax.sql.
ConnectionEvent
Constructs a
ConnectionEvent
object initialized with
 the given
PooledConnection
object and
SQLException
object.
ConnectionEventListener
- Interface in
javax.sql
An object that registers to be notified of events generated by a
PooledConnection
object.
connectionFailed(String, String, Object)
- Method in class javax.management.remote.
JMXConnectorServer
Called by a subclass when a client connection fails.
Connection identifiers
- Search tag in package javax.management.remote
Section
connectionOpened(String, String, Object)
- Method in class javax.management.remote.
JMXConnectorServer
Called by a subclass when a new client connection is opened.
ConnectionPendingException
- Exception Class in
java.nio.channels
Unchecked exception thrown when an attempt is made to connect a
SocketChannel
for which a non-blocking connection operation is already in
 progress.
ConnectionPendingException()
- Constructor for exception class java.nio.channels.
ConnectionPendingException
Constructs an instance of this class.
ConnectionPoolDataSource
- Interface in
javax.sql
A factory for
PooledConnection
objects.
Connection Pooling and Statement Pooling
- Search tag in package javax.sql
Section
Connection Request Controls
- Search tag in interface javax.naming.ldap.LdapContext
Section
Connector
- Interface in
com.sun.jdi.connect
A method of connection between a debugger and a target VM.
CONNECTOR_PUNCTUATION
- Static variable in class java.lang.
Character
General category "Pc" in the Unicode specification.
Connector.Argument
- Interface in
com.sun.jdi.connect
Specification for and value of a Connector argument.
Connector.BooleanArgument
- Interface in
com.sun.jdi.connect
Specification for and value of a Connector argument,
 whose value is Boolean.
Connector.IntegerArgument
- Interface in
com.sun.jdi.connect
Specification for and value of a Connector argument,
 whose value is an integer.
Connector.SelectedArgument
- Interface in
com.sun.jdi.connect
Specification for and value of a Connector argument,
 whose value is a String selected from a list of choices.
Connector.StringArgument
- Interface in
com.sun.jdi.connect
Specification for and value of a Connector argument,
 whose value is a String.
Connector addresses
- Search tag in package javax.management.remote
Section
Connector addresses based on directory entries
- Search tag in package javax.management.remote.rmi
Section
Connector addresses generated by the server
- Search tag in package javax.management.remote.rmi
Section
Connector server attributes
- Search tag in package javax.management.remote.rmi
Section
connectTimeout()
- Method in class java.net.http.
HttpClient
Returns an
Optional
containing the
connect timeout duration
for this client.
connectTimeout(Duration)
- Method in interface java.net.http.
HttpClient.Builder
Sets the connect timeout duration for this client.
connectTimeout(Duration)
- Method in interface java.net.http.
WebSocket.Builder
Sets a timeout for establishing a WebSocket connection.
CONREF
- Static variable in interface javax.swing.text.html.parser.
DTDConstants
The DTD constant corresponds to CONREF
CONSIDERED_INCOMPLETE
- Enum constant in enum class jdk.jshell.
SourceCodeAnalysis.Completeness
A statement with a trailing (non-terminated) empty statement.
console()
- Static method in class java.lang.
System
Returns the unique
Console
object associated
 with the current Java virtual machine, if any.
console()
- Method in interface jdk.jshell.spi.
ExecutionEnv
Returns the
JShellConsole
that should be used
 by the execution engine, or
null
if none.
console(JShellConsole)
- Method in class jdk.jshell.
JShell.Builder
Sets the console for the running evalution.
Console
- Class in
java.io
Methods to access the character-based console device, if any, associated
 with the current Java virtual machine.
CONSOLE
- Enum constant in enum class java.awt.desktop.
UserSessionEvent.Reason
The session was connected/disconnected to the console terminal.
ConsoleHandler
- Class in
java.util.logging
This
Handler
publishes log records to
System.err
.
ConsoleHandler()
- Constructor for class java.util.logging.
ConsoleHandler
Create a
ConsoleHandler
for
System.err
.
Constable
- Interface in
java.lang.constant
Represents a type which is
constable
.
constant(int)
- Static method in class javax.swing.
Spring
Returns a strut -- a spring whose
minimum
,
preferred
, and
maximum
values each have the value
pref
.
constant(int, int, int)
- Static method in class javax.swing.
Spring
Returns a spring whose
minimum
,
preferred
, and
maximum
values have the values:
min
,
pref
,
 and
max
respectively.
constant(Class<?>, Object)
- Static method in class java.lang.invoke.
MethodHandles
Produces a method handle of the requested return type which returns the given
 constant value every time it is invoked.
CONSTANT_ASCENT
- Enum constant in enum class java.awt.
Component.BaselineResizeBehavior
Indicates the baseline remains fixed relative to the
 y-origin.
CONSTANT_CASE_LABEL
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
ConstantCaseLabelTree
.
CONSTANT_DESCENT
- Enum constant in enum class java.awt.
Component.BaselineResizeBehavior
Indicates the baseline remains fixed relative to the height
 and does not change as the width is varied.
ConstantBootstraps
- Class in
java.lang.invoke
Bootstrap methods for dynamically-computed constants.
ConstantCallSite
- Class in
java.lang.invoke
A
ConstantCallSite
is a
CallSite
whose target is permanent, and can never be changed.
ConstantCallSite(MethodHandle)
- Constructor for class java.lang.invoke.
ConstantCallSite
Creates a call site with a permanent target.
ConstantCallSite(MethodType, MethodHandle)
- Constructor for class java.lang.invoke.
ConstantCallSite
Creates a call site with a permanent target, possibly bound to the call site itself.
ConstantCaseLabelTree
- Interface in
com.sun.source.tree
A case label element that refers to a constant expression
ConstantDesc
- Interface in
java.lang.constant
A
nominal descriptor
for a loadable
 constant value, as defined in JVMS
4.4
.
ConstantDescs
- Class in
java.lang.constant
Predefined values of
nominal descriptor
for common constants, including descriptors for primitive class types and
 other common platform types, and descriptors for method handles for standard
 bootstrap methods.
constantName()
- Method in class java.lang.constant.
DynamicConstantDesc
Returns the name that would appear in the
NameAndType
operand
 of the
LDC
for this constant.
constantName()
- Method in exception class java.lang.
EnumConstantNotPresentException
Returns the name of the missing enum constant.
constantPool()
- Method in interface com.sun.jdi.
ReferenceType
Returns the raw bytes of the constant pool in the format of the
 constant_pool item of the Class File Format in the Java Virtual
 Machine Specification.
constantPoolCount()
- Method in interface com.sun.jdi.
ReferenceType
Returns the number of entries in the constant pool plus one.
constantType()
- Method in class java.lang.constant.
DynamicConstantDesc
Returns a
ClassDesc
describing the type that would appear in the
NameAndType
operand of the
LDC
for this constant.
constraintBeforeFloating
- Variable in class javax.swing.plaf.basic.
BasicToolBarUI
The layout before floating.
Constraints()
- Constructor for class javax.swing.
SpringLayout.Constraints
Creates an empty
Constraints
object.
Constraints(Component)
- Constructor for class javax.swing.
SpringLayout.Constraints
Creates a
Constraints
object with
 suitable
x
,
y
,
width
and
height
springs for component,
c
.
Constraints(Spring, Spring)
- Constructor for class javax.swing.
SpringLayout.Constraints
Creates a
Constraints
object with the
 specified values for its
x
and
y
properties.
Constraints(Spring, Spring, Spring, Spring)
- Constructor for class javax.swing.
SpringLayout.Constraints
Creates a
Constraints
object with the
 specified values for its
x
,
y
,
width
,
 and
height
properties.
Constructing instances of URL
- Search tag in class java.net.URL
Section
Constructor<T>
- Class in
java.lang.reflect
Constructor
provides information about, and access to, a single
 constructor for a class.
CONSTRUCTOR
- Enum constant in enum class java.lang.annotation.
ElementType
Constructor declaration
CONSTRUCTOR
- Enum constant in enum class java.lang.constant.
DirectMethodHandleDesc.Kind
A method handle for a constructor
CONSTRUCTOR
- Enum constant in enum class javax.lang.model.element.
ElementKind
A constructor.
CONSTRUCTOR
- Enum constant in enum class jdk.javadoc.doclet.
Taglet.Location
In the documentation for a constructor.
constructorModifiers()
- Static method in class java.lang.reflect.
Modifier
Return an
int
value OR-ing together the source language
 modifiers that can be applied to a constructor.
ConstructorParameters
- Annotation Interface in
javax.management
An annotation on a constructor that shows how the parameters of
 that constructor correspond to the constructed object's getter
 methods.
ConstructorProperties
- Annotation Interface in
java.beans
An annotation on a constructor that shows how the parameters of
   that constructor correspond to the constructed object's getter
   methods.
constructorsIn(Iterable<? extends Element>)
- Static method in class javax.lang.model.util.
ElementFilter
Returns a list of constructors in
elements
.
constructorsIn(Set<? extends Element>)
- Static method in class javax.lang.model.util.
ElementFilter
Returns a set of constructors in
elements
.
consume()
- Method in class java.awt.
AWTEvent
Consumes this event, if this event can be consumed.
consume()
- Method in class java.awt.event.
InputEvent
Consumes this event so that it will not be processed
 in the default manner by the source which originated it.
consume()
- Method in class java.awt.event.
InputMethodEvent
Consumes this event so that it will not be processed
 in the default manner by the source which originated it.
consume(Consumer<? super T>)
- Method in class java.util.concurrent.
SubmissionPublisher
Processes all published items using the given Consumer function.
consumed
- Variable in class java.awt.
AWTEvent
Controls whether or not the event is sent back down to the peer once the
 source has processed it - false means it's sent to the peer; true means
 it's not.
consumer
- Variable in class java.awt.image.
ImageFilter
The consumer of the particular image data stream for which this
 instance of the ImageFilter is filtering data.
Consumer<T>
- Interface in
java.util.function
Represents an operation that accepts a single input argument and returns no
 result.
containedIn(Oid[])
- Method in class org.ietf.jgss.
Oid
A utility method to test if this Oid value is contained within the
 supplied Oid array.
Container
- Class in
java.awt
A generic Abstract Window Toolkit(AWT) container object is a component
 that can contain other AWT components.
Container()
- Constructor for class java.awt.
Container
Constructs a new Container.
CONTAINER
- Static variable in class com.sun.java.accessibility.util.
EventID
Maps to AWT Container support (i.e., ContainerListener
 and ContainerEvent)
CONTAINER_EVENT_MASK
- Static variable in class java.awt.
AWTEvent
The event mask for selecting container events.
CONTAINER_FIRST
- Static variable in class java.awt.event.
ContainerEvent
The first number in the range of ids used for container events.
CONTAINER_LAST
- Static variable in class java.awt.event.
ContainerEvent
The last number in the range of ids used for container events.
Container.AccessibleAWTContainer
- Class in
java.awt
Inner class of Container used to provide default support for
 accessibility.
Container.AccessibleAWTContainer.AccessibleContainerHandler
- Class in
java.awt
Fire
PropertyChange
listener, if one is registered,
 when children are added or removed.
ContainerAdapter
- Class in
java.awt.event
An abstract adapter class for receiving container events.
ContainerAdapter()
- Constructor for class java.awt.event.
ContainerAdapter
Constructs a
ContainerAdapter
.
ContainerEvent
- Class in
java.awt.event
A low-level event which indicates that a container's contents
 changed because a component was added or removed.
ContainerEvent(Component, int, Component)
- Constructor for class java.awt.event.
ContainerEvent
Constructs a
ContainerEvent
object.
containerListener
- Variable in class javax.swing.plaf.basic.
BasicMenuBarUI
The instance of
ContainerListener
.
ContainerListener
- Interface in
java.awt.event
The listener interface for receiving container events.
ContainerOrderFocusTraversalPolicy
- Class in
java.awt
A FocusTraversalPolicy that determines traversal order based on the order
 of child Components in a Container.
ContainerOrderFocusTraversalPolicy()
- Constructor for class java.awt.
ContainerOrderFocusTraversalPolicy
Constructs a
ContainerOrderFocusTraversalPolicy
.
contains(double, double)
- Method in class java.awt.geom.
Arc2D
Determines whether or not the specified point is inside the boundary
 of the arc.
contains(double, double)
- Method in class java.awt.geom.
Area
Tests if the specified coordinates are inside the boundary of the
Shape
, as described by the
definition of insideness
.
contains(double, double)
- Method in class java.awt.geom.
CubicCurve2D
Tests if the specified coordinates are inside the boundary of the
Shape
, as described by the
definition of insideness
.
contains(double, double)
- Method in class java.awt.geom.
Ellipse2D
Tests if the specified coordinates are inside the boundary of the
Shape
, as described by the
definition of insideness
.
contains(double, double)
- Method in class java.awt.geom.
Line2D
Tests if a specified coordinate is inside the boundary of this
Line2D
.
contains(double, double)
- Method in class java.awt.geom.
Path2D
Tests if the specified coordinates are inside the boundary of the
Shape
, as described by the
definition of insideness
.
contains(double, double)
- Method in class java.awt.geom.
QuadCurve2D
Tests if the specified coordinates are inside the boundary of the
Shape
, as described by the
definition of insideness
.
contains(double, double)
- Method in class java.awt.geom.
Rectangle2D
Tests if the specified coordinates are inside the boundary of the
Shape
, as described by the
definition of insideness
.
contains(double, double)
- Method in class java.awt.geom.
RoundRectangle2D
Tests if the specified coordinates are inside the boundary of the
Shape
, as described by the
definition of insideness
.
contains(double, double)
- Method in class java.awt.
Polygon
Tests if the specified coordinates are inside the boundary of the
Shape
, as described by the
definition of insideness
.
contains(double, double)
- Method in interface java.awt.
Shape
Tests if the specified coordinates are inside the boundary of the
Shape
, as described by the
definition of insideness
.
contains(double, double, double, double)
- Method in class java.awt.geom.
Arc2D
Determines whether or not the interior of the arc entirely contains
 the specified rectangle.
contains(double, double, double, double)
- Method in class java.awt.geom.
Area
Tests if the interior of the
Shape
entirely contains
 the specified rectangular area.
contains(double, double, double, double)
- Method in class java.awt.geom.
CubicCurve2D
Tests if the interior of the
Shape
entirely contains
 the specified rectangular area.
contains(double, double, double, double)
- Method in class java.awt.geom.
Ellipse2D
Tests if the interior of the
Shape
entirely contains
 the specified rectangular area.
contains(double, double, double, double)
- Method in class java.awt.geom.
Line2D
Tests if the interior of this
Line2D
entirely contains
 the specified set of rectangular coordinates.
contains(double, double, double, double)
- Method in class java.awt.geom.
Path2D
Tests if the interior of the
Shape
entirely contains
 the specified rectangular area.
contains(double, double, double, double)
- Method in class java.awt.geom.
QuadCurve2D
Tests if the interior of the
Shape
entirely contains
 the specified rectangular area.
contains(double, double, double, double)
- Method in class java.awt.geom.
Rectangle2D
Tests if the interior of the
Shape
entirely contains
 the specified rectangular area.
contains(double, double, double, double)
- Method in class java.awt.geom.
RoundRectangle2D
Tests if the interior of the
Shape
entirely contains
 the specified rectangular area.
contains(double, double, double, double)
- Method in class java.awt.
Polygon
Tests if the interior of the
Shape
entirely contains
 the specified rectangular area.
contains(double, double, double, double)
- Method in interface java.awt.
Shape
Tests if the interior of the
Shape
entirely contains
 the specified rectangular area.
contains(int)
- Method in class javax.print.attribute.
SetOfIntegerSyntax
Determine if this set-of-integer attribute contains the given value.
contains(int, int)
- Method in class java.awt.
Component
Checks whether this component "contains" the specified point,
 where
x
and
y
are defined to be
 relative to the coordinate system of this component.
contains(int, int)
- Method in class java.awt.
Polygon
Determines whether the specified coordinates are inside this
Polygon
.
contains(int, int)
- Method in class java.awt.
Rectangle
Checks whether or not this
Rectangle
contains the
 point at the specified location
(x,y)
.
contains(int, int)
- Method in class javax.swing.
JComponent
Gives the UI delegate an opportunity to define the precise
 shape of this component for the sake of mouse processing.
contains(int, int, int, int)
- Method in class java.awt.
Rectangle
Checks whether this
Rectangle
entirely contains
 the
Rectangle
at the specified location
(X,Y)
with the
 specified dimensions
(W,H)
.
contains(PathIterator, double, double)
- Static method in class java.awt.geom.
Path2D
Tests if the specified coordinates are inside the closed
 boundary of the specified
PathIterator
.
contains(PathIterator, double, double, double, double)
- Static method in class java.awt.geom.
Path2D
Tests if the specified rectangular area is entirely inside the
 closed boundary of the specified
PathIterator
.
contains(PathIterator, Point2D)
- Static method in class java.awt.geom.
Path2D
Tests if the specified
Point2D
is inside the closed
 boundary of the specified
PathIterator
.
contains(PathIterator, Rectangle2D)
- Static method in class java.awt.geom.
Path2D
Tests if the specified
Rectangle2D
is entirely inside the
 closed boundary of the specified
PathIterator
.
contains(Point2D)
- Method in class java.awt.geom.
Area
Tests if a specified
Point2D
is inside the boundary
 of the
Shape
, as described by the
definition of insideness
.
contains(Point2D)
- Method in class java.awt.geom.
CubicCurve2D
Tests if a specified
Point2D
is inside the boundary
 of the
Shape
, as described by the
definition of insideness
.
contains(Point2D)
- Method in class java.awt.geom.
Line2D
Tests if a given
Point2D
is inside the boundary of
 this
Line2D
.
contains(Point2D)
- Method in class java.awt.geom.
Path2D
Tests if a specified
Point2D
is inside the boundary
 of the
Shape
, as described by the
definition of insideness
.
contains(Point2D)
- Method in class java.awt.geom.
QuadCurve2D
Tests if a specified
Point2D
is inside the boundary
 of the
Shape
, as described by the
definition of insideness
.
contains(Point2D)
- Method in class java.awt.geom.
RectangularShape
Tests if a specified
Point2D
is inside the boundary
 of the
Shape
, as described by the
definition of insideness
.
contains(Point2D)
- Method in class java.awt.
Polygon
Tests if a specified
Point2D
is inside the boundary
 of the
Shape
, as described by the
definition of insideness
.
contains(Point2D)
- Method in interface java.awt.
Shape
Tests if a specified
Point2D
is inside the boundary
 of the
Shape
, as described by the
definition of insideness
.
contains(Rectangle2D)
- Method in class java.awt.geom.
Arc2D
Determines whether or not the interior of the arc entirely contains
 the specified rectangle.
contains(Rectangle2D)
- Method in class java.awt.geom.
Area
Tests if the interior of the
Shape
entirely contains the
 specified
Rectangle2D
.
contains(Rectangle2D)
- Method in class java.awt.geom.
CubicCurve2D
Tests if the interior of the
Shape
entirely contains the
 specified
Rectangle2D
.
contains(Rectangle2D)
- Method in class java.awt.geom.
Line2D
Tests if the interior of this
Line2D
entirely contains
 the specified
Rectangle2D
.
contains(Rectangle2D)
- Method in class java.awt.geom.
Path2D
Tests if the interior of the
Shape
entirely contains the
 specified
Rectangle2D
.
contains(Rectangle2D)
- Method in class java.awt.geom.
QuadCurve2D
Tests if the interior of the
Shape
entirely contains the
 specified
Rectangle2D
.
contains(Rectangle2D)
- Method in class java.awt.geom.
RectangularShape
Tests if the interior of the
Shape
entirely contains the
 specified
Rectangle2D
.
contains(Rectangle2D)
- Method in class java.awt.
Polygon
Tests if the interior of the
Shape
entirely contains the
 specified
Rectangle2D
.
contains(Rectangle2D)
- Method in interface java.awt.
Shape
Tests if the interior of the
Shape
entirely contains the
 specified
Rectangle2D
.
contains(Point)
- Method in class com.sun.java.accessibility.util.
Translator
Checks whether the specified
Point
is within this
 object's bounds, where the
Point
is relative to the coordinate
 system of the object.
contains(Point)
- Method in class java.awt.
Component.AccessibleAWTComponent
Checks whether the specified point is within this object's bounds,
 where the point's x and y coordinates are defined to be relative to
 the coordinate system of the object.
contains(Point)
- Method in class java.awt.
Component
Checks whether this component "contains" the specified point,
 where the point's
x
and
y
coordinates are defined
 to be relative to the coordinate system of this component.
contains(Point)
- Method in class java.awt.
List.AccessibleAWTList.AccessibleAWTListChild
Checks whether the specified point is within this object's
 bounds, where the point's x and y coordinates are defined to
 be relative to the coordinate system of the object.
contains(Point)
- Method in class java.awt.
MenuComponent.AccessibleAWTMenuComponent
Checks whether the specified point is within this object's bounds,
 where the point's x and y coordinates are defined to be relative to
 the coordinate system of the object.
contains(Point)
- Method in class java.awt.
Polygon
Determines whether the specified
Point
is inside this
Polygon
.
contains(Point)
- Method in class java.awt.
Rectangle
Checks whether or not this
Rectangle
contains the
 specified
Point
.
contains(Point)
- Method in interface javax.accessibility.
AccessibleComponent
Checks whether the specified point is within this object's bounds, where
 the point's x and y coordinates are defined to be relative to the
 coordinate system of the object.
contains(Point)
- Method in class javax.swing.
JList.AccessibleJList.AccessibleJListChild
contains(Point)
- Method in class javax.swing.
JTable.AccessibleJTable.AccessibleJTableCell
Checks whether the specified point is within this
 object's bounds, where the point's x and y coordinates
 are defined to be relative to the coordinate system of
 the object.
contains(Point)
- Method in class javax.swing.
JTree.AccessibleJTree.AccessibleJTreeNode
contains(Point)
- Method in class javax.swing.table.
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry
contains(Rectangle)
- Method in class java.awt.
Rectangle
Checks whether or not this
Rectangle
entirely contains
 the specified
Rectangle
.
contains(CharSequence)
- Method in class java.lang.
String
Returns true if and only if this string contains the specified
 sequence of char values.
contains(Object)
- Method in class java.beans.beancontext.
BeanContextMembershipEvent
Is the child specified affected by the event?
contains(Object)
- Method in class java.beans.beancontext.
BeanContextSupport
Determines whether or not the specified object
 is currently a child of this
BeanContext
.
contains(Object)
- Method in class java.util.
AbstractCollection
Returns
true
if this collection contains the specified element.
contains(Object)
- Method in class java.util.
ArrayDeque
Returns
true
if this deque contains the specified element.
contains(Object)
- Method in class java.util.
ArrayList
Returns
true
if this list contains the specified element.
contains(Object)
- Method in interface java.util.
Collection
Returns
true
if this collection contains the specified element.
contains(Object)
- Method in class java.util.concurrent.
ArrayBlockingQueue
Returns
true
if this queue contains the specified element.
contains(Object)
- Method in interface java.util.concurrent.
BlockingDeque
Returns
true
if this deque contains the specified element.
contains(Object)
- Method in interface java.util.concurrent.
BlockingQueue
Returns
true
if this queue contains the specified element.
contains(Object)
- Method in class java.util.concurrent.
ConcurrentHashMap
Tests if some key maps into the specified value in this table.
contains(Object)
- Method in class java.util.concurrent.
ConcurrentHashMap.KeySetView
Returns
true
if this collection contains the specified element.
contains(Object)
- Method in class java.util.concurrent.
ConcurrentLinkedDeque
Returns
true
if this deque contains the specified element.
contains(Object)
- Method in class java.util.concurrent.
ConcurrentLinkedQueue
Returns
true
if this queue contains the specified element.
contains(Object)
- Method in class java.util.concurrent.
ConcurrentSkipListSet
Returns
true
if this set contains the specified element.
contains(Object)
- Method in class java.util.concurrent.
CopyOnWriteArrayList
Returns
true
if this list contains the specified element.
contains(Object)
- Method in class java.util.concurrent.
CopyOnWriteArraySet
Returns
true
if this set contains the specified element.
contains(Object)
- Method in class java.util.concurrent.
LinkedBlockingDeque
Returns
true
if this deque contains the specified element.
contains(Object)
- Method in class java.util.concurrent.
LinkedBlockingQueue
Returns
true
if this queue contains the specified element.
contains(Object)
- Method in class java.util.concurrent.
LinkedTransferQueue
Returns
true
if this queue contains the specified element.
contains(Object)
- Method in class java.util.concurrent.
PriorityBlockingQueue
Returns
true
if this queue contains the specified element.
contains(Object)
- Method in class java.util.concurrent.
SynchronousQueue
Always returns
false
.
contains(Object)
- Method in interface java.util.
Deque
Returns
true
if this deque contains the specified element.
contains(Object)
- Method in class java.util.
HashSet
Returns
true
if this set contains the specified element.
contains(Object)
- Method in class java.util.
Hashtable
Tests if some key maps into the specified value in this hashtable.
contains(Object)
- Method in class java.util.
LinkedList
Returns
true
if this list contains the specified element.
contains(Object)
- Method in interface java.util.
List
Returns
true
if this list contains the specified element.
contains(Object)
- Method in class java.util.
PriorityQueue
Returns
true
if this queue contains the specified element.
contains(Object)
- Method in interface java.util.
Set
Returns
true
if this set contains the specified element.
contains(Object)
- Method in class java.util.
TreeSet
Returns
true
if this set contains the specified element.
contains(Object)
- Method in class java.util.
Vector
Returns
true
if this vector contains the specified element.
contains(Object)
- Method in class javax.imageio.spi.
ServiceRegistry
Returns
true
if
provider
is currently
 registered.
contains(Object)
- Method in interface javax.naming.directory.
Attribute
Determines whether a value is in the attribute.
contains(Object)
- Method in class javax.naming.directory.
BasicAttribute
Determines whether a value is in this attribute.
contains(Object)
- Method in class javax.swing.
DefaultListModel
Tests whether the specified object is a component in this list.
contains(Object)
- Method in class javax.swing.plaf.basic.
BasicDirectoryModel
Returns
true
if an element
o
is in file cache,
 otherwise, returns
false
.
contains(String)
- Method in class javax.accessibility.
AccessibleRelationSet
Returns whether the relation set contains a relation that matches the
 specified key.
contains(String)
- Method in interface org.w3c.dom.
DOMStringList
Test if a string is part of this
DOMStringList
.
contains(String)
- Method in interface org.w3c.dom.
NameList
Test if a name is part of this
NameList
.
contains(Charset)
- Method in class java.nio.charset.
Charset
Tells whether or not this charset contains the given charset.
contains(AccessibleState)
- Method in class javax.accessibility.
AccessibleStateSet
Checks if the current state is in the state set.
contains(TypeMirror, TypeMirror)
- Method in interface javax.lang.model.util.
Types
Tests whether one type argument
contains
another.
contains(IntegerSyntax)
- Method in class javax.print.attribute.
SetOfIntegerSyntax
Determine if this set-of-integer attribute contains the given integer
 attribute's value.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.
ComponentUI
Returns
true
if the specified
x,y
location is
 contained within the look and feel's defined shape of the specified
 component.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiButtonUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiColorChooserUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiComboBoxUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiDesktopIconUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiDesktopPaneUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiFileChooserUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiInternalFrameUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiLabelUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiListUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiMenuBarUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiMenuItemUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiOptionPaneUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiPanelUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiPopupMenuUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiProgressBarUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiRootPaneUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiScrollBarUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiScrollPaneUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiSeparatorUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiSliderUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiSpinnerUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiSplitPaneUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiTabbedPaneUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiTableHeaderUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiTableUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiTextUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiToolBarUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiToolTipUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiTreeUI
Invokes the
contains
method on each UI handled by this object.
contains(JComponent, int, int)
- Method in class javax.swing.plaf.multi.
MultiViewportUI
Invokes the
contains
method on each UI handled by this object.
contains(JavaFileManager.Location, FileObject)
- Method in class javax.tools.
ForwardingJavaFileManager
contains(JavaFileManager.Location, FileObject)
- Method in interface javax.tools.
JavaFileManager
Determines whether or not a given file object is "contained in" a specified location.
contains(Namespace)
- Method in class jdk.dynalink.
NamespaceOperation
Returns true if this namespace operation contains a namespace equal to
 the specified namespace.
contains(Operation, Operation, Namespace)
- Static method in class jdk.dynalink.
NamespaceOperation
Returns true if the specified operation is a
NamespaceOperation
and its base operation is equal to the specified operation, and it
 contains the specified namespace.
containsAlias(String)
- Method in class java.security.
KeyStore
Checks if the given alias exists in this keystore.
containsAll(Collection)
- Method in class java.beans.beancontext.
BeanContextSupport
Tests to see if all objects in the
 specified
Collection
are children of
 this
BeanContext
.
containsAll(Collection<?>)
- Method in class java.util.
AbstractCollection
Returns
true
if this collection contains all of the elements
 in the specified collection.
containsAll(Collection<?>)
- Method in interface java.util.
Collection
Returns
true
if this collection contains all of the elements
 in the specified collection.
containsAll(Collection<?>)
- Method in class java.util.concurrent.
ConcurrentHashMap.KeySetView
containsAll(Collection<?>)
- Method in class java.util.concurrent.
CopyOnWriteArrayList
Returns
true
if this list contains all of the elements of the
 specified collection.
containsAll(Collection<?>)
- Method in class java.util.concurrent.
CopyOnWriteArraySet
Returns
true
if this set contains all of the elements of the
 specified collection.
containsAll(Collection<?>)
- Method in class java.util.concurrent.
SynchronousQueue
Returns
false
unless the given collection is empty.
containsAll(Collection<?>)
- Method in interface java.util.
List
Returns
true
if this list contains all of the elements of the
 specified collection.
containsAll(Collection<?>)
- Method in interface java.util.
Set
Returns
true
if this set contains all of the elements of the
 specified collection.
containsAll(Collection<?>)
- Method in class java.util.
Vector
Returns true if this Vector contains all of the elements in the
 specified Collection.
containsAngle(double)
- Method in class java.awt.geom.
Arc2D
Determines whether or not the specified angle is within the
 angular extents of the arc.
containsAttribute(Object, Object)
- Method in class javax.swing.text.
AbstractDocument.AbstractElement
Checks whether a given attribute name/value is defined.
containsAttribute(Object, Object)
- Method in interface javax.swing.text.
AttributeSet
Returns
true
if this set defines an attribute with the same
 name and an equal value.
containsAttribute(Object, Object)
- Method in class javax.swing.text.
SimpleAttributeSet
Checks whether the attribute list contains a
 specified attribute name/value pair.
containsAttribute(Object, Object)
- Method in class javax.swing.text.
StyleContext.NamedStyle
Checks whether a given attribute name/value is defined.
containsAttribute(Object, Object)
- Method in class javax.swing.text.
StyleContext.SmallAttributeSet
Checks whether a given attribute name/value is defined.
containsAttributes(AttributeSet)
- Method in class javax.swing.text.
AbstractDocument.AbstractElement
Checks whether the element contains all the attributes.
containsAttributes(AttributeSet)
- Method in interface javax.swing.text.
AttributeSet
Returns
true
if this set defines all the attributes from the
 given set with equal values.
containsAttributes(AttributeSet)
- Method in class javax.swing.text.
SimpleAttributeSet
Checks whether the attribute list contains all the
 specified name/value pairs.
containsAttributes(AttributeSet)
- Method in class javax.swing.text.
StyleContext.NamedStyle
Checks whether the element contains all the attributes.
containsAttributes(AttributeSet)
- Method in class javax.swing.text.
StyleContext.SmallAttributeSet
Checks whether the attribute set contains all of
 the given attributes.
containsCustomComponents(JOptionPane)
- Method in class javax.swing.plaf.basic.
BasicOptionPaneUI
Returns true if in the last call to validateComponent the message
 or buttons contained a subclass of Component.
containsCustomComponents(JOptionPane)
- Method in class javax.swing.plaf.multi.
MultiOptionPaneUI
Invokes the
containsCustomComponents
method on each UI handled by this object.
containsCustomComponents(JOptionPane)
- Method in class javax.swing.plaf.
OptionPaneUI
Returns true if the user has supplied instances of Component for
 either the options or message.
containsKey(Class<?>)
- Method in interface javax.print.attribute.
AttributeSet
Returns
true
if this attribute set contains an attribute for the
 specified category.
containsKey(Class<?>)
- Method in class javax.print.attribute.
HashAttributeSet
Returns
true
if this attribute set contains an attribute for the
 specified category.
containsKey(Object)
- Method in class com.sun.net.httpserver.
Headers
containsKey(Object)
- Method in class java.awt.
RenderingHints
Returns
true
if this
RenderingHints
contains a mapping for the specified key.
containsKey(Object)
- Method in class java.beans.beancontext.
BeanContextSupport
Determines whether or not the specified object
 is currently a child of this
BeanContext
.
containsKey(Object)
- Method in class java.util.
AbstractMap
Returns
true
if this map contains a mapping for the specified
 key.
containsKey(Object)
- Method in class java.util.concurrent.
ConcurrentHashMap
Tests if the specified object is a key in this table.
containsKey(Object)
- Method in class java.util.concurrent.
ConcurrentSkipListMap
Returns
true
if this map contains a mapping for the specified
 key.
containsKey(Object)
- Method in class java.util.
EnumMap
Returns
true
if this map contains a mapping for the specified
 key.
containsKey(Object)
- Method in class java.util.
HashMap
Returns
true
if this map contains a mapping for the
 specified key.
containsKey(Object)
- Method in class java.util.
Hashtable
Tests if the specified object is a key in this hashtable.
containsKey(Object)
- Method in class java.util.
IdentityHashMap
Tests whether the specified object reference is a key in this identity
 hash map.
containsKey(Object)
- Method in class java.util.jar.
Attributes
Returns true if this Map contains the specified attribute name (key).
containsKey(Object)
- Method in interface java.util.
Map
Returns
true
if this map contains a mapping for the specified
 key.
containsKey(Object)
- Method in class java.util.
TreeMap
Returns
true
if this map contains a mapping for the specified
 key.
containsKey(Object)
- Method in class java.util.
WeakHashMap
Returns
true
if this map contains a mapping for the
 specified key.
containsKey(Object)
- Method in class javax.management.openmbean.
TabularDataSupport
Returns
true
if and only if this
TabularData
instance contains a
CompositeData
value
 (ie a row) whose index is the specified
key
.
containsKey(Object)
- Method in interface javax.script.
Bindings
Returns
true
if this map contains a mapping for the specified
 key.
containsKey(Object)
- Method in class javax.script.
SimpleBindings
Returns
true
if this map contains a mapping for the specified
 key.
containsKey(Object[])
- Method in interface javax.management.openmbean.
TabularData
Returns
true
if and only if this
TabularData
instance contains a
CompositeData
value
 (ie a row) whose index is the specified
key
.
containsKey(Object[])
- Method in class javax.management.openmbean.
TabularDataSupport
Returns
true
if and only if this
TabularData
instance contains a
CompositeData
value
 (ie a row) whose index is the specified
key
.
containsKey(String)
- Method in class com.sun.management.
GcInfo
containsKey(String)
- Method in class java.util.
ResourceBundle
Determines whether the given
key
is contained in
 this
ResourceBundle
or its parent bundles.
containsKey(String)
- Method in interface javax.management.openmbean.
CompositeData
Returns
true
if and only if this
CompositeData
instance contains
 an item whose name is
key
.
containsKey(String)
- Method in class javax.management.openmbean.
CompositeDataSupport
Returns
true
if and only if this
CompositeData
instance contains
 an item whose name is
key
.
containsKey(String)
- Method in class javax.management.openmbean.
CompositeType
Returns
true
if this
CompositeType
instance defines an item
 whose name is
itemName
.
containsNS(String, String)
- Method in interface org.w3c.dom.
NameList
Test if the pair namespaceURI/name is part of this
NameList
.
containsObservedObject(ObjectName)
- Method in class javax.management.monitor.
Monitor
Tests whether the specified object is in the set of observed MBeans.
containsObservedObject(ObjectName)
- Method in interface javax.management.monitor.
MonitorMBean
Tests whether the specified object is in the set of observed MBeans.
containsTIFFField(int)
- Method in class javax.imageio.plugins.tiff.
TIFFDirectory
Determines whether a TIFF field with the given tag number is
 contained in this directory.
containsValue(Object)
- Method in class com.sun.management.
GcInfo
containsValue(Object)
- Method in class com.sun.net.httpserver.
Headers
containsValue(Object)
- Method in class java.awt.
RenderingHints
Returns true if this RenderingHints maps one or more keys to the
 specified value.
containsValue(Object)
- Method in class java.util.
AbstractMap
Returns
true
if this map maps one or more keys to the
 specified value.
containsValue(Object)
- Method in class java.util.concurrent.
ConcurrentHashMap
Returns
true
if this map maps one or more keys to the
 specified value.
containsValue(Object)
- Method in class java.util.concurrent.
ConcurrentSkipListMap
Returns
true
if this map maps one or more keys to the
 specified value.
containsValue(Object)
- Method in class java.util.
EnumMap
Returns
true
if this map maps one or more keys to the
 specified value.
containsValue(Object)
- Method in class java.util.
HashMap
Returns
true
if this map maps one or more keys to the
 specified value.
containsValue(Object)
- Method in class java.util.
Hashtable
Returns true if this hashtable maps one or more keys to this value.
containsValue(Object)
- Method in class java.util.
IdentityHashMap
Tests whether the specified object reference is a value in this identity
 hash map.
containsValue(Object)
- Method in class java.util.jar.
Attributes
Returns true if this Map maps one or more attribute names (keys)
 to the specified value.
containsValue(Object)
- Method in class java.util.
LinkedHashMap
Returns
true
if this map maps one or more keys to the
 specified value.
containsValue(Object)
- Method in interface java.util.
Map
Returns
true
if this map maps one or more keys to the
 specified value.
containsValue(Object)
- Method in class java.util.
TreeMap
Returns
true
if this map maps one or more keys to the
 specified value.
containsValue(Object)
- Method in class java.util.
WeakHashMap
Returns
true
if this map maps one or more keys to the
 specified value.
containsValue(Object)
- Method in interface javax.management.openmbean.
CompositeData
Returns
true
if and only if this
CompositeData
instance contains an item
 whose value is
value
.
containsValue(Object)
- Method in class javax.management.openmbean.
CompositeDataSupport
Returns
true
if and only if this
CompositeData
instance
 contains an item
 whose value is
value
.
containsValue(Object)
- Method in class javax.management.openmbean.
TabularDataSupport
Returns
true
if and only if this
TabularData
instance contains the specified
 value.
containsValue(Object)
- Method in class javax.script.
SimpleBindings
Returns
true
if this map maps one or more keys to the
 specified value.
containsValue(CompositeData)
- Method in interface javax.management.openmbean.
TabularData
Returns
true
if and only if this
TabularData
instance contains the specified
CompositeData
value.
containsValue(CompositeData)
- Method in class javax.management.openmbean.
TabularDataSupport
Returns
true
if and only if this
TabularData
instance contains the specified
CompositeData
value.
containsValue(Attribute)
- Method in interface javax.print.attribute.
AttributeSet
Returns
true
if this attribute set contains the given attribute
 value.
containsValue(Attribute)
- Method in class javax.print.attribute.
HashAttributeSet
Returns
true
if this attribute set contains the given attribute.
content
- Variable in class javax.swing.text.html.parser.
ContentModel
The content.
content
- Variable in class javax.swing.text.html.parser.
Element
The content model
CONTENT
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "content"
CONTENT
- Static variable in class javax.swing.text.html.
HTML.Tag
All text content is labeled with this tag.
CONTENT_AREA_FILLED_CHANGED_PROPERTY
- Static variable in class javax.swing.
AbstractButton
Identifies a change to having the button paint the content area.
CONTENT_PANE_PROPERTY
- Static variable in class javax.swing.
JInternalFrame
Bound property name.
CONTENT_TYPE
- Static variable in class java.util.jar.
Attributes.Name
Name
object for
Content-Type
manifest attribute.
contentBorderInsets
- Variable in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Content border insets
ContentElementName
- Static variable in class javax.swing.text.
AbstractDocument
Name of elements used to represent content
contentEquals(CharSequence)
- Method in class java.lang.
String
Compares this string to the specified
CharSequence
.
contentEquals(CharSequence)
- Method in interface javax.lang.model.element.
Name
Compares this name to the specified
CharSequence
.
contentEquals(StringBuffer)
- Method in class java.lang.
String
Compares this string to the specified
StringBuffer
.
ContentHandler
- Class in
java.net
The abstract class
ContentHandler
is the superclass
 of all classes that read an
Object
from a
URLConnection
.
ContentHandler
- Interface in
org.xml.sax
Receive notification of the logical content of a document.
ContentHandler()
- Constructor for class java.net.
ContentHandler
Constructor for subclasses to call.
ContentHandlerFactory
- Interface in
java.net
This interface defines a factory for content handlers.
contentLength()
- Method in interface java.net.http.
HttpRequest.BodyPublisher
Returns the content length for this request body.
ContentModel
- Class in
javax.swing.text.html.parser
A representation of a content model.
ContentModel()
- Constructor for class javax.swing.text.html.parser.
ContentModel
Creates
ContentModel
ContentModel(int, Object, ContentModel)
- Constructor for class javax.swing.text.html.parser.
ContentModel
Create a content model of a particular type.
ContentModel(int, ContentModel)
- Constructor for class javax.swing.text.html.parser.
ContentModel
Create a content model of a particular type.
ContentModel(Element)
- Constructor for class javax.swing.text.html.parser.
ContentModel
Create a content model for an element.
contentPane
- Variable in class javax.swing.
JRootPane
The content pane.
contentRect
- Variable in class javax.swing.plaf.basic.
BasicSliderUI
Content rectangle
contents
- Variable in class java.awt.datatransfer.
Clipboard
Contents of the clipboard.
CONTENTS_CHANGED
- Static variable in class javax.swing.event.
ListDataEvent
Identifies one or more changes in the lists contents.
contentsChanged(ListDataEvent)
- Method in interface javax.swing.event.
ListDataListener
Sent when the contents of the list has changed in a way
 that's too complex to characterize with the previous
 methods.
contentsChanged(ListDataEvent)
- Method in class javax.swing.
JComboBox
This method is public as an implementation side effect.
contentsChanged(ListDataEvent)
- Method in class javax.swing.
JList.AccessibleJList
List Data Listener contents changed method.
contentsChanged(ListDataEvent)
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI.ListDataHandler
contentsChanged(ListDataEvent)
- Method in class javax.swing.plaf.basic.
BasicComboPopup.ListDataHandler
contentsChanged(ListDataEvent)
- Method in class javax.swing.plaf.basic.
BasicListUI.ListDataHandler
contentsLost()
- Method in class java.awt.
Component.BltBufferStrategy
contentsLost()
- Method in class java.awt.
Component.FlipBufferStrategy
contentsLost()
- Method in class java.awt.image.
BufferStrategy
Returns whether the drawing buffer was lost since the last call to
getDrawGraphics
.
contentsLost()
- Method in class java.awt.image.
VolatileImage
Returns
true
if rendering data was lost since last
validate
call.
contentsRestored()
- Method in class java.awt.
Component.BltBufferStrategy
contentsRestored()
- Method in class java.awt.
Component.FlipBufferStrategy
contentsRestored()
- Method in class java.awt.image.
BufferStrategy
Returns whether the drawing buffer was recently restored from a lost
 state and reinitialized to the default background color (white).
ContentType
- Annotation Interface in
jdk.jfr
Meta annotation, specifies that an annotation represents a content type, such
 as a time span or a frequency.
ContentType
- Static variable in class javax.swing.text.
DefaultStyledDocument.ElementSpec
A possible value for getType.
context
- Variable in class java.awt.dnd.
DropTargetEvent
The
DropTargetContext
associated with this
DropTargetEvent
.
context
- Variable in class javax.script.
AbstractScriptEngine
The default
ScriptContext
of this
AbstractScriptEngine
.
context()
- Method in interface java.nio.file.
WatchEvent
Returns the context for the event.
Context
- Search tag in package javax.naming
Section
Context
- Interface in
javax.naming
This interface represents a naming context, which
 consists of a set of name-to-object bindings.
CONTEXT_EXPIRED
- Static variable in exception class org.ietf.jgss.
GSSException
Security context expired.
ContextNotEmptyException
- Exception Class in
javax.naming
This exception is thrown when attempting to destroy a context that
 is not empty.
ContextNotEmptyException()
- Constructor for exception class javax.naming.
ContextNotEmptyException
Constructs a new instance of ContextNotEmptyException with
 all name resolution fields and explanation initialized to null.
ContextNotEmptyException(String)
- Constructor for exception class javax.naming.
ContextNotEmptyException
Constructs a new instance of ContextNotEmptyException using an
 explanation.
Context Request Controls
- Search tag in interface javax.naming.ldap.LdapContext
Section
ContextualRenderedImageFactory
- Interface in
java.awt.image.renderable
ContextualRenderedImageFactory provides an interface for the
 functionality that may differ between instances of
 RenderableImageOp.
CONTIGUOUS_TREE_SELECTION
- Static variable in interface javax.swing.tree.
TreeSelectionModel
Selection can only be contiguous.
continuation()
- Method in interface jdk.jshell.
SourceCodeAnalysis.Suggestion
The candidate continuation of the given user's input.
CONTINUE
- Enum constant in enum class com.sun.nio.sctp.
HandlerResult
Try to receive another message or notification.
CONTINUE
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
ContinueTree
.
CONTINUE
- Enum constant in enum class java.nio.file.
FileVisitResult
Continue.
CONTINUE
- Static variable in class javax.sound.midi.
ShortMessage
Status byte for Continue message (0xFB, or 251).
continueDrag(int, int)
- Method in class javax.swing.plaf.basic.
BasicSplitPaneDivider.DragController
Messages dragDividerTo with the new location for the mouse
 event.
continueDrag(MouseEvent)
- Method in class javax.swing.plaf.basic.
BasicSplitPaneDivider.DragController
Messages dragDividerTo with the new location for the mouse
 event.
ContinueTree
- Interface in
com.sun.source.tree
A tree node for a
continue
statement.
CONTINUOUS_LAYOUT_PROPERTY
- Static variable in class javax.swing.
JSplitPane
Bound property name for continuousLayout.
continuousLayout
- Variable in class javax.swing.
JSplitPane
Whether or not the views are continuously redisplayed while
 resizing.
contListener
- Variable in class javax.swing.plaf.metal.
MetalToolBarUI
This protected field is implementation specific.
CONTRAST_HARD
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "Contrast" tag.
CONTRAST_NORMAL
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "Contrast" tag.
CONTRAST_SOFT
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "Contrast" tag.
control
- Static variable in class java.awt.
SystemColor
The color rendered for the background of control panels and control objects,
 such as pushbuttons.
Control
- Class in
javax.sound.sampled
Lines
often have a set of controls, such as gain and pan, that
 affect the audio signal passing through the line.
Control
- Interface in
javax.naming.ldap
This interface represents an LDAPv3 control as defined in
RFC 2251
.
Control()
- Constructor for class java.util.
ResourceBundle.Control
Sole constructor.
Control(Control.Type)
- Constructor for class javax.sound.sampled.
Control
Constructs a control with the specified type.
CONTROL
- Static variable in class java.awt.
SystemColor
The array index for the
SystemColor.control
system color.
CONTROL
- Static variable in class java.lang.
Character
General category "Cc" in the Unicode specification.
CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY
- Static variable in class javax.swing.
JFileChooser
Instruction to display the control buttons.
CONTROL_CHANGE
- Static variable in class javax.sound.midi.
ShortMessage
Command value for Control Change message (0xB0, or 176).
CONTROL_DK_SHADOW
- Static variable in class java.awt.
SystemColor
The array index for the
SystemColor.controlDkShadow
system color.
CONTROL_FACTORIES
- Static variable in interface javax.naming.ldap.
LdapContext
Constant that holds the name of the environment property
 for specifying the list of control factories to use.
CONTROL_HIGHLIGHT
- Static variable in class java.awt.
SystemColor
The array index for the
SystemColor.controlHighlight
system color.
CONTROL_LT_HIGHLIGHT
- Static variable in class java.awt.
SystemColor
The array index for the
SystemColor.controlLtHighlight
system color.
CONTROL_PICTURES
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Control Pictures" Unicode character block.
CONTROL_SHADOW
- Static variable in class java.awt.
SystemColor
The array index for the
SystemColor.controlShadow
system color.
CONTROL_TEXT
- Static variable in class java.awt.
SystemColor
The array index for the
SystemColor.controlText
system color.
Control.Type
- Class in
javax.sound.sampled
An instance of the
Type
class represents the type of the control.
controlChange(int, int)
- Method in interface javax.sound.midi.
MidiChannel
Reacts to a change in the specified controller's value.
controlChange(ShortMessage)
- Method in interface javax.sound.midi.
ControllerEventListener
Invoked when a
Sequencer
has encountered and processed a
 control-change event of interest to this listener.
controlDkShadow
- Static variable in class java.awt.
SystemColor
The color rendered for dark shadow areas on 3D control objects, such as pushbuttons.
controlDown()
- Method in class java.awt.
Event
Deprecated.
NOTE:
The
Event
class is obsolete and is
 available only for backwards compatibility.
ControlFactory
- Class in
javax.naming.ldap
This abstract class represents a factory for creating LDAPv3 controls.
ControlFactory()
- Constructor for class javax.naming.ldap.
ControlFactory
Creates a new instance of a control factory.
controlHighlight
- Static variable in class java.awt.
SystemColor
The color rendered for light areas of 3D control objects, such as pushbuttons.
CONTROLLED_BY
- Static variable in class javax.accessibility.
AccessibleRelation
Indicates an object is controlled by one or more target objects.
CONTROLLED_BY_PROPERTY
- Static variable in class javax.accessibility.
AccessibleRelation
Identifies that the target object that is doing the controlling has
 changed.
controller
- Variable in class javax.imageio.
IIOParam
The
IIOParamController
that will be
 used to provide settings for this
IIOParam
object when the
activateController
method
 is called.
controller
- Variable in class javax.imageio.metadata.
IIOMetadata
The
IIOMetadataController
that will be
 used to provide settings for this
IIOMetadata
object when the
activateController
method
 is called.
CONTROLLER_FOR
- Static variable in class javax.accessibility.
AccessibleRelation
Indicates an object is a controller for one or more target objects.
CONTROLLER_FOR_PROPERTY
- Static variable in class javax.accessibility.
AccessibleRelation
Identifies that the controller for the target object has changed.
ControllerEventListener
- Interface in
javax.sound.midi
The
ControllerEventListener
interface should be implemented by
 classes whose instances need to be notified when a
Sequencer
has
 processed a requested type of MIDI control-change event.
controlLtHighlight
- Static variable in class java.awt.
SystemColor
The color rendered for highlight areas of 3D control objects, such as pushbuttons.
Controls
- Search tag in package javax.naming.ldap
Section
controlShadow
- Static variable in class java.awt.
SystemColor
The color rendered for shadow areas of 3D control objects, such as pushbuttons.
controlText
- Static variable in class java.awt.
SystemColor
The color rendered for the text of control panels and control objects,
 such as pushbuttons.
ConversionComparator
- Interface in
jdk.dynalink.linker
Optional interface to be implemented by
GuardingTypeConverterFactory
implementers.
ConversionComparator.Comparison
- Enum Class in
jdk.dynalink.linker
Enumeration of possible outcomes of comparing one conversion to another.
Conversions
- Search tag in class java.util.Formatter
Section
convert(long, TimeUnit)
- Method in enum class java.util.concurrent.
TimeUnit
Converts the given time duration in the given unit to this unit.
convert(Duration)
- Method in enum class java.util.concurrent.
TimeUnit
Converts the given time duration to this unit.
convert(VectorOperators.Conversion<Byte, F>, int)
- Method in class jdk.incubator.vector.
ByteVector
Convert this vector to a vector of the same shape and a new
 element type, converting lane values from the current
ETYPE
to a new lane type (called
FTYPE
here) according to the
 indicated
conversion
.
convert(VectorOperators.Conversion<Double, F>, int)
- Method in class jdk.incubator.vector.
DoubleVector
Convert this vector to a vector of the same shape and a new
 element type, converting lane values from the current
ETYPE
to a new lane type (called
FTYPE
here) according to the
 indicated
conversion
.
convert(VectorOperators.Conversion<Float, F>, int)
- Method in class jdk.incubator.vector.
FloatVector
Convert this vector to a vector of the same shape and a new
 element type, converting lane values from the current
ETYPE
to a new lane type (called
FTYPE
here) according to the
 indicated
conversion
.
convert(VectorOperators.Conversion<Integer, F>, int)
- Method in class jdk.incubator.vector.
IntVector
Convert this vector to a vector of the same shape and a new
 element type, converting lane values from the current
ETYPE
to a new lane type (called
FTYPE
here) according to the
 indicated
conversion
.
convert(VectorOperators.Conversion<Long, F>, int)
- Method in class jdk.incubator.vector.
LongVector
Convert this vector to a vector of the same shape and a new
 element type, converting lane values from the current
ETYPE
to a new lane type (called
FTYPE
here) according to the
 indicated
conversion
.
convert(VectorOperators.Conversion<Short, F>, int)
- Method in class jdk.incubator.vector.
ShortVector
Convert this vector to a vector of the same shape and a new
 element type, converting lane values from the current
ETYPE
to a new lane type (called
FTYPE
here) according to the
 indicated
conversion
.
convert(VectorOperators.Conversion<E, F>, int)
- Method in class jdk.incubator.vector.
Vector
Convert this vector to a vector of the same shape and a new
 element type, converting lane values from the current
ETYPE
to a new lane type (called
FTYPE
here) according to the
 indicated
conversion
.
convertColumnIndexToModel(int)
- Method in class javax.swing.
JTable
Maps the index of the column in the view at
viewColumnIndex
to the index of the column
 in the table model.
convertColumnIndexToView(int)
- Method in class javax.swing.
JTable
Maps the index of the column in the table model at
modelColumnIndex
to the index of the column
 in the view.
CONVERTED_TEXT
- Static variable in class java.awt.im.
InputMethodHighlight
Constant for the converted text state.
convertImageMetadata(IIOMetadata, ImageTypeSpecifier, ImageWriteParam)
- Method in interface javax.imageio.
ImageTranscoder
Returns an
IIOMetadata
object that may be used for
 encoding and optionally modified using its document interfaces
 or other interfaces specific to the writer plug-in that will be
 used for encoding.
convertMouseEvent(Component, MouseEvent, Component)
- Static method in class javax.swing.
SwingUtilities
Returns a MouseEvent similar to
sourceEvent
except that its x
 and y members have been converted to
destination
's coordinate
 system.
convertMouseEvent(MouseEvent)
- Method in class javax.swing.plaf.basic.
BasicComboPopup
Converts mouse event.
convertPoint(Component, int, int, Component)
- Static method in class javax.swing.
SwingUtilities
Convert the point
(x,y)
in
source
coordinate system to
destination
coordinate system.
convertPoint(Component, Point, Component)
- Static method in class javax.swing.
SwingUtilities
Convert a
aPoint
in
source
coordinate system to
destination
coordinate system.
convertPointFromScreen(Point, Component)
- Static method in class javax.swing.
SwingUtilities
Convert a point from a screen coordinates to a component's
 coordinate system
convertPointToScreen(Point, Component)
- Static method in class javax.swing.
SwingUtilities
Convert a point from a component's coordinate system to
 screen coordinates.
convertPreviousRowIndexToModel(int)
- Method in class javax.swing.event.
RowSorterEvent
Returns the location of
index
in terms of the
 model prior to the sort.
convertRectangle(Component, Rectangle, Component)
- Static method in class javax.swing.
SwingUtilities
Convert the rectangle
aRectangle
in
source
coordinate system to
destination
coordinate system.
convertRowIndexToModel(int)
- Method in class javax.swing.
DefaultRowSorter
Returns the location of
index
in terms of the
 underlying model.
convertRowIndexToModel(int)
- Method in class javax.swing.
JTable
Maps the index of the row in terms of the view to the
 underlying
TableModel
.
convertRowIndexToModel(int)
- Method in class javax.swing.
RowSorter
Returns the location of
index
in terms of the
 underlying model.
convertRowIndexToView(int)
- Method in class javax.swing.
DefaultRowSorter
Returns the location of
index
in terms of the
 view.
convertRowIndexToView(int)
- Method in class javax.swing.
JTable
Maps the index of the row in terms of the
TableModel
to the view.
convertRowIndexToView(int)
- Method in class javax.swing.
RowSorter
Returns the location of
index
in terms of the
 view.
convertRowToY(int)
- Method in class javax.swing.plaf.basic.
BasicListUI
Return the
JList
relative Y coordinate of the origin of the specified
 row or -1 if row isn't valid.
convertShape(VectorOperators.Conversion<Byte, F>, VectorSpecies<F>, int)
- Method in class jdk.incubator.vector.
ByteVector
Converts this vector to a vector of the given species, shape and
 element type, converting lane values from the current
ETYPE
to a new lane type (called
FTYPE
here) according to the
 indicated
conversion
.
convertShape(VectorOperators.Conversion<Double, F>, VectorSpecies<F>, int)
- Method in class jdk.incubator.vector.
DoubleVector
Converts this vector to a vector of the given species, shape and
 element type, converting lane values from the current
ETYPE
to a new lane type (called
FTYPE
here) according to the
 indicated
conversion
.
convertShape(VectorOperators.Conversion<Float, F>, VectorSpecies<F>, int)
- Method in class jdk.incubator.vector.
FloatVector
Converts this vector to a vector of the given species, shape and
 element type, converting lane values from the current
ETYPE
to a new lane type (called
FTYPE
here) according to the
 indicated
conversion
.
convertShape(VectorOperators.Conversion<Integer, F>, VectorSpecies<F>, int)
- Method in class jdk.incubator.vector.
IntVector
Converts this vector to a vector of the given species, shape and
 element type, converting lane values from the current
ETYPE
to a new lane type (called
FTYPE
here) according to the
 indicated
conversion
.
convertShape(VectorOperators.Conversion<Long, F>, VectorSpecies<F>, int)
- Method in class jdk.incubator.vector.
LongVector
Converts this vector to a vector of the given species, shape and
 element type, converting lane values from the current
ETYPE
to a new lane type (called
FTYPE
here) according to the
 indicated
conversion
.
convertShape(VectorOperators.Conversion<Short, F>, VectorSpecies<F>, int)
- Method in class jdk.incubator.vector.
ShortVector
Converts this vector to a vector of the given species, shape and
 element type, converting lane values from the current
ETYPE
to a new lane type (called
FTYPE
here) according to the
 indicated
conversion
.
convertShape(VectorOperators.Conversion<E, F>, VectorSpecies<F>, int)
- Method in class jdk.incubator.vector.
Vector
Converts this vector to a vector of the given species, shape and
 element type, converting lane values from the current
ETYPE
to a new lane type (called
FTYPE
here) according to the
 indicated
conversion
.
convertStreamMetadata(IIOMetadata, ImageWriteParam)
- Method in interface javax.imageio.
ImageTranscoder
Returns an
IIOMetadata
object that may be used for
 encoding and optionally modified using its document interfaces
 or other interfaces specific to the writer plug-in that will be
 used for encoding.
convertToIntDiscrete(Raster, boolean)
- Method in class java.awt.image.
IndexColorModel
Returns a new
BufferedImage
of TYPE_INT_ARGB or
 TYPE_INT_RGB that has a
Raster
with pixel data
 computed by expanding the indices in the source
Raster
using the color/alpha component arrays of this
ColorModel
.
convertToType(Class<?>, Class<?>, Supplier<MethodHandles.Lookup>)
- Method in interface jdk.dynalink.linker.
GuardingTypeConverterFactory
Returns a guarded type conversion that receives a value of the specified
 source type and returns a value converted to the specified target type.
convertToVector(Object[])
- Static method in class javax.swing.table.
DefaultTableModel
Returns a vector that contains the same objects as the array.
convertToVector(Object[][])
- Static method in class javax.swing.table.
DefaultTableModel
Returns a vector of vectors that contains the same objects as the array.
convertValueToText(Object, boolean, boolean, boolean, int, boolean)
- Method in class javax.swing.
JTree
Called by the renderers to convert the specified value to
 text.
convertYToRow(int)
- Method in class javax.swing.plaf.basic.
BasicListUI
Convert the
JList
relative coordinate to the row that contains it,
 based on the current layout.
ConvolveOp
- Class in
java.awt.image
This class implements a convolution from the source
 to the destination.
ConvolveOp(Kernel)
- Constructor for class java.awt.image.
ConvolveOp
Constructs a ConvolveOp given a Kernel.
ConvolveOp(Kernel, int, RenderingHints)
- Constructor for class java.awt.image.
ConvolveOp
Constructs a ConvolveOp given a Kernel, an edge condition, and a
 RenderingHints object (which may be null).
cookieHandler()
- Method in class java.net.http.
HttpClient
Returns an
Optional
containing this client's
CookieHandler
.
cookieHandler(CookieHandler)
- Method in interface java.net.http.
HttpClient.Builder
Sets a cookie handler.
CookieHandler
- Class in
java.net
A CookieHandler object provides a callback mechanism to hook up a
 HTTP state management policy implementation into the HTTP protocol
 handler.
CookieHandler()
- Constructor for class java.net.
CookieHandler
Constructor for subclasses to call.
CookieManager
- Class in
java.net
CookieManager provides a concrete implementation of
CookieHandler
,
 which separates the storage of cookies from the policy surrounding accepting
 and rejecting cookies.
CookieManager()
- Constructor for class java.net.
CookieManager
Create a new cookie manager.
CookieManager(CookieStore, CookiePolicy)
- Constructor for class java.net.
CookieManager
Create a new cookie manager with specified cookie store and cookie policy.
CookiePolicy
- Interface in
java.net
CookiePolicy implementations decide which cookies should be accepted
 and which should be rejected.
CookieStore
- Interface in
java.net
A CookieStore object represents a storage for cookie.
Coordinate Spaces
- Search tag in class java.awt.Graphics2D
Section
coordinateTypes()
- Method in class java.lang.invoke.
VarHandle
Returns the coordinate types for this VarHandle.
COORDS
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "coords"
COPIED
- Static variable in class java.awt.
BufferCapabilities.FlipContents
When flip contents are
COPIED
, the
 contents of the back buffer are copied to the front buffer when
 flipping.
Copies
- Class in
javax.print.attribute.standard
Class
Copies
is an integer valued printing attribute class that
 specifies the number of copies to be printed.
Copies(int)
- Constructor for class javax.print.attribute.standard.
Copies
Construct a new copies attribute with the given integer value.
CopiesSupported
- Class in
javax.print.attribute.standard
Class
CopiesSupported
is a printing attribute class, a set of
 integers, that gives the supported values for a
Copies
attribute.
CopiesSupported(int)
- Constructor for class javax.print.attribute.standard.
CopiesSupported
Construct a new copies supported attribute containing a single integer.
CopiesSupported(int, int)
- Constructor for class javax.print.attribute.standard.
CopiesSupported
Construct a new copies supported attribute containing a single range of
 integers.
COPTIC
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Coptic".
COPTIC
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Coptic" Unicode character block.
COPTIC_EPACT_NUMBERS
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Coptic Epact Numbers" Unicode character block.
copy
- Variable in class javax.swing.text.
DefaultStyledDocument.AttributeUndoableEdit
Copy of the AttributeSet the Element contained.
copy()
- Method in interface java.net.http.
HttpRequest.Builder
Returns an exact duplicate copy of this
Builder
based on
 current state.
copy()
- Method in class java.util.concurrent.
CompletableFuture
Returns a new CompletableFuture that is completed normally with
 the same value as this CompletableFuture when it completes
 normally.
copy()
- Method in interface java.util.random.
RandomGenerator.ArbitrarilyJumpableGenerator
Returns a new generator whose internal state is an exact copy of this
 generator (therefore their future behavior should be identical if
 subjected to the same series of operations).
copy()
- Method in interface java.util.random.
RandomGenerator.JumpableGenerator
Returns a new generator whose internal state is an exact copy of this
 generator (therefore their future behavior should be identical if
 subjected to the same series of operations).
copy()
- Method in interface java.util.random.
RandomGenerator.LeapableGenerator
Returns a new generator whose internal state is an exact copy of this
 generator (therefore their future behavior should be identical if
 subjected to the same series of operations).
copy()
- Method in class javax.swing.
JPasswordField
Invokes
provideErrorFeedback
on the current
 look and feel, which typically initiates an error beep.
copy()
- Method in class javax.swing.text.
JTextComponent
Transfers the currently selected range in the associated
 text model to the system clipboard, leaving the contents
 in the text model.
copy(boolean)
- Method in class jdk.jfr.
Recording
Returns a clone of this recording, with a new recording ID and name.
copy(InputStream, Path, CopyOption...)
- Static method in class java.nio.file.
Files
Copies all bytes from an input stream to a file.
copy(MemorySegment, long, MemorySegment, long, long)
- Static method in interface java.lang.foreign.
MemorySegment
PREVIEW
Performs a bulk copy from source segment to destination segment.
copy(MemorySegment, ValueLayout, long, MemorySegment, ValueLayout, long, long)
- Static method in interface java.lang.foreign.
MemorySegment
PREVIEW
Performs a bulk copy from source segment to destination segment.
copy(MemorySegment, ValueLayout, long, Object, int, int)
- Static method in interface java.lang.foreign.
MemorySegment
PREVIEW
Copies a number of elements from a source memory segment to a destination array.
copy(Object, int, MemorySegment, ValueLayout, long, int)
- Static method in interface java.lang.foreign.
MemorySegment
PREVIEW
Copies a number of elements from a source array to a destination memory segment.
copy(Path, OutputStream)
- Static method in class java.nio.file.
Files
Copies all bytes from a file to an output stream.
copy(Path, Path, CopyOption...)
- Static method in class java.nio.file.
Files
Copy a file to a target file.
copy(Path, Path, CopyOption...)
- Method in class java.nio.file.spi.
FileSystemProvider
Copy a file to a target file.
copy(List<? super T>, List<? extends T>)
- Static method in class java.util.
Collections
Copies all of the elements from one list into another.
COPY
- Static variable in class javax.swing.
TransferHandler
An
int
representing a "copy" transfer action.
COPY_ATTRIBUTES
- Enum constant in enum class java.nio.file.
StandardCopyOption
Copy attributes to the new file.
COPY_OR_MOVE
- Static variable in class javax.swing.
TransferHandler
An
int
representing a source action capability of either
 "copy" or "move".
copyAction
- Static variable in class javax.swing.text.
DefaultEditorKit
Name of the action to copy the selected region
 and place the contents into the system clipboard.
CopyAction()
- Constructor for class javax.swing.text.
DefaultEditorKit.CopyAction
Create this object with the appropriate identifier.
copyAndJump()
- Method in interface java.util.random.
RandomGenerator.JumpableGenerator
Copy this generator, jump this generator forward, then return the
 copy.
copyAndJump(double)
- Method in interface java.util.random.
RandomGenerator.ArbitrarilyJumpableGenerator
Copy this generator, jump this generator forward, then return the
 copy.
copyAndLeap()
- Method in interface java.util.random.
RandomGenerator.LeapableGenerator
Copy this generator, leap this generator forward, then return the
 copy.
copyArea(int, int, int, int, int, int)
- Method in class java.awt.
Graphics
Copies an area of the component by a distance specified by
dx
and
dy
.
copyArea(int, int, int, int, int, int)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.copyArea
.
copyAttributes()
- Method in class javax.swing.text.
AbstractDocument.AbstractElement
Copies a set of attributes.
copyAttributes()
- Method in interface javax.swing.text.
AttributeSet
Returns an attribute set that is guaranteed not
 to change over time.
copyAttributes()
- Method in class javax.swing.text.
SimpleAttributeSet
Makes a copy of the attributes.
copyAttributes()
- Method in class javax.swing.text.
StyleContext.NamedStyle
Copies a set of attributes.
copyAttributes()
- Method in class javax.swing.text.
StyleContext.SmallAttributeSet
Copies a set of attributes.
copyChildren()
- Method in class java.beans.beancontext.
BeanContextSupport
Gets a copy of the this BeanContext's children.
copyData(WritableRaster)
- Method in class java.awt.image.
BufferedImage
Computes an arbitrary rectangular region of the
BufferedImage
and copies it into a specified
WritableRaster
.
copyData(WritableRaster)
- Method in interface java.awt.image.
RenderedImage
Computes an arbitrary rectangular region of the RenderedImage
 and copies it into a caller-supplied WritableRaster.
copyFrom(MemorySegment)
- Method in interface java.lang.foreign.
MemorySegment
PREVIEW
Performs a bulk copy from given source segment to this segment.
copyInto(Object[])
- Method in class java.util.
Vector
Copies the components of this vector into the specified array.
copyInto(Object[])
- Method in class javax.swing.
DefaultListModel
Copies the components of this list into the specified array.
copyOf(boolean[], int)
- Static method in class java.util.
Arrays
Copies the specified array, truncating or padding with
false
(if necessary)
 so the copy has the specified length.
copyOf(byte[], int)
- Static method in class java.util.
Arrays
Copies the specified array, truncating or padding with zeros (if necessary)
 so the copy has the specified length.
copyOf(char[], int)
- Static method in class java.util.
Arrays
Copies the specified array, truncating or padding with null characters (if necessary)
 so the copy has the specified length.
copyOf(double[], int)
- Static method in class java.util.
Arrays
Copies the specified array, truncating or padding with zeros (if necessary)
 so the copy has the specified length.
copyOf(float[], int)
- Static method in class java.util.
Arrays
Copies the specified array, truncating or padding with zeros (if necessary)
 so the copy has the specified length.
copyOf(int[], int)
- Static method in class java.util.
Arrays
Copies the specified array, truncating or padding with zeros (if necessary)
 so the copy has the specified length.
copyOf(long[], int)
- Static method in class java.util.
Arrays
Copies the specified array, truncating or padding with zeros (if necessary)
 so the copy has the specified length.
copyOf(short[], int)
- Static method in class java.util.
Arrays
Copies the specified array, truncating or padding with zeros (if necessary)
 so the copy has the specified length.
copyOf(Collection<? extends E>)
- Static method in interface java.util.
List
Returns an
unmodifiable List
containing the elements of
 the given Collection, in its iteration order.
copyOf(Collection<? extends E>)
- Static method in interface java.util.
Set
Returns an
unmodifiable Set
containing the elements
 of the given Collection.
copyOf(Collection<E>)
- Static method in class java.util.
EnumSet
Creates an enum set initialized from the specified collection.
copyOf(EnumSet<E>)
- Static method in class java.util.
EnumSet
Creates an enum set with the same element type as the specified enum
 set, initially containing the same elements (if any).
copyOf(Map.Entry<? extends K, ? extends V>)
- Static method in interface java.util.
Map.Entry
Returns a copy of the given
Map.Entry
.
copyOf(Map<? extends K, ? extends V>)
- Static method in interface java.util.
Map
Returns an
unmodifiable Map
containing the entries
 of the given Map.
copyOf(T[], int)
- Static method in class java.util.
Arrays
Copies the specified array, truncating or padding with nulls (if necessary)
 so the copy has the specified length.
copyOf(U[], int, Class<? extends T[]>)
- Static method in class java.util.
Arrays
Copies the specified array, truncating or padding with nulls (if necessary)
 so the copy has the specified length.
copyOfRange(boolean[], int, int)
- Static method in class java.util.
Arrays
Copies the specified range of the specified array into a new array.
copyOfRange(byte[], int, int)
- Static method in class java.util.
Arrays
Copies the specified range of the specified array into a new array.
copyOfRange(char[], int, int)
- Static method in class java.util.
Arrays
Copies the specified range of the specified array into a new array.
copyOfRange(double[], int, int)
- Static method in class java.util.
Arrays
Copies the specified range of the specified array into a new array.
copyOfRange(float[], int, int)
- Static method in class java.util.
Arrays
Copies the specified range of the specified array into a new array.
copyOfRange(int[], int, int)
- Static method in class java.util.
Arrays
Copies the specified range of the specified array into a new array.
copyOfRange(long[], int, int)
- Static method in class java.util.
Arrays
Copies the specified range of the specified array into a new array.
copyOfRange(short[], int, int)
- Static method in class java.util.
Arrays
Copies the specified range of the specified array into a new array.
copyOfRange(T[], int, int)
- Static method in class java.util.
Arrays
Copies the specified range of the specified array into a new array.
copyOfRange(U[], int, int, Class<? extends T[]>)
- Static method in class java.util.
Arrays
Copies the specified range of the specified array into a new array.
CopyOnWriteArrayList<E>
- Class in
java.util.concurrent
A thread-safe variant of
ArrayList
in which all mutative
 operations (
add
,
set
, and so on) are implemented by
 making a fresh copy of the underlying array.
CopyOnWriteArrayList()
- Constructor for class java.util.concurrent.
CopyOnWriteArrayList
Creates an empty list.
CopyOnWriteArrayList(E[])
- Constructor for class java.util.concurrent.
CopyOnWriteArrayList
Creates a list holding a copy of the given array.
CopyOnWriteArrayList(Collection<? extends E>)
- Constructor for class java.util.concurrent.
CopyOnWriteArrayList
Creates a list containing the elements of the specified
 collection, in the order they are returned by the collection's
 iterator.
CopyOnWriteArraySet<E>
- Class in
java.util.concurrent
A
Set
that uses an internal
CopyOnWriteArrayList
for all of its operations.
CopyOnWriteArraySet()
- Constructor for class java.util.concurrent.
CopyOnWriteArraySet
Creates an empty set.
CopyOnWriteArraySet(Collection<? extends E>)
- Constructor for class java.util.concurrent.
CopyOnWriteArraySet
Creates a set containing all of the elements of the specified
 collection.
CopyOption
- Interface in
java.nio.file
An object that configures how to copy or move a file.
copySign(double, double)
- Static method in class java.lang.
Math
Returns the first floating-point argument with the sign of the
 second floating-point argument.
copySign(double, double)
- Static method in class java.lang.
StrictMath
Returns the first floating-point argument with the sign of the
 second floating-point argument.
copySign(float, float)
- Static method in class java.lang.
Math
Returns the first floating-point argument with the sign of the
 second floating-point argument.
copySign(float, float)
- Static method in class java.lang.
StrictMath
Returns the first floating-point argument with the sign of the
 second floating-point argument.
copyTo(long, String)
- Method in interface jdk.management.jfr.
FlightRecorderMXBean
Writes recording data to the specified file.
copyValueOf(char[])
- Static method in class java.lang.
String
Equivalent to
String.valueOf(char[])
.
copyValueOf(char[], int, int)
- Static method in class java.lang.
String
Equivalent to
String.valueOf(char[], int, int)
.
Core Interfaces - General Questions
- Search tag in package java.util
Section
Core Interfaces - General Questions
- Search tag in package java.util
Section
cos(double)
- Static method in class java.lang.
Math
Returns the trigonometric cosine of an angle.
cos(double)
- Static method in class java.lang.
StrictMath
Returns the trigonometric cosine of an angle.
COS
- Static variable in class jdk.incubator.vector.
VectorOperators
Produce
cos(a)
.
cosh(double)
- Static method in class java.lang.
Math
Returns the hyperbolic cosine of a
double
value.
cosh(double)
- Static method in class java.lang.
StrictMath
Returns the hyperbolic cosine of a
double
value.
COSH
- Static variable in class jdk.incubator.vector.
VectorOperators
Produce
cosh(a)
.
Couldn't I have just caught ThreadDeath and fixed the damaged object?
- Search tag in package java.lang
Section
count
- Variable in class java.io.
BufferedInputStream
The index one greater than the index of the last valid byte in
 the buffer.
count
- Variable in class java.io.
BufferedOutputStream
The number of valid bytes in the buffer.
count
- Variable in class java.io.
ByteArrayInputStream
The index one greater than the last valid byte in the input
 stream buffer.
count
- Variable in class java.io.
ByteArrayOutputStream
The number of valid bytes in the buffer.
count
- Variable in class java.io.
CharArrayReader
The index of the end of this buffer.
count
- Variable in class java.io.
CharArrayWriter
The number of chars in the buffer.
count
- Variable in class java.io.
StringBufferInputStream
Deprecated.
The number of valid characters in the input stream buffer.
count
- Variable in class javax.swing.text.
Segment
This is the number of array elements that
 make up the text of interest.
count()
- Method in interface java.nio.file.
WatchEvent
Returns the event count.
count()
- Method in interface java.util.stream.
DoubleStream
Returns the count of elements in this stream.
count()
- Method in interface java.util.stream.
IntStream
Returns the count of elements in this stream.
count()
- Method in interface java.util.stream.
LongStream
Returns the count of elements in this stream.
count()
- Method in interface java.util.stream.
Stream
Returns the count of elements in this stream.
countComponents()
- Method in class java.awt.
Container
Deprecated.
As of JDK version 1.1,
 replaced by getComponentCount().
countDown()
- Method in class java.util.concurrent.
CountDownLatch
Decrements the count of the latch, releasing all waiting threads if
 the count reaches zero.
CountDownLatch
- Class in
java.util.concurrent
A synchronization aid that allows one or more threads to wait until
 a set of operations being performed in other threads completes.
CountDownLatch(int)
- Constructor for class java.util.concurrent.
CountDownLatch
Constructs a
CountDownLatch
initialized with the given count.
CountedCompleter<T>
- Class in
java.util.concurrent
A
ForkJoinTask
with a completion action performed when
 triggered and there are no remaining pending actions.
CountedCompleter()
- Constructor for class java.util.concurrent.
CountedCompleter
Creates a new CountedCompleter with no completer
 and an initial pending count of zero.
CountedCompleter(CountedCompleter<?>)
- Constructor for class java.util.concurrent.
CountedCompleter
Creates a new CountedCompleter with the given completer
 and an initial pending count of zero.
CountedCompleter(CountedCompleter<?>, int)
- Constructor for class java.util.concurrent.
CountedCompleter
Creates a new CountedCompleter with the given completer
 and initial pending count.
countedLoop(MethodHandle, MethodHandle, MethodHandle)
- Static method in class java.lang.invoke.
MethodHandles
Constructs a loop that runs a given number of iterations.
countedLoop(MethodHandle, MethodHandle, MethodHandle, MethodHandle)
- Static method in class java.lang.invoke.
MethodHandles
Constructs a loop that counts over a range of numbers.
Counter
- Interface in
org.w3c.dom.css
The
Counter
interface is used to represent any counter or
 counters function value.
CounterMonitor
- Class in
javax.management.monitor
Defines a monitor MBean designed to observe the values of a counter
 attribute.
CounterMonitor()
- Constructor for class javax.management.monitor.
CounterMonitor
Default constructor.
CounterMonitorMBean
- Interface in
javax.management.monitor
Exposes the remote management interface of the counter monitor MBean.
counting()
- Static method in class java.util.stream.
Collectors
Returns a
Collector
accepting elements of type
T
that
 counts the number of input elements.
COUNTING_ROD_NUMERALS
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Counting Rod Numerals" Unicode character block.
countItems()
- Method in class java.awt.
Choice
Deprecated.
As of JDK version 1.1,
 replaced by
getItemCount()
.
countItems()
- Method in class java.awt.
List
Deprecated.
As of JDK version 1.1,
 replaced by
getItemCount()
.
countItems()
- Method in class java.awt.
Menu
Deprecated.
As of JDK version 1.1,
 replaced by
getItemCount()
.
countMenus()
- Method in class java.awt.
MenuBar
Deprecated.
As of JDK version 1.1,
 replaced by
getMenuCount()
.
countObservers()
- Method in class java.util.
Observable
Deprecated.
Returns the number of observers of this
Observable
object.
countStackFrames()
- Method in class java.lang.
Thread
Deprecated, for removal: This API element is subject to removal in a future version.
This method was originally designed to count the number of
             stack frames but the results were never well-defined and it
             depended on thread-suspension.
             This method is subject to removal in a future version of Java SE.
countTokens()
- Method in class java.util.
StringTokenizer
Calculates the number of times that this tokenizer's
nextToken
method can be called before it generates an
 exception.
COVER
- Static variable in class javax.print.attribute.standard.
Finishings
This value is specified when it is desired to select a non-printed (or
 pre-printed) cover for the document.
COVER_OPEN
- Static variable in class javax.print.attribute.standard.
PrinterStateReason
One or more covers on the device are open.
CPE
- Static variable in class javax.naming.spi.
NamingManager
Constant that holds the name of the environment property into
 which
getContinuationContext()
stores the value of its
CannotProceedException
parameter.
crc
- Variable in class java.util.zip.
GZIPInputStream
CRC-32 for uncompressed data.
crc
- Variable in class java.util.zip.
GZIPOutputStream
CRC-32 of uncompressed data.
CRC32
- Class in
java.util.zip
A class that can be used to compute the CRC-32 of a data stream.
CRC32()
- Constructor for class java.util.zip.
CRC32
Creates a new CRC32 object.
CRC32C
- Class in
java.util.zip
A class that can be used to compute the CRC-32C of a data stream.
CRC32C()
- Constructor for class java.util.zip.
CRC32C
Creates a new CRC32C object.
create()
- Static method in class com.sun.net.httpserver.
HttpServer
Creates a
HttpServer
instance which is initially not bound to any
 local address/port.
create()
- Static method in class com.sun.net.httpserver.
HttpsServer
Creates a
HttpsServer
instance which is initially not bound to any
 local address/port.
create()
- Method in class java.awt.
Graphics
Creates a new
Graphics
object that is
 a copy of this
Graphics
object.
create()
- Static method in class java.lang.ref.
Cleaner
Returns a new
Cleaner
.
create()
- Method in class java.net.
DatagramSocketImpl
Creates a datagram socket.
create()
- Method in class java.util.random.
RandomGeneratorFactory
Create an instance of
RandomGenerator
based on
algorithm
chosen.
create()
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.create
to return a DebugGraphics object.
create()
- Static method in class jdk.jshell.
JShell
Create a new JShell state engine.
create(boolean)
- Method in class java.net.
SocketImpl
Creates either a stream or a datagram socket.
create(byte[])
- Method in class java.util.random.
RandomGeneratorFactory
Create an instance of
RandomGenerator
based on
algorithm
chosen
 providing a starting byte[] seed.
create(int, int)
- Static method in class com.sun.nio.sctp.
SctpStandardSocketOptions.InitMaxStreams
Creates an InitMaxStreams instance.
create(int, int, int, int)
- Method in class java.awt.
Graphics
Creates a new
Graphics
object based on this
Graphics
object, but with a new translation and clip area.
create(int, int, int, int)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.create
to return a DebugGraphics object.
create(long)
- Method in class java.util.random.
RandomGeneratorFactory
Create an instance of
RandomGenerator
based on
algorithm
chosen
 providing a starting long seed.
create(ParameterBlock, RenderingHints)
- Method in interface java.awt.image.renderable.
RenderedImageFactory
Creates a RenderedImage representing the results of an imaging
 operation (or chain of operations) for a given ParameterBlock and
 RenderingHints.
create(RenderContext, ParameterBlock)
- Method in interface java.awt.image.renderable.
ContextualRenderedImageFactory
Creates a rendering, given a RenderContext and a ParameterBlock
 containing the operation's sources and parameters.
create(Reader)
- Static method in class jdk.jfr.
Configuration
Reads a configuration from a character stream.
create(Class<T>, Object, String)
- Static method in class java.beans.
EventHandler
Creates an implementation of
listenerInterface
in which
all
of the methods in the listener interface apply
 the handler's
action
to the
target
.
create(Class<T>, Object, String, String)
- Static method in class java.beans.
EventHandler
/**
 Creates an implementation of
listenerInterface
in which
all
of the methods pass the value of the event
 expression,
eventPropertyName
, to the final method in the
 statement,
action
, which is applied to the
target
.
create(Class<T>, Object, String, String, String)
- Static method in class java.beans.
EventHandler
Creates an implementation of
listenerInterface
in which
 the method named
listenerMethodName
passes the value of the event expression,
eventPropertyName
,
 to the final method in the statement,
action
, which
 is applied to the
target
.
create(String)
- Static method in class java.net.
URI
Creates a URI by parsing the given string.
create(InetSocketAddress, int)
- Static method in class com.sun.net.httpserver.
HttpServer
Create a
HttpServer
instance which will bind to the
 specified
InetSocketAddress
(IP address and port number).
create(InetSocketAddress, int)
- Static method in class com.sun.net.httpserver.
HttpsServer
Create a
HttpsServer
instance which will bind to the specified
InetSocketAddress
(IP address and port number).
create(InetSocketAddress, int, String, HttpHandler, Filter...)
- Static method in class com.sun.net.httpserver.
HttpServer
Creates an
HttpServer
instance with an initial context.
create(InetSocketAddress, int, String, HttpHandler, Filter...)
- Static method in class com.sun.net.httpserver.
HttpsServer
Creates an
HttpsServer
instance with an initial context.
create(Path)
- Static method in class jdk.jfr.
Configuration
Reads a configuration from a file.
create(ThreadFactory)
- Static method in class java.lang.ref.
Cleaner
Returns a new
Cleaner
using a
Thread
from the
ThreadFactory
.
create(List<AnnotationElement>, List<ValueDescriptor>)
- Static method in class jdk.jfr.
EventFactory
Creates an
EventFactory
object.
create(Locale)
- Static method in class java.util.
FormatProcessor
PREVIEW
Create a new
FormatProcessor
PREVIEW
using the specified locale.
create(DefaultStyledDocument.ElementSpec[])
- Method in class javax.swing.text.
DefaultStyledDocument
Initialize the document to reflect the given element
 structure (i.e. the structure reported by the
getDefaultRootElement
method.
create(DefaultStyledDocument.ElementSpec[])
- Method in class javax.swing.text.html.
HTMLDocument
Replaces the contents of the document with the given
 element specifications.
create(Element)
- Method in class javax.swing.plaf.basic.
BasicPasswordFieldUI
Creates a view (PasswordView) for an element.
create(Element)
- Method in class javax.swing.plaf.basic.
BasicTextAreaUI
Creates a view for an element.
create(Element)
- Method in class javax.swing.plaf.basic.
BasicTextFieldUI
Creates a view for an element.
create(Element)
- Method in class javax.swing.plaf.basic.
BasicTextUI
Creates a view for an element.
create(Element)
- Method in class javax.swing.plaf.synth.
SynthPasswordFieldUI
Creates a view (PasswordView) for an element.
create(Element)
- Method in class javax.swing.text.html.
HTMLEditorKit.HTMLFactory
Creates a view from an element.
create(Element)
- Method in interface javax.swing.text.
ViewFactory
Creates a view from the given structural element of a
 document.
create(Element, int, int)
- Method in class javax.swing.plaf.basic.
BasicTextUI
Creates a view for an element.
CREATE
- Enum constant in enum class java.nio.file.
StandardOpenOption
Create a new file if it does not exist.
CREATE_NEW
- Enum constant in enum class java.nio.file.
StandardOpenOption
Create a new file, failing if the file already exists.
createAccessWatchpointRequest(Field)
- Method in interface com.sun.jdi.request.
EventRequestManager
Creates a new disabled watchpoint which watches accesses to the
 specified field.
createActionChangeListener(JButton)
- Method in class javax.swing.
JToolBar
Returns a properly configured
PropertyChangeListener
which updates the control as changes to the
Action
occur,
 or
null
if the default
 property change listener for the control is desired.
createActionChangeListener(JMenuItem)
- Method in class javax.swing.
JMenu
Returns a properly configured
PropertyChangeListener
which updates the control as changes to the
Action
occur.
createActionChangeListener(JMenuItem)
- Method in class javax.swing.
JPopupMenu
Returns a properly configured
PropertyChangeListener
which updates the control as changes to the
Action
occur.
createActionComponent(Action)
- Method in class javax.swing.
JMenu
Factory method which creates the
JMenuItem
for
Action
s added to the
JMenu
.
createActionComponent(Action)
- Method in class javax.swing.
JPopupMenu
Factory method which creates the
JMenuItem
for
Actions
added to the
JPopupMenu
.
createActionComponent(Action)
- Method in class javax.swing.
JToolBar
Factory method which creates the
JButton
for
Action
s added to the
JToolBar
.
createActionListener()
- Method in class javax.swing.
AbstractButton
Returns
ActionListener
that is added to model.
createActionMap()
- Method in class javax.swing.plaf.metal.
MetalFileChooserUI
Constructs an instance of
ActionMap
.
createActionPropertyChangeListener(Action)
- Method in class javax.swing.
AbstractButton
Creates and returns a
PropertyChangeListener
that is
 responsible for listening for changes from the specified
Action
and updating the appropriate properties.
createActionPropertyChangeListener(Action)
- Method in class javax.swing.
JComboBox
Creates and returns a
PropertyChangeListener
that is
 responsible for listening for changes from the specified
Action
and updating the appropriate properties.
createActionPropertyChangeListener(Action)
- Method in class javax.swing.
JTextField
Creates and returns a
PropertyChangeListener
that is
 responsible for listening for changes from the specified
Action
and updating the appropriate properties.
createActions()
- Method in class javax.swing.plaf.basic.
BasicInternalFrameTitlePane
Creates actions.
createArrayForType(int, int)
- Static method in class javax.imageio.plugins.tiff.
TIFFField
Creates an array appropriate for the indicated data type.
createArrayOf(String, Object[])
- Method in interface java.sql.
Connection
Factory method for creating Array objects.
createArrowButton()
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI
Creates a button which will be used as the control to show or hide
 the popup portion of the combo box.
createArrowButtonListener()
- Method in class javax.swing.plaf.basic.
BasicScrollBarUI
Creates an arrow button listener.
createAttribute(String)
- Method in interface org.w3c.dom.
Document
Creates an
Attr
of the given name.
createAttribute(String, String)
- Method in class javax.xml.stream.
XMLEventFactory
Create a new Attribute
createAttribute(String, String, String, String)
- Method in class javax.xml.stream.
XMLEventFactory
Create a new Attribute
createAttribute(QName, String)
- Method in class javax.xml.stream.
XMLEventFactory
Create a new Attribute
createAttributeNS(String, String)
- Method in interface org.w3c.dom.
Document
Creates an attribute of the given qualified name and namespace URI.
createAudioAction(Object)
- Method in class javax.swing.plaf.basic.
BasicLookAndFeel
Creates and returns an
Action
used to play a sound.
createBackBuffers(int)
- Method in class java.awt.
Component.BltBufferStrategy
Creates the back buffers
createBanded(ColorSpace, int[], int[], int, boolean, boolean)
- Static method in class javax.imageio.
ImageTypeSpecifier
Returns a specifier for a banded image format that will use a
ComponentColorModel
and a
BandedSampleModel
to store each channel in a
 separate array.
createBandedRaster(int, int, int, int, int[], int[], Point)
- Static method in class java.awt.image.
Raster
Creates a Raster based on a BandedSampleModel with the
 specified data type, width, height, scanline stride, bank
 indices and band offsets.
createBandedRaster(int, int, int, int, Point)
- Static method in class java.awt.image.
Raster
Creates a Raster based on a BandedSampleModel with the
 specified data type, width, height, and number of bands.
createBandedRaster(DataBuffer, int, int, int, int[], int[], Point)
- Static method in class java.awt.image.
Raster
Creates a Raster based on a BandedSampleModel with the
 specified DataBuffer, width, height, scanline stride, bank
 indices, and band offsets.
createBaselineGroup(boolean, boolean)
- Method in class javax.swing.
GroupLayout
Creates and returns a
ParallelGroup
that aligns its
 elements along the baseline.
createBCSChild(Object, Object)
- Method in class java.beans.beancontext.
BeanContextServicesSupport
Subclasses can override this method to insert their own subclass
 of Child without having to override add() or the other Collection
 methods that add children to the set.
createBCSChild(Object, Object)
- Method in class java.beans.beancontext.
BeanContextSupport
Subclasses can override this method to insert their own subclass
 of Child without having to override add() or the other Collection
 methods that add children to the set.
createBCSSServiceProvider(Class<?>, BeanContextServiceProvider)
- Method in class java.beans.beancontext.
BeanContextServicesSupport
subclasses can override this method to create new subclasses of
 BCSSServiceProvider without having to override addService() in
 order to instantiate.
createBevelBorder(int)
- Static method in class javax.swing.
BorderFactory
Creates a beveled border of the specified type, using
 brighter shades of the component's current background color
 for highlighting, and darker shading for shadows.
createBevelBorder(int, Color, Color)
- Static method in class javax.swing.
BorderFactory
Creates a beveled border of the specified type, using
 the specified highlighting and shadowing.
createBevelBorder(int, Color, Color, Color, Color)
- Static method in class javax.swing.
BorderFactory
Creates a beveled border of the specified type, using
 the specified colors for the inner and outer highlight
 and shadow areas.
createBindings()
- Method in interface javax.script.
ScriptEngine
Returns an uninitialized
Bindings
.
createBlackLineBorder()
- Static method in class javax.swing.border.
LineBorder
Convenience method for getting the Color.black LineBorder of thickness 1.
createBlob()
- Method in interface java.sql.
Connection
Constructs an object that implements the
Blob
interface.
createBorderListener(JInternalFrame)
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI
Creates the border listener.
createBorderListener(JInternalFrame)
- Method in class javax.swing.plaf.metal.
MetalInternalFrameUI
Returns the
MouseInputAdapter
that will be installed
 on the TitlePane.
createBranchElement(Element, AttributeSet)
- Method in class javax.swing.text.
AbstractDocument
Creates a document branch element, that can contain other elements.
createBranchElement(Element, AttributeSet)
- Method in class javax.swing.text.html.
HTMLDocument
Creates a document branch element, that can contain other elements.
createBreakpointRequest(Location)
- Method in interface com.sun.jdi.request.
EventRequestManager
Creates a new disabled
BreakpointRequest
.
createBufferedImage(int, int)
- Method in class javax.imageio.
ImageTypeSpecifier
Creates a
BufferedImage
with a given width and
 height according to the specification embodied in this object.
createBuffers(int, BufferCapabilities)
- Method in class java.awt.
Component.FlipBufferStrategy
Creates one or more complex, flipping buffers with the given
 capabilities.
createBufferStrategy(int)
- Method in class java.awt.
Canvas
Creates a new strategy for multi-buffering on this component.
createBufferStrategy(int)
- Method in class java.awt.
Window
Creates a new strategy for multi-buffering on this component.
createBufferStrategy(int, BufferCapabilities)
- Method in class java.awt.
Canvas
Creates a new strategy for multi-buffering on this component with the
 required buffer capabilities.
createBufferStrategy(int, BufferCapabilities)
- Method in class java.awt.
Window
Creates a new strategy for multi-buffering on this component with the
 required buffer capabilities.
createButtonActionListener(int)
- Method in class javax.swing.plaf.basic.
BasicOptionPaneUI
Constructs a new instance of a
ButtonActionListener
.
createButtonArea()
- Method in class javax.swing.plaf.basic.
BasicOptionPaneUI
Creates and returns a
Container
containing the buttons.
createButtonListener(AbstractButton)
- Method in class javax.swing.plaf.basic.
BasicButtonUI
Returns a new instance of
BasicButtonListener
.
createButtons()
- Method in class javax.swing.plaf.basic.
BasicInternalFrameTitlePane
Creates buttons.
createCachedRowSet()
- Method in interface javax.sql.rowset.
RowSetFactory
Creates a new instance of a CachedRowSet.
createCaption()
- Method in interface org.w3c.dom.html.
HTMLTableElement
Create a new table caption object or return an existing one.
createCaret()
- Method in class javax.swing.plaf.basic.
BasicTextUI
Creates the object to use for a caret.
createCaret()
- Method in class javax.swing.text.
DefaultEditorKit
Fetches a caret that can navigate through views
 produced by the associated ViewFactory.
createCaret()
- Method in class javax.swing.text.
EditorKit
Fetches a caret that can navigate through views
 produced by the associated ViewFactory.
createCData(String)
- Method in class javax.xml.stream.
XMLEventFactory
Create a Characters event with the CData flag set to true
createCDATASection(String)
- Method in interface org.w3c.dom.
Document
Creates a
CDATASection
node whose value is the specified
 string.
createCellEditorListener()
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Creates a listener to handle events from the current editor.
createCellRendererPane()
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Returns the renderer pane that renderer components are placed in.
createChangeListener()
- Method in class javax.swing.
AbstractButton
Subclasses that want to handle
ChangeEvents
differently
 can override this to return another
ChangeListener
implementation.
createChangeListener()
- Method in class javax.swing.
JProgressBar
Subclasses that want to handle change events
 from the model differently
 can override this to return
 an instance of a custom
ChangeListener
implementation.
createChangeListener()
- Method in class javax.swing.
JSlider
Subclasses that want to handle
ChangeEvent
s
 from the model differently
 can override this to return
 an instance of a custom
ChangeListener
implementation.
createChangeListener()
- Method in class javax.swing.
JTabbedPane
Subclasses that want to handle
ChangeEvents
differently
 can override this to return a subclass of
ModelListener
or
 another
ChangeListener
implementation.
createChangeListener()
- Method in class javax.swing.plaf.basic.
BasicMenuBarUI
Returns an instance of
ChangeListener
.
createChangeListener()
- Method in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Creates a change listener.
createChangeListener(JComponent)
- Method in class javax.swing.plaf.basic.
BasicMenuUI
Returns an instance of
ChangeListener
.
createChangeListener(JSlider)
- Method in class javax.swing.plaf.basic.
BasicSliderUI
Creates a change listener.
createCharacters(String)
- Method in class javax.xml.stream.
XMLEventFactory
Create a Characters event, this method does not check if the content
 is all whitespace.
createChild(int, int, int, int, int, int, int[])
- Method in class java.awt.image.
Raster
Returns a new Raster which shares all or part of this Raster's
 DataBuffer.
createChildren(DefaultMutableTreeNode, Object)
- Static method in class javax.swing.
JTree.DynamicUtilTreeNode
Adds to parent all the children in
children
.
createChildState(View)
- Method in class javax.swing.text.
AsyncBoxView
New ChildState records are created through
 this method to allow subclasses the extend
 the ChildState records to do/hold more.
createClassFile(CharSequence, Element...)
- Method in interface javax.annotation.processing.
Filer
Creates a new class file, and returns an object to allow
 writing to it.
createClassPrepareRequest()
- Method in interface com.sun.jdi.request.
EventRequestManager
Creates a new disabled
ClassPrepareRequest
.
createClassUnloadRequest()
- Method in interface com.sun.jdi.request.
EventRequestManager
Creates a new disabled
ClassUnloadRequest
.
createClob()
- Method in interface java.sql.
Connection
Constructs an object that implements the
Clob
interface.
createComment(String)
- Method in class javax.xml.stream.
XMLEventFactory
Create a comment.
createComment(String)
- Method in interface org.w3c.dom.
Document
Creates a
Comment
node given the specified string.
createCompatibleDestImage(BufferedImage, ColorModel)
- Method in class java.awt.image.
AffineTransformOp
Creates a zeroed destination image with the correct size and number of
 bands.
createCompatibleDestImage(BufferedImage, ColorModel)
- Method in interface java.awt.image.
BufferedImageOp
Creates a zeroed destination image with the correct size and number of
 bands.
createCompatibleDestImage(BufferedImage, ColorModel)
- Method in class java.awt.image.
ColorConvertOp
Creates a zeroed destination image with the correct size and number of
 bands, given this source.
createCompatibleDestImage(BufferedImage, ColorModel)
- Method in class java.awt.image.
ConvolveOp
Creates a zeroed destination image with the correct size and number
 of bands.
createCompatibleDestImage(BufferedImage, ColorModel)
- Method in class java.awt.image.
LookupOp
Creates a zeroed destination image with the correct size and number of
 bands.
createCompatibleDestImage(BufferedImage, ColorModel)
- Method in class java.awt.image.
RescaleOp
Creates a zeroed destination image with the correct size and number of
 bands.
createCompatibleDestRaster(Raster)
- Method in class java.awt.image.
AffineTransformOp
Creates a zeroed destination
Raster
with the correct size
 and number of bands.
createCompatibleDestRaster(Raster)
- Method in class java.awt.image.
BandCombineOp
Creates a zeroed destination
Raster
with the correct size
 and number of bands.
createCompatibleDestRaster(Raster)
- Method in class java.awt.image.
ColorConvertOp
Creates a zeroed destination Raster with the correct size and number of
 bands, given this source.
createCompatibleDestRaster(Raster)
- Method in class java.awt.image.
ConvolveOp
Creates a zeroed destination Raster with the correct size and number
 of bands, given this source.
createCompatibleDestRaster(Raster)
- Method in class java.awt.image.
LookupOp
Creates a zeroed-destination
Raster
with the
 correct size and number of bands, given this source.
createCompatibleDestRaster(Raster)
- Method in interface java.awt.image.
RasterOp
Creates a zeroed destination Raster with the correct size and number of
 bands.
createCompatibleDestRaster(Raster)
- Method in class java.awt.image.
RescaleOp
Creates a zeroed-destination
Raster
with the correct
 size and number of bands, given this source.
createCompatibleImage(int, int)
- Method in class java.awt.
GraphicsConfiguration
Returns a
BufferedImage
with a data layout and color model
 compatible with this
GraphicsConfiguration
.
createCompatibleImage(int, int, int)
- Method in class java.awt.
GraphicsConfiguration
Returns a
BufferedImage
that supports the specified
 transparency and has a data layout and color model
 compatible with this
GraphicsConfiguration
.
createCompatibleSampleModel(int, int)
- Method in class java.awt.image.
BandedSampleModel
Creates a new BandedSampleModel with the specified
 width and height.
createCompatibleSampleModel(int, int)
- Method in class java.awt.image.
ColorModel
Creates a
SampleModel
with the specified width and
 height that has a data layout compatible with this
ColorModel
.
createCompatibleSampleModel(int, int)
- Method in class java.awt.image.
ComponentColorModel
Creates a
SampleModel
with the specified width and height,
 that  has a data layout compatible with this
ColorModel
.
createCompatibleSampleModel(int, int)
- Method in class java.awt.image.
ComponentSampleModel
Creates a new
ComponentSampleModel
with the specified
 width and height.
createCompatibleSampleModel(int, int)
- Method in class java.awt.image.
IndexColorModel
Creates a
SampleModel
with the specified
 width and height that has a data layout compatible with
 this
ColorModel
.
createCompatibleSampleModel(int, int)
- Method in class java.awt.image.
MultiPixelPackedSampleModel
Creates a new
MultiPixelPackedSampleModel
with the
 specified width and height.
createCompatibleSampleModel(int, int)
- Method in class java.awt.image.
PackedColorModel
Creates a
SampleModel
with the specified width and
 height that has a data layout compatible with this
ColorModel
.
createCompatibleSampleModel(int, int)
- Method in class java.awt.image.
PixelInterleavedSampleModel
Creates a new PixelInterleavedSampleModel with the specified
 width and height.
createCompatibleSampleModel(int, int)
- Method in class java.awt.image.
SampleModel
Creates a SampleModel which describes data in this SampleModel's
  format, but with a different width and height.
createCompatibleSampleModel(int, int)
- Method in class java.awt.image.
SinglePixelPackedSampleModel
Creates a new SinglePixelPackedSampleModel with the specified
 width and height.
createCompatibleVolatileImage(int, int)
- Method in class java.awt.
GraphicsConfiguration
Returns a
VolatileImage
with a data layout and color model
 compatible with this
GraphicsConfiguration
.
createCompatibleVolatileImage(int, int, int)
- Method in class java.awt.
GraphicsConfiguration
Returns a
VolatileImage
with a data layout and color model
 compatible with this
GraphicsConfiguration
.
createCompatibleVolatileImage(int, int, ImageCapabilities)
- Method in class java.awt.
GraphicsConfiguration
Returns a
VolatileImage
with a data layout and color model
 compatible with this
GraphicsConfiguration
, using
 the specified image capabilities.
createCompatibleVolatileImage(int, int, ImageCapabilities, int)
- Method in class java.awt.
GraphicsConfiguration
Returns a
VolatileImage
with a data layout and color model
 compatible with this
GraphicsConfiguration
, using
 the specified image capabilities and transparency value.
createCompatibleWritableRaster()
- Method in class java.awt.image.
Raster
Create a compatible WritableRaster the same size as this Raster with
 the same SampleModel and a new initialized DataBuffer.
createCompatibleWritableRaster(int, int)
- Method in class java.awt.image.
ColorModel
Creates a
WritableRaster
with the specified width and
 height that has a data layout (
SampleModel
) compatible
 with this
ColorModel
.
createCompatibleWritableRaster(int, int)
- Method in class java.awt.image.
ComponentColorModel
Creates a
WritableRaster
with the specified width and height,
 that  has a data layout (
SampleModel
) compatible with
 this
ColorModel
.
createCompatibleWritableRaster(int, int)
- Method in class java.awt.image.
DirectColorModel
Creates a
WritableRaster
with the specified width and
 height that has a data layout (
SampleModel
) compatible
 with this
ColorModel
.
createCompatibleWritableRaster(int, int)
- Method in class java.awt.image.
IndexColorModel
Creates a
WritableRaster
with the specified width
 and height that has a data layout (
SampleModel
)
 compatible with this
ColorModel
.
createCompatibleWritableRaster(int, int)
- Method in class java.awt.image.
Raster
Create a compatible WritableRaster with the specified size, a new
 SampleModel, and a new initialized DataBuffer.
createCompatibleWritableRaster(int, int, int, int)
- Method in class java.awt.image.
Raster
Create a compatible WritableRaster with the specified
 location (minX, minY) and size (width, height), a
 new SampleModel, and a new initialized DataBuffer.
createCompatibleWritableRaster(Rectangle)
- Method in class java.awt.image.
Raster
Create a compatible WritableRaster with location (minX, minY)
 and size (width, height) specified by rect, a
 new SampleModel, and a new initialized DataBuffer.
createComponent()
- Method in class javax.swing.text.
ComponentView
Create the component that is associated with
 this view.
createComponent()
- Method in class javax.swing.text.html.
FormView
Create the component.
createComponent()
- Method in class javax.swing.text.html.
ObjectView
Create the component.
createComponentListener()
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI
Creates a component listener.
createComponentListener()
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Creates and returns a new ComponentHandler.
createComponentListener(JSlider)
- Method in class javax.swing.plaf.basic.
BasicSliderUI
Creates a composite listener.
createCompoundBorder()
- Static method in class javax.swing.
BorderFactory
Creates a compound border with a
null
inside edge and a
null
outside edge.
createCompoundBorder(Border, Border)
- Static method in class javax.swing.
BorderFactory
Creates a compound border specifying the border objects to use
 for the outside and inside edges.
createCompoundEdit()
- Method in class javax.swing.undo.
UndoableEditSupport
Called only from
beginUpdate
.
createConnectionBuilder()
- Method in interface javax.sql.
DataSource
Create a new
ConnectionBuilder
instance
createContainer()
- Method in class javax.swing.tree.
DefaultTreeCellEditor
Creates the container to manage placement of
editingComponent
.
createContainerListener()
- Method in class javax.swing.plaf.basic.
BasicMenuBarUI
Returns an instance of
ContainerListener
.
createContainerListener()
- Method in class javax.swing.plaf.metal.
MetalToolBarUI
Creates a container listener that will be added to the JToolBar.
createContentHandler(String)
- Method in interface java.net.
ContentHandlerFactory
Creates a new
ContentHandler
to read an object from
 a
URLStreamHandler
.
createContentPane()
- Method in class javax.swing.
JRootPane
Called by the constructor methods to create the default
contentPane
.
createContext(byte[])
- Method in class org.ietf.jgss.
GSSManager
Factory method for creating a previously exported context.
createContext(ColorModel, ColorModel, RenderingHints)
- Method in class java.awt.
AlphaComposite
Creates a context for the compositing operation.
createContext(ColorModel, ColorModel, RenderingHints)
- Method in interface java.awt.
Composite
Creates a context containing state that is used to perform
 the compositing operation.
createContext(ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints)
- Method in class java.awt.
Color
Creates and returns a
PaintContext
used to
 generate a solid color field pattern.
createContext(ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints)
- Method in class java.awt.
GradientPaint
Creates and returns a
PaintContext
used to
 generate a linear color gradient pattern.
createContext(ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints)
- Method in class java.awt.
LinearGradientPaint
Creates and returns a
PaintContext
used to
 generate a linear color gradient pattern.
createContext(ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints)
- Method in interface java.awt.
Paint
Creates and returns a
PaintContext
used to
 generate the color pattern.
createContext(ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints)
- Method in class java.awt.
RadialGradientPaint
Creates and returns a
PaintContext
used to
 generate a circular radial color gradient pattern.
createContext(ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints)
- Method in class java.awt.
TexturePaint
Creates and returns a
PaintContext
used to
 generate a tiled image pattern.
createContext(String)
- Method in class com.sun.net.httpserver.
HttpServer
Creates a HttpContext without initially specifying a handler.
createContext(String, HttpHandler)
- Method in class com.sun.net.httpserver.
HttpServer
Creates a
HttpContext
.
createContext(GSSCredential)
- Method in class org.ietf.jgss.
GSSManager
Factory method for creating a context on the acceptor' side.
createContext(GSSName, Oid, GSSCredential, int)
- Method in class org.ietf.jgss.
GSSManager
Factory method for creating a context on the initiator's
 side.
createCopy()
- Method in interface javax.sql.rowset.
CachedRowSet
Creates a
RowSet
object that is a deep copy of the data in
 this
CachedRowSet
object.
createCopyNoConstraints()
- Method in interface javax.sql.rowset.
CachedRowSet
Creates a
CachedRowSet
object that is a deep copy of
 this
CachedRowSet
object's data but is independent of it.
createCopySchema()
- Method in interface javax.sql.rowset.
CachedRowSet
Creates a
CachedRowSet
object that is an empty copy of this
CachedRowSet
object.
createCredential(int)
- Method in class org.ietf.jgss.
GSSManager
Factory method for acquiring default credentials.
createCredential(GSSName, int, Oid[], int)
- Method in class org.ietf.jgss.
GSSManager
Factory method for acquiring credentials over a set of
 mechanisms.
createCredential(GSSName, int, Oid, int)
- Method in class org.ietf.jgss.
GSSManager
Factory method for acquiring a single mechanism credential.
createCSSStyleSheet(String, String)
- Method in interface org.w3c.dom.css.
DOMImplementationCSS
Creates a new
CSSStyleSheet
.
createCustomCursor(Image, Point, String)
- Method in class java.awt.
Toolkit
Creates a new custom cursor object.
createDashedBorder(Paint)
- Static method in class javax.swing.
BorderFactory
Creates a dashed border of the specified
paint
.
createDashedBorder(Paint, float, float)
- Static method in class javax.swing.
BorderFactory
Creates a dashed border of the specified
paint
,
 relative
length
, and relative
spacing
.
createDashedBorder(Paint, float, float, float, boolean)
- Static method in class javax.swing.
BorderFactory
Creates a dashed border of the specified
paint
,
thickness
,
 line shape, relative
length
, and relative
spacing
.
createDataBuffer()
- Method in class java.awt.image.
BandedSampleModel
Creates a DataBuffer that corresponds to this BandedSampleModel,
 The DataBuffer's data type, number of banks, and size
 will be consistent with this BandedSampleModel.
createDataBuffer()
- Method in class java.awt.image.
ComponentSampleModel
Creates a
DataBuffer
that corresponds to this
ComponentSampleModel
.
createDataBuffer()
- Method in class java.awt.image.
MultiPixelPackedSampleModel
Creates a
DataBuffer
that corresponds to this
MultiPixelPackedSampleModel
.
createDataBuffer()
- Method in class java.awt.image.
SampleModel
Creates a DataBuffer that corresponds to this SampleModel.
createDataBuffer()
- Method in class java.awt.image.
SinglePixelPackedSampleModel
Creates a DataBuffer that corresponds to this
 SinglePixelPackedSampleModel.
createDatagramSocketImpl()
- Method in interface java.net.
DatagramSocketImplFactory
Creates a new
DatagramSocketImpl
instance.
createDateTime(LocalDateTime, ZoneOffset, ZoneOffset)
- Method in enum class java.time.zone.
ZoneOffsetTransitionRule.TimeDefinition
Converts the specified local date-time to the local date-time actually
 seen on a wall clock.
createdCellEditor
- Variable in class javax.swing.plaf.basic.
BasicTreeUI
Set to true if editor that is currently in the tree was
 created by this instance.
createDecreaseButton(int)
- Method in class javax.swing.plaf.basic.
BasicScrollBarUI
Creates a decrease button.
createDecreaseButton(int)
- Method in class javax.swing.plaf.metal.
MetalScrollBarUI
Returns the view that represents the decrease view.
createDefaultCellEditor()
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Creates a default cell editor.
createDefaultCellRenderer()
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Returns the default cell renderer that is used to do the
 stamping of each node.
createDefaultChoosers()
- Method in class javax.swing.plaf.basic.
BasicColorChooserUI
Returns an array of default color choosers.
createDefaultColumnModel()
- Method in class javax.swing.
JTable
Returns the default column model object, which is
 a
DefaultTableColumnModel
.
createDefaultColumnModel()
- Method in class javax.swing.table.
JTableHeader
Returns the default column model object which is
  a
DefaultTableColumnModel
.
createDefaultColumnsFromModel()
- Method in class javax.swing.
JTable
Creates default columns for the table from
 the data model using the
getColumnCount
method
 defined in the
TableModel
interface.
createDefaultDataModel()
- Method in class javax.swing.
JTable
Returns the default table model object, which is
 a
DefaultTableModel
.
createDefaultDivider()
- Method in class javax.swing.plaf.basic.
BasicSplitPaneUI
Creates the default divider.
createDefaultDivider()
- Method in class javax.swing.plaf.metal.
MetalSplitPaneUI
Creates the default divider.
createDefaultDivider()
- Method in class javax.swing.plaf.synth.
SynthSplitPaneUI
Creates the default divider.
createDefaultDocument()
- Method in class javax.swing.text.
DefaultEditorKit
Creates an uninitialized text storage model (PlainDocument)
 that is appropriate for this type of editor.
createDefaultDocument()
- Method in class javax.swing.text.
EditorKit
Creates an uninitialized text storage model
 that is appropriate for this type of editor.
createDefaultDocument()
- Method in class javax.swing.text.html.
HTMLEditorKit
Create an uninitialized text storage model
 that is appropriate for this type of editor.
createDefaultDocument()
- Method in class javax.swing.text.
StyledEditorKit
Creates an uninitialized text storage model
 that is appropriate for this type of editor.
createDefaultDragGestureRecognizer(Component, int, DragGestureListener)
- Method in class java.awt.dnd.
DragSource
Creates a new
DragGestureRecognizer
that implements the default
 abstract subclass of
DragGestureRecognizer
for this
DragSource
,
 and sets the specified
Component
and
DragGestureListener
on the
 newly created object.
createDefaultEditorKit()
- Method in class javax.swing.
JEditorPane
Creates the default editor kit (
PlainEditorKit
) for when
 the component is first created.
createDefaultEditorKit()
- Method in class javax.swing.
JTextPane
Creates the
EditorKit
to use by default.
createDefaultEditors()
- Method in class javax.swing.
JTable
Creates default cell editors for objects, numbers, and boolean values.
createDefaultHeaderRenderer()
- Method in class javax.swing.table.
TableColumn
As of Java 2 platform v1.3, this method is not called by the
TableColumn
constructor.
createDefaultKeySelectionManager()
- Method in class javax.swing.
JComboBox
Returns an instance of the default key-selection manager.
createDefaultModel()
- Method in class javax.swing.
JTextArea
Creates the default implementation of the model
 to be used at construction if one isn't explicitly
 given.
createDefaultModel()
- Method in class javax.swing.
JTextField
Creates the default implementation of the model
 to be used at construction if one isn't explicitly
 given.
createDefaultNonContinuousLayoutDivider()
- Method in class javax.swing.plaf.basic.
BasicSplitPaneUI
Returns the default non continuous layout divider, which is an
 instance of
Canvas
that fills in the background with dark gray.
createDefaultRenderer()
- Method in class javax.swing.table.
JTableHeader
Returns a default renderer to be used when no header renderer
  is defined by a
TableColumn
.
createDefaultRenderers()
- Method in class javax.swing.
JTable
Creates default cell renderers for objects, numbers, doubles, dates,
 booleans, and icons.
createDefaultRendering()
- Method in interface java.awt.image.renderable.
RenderableImage
Returns a RenderedImage instance of this image with a default
 width and height in pixels.
createDefaultRendering()
- Method in class java.awt.image.renderable.
RenderableImageOp
Gets a RenderedImage instance of this image with a default
 width and height in pixels.
createDefaultRoot()
- Method in class javax.swing.text.
DefaultStyledDocument
Creates the root element to be used to represent the
 default document structure.
createDefaultRoot()
- Method in class javax.swing.text.html.
HTMLDocument
Creates the root element to be used to represent the
 default document structure.
createDefaultRoot()
- Method in class javax.swing.text.
PlainDocument
Creates the root element to be used to represent the
 default document structure.
createDefaultSelectionModel()
- Method in class javax.swing.
JTable
Returns the default selection model object, which is
 a
DefaultListSelectionModel
.
createDefaultTableHeader()
- Method in class javax.swing.
JTable
Returns the default table header object, which is
 a
JTableHeader
.
createDefaultTheme()
- Method in class javax.swing.plaf.metal.
MetalLookAndFeel
Ensures the current
MetalTheme
is
non-null
.
createDesktopManager()
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI
Creates the desktop manager.
createDetailsView(JFileChooser)
- Method in class javax.swing.plaf.metal.
MetalFileChooserUI
Constructs a details view.
createDialog(Component)
- Method in class javax.swing.
JFileChooser
Creates and returns a new
JDialog
wrapping
this
centered on the
parent
in the
parent
's frame.
createDialog(Component, String)
- Method in class javax.swing.
JOptionPane
Creates and returns a new
JDialog
wrapping
this
centered on the
parentComponent
in the
parentComponent
's frame.
createDialog(Component, String, boolean, JColorChooser, ActionListener, ActionListener)
- Static method in class javax.swing.
JColorChooser
Creates and returns a new dialog containing the specified
ColorChooser
pane along with "OK", "Cancel", and "Reset"
 buttons.
createDialog(String)
- Method in class javax.swing.
JOptionPane
Creates and returns a new parentless
JDialog
with the specified title.
createDirectories(Path, FileAttribute<?>...)
- Static method in class java.nio.file.
Files
Creates a directory by creating all nonexistent parent directories first.
createDirectory(Path, FileAttribute<?>...)
- Static method in class java.nio.file.
Files
Creates a new directory.
createDirectory(Path, FileAttribute<?>...)
- Method in class java.nio.file.spi.
FileSystemProvider
Creates a new directory.
createDirectoryComboBoxModel(JFileChooser)
- Method in class javax.swing.plaf.metal.
MetalFileChooserUI
Constructs a new instance of
DataModel
for
DirectoryComboBox
.
createDisabledImage(Image)
- Static method in class javax.swing.
GrayFilter
Creates a disabled image
createDockingListener()
- Method in class javax.swing.plaf.basic.
BasicToolBarUI
Returns an instance of
MouseInputListener
.
createDocument(String, String, DocumentType)
- Method in interface org.w3c.dom.
DOMImplementation
Creates a DOM Document object of the specified type with its document
 element.
createDocumentFragment()
- Method in interface org.w3c.dom.
Document
Creates an empty
DocumentFragment
object.
createDocumentType(String, String, String)
- Method in interface org.w3c.dom.
DOMImplementation
Creates an empty
DocumentType
node.
createDoubleClickListener(JFileChooser, JList<?>)
- Method in class javax.swing.plaf.basic.
BasicFileChooserUI
Creates a double click listener.
createDragGestureRecognizer(Class<T>, Component, int, DragGestureListener)
- Method in class java.awt.dnd.
DragSource
Creates a new
DragGestureRecognizer
that implements the specified
 abstract subclass of
DragGestureRecognizer
, and
 sets the specified
Component
and
DragGestureListener
on
 the newly created object.
createDragGestureRecognizer(Class<T>, DragSource, Component, int, DragGestureListener)
- Method in class java.awt.
Toolkit
Creates a concrete, platform dependent, subclass of the abstract
 DragGestureRecognizer class requested, and associates it with the
 DragSource, Component and DragGestureListener specified.
createDragSourceContext(DragGestureEvent, Cursor, Image, Point, Transferable, DragSourceListener)
- Method in class java.awt.dnd.
DragSource
Creates the
DragSourceContext
to handle the current drag
 operation.
createDragWindow(JToolBar)
- Method in class javax.swing.plaf.basic.
BasicToolBarUI
Returns an instance of
DragWindow
.
createdRenderer
- Variable in class javax.swing.plaf.basic.
BasicTreeUI
Set to true if the renderer that is currently in the tree was
 created by this instance.
createDropTargetAutoScroller(Component, Point)
- Method in class java.awt.dnd.
DropTarget
create an embedded autoscroller
createDropTargetContext()
- Method in class java.awt.dnd.
DropTarget
Creates the DropTargetContext associated with this DropTarget.
createDTD(String)
- Method in class javax.xml.stream.
XMLEventFactory
Create a document type definition event
 This string contains the entire document type declaration that matches
 the doctypedecl in the XML 1.0 specification
createDTD(DTD, String)
- Static method in class javax.swing.text.html.parser.
ParserDelegator
Recreates a DTD from an archived format with the specified
name
.
createEastPane(JInternalFrame)
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI
Creates the east pane.
createEditor()
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI
Creates the default editor that will be used in editable combo boxes.
createEditor()
- Method in class javax.swing.plaf.basic.
BasicSpinnerUI
This method is called by installUI to get the editor component
 of the
JSpinner
.
createEditor()
- Method in class javax.swing.plaf.synth.
SynthSpinnerUI
This method is called by installUI to get the editor component
 of the
JSpinner
.
createEditor(SpinnerModel)
- Method in class javax.swing.
JSpinner
This method is called by the constructors to create the
JComponent
that displays the current value of the sequence.
createEditorComponent()
- Method in class javax.swing.plaf.basic.
BasicComboBoxEditor
Creates the internal editor component.
createEditorKitForContentType(String)
- Static method in class javax.swing.
JEditorPane
Creates a handler for the given type from the default registry
 of editor kits.
createElement(String)
- Method in interface org.w3c.dom.
Document
Creates an element of the type specified.
createElementNS(String, String)
- Method in interface org.w3c.dom.
Document
Creates an element of the given qualified name and namespace URI.
createEmptyBorder()
- Static method in class javax.swing.
BorderFactory
Creates an empty border that takes up no space.
createEmptyBorder(int, int, int, int)
- Static method in class javax.swing.
BorderFactory
Creates an empty border that takes up space but which does
 no drawing, specifying the width of the top, left, bottom, and
 right sides.
createEmptyFrameIcon()
- Static method in class javax.swing.plaf.basic.
BasicIconFactory
Returns an empty frame icon.
createEndDocument()
- Method in class javax.xml.stream.
XMLEventFactory
Creates a new instance of an EndDocument event
createEndElement(String, String, String)
- Method in class javax.xml.stream.
XMLEventFactory
Create a new EndElement
createEndElement(String, String, String, Iterator<? extends Namespace>)
- Method in class javax.xml.stream.
XMLEventFactory
Create a new EndElement
createEndElement(QName, Iterator<? extends Namespace>)
- Method in class javax.xml.stream.
XMLEventFactory
Create a new EndElement
createEntityReference(String)
- Method in interface org.w3c.dom.
Document
Creates an
EntityReference
object.
createEntityReference(String, EntityDeclaration)
- Method in class javax.xml.stream.
XMLEventFactory
Creates a new instance of a EntityReference event
createEtchedBorder()
- Static method in class javax.swing.
BorderFactory
Creates a border with an "etched" look using
 the component's current background color for
 highlighting and shading.
createEtchedBorder(int)
- Static method in class javax.swing.
BorderFactory
Creates a border with an "etched" look using
 the component's current background color for
 highlighting and shading.
createEtchedBorder(int, Color, Color)
- Static method in class javax.swing.
BorderFactory
Creates a border with an "etched" look using
 the specified highlighting and shading colors.
createEtchedBorder(Color, Color)
- Static method in class javax.swing.
BorderFactory
Creates a border with an "etched" look using
 the specified highlighting and shading colors.
createEvent(String)
- Method in interface org.w3c.dom.events.
DocumentEvent
createExceptionRequest(ReferenceType, boolean, boolean)
- Method in interface com.sun.jdi.request.
EventRequestManager
Creates a new disabled
ExceptionRequest
.
createExpression(String, XPathNSResolver)
- Method in interface org.w3c.dom.xpath.
XPathEvaluator
Creates a parsed XPath expression with resolved namespaces.
createExtendedResponse(String, byte[], int, int)
- Method in interface javax.naming.ldap.
ExtendedRequest
Creates the response object that corresponds to this request.
createExtendedResponse(String, byte[], int, int)
- Method in class javax.naming.ldap.
StartTlsRequest
Creates an extended response object that corresponds to the
 LDAP StartTLS extended request.
createFile(Path, FileAttribute<?>...)
- Static method in class java.nio.file.
Files
Creates a new and empty file, failing if the file already exists.
createFileHandler(Path)
- Static method in class com.sun.net.httpserver.
SimpleFileServer
Creates a
file handler
that serves files from a given directory
 path (and its subdirectories).
createFileObject(File, String)
- Method in class javax.swing.filechooser.
FileSystemView
Returns a File object constructed in dir from the given filename.
createFileObject(String)
- Method in class javax.swing.filechooser.
FileSystemView
Returns a File object constructed from the given path string.
createFileServer(InetSocketAddress, Path, SimpleFileServer.OutputLevel)
- Static method in class com.sun.net.httpserver.
SimpleFileServer
Creates a
file server
that serves files from a given path.
createFileSystemRoot(File)
- Method in class javax.swing.filechooser.
FileSystemView
Creates a new
File
object for
f
with correct
 behavior for a file system root directory.
createFilter(String)
- Static method in class java.io.
ObjectInputFilter.Config
Returns an ObjectInputFilter from a string of patterns.
createFilterComboBoxModel()
- Method in class javax.swing.plaf.metal.
MetalFileChooserUI
Constructs a
DataModel
for types
ComboBox
.
createFilterComboBoxRenderer()
- Method in class javax.swing.plaf.metal.
MetalFileChooserUI
Constructs a
Renderer
for types
ComboBox
.
createFilteredReader(XMLEventReader, EventFilter)
- Method in class javax.xml.stream.
XMLInputFactory
Create a filtered event reader that wraps the filter around the event reader
createFilteredReader(XMLStreamReader, StreamFilter)
- Method in class javax.xml.stream.
XMLInputFactory
Create a filtered reader that wraps the filter around the reader
createFilteredRowSet()
- Method in interface javax.sql.rowset.
RowSetFactory
Creates a new instance of a FilteredRowSet.
createFloatingFrame(JToolBar)
- Method in class javax.swing.plaf.basic.
BasicToolBarUI
Deprecated, for removal: This API element is subject to removal in a future version.
It is recommended that
BasicToolBarUI.createFloatingWindow(JToolBar)
be used instead
createFloatingWindow(JToolBar)
- Method in class javax.swing.plaf.basic.
BasicToolBarUI
Creates a window which contains the toolbar after it has been
 dragged out from its container
createFocusListener()
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI
Creates a
FocusListener
which will be added to the combo box.
createFocusListener()
- Method in class javax.swing.plaf.basic.
BasicListUI
Returns an instance of
FocusListener
.
createFocusListener()
- Method in class javax.swing.plaf.basic.
BasicSplitPaneUI
Creates a
FocusListener
for the
JSplitPane
UI.
createFocusListener()
- Method in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Creates a focus listener.
createFocusListener()
- Method in class javax.swing.plaf.basic.
BasicTableUI
Creates the focus listener for handling keyboard navigation in the
JTable
.
createFocusListener()
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Creates a listener that is responsible for updating the display
 when focus is lost/gained.
createFocusListener(JSlider)
- Method in class javax.swing.plaf.basic.
BasicSliderUI
Creates a focus listener.
createFont(int, File)
- Static method in class java.awt.
Font
Returns a new
Font
using the specified font type
 and the specified font file.
createFont(int, InputStream)
- Static method in class java.awt.
Font
Returns a new
Font
using the specified font type
 and input data.
createFonts(File)
- Static method in class java.awt.
Font
Returns a new array of
Font
decoded from the specified file.
createFonts(InputStream)
- Static method in class java.awt.
Font
Returns a new array of
Font
decoded from the specified stream.
createFragment(int, int)
- Method in class javax.swing.text.
GlyphView
Creates a view that represents a portion of the element.
createFragment(int, int)
- Method in class javax.swing.text.
View
Creates a view that represents a portion of the element.
createFrameListener()
- Method in class javax.swing.plaf.basic.
BasicToolBarUI
Constructs a new instance of
WindowListener
.
createFromBufferedImageType(int)
- Static method in class javax.imageio.
ImageTypeSpecifier
Returns an
ImageTypeSpecifier
that encodes
 one of the standard
BufferedImage
types
 (other than
TYPE_CUSTOM
).
createFromMetadata(IIOMetadata)
- Static method in class javax.imageio.plugins.tiff.
TIFFDirectory
Creates a
TIFFDirectory
instance from the contents of
 an image metadata object.
createFromMetadataNode(TIFFTagSet, Node)
- Static method in class javax.imageio.plugins.tiff.
TIFFField
Creates a
TIFFField
from a TIFF native image
 metadata node.
createFromRenderedImage(RenderedImage)
- Static method in class javax.imageio.
ImageTypeSpecifier
Returns an
ImageTypeSpecifier
that encodes the
 layout of a
RenderedImage
(which may be a
BufferedImage
).
createGlassPane()
- Method in class javax.swing.
JLayer
Called by the constructor methods to create a default
glassPane
.
createGlassPane()
- Method in class javax.swing.
JRootPane
Called by the constructor methods to create the default
glassPane
.
createGlassPaneDispatcher()
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI
Creates a
GlassPaneDispatcher
.
createGlue()
- Static method in class javax.swing.
Box
Creates an invisible "glue" component
 that can be useful in a Box
 whose visible components have a maximum width
 (for a horizontal box)
 or height (for a vertical box).
createGlyphVector(FontRenderContext, char[])
- Method in class java.awt.
Font
Creates a
GlyphVector
by
 mapping characters to glyphs one-to-one based on the
 Unicode cmap in this
Font
.
createGlyphVector(FontRenderContext, int[])
- Method in class java.awt.
Font
Creates a
GlyphVector
by
 mapping characters to glyphs one-to-one based on the
 Unicode cmap in this
Font
.
createGlyphVector(FontRenderContext, String)
- Method in class java.awt.
Font
Creates a
GlyphVector
by
 mapping characters to glyphs one-to-one based on the
 Unicode cmap in this
Font
.
createGlyphVector(FontRenderContext, CharacterIterator)
- Method in class java.awt.
Font
Creates a
GlyphVector
by
 mapping the specified characters to glyphs one-to-one based on the
 Unicode cmap in this
Font
.
createGraphics()
- Method in class java.awt.image.
BufferedImage
Creates a
Graphics2D
, which can be used to draw into
 this
BufferedImage
.
createGraphics()
- Method in class java.awt.image.
VolatileImage
Creates a
Graphics2D
, which can be used to draw into
 this
VolatileImage
.
createGraphics()
- Method in class java.awt.
SplashScreen
Creates a graphics context (as a
Graphics2D
object) for the splash
 screen overlay image, which allows you to draw over the splash screen.
createGraphics(BufferedImage)
- Method in class java.awt.
GraphicsEnvironment
Returns a
Graphics2D
object for rendering into the
 specified
BufferedImage
.
createGrayLineBorder()
- Static method in class javax.swing.border.
LineBorder
Convenience method for getting the Color.gray LineBorder of thickness 1.
createGrayscale(int, int, boolean)
- Static method in class javax.imageio.
ImageTypeSpecifier
Returns a specifier for a grayscale image format that will pack
 pixels of the given bit depth into array elements of
 the specified data type.
createGrayscale(int, int, boolean, boolean)
- Static method in class javax.imageio.
ImageTypeSpecifier
Returns a specifier for a grayscale plus alpha image format
 that will pack pixels of the given bit depth into array
 elements of the specified data type.
createHandler(Object, ExceptionListener, ClassLoader)
- Static method in class java.beans.
XMLDecoder
Creates a new handler for SAX parser
 that can be used to parse embedded XML archives
 created by the
XMLEncoder
class.
createHighlighter()
- Method in class javax.swing.plaf.basic.
BasicTextUI
Creates the object to use for adding highlights.
createHorizontalBox()
- Static method in class javax.swing.
Box
Creates a
Box
that displays its components
 from left to right.
createHorizontalGlue()
- Static method in class javax.swing.
Box
Creates a horizontal glue component.
createHorizontalScrollBar()
- Method in class javax.swing.
JScrollPane
Returns a
JScrollPane.ScrollBar
by default.
createHorizontalStrut(int)
- Static method in class javax.swing.
Box
Creates an invisible, fixed-width component.
createHSBChangeListener()
- Method in class javax.swing.plaf.basic.
BasicScrollPaneUI
Returns an instance of horizontal scroll bar
ChangeListener
.
createHTMLDocument(String)
- Method in interface org.w3c.dom.html.
HTMLDOMImplementation
Creates an
HTMLDocument
object with the minimal tree made
 of the following elements:
HTML
,
HEAD
,
TITLE
, and
BODY
.
createHTMLView(JComponent, String)
- Static method in class javax.swing.plaf.basic.
BasicHTML
Create an html renderer for the given component and
 string of html.
createHttpServer(InetSocketAddress, int)
- Method in class com.sun.net.httpserver.spi.
HttpServerProvider
creates a HttpServer from this provider
createHttpsServer(InetSocketAddress, int)
- Method in class com.sun.net.httpserver.spi.
HttpServerProvider
creates a HttpsServer from this provider
createIgnorableSpace(String)
- Method in class javax.xml.stream.
XMLEventFactory
Create an ignorable space
createImage(byte[])
- Method in class java.awt.
Toolkit
Creates an image which decodes the image stored in the specified
 byte array.
createImage(byte[], int, int)
- Method in class java.awt.
Toolkit
Creates an image which decodes the image stored in the specified
 byte array, and at the specified offset and length.
createImage(int, int)
- Method in class java.awt.
Component
Creates an off-screen drawable image to be used for double buffering.
createImage(ImageProducer)
- Method in class java.awt.
Component
Creates an image from the specified image producer.
createImage(ImageProducer)
- Method in class java.awt.
Toolkit
Creates an image with the specified image producer.
createImage(String)
- Method in class java.awt.
Toolkit
Returns an image which gets pixel data from the specified file.
createImage(URL)
- Method in class java.awt.
Toolkit
Returns an image which gets pixel data from the specified URL.
createImageInputStream(Object)
- Static method in class javax.imageio.
ImageIO
Returns an
ImageInputStream
that will take its
 input from the given
Object
.
createImageOutputStream(Object)
- Static method in class javax.imageio.
ImageIO
Returns an
ImageOutputStream
that will send its
 output to the given
Object
.
createIncreaseButton(int)
- Method in class javax.swing.plaf.basic.
BasicScrollBarUI
Creates an increase button.
createIncreaseButton(int)
- Method in class javax.swing.plaf.metal.
MetalScrollBarUI
Returns the view that represents the increase view.
createIndexed(byte[], byte[], byte[], byte[], int, int)
- Static method in class javax.imageio.
ImageTypeSpecifier
Returns a specifier for an indexed-color image format that will pack
 index values of the given bit depth into array elements of
 the specified data type.
createInitialContextFactory(Hashtable<?, ?>)
- Method in interface javax.naming.spi.
InitialContextFactoryBuilder
Creates an initial context factory using the specified
 environment.
createInputAttributes(Element, MutableAttributeSet)
- Method in class javax.swing.text.html.
HTMLEditorKit
Copies the key/values in
element
s AttributeSet into
set
.
createInputAttributes(Element, MutableAttributeSet)
- Method in class javax.swing.text.
StyledEditorKit
Copies the key/values in
element
s AttributeSet into
set
.
createInputMethod()
- Method in interface java.awt.im.spi.
InputMethodDescriptor
Creates a new instance of the corresponding input method.
createInputMethodJFrame(String, boolean)
- Method in interface java.awt.im.spi.
InputMethodContext
Creates a top-level Swing JFrame for use by the input method.
createInputMethodWindow(String, boolean)
- Method in interface java.awt.im.spi.
InputMethodContext
Creates a top-level window for use by the input method.
createInputStreamInstance(Object)
- Method in class javax.imageio.spi.
ImageInputStreamSpi
Returns an instance of the
ImageInputStream
implementation associated with this service provider.
createInputStreamInstance(Object, boolean, File)
- Method in class javax.imageio.spi.
ImageInputStreamSpi
Returns an instance of the
ImageInputStream
implementation associated with this service provider.
createInterleaved(ColorSpace, int[], int, boolean, boolean)
- Static method in class javax.imageio.
ImageTypeSpecifier
Returns a specifier for an interleaved image format that will
 use a
ComponentColorModel
and a
PixelInterleavedSampleModel
to store each pixel
 component in a separate byte, short, or int.
createInterleavedRaster(int, int, int, int, int, int[], Point)
- Static method in class java.awt.image.
Raster
Creates a Raster based on a PixelInterleavedSampleModel with the
 specified data type, width, height, scanline stride, pixel
 stride, and band offsets.
createInterleavedRaster(int, int, int, int, Point)
- Static method in class java.awt.image.
Raster
Creates a Raster based on a PixelInterleavedSampleModel with the
 specified data type, width, height, and number of bands.
createInterleavedRaster(DataBuffer, int, int, int, int, int[], Point)
- Static method in class java.awt.image.
Raster
Creates a Raster based on a PixelInterleavedSampleModel with the
 specified DataBuffer, width, height, scanline stride, pixel
 stride, and band offsets.
createInternalFrame(Component, String)
- Method in class javax.swing.
JOptionPane
Creates and returns an instance of
JInternalFrame
.
createInternalFrameListener()
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI
Creates the internal frame listener.
createIntersection(Rectangle2D)
- Method in class java.awt.geom.
Rectangle2D
Returns a new
Rectangle2D
object representing the
 intersection of this
Rectangle2D
with the specified
Rectangle2D
.
createIntersection(Rectangle2D)
- Method in class java.awt.geom.
Rectangle2D.Double
Returns a new
Rectangle2D
object representing the
 intersection of this
Rectangle2D
with the specified
Rectangle2D
.
createIntersection(Rectangle2D)
- Method in class java.awt.geom.
Rectangle2D.Float
Returns a new
Rectangle2D
object representing the
 intersection of this
Rectangle2D
with the specified
Rectangle2D
.
createIntersection(Rectangle2D)
- Method in class java.awt.
Rectangle
Returns a new
Rectangle2D
object representing the
 intersection of this
Rectangle2D
with the specified
Rectangle2D
.
createInverse()
- Method in class java.awt.geom.
AffineTransform
Returns an
AffineTransform
object representing the
 inverse transformation.
createItemListener()
- Method in class javax.swing.
AbstractButton
Returns
ItemListener
that is added to model.
createItemListener()
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI
Creates an
ItemListener
which will be added to the
 combo box.
createItemListener()
- Method in class javax.swing.plaf.basic.
BasicComboPopup
Creates an
ItemListener
which will be added to the
 combo box.
createJdbcRowSet()
- Method in interface javax.sql.rowset.
RowSetFactory
Creates a new instance of a JdbcRowSet.
createJoinRowSet()
- Method in interface javax.sql.rowset.
RowSetFactory
Creates a new instance of a JoinRowSet.
createKeyboardDownRightListener()
- Method in class javax.swing.plaf.basic.
BasicSplitPaneUI
Deprecated.
As of Java 2 platform v1.3.
createKeyboardEndListener()
- Method in class javax.swing.plaf.basic.
BasicSplitPaneUI
Deprecated.
As of Java 2 platform v1.3.
createKeyboardHomeListener()
- Method in class javax.swing.plaf.basic.
BasicSplitPaneUI
Deprecated.
As of Java 2 platform v1.3.
createKeyboardResizeToggleListener()
- Method in class javax.swing.plaf.basic.
BasicSplitPaneUI
Deprecated.
As of Java 2 platform v1.3.
createKeyboardUpLeftListener()
- Method in class javax.swing.plaf.basic.
BasicSplitPaneUI
Deprecated.
As of Java 2 platform v1.3.
createKeyListener()
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI
Creates a
KeyListener
which will be added to the
 combo box.
createKeyListener()
- Method in class javax.swing.plaf.basic.
BasicComboPopup
Creates the key listener that will be added to the combo box.
createKeyListener()
- Method in class javax.swing.plaf.basic.
BasicTableUI
Creates the key listener for handling keyboard navigation in the
JTable
.
createKeyListener()
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Creates the listener responsible for getting key events from
 the tree.
createKeymap()
- Method in class javax.swing.plaf.basic.
BasicTextUI
Creates the keymap to use for the text component, and installs
 any necessary bindings into it.
createLargeAttributeSet(AttributeSet)
- Method in class javax.swing.text.html.
StyleSheet
Creates a large set of attributes that should trade off
 space for time.
createLargeAttributeSet(AttributeSet)
- Method in class javax.swing.text.
StyleContext
Create a large set of attributes that should trade off
 space for time.
createLayeredPane()
- Method in class javax.swing.
JRootPane
Called by the constructor methods to create the default
layeredPane
.
createLayout()
- Method in class javax.swing.plaf.basic.
BasicInternalFrameTitlePane
Returns a layout manager.
createLayout()
- Method in class javax.swing.plaf.basic.
BasicSpinnerUI
Creates a
LayoutManager
that manages the
editor
,
nextButton
, and
previousButton
children of the JSpinner.
createLayout()
- Method in class javax.swing.plaf.synth.
SynthToolBarUI
Creates a
LayoutManager
to use with the toolbar.
createLayoutCache()
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Creates the object responsible for managing what is expanded, as
 well as the size of nodes.
createLayoutManager()
- Method in class javax.swing.
JViewport
Subclassers can override this to install a different
 layout manager (or
null
) in the constructor.
createLayoutManager()
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI
Creates a layout manager for managing the components which make up the
 combo box.
createLayoutManager()
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI
Creates the layout manager.
createLayoutManager()
- Method in class javax.swing.plaf.basic.
BasicOptionPaneUI
Returns a layout manager.
createLayoutManager()
- Method in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Invoked by
installUI
to create
 a layout manager object to manage
 the
JTabbedPane
.
createLayoutManager()
- Method in class javax.swing.plaf.synth.
SynthTabbedPaneUI
Invoked by
installUI
to create
 a layout manager object to manage
 the
JTabbedPane
.
createLeafElement(Element, AttributeSet, int, int)
- Method in class javax.swing.text.
AbstractDocument
Creates a document leaf element.
createLeafElement(Element, AttributeSet, int, int)
- Method in class javax.swing.text.html.
HTMLDocument
Creates a document leaf element that directly represents
 text (doesn't have any children).
createLeftOneTouchButton()
- Method in class javax.swing.plaf.basic.
BasicSplitPaneDivider
Creates and return an instance of
JButton
that can be used to
 collapse the left component in the split pane.
createLineBidi(int, int)
- Method in class java.text.
Bidi
Create a Bidi object representing the bidi information on a line of text within
 the paragraph represented by the current Bidi.
createLineBorder(Color)
- Static method in class javax.swing.
BorderFactory
Creates a line border with the specified color.
createLineBorder(Color, int)
- Static method in class javax.swing.
BorderFactory
Creates a line border with the specified color
 and width.
createLineBorder(Color, int, boolean)
- Static method in class javax.swing.
BorderFactory
Creates a line border with the specified color, thickness, and corner shape.
createLink(Path, Path)
- Static method in class java.nio.file.
Files
Creates a new link (directory entry) for an existing file
(optional
 operation)
.
createLink(Path, Path)
- Method in class java.nio.file.spi.
FileSystemProvider
Creates a new link (directory entry) for an existing file.
createLinker()
- Method in class jdk.dynalink.
DynamicLinkerFactory
Creates a new dynamic linker based on the current configuration.
createList()
- Method in class javax.swing.plaf.basic.
BasicComboPopup
Creates the JList used in the popup to display
 the items in the combo box model.
createList(JFileChooser)
- Method in class javax.swing.plaf.metal.
MetalFileChooserUI
Constructs a details view.
createListDataListener()
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI
Creates a list data listener which will be added to the
ComboBoxModel
.
createListDataListener()
- Method in class javax.swing.plaf.basic.
BasicComboPopup
Creates a list data listener which will be added to the
ComboBoxModel
.
createListDataListener()
- Method in class javax.swing.plaf.basic.
BasicListUI
Creates an instance of
ListDataListener
that's added to
 the
JLists
by model as needed.
createListMouseListener()
- Method in class javax.swing.plaf.basic.
BasicComboPopup
Creates a mouse listener that watches for mouse events in
 the popup's list.
createListMouseMotionListener()
- Method in class javax.swing.plaf.basic.
BasicComboPopup
Creates a mouse motion listener that watches for mouse motion
 events in the popup's list.
createListSelectionListener()
- Method in class javax.swing.plaf.basic.
BasicComboPopup
Creates a list selection listener that watches for selection changes in
 the popup's list.
createListSelectionListener()
- Method in class javax.swing.plaf.basic.
BasicListUI
Creates an instance of
ListSelectionHandler
that's added to
 the
JLists
by selectionModel as needed.
createListSelectionListener(JFileChooser)
- Method in class javax.swing.plaf.basic.
BasicFileChooserUI
Creates a list selection listener.
createListSelectionListener(JFileChooser)
- Method in class javax.swing.plaf.metal.
MetalFileChooserUI
Creates a selection listener for the list of files and directories.
createLookAndFeel(String)
- Static method in class javax.swing.
UIManager
Creates a supported built-in Java
LookAndFeel
specified
 by the given
L&F name
name.
createLoweredBevelBorder()
- Static method in class javax.swing.
BorderFactory
Creates a border with a lowered beveled edge, using
 brighter shades of the component's current background color
 for highlighting, and darker shading for shadows.
createLoweredSoftBevelBorder()
- Static method in class javax.swing.
BorderFactory
Creates a beveled border with a lowered edge and softened corners,
 using brighter shades of the component's current background color
 for highlighting, and darker shading for shadows.
createLSInput()
- Method in interface org.w3c.dom.ls.
DOMImplementationLS
Create a new empty input source object where
LSInput.characterStream
,
LSInput.byteStream
,
LSInput.stringData
LSInput.systemId
,
LSInput.publicId
,
LSInput.baseURI
, and
LSInput.encoding
are null, and
LSInput.certifiedText
is false.
createLSOutput()
- Method in interface org.w3c.dom.ls.
DOMImplementationLS
Create a new empty output destination object where
LSOutput.characterStream
,
LSOutput.byteStream
,
LSOutput.systemId
,
LSOutput.encoding
are null.
createLSParser(short, String)
- Method in interface org.w3c.dom.ls.
DOMImplementationLS
Create a new
LSParser
.
createLSSerializer()
- Method in interface org.w3c.dom.ls.
DOMImplementationLS
Create a new
LSSerializer
object.
createMatteBorder(int, int, int, int, Color)
- Static method in class javax.swing.
BorderFactory
Creates a matte-look border using a solid color.
createMatteBorder(int, int, int, int, Icon)
- Static method in class javax.swing.
BorderFactory
Creates a matte-look border that consists of multiple tiles of a
 specified icon.
createMBean(String, ObjectName)
- Method in interface javax.management.
MBeanServer
Instantiates and registers an MBean in the MBean server.
createMBean(String, ObjectName)
- Method in interface javax.management.
MBeanServerConnection
Instantiates and registers an MBean in the MBean server.
createMBean(String, ObjectName, Object[], String[])
- Method in interface javax.management.
MBeanServer
Instantiates and registers an MBean in the MBean server.
createMBean(String, ObjectName, Object[], String[])
- Method in interface javax.management.
MBeanServerConnection
Instantiates and registers an MBean in the MBean server.
createMBean(String, ObjectName, MarshalledObject, String[], Subject)
- Method in interface javax.management.remote.rmi.
RMIConnection
Handles the method
MBeanServerConnection.createMBean(String, ObjectName, Object[], String[])
.
createMBean(String, ObjectName, MarshalledObject, String[], Subject)
- Method in class javax.management.remote.rmi.
RMIConnectionImpl_Stub
createMBean(String, ObjectName, MarshalledObject, String[], Subject)
- Method in class javax.management.remote.rmi.
RMIConnectionImpl
createMBean(String, ObjectName, ObjectName)
- Method in interface javax.management.
MBeanServer
Instantiates and registers an MBean in the MBean server.
createMBean(String, ObjectName, ObjectName)
- Method in interface javax.management.
MBeanServerConnection
Instantiates and registers an MBean in the MBean server.
createMBean(String, ObjectName, ObjectName, Object[], String[])
- Method in interface javax.management.
MBeanServer
Instantiates and registers an MBean in the MBean server.
createMBean(String, ObjectName, ObjectName, Object[], String[])
- Method in interface javax.management.
MBeanServerConnection
Instantiates and registers an MBean in the MBean server.
createMBean(String, ObjectName, ObjectName, MarshalledObject, String[], Subject)
- Method in interface javax.management.remote.rmi.
RMIConnection
Handles the method
MBeanServerConnection.createMBean(String, ObjectName, ObjectName, Object[], String[])
.
createMBean(String, ObjectName, ObjectName, MarshalledObject, String[], Subject)
- Method in class javax.management.remote.rmi.
RMIConnectionImpl_Stub
createMBean(String, ObjectName, ObjectName, MarshalledObject, String[], Subject)
- Method in class javax.management.remote.rmi.
RMIConnectionImpl
createMBean(String, ObjectName, ObjectName, Subject)
- Method in interface javax.management.remote.rmi.
RMIConnection
Handles the method
MBeanServerConnection.createMBean(String, ObjectName, ObjectName)
.
createMBean(String, ObjectName, ObjectName, Subject)
- Method in class javax.management.remote.rmi.
RMIConnectionImpl_Stub
createMBean(String, ObjectName, ObjectName, Subject)
- Method in class javax.management.remote.rmi.
RMIConnectionImpl
createMBean(String, ObjectName, Subject)
- Method in interface javax.management.remote.rmi.
RMIConnection
Handles the method
MBeanServerConnection.createMBean(String, ObjectName)
.
createMBean(String, ObjectName, Subject)
- Method in class javax.management.remote.rmi.
RMIConnectionImpl_Stub
createMBean(String, ObjectName, Subject)
- Method in class javax.management.remote.rmi.
RMIConnectionImpl
createMBeanServer()
- Static method in class javax.management.
MBeanServerFactory
Return a new object implementing the MBeanServer interface
 with a standard default domain name.
createMBeanServer(String)
- Static method in class javax.management.
MBeanServerFactory
Return a new object implementing the
MBeanServer
interface with the specified default domain name.
createMenuDragMouseListener(JComponent)
- Method in class javax.swing.plaf.basic.
BasicMenuItemUI
Returns an instance of
MenuDragMouseListener
.
createMenuKeyListener(JComponent)
- Method in class javax.swing.plaf.basic.
BasicMenuItemUI
Returns an instance of
MenuKeyListener
.
createMenuListener(JComponent)
- Method in class javax.swing.plaf.basic.
BasicMenuUI
Returns an instance of
MenuListener
.
createMessageArea()
- Method in class javax.swing.plaf.basic.
BasicOptionPaneUI
Messaged from
installComponents
to create a
Container
containing the body of the message.
createMessageArea()
- Method in class javax.swing.plaf.synth.
SynthOptionPaneUI
Called from
BasicOptionPaneUI.installComponents()
to create a
Container
containing the body of the message.
createMethodEntryRequest()
- Method in interface com.sun.jdi.request.
EventRequestManager
Creates a new disabled
MethodEntryRequest
.
createMethodExitRequest()
- Method in interface com.sun.jdi.request.
EventRequestManager
Creates a new disabled
MethodExitRequest
.
createMissingMemberHandler(LinkRequest, LinkerServices)
- Method in interface jdk.dynalink.beans.
MissingMemberHandlerFactory
Returns a method handle suitable for implementing missing member behavior
 for a particular link request.
createModel()
- Method in class javax.swing.plaf.basic.
BasicFileChooserUI
Creates the model.
createModelListener()
- Method in class javax.swing.plaf.basic.
BasicScrollBarUI
Creates a model listener.
createModificationWatchpointRequest(Field)
- Method in interface com.sun.jdi.request.
EventRequestManager
Creates a new disabled watchpoint which watches accesses to the
 specified field.
createMonitorContendedEnteredRequest()
- Method in interface com.sun.jdi.request.
EventRequestManager
Creates a new disabled
MonitorContendedEnteredRequest
.
createMonitorContendedEnterRequest()
- Method in interface com.sun.jdi.request.
EventRequestManager
Creates a new disabled
MonitorContendedEnterRequest
.
createMonitorWaitedRequest()
- Method in interface com.sun.jdi.request.
EventRequestManager
Creates a new disabled
MonitorWaitedRequest
.
createMonitorWaitRequest()
- Method in interface com.sun.jdi.request.
EventRequestManager
Creates a new disabled
MonitorWaitRequest
.
createMouseInputListener()
- Method in class javax.swing.plaf.basic.
BasicDesktopIconUI
Returns a new instance of
MouseInputListener
.
createMouseInputListener()
- Method in class javax.swing.plaf.basic.
BasicListUI
Creates a delegate that implements
MouseInputListener
.
createMouseInputListener()
- Method in class javax.swing.plaf.basic.
BasicTableHeaderUI
Creates the mouse listener for the
JTableHeader
.
createMouseInputListener()
- Method in class javax.swing.plaf.basic.
BasicTableUI
Creates the mouse listener for the
JTable
.
createMouseInputListener(JComponent)
- Method in class javax.swing.plaf.basic.
BasicMenuItemUI
Returns an instance of
MouseInputListener
.
createMouseListener()
- Method in class javax.swing.plaf.basic.
BasicComboPopup
Creates a listener
 that will watch for mouse-press and release events on the combo box.
createMouseListener()
- Method in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Creates a mouse listener.
createMouseListener()
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Creates the listener responsible for updating the selection based on
 mouse events.
createMouseListener()
- Method in class javax.swing.plaf.synth.
SynthTabbedPaneUI
Creates a mouse listener.
createMouseMotionListener()
- Method in class javax.swing.plaf.basic.
BasicComboPopup
Creates the mouse motion listener which will be added to the combo
 box.
createMouseWheelListener()
- Method in class javax.swing.plaf.basic.
BasicScrollPaneUI
Creates an instance of MouseWheelListener, which is added to the
 JScrollPane by installUI().
createMultiDocPrintJob()
- Method in interface javax.print.
MultiDocPrintService
Create a job which can print a multiDoc.
createMultiResolutionScreenCapture(Rectangle)
- Method in class java.awt.
Robot
Creates an image containing pixels read from the screen.
createName(byte[], Oid)
- Method in class org.ietf.jgss.
GSSManager
Factory method to convert a byte array containing a
 name from the specified namespace to a GSSName object.
createName(byte[], Oid, Oid)
- Method in class org.ietf.jgss.
GSSManager
Factory method to convert a byte array containing a
 name from the specified namespace to a GSSName object and canonicalize
 it at the same time for a mechanism.
createName(String, Oid)
- Method in class org.ietf.jgss.
GSSManager
Factory method to convert a string name from the
 specified namespace to a GSSName object.
createName(String, Oid, Oid)
- Method in class org.ietf.jgss.
GSSManager
Factory method to convert a string name from the
 specified namespace to a GSSName object and canonicalize it at the
 same time for a mechanism.
createNamespace(String)
- Method in class javax.xml.stream.
XMLEventFactory
Create a new default Namespace
createNamespace(String, String)
- Method in class javax.xml.stream.
XMLEventFactory
Create a new Namespace
createNClob()
- Method in interface java.sql.
Connection
Constructs an object that implements the
NClob
interface.
createNewFile()
- Method in class java.io.
File
Atomically creates a new, empty file named by this abstract pathname if
 and only if a file with this name does not yet exist.
createNewFolder(File)
- Method in class javax.swing.filechooser.
FileSystemView
Creates a new folder with a default folder name.
createNextButton()
- Method in class javax.swing.plaf.basic.
BasicSpinnerUI
Creates an increment button, i.e. component that replaces the spinner
 value with the object returned by
spinner.getNextValue
.
createNodeDimensions()
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Creates an instance of
NodeDimensions
that is able to determine
 the size of a given node in the tree.
createNodeIterator(Node, int, NodeFilter, boolean)
- Method in interface org.w3c.dom.traversal.
DocumentTraversal
Create a new
NodeIterator
over the subtree rooted at the
 specified node.
createNonRolloverBorder()
- Method in class javax.swing.plaf.basic.
BasicToolBarUI
Creates the non rollover border for toolbar components.
createNorthPane(JInternalFrame)
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI
Creates the north pane.
createNSResolver(Node)
- Method in interface org.w3c.dom.xpath.
XPathEvaluator
Adapts any DOM node to resolve namespaces so that an XPath expression
 can be easily evaluated relative to the context of the node where it
 appeared within the document.
createObjectFactory(Object, Hashtable<?, ?>)
- Method in interface javax.naming.spi.
ObjectFactoryBuilder
Creates a new object factory using the environment supplied.
createOutgoing(Association, SocketAddress, int)
- Static method in class com.sun.nio.sctp.
MessageInfo
Creates a
MessageInfo
instance suitable for use when
 sending a message to a given association.
createOutgoing(SocketAddress, int)
- Static method in class com.sun.nio.sctp.
MessageInfo
Creates a
MessageInfo
instance suitable for use when
 sending a message.
createOutputFilter(OutputStream, SimpleFileServer.OutputLevel)
- Static method in class com.sun.net.httpserver.
SimpleFileServer
Creates a
post-processing Filter
that prints log messages about
exchanges
.
createOutputStreamInstance(Object)
- Method in class javax.imageio.spi.
ImageOutputStreamSpi
Returns an instance of the
ImageOutputStream
implementation associated with this service provider.
createOutputStreamInstance(Object, boolean, File)
- Method in class javax.imageio.spi.
ImageOutputStreamSpi
Returns an instance of the
ImageOutputStream
implementation associated with this service provider.
createPacked(ColorSpace, int, int, int, int, int, boolean)
- Static method in class javax.imageio.
ImageTypeSpecifier
Returns a specifier for a packed image format that will use a
DirectColorModel
and a packed
SampleModel
to store each pixel packed into in a
 single byte, short, or int.
createPackedRaster(int, int, int, int[], Point)
- Static method in class java.awt.image.
Raster
Creates a Raster based on a SinglePixelPackedSampleModel with
 the specified data type, width, height, and band masks.
createPackedRaster(int, int, int, int, int, Point)
- Static method in class java.awt.image.
Raster
Creates a Raster based on a packed SampleModel with the
 specified data type, width, height, number of bands, and bits
 per band.
createPackedRaster(DataBuffer, int, int, int, int[], Point)
- Static method in class java.awt.image.
Raster
Creates a Raster based on a SinglePixelPackedSampleModel with
 the specified DataBuffer, width, height, scanline stride, and
 band masks.
createPackedRaster(DataBuffer, int, int, int, Point)
- Static method in class java.awt.image.
Raster
Creates a Raster based on a MultiPixelPackedSampleModel with the
 specified DataBuffer, width, height, and bits per pixel.
createParallelGroup()
- Method in class javax.swing.
GroupLayout
Creates and returns a
ParallelGroup
with an alignment of
Alignment.LEADING
.
createParallelGroup(GroupLayout.Alignment)
- Method in class javax.swing.
GroupLayout
Creates and returns a
ParallelGroup
with the specified
 alignment.
createParallelGroup(GroupLayout.Alignment, boolean)
- Method in class javax.swing.
GroupLayout
Creates and returns a
ParallelGroup
with the specified
 alignment and resize behavior.
createPooledConnectionBuilder()
- Method in interface javax.sql.
ConnectionPoolDataSource
Creates a new
PooledConnectionBuilder
instance
createPopup()
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI
Creates the popup portion of the combo box.
createPosition(int)
- Method in interface javax.swing.text.
AbstractDocument.Content
Creates a position within the content that will
 track change as the content is mutated.
createPosition(int)
- Method in class javax.swing.text.
AbstractDocument
Returns a position that will track change as the document
 is altered.
createPosition(int)
- Method in interface javax.swing.text.
Document
This method allows an application to mark a place in
 a sequence of character content.
createPosition(int)
- Method in class javax.swing.text.
GapContent
Creates a position within the content that will
 track change as the content is mutated.
createPosition(int)
- Method in class javax.swing.text.
StringContent
Creates a position within the content that will
 track change as the content is mutated.
createPreviousButton()
- Method in class javax.swing.plaf.basic.
BasicSpinnerUI
Creates a decrement button, i.e. component that replaces the spinner
 value with the object returned by
spinner.getPreviousValue
.
createPrintJob()
- Method in interface javax.print.
PrintService
Creates and returns a
PrintJob
capable of handling data from any
 of the supported document flavors.
createProcessingInstruction(String, String)
- Method in class javax.xml.stream.
XMLEventFactory
Create a processing instruction
createProcessingInstruction(String, String)
- Method in interface org.w3c.dom.
Document
Creates a
ProcessingInstruction
node given the specified
 name and data strings.
createPropertyChangeListener()
- Method in class javax.swing.plaf.basic.
BasicColorChooserUI
Returns an instance of
PropertyChangeListener
.
createPropertyChangeListener()
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI
Creates a
PropertyChangeListener
which will be added to
 the combo box.
createPropertyChangeListener()
- Method in class javax.swing.plaf.basic.
BasicComboPopup
Creates a
PropertyChangeListener
which will be added to
 the combo box.
createPropertyChangeListener()
- Method in class javax.swing.plaf.basic.
BasicDesktopPaneUI
Returns the
PropertyChangeListener
to install on
 the
JDesktopPane
.
createPropertyChangeListener()
- Method in class javax.swing.plaf.basic.
BasicInternalFrameTitlePane
Returns an instance of
PropertyChangeListener
.
createPropertyChangeListener()
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI
Creates the property change listener.
createPropertyChangeListener()
- Method in class javax.swing.plaf.basic.
BasicListUI
Creates an instance of
PropertyChangeHandler
that's added to
 the
JList
by
installUI()
.
createPropertyChangeListener()
- Method in class javax.swing.plaf.basic.
BasicOptionPaneUI
Returns an instance of
PropertyChangeListener
.
createPropertyChangeListener()
- Method in class javax.swing.plaf.basic.
BasicScrollBarUI
Creates a property change listener.
createPropertyChangeListener()
- Method in class javax.swing.plaf.basic.
BasicScrollPaneUI
Creates an instance of
PropertyChangeListener
that's added to
 the
JScrollPane
by
installUI()
.
createPropertyChangeListener()
- Method in class javax.swing.plaf.basic.
BasicSpinnerUI
Creates a
PropertyChangeListener
that can be
 added to the JSpinner itself.
createPropertyChangeListener()
- Method in class javax.swing.plaf.basic.
BasicSplitPaneUI
Creates a
PropertyChangeListener
for the
JSplitPane
UI.
createPropertyChangeListener()
- Method in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Creates a property change listener.
createPropertyChangeListener()
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Creates a listener that is responsible that updates the UI based on
 how the tree changes.
createPropertyChangeListener()
- Method in class javax.swing.plaf.metal.
MetalComboBoxUI
createPropertyChangeListener(JComponent)
- Method in class javax.swing.plaf.basic.
BasicMenuItemUI
Creates a
PropertyChangeListener
which will be added to
 the menu item.
createPropertyChangeListener(JFileChooser)
- Method in class javax.swing.plaf.basic.
BasicFileChooserUI
Creates the property change listener.
createPropertyChangeListener(JSlider)
- Method in class javax.swing.plaf.basic.
BasicSliderUI
Creates a property change listener.
createPropertyChangeListener(JSlider)
- Method in class javax.swing.plaf.metal.
MetalSliderUI
Constructs
MetalPropertyListener
.
createPropertyEditor(Object)
- Method in class java.beans.
PropertyDescriptor
Constructs an instance of a property editor using the current
 property editor class.
createPropertyListener()
- Method in class javax.swing.plaf.basic.
BasicToolBarUI
Returns an instance of
PropertyChangeListener
.
createRaisedBevelBorder()
- Static method in class javax.swing.
BorderFactory
Creates a border with a raised beveled edge, using
 brighter shades of the component's current background color
 for highlighting, and darker shading for shadows.
createRaisedSoftBevelBorder()
- Static method in class javax.swing.
BorderFactory
Creates a beveled border with a raised edge and softened corners,
 using brighter shades of the component's current background color
 for highlighting, and darker shading for shadows.
createRange()
- Method in interface org.w3c.dom.ranges.
DocumentRange
This interface can be obtained from the object implementing the
Document
interface using binding-specific casting
 methods.
createRaster(SampleModel, DataBuffer, Point)
- Static method in class java.awt.image.
Raster
Creates a Raster with the specified SampleModel and DataBuffer.
createReaderInstance()
- Method in class javax.imageio.spi.
ImageReaderSpi
Returns an instance of the
ImageReader
implementation associated with this service provider.
createReaderInstance(Object)
- Method in class javax.imageio.spi.
ImageReaderSpi
Returns an instance of the
ImageReader
implementation associated with this service provider.
createRegistry(int)
- Static method in class java.rmi.registry.
LocateRegistry
Creates and exports a
Registry
instance on the local
 host that accepts requests on the specified
port
.
createRegistry(int, RMIClientSocketFactory, RMIServerSocketFactory)
- Static method in class java.rmi.registry.
LocateRegistry
Creates and exports a
Registry
instance on the local
 host that uses custom socket factories for communication with that
 instance.
createRelation(String, String, RoleList)
- Method in class javax.management.relation.
RelationService
Creates a simple relation (represented by a RelationSupport object) of
 given relation type, and adds it in the Relation Service.
createRelation(String, String, RoleList)
- Method in interface javax.management.relation.
RelationServiceMBean
Creates a simple relation (represented by a RelationSupport object) of
 given relation type, and adds it in the Relation Service.
createRelationType(String, RoleInfo[])
- Method in class javax.management.relation.
RelationService
Creates a relation type (a RelationTypeSupport object) with given
 role infos (provided by the RoleInfo objects), and adds it in the
 Relation Service.
createRelationType(String, RoleInfo[])
- Method in interface javax.management.relation.
RelationServiceMBean
Creates a relation type (RelationTypeSupport object) with given
 role infos (provided by the RoleInfo objects), and adds it in the
 Relation Service.
createRenderer()
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI
Creates the default renderer that will be used in a non-editiable combo
 box.
createRendering(RenderContext)
- Method in interface java.awt.image.renderable.
RenderableImage
Creates a RenderedImage that represented a rendering of this image
 using a given RenderContext.
createRendering(RenderContext)
- Method in class java.awt.image.renderable.
RenderableImageOp
Creates a RenderedImage which represents this
 RenderableImageOp (including its Renderable sources) rendered
 according to the given RenderContext.
createResource(JavaFileManager.Location, CharSequence, CharSequence, Element...)
- Method in interface javax.annotation.processing.
Filer
Creates a new auxiliary resource file for writing and returns a
 file object for it.
createRightOneTouchButton()
- Method in class javax.swing.plaf.basic.
BasicSplitPaneDivider
Creates and return an instance of
JButton
that can be used to
 collapse the right component in the split pane.
createRigidArea(Dimension)
- Static method in class javax.swing.
Box
Creates an invisible component that's always the specified size.
createRolloverBorder()
- Method in class javax.swing.plaf.basic.
BasicToolBarUI
Creates a rollover border for toolbar components.
createRolloverListener()
- Method in class javax.swing.plaf.metal.
MetalToolBarUI
Creates a property change listener that will be added to the JToolBar.
createRootLayout()
- Method in class javax.swing.
JRootPane
Called by the constructor methods to create the default
layoutManager
.
createRootPane()
- Method in class javax.swing.
JApplet
Deprecated.
Called by the constructor methods to create the default rootPane.
createRootPane()
- Method in class javax.swing.
JDialog
Called by the constructor methods to create the default
rootPane
.
createRootPane()
- Method in class javax.swing.
JFrame
Called by the constructor methods to create the default
rootPane
.
createRootPane()
- Method in class javax.swing.
JInternalFrame
Called by the constructor to set up the
JRootPane
.
createRootPane()
- Method in class javax.swing.
JWindow
Called by the constructor methods to create the default
rootPane
.
createRow()
- Method in class javax.swing.text.
FlowView
Create a View that should be used to hold a
 a rows worth of children in a flow.
createRow()
- Method in class javax.swing.text.
ParagraphView
Create a
View
that should be used to hold a
 a row's worth of children in a flow.
createSaslClient(String[], String, String, String, Map<String, ?>, CallbackHandler)
- Static method in class javax.security.sasl.
Sasl
Creates a
SaslClient
using the parameters supplied.
createSaslClient(String[], String, String, String, Map<String, ?>, CallbackHandler)
- Method in interface javax.security.sasl.
SaslClientFactory
Creates a SaslClient using the parameters supplied.
createSaslServer(String, String, String, Map<String, ?>, CallbackHandler)
- Static method in class javax.security.sasl.
Sasl
Creates a
SaslServer
for the specified mechanism.
createSaslServer(String, String, String, Map<String, ?>, CallbackHandler)
- Method in interface javax.security.sasl.
SaslServerFactory
Creates a
SaslServer
using the parameters supplied.
createScaledRendering(int, int, RenderingHints)
- Method in interface java.awt.image.renderable.
RenderableImage
Creates a RenderedImage instance of this image with width w, and
 height h in pixels.
createScaledRendering(int, int, RenderingHints)
- Method in class java.awt.image.renderable.
RenderableImageOp
Creates a RenderedImage instance of this image with width w, and
 height h in pixels.
createScreenCapture(Rectangle)
- Method in class java.awt.
Robot
Creates an image containing pixels read from the screen.
createScrollBarSwapListener()
- Method in class javax.swing.plaf.metal.
MetalScrollPaneUI
Returns a new
PropertyChangeListener
for scroll bar swap events.
createScrollButton(int)
- Method in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Creates and returns a JButton that will provide the user
 with a way to scroll the tabs in a particular direction.
createScroller()
- Method in class javax.swing.plaf.basic.
BasicComboPopup
Creates the scroll pane which houses the scrollable list.
createScrollListener()
- Method in class javax.swing.plaf.basic.
BasicScrollBarUI
Creates a scroll listener.
createScrollListener(JSlider)
- Method in class javax.swing.plaf.basic.
BasicSliderUI
Creates a scroll listener.
createScrollPaneForTable(JTable)
- Static method in class javax.swing.
JTable
Deprecated.
As of Swing version 1.0.2,
 replaced by
new JScrollPane(aTable)
.
createSecondaryLoop()
- Method in class java.awt.
EventQueue
Creates a new
secondary loop
associated with this
 event queue.
createSelectionModel()
- Method in class javax.swing.
JList
Returns an instance of
DefaultListSelectionModel
; called
 during construction to initialize the list's selection model
 property.
createSelectionModel()
- Method in class javax.swing.table.
DefaultTableColumnModel
Creates a new default list selection model.
createSelectionModelPropertyChangeListener()
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Creates the listener responsible for getting property change
 events from the selection model.
createSeparator()
- Method in class javax.swing.plaf.basic.
BasicOptionPaneUI
Returns a separator.
createSequentialGroup()
- Method in class javax.swing.
GroupLayout
Creates and returns a
SequentialGroup
.
createServerSocket()
- Method in class javax.net.
ServerSocketFactory
Returns an unbound server socket.
createServerSocket(int)
- Method in interface java.rmi.server.
RMIServerSocketFactory
Create a server socket on the specified port (port 0 indicates
 an anonymous port).
createServerSocket(int)
- Method in class java.rmi.server.
RMISocketFactory
Create a server socket on the specified port (port 0 indicates
 an anonymous port).
createServerSocket(int)
- Method in class javax.net.
ServerSocketFactory
Returns a server socket bound to the specified port.
createServerSocket(int)
- Method in class javax.rmi.ssl.
SslRMIServerSocketFactory
Creates a server socket that accepts SSL connections
 configured according to this factory's SSL socket configuration
 parameters.
createServerSocket(int, int)
- Method in class javax.net.
ServerSocketFactory
Returns a server socket bound to the specified port, and uses the
 specified connection backlog.
createServerSocket(int, int, InetAddress)
- Method in class javax.net.
ServerSocketFactory
Returns a server socket bound to the specified port,
 with a specified listen backlog and local IP.
createShardingKeyBuilder()
- Method in interface javax.sql.
CommonDataSource
Creates a new
ShardingKeyBuilder
instance
createShared()
- Method in interface javax.sql.rowset.
CachedRowSet
Returns a new
RowSet
object backed by the same data as
 that of this
CachedRowSet
object.
createSmallAttributeSet(AttributeSet)
- Method in class javax.swing.text.html.
StyleSheet
Creates a compact set of attributes that might be shared.
createSmallAttributeSet(AttributeSet)
- Method in class javax.swing.text.
StyleContext
Create a compact set of attributes that might be shared.
createSNIMatcher(String)
- Static method in class javax.net.ssl.
SNIHostName
Creates an
SNIMatcher
object for
SNIHostName
s.
createSocket()
- Method in class javax.net.
SocketFactory
Creates an unconnected socket.
createSocket(String, int)
- Method in interface java.rmi.server.
RMIClientSocketFactory
Create a client socket connected to the specified host and port.
createSocket(String, int)
- Method in class java.rmi.server.
RMISocketFactory
Creates a client socket connected to the specified host and port.
createSocket(String, int)
- Method in class javax.net.
SocketFactory
Creates a socket and connects it to the specified remote host
 at the specified remote port.
createSocket(String, int)
- Method in class javax.rmi.ssl.
SslRMIClientSocketFactory
Creates an SSL socket.
createSocket(String, int, InetAddress, int)
- Method in class javax.net.
SocketFactory
Creates a socket and connects it to the specified remote host
 on the specified remote port.
createSocket(InetAddress, int)
- Method in class javax.net.
SocketFactory
Creates a socket and connects it to the specified port number
 at the specified address.
createSocket(InetAddress, int, InetAddress, int)
- Method in class javax.net.
SocketFactory
Creates a socket and connect it to the specified remote address
 on the specified remote port.
createSocket(Socket, InputStream, boolean)
- Method in class javax.net.ssl.
SSLSocketFactory
Creates a server mode
Socket
layered over an
 existing connected socket, and is able to read data which has
 already been consumed/removed from the
Socket
's
 underlying
InputStream
.
createSocket(Socket, String, int, boolean)
- Method in class javax.net.ssl.
SSLSocketFactory
Returns a socket layered over an existing socket connected to the named
 host, at the given port.
createSocketImpl()
- Method in interface java.net.
SocketImplFactory
Creates a new
SocketImpl
instance.
createSoftBevelBorder(int)
- Static method in class javax.swing.
BorderFactory
Creates a beveled border of the specified type with softened corners,
 using brighter shades of the component's current background color
 for highlighting, and darker shading for shadows.
createSoftBevelBorder(int, Color, Color)
- Static method in class javax.swing.
BorderFactory
Creates a beveled border of the specified type with softened corners,
 using the specified highlighting and shadowing.
createSoftBevelBorder(int, Color, Color, Color, Color)
- Static method in class javax.swing.
BorderFactory
Creates a beveled border of the specified type with softened corners,
 using the specified colors for the inner and outer edges
 of the highlight and the shadow areas.
createSourceFile(CharSequence, Element...)
- Method in interface javax.annotation.processing.
Filer
Creates a new source file and returns an object to allow
 writing to it.
createSouthPane(JInternalFrame)
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI
Creates the north pane.
createSpace(String)
- Method in class javax.xml.stream.
XMLEventFactory
Create a Characters event with the isSpace flag set to true
createSQLXML()
- Method in interface java.sql.
Connection
Constructs an object that implements the
SQLXML
interface.
createSSLEngine()
- Method in class javax.net.ssl.
SSLContext
Creates a new
SSLEngine
using this context.
createSSLEngine(String, int)
- Method in class javax.net.ssl.
SSLContext
Creates a new
SSLEngine
using this context using
 advisory peer information.
createStandardLabels(int)
- Method in class javax.swing.
JSlider
Creates a
Hashtable
of numerical text labels, starting at the
 slider minimum, and using the increment specified.
createStandardLabels(int, int)
- Method in class javax.swing.
JSlider
Creates a
Hashtable
of numerical text labels, starting at the
 starting point specified, and using the increment specified.
createStartDocument()
- Method in class javax.xml.stream.
XMLEventFactory
Creates a new instance of a StartDocument event
createStartDocument(String)
- Method in class javax.xml.stream.
XMLEventFactory
Creates a new instance of a StartDocument event
createStartDocument(String, String)
- Method in class javax.xml.stream.
XMLEventFactory
Creates a new instance of a StartDocument event
createStartDocument(String, String, boolean)
- Method in class javax.xml.stream.
XMLEventFactory
Creates a new instance of a StartDocument event
createStartElement(String, String, String)
- Method in class javax.xml.stream.
XMLEventFactory
Create a new StartElement.
createStartElement(String, String, String, Iterator<? extends Attribute>, Iterator<? extends Namespace>)
- Method in class javax.xml.stream.
XMLEventFactory
Create a new StartElement.
createStartElement(String, String, String, Iterator<? extends Attribute>, Iterator<? extends Namespace>, NamespaceContext)
- Method in class javax.xml.stream.
XMLEventFactory
Create a new StartElement.
createStartElement(QName, Iterator<? extends Attribute>, Iterator<? extends Namespace>)
- Method in class javax.xml.stream.
XMLEventFactory
Create a new StartElement.
createStatement()
- Method in interface java.sql.
Connection
Creates a
Statement
object for sending
 SQL statements to the database.
createStatement(int, int)
- Method in interface java.sql.
Connection
Creates a
Statement
object that will generate
ResultSet
objects with the given type and concurrency.
createStatement(int, int, int)
- Method in interface java.sql.
Connection
Creates a
Statement
object that will generate
ResultSet
objects with the given type, concurrency,
 and holdability.
createStepRequest(ThreadReference, int, int)
- Method in interface com.sun.jdi.request.
EventRequestManager
Creates a new disabled
StepRequest
.
createStrokeBorder(BasicStroke)
- Static method in class javax.swing.
BorderFactory
Creates a border of the specified
stroke
.
createStrokeBorder(BasicStroke, Paint)
- Static method in class javax.swing.
BorderFactory
Creates a border of the specified
stroke
and
paint
.
createStrokedShape(Shape)
- Method in class java.awt.
BasicStroke
Returns a
Shape
whose interior defines the
 stroked outline of a specified
Shape
.
createStrokedShape(Shape)
- Method in interface java.awt.
Stroke
Returns an outline
Shape
which encloses the area that
 should be painted when the
Shape
is stroked according
 to the rules defined by the
 object implementing the
Stroke
interface.
createStruct(String, Object[])
- Method in interface java.sql.
Connection
Factory method for creating Struct objects.
createSubcontext(String)
- Method in interface javax.naming.
Context
Creates and binds a new context.
createSubcontext(String)
- Method in class javax.naming.
InitialContext
createSubcontext(String, Attributes)
- Method in interface javax.naming.directory.
DirContext
Creates and binds a new context, along with associated attributes.
createSubcontext(String, Attributes)
- Method in class javax.naming.directory.
InitialDirContext
createSubcontext(Name)
- Method in interface javax.naming.
Context
Creates and binds a new context.
createSubcontext(Name)
- Method in class javax.naming.
InitialContext
createSubcontext(Name, Attributes)
- Method in interface javax.naming.directory.
DirContext
Creates and binds a new context, along with associated attributes.
createSubcontext(Name, Attributes)
- Method in class javax.naming.directory.
InitialDirContext
createSubject(GSSName, GSSCredential)
- Static method in class com.sun.security.jgss.
GSSUtil
Use this method to convert a GSSName and GSSCredential into a
 Subject.
createSubsetSampleModel(int[])
- Method in class java.awt.image.
BandedSampleModel
Creates a new BandedSampleModel with a subset of the bands of this
 BandedSampleModel.
createSubsetSampleModel(int[])
- Method in class java.awt.image.
ComponentSampleModel
Creates a new ComponentSampleModel with a subset of the bands
 of this ComponentSampleModel.
createSubsetSampleModel(int[])
- Method in class java.awt.image.
MultiPixelPackedSampleModel
Creates a new
MultiPixelPackedSampleModel
with a
 subset of the bands of this
MultiPixelPackedSampleModel
.
createSubsetSampleModel(int[])
- Method in class java.awt.image.
PixelInterleavedSampleModel
Creates a new PixelInterleavedSampleModel with a subset of the
 bands of this PixelInterleavedSampleModel.
createSubsetSampleModel(int[])
- Method in class java.awt.image.
SampleModel
Creates a new SampleModel
 with a subset of the bands of this
 SampleModel.
createSubsetSampleModel(int[])
- Method in class java.awt.image.
SinglePixelPackedSampleModel
This creates a new SinglePixelPackedSampleModel with a subset of the
 bands of this SinglePixelPackedSampleModel.
createSymbolicLink(Path, Path, FileAttribute<?>...)
- Static method in class java.nio.file.
Files
Creates a symbolic link to a target
(optional operation)
.
createSymbolicLink(Path, Path, FileAttribute<?>...)
- Method in class java.nio.file.spi.
FileSystemProvider
Creates a symbolic link to a target.
createSystemMenu()
- Method in class javax.swing.plaf.basic.
BasicInternalFrameTitlePane
Returns a new instance of
JMenu
.
createSystemMenuBar()
- Method in class javax.swing.plaf.basic.
BasicInternalFrameTitlePane
Returns a new instance of
JMenuBar
.
createTableCell(Element)
- Method in class javax.swing.text.
TableView
Deprecated.
Table cells can now be any arbitrary
 View implementation and should be produced by the
 ViewFactory rather than the table.
createTableRow(Element)
- Method in class javax.swing.text.
TableView
Creates a new table row.
createTempDirectory(String, FileAttribute<?>...)
- Static method in class java.nio.file.
Files
Creates a new directory in the default temporary-file directory, using
 the given prefix to generate its name.
createTempDirectory(Path, String, FileAttribute<?>...)
- Static method in class java.nio.file.
Files
Creates a new directory in the specified directory, using the given
 prefix to generate its name.
createTempFile(String, String)
- Static method in class java.io.
File
Creates an empty file in the default temporary-file directory, using
 the given prefix and suffix to generate its name.
createTempFile(String, String, File)
- Static method in class java.io.
File
Creates a new empty file in the specified directory, using the
 given prefix and suffix strings to generate its name.
createTempFile(String, String, FileAttribute<?>...)
- Static method in class java.nio.file.
Files
Creates an empty file in the default temporary-file directory, using
 the given prefix and suffix to generate its name.
createTempFile(Path, String, String, FileAttribute<?>...)
- Static method in class java.nio.file.
Files
Creates a new empty file in the specified directory, using the given
 prefix and suffix strings to generate its name.
createTextNode(String)
- Method in interface org.w3c.dom.
Document
Creates a
Text
node given the specified string.
createTFoot()
- Method in interface org.w3c.dom.html.
HTMLTableElement
Create a table footer row or return an existing one.
createTHead()
- Method in interface org.w3c.dom.html.
HTMLTableElement
Create a table header row or return an existing one.
createThreadDeathRequest()
- Method in interface com.sun.jdi.request.
EventRequestManager
Creates a new disabled
ThreadDeathRequest
.
createThreadStartRequest()
- Method in interface com.sun.jdi.request.
EventRequestManager
Creates a new disabled
ThreadStartRequest
.
createTitledBorder(String)
- Static method in class javax.swing.
BorderFactory
Creates a new titled border with the specified title,
 the default border type (determined by the current look and feel),
 the default text position (determined by the current look and feel),
 the default justification (leading), and the default
 font and text color (determined by the current look and feel).
createTitledBorder(Border)
- Static method in class javax.swing.
BorderFactory
Creates a new titled border with an empty title,
 the specified border object,
 the default text position (determined by the current look and feel),
 the default justification (leading), and the default
 font and text color (determined by the current look and feel).
createTitledBorder(Border, String)
- Static method in class javax.swing.
BorderFactory
Adds a title to an existing border,
 with default positioning (determined by the current look and feel),
 default justification (leading) and the default
 font and text color (determined by the current look and feel).
createTitledBorder(Border, String, int, int)
- Static method in class javax.swing.
BorderFactory
Adds a title to an existing border, with the specified
 positioning and using the default
 font and text color (determined by the current look and feel).
createTitledBorder(Border, String, int, int, Font)
- Static method in class javax.swing.
BorderFactory
Adds a title to an existing border, with the specified
 positioning and font, and using the default text color
 (determined by the current look and feel).
createTitledBorder(Border, String, int, int, Font, Color)
- Static method in class javax.swing.
BorderFactory
Adds a title to an existing border, with the specified
 positioning, font and color.
createToolBarContListener()
- Method in class javax.swing.plaf.basic.
BasicToolBarUI
Returns an instance of
ContainerListener
.
createToolBarFocusListener()
- Method in class javax.swing.plaf.basic.
BasicToolBarUI
Returns an instance of
FocusListener
.
createToolTip()
- Method in class javax.swing.
JComponent
Returns the instance of
JToolTip
that should be used
 to display the tooltip.
createTrack()
- Method in class javax.sound.midi.
Sequence
Creates a new, initially empty track as part of this sequence.
createTrackListener()
- Method in class javax.swing.plaf.basic.
BasicScrollBarUI
Creates a track listener.
createTrackListener(JSlider)
- Method in class javax.swing.plaf.basic.
BasicSliderUI
Creates a track listener.
createTranscoderInstance()
- Method in class javax.imageio.spi.
ImageTranscoderSpi
Returns an instance of the
ImageTranscoder
implementation associated with this service provider.
createTransferable(JComponent)
- Method in class javax.swing.
TransferHandler
Creates a
Transferable
to use as the source for
 a data transfer.
createTransferableProxy(Transferable, boolean)
- Method in class java.awt.dnd.
DropTargetContext
Creates a TransferableProxy to proxy for the specified
 Transferable.
createTransformedArea(AffineTransform)
- Method in class java.awt.geom.
Area
Creates a new
Area
object that contains the same
 geometry as this
Area
transformed by the specified
AffineTransform
.
createTransformedShape(AffineTransform)
- Method in class java.awt.geom.
Path2D
Returns a new
Shape
representing a transformed version
 of this
Path2D
.
createTransformedShape(Shape)
- Method in class java.awt.geom.
AffineTransform
Returns a new
Shape
object defined by the geometry of the
 specified
Shape
after it has been transformed by
 this transform.
createTransition(int)
- Method in class java.time.zone.
ZoneOffsetTransitionRule
Creates a transition instance for the specified year.
createTranslatedChild(int, int)
- Method in class java.awt.image.
Raster
Create a Raster with the same size, SampleModel and DataBuffer
 as this one, but with a different location.
createTreeCellEditor()
- Method in class javax.swing.tree.
DefaultTreeCellEditor
This is invoked if a
TreeCellEditor
is not supplied in the constructor.
createTreeExpansionListener()
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Creates and returns the object responsible for updating the treestate
 when nodes expanded state changes.
createTreeModel(Object)
- Static method in class javax.swing.
JTree
Returns a
TreeModel
wrapping the specified object.
createTreeModelListener()
- Method in class javax.swing.
JTree
Creates and returns an instance of
TreeModelHandler
.
createTreeModelListener()
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Returns a listener that can update the tree when the model changes.
createTreeSelectionListener()
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Creates the listener that updates the display based on selection change
 methods.
createTreeWalker(Node, int, NodeFilter, boolean)
- Method in interface org.w3c.dom.traversal.
DocumentTraversal
Create a new
TreeWalker
over the subtree rooted at the
 specified node.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicButtonUI
Returns an instance of
BasicButtonUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicCheckBoxMenuItemUI
Constructs a new instance of
BasicCheckBoxMenuItemUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicCheckBoxUI
Returns an instance of
BasicCheckBoxUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicColorChooserUI
Returns a new instance of
BasicColorChooserUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicComboBoxUI
Constructs a new instance of
BasicComboBoxUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicDesktopIconUI
Constructs a new instance of
BasicDesktopIconUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicDesktopPaneUI
Constructs a new instance of
BasicDesktopPaneUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicEditorPaneUI
Creates a UI for the JTextPane.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicFileChooserUI
Creates a
BasicFileChooserUI
implementation
 for the specified component.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicFormattedTextFieldUI
Creates a UI for a JFormattedTextField.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicInternalFrameUI
Returns a component UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicLabelUI
Returns an instance of
BasicLabelUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicListUI
Returns a new instance of
BasicListUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicMenuBarUI
Returns a new instance of
BasicMenuBarUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicMenuItemUI
Returns a new instance of
BasicMenuItemUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicMenuUI
Constructs a new instance of
BasicMenuUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicOptionPaneUI
Creates a new
BasicOptionPaneUI
instance.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicPanelUI
Returns an instance of
BasicPanelUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicPasswordFieldUI
Creates a UI for a JPasswordField.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicPopupMenuSeparatorUI
Returns a new instance of
BasicPopupMenuSeparatorUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicPopupMenuUI
Constructs a new instance of
BasicPopupMenuUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicProgressBarUI
Returns a new instance of
BasicProgressBarUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicRadioButtonMenuItemUI
Returns a new instance of
BasicRadioButtonMenuItemUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicRadioButtonUI
Returns an instance of
BasicRadioButtonUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicRootPaneUI
Returns a new instance of
BasicRootPaneUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicScrollBarUI
Creates the UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicScrollPaneUI
Returns a new instance of
BasicScrollPaneUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicSeparatorUI
Returns a new instance of
BasicSeparatorUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicSliderUI
Creates a UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicSpinnerUI
Returns a new instance of BasicSpinnerUI.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicSplitPaneUI
Creates a new instance of
BasicSplitPaneUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Creates a UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicTableHeaderUI
Returns a new instance of
BasicTableHeaderUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicTableUI
Returns a new instance of
BasicTableUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicTextAreaUI
Creates a UI for a JTextArea.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicTextFieldUI
Creates a UI for a JTextField.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicTextPaneUI
Creates a UI for the JTextPane.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicToggleButtonUI
Returns an instance of
BasicToggleButtonUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicToolBarSeparatorUI
Returns a new instance of
BasicToolBarSeparatorUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicToolBarUI
Constructs a new instance of
BasicToolBarUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicToolTipUI
Returns the instance of
BasicToolTipUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicTreeUI
Constructs a new instance of
BasicTreeUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.basic.
BasicViewportUI
Returns an instance of
BasicViewportUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.
ComponentUI
Returns an instance of the UI delegate for the specified component.
createUI(JComponent)
- Static method in class javax.swing.plaf.metal.
MetalButtonUI
Returns an instance of
MetalButtonUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.metal.
MetalCheckBoxUI
Returns an instance of
MetalCheckBoxUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.metal.
MetalComboBoxUI
Constructs an instance of
MetalComboBoxUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.metal.
MetalDesktopIconUI
Constructs a new instance of
MetalDesktopIconUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.metal.
MetalFileChooserUI
Constructs a new instance of
MetalFileChooserUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.metal.
MetalInternalFrameUI
Constructs a new
MetalInternalFrameUI
instance.
createUI(JComponent)
- Static method in class javax.swing.plaf.metal.
MetalLabelUI
Returns an instance of
MetalLabelUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.metal.
MetalMenuBarUI
Creates the
ComponentUI
implementation for the passed
 in component.
createUI(JComponent)
- Static method in class javax.swing.plaf.metal.
MetalPopupMenuSeparatorUI
Constructs a new
MetalPopupMenuSeparatorUI
instance.
createUI(JComponent)
- Static method in class javax.swing.plaf.metal.
MetalProgressBarUI
Constructs an instance of
MetalProgressBarUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.metal.
MetalRadioButtonUI
Returns an instance of
MetalRadioButtonUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.metal.
MetalRootPaneUI
Creates a UI for a
JRootPane
.
createUI(JComponent)
- Static method in class javax.swing.plaf.metal.
MetalScrollBarUI
Constructs a new
MetalScrollBarUI
instance.
createUI(JComponent)
- Static method in class javax.swing.plaf.metal.
MetalScrollPaneUI
Constructs a new
MetalScrollPaneUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.metal.
MetalSeparatorUI
Constructs a new
MetalSeparatorUI
instance.
createUI(JComponent)
- Static method in class javax.swing.plaf.metal.
MetalSliderUI
Constructs a
MetalSliderUI
instance.
createUI(JComponent)
- Static method in class javax.swing.plaf.metal.
MetalSplitPaneUI
Creates a new
MetalSplitPaneUI
instance
createUI(JComponent)
- Static method in class javax.swing.plaf.metal.
MetalTabbedPaneUI
Constructs
MetalTabbedPaneUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.metal.
MetalTextFieldUI
Constructs
MetalTextFieldUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.metal.
MetalToggleButtonUI
Constructs the
MetalToogleButtonUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.metal.
MetalToolBarUI
Constructs an instance of
MetalToolBarUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.metal.
MetalToolTipUI
Returns an instance of the
MetalToolTipUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.metal.
MetalTreeUI
Constructs the
MetalTreeUI
.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiButtonUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiColorChooserUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiComboBoxUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiDesktopIconUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiDesktopPaneUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiFileChooserUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiInternalFrameUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiLabelUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiListUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiMenuBarUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiMenuItemUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiOptionPaneUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiPanelUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiPopupMenuUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiProgressBarUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiRootPaneUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiScrollBarUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiScrollPaneUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiSeparatorUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiSliderUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiSpinnerUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiSplitPaneUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiTabbedPaneUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiTableHeaderUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiTableUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiTextUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiToolBarUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiToolTipUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiTreeUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.multi.
MultiViewportUI
Returns a multiplexing UI instance if any of the auxiliary
LookAndFeel
s supports this UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthButtonUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthCheckBoxMenuItemUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthCheckBoxUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthColorChooserUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthComboBoxUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthDesktopIconUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthDesktopPaneUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthEditorPaneUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthFormattedTextFieldUI
Creates a UI for a JFormattedTextField.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthInternalFrameUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthLabelUI
Returns the LabelUI implementation used for the skins look and feel.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthListUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthLookAndFeel
Creates the Synth look and feel
ComponentUI
for
 the passed in
JComponent
.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthMenuBarUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthMenuItemUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthMenuUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthOptionPaneUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthPanelUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthPasswordFieldUI
Creates a UI for a JPasswordField.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthPopupMenuUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthProgressBarUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthRadioButtonMenuItemUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthRadioButtonUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthRootPaneUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthScrollBarUI
Returns a UI.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthScrollPaneUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthSeparatorUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthSliderUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthSpinnerUI
Returns a new instance of SynthSpinnerUI.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthSplitPaneUI
Creates a new SynthSplitPaneUI instance
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthTabbedPaneUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthTableHeaderUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthTableUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthTextAreaUI
Creates a UI object for a JTextArea.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthTextFieldUI
Creates a UI for a JTextField.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthTextPaneUI
Creates a UI for the JTextPane.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthToggleButtonUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthToolBarUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthToolTipUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthTreeUI
Creates a new UI object for the given component.
createUI(JComponent)
- Static method in class javax.swing.plaf.synth.
SynthViewportUI
Creates a new UI object for the given component.
createUIs(ComponentUI, Vector<ComponentUI>, JComponent)
- Static method in class javax.swing.plaf.multi.
MultiLookAndFeel
Creates the
ComponentUI
objects
 required to present
 the
target
component,
 placing the objects in the
uis
vector and
 returning the
ComponentUI
object
 that best represents the component's UI.
createUnion(Rectangle2D)
- Method in class java.awt.geom.
Rectangle2D
Returns a new
Rectangle2D
object representing the
 union of this
Rectangle2D
with the specified
Rectangle2D
.
createUnion(Rectangle2D)
- Method in class java.awt.geom.
Rectangle2D.Double
Returns a new
Rectangle2D
object representing the
 union of this
Rectangle2D
with the specified
Rectangle2D
.
createUnion(Rectangle2D)
- Method in class java.awt.geom.
Rectangle2D.Float
Returns a new
Rectangle2D
object representing the
 union of this
Rectangle2D
with the specified
Rectangle2D
.
createUnion(Rectangle2D)
- Method in class java.awt.
Rectangle
Returns a new
Rectangle2D
object representing the
 union of this
Rectangle2D
with the specified
Rectangle2D
.
createUnresolved(String, int)
- Static method in class java.net.
InetSocketAddress
Creates an unresolved socket address from a hostname and a port number.
createURLStreamHandler(String)
- Method in interface java.net.
URLStreamHandlerFactory
Creates a new
URLStreamHandler
instance with the specified
 protocol.
createValue(UIDefaults)
- Method in interface javax.swing.
UIDefaults.ActiveValue
Creates the value retrieved from the
UIDefaults
table.
createValue(UIDefaults)
- Method in class javax.swing.
UIDefaults.LazyInputMap
Creates an
InputMap
with the bindings that are
 passed in.
createValue(UIDefaults)
- Method in interface javax.swing.
UIDefaults.LazyValue
Creates the actual value retrieved from the
UIDefaults
table.
createValue(UIDefaults)
- Method in class javax.swing.
UIDefaults.ProxyLazyValue
Creates the value retrieved from the
UIDefaults
table.
createVerticalBox()
- Static method in class javax.swing.
Box
Creates a
Box
that displays its components
 from top to bottom.
createVerticalGlue()
- Static method in class javax.swing.
Box
Creates a vertical glue component.
createVerticalScrollBar()
- Method in class javax.swing.
JScrollPane
Returns a
JScrollPane.ScrollBar
by default.
createVerticalStrut(int)
- Static method in class javax.swing.
Box
Creates an invisible, fixed-height component.
createView(FlowView, int, int, int)
- Method in class javax.swing.text.
FlowView.FlowStrategy
Creates a view that can be used to represent the current piece
 of the flow.
createViewListener()
- Method in class javax.swing.
JViewport
Creates a listener for the view.
createViewport()
- Method in class javax.swing.
JScrollPane
Returns a new
JViewport
by default.
createViewportChangeListener()
- Method in class javax.swing.plaf.basic.
BasicScrollPaneUI
Returns an instance of viewport
ChangeListener
.
createVirtualMachine(Connection)
- Method in interface com.sun.jdi.
VirtualMachineManager
Creates a new virtual machine.
createVirtualMachine(Connection, Process)
- Method in interface com.sun.jdi.
VirtualMachineManager
Create a virtual machine mirror for a target VM.
createVMDeathRequest()
- Method in interface com.sun.jdi.request.
EventRequestManager
Creates a new disabled
VMDeathRequest
.
createVolatileImage(int, int)
- Method in class java.awt.
Component
Creates a volatile off-screen drawable image to be used for double
 buffering.
createVolatileImage(int, int, ImageCapabilities)
- Method in class java.awt.
Component
Creates a volatile off-screen drawable image, with the given
 capabilities.
createVSBChangeListener()
- Method in class javax.swing.plaf.basic.
BasicScrollPaneUI
Returns an instance of vertical scroll bar
ChangeListener
.
createWebRowSet()
- Method in interface javax.sql.rowset.
RowSetFactory
Creates a new instance of a WebRowSet.
createWestPane(JInternalFrame)
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI
Creates the west pane.
createWinListener(JPopupMenu)
- Method in class javax.swing.
JMenu
Creates a window-closing listener for the popup.
createWritableChild(int, int, int, int, int, int, int[])
- Method in class java.awt.image.
WritableRaster
Returns a new WritableRaster which shares all or part of this
 WritableRaster's DataBuffer.
createWritableRaster(SampleModel, DataBuffer, Point)
- Static method in class java.awt.image.
Raster
Creates a WritableRaster with the specified SampleModel and DataBuffer.
createWritableRaster(SampleModel, Point)
- Static method in class java.awt.image.
Raster
Creates a WritableRaster with the specified SampleModel.
createWritableTranslatedChild(int, int)
- Method in class java.awt.image.
WritableRaster
Create a WritableRaster with the same size, SampleModel and DataBuffer
 as this one, but with a different location.
createWriterInstance()
- Method in class javax.imageio.spi.
ImageWriterSpi
Returns an instance of the
ImageWriter
implementation associated with this service provider.
createWriterInstance(Object)
- Method in class javax.imageio.spi.
ImageWriterSpi
Returns an instance of the
ImageWriter
implementation associated with this service provider.
createXAConnectionBuilder()
- Method in interface javax.sql.
XADataSource
Creates a new
XAConnectionBuilder
instance
createXMLEventReader(InputStream)
- Method in class javax.xml.stream.
XMLInputFactory
Create a new XMLEventReader from a java.io.InputStream
createXMLEventReader(InputStream, String)
- Method in class javax.xml.stream.
XMLInputFactory
Create a new XMLEventReader from a java.io.InputStream
createXMLEventReader(Reader)
- Method in class javax.xml.stream.
XMLInputFactory
Create a new XMLEventReader from a reader.
createXMLEventReader(String, InputStream)
- Method in class javax.xml.stream.
XMLInputFactory
Create a new XMLEventReader from a java.io.InputStream
createXMLEventReader(String, Reader)
- Method in class javax.xml.stream.
XMLInputFactory
Create a new XMLEventReader from a reader.
createXMLEventReader(XMLStreamReader)
- Method in class javax.xml.stream.
XMLInputFactory
Create a new XMLEventReader from an XMLStreamReader.
createXMLEventReader(Source)
- Method in class javax.xml.stream.
XMLInputFactory
Create a new XMLEventReader from a JAXP source.
createXMLEventWriter(OutputStream)
- Method in class javax.xml.stream.
XMLOutputFactory
Create a new XMLEventWriter that writes to a stream
createXMLEventWriter(OutputStream, String)
- Method in class javax.xml.stream.
XMLOutputFactory
Create a new XMLEventWriter that writes to a stream
createXMLEventWriter(Writer)
- Method in class javax.xml.stream.
XMLOutputFactory
Create a new XMLEventWriter that writes to a writer
createXMLEventWriter(Result)
- Method in class javax.xml.stream.
XMLOutputFactory
Create a new XMLEventWriter that writes to a JAXP result.
createXMLReader()
- Static method in class org.xml.sax.helpers.
XMLReaderFactory
Deprecated.
Obtains a new instance of a
XMLReader
.
createXMLReader(String)
- Static method in class org.xml.sax.helpers.
XMLReaderFactory
Deprecated.
Attempt to create an XML reader from a class name.
createXMLStreamReader(InputStream)
- Method in class javax.xml.stream.
XMLInputFactory
Create a new XMLStreamReader from a java.io.InputStream.
createXMLStreamReader(InputStream, String)
- Method in class javax.xml.stream.
XMLInputFactory
Create a new XMLStreamReader from a java.io.InputStream.
createXMLStreamReader(Reader)
- Method in class javax.xml.stream.
XMLInputFactory
Create a new XMLStreamReader from a reader.
createXMLStreamReader(String, InputStream)
- Method in class javax.xml.stream.
XMLInputFactory
Create a new XMLStreamReader from a java.io.InputStream.
createXMLStreamReader(String, Reader)
- Method in class javax.xml.stream.
XMLInputFactory
Create a new XMLStreamReader from a java.io.InputStream.
createXMLStreamReader(Source)
- Method in class javax.xml.stream.
XMLInputFactory
Create a new XMLStreamReader from a JAXP source.
createXMLStreamWriter(OutputStream)
- Method in class javax.xml.stream.
XMLOutputFactory
Create a new XMLStreamWriter that writes to a stream
createXMLStreamWriter(OutputStream, String)
- Method in class javax.xml.stream.
XMLOutputFactory
Create a new XMLStreamWriter that writes to a stream
createXMLStreamWriter(Writer)
- Method in class javax.xml.stream.
XMLOutputFactory
Create a new XMLStreamWriter that writes to a writer
createXMLStreamWriter(Result)
- Method in class javax.xml.stream.
XMLOutputFactory
Create a new XMLStreamWriter that writes to a JAXP result.
createZipEntry(String)
- Method in class java.util.jar.
JarInputStream
Creates a new
JarEntry
(
ZipEntry
) for the
 specified JAR file entry name.
createZipEntry(String)
- Method in class java.util.zip.
ZipInputStream
Creates a new
ZipEntry
object for the specified
 entry name.
createZone(int, int)
- Method in class javax.swing.text.
ZoneView
Create a view to represent a zone for the given
 range within the model (which should be within
 the range of this objects responsibility).
Creating a connector client
- Search tag in package javax.management.remote
Section
Creating a connector server
- Search tag in package javax.management.remote
Section
Creating and starting threads
- Search tag in class java.lang.Thread
Section
Creating an RMI connector client
- Search tag in package javax.management.remote.rmi
Section
Creating an RMI connector server
- Search tag in package javax.management.remote.rmi
Section
Creating MBeans in the MBean Server
- Search tag in package javax.management
Section
Creating Objects
- Search tag in package javax.xml.transform
Section
Creating XMLSignatures from scratch
- Search tag in class javax.xml.crypto.dsig.XMLSignatureFactory
Section
creationTime()
- Method in interface java.nio.file.attribute.
BasicFileAttributes
Returns the creation time.
Credential Acquisition
- Search tag in package org.ietf.jgss
Section
CredentialException
- Exception Class in
javax.security.auth.login
A generic credential exception.
CredentialException()
- Constructor for exception class javax.security.auth.login.
CredentialException
Constructs a CredentialException with no detail message.
CredentialException(String)
- Constructor for exception class javax.security.auth.login.
CredentialException
Constructs a CredentialException with the specified detail message.
CredentialExpiredException
- Exception Class in
javax.security.auth.login
Signals that a
Credential
has expired.
CredentialExpiredException()
- Constructor for exception class javax.security.auth.login.
CredentialExpiredException
Constructs a CredentialExpiredException with no detail message.
CredentialExpiredException(String)
- Constructor for exception class javax.security.auth.login.
CredentialExpiredException
Constructs a CredentialExpiredException with the specified detail
 message.
CredentialNotFoundException
- Exception Class in
javax.security.auth.login
Signals that a credential was not found.
CredentialNotFoundException()
- Constructor for exception class javax.security.auth.login.
CredentialNotFoundException
Constructs a CredentialNotFoundException with no detail message.
CredentialNotFoundException(String)
- Constructor for exception class javax.security.auth.login.
CredentialNotFoundException
Constructs a CredentialNotFoundException with the specified
 detail message.
CREDENTIALS
- Static variable in interface javax.management.remote.
JMXConnector
Name of the attribute that specifies the credentials to send
 to the connector server during connection.
CREDENTIALS
- Static variable in class javax.security.sasl.
Sasl
The name of a property that specifies the credentials to use.
CREDENTIALS_EXPIRED
- Static variable in exception class org.ietf.jgss.
GSSException
Expired credentials.
CREDENTIALS_FILTER_PATTERN
- Static variable in class javax.management.remote.rmi.
RMIConnectorServer
Name of the attribute that specifies an
ObjectInputFilter
pattern string to filter classes acceptable
 for
RMIServer.newClient()
remote method call.
CRITICAL
- Static variable in interface javax.naming.ldap.
Control
Indicates a critical control.
criticality
- Variable in class javax.naming.ldap.
BasicControl
The control's criticality.
CRL
- Class in
java.security.cert
This class is an abstraction of certificate revocation lists (CRLs) that
 have different formats but important common uses.
CRL(String)
- Constructor for class java.security.cert.
CRL
Creates a CRL of the specified type.
CRLException
- Exception Class in
java.security.cert
CRL (Certificate Revocation List) Exception.
CRLException()
- Constructor for exception class java.security.cert.
CRLException
Constructs a CRLException with no detail message.
CRLException(String)
- Constructor for exception class java.security.cert.
CRLException
Constructs a CRLException with the specified detail
 message.
CRLException(String, Throwable)
- Constructor for exception class java.security.cert.
CRLException
Creates a
CRLException
with the specified
 detail message and cause.
CRLException(Throwable)
- Constructor for exception class java.security.cert.
CRLException
Creates a
CRLException
with the specified cause
 and a detail message of
(cause==null ? null : cause.toString())
(which typically contains the class and detail message of
cause
).
CRLReason
- Enum Class in
java.security.cert
The CRLReason enumeration specifies the reason that a certificate
 is revoked, as defined in
RFC 5280: Internet X.509 Public Key Infrastructure Certificate and CRL
 Profile
.
CRLSelector
- Interface in
java.security.cert
A selector that defines a set of criteria for selecting
CRL
s.
CropImageFilter
- Class in
java.awt.image
An ImageFilter class for cropping images.
CropImageFilter(int, int, int, int)
- Constructor for class java.awt.image.
CropImageFilter
Constructs a CropImageFilter that extracts the absolute rectangular
 region of pixels from its source Image as specified by the x, y,
 w, and h parameters.
CROSS_JOIN
- Static variable in interface javax.sql.rowset.
JoinRowSet
An ANSI-style
JOIN
providing a cross product of two tables
CROSSHAIR_CURSOR
- Static variable in class java.awt.
Cursor
The crosshair cursor type.
CROSSHAIR_CURSOR
- Static variable in class java.awt.
Frame
Deprecated.
replaced by
Cursor.CROSSHAIR_CURSOR
.
Cross-language interoperability
- Search tag in module jdk.dynalink
Section
Cross-module access checks
- Search tag in class java.lang.invoke.MethodHandles.Lookup
Section
Cross-module lookups
- Search tag in class java.lang.invoke.MethodHandles.Lookup
Section
CryptoPrimitive
- Enum Class in
java.security
An enumeration of cryptographic primitives.
CS_CIEXYZ
- Static variable in class java.awt.color.
ColorSpace
The built-in CIEXYZ conversion color space defined above.
CS_GRAY
- Static variable in class java.awt.color.
ColorSpace
The built-in linear gray scale color space.
CS_LINEAR_RGB
- Static variable in class java.awt.color.
ColorSpace
The built-in linear RGB color space.
CS_PYCC
- Static variable in class java.awt.color.
ColorSpace
The built-in Photo YCC conversion color space.
CS_sRGB
- Static variable in class java.awt.color.
ColorSpace
The built-in sRGB color space defined at
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html
.
CSS
- Class in
javax.swing.text.html
Defines a set of
CSS attributes
as a typesafe enumeration.
CSS()
- Constructor for class javax.swing.text.html.
CSS
Constructs a CSS object.
CSS_ATTR
- Static variable in interface org.w3c.dom.css.
CSSPrimitiveValue
The value is a attribute function.
CSS_CM
- Static variable in interface org.w3c.dom.css.
CSSPrimitiveValue
The value is a length (cm).
CSS_COUNTER
- Static variable in interface org.w3c.dom.css.
CSSPrimitiveValue
The value is a counter or counters function.
CSS_CUSTOM
- Static variable in interface org.w3c.dom.css.
CSSValue
The value is a custom value.
CSS_DEG
- Static variable in interface org.w3c.dom.css.
CSSPrimitiveValue
The value is an angle (deg).
CSS_DIMENSION
- Static variable in interface org.w3c.dom.css.
CSSPrimitiveValue
The value is a number with an unknown dimension.
CSS_EMS
- Static variable in interface org.w3c.dom.css.
CSSPrimitiveValue
The value is a length (ems).
CSS_EXS
- Static variable in interface org.w3c.dom.css.
CSSPrimitiveValue
The value is a length (exs).
CSS_GRAD
- Static variable in interface org.w3c.dom.css.
CSSPrimitiveValue
The value is an angle (grad).
CSS_HZ
- Static variable in interface org.w3c.dom.css.
CSSPrimitiveValue
The value is a frequency (Hz).
CSS_IDENT
- Static variable in interface org.w3c.dom.css.
CSSPrimitiveValue
The value is an identifier.
CSS_IN
- Static variable in interface org.w3c.dom.css.
CSSPrimitiveValue
The value is a length (in).
CSS_INHERIT
- Static variable in interface org.w3c.dom.css.
CSSValue
The value is inherited and the
cssText
contains "inherit".
CSS_KHZ
- Static variable in interface org.w3c.dom.css.
CSSPrimitiveValue
The value is a frequency (kHz).
CSS_MM
- Static variable in interface org.w3c.dom.css.
CSSPrimitiveValue
The value is a length (mm).
CSS_MS
- Static variable in interface org.w3c.dom.css.
CSSPrimitiveValue
The value is a time (ms).
CSS_NUMBER
- Static variable in interface org.w3c.dom.css.
CSSPrimitiveValue
The value is a simple number.
CSS_PC
- Static variable in interface org.w3c.dom.css.
CSSPrimitiveValue
The value is a length (pc).
CSS_PERCENTAGE
- Static variable in interface org.w3c.dom.css.
CSSPrimitiveValue
The value is a percentage.
CSS_PRIMITIVE_VALUE
- Static variable in interface org.w3c.dom.css.
CSSValue
The value is a primitive value and an instance of the
CSSPrimitiveValue
interface can be obtained by using
 binding-specific casting methods on this instance of the
CSSValue
interface.
CSS_PT
- Static variable in interface org.w3c.dom.css.
CSSPrimitiveValue
The value is a length (pt).
CSS_PX
- Static variable in interface org.w3c.dom.css.
CSSPrimitiveValue
The value is a length (px).
CSS_RAD
- Static variable in interface org.w3c.dom.css.
CSSPrimitiveValue
The value is an angle (rad).
CSS_RECT
- Static variable in interface org.w3c.dom.css.
CSSPrimitiveValue
The value is a rect function.
CSS_RGBCOLOR
- Static variable in interface org.w3c.dom.css.
CSSPrimitiveValue
The value is a RGB color.
CSS_S
- Static variable in interface org.w3c.dom.css.
CSSPrimitiveValue
The value is a time (s).
CSS_STRING
- Static variable in interface org.w3c.dom.css.
CSSPrimitiveValue
The value is a STRING.
CSS_UNKNOWN
- Static variable in interface org.w3c.dom.css.
CSSPrimitiveValue
The value is not a recognized CSS2 value.
CSS_URI
- Static variable in interface org.w3c.dom.css.
CSSPrimitiveValue
The value is a URI.
CSS_VALUE_LIST
- Static variable in interface org.w3c.dom.css.
CSSValue
The value is a
CSSValue
list and an instance of the
CSSValueList
interface can be obtained by using
 binding-specific casting methods on this instance of the
CSSValue
interface.
CSS.Attribute
- Class in
javax.swing.text.html
Definitions to be used as a key on AttributeSet's
 that might hold CSS attributes.
CSS2Properties
- Interface in
org.w3c.dom.css
The
CSS2Properties
interface represents a convenience
 mechanism for retrieving and setting properties within a
CSSStyleDeclaration
.
CSSCharsetRule
- Interface in
org.w3c.dom.css
The
CSSCharsetRule
interface represents a @charset rule in a
 CSS style sheet.
CSSFontFaceRule
- Interface in
org.w3c.dom.css
The
CSSFontFaceRule
interface represents a @font-face rule in
 a CSS style sheet.
CSSImportRule
- Interface in
org.w3c.dom.css
The
CSSImportRule
interface represents a @import rule within
 a CSS style sheet.
CSSMediaRule
- Interface in
org.w3c.dom.css
The
CSSMediaRule
interface represents a @media rule in a CSS
 style sheet.
CSSPageRule
- Interface in
org.w3c.dom.css
The
CSSPageRule
interface represents a @page rule within a
 CSS style sheet.
CSSPrimitiveValue
- Interface in
org.w3c.dom.css
The
CSSPrimitiveValue
interface represents a single CSS value
 .
CSSRule
- Interface in
org.w3c.dom.css
The
CSSRule
interface is the abstract base interface for any
 type of CSS statement.
CSSRuleList
- Interface in
org.w3c.dom.css
The
CSSRuleList
interface provides the abstraction of an
 ordered collection of CSS rules.
CSSStyleDeclaration
- Interface in
org.w3c.dom.css
The
CSSStyleDeclaration
interface represents a single CSS
 declaration block.
CSSStyleRule
- Interface in
org.w3c.dom.css
The
CSSStyleRule
interface represents a single rule set in a
 CSS style sheet.
CSSStyleSheet
- Interface in
org.w3c.dom.css
The
CSSStyleSheet
interface is a concrete interface used to
 represent a CSS style sheet i.e., a style sheet whose content type is
 "text/css".
CSSUnknownRule
- Interface in
org.w3c.dom.css
The
CSSUnknownRule
interface represents an at-rule not
 supported by this user agent.
CSSValue
- Interface in
org.w3c.dom.css
The
CSSValue
interface represents a simple or a complex
 value.
CSSValueList
- Interface in
org.w3c.dom.css
The
CSSValueList
interface provides the abstraction of an
 ordered collection of CSS values.
CTRL_DOWN_MASK
- Static variable in class java.awt.event.
InputEvent
The Control key extended modifier constant.
CTRL_MASK
- Static variable in class java.awt.event.
ActionEvent
The control modifier.
CTRL_MASK
- Static variable in class java.awt.
Event
Deprecated.
This flag indicates that the Control key was down when the event
 occurred.
CTRL_MASK
- Static variable in class java.awt.event.
InputEvent
Deprecated.
It is recommended that CTRL_DOWN_MASK and
InputEvent.getModifiersEx()
be used instead
ctrlx
- Variable in class java.awt.geom.
QuadCurve2D.Double
The X coordinate of the control point of the quadratic curve
 segment.
ctrlx
- Variable in class java.awt.geom.
QuadCurve2D.Float
The X coordinate of the control point of the quadratic curve
 segment.
ctrlx1
- Variable in class java.awt.geom.
CubicCurve2D.Double
The X coordinate of the first control point
 of the cubic curve segment.
ctrlx1
- Variable in class java.awt.geom.
CubicCurve2D.Float
The X coordinate of the first control point
 of the cubic curve segment.
ctrlx2
- Variable in class java.awt.geom.
CubicCurve2D.Double
The X coordinate of the second control point
 of the cubic curve segment.
ctrlx2
- Variable in class java.awt.geom.
CubicCurve2D.Float
The X coordinate of the second control point
 of the cubic curve segment.
ctrly
- Variable in class java.awt.geom.
QuadCurve2D.Double
The Y coordinate of the control point of the quadratic curve
 segment.
ctrly
- Variable in class java.awt.geom.
QuadCurve2D.Float
The Y coordinate of the control point of the quadratic curve
 segment.
ctrly1
- Variable in class java.awt.geom.
CubicCurve2D.Double
The Y coordinate of the first control point
 of the cubic curve segment.
ctrly1
- Variable in class java.awt.geom.
CubicCurve2D.Float
The Y coordinate of the first control point
 of the cubic curve segment.
ctrly2
- Variable in class java.awt.geom.
CubicCurve2D.Double
The Y coordinate of the second control point
 of the cubic curve segment.
ctrly2
- Variable in class java.awt.geom.
CubicCurve2D.Float
The Y coordinate of the second control point
 of the cubic curve segment.
CubicCurve2D
- Class in
java.awt.geom
The
CubicCurve2D
class defines a cubic parametric curve
 segment in
(x,y)
coordinate space.
CubicCurve2D()
- Constructor for class java.awt.geom.
CubicCurve2D
This is an abstract class that cannot be instantiated directly.
CubicCurve2D.Double
- Class in
java.awt.geom
A cubic parametric curve segment specified with
double
coordinates.
CubicCurve2D.Float
- Class in
java.awt.geom
A cubic parametric curve segment specified with
float
coordinates.
CUNEIFORM
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Cuneiform".
CUNEIFORM
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Cuneiform" Unicode character block.
CUNEIFORM_NUMBERS_AND_PUNCTUATION
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Cuneiform Numbers and Punctuation" Unicode
 character block.
Currency
- Class in
java.util
Represents a currency.
CURRENCY
- Static variable in class java.text.
NumberFormat.Field
Constant identifying the currency field.
CURRENCY_SYMBOL
- Static variable in class java.lang.
Character
General category "Sc" in the Unicode specification.
CURRENCY_SYMBOLS
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Currency Symbols" Unicode character block.
CurrencyNameProvider
- Class in
java.util.spi
An abstract class for service providers that
 provide localized currency symbols and display names for the
Currency
class.
CurrencyNameProvider()
- Constructor for class java.util.spi.
CurrencyNameProvider
Sole constructor.
current()
- Static method in interface java.lang.
ProcessHandle
Returns a ProcessHandle for the current process.
current()
- Method in class java.text.
BreakIterator
Returns character index of the text boundary that was most
 recently returned by next(), next(int), previous(), first(), last(),
 following(int) or preceding(int).
current()
- Method in interface java.text.
CharacterIterator
Gets the character at the current position (as returned by getIndex()).
current()
- Method in class java.text.
StringCharacterIterator
Implements CharacterIterator.current() for String.
current()
- Static method in class java.util.concurrent.
ThreadLocalRandom
Returns the current thread's
ThreadLocalRandom
object.
current()
- Static method in class javax.security.auth.
Subject
Returns the current subject.
current()
- Method in class javax.swing.text.
ElementIterator
Fetches the current
Element
.
current()
- Method in class javax.swing.text.
Segment
Gets the character at the current position (as returned by getIndex()).
CURRENT
- Static variable in interface javax.swing.text.html.parser.
DTDConstants
The DTD constant corresponds to CURRENT
currentCellRenderer
- Variable in class javax.swing.plaf.basic.
BasicTreeUI
Renderer that is being used to do the actual cell drawing.
currentContendedMonitor()
- Method in interface com.sun.jdi.
ThreadReference
Returns an
ObjectReference
for the monitor, if any,
 for which this thread is currently waiting.
currentManager(Component)
- Static method in class javax.swing.
RepaintManager
Return the RepaintManager for the calling thread given a Component.
currentManager(JComponent)
- Static method in class javax.swing.
RepaintManager
Return the RepaintManager for the calling thread given a JComponent.
currentMouseX
- Variable in class javax.swing.plaf.basic.
BasicScrollBarUI.TrackListener
Current mouse x position
currentMouseX
- Variable in class javax.swing.plaf.basic.
BasicSliderUI.TrackListener
Current mouse x.
currentMouseY
- Variable in class javax.swing.plaf.basic.
BasicScrollBarUI.TrackListener
Current mouse y position
currentMouseY
- Variable in class javax.swing.plaf.basic.
BasicSliderUI.TrackListener
Current mouse y.
currentSegment(double[])
- Method in class java.awt.geom.
FlatteningPathIterator
Returns the coordinates and type of the current path segment in
 the iteration.
currentSegment(double[])
- Method in interface java.awt.geom.
PathIterator
Returns the coordinates and type of the current path segment in
 the iteration.
currentSegment(float[])
- Method in class java.awt.geom.
FlatteningPathIterator
Returns the coordinates and type of the current path segment in
 the iteration.
currentSegment(float[])
- Method in interface java.awt.geom.
PathIterator
Returns the coordinates and type of the current path segment in
 the iteration.
currentThread()
- Static method in class java.lang.
Thread
Returns the Thread object for the current thread.
currentTimeMillis()
- Static method in class java.lang.
System
Returns the current time in milliseconds.
currentValuePane
- Variable in class javax.swing.plaf.basic.
BasicComboBoxUI
Used to render the currently selected item in the combo box.
Cursor
- Class in
java.awt
A class to encapsulate the bitmap representation of the mouse cursor.
Cursor(int)
- Constructor for class java.awt.
Cursor
Creates a new cursor object with the specified type.
Cursor(String)
- Constructor for class java.awt.
Cursor
Creates a new custom cursor object with the specified name.
cursorMoved(RowSetEvent)
- Method in interface javax.sql.
RowSetListener
Notifies registered listeners that a
RowSet
object's
 cursor has moved.
curveTo(double, double, double, double, double, double)
- Method in class java.awt.geom.
Path2D
Adds a curved segment, defined by three new points, to the path by
 drawing a Bézier curve that intersects both the current
 coordinates and the specified coordinates
(x3,y3)
,
 using the specified points
(x1,y1)
and
(x2,y2)
as
 Bézier control points.
curveTo(double, double, double, double, double, double)
- Method in class java.awt.geom.
Path2D.Double
Adds a curved segment, defined by three new points, to the path by
 drawing a Bézier curve that intersects both the current
 coordinates and the specified coordinates
(x3,y3)
,
 using the specified points
(x1,y1)
and
(x2,y2)
as
 Bézier control points.
curveTo(double, double, double, double, double, double)
- Method in class java.awt.geom.
Path2D.Float
Adds a curved segment, defined by three new points, to the path by
 drawing a Bézier curve that intersects both the current
 coordinates and the specified coordinates
(x3,y3)
,
 using the specified points
(x1,y1)
and
(x2,y2)
as
 Bézier control points.
curveTo(float, float, float, float, float, float)
- Method in class java.awt.geom.
Path2D.Float
Adds a curved segment, defined by three new points, to the path by
 drawing a Bézier curve that intersects both the current
 coordinates and the specified coordinates
(x3,y3)
,
 using the specified points
(x1,y1)
and
(x2,y2)
as
 Bézier control points.
CUSTOM_CURSOR
- Static variable in class java.awt.
Cursor
The type associated with all custom cursors.
CUSTOM_DIALOG
- Static variable in class javax.swing.
JFileChooser
Type value indicating that the
JFileChooser
supports a
 developer-specified file operation.
CUSTOM_RENDERED_CUSTOM
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "CustomRendered" tag.
CUSTOM_RENDERED_NORMAL
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "CustomRendered" tag.
Custom arenas
- Search tag in interface java.lang.foreign.Arena
Section
Customizer
- Interface in
java.beans
A customizer class provides a complete custom GUI for customizing
 a target Java Bean.
Custom Mapping
- Search tag in package javax.sql.rowset.serial
Section
Custom Mapping of UDTs
- Search tag in package java.sql
Section
cut()
- Method in class javax.swing.
JPasswordField
Invokes
provideErrorFeedback
on the current
 look and feel, which typically initiates an error beep.
cut()
- Method in class javax.swing.text.
JTextComponent
Transfers the currently selected range in the associated
 text model to the system clipboard, removing the contents
 from the model.
cut(int, int)
- Method in interface javax.accessibility.
AccessibleEditableText
Cuts the text between two indices into the system clipboard.
cut(int, int)
- Method in class javax.swing.
JSpinner.AccessibleJSpinner
Cuts the text between two indices into the system clipboard.
cut(int, int)
- Method in class javax.swing.text.
JTextComponent.AccessibleJTextComponent
Cuts the text between two indices into the system clipboard.
cutAction
- Static variable in class javax.swing.text.
DefaultEditorKit
Name of the action to cut the selected region
 and place the contents into the system clipboard.
CutAction()
- Constructor for class javax.swing.text.
DefaultEditorKit.CutAction
Create this object with the appropriate identifier.
cyan
- Static variable in class java.awt.
Color
The color cyan.
CYAN
- Static variable in class java.awt.
Color
The color cyan.
CyclicBarrier
- Class in
java.util.concurrent
A synchronization aid that allows a set of threads to all wait for
 each other to reach a common barrier point.
CyclicBarrier(int)
- Constructor for class java.util.concurrent.
CyclicBarrier
Creates a new
CyclicBarrier
that will trip when the
 given number of parties (threads) are waiting upon it, and
 does not perform a predefined action when the barrier is tripped.
CyclicBarrier(int, Runnable)
- Constructor for class java.util.concurrent.
CyclicBarrier
Creates a new
CyclicBarrier
that will trip when the
 given number of parties (threads) are waiting upon it, and which
 will execute the given barrier action when the barrier is tripped,
 performed by the last thread entering the barrier.
CYPRIOT
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Cypriot".
CYPRIOT_SYLLABARY
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Cypriot Syllabary" Unicode character block.
CYPRO_MINOAN
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Cypro Minoan".
CYPRO_MINOAN
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Cypro-Minoan" Unicode
 character block.
CYRILLIC
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Cyrillic".
CYRILLIC
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Cyrillic" Unicode character block.
CYRILLIC_EXTENDED_A
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Cyrillic Extended-A" Unicode character block.
CYRILLIC_EXTENDED_B
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Cyrillic Extended-B" Unicode character block.
CYRILLIC_EXTENDED_C
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Cyrillic Extended-C" Unicode
 character block.
CYRILLIC_EXTENDED_D
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Cyrillic Extended-D" Unicode
 character block.
CYRILLIC_SUPPLEMENTARY
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Cyrillic Supplement" Unicode character block.
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
_
All Classes and Interfaces
|
All Packages
|
Constant Field Values
|
Serialized Form
|
System Properties
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.