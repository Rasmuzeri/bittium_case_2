W-Index (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Index
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
_
All Classes and Interfaces
|
All Packages
|
Constant Field Values
|
Serialized Form
|
System Properties
W
2.0 WebRowSet States
- Search tag in interface javax.sql.rowset.WebRowSet
Section
W_RESIZE_CURSOR
- Static variable in class java.awt.
Cursor
The west-resize cursor type.
W_RESIZE_CURSOR
- Static variable in class java.awt.
Frame
Deprecated.
replaced by
Cursor.W_RESIZE_CURSOR
.
W3C_LENGTH_UNITS
- Static variable in class javax.swing.
JEditorPane
Key for a client property used to indicate whether
w3c compliant
length units are used for html rendering.
W3C_XML_SCHEMA_INSTANCE_NS_URI
- Static variable in class javax.xml.
XMLConstants
W3C XML Schema Instance Namespace URI.
W3C_XML_SCHEMA_NS_URI
- Static variable in class javax.xml.
XMLConstants
W3C XML Schema Namespace URI.
W3C_XPATH_DATATYPE_NS_URI
- Static variable in class javax.xml.
XMLConstants
W3C XPath Datatype Namespace URI.
W3C XML Schema 1.0
- Search tag in javax.xml.validation.SchemaFactory.newSchema()
Section
W3C XML Schema 1.0
- Search tag in javax.xml.validation.SchemaFactory.newSchema(Source[])
Section
WAIS
- Static variable in class javax.print.attribute.standard.
ReferenceUriSchemesSupported
Wide Area Information Server (WAIS) protocol.
wait()
- Method in class java.lang.
Object
Causes the current thread to wait until it is awakened, typically
 by being
notified
or
interrupted
.
wait(long)
- Method in class java.lang.
Object
Causes the current thread to wait until it is awakened, typically
 by being
notified
or
interrupted
, or until a
 certain amount of real time has elapsed.
wait(long, int)
- Method in class java.lang.
Object
Causes the current thread to wait until it is awakened, typically
 by being
notified
or
interrupted
, or until a
 certain amount of real time has elapsed.
WAIT_CURSOR
- Static variable in class java.awt.
Cursor
The wait cursor type.
WAIT_CURSOR
- Static variable in class java.awt.
Frame
Deprecated.
replaced by
Cursor.WAIT_CURSOR
.
waitFor()
- Method in class java.lang.
Process
Causes the current thread to wait, if necessary, until the
 process represented by this
Process
object has
 terminated.
waitFor(long, TimeUnit)
- Method in class java.lang.
Process
Causes the current thread to wait, if necessary, until the
 process represented by this
Process
object has
 terminated, or the specified waiting time elapses.
waitForAll()
- Method in class java.awt.
MediaTracker
Starts loading all images tracked by this media tracker.
waitForAll(long)
- Method in class java.awt.
MediaTracker
Starts loading all images tracked by this media tracker.
waitForCardAbsent(long)
- Method in class javax.smartcardio.
CardTerminal
Waits until a card is absent in this terminal or the timeout
 expires.
waitForCardPresent(long)
- Method in class javax.smartcardio.
CardTerminal
Waits until a card is present in this terminal or the timeout
 expires.
waitForChange()
- Method in class javax.smartcardio.
CardTerminals
Waits for card insertion or removal in any of the terminals of this
 object.
waitForChange(long)
- Method in class javax.smartcardio.
CardTerminals
Waits for card insertion or removal in any of the terminals of this
 object or until the timeout expires.
waitForID(int)
- Method in class java.awt.
MediaTracker
Starts loading all images tracked by this media tracker with the
 specified identifier.
waitForID(int, long)
- Method in class java.awt.
MediaTracker
Starts loading all images tracked by this media tracker with the
 specified identifier.
waitForIdle()
- Method in class java.awt.
Robot
Waits until all events currently on the event queue have been processed.
waitForWork()
- Method in class javax.swing.text.
LayoutQueue
Used by the worker thread to get a new task to execute.
WAITING
- Enum constant in enum class java.lang.
Thread.State
Thread state for a waiting thread.
waitingThreads()
- Method in interface com.sun.jdi.
ObjectReference
Returns a List containing a
ThreadReference
for
 each thread currently waiting for this object's monitor.
wakeup()
- Method in class java.nio.channels.
Selector
Causes the first selection operation that has not yet returned to return
 immediately.
walk(Path, int, FileVisitOption...)
- Static method in class java.nio.file.
Files
Return a
Stream
that is lazily populated with
Path
by walking the file tree rooted at a given starting file.
walk(Path, FileVisitOption...)
- Static method in class java.nio.file.
Files
Return a
Stream
that is lazily populated with
Path
by walking the file tree rooted at a given starting file.
walk(Function<? super Stream<StackWalker.StackFrame>, ? extends T>)
- Method in class java.lang.
StackWalker
Applies the given function to the stream of
StackFrame
s
 for the current thread, traversing from the top frame of the stack,
 which is the method calling this
walk
method.
walkFileTree(Path, FileVisitor<? super Path>)
- Static method in class java.nio.file.
Files
Walks a file tree.
walkFileTree(Path, Set<FileVisitOption>, int, FileVisitor<? super Path>)
- Static method in class java.nio.file.
Files
Walks a file tree.
WALL
- Enum constant in enum class java.time.zone.
ZoneOffsetTransitionRule.TimeDefinition
The local date-time is expressed in terms of the wall offset.
WALL_TIME
- Static variable in class java.util.
SimpleTimeZone
Constant for a mode of start or end time specified as wall clock
 time.
WANCHO
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Wancho".
WANCHO
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Wancho" Unicode
 character block.
WANTS_INPUT_PROPERTY
- Static variable in class javax.swing.
JOptionPane
Bound property name for
wantsInput
.
wantsInput
- Variable in class javax.swing.
JOptionPane
If true, a UI widget will be provided to the user to get input.
WARANG_CITI
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Warang Citi".
WARANG_CITI
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Warang Citi" Unicode character block.
warning(String)
- Method in class java.util.logging.
Logger
Log a WARNING message.
warning(Supplier<String>)
- Method in class java.util.logging.
Logger
Log a WARNING message, which is only to be constructed if the logging
 level is such that the message will actually be logged.
warning(TransformerException)
- Method in interface javax.xml.transform.
ErrorListener
Receive notification of a warning.
warning(SAXParseException)
- Method in interface org.xml.sax.
ErrorHandler
Receive notification of a warning.
warning(SAXParseException)
- Method in class org.xml.sax.
HandlerBase
Deprecated.
Receive notification of a parser warning.
warning(SAXParseException)
- Method in class org.xml.sax.helpers.
DefaultHandler
Receive notification of a parser warning.
warning(SAXParseException)
- Method in class org.xml.sax.helpers.
XMLFilterImpl
Filter a warning event.
WARNING
- Enum constant in enum class java.awt.
TrayIcon.MessageType
A warning message
WARNING
- Enum constant in enum class java.lang.
System.Logger.Level
WARNING
level: usually used to log warning messages.
WARNING
- Enum constant in enum class javax.tools.
Diagnostic.Kind
Problem which does not usually prevent the tool from
 completing normally.
WARNING
- Static variable in class java.util.logging.
Level
WARNING is a message level indicating a potential problem.
WARNING
- Static variable in class javax.print.attribute.standard.
Severity
Indicates that the
PrinterStateReason
is a
 "warning."
WARNING
- Static variable in class javax.security.auth.callback.
ConfirmationCallback
WARNING message type.
WARNING
- Static variable in class javax.security.auth.callback.
TextOutputCallback
Warning message.
WARNING_DIALOG
- Static variable in class javax.swing.
JRootPane
Constant used for the windowDecorationStyle property.
WARNING_MESSAGE
- Static variable in class javax.swing.
JOptionPane
Used for warning messages.
warningListeners
- Variable in class javax.imageio.
ImageReader
A
List
of currently registered
IIOReadWarningListener
s, initialized by default to
null
, which is synonymous with an empty
List
.
warningListeners
- Variable in class javax.imageio.
ImageWriter
A
List
of currently registered
IIOWriteWarningListener
s, initialized by default to
null
, which is synonymous with an empty
List
.
warningLocales
- Variable in class javax.imageio.
ImageReader
A
List
of the
Locale
s associated with
 each currently registered
IIOReadWarningListener
,
 initialized by default to
null
, which is
 synonymous with an empty
List
.
warningLocales
- Variable in class javax.imageio.
ImageWriter
A
List
of
Locale
s, one for each
 element of
warningListeners
, initialized by default
null
, which is synonymous with an empty
List
.
warningOccurred(ImageReader, String)
- Method in interface javax.imageio.event.
IIOReadWarningListener
Reports the occurrence of a non-fatal error in decoding.
warningOccurred(ImageWriter, int, String)
- Method in interface javax.imageio.event.
IIOWriteWarningListener
Reports the occurrence of a non-fatal error in encoding.
wasFocused
- Variable in class javax.swing.plaf.basic.
BasicMenuUI.ChangeHandler
The component that was focused.
wasIcon(JInternalFrame)
- Method in class javax.swing.
DefaultDesktopManager
Returns
true
if the component has been iconized
 and the bounds of the
desktopIcon
are valid,
 otherwise returns
false
.
wasNull()
- Method in interface java.sql.
CallableStatement
Retrieves whether the last OUT parameter read had the value of
 SQL
NULL
.
wasNull()
- Method in interface java.sql.
ResultSet
Reports whether
 the last column read had a value of SQL
NULL
.
wasNull()
- Method in interface java.sql.
SQLInput
Retrieves whether the last value read was SQL
NULL
.
wasNull()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Ascertains whether the last value read from this
SQLInputImpl
object was
null
.
watchable()
- Method in interface java.nio.file.
WatchKey
Returns the object for which this watch key was created.
Watchable
- Interface in
java.nio.file
An object that may be registered with a watch service so that it can be
watched
for changes and events.
WatchEvent<T>
- Interface in
java.nio.file
An event or a repeated event for an object that is registered with a
WatchService
.
WatchEvent.Kind<T>
- Interface in
java.nio.file
An event kind, for the purposes of identification.
WatchEvent.Modifier
- Interface in
java.nio.file
An event modifier that qualifies how a
Watchable
is registered
 with a
WatchService
.
WatchKey
- Interface in
java.nio.file
A token representing the registration of a
watchable
object
 with a
WatchService
.
WatchpointEvent
- Interface in
com.sun.jdi.event
Notification of a field triggered event encountered by a thread in the
 target VM.
WatchpointRequest
- Interface in
com.sun.jdi.request
Identifies a
Field
in the target VM being watched.
WatchService
- Interface in
java.nio.file
A watch service that
watches
registered objects for changes and
 events.
WAVE
- Static variable in class javax.sound.sampled.
AudioFileFormat.Type
Specifies a WAVE file.
Ways to Access MXBeans
- Search tag in package java.lang.management
Section
WBMP Metadata Format Specification
- Search tag in package javax.imageio.metadata
Section
WEAK_COMPARE_AND_SET
- Enum constant in enum class java.lang.invoke.
VarHandle.AccessMode
The access mode whose access is specified by the corresponding
 method
VarHandle.weakCompareAndSet
WEAK_COMPARE_AND_SET_ACQUIRE
- Enum constant in enum class java.lang.invoke.
VarHandle.AccessMode
The access mode whose access is specified by the corresponding
 method
VarHandle.weakCompareAndSetAcquire
WEAK_COMPARE_AND_SET_PLAIN
- Enum constant in enum class java.lang.invoke.
VarHandle.AccessMode
The access mode whose access is specified by the corresponding
 method
VarHandle.weakCompareAndSetPlain
WEAK_COMPARE_AND_SET_RELEASE
- Enum constant in enum class java.lang.invoke.
VarHandle.AccessMode
The access mode whose access is specified by the corresponding
 method
VarHandle.weakCompareAndSetRelease
weakCompareAndSet(boolean, boolean)
- Method in class java.util.concurrent.atomic.
AtomicBoolean
Deprecated.
This method has plain memory effects but the method
 name implies volatile memory effects (see methods such as
AtomicBoolean.compareAndExchange(boolean, boolean)
and
AtomicBoolean.compareAndSet(boolean, boolean)
).  To avoid
 confusion over plain or volatile memory effects it is recommended that
 the method
AtomicBoolean.weakCompareAndSetPlain(boolean, boolean)
be used instead.
weakCompareAndSet(int, int)
- Method in class java.util.concurrent.atomic.
AtomicInteger
Deprecated.
This method has plain memory effects but the method
 name implies volatile memory effects (see methods such as
AtomicInteger.compareAndExchange(int, int)
and
AtomicInteger.compareAndSet(int, int)
).  To avoid
 confusion over plain or volatile memory effects it is recommended that
 the method
AtomicInteger.weakCompareAndSetPlain(int, int)
be used instead.
weakCompareAndSet(int, int, int)
- Method in class java.util.concurrent.atomic.
AtomicIntegerArray
Deprecated.
This method has plain memory effects but the method
 name implies volatile memory effects (see methods such as
AtomicIntegerArray.compareAndExchange(int, int, int)
and
AtomicIntegerArray.compareAndSet(int, int, int)
).  To avoid
 confusion over plain or volatile memory effects it is recommended that
 the method
AtomicIntegerArray.weakCompareAndSetPlain(int, int, int)
be used instead.
weakCompareAndSet(int, long, long)
- Method in class java.util.concurrent.atomic.
AtomicLongArray
Deprecated.
This method has plain memory effects but the method
 name implies volatile memory effects (see methods such as
AtomicLongArray.compareAndExchange(int, long, long)
and
AtomicLongArray.compareAndSet(int, long, long)
).  To avoid
 confusion over plain or volatile memory effects it is recommended that
 the method
AtomicLongArray.weakCompareAndSetPlain(int, long, long)
be used instead.
weakCompareAndSet(int, E, E)
- Method in class java.util.concurrent.atomic.
AtomicReferenceArray
Deprecated.
This method has plain memory effects but the method
 name implies volatile memory effects (see methods such as
AtomicReferenceArray.compareAndExchange(int, E, E)
and
AtomicReferenceArray.compareAndSet(int, E, E)
).  To avoid
 confusion over plain or volatile memory effects it is recommended that
 the method
AtomicReferenceArray.weakCompareAndSetPlain(int, E, E)
be used instead.
weakCompareAndSet(long, long)
- Method in class java.util.concurrent.atomic.
AtomicLong
Deprecated.
This method has plain memory effects but the method
 name implies volatile memory effects (see methods such as
AtomicLong.compareAndExchange(long, long)
and
AtomicLong.compareAndSet(long, long)
).  To avoid
 confusion over plain or volatile memory effects it is recommended that
 the method
AtomicLong.weakCompareAndSetPlain(long, long)
be used instead.
weakCompareAndSet(Object...)
- Method in class java.lang.invoke.
VarHandle
Possibly atomically sets the value of a variable to the
newValue
with the memory semantics of
VarHandle.setVolatile(java.lang.Object...)
if the variable's
 current value, referred to as the
witness value
,
==
the
expectedValue
, as accessed with the memory semantics of
VarHandle.getVolatile(java.lang.Object...)
.
weakCompareAndSet(T, int, int)
- Method in class java.util.concurrent.atomic.
AtomicIntegerFieldUpdater
Atomically sets the field of the given object managed by this updater
 to the given updated value if the current value
==
the
 expected value.
weakCompareAndSet(T, long, long)
- Method in class java.util.concurrent.atomic.
AtomicLongFieldUpdater
Atomically sets the field of the given object managed by this updater
 to the given updated value if the current value
==
the
 expected value.
weakCompareAndSet(T, V, V)
- Method in class java.util.concurrent.atomic.
AtomicReferenceFieldUpdater
Atomically sets the field of the given object managed by this updater
 to the given updated value if the current value
==
the
 expected value.
weakCompareAndSet(V, V)
- Method in class java.util.concurrent.atomic.
AtomicReference
Deprecated.
This method has plain memory effects but the method
 name implies volatile memory effects (see methods such as
AtomicReference.compareAndExchange(V, V)
and
AtomicReference.compareAndSet(V, V)
).  To avoid
 confusion over plain or volatile memory effects it is recommended that
 the method
AtomicReference.weakCompareAndSetPlain(V, V)
be used instead.
weakCompareAndSet(V, V, boolean, boolean)
- Method in class java.util.concurrent.atomic.
AtomicMarkableReference
Atomically sets the value of both the reference and mark to the
 given update values if the current reference is
==
to
 the expected reference and the current mark is equal to the
 expected mark.
weakCompareAndSet(V, V, int, int)
- Method in class java.util.concurrent.atomic.
AtomicStampedReference
Atomically sets the value of both the reference and stamp to
 the given update values if the current reference is
==
to the expected reference and the current stamp is equal to the
 expected stamp.
weakCompareAndSetAcquire(boolean, boolean)
- Method in class java.util.concurrent.atomic.
AtomicBoolean
Possibly atomically sets the value to
newValue
if the current
 value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSetAcquire(java.lang.Object...)
.
weakCompareAndSetAcquire(int, int)
- Method in class java.util.concurrent.atomic.
AtomicInteger
Possibly atomically sets the value to
newValue
if
 the current value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSetAcquire(java.lang.Object...)
.
weakCompareAndSetAcquire(int, int, int)
- Method in class java.util.concurrent.atomic.
AtomicIntegerArray
Possibly atomically sets the element at index
i
to
newValue
if the element's current value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSetAcquire(java.lang.Object...)
.
weakCompareAndSetAcquire(int, long, long)
- Method in class java.util.concurrent.atomic.
AtomicLongArray
Possibly atomically sets the element at index
i
to
newValue
if the element's current value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSetAcquire(java.lang.Object...)
.
weakCompareAndSetAcquire(int, E, E)
- Method in class java.util.concurrent.atomic.
AtomicReferenceArray
Possibly atomically sets the element at index
i
to
newValue
if the element's current value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSetAcquire(java.lang.Object...)
.
weakCompareAndSetAcquire(long, long)
- Method in class java.util.concurrent.atomic.
AtomicLong
Possibly atomically sets the value to
newValue
if the current value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSetAcquire(java.lang.Object...)
.
weakCompareAndSetAcquire(Object...)
- Method in class java.lang.invoke.
VarHandle
Possibly atomically sets the value of a variable to the
newValue
with the semantics of
VarHandle.set(java.lang.Object...)
if the variable's current value,
 referred to as the
witness value
,
==
the
expectedValue
, as accessed with the memory semantics of
VarHandle.getAcquire(java.lang.Object...)
.
weakCompareAndSetAcquire(V, V)
- Method in class java.util.concurrent.atomic.
AtomicReference
Possibly atomically sets the value to
newValue
if the current value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSetAcquire(java.lang.Object...)
.
weakCompareAndSetPlain(boolean, boolean)
- Method in class java.util.concurrent.atomic.
AtomicBoolean
Possibly atomically sets the value to
newValue
if the current value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSetPlain(java.lang.Object...)
.
weakCompareAndSetPlain(int, int)
- Method in class java.util.concurrent.atomic.
AtomicInteger
Possibly atomically sets the value to
newValue
if the current value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSetPlain(java.lang.Object...)
.
weakCompareAndSetPlain(int, int, int)
- Method in class java.util.concurrent.atomic.
AtomicIntegerArray
Possibly atomically sets the element at index
i
to
newValue
if the element's current value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSetPlain(java.lang.Object...)
.
weakCompareAndSetPlain(int, long, long)
- Method in class java.util.concurrent.atomic.
AtomicLongArray
Possibly atomically sets the element at index
i
to
newValue
if the element's current value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSetPlain(java.lang.Object...)
.
weakCompareAndSetPlain(int, E, E)
- Method in class java.util.concurrent.atomic.
AtomicReferenceArray
Possibly atomically sets the element at index
i
to
newValue
if the element's current value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSetPlain(java.lang.Object...)
.
weakCompareAndSetPlain(long, long)
- Method in class java.util.concurrent.atomic.
AtomicLong
Possibly atomically sets the value to
newValue
if the current value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSetPlain(java.lang.Object...)
.
weakCompareAndSetPlain(Object...)
- Method in class java.lang.invoke.
VarHandle
Possibly atomically sets the value of a variable to the
newValue
with the semantics of
VarHandle.set(java.lang.Object...)
if the variable's current value,
 referred to as the
witness value
,
==
the
expectedValue
, as accessed with the memory semantics of
VarHandle.get(java.lang.Object...)
.
weakCompareAndSetPlain(V, V)
- Method in class java.util.concurrent.atomic.
AtomicReference
Possibly atomically sets the value to
newValue
if the current value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSetPlain(java.lang.Object...)
.
weakCompareAndSetRelease(boolean, boolean)
- Method in class java.util.concurrent.atomic.
AtomicBoolean
Possibly atomically sets the value to
newValue
if the current
 value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSetRelease(java.lang.Object...)
.
weakCompareAndSetRelease(int, int)
- Method in class java.util.concurrent.atomic.
AtomicInteger
Possibly atomically sets the value to
newValue
if
 the current value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSetRelease(java.lang.Object...)
.
weakCompareAndSetRelease(int, int, int)
- Method in class java.util.concurrent.atomic.
AtomicIntegerArray
Possibly atomically sets the element at index
i
to
newValue
if the element's current value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSetRelease(java.lang.Object...)
.
weakCompareAndSetRelease(int, long, long)
- Method in class java.util.concurrent.atomic.
AtomicLongArray
Possibly atomically sets the element at index
i
to
newValue
if the element's current value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSetRelease(java.lang.Object...)
.
weakCompareAndSetRelease(int, E, E)
- Method in class java.util.concurrent.atomic.
AtomicReferenceArray
Possibly atomically sets the element at index
i
to
newValue
if the element's current value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSetRelease(java.lang.Object...)
.
weakCompareAndSetRelease(long, long)
- Method in class java.util.concurrent.atomic.
AtomicLong
Possibly atomically sets the value to
newValue
if the current value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSetRelease(java.lang.Object...)
.
weakCompareAndSetRelease(Object...)
- Method in class java.lang.invoke.
VarHandle
Possibly atomically sets the value of a variable to the
newValue
with the semantics of
VarHandle.setRelease(java.lang.Object...)
if the variable's current
 value, referred to as the
witness value
,
==
the
expectedValue
, as accessed with the memory semantics of
VarHandle.get(java.lang.Object...)
.
weakCompareAndSetRelease(V, V)
- Method in class java.util.concurrent.atomic.
AtomicReference
Possibly atomically sets the value to
newValue
if the current value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSetRelease(java.lang.Object...)
.
weakCompareAndSetVolatile(boolean, boolean)
- Method in class java.util.concurrent.atomic.
AtomicBoolean
Possibly atomically sets the value to
newValue
if the current
 value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSet(java.lang.Object...)
.
weakCompareAndSetVolatile(int, int)
- Method in class java.util.concurrent.atomic.
AtomicInteger
Possibly atomically sets the value to
newValue
if
 the current value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSet(java.lang.Object...)
.
weakCompareAndSetVolatile(int, int, int)
- Method in class java.util.concurrent.atomic.
AtomicIntegerArray
Possibly atomically sets the element at index
i
to
newValue
if the element's current value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSet(java.lang.Object...)
.
weakCompareAndSetVolatile(int, long, long)
- Method in class java.util.concurrent.atomic.
AtomicLongArray
Possibly atomically sets the element at index
i
to
newValue
if the element's current value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSet(java.lang.Object...)
.
weakCompareAndSetVolatile(int, E, E)
- Method in class java.util.concurrent.atomic.
AtomicReferenceArray
Possibly atomically sets the element at index
i
to
newValue
if the element's current value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSet(java.lang.Object...)
.
weakCompareAndSetVolatile(long, long)
- Method in class java.util.concurrent.atomic.
AtomicLong
Possibly atomically sets the value to
newValue
if the current value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSet(java.lang.Object...)
.
weakCompareAndSetVolatile(V, V)
- Method in class java.util.concurrent.atomic.
AtomicReference
Possibly atomically sets the value to
newValue
if the current value
== expectedValue
,
 with memory effects as specified by
VarHandle.weakCompareAndSet(java.lang.Object...)
.
WeakHashMap<K,
V>
- Class in
java.util
Hash table based implementation of the
Map
interface, with
weak keys
.
WeakHashMap()
- Constructor for class java.util.
WeakHashMap
Constructs a new, empty
WeakHashMap
with the default initial
 capacity (16) and load factor (0.75).
WeakHashMap(int)
- Constructor for class java.util.
WeakHashMap
Constructs a new, empty
WeakHashMap
with the given initial
 capacity and the default load factor (0.75).
WeakHashMap(int, float)
- Constructor for class java.util.
WeakHashMap
Constructs a new, empty
WeakHashMap
with the given initial
 capacity and the given load factor.
WeakHashMap(Map<? extends K, ? extends V>)
- Constructor for class java.util.
WeakHashMap
Constructs a new
WeakHashMap
with the same mappings as the
 specified map.
WeakReference<T>
- Class in
java.lang.ref
Weak reference objects, which do not prevent their referents from being
 made finalizable, finalized, and then reclaimed.
WeakReference(T)
- Constructor for class java.lang.ref.
WeakReference
Creates a new weak reference that refers to the given object.
WeakReference(T, ReferenceQueue<? super T>)
- Constructor for class java.lang.ref.
WeakReference
Creates a new weak reference that refers to the given object and is
 registered with the given queue.
WebRowSet
- Interface in
javax.sql.rowset
The standard interface that all implementations of a
WebRowSet
must implement.
WebSocket
- Interface in
java.net.http
A WebSocket Client.
WebSocket.Builder
- Interface in
java.net.http
A builder of
WebSocket Clients
.
WebSocket.Listener
- Interface in
java.net.http
The receiving interface of
WebSocket
.
WebSocketHandshakeException
- Exception Class in
java.net.http
Thrown when the opening handshake has failed.
WebSocketHandshakeException(HttpResponse<?>)
- Constructor for exception class java.net.http.
WebSocketHandshakeException
Constructs a
WebSocketHandshakeException
with the given
HttpResponse
.
WEDNESDAY
- Enum constant in enum class java.time.
DayOfWeek
The singleton instance for the day-of-week of Wednesday.
WEDNESDAY
- Static variable in class java.util.
Calendar
Value of the
Calendar.DAY_OF_WEEK
field indicating
 Wednesday.
WEEK_BASED_YEAR
- Static variable in class java.time.temporal.
IsoFields
The field that represents the week-based-year.
WEEK_BASED_YEARS
- Static variable in class java.time.temporal.
IsoFields
The unit that represents week-based-years for the purpose of addition and subtraction.
WEEK_BASED_YEARS
- Static variable in class java.time.temporal.
WeekFields
The unit that represents week-based-years for the purpose of addition and subtraction.
WEEK_OF_MONTH
- Static variable in class java.text.
DateFormat.Field
Constant identifying the week of month field.
WEEK_OF_MONTH
- Static variable in class java.util.
Calendar
Field number for
get
and
set
indicating the
 week number within the current month.
WEEK_OF_MONTH_FIELD
- Static variable in class java.text.
DateFormat
Useful constant for WEEK_OF_MONTH field alignment.
WEEK_OF_WEEK_BASED_YEAR
- Static variable in class java.time.temporal.
IsoFields
The field that represents the week-of-week-based-year.
WEEK_OF_YEAR
- Static variable in class java.text.
DateFormat.Field
Constant identifying the week of year field.
WEEK_OF_YEAR
- Static variable in class java.util.
Calendar
Field number for
get
and
set
indicating the
 week number within the current year.
WEEK_OF_YEAR_FIELD
- Static variable in class java.text.
DateFormat
Useful constant for WEEK_OF_YEAR field alignment.
weekBasedYear()
- Method in class java.time.temporal.
WeekFields
Returns a field to access the year of a week-based-year based on this
WeekFields
.
Week Based Year
- Search tag in class java.time.temporal.WeekFields
Section
Week based years
- Search tag in class java.time.temporal.IsoFields
Section
WeekFields
- Class in
java.time.temporal
Localized definitions of the day-of-week, week-of-month and week-of-year fields.
weekOfMonth()
- Method in class java.time.temporal.
WeekFields
Returns a field to access the week of month based on this
WeekFields
.
Week of Month
- Search tag in class java.time.temporal.WeekFields
Section
Week Of Month
- Search tag in class java.util.GregorianCalendar
Section
weekOfWeekBasedYear()
- Method in class java.time.temporal.
WeekFields
Returns a field to access the week of a week-based-year based on this
WeekFields
.
weekOfYear()
- Method in class java.time.temporal.
WeekFields
Returns a field to access the week of year based on this
WeekFields
.
Week of Year
- Search tag in class java.time.temporal.WeekFields
Section
Week Of Year and Week Year
- Search tag in class java.util.GregorianCalendar
Section
Weeks
- Search tag in package java.time.temporal
Section
WEEKS
- Enum constant in enum class java.time.temporal.
ChronoUnit
Unit that represents the concept of a week.
weight
- Variable in class java.awt.font.
GlyphJustificationInfo
The weight of this glyph.
WEIGHT
- Static variable in class java.awt.font.
TextAttribute
Attribute key for the weight of a font.
WEIGHT_BOLD
- Static variable in class java.awt.font.
TextAttribute
The standard bold weight.
WEIGHT_DEMIBOLD
- Static variable in class java.awt.font.
TextAttribute
A moderately lighter weight than
WEIGHT_BOLD
.
WEIGHT_DEMILIGHT
- Static variable in class java.awt.font.
TextAttribute
An intermediate weight between
WEIGHT_LIGHT
and
WEIGHT_STANDARD
.
WEIGHT_EXTRA_LIGHT
- Static variable in class java.awt.font.
TextAttribute
The lightest predefined weight.
WEIGHT_EXTRABOLD
- Static variable in class java.awt.font.
TextAttribute
An extra heavy weight.
WEIGHT_HEAVY
- Static variable in class java.awt.font.
TextAttribute
A moderately heavier weight than
WEIGHT_BOLD
.
WEIGHT_LIGHT
- Static variable in class java.awt.font.
TextAttribute
The standard light weight.
WEIGHT_MEDIUM
- Static variable in class java.awt.font.
TextAttribute
An intermediate weight between
WEIGHT_REGULAR
and
WEIGHT_BOLD
.
WEIGHT_REGULAR
- Static variable in class java.awt.font.
TextAttribute
The standard weight.
WEIGHT_SEMIBOLD
- Static variable in class java.awt.font.
TextAttribute
A moderately heavier weight than
WEIGHT_REGULAR
.
WEIGHT_ULTRABOLD
- Static variable in class java.awt.font.
TextAttribute
The heaviest predefined weight.
weightx
- Variable in class java.awt.
GridBagConstraints
Specifies how to distribute extra horizontal space.
weighty
- Variable in class java.awt.
GridBagConstraints
Specifies how to distribute extra vertical space.
WEST
- Static variable in class java.awt.
BorderLayout
The west layout constraint (left side of container).
WEST
- Static variable in class java.awt.
GridBagConstraints
Put the component on the left side of its display area,
 centered vertically.
WEST
- Static variable in class javax.swing.
SpringLayout
Specifies the left edge of a component's bounding rectangle.
WEST
- Static variable in interface javax.swing.
SwingConstants
Compass-direction west (left).
westPane
- Variable in class javax.swing.plaf.basic.
BasicInternalFrameUI
West pane
What if a thread doesn't respond to Thread.interrupt?
- Search tag in package java.lang
Section
What is an Attribute?
- Search tag in package javax.print.attribute
Section
What operation was being attempted when a conflict occurred
- Search tag in interface javax.sql.rowset.spi.SyncResolver
Section
What should I use instead of Thread.stop?
- Search tag in package java.lang
Section
What should I use instead of Thread.suspend and Thread.resume?
- Search tag in package java.lang
Section
What the java.sql Package Contains
- Search tag in package java.sql
Section
What the JDBC 4.3 API Includes
- Search tag in package java.sql
Section
WHEEL_BLOCK_SCROLL
- Static variable in class java.awt.event.
MouseWheelEvent
Constant representing scrolling by a "block" (like scrolling
 with page-up, page-down keys)
WHEEL_UNIT_SCROLL
- Static variable in class java.awt.event.
MouseWheelEvent
Constant representing scrolling by "units" (like scrolling with the
 arrow keys)
when
- Variable in class java.awt.
Event
Deprecated.
The time stamp.
WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
- Static variable in class javax.swing.
JComponent
Constant used for
registerKeyboardAction
that
 means that the command should be invoked when the receiving
 component is an ancestor of the focused component or is
 itself the focused component.
WHEN_FOCUSED
- Static variable in class javax.swing.
JComponent
Constant used for
registerKeyboardAction
that
 means that the command should be invoked when
 the component has the focus.
WHEN_IN_FOCUSED_WINDOW
- Static variable in class javax.swing.
JComponent
Constant used for
registerKeyboardAction
that
 means that the command should be invoked when
 the receiving component is in the window that has the focus
 or is itself the focused component.
whenComplete(BiConsumer<? super T, ? super Throwable>)
- Method in class java.util.concurrent.
CompletableFuture
whenComplete(BiConsumer<? super T, ? super Throwable>)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage with the same result or exception as
 this stage, that executes the given action when this stage completes.
whenCompleteAsync(BiConsumer<? super T, ? super Throwable>)
- Method in class java.util.concurrent.
CompletableFuture
whenCompleteAsync(BiConsumer<? super T, ? super Throwable>)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage with the same result or exception as
 this stage, that executes the given action using this stage's
 default asynchronous execution facility when this stage completes.
whenCompleteAsync(BiConsumer<? super T, ? super Throwable>, Executor)
- Method in class java.util.concurrent.
CompletableFuture
whenCompleteAsync(BiConsumer<? super T, ? super Throwable>, Executor)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage with the same result or exception as
 this stage, that executes the given action using the supplied
 Executor when this stage completes.
When the MAX and MIN bounds are hit
- Search tag in javax.swing.JTable.doLayout()
Section
When to implement
- Search tag in interface java.time.temporal.Temporal
Section
When to use this interface
- Search tag in interface java.time.chrono.ChronoLocalDate
Section
When to use this interface
- Search tag in interface java.time.chrono.ChronoLocalDateTime
Section
When to use this interface
- Search tag in interface java.time.chrono.ChronoZonedDateTime
Section
where(ScopedValue<T>, T)
- Method in class java.lang.
ScopedValue.Carrier
PREVIEW
Returns a new
Carrier
with the mappings from this carrier plus a
 new mapping from
key
to
value
.
where(ScopedValue<T>, T)
- Static method in class java.lang.
ScopedValue
PREVIEW
Creates a new
Carrier
with a single mapping of a
ScopedValue
key
to a value.
WHERE_CLAUSE_ONLY
- Enum constant in enum class java.sql.
PseudoColumnUsage
The pseudo/hidden column may only be used in a WHERE clause.
WHILE_LOOP
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
WhileLoopTree
.
whileLoop(MethodHandle, MethodHandle, MethodHandle)
- Static method in class java.lang.invoke.
MethodHandles
Constructs a
while
loop from an initializer, a body, and a predicate.
WhileLoopTree
- Interface in
com.sun.source.tree
A tree node for a
while
loop statement.
white
- Static variable in class java.awt.
Color
The color white.
WHITE
- Static variable in class java.awt.
Color
The color white.
WHITE_BALANCE_AUTO
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "WhiteBalance" tag.
WHITE_BALANCE_MANUAL
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "WhiteBalance" tag.
WHITE_SPACE
- Static variable in class javax.swing.text.html.
CSS.Attribute
CSS attribute "white-space".
WHITESPACE
- Static variable in class java.awt.font.
GlyphMetrics
Indicates a glyph with no visual representation.
whitespaceChars(int, int)
- Method in class java.io.
StreamTokenizer
Specifies that all characters
c
in the range
low <= c <= high
are white space characters.
Why are Thread.suspend and Thread.resume deprecated and the ability to suspend or resume a thread removed?
- Search tag in package java.lang
Section
Why is Thread.stop deprecated and the ability to stop a thread removed?
- Search tag in package java.lang
Section
width
- Variable in class java.awt.
Component.BltBufferStrategy
Width of the back buffers
width
- Variable in class java.awt.
Dimension
The width dimension; negative values can be used.
width
- Variable in class java.awt.geom.
Arc2D.Double
The overall width of the full ellipse of which this arc is
 a partial section (not considering the angular extents).
width
- Variable in class java.awt.geom.
Arc2D.Float
The overall width of the full ellipse of which this arc is
 a partial section (not considering the
 angular extents).
width
- Variable in class java.awt.geom.
Ellipse2D.Double
The overall width of this
Ellipse2D
.
width
- Variable in class java.awt.geom.
Ellipse2D.Float
The overall width of this
Ellipse2D
.
width
- Variable in class java.awt.geom.
Rectangle2D.Double
The width of this
Rectangle2D
.
width
- Variable in class java.awt.geom.
Rectangle2D.Float
The width of this
Rectangle2D
.
width
- Variable in class java.awt.geom.
RoundRectangle2D.Double
The width of this
RoundRectangle2D
.
width
- Variable in class java.awt.geom.
RoundRectangle2D.Float
The width of this
RoundRectangle2D
.
width
- Variable in class java.awt.image.
Raster
The width of this Raster.
width
- Variable in class java.awt.image.
SampleModel
Width in pixels of the region of image data that this SampleModel
  describes.
width
- Variable in class java.awt.
Rectangle
The width of the
Rectangle
.
width
- Variable in class javax.swing.table.
TableColumn
The width of the column.
width(Component)
- Static method in class javax.swing.
Spring
Returns a spring whose
minimum
,
preferred
,
maximum
and
value
properties are defined by the widths of the
minimumSize
,
preferredSize
,
maximumSize
and
size
properties
 of the supplied component.
Width
- Search tag in class java.util.Formatter
Section
WIDTH
- Static variable in class java.awt.font.
TextAttribute
Attribute key for the width of a font.
WIDTH
- Static variable in interface java.awt.image.
ImageObserver
This flag in the infoflags argument to imageUpdate indicates that
 the width of the base image is now available and can be taken
 from the width argument to the imageUpdate callback method.
WIDTH
- Static variable in class javax.swing.
SpringLayout
Specifies the width of a component's bounding rectangle.
WIDTH
- Static variable in class javax.swing.text.html.
CSS.Attribute
CSS attribute "width".
WIDTH
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "width"
WIDTH_CONDENSED
- Static variable in class java.awt.font.
TextAttribute
The most condensed predefined width.
WIDTH_EXTENDED
- Static variable in class java.awt.font.
TextAttribute
The most extended predefined width.
WIDTH_REGULAR
- Static variable in class java.awt.font.
TextAttribute
The standard width.
WIDTH_SEMI_CONDENSED
- Static variable in class java.awt.font.
TextAttribute
A moderately condensed width.
WIDTH_SEMI_EXTENDED
- Static variable in class java.awt.font.
TextAttribute
A moderately extended width.
WILDCARD
- Enum constant in enum class javax.lang.model.type.
TypeKind
A wildcard type argument.
WILDCARD
- Static variable in class javax.management.
ObjectName
Defines the wildcard "*:*" ObjectName.
WildcardTree
- Interface in
com.sun.source.tree
A tree node for a wildcard type argument.
WildcardType
- Interface in
java.lang.reflect
WildcardType represents a wildcard type expression, such as
?
,
? extends Number
, or
? super Integer
.
WildcardType
- Interface in
javax.lang.model.type
Represents a wildcard type argument.
WIND_EVEN_ODD
- Static variable in class java.awt.geom.
Path2D
An even-odd winding rule for determining the interior of
 a path.
WIND_EVEN_ODD
- Static variable in interface java.awt.geom.
PathIterator
The winding rule constant for specifying an even-odd rule
 for determining the interior of a path.
WIND_NON_ZERO
- Static variable in class java.awt.geom.
Path2D
A non-zero winding rule for determining the interior of a
 path.
WIND_NON_ZERO
- Static variable in interface java.awt.geom.
PathIterator
The winding rule constant for specifying a non-zero rule
 for determining the interior of a path.
window
- Static variable in class java.awt.
SystemColor
The color rendered for the background of interior regions inside windows.
Window
- Class in
java.awt
A
Window
object is a top-level window with no borders and no
 menubar.
Window(Frame)
- Constructor for class java.awt.
Window
Constructs a new, initially invisible window with the specified
Frame
as its owner.
Window(Window)
- Constructor for class java.awt.
Window
Constructs a new, initially invisible window with the specified
Window
as its owner.
Window(Window, GraphicsConfiguration)
- Constructor for class java.awt.
Window
Constructs a new, initially invisible window with the specified owner
Window
and a
GraphicsConfiguration
of a screen device.
WINDOW
- Static variable in class com.sun.java.accessibility.util.
EventID
Maps to AWT Window support (i.e., WindowListener and WindowEvent)
WINDOW
- Static variable in class java.awt.
SystemColor
The array index for the
SystemColor.window
system color.
WINDOW
- Static variable in class javax.accessibility.
AccessibleRole
A top level window with no title or border.
WINDOW_ACTIVATED
- Static variable in class java.awt.event.
WindowEvent
The window-activated event type.
WINDOW_BORDER
- Static variable in class java.awt.
SystemColor
The array index for the
SystemColor.windowBorder
system color.
WINDOW_CLOSED
- Static variable in class java.awt.event.
WindowEvent
The window closed event.
WINDOW_CLOSING
- Static variable in class java.awt.event.
WindowEvent
The "window is closing" event.
WINDOW_DEACTIVATED
- Static variable in class java.awt.event.
WindowEvent
The window-deactivated event type.
WINDOW_DEICONIFIED
- Static variable in class java.awt.event.
WindowEvent
The window deiconified event type.
WINDOW_DEICONIFY
- Static variable in class java.awt.
Event
Deprecated.
The user has asked the window manager to de-iconify the window.
WINDOW_DESTROY
- Static variable in class java.awt.
Event
Deprecated.
The user has asked the window manager to kill the window.
WINDOW_EVENT_MASK
- Static variable in class java.awt.
AWTEvent
The event mask for selecting window events.
WINDOW_EXPOSE
- Static variable in class java.awt.
Event
Deprecated.
The user has asked the window manager to expose the window.
WINDOW_FIRST
- Static variable in class java.awt.event.
WindowEvent
The first number in the range of ids used for window events.
WINDOW_FOCUS_EVENT_MASK
- Static variable in class java.awt.
AWTEvent
The event mask for selecting window focus events.
WINDOW_GAINED_FOCUS
- Static variable in class java.awt.event.
WindowEvent
The window-gained-focus event type.
WINDOW_ICONIFIED
- Static variable in class java.awt.event.
WindowEvent
The window iconified event.
WINDOW_ICONIFY
- Static variable in class java.awt.
Event
Deprecated.
The user has asked the window manager to iconify the window.
WINDOW_LAST
- Static variable in class java.awt.event.
WindowEvent
The last number in the range of ids used for window events.
WINDOW_LOST_FOCUS
- Static variable in class java.awt.event.
WindowEvent
The window-lost-focus event type.
WINDOW_MOVED
- Static variable in class java.awt.
Event
Deprecated.
The user has asked the window manager to move the window.
WINDOW_OPENED
- Static variable in class java.awt.event.
WindowEvent
The window opened event.
WINDOW_STATE_CHANGED
- Static variable in class java.awt.event.
WindowEvent
The window-state-changed event type.
WINDOW_STATE_EVENT_MASK
- Static variable in class java.awt.
AWTEvent
The event mask for selecting window state events.
WINDOW_TEXT
- Static variable in class java.awt.
SystemColor
The array index for the
SystemColor.windowText
system color.
Window.AccessibleAWTWindow
- Class in
java.awt
This class implements accessibility support for the
Window
class.
Window.Type
- Enum Class in
java.awt
Enumeration of available
window types
.
windowActivated(WindowEvent)
- Method in class java.awt.
AWTEventMulticaster
Handles the windowActivated event by invoking the
 windowActivated methods on listener-a and listener-b.
windowActivated(WindowEvent)
- Method in class java.awt.event.
WindowAdapter
Invoked when a window is activated.
windowActivated(WindowEvent)
- Method in interface java.awt.event.
WindowListener
Invoked when the Window is set to be the active Window.
WindowAdapter
- Class in
java.awt.event
An abstract adapter class for receiving window events.
WindowAdapter()
- Constructor for class java.awt.event.
WindowAdapter
Constructs a
WindowAdapter
.
windowBorder
- Static variable in class java.awt.
SystemColor
The color rendered for the border around interior regions inside windows.
windowClosed(WindowEvent)
- Method in class java.awt.
AWTEventMulticaster
Handles the windowClosed event by invoking the
 windowClosed methods on listener-a and listener-b.
windowClosed(WindowEvent)
- Method in class java.awt.event.
WindowAdapter
Invoked when a window has been closed.
windowClosed(WindowEvent)
- Method in interface java.awt.event.
WindowListener
Invoked when a window has been closed as the result
 of calling dispose on the window.
windowClosing(WindowEvent)
- Method in class java.awt.
AWTEventMulticaster
Handles the windowClosing event by invoking the
 windowClosing methods on listener-a and listener-b.
windowClosing(WindowEvent)
- Method in class java.awt.event.
WindowAdapter
Invoked when a window is in the process of being closed.
windowClosing(WindowEvent)
- Method in interface java.awt.event.
WindowListener
Invoked when the user attempts to close the window
 from the window's system menu.
windowClosing(WindowEvent)
- Method in class javax.swing.
JMenu.WinListener
Deselect the menu when the popup is closed from outside.
WindowConstants
- Interface in
javax.swing
Constants used to control the window-closing operation.
windowDeactivated(WindowEvent)
- Method in class java.awt.
AWTEventMulticaster
Handles the windowDeactivated event by invoking the
 windowDeactivated methods on listener-a and listener-b.
windowDeactivated(WindowEvent)
- Method in class java.awt.event.
WindowAdapter
Invoked when a window is de-activated.
windowDeactivated(WindowEvent)
- Method in interface java.awt.event.
WindowListener
Invoked when a Window is no longer the active Window.
windowDeiconified(WindowEvent)
- Method in class java.awt.
AWTEventMulticaster
Handles the windowDeiconified event by invoking the
 windowDeiconified methods on listener-a and listener-b.
windowDeiconified(WindowEvent)
- Method in class java.awt.event.
WindowAdapter
Invoked when a window is de-iconified.
windowDeiconified(WindowEvent)
- Method in interface java.awt.event.
WindowListener
Invoked when a window is changed from a minimized
 to a normal state.
WindowEvent
- Class in
java.awt.event
A low-level event that indicates that a window has changed its status.
WindowEvent(Window, int)
- Constructor for class java.awt.event.
WindowEvent
Constructs a
WindowEvent
object.
WindowEvent(Window, int, int, int)
- Constructor for class java.awt.event.
WindowEvent
Constructs a
WindowEvent
object with the specified
 previous and new window states.
WindowEvent(Window, int, Window)
- Constructor for class java.awt.event.
WindowEvent
Constructs a
WindowEvent
object with the
 specified opposite
Window
.
WindowEvent(Window, int, Window, int, int)
- Constructor for class java.awt.event.
WindowEvent
Constructs a
WindowEvent
object.
WindowFocusListener
- Interface in
java.awt.event
The listener interface for receiving
WindowEvents
, including
WINDOW_GAINED_FOCUS
and
WINDOW_LOST_FOCUS
events.
windowForComponent(Component)
- Static method in class javax.swing.
SwingUtilities
Returns the first
Window
ancestor of
c
, or
null
if
c
is not contained inside a
Window
.
windowGainedFocus(WindowEvent)
- Method in class java.awt.
AWTEventMulticaster
Handles the windowGainedFocus event by invoking the windowGainedFocus
 methods on listener-a and listener-b.
windowGainedFocus(WindowEvent)
- Method in class java.awt.event.
WindowAdapter
Invoked when the Window is set to be the focused Window, which means
 that the Window, or one of its subcomponents, will receive keyboard
 events.
windowGainedFocus(WindowEvent)
- Method in interface java.awt.event.
WindowFocusListener
Invoked when the Window is set to be the focused Window, which means
 that the Window, or one of its subcomponents, will receive keyboard
 events.
windowIconified(WindowEvent)
- Method in class java.awt.
AWTEventMulticaster
Handles the windowIconified event by invoking the
 windowIconified methods on listener-a and listener-b.
windowIconified(WindowEvent)
- Method in class java.awt.event.
WindowAdapter
Invoked when a window is iconified.
windowIconified(WindowEvent)
- Method in interface java.awt.event.
WindowListener
Invoked when a window is changed from a normal to a
 minimized state.
windowInit()
- Method in class javax.swing.
JWindow
Called by the constructors to init the
JWindow
properly.
WindowListener
- Interface in
java.awt.event
The listener interface for receiving window events.
windowLostFocus(WindowEvent)
- Method in class java.awt.
AWTEventMulticaster
Handles the windowLostFocus event by invoking the windowLostFocus
 methods on listener-a and listener-b.
windowLostFocus(WindowEvent)
- Method in class java.awt.event.
WindowAdapter
Invoked when the Window is no longer the focused Window, which means
 that keyboard events will no longer be delivered to the Window or any of
 its subcomponents.
windowLostFocus(WindowEvent)
- Method in interface java.awt.event.
WindowFocusListener
Invoked when the Window is no longer the focused Window, which means
 that keyboard events will no longer be delivered to the Window or any of
 its subcomponents.
windowMenu
- Variable in class javax.swing.plaf.basic.
BasicInternalFrameTitlePane
The instance of
JMenu
.
windowOpened(WindowEvent)
- Method in class java.awt.
AWTEventMulticaster
Handles the windowOpened event by invoking the
 windowOpened methods on listener-a and listener-b.
windowOpened(WindowEvent)
- Method in class java.awt.event.
WindowAdapter
Invoked when a window has been opened.
windowOpened(WindowEvent)
- Method in interface java.awt.event.
WindowListener
Invoked the first time a window is made visible.
windowStateChanged(WindowEvent)
- Method in class java.awt.
AWTEventMulticaster
Handles the windowStateChanged event by invoking the
 windowStateChanged methods on listener-a and listener-b.
windowStateChanged(WindowEvent)
- Method in class java.awt.event.
WindowAdapter
Invoked when a window state is changed.
windowStateChanged(WindowEvent)
- Method in interface java.awt.event.
WindowStateListener
Invoked when window state is changed.
WindowStateListener
- Interface in
java.awt.event
The listener interface for receiving window state events.
windowText
- Static variable in class java.awt.
SystemColor
The color rendered for text of interior regions inside windows.
WinListener(JPopupMenu)
- Constructor for class javax.swing.
JMenu.WinListener
Create the window listener for the specified popup.
with(String, String)
- Method in class jdk.jfr.
EventSettings
Sets a setting value for the event that is associated with this event setting.
with(String, List<String>)
- Method in interface com.sun.net.httpserver.
Request
Returns an identical
Request
with an additional header.
with(Month)
- Method in class java.time.
MonthDay
Returns a copy of this
MonthDay
with the month-of-year altered.
with(TemporalAdjuster)
- Method in interface java.time.chrono.
ChronoLocalDate
Returns an adjusted object of the same type as this object with the adjustment made.
with(TemporalAdjuster)
- Method in interface java.time.chrono.
ChronoLocalDateTime
Returns an adjusted object of the same type as this object with the adjustment made.
with(TemporalAdjuster)
- Method in interface java.time.chrono.
ChronoZonedDateTime
Returns an adjusted object of the same type as this object with the adjustment made.
with(TemporalAdjuster)
- Method in class java.time.chrono.
HijrahDate
Returns an adjusted object of the same type as this object with the adjustment made.
with(TemporalAdjuster)
- Method in class java.time.chrono.
JapaneseDate
Returns an adjusted object of the same type as this object with the adjustment made.
with(TemporalAdjuster)
- Method in class java.time.chrono.
MinguoDate
Returns an adjusted object of the same type as this object with the adjustment made.
with(TemporalAdjuster)
- Method in class java.time.chrono.
ThaiBuddhistDate
Returns an adjusted object of the same type as this object with the adjustment made.
with(TemporalAdjuster)
- Method in class java.time.
Instant
Returns an adjusted copy of this instant.
with(TemporalAdjuster)
- Method in class java.time.
LocalDate
Returns an adjusted copy of this date.
with(TemporalAdjuster)
- Method in class java.time.
LocalDateTime
Returns an adjusted copy of this date-time.
with(TemporalAdjuster)
- Method in class java.time.
LocalTime
Returns an adjusted copy of this time.
with(TemporalAdjuster)
- Method in class java.time.
OffsetDateTime
Returns an adjusted copy of this date-time.
with(TemporalAdjuster)
- Method in class java.time.
OffsetTime
Returns an adjusted copy of this time.
with(TemporalAdjuster)
- Method in interface java.time.temporal.
Temporal
Returns an adjusted object of the same type as this object with the adjustment made.
with(TemporalAdjuster)
- Method in class java.time.
Year
Returns an adjusted copy of this year.
with(TemporalAdjuster)
- Method in class java.time.
YearMonth
Returns an adjusted copy of this year-month.
with(TemporalAdjuster)
- Method in class java.time.
ZonedDateTime
Returns an adjusted copy of this date-time.
with(TemporalField, long)
- Method in interface java.time.chrono.
ChronoLocalDate
Returns an object of the same type as this object with the specified field altered.
with(TemporalField, long)
- Method in interface java.time.chrono.
ChronoLocalDateTime
Returns an object of the same type as this object with the specified field altered.
with(TemporalField, long)
- Method in interface java.time.chrono.
ChronoZonedDateTime
Returns an object of the same type as this object with the specified field altered.
with(TemporalField, long)
- Method in class java.time.chrono.
HijrahDate
with(TemporalField, long)
- Method in class java.time.chrono.
JapaneseDate
with(TemporalField, long)
- Method in class java.time.chrono.
MinguoDate
with(TemporalField, long)
- Method in class java.time.chrono.
ThaiBuddhistDate
with(TemporalField, long)
- Method in class java.time.
Instant
Returns a copy of this instant with the specified field set to a new value.
with(TemporalField, long)
- Method in class java.time.
LocalDate
Returns a copy of this date with the specified field set to a new value.
with(TemporalField, long)
- Method in class java.time.
LocalDateTime
Returns a copy of this date-time with the specified field set to a new value.
with(TemporalField, long)
- Method in class java.time.
LocalTime
Returns a copy of this time with the specified field set to a new value.
with(TemporalField, long)
- Method in class java.time.
OffsetDateTime
Returns a copy of this date-time with the specified field set to a new value.
with(TemporalField, long)
- Method in class java.time.
OffsetTime
Returns a copy of this time with the specified field set to a new value.
with(TemporalField, long)
- Method in interface java.time.temporal.
Temporal
Returns an object of the same type as this object with the specified field altered.
with(TemporalField, long)
- Method in class java.time.
Year
Returns a copy of this year with the specified field set to a new value.
with(TemporalField, long)
- Method in class java.time.
YearMonth
Returns a copy of this year-month with the specified field set to a new value.
with(TemporalField, long)
- Method in class java.time.
ZonedDateTime
Returns a copy of this date-time with the specified field set to a new value.
with(CatalogFeatures.Feature, String)
- Method in class javax.xml.catalog.
CatalogFeatures.Builder
Sets the value to a specified Feature.
withArgs(ConstantDesc...)
- Method in class java.lang.constant.
DynamicCallSiteDesc
Returns a nominal descriptor for an
invokedynamic
call site whose
 bootstrap method, name, and invocation type are the same as this one, but
 with the specified bootstrap arguments.
withByteAlignment(long)
- Method in interface java.lang.foreign.
AddressLayout
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
withByteAlignment(long)
- Method in interface java.lang.foreign.
GroupLayout
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
withByteAlignment(long)
- Method in interface java.lang.foreign.
MemoryLayout
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
withByteAlignment(long)
- Method in interface java.lang.foreign.
PaddingLayout
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
withByteAlignment(long)
- Method in interface java.lang.foreign.
SequenceLayout
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
withByteAlignment(long)
- Method in interface java.lang.foreign.
StructLayout
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
withByteAlignment(long)
- Method in interface java.lang.foreign.
UnionLayout
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
withByteAlignment(long)
- Method in interface java.lang.foreign.
ValueLayout.OfBoolean
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
withByteAlignment(long)
- Method in interface java.lang.foreign.
ValueLayout.OfByte
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
withByteAlignment(long)
- Method in interface java.lang.foreign.
ValueLayout.OfChar
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
withByteAlignment(long)
- Method in interface java.lang.foreign.
ValueLayout.OfDouble
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
withByteAlignment(long)
- Method in interface java.lang.foreign.
ValueLayout.OfFloat
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
withByteAlignment(long)
- Method in interface java.lang.foreign.
ValueLayout.OfInt
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
withByteAlignment(long)
- Method in interface java.lang.foreign.
ValueLayout.OfLong
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
withByteAlignment(long)
- Method in interface java.lang.foreign.
ValueLayout.OfShort
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
withByteAlignment(long)
- Method in interface java.lang.foreign.
ValueLayout
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given
 alignment constraint (in bytes).
withCachedThreadPool(ExecutorService, int)
- Static method in class java.nio.channels.
AsynchronousChannelGroup
Creates an asynchronous channel group with a given thread pool that
 creates new threads as needed.
withChronology(Chronology)
- Method in class java.time.format.
DateTimeFormatter
Returns a copy of this formatter with a new override chronology.
withDayOfMonth(int)
- Method in class java.time.
LocalDate
Returns a copy of this
LocalDate
with the day-of-month altered.
withDayOfMonth(int)
- Method in class java.time.
LocalDateTime
Returns a copy of this
LocalDateTime
with the day-of-month altered.
withDayOfMonth(int)
- Method in class java.time.
MonthDay
Returns a copy of this
MonthDay
with the day-of-month altered.
withDayOfMonth(int)
- Method in class java.time.
OffsetDateTime
Returns a copy of this
OffsetDateTime
with the day-of-month altered.
withDayOfMonth(int)
- Method in class java.time.
ZonedDateTime
Returns a copy of this
ZonedDateTime
with the day-of-month altered.
withDayOfYear(int)
- Method in class java.time.
LocalDate
Returns a copy of this
LocalDate
with the day-of-year altered.
withDayOfYear(int)
- Method in class java.time.
LocalDateTime
Returns a copy of this
LocalDateTime
with the day-of-year altered.
withDayOfYear(int)
- Method in class java.time.
OffsetDateTime
Returns a copy of this
OffsetDateTime
with the day-of-year altered.
withDayOfYear(int)
- Method in class java.time.
ZonedDateTime
Returns a copy of this
ZonedDateTime
with the day-of-year altered.
withDays(int)
- Method in class java.time.
Period
Returns a copy of this period with the specified amount of days.
withDecimalSeparator(char)
- Method in class java.time.format.
DecimalStyle
Returns a copy of the info with a new character that represents the decimal point.
withDecimalStyle(DecimalStyle)
- Method in class java.time.format.
DateTimeFormatter
Returns a copy of this formatter with a new DecimalStyle.
withDelimiter(String)
- Method in class java.util.
HexFormat
Returns a copy of this
HexFormat
with the delimiter.
withEarlierOffsetAtOverlap()
- Method in interface java.time.chrono.
ChronoZonedDateTime
Returns a copy of this date-time changing the zone offset to the
 earlier of the two valid offsets at a local time-line overlap.
withEarlierOffsetAtOverlap()
- Method in class java.time.
ZonedDateTime
Returns a copy of this date-time changing the zone offset to the
 earlier of the two valid offsets at a local time-line overlap.
withElementCount(long)
- Method in interface java.lang.foreign.
SequenceLayout
PREVIEW
Returns a sequence layout with the same characteristics of this layout, but with the given element count.
withFixedOffsetZone()
- Method in class java.time.
ZonedDateTime
Returns a copy of this date-time with the zone ID set to the offset.
withFixedThreadPool(int, ThreadFactory)
- Static method in class java.nio.channels.
AsynchronousChannelGroup
Creates an asynchronous channel group with a fixed thread pool.
withHour(int)
- Method in class java.time.
LocalDateTime
Returns a copy of this
LocalDateTime
with the hour-of-day altered.
withHour(int)
- Method in class java.time.
LocalTime
Returns a copy of this
LocalTime
with the hour-of-day altered.
withHour(int)
- Method in class java.time.
OffsetDateTime
Returns a copy of this
OffsetDateTime
with the hour-of-day altered.
withHour(int)
- Method in class java.time.
OffsetTime
Returns a copy of this
OffsetTime
with the hour-of-day altered.
withHour(int)
- Method in class java.time.
ZonedDateTime
Returns a copy of this
ZonedDateTime
with the hour-of-day altered.
withInitial(Supplier<? extends S>)
- Static method in class java.lang.
ThreadLocal
Creates a thread local variable.
withInvokeBehavior()
- Method in class java.lang.invoke.
VarHandle
Returns a VarHandle, with access to the same variable(s) as this VarHandle, but whose
 invocation behavior of access mode methods is adjusted to
invoke behavior
.
withInvokeExactBehavior()
- Method in class java.lang.invoke.
VarHandle
Returns a VarHandle, with access to the same variable(s) as this VarHandle, but whose
 invocation behavior of access mode methods is adjusted to
invoke-exact behavior
.
withLane(int, byte)
- Method in class jdk.incubator.vector.
ByteVector
Replaces the lane element of this vector at lane index
i
with
 value
e
.
withLane(int, double)
- Method in class jdk.incubator.vector.
DoubleVector
Replaces the lane element of this vector at lane index
i
with
 value
e
.
withLane(int, float)
- Method in class jdk.incubator.vector.
FloatVector
Replaces the lane element of this vector at lane index
i
with
 value
e
.
withLane(int, int)
- Method in class jdk.incubator.vector.
IntVector
Replaces the lane element of this vector at lane index
i
with
 value
e
.
withLane(int, long)
- Method in class jdk.incubator.vector.
LongVector
Replaces the lane element of this vector at lane index
i
with
 value
e
.
withLane(int, short)
- Method in class jdk.incubator.vector.
ShortVector
Replaces the lane element of this vector at lane index
i
with
 value
e
.
withLanes(Class<E>)
- Method in enum class jdk.incubator.vector.
VectorShape
Finds a vector species with the given element type
 and the current shape.
withLanes(Class<F>)
- Method in interface jdk.incubator.vector.
VectorSpecies
Finds a species with the given element type and the
 same shape as this species.
withLaterOffsetAtOverlap()
- Method in interface java.time.chrono.
ChronoZonedDateTime
Returns a copy of this date-time changing the zone offset to the
 later of the two valid offsets at a local time-line overlap.
withLaterOffsetAtOverlap()
- Method in class java.time.
ZonedDateTime
Returns a copy of this date-time changing the zone offset to the
 later of the two valid offsets at a local time-line overlap.
withLocale(Locale)
- Method in class java.time.format.
DateTimeFormatter
Returns a copy of this formatter with a new locale.
withLowerCase()
- Method in class java.util.
HexFormat
Returns a copy of this
HexFormat
to use lowercase hexadecimal characters.
withMinute(int)
- Method in class java.time.
LocalDateTime
Returns a copy of this
LocalDateTime
with the minute-of-hour altered.
withMinute(int)
- Method in class java.time.
LocalTime
Returns a copy of this
LocalTime
with the minute-of-hour altered.
withMinute(int)
- Method in class java.time.
OffsetDateTime
Returns a copy of this
OffsetDateTime
with the minute-of-hour altered.
withMinute(int)
- Method in class java.time.
OffsetTime
Returns a copy of this
OffsetTime
with the minute-of-hour altered.
withMinute(int)
- Method in class java.time.
ZonedDateTime
Returns a copy of this
ZonedDateTime
with the minute-of-hour altered.
withMonth(int)
- Method in class java.time.
LocalDate
Returns a copy of this
LocalDate
with the month-of-year altered.
withMonth(int)
- Method in class java.time.
LocalDateTime
Returns a copy of this
LocalDateTime
with the month-of-year altered.
withMonth(int)
- Method in class java.time.
MonthDay
Returns a copy of this
MonthDay
with the month-of-year altered.
withMonth(int)
- Method in class java.time.
OffsetDateTime
Returns a copy of this
OffsetDateTime
with the month-of-year altered.
withMonth(int)
- Method in class java.time.
YearMonth
Returns a copy of this
YearMonth
with the month-of-year altered.
withMonth(int)
- Method in class java.time.
ZonedDateTime
Returns a copy of this
ZonedDateTime
with the month-of-year altered.
withMonths(int)
- Method in class java.time.
Period
Returns a copy of this period with the specified amount of months.
withName(String)
- Method in interface java.lang.foreign.
AddressLayout
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given name.
withName(String)
- Method in interface java.lang.foreign.
GroupLayout
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given name.
withName(String)
- Method in interface java.lang.foreign.
MemoryLayout
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given name.
withName(String)
- Method in interface java.lang.foreign.
PaddingLayout
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given name.
withName(String)
- Method in interface java.lang.foreign.
SequenceLayout
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given name.
withName(String)
- Method in interface java.lang.foreign.
StructLayout
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given name.
withName(String)
- Method in interface java.lang.foreign.
UnionLayout
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given name.
withName(String)
- Method in interface java.lang.foreign.
ValueLayout.OfBoolean
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given name.
withName(String)
- Method in interface java.lang.foreign.
ValueLayout.OfByte
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given name.
withName(String)
- Method in interface java.lang.foreign.
ValueLayout.OfChar
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given name.
withName(String)
- Method in interface java.lang.foreign.
ValueLayout.OfDouble
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given name.
withName(String)
- Method in interface java.lang.foreign.
ValueLayout.OfFloat
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given name.
withName(String)
- Method in interface java.lang.foreign.
ValueLayout.OfInt
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given name.
withName(String)
- Method in interface java.lang.foreign.
ValueLayout.OfLong
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given name.
withName(String)
- Method in interface java.lang.foreign.
ValueLayout.OfShort
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given name.
withName(String)
- Method in interface java.lang.foreign.
ValueLayout
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with the given name.
withNameAndType(String, MethodTypeDesc)
- Method in class java.lang.constant.
DynamicCallSiteDesc
Returns a nominal descriptor for an
invokedynamic
call site whose
 bootstrap and bootstrap arguments are the same as this one, but with the
 specified invocationName and invocation invocationType
withNamespace(Namespace)
- Method in interface jdk.dynalink.
Operation
Returns a
NamespaceOperation
using this operation as its base.
withNamespaces(Namespace...)
- Method in interface jdk.dynalink.
Operation
Returns a
NamespaceOperation
using this operation as its base.
withNano(int)
- Method in class java.time.
LocalDateTime
Returns a copy of this
LocalDateTime
with the nano-of-second altered.
withNano(int)
- Method in class java.time.
LocalTime
Returns a copy of this
LocalTime
with the nano-of-second altered.
withNano(int)
- Method in class java.time.
OffsetDateTime
Returns a copy of this
OffsetDateTime
with the nano-of-second altered.
withNano(int)
- Method in class java.time.
OffsetTime
Returns a copy of this
OffsetTime
with the nano-of-second altered.
withNano(int)
- Method in class java.time.
ZonedDateTime
Returns a copy of this
ZonedDateTime
with the nano-of-second altered.
withNanos(int)
- Method in class java.time.
Duration
Returns a copy of this duration with the specified nano-of-second.
withNegativeSign(char)
- Method in class java.time.format.
DecimalStyle
Returns a copy of the info with a new character that represents the negative sign.
withOffsetSameInstant(ZoneOffset)
- Method in class java.time.
OffsetDateTime
Returns a copy of this
OffsetDateTime
with the specified offset ensuring
 that the result is at the same instant.
withOffsetSameInstant(ZoneOffset)
- Method in class java.time.
OffsetTime
Returns a copy of this
OffsetTime
with the specified offset ensuring
 that the result is at the same instant on an implied day.
withOffsetSameLocal(ZoneOffset)
- Method in class java.time.
OffsetDateTime
Returns a copy of this
OffsetDateTime
with the specified offset ensuring
 that the result has the same local date-time.
withOffsetSameLocal(ZoneOffset)
- Method in class java.time.
OffsetTime
Returns a copy of this
OffsetTime
with the specified offset ensuring
 that the result has the same local time.
withOrder(ByteOrder)
- Method in interface java.lang.foreign.
AddressLayout
PREVIEW
Returns a value layout with the same characteristics as this layout, but with the given byte order.
withOrder(ByteOrder)
- Method in interface java.lang.foreign.
ValueLayout.OfBoolean
PREVIEW
Returns a value layout with the same characteristics as this layout, but with the given byte order.
withOrder(ByteOrder)
- Method in interface java.lang.foreign.
ValueLayout.OfByte
PREVIEW
Returns a value layout with the same characteristics as this layout, but with the given byte order.
withOrder(ByteOrder)
- Method in interface java.lang.foreign.
ValueLayout.OfChar
PREVIEW
Returns a value layout with the same characteristics as this layout, but with the given byte order.
withOrder(ByteOrder)
- Method in interface java.lang.foreign.
ValueLayout.OfDouble
PREVIEW
Returns a value layout with the same characteristics as this layout, but with the given byte order.
withOrder(ByteOrder)
- Method in interface java.lang.foreign.
ValueLayout.OfFloat
PREVIEW
Returns a value layout with the same characteristics as this layout, but with the given byte order.
withOrder(ByteOrder)
- Method in interface java.lang.foreign.
ValueLayout.OfInt
PREVIEW
Returns a value layout with the same characteristics as this layout, but with the given byte order.
withOrder(ByteOrder)
- Method in interface java.lang.foreign.
ValueLayout.OfLong
PREVIEW
Returns a value layout with the same characteristics as this layout, but with the given byte order.
withOrder(ByteOrder)
- Method in interface java.lang.foreign.
ValueLayout.OfShort
PREVIEW
Returns a value layout with the same characteristics as this layout, but with the given byte order.
withOrder(ByteOrder)
- Method in interface java.lang.foreign.
ValueLayout
PREVIEW
Returns a value layout with the same characteristics as this layout, but with the given byte order.
withoutName()
- Method in interface java.lang.foreign.
AddressLayout
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with no name.
withoutName()
- Method in interface java.lang.foreign.
GroupLayout
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with no name.
withoutName()
- Method in interface java.lang.foreign.
MemoryLayout
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with no name.
withoutName()
- Method in interface java.lang.foreign.
PaddingLayout
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with no name.
withoutName()
- Method in interface java.lang.foreign.
StructLayout
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with no name.
withoutName()
- Method in interface java.lang.foreign.
UnionLayout
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with no name.
withoutName()
- Method in interface java.lang.foreign.
ValueLayout.OfBoolean
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with no name.
withoutName()
- Method in interface java.lang.foreign.
ValueLayout.OfByte
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with no name.
withoutName()
- Method in interface java.lang.foreign.
ValueLayout.OfChar
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with no name.
withoutName()
- Method in interface java.lang.foreign.
ValueLayout.OfDouble
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with no name.
withoutName()
- Method in interface java.lang.foreign.
ValueLayout.OfFloat
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with no name.
withoutName()
- Method in interface java.lang.foreign.
ValueLayout.OfInt
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with no name.
withoutName()
- Method in interface java.lang.foreign.
ValueLayout.OfLong
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with no name.
withoutName()
- Method in interface java.lang.foreign.
ValueLayout.OfShort
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with no name.
withoutName()
- Method in interface java.lang.foreign.
ValueLayout
PREVIEW
Returns a memory layout with the same characteristics as this layout, but with no name.
withoutPadding()
- Method in class java.util.
Base64.Encoder
Returns an encoder instance that encodes equivalently to this one,
 but without adding any padding character at the end of the encoded
 byte data.
withoutStackTrace()
- Method in class jdk.jfr.
EventSettings
Disables stack traces for the event that is associated with this event setting.
withoutTargetLayout()
- Method in interface java.lang.foreign.
AddressLayout
PREVIEW
Returns an address layout with the same carrier, alignment constraint, name and order as this address layout,
 but with no target layout.
withoutThreshold()
- Method in class jdk.jfr.
EventSettings
Specifies that a threshold is not used.
withPeriod(Duration)
- Method in class jdk.jfr.
EventSettings
Sets the interval for the event that is associated with this event setting.
withPositiveSign(char)
- Method in class java.time.format.
DecimalStyle
Returns a copy of the info with a new character that represents the positive sign.
withPrefix(String)
- Method in class java.util.
HexFormat
Returns a copy of this
HexFormat
with the prefix.
withResolverFields(TemporalField...)
- Method in class java.time.format.
DateTimeFormatter
Returns a copy of this formatter with a new set of resolver fields.
withResolverFields(Set<TemporalField>)
- Method in class java.time.format.
DateTimeFormatter
Returns a copy of this formatter with a new set of resolver fields.
withResolverStyle(ResolverStyle)
- Method in class java.time.format.
DateTimeFormatter
Returns a copy of this formatter with a new resolver style.
withSecond(int)
- Method in class java.time.
LocalDateTime
Returns a copy of this
LocalDateTime
with the second-of-minute altered.
withSecond(int)
- Method in class java.time.
LocalTime
Returns a copy of this
LocalTime
with the second-of-minute altered.
withSecond(int)
- Method in class java.time.
OffsetDateTime
Returns a copy of this
OffsetDateTime
with the second-of-minute altered.
withSecond(int)
- Method in class java.time.
OffsetTime
Returns a copy of this
OffsetTime
with the second-of-minute altered.
withSecond(int)
- Method in class java.time.
ZonedDateTime
Returns a copy of this
ZonedDateTime
with the second-of-minute altered.
withSeconds(long)
- Method in class java.time.
Duration
Returns a copy of this duration with the specified amount of seconds.
withShape(VectorShape)
- Method in interface jdk.incubator.vector.
VectorSpecies
Finds a species with the given shape and the same
 elementType as this species.
withStackTrace()
- Method in class jdk.jfr.
EventSettings
Enables stack traces for the event that is associated with this event setting.
withSuffix(String)
- Method in class java.util.
HexFormat
Returns a copy of this
HexFormat
with the suffix.
withTargetLayout(MemoryLayout)
- Method in interface java.lang.foreign.
AddressLayout
PREVIEW
Returns an address layout with the same carrier, alignment constraint, name and order as this address layout,
 but associated with the specified target layout.
withThreadPool(ExecutorService)
- Static method in class java.nio.channels.
AsynchronousChannelGroup
Creates an asynchronous channel group with a given thread pool.
withThreshold(Duration)
- Method in class jdk.jfr.
EventSettings
Sets the threshold for the event that is associated with this event setting.
withUpperCase()
- Method in class java.util.
HexFormat
Returns a copy of this
HexFormat
to use uppercase hexadecimal characters.
withVarargs(boolean)
- Method in class java.lang.invoke.
MethodHandle
Adapts this method handle to be
variable arity
if the boolean flag is true, else
fixed arity
.
withVariant(HijrahChronology)
- Method in class java.time.chrono.
HijrahDate
Returns a
HijrahDate
with the Chronology requested.
withYear(int)
- Method in class java.time.
LocalDate
Returns a copy of this
LocalDate
with the year altered.
withYear(int)
- Method in class java.time.
LocalDateTime
Returns a copy of this
LocalDateTime
with the year altered.
withYear(int)
- Method in class java.time.
OffsetDateTime
Returns a copy of this
OffsetDateTime
with the year altered.
withYear(int)
- Method in class java.time.
YearMonth
Returns a copy of this
YearMonth
with the year altered.
withYear(int)
- Method in class java.time.
ZonedDateTime
Returns a copy of this
ZonedDateTime
with the year altered.
withYears(int)
- Method in class java.time.
Period
Returns a copy of this period with the specified amount of years.
withZeroDigit(char)
- Method in class java.time.format.
DecimalStyle
Returns a copy of the info with a new character that represents zero.
withZone(ZoneId)
- Method in class java.time.
Clock
Returns a copy of this clock with a different time-zone.
withZone(ZoneId)
- Method in class java.time.format.
DateTimeFormatter
Returns a copy of this formatter with a new override zone.
withZone(ZoneId)
- Method in interface java.time.
InstantSource
Returns a clock with the specified time-zone.
withZoneSameInstant(ZoneId)
- Method in interface java.time.chrono.
ChronoZonedDateTime
Returns a copy of this date-time with a different time-zone,
 retaining the instant.
withZoneSameInstant(ZoneId)
- Method in class java.time.
ZonedDateTime
Returns a copy of this date-time with a different time-zone,
 retaining the instant.
withZoneSameLocal(ZoneId)
- Method in interface java.time.chrono.
ChronoZonedDateTime
Returns a copy of this date-time with a different time-zone,
 retaining the local date-time if possible.
withZoneSameLocal(ZoneId)
- Method in class java.time.
ZonedDateTime
Returns a copy of this date-time with a different time-zone,
 retaining the local date-time if possible.
WORD
- Static variable in interface javax.accessibility.
AccessibleText
Constant used to indicate that the part of the text that should be
 retrieved is a word.
WORD_SPACING
- Static variable in class javax.swing.text.html.
CSS.Attribute
CSS attribute "word-spacing".
wordChars(int, int)
- Method in class java.io.
StreamTokenizer
Specifies that all characters
c
in the range
low <= c <= high
are word constituents.
wrap()
- Method in class java.lang.invoke.
MethodType
Converts all primitive types to their corresponding wrapper types.
wrap(byte[])
- Static method in class java.nio.
ByteBuffer
Wraps a byte array into a buffer.
wrap(byte[], int, int)
- Static method in class java.nio.
ByteBuffer
Wraps a byte array into a buffer.
wrap(byte[], int, int)
- Method in interface javax.security.sasl.
SaslClient
Wraps a byte array to be sent to the server.
wrap(byte[], int, int)
- Method in interface javax.security.sasl.
SaslServer
Wraps a byte array to be sent to the client.
wrap(byte[], int, int, MessageProp)
- Method in interface org.ietf.jgss.
GSSContext
Applies per-message security services over the established security
 context.
wrap(char[])
- Static method in class java.nio.
CharBuffer
Wraps a char array into a buffer.
wrap(char[], int, int)
- Static method in class java.nio.
CharBuffer
Wraps a char array into a buffer.
wrap(double[])
- Static method in class java.nio.
DoubleBuffer
Wraps a double array into a buffer.
wrap(double[], int, int)
- Static method in class java.nio.
DoubleBuffer
Wraps a double array into a buffer.
wrap(float[])
- Static method in class java.nio.
FloatBuffer
Wraps a float array into a buffer.
wrap(float[], int, int)
- Static method in class java.nio.
FloatBuffer
Wraps a float array into a buffer.
wrap(int[])
- Static method in class java.nio.
IntBuffer
Wraps an int array into a buffer.
wrap(int[], int, int)
- Static method in class java.nio.
IntBuffer
Wraps an int array into a buffer.
wrap(long[])
- Static method in class java.nio.
LongBuffer
Wraps a long array into a buffer.
wrap(long[], int, int)
- Static method in class java.nio.
LongBuffer
Wraps a long array into a buffer.
wrap(short[])
- Static method in class java.nio.
ShortBuffer
Wraps a short array into a buffer.
wrap(short[], int, int)
- Static method in class java.nio.
ShortBuffer
Wraps a short array into a buffer.
wrap(InputStream)
- Method in class java.util.
Base64.Decoder
Returns an input stream for decoding
Base64
encoded byte stream.
wrap(InputStream, OutputStream, MessageProp)
- Method in interface org.ietf.jgss.
GSSContext
Deprecated.
The stream-based methods have been removed from RFC 8353.
 Use
GSSContext.wrap(byte[], int, int, MessageProp)
instead.
wrap(OutputStream)
- Method in class java.util.
Base64.Encoder
Wraps an output stream for encoding byte data using the
Base64
encoding scheme.
wrap(CharSequence)
- Static method in class java.nio.
CharBuffer
Wraps a character sequence into a buffer.
wrap(CharSequence, int, int)
- Static method in class java.nio.
CharBuffer
Wraps a character sequence into a buffer.
wrap(ByteBuffer[], int, int, ByteBuffer)
- Method in class javax.net.ssl.
SSLEngine
Attempts to encode plaintext bytes from a subsequence of data
 buffers into SSL/TLS/DTLS network data.
wrap(ByteBuffer[], ByteBuffer)
- Method in class javax.net.ssl.
SSLEngine
Attempts to encode plaintext bytes from a sequence of data
 buffers into SSL/TLS/DTLS network data.
wrap(ByteBuffer, ByteBuffer)
- Method in class javax.net.ssl.
SSLEngine
Attempts to encode a buffer of plaintext application data into
 SSL/TLS/DTLS network data.
wrap(Key)
- Method in class javax.crypto.
Cipher
Wrap a key.
WRAP_MODE
- Static variable in class javax.crypto.
Cipher
Constant used to initialize cipher to key-wrapping mode.
WRAP_TAB_LAYOUT
- Static variable in class javax.swing.
JTabbedPane
The tab layout policy for wrapping tabs in multiple runs when all
 tabs will not fit within a single run.
wrapIndex(int)
- Method in class jdk.incubator.vector.
VectorShuffle
Validation function for lane indexes which may be out of the
 valid range of
[0..VLENGTH-1]
.
wrapIndexes()
- Method in class jdk.incubator.vector.
VectorShuffle
Apply the
wrapIndex()
validation
 function to all lanes, replacing any exceptional indexes
 with wrapped normal indexes.
wrapped()
- Method in interface jdk.jshell.
SourceCodeAnalysis.SnippetWrapper
Returns a Java class definition that wraps the
SourceCodeAnalysis.SnippetWrapper.source()
or, if an import, the import source.
WrappedPlainView
- Class in
javax.swing.text
View of plain text (text with only one font and color)
 that does line-wrapping.
WrappedPlainView(Element)
- Constructor for class javax.swing.text.
WrappedPlainView
Creates a new WrappedPlainView.
WrappedPlainView(Element, boolean)
- Constructor for class javax.swing.text.
WrappedPlainView
Creates a new WrappedPlainView.
wrappedToSourcePosition(int)
- Method in interface jdk.jshell.
SourceCodeAnalysis.SnippetWrapper
Maps character position within the wrapped to character position
 within the source.
wrapper(Snippet)
- Method in class jdk.jshell.
SourceCodeAnalysis
Returns the wrapper information for the
Snippet
.
Wrapper
- Interface in
java.sql
Interface for JDBC classes which provide the ability to retrieve the delegate instance when the instance
 in question is in fact a proxy class.
wrapperInstanceTarget(Object)
- Static method in class java.lang.invoke.
MethodHandleProxies
Produces or recovers a target method handle which is behaviorally
 equivalent to the unique method of this wrapper instance.
wrapperInstanceType(Object)
- Static method in class java.lang.invoke.
MethodHandleProxies
Recovers the unique single-method interface type for which this wrapper instance was created.
wrappers(String)
- Method in class jdk.jshell.
SourceCodeAnalysis
Returns the wrapper information for the snippet within the
 input source string.
writableAction
- Static variable in class javax.swing.text.
DefaultEditorKit
Name of the action to set the editor into writeable
 mode.
WritableByteChannel
- Interface in
java.nio.channels
A channel that can write bytes.
WritableRaster
- Class in
java.awt.image
This class extends Raster to provide pixel writing capabilities.
WritableRaster(SampleModel, DataBuffer, Point)
- Constructor for class java.awt.image.
WritableRaster
Constructs a WritableRaster with the given SampleModel and DataBuffer.
WritableRaster(SampleModel, DataBuffer, Rectangle, Point, WritableRaster)
- Constructor for class java.awt.image.
WritableRaster
Constructs a WritableRaster with the given SampleModel, DataBuffer,
 and parent.
WritableRaster(SampleModel, Point)
- Constructor for class java.awt.image.
WritableRaster
Constructs a WritableRaster with the given SampleModel.
WritableRenderedImage
- Interface in
java.awt.image
WritableRenderedImage is a common interface for objects which
 contain or can produce image data in the form of Rasters and
 which can be modified and/or written over.
write()
- Method in class javax.swing.text.
AbstractWriter
This abstract method needs to be implemented
 by subclasses.
write()
- Method in class javax.swing.text.html.
HTMLWriter
Iterates over the
 Element tree and controls the writing out of
 all the tags and its attributes.
write()
- Method in class javax.swing.text.html.
MinimalHTMLWriter
Generates HTML output
 from a StyledDocument.
write(byte[])
- Method in interface java.io.
DataOutput
Writes to the output stream all the bytes in array
b
.
write(byte[])
- Method in class java.io.
FileOutputStream
Writes
b.length
bytes from the specified byte array
 to this file output stream.
write(byte[])
- Method in class java.io.
FilterOutputStream
Writes
b.length
bytes to this output stream.
write(byte[])
- Method in interface java.io.
ObjectOutput
Writes an array of bytes.
write(byte[])
- Method in class java.io.
ObjectOutputStream
Writes an array of bytes.
write(byte[])
- Method in class java.io.
OutputStream
Writes
b.length
bytes from the specified byte array
 to this output stream.
write(byte[])
- Method in class java.io.
PrintStream
Writes all bytes from the specified byte array to this stream.
write(byte[])
- Method in class java.io.
RandomAccessFile
Writes
b.length
bytes from the specified byte array
 to this file, starting at the current file pointer.
write(byte[])
- Method in class javax.crypto.
CipherOutputStream
Writes
b.length
bytes from the specified byte array
 to this output stream.
write(byte[])
- Method in interface javax.imageio.stream.
ImageOutputStream
Writes a sequence of bytes to the stream at the current
 position.
write(byte[])
- Method in class javax.imageio.stream.
ImageOutputStreamImpl
write(byte[], int, int)
- Method in class java.io.
BufferedOutputStream
Writes
len
bytes from the specified byte array
 starting at offset
off
to this buffered output stream.
write(byte[], int, int)
- Method in class java.io.
ByteArrayOutputStream
Writes
len
bytes from the specified byte array
 starting at offset
off
to this
ByteArrayOutputStream
.
write(byte[], int, int)
- Method in interface java.io.
DataOutput
Writes
len
bytes from array
b
, in order,  to
 the output stream.
write(byte[], int, int)
- Method in class java.io.
DataOutputStream
Writes
len
bytes from the specified byte array
 starting at offset
off
to the underlying output stream.
write(byte[], int, int)
- Method in class java.io.
FileOutputStream
Writes
len
bytes from the specified byte array
 starting at offset
off
to this file output stream.
write(byte[], int, int)
- Method in class java.io.
FilterOutputStream
Writes
len
bytes from the specified
byte
array starting at offset
off
to
 this output stream.
write(byte[], int, int)
- Method in interface java.io.
ObjectOutput
Writes a sub array of bytes.
write(byte[], int, int)
- Method in class java.io.
ObjectOutputStream
Writes a sub array of bytes.
write(byte[], int, int)
- Method in class java.io.
OutputStream
Writes
len
bytes from the specified byte array
 starting at offset
off
to this output stream.
write(byte[], int, int)
- Method in class java.io.
PipedOutputStream
Writes
len
bytes from the specified byte array
 starting at offset
off
to this piped output stream.
write(byte[], int, int)
- Method in class java.io.
PrintStream
Writes
len
bytes from the specified byte array starting at
 offset
off
to this stream.
write(byte[], int, int)
- Method in class java.io.
RandomAccessFile
Writes
len
bytes from the specified byte array
 starting at offset
off
to this file.
write(byte[], int, int)
- Method in class java.rmi.server.
LogStream
Deprecated.
no replacement
write(byte[], int, int)
- Method in class java.security.
DigestOutputStream
Updates the message digest (if the digest function is on) using
 the specified subarray, and in any case writes the subarray to
 the output stream.
write(byte[], int, int)
- Method in class java.util.zip.
CheckedOutputStream
Writes an array of bytes.
write(byte[], int, int)
- Method in class java.util.zip.
DeflaterOutputStream
Writes an array of bytes to the compressed output stream.
write(byte[], int, int)
- Method in class java.util.zip.
GZIPOutputStream
Writes array of bytes to the compressed output stream.
write(byte[], int, int)
- Method in class java.util.zip.
InflaterOutputStream
Writes an array of bytes to the uncompressed output stream.
write(byte[], int, int)
- Method in class java.util.zip.
ZipOutputStream
Writes an array of bytes to the current ZIP entry data.
write(byte[], int, int)
- Method in class javax.crypto.
CipherOutputStream
Writes
len
bytes from the specified byte array
 starting at offset
off
to this output stream.
write(byte[], int, int)
- Method in class javax.imageio.stream.
FileCacheImageOutputStream
write(byte[], int, int)
- Method in class javax.imageio.stream.
FileImageOutputStream
write(byte[], int, int)
- Method in interface javax.imageio.stream.
ImageOutputStream
Writes a sequence of bytes to the stream at the current
 position.
write(byte[], int, int)
- Method in class javax.imageio.stream.
MemoryCacheImageOutputStream
write(byte[], int, int)
- Method in interface javax.sound.sampled.
SourceDataLine
Writes audio data to the mixer via this source data line.
write(char)
- Method in class javax.swing.text.
AbstractWriter
Writes out a character.
write(char[])
- Method in class java.io.
PrintWriter
Writes an array of characters.
write(char[])
- Method in class java.io.
Writer
Writes an array of characters.
write(char[], int, int)
- Method in class java.io.
BufferedWriter
Writes a portion of an array of characters.
write(char[], int, int)
- Method in class java.io.
CharArrayWriter
Writes characters to the buffer.
write(char[], int, int)
- Method in class java.io.
FilterWriter
Writes a portion of an array of characters.
write(char[], int, int)
- Method in class java.io.
OutputStreamWriter
Writes a portion of an array of characters.
write(char[], int, int)
- Method in class java.io.
PipedWriter
Writes
len
characters from the specified character array
 starting at offset
off
to this piped output stream.
write(char[], int, int)
- Method in class java.io.
PrintWriter
Writes A Portion of an array of characters.
write(char[], int, int)
- Method in class java.io.
StringWriter
Write a portion of an array of characters.
write(char[], int, int)
- Method in class java.io.
Writer
Writes a portion of an array of characters.
write(char[], int, int)
- Method in class javax.swing.text.
AbstractWriter
All write methods call into this one.
write(int)
- Method in class java.io.
BufferedOutputStream
Writes the specified byte to this buffered output stream.
write(int)
- Method in class java.io.
BufferedWriter
Writes a single character.
write(int)
- Method in class java.io.
ByteArrayOutputStream
Writes the specified byte to this
ByteArrayOutputStream
.
write(int)
- Method in class java.io.
CharArrayWriter
Writes a character to the buffer.
write(int)
- Method in interface java.io.
DataOutput
Writes to the output stream the eight
 low-order bits of the argument
b
.
write(int)
- Method in class java.io.
DataOutputStream
Writes the specified byte (the low eight bits of the argument
b
) to the underlying output stream.
write(int)
- Method in class java.io.
FileOutputStream
Writes the specified byte to this file output stream.
write(int)
- Method in class java.io.
FilterOutputStream
Writes the specified
byte
to this output stream.
write(int)
- Method in class java.io.
FilterWriter
Writes a single character.
write(int)
- Method in interface java.io.
ObjectOutput
Writes a byte.
write(int)
- Method in class java.io.
ObjectOutputStream
Writes a byte.
write(int)
- Method in class java.io.
OutputStream
Writes the specified byte to this output stream.
write(int)
- Method in class java.io.
OutputStreamWriter
Writes a single character.
write(int)
- Method in class java.io.
PipedOutputStream
Writes the specified
byte
to the piped output stream.
write(int)
- Method in class java.io.
PipedWriter
Writes the specified
char
to the piped output stream.
write(int)
- Method in class java.io.
PrintStream
Writes the specified byte to this stream.
write(int)
- Method in class java.io.
PrintWriter
Writes a single character.
write(int)
- Method in class java.io.
RandomAccessFile
Writes the specified byte to this file.
write(int)
- Method in class java.io.
StringWriter
Write a single character.
write(int)
- Method in class java.io.
Writer
Writes a single character.
write(int)
- Method in class java.rmi.server.
LogStream
Deprecated.
no replacement
write(int)
- Method in class java.security.
DigestOutputStream
Updates the message digest (if the digest function is on) using
 the specified byte, and in any case writes the byte
 to the output stream.
write(int)
- Method in class java.util.zip.
CheckedOutputStream
Writes a byte.
write(int)
- Method in class java.util.zip.
DeflaterOutputStream
Writes a byte to the compressed output stream.
write(int)
- Method in class java.util.zip.
InflaterOutputStream
Writes a byte to the uncompressed output stream.
write(int)
- Method in class javax.crypto.
CipherOutputStream
Writes the specified byte to this output stream.
write(int)
- Method in class javax.imageio.stream.
FileCacheImageOutputStream
write(int)
- Method in class javax.imageio.stream.
FileImageOutputStream
write(int)
- Method in interface javax.imageio.stream.
ImageOutputStream
Writes a single byte to the stream at the current position.
write(int)
- Method in class javax.imageio.stream.
MemoryCacheImageOutputStream
write(RenderedImage)
- Method in class javax.imageio.
ImageWriter
Appends a complete image stream consisting of a single image
 with default metadata and thumbnails to the output.
write(RenderedImage, String, File)
- Static method in class javax.imageio.
ImageIO
Writes an image using an arbitrary
ImageWriter
that supports the given format to a
File
.
write(RenderedImage, String, OutputStream)
- Static method in class javax.imageio.
ImageIO
Writes an image using an arbitrary
ImageWriter
that supports the given format to an
OutputStream
.
write(RenderedImage, String, ImageOutputStream)
- Static method in class javax.imageio.
ImageIO
Writes an image using an arbitrary
ImageWriter
that supports the given format to an
ImageOutputStream
.
write(DataOutput)
- Method in class java.rmi.server.
UID
Marshals a binary representation of this
UID
to
 a
DataOutput
instance.
write(ObjectOutput)
- Method in class java.io.
ObjectOutputStream.PutField
Deprecated.
This method does not write the values contained by this
PutField
object in a proper format, and may
         result in corruption of the serialization stream.  The
         correct way to write
PutField
data is by
         calling the
ObjectOutputStream.writeFields()
method.
write(ObjectOutput)
- Method in class java.rmi.server.
ObjID
Marshals a binary representation of this
ObjID
to
 an
ObjectOutput
instance.
write(OutputStream)
- Method in class java.awt.color.
ICC_Profile
Write this
ICC_Profile
to an
OutputStream
.
write(OutputStream)
- Method in class java.util.jar.
Manifest
Writes the Manifest to the specified OutputStream.
write(OutputStream, Document, int, int)
- Method in class javax.swing.text.
DefaultEditorKit
Writes content from a document to the given stream
 in a format appropriate for this kind of content handler.
write(OutputStream, Document, int, int)
- Method in class javax.swing.text.
EditorKit
Writes content from a document to the given stream
 in a format appropriate for this kind of content handler.
write(OutputStream, Document, int, int)
- Method in class javax.swing.text.rtf.
RTFEditorKit
Write content from a document to the given stream
 in a format appropriate for this kind of content handler.
write(Writer)
- Method in class javax.swing.text.
JTextComponent
Stores the contents of the model into the given
 stream.
write(Writer, Document, int, int)
- Method in class javax.swing.text.
DefaultEditorKit
Writes content from a document to the given stream
 as plain text.
write(Writer, Document, int, int)
- Method in class javax.swing.text.
EditorKit
Writes content from a document to the given stream
 in a format appropriate for this kind of content handler.
write(Writer, Document, int, int)
- Method in class javax.swing.text.html.
HTMLEditorKit
Write content from a document to the given stream
 in a format appropriate for this kind of content handler.
write(Writer, Document, int, int)
- Method in class javax.swing.text.rtf.
RTFEditorKit
Write content from a document to the given stream
 as plain text.
write(String)
- Method in class java.awt.color.
ICC_Profile
Write this
ICC_Profile
to a file.
write(String)
- Method in class java.io.
PrintWriter
Writes a string.
write(String)
- Method in class java.io.
StringWriter
Write a string.
write(String)
- Method in class java.io.
Writer
Writes a string.
write(String)
- Method in class javax.swing.text.
AbstractWriter
Writes out a string.
write(String)
- Method in interface org.w3c.dom.html.
HTMLDocument
Write a string of text to a document stream opened by
open()
.
write(String, int, int)
- Method in class java.io.
BufferedWriter
Writes a portion of a String.
write(String, int, int)
- Method in class java.io.
CharArrayWriter
Write a portion of a string to the buffer.
write(String, int, int)
- Method in class java.io.
FilterWriter
Writes a portion of a string.
write(String, int, int)
- Method in class java.io.
OutputStreamWriter
Writes a portion of a string.
write(String, int, int)
- Method in class java.io.
PrintWriter
Writes a portion of a string.
write(String, int, int)
- Method in class java.io.
StringWriter
Write a portion of a string.
write(String, int, int)
- Method in class java.io.
Writer
Writes a portion of a string.
write(String, ByteBuffer)
- Method in interface java.nio.file.attribute.
UserDefinedFileAttributeView
Writes the value of a user-defined attribute from a buffer.
write(ByteBuffer)
- Method in interface java.nio.channels.
AsynchronousByteChannel
Writes a sequence of bytes to this channel from the given buffer.
write(ByteBuffer)
- Method in class java.nio.channels.
AsynchronousSocketChannel
write(ByteBuffer)
- Method in class java.nio.channels.
DatagramChannel
Writes a datagram to this channel.
write(ByteBuffer)
- Method in class java.nio.channels.
FileChannel
Writes a sequence of bytes to this channel from the given buffer.
write(ByteBuffer)
- Method in interface java.nio.channels.
SeekableByteChannel
Writes a sequence of bytes to this channel from the given buffer.
write(ByteBuffer)
- Method in class java.nio.channels.
SocketChannel
write(ByteBuffer)
- Method in interface java.nio.channels.
WritableByteChannel
Writes a sequence of bytes to this channel from the given buffer.
write(ByteBuffer[])
- Method in class java.nio.channels.
DatagramChannel
Writes a datagram to this channel.
write(ByteBuffer[])
- Method in class java.nio.channels.
FileChannel
Writes a sequence of bytes to this channel from the given buffers.
write(ByteBuffer[])
- Method in interface java.nio.channels.
GatheringByteChannel
Writes a sequence of bytes to this channel from the given buffers.
write(ByteBuffer[])
- Method in class java.nio.channels.
SocketChannel
write(ByteBuffer[], int, int)
- Method in class java.nio.channels.
DatagramChannel
Writes a datagram to this channel.
write(ByteBuffer[], int, int)
- Method in class java.nio.channels.
FileChannel
Writes a sequence of bytes to this channel from a subsequence of the
 given buffers.
write(ByteBuffer[], int, int)
- Method in interface java.nio.channels.
GatheringByteChannel
Writes a sequence of bytes to this channel from a subsequence of the
 given buffers.
write(ByteBuffer[], int, int)
- Method in class java.nio.channels.
SocketChannel
write(ByteBuffer[], int, int, long, TimeUnit, A, CompletionHandler<Long, ? super A>)
- Method in class java.nio.channels.
AsynchronousSocketChannel
Writes a sequence of bytes to this channel from a subsequence of the given
 buffers.
write(ByteBuffer, long)
- Method in class java.nio.channels.
AsynchronousFileChannel
Writes a sequence of bytes to this channel from the given buffer, starting
 at the given file position.
write(ByteBuffer, long)
- Method in class java.nio.channels.
FileChannel
Writes a sequence of bytes to this channel from the given buffer,
 starting at the given file position.
write(ByteBuffer, long, A, CompletionHandler<Integer, ? super A>)
- Method in class java.nio.channels.
AsynchronousFileChannel
Writes a sequence of bytes to this channel from the given buffer, starting
 at the given file position.
write(ByteBuffer, long, TimeUnit, A, CompletionHandler<Integer, ? super A>)
- Method in class java.nio.channels.
AsynchronousSocketChannel
Writes a sequence of bytes to this channel from the given buffer.
write(ByteBuffer, A, CompletionHandler<Integer, ? super A>)
- Method in interface java.nio.channels.
AsynchronousByteChannel
Writes a sequence of bytes to this channel from the given buffer.
write(ByteBuffer, A, CompletionHandler<Integer, ? super A>)
- Method in class java.nio.channels.
AsynchronousSocketChannel
write(Path, byte[], OpenOption...)
- Static method in class java.nio.file.
Files
Writes bytes to a file.
write(Path, Iterable<? extends CharSequence>, Charset, OpenOption...)
- Static method in class java.nio.file.
Files
Write lines of text to a file.
write(Path, Iterable<? extends CharSequence>, OpenOption...)
- Static method in class java.nio.file.
Files
Write lines of text to a file.
write(Path, Predicate<RecordedEvent>)
- Method in class jdk.jfr.consumer.
RecordingFile
Filter out events and write them to a new file.
write(IIOImage)
- Method in class javax.imageio.
ImageWriter
Appends a complete image stream containing a single image with
 default metadata and thumbnails to the output.
write(IIOMetadata, IIOImage, ImageWriteParam)
- Method in class javax.imageio.
ImageWriter
Appends a complete image stream containing a single image and
 associated stream and image metadata and thumbnails to the
 output.
write(Sequence, int, File)
- Static method in class javax.sound.midi.
MidiSystem
Writes a stream of bytes representing a file of the MIDI file type
 indicated to the external file provided.
write(Sequence, int, File)
- Method in class javax.sound.midi.spi.
MidiFileWriter
Writes a stream of bytes representing a MIDI file of the file type
 indicated to the external file provided.
write(Sequence, int, OutputStream)
- Static method in class javax.sound.midi.
MidiSystem
Writes a stream of bytes representing a file of the MIDI file type
 indicated to the output stream provided.
write(Sequence, int, OutputStream)
- Method in class javax.sound.midi.spi.
MidiFileWriter
Writes a stream of bytes representing a MIDI file of the file type
 indicated to the output stream provided.
write(AudioInputStream, AudioFileFormat.Type, File)
- Static method in class javax.sound.sampled.
AudioSystem
Writes a stream of bytes representing an audio file of the specified file
 type to the external file provided.
write(AudioInputStream, AudioFileFormat.Type, File)
- Method in class javax.sound.sampled.spi.
AudioFileWriter
Writes a stream of bytes representing an audio file of the file format
 indicated to the external file provided.
write(AudioInputStream, AudioFileFormat.Type, OutputStream)
- Static method in class javax.sound.sampled.
AudioSystem
Writes a stream of bytes representing an audio file of the specified file
 type to the output stream provided.
write(AudioInputStream, AudioFileFormat.Type, OutputStream)
- Method in class javax.sound.sampled.spi.
AudioFileWriter
Writes a stream of bytes representing an audio file of the file type
 indicated to the output stream provided.
write(Node, LSOutput)
- Method in interface org.w3c.dom.ls.
LSSerializer
Serialize the specified node as described above in the general
 description of the
LSSerializer
interface.
WRITE
- Enum constant in enum class java.lang.
ProcessBuilder.Redirect.Type
The type of redirects returned from
Redirect.to(File)
.
WRITE
- Enum constant in enum class java.nio.file.
AccessMode
Test write access.
WRITE
- Enum constant in enum class java.nio.file.
StandardOpenOption
Open for write access.
WRITE_ACL
- Enum constant in enum class java.nio.file.attribute.
AclEntryPermission
Permission to write the ACL attribute.
WRITE_ATTRIBUTES
- Enum constant in enum class java.nio.file.attribute.
AclEntryPermission
The ability to write (non-acl) file attributes.
WRITE_DATA
- Enum constant in enum class java.nio.file.attribute.
AclEntryPermission
Permission to modify the file's data.
WRITE_FAILURE
- Static variable in class java.util.logging.
ErrorManager
WRITE_FAILURE is used when a write to an output stream fails.
WRITE_NAMED_ATTRS
- Enum constant in enum class java.nio.file.attribute.
AclEntryPermission
Permission to write the named attributes of a file.
WRITE_OWNER
- Enum constant in enum class java.nio.file.attribute.
AclEntryPermission
Permission to change the owner.
writeAborted(ImageWriter)
- Method in interface javax.imageio.event.
IIOWriteProgressListener
Reports that a write has been aborted via the writer's
abort
method.
WriteAbortedException
- Exception Class in
java.io
Signals that one of the ObjectStreamExceptions was thrown during a
 write operation.
WriteAbortedException(String, Exception)
- Constructor for exception class java.io.
WriteAbortedException
Constructs a WriteAbortedException with a string describing
 the exception and the exception causing the abort.
writeArray(Array)
- Method in interface java.sql.
SQLOutput
Writes an SQL
ARRAY
value to the stream.
writeArray(Array)
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes an
Array
object in the Java
 programming language to this
SQLOutputImpl
object.
writeAsciiStream(InputStream)
- Method in interface java.sql.
SQLOutput
Writes the next attribute to the stream as a stream of ASCII characters.
writeAsciiStream(InputStream)
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes a stream of ASCII characters to this
SQLOutputImpl
object.
writeAsEncodedUnicode(Writer)
- Method in interface javax.xml.stream.events.
XMLEvent
This method will write the XMLEvent as per the XML 1.0 specification as Unicode characters.
writeAttribute(String, String)
- Method in interface javax.xml.stream.
XMLStreamWriter
Writes an attribute to the output stream without
 a prefix.
writeAttribute(String, String, String)
- Method in interface javax.xml.stream.
XMLStreamWriter
Writes an attribute to the output stream
writeAttribute(String, String, String, String)
- Method in interface javax.xml.stream.
XMLStreamWriter
Writes an attribute to the output stream
writeAttributes(ObjectOutputStream, AttributeSet)
- Method in class javax.swing.text.
StyleContext
Context-specific handling of writing out attributes
writeAttributes(AttributeSet)
- Method in class javax.swing.text.
AbstractWriter
Writes out the set of attributes as " <name>=<value>"
 pairs.
writeAttributes(AttributeSet)
- Method in class javax.swing.text.html.
HTMLWriter
Writes out the attribute set.
writeAttributes(AttributeSet)
- Method in class javax.swing.text.html.
MinimalHTMLWriter
Writes out all the attributes for the
 following types:
  StyleConstants.ParagraphConstants,
  StyleConstants.CharacterConstants,
  StyleConstants.FontConstants,
  StyleConstants.ColorConstants.
writeAttributeSet(ObjectOutputStream, AttributeSet)
- Static method in class javax.swing.text.
StyleContext
Writes a set of attributes to the given object stream
 for the purpose of serialization.
writeBigDecimal(BigDecimal)
- Method in interface java.sql.
SQLOutput
Writes the next attribute to the stream as a java.math.BigDecimal object.
writeBigDecimal(BigDecimal)
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes a
java.math.BigDecimal
object in the Java programming
 language to this
SQLOutputImpl
object.
writeBinaryStream(InputStream)
- Method in interface java.sql.
SQLOutput
Writes the next attribute to the stream as a stream of uninterpreted
 bytes.
writeBinaryStream(InputStream)
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes a stream of uninterpreted bytes to this
SQLOutputImpl
object.
writeBit(int)
- Method in interface javax.imageio.stream.
ImageOutputStream
Writes a single bit, given by the least significant bit of the
 argument, to the stream at the current bit offset within the
 current byte position.
writeBit(int)
- Method in class javax.imageio.stream.
ImageOutputStreamImpl
writeBits(long, int)
- Method in interface javax.imageio.stream.
ImageOutputStream
Writes a sequence of bits, given by the
numBits
least significant bits of the
bits
argument in
 left-to-right order, to the stream at the current bit offset
 within the current byte position.
writeBits(long, int)
- Method in class javax.imageio.stream.
ImageOutputStreamImpl
writeBlob(Blob)
- Method in interface java.sql.
SQLOutput
Writes an SQL
BLOB
value to the stream.
writeBlob(Blob)
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes a
Blob
object in the Java programming language
 to this
SQLOutputImpl
object.
writeBody()
- Method in class javax.swing.text.html.
MinimalHTMLWriter
Iterates over the elements in the document
 and processes elements based on whether they are
 branch elements or leaf elements.
writeBoolean(boolean)
- Method in interface java.io.
DataOutput
Writes a
boolean
value to this output stream.
writeBoolean(boolean)
- Method in class java.io.
DataOutputStream
Writes a
boolean
to the underlying output stream as
 a 1-byte value.
writeBoolean(boolean)
- Method in class java.io.
ObjectOutputStream
Writes a boolean.
writeBoolean(boolean)
- Method in class java.io.
RandomAccessFile
Writes a
boolean
to the file as a one-byte value.
writeBoolean(boolean)
- Method in interface java.sql.
SQLOutput
Writes the next attribute to the stream as a Java boolean.
writeBoolean(boolean)
- Method in interface javax.imageio.stream.
ImageOutputStream
Writes a
boolean
value to the stream.
writeBoolean(boolean)
- Method in class javax.imageio.stream.
ImageOutputStreamImpl
writeBoolean(boolean)
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes a
boolean
in the Java programming language
 to this
SQLOutputImpl
object.
writeByte(byte)
- Method in interface java.sql.
SQLOutput
Writes the next attribute to the stream as a Java byte.
writeByte(byte)
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes a
byte
in the Java programming language
 to this
SQLOutputImpl
object.
writeByte(int)
- Method in interface java.io.
DataOutput
Writes to the output stream the eight low-order
 bits of the argument
v
.
writeByte(int)
- Method in class java.io.
DataOutputStream
Writes out a
byte
to the underlying output stream as
 a 1-byte value.
writeByte(int)
- Method in class java.io.
ObjectOutputStream
Writes an 8-bit byte.
writeByte(int)
- Method in class java.io.
RandomAccessFile
Writes a
byte
to the file as a one-byte value.
writeByte(int)
- Method in interface javax.imageio.stream.
ImageOutputStream
Writes the 8 low-order bits of
v
to the
 stream.
writeByte(int)
- Method in class javax.imageio.stream.
ImageOutputStreamImpl
writeBytes(byte[])
- Method in class java.io.
ByteArrayOutputStream
Writes the complete contents of the specified byte array
 to this
ByteArrayOutputStream
.
writeBytes(byte[])
- Method in class java.io.
PrintStream
Writes all bytes from the specified byte array to this stream.
writeBytes(byte[])
- Method in interface java.sql.
SQLOutput
Writes the next attribute to the stream as an array of bytes.
writeBytes(byte[])
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes an array of
bytes
in the Java programming language
 to this
SQLOutputImpl
object.
writeBytes(String)
- Method in interface java.io.
DataOutput
Writes a string to the output stream.
writeBytes(String)
- Method in class java.io.
DataOutputStream
Writes out the string to the underlying output stream as a
 sequence of bytes.
writeBytes(String)
- Method in class java.io.
ObjectOutputStream
Writes a String as a sequence of bytes.
writeBytes(String)
- Method in class java.io.
RandomAccessFile
Writes the string to the file as a sequence of bytes.
writeBytes(String)
- Method in interface javax.imageio.stream.
ImageOutputStream
Writes a string to the output stream.
writeBytes(String)
- Method in class javax.imageio.stream.
ImageOutputStreamImpl
writeCData(String)
- Method in interface javax.xml.stream.
XMLStreamWriter
Writes a CData section
writeChar(int)
- Method in interface java.io.
DataOutput
Writes a
char
value, which
 is comprised of two bytes, to the
 output stream.
writeChar(int)
- Method in class java.io.
DataOutputStream
Writes a
char
to the underlying output stream as a
 2-byte value, high byte first.
writeChar(int)
- Method in class java.io.
ObjectOutputStream
Writes a 16-bit char.
writeChar(int)
- Method in class java.io.
RandomAccessFile
Writes a
char
to the file as a two-byte value, high
 byte first.
writeChar(int)
- Method in interface javax.imageio.stream.
ImageOutputStream
This method is a synonym for
writeShort
.
writeChar(int)
- Method in class javax.imageio.stream.
ImageOutputStreamImpl
writeCharacters(char[], int, int)
- Method in interface javax.xml.stream.
XMLStreamWriter
Write text to the output
writeCharacters(String)
- Method in interface javax.xml.stream.
XMLStreamWriter
Write text to the output
writeCharacterStream(Reader)
- Method in interface java.sql.
SQLOutput
Writes the next attribute to the stream as a stream of Unicode characters.
writeCharacterStream(Reader)
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes a stream of Unicode characters to this
SQLOutputImpl
object.
writeChars(char[], int, int)
- Method in interface javax.imageio.stream.
ImageOutputStream
Writes a sequence of chars to the stream at the current
 position.
writeChars(char[], int, int)
- Method in class javax.imageio.stream.
ImageOutputStreamImpl
writeChars(String)
- Method in interface java.io.
DataOutput
Writes every character in the string
s
,
 to the output stream, in order,
 two bytes per character.
writeChars(String)
- Method in class java.io.
DataOutputStream
Writes a string to the underlying output stream as a sequence of
 characters.
writeChars(String)
- Method in class java.io.
ObjectOutputStream
Writes a String as a sequence of chars.
writeChars(String)
- Method in class java.io.
RandomAccessFile
Writes a string to the file as a sequence of characters.
writeChars(String)
- Method in interface javax.imageio.stream.
ImageOutputStream
Writes a string to the output stream.
writeChars(String)
- Method in class javax.imageio.stream.
ImageOutputStreamImpl
writeChildren(ObjectOutputStream)
- Method in class java.beans.beancontext.
BeanContextSupport
Used to serialize all children of
 this
BeanContext
.
writeClassDescriptor(ObjectStreamClass)
- Method in class java.io.
ObjectOutputStream
Write the specified class descriptor to the ObjectOutputStream.
writeClob(Clob)
- Method in interface java.sql.
SQLOutput
Writes an SQL
CLOB
value to the stream.
writeClob(Clob)
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes a
Clob
object in the Java programming language
 to this
SQLOutputImpl
object.
writeComment(String)
- Method in interface javax.xml.stream.
XMLStreamWriter
Writes an xml comment with the data enclosed
writeComponent(Element)
- Method in class javax.swing.text.html.
MinimalHTMLWriter
Responsible for handling Component Elements;
 deliberately unimplemented.
writeContent(Element, boolean)
- Method in class javax.swing.text.html.
MinimalHTMLWriter
Writes out the attribute set
 in an HTML-compliant manner.
writeData(RowSetInternal)
- Method in interface javax.sql.
RowSetWriter
Writes the changes in this
RowSetWriter
object's
 rowset back to the data source from which it got its data.
writeDate(Date)
- Method in interface java.sql.
SQLOutput
Writes the next attribute to the stream as a java.sql.Date object.
writeDate(Date)
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes a
java.sql.Date
object in the Java programming
 language to this
SQLOutputImpl
object.
writeDefaultNamespace(String)
- Method in interface javax.xml.stream.
XMLStreamWriter
Writes the default namespace to the stream
writeDouble(double)
- Method in interface java.io.
DataOutput
Writes a
double
value,
 which is comprised of eight bytes, to the output stream.
writeDouble(double)
- Method in class java.io.
DataOutputStream
Converts the double argument to a
long
using the
doubleToLongBits
method in class
Double
,
 and then writes that
long
value to the underlying
 output stream as an 8-byte quantity, high byte first.
writeDouble(double)
- Method in class java.io.
ObjectOutputStream
Writes a 64-bit double.
writeDouble(double)
- Method in class java.io.
RandomAccessFile
Converts the double argument to a
long
using the
doubleToLongBits
method in class
Double
,
 and then writes that
long
value to the file as an
 eight-byte quantity, high byte first.
writeDouble(double)
- Method in interface java.sql.
SQLOutput
Writes the next attribute to the stream as a Java double.
writeDouble(double)
- Method in interface javax.imageio.stream.
ImageOutputStream
Writes a
double
value, which is comprised of four
 bytes, to the output stream.
writeDouble(double)
- Method in class javax.imageio.stream.
ImageOutputStreamImpl
writeDouble(double)
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes a
double
in the Java programming language
 to this
SQLOutputImpl
object.
writeDoubles(double[], int, int)
- Method in interface javax.imageio.stream.
ImageOutputStream
Writes a sequence of doubles to the stream at the current
 position.
writeDoubles(double[], int, int)
- Method in class javax.imageio.stream.
ImageOutputStreamImpl
writeDTD(String)
- Method in interface javax.xml.stream.
XMLStreamWriter
Write a DTD section.
writeEmbeddedTags(AttributeSet)
- Method in class javax.swing.text.html.
HTMLWriter
Searches for embedded tags in the AttributeSet
 and writes them out.
writeEmptyElement(String)
- Method in interface javax.xml.stream.
XMLStreamWriter
Writes an empty element tag to the output
writeEmptyElement(String, String)
- Method in interface javax.xml.stream.
XMLStreamWriter
Writes an empty element tag to the output
writeEmptyElement(String, String, String)
- Method in interface javax.xml.stream.
XMLStreamWriter
Writes an empty element tag to the output
writeEndDocument()
- Method in interface javax.xml.stream.
XMLStreamWriter
Closes any start tags and writes corresponding end tags.
writeEndElement()
- Method in interface javax.xml.stream.
XMLStreamWriter
Writes an end tag to the output relying on the internal
 state of the writer to determine the prefix and local name
 of the event.
writeEndParagraph()
- Method in class javax.swing.text.html.
MinimalHTMLWriter
Emits an end tag for a <p>
 tag.
writeEndTag(String)
- Method in class javax.swing.text.html.
MinimalHTMLWriter
Writes out an end tag appropriately
 indented.
writeEntityRef(String)
- Method in interface javax.xml.stream.
XMLStreamWriter
Writes an entity reference
writeExpression(Expression)
- Method in class java.beans.
Encoder
The implementation first checks to see if an
 expression with this value has already been written.
writeExpression(Expression)
- Method in class java.beans.
XMLEncoder
Records the Expression so that the Encoder will
 produce the actual output when the stream is flushed.
writeExternal(ObjectOutput)
- Method in class java.awt.datatransfer.
DataFlavor
Serializes this
DataFlavor
.
writeExternal(ObjectOutput)
- Method in interface java.io.
Externalizable
The object implements the writeExternal method to save its contents
 by calling the methods of DataOutput for its primitive values or
 calling the writeObject method of ObjectOutput for objects, strings,
 and arrays.
writeExternal(ObjectOutput)
- Method in class javax.management.loading.
MLet
Deprecated.
Save this MLet's contents to the given
ObjectOutput
.
writeFields()
- Method in class java.io.
ObjectOutputStream
Write the buffered fields to the stream.
writeFloat(float)
- Method in interface java.io.
DataOutput
Writes a
float
value,
 which is comprised of four bytes, to the output stream.
writeFloat(float)
- Method in class java.io.
DataOutputStream
Converts the float argument to an
int
using the
floatToIntBits
method in class
Float
,
 and then writes that
int
value to the underlying
 output stream as a 4-byte quantity, high byte first.
writeFloat(float)
- Method in class java.io.
ObjectOutputStream
Writes a 32-bit float.
writeFloat(float)
- Method in class java.io.
RandomAccessFile
Converts the float argument to an
int
using the
floatToIntBits
method in class
Float
,
 and then writes that
int
value to the file as a
 four-byte quantity, high byte first.
writeFloat(float)
- Method in interface java.sql.
SQLOutput
Writes the next attribute to the stream as a Java float.
writeFloat(float)
- Method in interface javax.imageio.stream.
ImageOutputStream
Writes a
float
value, which is comprised of four
 bytes, to the output stream.
writeFloat(float)
- Method in class javax.imageio.stream.
ImageOutputStreamImpl
writeFloat(float)
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes a
float
in the Java programming language
 to this
SQLOutputImpl
object.
writeFloats(float[], int, int)
- Method in interface javax.imageio.stream.
ImageOutputStream
Writes a sequence of floats to the stream at the current
 position.
writeFloats(float[], int, int)
- Method in class javax.imageio.stream.
ImageOutputStreamImpl
writeHeader()
- Method in class javax.swing.text.html.
MinimalHTMLWriter
Writes out the <head> and <style>
 tags, and then invokes writeStyles() to write
 out all the named styles as the content of the
 <style> tag.
writeHTMLTags(AttributeSet)
- Method in class javax.swing.text.html.
MinimalHTMLWriter
Generates
 bold <b>, italic <i>, and <u> tags for the
 text based on its attribute settings.
writeImage(Element)
- Method in class javax.swing.text.html.
MinimalHTMLWriter
Responsible for handling Icon Elements;
 deliberately unimplemented.
writeInsert(int, IIOImage, ImageWriteParam)
- Method in class javax.imageio.
ImageWriter
Inserts a new image into an existing image stream.
writeInt(int)
- Method in interface java.io.
DataOutput
Writes an
int
value, which is
 comprised of four bytes, to the output stream.
writeInt(int)
- Method in class java.io.
DataOutputStream
Writes an
int
to the underlying output stream as four
 bytes, high byte first.
writeInt(int)
- Method in class java.io.
ObjectOutputStream
Writes a 32-bit int.
writeInt(int)
- Method in class java.io.
RandomAccessFile
Writes an
int
to the file as four bytes, high byte first.
writeInt(int)
- Method in interface java.sql.
SQLOutput
Writes the next attribute to the stream as a Java int.
writeInt(int)
- Method in interface javax.imageio.stream.
ImageOutputStream
Writes the 32 bits of
v
to the stream.
writeInt(int)
- Method in class javax.imageio.stream.
ImageOutputStreamImpl
writeInt(int)
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes an
int
in the Java programming language
 to this
SQLOutputImpl
object.
writeInts(int[], int, int)
- Method in interface javax.imageio.stream.
ImageOutputStream
Writes a sequence of ints to the stream at the current
 position.
writeInts(int[], int, int)
- Method in class javax.imageio.stream.
ImageOutputStreamImpl
writeLeaf(Element)
- Method in class javax.swing.text.html.
MinimalHTMLWriter
Responsible for writing out other non-text leaf
 elements.
writeLineSeparator()
- Method in class javax.swing.text.
AbstractWriter
Writes the line separator.
writeLineSeparator()
- Method in class javax.swing.text.html.
HTMLWriter
Writes the line separator.
writeln(String)
- Method in interface org.w3c.dom.html.
HTMLDocument
Write a string of text followed by a newline character to a document
 stream opened by
open()
.
writeLock()
- Method in interface java.util.concurrent.locks.
ReadWriteLock
Returns the lock used for writing.
writeLock()
- Method in class java.util.concurrent.locks.
ReentrantReadWriteLock
writeLock()
- Method in class java.util.concurrent.locks.
StampedLock
Exclusively acquires the lock, blocking if necessary
 until available.
writeLock()
- Method in class javax.swing.text.
AbstractDocument
Acquires a lock to begin mutating the document this lock
 protects.
WriteLock(ReentrantReadWriteLock)
- Constructor for class java.util.concurrent.locks.
ReentrantReadWriteLock.WriteLock
Constructor for use by subclasses.
writeLockInterruptibly()
- Method in class java.util.concurrent.locks.
StampedLock
Exclusively acquires the lock, blocking if necessary
 until available or the current thread is interrupted.
writeLong(long)
- Method in interface java.io.
DataOutput
Writes a
long
value, which is
 comprised of eight bytes, to the output stream.
writeLong(long)
- Method in class java.io.
DataOutputStream
Writes a
long
to the underlying output stream as eight
 bytes, high byte first.
writeLong(long)
- Method in class java.io.
ObjectOutputStream
Writes a 64-bit long.
writeLong(long)
- Method in class java.io.
RandomAccessFile
Writes a
long
to the file as eight bytes, high byte first.
writeLong(long)
- Method in interface java.sql.
SQLOutput
Writes the next attribute to the stream as a Java long.
writeLong(long)
- Method in interface javax.imageio.stream.
ImageOutputStream
Writes the 64 bits of
v
to the stream.
writeLong(long)
- Method in class javax.imageio.stream.
ImageOutputStreamImpl
writeLong(long)
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes a
long
in the Java programming language
 to this
SQLOutputImpl
object.
writeLongs(long[], int, int)
- Method in interface javax.imageio.stream.
ImageOutputStream
Writes a sequence of longs to the stream at the current
 position.
writeLongs(long[], int, int)
- Method in class javax.imageio.stream.
ImageOutputStreamImpl
writeNamespace(String, String)
- Method in interface javax.xml.stream.
XMLStreamWriter
Writes a namespace to the output stream
 If the prefix argument to this method is the empty string,
 "xmlns", or null this method will delegate to writeDefaultNamespace
writeNClob(NClob)
- Method in interface java.sql.
SQLOutput
Writes an SQL
NCLOB
value to the stream.
writeNClob(NClob)
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes an SQL
NCLOB
value to the stream.
writeNonHTMLAttributes(AttributeSet)
- Method in class javax.swing.text.html.
MinimalHTMLWriter
Writes out the remaining
 character-level attributes (attributes other than bold,
 italic, and underline) in an HTML-compliant way.
writeNString(String)
- Method in interface java.sql.
SQLOutput
Writes the next attribute to the stream as a
String
in the Java programming language.
writeNString(String)
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes the next attribute to the stream as a
String
in the Java programming language.
writeObject(Object)
- Method in class java.beans.
Encoder
Write the specified object to the output stream.
writeObject(Object)
- Method in class java.beans.
XMLEncoder
Write an XML representation of the specified object to the output.
writeObject(Object)
- Method in interface java.io.
ObjectOutput
Write an object to the underlying storage or stream.
writeObject(Object)
- Method in class java.io.
ObjectOutputStream
Write the specified object to the ObjectOutputStream.
writeObject(Object, Encoder)
- Method in class java.beans.
PersistenceDelegate
The
writeObject
is a single entry point to the persistence
 and is used by an
Encoder
in the traditional
 mode of delegation.
writeObject(Object, SQLType)
- Method in interface java.sql.
SQLOutput
Writes to the stream the data contained in the given object.
writeObject(SQLData)
- Method in interface java.sql.
SQLOutput
Writes to the stream the data contained in the given
SQLData
object.
writeObject(SQLData)
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes to the stream the data contained in the given
SQLData
object.
writeObjectOverride(Object)
- Method in class java.io.
ObjectOutputStream
Method used by subclasses to override the default writeObject method.
writeOption(Option)
- Method in class javax.swing.text.html.
HTMLWriter
Writes out the content of the Option form element.
writePacket(byte[])
- Method in class com.sun.jdi.connect.spi.
Connection
Writes a packet to the target VM.
WritePendingException
- Exception Class in
java.nio.channels
Unchecked exception thrown when an attempt is made to write to an
 asynchronous socket channel and a previous write has not completed.
WritePendingException()
- Constructor for exception class java.nio.channels.
WritePendingException
Constructs an instance of this class.
writeProcessingInstruction(String)
- Method in interface javax.xml.stream.
XMLStreamWriter
Writes a processing instruction
writeProcessingInstruction(String, String)
- Method in interface javax.xml.stream.
XMLStreamWriter
Writes a processing instruction
writer
- Variable in class javax.script.
SimpleScriptContext
This is the writer to be used to output from scripts.
writer()
- Method in class java.io.
Console
Retrieves the unique
PrintWriter
object
 associated with this console.
writer()
- Method in interface jdk.jshell.
JShellConsole
Retrieves the unique
PrintWriter
object
 associated with this console.
Writer
- Class in
java.io
Abstract class for writing to character streams.
Writer()
- Constructor for class java.io.
Writer
Creates a new character-stream writer whose critical sections will
 synchronize on the writer itself.
Writer(Object)
- Constructor for class java.io.
Writer
Creates a new character-stream writer whose critical sections will
 synchronize on the given object.
writeRef(Ref)
- Method in interface java.sql.
SQLOutput
Writes an SQL
REF
value to the stream.
writeRef(Ref)
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes a
Ref
object in the Java programming language
 to this
SQLOutputImpl
object.
writeReplace()
- Method in class java.security.cert.
Certificate
Replace the
Certificate
to be serialized with a
CertificateRep
object containing the type and
 encoded bytes of the
Certificate
.
writeReplace()
- Method in class java.security.cert.
CertPath
Replaces the
CertPath
to be serialized with a
CertPathRep
object containing the
Certificate
type and encoded bytes of the
CertPath
.
writeRowId(RowId)
- Method in interface java.sql.
SQLOutput
Writes an SQL
ROWID
value to the stream.
writeRowId(RowId)
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes an SQL
ROWID
value to the stream.
writerSpiNames
- Variable in class javax.imageio.spi.
ImageReaderSpi
An array of strings to be returned from
getImageWriterSpiNames
, initially
null
.
writeShort(int)
- Method in interface java.io.
DataOutput
Writes two bytes to the output
 stream to represent the value of the argument.
writeShort(int)
- Method in class java.io.
DataOutputStream
Writes a
short
to the underlying output stream as two
 bytes, high byte first.
writeShort(int)
- Method in class java.io.
ObjectOutputStream
Writes a 16-bit short.
writeShort(int)
- Method in class java.io.
RandomAccessFile
Writes a
short
to the file as two bytes, high byte first.
writeShort(int)
- Method in interface javax.imageio.stream.
ImageOutputStream
Writes the 16 low-order bits of
v
to the
 stream.
writeShort(int)
- Method in class javax.imageio.stream.
ImageOutputStreamImpl
writeShort(short)
- Method in interface java.sql.
SQLOutput
Writes the next attribute to the stream as a Java short.
writeShort(short)
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes a
short
in the Java programming language
 to this
SQLOutputImpl
object.
writeShorts(short[], int, int)
- Method in interface javax.imageio.stream.
ImageOutputStream
Writes a sequence of shorts to the stream at the current
 position.
writeShorts(short[], int, int)
- Method in class javax.imageio.stream.
ImageOutputStreamImpl
writeSQL(SQLOutput)
- Method in interface java.sql.
SQLData
Writes this object to the given SQL data stream, converting it back to
 its SQL value in the data source.
writeSQLXML(SQLXML)
- Method in interface java.sql.
SQLOutput
Writes an SQL
XML
value to the stream.
writeSQLXML(SQLXML)
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes an SQL
XML
value to the stream.
writeStartDocument()
- Method in interface javax.xml.stream.
XMLStreamWriter
Write the XML Declaration.
writeStartDocument(String)
- Method in interface javax.xml.stream.
XMLStreamWriter
Write the XML Declaration.
writeStartDocument(String, String)
- Method in interface javax.xml.stream.
XMLStreamWriter
Write the XML Declaration.
writeStartElement(String)
- Method in interface javax.xml.stream.
XMLStreamWriter
Writes a start tag to the output.
writeStartElement(String, String)
- Method in interface javax.xml.stream.
XMLStreamWriter
Writes a start tag to the output
writeStartElement(String, String, String)
- Method in interface javax.xml.stream.
XMLStreamWriter
Writes a start tag to the output
writeStartParagraph(Element)
- Method in class javax.swing.text.html.
MinimalHTMLWriter
Emits the start tag for a paragraph.
writeStartTag(String)
- Method in class javax.swing.text.html.
MinimalHTMLWriter
Writes out a start tag appropriately
 indented.
writeStatement(Statement)
- Method in class java.beans.
Encoder
Writes statement
oldStm
to the stream.
writeStatement(Statement)
- Method in class java.beans.
XMLEncoder
Records the Statement so that the Encoder will
 produce the actual output when the stream is flushed.
writeStreamHeader()
- Method in class java.io.
ObjectOutputStream
The writeStreamHeader method is provided so subclasses can append or
 prepend their own header to the stream.
writeString(String)
- Method in interface java.sql.
SQLOutput
Writes the next attribute to the stream as a
String
in the Java programming language.
writeString(String)
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes a
String
in the Java programming language
 to this
SQLOutputImpl
object.
writeString(Path, CharSequence, Charset, OpenOption...)
- Static method in class java.nio.file.
Files
Write a
CharSequence
to a file.
writeString(Path, CharSequence, OpenOption...)
- Static method in class java.nio.file.
Files
Write a
CharSequence
to a file.
writeStruct(Struct)
- Method in interface java.sql.
SQLOutput
Writes an SQL structured type value to the stream.
writeStruct(Struct)
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes a
Struct
object in the Java
 programming language to this
SQLOutputImpl
object.
writeStyles()
- Method in class javax.swing.text.html.
MinimalHTMLWriter
Writes out all the named styles as the
 content of the <style> tag.
writeTime(Time)
- Method in interface java.sql.
SQLOutput
Writes the next attribute to the stream as a java.sql.Time object.
writeTime(Time)
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes a
java.sql.Time
object in the Java programming
 language to this
SQLOutputImpl
object.
writeTimestamp(Timestamp)
- Method in interface java.sql.
SQLOutput
Writes the next attribute to the stream as a java.sql.Timestamp object.
writeTimestamp(Timestamp)
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes a
java.sql.Timestamp
object in the Java programming
 language to this
SQLOutputImpl
object.
writeTo(OutputStream)
- Method in class java.io.
ByteArrayOutputStream
Writes the complete contents of this
ByteArrayOutputStream
to
 the specified output stream argument, as if by calling the output
 stream's write method using
out.write(buf, 0, count)
.
writeTo(Writer)
- Method in class java.io.
CharArrayWriter
Writes the contents of the buffer to another character stream.
writeToSequence(IIOImage, ImageWriteParam)
- Method in class javax.imageio.
ImageWriter
Appends a single image and possibly associated metadata and
 thumbnails, to the output.
writeToString(Node)
- Method in interface org.w3c.dom.ls.
LSSerializer
Serialize the specified node as described above in the general
 description of the
LSSerializer
interface.
writeToURI(Node, String)
- Method in interface org.w3c.dom.ls.
LSSerializer
A convenience method that acts as if
LSSerializer.write
was called with a
LSOutput
with no encoding specified
 and
LSOutput.systemId
set to the
uri
argument.
writeUnlock()
- Method in class javax.swing.text.
AbstractDocument
Releases a write lock previously obtained via
writeLock
.
writeUnshared(Object)
- Method in class java.io.
ObjectOutputStream
Writes an "unshared" object to the ObjectOutputStream.
writeURL(URL)
- Method in interface java.sql.
SQLOutput
Writes a SQL
DATALINK
value to the stream.
writeURL(URL)
- Method in class javax.sql.rowset.serial.
SQLOutputImpl
Writes an
java.sql.Type.DATALINK
object in the Java
 programming language to this
SQLOutputImpl
object.
writeUTF(String)
- Method in interface java.io.
DataOutput
Writes two bytes of length information
 to the output stream, followed
 by the
modified UTF-8
representation
 of  every character in the string
s
.
writeUTF(String)
- Method in class java.io.
DataOutputStream
Writes a string to the underlying output stream using
modified UTF-8
encoding in a machine-independent manner.
writeUTF(String)
- Method in class java.io.
ObjectOutputStream
Primitive data write of this String in
modified UTF-8
format.
writeUTF(String)
- Method in class java.io.
RandomAccessFile
Writes a string to the file using
modified UTF-8
encoding in a machine-independent manner.
writeUTF(String)
- Method in interface javax.imageio.stream.
ImageOutputStream
Writes two bytes of length information to the output stream in
 network byte order, followed by the
modified UTF-8
representation of every character in the string
s
.
writeUTF(String)
- Method in class javax.imageio.stream.
ImageOutputStreamImpl
writeXml(OutputStream)
- Method in interface javax.sql.rowset.
WebRowSet
Writes the data, properties, and metadata for this
WebRowSet
object
 to the given
OutputStream
object in XML format.
writeXml(Writer)
- Method in interface javax.sql.rowset.
WebRowSet
Writes the data, properties, and metadata for this
WebRowSet
object
 to the given
Writer
object in XML format.
writeXml(ResultSet, OutputStream)
- Method in interface javax.sql.rowset.
WebRowSet
Populates this
WebRowSet
object with
 the contents of the given
ResultSet
object and writes its
 data, properties, and metadata
 to the given
OutputStream
object in XML format.
writeXml(ResultSet, Writer)
- Method in interface javax.sql.rowset.
WebRowSet
Populates this
WebRowSet
object with
 the contents of the given
ResultSet
object and writes its
 data, properties, and metadata
 to the given
Writer
object in XML format.
writeXML(WebRowSet, Writer)
- Method in interface javax.sql.rowset.spi.
XmlWriter
Writes the given
WebRowSet
object to the specified
java.io.Writer
output stream as an XML document.
Writing Compressed Exif Images
- Search tag in package javax.imageio.metadata
Section
Writing Exif Images
- Search tag in package javax.imageio.metadata
Section
Writing GIF images
- Search tag in package javax.imageio
Section
Writing Images
- Search tag in package javax.imageio.metadata
Section
Writing Uncompressed Exif Images
- Search tag in package javax.imageio.metadata
Section
written
- Variable in class java.io.
DataOutputStream
The number of bytes written to the data output stream so far.
WRONG_DOCUMENT_ERR
- Static variable in exception class org.w3c.dom.
DOMException
If a
Node
is used in a different document than the one
 that created it (that doesn't support it).
WrongMethodTypeException
- Exception Class in
java.lang.invoke
Thrown to indicate that code has attempted to call a method handle
 via the wrong method type.
WrongMethodTypeException()
- Constructor for exception class java.lang.invoke.
WrongMethodTypeException
Constructs a
WrongMethodTypeException
with no detail message.
WrongMethodTypeException(String)
- Constructor for exception class java.lang.invoke.
WrongMethodTypeException
Constructs a
WrongMethodTypeException
with the specified
 detail message.
WrongThreadException
- Exception Class in
java.lang
Thrown to indicate that a method has been called on the wrong thread.
WrongThreadException()
- Constructor for exception class java.lang.
WrongThreadException
Constructs a WrongThreadException with no detail message.
WrongThreadException(String)
- Constructor for exception class java.lang.
WrongThreadException
Constructs a WrongThreadException with the given detail message.
WrongThreadException(String, Throwable)
- Constructor for exception class java.lang.
WrongThreadException
Constructs a WrongThreadException with the given detail message and cause.
WrongThreadException(Throwable)
- Constructor for exception class java.lang.
WrongThreadException
Constructs a WrongThreadException with the given cause and a detail
 message of
(cause==null ? null : cause.toString())
(which
 typically contains the class and detail message of
cause
).
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
_
All Classes and Interfaces
|
All Packages
|
Constant Field Values
|
Serialized Form
|
System Properties
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.