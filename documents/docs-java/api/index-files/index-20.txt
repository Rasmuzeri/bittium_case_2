T-Index (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Index
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
_
All Classes and Interfaces
|
All Packages
|
Constant Field Values
|
Serialized Form
|
System Properties
T
T4_OPTIONS_2D_CODING
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A mask to be used with the "T4Options" tag.
T4_OPTIONS_EOL_BYTE_ALIGNED
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A mask to be used with the "T4Options" tag.
T4_OPTIONS_UNCOMPRESSED
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A mask to be used with the "T4Options" tag.
T6_OPTIONS_UNCOMPRESSED
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A mask to be used with the "T6Options" tag.
TAB
- Static variable in class java.awt.
Event
Deprecated.
The Tab key.
TabableView
- Interface in
javax.swing.text
Interface for
View
s that have size dependent upon tabs.
tabAreaBackground
- Variable in class javax.swing.plaf.metal.
MetalTabbedPaneUI
The color of tab's background.
tabAreaInsets
- Variable in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Tab area insets
TABBED_PANE
- Static variable in class javax.swing.plaf.synth.
Region
TabbedPane region.
TABBED_PANE_CONTENT
- Static variable in class javax.swing.plaf.synth.
Region
Region of a TabbedPane containing the content.
TABBED_PANE_TAB
- Static variable in class javax.swing.plaf.synth.
Region
Region of a TabbedPane for one tab.
TABBED_PANE_TAB_AREA
- Static variable in class javax.swing.plaf.synth.
Region
Region of a TabbedPane containing the tabs.
TabbedPaneLayout()
- Constructor for class javax.swing.plaf.basic.
BasicTabbedPaneUI.TabbedPaneLayout
Constructs a
TabbedPaneLayout
.
TabbedPaneLayout()
- Constructor for class javax.swing.plaf.metal.
MetalTabbedPaneUI.TabbedPaneLayout
Constructs
TabbedPaneLayout
.
TabbedPaneUI
- Class in
javax.swing.plaf
Pluggable look and feel interface for JTabbedPane.
TabbedPaneUI()
- Constructor for class javax.swing.plaf.
TabbedPaneUI
Constructor for subclasses to call.
tabChangeListener
- Variable in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Tab change listener
TabExpander
- Interface in
javax.swing.text
Simple interface to allow for different types of
 implementations of tab expansion.
tabForCoordinate(JTabbedPane, int, int)
- Method in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Returns the tab index which intersects the specified point
 in the JTabbedPane's coordinate space.
tabForCoordinate(JTabbedPane, int, int)
- Method in class javax.swing.plaf.multi.
MultiTabbedPaneUI
Invokes the
tabForCoordinate
method on each UI handled by this object.
tabForCoordinate(JTabbedPane, int, int)
- Method in class javax.swing.plaf.
TabbedPaneUI
Returns the tab for the coordinate.
tabInsets
- Variable in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Tab insets
table
- Variable in class javax.swing.plaf.basic.
BasicTableUI
The instance of
JTable
.
table
- Variable in class javax.swing.table.
JTableHeader
The table for which this object is the header;
 the default is
null
.
TABLE
- Static variable in class javax.accessibility.
AccessibleRole
An object used to present information in terms of rows and columns.
TABLE
- Static variable in class javax.swing.plaf.synth.
Region
Table region.
TABLE
- Static variable in class javax.swing.text.html.
HTML.Tag
Tag <table>
TABLE_HEADER
- Static variable in class javax.swing.plaf.synth.
Region
TableHeader region.
TableCell(Element)
- Constructor for class javax.swing.text.
TableView.TableCell
Deprecated.
Constructs a TableCell for the given element.
TableCellEditor
- Interface in
javax.swing.table
This interface must be implemented to provide an editor of cell values
 for a
JTable
.
TableCellRenderer
- Interface in
javax.swing.table
This interface defines the method required by any object that
 would like to be a renderer for cells in a
JTable
.
tableChanged(TableModelEvent)
- Method in interface javax.swing.event.
TableModelListener
This fine grain notification tells listeners the exact range
 of cells, rows, or columns that changed.
tableChanged(TableModelEvent)
- Method in class javax.swing.
JTable.AccessibleJTable
Track changes to the table contents
tableChanged(TableModelEvent)
- Method in class javax.swing.
JTable
Invoked when this table's
TableModel
generates
 a
TableModelEvent
.
TableColumn
- Class in
javax.swing.table
A
TableColumn
represents all the attributes of a column in a
JTable
, such as width, resizability, minimum and maximum width.
TableColumn()
- Constructor for class javax.swing.table.
TableColumn
Cover method, using a default model index of 0,
  default width of 75, a
null
renderer and a
null
editor.
TableColumn(int)
- Constructor for class javax.swing.table.
TableColumn
Cover method, using a default width of 75, a
null
renderer and a
null
editor.
TableColumn(int, int)
- Constructor for class javax.swing.table.
TableColumn
Cover method, using a
null
renderer and a
null
editor.
TableColumn(int, int, TableCellRenderer, TableCellEditor)
- Constructor for class javax.swing.table.
TableColumn
Creates and initializes an instance of
TableColumn
with the specified model index,
  width, cell renderer, and cell editor;
  all
TableColumn
constructors delegate to this one.
TableColumnModel
- Interface in
javax.swing.table
Defines the requirements for a table column model object suitable for
 use with
JTable
.
TableColumnModelEvent
- Class in
javax.swing.event
TableColumnModelEvent
is used to notify listeners that a table
 column model has changed, such as a column was added, removed, or
 moved.
TableColumnModelEvent(TableColumnModel, int, int)
- Constructor for class javax.swing.event.
TableColumnModelEvent
Constructs a
TableColumnModelEvent
object.
TableColumnModelListener
- Interface in
javax.swing.event
TableColumnModelListener defines the interface for an object that listens
 to changes in a TableColumnModel.
tableColumns
- Variable in class javax.swing.table.
DefaultTableColumnModel
Array of TableColumn objects in this model
tableHeader
- Variable in class javax.swing.
JTable
The
TableHeader
working with the table.
TableHeaderBorder()
- Constructor for class javax.swing.plaf.metal.
MetalBorders.TableHeaderBorder
Constructs a
TableHeaderBorder
.
TableHeaderUI
- Class in
javax.swing.plaf
Pluggable look and feel interface for JTableHeader.
TableHeaderUI()
- Constructor for class javax.swing.plaf.
TableHeaderUI
Constructor for subclasses to call.
tableIndexClustered
- Static variable in interface java.sql.
DatabaseMetaData
Indicates that this table index is a clustered index.
tableIndexHashed
- Static variable in interface java.sql.
DatabaseMetaData
Indicates that this table index is a hashed index.
tableIndexOther
- Static variable in interface java.sql.
DatabaseMetaData
Indicates that this table index is not a clustered
 index, a hashed index, or table statistics;
 it is something other than these.
tableIndexStatistic
- Static variable in interface java.sql.
DatabaseMetaData
Indicates that this column contains table statistics that
 are returned in conjunction with a table's index descriptions.
TableModel
- Interface in
javax.swing.table
The
TableModel
interface specifies the methods the
JTable
will use to interrogate a tabular data model.
TABLEMODEL
- Static variable in class com.sun.java.accessibility.util.
EventID
Maps to Swing TableModel support (i.e., TableModelListener and
 TableModelEvent)
TableModelEvent
- Class in
javax.swing.event
TableModelEvent is used to notify listeners that a table model
 has changed.
TableModelEvent(TableModel)
- Constructor for class javax.swing.event.
TableModelEvent
All row data in the table has changed, listeners should discard any state
 that was based on the rows and requery the
TableModel
to get the new row count and all the appropriate values.
TableModelEvent(TableModel, int)
- Constructor for class javax.swing.event.
TableModelEvent
This row of data has been updated.
TableModelEvent(TableModel, int, int)
- Constructor for class javax.swing.event.
TableModelEvent
The data in rows [
firstRow
,
lastRow
] have been updated.
TableModelEvent(TableModel, int, int, int)
- Constructor for class javax.swing.event.
TableModelEvent
The cells in column
column
in the range
  [
firstRow
,
lastRow
] have been updated.
TableModelEvent(TableModel, int, int, int, int)
- Constructor for class javax.swing.event.
TableModelEvent
The cells from (firstRow, column) to (lastRow, column) have been changed.
TableModelListener
- Interface in
javax.swing.event
TableModelListener defines the interface for an object that listens
 to changes in a TableModel.
Table of Contents
- Search tag in package javax.sql.rowset
Section
Table of Contents
- Search tag in package javax.sql.rowset.spi
Section
TableRow(Element)
- Constructor for class javax.swing.text.
TableView.TableRow
Constructs a TableView for the given element.
tableRowsDeleted(TableModelEvent)
- Method in class javax.swing.
JTable.AccessibleJTable
Track changes to the table contents (row deletions)
tableRowsInserted(TableModelEvent)
- Method in class javax.swing.
JTable.AccessibleJTable
Track changes to the table contents (row insertions)
TableRowSorter<M>
- Class in
javax.swing.table
An implementation of
RowSorter
that provides sorting
 and filtering using a
TableModel
.
TableRowSorter()
- Constructor for class javax.swing.table.
TableRowSorter
Creates a
TableRowSorter
with an empty model.
TableRowSorter(M)
- Constructor for class javax.swing.table.
TableRowSorter
Creates a
TableRowSorter
using
model
as the underlying
TableModel
.
TableStringConverter
- Class in
javax.swing.table
TableStringConverter is used to convert objects from the model into
 strings.
TableStringConverter()
- Constructor for class javax.swing.table.
TableStringConverter
Constructor for subclasses to call.
tableSwitch(MethodHandle, MethodHandle...)
- Static method in class java.lang.invoke.
MethodHandles
Creates a table switch method handle, which can be used to switch over a set of target
 method handles, based on a given target index, called selector.
TableUI
- Class in
javax.swing.plaf
Pluggable look and feel interface for JTable.
TableUI()
- Constructor for class javax.swing.plaf.
TableUI
Constructor for subclasses to call.
TableView
- Class in
javax.swing.text
Implements View interface for a table, that is composed of an
 element structure where the child elements of the element
 this view is responsible for represent rows and the child
 elements of the row elements are cells.
TableView(Element)
- Constructor for class javax.swing.text.
TableView
Constructs a TableView for the given element.
TableView.TableCell
- Class in
javax.swing.text
Deprecated.
A table cell can now be any View implementation.
TableView.TableRow
- Class in
javax.swing.text
View of a row in a row-centric table.
TABLOID
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for LEDGER.
TABLOID
- Static variable in class javax.print.attribute.standard.
MediaSize.Other
Specifies the tabloid size, 11 inches by 17 inches.
TABLOID
- Static variable in class javax.print.attribute.standard.
MediaSizeName
tabloid size.
tabPane
- Variable in class javax.swing.plaf.basic.
BasicTabbedPaneUI
The tab pane
tabPlacement
- Variable in class javax.swing.
JTabbedPane
Where the tabs are placed.
tabRunOverlay
- Variable in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Tab run overlay
tabRuns
- Variable in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Tab runs
TabSelectionHandler()
- Constructor for class javax.swing.plaf.basic.
BasicTabbedPaneUI.TabSelectionHandler
Constructs a
TabSelectionHandler
.
TabSet
- Class in
javax.swing.text
A TabSet is comprised of many TabStops.
TabSet
- Static variable in class javax.swing.text.
StyleConstants
TabSet for the paragraph, type is a TabSet containing
 TabStops.
TabSet(TabStop[])
- Constructor for class javax.swing.text.
TabSet
Creates and returns an instance of TabSet.
tabSizeAttribute
- Static variable in class javax.swing.text.
PlainDocument
Name of the attribute that specifies the tab
 size for tabs contained in the content.
TabStop
- Class in
javax.swing.text
This class encapsulates a single tab stop (basically as tab stops
 are thought of by RTF).
TabStop(float)
- Constructor for class javax.swing.text.
TabStop
Creates a tab at position
pos
with a default alignment
 and default leader.
TabStop(float, int, int)
- Constructor for class javax.swing.text.
TabStop
Creates a tab with the specified position
pos
,
 alignment
align
and leader
leader
.
TabularData
- Interface in
javax.management.openmbean
The
TabularData
interface specifies the behavior of a specific type of complex
open data
objects
 which represent
tabular data
structures.
TabularDataSupport
- Class in
javax.management.openmbean
The
TabularDataSupport
class is the
open data
class which implements the
TabularData
and the
Map
interfaces, and which is internally based on a hash map data structure.
TabularDataSupport(TabularType)
- Constructor for class javax.management.openmbean.
TabularDataSupport
Creates an empty
TabularDataSupport
instance
 whose open-type is
tabularType
,
 and whose underlying
HashMap
has a default
 initial capacity (101) and default load factor (0.75).
TabularDataSupport(TabularType, int, float)
- Constructor for class javax.management.openmbean.
TabularDataSupport
Creates an empty
TabularDataSupport
instance whose open-type is
tabularType
,
 and whose underlying
HashMap
has the specified initial capacity and load factor.
TabularType
- Class in
javax.management.openmbean
The
TabularType
class is the
open type
class
 whose instances describe the types of
TabularData
values.
TabularType(String, String, CompositeType, String[])
- Constructor for class javax.management.openmbean.
TabularType
Constructs a
TabularType
instance, checking for the validity of the given parameters.
Tag()
- Constructor for class javax.swing.text.html.
HTML.Tag
Constructs a
Tag
.
Tag(String)
- Constructor for class javax.swing.text.html.
HTML.Tag
Creates a new
Tag
with the specified
id
,
 and with
causesBreak
and
isBlock
set to
false
.
Tag(String, boolean, boolean)
- Constructor for class javax.swing.text.html.
HTML.Tag
Creates a new
Tag
with the specified
id
;
causesBreak
and
isBlock
are defined
 by the user.
TAG_ACNT
- Static variable in interface java.awt.font.
OpenType
Accent attachment.
TAG_APERTURE_VALUE
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the lens aperture (type RATIONAL).
TAG_ARTIST
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "Artist" tag.
TAG_AVAR
- Static variable in interface java.awt.font.
OpenType
Axis variation.
TAG_BAD_FAX_LINES
- Static variable in class javax.imageio.plugins.tiff.
FaxTIFFTagSet
Tag indicating the number of bad fax lines (type SHORT or LONG).
TAG_BASE
- Static variable in interface java.awt.font.
OpenType
Baseline data.
TAG_BDAT
- Static variable in interface java.awt.font.
OpenType
Bitmap data.
TAG_BITS_PER_SAMPLE
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "BitsPerSample" tag.
TAG_BLOC
- Static variable in interface java.awt.font.
OpenType
Bitmap location.
TAG_BRIGHTNESS_VALUE
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the value of brightness (type SRATIONAL).
TAG_BSLN
- Static variable in interface java.awt.font.
OpenType
Baseline table.
TAG_CELL_LENGTH
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "cell_length" tag.
TAG_CELL_WIDTH
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "Cell_Width" tag.
TAG_CFA_PATTERN
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the color filter array geometric pattern of
 the image sensor when a one-chip color area sensor if used
 (type UNDEFINED).
TAG_CFF
- Static variable in interface java.awt.font.
OpenType
Compact font format (Type1 font).
TAG_CLEAN_FAX_DATA
- Static variable in class javax.imageio.plugins.tiff.
FaxTIFFTagSet
Tag indicating the number of lines of clean fax data (type
 SHORT).
TAG_CMAP
- Static variable in interface java.awt.font.
OpenType
Character to glyph mapping.
TAG_COLOR_MAP
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "ColorMap" tag.
TAG_COLOR_SPACE
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the color space information (type SHORT).
TAG_COMPONENTS_CONFIGURATION
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag containing the components configuration information (type
 UNDEFINED, count = 4).
TAG_COMPRESSED_BITS_PER_PIXEL
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the number of compressed bits per pixel
 (type RATIONAL).
TAG_COMPRESSION
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "Compression" tag.
TAG_CONSECUTIVE_BAD_LINES
- Static variable in class javax.imageio.plugins.tiff.
FaxTIFFTagSet
Tag indicating the number of consecutive bad lines (type
 SHORT or LONG).
TAG_CONTRAST
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the direction of contrast processing applied
 by the camera when the image was shot.
TAG_COPYRIGHT
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "Copyright" tag.
TAG_CUSTOM_RENDERED
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the use of special processing on image data,
 such as rendering geared to output.
TAG_CVAR
- Static variable in interface java.awt.font.
OpenType
CVT variation.
TAG_CVT
- Static variable in interface java.awt.font.
OpenType
Control value table.
TAG_DATE_TIME
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "DateTime" tag.
TAG_DATE_TIME_DIGITIZED
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the date and time when the image was stored as
 digital data (type ASCII).
TAG_DATE_TIME_ORIGINAL
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the date and time when the original image was
 generated (type ASCII).
TAG_DEVICE_SETTING_DESCRIPTION
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating information on the picture-taking conditions
 of a particular camera model.
TAG_DIGITAL_ZOOM_RATIO
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the digital zoom ratio when the image was shot.
TAG_DOCUMENT_NAME
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "document_name" tag.
TAG_DOT_RANGE
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "DotRange" tag.
TAG_DSIG
- Static variable in interface java.awt.font.
OpenType
Digital signature.
TAG_EBDT
- Static variable in interface java.awt.font.
OpenType
Embedded bitmap data.
TAG_EBLC
- Static variable in interface java.awt.font.
OpenType
Embedded bitmap location.
TAG_EBSC
- Static variable in interface java.awt.font.
OpenType
Embedded bitmap scaling.
TAG_EXIF_IFD_POINTER
- Static variable in class javax.imageio.plugins.tiff.
ExifParentTIFFTagSet
Tag pointing to the Exif IFD (type LONG).
TAG_EXIF_VERSION
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag containing the Exif version number (type UNDEFINED, count =
 4).
TAG_EXPOSURE_BIAS_VALUE
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the exposure bias (type SRATIONAL).
TAG_EXPOSURE_INDEX
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the exposure index selected on the camera or
 input device at the time the image was captured (type
 RATIONAL).
TAG_EXPOSURE_MODE
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the exposure mode set when the image was shot.
TAG_EXPOSURE_PROGRAM
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the class of the programs used to set exposure
 when the picture was taken (type SHORT).
TAG_EXPOSURE_TIME
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the exposure time, in seconds (type RATIONAL).
TAG_EXTRA_SAMPLES
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "ExtraSamples" tag.
TAG_F_NUMBER
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the F number (type RATIONAL).
TAG_FDSC
- Static variable in interface java.awt.font.
OpenType
Font descriptors.
TAG_FEAT
- Static variable in interface java.awt.font.
OpenType
Feature name.
TAG_FILE_SOURCE
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the image source (type UNDEFINED).
TAG_FILL_ORDER
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "fill_order" tag.
TAG_FLASH
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the flash firing status and flash return
 status (type SHORT).
TAG_FLASH_ENERGY
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the strobe energy at the time the image was
 captured, as measured in Beam Candle Power Seconds (BCPS) (type
 RATIONAL).
TAG_FLASHPIX_VERSION
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the FlashPix version number (type UNDEFINED,
 count = 4).
TAG_FMTX
- Static variable in interface java.awt.font.
OpenType
Font metrics.
TAG_FOCAL_LENGTH
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the actual focal length of the lens, in
 millimeters (type RATIONAL).
TAG_FOCAL_LENGTH_IN_35MM_FILM
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the equivalent focal length assuming a 35mm film
 camera, in millimeters.
TAG_FOCAL_PLANE_RESOLUTION_UNIT
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
Indicates the unit for measuring FocalPlaneXResolution and
 FocalPlaneYResolution (type SHORT).
TAG_FOCAL_PLANE_X_RESOLUTION
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
Indicates the number of pixels in the image width (X) direction
 per FocalPlaneResolutionUnit on the camera focal plane (type
 RATIONAL).
TAG_FOCAL_PLANE_Y_RESOLUTION
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
Indicate the number of pixels in the image height (Y) direction
 per FocalPlaneResolutionUnit on the camera focal plane (type
 RATIONAL).
TAG_FPGM
- Static variable in interface java.awt.font.
OpenType
Font program.
TAG_FREE_BYTE_COUNTS
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "FreeByteCounts" tag.
TAG_FREE_OFFSETS
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "FreeOffsets" tag.
TAG_FVAR
- Static variable in interface java.awt.font.
OpenType
Font variation.
TAG_GAIN_CONTROL
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the degree of overall image gain adjustment.
TAG_GASP
- Static variable in interface java.awt.font.
OpenType
Grid-fitting and scan conversion procedure.
TAG_GDEF
- Static variable in interface java.awt.font.
OpenType
Glyph definition.
TAG_GEO_ASCII_PARAMS
- Static variable in class javax.imageio.plugins.tiff.
GeoTIFFTagSet
A tag used to store all ASCII-values
GeoKey
s.
TAG_GEO_DOUBLE_PARAMS
- Static variable in class javax.imageio.plugins.tiff.
GeoTIFFTagSet
A tag used to store all
double
-values
GeoKey
s.
TAG_GEO_KEY_DIRECTORY
- Static variable in class javax.imageio.plugins.tiff.
GeoTIFFTagSet
A tag used to store the
GeoKey
directory.
TAG_GLYF
- Static variable in interface java.awt.font.
OpenType
Glyph data.
TAG_GPOS
- Static variable in interface java.awt.font.
OpenType
Glyph positioning.
TAG_GPS_ALTITUDE
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the Altitude (type RATIONAL, count = 1).
TAG_GPS_ALTITUDE_REF
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the Altitude reference (type BYTE, count = 1);
TAG_GPS_AREA_INFORMATION
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the Name of GPS area (type UNDEFINED).
TAG_GPS_DATE_STAMP
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the GPS date (type ASCII, count 11).
TAG_GPS_DEST_BEARING
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the Bearing of destination (type RATIONAL, count = 1).
TAG_GPS_DEST_BEARING_REF
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the Reference for bearing of destination (type ASCII,
 count = 2).
TAG_GPS_DEST_DISTANCE
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the Distance to destination (type RATIONAL, count = 1).
TAG_GPS_DEST_DISTANCE_REF
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the Reference for distance to destination (type ASCII,
 count = 2).
TAG_GPS_DEST_LATITUDE
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the Latitude of destination (type RATIONAL, count = 3).
TAG_GPS_DEST_LATITUDE_REF
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the Reference for latitude of destination (type
 ASCII, count = 2).
TAG_GPS_DEST_LONGITUDE
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the Longitude of destination (type RATIONAL,
 count = 3).
TAG_GPS_DEST_LONGITUDE_REF
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the Reference for longitude of destination (type
 ASCII, count = 2).
TAG_GPS_DIFFERENTIAL
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the GPS differential correction (type SHORT,
 count = 1).
TAG_GPS_DOP
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the Measurement precision (type RATIONAL, count = 1).
TAG_GPS_IMG_DIRECTION
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the Direction of image (type RATIONAL, count = 1).
TAG_GPS_IMG_DIRECTION_REF
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the Reference for direction of image (type ASCII,
 count = 2).
TAG_GPS_INFO_IFD_POINTER
- Static variable in class javax.imageio.plugins.tiff.
ExifParentTIFFTagSet
Tag pointing to a GPS info IFD (type LONG).
TAG_GPS_INFO_IFD_POINTER
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag pointing to a GPS info IFD (type LONG).
TAG_GPS_LATITUDE
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the Latitude (type RATIONAL, count = 3).
TAG_GPS_LATITUDE_REF
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the North or South latitude (type ASCII, count = 2).
TAG_GPS_LONGITUDE
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the Longitude (type RATIONAL, count = 3).
TAG_GPS_LONGITUDE_REF
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the East or West Longitude (type ASCII, count = 2).
TAG_GPS_MAP_DATUM
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the Geodetic survey data used (type ASCII).
TAG_GPS_MEASURE_MODE
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the GPS measurement mode (type ASCII, count = 2).
TAG_GPS_PROCESSING_METHOD
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the Name of GPS processing method (type UNDEFINED).
TAG_GPS_SATELLITES
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the GPS satellites used for measurement (type ASCII).
TAG_GPS_SPEED
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the Speed of GPS receiver (type RATIONAL, count = 1).
TAG_GPS_SPEED_REF
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the Speed unit (type ASCII, count = 2).
TAG_GPS_STATUS
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the GPS receiver status (type ASCII, count = 2).
TAG_GPS_TIME_STAMP
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the GPS time (atomic clock) (type RATIONAL, count = 3).
TAG_GPS_TRACK
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the Direction of movement (type RATIONAL, count = 1).
TAG_GPS_TRACK_REF
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the Reference for direction of movement (type ASCII,
 count = 2).
TAG_GPS_VERSION_ID
- Static variable in class javax.imageio.plugins.tiff.
ExifGPSTagSet
A tag indicating the GPS tag version (type BYTE, count = 4).
TAG_GRAY_RESPONSE_CURVE
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "GrayResponseCurve" tag.
TAG_GRAY_RESPONSE_UNIT
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "GrayResponseUnit" tag.
TAG_GSUB
- Static variable in interface java.awt.font.
OpenType
Glyph substitution.
TAG_GVAR
- Static variable in interface java.awt.font.
OpenType
Glyph variation.
TAG_HALFTONE_HINTS
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "HalftoneHints" tag.
TAG_HDMX
- Static variable in interface java.awt.font.
OpenType
Horizontal device metrics.
TAG_HEAD
- Static variable in interface java.awt.font.
OpenType
Font header.
TAG_HHEA
- Static variable in interface java.awt.font.
OpenType
Horizontal metrics header.
TAG_HMTX
- Static variable in interface java.awt.font.
OpenType
Horizontal metrics.
TAG_HOST_COMPUTER
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "HostComputer" tag.
TAG_ICC_PROFILE
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "ICC Profile" tag.
TAG_IMAGE_DESCRIPTION
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "Image_description" tag.
TAG_IMAGE_LENGTH
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "ImageLength" tag.
TAG_IMAGE_UNIQUE_ID
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating an identifier assigned uniquely to each image.
TAG_IMAGE_WIDTH
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "ImageWidth" tag.
TAG_INK_NAMES
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "InkNames" tag.
TAG_INK_SET
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "InkSet" tag.
TAG_INTEROPERABILITY_IFD_POINTER
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag pointing to an interoperability IFD (type LONG).
TAG_INTEROPERABILITY_INDEX
- Static variable in class javax.imageio.plugins.tiff.
ExifInteroperabilityTagSet
A tag indicating the identification of the Interoperability rule
 (type ASCII).
TAG_ISO_SPEED_RATINGS
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the ISO speed and ISO latitude of the camera
 or input device, as specified in ISO 12232
xiv
(type
 SHORT).
TAG_JPEG_AC_TABLES
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "JPEGACTables" tag.
TAG_JPEG_DC_TABLES
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "JPEGDCTables" tag.
TAG_JPEG_INTERCHANGE_FORMAT
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "JPEGInterchangeFormat" tag.
TAG_JPEG_INTERCHANGE_FORMAT_LENGTH
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "JPEGInterchangeFormatLength" tag.
TAG_JPEG_LOSSLESS_PREDICTORS
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "JPEGLosslessPredictors" tag.
TAG_JPEG_POINT_TRANSFORMS
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "JPEGPointTransforms" tag.
TAG_JPEG_PROC
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "JPEGProc" tag.
TAG_JPEG_Q_TABLES
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "JPEGQTables" tag.
TAG_JPEG_RESTART_INTERVAL
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "JPEGRestartInterval" tag.
TAG_JPEG_TABLES
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "JPEGTables" tag for
 "New style" JPEG-in-TIFF compression.
TAG_JSTF
- Static variable in interface java.awt.font.
OpenType
Justification.
TAG_JUST
- Static variable in interface java.awt.font.
OpenType
Justification.
TAG_KERN
- Static variable in interface java.awt.font.
OpenType
Kerning.
TAG_LCAR
- Static variable in interface java.awt.font.
OpenType
Ligature caret.
TAG_LIGHT_SOURCE
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicatingthe kind of light source (type SHORT).
TAG_LOCA
- Static variable in interface java.awt.font.
OpenType
Index to location.
TAG_LTSH
- Static variable in interface java.awt.font.
OpenType
Linear threshold.
TAG_MAKE
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "Make" tag.
TAG_MAKER_NOTE
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating a manufacturer-defined maker note (type
 UNDEFINED).
TAG_MARKER_NOTE
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating a manufacturer-defined marker note (type UNDEFINED).
TAG_MAX_APERTURE_VALUE
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the smallest F number of the lens (type
 RATIONAL).
TAG_MAX_SAMPLE_VALUE
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "Max_sample_value" tag.
TAG_MAXP
- Static variable in interface java.awt.font.
OpenType
Maximum profile.
TAG_METERING_MODE
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the metering mode (type SHORT).
TAG_MIN_SAMPLE_VALUE
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "Min_sample_value" tag.
TAG_MMFX
- Static variable in interface java.awt.font.
OpenType
Multiple master font metrics.
TAG_MMSD
- Static variable in interface java.awt.font.
OpenType
Multiple master supplementary data.
TAG_MODEL
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "Model" tag.
TAG_MODEL_PIXEL_SCALE
- Static variable in class javax.imageio.plugins.tiff.
GeoTIFFTagSet
A tag used to specify the size of raster pixel spacing in
 model space units.
TAG_MODEL_TIE_POINT
- Static variable in class javax.imageio.plugins.tiff.
GeoTIFFTagSet
A tag used to store raster-to-model tiepoint pairs.
TAG_MODEL_TRANSFORMATION
- Static variable in class javax.imageio.plugins.tiff.
GeoTIFFTagSet
A tag used to specify the transformation matrix between the raster
 space and the model space.
TAG_MORT
- Static variable in interface java.awt.font.
OpenType
Glyph metamorphosis.
TAG_NAME
- Static variable in interface java.awt.font.
OpenType
Naming table.
TAG_NEW_SUBFILE_TYPE
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "NewSubfileType" tag.
TAG_NUMBER_OF_INKS
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "NumberOfInks" tag.
TAG_OECF
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the optoelectric conversion function,
 specified in ISO 14254
xv
(type UNDEFINED).
TAG_OPBD
- Static variable in interface java.awt.font.
OpenType
Optical bounds.
TAG_ORIENTATION
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "Orientation" tag.
TAG_OS2
- Static variable in interface java.awt.font.
OpenType
OS/2 and Windows specific metrics.
TAG_PAGE_NAME
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "PageName" tag.
TAG_PAGE_NUMBER
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "PageNumber" tag.
TAG_PCLT
- Static variable in interface java.awt.font.
OpenType
PCL 5 data.
TAG_PHOTOMETRIC_INTERPRETATION
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "PhotometricInterpretation" tag.
TAG_PIXEL_X_DIMENSION
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the pixel X dimension (type SHORT or LONG).
TAG_PIXEL_Y_DIMENSION
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the pixel Y dimension (type SHORT or LONG).
TAG_PLANAR_CONFIGURATION
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "PlanarConfiguration" tag.
TAG_POST
- Static variable in interface java.awt.font.
OpenType
PostScript Information.
TAG_PREDICTOR
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "Predictor" tag.
TAG_PREP
- Static variable in interface java.awt.font.
OpenType
CVT preprogram.
TAG_PRIMARY_CHROMATICITES
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "PrimaryChromaticites" tag.
TAG_PROP
- Static variable in interface java.awt.font.
OpenType
Glyph properties.
TAG_REFERENCE_BLACK_WHITE
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "ReferenceBlackWhite" tag.
TAG_RELATED_SOUND_FILE
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the name of a related sound file (type ASCII).
TAG_RESOLUTION_UNIT
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "ResolutionUnit" tag.
TAG_ROWS_PER_STRIP
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "Rows_per_strip" tag.
TAG_S_MAX_SAMPLE_VALUE
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "SMaxSampleValue" tag.
TAG_S_MIN_SAMPLE_VALUE
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "SMinSampleValue" tag.
TAG_SAMPLE_FORMAT
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "SampleFormat" tag.
TAG_SAMPLES_PER_PIXEL
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "Samples_per_pixel" tag.
TAG_SATURATION
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the direction of saturation processing
 applied by the camera when the image was shot.
TAG_SCENE_CAPTURE_TYPE
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the type of scene that was shot.
TAG_SCENE_TYPE
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the type of scene (type UNDEFINED).
TAG_SENSING_METHOD
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the sensor type on the camera or input device
 (type SHORT).
TAG_SHARPNESS
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the direction of sharpness processing
 applied by the camera when the image was shot.
TAG_SHUTTER_SPEED_VALUE
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the shutter speed (type SRATIONAL).
TAG_SOFTWARE
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "Software" tag.
TAG_SPATIAL_FREQUENCY_RESPONSE
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the camera or input device spatial frequency
 table and SFR values in the direction of image width, image
 height, and diagonal direction, as specified in ISO
 12233
xvi
(type UNDEFINED).
TAG_SPECTRAL_SENSITIVITY
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the spectral sensitivity of each channel of
 the camera used (type ASCII).
TAG_STRIP_BYTE_COUNTS
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "Strip_byte_counts" tag.
TAG_STRIP_OFFSETS
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "Strip_offsets" tag.
TAG_SUB_SEC_TIME
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag used to record fractions of seconds for the "DateTime" tag
 (type ASCII).
TAG_SUB_SEC_TIME_DIGITIZED
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag used to record fractions of seconds for the
 "DateTimeDigitized" tag (type ASCII).
TAG_SUB_SEC_TIME_ORIGINAL
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag used to record fractions of seconds for the
 "DateTimeOriginal" tag (type ASCII).
TAG_SUBFILE_TYPE
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "SubfileType" tag.
TAG_SUBJECT_AREA
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the location and area of the main subject in
 the overall scene.
TAG_SUBJECT_DISTANCE
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the distance to the subject, in meters (type
 RATIONAL).
TAG_SUBJECT_DISTANCE_RANGE
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the distance to the subject.
TAG_SUBJECT_LOCATION
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the column and row of the center pixel of the
 main subject in the scene (type SHORT, count = 2).
TAG_T4_OPTIONS
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "T4Options" tag.
TAG_T6_OPTIONS
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "T6Options" tag.
TAG_TARGET_PRINTER
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "TargetPrinter" tag.
TAG_THRESHHOLDING
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "Threshholding" tag.
TAG_TILE_BYTE_COUNTS
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "TileByteCounts" tag.
TAG_TILE_LENGTH
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "TileLength" tag.
TAG_TILE_OFFSETS
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "TileOffsets" tag.
TAG_TILE_WIDTH
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "TileWidth" tag.
TAG_TRAK
- Static variable in interface java.awt.font.
OpenType
Tracking.
TAG_TRANSFER_FUNCTION
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "TransferFunction" tag.
TAG_TRANSFER_RANGE
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "TransferRange" tag.
TAG_TYP1
- Static variable in interface java.awt.font.
OpenType
Adobe Type 1 font data.
TAG_USER_COMMENT
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating a user comment (type UNDEFINED).
TAG_VDMX
- Static variable in interface java.awt.font.
OpenType
Vertical device metrics.
TAG_VHEA
- Static variable in interface java.awt.font.
OpenType
Vertical metrics header.
TAG_VMTX
- Static variable in interface java.awt.font.
OpenType
Vertical metrics.
TAG_WHITE_BALANCE
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A tag indicating the white balance mode set when the image was shot.
TAG_WHITE_POINT
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "WhitePoint" tag.
TAG_X_POSITION
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "XPosition" tag.
TAG_X_RESOLUTION
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "XResolution" tag.
TAG_Y_CB_CR_COEFFICIENTS
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "YCbCrCoefficients" tag.
TAG_Y_CB_CR_POSITIONING
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "YCbCrPositioning" tag.
TAG_Y_CB_CR_SUBSAMPLING
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "YCbCrSubsampling" tag.
TAG_Y_POSITION
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "YPosition" tag.
TAG_Y_RESOLUTION
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
Constant specifying the "YResolution" tag.
TagAction()
- Constructor for class javax.swing.text.html.
HTMLDocument.HTMLReader.TagAction
Constructs a
TagAction
.
TAGALOG
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Tagalog".
TAGALOG
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Tagalog" Unicode character block.
TAGBANWA
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Tagbanwa".
TAGBANWA
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Tagbanwa" Unicode character block.
TagElement
- Class in
javax.swing.text.html.parser
A generic HTML TagElement class.
TagElement(Element)
- Constructor for class javax.swing.text.html.parser.
TagElement
Creates a generic HTML TagElement class with
fictional
equals to
false
.
TagElement(Element, boolean)
- Constructor for class javax.swing.text.html.parser.
TagElement
Creates a generic HTML TagElement class.
Taglet
- Interface in
jdk.javadoc.doclet
The interface for a custom taglet supported by doclets such as
 the
standard doclet
.
TAGLET_PATH
- Enum constant in enum class javax.tools.
DocumentationTool.Location
Location to search for taglets.
Taglet.Location
- Enum Class in
jdk.javadoc.doclet
The kind of location in which a tag may be used.
tagName
- Variable in enum class com.sun.source.doctree.
DocTree.Kind
The name of the tag, if any, associated with this kind of node.
TAGS
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Tags" Unicode character block.
TAI_LE
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Tai_Le".
TAI_LE
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Tai Le" Unicode character block.
TAI_THAM
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Tai_Tham".
TAI_THAM
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Tai Tham" Unicode character block.
TAI_THAM_HORA
- Enum constant in enum class java.awt.font.
NumericShaper.Range
The Tai Tham Hora range with the Tai Tham Hora digits.
TAI_THAM_THAM
- Enum constant in enum class java.awt.font.
NumericShaper.Range
The Tai Tham Tham range with the Tai Tham Tham digits.
TAI_VIET
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Tai_Viet".
TAI_VIET
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Tai Viet" Unicode character block.
TAI_XUAN_JING_SYMBOLS
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Tai Xuan Jing Symbols" Unicode character block.
tailMap(K)
- Method in interface java.util.concurrent.
ConcurrentNavigableMap
tailMap(K)
- Method in class java.util.concurrent.
ConcurrentSkipListMap
tailMap(K)
- Method in interface java.util.
NavigableMap
Returns a view of the portion of this map whose keys are
 greater than or equal to
fromKey
.
tailMap(K)
- Method in interface java.util.
SortedMap
Returns a view of the portion of this map whose keys are
 greater than or equal to
fromKey
.
tailMap(K)
- Method in class java.util.
TreeMap
tailMap(K, boolean)
- Method in interface java.util.concurrent.
ConcurrentNavigableMap
tailMap(K, boolean)
- Method in class java.util.concurrent.
ConcurrentSkipListMap
tailMap(K, boolean)
- Method in interface java.util.
NavigableMap
Returns a view of the portion of this map whose keys are greater than (or
 equal to, if
inclusive
is true)
fromKey
.
tailMap(K, boolean)
- Method in class java.util.
TreeMap
tailSet(E)
- Method in class java.util.concurrent.
ConcurrentSkipListSet
tailSet(E)
- Method in interface java.util.
NavigableSet
Returns a view of the portion of this set whose elements are
 greater than or equal to
fromElement
.
tailSet(E)
- Method in interface java.util.
SortedSet
Returns a view of the portion of this set whose elements are
 greater than or equal to
fromElement
.
tailSet(E)
- Method in class java.util.
TreeSet
tailSet(E, boolean)
- Method in class java.util.concurrent.
ConcurrentSkipListSet
tailSet(E, boolean)
- Method in interface java.util.
NavigableSet
Returns a view of the portion of this set whose elements are greater
 than (or equal to, if
inclusive
is true)
fromElement
.
tailSet(E, boolean)
- Method in class java.util.
TreeSet
TAISHO
- Static variable in class java.time.chrono.
JapaneseEra
The singleton instance for the 'Taisho' era (1912-07-30 - 1926-12-24)
 which has the value 0.
TAIWAN
- Static variable in class java.util.
Locale
Useful constant for country.
take()
- Method in interface java.nio.file.
WatchService
Retrieves and removes next watch key, waiting if none are yet present.
take()
- Method in class java.util.concurrent.
ArrayBlockingQueue
take()
- Method in interface java.util.concurrent.
BlockingDeque
Retrieves and removes the head of the queue represented by this deque
 (in other words, the first element of this deque), waiting if
 necessary until an element becomes available.
take()
- Method in interface java.util.concurrent.
BlockingQueue
Retrieves and removes the head of this queue, waiting if necessary
 until an element becomes available.
take()
- Method in interface java.util.concurrent.
CompletionService
Retrieves and removes the Future representing the next
 completed task, waiting if none are yet present.
take()
- Method in class java.util.concurrent.
DelayQueue
Retrieves and removes the
expired head
of
 this queue, waiting if necessary until an
expired element
is available on this queue.
take()
- Method in class java.util.concurrent.
ExecutorCompletionService
take()
- Method in class java.util.concurrent.
LinkedBlockingDeque
take()
- Method in class java.util.concurrent.
LinkedBlockingQueue
take()
- Method in class java.util.concurrent.
LinkedTransferQueue
take()
- Method in class java.util.concurrent.
PriorityBlockingQueue
take()
- Method in class java.util.concurrent.
SynchronousQueue
Retrieves and removes the head of this queue, waiting if necessary
 for another thread to insert it.
takeFirst()
- Method in interface java.util.concurrent.
BlockingDeque
Retrieves and removes the first element of this deque, waiting
 if necessary until an element becomes available.
takeFirst()
- Method in class java.util.concurrent.
LinkedBlockingDeque
takeLast()
- Method in interface java.util.concurrent.
BlockingDeque
Retrieves and removes the last element of this deque, waiting
 if necessary until an element becomes available.
takeLast()
- Method in class java.util.concurrent.
LinkedBlockingDeque
takeSnapshot()
- Method in class jdk.jfr.
FlightRecorder
Creates a snapshot of all available recorded data.
takeSnapshot()
- Method in interface jdk.management.jfr.
FlightRecorderMXBean
Creates a snapshot recording of all available recorded data.
takeWhile(DoublePredicate)
- Method in interface java.util.stream.
DoubleStream
Returns, if this stream is ordered, a stream consisting of the longest
 prefix of elements taken from this stream that match the given predicate.
takeWhile(IntPredicate)
- Method in interface java.util.stream.
IntStream
Returns, if this stream is ordered, a stream consisting of the longest
 prefix of elements taken from this stream that match the given predicate.
takeWhile(LongPredicate)
- Method in interface java.util.stream.
LongStream
Returns, if this stream is ordered, a stream consisting of the longest
 prefix of elements taken from this stream that match the given predicate.
takeWhile(Predicate<? super T>)
- Method in interface java.util.stream.
Stream
Returns, if this stream is ordered, a stream consisting of the longest
 prefix of elements taken from this stream that match the given predicate.
TAKRI
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Takri".
TAKRI
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Takri" Unicode character block.
TAMIL
- Enum constant in enum class java.awt.font.
NumericShaper.Range
The Tamil range with the Tamil digits.
TAMIL
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Tamil".
TAMIL
- Static variable in class java.awt.font.
NumericShaper
Identifies the TAMIL range and decimal base.
TAMIL
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Tamil" Unicode character block.
TAMIL_SUPPLEMENT
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Tamil Supplement" Unicode
 character block.
tan(double)
- Static method in class java.lang.
Math
Returns the trigonometric tangent of an angle.
tan(double)
- Static method in class java.lang.
StrictMath
Returns the trigonometric tangent of an angle.
TAN
- Static variable in class jdk.incubator.vector.
VectorOperators
Produce
tan(a)
.
TANGSA
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Tangsa".
TANGSA
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Tangsa" Unicode
 character block.
TANGUT
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Tangut".
TANGUT
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Tangut" Unicode
 character block.
TANGUT_COMPONENTS
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Tangut Components" Unicode
 character block.
TANGUT_SUPPLEMENT
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Tangut Supplement" Unicode
 character block.
tanh(double)
- Static method in class java.lang.
Math
Returns the hyperbolic tangent of a
double
value.
tanh(double)
- Static method in class java.lang.
StrictMath
Returns the hyperbolic tangent of a
double
value.
TANH
- Static variable in class jdk.incubator.vector.
VectorOperators
Produce
tanh(a)
.
target
- Variable in class java.awt.
Event
Deprecated.
The target component.
Target
- Search tag in interface javax.naming.event.EventContext
Section
Target
- Annotation Interface in
java.lang.annotation
Indicates the contexts in which an annotation interface is applicable.
TARGET
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "target"
TargetDataLine
- Interface in
javax.sound.sampled
A target data line is a type of
DataLine
from which audio data can be
 read.
TargetedNotification
- Class in
javax.management.remote
A (Notification, Listener ID) pair.
TargetedNotification(Notification, Integer)
- Constructor for class javax.management.remote.
TargetedNotification
Constructs a
TargetedNotification
object.
targetLayout()
- Method in interface java.lang.foreign.
AddressLayout
PREVIEW
Returns the target layout associated with this address layout (if any).
targetMustExist()
- Method in interface javax.naming.event.
EventContext
Determines whether a listener can register interest in a target
 that does not exist.
targets()
- Method in class java.lang.module.
ModuleDescriptor.Exports
For a qualified export, returns the non-empty and immutable set
 of the module names to which the package is exported.
targets()
- Method in class java.lang.module.
ModuleDescriptor.Opens
For a qualified
Opens
, returns the non-empty and immutable set
 of the module names to which the package is open.
task()
- Method in interface java.util.concurrent.
StructuredTaskScope.Subtask
PREVIEW
Returns the value returning task provided to the
fork
method.
Taskbar
- Class in
java.awt
The
Taskbar
class allows a Java application to interact with
 the system task area (taskbar, Dock, etc.).
Taskbar.Feature
- Enum Class in
java.awt
List of provided features.
Taskbar.State
- Enum Class in
java.awt
Kinds of available window progress states.
TaskEvent
- Class in
com.sun.source.util
Provides details about work that has been done by the JDK Java Compiler, javac.
TaskEvent(TaskEvent.Kind)
- Constructor for class com.sun.source.util.
TaskEvent
Creates a task event for a given kind.
TaskEvent(TaskEvent.Kind, CompilationUnitTree)
- Constructor for class com.sun.source.util.
TaskEvent
Creates a task event for a given kind and compilation unit.
TaskEvent(TaskEvent.Kind, CompilationUnitTree, TypeElement)
- Constructor for class com.sun.source.util.
TaskEvent
Creates a task event for a given kind, compilation unit
 and type element.
TaskEvent(TaskEvent.Kind, JavaFileObject)
- Constructor for class com.sun.source.util.
TaskEvent
Creates a task event for a given kind and source file.
TaskEvent.Kind
- Enum Class in
com.sun.source.util
Kind of task event.
TaskListener
- Interface in
com.sun.source.util
Provides a listener to monitor the activity of the JDK Java Compiler, javac.
TAU
- Static variable in class java.lang.
Math
The
double
value that is closer than any other to
tau
(τ), the ratio of the circumference of a circle
 to its radius.
TAU
- Static variable in class java.lang.
StrictMath
The
double
value that is closer than any other to
tau
(τ), the ratio of the circumference of a circle
 to its radius.
TC_ARRAY
- Static variable in interface java.io.
ObjectStreamConstants
new Array.
TC_BASE
- Static variable in interface java.io.
ObjectStreamConstants
First tag value.
TC_BLOCKDATA
- Static variable in interface java.io.
ObjectStreamConstants
Block of optional data.
TC_BLOCKDATALONG
- Static variable in interface java.io.
ObjectStreamConstants
long Block data.
TC_CLASS
- Static variable in interface java.io.
ObjectStreamConstants
Reference to Class.
TC_CLASSDESC
- Static variable in interface java.io.
ObjectStreamConstants
new Class Descriptor.
TC_ENDBLOCKDATA
- Static variable in interface java.io.
ObjectStreamConstants
End of optional block data blocks for an object.
TC_ENUM
- Static variable in interface java.io.
ObjectStreamConstants
new Enum constant.
TC_EXCEPTION
- Static variable in interface java.io.
ObjectStreamConstants
Exception during write.
TC_LONGSTRING
- Static variable in interface java.io.
ObjectStreamConstants
Long string.
TC_MAX
- Static variable in interface java.io.
ObjectStreamConstants
Last tag value.
TC_NULL
- Static variable in interface java.io.
ObjectStreamConstants
Null object reference.
TC_OBJECT
- Static variable in interface java.io.
ObjectStreamConstants
new Object.
TC_PROXYCLASSDESC
- Static variable in interface java.io.
ObjectStreamConstants
new Proxy Class Descriptor.
TC_REFERENCE
- Static variable in interface java.io.
ObjectStreamConstants
Reference to an object already written into the stream.
TC_RESET
- Static variable in interface java.io.
ObjectStreamConstants
Reset stream context.
TC_STRING
- Static variable in interface java.io.
ObjectStreamConstants
new String.
TCP_KEEPCOUNT
- Static variable in class jdk.net.
ExtendedSocketOptions
Keep-Alive retransmission maximum limit.
TCP_KEEPIDLE
- Static variable in class jdk.net.
ExtendedSocketOptions
Keep-Alive idle time.
TCP_KEEPINTERVAL
- Static variable in class jdk.net.
ExtendedSocketOptions
Keep-Alive retransmission interval time.
TCP_NODELAY
- Static variable in interface java.net.
SocketOptions
Disable Nagle's algorithm for this connection.
TCP_NODELAY
- Static variable in class java.net.
StandardSocketOptions
Disable the Nagle algorithm.
TCP_QUICKACK
- Static variable in class jdk.net.
ExtendedSocketOptions
Disable Delayed Acknowledgements.
TD
- Static variable in class javax.swing.text.html.
HTML.Tag
Tag <td>
teeing(Collector<? super T, ?, R1>, Collector<? super T, ?, R2>, BiFunction<? super R1, ? super R2, R>)
- Static method in class java.util.stream.
Collectors
Returns a
Collector
that is a composite of two downstream collectors.
TELUGU
- Enum constant in enum class java.awt.font.
NumericShaper.Range
The Telugu range with the Telugu digits.
TELUGU
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Telugu".
TELUGU
- Static variable in class java.awt.font.
NumericShaper
Identifies the TELUGU range and decimal base.
TELUGU
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Telugu" Unicode character block.
TEMP_VAR_EXPRESSION_SUBKIND
- Enum constant in enum class jdk.jshell.
Snippet.SubKind
An expression whose value has been stored in a temporary variable.
TEMPLATE
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
StringTemplateTree
PREVIEW
.
TemplateRuntime
PREVIEW
- Class in
java.lang.runtime
Manages string template bootstrap methods.
Templates
- Interface in
javax.xml.transform
An object that implements this interface is the runtime representation of processed
 transformation instructions.
TemplatesHandler
- Interface in
javax.xml.transform.sax
A SAX ContentHandler that may be used to process SAX
 parse events (parsing transformation instructions) into a Templates object.
Temporal
- Interface in
java.time.temporal
Framework-level interface defining read-write access to a temporal object,
 such as a date, time, offset or some combination of these.
TemporalAccessor
- Interface in
java.time.temporal
Framework-level interface defining read-only access to a temporal object,
 such as a date, time, offset or some combination of these.
TemporalAdjuster
- Interface in
java.time.temporal
Strategy for adjusting a temporal object.
TemporalAdjusters
- Class in
java.time.temporal
Common and useful TemporalAdjusters.
TemporalAmount
- Interface in
java.time.temporal
Framework-level interface defining an amount of time, such as
 "6 hours", "8 days" or "2 years and 3 months".
TemporalField
- Interface in
java.time.temporal
A field of date-time, such as month-of-year or minute-of-hour.
TemporalQueries
- Class in
java.time.temporal
Common implementations of
TemporalQuery
.
TemporalQuery<R>
- Interface in
java.time.temporal
Strategy for querying a temporal object.
TemporalUnit
- Interface in
java.time.temporal
A unit of date-time, such as Days or Hours.
Temporary FocusEvents
- Search tag in package java.awt
Section
tempVariableNameGenerator(Supplier<String>)
- Method in class jdk.jshell.
JShell.Builder
Sets a generator of temp variable names for
VarSnippet
of
Snippet.SubKind.TEMP_VAR_EXPRESSION_SUBKIND
.
TEN
- Static variable in class java.math.
BigDecimal
The value 10, with a scale of 0.
TEN
- Static variable in class java.math.
BigInteger
The BigInteger constant ten.
TerminalFactory
- Class in
javax.smartcardio
A factory for CardTerminal objects.
TerminalFactorySpi
- Class in
javax.smartcardio
The TerminalFactorySpi class defines the service provider interface.
TerminalFactorySpi()
- Constructor for class javax.smartcardio.
TerminalFactorySpi
Constructs a new TerminalFactorySpi object.
terminals()
- Method in class javax.smartcardio.
TerminalFactory
Returns a new CardTerminals object encapsulating the terminals
 supported by this factory.
TERMINATE
- Enum constant in enum class java.nio.file.
FileVisitResult
Terminate.
terminated()
- Method in class java.util.concurrent.
ThreadPoolExecutor
Method invoked when the Executor has terminated.
TERMINATED
- Enum constant in enum class java.lang.
Thread.State
Thread state for a terminated thread.
Terminology
- Search tag in class java.nio.charset.Charset
Section
Terminology
- Search tag in package jdk.javadoc.doclet
Section
TERTIARY
- Static variable in class java.text.
Collator
Collator strength value.
tertiaryOrder(int)
- Static method in class java.text.
CollationElementIterator
Return the tertiary component of a collation element.
test(double)
- Method in interface java.util.function.
DoublePredicate
Evaluates this predicate on the given argument.
test(int)
- Method in interface java.util.function.
IntPredicate
Evaluates this predicate on the given argument.
test(long)
- Method in interface java.util.function.
LongPredicate
Evaluates this predicate on the given argument.
test(VectorOperators.Test)
- Method in class jdk.incubator.vector.
ByteVector
Tests the lanes of this vector
 according to the given operation.
test(VectorOperators.Test)
- Method in class jdk.incubator.vector.
DoubleVector
Tests the lanes of this vector
 according to the given operation.
test(VectorOperators.Test)
- Method in class jdk.incubator.vector.
FloatVector
Tests the lanes of this vector
 according to the given operation.
test(VectorOperators.Test)
- Method in class jdk.incubator.vector.
IntVector
Tests the lanes of this vector
 according to the given operation.
test(VectorOperators.Test)
- Method in class jdk.incubator.vector.
LongVector
Tests the lanes of this vector
 according to the given operation.
test(VectorOperators.Test)
- Method in class jdk.incubator.vector.
ShortVector
Tests the lanes of this vector
 according to the given operation.
test(VectorOperators.Test)
- Method in class jdk.incubator.vector.
Vector
Tests the lanes of this vector
 according to the given operation.
test(VectorOperators.Test, VectorMask<E>)
- Method in class jdk.incubator.vector.
Vector
Test selected lanes of this vector,
 according to the given operation.
test(VectorOperators.Test, VectorMask<Byte>)
- Method in class jdk.incubator.vector.
ByteVector
Test selected lanes of this vector,
 according to the given operation.
test(VectorOperators.Test, VectorMask<Double>)
- Method in class jdk.incubator.vector.
DoubleVector
Test selected lanes of this vector,
 according to the given operation.
test(VectorOperators.Test, VectorMask<Float>)
- Method in class jdk.incubator.vector.
FloatVector
Test selected lanes of this vector,
 according to the given operation.
test(VectorOperators.Test, VectorMask<Integer>)
- Method in class jdk.incubator.vector.
IntVector
Test selected lanes of this vector,
 according to the given operation.
test(VectorOperators.Test, VectorMask<Long>)
- Method in class jdk.incubator.vector.
LongVector
Test selected lanes of this vector,
 according to the given operation.
test(VectorOperators.Test, VectorMask<Short>)
- Method in class jdk.incubator.vector.
ShortVector
Test selected lanes of this vector,
 according to the given operation.
test(T)
- Method in interface java.util.function.
Predicate
Evaluates this predicate on the given argument.
test(T, U)
- Method in interface java.util.function.
BiPredicate
Evaluates this predicate on the given arguments.
testBit(int)
- Method in class java.math.
BigInteger
Returns
true
if and only if the designated bit is set.
text
- Static variable in class java.awt.
SystemColor
The color rendered for the background of text control objects, such as
 textfields and comboboxes.
text
- Variable in class javax.accessibility.
AccessibleTextSequence
The text.
text(Element)
- Method in class javax.swing.text.
AbstractWriter
Writes out text.
text(Element)
- Method in class javax.swing.text.html.
HTMLWriter
Writes out text.
text(Element)
- Method in class javax.swing.text.html.
MinimalHTMLWriter
Writes out text.
Text
- Interface in
org.w3c.dom
The
Text
interface inherits from
CharacterData
and represents the textual content (termed
character data
in XML) of an
Element
or
Attr
.
TEXT
- Enum constant in enum class com.sun.source.doctree.
DocTree.Kind
Used for instances of
TextTree
representing some plain documentation text.
TEXT
- Static variable in class com.sun.java.accessibility.util.
EventID
Maps to AWT Text support (i.e., TextListener and TextEvent)
TEXT
- Static variable in class java.awt.
SystemColor
The array index for the
SystemColor.text
system color.
TEXT
- Static variable in class javax.accessibility.
AccessibleRole
An object that presents text to the user.
TEXT
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "text"
TEXT_ALIGN
- Static variable in class javax.swing.text.html.
CSS.Attribute
CSS attribute "text-align".
TEXT_AREA
- Static variable in class javax.swing.plaf.synth.
Region
TextArea region.
TEXT_BACKGROUND
- Static variable in class javax.swing.plaf.synth.
ColorType
ColorType for the background of a region.
TEXT_CHANGED_PROPERTY
- Static variable in class javax.swing.
AbstractButton
Identifies a change in the button's text.
TEXT_CURSOR
- Static variable in class java.awt.
Cursor
The text cursor type.
TEXT_CURSOR
- Static variable in class java.awt.
Frame
Deprecated.
replaced by
Cursor.TEXT_CURSOR
.
TEXT_DECORATION
- Static variable in class javax.swing.text.html.
CSS.Attribute
CSS attribute "text-decoration".
TEXT_EVENT_MASK
- Static variable in class java.awt.
AWTEvent
The event mask for selecting text events.
TEXT_FIELD
- Static variable in class javax.swing.plaf.synth.
Region
TextField region.
TEXT_FIRST
- Static variable in class java.awt.event.
TextEvent
The first number in the range of ids used for text events.
TEXT_FOREGROUND
- Static variable in class javax.swing.plaf.synth.
ColorType
ColorType for the foreground of a region.
TEXT_HIGHLIGHT
- Static variable in class java.awt.
SystemColor
The array index for the
SystemColor.textHighlight
system color.
TEXT_HIGHLIGHT_TEXT
- Static variable in class java.awt.
SystemColor
The array index for the
SystemColor.textHighlightText
system color.
TEXT_HTML
- Static variable in class javax.print.
DocFlavor.CHAR_ARRAY
Doc flavor with MIME type =
"text/html; charset=utf-16"
,
 print data representation class name =
"[C"
(character
 array).
TEXT_HTML
- Static variable in class javax.print.
DocFlavor.READER
Doc flavor with MIME type =
"text/html; charset=utf-16"
,
 print data representation class name =
"java.io.Reader"
(character stream).
TEXT_HTML
- Static variable in class javax.print.
DocFlavor.STRING
Doc flavor with MIME type =
"text/html; charset=utf-16"
,
 print data representation class name =
"java.lang.String"
.
TEXT_HTML_HOST
- Static variable in class javax.print.
DocFlavor.BYTE_ARRAY
Doc flavor with MIME type =
"text/html"
, encoded in the host
 platform encoding.
TEXT_HTML_HOST
- Static variable in class javax.print.
DocFlavor.INPUT_STREAM
Doc flavor with MIME type =
"text/html"
, encoded in the host
 platform encoding.
TEXT_HTML_HOST
- Static variable in class javax.print.
DocFlavor.URL
Doc flavor with MIME type =
"text/html"
, encoded in the host
 platform encoding.
TEXT_HTML_US_ASCII
- Static variable in class javax.print.
DocFlavor.BYTE_ARRAY
Doc flavor with MIME type =
"text/html; charset=us-ascii"
,
 print data representation class name =
"[B"
(byte array).
TEXT_HTML_US_ASCII
- Static variable in class javax.print.
DocFlavor.INPUT_STREAM
Doc flavor with MIME type =
"text/html; charset=us-ascii"
,
 print data representation class name =
"java.io.InputStream"
(byte stream).
TEXT_HTML_US_ASCII
- Static variable in class javax.print.
DocFlavor.URL
Doc flavor with MIME type =
"text/html; charset=us-ascii"
,
 print data representation class name =
"java.net.URL"
(byte
 stream).
TEXT_HTML_UTF_16
- Static variable in class javax.print.
DocFlavor.BYTE_ARRAY
Doc flavor with MIME type =
"text/html; charset=utf-16"
,
 print data representation class name =
"[B"
(byte array).
TEXT_HTML_UTF_16
- Static variable in class javax.print.
DocFlavor.INPUT_STREAM
Doc flavor with MIME type =
"text/html; charset=utf-16"
,
 print data representation class name =
"java.io.InputStream"
(byte stream).
TEXT_HTML_UTF_16
- Static variable in class javax.print.
DocFlavor.URL
Doc flavor with MIME type =
"text/html; charset=utf-16"
,
 print data representation class name =
"java.net.URL"
(byte
 stream).
TEXT_HTML_UTF_16BE
- Static variable in class javax.print.
DocFlavor.BYTE_ARRAY
Doc flavor with MIME type =
"text/html; charset=utf-16be"
(big-endian byte ordering), print data representation class name =
"[B"
(byte array).
TEXT_HTML_UTF_16BE
- Static variable in class javax.print.
DocFlavor.INPUT_STREAM
Doc flavor with MIME type =
"text/html; charset=utf-16be"
(big-endian byte ordering), print data representation class name =
"java.io.InputStream"
(byte stream).
TEXT_HTML_UTF_16BE
- Static variable in class javax.print.
DocFlavor.URL
Doc flavor with MIME type =
"text/html; charset=utf-16be"
(big-endian byte ordering), print data representation class name =
"java.net.URL"
(byte stream).
TEXT_HTML_UTF_16LE
- Static variable in class javax.print.
DocFlavor.BYTE_ARRAY
Doc flavor with MIME type =
"text/html; charset=utf-16le"
(little-endian byte ordering), print data representation class name =
"[B"
(byte array).
TEXT_HTML_UTF_16LE
- Static variable in class javax.print.
DocFlavor.INPUT_STREAM
Doc flavor with MIME type =
"text/html; charset=utf-16le"
(little-endian byte ordering), print data representation class name =
"java.io.InputStream"
(byte stream).
TEXT_HTML_UTF_16LE
- Static variable in class javax.print.
DocFlavor.URL
Doc flavor with MIME type =
"text/html; charset=utf-16le"
(little-endian byte ordering), print data representation class name =
"java.net.URL"
(byte stream).
TEXT_HTML_UTF_8
- Static variable in class javax.print.
DocFlavor.BYTE_ARRAY
Doc flavor with MIME type =
"text/html; charset=utf-8"
, print
 data representation class name =
"[B"
(byte array).
TEXT_HTML_UTF_8
- Static variable in class javax.print.
DocFlavor.INPUT_STREAM
Doc flavor with MIME type =
"text/html; charset=utf-8"
, print
 data representation class name =
"java.io.InputStream"
(byte
 stream).
TEXT_HTML_UTF_8
- Static variable in class javax.print.
DocFlavor.URL
Doc flavor with MIME type =
"text/html; charset=utf-8"
, print
 data representation class name =
"java.net.URL"
(byte
 stream).
TEXT_INACTIVE_TEXT
- Static variable in class java.awt.
SystemColor
The array index for the
SystemColor.textInactiveText
system color.
TEXT_INDENT
- Static variable in class javax.swing.text.html.
CSS.Attribute
CSS attribute "text-indent".
TEXT_INSET_H
- Static variable in class javax.swing.border.
TitledBorder
Horizontal inset of text that is left or right justified
TEXT_LAST
- Static variable in class java.awt.event.
TextEvent
The last number in the range of ids used for text events.
TEXT_NODE
- Static variable in interface org.w3c.dom.
Node
The node is a
Text
node.
TEXT_PANE
- Static variable in class javax.swing.plaf.synth.
Region
TextPane region.
TEXT_PLAIN
- Enum constant in enum class com.sun.management.
HotSpotDiagnosticMXBean.ThreadDumpFormat
Plain text format.
TEXT_PLAIN
- Static variable in class javax.print.
DocFlavor.CHAR_ARRAY
Doc flavor with MIME type =
"text/plain; charset=utf-16"
,
 print data representation class name =
"[C"
(character
 array).
TEXT_PLAIN
- Static variable in class javax.print.
DocFlavor.READER
Doc flavor with MIME type =
"text/plain; charset=utf-16"
,
 print data representation class name =
"java.io.Reader"
(character stream).
TEXT_PLAIN
- Static variable in class javax.print.
DocFlavor.STRING
Doc flavor with MIME type =
"text/plain; charset=utf-16"
,
 print data representation class name =
"java.lang.String"
.
TEXT_PLAIN_HOST
- Static variable in class javax.print.
DocFlavor.BYTE_ARRAY
Doc flavor with MIME type =
"text/plain"
, encoded in the host
 platform encoding.
TEXT_PLAIN_HOST
- Static variable in class javax.print.
DocFlavor.INPUT_STREAM
Doc flavor with MIME type =
"text/plain"
, encoded in the host
 platform encoding.
TEXT_PLAIN_HOST
- Static variable in class javax.print.
DocFlavor.URL
Doc flavor with MIME type =
"text/plain"
, encoded in the host
 platform encoding.
TEXT_PLAIN_US_ASCII
- Static variable in class javax.print.
DocFlavor.BYTE_ARRAY
Doc flavor with MIME type =
"text/plain; charset=us-ascii"
,
 print data representation class name =
"[B"
(byte array).
TEXT_PLAIN_US_ASCII
- Static variable in class javax.print.
DocFlavor.INPUT_STREAM
Doc flavor with MIME type =
"text/plain; charset=us-ascii"
,
 print data representation class name =
"java.io.InputStream"
(byte stream).
TEXT_PLAIN_US_ASCII
- Static variable in class javax.print.
DocFlavor.URL
Doc flavor with MIME type =
"text/plain; charset=us-ascii"
,
 print data representation class name =
"java.net.URL"
(byte
 stream).
TEXT_PLAIN_UTF_16
- Static variable in class javax.print.
DocFlavor.BYTE_ARRAY
Doc flavor with MIME type =
"text/plain; charset=utf-16"
,
 print data representation class name =
"[B"
(byte array).
TEXT_PLAIN_UTF_16
- Static variable in class javax.print.
DocFlavor.INPUT_STREAM
Doc flavor with MIME type =
"text/plain; charset=utf-16"
,
 print data representation class name =
"java.io.InputStream"
(byte stream).
TEXT_PLAIN_UTF_16
- Static variable in class javax.print.
DocFlavor.URL
Doc flavor with MIME type =
"text/plain; charset=utf-16"
,
 print data representation class name =
java.net.URL""
(byte
 stream).
TEXT_PLAIN_UTF_16BE
- Static variable in class javax.print.
DocFlavor.BYTE_ARRAY
Doc flavor with MIME type =
"text/plain; charset=utf-16be"
(big-endian byte ordering), print data representation class name =
"[B"
(byte array).
TEXT_PLAIN_UTF_16BE
- Static variable in class javax.print.
DocFlavor.INPUT_STREAM
Doc flavor with MIME type =
"text/plain; charset=utf-16be"
(big-endian byte ordering), print data representation class name =
"java.io.InputStream"
(byte stream).
TEXT_PLAIN_UTF_16BE
- Static variable in class javax.print.
DocFlavor.URL
Doc flavor with MIME type =
"text/plain; charset=utf-16be"
(big-endian byte ordering), print data representation class name =
"java.net.URL"
(byte stream).
TEXT_PLAIN_UTF_16LE
- Static variable in class javax.print.
DocFlavor.BYTE_ARRAY
Doc flavor with MIME type =
"text/plain; charset=utf-16le"
(little-endian byte ordering), print data representation class name =
"[B"
(byte array).
TEXT_PLAIN_UTF_16LE
- Static variable in class javax.print.
DocFlavor.INPUT_STREAM
Doc flavor with MIME type =
"text/plain; charset=utf-16le"
(little-endian byte ordering), print data representation class name =
"java.io.InputStream"
(byte stream).
TEXT_PLAIN_UTF_16LE
- Static variable in class javax.print.
DocFlavor.URL
Doc flavor with MIME type =
"text/plain; charset=utf-16le"
(little-endian byte ordering), print data representation class name =
"java.net.URL"
(byte stream).
TEXT_PLAIN_UTF_8
- Static variable in class javax.print.
DocFlavor.BYTE_ARRAY
Doc flavor with MIME type =
"text/plain; charset=utf-8"
,
 print data representation class name =
"[B"
(byte array).
TEXT_PLAIN_UTF_8
- Static variable in class javax.print.
DocFlavor.INPUT_STREAM
Doc flavor with MIME type =
"text/plain; charset=utf-8"
,
 print data representation class name =
"java.io.InputStream"
(byte stream).
TEXT_PLAIN_UTF_8
- Static variable in class javax.print.
DocFlavor.URL
Doc flavor with MIME type =
"text/plain; charset=utf-8"
,
 print data representation class name =
"java.net.URL"
(byte
 stream).
TEXT_SPACING
- Static variable in class javax.swing.border.
TitledBorder
Space between the border and text
TEXT_TEXT
- Static variable in class java.awt.
SystemColor
The array index for the
SystemColor.textText
system color.
TEXT_TRANSFORM
- Static variable in class javax.swing.text.html.
CSS.Attribute
CSS attribute "text-transform".
TEXT_VALUE_CHANGED
- Static variable in class java.awt.event.
TextEvent
This event id indicates that object's text changed.
TextAction
- Class in
javax.swing.text
An Action implementation useful for key bindings that are
 shared across a number of different text components.
TextAction(String)
- Constructor for class javax.swing.text.
TextAction
Creates a new JTextAction object.
TextArea
- Class in
java.awt
A
TextArea
object is a multi-line region
 that displays text.
TextArea()
- Constructor for class java.awt.
TextArea
Constructs a new text area with the empty string as text.
TextArea(int, int)
- Constructor for class java.awt.
TextArea
Constructs a new text area with the specified number of
 rows and columns and the empty string as text.
TextArea(String)
- Constructor for class java.awt.
TextArea
Constructs a new text area with the specified text.
TextArea(String, int, int)
- Constructor for class java.awt.
TextArea
Constructs a new text area with the specified text,
 and with the specified number of rows and columns.
TextArea(String, int, int, int)
- Constructor for class java.awt.
TextArea
Constructs a new text area with the specified text,
 and with the rows, columns, and scroll bar visibility
 as specified.
TEXTAREA
- Static variable in class javax.swing.text.html.
HTML.Tag
Tag <textarea>
TextArea.AccessibleAWTTextArea
- Class in
java.awt
This class implements accessibility support for the
TextArea
class.
textAreaContent(char[])
- Method in class javax.swing.text.html.
HTMLDocument.HTMLReader
Adds the given content to the textarea document.
textAreaContent(AttributeSet)
- Method in class javax.swing.text.html.
HTMLWriter
Writes out text that is contained in a TEXTAREA form
 element.
TextAttribute
- Class in
java.awt.font
The
TextAttribute
class defines attribute keys and
 attribute values used for text rendering.
TextAttribute(String)
- Constructor for class java.awt.font.
TextAttribute
Constructs a
TextAttribute
with the specified name.
TextCallbackHandler
- Class in
com.sun.security.auth.callback
Prompts and reads from the command line for answers to authentication
 questions.
TextCallbackHandler()
- Constructor for class com.sun.security.auth.callback.
TextCallbackHandler
Creates a callback handler that prompts and reads from the
 command line for answers to authentication questions.
TextComponent
- Class in
java.awt
The
TextComponent
class is the superclass of
 any component that allows the editing of some text.
TextComponent.AccessibleAWTTextComponent
- Class in
java.awt
This class implements accessibility support for the
TextComponent
class.
TextEvent
- Class in
java.awt.event
A semantic event which indicates that an object's text changed.
TextEvent(Object, int)
- Constructor for class java.awt.event.
TextEvent
Constructs a
TextEvent
object.
TextField
- Class in
java.awt
A
TextField
object is a text component
 that allows for the editing of a single line of text.
TextField()
- Constructor for class java.awt.
TextField
Constructs a new text field.
TextField(int)
- Constructor for class java.awt.
TextField
Constructs a new empty text field with the specified number
 of columns.
TextField(String)
- Constructor for class java.awt.
TextField
Constructs a new text field initialized with the specified text.
TextField(String, int)
- Constructor for class java.awt.
TextField
Constructs a new text field initialized with the specified text
 to be displayed, and wide enough to hold the specified
 number of columns.
TextField.AccessibleAWTTextField
- Class in
java.awt
This class implements accessibility support for the
TextField
class.
TextFieldBorder()
- Constructor for class javax.swing.plaf.metal.
MetalBorders.TextFieldBorder
Constructs a
TextFieldBorder
.
textHighlight
- Static variable in class java.awt.
SystemColor
The color rendered for the background of selected items, such as in menus,
 comboboxes, and text.
textHighlightText
- Static variable in class java.awt.
SystemColor
The color rendered for the text of selected items, such as in menus, comboboxes,
 and text.
TextHitInfo
- Class in
java.awt.font
The
TextHitInfo
class represents a character position in a
 text model, and a
bias
, or "side," of the character.
textIconGap
- Variable in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Text icon gap
textInactiveText
- Static variable in class java.awt.
SystemColor
The color rendered for the text of inactive items, such as in menus.
TextInputCallback
- Class in
javax.security.auth.callback
Underlying security services instantiate and pass a
TextInputCallback
to the
handle
method of a
CallbackHandler
to retrieve generic text
 information.
TextInputCallback(String)
- Constructor for class javax.security.auth.callback.
TextInputCallback
Construct a
TextInputCallback
with a prompt.
TextInputCallback(String, String)
- Constructor for class javax.security.auth.callback.
TextInputCallback
Construct a
TextInputCallback
with a prompt
 and default input value.
TextLayout
- Class in
java.awt.font
TextLayout
is an immutable graphical representation of styled
 character data.
TextLayout(String, Font, FontRenderContext)
- Constructor for class java.awt.font.
TextLayout
Constructs a
TextLayout
from a
String
and a
Font
.
TextLayout(String, Map<? extends AttributedCharacterIterator.Attribute, ?>, FontRenderContext)
- Constructor for class java.awt.font.
TextLayout
Constructs a
TextLayout
from a
String
and an attribute set.
TextLayout(AttributedCharacterIterator, FontRenderContext)
- Constructor for class java.awt.font.
TextLayout
Constructs a
TextLayout
from an iterator over styled text.
TextLayout.CaretPolicy
- Class in
java.awt.font
Defines a policy for determining the strong caret location.
textListener
- Variable in class java.awt.
TextComponent
A list of listeners that will receive events from this object.
TextListener
- Interface in
java.awt.event
The listener interface for receiving text events.
Text Measurement
- Search tag in package java.awt
Section
TextMeasurer
- Class in
java.awt.font
The
TextMeasurer
class provides the primitive operations
 needed for line break: measuring up to a given advance, determining the
 advance of a range of characters, and generating a
TextLayout
for a range of characters.
TextMeasurer(AttributedCharacterIterator, FontRenderContext)
- Constructor for class java.awt.font.
TextMeasurer
Constructs a
TextMeasurer
from the source text.
textNonSelectionColor
- Variable in class javax.swing.tree.
DefaultTreeCellRenderer
Color to use for the foreground for non-selected nodes.
TextOutputCallback
- Class in
javax.security.auth.callback
Underlying security services instantiate and pass a
TextOutputCallback
to the
handle
method of a
CallbackHandler
to display information messages,
 warning messages and error messages.
TextOutputCallback(int, String)
- Constructor for class javax.security.auth.callback.
TextOutputCallback
Construct a TextOutputCallback with a message type and message
 to be displayed.
Text Properties
- Search tag in package javax.swing.plaf.synth
Section
textRequiresLayout(char[], int, int)
- Static method in class java.awt.
Font
Returns true if any part of the specified text is from a
 complex script for which the implementation will need to invoke
 layout processing in order to render correctly when using
drawString(String,int,int)
and other text rendering methods.
textSelectionColor
- Variable in class javax.swing.tree.
DefaultTreeCellRenderer
Color to use for the foreground for selected nodes.
TextStyle
- Enum Class in
java.time.format
Enumeration of the style of text formatting and parsing.
TextSyntax
- Class in
javax.print.attribute
Class
TextSyntax
is an abstract base class providing the common
 implementation of all attributes whose value is a string.
TextSyntax(String, Locale)
- Constructor for class javax.print.attribute.
TextSyntax
Constructs a
TextAttribute
with the specified string and locale.
textText
- Static variable in class java.awt.
SystemColor
The color rendered for the text of text control objects, such as textfields
 and comboboxes.
TextTree
- Interface in
com.sun.source.doctree
A tree node for plain text.
Textual representation of IP addresses
- Search tag in class java.net.Inet4Address
Section
Textual representation of IP addresses
- Search tag in class java.net.Inet6Address
Section
Textual representation of IP addresses
- Search tag in class java.net.InetAddress
Section
Textual representation of IPv6 scoped addresses
- Search tag in class java.net.Inet6Address
Section
TextUI
- Class in
javax.swing.plaf
Text editor user interface
TextUI()
- Constructor for class javax.swing.plaf.
TextUI
Constructor for subclasses to call.
TexturePaint
- Class in
java.awt
The
TexturePaint
class provides a way to fill a
Shape
with a texture that is specified as
 a
BufferedImage
.
TexturePaint(BufferedImage, Rectangle2D)
- Constructor for class java.awt.
TexturePaint
Constructs a
TexturePaint
object.
textValueChanged(TextEvent)
- Method in class java.awt.
AWTEventMulticaster
textValueChanged(TextEvent)
- Method in interface java.awt.event.
TextListener
Invoked when the value of the text has changed.
textValueChanged(TextEvent)
- Method in class java.awt.
TextComponent.AccessibleAWTTextComponent
TextListener notification of a text value change.
TH
- Static variable in class javax.swing.text.html.
HTML.Tag
Tag <th>
THAANA
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Thaana".
THAANA
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Thaana" Unicode character block.
THAI
- Enum constant in enum class java.awt.font.
NumericShaper.Range
The Thai range with the Thai digits.
THAI
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Thai".
THAI
- Static variable in class java.awt.font.
NumericShaper
Identifies the THAI range and decimal base.
THAI
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Thai" Unicode character block.
ThaiBuddhistChronology
- Class in
java.time.chrono
The Thai Buddhist calendar system.
ThaiBuddhistDate
- Class in
java.time.chrono
A date in the Thai Buddhist calendar system.
ThaiBuddhistEra
- Enum Class in
java.time.chrono
An era in the Thai Buddhist calendar system.
The AWT Focus Subsystem
- Search tag in package java.awt
Section
The AWT Modality
- Search tag in package java.awt
Section
The beansPersistance entity
- Search tag in package javax.swing.plaf.synth
Section
The bind element
- Search tag in package javax.swing.plaf.synth
Section
The Collections Framework
- Search tag in package java.util
Section
The color element
- Search tag in package javax.swing.plaf.synth
Section
The Directory Context
- Search tag in package javax.naming.directory
Section
The font element
- Search tag in package javax.swing.plaf.synth
Section
The graphicsUtils element
- Search tag in package javax.swing.plaf.synth
Section
The imageIcon element
- Search tag in package javax.swing.plaf.synth
Section
The imagePainter element
- Search tag in package javax.swing.plaf.synth
Section
The Initial Context
- Search tag in package javax.naming
Section
The insets element
- Search tag in package javax.swing.plaf.synth
Section
The JAXP APIs
- Search tag in module java.xml
Section
The LXM Family of Random Number Generator Algorithms
- Search tag in package java.util.random
Section
thenAccept(Consumer<? super T>)
- Method in class java.util.concurrent.
CompletableFuture
thenAccept(Consumer<? super T>)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when this stage completes
 normally, is executed with this stage's result as the argument
 to the supplied action.
thenAcceptAsync(Consumer<? super T>)
- Method in class java.util.concurrent.
CompletableFuture
thenAcceptAsync(Consumer<? super T>)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when this stage completes
 normally, is executed using this stage's default asynchronous
 execution facility, with this stage's result as the argument to
 the supplied action.
thenAcceptAsync(Consumer<? super T>, Executor)
- Method in class java.util.concurrent.
CompletableFuture
thenAcceptAsync(Consumer<? super T>, Executor)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when this stage completes
 normally, is executed using the supplied Executor, with this
 stage's result as the argument to the supplied action.
thenAcceptBoth(CompletionStage<? extends U>, BiConsumer<? super T, ? super U>)
- Method in class java.util.concurrent.
CompletableFuture
thenAcceptBoth(CompletionStage<? extends U>, BiConsumer<? super T, ? super U>)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when this and the other
 given stage both complete normally, is executed with the two
 results as arguments to the supplied action.
thenAcceptBothAsync(CompletionStage<? extends U>, BiConsumer<? super T, ? super U>)
- Method in class java.util.concurrent.
CompletableFuture
thenAcceptBothAsync(CompletionStage<? extends U>, BiConsumer<? super T, ? super U>)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when this and the other
 given stage both complete normally, is executed using this
 stage's default asynchronous execution facility, with the two
 results as arguments to the supplied action.
thenAcceptBothAsync(CompletionStage<? extends U>, BiConsumer<? super T, ? super U>, Executor)
- Method in class java.util.concurrent.
CompletableFuture
thenAcceptBothAsync(CompletionStage<? extends U>, BiConsumer<? super T, ? super U>, Executor)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when this and the other
 given stage both complete normally, is executed using the
 supplied executor, with the two results as arguments to the
 supplied action.
thenApply(Function<? super T, ? extends U>)
- Method in class java.util.concurrent.
CompletableFuture
thenApply(Function<? super T, ? extends U>)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when this stage completes
 normally, is executed with this stage's result as the argument
 to the supplied function.
thenApplyAsync(Function<? super T, ? extends U>)
- Method in class java.util.concurrent.
CompletableFuture
thenApplyAsync(Function<? super T, ? extends U>)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when this stage completes
 normally, is executed using this stage's default asynchronous
 execution facility, with this stage's result as the argument to
 the supplied function.
thenApplyAsync(Function<? super T, ? extends U>, Executor)
- Method in class java.util.concurrent.
CompletableFuture
thenApplyAsync(Function<? super T, ? extends U>, Executor)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when this stage completes
 normally, is executed using the supplied Executor, with this
 stage's result as the argument to the supplied function.
thenCombine(CompletionStage<? extends U>, BiFunction<? super T, ? super U, ? extends V>)
- Method in class java.util.concurrent.
CompletableFuture
thenCombine(CompletionStage<? extends U>, BiFunction<? super T, ? super U, ? extends V>)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when this and the other
 given stage both complete normally, is executed with the two
 results as arguments to the supplied function.
thenCombineAsync(CompletionStage<? extends U>, BiFunction<? super T, ? super U, ? extends V>)
- Method in class java.util.concurrent.
CompletableFuture
thenCombineAsync(CompletionStage<? extends U>, BiFunction<? super T, ? super U, ? extends V>)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when this and the other
 given stage both complete normally, is executed using this
 stage's default asynchronous execution facility, with the two
 results as arguments to the supplied function.
thenCombineAsync(CompletionStage<? extends U>, BiFunction<? super T, ? super U, ? extends V>, Executor)
- Method in class java.util.concurrent.
CompletableFuture
thenCombineAsync(CompletionStage<? extends U>, BiFunction<? super T, ? super U, ? extends V>, Executor)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when this and the other
 given stage both complete normally, is executed using the
 supplied executor, with the two results as arguments to the
 supplied function.
thenComparing(Comparator<? super T>)
- Method in interface java.util.
Comparator
Returns a lexicographic-order comparator with another comparator.
thenComparing(Function<? super T, ? extends U>)
- Method in interface java.util.
Comparator
Returns a lexicographic-order comparator with a function that
 extracts a
Comparable
sort key.
thenComparing(Function<? super T, ? extends U>, Comparator<? super U>)
- Method in interface java.util.
Comparator
Returns a lexicographic-order comparator with a function that
 extracts a key to be compared with the given
Comparator
.
thenComparingDouble(ToDoubleFunction<? super T>)
- Method in interface java.util.
Comparator
Returns a lexicographic-order comparator with a function that
 extracts a
double
sort key.
thenComparingInt(ToIntFunction<? super T>)
- Method in interface java.util.
Comparator
Returns a lexicographic-order comparator with a function that
 extracts an
int
sort key.
thenComparingLong(ToLongFunction<? super T>)
- Method in interface java.util.
Comparator
Returns a lexicographic-order comparator with a function that
 extracts a
long
sort key.
thenCompose(Function<? super T, ? extends CompletionStage<U>>)
- Method in class java.util.concurrent.
CompletableFuture
thenCompose(Function<? super T, ? extends CompletionStage<U>>)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that is completed with the same
 value as the CompletionStage returned by the given function.
thenComposeAsync(Function<? super T, ? extends CompletionStage<U>>)
- Method in class java.util.concurrent.
CompletableFuture
thenComposeAsync(Function<? super T, ? extends CompletionStage<U>>)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that is completed with the same
 value as the CompletionStage returned by the given function,
 executed using this stage's default asynchronous execution
 facility.
thenComposeAsync(Function<? super T, ? extends CompletionStage<U>>, Executor)
- Method in class java.util.concurrent.
CompletableFuture
thenComposeAsync(Function<? super T, ? extends CompletionStage<U>>, Executor)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that is completed with the same
 value as the CompletionStage returned by the given function,
 executed using the supplied Executor.
thenRun(Runnable)
- Method in class java.util.concurrent.
CompletableFuture
thenRun(Runnable)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when this stage completes
 normally, executes the given action.
thenRunAsync(Runnable)
- Method in class java.util.concurrent.
CompletableFuture
thenRunAsync(Runnable)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when this stage completes
 normally, executes the given action using this stage's default
 asynchronous execution facility.
thenRunAsync(Runnable, Executor)
- Method in class java.util.concurrent.
CompletableFuture
thenRunAsync(Runnable, Executor)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when this stage completes
 normally, executes the given action using the supplied Executor.
The opaque element
- Search tag in package javax.swing.plaf.synth
Section
The painter element
- Search tag in package javax.swing.plaf.synth
Section
The property element
- Search tag in package javax.swing.plaf.synth
Section
The Scope of a Multicast Address
- Search tag in class java.net.Inet4Address
Section
The state element
- Search tag in package javax.swing.plaf.synth
Section
The style element
- Search tag in package javax.swing.plaf.synth
Section
The synth element
- Search tag in package javax.swing.plaf.synth
Section
The value in the data source that caused a conflict
- Search tag in interface javax.sql.rowset.spi.SyncResolver
Section
thickness
- Variable in class javax.swing.border.
LineBorder
Thickness of the border.
thisObject()
- Method in interface com.sun.jdi.
StackFrame
Returns the value of 'this' for the current frame.
thread()
- Method in interface com.sun.jdi.event.
ClassPrepareEvent
Returns the thread in which this event has occurred.
thread()
- Method in interface com.sun.jdi.event.
LocatableEvent
Returns the thread in which this event has occurred.
thread()
- Method in interface com.sun.jdi.event.
MonitorContendedEnteredEvent
Returns the thread in which this event has occurred.
thread()
- Method in interface com.sun.jdi.event.
MonitorContendedEnterEvent
Returns the thread in which this event has occurred.
thread()
- Method in interface com.sun.jdi.event.
MonitorWaitedEvent
Returns the thread in which this event has occurred.
thread()
- Method in interface com.sun.jdi.event.
MonitorWaitEvent
Returns the thread in which monitor wait event has occurred.
thread()
- Method in interface com.sun.jdi.event.
ThreadDeathEvent
Returns the thread which is terminating.
thread()
- Method in interface com.sun.jdi.event.
ThreadStartEvent
Returns the thread which has started.
thread()
- Method in interface com.sun.jdi.event.
VMStartEvent
Returns the initial thread of the VM which has started.
thread()
- Method in interface com.sun.jdi.
MonitorInfo
Returns a
ThreadReference
object for the thread that
 owns the monitor.
thread()
- Method in interface com.sun.jdi.request.
StepRequest
thread()
- Method in interface com.sun.jdi.
StackFrame
Returns the thread under which this frame's method is running.
Thread
- Class in
java.lang
A
thread
is a thread of execution in a program.
Thread()
- Constructor for class java.lang.
Thread
Initializes a new platform
Thread
.
Thread(Runnable)
- Constructor for class java.lang.
Thread
Initializes a new platform
Thread
.
Thread(Runnable, String)
- Constructor for class java.lang.
Thread
Initializes a new platform
Thread
.
Thread(String)
- Constructor for class java.lang.
Thread
Initializes a new platform
Thread
.
Thread(ThreadGroup, Runnable)
- Constructor for class java.lang.
Thread
Initializes a new platform
Thread
.
Thread(ThreadGroup, Runnable, String)
- Constructor for class java.lang.
Thread
Initializes a new platform
Thread
so that it has
task
as its run object, has the specified
name
as its name,
 and belongs to the thread group referred to by
group
.
Thread(ThreadGroup, Runnable, String, long)
- Constructor for class java.lang.
Thread
Initializes a new platform
Thread
so that it has
task
as its run object, has the specified
name
as its name,
 and belongs to the thread group referred to by
group
, and has
 the specified
stack size
.
Thread(ThreadGroup, Runnable, String, long, boolean)
- Constructor for class java.lang.
Thread
Initializes a new platform
Thread
so that it has
task
as its run object, has the specified
name
as its name,
 belongs to the thread group referred to by
group
, has
 the specified
stackSize
, and inherits initial values for
inheritable thread-local
variables
 if
inheritThreadLocals
is
true
.
Thread(ThreadGroup, String)
- Constructor for class java.lang.
Thread
Initializes a new platform
Thread
.
THREAD_MXBEAN_NAME
- Static variable in class java.lang.management.
ManagementFactory
String representation of the
ObjectName
for the
ThreadMXBean
.
THREAD_STATUS_MONITOR
- Static variable in interface com.sun.jdi.
ThreadReference
Thread is waiting on a java monitor
THREAD_STATUS_NOT_STARTED
- Static variable in interface com.sun.jdi.
ThreadReference
Thread has not yet been started
THREAD_STATUS_RUNNING
- Static variable in interface com.sun.jdi.
ThreadReference
Thread is runnable
THREAD_STATUS_SLEEPING
- Static variable in interface com.sun.jdi.
ThreadReference
Thread is sleeping -
Thread.sleep(long)
.
THREAD_STATUS_UNKNOWN
- Static variable in interface com.sun.jdi.
ThreadReference
Thread status is unknown
THREAD_STATUS_WAIT
- Static variable in interface com.sun.jdi.
ThreadReference
Thread is waiting -
Object.wait()
or
LockSupport.park()
.
THREAD_STATUS_ZOMBIE
- Static variable in interface com.sun.jdi.
ThreadReference
Thread has completed execution
Thread.Builder
- Interface in
java.lang
A builder for
Thread
and
ThreadFactory
objects.
Thread.Builder.OfPlatform
- Interface in
java.lang
A builder for creating a platform
Thread
or
ThreadFactory
that creates platform threads.
Thread.Builder.OfVirtual
- Interface in
java.lang
A builder for creating a virtual
Thread
or
ThreadFactory
that creates virtual threads.
Thread.State
- Enum Class in
java.lang
A thread state.
Thread.UncaughtExceptionHandler
- Interface in
java.lang
Interface for handlers invoked when a
Thread
abruptly
 terminates due to an uncaught exception.
Thread Contention Monitoring
- Search tag in interface java.lang.management.ThreadMXBean
Section
Thread CPU time
- Search tag in interface java.lang.management.ThreadMXBean
Section
ThreadDeath
- Exception Class in
java.lang
Deprecated, for removal: This API element is subject to removal in a future version.
Thread.stop()
was originally specified to "stop" a victim
      thread by causing the victim thread to throw a
ThreadDeath
. It
      was inherently unsafe and deprecated in an early JDK release. The ability
      to "stop" a thread with
Thread.stop
has been removed and the
Thread.stop
method changed to throw an exception. Consequently,
ThreadDeath
is also deprecated, for removal.
ThreadDeath()
- Constructor for exception class java.lang.
ThreadDeath
Deprecated.
Constructs a
ThreadDeath
.
ThreadDeathEvent
- Interface in
com.sun.jdi.event
Notification of a completed thread in the target VM.
ThreadDeathRequest
- Interface in
com.sun.jdi.request
Request for notification when a thread terminates in the target VM.
threadDeathRequests()
- Method in interface com.sun.jdi.request.
EventRequestManager
Return an unmodifiable list of the enabled and disabled thread death requests.
ThreadFactory
- Interface in
java.util.concurrent
An object that creates new threads on demand.
threadGroup()
- Method in interface com.sun.jdi.
ThreadReference
Returns this thread's thread group.
ThreadGroup
- Class in
java.lang
A thread group represents a set of threads.
ThreadGroup(String)
- Constructor for class java.lang.
ThreadGroup
Constructs a new thread group.
ThreadGroup(ThreadGroup, String)
- Constructor for class java.lang.
ThreadGroup
Creates a new thread group.
ThreadGroupReference
- Interface in
com.sun.jdi
A thread group object from the target VM.
threadGroups()
- Method in interface com.sun.jdi.
ThreadGroupReference
Returns a List containing a
ThreadGroupReference
for each
 subgroup.
Thread groups and virtual threads
- Search tag in class java.lang.ThreadGroup
Section
threadId()
- Method in class java.lang.
Thread
Returns the identifier of this Thread.
Thread ID
- Search tag in interface java.lang.management.ThreadMXBean
Section
ThreadInfo
- Class in
java.lang.management
Thread information.
Threading
- Search tag in class java.nio.channels.AsynchronousChannelGroup
Section
Threading Issues
- Search tag in interface javax.naming.event.EventContext
Section
Threading Issues
- Search tag in package javax.naming.event
Section
ThreadLocal<T>
- Class in
java.lang
This class provides thread-local variables.
ThreadLocal()
- Constructor for class java.lang.
ThreadLocal
Creates a thread local variable.
ThreadLocalRandom
- Class in
java.util.concurrent
A random number generator (with period 2
64
) isolated
 to the current thread.
ThreadMXBean
- Interface in
com.sun.management
Platform-specific management interface for the thread system
 of the Java virtual machine.
ThreadMXBean
- Interface in
java.lang.management
The management interface for the thread system of the Java virtual machine.
ThreadPoolExecutor
- Class in
java.util.concurrent
An
ExecutorService
that executes each submitted task using
 one of possibly several pooled threads, normally configured
 using
Executors
factory methods.
ThreadPoolExecutor(int, int, long, TimeUnit, BlockingQueue<Runnable>)
- Constructor for class java.util.concurrent.
ThreadPoolExecutor
Creates a new
ThreadPoolExecutor
with the given initial
 parameters, the
default thread factory
and the
default rejected execution handler
.
ThreadPoolExecutor(int, int, long, TimeUnit, BlockingQueue<Runnable>, RejectedExecutionHandler)
- Constructor for class java.util.concurrent.
ThreadPoolExecutor
Creates a new
ThreadPoolExecutor
with the given initial
 parameters and the
default thread factory
.
ThreadPoolExecutor(int, int, long, TimeUnit, BlockingQueue<Runnable>, ThreadFactory)
- Constructor for class java.util.concurrent.
ThreadPoolExecutor
Creates a new
ThreadPoolExecutor
with the given initial
 parameters and the
default rejected execution handler
.
ThreadPoolExecutor(int, int, long, TimeUnit, BlockingQueue<Runnable>, ThreadFactory, RejectedExecutionHandler)
- Constructor for class java.util.concurrent.
ThreadPoolExecutor
Creates a new
ThreadPoolExecutor
with the given initial
 parameters.
ThreadPoolExecutor.AbortPolicy
- Class in
java.util.concurrent
A handler for rejected tasks that throws a
RejectedExecutionException
.
ThreadPoolExecutor.CallerRunsPolicy
- Class in
java.util.concurrent
A handler for rejected tasks that runs the rejected task
 directly in the calling thread of the
execute
method,
 unless the executor has been shut down, in which case the task
 is discarded.
ThreadPoolExecutor.DiscardOldestPolicy
- Class in
java.util.concurrent
A handler for rejected tasks that discards the oldest unhandled
 request and then retries
execute
, unless the executor
 is shut down, in which case the task is discarded.
ThreadPoolExecutor.DiscardPolicy
- Class in
java.util.concurrent
A handler for rejected tasks that silently discards the
 rejected task.
ThreadReference
- Interface in
com.sun.jdi
A thread object from the target VM.
threads()
- Method in interface com.sun.jdi.
ThreadGroupReference
Returns a List containing a
ThreadReference
for each live platform
 thread in this thread group.
Thread safety
- Search tag in class java.nio.Buffer
Section
Thread safety
- Search tag in class java.security.SecureRandom
Section
Thread safety
- Search tag in class javax.sql.rowset.serial.SerialArray
Section
Thread safety
- Search tag in class javax.sql.rowset.serial.SerialBlob
Section
Thread safety
- Search tag in class javax.sql.rowset.serial.SerialClob
Section
Thread safety
- Search tag in class javax.sql.rowset.serial.SerialDatalink
Section
Thread safety
- Search tag in class javax.sql.rowset.serial.SerialJavaObject
Section
Thread safety
- Search tag in class javax.sql.rowset.serial.SerialRef
Section
Thread safety
- Search tag in class javax.sql.rowset.serial.SerialStruct
Section
ThreadStartEvent
- Interface in
com.sun.jdi.event
Notification of a new running thread in the target VM.
ThreadStartRequest
- Interface in
com.sun.jdi.request
Request for notification when a thread starts execution in the target VM.
threadStartRequests()
- Method in interface com.sun.jdi.request.
EventRequestManager
Return an unmodifiable list of the enabled and disabled thread start requests.
Three-letter language/country(region) codes
- Search tag in class java.util.Locale
Section
Three-letter time zone IDs
- Search tag in class java.util.TimeZone
Section
THRESHHOLDING_NONE
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A value to be used with the "Thresholding" tag.
THRESHHOLDING_ORDERED_DITHER
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A value to be used with the "Thresholding" tag.
THRESHHOLDING_RANDOMIZED_DITHER
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A value to be used with the "Thresholding" tag.
Threshold
- Annotation Interface in
jdk.jfr
Event annotation, specifies the default duration below which an event is not
 recorded (for example,
"20 ms"
).
THRESHOLD_ERROR
- Static variable in class javax.management.monitor.
MonitorNotification
Notification type denoting that the type of the thresholds, offset or modulus is not correct.
THRESHOLD_HIGH_VALUE_EXCEEDED
- Static variable in class javax.management.monitor.
MonitorNotification
Notification type denoting that the observed attribute has exceeded the threshold high value.
THRESHOLD_LOW_VALUE_EXCEEDED
- Static variable in class javax.management.monitor.
MonitorNotification
Notification type denoting that the observed attribute has exceeded the threshold low value.
THRESHOLD_VALUE_EXCEEDED
- Static variable in class javax.management.monitor.
MonitorNotification
Notification type denoting that the observed attribute has reached the threshold value.
THROW
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
ThrowTree
.
Throwable
- Exception Class in
java.lang
The
Throwable
class is the superclass of all errors and
 exceptions in the Java language.
Throwable()
- Constructor for exception class java.lang.
Throwable
Constructs a new throwable with
null
as its detail message.
Throwable(String)
- Constructor for exception class java.lang.
Throwable
Constructs a new throwable with the specified detail message.
Throwable(String, Throwable)
- Constructor for exception class java.lang.
Throwable
Constructs a new throwable with the specified detail message and
 cause.
Throwable(String, Throwable, boolean, boolean)
- Constructor for exception class java.lang.
Throwable
Constructs a new throwable with the specified detail message,
 cause,
suppression
enabled or
 disabled, and writable stack trace enabled or disabled.
Throwable(Throwable)
- Constructor for exception class java.lang.
Throwable
Constructs a new throwable with the specified cause and a detail
 message of
(cause==null ? null : cause.toString())
(which
 typically contains the class and detail message of
cause
).
throwConvertedInvocationException(Throwable)
- Method in class jdk.jshell.execution.
DirectExecutionControl
Converts incoming exceptions in user code into instances of subtypes of
ExecutionControl.ExecutionControlException
and throws the
 converted exception.
throwConvertedOtherException(Throwable)
- Method in class jdk.jshell.execution.
DirectExecutionControl
Converts incoming exceptions in agent code into instances of subtypes of
ExecutionControl.ExecutionControlException
and throws the
 converted exception.
throwException()
- Method in class java.nio.charset.
CoderResult
Throws an exception appropriate to the result described by this object.
throwException(Class<?>, Class<? extends Throwable>)
- Static method in class java.lang.invoke.
MethodHandles
Produces a method handle which will throw exceptions of the given
exType
.
throwIfFailed()
- Method in class java.util.concurrent.
StructuredTaskScope.ShutdownOnFailure
PREVIEW
Throws if a subtask
failed
PREVIEW
.
throwIfFailed(Function<Throwable, ? extends X>)
- Method in class java.util.concurrent.
StructuredTaskScope.ShutdownOnFailure
PREVIEW
Throws the exception produced by the given exception supplying function if a
 subtask
failed
PREVIEW
.
throwing(String, String, Throwable)
- Method in class java.util.logging.
Logger
Log throwing an exception.
THROWS
- Enum constant in enum class com.sun.source.doctree.
DocTree.Kind
Used for instances of
ThrowsTree
representing an
@throws
tag.
ThrowsTree
- Interface in
com.sun.source.doctree
A tree node for an
@exception
or
@throws
block tag.
ThrowTree
- Interface in
com.sun.source.tree
A tree node for a
throw
statement.
thumbColor
- Variable in class javax.swing.plaf.basic.
BasicScrollBarUI
Thumb color
thumbColor
- Static variable in class javax.swing.plaf.metal.
MetalSliderUI
The color of a thumb
thumbDarkShadowColor
- Variable in class javax.swing.plaf.basic.
BasicScrollBarUI
Thumb dark shadow color
thumbHighlightColor
- Variable in class javax.swing.plaf.basic.
BasicScrollBarUI
Thumb highlight color
thumbLightShadowColor
- Variable in class javax.swing.plaf.basic.
BasicScrollBarUI
Thumb light shadow color
thumbnailComplete(ImageReader)
- Method in interface javax.imageio.event.
IIOReadProgressListener
Reports that a thumbnail read operation has completed.
thumbnailComplete(ImageWriter)
- Method in interface javax.imageio.event.
IIOWriteProgressListener
Reports that a thumbnail write operation has completed.
Thumbnail Images
- Search tag in package javax.imageio.metadata
Section
thumbnailPassComplete(ImageReader, BufferedImage)
- Method in interface javax.imageio.event.
IIOReadUpdateListener
Reports that the current thumbnail read operation has completed
 a progressive pass.
thumbnailPassStarted(ImageReader, BufferedImage, int, int, int, int, int, int, int, int[])
- Method in interface javax.imageio.event.
IIOReadUpdateListener
Reports that the current thumbnail read operation is about to
 begin a progressive pass.
thumbnailProgress(ImageReader, float)
- Method in interface javax.imageio.event.
IIOReadProgressListener
Reports the approximate degree of completion of the current
getThumbnail
call within the associated
ImageReader
.
thumbnailProgress(ImageWriter, float)
- Method in interface javax.imageio.event.
IIOWriteProgressListener
Reports the approximate degree of completion of the current
 thumbnail write within the associated
ImageWriter
.
thumbnails
- Variable in class javax.imageio.
IIOImage
A
List
of
BufferedImage
thumbnails,
 or
null
.
thumbnailStarted(ImageReader, int, int)
- Method in interface javax.imageio.event.
IIOReadProgressListener
Reports that a thumbnail read operation is beginning.
thumbnailStarted(ImageWriter, int, int)
- Method in interface javax.imageio.event.
IIOWriteProgressListener
Reports that a thumbnail write operation is beginning.
thumbnailUpdate(ImageReader, BufferedImage, int, int, int, int, int, int, int[])
- Method in interface javax.imageio.event.
IIOReadUpdateListener
Reports that a given region of a thumbnail image has been updated.
thumbRect
- Variable in class javax.swing.plaf.basic.
BasicScrollBarUI
Thumb rectangle
thumbRect
- Variable in class javax.swing.plaf.basic.
BasicSliderUI
Thumb rectangle
THURSDAY
- Enum constant in enum class java.time.
DayOfWeek
The singleton instance for the day-of-week of Thursday.
THURSDAY
- Static variable in class java.util.
Calendar
Value of the
Calendar.DAY_OF_WEEK
field indicating
 Thursday.
TIBETAN
- Enum constant in enum class java.awt.font.
NumericShaper.Range
The Tibetan range with the Tibetan digits.
TIBETAN
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Tibetan".
TIBETAN
- Static variable in class java.awt.font.
NumericShaper
Identifies the TIBETAN range and decimal base.
TIBETAN
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Tibetan" Unicode character block.
tick(Clock, Duration)
- Static method in class java.time.
Clock
Obtains a clock that returns instants from the specified clock truncated
 to the nearest occurrence of the specified duration.
tick(InstantSource, Duration)
- Static method in interface java.time.
InstantSource
Obtains a source that returns instants from the specified source truncated to
 the nearest occurrence of the specified duration.
TICK_BUFFER
- Variable in class javax.swing.plaf.metal.
MetalSliderUI
The buffer of a tick.
tickLength
- Static variable in class javax.swing.plaf.metal.
MetalSliderUI
The length of a tick.
tickMillis(ZoneId)
- Static method in class java.time.
Clock
Obtains a clock that returns the current instant ticking in whole milliseconds
 using the best available system clock.
tickMinutes(ZoneId)
- Static method in class java.time.
Clock
Obtains a clock that returns the current instant ticking in whole minutes
 using the best available system clock.
tickRect
- Variable in class javax.swing.plaf.basic.
BasicSliderUI
Tick rectangle
ticks()
- Method in class javax.sound.midi.
Track
Obtains the length of the track, expressed in MIDI ticks.
TICKS
- Static variable in annotation interface jdk.jfr.
Timespan
Unit for ticks.
TICKS
- Static variable in annotation interface jdk.jfr.
Timestamp
The unit for the number of ticks that have transpired since some arbitrary
 starting date.
tickSeconds(ZoneId)
- Static method in class java.time.
Clock
Obtains a clock that returns the current instant ticking in whole seconds
 using the best available system clock.
TIFF_ASCII
- Static variable in class javax.imageio.plugins.tiff.
TIFFTag
Flag for null-terminated ASCII strings.
TIFF_BYTE
- Static variable in class javax.imageio.plugins.tiff.
TIFFTag
Flag for 8 bit unsigned integers.
TIFF_DOUBLE
- Static variable in class javax.imageio.plugins.tiff.
TIFFTag
Flag for 64 bit IEEE doubles.
TIFF_FLOAT
- Static variable in class javax.imageio.plugins.tiff.
TIFFTag
Flag for 32 bit IEEE floats.
TIFF_IFD_POINTER
- Static variable in class javax.imageio.plugins.tiff.
TIFFTag
Flag for IFD pointer defined in TIFF Tech Note 1 in
 TIFF Specification Supplement 1.
TIFF_LONG
- Static variable in class javax.imageio.plugins.tiff.
TIFFTag
Flag for 32 bit unsigned integers.
TIFF_RATIONAL
- Static variable in class javax.imageio.plugins.tiff.
TIFFTag
Flag for pairs of 32 bit unsigned integers.
TIFF_SBYTE
- Static variable in class javax.imageio.plugins.tiff.
TIFFTag
Flag for 8 bit signed integers.
TIFF_SHORT
- Static variable in class javax.imageio.plugins.tiff.
TIFFTag
Flag for 16 bit unsigned integers.
TIFF_SLONG
- Static variable in class javax.imageio.plugins.tiff.
TIFFTag
Flag for 32 bit signed integers.
TIFF_SRATIONAL
- Static variable in class javax.imageio.plugins.tiff.
TIFFTag
Flag for pairs of 32 bit signed integers.
TIFF_SSHORT
- Static variable in class javax.imageio.plugins.tiff.
TIFFTag
Flag for 16 bit signed integers.
TIFF_UNDEFINED
- Static variable in class javax.imageio.plugins.tiff.
TIFFTag
Flag for 8 bit uninterpreted bytes.
TIFFDirectory
- Class in
javax.imageio.plugins.tiff
A convenience class for simplifying interaction with TIFF native
 image metadata.
TIFFDirectory(TIFFTagSet[], TIFFTag)
- Constructor for class javax.imageio.plugins.tiff.
TIFFDirectory
Constructs a
TIFFDirectory
which is aware of a given
 group of
TIFFTagSet
s.
TIFFField
- Class in
javax.imageio.plugins.tiff
A class representing a field in a TIFF 6.0 Image File Directory.
TIFFField(TIFFTag, int, int)
- Constructor for class javax.imageio.plugins.tiff.
TIFFField
Constructs a data array using
createArrayForType()
and invokes
TIFFField(TIFFTag,int,int,Object)
with the supplied
 parameters and the created array.
TIFFField(TIFFTag, int, int, Object)
- Constructor for class javax.imageio.plugins.tiff.
TIFFField
Constructs a
TIFFField
with arbitrary data.
TIFFField(TIFFTag, int, long, TIFFDirectory)
- Constructor for class javax.imageio.plugins.tiff.
TIFFField
Constructs a
TIFFField
with an IFD offset and contents.
TIFFField(TIFFTag, long)
- Constructor for class javax.imageio.plugins.tiff.
TIFFField
Constructs a
TIFFField
with a single non-negative integral
 value.
TIFFImageReadParam
- Class in
javax.imageio.plugins.tiff
A subclass of
ImageReadParam
allowing control over
 the TIFF reading process.
TIFFImageReadParam()
- Constructor for class javax.imageio.plugins.tiff.
TIFFImageReadParam
Constructs a
TIFFImageReadParam
.
TIFF Metadata Format Specification and Usage Notes
- Search tag in package javax.imageio.metadata
Section
TIFFTag
- Class in
javax.imageio.plugins.tiff
A class defining the notion of a TIFF tag.
TIFFTag(String, int, int)
- Constructor for class javax.imageio.plugins.tiff.
TIFFTag
Constructs  a
TIFFTag
with  a  given  name,  tag number,
 and set  of  legal  data  types.
TIFFTag(String, int, int, int)
- Constructor for class javax.imageio.plugins.tiff.
TIFFTag
Constructs a
TIFFTag
with a given name, tag number, set
 of legal data types, and value count.
TIFFTag(String, int, TIFFTagSet)
- Constructor for class javax.imageio.plugins.tiff.
TIFFTag
Constructs a
TIFFTag
with a given name, tag number and
TIFFTagSet
to which it refers.
TIFFTagSet
- Class in
javax.imageio.plugins.tiff
A class representing a set of TIFF tags.
TIFFTagSet(List<TIFFTag>)
- Constructor for class javax.imageio.plugins.tiff.
TIFFTagSet
Constructs a
TIFFTagSet
, given a
List
of
TIFFTag
objects.
TIFINAGH
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Tifinagh".
TIFINAGH
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Tifinagh" Unicode character block.
tileGridXOffset
- Variable in class javax.imageio.
ImageWriteParam
The amount by which the tile grid origin should be offset
 horizontally from the image origin if tiling has been set,
 or 0 otherwise.
tileGridYOffset
- Variable in class javax.imageio.
ImageWriteParam
The amount by which the tile grid origin should be offset
 vertically from the image origin if tiling has been set,
 or 0 otherwise.
tileHeight
- Variable in class javax.imageio.
ImageWriteParam
The height of each tile if tiling has been set, or 0 otherwise.
tileIcon
- Variable in class javax.swing.border.
MatteBorder
The icon to be used for tiling the border.
TileObserver
- Interface in
java.awt.image
An interface for objects that wish to be informed when tiles
 of a WritableRenderedImage become modifiable by some writer via
 a call to getWritableTile, and when they become unmodifiable via
 the last call to releaseWritableTile.
tileUpdate(WritableRenderedImage, int, int, boolean)
- Method in interface java.awt.image.
TileObserver
A tile is about to be updated (it is either about to be grabbed
 for writing, or it is being released from writing).
tileWidth
- Variable in class javax.imageio.
ImageWriteParam
The width of each tile if tiling has been set, or 0 otherwise.
tilingMode
- Variable in class javax.imageio.
ImageWriteParam
The mode controlling tiling settings, which Must be
 set to one of the four
MODE_*
values.
tilingSet
- Variable in class javax.imageio.
ImageWriteParam
A
boolean
that is
true
if tiling
 parameters have been specified.
time
- Variable in class java.util.
Calendar
The currently set time for this calendar, expressed in milliseconds after
 January 1, 1970, 0:00:00 GMT.
Time
- Class in
java.sql
A thin wrapper around the
java.util.Date
class that allows the JDBC
 API to identify this as an SQL
TIME
value.
Time(int, int, int)
- Constructor for class java.sql.
Time
Deprecated.
Use the constructor that takes a milliseconds value
             in place of this constructor
Time(long)
- Constructor for class java.sql.
Time
Constructs a
Time
object using a milliseconds time value.
TIME
- Enum constant in enum class java.sql.
JDBCType
Identifies the generic SQL type
TIME
.
TIME
- Static variable in class java.sql.
Types
The constant in the Java programming language, sometimes referred
 to as a type code, that identifies the generic SQL type
TIME
.
TIME
- Static variable in class javax.xml.datatype.
DatatypeConstants
Fully qualified name for W3C XML Schema 1.0 datatype
time
.
TIME_WITH_TIMEZONE
- Enum constant in enum class java.sql.
JDBCType
Identifies the generic SQL type
TIME_WITH_TIMEZONE
.
TIME_WITH_TIMEZONE
- Static variable in class java.sql.
Types
The constant in the Java programming language, sometimes referred to
 as a type code, that identifies the generic SQL type
TIME WITH TIMEZONE
.
TIME_ZONE
- Static variable in class java.text.
DateFormat.Field
Constant identifying the time zone field.
TIMED_OUT
- Static variable in class javax.print.attribute.standard.
PrinterStateReason
The server was able to connect to the output device (or is always
 connected), but was unable to get a response from the output device.
TIMED_WAITING
- Enum constant in enum class java.lang.
Thread.State
Thread state for a waiting thread with a specified waiting time.
timedJoin(Thread, long)
- Method in enum class java.util.concurrent.
TimeUnit
Performs a timed
Thread.join
using this time unit.
timedout()
- Method in interface com.sun.jdi.event.
MonitorWaitedEvent
Returns whether the wait has timed out or been interrupted.
timedWait(Object, long)
- Method in enum class java.util.concurrent.
TimeUnit
Performs a timed
Object.wait
using this time unit.
TimeLimitExceededException
- Exception Class in
javax.naming
This exception is thrown when a method
 does not terminate within the specified time limit.
TimeLimitExceededException()
- Constructor for exception class javax.naming.
TimeLimitExceededException
Constructs a new instance of TimeLimitExceededException.
TimeLimitExceededException(String)
- Constructor for exception class javax.naming.
TimeLimitExceededException
Constructs a new instance of TimeLimitExceededException
 using the argument supplied.
timeLineOrder()
- Static method in interface java.time.chrono.
ChronoLocalDate
Gets a comparator that compares
ChronoLocalDate
in
 time-line order ignoring the chronology.
timeLineOrder()
- Static method in interface java.time.chrono.
ChronoLocalDateTime
Gets a comparator that compares
ChronoLocalDateTime
in
 time-line order ignoring the chronology.
timeLineOrder()
- Static method in interface java.time.chrono.
ChronoZonedDateTime
Gets a comparator that compares
ChronoZonedDateTime
in
 time-line order ignoring the chronology.
timeLineOrder()
- Static method in class java.time.
OffsetDateTime
Gets a comparator that compares two
OffsetDateTime
instances
 based solely on the instant.
timeout()
- Method in interface com.sun.jdi.event.
MonitorWaitEvent
Returns the number of millisecond the thread will wait.
timeout()
- Method in class java.net.http.
HttpRequest
Returns an
Optional
containing this request's timeout duration.
timeout(Duration)
- Method in interface java.net.http.
HttpRequest.Builder
Sets a timeout for this request.
TimeoutException
- Exception Class in
java.util.concurrent
Exception thrown when a blocking operation times out.
TimeoutException()
- Constructor for exception class java.util.concurrent.
TimeoutException
Constructs a
TimeoutException
with no specified detail
 message.
TimeoutException(String)
- Constructor for exception class java.util.concurrent.
TimeoutException
Constructs a
TimeoutException
with the specified detail
 message.
Timeouts
- Search tag in class java.nio.channels.AsynchronousSocketChannel
Section
timer
- Variable in class javax.swing.plaf.basic.
BasicTreeUI.ComponentHandler
Timer used when inside a scrollpane and the scrollbar is
 adjusting.
timer
- Variable in class javax.swing.tree.
DefaultTreeCellEditor
Used before starting the editing session.
Timer
- Class in
java.util
A facility for threads to schedule tasks for future execution in a
 background thread.
Timer
- Class in
javax.management.timer
Provides the implementation of the timer MBean.
Timer
- Class in
javax.swing
Fires one or more
ActionEvent
s at specified
 intervals.
Timer()
- Constructor for class java.util.
Timer
Creates a new timer.
Timer()
- Constructor for class javax.management.timer.
Timer
Default constructor.
Timer(boolean)
- Constructor for class java.util.
Timer
Creates a new timer whose associated thread may be specified to
run as a daemon
.
Timer(int, ActionListener)
- Constructor for class javax.swing.
Timer
Creates a
Timer
and initializes both the initial delay and
 between-event delay to
delay
milliseconds.
Timer(String)
- Constructor for class java.util.
Timer
Creates a new timer whose associated thread has the specified name.
Timer(String, boolean)
- Constructor for class java.util.
Timer
Creates a new timer whose associated thread has the specified name,
 and may be specified to
run as a daemon
.
TimerMBean
- Interface in
javax.management.timer
Exposes the management interface of the timer MBean.
TimerNotification
- Class in
javax.management.timer
This class provides definitions of the notifications sent by timer MBeans.
TimerNotification(String, Object, long, long, String, Integer)
- Constructor for class javax.management.timer.
TimerNotification
Creates a timer notification object.
TimerTask
- Class in
java.util
A task that can be scheduled for one-time or repeated execution by a
Timer
.
TimerTask()
- Constructor for class java.util.
TimerTask
Creates a new timer task.
times(ValueExp, ValueExp)
- Static method in class javax.management.
Query
Returns a binary expression representing the product of two numeric values.
TIMES
- Static variable in class javax.management.
Query
A code representing the
Query.times(javax.management.ValueExp, javax.management.ValueExp)
expression.
Time-scale
- Search tag in class java.time.Instant
Section
Timespan
- Annotation Interface in
jdk.jfr
Event field annotation, specifies that the value is a duration.
timestamp()
- Method in class java.util.
UUID
The timestamp value associated with this UUID.
Timestamp
- Class in
java.security
This class encapsulates information about a signed timestamp.
Timestamp
- Class in
java.sql
A thin wrapper around
java.util.Date
that allows
 the JDBC API to identify this as an SQL
TIMESTAMP
value.
Timestamp
- Annotation Interface in
jdk.jfr
Event field annotation, specifies that the value is a point in time.
Timestamp(int, int, int, int, int, int, int)
- Constructor for class java.sql.
Timestamp
Deprecated.
instead use the constructor
Timestamp(long millis)
Timestamp(long)
- Constructor for class java.sql.
Timestamp
Constructs a
Timestamp
object
 using a milliseconds time value.
Timestamp(Date, CertPath)
- Constructor for class java.security.
Timestamp
Constructs a
Timestamp
.
TIMESTAMP
- Enum constant in enum class java.sql.
JDBCType
Identifies the generic SQL type
TIMESTAMP
.
TIMESTAMP
- Static variable in class java.sql.
Types
The constant in the Java programming language, sometimes referred
 to as a type code, that identifies the generic SQL type
TIMESTAMP
.
TIMESTAMP_WITH_TIMEZONE
- Enum constant in enum class java.sql.
JDBCType
Identifies the generic SQL type
TIMESTAMP_WITH_TIMEZONE
.
TIMESTAMP_WITH_TIMEZONE
- Static variable in class java.sql.
Types
The constant in the Java programming language, sometimes referred to
 as a type code, that identifies the generic SQL type
TIMESTAMP WITH TIMEZONE
.
timeToLive()
- Method in class com.sun.nio.sctp.
MessageInfo
The time period that the sending side may expire the message if it has
 not been sent, or
0
to indicate that no timeout should occur.
timeToLive(long)
- Method in class com.sun.nio.sctp.
MessageInfo
Sets the time period that the sending side may expire the message if it
 has not been sent.
TimeUnit
- Enum Class in
java.util.concurrent
A
TimeUnit
represents time durations at a given unit of
 granularity and provides utility methods to convert across units,
 and to perform timing and delay operations in these units.
TimeZone
- Class in
java.util
TimeZone
represents a time zone offset, and also figures out daylight
 savings.
TimeZone()
- Constructor for class java.util.
TimeZone
Sole constructor.
TIMEZONE_FIELD
- Static variable in class java.text.
DateFormat
Useful constant for TIMEZONE field alignment.
Time Zone Database
- Search tag in java.util.spi.TimeZoneNameProvider.getDisplayName(String, boolean, int, Locale)
External Specification
Time-zone IDs
- Search tag in class java.time.ZoneId
Section
TimeZoneNameProvider
- Class in
java.util.spi
An abstract class for service providers that
 provide localized time zone names for the
TimeZone
class.
TimeZoneNameProvider()
- Constructor for class java.util.spi.
TimeZoneNameProvider
Sole constructor.
Timing
- Search tag in package java.util.concurrent
Section
TIMING_CLOCK
- Static variable in class javax.sound.midi.
ShortMessage
Status byte for Timing Clock message (0xF8, or 248).
Timing of provider discovery
- Search tag in class java.util.ServiceLoader
Section
Timing of resolution
- Search tag in package java.lang.invoke
Section
TINYINT
- Enum constant in enum class java.sql.
JDBCType
Identifies the generic SQL type
TINYINT
.
TINYINT
- Static variable in class java.sql.
Types
The constant in the Java programming language, sometimes referred
 to as a type code, that identifies the generic SQL type
TINYINT
.
Tip for Trouble-shooting
- Search tag in javax.xml.datatype.DatatypeFactory.newInstance(String, ClassLoader)
Section
Tip for Trouble-shooting
- Search tag in javax.xml.parsers.DocumentBuilderFactory.newInstance()
Section
Tip for Trouble-shooting
- Search tag in javax.xml.parsers.DocumentBuilderFactory.newInstance(String, ClassLoader)
Section
Tip for Trouble-shooting
- Search tag in javax.xml.parsers.SAXParserFactory.newInstance()
Section
Tip for Trouble-shooting
- Search tag in javax.xml.parsers.SAXParserFactory.newInstance(String, ClassLoader)
Section
Tip for Trouble-shooting
- Search tag in javax.xml.transform.TransformerFactory.newInstance(String, ClassLoader)
Section
Tip for Trouble-shooting
- Search tag in javax.xml.validation.SchemaFactory.newInstance(String, String, ClassLoader)
Section
Tip for Trouble-shooting
- Search tag in javax.xml.xpath.XPathFactory.newInstance(String, String, ClassLoader)
Section
Tip for Trouble-shooting:
- Search tag in javax.xml.validation.SchemaFactory.newInstance(String)
Section
Tips for Writing an Auxiliary Look and Feel
- Search tag in package javax.swing.plaf.multi
Section
TIRHUTA
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Tirhuta".
TIRHUTA
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Tirhuta" Unicode character block.
title
- Variable in class javax.swing.border.
TitledBorder
The title the border should display.
title
- Variable in class javax.swing.
JInternalFrame
The title displayed in this internal frame's title bar.
title
- Variable in class javax.swing.text.html.parser.
DTD
The element corresponding to title.
TITLE
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "title"
TITLE
- Static variable in class javax.swing.text.html.
HTML.Tag
Tag <title>
TITLE_PROPERTY
- Static variable in class javax.swing.
JInternalFrame
Bound property name.
TITLECASE_LETTER
- Static variable in class java.lang.
Character
General category "Lt" in the Unicode specification.
titleColor
- Variable in class javax.swing.border.
TitledBorder
The color of the title.
TitledBorder
- Class in
javax.swing.border
A class which implements an arbitrary border
 with the addition of a String title in a
 specified position and justification.
TitledBorder(String)
- Constructor for class javax.swing.border.
TitledBorder
Creates a TitledBorder instance.
TitledBorder(Border)
- Constructor for class javax.swing.border.
TitledBorder
Creates a TitledBorder instance with the specified border
 and an empty title.
TitledBorder(Border, String)
- Constructor for class javax.swing.border.
TitledBorder
Creates a TitledBorder instance with the specified border
 and title.
TitledBorder(Border, String, int, int)
- Constructor for class javax.swing.border.
TitledBorder
Creates a TitledBorder instance with the specified border,
 title, title-justification, and title-position.
TitledBorder(Border, String, int, int, Font)
- Constructor for class javax.swing.border.
TitledBorder
Creates a TitledBorder instance with the specified border,
 title, title-justification, title-position, and title-font.
TitledBorder(Border, String, int, int, Font, Color)
- Constructor for class javax.swing.border.
TitledBorder
Creates a TitledBorder instance with the specified border,
 title, title-justification, title-position, title-font, and
 title-color.
TitledBorderUIResource(String)
- Constructor for class javax.swing.plaf.
BorderUIResource.TitledBorderUIResource
Constructs a
TitledBorderUIResource
.
TitledBorderUIResource(Border)
- Constructor for class javax.swing.plaf.
BorderUIResource.TitledBorderUIResource
Constructs a
TitledBorderUIResource
.
TitledBorderUIResource(Border, String)
- Constructor for class javax.swing.plaf.
BorderUIResource.TitledBorderUIResource
Constructs a
TitledBorderUIResource
.
TitledBorderUIResource(Border, String, int, int)
- Constructor for class javax.swing.plaf.
BorderUIResource.TitledBorderUIResource
Constructs a
TitledBorderUIResource
.
TitledBorderUIResource(Border, String, int, int, Font)
- Constructor for class javax.swing.plaf.
BorderUIResource.TitledBorderUIResource
Constructs a
TitledBorderUIResource
.
TitledBorderUIResource(Border, String, int, int, Font, Color)
- Constructor for class javax.swing.plaf.
BorderUIResource.TitledBorderUIResource
Constructs a
TitledBorderUIResource
.
titleFont
- Variable in class javax.swing.border.
TitledBorder
The font for rendering the title.
titleJustification
- Variable in class javax.swing.border.
TitledBorder
The justification for the title.
titlePane
- Variable in class javax.swing.plaf.basic.
BasicInternalFrameUI
Title pane
TitlePaneLayout()
- Constructor for class javax.swing.plaf.basic.
BasicInternalFrameTitlePane.TitlePaneLayout
Constructs a
TitlePaneLayout
.
titlePosition
- Variable in class javax.swing.border.
TitledBorder
The position for the title.
TitleProperty
- Static variable in interface javax.swing.text.
Document
The property name for the title of the document, if
 there is one.
TMENDRSCAN
- Static variable in interface javax.transaction.xa.
XAResource
Ends a recovery scan.
TMFAIL
- Static variable in interface javax.transaction.xa.
XAResource
Disassociates the caller and marks the transaction branch
 rollback-only.
TMJOIN
- Static variable in interface javax.transaction.xa.
XAResource
Caller is joining existing transaction branch.
TMNOFLAGS
- Static variable in interface javax.transaction.xa.
XAResource
Use TMNOFLAGS to indicate no flags value is selected.
TMONEPHASE
- Static variable in interface javax.transaction.xa.
XAResource
Caller is using one-phase optimization.
TMRESUME
- Static variable in interface javax.transaction.xa.
XAResource
Caller is resuming association with a suspended
 transaction branch.
TMSTARTRSCAN
- Static variable in interface javax.transaction.xa.
XAResource
Starts a recovery scan.
TMSUCCESS
- Static variable in interface javax.transaction.xa.
XAResource
Disassociates caller from a transaction branch.
TMSUSPEND
- Static variable in interface javax.transaction.xa.
XAResource
Caller is suspending (not ending) its association with
 a transaction branch.
to(File)
- Static method in class java.lang.
ProcessBuilder.Redirect
Returns a redirect to write to the specified file.
to(TimeUnit)
- Method in class java.nio.file.attribute.
FileTime
Returns the value at the given unit of granularity.
toAbsolutePath()
- Method in interface java.nio.file.
Path
Returns a
Path
object representing the absolute path of this
 path.
toArray()
- Method in class java.awt.dnd.
DragGestureEvent
Returns an
Object
array of the
 events comprising the drag gesture.
toArray()
- Method in class java.beans.beancontext.
BeanContextMembershipEvent
Gets the array of children affected by this event.
toArray()
- Method in class java.beans.beancontext.
BeanContextSupport
Gets all JavaBean or
BeanContext
instances currently nested in this BeanContext.
toArray()
- Method in class java.util.
AbstractCollection
Returns an array containing all of the elements in this collection.
toArray()
- Method in class java.util.
ArrayDeque
Returns an array containing all of the elements in this deque
 in proper sequence (from first to last element).
toArray()
- Method in class java.util.
ArrayList
Returns an array containing all of the elements in this list
 in proper sequence (from first to last element).
toArray()
- Method in interface java.util.
Collection
Returns an array containing all of the elements in this collection.
toArray()
- Method in class java.util.concurrent.
ArrayBlockingQueue
Returns an array containing all of the elements in this queue, in
 proper sequence.
toArray()
- Method in class java.util.concurrent.
ConcurrentHashMap.KeySetView
toArray()
- Method in class java.util.concurrent.
ConcurrentLinkedDeque
Returns an array containing all of the elements in this deque, in
 proper sequence (from first to last element).
toArray()
- Method in class java.util.concurrent.
ConcurrentLinkedQueue
Returns an array containing all of the elements in this queue, in
 proper sequence.
toArray()
- Method in class java.util.concurrent.
CopyOnWriteArrayList
Returns an array containing all of the elements in this list
 in proper sequence (from first to last element).
toArray()
- Method in class java.util.concurrent.
CopyOnWriteArraySet
Returns an array containing all of the elements in this set.
toArray()
- Method in class java.util.concurrent.
DelayQueue
Returns an array containing all of the elements in this queue.
toArray()
- Method in class java.util.concurrent.
LinkedBlockingDeque
Returns an array containing all of the elements in this deque, in
 proper sequence (from first to last element).
toArray()
- Method in class java.util.concurrent.
LinkedBlockingQueue
Returns an array containing all of the elements in this queue, in
 proper sequence.
toArray()
- Method in class java.util.concurrent.
LinkedTransferQueue
Returns an array containing all of the elements in this queue, in
 proper sequence.
toArray()
- Method in class java.util.concurrent.
PriorityBlockingQueue
Returns an array containing all of the elements in this queue.
toArray()
- Method in class java.util.concurrent.
SynchronousQueue
Returns a zero-length array.
toArray()
- Method in class java.util.
HashSet
toArray()
- Method in class java.util.
LinkedList
Returns an array containing all of the elements in this list
 in proper sequence (from first to last element).
toArray()
- Method in interface java.util.
List
Returns an array containing all of the elements in this list in proper
 sequence (from first to last element).
toArray()
- Method in class java.util.
PriorityQueue
Returns an array containing all of the elements in this queue.
toArray()
- Method in interface java.util.
Set
Returns an array containing all of the elements in this set.
toArray()
- Method in interface java.util.stream.
DoubleStream
Returns an array containing the elements of this stream.
toArray()
- Method in interface java.util.stream.
IntStream
Returns an array containing the elements of this stream.
toArray()
- Method in interface java.util.stream.
LongStream
Returns an array containing the elements of this stream.
toArray()
- Method in interface java.util.stream.
Stream
Returns an array containing the elements of this stream.
toArray()
- Method in class java.util.
Vector
Returns an array containing all of the elements in this Vector
 in the correct order.
toArray()
- Method in class javax.accessibility.
AccessibleRelationSet
Returns the current relation set as an array of
AccessibleRelation
.
toArray()
- Method in class javax.accessibility.
AccessibleStateSet
Returns the current state set as an array of
AccessibleState
.
toArray()
- Method in interface javax.print.attribute.
AttributeSet
Returns an array of the attributes contained in this set.
toArray()
- Method in class javax.print.attribute.
HashAttributeSet
Returns an array of the attributes contained in this set.
toArray()
- Method in class javax.swing.
DefaultListModel
Returns an array containing all of the elements in this list in the
 correct order.
toArray()
- Method in class jdk.incubator.vector.
ByteVector
Returns an array of type
byte[]
containing all the lane values.
toArray()
- Method in class jdk.incubator.vector.
DoubleVector
Returns an array of type
double[]
containing all the lane values.
toArray()
- Method in class jdk.incubator.vector.
FloatVector
Returns an array of type
float[]
containing all the lane values.
toArray()
- Method in class jdk.incubator.vector.
IntVector
Returns an array of type
int[]
containing all the lane values.
toArray()
- Method in class jdk.incubator.vector.
LongVector
Returns an array of type
long[]
containing all the lane values.
toArray()
- Method in class jdk.incubator.vector.
ShortVector
Returns an array of type
short[]
containing all the lane values.
toArray()
- Method in class jdk.incubator.vector.
Vector
Returns a packed array containing all the lane values.
toArray()
- Method in class jdk.incubator.vector.
VectorMask
Returns an
boolean
array containing the lane elements of this
 mask.
toArray()
- Method in class jdk.incubator.vector.
VectorShuffle
Returns an
int
array containing the lane
 source indexes of this shuffle.
toArray(ValueLayout.OfByte)
- Method in interface java.lang.foreign.
MemorySegment
PREVIEW
Copy the contents of this memory segment into a new byte array.
toArray(ValueLayout.OfChar)
- Method in interface java.lang.foreign.
MemorySegment
PREVIEW
Copy the contents of this memory segment into a new char array.
toArray(ValueLayout.OfDouble)
- Method in interface java.lang.foreign.
MemorySegment
PREVIEW
Copy the contents of this memory segment into a new double array.
toArray(ValueLayout.OfFloat)
- Method in interface java.lang.foreign.
MemorySegment
PREVIEW
Copy the contents of this memory segment into a new float array.
toArray(ValueLayout.OfInt)
- Method in interface java.lang.foreign.
MemorySegment
PREVIEW
Copy the contents of this memory segment into a new int array.
toArray(ValueLayout.OfLong)
- Method in interface java.lang.foreign.
MemorySegment
PREVIEW
Copy the contents of this memory segment into a new long array.
toArray(ValueLayout.OfShort)
- Method in interface java.lang.foreign.
MemorySegment
PREVIEW
Copy the contents of this memory segment into a new short array.
toArray(Object[])
- Method in class java.awt.dnd.
DragGestureEvent
Returns an array of the events comprising the drag gesture.
toArray(Object[])
- Method in class java.beans.beancontext.
BeanContextSupport
Gets an array containing all children of
 this
BeanContext
that match
 the types contained in arry.
toArray(IntFunction<A[]>)
- Method in interface java.util.stream.
Stream
Returns an array containing the elements of this stream, using the
 provided
generator
function to allocate the returned array, as
 well as any additional arrays that might be required for a partitioned
 execution or for resizing.
toArray(IntFunction<T[]>)
- Method in interface java.util.
Collection
Returns an array containing all of the elements in this collection,
 using the provided
generator
function to allocate the returned array.
toArray(T[])
- Method in class java.util.
AbstractCollection
Returns an array containing all of the elements in this collection;
 the runtime type of the returned array is that of the specified array.
toArray(T[])
- Method in class java.util.
ArrayDeque
Returns an array containing all of the elements in this deque in
 proper sequence (from first to last element); the runtime type of the
 returned array is that of the specified array.
toArray(T[])
- Method in class java.util.
ArrayList
Returns an array containing all of the elements in this list in proper
 sequence (from first to last element); the runtime type of the returned
 array is that of the specified array.
toArray(T[])
- Method in interface java.util.
Collection
Returns an array containing all of the elements in this collection;
 the runtime type of the returned array is that of the specified array.
toArray(T[])
- Method in class java.util.concurrent.
ArrayBlockingQueue
Returns an array containing all of the elements in this queue, in
 proper sequence; the runtime type of the returned array is that of
 the specified array.
toArray(T[])
- Method in class java.util.concurrent.
ConcurrentHashMap.KeySetView
toArray(T[])
- Method in class java.util.concurrent.
ConcurrentLinkedDeque
Returns an array containing all of the elements in this deque,
 in proper sequence (from first to last element); the runtime
 type of the returned array is that of the specified array.
toArray(T[])
- Method in class java.util.concurrent.
ConcurrentLinkedQueue
Returns an array containing all of the elements in this queue, in
 proper sequence; the runtime type of the returned array is that of
 the specified array.
toArray(T[])
- Method in class java.util.concurrent.
CopyOnWriteArrayList
Returns an array containing all of the elements in this list in
 proper sequence (from first to last element); the runtime type of
 the returned array is that of the specified array.
toArray(T[])
- Method in class java.util.concurrent.
CopyOnWriteArraySet
Returns an array containing all of the elements in this set; the
 runtime type of the returned array is that of the specified array.
toArray(T[])
- Method in class java.util.concurrent.
DelayQueue
Returns an array containing all of the elements in this queue; the
 runtime type of the returned array is that of the specified array.
toArray(T[])
- Method in class java.util.concurrent.
LinkedBlockingDeque
Returns an array containing all of the elements in this deque, in
 proper sequence; the runtime type of the returned array is that of
 the specified array.
toArray(T[])
- Method in class java.util.concurrent.
LinkedBlockingQueue
Returns an array containing all of the elements in this queue, in
 proper sequence; the runtime type of the returned array is that of
 the specified array.
toArray(T[])
- Method in class java.util.concurrent.
LinkedTransferQueue
Returns an array containing all of the elements in this queue, in
 proper sequence; the runtime type of the returned array is that of
 the specified array.
toArray(T[])
- Method in class java.util.concurrent.
PriorityBlockingQueue
Returns an array containing all of the elements in this queue; the
 runtime type of the returned array is that of the specified array.
toArray(T[])
- Method in class java.util.concurrent.
SynchronousQueue
Sets the zeroth element of the specified array to
null
(if the array has non-zero length) and returns it.
toArray(T[])
- Method in class java.util.
HashSet
toArray(T[])
- Method in class java.util.
LinkedList
Returns an array containing all of the elements in this list in
 proper sequence (from first to last element); the runtime type of
 the returned array is that of the specified array.
toArray(T[])
- Method in interface java.util.
List
Returns an array containing all of the elements in this list in
 proper sequence (from first to last element); the runtime type of
 the returned array is that of the specified array.
toArray(T[])
- Method in class java.util.
PriorityQueue
Returns an array containing all of the elements in this queue; the
 runtime type of the returned array is that of the specified array.
toArray(T[])
- Method in interface java.util.
Set
Returns an array containing all of the elements in this set; the
 runtime type of the returned array is that of the specified array.
toArray(T[])
- Method in class java.util.
Vector
Returns an array containing all of the elements in this Vector in the
 correct order; the runtime type of the returned array is that of the
 specified array.
toASCII(String)
- Static method in class java.net.
IDN
Translates a string from Unicode to ASCII Compatible Encoding (ACE),
 as defined by the ToASCII operation of
RFC 3490
.
toASCII(String, int)
- Static method in class java.net.
IDN
Translates a string from Unicode to ASCII Compatible Encoding (ACE),
 as defined by the ToASCII operation of
RFC 3490
.
toASCIIString()
- Method in class java.net.
URI
Returns the content of this URI as a US-ASCII string.
toAttributes()
- Method in class javax.naming.ldap.
Rdn
Retrieves the
Attributes
view of the type/value mappings contained in this Rdn.
toBack()
- Method in class java.awt.
Dialog
If this Window is visible, sends this Window to the back and may cause
 it to lose focus or activation if it is the focused or active Window.
toBack()
- Method in class java.awt.
Window
If this Window is visible, sends this Window to the back and may cause
 it to lose focus or activation if it is the focused or active Window.
toBack()
- Method in class javax.swing.
JInternalFrame
Sends this internal frame to the back.
toBigInteger()
- Method in class java.math.
BigDecimal
Converts this
BigDecimal
to a
BigInteger
.
toBigIntegerExact()
- Method in class java.math.
BigDecimal
Converts this
BigDecimal
to a
BigInteger
,
 checking for lost information.
toBinaryString(int)
- Static method in class java.lang.
Integer
Returns a string representation of the integer argument as an
 unsigned integer in base 2.
toBinaryString(long)
- Static method in class java.lang.
Long
Returns a string representation of the
long
argument as an unsigned integer in base 2.
TOBOTTOM_TOLEFT
- Static variable in class javax.print.attribute.standard.
PresentationDirection
Pages are laid out in columns starting at the top right, proceeding
 towards the bottom & left.
TOBOTTOM_TORIGHT
- Static variable in class javax.print.attribute.standard.
PresentationDirection
Pages are laid out in columns starting at the top left, proceeding
 towards the bottom & right.
toBundleName(String, Locale)
- Method in class java.util.
ResourceBundle.Control
Converts the given
baseName
and
locale
to the bundle name.
toBundleName(String, Locale)
- Method in class java.util.spi.
AbstractResourceBundleProvider
Returns the bundle name for the given
baseName
and
locale
that this provider provides.
toByteArray()
- Method in class java.io.
ByteArrayOutputStream
Creates a newly allocated byte array.
toByteArray()
- Method in class java.math.
BigInteger
Returns a byte array containing the two's-complement
 representation of this BigInteger.
toByteArray()
- Method in class java.text.
CollationKey
Converts the CollationKey to a sequence of bits.
toByteArray()
- Method in class java.util.
BitSet
Returns a new byte array containing all the bits in this bit set.
toCachedRowSet()
- Method in interface javax.sql.rowset.
JoinRowSet
Creates a new
CachedRowSet
object containing the
 data in this
JoinRowSet
object, which can be saved
 to a data source using the
SyncProvider
object for
 the
CachedRowSet
object.
toCharArray()
- Method in class java.io.
CharArrayWriter
Returns a copy of the input data.
toCharArray()
- Method in class java.lang.
String
Converts this string to a new character array.
toChars(int)
- Static method in class java.lang.
Character
Converts the specified character (Unicode code point) to its
 UTF-16 representation stored in a
char
array.
toChars(int, char[], int)
- Static method in class java.lang.
Character
Converts the specified character (Unicode code point) to its
 UTF-16 representation.
toChronoUnit()
- Method in enum class java.util.concurrent.
TimeUnit
Converts this
TimeUnit
to the equivalent
ChronoUnit
.
toCIEXYZ(float[])
- Method in class java.awt.color.
ColorSpace
Transforms a color value assumed to be in this
ColorSpace
into
 the
CS_CIEXYZ
conversion color space.
toCIEXYZ(float[])
- Method in class java.awt.color.
ICC_ColorSpace
Transforms a color value assumed to be in this
ColorSpace
into
 the
CS_CIEXYZ
conversion color space.
toCodePoint(char, char)
- Static method in class java.lang.
Character
Converts the specified surrogate pair to its supplementary code
 point value.
toCollection()
- Method in interface javax.sql.rowset.
CachedRowSet
Converts this
CachedRowSet
object to a
Collection
object that contains all of this
CachedRowSet
object's data.
toCollection(int)
- Method in interface javax.sql.rowset.
CachedRowSet
Converts the designated column in this
CachedRowSet
object
 to a
Collection
object.
toCollection(String)
- Method in interface javax.sql.rowset.
CachedRowSet
Converts the designated column in this
CachedRowSet
object
 to a
Collection
object.
toCollection(Supplier<C>)
- Static method in class java.util.stream.
Collectors
Returns a
Collector
that accumulates the input elements into a
 new
Collection
, in encounter order.
toCompletableFuture()
- Method in class java.util.concurrent.
CompletableFuture
Returns this CompletableFuture.
toCompletableFuture()
- Method in interface java.util.concurrent.
CompletionStage
Returns a
CompletableFuture
maintaining the same
 completion properties as this stage.
toCompositeData(CompositeType)
- Method in class com.sun.management.
GarbageCollectionNotificationInfo
toCompositeData(CompositeType)
- Method in class com.sun.management.
GcInfo
Return the
CompositeData
representation of this
GcInfo
, including any GC-specific attributes.
toCompositeData(CompositeType)
- Method in interface javax.management.openmbean.
CompositeDataView
Return a
CompositeData
corresponding to the values in
 this object.
toConcurrentMap(Function<? super T, ? extends K>, Function<? super T, ? extends U>)
- Static method in class java.util.stream.
Collectors
Returns a concurrent
Collector
that accumulates elements into a
ConcurrentMap
whose keys and values are the result of applying
 the provided mapping functions to the input elements.
toConcurrentMap(Function<? super T, ? extends K>, Function<? super T, ? extends U>, BinaryOperator<U>)
- Static method in class java.util.stream.
Collectors
Returns a concurrent
Collector
that accumulates elements into a
ConcurrentMap
whose keys and values are the result of applying
 the provided mapping functions to the input elements.
toConcurrentMap(Function<? super T, ? extends K>, Function<? super T, ? extends U>, BinaryOperator<U>, Supplier<M>)
- Static method in class java.util.stream.
Collectors
Returns a concurrent
Collector
that accumulates elements into a
ConcurrentMap
whose keys and values are the result of applying
 the provided mapping functions to the input elements.
toDays()
- Method in class java.time.
Duration
Gets the number of days in this duration.
toDays(long)
- Method in enum class java.util.concurrent.
TimeUnit
Equivalent to
DAYS.convert(duration, this)
.
toDaysPart()
- Method in class java.time.
Duration
Extracts the number of days in the duration.
toDegrees(double)
- Static method in class java.lang.
Math
Converts an angle measured in radians to an approximately
 equivalent angle measured in degrees.
toDegrees(double)
- Static method in class java.lang.
StrictMath
Converts an angle measured in radians to an approximately
 equivalent angle measured in degrees.
toDisplayString()
- Method in class javax.accessibility.
AccessibleBundle
Gets localized string describing the key using the default locale.
toDisplayString(String, Locale)
- Method in class javax.accessibility.
AccessibleBundle
Obtains the key as a localized string.
toDisplayString(Locale)
- Method in class javax.accessibility.
AccessibleBundle
Obtains the key as a localized string.
toDoubleArray()
- Method in class jdk.incubator.vector.
ByteVector
Returns a
double[]
array containing all
 the lane values, converted to the type
double
.
toDoubleArray()
- Method in class jdk.incubator.vector.
DoubleVector
Returns a
double[]
array containing all
 the lane values, converted to the type
double
.
toDoubleArray()
- Method in class jdk.incubator.vector.
FloatVector
Returns a
double[]
array containing all
 the lane values, converted to the type
double
.
toDoubleArray()
- Method in class jdk.incubator.vector.
IntVector
Returns a
double[]
array containing all
 the lane values, converted to the type
double
.
toDoubleArray()
- Method in class jdk.incubator.vector.
LongVector
Returns a
double[]
array containing all
 the lane values, converted to the type
double
.
toDoubleArray()
- Method in class jdk.incubator.vector.
ShortVector
Returns a
double[]
array containing all
 the lane values, converted to the type
double
.
toDoubleArray()
- Method in class jdk.incubator.vector.
Vector
Returns a
double[]
array containing all
 the lane values, converted to the type
double
.
ToDoubleBiFunction<T,
U>
- Interface in
java.util.function
Represents a function that accepts two arguments and produces a double-valued
 result.
ToDoubleFunction<T>
- Interface in
java.util.function
Represents a function that produces a double-valued result.
toEngineeringString()
- Method in class java.math.
BigDecimal
Returns a string representation of this
BigDecimal
,
 using engineering notation if an exponent is needed.
toEpochDay()
- Method in interface java.time.chrono.
ChronoLocalDate
Converts this date to the Epoch Day.
toEpochMilli()
- Method in class java.time.
Instant
Converts this instant to the number of milliseconds from the epoch
 of 1970-01-01T00:00:00Z.
toEpochSecond()
- Method in interface java.time.chrono.
ChronoZonedDateTime
Converts this date-time to the number of seconds from the epoch
 of 1970-01-01T00:00:00Z.
toEpochSecond()
- Method in class java.time.
OffsetDateTime
Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z.
toEpochSecond()
- Method in class java.time.zone.
ZoneOffsetTransition
Gets the transition instant as an epoch second.
toEpochSecond(LocalDate)
- Method in class java.time.
OffsetTime
Converts this
OffsetTime
to the number of seconds since the epoch
 of 1970-01-01T00:00:00Z.
toEpochSecond(LocalDate, ZoneOffset)
- Method in class java.time.
LocalTime
Converts this
LocalTime
to the number of seconds since the epoch
 of 1970-01-01T00:00:00Z.
toEpochSecond(LocalTime, ZoneOffset)
- Method in class java.time.
LocalDate
Converts this
LocalDate
to the number of seconds since the epoch
 of 1970-01-01T00:00:00Z.
toEpochSecond(ZoneOffset)
- Method in interface java.time.chrono.
ChronoLocalDateTime
Converts this date-time to the number of seconds from the epoch
 of 1970-01-01T00:00:00Z.
toExternalForm()
- Method in class java.net.
URL
Constructs a string representation of this
URL
.
toExternalForm(URL)
- Method in class java.net.
URLStreamHandler
Converts a
URL
of a specific protocol to a
String
.
toFile()
- Method in interface java.nio.file.
Path
Returns a
File
object representing this path.
toFormat()
- Method in class java.time.format.
DateTimeFormatter
Returns this formatter as a
java.text.Format
instance.
toFormat(TemporalQuery<?>)
- Method in class java.time.format.
DateTimeFormatter
Returns this formatter as a
java.text.Format
instance that will
 parse using the specified query.
toFormatter()
- Method in class java.time.format.
DateTimeFormatterBuilder
Completes this builder by creating the
DateTimeFormatter
using the default locale.
toFormatter(Locale)
- Method in class java.time.format.
DateTimeFormatterBuilder
Completes this builder by creating the
DateTimeFormatter
using the specified locale.
toFront()
- Method in class java.awt.
Window
If this Window is visible, brings this Window to the front and may make
 it the focused Window.
toFront()
- Method in class javax.swing.
JInternalFrame
Brings this internal frame to the front.
toGenericString()
- Method in class java.lang.
Class
Returns a string describing this
Class
, including
 information about modifiers and type parameters.
toGenericString()
- Method in class java.lang.reflect.
Constructor
Returns a string describing this
Constructor
,
 including type parameters.
toGenericString()
- Method in class java.lang.reflect.
Executable
Returns a string describing this
Executable
, including
 any type parameters.
toGenericString()
- Method in class java.lang.reflect.
Field
Returns a string describing this
Field
, including
 its generic type.
toGenericString()
- Method in class java.lang.reflect.
Method
Returns a string describing this
Method
, including type
 parameters.
TOGGLE_BUTTON
- Static variable in class javax.accessibility.
AccessibleRole
A specialized push button that can be checked or unchecked, but does not
 provide a separate indicator for the current state.
TOGGLE_BUTTON
- Static variable in class javax.swing.plaf.synth.
Region
ToggleButton region.
TOGGLE_CLICK_COUNT_PROPERTY
- Static variable in class javax.swing.
JTree
Bound property name for
toggleClickCount
.
TOGGLE_EXPAND
- Static variable in interface javax.accessibility.
AccessibleAction
An action which causes a tree node to collapse if expanded and expand if
 collapsed.
TOGGLE_POPUP
- Static variable in interface javax.accessibility.
AccessibleAction
An action which causes a popup to become visible if it is hidden and
 hidden if it is visible.
ToggleButtonBorder()
- Constructor for class javax.swing.plaf.metal.
MetalBorders.ToggleButtonBorder
Constructs a
ToggleButtonBorder
.
ToggleButtonBorder(Color, Color, Color, Color)
- Constructor for class javax.swing.plaf.basic.
BasicBorders.ToggleButtonBorder
Constructs a new instance of a
ToggleButtonBorder
.
ToggleButtonModel()
- Constructor for class javax.swing.
JToggleButton.ToggleButtonModel
Creates a new ToggleButton Model
toggleClickCount
- Variable in class javax.swing.
JTree
Number of mouse clicks before a node is expanded.
toggleExpandState(TreePath)
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Expands path if it is not expanded, or collapses row if it is expanded.
toggleOpenClose()
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI
Hides the popup if it is showing and shows the popup if it is hidden.
togglePopup()
- Method in class javax.swing.plaf.basic.
BasicComboPopup
Makes the popup visible if it is hidden and makes it hidden if it is
 visible.
toggleSortOrder(int)
- Method in class javax.swing.
DefaultRowSorter
Reverses the sort order from ascending to descending (or
 descending to ascending) if the specified column is already the
 primary sorted column; otherwise, makes the specified column
 the primary sorted column, with an ascending sort order.
toggleSortOrder(int)
- Method in class javax.swing.
RowSorter
Reverses the sort order of the specified column.
toGMTString()
- Method in class java.util.
Date
Deprecated.
As of JDK version 1.1,
 replaced by
DateFormat.format(Date date)
, using a
 GMT
TimeZone
.
toGregorianCalendar()
- Method in class javax.xml.datatype.
XMLGregorianCalendar
Convert this
XMLGregorianCalendar
to a
GregorianCalendar
.
toGregorianCalendar(TimeZone, Locale, XMLGregorianCalendar)
- Method in class javax.xml.datatype.
XMLGregorianCalendar
Convert this
XMLGregorianCalendar
along with provided parameters
 to a
GregorianCalendar
instance.
toHandle()
- Method in class java.lang.
Process
Returns a ProcessHandle for the Process.
toHexDigits(byte)
- Method in class java.util.
HexFormat
Returns the two hexadecimal characters for the
byte
value.
toHexDigits(char)
- Method in class java.util.
HexFormat
Returns the four hexadecimal characters for the
char
value.
toHexDigits(int)
- Method in class java.util.
HexFormat
Returns the eight hexadecimal characters for the
int
value.
toHexDigits(long)
- Method in class java.util.
HexFormat
Returns the sixteen hexadecimal characters for the
long
value.
toHexDigits(long, int)
- Method in class java.util.
HexFormat
Returns up to sixteen hexadecimal characters for the
long
value.
toHexDigits(short)
- Method in class java.util.
HexFormat
Returns the four hexadecimal characters for the
short
value.
toHexDigits(A, byte)
- Method in class java.util.
HexFormat
Appends two hexadecimal characters for the byte value to the
Appendable
.
toHexString(double)
- Static method in class java.lang.
Double
Returns a hexadecimal string representation of the
double
argument.
toHexString(float)
- Static method in class java.lang.
Float
Returns a hexadecimal string representation of the
float
argument.
toHexString(int)
- Static method in class java.lang.
Integer
Returns a string representation of the integer argument as an
 unsigned integer in base 16.
toHexString(long)
- Static method in class java.lang.
Long
Returns a string representation of the
long
argument as an unsigned integer in base 16.
toHighHexDigit(int)
- Method in class java.util.
HexFormat
Returns the hexadecimal character for the high 4 bits of the value considering it to be a byte.
toHours()
- Method in class java.time.
Duration
Gets the number of hours in this duration.
toHours(long)
- Method in enum class java.util.concurrent.
TimeUnit
Equivalent to
HOURS.convert(duration, this)
.
toHoursPart()
- Method in class java.time.
Duration
Extracts the number of hours part in the duration.
toIdentityString(Object)
- Static method in class java.util.
Objects
Returns a string equivalent to the string returned by
Object.toString
if that method and
hashCode
are not
 overridden.
toIndex
- Variable in class javax.swing.event.
TableColumnModelEvent
The index of the column to where it was moved or added
toInstant()
- Method in class java.nio.file.attribute.
FileTime
Converts this
FileTime
object to an
Instant
.
toInstant()
- Method in class java.sql.
Date
This method always throws an UnsupportedOperationException and should
 not be used because SQL
Date
values do not have a time
 component.
toInstant()
- Method in class java.sql.
Time
This method always throws an UnsupportedOperationException and should
 not be used because SQL
Time
values do not have a date
 component.
toInstant()
- Method in class java.sql.
Timestamp
Converts this
Timestamp
object to an
Instant
.
toInstant()
- Method in interface java.time.chrono.
ChronoZonedDateTime
Converts this date-time to an
Instant
.
toInstant()
- Method in class java.time.
OffsetDateTime
Converts this date-time to an
Instant
.
toInstant()
- Method in class java.util.
Calendar
Converts this object to an
Instant
.
toInstant()
- Method in class java.util.
Date
Converts this
Date
object to an
Instant
.
toInstant(ZoneOffset)
- Method in interface java.time.chrono.
ChronoLocalDateTime
Converts this date-time to an
Instant
.
toIntArray()
- Method in class jdk.incubator.vector.
ByteVector
Returns an
int[]
array containing all
 the lane values, converted to the type
int
.
toIntArray()
- Method in class jdk.incubator.vector.
DoubleVector
Returns an
int[]
array containing all
 the lane values, converted to the type
int
.
toIntArray()
- Method in class jdk.incubator.vector.
FloatVector
Returns an
int[]
array containing all
 the lane values, converted to the type
int
.
toIntArray()
- Method in class jdk.incubator.vector.
IntVector
Returns an
int[]
array containing all
 the lane values, converted to the type
int
.
toIntArray()
- Method in class jdk.incubator.vector.
LongVector
Returns an
int[]
array containing all
 the lane values, converted to the type
int
.
toIntArray()
- Method in class jdk.incubator.vector.
ShortVector
Returns an
int[]
array containing all
 the lane values, converted to the type
int
.
toIntArray()
- Method in class jdk.incubator.vector.
Vector
Returns an
int[]
array containing all
 the lane values, converted to the type
int
.
ToIntBiFunction<T,
U>
- Interface in
java.util.function
Represents a function that accepts two arguments and produces an int-valued
 result.
toIntExact(long)
- Static method in class java.lang.
Math
Returns the value of the
long
argument,
 throwing an exception if the value overflows an
int
.
toIntExact(long)
- Static method in class java.lang.
StrictMath
Returns the value of the
long
argument, throwing an exception
 if the value overflows an
int
.
ToIntFunction<T>
- Interface in
java.util.function
Represents a function that produces an int-valued result.
toJMXConnector(Map<String, ?>)
- Method in class javax.management.remote.
JMXConnectorServer
Returns a client stub for this connector server.
toJMXConnector(Map<String, ?>)
- Method in interface javax.management.remote.
JMXConnectorServerMBean
Returns a client stub for this connector server.
toJMXConnector(Map<String, ?>)
- Method in class javax.management.remote.rmi.
RMIConnectorServer
Returns a client stub for this connector server.
tokens()
- Method in class java.util.
Scanner
Returns a stream of delimiter-separated tokens from this scanner.
toLanguageTag()
- Method in class java.util.
Locale
Returns a well-formed IETF BCP 47 language tag representing
 this locale.
TOLEFT_TOBOTTOM
- Static variable in class javax.print.attribute.standard.
PresentationDirection
Pages are laid out in rows starting at the top right, proceeding towards
 the left & bottom.
TOLEFT_TOTOP
- Static variable in class javax.print.attribute.standard.
PresentationDirection
Pages are laid out in rows starting at the bottom right, proceeding
 towards the left & top.
toList()
- Static method in class java.util.stream.
Collectors
Returns a
Collector
that accumulates the input elements into a
 new
List
.
toList()
- Method in interface java.util.stream.
Stream
Accumulates the elements of this stream into a
List
.
toLocalDate()
- Method in class java.sql.
Date
Creates a
LocalDate
instance using the year, month and day
 from this
Date
object.
toLocalDate()
- Method in interface java.time.chrono.
ChronoLocalDateTime
Gets the local date part of this date-time.
toLocalDate()
- Method in interface java.time.chrono.
ChronoZonedDateTime
Gets the local date part of this date-time.
toLocalDate()
- Method in class java.time.
LocalDateTime
Gets the
LocalDate
part of this date-time.
toLocalDate()
- Method in class java.time.
OffsetDateTime
Gets the
LocalDate
part of this date-time.
toLocalDate()
- Method in class java.time.
ZonedDateTime
Gets the
LocalDate
part of this date-time.
toLocalDateTime()
- Method in class java.sql.
Timestamp
Converts this
Timestamp
object to a
LocalDateTime
.
toLocalDateTime()
- Method in interface java.time.chrono.
ChronoZonedDateTime
Gets the local date-time part of this date-time.
toLocalDateTime()
- Method in class java.time.
OffsetDateTime
Gets the
LocalDateTime
part of this date-time.
toLocalDateTime()
- Method in class java.time.
ZonedDateTime
Gets the
LocalDateTime
part of this date-time.
toLocaleString()
- Method in class java.util.
Date
Deprecated.
As of JDK version 1.1,
 replaced by
DateFormat.format(Date date)
.
toLocalizedPattern()
- Method in class java.text.
DecimalFormat
Synthesizes a localized pattern string that represents the current
 state of this Format object.
toLocalizedPattern()
- Method in class java.text.
SimpleDateFormat
Returns a localized pattern string describing this date format.
toLocalTime()
- Method in class java.sql.
Time
Converts this
Time
object to a
LocalTime
.
toLocalTime()
- Method in interface java.time.chrono.
ChronoLocalDateTime
Gets the local time part of this date-time.
toLocalTime()
- Method in interface java.time.chrono.
ChronoZonedDateTime
Gets the local time part of this date-time.
toLocalTime()
- Method in class java.time.
LocalDateTime
Gets the
LocalTime
part of this date-time.
toLocalTime()
- Method in class java.time.
OffsetDateTime
Gets the
LocalTime
part of this date-time.
toLocalTime()
- Method in class java.time.
OffsetTime
Gets the
LocalTime
part of this date-time.
toLocalTime()
- Method in class java.time.
ZonedDateTime
Gets the
LocalTime
part of this date-time.
toLong()
- Method in class jdk.incubator.vector.
VectorMask
Returns the lane elements of this mask packed into a
long
value for at most the first 64 lane elements.
toLongArray()
- Method in class java.util.
BitSet
Returns a new long array containing all the bits in this bit set.
toLongArray()
- Method in class jdk.incubator.vector.
ByteVector
Returns a
long[]
array containing all
 the lane values, converted to the type
long
.
toLongArray()
- Method in class jdk.incubator.vector.
DoubleVector
Returns a
long[]
array containing all
 the lane values, converted to the type
long
.
toLongArray()
- Method in class jdk.incubator.vector.
FloatVector
Returns a
long[]
array containing all
 the lane values, converted to the type
long
.
toLongArray()
- Method in class jdk.incubator.vector.
IntVector
Returns a
long[]
array containing all
 the lane values, converted to the type
long
.
toLongArray()
- Method in class jdk.incubator.vector.
LongVector
Returns a
long[]
array containing all
 the lane values, converted to the type
long
.
toLongArray()
- Method in class jdk.incubator.vector.
ShortVector
Returns a
long[]
array containing all
 the lane values, converted to the type
long
.
toLongArray()
- Method in class jdk.incubator.vector.
Vector
Returns a
long[]
array containing all
 the lane values, converted to the type
long
.
ToLongBiFunction<T,
U>
- Interface in
java.util.function
Represents a function that accepts two arguments and produces a long-valued
 result.
ToLongFunction<T>
- Interface in
java.util.function
Represents a function that produces a long-valued result.
toLowerCase()
- Method in class java.lang.
String
Converts all of the characters in this
String
to lower
 case using the rules of the default locale.
toLowerCase(char)
- Static method in class java.lang.
Character
Converts the character argument to lowercase using case
 mapping information from the UnicodeData file.
toLowerCase(int)
- Static method in class java.lang.
Character
Converts the character (Unicode code point) argument to
 lowercase using case mapping information from the UnicodeData
 file.
toLowerCase(Locale)
- Method in class java.lang.
String
Converts all of the characters in this
String
to lower
 case using the rules of the given
Locale
.
toLowHexDigit(int)
- Method in class java.util.
HexFormat
Returns the hexadecimal character for the low 4 bits of the value considering it to be a byte.
toMap(Function<? super T, ? extends K>, Function<? super T, ? extends U>)
- Static method in class java.util.stream.
Collectors
Returns a
Collector
that accumulates elements into a
Map
whose keys and values are the result of applying the provided
 mapping functions to the input elements.
toMap(Function<? super T, ? extends K>, Function<? super T, ? extends U>, BinaryOperator<U>)
- Static method in class java.util.stream.
Collectors
Returns a
Collector
that accumulates elements into a
Map
whose keys and values are the result of applying the provided
 mapping functions to the input elements.
toMap(Function<? super T, ? extends K>, Function<? super T, ? extends U>, BinaryOperator<U>, Supplier<M>)
- Static method in class java.util.stream.
Collectors
Returns a
Collector
that accumulates elements into a
Map
whose keys and values are the result of applying the provided
 mapping functions to the input elements.
toMatchResult()
- Method in class java.util.regex.
Matcher
Returns the match state of this matcher as a
MatchResult
.
toMethodDescriptorString()
- Method in class java.lang.invoke.
MethodType
Returns the descriptor string for this method type.
toMethodHandle(VarHandle.AccessMode)
- Method in class java.lang.invoke.
VarHandle
Obtains a method handle bound to this VarHandle and the given access
 mode.
toMethodType()
- Method in interface java.lang.foreign.
FunctionDescriptor
PREVIEW
Returns the method type consisting of the carrier types of the layouts in this function descriptor.
toMicros(long)
- Method in enum class java.util.concurrent.
TimeUnit
Equivalent to
MICROSECONDS.convert(duration, this)
.
toMillis()
- Method in class java.nio.file.attribute.
FileTime
Returns the value in milliseconds.
toMillis()
- Method in class java.time.
Duration
Converts this duration to the total length in milliseconds.
toMillis(long)
- Method in enum class java.util.concurrent.
TimeUnit
Equivalent to
MILLISECONDS.convert(duration, this)
.
toMillisPart()
- Method in class java.time.
Duration
Extracts the number of milliseconds part of the duration.
toMinutes()
- Method in class java.time.
Duration
Gets the number of minutes in this duration.
toMinutes(long)
- Method in enum class java.util.concurrent.
TimeUnit
Equivalent to
MINUTES.convert(duration, this)
.
toMinutesPart()
- Method in class java.time.
Duration
Extracts the number of minutes part in the duration.
toNameAndVersion()
- Method in class java.lang.module.
ModuleDescriptor
Returns a string containing the module name and, if present, its
 version.
toNanoOfDay()
- Method in class java.time.
LocalTime
Extracts the time as nanos of day,
 from
0
to
24 * 60 * 60 * 1,000,000,000 - 1
.
toNanos()
- Method in class java.time.
Duration
Converts this duration to the total length in nanoseconds expressed as a
long
.
toNanos(long)
- Method in enum class java.util.concurrent.
TimeUnit
Equivalent to
NANOSECONDS.convert(duration, this)
.
toNanosPart()
- Method in class java.time.
Duration
Get the nanoseconds part within seconds of the duration.
TONER_EMPTY
- Static variable in class javax.print.attribute.standard.
PrinterStateReason
The device is out of toner.
TONER_LOW
- Static variable in class javax.print.attribute.standard.
PrinterStateReason
The device is low on toner.
toOctalString(int)
- Static method in class java.lang.
Integer
Returns a string representation of the integer argument as an
 unsigned integer in base 8.
toOctalString(long)
- Static method in class java.lang.
Long
Returns a string representation of the
long
argument as an unsigned integer in base 8.
toOffsetDateTime()
- Method in class java.time.
ZonedDateTime
Converts this date-time to an
OffsetDateTime
.
toOffsetTime()
- Method in class java.time.
OffsetDateTime
Converts this date-time to an
OffsetTime
.
Tool
- Interface in
javax.tools
Common interface for tools that can be invoked from a program.
TOOL_BAR
- Static variable in class javax.accessibility.
AccessibleRole
A bar or palette usually composed of push buttons or toggle buttons.
TOOL_BAR
- Static variable in class javax.swing.plaf.synth.
Region
ToolBar region.
TOOL_BAR_CONTENT
- Static variable in class javax.swing.plaf.synth.
Region
Region of the ToolBar containing the content.
TOOL_BAR_DRAG_WINDOW
- Static variable in class javax.swing.plaf.synth.
Region
Region for the Window containing the ToolBar.
TOOL_BAR_SEPARATOR
- Static variable in class javax.swing.plaf.synth.
Region
ToolBar separator region.
TOOL_TIP
- Static variable in class javax.accessibility.
AccessibleRole
An object that provides information about another object.
TOOL_TIP
- Static variable in class javax.swing.plaf.synth.
Region
ToolTip region.
TOOL_TIP_TEXT_KEY
- Static variable in class javax.swing.
JComponent
The comment to display when the cursor is over the component,
 also known as a "value tip", "flyover help", or "flyover label".
toolBar
- Variable in class javax.swing.plaf.basic.
BasicToolBarUI.DockingListener
The instance of
JToolBar
.
toolBar
- Variable in class javax.swing.plaf.basic.
BasicToolBarUI
The instance of
JToolBar
.
ToolBarBorder()
- Constructor for class javax.swing.plaf.metal.
MetalBorders.ToolBarBorder
Constructs a
ToolBarBorder
.
toolBarContListener
- Variable in class javax.swing.plaf.basic.
BasicToolBarUI
The instance of a
ContainerListener
.
ToolBarContListener()
- Constructor for class javax.swing.plaf.basic.
BasicToolBarUI.ToolBarContListener
Constructs a
ToolBarContListener
.
toolBarFocusListener
- Variable in class javax.swing.plaf.basic.
BasicToolBarUI
The instance of a
FocusListener
.
ToolBarFocusListener()
- Constructor for class javax.swing.plaf.basic.
BasicToolBarUI.ToolBarFocusListener
Constructs a
ToolBarFocusListener
.
ToolBarUI
- Class in
javax.swing.plaf
Pluggable look and feel interface for JToolBar.
ToolBarUI()
- Constructor for class javax.swing.plaf.
ToolBarUI
Constructor for subclasses to call.
Toolkit
- Class in
java.awt
This class is the abstract superclass of all actual
 implementations of the Abstract Window Toolkit.
Toolkit()
- Constructor for class java.awt.
Toolkit
Constructs a
Toolkit
.
TOOLKIT_EXCLUDE
- Enum constant in enum class java.awt.
Dialog.ModalExclusionType
TOOLKIT_EXCLUDE
indicates that a top-level window
 won't be blocked by  application-modal or toolkit-modal dialogs.
TOOLKIT_MODAL
- Enum constant in enum class java.awt.
Dialog.ModalityType
A
TOOLKIT_MODAL
dialog blocks all top-level windows run
 from the same toolkit except those from its own child hierarchy.
ToolProvider
- Class in
javax.tools
Provides methods for locating tool providers, for example,
 providers of compilers.
ToolProvider
- Interface in
java.util.spi
An interface for command-line tools to provide a way to
 be invoked without necessarily starting a new VM.
ToolTipManager
- Class in
javax.swing
Manages all the
ToolTips
in the system.
ToolTipManager.insideTimerAction
- Class in
javax.swing
Inside timer action.
ToolTipManager.outsideTimerAction
- Class in
javax.swing
Outside timer action.
ToolTipManager.stillInsideTimerAction
- Class in
javax.swing
Still inside timer action.
ToolTipUI
- Class in
javax.swing.plaf
Pluggable look and feel interface for JToolTip.
ToolTipUI()
- Constructor for class javax.swing.plaf.
ToolTipUI
Constructor for subclasses to call.
TooManyListenersException
- Exception Class in
java.util
The
TooManyListenersException
Exception is used as part of
 the Java Event model to annotate and implement a unicast special case of
 a multicast Event Source.
TooManyListenersException()
- Constructor for exception class java.util.
TooManyListenersException
Constructs a TooManyListenersException with no detail message.
TooManyListenersException(String)
- Constructor for exception class java.util.
TooManyListenersException
Constructs a TooManyListenersException with the specified detail message.
top
- Variable in class java.awt.
Insets
The inset from the top.
top
- Variable in class javax.swing.border.
EmptyBorder
The top inset of the border.
TOP
- Static variable in class javax.print.attribute.standard.
MediaTray
The top input tray in the printer.
TOP
- Static variable in class javax.swing.border.
TitledBorder
Position the title in the middle of the border's top line.
TOP
- Static variable in class javax.swing.
JSplitPane
Used to add a
Component
above the other
Component
.
TOP
- Static variable in interface javax.swing.
SwingConstants
Box-orientation constant used to specify the top of a box.
TOP_ALIGNMENT
- Static variable in class java.awt.
Component
Ease-of-use constant for
getAlignmentY()
.
TOP_ALIGNMENT
- Static variable in class java.awt.font.
GraphicAttribute
Aligns top of graphic to top of line.
TOP_LEVEL
- Enum constant in enum class javax.lang.model.element.
NestingKind
A top-level class or interface, not contained within another
 class or interface.
toPath()
- Method in class java.io.
File
Returns a
java.nio.file.Path
object constructed from
 this abstract path.
toPattern()
- Method in class java.text.
ChoiceFormat
Gets the pattern.
toPattern()
- Method in class java.text.
DecimalFormat
Synthesizes a pattern string that represents the current state
 of this Format object.
toPattern()
- Method in class java.text.
MessageFormat
Returns a pattern representing the current state of the message format.
toPattern()
- Method in class java.text.
SimpleDateFormat
Returns a pattern string describing this date format.
TOPDOWNLEFTRIGHT
- Static variable in interface java.awt.image.
ImageConsumer
The pixels will be delivered in top-down, left-to-right order.
toPlainString()
- Method in class java.math.
BigDecimal
Returns a string representation of this
BigDecimal
without an exponent field.
topLevelThreadGroups()
- Method in interface com.sun.jdi.
VirtualMachine
Returns each thread group which does not have a parent.
topLevelWindowCreated(Window)
- Method in interface com.sun.java.accessibility.util.
TopLevelWindowListener
Invoked when a new top level window has been created.
topLevelWindowDestroyed(Window)
- Method in interface com.sun.java.accessibility.util.
TopLevelWindowListener
Invoked when a top level window has been destroyed.
TopLevelWindowListener
- Interface in
com.sun.java.accessibility.util
The
TopLevelWindowListener
interface is used by the
EventQueueMonitor
class to notify an interested party when a top level window is created
 or destroyed in the Java Virtual Machine.
toRadians(double)
- Static method in class java.lang.
Math
Converts an angle measured in degrees to an approximately
 equivalent angle measured in radians.
toRadians(double)
- Static method in class java.lang.
StrictMath
Converts an angle measured in degrees to an approximately
 equivalent angle measured in radians.
toRealPath(LinkOption...)
- Method in interface java.nio.file.
Path
Returns the
real
path of an existing file.
toResourceName(String, String)
- Method in class java.util.
ResourceBundle.Control
Converts the given
bundleName
to the form required
 by the
ClassLoader.getResource
method by replacing all occurrences of
'.'
in
bundleName
with
'/'
and appending a
'.'
and the given file
suffix
.
toRGB(float[])
- Method in class java.awt.color.
ColorSpace
Transforms a color value assumed to be in this
ColorSpace
into a
 value in the default
CS_sRGB
color space.
toRGB(float[])
- Method in class java.awt.color.
ICC_ColorSpace
Transforms a color value assumed to be in this
ColorSpace
into a
 value in the default
CS_sRGB
color space.
TORIGHT_TOBOTTOM
- Static variable in class javax.print.attribute.standard.
PresentationDirection
Pages are laid out in rows starting at the top left, proceeding towards
 the right & bottom.
TORIGHT_TOTOP
- Static variable in class javax.print.attribute.standard.
PresentationDirection
Pages are laid out in rows starting at the bottom left, proceeding
 towards the right & top.
toSecondOfDay()
- Method in class java.time.
LocalTime
Extracts the time as seconds of day,
 from
0
to
24 * 60 * 60 - 1
.
toSeconds()
- Method in class java.time.
Duration
Gets the number of seconds in this duration.
toSeconds(long)
- Method in enum class java.util.concurrent.
TimeUnit
Equivalent to
SECONDS.convert(duration, this)
.
toSecondsPart()
- Method in class java.time.
Duration
Extracts the number of seconds part in the duration.
toSet()
- Static method in class java.util.stream.
Collectors
Returns a
Collector
that accumulates the input elements into a
 new
Set
.
toShuffle()
- Method in class jdk.incubator.vector.
Vector
Converts this vector into a shuffle, converting the lane values
 to
int
and regarding them as source indexes.
toStackTraceElement()
- Method in interface java.lang.
StackWalker.StackFrame
Gets a
StackTraceElement
for this stack frame.
toString()
- Method in class com.sun.java.accessibility.util.
AccessibilityListenerList
Return a string representation of the
AccessibilityListenerList
.
toString()
- Method in interface com.sun.jdi.
Mirror
Returns a String describing this mirror
toString()
- Method in class com.sun.management.
GcInfo
toString()
- Method in class com.sun.net.httpserver.
HttpPrincipal
Returns the same string as
HttpPrincipal.getName()
.
toString()
- Method in class com.sun.nio.sctp.
SctpStandardSocketOptions.InitMaxStreams
Returns a string representation of this init max streams, including
 the maximum in and out bound streams.
toString()
- Method in class com.sun.security.auth.
LdapPrincipal
Creates a string representation of this principal's name in the format
 defined by
RFC 2253
.
toString()
- Method in class com.sun.security.auth.
NTDomainPrincipal
Return a string representation of this
NTDomainPrincipal
.
toString()
- Method in class com.sun.security.auth.
NTNumericCredential
Return a string representation of this
NTNumericCredential
.
toString()
- Method in class com.sun.security.auth.
NTSid
Return a string representation of this
NTSid
.
toString()
- Method in class com.sun.security.auth.
NTSidDomainPrincipal
Return a string representation of this
NTSidDomainPrincipal
.
toString()
- Method in class com.sun.security.auth.
NTSidGroupPrincipal
Return a string representation of this
NTSidGroupPrincipal
.
toString()
- Method in class com.sun.security.auth.
NTSidPrimaryGroupPrincipal
Return a string representation of this
NTSidPrimaryGroupPrincipal
.
toString()
- Method in class com.sun.security.auth.
NTSidUserPrincipal
Return a string representation of this
NTSidUserPrincipal
.
toString()
- Method in class com.sun.security.auth.
NTUserPrincipal
Return a string representation of this
NTPrincipal
.
toString()
- Method in class com.sun.security.auth.
UnixNumericGroupPrincipal
Return a string representation of this
UnixNumericGroupPrincipal
.
toString()
- Method in class com.sun.security.auth.
UnixNumericUserPrincipal
Return a string representation of this
UnixNumericUserPrincipal
.
toString()
- Method in class com.sun.security.auth.
UnixPrincipal
Return a string representation of this
UnixPrincipal
.
toString()
- Method in class com.sun.security.auth.
UserPrincipal
Returns a string representation of this principal.
toString()
- Method in class com.sun.tools.attach.
VirtualMachine
Returns the string representation of the
VirtualMachine
.
toString()
- Method in class com.sun.tools.attach.
VirtualMachineDescriptor
Returns the string representation of the
VirtualMachineDescriptor
.
toString()
- Method in class java.awt.
BufferCapabilities.FlipContents
toString()
- Method in class java.awt.
JobAttributes.DefaultSelectionType
toString()
- Method in class java.awt.
JobAttributes.DestinationType
toString()
- Method in class java.awt.
JobAttributes.DialogType
toString()
- Method in class java.awt.
JobAttributes.MultipleDocumentHandlingType
toString()
- Method in class java.awt.
JobAttributes.SidesType
toString()
- Method in class java.awt.
PageAttributes.ColorType
toString()
- Method in class java.awt.
PageAttributes.MediaType
toString()
- Method in class java.awt.
PageAttributes.OrientationRequestedType
toString()
- Method in class java.awt.
PageAttributes.OriginType
toString()
- Method in class java.awt.
PageAttributes.PrintQualityType
toString()
- Method in class java.awt.
AWTEvent
Returns a String representation of this object.
toString()
- Method in class java.awt.
AWTKeyStroke
Returns a string that displays and identifies this object's properties.
toString()
- Method in class java.awt.
BorderLayout
Returns a string representation of the state of this border layout.
toString()
- Method in class java.awt.
CardLayout
Returns a string representation of the state of this card layout.
toString()
- Method in class java.awt.
CheckboxGroup
Returns a string representation of this check box group,
 including the value of its current selection.
toString()
- Method in class java.awt.
Color
Returns a string representation of this
Color
.
toString()
- Method in class java.awt.
Component
Returns a string representation of this component and its values.
toString()
- Method in class java.awt.
Cursor
Returns a string representation of this cursor.
toString()
- Method in class java.awt.datatransfer.
DataFlavor
String representation of this
DataFlavor
and its parameters.
toString()
- Method in class java.awt.
Dimension
Returns a string representation of the values of this
Dimension
object's
height
and
width
fields.
toString()
- Method in class java.awt.
Event
Deprecated.
NOTE:
The
Event
class is obsolete and is
 available only for backwards compatibility.
toString()
- Method in class java.awt.
FlowLayout
Returns a string representation of this
FlowLayout
object and its values.
toString()
- Method in class java.awt.font.
NumericShaper
Returns a
String
that describes this shaper.
toString()
- Method in class java.awt.font.
TextHitInfo
Returns a
String
representing the hit for debugging
 use only.
toString()
- Method in class java.awt.font.
TextLayout
Returns debugging information for this
TextLayout
.
toString()
- Method in class java.awt.
Font
Converts this
Font
object to a
String
representation.
toString()
- Method in class java.awt.
FontMetrics
Returns a representation of this
FontMetrics
object's values as a
String
.
toString()
- Method in class java.awt.geom.
AffineTransform
Returns a
String
that represents the value of this
Object
.
toString()
- Method in class java.awt.geom.
Point2D.Double
Returns a
String
that represents the value
 of this
Point2D
.
toString()
- Method in class java.awt.geom.
Point2D.Float
Returns a
String
that represents the value
 of this
Point2D
.
toString()
- Method in class java.awt.geom.
Rectangle2D.Double
Returns the
String
representation of this
Rectangle2D
.
toString()
- Method in class java.awt.geom.
Rectangle2D.Float
Returns the
String
representation of this
Rectangle2D
.
toString()
- Method in class java.awt.
Graphics
Returns a
String
object representing this
Graphics
object's value.
toString()
- Method in class java.awt.
GridBagLayout
Returns a string representation of this grid bag layout's values.
toString()
- Method in class java.awt.
GridLayout
Returns the string representation of this grid layout's values.
toString()
- Method in class java.awt.image.
BufferedImage
Returns a
String
representation of this
BufferedImage
object and its values.
toString()
- Method in class java.awt.image.
ColorModel
Returns the
String
representation of the contents of
 this
ColorModel
object.
toString()
- Method in class java.awt.image.
DirectColorModel
Returns a
String
that represents this
DirectColorModel
.
toString()
- Method in class java.awt.image.
IndexColorModel
Returns the
String
representation of the contents of
 this
ColorModel
object.
toString()
- Method in class java.awt.
Insets
Returns a string representation of this
Insets
object.
toString()
- Method in class java.awt.
JobAttributes
Returns a string representation of this JobAttributes.
toString()
- Method in class java.awt.
MenuComponent
Returns a representation of this menu component as a string.
toString()
- Method in class java.awt.
MenuShortcut
Returns an internationalized description of the MenuShortcut.
toString()
- Method in class java.awt.
PageAttributes
Returns a string representation of this PageAttributes.
toString()
- Method in class java.awt.
Point
Returns a string representation of this point and its location
 in the
(x,y)
coordinate space.
toString()
- Method in class java.awt.
Rectangle
Returns a
String
representing this
Rectangle
and its values.
toString()
- Method in class java.awt.
RenderingHints
Returns a rather long string representation of the hashmap
 which contains the mappings of keys to values for this
RenderingHints
object.
toString()
- Method in class java.awt.
Robot
Returns a string representation of this Robot.
toString()
- Method in class java.awt.
ScrollPaneAdjustable
Returns a string representation of this scrollbar and its values.
toString()
- Method in class java.awt.
SystemColor
Returns a string representation of this
Color
's values.
toString()
- Method in class java.beans.
Expression
Prints the value of this expression using a Java-style syntax.
toString()
- Method in class java.beans.
FeatureDescriptor
Returns a string representation of the object.
toString()
- Method in class java.beans.
PropertyChangeEvent
Returns a string representation of the object.
toString()
- Method in class java.beans.
Statement
Prints the value of this statement using a Java-style syntax.
toString()
- Method in class java.io.
ByteArrayOutputStream
Converts the buffer's contents into a string decoding bytes using the
 default charset.
toString()
- Method in class java.io.
CharArrayWriter
Converts input data to a string.
toString()
- Method in class java.io.
File
Returns the pathname string of this abstract pathname.
toString()
- Method in class java.io.
ObjectStreamClass
Return a string describing this ObjectStreamClass.
toString()
- Method in class java.io.
ObjectStreamField
Return a string that describes this field.
toString()
- Method in class java.io.
StreamTokenizer
Returns the string representation of the current stream token and
 the line number it occurs on.
toString()
- Method in class java.io.
StringWriter
Return the buffer's current value as a string.
toString()
- Method in interface java.lang.annotation.
Annotation
Returns a string representation of this annotation.
toString()
- Method in class java.lang.
Boolean
Returns a
String
object representing this Boolean's
 value.
toString()
- Method in class java.lang.
Byte
Returns a
String
object representing this
Byte
's value.
toString()
- Method in class java.lang.
Character.Subset
Returns the name of this subset.
toString()
- Method in class java.lang.
Character
Returns a
String
object representing this
Character
's value.
toString()
- Method in interface java.lang.
CharSequence
Returns a string containing the characters in this sequence in the same
 order as this sequence.
toString()
- Method in class java.lang.
Class
Converts the object to a string.
toString()
- Method in class java.lang.constant.
DynamicCallSiteDesc
Returns a compact textual description of this call site description,
 including the bootstrap method, the invocation name and type, and
 the static bootstrap arguments.
toString()
- Method in class java.lang.constant.
DynamicConstantDesc
Returns a compact textual description of this constant description,
 including the bootstrap method, the constant name and type, and
 the static bootstrap arguments.
toString()
- Method in class java.lang.
Double
Returns a string representation of this
Double
object.
toString()
- Method in class java.lang.
Enum
Returns the name of this enum constant, as contained in the
 declaration.
toString()
- Method in class java.lang.
Float
Returns a string representation of this
Float
object.
toString()
- Method in interface java.lang.foreign.
MemoryLayout
PREVIEW
Returns the string representation of this layout.
toString()
- Method in class java.lang.
Integer
Returns a
String
object representing this
Integer
's value.
toString()
- Method in class java.lang.invoke.
MethodHandle
Returns a string representation of the method handle,
 starting with the string
"MethodHandle"
and
 ending with the string representation of the method handle's type.
toString()
- Method in class java.lang.invoke.
MethodHandles.Lookup
Displays the name of the class from which lookups are to be made,
 followed by "/" and the name of the
previous lookup class
if present.
toString()
- Method in class java.lang.invoke.
MethodType
Returns a string representation of the method type,
 of the form
"(PT0,PT1...)RT"
.
toString()
- Method in class java.lang.invoke.
VarHandle
Returns a compact textual description of this
VarHandle
,
 including the type of variable described, and a description of its coordinates.
toString()
- Method in class java.lang.invoke.
VarHandle.VarHandleDesc
Returns a compact textual description of this constant description.
toString()
- Method in class java.lang.
Long
Returns a
String
object representing this
Long
's value.
toString()
- Method in class java.lang.management.
LockInfo
Returns a string representation of a lock.
toString()
- Method in enum class java.lang.management.
MemoryType
Returns the string representation of this
MemoryType
.
toString()
- Method in class java.lang.management.
MemoryUsage
Returns a descriptive representation of this memory usage.
toString()
- Method in class java.lang.management.
ThreadInfo
Returns a string representation of this thread info.
toString()
- Method in class java.lang.module.
Configuration
Returns a string describing this configuration.
toString()
- Method in class java.lang.module.
ModuleDescriptor.Exports
Returns a string describing the exported package.
toString()
- Method in class java.lang.module.
ModuleDescriptor.Opens
Returns a string describing the open package.
toString()
- Method in class java.lang.module.
ModuleDescriptor.Provides
Returns a string describing this
Provides
.
toString()
- Method in class java.lang.module.
ModuleDescriptor.Requires
Returns a string describing this module dependence.
toString()
- Method in class java.lang.module.
ModuleDescriptor
Returns a string describing the module.
toString()
- Method in class java.lang.module.
ModuleDescriptor.Version
Returns the string from which this version was parsed.
toString()
- Method in class java.lang.module.
ResolvedModule
Returns a string describing this resolved module.
toString()
- Method in class java.lang.
Module
Returns the string representation of this module.
toString()
- Method in class java.lang.
ModuleLayer
Returns a string describing this module layer.
toString()
- Method in class java.lang.
Object
Returns a string representation of the object.
toString()
- Method in class java.lang.
Package
Returns the string representation of this Package.
toString()
- Method in class java.lang.
Record
Returns a string representation of the record.
toString()
- Method in class java.lang.reflect.
Constructor
Returns a string describing this
Constructor
.
toString()
- Method in class java.lang.reflect.
Field
Returns a string describing this
Field
.
toString()
- Method in class java.lang.reflect.
Method
Returns a string describing this
Method
.
toString()
- Method in class java.lang.reflect.
Parameter
Returns a string describing this parameter.
toString()
- Method in class java.lang.reflect.
RecordComponent
Returns a string describing this record component.
toString()
- Method in class java.lang.
Runtime.Version
Returns a string representation of this version.
toString()
- Method in class java.lang.
Short
Returns a
String
object representing this
Short
's value.
toString()
- Method in class java.lang.
StackTraceElement
Returns a string representation of this stack trace element.
toString()
- Method in class java.lang.
String
This object (which is already a string!)
toString()
- Method in class java.lang.
StringBuffer
toString()
- Method in class java.lang.
StringBuilder
toString()
- Method in class java.lang.
Thread
Returns a string representation of this thread.
toString()
- Method in class java.lang.
ThreadGroup
Returns a string representation of this Thread group.
toString()
- Method in exception class java.lang.
Throwable
Returns a short description of this throwable.
toString()
- Method in class java.math.
BigDecimal
Returns the string representation of this
BigDecimal
,
 using scientific notation if an exponent is needed.
toString()
- Method in class java.math.
BigInteger
Returns the decimal String representation of this BigInteger.
toString()
- Method in class java.math.
MathContext
Returns the string representation of this
MathContext
.
toString()
- Method in class java.net.http.
HttpHeaders
Returns this HTTP headers as a string.
toString()
- Method in class java.net.
HttpCookie
Constructs a cookie header string representation of this cookie,
 which is in the format defined by corresponding cookie specification,
 but without the leading "Cookie:" token.
toString()
- Method in class java.net.
InetAddress
Converts this IP address to a
String
.
toString()
- Method in class java.net.
InetSocketAddress
Constructs a string representation of this InetSocketAddress.
toString()
- Method in class java.net.
InterfaceAddress
Converts this Interface address to a
String
.
toString()
- Method in class java.net.
Proxy
Constructs a string representation of this Proxy.
toString()
- Method in class java.net.
ServerSocket
Returns the implementation address and implementation port of
 this socket as a
String
.
toString()
- Method in class java.net.
Socket
Converts this socket to a
String
.
toString()
- Method in class java.net.
SocketImpl
Returns the address and port of this socket as a
String
.
toString()
- Method in class java.net.
UnixDomainSocketAddress
Returns a string representation of this
UnixDomainSocketAddress
.
toString()
- Method in class java.net.
URI
Returns the content of this URI as a string.
toString()
- Method in class java.net.
URL
Constructs a string representation of this
URL
.
toString()
- Method in class java.net.
URLConnection
Returns a
String
representation of this URL connection.
toString()
- Method in class java.nio.
ByteBuffer
Returns a string summarizing the state of this buffer.
toString()
- Method in class java.nio.
ByteOrder
Constructs a string describing this object.
toString()
- Method in class java.nio.channels.
FileChannel.MapMode
Returns a string describing this file-mapping mode.
toString()
- Method in class java.nio.channels.
FileLock
Returns a string describing the range, type, and validity of this lock.
toString()
- Method in class java.nio.
CharBuffer
Returns a string containing the characters in this buffer.
toString()
- Method in class java.nio.charset.
Charset
Returns a string describing this charset.
toString()
- Method in class java.nio.charset.
CoderResult
Returns a string describing this coder result.
toString()
- Method in class java.nio.charset.
CodingErrorAction
Returns a string describing this action.
toString()
- Method in class java.nio.
DoubleBuffer
Returns a string summarizing the state of this buffer.
toString()
- Method in class java.nio.file.attribute.
AclEntry
Returns the string representation of this ACL entry.
toString()
- Method in class java.nio.file.attribute.
FileTime
Returns the string representation of this
FileTime
.
toString()
- Method in interface java.nio.file.
Path
Returns the string representation of this path.
toString()
- Method in class java.nio.
FloatBuffer
Returns a string summarizing the state of this buffer.
toString()
- Method in class java.nio.
IntBuffer
Returns a string summarizing the state of this buffer.
toString()
- Method in class java.nio.
LongBuffer
Returns a string summarizing the state of this buffer.
toString()
- Method in class java.nio.
ShortBuffer
Returns a string summarizing the state of this buffer.
toString()
- Method in class java.rmi.dgc.
VMID
Return string representation of this VMID.
toString()
- Method in class java.rmi.server.
LogStream
Deprecated.
no replacement
toString()
- Method in class java.rmi.server.
ObjID
Returns a string representation of this object identifier.
toString()
- Method in class java.rmi.server.
Operation
Deprecated.
no replacement
toString()
- Method in class java.rmi.server.
RemoteObject
Returns a String that represents the value of this remote object.
toString()
- Method in class java.rmi.server.
UID
Returns a string representation of this
UID
.
toString()
- Method in class java.security.
AlgorithmParameters
Returns a formatted string describing the parameters.
toString()
- Method in class java.security.cert.
Certificate
Returns a string representation of this certificate.
toString()
- Method in class java.security.cert.
CertPath
Returns a string representation of this certification path.
toString()
- Method in class java.security.cert.
CollectionCertStoreParameters
Returns a formatted string describing the parameters.
toString()
- Method in class java.security.cert.
CRL
Returns a string representation of this CRL.
toString()
- Method in class java.security.cert.
LDAPCertStoreParameters
Returns a formatted string describing the parameters.
toString()
- Method in class java.security.cert.
PKIXBuilderParameters
Returns a formatted string describing the parameters.
toString()
- Method in class java.security.cert.
PKIXCertPathBuilderResult
Return a printable representation of this
PKIXCertPathBuilderResult
.
toString()
- Method in class java.security.cert.
PKIXCertPathValidatorResult
Return a printable representation of this
PKIXCertPathValidatorResult
.
toString()
- Method in class java.security.cert.
PKIXParameters
Returns a formatted string describing the parameters.
toString()
- Method in class java.security.cert.
PolicyQualifierInfo
Return a printable representation of this
PolicyQualifierInfo
.
toString()
- Method in class java.security.cert.
TrustAnchor
Returns a formatted string describing the
TrustAnchor
.
toString()
- Method in class java.security.cert.
URICertStoreParameters
Returns a formatted string describing the parameters
 including the URI used to construct this object.
toString()
- Method in class java.security.cert.
X509CertSelector
Return a printable representation of the
CertSelector
.
toString()
- Method in class java.security.cert.
X509CRLEntry
Returns a string representation of this CRL entry.
toString()
- Method in class java.security.cert.
X509CRLSelector
Returns a printable representation of the
X509CRLSelector
.
toString()
- Method in class java.security.
CodeSigner
Returns a string describing this code signer.
toString()
- Method in class java.security.
CodeSource
Returns a string describing this
CodeSource
, telling its
 URL and certificates.
toString()
- Method in class java.security.
DigestInputStream
Prints a string representation of this digest input stream and
 its associated message digest object.
toString()
- Method in class java.security.
DigestOutputStream
Prints a string representation of this digest output stream and
 its associated message digest object.
toString()
- Method in class java.security.
DrbgParameters.Instantiation
Returns a Human-readable string representation of this
Instantiation
.
toString()
- Method in class java.security.
Identity
Deprecated.
Returns a short string describing this
Identity
, telling its
 name and its scope (if any).
toString()
- Method in class java.security.
IdentityScope
Deprecated.
Returns a string representation of this identity scope, including
 its name, its scope name, and the number of identities in this
 identity scope.
toString()
- Method in class java.security.
KeyStore.PrivateKeyEntry
Returns a string representation of this PrivateKeyEntry.
toString()
- Method in class java.security.
KeyStore.SecretKeyEntry
Returns a string representation of this SecretKeyEntry.
toString()
- Method in class java.security.
KeyStore.TrustedCertificateEntry
Returns a string representation of this TrustedCertificateEntry.
toString()
- Method in class java.security.
MessageDigest
Returns a string representation of this message digest object.
toString()
- Method in class java.security.
Permission
Returns a string describing this
Permission
.
toString()
- Method in class java.security.
PermissionCollection
Returns a string describing this
PermissionCollection
object,
 providing information about all the permissions it contains.
toString()
- Method in class java.security.
PKCS12Attribute
Returns a string representation of this
PKCS12Attribute
.
toString()
- Method in interface java.security.
Principal
Returns a string representation of this
Principal
.
toString()
- Method in class java.security.
ProtectionDomain
Convert a
ProtectionDomain
to a
String
.
toString()
- Method in class java.security.
Provider.Service
Return a
String
representation of this service.
toString()
- Method in class java.security.
Provider
Returns a string with the name and the version string
 of this
Provider
.
toString()
- Method in class java.security.
SecureRandom
Returns a Human-readable string representation of this
SecureRandom
.
toString()
- Method in class java.security.
SecureRandomSpi
Returns a Human-readable string representation of this
SecureRandom
.
toString()
- Method in class java.security.
Signature
Returns a string representation of this
Signature
object,
 providing information that includes the state of the object
 and the name of the algorithm used.
toString()
- Method in class java.security.
Signer
Deprecated.
Returns a string of information about the
Signer
.
toString()
- Method in class java.security.
Timestamp
Returns a string describing this
Timestamp
.
toString()
- Method in class java.security.
UnresolvedPermission
Returns a string describing this
UnresolvedPermission
.
toString()
- Method in class java.sql.
Date
Formats a date in the date escape format yyyy-mm-dd.
toString()
- Method in interface java.sql.
RowId
Returns a String representing the value of the SQL ROWID designated by this
java.sql.RowId
object.
toString()
- Method in class java.sql.
Time
Formats a time in JDBC time escape format.
toString()
- Method in class java.sql.
Timestamp
Formats a timestamp in JDBC timestamp escape format.
toString()
- Method in class java.text.
Annotation
Returns the String representation of this Annotation.
toString()
- Method in class java.text.
AttributedCharacterIterator.Attribute
Returns a string representation of the object.
toString()
- Method in class java.text.
Bidi
Display the bidi internal state, used in debugging.
toString()
- Method in class java.text.
FieldPosition
Return a string representation of this FieldPosition.
toString()
- Method in class java.text.
ParsePosition
Return a string representation of this ParsePosition.
toString()
- Method in class java.time.chrono.
AbstractChronology
Outputs this chronology as a
String
, using the chronology ID.
toString()
- Method in interface java.time.chrono.
ChronoLocalDate
Outputs this date as a
String
.
toString()
- Method in class java.time.chrono.
HijrahDate
toString()
- Method in class java.time.chrono.
JapaneseDate
toString()
- Method in class java.time.chrono.
MinguoDate
toString()
- Method in class java.time.chrono.
ThaiBuddhistDate
toString()
- Method in interface java.time.chrono.
ChronoLocalDateTime
Outputs this date-time as a
String
.
toString()
- Method in interface java.time.chrono.
Chronology
Outputs this chronology as a
String
.
toString()
- Method in interface java.time.chrono.
ChronoPeriod
Outputs this period as a
String
.
toString()
- Method in interface java.time.chrono.
ChronoZonedDateTime
Outputs this date-time as a
String
.
toString()
- Method in class java.time.
Duration
A string representation of this duration using ISO-8601 seconds
 based representation, such as
PT8H6M12.345S
.
toString()
- Method in class java.time.format.
DateTimeFormatter
Returns a description of the underlying formatters.
toString()
- Method in class java.time.format.
DecimalStyle
Returns a string describing this DecimalStyle.
toString()
- Method in class java.time.
Instant
A string representation of this instant using ISO-8601 representation.
toString()
- Method in class java.time.
LocalDate
Outputs this date as a
String
, such as
2007-12-03
.
toString()
- Method in class java.time.
LocalDateTime
Outputs this date-time as a
String
, such as
2007-12-03T10:15:30
.
toString()
- Method in class java.time.
LocalTime
Outputs this time as a
String
, such as
10:15
.
toString()
- Method in class java.time.
MonthDay
Outputs this month-day as a
String
, such as
--12-03
.
toString()
- Method in class java.time.
OffsetDateTime
Outputs this date-time as a
String
, such as
2007-12-03T10:15:30+01:00
.
toString()
- Method in class java.time.
OffsetTime
Outputs this time as a
String
, such as
10:15:30+01:00
.
toString()
- Method in class java.time.
Period
Outputs this period as a
String
, such as
P6Y3M1D
.
toString()
- Method in enum class java.time.temporal.
ChronoField
toString()
- Method in enum class java.time.temporal.
ChronoUnit
toString()
- Method in interface java.time.temporal.
TemporalField
Gets a descriptive name for the field.
toString()
- Method in interface java.time.temporal.
TemporalUnit
Gets a descriptive name for the unit.
toString()
- Method in class java.time.temporal.
ValueRange
Outputs this range as a
String
.
toString()
- Method in class java.time.temporal.
WeekFields
A string representation of this
WeekFields
instance.
toString()
- Method in class java.time.
Year
Outputs this year as a
String
.
toString()
- Method in class java.time.
YearMonth
Outputs this year-month as a
String
, such as
2007-12
.
toString()
- Method in class java.time.zone.
ZoneOffsetTransition
Returns a string describing this object.
toString()
- Method in class java.time.zone.
ZoneOffsetTransitionRule
Returns a string describing this object.
toString()
- Method in class java.time.zone.
ZoneRules
Returns a string describing this object.
toString()
- Method in class java.time.
ZonedDateTime
Outputs this date-time as a
String
, such as
2007-12-03T10:15:30+01:00[Europe/Paris]
.
toString()
- Method in class java.time.
ZoneId
Outputs this zone as a
String
, using the ID.
toString()
- Method in class java.time.
ZoneOffset
Outputs this offset as a
String
, using the normalized ID.
toString()
- Method in class java.util.
AbstractCollection
Returns a string representation of this collection.
toString()
- Method in class java.util.
AbstractMap.SimpleEntry
Returns a String representation of this map entry.
toString()
- Method in class java.util.
AbstractMap.SimpleImmutableEntry
Returns a String representation of this map entry.
toString()
- Method in class java.util.
AbstractMap
Returns a string representation of this map.
toString()
- Method in class java.util.
BitSet
Returns a string representation of this bit set.
toString()
- Method in class java.util.
Calendar
Return a string representation of this calendar.
toString()
- Method in class java.util.concurrent.atomic.
AtomicBoolean
Returns the String representation of the current value.
toString()
- Method in class java.util.concurrent.atomic.
AtomicInteger
Returns the String representation of the current value.
toString()
- Method in class java.util.concurrent.atomic.
AtomicIntegerArray
Returns the String representation of the current values of array.
toString()
- Method in class java.util.concurrent.atomic.
AtomicLong
Returns the String representation of the current value.
toString()
- Method in class java.util.concurrent.atomic.
AtomicLongArray
Returns the String representation of the current values of array.
toString()
- Method in class java.util.concurrent.atomic.
AtomicReference
Returns the String representation of the current value.
toString()
- Method in class java.util.concurrent.atomic.
AtomicReferenceArray
Returns the String representation of the current values of array.
toString()
- Method in class java.util.concurrent.atomic.
DoubleAccumulator
Returns the String representation of the current value.
toString()
- Method in class java.util.concurrent.atomic.
DoubleAdder
Returns the String representation of the
DoubleAdder.sum()
.
toString()
- Method in class java.util.concurrent.atomic.
LongAccumulator
Returns the String representation of the current value.
toString()
- Method in class java.util.concurrent.atomic.
LongAdder
Returns the String representation of the
LongAdder.sum()
.
toString()
- Method in class java.util.concurrent.
CompletableFuture
Returns a string identifying this CompletableFuture, as well as
 its completion state.
toString()
- Method in class java.util.concurrent.
ConcurrentHashMap.KeySetView
Returns a string representation of this collection.
toString()
- Method in class java.util.concurrent.
ConcurrentHashMap
Returns a string representation of this map.
toString()
- Method in class java.util.concurrent.
CopyOnWriteArrayList
Returns a string representation of this list.
toString()
- Method in class java.util.concurrent.
CountDownLatch
Returns a string identifying this latch, as well as its state.
toString()
- Method in class java.util.concurrent.
ForkJoinPool
Returns a string identifying this pool, as well as its state,
 including indications of run state, parallelism level, and
 worker and task counts.
toString()
- Method in class java.util.concurrent.
FutureTask
Returns a string representation of this FutureTask.
toString()
- Method in class java.util.concurrent.locks.
AbstractQueuedLongSynchronizer
Returns a string identifying this synchronizer, as well as its state.
toString()
- Method in class java.util.concurrent.locks.
AbstractQueuedSynchronizer
Returns a string identifying this synchronizer, as well as its state.
toString()
- Method in class java.util.concurrent.locks.
ReentrantLock
Returns a string identifying this lock, as well as its lock state.
toString()
- Method in class java.util.concurrent.locks.
ReentrantReadWriteLock.ReadLock
Returns a string identifying this lock, as well as its lock state.
toString()
- Method in class java.util.concurrent.locks.
ReentrantReadWriteLock
Returns a string identifying this lock, as well as its lock state.
toString()
- Method in class java.util.concurrent.locks.
ReentrantReadWriteLock.WriteLock
Returns a string identifying this lock, as well as its lock
 state.
toString()
- Method in class java.util.concurrent.locks.
StampedLock
Returns a string identifying this lock, as well as its lock
 state.
toString()
- Method in class java.util.concurrent.
Phaser
Returns a string identifying this phaser, as well as its
 state.
toString()
- Method in class java.util.concurrent.
Semaphore
Returns a string identifying this semaphore, as well as its state.
toString()
- Method in class java.util.concurrent.
SynchronousQueue
Always returns
"[]"
.
toString()
- Method in class java.util.concurrent.
ThreadPoolExecutor
Returns a string identifying this pool, as well as its state,
 including indications of run state and estimated worker and
 task counts.
toString()
- Method in class java.util.
Currency
Returns the ISO 4217 currency code of this currency.
toString()
- Method in class java.util.
Date
Converts this
Date
object to a
String
of the form:
toString()
- Method in class java.util.
DoubleSummaryStatistics
Returns a non-empty string representation of this object suitable for
 debugging.
toString()
- Method in class java.util.
EventObject
Returns a String representation of this EventObject.
toString()
- Method in class java.util.
Formatter
Returns the result of invoking
toString()
on the destination
 for the output.
toString()
- Method in class java.util.
Hashtable
Returns a string representation of this
Hashtable
object
 in the form of a set of entries, enclosed in braces and separated
 by the ASCII characters "
,
" (comma and space).
toString()
- Method in class java.util.
HexFormat
Returns a description of the formatter parameters for uppercase,
 delimiter, prefix, and suffix.
toString()
- Method in class java.util.
IntSummaryStatistics
Returns a non-empty string representation of this object suitable for
 debugging.
toString()
- Method in class java.util.jar.
Attributes.Name
Returns the attribute name as a String.
toString()
- Method in class java.util.
Locale.LanguageRange
Returns an informative string representation of this
LanguageRange
object, consisting of language range and weight if the range is
 weighted and the weight is less than the max weight.
toString()
- Method in class java.util.
Locale
Returns a string representation of this
Locale
object, consisting of language, country, variant, script,
 and extensions as below:
 
 language + "_" + country + "_" + (variant + "_#" | "#") + script + "_" + extensions
 

 Language is always lower case, country is always upper case, script is always title
 case, and extensions are always lower case.
toString()
- Method in class java.util.logging.
Level
Returns a string representation of this Level.
toString()
- Method in class java.util.
LongSummaryStatistics
Returns a non-empty string representation of this object suitable for
 debugging.
toString()
- Method in class java.util.
Optional
Returns a non-empty string representation of this
Optional
suitable for debugging.
toString()
- Method in class java.util.
OptionalDouble
Returns a non-empty string representation of this
OptionalDouble
suitable for debugging.
toString()
- Method in class java.util.
OptionalInt
Returns a non-empty string representation of this
OptionalInt
suitable for debugging.
toString()
- Method in class java.util.
OptionalLong
Returns a non-empty string representation of this
OptionalLong
suitable for debugging.
toString()
- Method in class java.util.prefs.
AbstractPreferences
Returns the absolute path name of this preferences node.
toString()
- Method in class java.util.prefs.
Preferences
Returns a string representation of this preferences node,
 as if computed by the expression:
(this.isUserNode() ? "User" :
 "System") + " Preference Node: " + this.absolutePath()
.
toString()
- Method in class java.util.regex.
Matcher
Returns the string representation of this matcher.
toString()
- Method in class java.util.regex.
Pattern
Returns the string representation of this pattern.
toString()
- Method in class java.util.
Scanner
Returns the string representation of this
Scanner
.
toString()
- Method in class java.util.
ServiceLoader
Returns a string describing this service.
toString()
- Method in class java.util.
SimpleTimeZone
Returns a string representation of this time zone.
toString()
- Method in class java.util.
StringJoiner
Returns the current value, consisting of the
prefix
, the values
 added so far separated by the
delimiter
, and the
suffix
,
 unless no elements have been added in which case, the
prefix + suffix
or the
emptyValue
characters are returned.
toString()
- Method in class java.util.
UUID
Returns a
String
object representing this
UUID
.
toString()
- Method in class java.util.
Vector
Returns a string representation of this Vector, containing
 the String representation of each element.
toString()
- Method in class java.util.zip.
ZipEntry
Returns a string representation of the ZIP entry.
toString()
- Method in class javax.accessibility.
AccessibleBundle
Gets localized string describing the key using the default locale.
toString()
- Method in class javax.accessibility.
AccessibleRelationSet
Creates a localized string representing all the relations in the set
 using the default locale.
toString()
- Method in class javax.accessibility.
AccessibleStateSet
Creates a localized string representing all the states in the set using
 the default locale.
toString()
- Method in class javax.crypto.
Cipher
Returns a
String
representation of this
Cipher
object.
toString()
- Method in class javax.imageio.plugins.jpeg.
JPEGHuffmanTable
Returns a
String
representing this Huffman table.
toString()
- Method in class javax.imageio.plugins.jpeg.
JPEGQTable
Returns a
String
representing this quantization table.
toString()
- Method in interface javax.lang.model.element.
AnnotationValue
Returns a string representation of this value.
toString()
- Method in enum class javax.lang.model.element.
Modifier
Returns this modifier's name as defined in
The
 Java Language Specification
.
toString()
- Method in interface javax.lang.model.type.
TypeMirror
Returns an informative string representation of this type.
toString()
- Method in class javax.management.
Attribute
Returns a String object representing this Attribute's value.
toString()
- Method in class javax.management.
AttributeValueExp
Returns the string representing its value.
toString()
- Method in exception class javax.management.
BadAttributeValueExpException
Returns the string representing the object.
toString()
- Method in exception class javax.management.
BadBinaryOpValueExpException
Returns the string representing the object.
toString()
- Method in exception class javax.management.
BadStringOperationException
Returns the string representing the object.
toString()
- Method in class javax.management.modelmbean.
DescriptorSupport
Returns a human readable string representing the
 descriptor.
toString()
- Method in class javax.management.modelmbean.
ModelMBeanAttributeInfo
Returns a human-readable version of the
 ModelMBeanAttributeInfo instance.
toString()
- Method in class javax.management.modelmbean.
ModelMBeanConstructorInfo
Returns a string containing the entire contents of the ModelMBeanConstructorInfo in human readable form.
toString()
- Method in class javax.management.modelmbean.
ModelMBeanNotificationInfo
Returns a human readable string containing
 ModelMBeanNotificationInfo.
toString()
- Method in class javax.management.modelmbean.
ModelMBeanOperationInfo
Returns a string containing the entire contents of the
 ModelMBeanOperationInfo in human readable form.
toString()
- Method in class javax.management.
Notification
Returns a String representation of this notification.
toString()
- Method in class javax.management.
ObjectInstance
Returns a string representing this ObjectInstance object.
toString()
- Method in class javax.management.
ObjectName
Returns a string representation of the object name.
toString()
- Method in class javax.management.openmbean.
ArrayType
Returns a string representation of this
ArrayType
instance.
toString()
- Method in interface javax.management.openmbean.
CompositeData
Returns a string representation of this
CompositeData
instance.
toString()
- Method in class javax.management.openmbean.
CompositeDataSupport
Returns a string representation of this
CompositeDataSupport
instance.
toString()
- Method in class javax.management.openmbean.
CompositeType
Returns a string representation of this
CompositeType
instance.
toString()
- Method in interface javax.management.openmbean.
OpenMBeanAttributeInfo
Returns a string representation of this
OpenMBeanAttributeInfo
instance.
toString()
- Method in class javax.management.openmbean.
OpenMBeanAttributeInfoSupport
Returns a string representation of this
OpenMBeanAttributeInfoSupport
instance.
toString()
- Method in interface javax.management.openmbean.
OpenMBeanConstructorInfo
Returns a string representation of this
OpenMBeanConstructorInfo
instance.
toString()
- Method in class javax.management.openmbean.
OpenMBeanConstructorInfoSupport
Returns a string representation of this
OpenMBeanConstructorInfoSupport
instance.
toString()
- Method in interface javax.management.openmbean.
OpenMBeanInfo
Returns a string representation of this
OpenMBeanInfo
instance.
toString()
- Method in class javax.management.openmbean.
OpenMBeanInfoSupport
Returns a string representation of this
OpenMBeanInfoSupport
instance.
toString()
- Method in interface javax.management.openmbean.
OpenMBeanOperationInfo
Returns a string representation of this
OpenMBeanOperationInfo
instance.
toString()
- Method in class javax.management.openmbean.
OpenMBeanOperationInfoSupport
Returns a string representation of this
OpenMBeanOperationInfoSupport
instance.
toString()
- Method in interface javax.management.openmbean.
OpenMBeanParameterInfo
Returns a string representation of this
OpenMBeanParameterInfo
instance.
toString()
- Method in class javax.management.openmbean.
OpenMBeanParameterInfoSupport
Returns a string representation of this
OpenMBeanParameterInfoSupport
instance.
toString()
- Method in class javax.management.openmbean.
OpenType
Returns a string representation of this open type instance.
toString()
- Method in class javax.management.openmbean.
SimpleType
Returns a string representation of this
SimpleType
instance.
toString()
- Method in interface javax.management.openmbean.
TabularData
Returns a string representation of this
TabularData
instance.
toString()
- Method in class javax.management.openmbean.
TabularDataSupport
Returns a string representation of this
TabularDataSupport
instance.
toString()
- Method in class javax.management.openmbean.
TabularType
Returns a string representation of this
TabularType
instance.
toString()
- Method in class javax.management.relation.
Role
Returns a string describing the role.
toString()
- Method in class javax.management.relation.
RoleInfo
Returns a string describing the role info.
toString()
- Method in class javax.management.relation.
RoleUnresolved
Return a string describing this object.
toString()
- Method in class javax.management.remote.
JMXPrincipal
Returns a string representation of this
JMXPrincipal
.
toString()
- Method in class javax.management.remote.
JMXServiceURL
The string representation of this Service URL.
toString()
- Method in class javax.management.remote.
NotificationResult
Returns a string representation of the object.
toString()
- Method in class javax.management.remote.rmi.
RMIConnectionImpl
Returns a string representation of this object.
toString()
- Method in class javax.management.remote.rmi.
RMIConnector
Returns a string representation of this object.
toString()
- Method in class javax.management.remote.
TargetedNotification
Returns a textual representation of this Targeted Notification.
toString()
- Method in class javax.management.
StringValueExp
Returns the string representing the object.
toString()
- Method in class javax.naming.
BinaryRefAddr
Generates the string representation of this address.
toString()
- Method in class javax.naming.
Binding
Generates the string representation of this binding.
toString()
- Method in class javax.naming.
CompositeName
Generates the string representation of this composite name.
toString()
- Method in class javax.naming.
CompoundName
Generates the string representation of this compound name, using
 the syntax rules of the compound name.
toString()
- Method in exception class javax.naming.directory.
AttributeModificationException
The string representation of this exception consists of
 information about where the error occurred, and
 the first unexecuted modification.
toString()
- Method in class javax.naming.directory.
BasicAttribute
Generates the string representation of this attribute.
toString()
- Method in class javax.naming.directory.
BasicAttributes
Generates the string representation of this attribute set.
toString()
- Method in class javax.naming.directory.
ModificationItem
Generates the string representation of this modification item,
 which consists of the modification operation and its related attribute.
toString()
- Method in class javax.naming.directory.
SearchResult
Generates the string representation of this SearchResult.
toString()
- Method in class javax.naming.ldap.
LdapName
Returns a string representation of this LDAP name in a format
 defined by
RFC 2253
and described in the class description.
toString()
- Method in class javax.naming.ldap.
Rdn
Returns this Rdn as a string represented in a format defined by
RFC 2253
and described
 in the class description for
LdapName
.
toString()
- Method in exception class javax.naming.
LinkException
Generates the string representation of this exception.
toString()
- Method in class javax.naming.
NameClassPair
Generates the string representation of this name/class pair.
toString()
- Method in exception class javax.naming.
NamingException
Generates the string representation of this exception.
toString()
- Method in class javax.naming.
RefAddr
Generates the string representation of this address.
toString()
- Method in class javax.naming.
Reference
Generates the string representation of this reference.
toString()
- Method in class javax.net.ssl.
SNIHostName
Returns a string representation of the object, including the DNS
 hostname in this
SNIHostName
object.
toString()
- Method in class javax.net.ssl.
SNIServerName
Returns a string representation of this server name, including the server
 name type and the encoded server name value in this
SNIServerName
object.
toString()
- Method in class javax.net.ssl.
SSLEngineResult
Returns a String representation of this object.
toString()
- Method in class javax.print.attribute.
DateTimeSyntax
Returns a string value corresponding to this date-time attribute.
toString()
- Method in class javax.print.attribute.
EnumSyntax
Returns a string value corresponding to this enumeration value.
toString()
- Method in class javax.print.attribute.
IntegerSyntax
Returns a string value corresponding to this integer attribute.
toString()
- Method in class javax.print.attribute.
ResolutionSyntax
Returns a string version of this resolution attribute.
toString()
- Method in class javax.print.attribute.
SetOfIntegerSyntax
Returns a string value corresponding to this set-of-integer attribute.
toString()
- Method in class javax.print.attribute.
Size2DSyntax
Returns a string version of this two-dimensional size attribute.
toString()
- Method in class javax.print.attribute.standard.
MediaPrintableArea
Returns a string version of this rectangular size attribute in mm.
toString()
- Method in class javax.print.attribute.
TextSyntax
Returns a
String
identifying this text attribute.
toString()
- Method in class javax.print.attribute.
URISyntax
Returns a
String
identifying this
URI
attribute.
toString()
- Method in class javax.print.
DocFlavor
Converts this
DocFlavor
to a string.
toString()
- Method in class javax.print.event.
PrintEvent
Returns a string representation of this
PrintEvent
.
toString()
- Method in class javax.security.auth.kerberos.
EncryptionKey
Returns an informative textual representation of this
EncryptionKey
.
toString()
- Method in class javax.security.auth.kerberos.
KerberosCredMessage
Returns an informative textual representation of this
KerberosCredMessage
.
toString()
- Method in class javax.security.auth.kerberos.
KerberosKey
Returns an informative textual representation of this
KerberosKey
.
toString()
- Method in class javax.security.auth.kerberos.
KerberosPrincipal
Returns an informative textual representation of this
KerberosPrincipal
.
toString()
- Method in class javax.security.auth.kerberos.
KerberosTicket
Returns an informative textual representation of this
KerberosTicket
.
toString()
- Method in class javax.security.auth.kerberos.
KeyTab
Returns an informative textual representation of this
KeyTab
.
toString()
- Method in class javax.security.auth.login.
AppConfigurationEntry.LoginModuleControlFlag
Return a String representation of this controlFlag.
toString()
- Method in class javax.security.auth.
Subject
Return the String representation of this
Subject
.
toString()
- Method in class javax.security.auth.x500.
X500Principal
Return a user-friendly string representation of this
X500Principal
.
toString()
- Method in class javax.security.cert.
Certificate
Deprecated.
Returns a string representation of this certificate.
toString()
- Method in exception class javax.security.sasl.
SaslException
Returns the string representation of this exception.
toString()
- Method in class javax.smartcardio.
ATR
Returns a string representation of this ATR.
toString()
- Method in class javax.smartcardio.
CommandAPDU
Returns a string representation of this command APDU.
toString()
- Method in class javax.smartcardio.
ResponseAPDU
Returns a string representation of this response APDU.
toString()
- Method in class javax.smartcardio.
TerminalFactory
Returns a string representation of this TerminalFactory.
toString()
- Method in class javax.sound.midi.
MidiDevice.Info
Returns a string representation of the info object.
toString()
- Method in class javax.sound.midi.
Sequencer.SyncMode
Returns mode's name as the string representation of the
 synchronization mode.
toString()
- Method in class javax.sound.sampled.
AudioFileFormat
Returns a string representation of the audio file format.
toString()
- Method in class javax.sound.sampled.
AudioFileFormat.Type
Returns type's name as the string representation of the file type.
toString()
- Method in class javax.sound.sampled.
AudioFormat.Encoding
Returns encoding's name as the string representation of the encoding.
toString()
- Method in class javax.sound.sampled.
AudioFormat
Returns a string that describes the audio format, such as: "PCM SIGNED
 22050 Hz 16 bit mono big-endian".
toString()
- Method in class javax.sound.sampled.
BooleanControl
Returns a string representation of the boolean control.
toString()
- Method in class javax.sound.sampled.
CompoundControl
Returns a string representation of the compound control.
toString()
- Method in class javax.sound.sampled.
Control
Returns a string representation of the control.
toString()
- Method in class javax.sound.sampled.
Control.Type
Returns type's name as the string representation of the control type.
toString()
- Method in class javax.sound.sampled.
DataLine.Info
Returns a string representation of the info object.
toString()
- Method in class javax.sound.sampled.
EnumControl
Returns a string representation of the enumerated control.
toString()
- Method in class javax.sound.sampled.
FloatControl
Returns a string representation of the float control.
toString()
- Method in class javax.sound.sampled.
Line.Info
Returns a string representation of the info object.
toString()
- Method in class javax.sound.sampled.
LineEvent
Returns a string representation of the event.
toString()
- Method in class javax.sound.sampled.
LineEvent.Type
Returns type's name as the string representation of the event type.
toString()
- Method in class javax.sound.sampled.
Mixer.Info
Returns a string representation of the info object.
toString()
- Method in class javax.sound.sampled.
Port.Info
Returns a string representation of the info object.
toString()
- Method in class javax.sound.sampled.
ReverbType
Returns a string representation of the reverb type, including its name
 and its parameter settings.
toString()
- Method in class javax.swing.
DefaultBoundedRangeModel
Returns a string that displays all of the
BoundedRangeModel
properties.
toString()
- Method in class javax.swing.
DefaultListModel
Returns a string that displays and identifies this
 object's properties.
toString()
- Method in class javax.swing.
DefaultListSelectionModel
Returns a string that displays and identifies this
 object's properties.
toString()
- Method in class javax.swing.event.
DocumentEvent.EventType
Converts the type to a string.
toString()
- Method in class javax.swing.event.
EventListenerList
Returns a string representation of the EventListenerList.
toString()
- Method in class javax.swing.event.
HyperlinkEvent.EventType
Converts the type to a string.
toString()
- Method in class javax.swing.event.
ListDataEvent
Returns a string representation of this ListDataEvent.
toString()
- Method in class javax.swing.event.
ListSelectionEvent
Returns a
String
that displays and identifies this
 object's properties.
toString()
- Method in class javax.swing.event.
TreeModelEvent
Returns a string that displays and identifies this object's
 properties.
toString()
- Method in class javax.swing.filechooser.
FileNameExtensionFilter
Returns a string representation of the
FileNameExtensionFilter
.
toString()
- Method in class javax.swing.
GroupLayout
Returns a string representation of this
GroupLayout
.
toString()
- Method in class javax.swing.
ImageIcon
Returns a string representation of this image.
toString()
- Method in class javax.swing.
JList.DropLocation
Returns a string representation of this drop location.
toString()
- Method in class javax.swing.
JTable.DropLocation
Returns a string representation of this drop location.
toString()
- Method in class javax.swing.
JTree.DropLocation
Returns a string representation of this drop location.
toString()
- Method in class javax.swing.
LookAndFeel
Returns a string that displays and identifies this
 object's properties.
toString()
- Method in class javax.swing.plaf.synth.
ColorType
Returns the textual description of this
ColorType
.
toString()
- Method in class javax.swing.plaf.synth.
Region
Returns the name of the Region.
toString()
- Method in class javax.swing.
RepaintManager
Returns a string that displays and identifies this
 object's properties.
toString()
- Method in class javax.swing.
SizeRequirements
Returns a string describing the minimum, preferred, and maximum
 size requirements, along with the alignment.
toString()
- Method in class javax.swing.text.
AbstractDocument.BranchElement
Converts the element to a string.
toString()
- Method in class javax.swing.text.
AbstractDocument.DefaultDocumentEvent
Returns a string description of the change event.
toString()
- Method in class javax.swing.text.
AbstractDocument.LeafElement
Converts the element to a string.
toString()
- Method in class javax.swing.text.
DefaultStyledDocument.ElementSpec
Converts the element to a string.
toString()
- Method in class javax.swing.text.html.
CSS.Attribute
The string representation of the attribute.
toString()
- Method in class javax.swing.text.html.
HTML.Attribute
Returns the string representation of this attribute.
toString()
- Method in class javax.swing.text.html.
HTML.Tag
Returns the string representation of the
 tag.
toString()
- Method in class javax.swing.text.html.
Option
String representation is the label.
toString()
- Method in class javax.swing.text.html.parser.
AttributeList
toString()
- Method in class javax.swing.text.html.parser.
ContentModel
Convert to a string.
toString()
- Method in class javax.swing.text.html.parser.
DTD
Returns a string representation of this DTD.
toString()
- Method in class javax.swing.text.html.parser.
Element
Convert to a string.
toString()
- Method in class javax.swing.text.
JTextComponent.DropLocation
Returns a string representation of this drop location.
toString()
- Method in class javax.swing.text.
Position.Bias
string representation
toString()
- Method in class javax.swing.text.
Segment
Converts a segment into a String.
toString()
- Method in class javax.swing.text.
SimpleAttributeSet
Converts the attribute set to a String.
toString()
- Method in class javax.swing.text.
StyleConstants
Returns the string representation.
toString()
- Method in class javax.swing.text.
StyleContext.NamedStyle
Converts the style to a string.
toString()
- Method in class javax.swing.text.
StyleContext.SmallAttributeSet
Returns a string showing the key/value pairs.
toString()
- Method in class javax.swing.text.
StyleContext
Converts a StyleContext to a String.
toString()
- Method in class javax.swing.text.
TabSet
Returns the string representation of the set of tabs.
toString()
- Method in class javax.swing.
TransferHandler.DropLocation
Returns a string representation of this drop location.
toString()
- Method in class javax.swing.tree.
DefaultMutableTreeNode
Returns the result of sending
toString()
to this node's
 user object, or the empty string if the node has no user object.
toString()
- Method in class javax.swing.tree.
DefaultTreeSelectionModel
Returns a string that displays and identifies this
 object's properties.
toString()
- Method in class javax.swing.tree.
TreePath
Returns a string that displays and identifies this
 object's properties.
toString()
- Method in class javax.swing.
UIManager.LookAndFeelInfo
Returns a string that displays and identifies this
 object's properties.
toString()
- Method in class javax.swing.undo.
AbstractUndoableEdit
Returns a string that displays and identifies this
 object's properties.
toString()
- Method in class javax.swing.undo.
CompoundEdit
Returns a string that displays and identifies this
 object's properties.
toString()
- Method in class javax.swing.undo.
UndoableEditSupport
Returns a string that displays and identifies this
 object's properties.
toString()
- Method in class javax.swing.undo.
UndoManager
Returns a string that displays and identifies this
 object's properties.
toString()
- Method in class javax.xml.crypto.dsig.spec.
XPathType.Filter
Returns the string form of the operation.
toString()
- Method in class javax.xml.crypto.
KeySelector.Purpose
Returns a string representation of this purpose ("sign",
 "verify", "encrypt", or "decrypt").
toString()
- Method in class javax.xml.datatype.
DatatypeConstants.Field
Returns a field name in English.
toString()
- Method in class javax.xml.datatype.
Duration
Returns a
String
representation of this
Duration Object
.
toString()
- Method in class javax.xml.datatype.
XMLGregorianCalendar
Returns a
String
representation of this
XMLGregorianCalendar
Object
.
toString()
- Method in class javax.xml.namespace.
QName
String
representation of this
QName
.
toString()
- Method in class jdk.dynalink.
CallSiteDescriptor
Returns the string representation of this call site descriptor, of the
 format
name(parameterTypes)returnType@lookup
.
toString()
- Method in class jdk.dynalink.
NamedOperation
Returns the string representation of this named operation.
toString()
- Method in class jdk.dynalink.
NamespaceOperation
Returns the string representation of this namespace operation.
toString()
- Method in class jdk.incubator.vector.
ByteVector
Returns a string representation of this vector, of the form
"[0,1,2...]"
, reporting the lane values of this vector,
 in lane order.
toString()
- Method in class jdk.incubator.vector.
DoubleVector
Returns a string representation of this vector, of the form
"[0,1,2...]"
, reporting the lane values of this vector,
 in lane order.
toString()
- Method in class jdk.incubator.vector.
FloatVector
Returns a string representation of this vector, of the form
"[0,1,2...]"
, reporting the lane values of this vector,
 in lane order.
toString()
- Method in class jdk.incubator.vector.
IntVector
Returns a string representation of this vector, of the form
"[0,1,2...]"
, reporting the lane values of this vector,
 in lane order.
toString()
- Method in class jdk.incubator.vector.
LongVector
Returns a string representation of this vector, of the form
"[0,1,2...]"
, reporting the lane values of this vector,
 in lane order.
toString()
- Method in class jdk.incubator.vector.
ShortVector
Returns a string representation of this vector, of the form
"[0,1,2...]"
, reporting the lane values of this vector,
 in lane order.
toString()
- Method in class jdk.incubator.vector.
Vector
Returns a string representation of this vector, of the form
"[0,1,2...]"
, reporting the lane values of this
 vector, in lane order.
toString()
- Method in class jdk.incubator.vector.
VectorMask
Returns a string representation of this mask, of the form
"Mask[T.TT...]"
, reporting the mask bit
 settings (as 'T' or '.' characters) in lane order.
toString()
- Method in class jdk.incubator.vector.
VectorShuffle
Returns a string representation of this shuffle, of the form
"Shuffle[0,1,2...]"
, reporting the source indexes
 in lane order.
toString()
- Method in interface jdk.incubator.vector.
VectorSpecies
Returns a string of the form "Species[ETYPE, VLENGTH, SHAPE]",
 where
ETYPE
is the primitive
lane type
,
VLENGTH
is the
vector lane count
associated with the species, and
SHAPE
is the
vector shape
associated with the species.
toString()
- Method in class jdk.jfr.consumer.
RecordedObject
Returns a textual representation of this object.
toString()
- Method in class jdk.jshell.
SnippetEvent
Return a string representation of the event
toString()
- Method in record class jdk.jshell.
SourceCodeAnalysis.Highlight
Returns a string representation of this record class.
toString()
- Method in class jdk.management.jfr.
ConfigurationInfo
Returns a description of the configuration that is associated with this
ConfigurationInfo
.
toString()
- Method in class jdk.management.jfr.
EventTypeInfo
Returns a description of this
EventTypeInfo
.
toString()
- Method in class jdk.management.jfr.
RecordingInfo
Returns a string description of the recording associated with this
RecordingInfo
toString()
- Method in class jdk.management.jfr.
SettingDescriptorInfo
Returns a
String
description of this
SettingDescriptorInfo
.
toString()
- Method in record class jdk.net.
UnixDomainPrincipal
Returns a string representation of this record class.
toString()
- Method in exception class org.ietf.jgss.
GSSException
Returns a textual representation of both the major and the minor
 status codes.
toString()
- Method in interface org.ietf.jgss.
GSSName
Returns a textual representation of the
GSSName
object.
toString()
- Method in class org.ietf.jgss.
Oid
Returns a string representation of the oid's integer components
 in dot separated notation.
toString()
- Method in interface org.w3c.dom.ranges.
Range
Returns the contents of a Range as a string.
toString()
- Method in exception class org.xml.sax.
SAXException
Override toString to pick up any embedded exception.
toString()
- Method in exception class org.xml.sax.
SAXParseException
Override toString to provide more detailed error message.
toString(boolean)
- Static method in class java.lang.
Boolean
Returns a
String
object representing the specified
 boolean.
toString(boolean)
- Method in interface java.security.
Certificate
Deprecated.
Returns a string that represents the contents of the certificate.
toString(boolean)
- Method in class java.security.
Identity
Deprecated.
Returns a string representation of this
Identity
, with
 optionally more details than that provided by the
toString
method without any arguments.
toString(boolean)
- Method in exception class javax.naming.
LinkException
Generates the string representation of this exception.
toString(boolean)
- Method in exception class javax.naming.
NamingException
Generates the string representation in more detail.
toString(boolean[])
- Static method in class java.util.
Arrays
Returns a string representation of the contents of the specified array.
toString(byte)
- Static method in class java.lang.
Byte
Returns a new
String
object representing the
 specified
byte
.
toString(byte[])
- Static method in class java.util.
Arrays
Returns a string representation of the contents of the specified array.
toString(char)
- Static method in class java.lang.
Character
Returns a
String
object representing the
 specified
char
.
toString(char[])
- Static method in class java.util.
Arrays
Returns a string representation of the contents of the specified array.
toString(double)
- Static method in class java.lang.
Double
Returns a string representation of the
double
argument.
toString(double[])
- Static method in class java.util.
Arrays
Returns a string representation of the contents of the specified array.
toString(float)
- Static method in class java.lang.
Float
Returns a string representation of the
float
argument.
toString(float[])
- Static method in class java.util.
Arrays
Returns a string representation of the contents of the specified array.
toString(int)
- Method in class java.io.
ByteArrayOutputStream
Deprecated.
This method does not properly convert bytes into characters.
 As of JDK 1.1, the preferred way to do this is via the
ByteArrayOutputStream.toString(String charsetName)
or
ByteArrayOutputStream.toString(Charset charset)
method, which takes an encoding-name or charset argument,
 or the
toString()
method, which uses the default charset.
toString(int)
- Static method in class java.lang.
Character
Returns a
String
object representing the
 specified character (Unicode code point).
toString(int)
- Static method in class java.lang.
Integer
Returns a
String
object representing the
 specified integer.
toString(int)
- Static method in class java.lang.reflect.
Modifier
Return a string describing the access modifier flags in
 the specified modifier.
toString(int)
- Method in class java.math.
BigInteger
Returns the String representation of this BigInteger in the
 given radix.
toString(int[])
- Static method in class java.util.
Arrays
Returns a string representation of the contents of the specified array.
toString(int, int)
- Static method in class java.lang.
Integer
Returns a string representation of the first argument in the
 radix specified by the second argument.
toString(int, Class<?>, String, MethodType)
- Static method in interface java.lang.invoke.
MethodHandleInfo
Returns a string representation for a
MethodHandleInfo
,
 given the four parts of its symbolic reference.
toString(int, String)
- Method in class javax.print.attribute.
ResolutionSyntax
Returns a string version of this resolution attribute in the given units.
toString(int, String)
- Method in class javax.print.attribute.
Size2DSyntax
Returns a string version of this two-dimensional size attribute in the
 given units.
toString(int, String)
- Method in class javax.print.attribute.standard.
MediaPrintableArea
Returns a string version of this rectangular size attribute in the given
 units.
toString(long)
- Static method in class java.lang.
Long
Returns a
String
object representing the specified
long
.
toString(long[])
- Static method in class java.util.
Arrays
Returns a string representation of the contents of the specified array.
toString(long, int)
- Static method in class java.lang.
Long
Returns a string representation of the first argument in the
 radix specified by the second argument.
toString(short)
- Static method in class java.lang.
Short
Returns a new
String
object representing the
 specified
short
.
toString(short[])
- Static method in class java.util.
Arrays
Returns a string representation of the contents of the specified array.
toString(Object)
- Static method in class java.util.
Objects
Returns the result of calling
toString
for a non-
null
argument and
"null"
for a
null
argument.
toString(Object[])
- Static method in class java.util.
Arrays
Returns a string representation of the contents of the specified array.
toString(Object, String)
- Static method in class java.util.
Objects
Returns the result of calling
toString
on the first
 argument if the first argument is not
null
and returns
 the second argument otherwise.
toString(String)
- Method in class java.io.
ByteArrayOutputStream
Converts the buffer's contents into a string by decoding the bytes using
 the named
charset
.
toString(StringTemplate)
- Static method in interface java.lang.
StringTemplate
PREVIEW
Produces a diagnostic string that describes the fragments and values of the supplied
StringTemplate
PREVIEW
.
toString(Charset)
- Method in class java.io.
ByteArrayOutputStream
Converts the buffer's contents into a string by decoding the bytes using
 the specified
charset
.
toString(List<? extends DocTree>, Element)
- Method in interface jdk.javadoc.doclet.
Taglet
Returns the string representation of a series of instances of
 this tag to be included in the generated output.
toString(Set<PosixFilePermission>)
- Static method in class java.nio.file.attribute.
PosixFilePermissions
Returns the
String
representation of a set of permissions.
toString(TableModel, int, int)
- Method in class javax.swing.table.
TableStringConverter
Returns the string representation of the value at the specified
 location.
toStub()
- Method in class javax.management.remote.rmi.
RMIJRMPServerImpl
Returns a serializable stub for this
RMIServer
object.
toStub()
- Method in class javax.management.remote.rmi.
RMIServerImpl
Returns a remotable stub for this server object.
toStub(Remote)
- Static method in class java.rmi.server.
RemoteObject
Returns the stub for the remote object
obj
passed
 as a parameter.
totalChildIndent
- Variable in class javax.swing.plaf.basic.
BasicTreeUI
Total distance that will be indented.
totalColumnWidth
- Variable in class javax.swing.table.
DefaultTableColumnModel
A local cache of the combined width of all columns
totalCpuDuration()
- Method in interface java.lang.
ProcessHandle.Info
Returns the total cputime accumulated of the process.
totalMemory()
- Method in class java.lang.
Runtime
Returns the total amount of memory in the Java virtual machine.
toTitleCase(char)
- Static method in class java.lang.
Character
Converts the character argument to titlecase using case mapping
 information from the UnicodeData file.
toTitleCase(int)
- Static method in class java.lang.
Character
Converts the character (Unicode code point) argument to titlecase using case mapping
 information from the UnicodeData file.
TOTO
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Toto".
TOTO
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Toto" Unicode
 character block.
TOTOP_TOLEFT
- Static variable in class javax.print.attribute.standard.
PresentationDirection
Pages are laid out in columns starting at the bottom right, proceeding
 towards the top & left.
TOTOP_TORIGHT
- Static variable in class javax.print.attribute.standard.
PresentationDirection
Pages are laid out in columns starting at the bottom left, proceeding
 towards the top & right.
toTotalMonths()
- Method in class java.time.
Period
Gets the total number of months in this period.
toUnicode(String)
- Static method in class java.net.
IDN
Translates a string from ASCII Compatible Encoding (ACE) to Unicode,
 as defined by the ToUnicode operation of
RFC 3490
.
toUnicode(String, int)
- Static method in class java.net.
IDN
Translates a string from ASCII Compatible Encoding (ACE) to Unicode,
 as defined by the ToUnicode operation of
RFC 3490
.
toUnmodifiableList()
- Static method in class java.util.stream.
Collectors
Returns a
Collector
that accumulates the input elements into an
unmodifiable List
in encounter
 order.
toUnmodifiableMap(Function<? super T, ? extends K>, Function<? super T, ? extends U>)
- Static method in class java.util.stream.
Collectors
Returns a
Collector
that accumulates the input elements into an
unmodifiable Map
,
 whose keys and values are the result of applying the provided
 mapping functions to the input elements.
toUnmodifiableMap(Function<? super T, ? extends K>, Function<? super T, ? extends U>, BinaryOperator<U>)
- Static method in class java.util.stream.
Collectors
Returns a
Collector
that accumulates the input elements into an
unmodifiable Map
,
 whose keys and values are the result of applying the provided
 mapping functions to the input elements.
toUnmodifiableSet()
- Static method in class java.util.stream.
Collectors
Returns a
Collector
that accumulates the input elements into an
unmodifiable Set
.
toUnsignedInt(byte)
- Static method in class java.lang.
Byte
Converts the argument to an
int
by an unsigned
 conversion.
toUnsignedInt(short)
- Static method in class java.lang.
Short
Converts the argument to an
int
by an unsigned
 conversion.
toUnsignedLong(byte)
- Static method in class java.lang.
Byte
Converts the argument to a
long
by an unsigned
 conversion.
toUnsignedLong(int)
- Static method in class java.lang.
Integer
Converts the argument to a
long
by an unsigned
 conversion.
toUnsignedLong(short)
- Static method in class java.lang.
Short
Converts the argument to a
long
by an unsigned
 conversion.
toUnsignedString(int)
- Static method in class java.lang.
Integer
Returns a string representation of the argument as an unsigned
 decimal value.
toUnsignedString(int, int)
- Static method in class java.lang.
Integer
Returns a string representation of the first argument as an
 unsigned integer value in the radix specified by the second
 argument.
toUnsignedString(long)
- Static method in class java.lang.
Long
Returns a string representation of the argument as an unsigned
 decimal value.
toUnsignedString(long, int)
- Static method in class java.lang.
Long
Returns a string representation of the first argument as an
 unsigned integer value in the radix specified by the second
 argument.
toUpperCase()
- Method in class java.lang.
String
Converts all of the characters in this
String
to upper
 case using the rules of the default locale.
toUpperCase(char)
- Static method in class java.lang.
Character
Converts the character argument to uppercase using case mapping
 information from the UnicodeData file.
toUpperCase(int)
- Static method in class java.lang.
Character
Converts the character (Unicode code point) argument to
 uppercase using case mapping information from the UnicodeData
 file.
toUpperCase(Locale)
- Method in class java.lang.
String
Converts all of the characters in this
String
to upper
 case using the rules of the given
Locale
.
toUri()
- Method in interface java.nio.file.
Path
Returns a URI to represent this path.
toUri()
- Method in interface javax.tools.
FileObject
Returns a URI identifying this file object.
toUri()
- Method in class javax.tools.
ForwardingFileObject
toUri()
- Method in class javax.tools.
SimpleJavaFileObject
toURI()
- Method in class java.io.
File
Constructs a
file:
URI that represents this abstract pathname.
toURI()
- Method in class java.net.
URL
Returns a
URI
equivalent to this URL.
toURL()
- Method in class java.io.
File
Deprecated.
This method does not automatically escape characters that
 are illegal in URLs.  It is recommended that new code convert an
 abstract pathname into a URL by first converting it into a URI, via the
toURI
method, and then converting the URI into a URL
 via the
URI.toURL
method.
toURL()
- Method in class java.net.
URI
Constructs a URL from this URI.
toVector()
- Method in class jdk.incubator.vector.
VectorMask
Returns a vector representation of this mask, the
 lane bits of which are set or unset in correspondence
 to the mask bits.
toVector()
- Method in class jdk.incubator.vector.
VectorShuffle
Converts this shuffle into a vector, creating a vector
 of integral values corresponding to the lane source
 indexes of the shuffle.
toViewCoordinates(Dimension)
- Method in class javax.swing.
JViewport
Converts a size in pixel coordinates to view coordinates.
toViewCoordinates(Point)
- Method in class javax.swing.
JViewport
Converts a point in pixel coordinates to view coordinates.
toXMLFormat()
- Method in class javax.xml.datatype.
XMLGregorianCalendar
Return the lexical representation of
this
instance.
toXMLString()
- Method in class javax.management.modelmbean.
DescriptorSupport
Returns an XML String representing the descriptor.
toZonedDateTime()
- Method in class java.time.
OffsetDateTime
Converts this date-time to a
ZonedDateTime
using the offset as the zone ID.
toZonedDateTime()
- Method in class java.util.
GregorianCalendar
Converts this object to a
ZonedDateTime
that represents
 the same point on the time-line as this
GregorianCalendar
.
toZoneId()
- Method in class java.util.
TimeZone
Converts this
TimeZone
object to a
ZoneId
.
TR
- Static variable in class javax.swing.text.html.
HTML.Tag
Tag <tr>
TRACE
- Enum constant in enum class java.lang.
System.Logger.Level
TRACE
level: usually used to log diagnostic information.
TRACE_ALL
- Static variable in interface com.sun.jdi.
VirtualMachine
All tracing is enabled.
TRACE_EVENTS
- Static variable in interface com.sun.jdi.
VirtualMachine
Tracing enabled for internal event handling.
TRACE_NONE
- Static variable in interface com.sun.jdi.
VirtualMachine
All tracing is disabled.
TRACE_OBJREFS
- Static variable in interface com.sun.jdi.
VirtualMachine
Tracing enabled for internal management of object references.
TRACE_RECEIVES
- Static variable in interface com.sun.jdi.
VirtualMachine
Tracing enabled for JDWP packets received from target VM.
TRACE_REFTYPES
- Static variable in interface com.sun.jdi.
VirtualMachine
Tracing enabled for internal management of reference types.
TRACE_SENDS
- Static variable in interface com.sun.jdi.
VirtualMachine
Tracing enabled for JDWP packets sent to target VM.
Track
- Class in
javax.sound.midi
A MIDI track is an independent stream of MIDI events (time-stamped MIDI data)
 that can be stored along with other tracks in a standard MIDI file.
TRACK
- Static variable in class java.awt.event.
AdjustmentEvent
The absolute tracking adjustment type.
trackBuffer
- Variable in class javax.swing.plaf.basic.
BasicSliderUI
The distance that the track is from the side of the control
trackColor
- Variable in class javax.swing.plaf.basic.
BasicScrollBarUI
Track color
tracker
- Static variable in class javax.swing.
ImageIcon
Deprecated.
since 1.8
trackHighlight
- Variable in class javax.swing.plaf.basic.
BasicScrollBarUI
Track highlight
trackHighlightColor
- Variable in class javax.swing.plaf.basic.
BasicScrollBarUI
Track highlight color
TRACKING
- Static variable in class java.awt.font.
TextAttribute
Attribute key to control tracking.
TRACKING_LOOSE
- Static variable in class java.awt.font.
TextAttribute
Perform loose tracking.
TRACKING_TIGHT
- Static variable in class java.awt.font.
TextAttribute
Perform tight tracking.
trackListener
- Variable in class javax.swing.plaf.basic.
BasicScrollBarUI
Track listener
trackListener
- Variable in class javax.swing.plaf.basic.
BasicSliderUI
Track listener
TrackListener()
- Constructor for class javax.swing.plaf.basic.
BasicScrollBarUI.TrackListener
Constructs a
TrackListener
.
TrackListener()
- Constructor for class javax.swing.plaf.basic.
BasicSliderUI.TrackListener
Constructs a
TrackListener
.
trackRect
- Variable in class javax.swing.plaf.basic.
BasicScrollBarUI
Track rectangle
trackRect
- Variable in class javax.swing.plaf.basic.
BasicSliderUI
Track rectangle
tracks
- Variable in class javax.sound.midi.
Sequence
The MIDI tracks in this sequence.
trackWidth
- Static variable in class javax.swing.plaf.metal.
MetalSliderUI
The width of a track.
TRADITIONAL_CHINESE
- Static variable in class java.util.
Locale
Useful constant for language.
TRADITIONAL_HANZI
- Static variable in class java.awt.im.
InputSubset
Constant for all Han characters used in writing Traditional Chinese,
 including a subset of the CJK unified ideographs as well as Traditional
 Chinese Han characters that may be defined as surrogate characters.
TRAILER_FIELD_BC
- Static variable in class java.security.spec.
PSSParameterSpec
The
TrailerFieldBC
constant as defined in the PKCS #1 standard.
trailing(int)
- Static method in class java.awt.font.
TextHitInfo
Creates a hit on the trailing edge of the character at
 the specified
charIndex
.
TRAILING
- Enum constant in enum class javax.swing.
GroupLayout.Alignment
Indicates the elements should be aligned to the end of the
 region.
TRAILING
- Static variable in class java.awt.
FlowLayout
This value indicates that each row of components
 should be justified to the trailing edge of the container's
 orientation, for example, to the right in left-to-right orientations.
TRAILING
- Static variable in class javax.swing.border.
TitledBorder
Position title text at the right side of the border line
  for left to right orientation, at the left side of the
  border line for right to left orientation.
TRAILING
- Static variable in interface javax.swing.
SwingConstants
Identifies the trailing edge of text for use with left-to-right
 and right-to-left languages.
TRAILING_ZEROS_COUNT
- Static variable in class jdk.incubator.vector.
VectorOperators
Produce
numberOfTrailingZeros(a)
TRANSACTION_NONE
- Static variable in interface java.sql.
Connection
A constant indicating that transactions are not supported.
TRANSACTION_READ_COMMITTED
- Static variable in interface java.sql.
Connection
A constant indicating that
 dirty reads are prevented; non-repeatable reads and phantom
 reads can occur.
TRANSACTION_READ_UNCOMMITTED
- Static variable in interface java.sql.
Connection
A constant indicating that
 dirty reads, non-repeatable reads and phantom reads can occur.
TRANSACTION_REPEATABLE_READ
- Static variable in interface java.sql.
Connection
A constant indicating that
 dirty reads and non-repeatable reads are prevented; phantom
 reads can occur.
TRANSACTION_SERIALIZABLE
- Static variable in interface java.sql.
Connection
A constant indicating that
 dirty reads, non-repeatable reads and phantom reads are prevented.
TransactionalWriter
- Interface in
javax.sql.rowset.spi
A specialized interface that facilitates an extension of the standard
SyncProvider
abstract class so that it has finer grained
 transaction control.
transfer(E)
- Method in class java.util.concurrent.
LinkedTransferQueue
Transfers the element to a consumer, waiting if necessary to do so.
transfer(E)
- Method in interface java.util.concurrent.
TransferQueue
Transfers the element to a consumer, waiting if necessary to do so.
transferable
- Variable in class java.awt.dnd.
DropTargetContext.TransferableProxy
The encapsulated
Transferable
object.
Transferable
- Interface in
java.awt.datatransfer
Defines the interface for classes that can be used to provide data for a
 transfer operation.
transferablesFlavorsChanged()
- Method in class java.awt.dnd.
DragSourceContext
Notifies the peer that the
Transferable
's
DataFlavor
s have changed.
transferFocus()
- Method in class java.awt.
Component
Transfers the focus to the next component, as though this Component were
 the focus owner.
transferFocusBackward()
- Method in class java.awt.
Component
Transfers the focus to the previous component, as though this Component
 were the focus owner.
transferFocusDownCycle()
- Method in class java.awt.
Container
Transfers the focus down one focus traversal cycle.
transferFocusUpCycle()
- Method in class java.awt.
Component
Transfers the focus up one focus traversal cycle.
transferFrom(ReadableByteChannel, long, long)
- Method in class java.nio.channels.
FileChannel
Transfers bytes into this channel's file from the given readable byte
 channel.
TransferHandler
- Class in
javax.swing
This class is used to handle the transfer of a
Transferable
to and from Swing components.
TransferHandler()
- Constructor for class javax.swing.
TransferHandler
Convenience constructor for subclasses.
TransferHandler(String)
- Constructor for class javax.swing.
TransferHandler
Constructs a transfer handler that can transfer a Java Bean property
 from one component to another via the clipboard or a drag and drop
 operation.
TransferHandler.DropLocation
- Class in
javax.swing
Represents a location where dropped data should be inserted.
TransferHandler.TransferSupport
- Class in
javax.swing
This class encapsulates all relevant details of a clipboard
 or drag and drop transfer, and also allows for customizing
 aspects of the drag and drop experience.
TransferQueue<E>
- Interface in
java.util.concurrent
A
BlockingQueue
in which producers may wait for consumers
 to receive elements.
Transferring data
- Search tag in class java.nio.Buffer
Section
TransferSupport(Component, Transferable)
- Constructor for class javax.swing.
TransferHandler.TransferSupport
Create a
TransferSupport
with
isDrop()
false
for the given component and
Transferable
.
transferTo(long, long, WritableByteChannel)
- Method in class java.nio.channels.
FileChannel
Transfers bytes from this channel's file to the given writable byte
 channel.
transferTo(OutputStream)
- Method in class java.io.
InputStream
Reads all bytes from this input stream and writes the bytes to the
 given output stream in the order that they are read.
transferTo(OutputStream)
- Method in class java.util.zip.
ZipInputStream
Reads all bytes from this input stream for the current ZIP entry
 and writes the bytes to the given output stream in the order that they
 are read.
transferTo(Writer)
- Method in class java.io.
Reader
Reads all characters from this reader and writes the characters to the
 given writer in the order that they are read.
transferType
- Variable in class java.awt.image.
ColorModel
Data type of the array used to represent pixel values.
transform(double[], int, double[], int, int)
- Method in class java.awt.geom.
AffineTransform
Transforms an array of double precision coordinates by this transform.
transform(double[], int, float[], int, int)
- Method in class java.awt.geom.
AffineTransform
Transforms an array of double precision coordinates by this transform
 and stores the results into an array of floats.
transform(float[], int, double[], int, int)
- Method in class java.awt.geom.
AffineTransform
Transforms an array of floating point coordinates by this transform
 and stores the results into an array of doubles.
transform(float[], int, float[], int, int)
- Method in class java.awt.geom.
AffineTransform
Transforms an array of floating point coordinates by this transform.
transform(AffineTransform)
- Method in class java.awt.geom.
Area
Transforms the geometry of this
Area
using the specified
AffineTransform
.
transform(AffineTransform)
- Method in class java.awt.geom.
Path2D.Double
Transforms the geometry of this path using the specified
AffineTransform
.
transform(AffineTransform)
- Method in class java.awt.geom.
Path2D.Float
Transforms the geometry of this path using the specified
AffineTransform
.
transform(AffineTransform)
- Method in class java.awt.geom.
Path2D
Transforms the geometry of this path using the specified
AffineTransform
.
transform(AffineTransform)
- Method in class java.awt.
Graphics2D
Composes an
AffineTransform
object with the
Transform
in this
Graphics2D
according
 to the rule last-specified-first-applied.
transform(Point2D[], int, Point2D[], int, int)
- Method in class java.awt.geom.
AffineTransform
Transforms an array of point objects by this transform.
transform(Point2D, Point2D)
- Method in class java.awt.geom.
AffineTransform
Transforms the specified
ptSrc
and stores the result
 in
ptDst
.
transform(ClassLoader, String, Class<?>, ProtectionDomain, byte[])
- Method in interface java.lang.instrument.
ClassFileTransformer
Transforms the given class file and returns a new replacement class file.
transform(MethodHandle)
- Method in interface jdk.dynalink.linker.
MethodHandleTransformer
Transforms a method handle.
transform(MethodHandle)
- Method in class jdk.dynalink.linker.support.
DefaultInternalObjectFilter
transform(Module, ClassLoader, String, Class<?>, ProtectionDomain, byte[])
- Method in interface java.lang.instrument.
ClassFileTransformer
Transforms the given class file and returns a new replacement class file.
transform(Function<? super String, ? extends R>)
- Method in class java.lang.
String
This method allows the application of a function to
this
string.
transform(Data, XMLCryptoContext)
- Method in interface javax.xml.crypto.dsig.
Transform
Transforms the specified data using the underlying transform algorithm.
transform(Data, XMLCryptoContext, OutputStream)
- Method in interface javax.xml.crypto.dsig.
Transform
Transforms the specified data using the underlying transform algorithm.
transform(Source, Result)
- Method in class javax.xml.transform.
Transformer
Transform the XML
Source
to a
Result
.
Transform
- Interface in
javax.xml.crypto.dsig
A representation of the XML
Transform
element as
 defined in the
W3C Recommendation for XML-Signature Syntax and Processing
.
TRANSFORM
- Static variable in class java.awt.font.
TextAttribute
Attribute key for the transform of a font.
TransformAttribute
- Class in
java.awt.font
The
TransformAttribute
class provides an immutable
 wrapper for a transform so that it is safe to use as an attribute.
TransformAttribute(AffineTransform)
- Constructor for class java.awt.font.
TransformAttribute
Wraps the specified transform.
Transformer
- Class in
javax.xml.transform
An instance of this abstract class can transform a
 source tree into a result tree.
Transformer()
- Constructor for class javax.xml.transform.
Transformer
Default constructor is protected on purpose.
TransformerConfigurationException
- Exception Class in
javax.xml.transform
Indicates a serious configuration error.
TransformerConfigurationException()
- Constructor for exception class javax.xml.transform.
TransformerConfigurationException
Create a new
TransformerConfigurationException
with no
 detail message.
TransformerConfigurationException(String)
- Constructor for exception class javax.xml.transform.
TransformerConfigurationException
Create a new
TransformerConfigurationException
with
 the
String
specified as an error message.
TransformerConfigurationException(String, Throwable)
- Constructor for exception class javax.xml.transform.
TransformerConfigurationException
Create a new
TransformerConfigurationException
with the
 given
Exception
base cause and detail message.
TransformerConfigurationException(String, SourceLocator)
- Constructor for exception class javax.xml.transform.
TransformerConfigurationException
Create a new TransformerConfigurationException from a message and a Locator.
TransformerConfigurationException(String, SourceLocator, Throwable)
- Constructor for exception class javax.xml.transform.
TransformerConfigurationException
Wrap an existing exception in a TransformerConfigurationException.
TransformerConfigurationException(Throwable)
- Constructor for exception class javax.xml.transform.
TransformerConfigurationException
Create a new
TransformerConfigurationException
with a
 given
Exception
base cause of the error.
TransformerException
- Exception Class in
javax.xml.transform
This class specifies an exceptional condition that occurred
 during the transformation process.
TransformerException(String)
- Constructor for exception class javax.xml.transform.
TransformerException
Create a new TransformerException.
TransformerException(String, Throwable)
- Constructor for exception class javax.xml.transform.
TransformerException
Wrap an existing exception in a TransformerException.
TransformerException(String, SourceLocator)
- Constructor for exception class javax.xml.transform.
TransformerException
Create a new TransformerException from a message and a Locator.
TransformerException(String, SourceLocator, Throwable)
- Constructor for exception class javax.xml.transform.
TransformerException
Wrap an existing exception in a TransformerException.
TransformerException(Throwable)
- Constructor for exception class javax.xml.transform.
TransformerException
Create a new TransformerException wrapping an existing exception.
TransformerFactory
- Class in
javax.xml.transform
A TransformerFactory instance can be used to create
Transformer
and
Templates
objects.
TransformerFactory()
- Constructor for class javax.xml.transform.
TransformerFactory
Default constructor is protected on purpose.
TransformerFactoryConfigurationError
- Exception Class in
javax.xml.transform
Thrown when a problem with configuration with the Transformer Factories
 exists.
TransformerFactoryConfigurationError()
- Constructor for exception class javax.xml.transform.
TransformerFactoryConfigurationError
Create a new
TransformerFactoryConfigurationError
with no
 detail message.
TransformerFactoryConfigurationError(Exception)
- Constructor for exception class javax.xml.transform.
TransformerFactoryConfigurationError
Create a new
TransformerFactoryConfigurationError
with a
 given
Exception
base cause of the error.
TransformerFactoryConfigurationError(Exception, String)
- Constructor for exception class javax.xml.transform.
TransformerFactoryConfigurationError
Create a new
TransformerFactoryConfigurationError
with the
 given
Exception
base cause and detail message.
TransformerFactoryConfigurationError(String)
- Constructor for exception class javax.xml.transform.
TransformerFactoryConfigurationError
Create a new
TransformerFactoryConfigurationError
with
 the
String
specified as an error message.
TransformerHandler
- Interface in
javax.xml.transform.sax
A TransformerHandler
 listens for SAX ContentHandler parse events and transforms
 them to a Result.
TransformException
- Exception Class in
javax.xml.crypto.dsig
Indicates an exceptional condition that occurred while executing a
 transform algorithm.
TransformException()
- Constructor for exception class javax.xml.crypto.dsig.
TransformException
Constructs a new
TransformException
with
null
as its detail message.
TransformException(String)
- Constructor for exception class javax.xml.crypto.dsig.
TransformException
Constructs a new
TransformException
with the specified
 detail message.
TransformException(String, Throwable)
- Constructor for exception class javax.xml.crypto.dsig.
TransformException
Constructs a new
TransformException
with the
 specified detail message and cause.
TransformException(Throwable)
- Constructor for exception class javax.xml.crypto.dsig.
TransformException
Constructs a new
TransformException
with the specified
 cause and a detail message of
(cause==null ? null : cause.toString())
(which typically contains the class and detail message of
cause
).
TransformParameterSpec
- Interface in
javax.xml.crypto.dsig.spec
A specification of algorithm parameters for a
Transform
algorithm.
TransformService
- Class in
javax.xml.crypto.dsig
A Service Provider Interface for transform and canonicalization algorithms.
TransformService()
- Constructor for class javax.xml.crypto.dsig.
TransformService
Default constructor, for invocation by subclasses.
Transient
- Annotation Interface in
java.beans
Indicates that an attribute called "transient"
 should be declared with the given
value
when the
Introspector
constructs
 a
PropertyDescriptor
or
EventSetDescriptor
classes associated with the annotated code element.
TRANSIENT
- Enum constant in enum class java.lang.reflect.
AccessFlag
The access flag
ACC_TRANSIENT
, corresponding to the
 source modifier
transient
, with a
 mask value of
0x0080
.
TRANSIENT
- Enum constant in enum class javax.lang.model.element.
Modifier
The modifier
transient
TRANSIENT
- Static variable in class java.lang.reflect.
Modifier
The
int
value representing the
transient
modifier.
TRANSIENT
- Static variable in class javax.accessibility.
AccessibleState
Indicates this object is transient.
TransitionFrom
- Annotation Interface in
jdk.jfr
Event field annotation, specifies that the event transitioned from a thread.
TransitionTo
- Annotation Interface in
jdk.jfr
Event field annotation, specifies that the event will soon transition to a thread.
TRANSITIVE
- Enum constant in enum class java.lang.module.
ModuleDescriptor.Requires.Modifier
The dependence causes any module which depends on the
current
 module
to have an implicitly declared dependence on the module
 named by the
Requires
.
TRANSITIVE
- Enum constant in enum class java.lang.reflect.
AccessFlag
The module requires flag
ACC_TRANSITIVE
with a mask
 value of
0x0020
.
translate(double, double)
- Method in class java.awt.geom.
AffineTransform
Concatenates this transform with a translation transformation.
translate(double, double)
- Method in class java.awt.
Graphics2D
Concatenates the current
Graphics2D Transform
with a translation transform.
translate(int, int)
- Method in class java.awt.
Event
Deprecated.
NOTE:
The
Event
class is obsolete and is
 available only for backwards compatibility.
translate(int, int)
- Method in class java.awt.
Graphics
Translates the origin of the graphics context to the point
 (
x
,
y
) in the current coordinate system.
translate(int, int)
- Method in class java.awt.
Graphics2D
Translates the origin of the
Graphics2D
context to the
 point (
x
,
y
) in the current coordinate system.
translate(int, int)
- Method in class java.awt.
Point
Translates this point, at location
(x,y)
,
 by
dx
along the
x
axis and
dy
along the
y
axis so that it now represents the point
(x+dx,y+dy)
.
translate(int, int)
- Method in class java.awt.
Polygon
Translates the vertices of the
Polygon
by
deltaX
along the x axis and by
deltaY
along the y axis.
translate(int, int)
- Method in class java.awt.
Rectangle
Translates this
Rectangle
the indicated distance,
 to the right along the X coordinate axis, and
 downward along the Y coordinate axis.
translate(int, int)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.translate
.
translateEscapes()
- Method in class java.lang.
String
Returns a string whose value is this string, with escape sequences
 translated as if in a string literal.
translateHTMLToCSS(AttributeSet)
- Method in class javax.swing.text.html.
StyleSheet
Converts a set of HTML attributes to an equivalent
 set of CSS attributes.
translateKey(Key)
- Method in class java.security.
KeyFactory
Translates a key object, whose provider may be unknown or potentially
 untrusted, into a corresponding key object of this key factory.
translateKey(SecretKey)
- Method in class javax.crypto.
SecretKeyFactory
Translates a key object, whose provider may be unknown or potentially
 untrusted, into a corresponding key object of this secret-key factory.
translatePoint(int, int)
- Method in class java.awt.event.
MouseEvent
Translates the event's coordinates to a new position
 by adding specified
x
(horizontal) and
y
(vertical) offsets.
Translator
- Class in
com.sun.java.accessibility.util
The
Translator
class provides a translation to interface
Accessible
for objects that do not implement interface
Accessible
.
Translator()
- Constructor for class com.sun.java.accessibility.util.
Translator
Create a new
Translator
.
Translator(Object)
- Constructor for class com.sun.java.accessibility.util.
Translator
Create a new
Translator
with the source object o.
TRANSLUCENT
- Enum constant in enum class java.awt.
GraphicsDevice.WindowTranslucency
Represents support in the underlying system for windows all of
 the pixels of which have the same alpha value between or including
 0.0 and 1.0.
TRANSLUCENT
- Static variable in interface java.awt.
Transparency
Represents image data that contains or might contain arbitrary
 alpha values between and including 0.0 and 1.0.
transmit(ByteBuffer, ByteBuffer)
- Method in class javax.smartcardio.
CardChannel
Transmits the command APDU stored in the command ByteBuffer and receives
 the response APDU in the response ByteBuffer.
transmit(CommandAPDU)
- Method in class javax.smartcardio.
CardChannel
Transmits the specified command APDU to the Smart Card and returns the
 response APDU.
transmitControlCommand(int, byte[])
- Method in class javax.smartcardio.
Card
Transmits a control command to the terminal device.
Transmitter
- Interface in
javax.sound.midi
A
Transmitter
sends
MidiEvent
objects to one or more
Receivers
.
transparency
- Variable in class java.awt.image.
VolatileImage
The transparency value with which this image was created.
Transparency
- Interface in
java.awt
The
Transparency
interface defines the common transparency
 modes for implementing classes.
TRANSPARENCY_ENABLED_PROPERTY
- Static variable in class javax.swing.colorchooser.
AbstractColorChooserPanel
Identifies that the transparency of the color (alpha value) can be
 selected
transport()
- Method in interface com.sun.jdi.connect.
Connector
Returns the transport mechanism used by this connector to establish
 connections with a target VM.
Transport
- Interface in
com.sun.jdi.connect
A method of communication between a debugger and a target VM.
TRANSPORT_AND_MAP_SYMBOLS
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Transport And Map Symbols" Unicode character block.
TransportService
- Class in
com.sun.jdi.connect.spi
A transport service for connections between a debugger and
 a target VM.
TransportService()
- Constructor for class com.sun.jdi.connect.spi.
TransportService
Constructor for subclasses to call.
TransportService.Capabilities
- Class in
com.sun.jdi.connect.spi
The transport service capabilities.
TransportService.ListenKey
- Class in
com.sun.jdi.connect.spi
A
listen key
.
TransportTimeoutException
- Exception Class in
com.sun.jdi.connect
This exception may be thrown as a result of a timeout
 when attaching to a target VM, or waiting to accept a
 connection from a target VM.
TransportTimeoutException()
- Constructor for exception class com.sun.jdi.connect.
TransportTimeoutException
Constructs a
TransportTimeoutException
with no detail
 message.
TransportTimeoutException(String)
- Constructor for exception class com.sun.jdi.connect.
TransportTimeoutException
Constructs a
TransportTimeoutException
with the
 specified detail message.
TRAVERSAL
- Enum constant in enum class java.awt.event.
FocusEvent.Cause
A focus traversal action with unspecified direction.
TRAVERSAL_BACKWARD
- Enum constant in enum class java.awt.event.
FocusEvent.Cause
A backward focus traversal action.
TRAVERSAL_DOWN
- Enum constant in enum class java.awt.event.
FocusEvent.Cause
A down-cycle focus traversal action.
TRAVERSAL_FORWARD
- Enum constant in enum class java.awt.event.
FocusEvent.Cause
A forward focus traversal action.
TRAVERSAL_UP
- Enum constant in enum class java.awt.event.
FocusEvent.Cause
An up-cycle focus traversal action.
TrayIcon
- Class in
java.awt
A
TrayIcon
object represents a tray icon that can be
 added to the
system tray
.
TrayIcon(Image)
- Constructor for class java.awt.
TrayIcon
Creates a
TrayIcon
with the specified image.
TrayIcon(Image, String)
- Constructor for class java.awt.
TrayIcon
Creates a
TrayIcon
with the specified image and
 tooltip text.
TrayIcon(Image, String, PopupMenu)
- Constructor for class java.awt.
TrayIcon
Creates a
TrayIcon
with the specified image,
 tooltip and popup menu.
TrayIcon.MessageType
- Enum Class in
java.awt
The message type determines which icon will be displayed in the
 caption of the message, and a possible system sound a message
 may generate upon showing.
tree
- Variable in class javax.swing.plaf.basic.
BasicTreeUI
Component that we're going to be drawing into.
tree
- Variable in class javax.swing.tree.
DefaultTreeCellEditor
JTree
instance listening too.
Tree
- Interface in
com.sun.source.tree
Common interface for all nodes in an abstract syntax tree.
TREE
- Static variable in class javax.accessibility.
AccessibleRole
An object used to present hierarchical information to the user.
TREE
- Static variable in class javax.swing.plaf.synth.
Region
Tree region.
TREE_CELL
- Static variable in class javax.swing.plaf.synth.
Region
Region of the Tree for one cell.
TREE_MODEL_PROPERTY
- Static variable in class javax.swing.
JTree
Bound property name for
treeModel
.
Tree.Kind
- Enum Class in
com.sun.source.tree
Enumerates all kinds of trees.
TreeCancelEditingAction(String)
- Constructor for class javax.swing.plaf.basic.
BasicTreeUI.TreeCancelEditingAction
Constructs a new instance of
TreeCancelEditingAction
.
TreeCellEditor
- Interface in
javax.swing.tree
Adds to CellEditor the extensions necessary to configure an editor
 in a tree.
TreeCellRenderer
- Interface in
javax.swing.tree
Defines the requirements for an object that displays a tree node.
treeCollapsed(TreeExpansionEvent)
- Method in interface javax.swing.event.
TreeExpansionListener
Called whenever an item in the tree has been collapsed.
treeCollapsed(TreeExpansionEvent)
- Method in class javax.swing.
JTree.AccessibleJTree
Tree Collapsed notification.
treeCollapsed(TreeExpansionEvent)
- Method in class javax.swing.plaf.basic.
BasicTreeUI.TreeExpansionHandler
Called whenever an item in the tree has been collapsed.
TreeControlIcon(boolean)
- Constructor for class javax.swing.plaf.metal.
MetalIconFactory.TreeControlIcon
Constructs an instance of
TreeControlIcon
.
treeDidChange()
- Method in class javax.swing.
JTree
Sent when the tree has changed enough that we need to resize
 the bounds, but not enough that we need to remove the
 expanded node set (e.g nodes were expanded or collapsed, or
 nodes were inserted into the tree).
treeExpanded(TreeExpansionEvent)
- Method in interface javax.swing.event.
TreeExpansionListener
Called whenever an item in the tree has been expanded.
treeExpanded(TreeExpansionEvent)
- Method in class javax.swing.
JTree.AccessibleJTree
Tree Model Expansion notification.
treeExpanded(TreeExpansionEvent)
- Method in class javax.swing.plaf.basic.
BasicTreeUI.TreeExpansionHandler
Called whenever an item in the tree has been expanded.
TREEEXPANSION
- Static variable in class com.sun.java.accessibility.util.
EventID
Maps to Swing TreeExpansion support (i.e., TreeExpansionListener and
 TreeExpansionEvent)
TreeExpansionEvent
- Class in
javax.swing.event
An event used to identify a single path in a tree.
TreeExpansionEvent(Object, TreePath)
- Constructor for class javax.swing.event.
TreeExpansionEvent
Constructs a TreeExpansionEvent object.
TreeExpansionHandler()
- Constructor for class javax.swing.plaf.basic.
BasicTreeUI.TreeExpansionHandler
Constructs a
TreeExpansionHandler
.
TreeExpansionListener
- Interface in
javax.swing.event
The listener that's notified when a tree expands or collapses
 a node.
TreeFolderIcon()
- Constructor for class javax.swing.plaf.metal.
MetalIconFactory.TreeFolderIcon
Constructs a
TreeFolderIcon
.
TreeHomeAction(int, String)
- Constructor for class javax.swing.plaf.basic.
BasicTreeUI.TreeHomeAction
Constructs a new instance of
TreeHomeAction
.
TreeIncrementAction(int, String)
- Constructor for class javax.swing.plaf.basic.
BasicTreeUI.TreeIncrementAction
Constructs a new instance of
TreeIncrementAction
.
TreeLeafIcon()
- Constructor for class javax.swing.plaf.metal.
MetalIconFactory.TreeLeafIcon
Constructs a
TreeLeafIcon
.
TreeMap<K,
V>
- Class in
java.util
A Red-Black tree based
NavigableMap
implementation.
TreeMap()
- Constructor for class java.util.
TreeMap
Constructs a new, empty tree map, using the natural ordering of its
 keys.
TreeMap(Comparator<? super K>)
- Constructor for class java.util.
TreeMap
Constructs a new, empty tree map, ordered according to the given
 comparator.
TreeMap(Map<? extends K, ? extends V>)
- Constructor for class java.util.
TreeMap
Constructs a new tree map containing the same mappings as the given
 map, ordered according to the
natural ordering
of its keys.
TreeMap(SortedMap<K, ? extends V>)
- Constructor for class java.util.
TreeMap
Constructs a new tree map containing the same mappings and
 using the same ordering as the specified sorted map.
treeModel
- Variable in class javax.swing.
JTree
The model that defines the tree displayed by this object.
treeModel
- Variable in class javax.swing.plaf.basic.
BasicTreeUI
Used to determine what to display.
treeModel
- Variable in class javax.swing.tree.
AbstractLayoutCache
Model providing information.
TreeModel
- Interface in
javax.swing.tree
The model used by
JTree
.
TREEMODEL
- Static variable in class com.sun.java.accessibility.util.
EventID
Maps to Swing TreeModel support (i.e., TreeModelListener and
 TreeModelEvent)
TreeModelEvent
- Class in
javax.swing.event
Encapsulates information describing changes to a tree model, and
 used to notify tree model listeners of the change.
TreeModelEvent(Object, Object[])
- Constructor for class javax.swing.event.
TreeModelEvent
Used to create an event when the node structure has changed in some way,
 identifying the path to the root of a modified subtree as an array of
 Objects.
TreeModelEvent(Object, Object[], int[], Object[])
- Constructor for class javax.swing.event.
TreeModelEvent
Used to create an event when nodes have been changed, inserted, or
 removed, identifying the path to the parent of the modified items as
 an array of Objects.
TreeModelEvent(Object, TreePath)
- Constructor for class javax.swing.event.
TreeModelEvent
Used to create an event when the node structure has changed in some way,
 identifying the path to the root of the modified subtree as a TreePath
 object.
TreeModelEvent(Object, TreePath, int[], Object[])
- Constructor for class javax.swing.event.
TreeModelEvent
Used to create an event when nodes have been changed, inserted, or
 removed, identifying the path to the parent of the modified items as
 a TreePath object.
TreeModelHandler()
- Constructor for class javax.swing.
JTree.TreeModelHandler
Constructs a
TreeModelHandler
.
TreeModelHandler()
- Constructor for class javax.swing.plaf.basic.
BasicTreeUI.TreeModelHandler
Constructs a
TreeModelHandler
.
treeModelListener
- Variable in class javax.swing.
JTree
Updates the
expandedState
.
TreeModelListener
- Interface in
javax.swing.event
Defines the interface for an object that listens
 to changes in a TreeModel.
TreeNode
- Interface in
javax.swing.tree
Defines the requirements for an object that can be used as a
 tree node in a JTree.
treeNodesChanged(TreeModelEvent)
- Method in interface javax.swing.event.
TreeModelListener
Invoked after a node (or a set of siblings) has changed in some
 way.
treeNodesChanged(TreeModelEvent)
- Method in class javax.swing.
JTree.AccessibleJTree
Tree Model Node change notification.
treeNodesChanged(TreeModelEvent)
- Method in class javax.swing.
JTree.TreeModelHandler
treeNodesChanged(TreeModelEvent)
- Method in class javax.swing.plaf.basic.
BasicTreeUI.TreeModelHandler
treeNodesChanged(TreeModelEvent)
- Method in class javax.swing.tree.
AbstractLayoutCache
Invoked after a node (or a set of siblings) has changed in some
 way.
treeNodesChanged(TreeModelEvent)
- Method in class javax.swing.tree.
FixedHeightLayoutCache
Invoked after a node (or a set of siblings) has changed in some
 way.
treeNodesChanged(TreeModelEvent)
- Method in class javax.swing.tree.
VariableHeightLayoutCache
Invoked after a node (or a set of siblings) has changed in some
 way.
treeNodesInserted(TreeModelEvent)
- Method in interface javax.swing.event.
TreeModelListener
Invoked after nodes have been inserted into the tree.
treeNodesInserted(TreeModelEvent)
- Method in class javax.swing.
JTree.AccessibleJTree
Tree Model Node change notification.
treeNodesInserted(TreeModelEvent)
- Method in class javax.swing.
JTree.TreeModelHandler
treeNodesInserted(TreeModelEvent)
- Method in class javax.swing.plaf.basic.
BasicTreeUI.TreeModelHandler
treeNodesInserted(TreeModelEvent)
- Method in class javax.swing.tree.
AbstractLayoutCache
Invoked after nodes have been inserted into the tree.
treeNodesInserted(TreeModelEvent)
- Method in class javax.swing.tree.
FixedHeightLayoutCache
Invoked after nodes have been inserted into the tree.
treeNodesInserted(TreeModelEvent)
- Method in class javax.swing.tree.
VariableHeightLayoutCache
Invoked after nodes have been inserted into the tree.
treeNodesRemoved(TreeModelEvent)
- Method in interface javax.swing.event.
TreeModelListener
Invoked after nodes have been removed from the tree.
treeNodesRemoved(TreeModelEvent)
- Method in class javax.swing.
JTree.AccessibleJTree
Tree Model Node change notification.
treeNodesRemoved(TreeModelEvent)
- Method in class javax.swing.
JTree.TreeModelHandler
treeNodesRemoved(TreeModelEvent)
- Method in class javax.swing.plaf.basic.
BasicTreeUI.TreeModelHandler
treeNodesRemoved(TreeModelEvent)
- Method in class javax.swing.tree.
AbstractLayoutCache
Invoked after nodes have been removed from the tree.
treeNodesRemoved(TreeModelEvent)
- Method in class javax.swing.tree.
FixedHeightLayoutCache
Invoked after nodes have been removed from the tree.
treeNodesRemoved(TreeModelEvent)
- Method in class javax.swing.tree.
VariableHeightLayoutCache
Invoked after nodes have been removed from the tree.
TreePageAction(int, String)
- Constructor for class javax.swing.plaf.basic.
BasicTreeUI.TreePageAction
Constructs a new instance of
TreePageAction
.
TreePath
- Class in
com.sun.source.util
A path of tree nodes, typically used to represent the sequence of ancestor
 nodes of a tree node up to the top-level
CompilationUnitTree
node.
TreePath
- Class in
javax.swing.tree
TreePath
represents an array of objects that uniquely
 identify the path to a node in a tree.
TreePath()
- Constructor for class javax.swing.tree.
TreePath
Creates an empty
TreePath
.
TreePath(CompilationUnitTree)
- Constructor for class com.sun.source.util.
TreePath
Creates a TreePath for a root node.
TreePath(TreePath, Tree)
- Constructor for class com.sun.source.util.
TreePath
Creates a TreePath for a child node.
TreePath(Object)
- Constructor for class javax.swing.tree.
TreePath
Creates a
TreePath
containing a single element.
TreePath(Object[])
- Constructor for class javax.swing.tree.
TreePath
Creates a
TreePath
from an array.
TreePath(Object[], int)
- Constructor for class javax.swing.tree.
TreePath
Creates a
TreePath
from an array.
TreePath(TreePath, Object)
- Constructor for class javax.swing.tree.
TreePath
Creates a
TreePath
with the specified parent and element.
TreePathScanner<R,
P>
- Class in
com.sun.source.util
A TreeVisitor that visits all the child tree nodes, and provides
 support for maintaining a path for the parent nodes.
TreePathScanner()
- Constructor for class com.sun.source.util.
TreePathScanner
Constructs a
TreePathScanner
.
Trees
- Class in
com.sun.source.util
Bridges JSR 199, JSR 269, and the Tree API.
Trees()
- Constructor for class com.sun.source.util.
Trees
Constructor for subclasses to call.
TreeScanner<R,
P>
- Class in
com.sun.source.util
A TreeVisitor that visits all the child tree nodes.
TreeScanner()
- Constructor for class com.sun.source.util.
TreeScanner
Constructs a
TreeScanner
.
TREESELECTION
- Static variable in class com.sun.java.accessibility.util.
EventID
Maps to Swing TreeSelection support (i.e., TreeSelectionListener and
 TreeSelectionEvent)
TreeSelectionEvent
- Class in
javax.swing.event
An event that characterizes a change in the current
 selection.
TreeSelectionEvent(Object, TreePath[], boolean[], TreePath, TreePath)
- Constructor for class javax.swing.event.
TreeSelectionEvent
Represents a change in the selection of a
TreeSelectionModel
.
TreeSelectionEvent(Object, TreePath, boolean, TreePath, TreePath)
- Constructor for class javax.swing.event.
TreeSelectionEvent
Represents a change in the selection of a
TreeSelectionModel
.
TreeSelectionHandler()
- Constructor for class javax.swing.plaf.basic.
BasicTreeUI.TreeSelectionHandler
Constructs a
TreeSelectionHandler
.
TreeSelectionListener
- Interface in
javax.swing.event
The listener that's notified when the selection in a TreeSelectionModel
 changes.
treeSelectionModel
- Variable in class javax.swing.plaf.basic.
BasicTreeUI
Model maintaining the selection.
treeSelectionModel
- Variable in class javax.swing.tree.
AbstractLayoutCache
Selection model.
TreeSelectionModel
- Interface in
javax.swing.tree
This interface represents the current state of the selection for
 the tree component.
TreeSelectionRedirector()
- Constructor for class javax.swing.
JTree.TreeSelectionRedirector
Constructs a
TreeSelectionRedirector
.
TreeSet<E>
- Class in
java.util
A
NavigableSet
implementation based on a
TreeMap
.
TreeSet()
- Constructor for class java.util.
TreeSet
Constructs a new, empty tree set, sorted according to the
 natural ordering of its elements.
TreeSet(Collection<? extends E>)
- Constructor for class java.util.
TreeSet
Constructs a new tree set containing the elements in the specified
 collection, sorted according to the
natural ordering
of its
 elements.
TreeSet(Comparator<? super E>)
- Constructor for class java.util.
TreeSet
Constructs a new, empty tree set, sorted according to the specified
 comparator.
TreeSet(SortedSet<E>)
- Constructor for class java.util.
TreeSet
Constructs a new tree set containing the same elements and
 using the same ordering as the specified sorted set.
treeState
- Variable in class javax.swing.plaf.basic.
BasicTreeUI
Object responsible for handling sizing and expanded issues.
Tree structure
- Search tag in class java.util.concurrent.StructuredTaskScope
Section
treeStructureChanged(TreeModelEvent)
- Method in interface javax.swing.event.
TreeModelListener
Invoked after the tree has drastically changed structure from a
 given node down.
treeStructureChanged(TreeModelEvent)
- Method in class javax.swing.
JTree.AccessibleJTree
Tree Model structure change change notification.
treeStructureChanged(TreeModelEvent)
- Method in class javax.swing.
JTree.TreeModelHandler
treeStructureChanged(TreeModelEvent)
- Method in class javax.swing.plaf.basic.
BasicTreeUI.TreeModelHandler
treeStructureChanged(TreeModelEvent)
- Method in class javax.swing.tree.
AbstractLayoutCache
Invoked after the tree has drastically changed structure from a
 given node down.
treeStructureChanged(TreeModelEvent)
- Method in class javax.swing.tree.
FixedHeightLayoutCache
Invoked after the tree has drastically changed structure from a
 given node down.
treeStructureChanged(TreeModelEvent)
- Method in class javax.swing.tree.
VariableHeightLayoutCache
Invoked after the tree has drastically changed structure from a
 given node down.
TreeToggleAction(String)
- Constructor for class javax.swing.plaf.basic.
BasicTreeUI.TreeToggleAction
Constructs a new instance of
TreeToggleAction
.
TreeTraverseAction(int, String)
- Constructor for class javax.swing.plaf.basic.
BasicTreeUI.TreeTraverseAction
Constructs a new instance of
TreeTraverseAction
.
TreeUI
- Class in
javax.swing.plaf
Pluggable look and feel interface for JTree.
TreeUI()
- Constructor for class javax.swing.plaf.
TreeUI
Constructor for subclasses to call.
TreeVisitor<R,
P>
- Interface in
com.sun.source.tree
A visitor of trees, in the style of the visitor design pattern.
TreeWalker
- Interface in
org.w3c.dom.traversal
TreeWalker
objects are used to navigate a document tree or
 subtree using the view of the document defined by their
whatToShow
flags and filter (if any).
treeWillCollapse(TreeExpansionEvent)
- Method in interface javax.swing.event.
TreeWillExpandListener
Invoked whenever a node in the tree is about to be collapsed.
treeWillExpand(TreeExpansionEvent)
- Method in interface javax.swing.event.
TreeWillExpandListener
Invoked whenever a node in the tree is about to be expanded.
TreeWillExpandListener
- Interface in
javax.swing.event
The listener that's notified when a tree expands or collapses
 a node.
trim()
- Method in class java.lang.
String
Returns a string whose value is this string, with all leading
 and trailing space removed, where space is defined
 as any character whose codepoint is less than or equal to
'U+0020'
(the space character).
trimEdits(int, int)
- Method in class javax.swing.undo.
UndoManager
Removes edits in the specified range.
trimForLimit()
- Method in class javax.swing.undo.
UndoManager
Reduces the number of queued edits to a range of size limit,
 centered on the index of the next edit.
trimToSize()
- Method in class java.awt.geom.
Path2D.Double
trimToSize()
- Method in class java.awt.geom.
Path2D.Float
trimToSize()
- Method in class java.awt.geom.
Path2D
Trims the capacity of this Path2D instance to its current
 size.
trimToSize()
- Method in class java.lang.
StringBuilder
Attempts to reduce storage used for the character sequence.
trimToSize()
- Method in class java.lang.
StringBuffer
trimToSize()
- Method in class java.util.
ArrayList
Trims the capacity of this
ArrayList
instance to be the
 list's current size.
trimToSize()
- Method in class java.util.
Vector
Trims the capacity of this vector to be the vector's current
 size.
trimToSize()
- Method in class javax.swing.
DefaultListModel
Trims the capacity of this list to be the list's current size.
TRUE
- Static variable in class java.lang.
Boolean
The
Boolean
object corresponding to the primitive
 value
true
.
TRUE
- Static variable in class java.lang.constant.
ConstantDescs
Nominal descriptor representing the constant
Boolean.TRUE
trueCount()
- Method in class jdk.incubator.vector.
VectorMask
Returns the number of mask lanes that are set.
TRUETYPE_FONT
- Static variable in class java.awt.
Font
Identify a font resource of type TRUETYPE.
truncate(long)
- Method in class java.nio.channels.
AsynchronousFileChannel
Truncates this channel's file to the given size.
truncate(long)
- Method in class java.nio.channels.
FileChannel
Truncates this channel's file to the given size.
truncate(long)
- Method in interface java.nio.channels.
SeekableByteChannel
Truncates the entity, to which this channel is connected, to the given
 size.
truncate(long)
- Method in interface java.sql.
Blob
Truncates the
BLOB
value that this
Blob
object represents to be
len
bytes in length.
truncate(long)
- Method in interface java.sql.
Clob
Truncates the
CLOB
value that this
Clob
designates to have a length of
len
characters.
truncate(long)
- Method in class javax.sql.rowset.serial.
SerialBlob
Truncates the
BLOB
value that this
Blob
object represents to be
len
bytes in length.
truncate(long)
- Method in class javax.sql.rowset.serial.
SerialClob
Truncates the
CLOB
value that this
SerialClob
object represents so that it has a length of
len
characters.
TRUNCATE_EXISTING
- Enum constant in enum class java.nio.file.
StandardOpenOption
If the file already exists and it is opened for
StandardOpenOption.WRITE
access, then its length is truncated to 0.
TRUNCATED
- Static variable in class javax.accessibility.
AccessibleState
A state indicating that text is truncated by a bounding rectangle and
 that some of the text is not displayed on the screen.
truncatedTo(TemporalUnit)
- Method in class java.time.
Duration
Returns a copy of this
Duration
truncated to the specified unit.
truncatedTo(TemporalUnit)
- Method in class java.time.
Instant
Returns a copy of this
Instant
truncated to the specified unit.
truncatedTo(TemporalUnit)
- Method in class java.time.
LocalDateTime
Returns a copy of this
LocalDateTime
with the time truncated.
truncatedTo(TemporalUnit)
- Method in class java.time.
LocalTime
Returns a copy of this
LocalTime
with the time truncated.
truncatedTo(TemporalUnit)
- Method in class java.time.
OffsetDateTime
Returns a copy of this
OffsetDateTime
with the time truncated.
truncatedTo(TemporalUnit)
- Method in class java.time.
OffsetTime
Returns a copy of this
OffsetTime
with the time truncated.
truncatedTo(TemporalUnit)
- Method in class java.time.
ZonedDateTime
Returns a copy of this
ZonedDateTime
with the time truncated.
TrustAnchor
- Class in
java.security.cert
A trust anchor or most-trusted Certification Authority (CA).
TrustAnchor(String, PublicKey, byte[])
- Constructor for class java.security.cert.
TrustAnchor
Creates an instance of
TrustAnchor
where the
 most-trusted CA is specified as a distinguished name and public key.
TrustAnchor(X509Certificate, byte[])
- Constructor for class java.security.cert.
TrustAnchor
Creates an instance of
TrustAnchor
with the specified
X509Certificate
and optional name constraints, which
 are intended to be used as additional constraints when validating
 an X.509 certification path.
TrustAnchor(X500Principal, PublicKey, byte[])
- Constructor for class java.security.cert.
TrustAnchor
Creates an instance of
TrustAnchor
where the
 most-trusted CA is specified as an X500Principal and public key.
TrustedCertificateEntry(Certificate)
- Constructor for class java.security.
KeyStore.TrustedCertificateEntry
Constructs a
TrustedCertificateEntry
with a
 trusted
Certificate
.
TrustedCertificateEntry(Certificate, Set<KeyStore.Entry.Attribute>)
- Constructor for class java.security.
KeyStore.TrustedCertificateEntry
Constructs a
TrustedCertificateEntry
with a
 trusted
Certificate
and associated entry attributes.
TrustManager
- Interface in
javax.net.ssl
This is the base interface for JSSE trust managers.
TrustManagerFactory
- Class in
javax.net.ssl
This class acts as a factory for trust managers based on a
 source of trust material.
TrustManagerFactory(TrustManagerFactorySpi, Provider, String)
- Constructor for class javax.net.ssl.
TrustManagerFactory
Creates a TrustManagerFactory object.
TrustManagerFactorySpi
- Class in
javax.net.ssl
This class defines the
Service Provider Interface
(
SPI
)
 for the
TrustManagerFactory
class.
TrustManagerFactorySpi()
- Constructor for class javax.net.ssl.
TrustManagerFactorySpi
Constructor for subclasses to call.
TRY
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
TryTree
.
tryAcquire()
- Method in class java.util.concurrent.
Semaphore
Acquires a permit from this semaphore, only if one is available at the
 time of invocation.
tryAcquire(int)
- Method in class java.util.concurrent.locks.
AbstractQueuedSynchronizer
Attempts to acquire in exclusive mode.
tryAcquire(int)
- Method in class java.util.concurrent.
Semaphore
Acquires the given number of permits from this semaphore, only
 if all are available at the time of invocation.
tryAcquire(int, long, TimeUnit)
- Method in class java.util.concurrent.
Semaphore
Acquires the given number of permits from this semaphore, if all
 become available within the given waiting time and the current
 thread has not been
interrupted
.
tryAcquire(long)
- Method in class java.util.concurrent.locks.
AbstractQueuedLongSynchronizer
Attempts to acquire in exclusive mode.
tryAcquire(long, TimeUnit)
- Method in class java.util.concurrent.
Semaphore
Acquires a permit from this semaphore, if one becomes available
 within the given waiting time and the current thread has not
 been
interrupted
.
tryAcquireNanos(int, long)
- Method in class java.util.concurrent.locks.
AbstractQueuedSynchronizer
Attempts to acquire in exclusive mode, aborting if interrupted,
 and failing if the given timeout elapses.
tryAcquireNanos(long, long)
- Method in class java.util.concurrent.locks.
AbstractQueuedLongSynchronizer
Attempts to acquire in exclusive mode, aborting if interrupted,
 and failing if the given timeout elapses.
tryAcquireShared(int)
- Method in class java.util.concurrent.locks.
AbstractQueuedSynchronizer
Attempts to acquire in shared mode.
tryAcquireShared(long)
- Method in class java.util.concurrent.locks.
AbstractQueuedLongSynchronizer
Attempts to acquire in shared mode.
tryAcquireSharedNanos(int, long)
- Method in class java.util.concurrent.locks.
AbstractQueuedSynchronizer
Attempts to acquire in shared mode, aborting if interrupted, and
 failing if the given timeout elapses.
tryAcquireSharedNanos(long, long)
- Method in class java.util.concurrent.locks.
AbstractQueuedLongSynchronizer
Attempts to acquire in shared mode, aborting if interrupted, and
 failing if the given timeout elapses.
tryAdvance(Consumer<? super Double>)
- Method in interface java.util.
Spliterator.OfDouble
If a remaining element exists: performs the given action on it,
 returning
true
; else returns
false
.
tryAdvance(Consumer<? super Integer>)
- Method in interface java.util.
Spliterator.OfInt
If a remaining element exists: performs the given action on it,
 returning
true
; else returns
false
.
tryAdvance(Consumer<? super Long>)
- Method in interface java.util.
Spliterator.OfLong
If a remaining element exists: performs the given action on it,
 returning
true
; else returns
false
.
tryAdvance(Consumer<? super T>)
- Method in interface java.util.
Spliterator
If a remaining element exists: performs the given action on it,
 returning
true
; else returns
false
.
tryAdvance(T_CONS)
- Method in interface java.util.
Spliterator.OfPrimitive
If a remaining element exists, performs the given action on it,
 returning
true
; else returns
false
.
tryComplete()
- Method in class java.util.concurrent.
CountedCompleter
If the pending count is nonzero, decrements the count;
 otherwise invokes
CountedCompleter.onCompletion(CountedCompleter)
and then similarly tries to complete this task's completer,
 if one exists, else marks this task as complete.
tryConvertToOptimisticRead(long)
- Method in class java.util.concurrent.locks.
StampedLock
If the lock state matches the given stamp then, atomically, if the stamp
 represents holding a lock, releases it and returns an
 observation stamp.
tryConvertToReadLock(long)
- Method in class java.util.concurrent.locks.
StampedLock
If the lock state matches the given stamp, atomically performs one of
 the following actions.
tryConvertToWriteLock(long)
- Method in class java.util.concurrent.locks.
StampedLock
If the lock state matches the given stamp, atomically performs one of
 the following actions.
tryFinally(MethodHandle, MethodHandle)
- Static method in class java.lang.invoke.
MethodHandles
Makes a method handle that adapts a
target
method handle by wrapping it in a
try-finally
block.
tryLock()
- Method in class java.nio.channels.
AsynchronousFileChannel
Attempts to acquire an exclusive lock on this channel's file.
tryLock()
- Method in class java.nio.channels.
FileChannel
Attempts to acquire an exclusive lock on this channel's file.
tryLock()
- Method in interface java.util.concurrent.locks.
Lock
Acquires the lock only if it is free at the time of invocation.
tryLock()
- Method in class java.util.concurrent.locks.
ReentrantLock
Acquires the lock only if it is not held by another thread at the time
 of invocation.
tryLock()
- Method in class java.util.concurrent.locks.
ReentrantReadWriteLock.ReadLock
Acquires the read lock only if the write lock is not held by
 another thread at the time of invocation.
tryLock()
- Method in class java.util.concurrent.locks.
ReentrantReadWriteLock.WriteLock
Acquires the write lock only if it is not held by another thread
 at the time of invocation.
tryLock(long, long, boolean)
- Method in class java.nio.channels.
AsynchronousFileChannel
Attempts to acquire a lock on the given region of this channel's file.
tryLock(long, long, boolean)
- Method in class java.nio.channels.
FileChannel
Attempts to acquire a lock on the given region of this channel's file.
tryLock(long, TimeUnit)
- Method in interface java.util.concurrent.locks.
Lock
Acquires the lock if it is free within the given waiting time and the
 current thread has not been
interrupted
.
tryLock(long, TimeUnit)
- Method in class java.util.concurrent.locks.
ReentrantLock
Acquires the lock if it is not held by another thread within the given
 waiting time and the current thread has not been
interrupted
.
tryLock(long, TimeUnit)
- Method in class java.util.concurrent.locks.
ReentrantReadWriteLock.ReadLock
Acquires the read lock if the write lock is not held by
 another thread within the given waiting time and the
 current thread has not been
interrupted
.
tryLock(long, TimeUnit)
- Method in class java.util.concurrent.locks.
ReentrantReadWriteLock.WriteLock
Acquires the write lock if it is not held by another thread
 within the given waiting time and the current thread has
 not been
interrupted
.
tryOptimisticRead()
- Method in class java.util.concurrent.locks.
StampedLock
Returns a stamp that can later be validated, or zero
 if exclusively locked.
tryReadLock()
- Method in class java.util.concurrent.locks.
StampedLock
Non-exclusively acquires the lock if it is immediately available.
tryReadLock(long, TimeUnit)
- Method in class java.util.concurrent.locks.
StampedLock
Non-exclusively acquires the lock if it is available within the
 given time and the current thread has not been interrupted.
tryRelease(int)
- Method in class java.util.concurrent.locks.
AbstractQueuedSynchronizer
Attempts to set the state to reflect a release in exclusive
 mode.
tryRelease(long)
- Method in class java.util.concurrent.locks.
AbstractQueuedLongSynchronizer
Attempts to set the state to reflect a release in exclusive
 mode.
tryReleaseShared(int)
- Method in class java.util.concurrent.locks.
AbstractQueuedSynchronizer
Attempts to set the state to reflect a release in shared mode.
tryReleaseShared(long)
- Method in class java.util.concurrent.locks.
AbstractQueuedLongSynchronizer
Attempts to set the state to reflect a release in shared mode.
trySetAccessible()
- Method in class java.lang.reflect.
AccessibleObject
Set the
accessible
flag for this reflected object to
true
if possible.
trySplit()
- Method in interface java.util.
Spliterator
If this spliterator can be partitioned, returns a Spliterator
 covering elements, that will, upon return from this method, not
 be covered by this Spliterator.
trySplit()
- Method in class java.util.
Spliterators.AbstractDoubleSpliterator
If this spliterator can be partitioned, returns a Spliterator
 covering elements, that will, upon return from this method, not
 be covered by this Spliterator.
trySplit()
- Method in class java.util.
Spliterators.AbstractIntSpliterator
If this spliterator can be partitioned, returns a Spliterator
 covering elements, that will, upon return from this method, not
 be covered by this Spliterator.
trySplit()
- Method in class java.util.
Spliterators.AbstractLongSpliterator
If this spliterator can be partitioned, returns a Spliterator
 covering elements, that will, upon return from this method, not
 be covered by this Spliterator.
trySplit()
- Method in class java.util.
Spliterators.AbstractSpliterator
If this spliterator can be partitioned, returns a Spliterator
 covering elements, that will, upon return from this method, not
 be covered by this Spliterator.
tryToLoadClass(String, ClassLoader)
- Static method in class java.awt.datatransfer.
DataFlavor
Tries to load a class from: the bootstrap loader, the system loader, the
 context loader (if one is present) and finally the loader specified.
tryTransfer(E)
- Method in class java.util.concurrent.
LinkedTransferQueue
Transfers the element to a waiting consumer immediately, if possible.
tryTransfer(E)
- Method in interface java.util.concurrent.
TransferQueue
Transfers the element to a waiting consumer immediately, if possible.
tryTransfer(E, long, TimeUnit)
- Method in class java.util.concurrent.
LinkedTransferQueue
Transfers the element to a consumer if it is possible to do so
 before the timeout elapses.
tryTransfer(E, long, TimeUnit)
- Method in interface java.util.concurrent.
TransferQueue
Transfers the element to a consumer if it is possible to do so
 before the timeout elapses.
TryTree
- Interface in
com.sun.source.tree
A tree node for a
try
statement.
tryUnfork()
- Method in class java.util.concurrent.
ForkJoinTask
Tries to unschedule this task for execution.
tryUnlockRead()
- Method in class java.util.concurrent.locks.
StampedLock
Releases one hold of the read lock if it is held, without
 requiring a stamp value.
tryUnlockWrite()
- Method in class java.util.concurrent.locks.
StampedLock
Releases the write lock if it is held, without requiring a
 stamp value.
tryWriteLock()
- Method in class java.util.concurrent.locks.
StampedLock
Exclusively acquires the lock if it is immediately available.
tryWriteLock(long, TimeUnit)
- Method in class java.util.concurrent.locks.
StampedLock
Exclusively acquires the lock if it is available within the
 given time and the current thread has not been interrupted.
tsa(URI)
- Method in class jdk.security.jarsigner.
JarSigner.Builder
Sets the URI of the Time Stamping Authority (TSA).
TT
- Static variable in class javax.swing.text.html.
HTML.Tag
Tag <tt>
TT_EOF
- Static variable in class java.io.
StreamTokenizer
A constant indicating that the end of the stream has been read.
TT_EOL
- Static variable in class java.io.
StreamTokenizer
A constant indicating that the end of the line has been read.
TT_NUMBER
- Static variable in class java.io.
StreamTokenizer
A constant indicating that a number token has been read.
TT_WORD
- Static variable in class java.io.
StreamTokenizer
A constant indicating that a word token has been read.
TTL_DONT_CACHE
- Static variable in class java.util.
ResourceBundle.Control
The time-to-live constant for not caching loaded resource bundle
 instances.
TTL_NO_EXPIRATION_CONTROL
- Static variable in class java.util.
ResourceBundle.Control
The time-to-live constant for disabling the expiration control
 for loaded resource bundle instances in the cache.
ttype
- Variable in class java.io.
StreamTokenizer
After a call to the
nextToken
method, this field
 contains the type of the token just read.
TUESDAY
- Enum constant in enum class java.time.
DayOfWeek
The singleton instance for the day-of-week of Tuesday.
TUESDAY
- Static variable in class java.util.
Calendar
Value of the
Calendar.DAY_OF_WEEK
field indicating
 Tuesday.
TUMBLE
- Static variable in class javax.print.attribute.standard.
Sides
An alias for "two sided short edge" (see
TWO_SIDED_SHORT_EDGE
).
TUNE_REQUEST
- Static variable in class javax.sound.midi.
ShortMessage
Status byte for Tune Request message (0xF6, or 246).
TWO
- Static variable in class java.math.
BigDecimal
The value 2, with a scale of 0.
TWO
- Static variable in class java.math.
BigInteger
The BigInteger constant two.
TWO_SIDED_LONG_EDGE
- Static variable in class java.awt.
JobAttributes.SidesType
The
SidesType
instance to use for specifying that
 consecutive job pages should be printed upon front and back sides
 of consecutive media sheets, such that the orientation of each pair
 of pages on the medium would be correct for the reader as if for
 binding on the long edge.
TWO_SIDED_LONG_EDGE
- Static variable in class javax.print.attribute.standard.
Sides
Imposes each consecutive pair of print-stream pages upon front and back
 sides of consecutive media sheets, such that the orientation of each pair
 of print-stream pages on the medium would be correct for the reader as if
 for binding on the long edge.
TWO_SIDED_SHORT_EDGE
- Static variable in class java.awt.
JobAttributes.SidesType
The
SidesType
instance to use for specifying that
 consecutive job pages should be printed upon front and back sides
 of consecutive media sheets, such that the orientation of each pair
 of pages on the medium would be correct for the reader as if for
 binding on the short edge.
TWO_SIDED_SHORT_EDGE
- Static variable in class javax.print.attribute.standard.
Sides
Imposes each consecutive pair of print-stream pages upon front and back
 sides of consecutive media sheets, such that the orientation of each pair
 of print-stream pages on the medium would be correct for the reader as if
 for binding on the short edge.
type
- Variable in class javax.naming.event.
NamingEvent
Contains the type of this event.
type
- Variable in class javax.sound.midi.
MidiFileFormat
The type of MIDI file.
type
- Variable in class javax.swing.event.
TableModelEvent
The type of the event.
type
- Variable in class javax.swing.
JTable.AccessibleJTable.AccessibleJTableModelChange
The type
type
- Variable in class javax.swing.text.html.parser.
AttributeList
The attribute type
type
- Variable in class javax.swing.text.html.parser.
ContentModel
Type.
type
- Variable in class javax.swing.text.html.parser.
Element
The element type
type
- Variable in class javax.swing.text.html.parser.
Entity
The type of the entity.
type()
- Method in interface com.sun.jdi.
Field
Returns the type of this field.
type()
- Method in interface com.sun.jdi.
LocalVariable
Returns the type of this variable.
type()
- Method in interface com.sun.jdi.
Value
Returns the run-time type of this value.
type()
- Method in class com.sun.tools.attach.spi.
AttachProvider
Return this provider's type.
type()
- Method in class java.lang.invoke.
CallSite
Returns the type of this call site's target.
type()
- Method in class java.lang.invoke.
MethodHandle
Reports the type of this method handle.
type()
- Method in class java.lang.
ProcessBuilder.Redirect
Returns the type of this
Redirect
.
type()
- Method in class java.net.
Proxy
Returns the proxy type.
type()
- Method in interface java.net.
SocketOption
Returns the type of the socket option value.
type()
- Method in class java.nio.file.attribute.
AclEntry
Returns the ACL entry type.
type()
- Method in class java.nio.file.
FileStore
Returns the
type
of this file store.
type()
- Method in interface java.nio.file.
WatchEvent.Kind
Returns the type of the
context
value.
type()
- Method in interface java.util.
ServiceLoader.Provider
Returns the provider type.
type()
- Method in interface javax.xml.xpath.
XPathEvaluationResult
Return the result type as an enum specified by
XPathResultType
Type
- Interface in
com.sun.jdi
The mirror for a type in the target VM.
Type
- Interface in
java.lang.reflect
Type is the common superinterface for all types in the Java
 programming language.
Type(String)
- Constructor for class javax.sound.sampled.
BooleanControl.Type
Constructs a new boolean control type.
Type(String)
- Constructor for class javax.sound.sampled.
CompoundControl.Type
Constructs a new compound control type.
Type(String)
- Constructor for class javax.sound.sampled.
Control.Type
Constructs a new control type with the name specified.
Type(String)
- Constructor for class javax.sound.sampled.
EnumControl.Type
Constructs a new enumerated control type.
Type(String)
- Constructor for class javax.sound.sampled.
FloatControl.Type
Constructs a new float control type.
Type(String)
- Constructor for class javax.sound.sampled.
LineEvent.Type
Constructs a new event type.
Type(String, String)
- Constructor for class javax.sound.sampled.
AudioFileFormat.Type
Constructs a file type.
TYPE
- Enum constant in enum class java.lang.annotation.
ElementType
Class, interface (including annotation interface), enum, or record
 declaration
TYPE
- Enum constant in enum class jdk.javadoc.doclet.
Taglet.Location
In the documentation for a type, such as a class, interface or enum.
TYPE
- Static variable in class java.lang.
Boolean
The Class object representing the primitive type boolean.
TYPE
- Static variable in class java.lang.
Byte
The
Class
instance representing the primitive type
byte
.
TYPE
- Static variable in class java.lang.
Character
The
Class
instance representing the primitive type
char
.
TYPE
- Static variable in class java.lang.
Double
The
Class
instance representing the primitive type
double
.
TYPE
- Static variable in class java.lang.
Float
The
Class
instance representing the primitive type
float
.
TYPE
- Static variable in class java.lang.
Integer
The
Class
instance representing the primitive type
int
.
TYPE
- Static variable in class java.lang.
Long
The
Class
instance representing the primitive type
long
.
TYPE
- Static variable in class java.lang.
Short
The
Class
instance representing the primitive type
short
.
TYPE
- Static variable in class java.lang.
Void
The
Class
object representing the pseudo-type corresponding to
 the keyword
void
.
TYPE
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "type"
TYPE
- Static variable in interface javax.xml.crypto.dsig.keyinfo.
PGPData
URI identifying the PGPData KeyInfo type:
 http://www.w3.org/2000/09/xmldsig#PGPData.
TYPE
- Static variable in interface javax.xml.crypto.dsig.keyinfo.
X509Data
URI identifying the X509Data KeyInfo type:
 http://www.w3.org/2000/09/xmldsig#X509Data.
TYPE
- Static variable in interface javax.xml.crypto.dsig.
Manifest
URI that identifies the
Manifest
element (this can be
 specified as the value of the
type
parameter of the
Reference
class to identify the referent's type).
TYPE
- Static variable in interface javax.xml.crypto.dsig.
SignatureProperties
URI that identifies the
SignatureProperties
element (this
 can be specified as the value of the
type
parameter of the
Reference
class to identify the referent's type).
TYPE
- Static variable in interface javax.xml.crypto.dsig.
XMLObject
URI that identifies the
Object
element (this can be
 specified as the value of the
type
parameter of the
Reference
class to identify the referent's type).
TYPE_1_BETTER
- Enum constant in enum class jdk.dynalink.linker.
ConversionComparator.Comparison
The first conversion is better than the second one.
TYPE_2_BETTER
- Enum constant in enum class jdk.dynalink.linker.
ConversionComparator.Comparison
The second conversion is better than the first one.
TYPE_2CLR
- Static variable in class java.awt.color.
ColorSpace
Generic 2 component color spaces.
TYPE_3BYTE_BGR
- Static variable in class java.awt.image.
BufferedImage
Represents an image with 8-bit RGB color components, corresponding
 to a Windows-style BGR color model) with the colors Blue, Green,
 and Red stored in 3 bytes.
TYPE_3CLR
- Static variable in class java.awt.color.
ColorSpace
Generic 3 component color spaces.
TYPE_4BYTE_ABGR
- Static variable in class java.awt.image.
BufferedImage
Represents an image with 8-bit RGBA color components with the colors
 Blue, Green, and Red stored in 3 bytes and 1 byte of alpha.
TYPE_4BYTE_ABGR_PRE
- Static variable in class java.awt.image.
BufferedImage
Represents an image with 8-bit RGBA color components with the colors
 Blue, Green, and Red stored in 3 bytes and 1 byte of alpha.
TYPE_4CLR
- Static variable in class java.awt.color.
ColorSpace
Generic 4 component color spaces.
TYPE_5CLR
- Static variable in class java.awt.color.
ColorSpace
Generic 5 component color spaces.
TYPE_6CLR
- Static variable in class java.awt.color.
ColorSpace
Generic 6 component color spaces.
TYPE_7CLR
- Static variable in class java.awt.color.
ColorSpace
Generic 7 component color spaces.
TYPE_8CLR
- Static variable in class java.awt.color.
ColorSpace
Generic 8 component color spaces.
TYPE_9CLR
- Static variable in class java.awt.color.
ColorSpace
Generic 9 component color spaces.
TYPE_ACLR
- Static variable in class java.awt.color.
ColorSpace
Generic 10 component color spaces.
TYPE_ANNOTATION
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
AnnotationTree
representing type annotations.
TYPE_BCLR
- Static variable in class java.awt.color.
ColorSpace
Generic 11 component color spaces.
TYPE_BICUBIC
- Static variable in class java.awt.image.
AffineTransformOp
Bicubic interpolation type.
TYPE_BILINEAR
- Static variable in class java.awt.image.
AffineTransformOp
Bilinear interpolation type.
TYPE_BYTE
- Static variable in class java.awt.image.
DataBuffer
Tag for unsigned byte data.
TYPE_BYTE_BINARY
- Static variable in class java.awt.image.
BufferedImage
Represents an opaque byte-packed 1, 2, or 4 bit image.
TYPE_BYTE_GRAY
- Static variable in class java.awt.image.
BufferedImage
Represents a unsigned byte grayscale image, non-indexed.
TYPE_BYTE_INDEXED
- Static variable in class java.awt.image.
BufferedImage
Represents an indexed byte image.
TYPE_CAST
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
TypeCastTree
.
TYPE_CCLR
- Static variable in class java.awt.color.
ColorSpace
Generic 12 component color spaces.
TYPE_CMY
- Static variable in class java.awt.color.
ColorSpace
Any of the family of CMY color spaces.
TYPE_CMYK
- Static variable in class java.awt.color.
ColorSpace
Any of the family of CMYK color spaces.
TYPE_CUSTOM
- Static variable in class java.awt.image.
BufferedImage
Image type is not recognized so it must be a customized
 image.
TYPE_DCLR
- Static variable in class java.awt.color.
ColorSpace
Generic 13 component color spaces.
TYPE_DECL
- Enum constant in enum class jdk.jshell.
Snippet.Kind
A type declaration.
TYPE_DOUBLE
- Static variable in class java.awt.image.
DataBuffer
Tag for double data.
TYPE_ECLR
- Static variable in class java.awt.color.
ColorSpace
Generic 14 component color spaces.
TYPE_ERR
- Static variable in exception class org.w3c.dom.xpath.
XPathException
If the expression cannot be converted to return the specified type.
TYPE_FCLR
- Static variable in class java.awt.color.
ColorSpace
Generic 15 component color spaces.
TYPE_FLIP
- Static variable in class java.awt.geom.
AffineTransform
This flag bit indicates that the transform defined by this object
 performs a mirror image flip about some axis which changes the
 normally right handed coordinate system into a left handed
 system in addition to the conversions indicated by other flag bits.
TYPE_FLOAT
- Static variable in class java.awt.image.
DataBuffer
Tag for float data.
TYPE_FORWARD_ONLY
- Static variable in interface java.sql.
ResultSet
The constant indicating the type for a
ResultSet
object
 whose cursor may move only forward.
TYPE_GENERAL_ROTATION
- Static variable in class java.awt.geom.
AffineTransform
This flag bit indicates that the transform defined by this object
 performs a rotation by an arbitrary angle in addition to the
 conversions indicated by other flag bits.
TYPE_GENERAL_SCALE
- Static variable in class java.awt.geom.
AffineTransform
This flag bit indicates that the transform defined by this object
 performs a general scale in addition to the conversions indicated
 by other flag bits.
TYPE_GENERAL_TRANSFORM
- Static variable in class java.awt.geom.
AffineTransform
This constant indicates that the transform defined by this object
 performs an arbitrary conversion of the input coordinates.
TYPE_GRAY
- Static variable in class java.awt.color.
ColorSpace
Any of the family of GRAY color spaces.
TYPE_HLS
- Static variable in class java.awt.color.
ColorSpace
Any of the family of HLS color spaces.
TYPE_HSV
- Static variable in class java.awt.color.
ColorSpace
Any of the family of HSV color spaces.
TYPE_IDENTITY
- Static variable in class java.awt.geom.
AffineTransform
This constant indicates that the transform defined by this object
 is an identity transform.
TYPE_IMAGE_BUFFER
- Static variable in class java.awt.
GraphicsDevice
Device is an image buffer.
TYPE_IMPORT_ON_DEMAND_SUBKIND
- Enum constant in enum class jdk.jshell.
Snippet.SubKind
Type-Import-on-Demand Declaration.
TYPE_INT
- Static variable in class java.awt.image.
DataBuffer
Tag for int data.
TYPE_INT_ARGB
- Static variable in class java.awt.image.
BufferedImage
Represents an image with 8-bit RGBA color components packed into
 integer pixels.
TYPE_INT_ARGB_PRE
- Static variable in class java.awt.image.
BufferedImage
Represents an image with 8-bit RGBA color components packed into
 integer pixels.
TYPE_INT_BGR
- Static variable in class java.awt.image.
BufferedImage
Represents an image with 8-bit RGB color components, corresponding
 to a Windows- or Solaris- style BGR color model, with the colors
 Blue, Green, and Red packed into integer pixels.
TYPE_INT_RGB
- Static variable in class java.awt.image.
BufferedImage
Represents an image with 8-bit RGB color components packed into
 integer pixels.
TYPE_Lab
- Static variable in class java.awt.color.
ColorSpace
Any of the family of Lab color spaces.
TYPE_Luv
- Static variable in class java.awt.color.
ColorSpace
Any of the family of Luv color spaces.
TYPE_MASK_ROTATION
- Static variable in class java.awt.geom.
AffineTransform
This constant is a bit mask for any of the rotation flag bits.
TYPE_MASK_SCALE
- Static variable in class java.awt.geom.
AffineTransform
This constant is a bit mask for any of the scale flag bits.
TYPE_MISMATCH_ERR
- Static variable in exception class org.w3c.dom.
DOMException
If the type of an object is incompatible with the expected type of the
 parameter associated to the object.
TYPE_NEAREST_NEIGHBOR
- Static variable in class java.awt.image.
AffineTransformOp
Nearest-neighbor interpolation type.
TYPE_PARAMETER
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
TypeParameterTree
.
TYPE_PARAMETER
- Enum constant in enum class java.lang.annotation.
ElementType
Type parameter declaration
TYPE_PARAMETER
- Enum constant in enum class javax.lang.model.element.
ElementKind
A type parameter.
TYPE_PRINTER
- Static variable in class java.awt.
GraphicsDevice
Device is a printer.
TYPE_QUADRANT_ROTATION
- Static variable in class java.awt.geom.
AffineTransform
This flag bit indicates that the transform defined by this object
 performs a quadrant rotation by some multiple of 90 degrees in
 addition to the conversions indicated by other flag bits.
TYPE_RASTER_SCREEN
- Static variable in class java.awt.
GraphicsDevice
Device is a raster screen.
TYPE_RGB
- Static variable in class java.awt.color.
ColorSpace
Any of the family of RGB color spaces.
TYPE_SCROLL_INSENSITIVE
- Static variable in interface java.sql.
ResultSet
The constant indicating the type for a
ResultSet
object
 that is scrollable but generally not sensitive to changes to the data
 that underlies the
ResultSet
.
TYPE_SCROLL_SENSITIVE
- Static variable in interface java.sql.
ResultSet
The constant indicating the type for a
ResultSet
object
 that is scrollable and generally sensitive to changes to the data
 that underlies the
ResultSet
.
TYPE_SHORT
- Static variable in class java.awt.image.
DataBuffer
Tag for signed short data.
TYPE_TRANSLATION
- Static variable in class java.awt.geom.
AffineTransform
This flag bit indicates that the transform defined by this object
 performs a translation in addition to the conversions indicated
 by other flag bits.
TYPE_UNDEFINED
- Static variable in class java.awt.image.
DataBuffer
Tag for undefined data.
TYPE_UNIFORM_SCALE
- Static variable in class java.awt.geom.
AffineTransform
This flag bit indicates that the transform defined by this object
 performs a uniform scale in addition to the conversions indicated
 by other flag bits.
TYPE_USE
- Enum constant in enum class java.lang.annotation.
ElementType
Use of a type
TYPE_USHORT
- Static variable in class java.awt.image.
DataBuffer
Tag for unsigned short data.
TYPE_USHORT_555_RGB
- Static variable in class java.awt.image.
BufferedImage
Represents an image with 5-5-5 RGB color components (5-bits red,
 5-bits green, 5-bits blue) with no alpha.
TYPE_USHORT_565_RGB
- Static variable in class java.awt.image.
BufferedImage
Represents an image with 5-6-5 RGB color components (5-bits red,
 6-bits green, 5-bits blue) with no alpha.
TYPE_USHORT_GRAY
- Static variable in class java.awt.image.
BufferedImage
Represents an unsigned short grayscale image, non-indexed).
TYPE_XYZ
- Static variable in class java.awt.color.
ColorSpace
Any of the family of XYZ color spaces.
TYPE_YCbCr
- Static variable in class java.awt.color.
ColorSpace
Any of the family of YCbCr color spaces.
TYPE_Yxy
- Static variable in class java.awt.color.
ColorSpace
Any of the family of Yxy color spaces.
TYPE1_FONT
- Static variable in class java.awt.
Font
Identify a font resource of type TYPE1.
type2name(int)
- Static method in class javax.swing.text.html.parser.
AttributeList
Converts a type to the attribute name
TypeBasedGuardingDynamicLinker
- Interface in
jdk.dynalink.linker
A guarding dynamic linker that can determine whether it can link the call site solely based on the type of the first
 argument at linking invocation time.
TypeCastTree
- Interface in
com.sun.source.tree
A tree node for a type cast expression.
TypeComponent
- Interface in
com.sun.jdi
An entity declared within a user defined
 type (class or interface).
TypeDeclSnippet
- Class in
jdk.jshell
Snippet for a type definition (a class, interface, enum, or annotation
 interface definition).
TypeDescriptor
- Interface in
java.lang.invoke
An entity that has a type descriptor.
TypeDescriptor.OfField<F>
- Interface in
java.lang.invoke
An entity that has a field type descriptor.
TypeDescriptor.OfMethod<F,
M>
- Interface in
java.lang.invoke
An entity that has a method type descriptor
 Method descriptors conforming to JVMS
4.3.3
can be described
 nominally via
MethodType::describeConstable
;
 otherwise they cannot be described nominally.
TypeElement
- Interface in
javax.lang.model.element
Represents a class or interface program element.
TypeInfo
- Interface in
org.w3c.dom
The
TypeInfo
interface represents a type referenced from
Element
or
Attr
nodes, specified in the schemas
 associated with the document.
TypeInfoProvider
- Class in
javax.xml.validation
This class provides access to the type information determined
 by
ValidatorHandler
.
TypeInfoProvider()
- Constructor for class javax.xml.validation.
TypeInfoProvider
Constructor for the derived class.
TypeKind
- Enum Class in
javax.lang.model.type
The kind of a type mirror.
TypeKindVisitor14<R,
P>
- Class in
javax.lang.model.util
A visitor of types based on their
kind
with
 default behavior appropriate for source version
RELEASE_14
.
TypeKindVisitor14()
- Constructor for class javax.lang.model.util.
TypeKindVisitor14
Constructor for concrete subclasses to call; uses
null
for the default value.
TypeKindVisitor14(R)
- Constructor for class javax.lang.model.util.
TypeKindVisitor14
Constructor for concrete subclasses to call; uses the argument
 for the default value.
TypeKindVisitor6<R,
P>
- Class in
javax.lang.model.util
A visitor of types based on their
kind
with
 default behavior appropriate for the
RELEASE_6
source version.
TypeKindVisitor6()
- Constructor for class javax.lang.model.util.
TypeKindVisitor6
Deprecated.
Release 6 is obsolete; update to a visitor for a newer
 release level.
TypeKindVisitor6(R)
- Constructor for class javax.lang.model.util.
TypeKindVisitor6
Deprecated.
Release 6 is obsolete; update to a visitor for a newer
 release level.
TypeKindVisitor7<R,
P>
- Class in
javax.lang.model.util
A visitor of types based on their
kind
with
 default behavior appropriate for the
RELEASE_7
source version.
TypeKindVisitor7()
- Constructor for class javax.lang.model.util.
TypeKindVisitor7
Deprecated.
Release 7 is obsolete; update to a visitor for a newer
 release level.
TypeKindVisitor7(R)
- Constructor for class javax.lang.model.util.
TypeKindVisitor7
Deprecated.
Release 7 is obsolete; update to a visitor for a newer
 release level.
TypeKindVisitor8<R,
P>
- Class in
javax.lang.model.util
A visitor of types based on their
kind
with
 default behavior appropriate for the
RELEASE_8
source version.
TypeKindVisitor8()
- Constructor for class javax.lang.model.util.
TypeKindVisitor8
Constructor for concrete subclasses to call; uses
null
for the default value.
TypeKindVisitor8(R)
- Constructor for class javax.lang.model.util.
TypeKindVisitor8
Constructor for concrete subclasses to call; uses the argument
 for the default value.
TypeKindVisitor9<R,
P>
- Class in
javax.lang.model.util
A visitor of types based on their
kind
with
 default behavior appropriate for source versions
RELEASE_9
through
RELEASE_14
.
TypeKindVisitor9()
- Constructor for class javax.lang.model.util.
TypeKindVisitor9
Constructor for concrete subclasses to call; uses
null
for the default value.
TypeKindVisitor9(R)
- Constructor for class javax.lang.model.util.
TypeKindVisitor9
Constructor for concrete subclasses to call; uses the argument
 for the default value.
Type mapping rules
- Search tag in annotation interface javax.management.MXBean
Section
TypeMirror
- Interface in
javax.lang.model.type
Represents a type in the Java programming language.
typeName()
- Method in interface com.sun.jdi.
Field
Returns a text representation of the type
 of this field.
typeName()
- Method in interface com.sun.jdi.
LocalVariable
Returns a text representation of the type
 of this variable.
typeName()
- Method in exception class java.lang.
TypeNotPresentException
Returns the fully qualified name of the unavailable type.
typeName()
- Method in class jdk.jshell.
ExpressionSnippet
Type of the expression
typeName()
- Method in class jdk.jshell.
VarSnippet
A String representation of the type of the variable.
Type Names
- Search tag in annotation interface javax.management.MXBean
Section
typeNoNulls
- Static variable in interface java.sql.
DatabaseMetaData
Indicates that a
NULL
value is NOT allowed for this
 data type.
TypeNotPresentException
- Exception Class in
java.lang
Thrown when an application tries to access a type using a string
 representing the type's name, but no definition for the type with
 the specified name can be found.
TypeNotPresentException(String, Throwable)
- Constructor for exception class java.lang.
TypeNotPresentException
Constructs a
TypeNotPresentException
for the named type
 with the specified cause.
typeNullable
- Static variable in interface java.sql.
DatabaseMetaData
Indicates that a
NULL
value is allowed for this
 data type.
typeNullableUnknown
- Static variable in interface java.sql.
DatabaseMetaData
Indicates that it is not known whether a
NULL
value
 is allowed for this data type.
TypeParameterElement
- Interface in
javax.lang.model.element
Represents a formal type parameter of a generic class, interface, method,
 or constructor element.
TypeParameterTree
- Interface in
com.sun.source.tree
A tree node for a type parameter.
typePredBasic
- Static variable in interface java.sql.
DatabaseMetaData
Indicates that the data type can be only be used in
WHERE
search clauses
 that do not use
LIKE
predicates.
typePredChar
- Static variable in interface java.sql.
DatabaseMetaData
Indicates that the data type
 can be only be used in
WHERE
search clauses
 that  use
LIKE
predicates.
typePredNone
- Static variable in interface java.sql.
DatabaseMetaData
Indicates that
WHERE
search clauses are not supported
 for this type.
types()
- Method in class jdk.jshell.
JShell
Returns the active type declaration (class, interface, annotation type, and enum) snippets.
Types
- Class in
java.sql
The class that defines the constants that are used to identify generic
 SQL types, called JDBC types.
Types
- Interface in
javax.lang.model.util
Utility methods for operating on types.
typeSearchable
- Static variable in interface java.sql.
DatabaseMetaData
Indicates that all
WHERE
search clauses can be
 based on this type.
typesIn(Iterable<? extends Element>)
- Static method in class javax.lang.model.util.
ElementFilter
Returns a list of classes and interfaces in
elements
.
typesIn(Set<? extends Element>)
- Static method in class javax.lang.model.util.
ElementFilter
Returns a set of types in
elements
.
Types of bootstrap methods
- Search tag in package java.lang.invoke
Section
typeSwitch(MethodHandles.Lookup, String, MethodType, Object...)
- Static method in class java.lang.runtime.
SwitchBootstraps
Bootstrap method for linking an
invokedynamic
call site that
 implements a
switch
on a target of a reference type.
TypeUtilities
- Class in
jdk.dynalink.linker.support
Various static utility methods for working with Java types.
TYPEVAR
- Enum constant in enum class javax.lang.model.type.
TypeKind
A type variable.
TypeVariable<D>
- Interface in
java.lang.reflect
TypeVariable is the common superinterface for type variables of kinds.
TypeVariable
- Interface in
javax.lang.model.type
Represents a type variable.
TypeVisitor<R,
P>
- Interface in
javax.lang.model.type
A visitor of types, in the style of the
 visitor design pattern.
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
_
All Classes and Interfaces
|
All Packages
|
Constant Field Values
|
Serialized Form
|
System Properties
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.