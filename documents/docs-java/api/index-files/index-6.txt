F-Index (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Index
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
_
All Classes and Interfaces
|
All Packages
|
Constant Field Values
|
Serialized Form
|
System Properties
F
F0
- Static variable in class java.security.spec.
RSAKeyGenParameterSpec
The public-exponent value F0 = 3.
F1
- Static variable in class java.awt.
Event
Deprecated.
The F1 function key, a non-ASCII action key.
F10
- Static variable in class java.awt.
Event
Deprecated.
The F10 function key, a non-ASCII action key.
F11
- Static variable in class java.awt.
Event
Deprecated.
The F11 function key, a non-ASCII action key.
F12
- Static variable in class java.awt.
Event
Deprecated.
The F12 function key, a non-ASCII action key.
F2
- Static variable in class java.awt.
Event
Deprecated.
The F2 function key, a non-ASCII action key.
F2B
- Static variable in class jdk.incubator.vector.
VectorOperators
Convert
floatVal
to
(byte)floatVal
.
F2D
- Static variable in class jdk.incubator.vector.
VectorOperators
Convert
floatVal
to
(double)floatVal
.
F2I
- Static variable in class jdk.incubator.vector.
VectorOperators
Convert
floatVal
to
(int)floatVal
.
F2L
- Static variable in class jdk.incubator.vector.
VectorOperators
Convert
floatVal
to
(long)floatVal
.
F2S
- Static variable in class jdk.incubator.vector.
VectorOperators
Convert
floatVal
to
(short)floatVal
.
F3
- Static variable in class java.awt.
Event
Deprecated.
The F3 function key, a non-ASCII action key.
F4
- Static variable in class java.awt.
Event
Deprecated.
The F4 function key, a non-ASCII action key.
F4
- Static variable in class java.security.spec.
RSAKeyGenParameterSpec
The public exponent-value F4 = 65537.
F5
- Static variable in class java.awt.
Event
Deprecated.
The F5 function key, a non-ASCII action key.
F6
- Static variable in class java.awt.
Event
Deprecated.
The F6 function key, a non-ASCII action key.
F7
- Static variable in class java.awt.
Event
Deprecated.
The F7 function key, a non-ASCII action key.
F8
- Static variable in class java.awt.
Event
Deprecated.
The F8 function key, a non-ASCII action key.
F9
- Static variable in class java.awt.
Event
Deprecated.
The F9 function key, a non-ASCII action key.
FACE
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "face"
Factories and Processors
- Search tag in module java.xml
Section
factory()
- Method in interface java.lang.
Thread.Builder
Returns a
ThreadFactory
to create threads from the current
 state of the builder.
FactoryConfigurationError
- Exception Class in
javax.xml.parsers
Thrown when a problem with configuration with the Parser Factories
 exists.
FactoryConfigurationError
- Exception Class in
javax.xml.stream
An error class for reporting factory configuration errors.
FactoryConfigurationError()
- Constructor for exception class javax.xml.parsers.
FactoryConfigurationError
Create a new
FactoryConfigurationError
with no
 detail message.
FactoryConfigurationError()
- Constructor for exception class javax.xml.stream.
FactoryConfigurationError
Default constructor
FactoryConfigurationError(Exception)
- Constructor for exception class javax.xml.parsers.
FactoryConfigurationError
Create a new
FactoryConfigurationError
with a
 given
Exception
base cause of the error.
FactoryConfigurationError(Exception)
- Constructor for exception class javax.xml.stream.
FactoryConfigurationError
Construct an exception with a nested inner exception
FactoryConfigurationError(Exception, String)
- Constructor for exception class javax.xml.parsers.
FactoryConfigurationError
Create a new
FactoryConfigurationError
with the
 given
Exception
base cause and detail message.
FactoryConfigurationError(Exception, String)
- Constructor for exception class javax.xml.stream.
FactoryConfigurationError
Construct an exception with a nested inner exception
 and a message
FactoryConfigurationError(String)
- Constructor for exception class javax.xml.parsers.
FactoryConfigurationError
Create a new
FactoryConfigurationError
with
 the
String
specified as an error message.
FactoryConfigurationError(String)
- Constructor for exception class javax.xml.stream.
FactoryConfigurationError
Construct an exception with associated message
FactoryConfigurationError(String, Exception)
- Constructor for exception class javax.xml.stream.
FactoryConfigurationError
Construct an exception with a nested inner exception
 and a message
Factory Methods
- Search tag in class java.util.Locale
Section
failed(Throwable, A)
- Method in interface java.nio.channels.
CompletionHandler
Invoked when an operation fails.
FAILED
- Enum constant in enum class java.util.concurrent.
Future.State
The task completed with an exception.
FAILED
- Enum constant in enum class java.util.concurrent.
StructuredTaskScope.Subtask.State
PREVIEW
The subtask failed with an exception.
FAILED
- Static variable in class javax.management.remote.
JMXConnectionNotification
Notification type string for a connection-failed notification.
failedFuture(Throwable)
- Static method in class java.util.concurrent.
CompletableFuture
Returns a new CompletableFuture that is already completed
 exceptionally with the given exception.
FailedLoginException
- Exception Class in
javax.security.auth.login
Signals that user authentication failed.
FailedLoginException()
- Constructor for exception class javax.security.auth.login.
FailedLoginException
Constructs a FailedLoginException with no detail message.
FailedLoginException(String)
- Constructor for exception class javax.security.auth.login.
FailedLoginException
Constructs a FailedLoginException with the specified detail
 message.
failedStage(Throwable)
- Static method in class java.util.concurrent.
CompletableFuture
Returns a new CompletionStage that is already completed
 exceptionally with the given exception and supports only those
 methods in interface
CompletionStage
.
failedToInitialize()
- Method in interface com.sun.jdi.
ReferenceType
Determines if initialization failed for this class.
FailOverExecutionControlProvider
- Class in
jdk.jshell.execution
Tries other providers in sequence until one works.
FailOverExecutionControlProvider()
- Constructor for class jdk.jshell.execution.
FailOverExecutionControlProvider
Create an instance.
failure(Exception)
- Method in interface java.rmi.server.
RMIFailureHandler
The
failure
callback is invoked when the RMI
 runtime is unable to create a
ServerSocket
via the
RMISocketFactory
.
Failure(int)
- Constructor for class com.sun.net.httpserver.
Authenticator.Failure
Creates a
Failure
instance with given response code.
FAILURE
- Static variable in exception class org.ietf.jgss.
GSSException
General failure, unspecified at GSS-API level.
FALSE
- Static variable in class java.lang.
Boolean
The
Boolean
object corresponding to the primitive
 value
false
.
FALSE
- Static variable in class java.lang.constant.
ConstantDescs
Nominal descriptor representing the constant
Boolean.FALSE
False assumptions causing bugs in multi-calendar system code
- Search tag in interface java.time.chrono.ChronoLocalDate
Section
Family
- Static variable in class javax.swing.text.
StyleConstants
Name of the font family.
FAMILY
- Static variable in class java.awt.font.
TextAttribute
Attribute key for the font name.
fatalError(TransformerException)
- Method in interface javax.xml.transform.
ErrorListener
Receive notification of a non-recoverable error.
fatalError(SAXParseException)
- Method in interface org.xml.sax.
ErrorHandler
Receive notification of a non-recoverable, fatal error.
fatalError(SAXParseException)
- Method in class org.xml.sax.
HandlerBase
Deprecated.
Report a fatal XML parsing error.
fatalError(SAXParseException)
- Method in class org.xml.sax.helpers.
DefaultHandler
Report a fatal XML parsing error.
fatalError(SAXParseException)
- Method in class org.xml.sax.helpers.
XMLFilterImpl
Filter a fatal error event.
FaxTIFFTagSet
- Class in
javax.imageio.plugins.tiff
A class representing the extra tags found in a
TIFF-F
(RFC 2036) file.
fd
- Variable in class java.net.
DatagramSocketImpl
The file descriptor object.
fd
- Variable in class java.net.
SocketImpl
The file descriptor object for this socket.
feature()
- Method in class java.lang.
Runtime.Version
Returns the value of the
feature
element of
 the version number.
FEATURE
- Static variable in class javax.xml.transform.dom.
DOMResult
If
TransformerFactory.getFeature(java.lang.String)
returns
true
when passed this value as an argument,
 the
Transformer
supports
Result
output of this type.
FEATURE
- Static variable in class javax.xml.transform.dom.
DOMSource
If
TransformerFactory.getFeature(java.lang.String)
returns true when passed this value as an argument,
 the Transformer supports Source input of this type.
FEATURE
- Static variable in class javax.xml.transform.sax.
SAXResult
If
TransformerFactory.getFeature(java.lang.String)
returns true when passed this value as an argument,
 the Transformer supports Result output of this type.
FEATURE
- Static variable in class javax.xml.transform.sax.
SAXSource
If
TransformerFactory.getFeature(java.lang.String)
returns true when passed this value as an argument,
 the Transformer supports Source input of this type.
FEATURE
- Static variable in class javax.xml.transform.sax.
SAXTransformerFactory
If
TransformerFactory.getFeature(java.lang.String)
returns true when passed this value as an argument,
 the TransformerFactory returned from
TransformerFactory.newInstance()
may
 be safely cast to a SAXTransformerFactory.
FEATURE
- Static variable in class javax.xml.transform.stax.
StAXResult
If
TransformerFactory.getFeature(String name)
returns true when passed this value as an argument,
 the Transformer supports Result output of this type.
FEATURE
- Static variable in class javax.xml.transform.stax.
StAXSource
If
TransformerFactory.getFeature(String name)
returns true when passed this value as an argument,
 the Transformer supports Source input of this type.
FEATURE
- Static variable in class javax.xml.transform.stream.
StreamResult
If
TransformerFactory.getFeature(java.lang.String)
returns true when passed this value as an argument,
 the Transformer supports Result output of this type.
FEATURE
- Static variable in class javax.xml.transform.stream.
StreamSource
If
TransformerFactory.getFeature(java.lang.String)
returns true when passed this value as an argument,
 the Transformer supports Source input of this type.
FEATURE_SECURE_PROCESSING
- Static variable in class javax.xml.
XMLConstants
Feature for secure processing.
FEATURE_XMLFILTER
- Static variable in class javax.xml.transform.sax.
SAXTransformerFactory
If
TransformerFactory.getFeature(java.lang.String)
returns true when passed this value as an argument,
 the
SAXTransformerFactory.newXMLFilter(Source src)
and
SAXTransformerFactory.newXMLFilter(Templates templates)
methods are supported.
FeatureDescriptor
- Class in
java.beans
The FeatureDescriptor class is the common baseclass for PropertyDescriptor,
 EventSetDescriptor, and MethodDescriptor, etc.
FeatureDescriptor()
- Constructor for class java.beans.
FeatureDescriptor
Constructs a
FeatureDescriptor
.
FEBRUARY
- Enum constant in enum class java.time.
Month
The singleton instance for the month of February with 28 days, or 29 in a leap year.
FEBRUARY
- Static variable in class java.util.
Calendar
Value of the
Calendar.MONTH
field indicating the
 second month of the year in the Gregorian and Julian calendars.
FEBRUARY
- Static variable in class javax.xml.datatype.
DatatypeConstants
Value for second month of year.
FETCH_FORWARD
- Static variable in interface java.sql.
ResultSet
The constant indicating that the rows in a result set will be
 processed in a forward direction; first-to-last.
FETCH_REVERSE
- Static variable in interface java.sql.
ResultSet
The constant indicating that the rows in a result set will be
 processed in a reverse direction; last-to-first.
FETCH_UNKNOWN
- Static variable in interface java.sql.
ResultSet
The constant indicating that the order in which rows in a
 result set will be processed is unknown.
fetchNotifications(long, int, long)
- Method in interface javax.management.remote.rmi.
RMIConnection
Retrieves notifications from the connector server.
fetchNotifications(long, int, long)
- Method in class javax.management.remote.rmi.
RMIConnectionImpl_Stub
fetchNotifications(long, int, long)
- Method in class javax.management.remote.rmi.
RMIConnectionImpl
fictional()
- Method in class javax.swing.text.html.parser.
TagElement
Returns
true
if the tag is fictional.
Fidelity
- Class in
javax.print.attribute.standard
Class
Fidelity
is a printing attribute class, an enumeration, that
 indicates whether total fidelity to client supplied print request attributes
 is required.
Fidelity(int)
- Constructor for class javax.print.attribute.standard.
Fidelity
Construct a new fidelity enumeration value with the given integer value.
FIDELITY_FALSE
- Static variable in class javax.print.attribute.standard.
Fidelity
The printer should make reasonable attempts to print the job, even if it
 cannot print it exactly as specified.
FIDELITY_TRUE
- Static variable in class javax.print.attribute.standard.
Fidelity
The job must be printed exactly as specified. or else rejected.
field()
- Method in interface com.sun.jdi.event.
WatchpointEvent
Returns the field that is about to be accessed/modified.
field()
- Method in interface com.sun.jdi.request.
WatchpointRequest
Gets the Field being watched by this WatchpointRequest.
Field
- Class in
java.lang.reflect
A
Field
provides information about, and dynamic access to, a
 single field of a class or an interface.
Field
- Interface in
com.sun.jdi
A class or instance variable in the target VM.
Field(String)
- Constructor for class java.text.
Format.Field
Creates a Field with the specified name.
Field(String)
- Constructor for class java.text.
MessageFormat.Field
Creates a Field with the specified name.
Field(String)
- Constructor for class java.text.
NumberFormat.Field
Creates a Field instance with the specified
 name.
Field(String, int)
- Constructor for class java.text.
DateFormat.Field
Creates a
Field
.
FIELD
- Enum constant in enum class java.lang.annotation.
ElementType
Field declaration (includes enum constants)
FIELD
- Enum constant in enum class java.lang.reflect.
AccessFlag.Location
Field location.
FIELD
- Enum constant in enum class javax.lang.model.element.
ElementKind
A field not described by a more specific kind (like
ENUM_CONSTANT
).
FIELD
- Enum constant in enum class jdk.javadoc.doclet.
Taglet.Location
In the documentation for a field.
FIELD_COUNT
- Static variable in class java.util.
Calendar
The number of distinct fields recognized by
get
and
set
.
FIELD_UNDEFINED
- Static variable in class javax.xml.datatype.
DatatypeConstants
Designation that an "int" field is not set.
FieldBorder(Color, Color, Color, Color)
- Constructor for class javax.swing.plaf.basic.
BasicBorders.FieldBorder
Constructs a new instance of a
FieldBorder
.
fieldByName(String)
- Method in interface com.sun.jdi.
ReferenceType
Finds the visible
Field
with the given
 non-ambiguous name.
Field Manipulation
- Search tag in class java.util.Calendar
Section
fieldModifiers()
- Static method in class java.lang.reflect.
Modifier
Return an
int
value OR-ing together the source language
 modifiers that can be applied to a field.
FieldPosition
- Class in
java.text
FieldPosition
is a simple class used by
Format
and its subclasses to identify fields in formatted output.
FieldPosition(int)
- Constructor for class java.text.
FieldPosition
Creates a FieldPosition object for the given field.
FieldPosition(Format.Field)
- Constructor for class java.text.
FieldPosition
Creates a FieldPosition object for the given field constant.
FieldPosition(Format.Field, int)
- Constructor for class java.text.
FieldPosition
Creates a
FieldPosition
object for the given field.
fields
- Variable in class java.util.
Calendar
The calendar field values for the currently set time for this calendar.
fields()
- Method in interface com.sun.jdi.
ReferenceType
Returns a list containing each
Field
declared in this type.
Fields and Units
- Search tag in package java.time.temporal
Section
fieldsIn(Iterable<? extends Element>)
- Static method in class javax.lang.model.util.
ElementFilter
Returns a list of fields in
elements
.
fieldsIn(Set<? extends Element>)
- Static method in class javax.lang.model.util.
ElementFilter
Returns a set of fields in
elements
.
fieldVarHandle(MethodHandles.Lookup, String, Class<VarHandle>, Class<?>, Class<?>)
- Static method in class java.lang.invoke.
ConstantBootstraps
Finds a
VarHandle
for an instance field.
FieldView
- Class in
javax.swing.text
Extends the multi-line plain text view to be suitable
 for a single-line editor view.
FieldView(Element)
- Constructor for class javax.swing.text.
FieldView
Constructs a new FieldView wrapped on an element.
file()
- Method in class java.lang.
ProcessBuilder.Redirect
Returns the
File
source or destination associated
 with this redirect, or
null
if there is no such file.
File
- Class in
java.io
An abstract representation of file and directory pathnames.
File(File, String)
- Constructor for class java.io.
File
Creates a new
File
instance from a parent abstract
 pathname and a child pathname string.
File(String)
- Constructor for class java.io.
File
Creates a new
File
instance by converting the given
 pathname string into an abstract pathname.
File(String, String)
- Constructor for class java.io.
File
Creates a new
File
instance from a parent pathname string
 and a child pathname string.
File(URI)
- Constructor for class java.io.
File
Creates a new
File
instance by converting the given
file:
URI into an abstract pathname.
FILE
- Static variable in class java.awt.
JobAttributes.DestinationType
The
DestinationType
instance to use for
 specifying print to file.
FILE
- Static variable in class javax.print.attribute.standard.
ReferenceUriSchemesSupported
Host-specific file names.
FILE_CHOOSER
- Static variable in class javax.accessibility.
AccessibleRole
A specialized dialog that displays the files in the directory and lets
 the user select a file, browse a different directory, or specify a
 filename.
FILE_CHOOSER
- Static variable in class javax.swing.plaf.synth.
Region
FileChooser region.
FILE_CHOOSER_DIALOG
- Static variable in class javax.swing.
JRootPane
Constant used for the windowDecorationStyle property.
FILE_FILTER_CHANGED_PROPERTY
- Static variable in class javax.swing.
JFileChooser
User changed the kind of files to display.
FILE_HIDING_CHANGED_PROPERTY
- Static variable in class javax.swing.
JFileChooser
Identifies a change in the display-hidden-files property.
FILE_INHERIT
- Enum constant in enum class java.nio.file.attribute.
AclEntryFlag
Can be placed on a directory and indicates that the ACL entry should be
 added to each new non-directory file created.
FILE_SELECTION_MODE_CHANGED_PROPERTY
- Static variable in class javax.swing.
JFileChooser
Identifies a change in the kind of selection (single,
 multiple, etc.).
FILE_SOURCE_DSC
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "FileSource" tag.
FILE_SYSTEM_VIEW_CHANGED_PROPERTY
- Static variable in class javax.swing.
JFileChooser
Says that a different object is being used to find available drives
 on the system.
FILE_VERSION
- Static variable in class javax.swing.text.html.parser.
DTD
The version of a file
FILE_VIEW_CHANGED_PROPERTY
- Static variable in class javax.swing.
JFileChooser
Says that a different object is being used to retrieve file
 information.
file.encoding
- Search tag in java.lang.System.getProperties()
System Property
file.separator
- Search tag in java.lang.System.getProperties()
System Property
FileAlreadyExistsException
- Exception Class in
java.nio.file
Checked exception thrown when an attempt is made to create a file or
 directory and a file of that name already exists.
FileAlreadyExistsException(String)
- Constructor for exception class java.nio.file.
FileAlreadyExistsException
Constructs an instance of this class.
FileAlreadyExistsException(String, String, String)
- Constructor for exception class java.nio.file.
FileAlreadyExistsException
Constructs an instance of this class.
FileAttribute<T>
- Interface in
java.nio.file.attribute
An object that encapsulates the value of a file attribute that can be set
 atomically when creating a new file or directory by invoking the
createFile
or
createDirectory
methods.
FileAttributeView
- Interface in
java.nio.file.attribute
An attribute view that is a read-only or updatable view of non-opaque
 values associated with a file in a filesystem.
FileCacheImageInputStream
- Class in
javax.imageio.stream
An implementation of
ImageInputStream
that gets its
 input from a regular
InputStream
.
FileCacheImageInputStream(InputStream, File)
- Constructor for class javax.imageio.stream.
FileCacheImageInputStream
Constructs a
FileCacheImageInputStream
that will read
 from a given
InputStream
.
FileCacheImageOutputStream
- Class in
javax.imageio.stream
An implementation of
ImageOutputStream
that writes its
 output to a regular
OutputStream
.
FileCacheImageOutputStream(OutputStream, File)
- Constructor for class javax.imageio.stream.
FileCacheImageOutputStream
Constructs a
FileCacheImageOutputStream
that will write
 to a given
outputStream
.
FileChannel
- Class in
java.nio.channels
A channel for reading, writing, mapping, and manipulating a file.
FileChannel()
- Constructor for class java.nio.channels.
FileChannel
Initializes a new instance of this class.
FileChannel.MapMode
- Class in
java.nio.channels
A file-mapping mode.
FileChooserUI
- Class in
javax.swing.plaf
Pluggable look and feel interface for
JFileChooser
.
FileChooserUI()
- Constructor for class javax.swing.plaf.
FileChooserUI
Constructor for subclasses to call.
FileDescriptor
- Class in
java.io
Instances of the file descriptor class serve as an opaque handle
 to the underlying machine-specific structure representing an open
 file, an open socket, or another source or sink of bytes.
FileDescriptor()
- Constructor for class java.io.
FileDescriptor
Constructs an (invalid) FileDescriptor object.
FileDialog
- Class in
java.awt
The
FileDialog
class displays a dialog window
 from which the user can select a file.
FileDialog(Dialog)
- Constructor for class java.awt.
FileDialog
Creates a file dialog for loading a file.
FileDialog(Dialog, String)
- Constructor for class java.awt.
FileDialog
Creates a file dialog window with the specified title for loading
 a file.
FileDialog(Dialog, String, int)
- Constructor for class java.awt.
FileDialog
Creates a file dialog window with the specified title for loading
 or saving a file.
FileDialog(Frame)
- Constructor for class java.awt.
FileDialog
Creates a file dialog for loading a file.
FileDialog(Frame, String)
- Constructor for class java.awt.
FileDialog
Creates a file dialog window with the specified title for loading
 a file.
FileDialog(Frame, String, int)
- Constructor for class java.awt.
FileDialog
Creates a file dialog window with the specified title for loading
 or saving a file.
FileFilter
- Class in
javax.swing.filechooser
FileFilter
is an abstract class used by
JFileChooser
for filtering the set of files shown to the user.
FileFilter
- Interface in
java.io
A filter for abstract pathnames.
FileFilter()
- Constructor for class javax.swing.filechooser.
FileFilter
Constructor for subclasses to call.
File Format
- Search tag in package javax.swing.plaf.synth
Section
FileHandler
- Class in
java.util.logging
Simple file logging
Handler
.
FileHandler()
- Constructor for class java.util.logging.
FileHandler
Construct a default
FileHandler
.
FileHandler(String)
- Constructor for class java.util.logging.
FileHandler
Initialize a
FileHandler
to write to the given filename.
FileHandler(String, boolean)
- Constructor for class java.util.logging.
FileHandler
Initialize a
FileHandler
to write to the given filename,
 with optional append.
FileHandler(String, int, int)
- Constructor for class java.util.logging.
FileHandler
Initialize a
FileHandler
to write to a set of files.
FileHandler(String, int, int, boolean)
- Constructor for class java.util.logging.
FileHandler
Initialize a
FileHandler
to write to a set of files
 with optional append.
FileHandler(String, long, int, boolean)
- Constructor for class java.util.logging.
FileHandler
Initialize a
FileHandler
to write to a set of files
 with optional append.
File handler
- Search tag in class com.sun.net.httpserver.SimpleFileServer
Section
fileIcon
- Variable in class javax.swing.plaf.basic.
BasicFileChooserUI
File icon
FileIcon16()
- Constructor for class javax.swing.plaf.metal.
MetalIconFactory.FileIcon16
Constructs a
FileIcon16
.
FileImageInputStream
- Class in
javax.imageio.stream
An implementation of
ImageInputStream
that gets its
 input from a
File
or
RandomAccessFile
.
FileImageInputStream(File)
- Constructor for class javax.imageio.stream.
FileImageInputStream
Constructs a
FileImageInputStream
that will read
 from a given
File
.
FileImageInputStream(RandomAccessFile)
- Constructor for class javax.imageio.stream.
FileImageInputStream
Constructs a
FileImageInputStream
that will read
 from a given
RandomAccessFile
.
FileImageOutputStream
- Class in
javax.imageio.stream
An implementation of
ImageOutputStream
that writes its
 output directly to a
File
or
RandomAccessFile
.
FileImageOutputStream(File)
- Constructor for class javax.imageio.stream.
FileImageOutputStream
Constructs a
FileImageOutputStream
that will write
 to a given
File
.
FileImageOutputStream(RandomAccessFile)
- Constructor for class javax.imageio.stream.
FileImageOutputStream
Constructs a
FileImageOutputStream
that will write
 to a given
RandomAccessFile
.
FileInputStream
- Class in
java.io
A
FileInputStream
obtains input bytes
 from a file in a file system.
FileInputStream(File)
- Constructor for class java.io.
FileInputStream
Creates a
FileInputStream
by
 opening a connection to an actual file,
 the file named by the
File
object
file
in the file system.
FileInputStream(FileDescriptor)
- Constructor for class java.io.
FileInputStream
Creates a
FileInputStream
by using the file descriptor
fdObj
, which represents an existing connection to an
 actual file in the file system.
FileInputStream(String)
- Constructor for class java.io.
FileInputStream
Creates a
FileInputStream
by
 opening a connection to an actual file,
 the file named by the path name
name
in the file system.
fileKey()
- Method in interface java.nio.file.attribute.
BasicFileAttributes
Returns an object that uniquely identifies the given file, or
null
if a file key is not available.
FileLock
- Class in
java.nio.channels
A token representing a lock on a region of a file.
FileLock(AsynchronousFileChannel, long, long, boolean)
- Constructor for class java.nio.channels.
FileLock
Initializes a new instance of this class.
FileLock(FileChannel, long, long, boolean)
- Constructor for class java.nio.channels.
FileLock
Initializes a new instance of this class.
FileLockInterruptionException
- Exception Class in
java.nio.channels
Checked exception received by a thread when another thread interrupts it
 while it is waiting to acquire a file lock.
FileLockInterruptionException()
- Constructor for exception class java.nio.channels.
FileLockInterruptionException
Constructs an instance of this class.
fileManager
- Variable in class javax.tools.
ForwardingJavaFileManager
The file manager to which all methods are delegated.
fileManager(Function<StandardJavaFileManager, StandardJavaFileManager>)
- Method in class jdk.jshell.
JShell.Builder
Configure the
FileManager
to be used by compilation and
 source analysis.
FILENAME
- Static variable in interface javax.script.
ScriptEngine
Reserved key for a named value that is
 the name of the file being executed.
FileNameExtensionFilter
- Class in
javax.swing.filechooser
An implementation of
FileFilter
that filters using a
 specified set of extensions.
FileNameExtensionFilter(String, String...)
- Constructor for class javax.swing.filechooser.
FileNameExtensionFilter
Creates a
FileNameExtensionFilter
with the specified
 description and file name extensions.
FilenameFilter
- Interface in
java.io
Instances of classes that implement this interface are used to
 filter filenames.
FileNameMap
- Interface in
java.net
A simple interface which provides a mechanism to map
 between a file name and a MIME type string.
FileNotFoundException
- Exception Class in
java.io
Signals that an attempt to open the file denoted by a specified pathname
 has failed.
FileNotFoundException()
- Constructor for exception class java.io.
FileNotFoundException
Constructs a
FileNotFoundException
with
null
as its error detail message.
FileNotFoundException(String)
- Constructor for exception class java.io.
FileNotFoundException
Constructs a
FileNotFoundException
with the
 specified detail message.
fileObject
- Variable in class javax.tools.
ForwardingFileObject
The file object to which all methods are delegated.
FileObject
- Interface in
javax.tools
File abstraction for tools.
FileOutputStream
- Class in
java.io
A file output stream is an output stream for writing data to a
File
or to a
FileDescriptor
.
FileOutputStream(File)
- Constructor for class java.io.
FileOutputStream
Creates a file output stream to write to the file represented by
 the specified
File
object.
FileOutputStream(FileDescriptor)
- Constructor for class java.io.
FileOutputStream
Creates a file output stream to write to the specified file
 descriptor, which represents an existing connection to an actual
 file in the file system.
FileOutputStream(File, boolean)
- Constructor for class java.io.
FileOutputStream
Creates a file output stream to write to the file represented by
 the specified
File
object.
FileOutputStream(String)
- Constructor for class java.io.
FileOutputStream
Creates a file output stream to write to the file with the
 specified name.
FileOutputStream(String, boolean)
- Constructor for class java.io.
FileOutputStream
Creates a file output stream to write to the file with the specified
 name.
FileOwnerAttributeView
- Interface in
java.nio.file.attribute
A file attribute view that supports reading or updating the owner of a file.
FilePermission
- Class in
java.io
This class represents access to a file or directory.
FilePermission(String, String)
- Constructor for class java.io.
FilePermission
Creates a new FilePermission object with the specified actions.
Filer
- Interface in
javax.annotation.processing
This interface supports the creation of new files by an annotation
 processor.
FileReader
- Class in
java.io
Reads text from character files using a default buffer size.
FileReader(File)
- Constructor for class java.io.
FileReader
Creates a new
FileReader
, given the
File
to read,
 using the
default charset
.
FileReader(FileDescriptor)
- Constructor for class java.io.
FileReader
Creates a new
FileReader
, given the
FileDescriptor
to read,
 using the
default charset
.
FileReader(File, Charset)
- Constructor for class java.io.
FileReader
Creates a new
FileReader
, given the
File
to read and
 the
charset
.
FileReader(String)
- Constructor for class java.io.
FileReader
Creates a new
FileReader
, given the name of the file to read,
 using the
default charset
.
FileReader(String, Charset)
- Constructor for class java.io.
FileReader
Creates a new
FileReader
, given the name of the file to read
 and the
charset
.
FileRenderer()
- Constructor for class javax.swing.plaf.metal.
MetalFileChooserUI.FileRenderer
Deprecated.
Constructs a
FileRenderer
.
FilerException
- Exception Class in
javax.annotation.processing
Indicates a
Filer
detected an attempt to open a file that
 would violate the guarantees provided by the
Filer
.
FilerException(String)
- Constructor for exception class javax.annotation.processing.
FilerException
Constructs an exception with the specified detail message.
Files
- Class in
java.nio.file
This class consists exclusively of static methods that operate on files,
 directories, or other types of files.
FILES
- Enum constant in enum class javax.xml.catalog.
CatalogFeatures.Feature
The
javax.xml.catalog.files
property as described in
 item
FILES
of the
 Catalog Features table.
FILES_AND_DIRECTORIES
- Static variable in class javax.swing.
JFileChooser
Instruction to display both files and directories.
FILES_ONLY
- Static variable in class javax.swing.
JFileChooser
Instruction to display only files.
FilesEvent
- Class in
java.awt.desktop
Auxiliary event containing a list of files.
FileStore
- Class in
java.nio.file
Storage for files.
FileStore()
- Constructor for class java.nio.file.
FileStore
Initializes a new instance of this class.
FileStoreAttributeView
- Interface in
java.nio.file.attribute
An attribute view that is a read-only or updatable view of the attributes of
 a
FileStore
.
FileSystem
- Class in
java.nio.file
Provides an interface to a file system and is the factory for objects to
 access files and other objects in the file system.
FileSystem()
- Constructor for class java.nio.file.
FileSystem
Initializes a new instance of this class.
FileSystemAlreadyExistsException
- Exception Class in
java.nio.file
Runtime exception thrown when an attempt is made to create a file system that
 already exists.
FileSystemAlreadyExistsException()
- Constructor for exception class java.nio.file.
FileSystemAlreadyExistsException
Constructs an instance of this class.
FileSystemAlreadyExistsException(String)
- Constructor for exception class java.nio.file.
FileSystemAlreadyExistsException
Constructs an instance of this class.
FileSystemException
- Exception Class in
java.nio.file
Thrown when a file system operation fails on one or two files.
FileSystemException(String)
- Constructor for exception class java.nio.file.
FileSystemException
Constructs an instance of this class.
FileSystemException(String, String, String)
- Constructor for exception class java.nio.file.
FileSystemException
Constructs an instance of this class.
FileSystemLoopException
- Exception Class in
java.nio.file
Checked exception thrown when a file system loop, or cycle, is encountered.
FileSystemLoopException(String)
- Constructor for exception class java.nio.file.
FileSystemLoopException
Constructs an instance of this class.
FileSystemNotFoundException
- Exception Class in
java.nio.file
Runtime exception thrown when a file system cannot be found.
FileSystemNotFoundException()
- Constructor for exception class java.nio.file.
FileSystemNotFoundException
Constructs an instance of this class.
FileSystemNotFoundException(String)
- Constructor for exception class java.nio.file.
FileSystemNotFoundException
Constructs an instance of this class.
FileSystemProvider
- Class in
java.nio.file.spi
Service-provider class for file systems.
FileSystemProvider()
- Constructor for class java.nio.file.spi.
FileSystemProvider
Initializes a new instance of this class.
FileSystems
- Class in
java.nio.file
Factory methods for file systems.
FileSystemView
- Class in
javax.swing.filechooser
FileSystemView is JFileChooser's gateway to the
 file system.
FileSystemView()
- Constructor for class javax.swing.filechooser.
FileSystemView
Constructs a FileSystemView.
FileTime
- Class in
java.nio.file.attribute
Represents the value of a file's time stamp attribute.
FileTypeDetector
- Class in
java.nio.file.spi
A file type detector for probing a file to guess its file type.
FileTypeDetector()
- Constructor for class java.nio.file.spi.
FileTypeDetector
Initializes a new instance of this class.
FileView
- Class in
javax.swing.filechooser
FileView
defines an abstract class that can be implemented
 to provide the filechooser with UI information for a
File
.
FileView()
- Constructor for class javax.swing.filechooser.
FileView
Constructor for subclasses to call.
FileVisitOption
- Enum Class in
java.nio.file
Defines the file tree traversal options.
FileVisitor<T>
- Interface in
java.nio.file
A visitor of files.
FileVisitResult
- Enum Class in
java.nio.file
The result type of a
FileVisitor
.
FileWriter
- Class in
java.io
Writes text to character files using a default buffer size.
FileWriter(File)
- Constructor for class java.io.
FileWriter
Constructs a
FileWriter
given the
File
to write,
 using the
default charset
FileWriter(FileDescriptor)
- Constructor for class java.io.
FileWriter
Constructs a
FileWriter
given a file descriptor,
 using the
default charset
.
FileWriter(File, boolean)
- Constructor for class java.io.
FileWriter
Constructs a
FileWriter
given the
File
to write and
 a boolean indicating whether to append the data written, using the
default charset
.
FileWriter(File, Charset)
- Constructor for class java.io.
FileWriter
Constructs a
FileWriter
given the
File
to write and
charset
.
FileWriter(File, Charset, boolean)
- Constructor for class java.io.
FileWriter
Constructs a
FileWriter
given the
File
to write,
charset
and a boolean indicating
 whether to append the data written.
FileWriter(String)
- Constructor for class java.io.
FileWriter
Constructs a
FileWriter
given a file name, using the
default charset
FileWriter(String, boolean)
- Constructor for class java.io.
FileWriter
Constructs a
FileWriter
given a file name and a boolean indicating
 whether to append the data written, using the
default charset
.
FileWriter(String, Charset)
- Constructor for class java.io.
FileWriter
Constructs a
FileWriter
given a file name and
charset
.
FileWriter(String, Charset, boolean)
- Constructor for class java.io.
FileWriter
Constructs a
FileWriter
given a file name,
charset
and a boolean indicating
 whether to append the data written.
fill
- Variable in class java.awt.
GridBagConstraints
This field is used when the component's display area is larger
 than the component's requested size.
fill()
- Method in class java.util.zip.
InflaterInputStream
Fills input buffer with more data to decompress.
fill(boolean[], boolean)
- Static method in class java.util.
Arrays
Assigns the specified boolean value to each element of the specified
 array of booleans.
fill(boolean[], int, int, boolean)
- Static method in class java.util.
Arrays
Assigns the specified boolean value to each element of the specified
 range of the specified array of booleans.
fill(byte)
- Method in interface java.lang.foreign.
MemorySegment
PREVIEW
Fills the contents of this memory segment with the given value.
fill(byte[], byte)
- Static method in class java.util.
Arrays
Assigns the specified byte value to each element of the specified array
 of bytes.
fill(byte[], int, int, byte)
- Static method in class java.util.
Arrays
Assigns the specified byte value to each element of the specified
 range of the specified array of bytes.
fill(char[], char)
- Static method in class java.util.
Arrays
Assigns the specified char value to each element of the specified array
 of chars.
fill(char[], int, int, char)
- Static method in class java.util.
Arrays
Assigns the specified char value to each element of the specified
 range of the specified array of chars.
fill(double[], double)
- Static method in class java.util.
Arrays
Assigns the specified double value to each element of the specified
 array of doubles.
fill(double[], int, int, double)
- Static method in class java.util.
Arrays
Assigns the specified double value to each element of the specified
 range of the specified array of doubles.
fill(float[], float)
- Static method in class java.util.
Arrays
Assigns the specified float value to each element of the specified array
 of floats.
fill(float[], int, int, float)
- Static method in class java.util.
Arrays
Assigns the specified float value to each element of the specified
 range of the specified array of floats.
fill(int[], int)
- Static method in class java.util.
Arrays
Assigns the specified int value to each element of the specified array
 of ints.
fill(int[], int, int, int)
- Static method in class java.util.
Arrays
Assigns the specified int value to each element of the specified
 range of the specified array of ints.
fill(long[], int, int, long)
- Static method in class java.util.
Arrays
Assigns the specified long value to each element of the specified
 range of the specified array of longs.
fill(long[], long)
- Static method in class java.util.
Arrays
Assigns the specified long value to each element of the specified array
 of longs.
fill(short[], int, int, short)
- Static method in class java.util.
Arrays
Assigns the specified short value to each element of the specified
 range of the specified array of shorts.
fill(short[], short)
- Static method in class java.util.
Arrays
Assigns the specified short value to each element of the specified array
 of shorts.
fill(Shape)
- Method in class java.awt.
Graphics2D
Fills the interior of a
Shape
using the settings of the
Graphics2D
context.
fill(Object[], int, int, Object)
- Static method in class java.util.
Arrays
Assigns the specified Object reference to each element of the specified
 range of the specified array of Objects.
fill(Object[], Object)
- Static method in class java.util.
Arrays
Assigns the specified Object reference to each element of the specified
 array of Objects.
fill(List<? super T>, T)
- Static method in class java.util.
Collections
Replaces all of the elements of the specified list with the specified
 element.
FILL
- Static variable in class java.awt.font.
ShapeGraphicAttribute
A key indicating the shape should be filled.
FILL_ORDER_LEFT_TO_RIGHT
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A value to be used with the "FillOrder" tag.
FILL_ORDER_RIGHT_TO_LEFT
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A value to be used with the "FillOrder" tag.
fill3DRect(int, int, int, int, boolean)
- Method in class java.awt.
Graphics
Paints a 3-D highlighted rectangle filled with the current color.
fill3DRect(int, int, int, int, boolean)
- Method in class java.awt.
Graphics2D
Paints a 3-D highlighted rectangle filled with the current color.
fill3DRect(int, int, int, int, boolean)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.fill3DRect
.
fillArc(int, int, int, int, int, int)
- Method in class java.awt.
Graphics
Fills a circular or elliptical arc covering the specified rectangle.
fillArc(int, int, int, int, int, int)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.fillArc
.
filledSlider
- Variable in class javax.swing.plaf.metal.
MetalSliderUI
The value of the property
JSlider.isFilled
.
Filler(Dimension, Dimension, Dimension)
- Constructor for class javax.swing.
Box.Filler
Constructor to create shape with the given size ranges.
FILLER
- Static variable in class javax.accessibility.
AccessibleRole
An object that fills up space in a user interface.
fillInStackTrace()
- Method in exception class java.lang.
Throwable
Fills in the execution stack trace.
fillOval(int, int, int, int)
- Method in class java.awt.
Graphics
Fills an oval bounded by the specified rectangle with the
 current color.
fillOval(int, int, int, int)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.fillOval
.
fillPolygon(int[], int[], int)
- Method in class java.awt.
Graphics
Fills a closed polygon defined by
 arrays of
x
and
y
coordinates.
fillPolygon(int[], int[], int)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.fillPolygon
.
fillPolygon(Polygon)
- Method in class java.awt.
Graphics
Fills the polygon defined by the specified Polygon object with
 the graphics context's current color.
fillRect(int, int, int, int)
- Method in class java.awt.
Graphics
Fills the specified rectangle.
fillRect(int, int, int, int)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.fillRect
.
fillRoundRect(int, int, int, int, int, int)
- Method in class java.awt.
Graphics
Fills the specified rounded corner rectangle with the current color.
fillRoundRect(int, int, int, int, int, int)
- Method in class javax.swing.
DebugGraphics
Overrides
Graphics.fillRoundRect
.
filter(BufferedImage, BufferedImage)
- Method in class java.awt.image.
AffineTransformOp
Transforms the source
BufferedImage
and stores the results
 in the destination
BufferedImage
.
filter(BufferedImage, BufferedImage)
- Method in interface java.awt.image.
BufferedImageOp
Performs a single-input/single-output operation on a
BufferedImage
.
filter(BufferedImage, BufferedImage)
- Method in class java.awt.image.
ColorConvertOp
ColorConverts the source BufferedImage.
filter(BufferedImage, BufferedImage)
- Method in class java.awt.image.
ConvolveOp
Performs a convolution on BufferedImages.
filter(BufferedImage, BufferedImage)
- Method in class java.awt.image.
LookupOp
Performs a lookup operation on a
BufferedImage
.
filter(BufferedImage, BufferedImage)
- Method in class java.awt.image.
RescaleOp
Rescales the source BufferedImage.
filter(Raster, WritableRaster)
- Method in class java.awt.image.
AffineTransformOp
Transforms the source
Raster
and stores the results in
 the destination
Raster
.
filter(Raster, WritableRaster)
- Method in class java.awt.image.
BandCombineOp
Transforms the
Raster
using the matrix specified in the
 constructor.
filter(Raster, WritableRaster)
- Method in class java.awt.image.
ColorConvertOp
ColorConverts the image data in the source Raster.
filter(Raster, WritableRaster)
- Method in class java.awt.image.
ConvolveOp
Performs a convolution on Rasters.
filter(Raster, WritableRaster)
- Method in class java.awt.image.
LookupOp
Performs a lookup operation on a
Raster
.
filter(Raster, WritableRaster)
- Method in interface java.awt.image.
RasterOp
Performs a single-input/single-output operation from a source Raster
 to a destination Raster.
filter(Raster, WritableRaster)
- Method in class java.awt.image.
RescaleOp
Rescales the pixel data in the source Raster.
filter(Object)
- Method in interface javax.imageio.spi.
ServiceRegistry.Filter
Returns
true
if the given
provider
object matches the criterion defined
 by this
Filter
.
filter(DoublePredicate)
- Method in interface java.util.stream.
DoubleStream
Returns a stream consisting of the elements of this stream that match
 the given predicate.
filter(IntPredicate)
- Method in interface java.util.stream.
IntStream
Returns a stream consisting of the elements of this stream that match
 the given predicate.
filter(LongPredicate)
- Method in interface java.util.stream.
LongStream
Returns a stream consisting of the elements of this stream that match
 the given predicate.
filter(Predicate<? super T>)
- Method in class java.util.
Optional
If a value is present, and the value matches the given predicate,
 returns an
Optional
describing the value, otherwise returns an
 empty
Optional
.
filter(Predicate<? super T>)
- Method in interface java.util.stream.
Stream
Returns a stream consisting of the elements of this stream that match
 the given predicate.
filter(List<Locale.LanguageRange>, Collection<Locale>)
- Static method in class java.util.
Locale
Returns a list of matching
Locale
instances using the filtering
 mechanism defined in RFC 4647.
filter(List<Locale.LanguageRange>, Collection<Locale>, Locale.FilteringMode)
- Static method in class java.util.
Locale
Returns a list of matching
Locale
instances using the filtering
 mechanism defined in RFC 4647.
filter(GuardedInvocation, LinkRequest, LinkerServices)
- Method in interface jdk.dynalink.linker.
GuardedInvocationTransformer
Given a guarded invocation, return either the same or potentially
 different guarded invocation.
Filter
- Class in
com.sun.net.httpserver
A filter used to pre- and post-process incoming requests.
Filter
- Interface in
java.util.logging
A Filter can be used to provide fine grain control over
 what is logged, beyond the control provided by log levels.
Filter()
- Constructor for class com.sun.net.httpserver.
Filter
Constructor for subclasses to call.
FILTER_ACCEPT
- Static variable in interface org.w3c.dom.ls.
LSParserFilter
Accept the node.
FILTER_ACCEPT
- Static variable in interface org.w3c.dom.traversal.
NodeFilter
Accept the node.
FILTER_INTERRUPT
- Static variable in interface org.w3c.dom.ls.
LSParserFilter
Interrupt the normal processing of the document.
FILTER_REJECT
- Static variable in interface org.w3c.dom.ls.
LSParserFilter
Reject the node and its children.
FILTER_REJECT
- Static variable in interface org.w3c.dom.traversal.
NodeFilter
Reject the node.
FILTER_SKIP
- Static variable in interface org.w3c.dom.ls.
LSParserFilter
Skip this single node.
FILTER_SKIP
- Static variable in interface org.w3c.dom.traversal.
NodeFilter
Skip this single node.
Filter.Chain
- Class in
com.sun.net.httpserver
A chain of filters associated with a
HttpServer
.
filterArguments(int, MethodHandle...)
- Method in class jdk.dynalink.linker.
GuardedInvocation
Applies argument filters to both the invocation and the guard
 (if it exists and has at least
pos + 1
parameters) with
MethodHandles.filterArguments(MethodHandle, int, MethodHandle...)
.
filterArguments(MethodHandle, int, MethodHandle...)
- Static method in class java.lang.invoke.
MethodHandles
Adapts a target method handle by pre-processing
 one or more of its arguments, each with its own unary filter function,
 and then calling the target with each pre-processed argument
 replaced by the result of its corresponding filter function.
FilterBypass()
- Constructor for class javax.swing.text.
DocumentFilter.FilterBypass
Constructor for subclasses to call.
FilterBypass()
- Constructor for class javax.swing.text.
NavigationFilter.FilterBypass
Constructor for subclasses to call.
FilterComboBoxModel()
- Constructor for class javax.swing.plaf.metal.
MetalFileChooserUI.FilterComboBoxModel
Constructs an instance of
FilterComboBoxModel
.
FilterComboBoxRenderer()
- Constructor for class javax.swing.plaf.metal.
MetalFileChooserUI.FilterComboBoxRenderer
Constructs a
FilterComboBoxRenderer
.
filterCoordinates(VarHandle, int, MethodHandle...)
- Static method in class java.lang.invoke.
MethodHandles
Adapts a target var handle by pre-processing incoming coordinate values using unary filter functions.
FILTERED
- Static variable in class java.util.zip.
Deflater
Compression strategy best used for data consisting mostly of small
 values with a somewhat random distribution.
FilteredImageSource
- Class in
java.awt.image
This class is an implementation of the ImageProducer interface which
 takes an existing image and a filter object and uses them to produce
 image data for a new filtered version of the original image.
FilteredImageSource(ImageProducer, ImageFilter)
- Constructor for class java.awt.image.
FilteredImageSource
Constructs an ImageProducer object from an existing ImageProducer
 and a filter object.
FilteredRowSet
- Interface in
javax.sql.rowset
The standard interface that all standard implementations of
FilteredRowSet
must implement.
filterIndexColorModel(IndexColorModel)
- Method in class java.awt.image.
RGBImageFilter
Filters an IndexColorModel object by running each entry in its
 color tables through the filterRGB function that RGBImageFilter
 subclasses must provide.
filtering(Predicate<? super T>, Collector<? super T, A, R>)
- Static method in class java.util.stream.
Collectors
Adapts a
Collector
to one accepting elements of the same type
T
by applying the predicate to each input element and only
 accumulating if the predicate returns
true
.
Filtering
- Search tag in class java.util.Locale
Section
FilterInputStream
- Class in
java.io
A
FilterInputStream
wraps some other input stream, which it uses as
 its basic source of data, possibly transforming the data along the way or
 providing additional functionality.
FilterInputStream(InputStream)
- Constructor for class java.io.
FilterInputStream
Creates a
FilterInputStream
by assigning the  argument
in
to the field
this.in
so as
 to remember it for later use.
filterInternalObjects(MethodHandle)
- Method in interface jdk.dynalink.linker.
LinkerServices
Modifies the method handle so that any parameters that can receive
 potentially internal language runtime objects will have a filter added on
 them to prevent them from escaping, potentially by wrapping them.
Filter Model Examples
- Search tag in interface java.io.ObjectInputFilter
Section
FilterOutputStream
- Class in
java.io
This class is the superclass of all classes that filter output
 streams.
FilterOutputStream(OutputStream)
- Constructor for class java.io.
FilterOutputStream
Creates an output stream filter built on top of the specified
 underlying output stream.
FilterReader
- Class in
java.io
Abstract class for reading filtered character streams.
FilterReader(Reader)
- Constructor for class java.io.
FilterReader
Creates a new filtered reader.
filterReturnValue(MethodHandle, MethodHandle)
- Static method in class java.lang.invoke.
MethodHandles
Adapts a target method handle by post-processing
 its return value (if any) with a filter (another method handle).
filterRGB(int, int, int)
- Method in class java.awt.image.
RGBImageFilter
Subclasses must specify a method to convert a single input pixel
 in the default RGB ColorModel to a single output pixel.
filterRGB(int, int, int)
- Method in class javax.swing.
GrayFilter
Overrides
RGBImageFilter.filterRGB
.
filterRGBPixels(int, int, int, int, int[], int, int)
- Method in class java.awt.image.
RGBImageFilter
Filters a buffer of pixels in the default RGB ColorModel by passing
 them one by one through the filterRGB method.
filters
- Variable in class javax.swing.plaf.metal.
MetalFileChooserUI.FilterComboBoxModel
An array of file filters.
Filters
- Search tag in interface java.io.ObjectInputFilter
Section
filterTags(List<Locale.LanguageRange>, Collection<String>)
- Static method in class java.util.
Locale
Returns a list of matching languages tags using the basic filtering
 mechanism defined in RFC 4647.
filterTags(List<Locale.LanguageRange>, Collection<String>, Locale.FilteringMode)
- Static method in class java.util.
Locale
Returns a list of matching languages tags using the basic filtering
 mechanism defined in RFC 4647.
filterValue(VarHandle, MethodHandle, MethodHandle)
- Static method in class java.lang.invoke.
MethodHandles
Adapts a target var handle by pre-processing incoming and outgoing values using a pair of filter functions.
FilterWriter
- Class in
java.io
Abstract class for writing filtered character streams.
FilterWriter(Writer)
- Constructor for class java.io.
FilterWriter
Create a new filtered writer.
FINAL
- Enum constant in enum class java.lang.reflect.
AccessFlag
The access flag
ACC_FINAL
, corresponding to the source
 modifier
final
, with a mask
 value of
0x0010
.
FINAL
- Enum constant in enum class javax.lang.model.element.
Modifier
The modifier
final
FINAL
- Static variable in class java.lang.reflect.
Modifier
The
int
value representing the
final
modifier.
FINAL_QUOTE_PUNCTUATION
- Static variable in class java.lang.
Character
General category "Pf" in the Unicode specification.
finalize()
- Method in class java.awt.
Graphics
Deprecated, for removal: This API element is subject to removal in a future version.
Finalization has been deprecated for removal.  See
Object.finalize()
for background information and details
 about migration options.
finalize()
- Method in class java.awt.
PrintJob
Deprecated, for removal: This API element is subject to removal in a future version.
Finalization has been deprecated for removal.  See
Object.finalize()
for background information and details
 about migration options.
finalize()
- Method in class java.lang.
Enum
Deprecated, for removal: This API element is subject to removal in a future version.
Finalization has been deprecated for removal.  See
Object.finalize()
for background information and details
 about migration options.
finalize()
- Method in class java.lang.
Object
Deprecated, for removal: This API element is subject to removal in a future version.
Finalization is deprecated and subject to removal in a future
 release. The use of finalization can lead to problems with security,
 performance, and reliability.
 See
JEP 421
for
 discussion and alternatives.
Subclasses that override
finalize
to perform cleanup should use
 alternative cleanup mechanisms and remove the
finalize
method.
 Use
Cleaner
and
PhantomReference
as safer ways to release resources
 when an object becomes unreachable. Alternatively, add a
close
method to explicitly release resources, and implement
AutoCloseable
to enable use of the
try
-with-resources
 statement.
This method will remain in place until finalizers have been removed from
 most existing code.
finalize()
- Method in class java.util.concurrent.
ThreadPoolExecutor
Deprecated, for removal: This API element is subject to removal in a future version.
Finalization has been deprecated for removal.  See
Object.finalize()
for background information and details
 about migration options.
finalize()
- Method in class javax.imageio.spi.
ServiceRegistry
Deprecated, for removal: This API element is subject to removal in a future version.
Finalization has been deprecated for removal.  See
Object.finalize()
for background information and details
 about migration options.
finalize()
- Method in class javax.imageio.stream.
FileCacheImageInputStream
Deprecated, for removal: This API element is subject to removal in a future version.
Finalization has been deprecated for removal.  See
Object.finalize()
for background information and details
 about migration options.
finalize()
- Method in class javax.imageio.stream.
FileImageInputStream
Deprecated, for removal: This API element is subject to removal in a future version.
Finalization has been deprecated for removal.  See
Object.finalize()
for background information and details
 about migration options.
finalize()
- Method in class javax.imageio.stream.
FileImageOutputStream
Deprecated, for removal: This API element is subject to removal in a future version.
Finalization has been deprecated for removal.  See
Object.finalize()
for background information and details
 about migration options.
finalize()
- Method in class javax.imageio.stream.
ImageInputStreamImpl
Deprecated, for removal: This API element is subject to removal in a future version.
Finalization has been deprecated for removal.  See
Object.finalize()
for background information and details
 about migration options.
finalize()
- Method in class javax.imageio.stream.
MemoryCacheImageInputStream
Deprecated, for removal: This API element is subject to removal in a future version.
Finalization has been deprecated for removal.  See
Object.finalize()
for background information and details
 about migration options.
finalSubString(AttributeValueExp, StringValueExp)
- Static method in class javax.management.
Query
Returns a query expression that represents a matching constraint on
 a string argument.
find()
- Method in class java.util.regex.
Matcher
Attempts to find the next subsequence of the input sequence that matches
 the pattern.
find(int)
- Method in class java.util.regex.
Matcher
Resets this matcher and then attempts to find the next subsequence of
 the input sequence that matches the pattern, starting at the specified
 index.
find(String)
- Method in interface java.lang.foreign.
SymbolLookup
PREVIEW
Returns the address of the symbol with the given name.
find(String)
- Method in interface java.lang.module.
ModuleFinder
Finds a reference to a module of a given name.
find(String)
- Method in interface java.lang.module.
ModuleReader
Finds a resource, returning a URI to the resource in the module.
find(Path, int, BiPredicate<Path, BasicFileAttributes>, FileVisitOption...)
- Static method in class java.nio.file.
Files
Return a
Stream
that is lazily populated with
Path
by searching for files in a file tree rooted at a given starting
 file.
findAll()
- Method in interface java.lang.module.
ModuleFinder
Returns the set of all module references that this finder can locate.
findAll(String)
- Method in class java.util.
Scanner
Returns a stream of match results that match the provided pattern string.
findAll(Pattern)
- Method in class java.util.
Scanner
Returns a stream of match results from this scanner.
findAny()
- Method in interface java.util.stream.
DoubleStream
Returns an
OptionalDouble
describing some element of the stream,
 or an empty
OptionalDouble
if the stream is empty.
findAny()
- Method in interface java.util.stream.
IntStream
Returns an
OptionalInt
describing some element of the stream, or
 an empty
OptionalInt
if the stream is empty.
findAny()
- Method in interface java.util.stream.
LongStream
Returns an
OptionalLong
describing some element of the stream, or
 an empty
OptionalLong
if the stream is empty.
findAny()
- Method in interface java.util.stream.
Stream
Returns an
Optional
describing some element of the stream, or an
 empty
Optional
if the stream is empty.
findAssociatedMBeans(ObjectName, String, String)
- Method in class javax.management.relation.
RelationService
Retrieves the MBeans associated to given one in a relation.
findAssociatedMBeans(ObjectName, String, String)
- Method in interface javax.management.relation.
RelationServiceMBean
Retrieves the MBeans associated to given one in a relation.
findClass(String)
- Method in class java.lang.
ClassLoader
Finds the class with the specified
binary name
.
findClass(String)
- Method in class java.lang.invoke.
MethodHandles.Lookup
Looks up a class by name from the lookup context defined by this
Lookup
object,
as if resolved
by an
ldc
instruction.
findClass(String)
- Method in class java.net.
URLClassLoader
Finds and loads the class with the specified name from the URL search
 path.
findClass(String)
- Method in class javax.management.loading.
MLet
Deprecated.
This is the main method for class loaders that is being redefined.
findClass(String)
- Method in class jdk.jshell.execution.
DirectExecutionControl
Finds the class with the specified binary name.
findClass(String)
- Method in interface jdk.jshell.execution.
LoaderDelegate
Finds the class with the specified binary name.
findClass(String, String)
- Method in class java.lang.
ClassLoader
Finds the class with the given
binary name
in a module defined to this class loader.
findColumn(String)
- Method in interface java.sql.
ResultSet
Maps the given
ResultSet
column label to its
ResultSet
column index.
findColumn(String)
- Method in class javax.swing.table.
AbstractTableModel
Returns a column given its name.
findComponentAt(int, int)
- Method in class java.awt.
Container
Locates the visible child component that contains the specified
 position.
findComponentAt(Point)
- Method in class java.awt.
Container
Locates the visible child component that contains the specified
 point.
findConstructor(Class<?>, MethodType)
- Method in class java.lang.invoke.
MethodHandles.Lookup
Produces a method handle which creates an object and initializes it, using
 the constructor of the specified type.
findDeadlockedThreads()
- Method in interface java.lang.management.
ThreadMXBean
Finds cycles of platform threads that are in deadlock waiting to
 acquire object monitors or
ownable synchronizers
.
findEditor(Class<?>)
- Static method in class java.beans.
PropertyEditorManager
Locate a value editor for a given target type.
findElementMatchingTag(HTMLDocument, int, HTML.Tag)
- Method in class javax.swing.text.html.
HTMLEditorKit.HTMLTextAction
Returns the deepest element at
offset
matching
tag
.
FindException
- Exception Class in
java.lang.module
Thrown by a
ModuleFinder
when an error occurs finding
 a module.
FindException()
- Constructor for exception class java.lang.module.
FindException
Constructs a
FindException
with no detail message.
FindException(String)
- Constructor for exception class java.lang.module.
FindException
Constructs a
FindException
with the given detail
 message.
FindException(String, Throwable)
- Constructor for exception class java.lang.module.
FindException
Constructs a
FindException
with the given detail message
 and cause.
FindException(Throwable)
- Constructor for exception class java.lang.module.
FindException
Constructs a
FindException
with the given cause.
findFirst()
- Method in class java.util.
ServiceLoader
Load the first available service provider of this loader's service.
findFirst()
- Method in interface java.util.stream.
DoubleStream
Returns an
OptionalDouble
describing the first element of this
 stream, or an empty
OptionalDouble
if the stream is empty.
findFirst()
- Method in interface java.util.stream.
IntStream
Returns an
OptionalInt
describing the first element of this
 stream, or an empty
OptionalInt
if the stream is empty.
findFirst()
- Method in interface java.util.stream.
LongStream
Returns an
OptionalLong
describing the first element of this
 stream, or an empty
OptionalLong
if the stream is empty.
findFirst()
- Method in interface java.util.stream.
Stream
Returns an
Optional
describing the first element of this stream,
 or an empty
Optional
if the stream is empty.
findFirst(String)
- Static method in interface java.util.spi.
ToolProvider
Returns the first instance of a
ToolProvider
with the given name,
 as loaded by
ServiceLoader
using the system class loader.
findFirst(Operation)
- Static method in enum class jdk.dynalink.
StandardNamespace
If the passed in operation is a
NamespaceOperation
, or a
NamedOperation
wrapping a
NamespaceOperation
, then it
 returns the first (if any)
StandardNamespace
in its namespace
 list.
findFocusOwner(Component)
- Static method in class javax.swing.
SwingUtilities
Deprecated.
As of 1.4, replaced by
KeyboardFocusManager.getFocusOwner()
.
findGetter(Class<?>, String, Class<?>)
- Method in class java.lang.invoke.
MethodHandles.Lookup
Produces a method handle giving read access to a non-static field.
findGetter(Class<?>, String, Class<?>)
- Method in class jdk.dynalink.linker.support.
Lookup
Performs a
MethodHandles.Lookup.findGetter(Class, String, Class)
,
 converting any encountered
IllegalAccessException
into an
IllegalAccessError
and
NoSuchFieldException
into a
NoSuchFieldError
.
findInLine(String)
- Method in class java.util.
Scanner
Attempts to find the next occurrence of a pattern constructed from the
 specified string, ignoring delimiters.
findInLine(Pattern)
- Method in class java.util.
Scanner
Attempts to find the next occurrence of the specified pattern ignoring
 delimiters.
findLibrary(String)
- Method in class java.lang.
ClassLoader
Returns the absolute path name of a native library.
findLibrary(String)
- Method in class javax.management.loading.
MLet
Deprecated.
Returns the absolute path name of a native library.
findLoadedClass(String)
- Method in class java.lang.
ClassLoader
Returns the class with the given
binary name
if this
 loader has been recorded by the Java virtual machine as an initiating
 loader of a class with that
binary name
.
findLoader(String)
- Method in class java.lang.
ModuleLayer
Returns the
ClassLoader
for the module with the given name.
findMBeanServer(String)
- Static method in class javax.management.
MBeanServerFactory
Return a list of registered MBeanServer objects.
findMedia(float, float, int)
- Static method in class javax.print.attribute.standard.
MediaSize
The specified dimensions are used to locate a matching
MediaSize
instance from amongst all the standard
MediaSize
instances.
findModule(String)
- Method in class java.lang.module.
Configuration
Finds a resolved module in this configuration, or if not in this
 configuration, the
parent
configurations.
findModule(String)
- Method in class java.lang.
ModuleLayer
Returns the module with the given name in this layer, or if not in this
 layer, the
parent
layers.
findMonitorDeadlockedThreads()
- Method in interface java.lang.management.
ThreadMXBean
Finds cycles of platform threads that are in deadlock waiting to acquire
 object monitors.
findOffsetToCharactersInString(char[], int)
- Method in class javax.swing.text.
ParagraphView
Finds the next character in the document with a character in
string
, starting at offset
start
.
findOwnSpecial(MethodHandles.Lookup, String, Class<?>, Class<?>...)
- Static method in class jdk.dynalink.linker.support.
Lookup
Given a lookup, finds using
Lookup.findSpecial(Class, String, MethodType)
a method on that lookup's class.
findOwnSpecial(String, Class<?>, Class<?>...)
- Method in class jdk.dynalink.linker.support.
Lookup
Finds using
Lookup.findSpecial(Class, String, MethodType)
a method on
 that lookup's class.
findOwnStatic(MethodHandles.Lookup, String, Class<?>, Class<?>...)
- Static method in class jdk.dynalink.linker.support.
Lookup
Given a lookup, finds using
Lookup.findStatic(Class, String, MethodType)
a method on that lookup's class.
findOwnStatic(String, Class<?>, Class<?>...)
- Method in class jdk.dynalink.linker.support.
Lookup
Finds using
Lookup.findStatic(Class, String, MethodType)
a method on
 that lookup's class.
findReferencingRelations(ObjectName, String, String)
- Method in class javax.management.relation.
RelationService
Retrieves the relations where a given MBean is referenced.
findReferencingRelations(ObjectName, String, String)
- Method in interface javax.management.relation.
RelationServiceMBean
Retrieves the relations where a given MBean is referenced.
findRelationsOfType(String)
- Method in class javax.management.relation.
RelationService
Returns the relation ids for relations of the given type.
findRelationsOfType(String)
- Method in interface javax.management.relation.
RelationServiceMBean
Returns the relation ids for relations of the given type.
findResource(String)
- Method in class java.lang.
ClassLoader
Finds the resource with the given name.
findResource(String)
- Method in class java.net.
URLClassLoader
Finds the resource with the specified name on the URL search path.
findResource(String, String)
- Method in class java.lang.
ClassLoader
Returns a URL to a resource in a module defined to this class loader.
findResources(String)
- Method in class java.lang.
ClassLoader
Returns an enumeration of
URL
objects
 representing all the resources with the given name.
findResources(String)
- Method in class java.net.
URLClassLoader
Returns an Enumeration of URLs representing all of the resources
 on the URL search path having the specified name.
findSetter(Class<?>, String, Class<?>)
- Method in class java.lang.invoke.
MethodHandles.Lookup
Produces a method handle giving write access to a non-static field.
findSpecial(Class<?>, String, MethodType)
- Method in class jdk.dynalink.linker.support.
Lookup
Performs a
MethodHandles.Lookup.findSpecial(Class, String, MethodType, Class)
on the underlying lookup.
findSpecial(Class<?>, String, MethodType, Class<?>)
- Method in class java.lang.invoke.
MethodHandles.Lookup
Produces an early-bound method handle for a virtual method.
findStatic(Class<?>, String, MethodType)
- Method in class java.lang.invoke.
MethodHandles.Lookup
Produces a method handle for a static method.
findStatic(Class<?>, String, MethodType)
- Method in class jdk.dynalink.linker.support.
Lookup
Performs a
MethodHandles.Lookup.findStatic(Class, String, MethodType)
on the underlying lookup.
findStaticGetter(Class<?>, String, Class<?>)
- Method in class java.lang.invoke.
MethodHandles.Lookup
Produces a method handle giving read access to a static field.
findStaticSetter(Class<?>, String, Class<?>)
- Method in class java.lang.invoke.
MethodHandles.Lookup
Produces a method handle giving write access to a static field.
findStaticVarHandle(Class<?>, String, Class<?>)
- Method in class java.lang.invoke.
MethodHandles.Lookup
Produces a VarHandle giving access to a static field
name
of
 type
type
declared in a class of type
decl
.
findSystemClass(String)
- Method in class java.lang.
ClassLoader
Finds a class with the specified
binary name
,
 loading it if necessary.
findVarHandle(Class<?>, String, Class<?>)
- Method in class java.lang.invoke.
MethodHandles.Lookup
Produces a VarHandle giving access to a non-static field
name
of type
type
declared in a class of type
recv
.
findVirtual(Class<?>, String, MethodType)
- Method in class java.lang.invoke.
MethodHandles.Lookup
Produces a method handle for a virtual method.
findVirtual(Class<?>, String, MethodType)
- Method in class jdk.dynalink.linker.support.
Lookup
Performs a
MethodHandles.Lookup.findVirtual(Class, String, MethodType)
on the underlying lookup.
findWithinHorizon(String, int)
- Method in class java.util.
Scanner
Attempts to find the next occurrence of a pattern constructed from the
 specified string, ignoring delimiters.
findWithinHorizon(Pattern, int)
- Method in class java.util.
Scanner
Attempts to find the next occurrence of the specified pattern.
fine(String)
- Method in class java.util.logging.
Logger
Log a FINE message.
fine(Supplier<String>)
- Method in class java.util.logging.
Logger
Log a FINE message, which is only to be constructed if the logging
 level is such that the message will actually be logged.
FINE
- Static variable in class java.util.logging.
Level
FINE is a message level providing tracing information.
finer(String)
- Method in class java.util.logging.
Logger
Log a FINER message.
finer(Supplier<String>)
- Method in class java.util.logging.
Logger
Log a FINER message, which is only to be constructed if the logging
 level is such that the message will actually be logged.
FINER
- Static variable in class java.util.logging.
Level
FINER indicates a fairly detailed tracing message.
finest(String)
- Method in class java.util.logging.
Logger
Log a FINEST message.
finest(Supplier<String>)
- Method in class java.util.logging.
Logger
Log a FINEST message, which is only to be constructed if the logging
 level is such that the message will actually be logged.
FINEST
- Static variable in class java.util.logging.
Level
FINEST indicates a highly detailed tracing message.
finish()
- Method in class java.util.zip.
Deflater
When called, indicates that compression should end with the current
 contents of the input buffer.
finish()
- Method in class java.util.zip.
DeflaterOutputStream
Finishes writing compressed data to the output stream without closing
 the underlying stream.
finish()
- Method in class java.util.zip.
GZIPOutputStream
Finishes writing compressed data to the output stream without closing
 the underlying stream.
finish()
- Method in class java.util.zip.
InflaterOutputStream
Finishes writing uncompressed data to the output stream without closing
 the underlying stream.
finish()
- Method in class java.util.zip.
ZipOutputStream
Finishes writing the contents of the ZIP output stream without closing
 the underlying stream.
finishConnect()
- Method in class com.sun.nio.sctp.
SctpChannel
Finishes the process of connecting an SCTP channel.
finishConnect()
- Method in class java.nio.channels.
SocketChannel
Finishes the process of connecting a socket channel.
finishDraggingTo(int)
- Method in class javax.swing.plaf.basic.
BasicSplitPaneDivider
Messages the BasicSplitPaneUI with finishDraggingTo that this instance
 is contained in.
finishDraggingTo(int)
- Method in class javax.swing.plaf.basic.
BasicSplitPaneUI
Messaged to finish the dragging session.
finished()
- Method in class java.util.zip.
Deflater
Returns true if the end of the compressed data output stream has
 been reached.
finished()
- Method in class java.util.zip.
Inflater
Returns true if the end of the compressed data stream has been
 reached.
finished(TaskEvent)
- Method in interface com.sun.source.util.
TaskListener
Invoked when an event has been completed.
FINISHED
- Enum constant in enum class javax.net.ssl.
SSLEngineResult.HandshakeStatus
The
SSLEngine
has just finished handshaking.
finishedPaintingChildren(JSplitPane, Graphics)
- Method in class javax.swing.plaf.basic.
BasicSplitPaneUI
Called when the specified split pane has finished painting
 its children.
finishedPaintingChildren(JSplitPane, Graphics)
- Method in class javax.swing.plaf.multi.
MultiSplitPaneUI
Invokes the
finishedPaintingChildren
method on each UI handled by this object.
finishedPaintingChildren(JSplitPane, Graphics)
- Method in class javax.swing.plaf.
SplitPaneUI
Messaged after the JSplitPane the receiver is providing the look
 and feel for paints its children.
finisher()
- Method in interface java.util.stream.
Collector
Perform the final transformation from the intermediate accumulation type
A
to the final result type
R
.
Finishings
- Class in
javax.print.attribute.standard
Class
Finishings
is a printing attribute class, an enumeration, that
 identifies whether the printer applies a finishing operation of some kind of
 binding to each copy of each printed document in the job.
Finishings(int)
- Constructor for class javax.print.attribute.standard.
Finishings
Construct a new finishings binding enumeration value with the given
 integer value.
fireActionEvent()
- Method in class javax.swing.
JComboBox
Notifies all listeners that have registered interest for
 notification on this event type.
fireActionPerformed()
- Method in class javax.swing.
JTextField
Notifies all listeners that have registered interest for
 notification on this event type.
fireActionPerformed(ActionEvent)
- Method in class javax.swing.
AbstractButton
Notifies all listeners that have registered interest for
 notification on this event type.
fireActionPerformed(ActionEvent)
- Method in class javax.swing.
DefaultButtonModel
Notifies all listeners that have registered interest for
 notification on this event type.
fireActionPerformed(ActionEvent)
- Method in class javax.swing.
Timer
Notifies all listeners that have registered interest for
 notification on this event type.
fireActionPerformed(String)
- Method in class javax.swing.
JFileChooser
Notifies all listeners that have registered interest for
 notification on this event type.
fireAdjustmentValueChanged(int, int, int)
- Method in class javax.swing.
JScrollBar
Notify listeners that the scrollbar's model has changed.
fireCaretUpdate(CaretEvent)
- Method in class javax.swing.text.
JTextComponent
Notifies all listeners that have registered interest for
 notification on this event type.
fireChangedUpdate(DocumentEvent)
- Method in class javax.swing.text.
AbstractDocument
Notifies all listeners that have registered interest for
 notification on this event type.
fireChangedUpdate(DocumentEvent)
- Method in class javax.swing.text.html.
HTMLDocument
Notifies all listeners that have registered interest for
 notification on this event type.
fireChildrenAdded(BeanContextMembershipEvent)
- Method in class java.beans.beancontext.
BeanContextSupport
Fire a BeanContextshipEvent on the BeanContextMembershipListener interface
fireChildrenRemoved(BeanContextMembershipEvent)
- Method in class java.beans.beancontext.
BeanContextSupport
Fire a BeanContextshipEvent on the BeanContextMembershipListener interface
fireColumnAdded(TableColumnModelEvent)
- Method in class javax.swing.table.
DefaultTableColumnModel
Notifies all listeners that have registered interest for
 notification on this event type.
fireColumnMarginChanged()
- Method in class javax.swing.table.
DefaultTableColumnModel
Notifies all listeners that have registered interest for
 notification on this event type.
fireColumnMoved(TableColumnModelEvent)
- Method in class javax.swing.table.
DefaultTableColumnModel
Notifies all listeners that have registered interest for
 notification on this event type.
fireColumnRemoved(TableColumnModelEvent)
- Method in class javax.swing.table.
DefaultTableColumnModel
Notifies all listeners that have registered interest for
 notification on this event type.
fireColumnSelectionChanged(ListSelectionEvent)
- Method in class javax.swing.table.
DefaultTableColumnModel
Notifies all listeners that have registered interest for
 notification on this event type.
fireContentsChanged()
- Method in class javax.swing.plaf.basic.
BasicDirectoryModel
Invoked when a content is changed.
fireContentsChanged(Object, int, int)
- Method in class javax.swing.
AbstractListModel
AbstractListModel
subclasses must call this method
after
one or more elements of the list change.
fireDragGestureRecognized(int, Point)
- Method in class java.awt.dnd.
DragGestureRecognizer
Notify the DragGestureListener that a Drag and Drop initiating
 gesture has occurred.
fireEditingCanceled()
- Method in class javax.swing.
AbstractCellEditor
Notifies all listeners that have registered interest for
 notification on this event type.
fireEditingStopped()
- Method in class javax.swing.
AbstractCellEditor
Notifies all listeners that have registered interest for
 notification on this event type.
fireHyperlinkUpdate(HyperlinkEvent)
- Method in class javax.swing.
JEditorPane
Notifies all listeners that have registered interest for
 notification on this event type.
fireIndexedPropertyChange(String, int, boolean, boolean)
- Method in class java.beans.
PropertyChangeSupport
Reports a boolean bound indexed property update to listeners
 that have been registered to track updates of
 all properties or a property with the specified name.
fireIndexedPropertyChange(String, int, int, int)
- Method in class java.beans.
PropertyChangeSupport
Reports an integer bound indexed property update to listeners
 that have been registered to track updates of
 all properties or a property with the specified name.
fireIndexedPropertyChange(String, int, Object, Object)
- Method in class java.beans.
PropertyChangeSupport
Reports a bound indexed property update to listeners
 that have been registered to track updates of
 all properties or a property with the specified name.
fireInsertUpdate(DocumentEvent)
- Method in class javax.swing.text.
AbstractDocument
Notifies all listeners that have registered interest for
 notification on this event type.
fireInternalFrameEvent(int)
- Method in class javax.swing.
JInternalFrame
Fires an internal frame event.
fireIntervalAdded(Object, int, int)
- Method in class javax.swing.
AbstractListModel
AbstractListModel
subclasses must call this method
after
one or more elements are added to the model.
fireIntervalRemoved(Object, int, int)
- Method in class javax.swing.
AbstractListModel
AbstractListModel
subclasses must call this method
after
one or more elements are removed from the model.
fireItemStateChanged(ItemEvent)
- Method in class javax.swing.
AbstractButton
Notifies all listeners that have registered interest for
 notification on this event type.
fireItemStateChanged(ItemEvent)
- Method in class javax.swing.
DefaultButtonModel
Notifies all listeners that have registered interest for
 notification on this event type.
fireItemStateChanged(ItemEvent)
- Method in class javax.swing.
JComboBox
Notifies all listeners that have registered interest for
 notification on this event type.
fireMenuCanceled()
- Method in class javax.swing.
JMenu
Notifies all listeners that have registered interest for
 notification on this event type.
fireMenuDeselected()
- Method in class javax.swing.
JMenu
Notifies all listeners that have registered interest for
 notification on this event type.
fireMenuDragMouseDragged(MenuDragMouseEvent)
- Method in class javax.swing.
JMenuItem
Notifies all listeners that have registered interest for
 notification on this event type.
fireMenuDragMouseEntered(MenuDragMouseEvent)
- Method in class javax.swing.
JMenuItem
Notifies all listeners that have registered interest for
 notification on this event type.
fireMenuDragMouseExited(MenuDragMouseEvent)
- Method in class javax.swing.
JMenuItem
Notifies all listeners that have registered interest for
 notification on this event type.
fireMenuDragMouseReleased(MenuDragMouseEvent)
- Method in class javax.swing.
JMenuItem
Notifies all listeners that have registered interest for
 notification on this event type.
fireMenuKeyPressed(MenuKeyEvent)
- Method in class javax.swing.
JMenuItem
Notifies all listeners that have registered interest for
 notification on this event type.
fireMenuKeyReleased(MenuKeyEvent)
- Method in class javax.swing.
JMenuItem
Notifies all listeners that have registered interest for
 notification on this event type.
fireMenuKeyTyped(MenuKeyEvent)
- Method in class javax.swing.
JMenuItem
Notifies all listeners that have registered interest for
 notification on this event type.
fireMenuSelected()
- Method in class javax.swing.
JMenu
Notifies all listeners that have registered interest for
 notification on this event type.
firePopupMenuCanceled()
- Method in class javax.swing.
JComboBox
Notifies
PopupMenuListener
s that the popup portion of the
 combo box has been canceled.
firePopupMenuCanceled()
- Method in class javax.swing.
JPopupMenu
Notifies
PopupMenuListeners
that this popup menu is
 cancelled.
firePopupMenuWillBecomeInvisible()
- Method in class javax.swing.
JComboBox
Notifies
PopupMenuListener
s that the popup portion of the
 combo box has become invisible.
firePopupMenuWillBecomeInvisible()
- Method in class javax.swing.
JPopupMenu
Notifies
PopupMenuListener
s that this popup menu will
 become invisible.
firePopupMenuWillBecomeVisible()
- Method in class javax.swing.
JComboBox
Notifies
PopupMenuListener
s that the popup portion of the
 combo box will become visible.
firePopupMenuWillBecomeVisible()
- Method in class javax.swing.
JPopupMenu
Notifies
PopupMenuListener
s that this popup menu will
 become visible.
firePropertyChange()
- Method in class java.beans.
PropertyEditorSupport
Report that we have been modified to any interested listeners.
firePropertyChange(PropertyChangeEvent)
- Method in class java.beans.
PropertyChangeSupport
Fires a property change event to listeners
 that have been registered to track updates of
 all properties or a property with the specified name.
firePropertyChange(PropertyChangeEvent)
- Method in class javax.swing.event.
SwingPropertyChangeSupport
Fires a property change event to listeners
 that have been registered to track updates of
 all properties or a property with the specified name.
firePropertyChange(String, boolean, boolean)
- Method in class java.awt.
Component
Support for reporting bound property changes for boolean properties.
firePropertyChange(String, boolean, boolean)
- Method in class java.beans.
PropertyChangeSupport
Reports a boolean bound property update to listeners
 that have been registered to track updates of
 all properties or a property with the specified name.
firePropertyChange(String, boolean, boolean)
- Method in class javax.swing.
DefaultListCellRenderer
Overridden for performance reasons.
firePropertyChange(String, boolean, boolean)
- Method in class javax.swing.
JComponent
Support for reporting bound property changes for boolean properties.
firePropertyChange(String, boolean, boolean)
- Method in class javax.swing.table.
DefaultTableCellRenderer
Overridden for performance reasons.
firePropertyChange(String, boolean, boolean)
- Method in class javax.swing.tree.
DefaultTreeCellRenderer
Overridden for performance reasons.
firePropertyChange(String, byte, byte)
- Method in class java.awt.
Component
Reports a bound property change.
firePropertyChange(String, byte, byte)
- Method in class javax.swing.
DefaultListCellRenderer
Overridden for performance reasons.
firePropertyChange(String, byte, byte)
- Method in class javax.swing.tree.
DefaultTreeCellRenderer
Overridden for performance reasons.
firePropertyChange(String, char, char)
- Method in class java.awt.
Component
Reports a bound property change.
firePropertyChange(String, char, char)
- Method in class javax.swing.
DefaultListCellRenderer
Overridden for performance reasons.
firePropertyChange(String, char, char)
- Method in class javax.swing.tree.
DefaultTreeCellRenderer
Overridden for performance reasons.
firePropertyChange(String, double, double)
- Method in class java.awt.
Component
Reports a bound property change.
firePropertyChange(String, double, double)
- Method in class javax.swing.
DefaultListCellRenderer
Overridden for performance reasons.
firePropertyChange(String, double, double)
- Method in class javax.swing.tree.
DefaultTreeCellRenderer
Overridden for performance reasons.
firePropertyChange(String, float, float)
- Method in class java.awt.
Component
Reports a bound property change.
firePropertyChange(String, float, float)
- Method in class javax.swing.
DefaultListCellRenderer
Overridden for performance reasons.
firePropertyChange(String, float, float)
- Method in class javax.swing.tree.
DefaultTreeCellRenderer
Overridden for performance reasons.
firePropertyChange(String, int, int)
- Method in class java.awt.
Component
Support for reporting bound property changes for integer properties.
firePropertyChange(String, int, int)
- Method in class java.beans.
PropertyChangeSupport
Reports an integer bound property update to listeners
 that have been registered to track updates of
 all properties or a property with the specified name.
firePropertyChange(String, int, int)
- Method in class javax.swing.
DefaultListCellRenderer
Overridden for performance reasons.
firePropertyChange(String, int, int)
- Method in class javax.swing.
JComponent
Support for reporting bound property changes for integer properties.
firePropertyChange(String, int, int)
- Method in class javax.swing.tree.
DefaultTreeCellRenderer
Overridden for performance reasons.
firePropertyChange(String, long, long)
- Method in class java.awt.
Component
Reports a bound property change.
firePropertyChange(String, long, long)
- Method in class javax.swing.
DefaultListCellRenderer
Overridden for performance reasons.
firePropertyChange(String, long, long)
- Method in class javax.swing.tree.
DefaultTreeCellRenderer
Overridden for performance reasons.
firePropertyChange(String, short, short)
- Method in class java.awt.
Component
Reports a bound property change.
firePropertyChange(String, short, short)
- Method in class javax.swing.
DefaultListCellRenderer
Overridden for performance reasons.
firePropertyChange(String, short, short)
- Method in class javax.swing.tree.
DefaultTreeCellRenderer
Overridden for performance reasons.
firePropertyChange(String, Object, Object)
- Method in class java.awt.
Component
Support for reporting bound property changes for Object properties.
firePropertyChange(String, Object, Object)
- Method in class java.awt.
KeyboardFocusManager
Fires a PropertyChangeEvent in response to a change in a bound property.
firePropertyChange(String, Object, Object)
- Method in class java.beans.beancontext.
BeanContextChildSupport
Report a bound property update to any registered listeners.
firePropertyChange(String, Object, Object)
- Method in class java.beans.
PropertyChangeSupport
Reports a bound property update to listeners
 that have been registered to track updates of
 all properties or a property with the specified name.
firePropertyChange(String, Object, Object)
- Method in class javax.accessibility.
AccessibleContext
Support for reporting bound property changes.
firePropertyChange(String, Object, Object)
- Method in class javax.swing.
AbstractAction
Supports reporting bound property changes.
firePropertyChange(String, Object, Object)
- Method in class javax.swing.
DefaultListCellRenderer
Overridden for performance reasons.
firePropertyChange(String, Object, Object)
- Method in class javax.swing.
JViewport
Notifies listeners of a property change.
firePropertyChange(String, Object, Object)
- Method in class javax.swing.plaf.basic.
BasicDirectoryModel
Support for reporting bound property changes for boolean properties.
firePropertyChange(String, Object, Object)
- Method in class javax.swing.plaf.
LayerUI
Support for reporting bound property changes for Object properties.
firePropertyChange(String, Object, Object)
- Method in class javax.swing.
SwingWorker
Reports a bound property update to any registered listeners.
firePropertyChange(String, Object, Object)
- Method in class javax.swing.table.
DefaultTableCellRenderer
Overridden for performance reasons.
firePropertyChange(String, Object, Object)
- Method in class javax.swing.tree.
DefaultTreeCellRenderer
Overridden for performance reasons.
firePropertyChange(String, Object, Object)
- Method in class javax.swing.
UIDefaults
Support for reporting bound property changes.
fireRemoveUpdate(DocumentEvent)
- Method in class javax.swing.text.
AbstractDocument
Notifies all listeners that have registered interest for
 notification on this event type.
fireRowSorterChanged(int[])
- Method in class javax.swing.
RowSorter
Notifies listener that the mapping has changed.
fireSelectionValueChanged(int, int, boolean)
- Method in class javax.swing.
JList
Notifies
ListSelectionListener
s added directly to the list
 of selection changes made to the selection model.
fireServiceAdded(BeanContextServiceAvailableEvent)
- Method in class java.beans.beancontext.
BeanContextServicesSupport
Fires a
BeanContextServiceAvailableEvent
indicating that a new
 service has become available.
fireServiceAdded(Class<?>)
- Method in class java.beans.beancontext.
BeanContextServicesSupport
Fires a
BeanContextServiceEvent
notifying of a new service.
fireServiceRevoked(BeanContextServiceRevokedEvent)
- Method in class java.beans.beancontext.
BeanContextServicesSupport
Fires a
BeanContextServiceEvent
notifying of a service being revoked.
fireServiceRevoked(Class<?>, boolean)
- Method in class java.beans.beancontext.
BeanContextServicesSupport
Fires a
BeanContextServiceRevokedEvent
indicating that a particular service is
 no longer available.
fireSortOrderChanged()
- Method in class javax.swing.
RowSorter
Notifies listener that the sort order has changed.
fireStateChanged()
- Method in class javax.swing.
AbstractButton
Notifies all listeners that have registered interest for
 notification on this event type.
fireStateChanged()
- Method in class javax.swing.
AbstractSpinnerModel
Run each ChangeListeners stateChanged() method.
fireStateChanged()
- Method in class javax.swing.colorchooser.
DefaultColorSelectionModel
Runs each
ChangeListener
's
stateChanged
method.
fireStateChanged()
- Method in class javax.swing.
DefaultBoundedRangeModel
Runs each
ChangeListener
's
stateChanged
method.
fireStateChanged()
- Method in class javax.swing.
DefaultButtonModel
Notifies all listeners that have registered interest for
 notification on this event type.
fireStateChanged()
- Method in class javax.swing.
DefaultSingleSelectionModel
Notifies all listeners that have registered interest for
 notification on this event type.
fireStateChanged()
- Method in class javax.swing.
JProgressBar
Send a
ChangeEvent
, whose source is this
JProgressBar
, to
 all
ChangeListener
s that have registered interest in
ChangeEvent
s.
fireStateChanged()
- Method in class javax.swing.
JSlider
Send a
ChangeEvent
, whose source is this
JSlider
, to
 all
ChangeListener
s that have registered interest in
ChangeEvent
s.
fireStateChanged()
- Method in class javax.swing.
JSpinner
Sends a
ChangeEvent
, whose source is this
JSpinner
, to each
ChangeListener
.
fireStateChanged()
- Method in class javax.swing.
JTabbedPane
Sends a
ChangeEvent
, with this
JTabbedPane
as the source,
 to each registered listener.
fireStateChanged()
- Method in class javax.swing.
JViewport
Notifies all
ChangeListeners
when the views
 size, position, or the viewports extent size has changed.
fireStateChanged()
- Method in class javax.swing.
MenuSelectionManager
Notifies all listeners that have registered interest for
 notification on this event type.
fireStateChanged()
- Method in class javax.swing.text.
DefaultCaret
Notifies all listeners that have registered interest for
 notification on this event type.
fireStateChanged()
- Method in class javax.swing.text.
StyleContext.NamedStyle
Notifies all listeners that have registered interest for
 notification on this event type.
fireTableCellUpdated(int, int)
- Method in class javax.swing.table.
AbstractTableModel
Notifies all listeners that the value of the cell at
[row, column]
has been updated.
fireTableChanged(TableModelEvent)
- Method in class javax.swing.table.
AbstractTableModel
Forwards the given notification event to all
TableModelListeners
that registered
 themselves as listeners for this table model.
fireTableDataChanged()
- Method in class javax.swing.table.
AbstractTableModel
Notifies all listeners that all cell values in the table's
 rows may have changed.
fireTableRowsDeleted(int, int)
- Method in class javax.swing.table.
AbstractTableModel
Notifies all listeners that rows in the range
[firstRow, lastRow]
, inclusive, have been deleted.
fireTableRowsInserted(int, int)
- Method in class javax.swing.table.
AbstractTableModel
Notifies all listeners that rows in the range
[firstRow, lastRow]
, inclusive, have been inserted.
fireTableRowsUpdated(int, int)
- Method in class javax.swing.table.
AbstractTableModel
Notifies all listeners that rows in the range
[firstRow, lastRow]
, inclusive, have been updated.
fireTableStructureChanged()
- Method in class javax.swing.table.
AbstractTableModel
Notifies all listeners that the table's structure has changed.
fireTreeCollapsed(TreePath)
- Method in class javax.swing.
JTree
Notifies all listeners that have registered interest for
 notification on this event type.
fireTreeExpanded(TreePath)
- Method in class javax.swing.
JTree
Notifies all listeners that have registered interest for
 notification on this event type.
fireTreeNodesChanged(Object, Object[], int[], Object[])
- Method in class javax.swing.tree.
DefaultTreeModel
Notifies all listeners that have registered interest for
 notification on this event type.
fireTreeNodesInserted(Object, Object[], int[], Object[])
- Method in class javax.swing.tree.
DefaultTreeModel
Notifies all listeners that have registered interest for
 notification on this event type.
fireTreeNodesRemoved(Object, Object[], int[], Object[])
- Method in class javax.swing.tree.
DefaultTreeModel
Notifies all listeners that have registered interest for
 notification on this event type.
fireTreeStructureChanged(Object, Object[], int[], Object[])
- Method in class javax.swing.tree.
DefaultTreeModel
Notifies all listeners that have registered interest for
 notification on this event type.
fireTreeWillCollapse(TreePath)
- Method in class javax.swing.
JTree
Notifies all listeners that have registered interest for
 notification on this event type.
fireTreeWillExpand(TreePath)
- Method in class javax.swing.
JTree
Notifies all listeners that have registered interest for
 notification on this event type.
fireUndoableEditUpdate(UndoableEditEvent)
- Method in class javax.swing.text.
AbstractDocument
Notifies all listeners that have registered interest for
 notification on this event type.
fireUndoableEditUpdate(UndoableEditEvent)
- Method in class javax.swing.text.html.
HTMLDocument
Notifies all listeners that have registered interest for
 notification on this event type.
fireValueChanged(boolean)
- Method in class javax.swing.
DefaultListSelectionModel
Notifies listeners that we have ended a series of adjustments.
fireValueChanged(int, int)
- Method in class javax.swing.
DefaultListSelectionModel
Notifies
ListSelectionListeners
that the value
 of the selection, in the closed interval
firstIndex
,
lastIndex
, has changed.
fireValueChanged(int, int, boolean)
- Method in class javax.swing.
DefaultListSelectionModel
Notifies
ListSelectionListeners
that the value
 of the selection, in the closed interval
firstIndex
,
lastIndex
, has changed and if this is the final change
 in the series of adjustments.
fireValueChanged(TreeSelectionEvent)
- Method in class javax.swing.
JTree
Notifies all listeners that have registered interest for
 notification on this event type.
fireValueChanged(TreeSelectionEvent)
- Method in class javax.swing.tree.
DefaultTreeSelectionModel
Notifies all listeners that are registered for
 tree selection events on this object.
fireVetoableChange(PropertyChangeEvent)
- Method in class java.beans.
VetoableChangeSupport
Fires a property change event to listeners
 that have been registered to track updates of
 all properties or a property with the specified name.
fireVetoableChange(String, boolean, boolean)
- Method in class java.beans.
VetoableChangeSupport
Reports a boolean constrained property update to listeners
 that have been registered to track updates of
 all properties or a property with the specified name.
fireVetoableChange(String, int, int)
- Method in class java.beans.
VetoableChangeSupport
Reports an integer constrained property update to listeners
 that have been registered to track updates of
 all properties or a property with the specified name.
fireVetoableChange(String, Object, Object)
- Method in class java.awt.
KeyboardFocusManager
Fires a PropertyChangeEvent in response to a change in a vetoable
 property.
fireVetoableChange(String, Object, Object)
- Method in class java.beans.beancontext.
BeanContextChildSupport
Report a vetoable property update to any registered listeners.
fireVetoableChange(String, Object, Object)
- Method in class java.beans.
VetoableChangeSupport
Reports a constrained property update to listeners
 that have been registered to track updates of
 all properties or a property with the specified name.
fireVetoableChange(String, Object, Object)
- Method in class javax.swing.
JComponent
Supports reporting constrained property changes.
fireVisibleDataPropertyChange()
- Method in class javax.swing.
JTree.AccessibleJTree
Fire a visible data property change notification.
first()
- Method in interface java.sql.
ResultSet
Moves the cursor to the first row in
 this
ResultSet
object.
first()
- Method in class java.text.
BreakIterator
Returns the first boundary.
first()
- Method in interface java.text.
CharacterIterator
Sets the position to getBeginIndex() and returns the character at that
 position.
first()
- Method in class java.text.
StringCharacterIterator
Implements CharacterIterator.first() for String.
first()
- Method in class java.util.concurrent.
ConcurrentSkipListSet
first()
- Method in interface java.util.
SortedSet
Returns the first (lowest) element currently in this set.
first()
- Method in class java.util.
TreeSet
first()
- Method in class javax.swing.text.
ElementIterator
Fetches the first element.
first()
- Method in class javax.swing.text.html.parser.
ContentModel
Return the element that must be next.
first()
- Method in class javax.swing.text.
Segment
Sets the position to getBeginIndex() and returns the character at that
 position.
first(Container)
- Method in class java.awt.
CardLayout
Flips to the first card of the container.
first(Object)
- Method in class javax.swing.text.html.parser.
ContentModel
Return true if the token could potentially be the
 first token in the input stream.
FIRST_LINE_END
- Static variable in class java.awt.
GridBagConstraints
Place the component in the corner of its display area where
 the first line of text on a page would normally end for the current
ComponentOrientation
.
FIRST_LINE_START
- Static variable in class java.awt.
GridBagConstraints
Place the component in the corner of its display area where
 the first line of text on a page would normally begin for the current
ComponentOrientation
.
FIRST_NONZERO
- Static variable in class jdk.incubator.vector.
VectorOperators
Produce
bits(a)!=0?a:b
.
FIRST_ORDERED_NODE_TYPE
- Static variable in interface org.w3c.dom.xpath.
XPathResult
The result is a node set as defined by  and will be accessed as a
 single node, which may be
null
if the node set is empty.
firstChild()
- Method in interface org.w3c.dom.traversal.
TreeWalker
Moves the
TreeWalker
to the first visible child of the
 current node, and returns the new node.
firstColumn
- Variable in class javax.swing.
JTable.AccessibleJTable.AccessibleJTableModelChange
The first column
firstComplete()
- Method in class java.util.concurrent.
CountedCompleter
If this task's pending count is zero, returns this task;
 otherwise decrements its pending count and returns
null
.
firstDayOfMonth()
- Static method in class java.time.temporal.
TemporalAdjusters
Returns the "first day of month" adjuster, which returns a new date set to
 the first day of the current month.
firstDayOfNextMonth()
- Static method in class java.time.temporal.
TemporalAdjusters
Returns the "first day of next month" adjuster, which returns a new date set to
 the first day of the next month.
firstDayOfNextYear()
- Static method in class java.time.temporal.
TemporalAdjusters
Returns the "first day of next year" adjuster, which returns a new date set to
 the first day of the next year.
firstDayOfYear()
- Static method in class java.time.temporal.
TemporalAdjusters
Returns the "first day of year" adjuster, which returns a new date set to
 the first day of the current year.
firstDayOfYear(boolean)
- Method in enum class java.time.
Month
Gets the day-of-year corresponding to the first day of this month.
firstElement()
- Method in class java.util.
Vector
Returns the first component (the item at index
0
) of
 this vector.
firstElement()
- Method in class javax.swing.
DefaultListModel
Returns the first component of this list.
firstEntry()
- Method in class java.util.concurrent.
ConcurrentSkipListMap
Returns a key-value mapping associated with the least
 key in this map, or
null
if the map is empty.
firstEntry()
- Method in interface java.util.
NavigableMap
Returns a key-value mapping associated with the least
 key in this map, or
null
if the map is empty.
firstEntry()
- Method in interface java.util.
SequencedMap
Returns the first key-value mapping in this map,
 or
null
if the map is empty.
firstEntry()
- Method in class java.util.
TreeMap
firstInMonth(DayOfWeek)
- Static method in class java.time.temporal.
TemporalAdjusters
Returns the first in month adjuster, which returns a new date
 in the same month with the first matching day-of-week.
firstKey()
- Method in class java.util.concurrent.
ConcurrentSkipListMap
firstKey()
- Method in interface java.util.
SortedMap
Returns the first (lowest) key currently in this map.
firstKey()
- Method in class java.util.
TreeMap
firstLineIndent
- Variable in class javax.swing.text.
ParagraphView
Indentation for the first line, from the left inset.
FirstLineIndent
- Static variable in class javax.swing.text.
StyleConstants
The amount of space to indent the first
 line of the paragraph.
firstMonthOfQuarter()
- Method in enum class java.time.
Month
Gets the month corresponding to the first month of this quarter.
firstRow
- Variable in class javax.swing.event.
TableModelEvent
The first row that has changed.
firstRow
- Variable in class javax.swing.
JTable.AccessibleJTable.AccessibleJTableModelChange
The first row
firstTrue()
- Method in class jdk.incubator.vector.
VectorMask
Returns the index of the first mask lane that is set.
firstValue(String)
- Method in class java.net.http.
HttpHeaders
Returns an
Optional
containing the first header string value of
 the given named (and possibly multi-valued) header.
firstValueAsLong(String)
- Method in class java.net.http.
HttpHeaders
Returns an
OptionalLong
containing the first header string value
 of the named header field.
firstVariadicArg(int)
- Static method in interface java.lang.foreign.
Linker.Option
PREVIEW
Returns a linker option used to denote the index indicating the start of the variadic arguments passed to the
          function described by the function descriptor associated with a downcall linkage request.
First Week
- Search tag in class java.util.Calendar
Section
FIT_WIDTH
- Enum constant in enum class javax.swing.
JTable.PrintMode
Printing mode that scales the output smaller, if necessary,
 to fit the table's entire width (and thereby all columns) on each page;
 Rows are spread across multiple pages as necessary.
fixed(Instant)
- Static method in interface java.time.
InstantSource
Obtains a source that always returns the same instant.
fixed(Instant, ZoneId)
- Static method in class java.time.
Clock
Obtains a clock that always returns the same instant.
FIXED
- Static variable in interface javax.swing.text.html.parser.
DTDConstants
The DTD constant corresponds to FIXED
FIXED_SIZES
- Enum constant in enum class javax.swing.plaf.nimbus.
AbstractRegionPainter.PaintContext.CacheMode
Fixed sizes.
fixedCellHeightChanged
- Static variable in class javax.swing.plaf.basic.
BasicListUI
The bit relates to fixed cell height changed property.
fixedCellWidthChanged
- Static variable in class javax.swing.plaf.basic.
BasicListUI
The bit relates to fixed cell width changed property.
fixedContentLength
- Variable in class java.net.
HttpURLConnection
The fixed content-length when using fixed-length streaming mode.
fixedContentLengthLong
- Variable in class java.net.
HttpURLConnection
The fixed content-length when using fixed-length streaming mode.
FixedHeightLayoutCache
- Class in
javax.swing.tree
NOTE: This will become more open in a future release.
FixedHeightLayoutCache()
- Constructor for class javax.swing.tree.
FixedHeightLayoutCache
Constructs a
FixedHeightLayoutCache
.
FLAG_BRIDGES
- Static variable in class java.lang.invoke.
LambdaMetafactory
Flag for alternate metafactories indicating the lambda object requires
 additional methods that invoke the
implementation
FLAG_COMPLEX_GLYPHS
- Static variable in class java.awt.font.
GlyphVector
A flag used with getLayoutFlags that indicates that this
GlyphVector
has
 a complex glyph-to-char mapping (one that does not map glyphs to chars one-to-one in
 strictly ascending or descending order matching the run direction).
FLAG_HAS_POSITION_ADJUSTMENTS
- Static variable in class java.awt.font.
GlyphVector
A flag used with getLayoutFlags that indicates that this
GlyphVector
has
 position adjustments.
FLAG_HAS_TRANSFORMS
- Static variable in class java.awt.font.
GlyphVector
A flag used with getLayoutFlags that indicates that this
GlyphVector
has
 per-glyph transforms.
FLAG_MARKERS
- Static variable in class java.lang.invoke.
LambdaMetafactory
Flag for
LambdaMetafactory.altMetafactory(java.lang.invoke.MethodHandles.Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object...)
indicating the lambda object implements
 other interfaces besides
Serializable
FLAG_MASK
- Static variable in class java.awt.font.
GlyphVector
A mask for supported flags from getLayoutFlags.
FLAG_RUN_RTL
- Static variable in class java.awt.font.
GlyphVector
A flag used with getLayoutFlags that indicates that this
GlyphVector
has
 a right-to-left run direction.
FLAG_SERIALIZABLE
- Static variable in class java.lang.invoke.
LambdaMetafactory
Flag for
LambdaMetafactory.altMetafactory(java.lang.invoke.MethodHandles.Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object...)
indicating the lambda object
 must be serializable
flags()
- Method in class java.nio.file.attribute.
AclEntry
Returns a copy of the flags component.
flags()
- Method in class java.util.regex.
Pattern
Returns this pattern's match flags.
Flags
- Search tag in class java.util.Formatter
Section
FLASH_DID_NOT_FIRE
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "Flash" tag, indicating that the
 flash did not fire.
FLASH_FIRED
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "Flash" tag, indicating that the
 flash fired, but the strobe return status is unknown.
FLASH_MASK_FIRED
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A mask to be used with the "Flash" tag, indicating that the
 flash fired.
FLASH_MASK_FUNCTION_NOT_PRESENT
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A mask to be used with the "Flash" tag, indicating no flash function
 present.
FLASH_MASK_MODE_AUTO
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A mask to be used with the "Flash" tag, indicating auto mode.
FLASH_MASK_MODE_FLASH_FIRING
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A mask to be used with the "Flash" tag, indicating compulsory flash
 firing mode.
FLASH_MASK_MODE_FLASH_SUPPRESSION
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A mask to be used with the "Flash" tag, indicating compulsory flash
 suppression mode.
FLASH_MASK_RED_EYE_REDUCTION
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A mask to be used with the "Flash" tag, indicating red-eye reduction
 supported.
FLASH_MASK_RETURN_DETECTED
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A mask to be used with the "Flash" tag, indicating strobe return
 light detected.
FLASH_MASK_RETURN_NOT_DETECTED
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A mask to be used with the "Flash" tag, indicating strobe return
 light not detected.
FLASH_OPTION
- Static variable in class javax.swing.
DebugGraphics
Flash graphics operations.
FLASH_STROBE_RETURN_LIGHT_DETECTED
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "Flash" tag, indicating that the
 flash fired, and the strobe return light was detected.
FLASH_STROBE_RETURN_LIGHT_NOT_DETECTED
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "Flash" tag, indicating that the
 flash fired, but the strobe return light was not detected.
flashColor()
- Static method in class javax.swing.
DebugGraphics
Returns the Color used to flash drawing operations.
flashCount()
- Static method in class javax.swing.
DebugGraphics
Returns the number of times that drawing operations will flash.
flashTime()
- Static method in class javax.swing.
DebugGraphics
Returns the time delay of drawing operation flashing.
flatMap(DoubleFunction<? extends DoubleStream>)
- Method in interface java.util.stream.
DoubleStream
Returns a stream consisting of the results of replacing each element of
 this stream with the contents of a mapped stream produced by applying
 the provided mapping function to each element.
flatMap(Function<? super T, ? extends Optional<? extends U>>)
- Method in class java.util.
Optional
If a value is present, returns the result of applying the given
Optional
-bearing mapping function to the value, otherwise returns
 an empty
Optional
.
flatMap(Function<? super T, ? extends Stream<? extends R>>)
- Method in interface java.util.stream.
Stream
Returns a stream consisting of the results of replacing each element of
 this stream with the contents of a mapped stream produced by applying
 the provided mapping function to each element.
flatMap(IntFunction<? extends IntStream>)
- Method in interface java.util.stream.
IntStream
Returns a stream consisting of the results of replacing each element of
 this stream with the contents of a mapped stream produced by applying
 the provided mapping function to each element.
flatMap(LongFunction<? extends LongStream>)
- Method in interface java.util.stream.
LongStream
Returns a stream consisting of the results of replacing each element of
 this stream with the contents of a mapped stream produced by applying
 the provided mapping function to each element.
flatMapping(Function<? super T, ? extends Stream<? extends U>>, Collector<? super U, A, R>)
- Static method in class java.util.stream.
Collectors
Adapts a
Collector
accepting elements of type
U
to one
 accepting elements of type
T
by applying a flat mapping function
 to each input element before accumulation.
flatMapToDouble(Function<? super T, ? extends DoubleStream>)
- Method in interface java.util.stream.
Stream
Returns an
DoubleStream
consisting of the results of replacing
 each element of this stream with the contents of a mapped stream produced
 by applying the provided mapping function to each element.
flatMapToInt(Function<? super T, ? extends IntStream>)
- Method in interface java.util.stream.
Stream
Returns an
IntStream
consisting of the results of replacing each
 element of this stream with the contents of a mapped stream produced by
 applying the provided mapping function to each element.
flatMapToLong(Function<? super T, ? extends LongStream>)
- Method in interface java.util.stream.
Stream
Returns an
LongStream
consisting of the results of replacing each
 element of this stream with the contents of a mapped stream produced by
 applying the provided mapping function to each element.
flatten()
- Method in interface java.lang.foreign.
SequenceLayout
PREVIEW
Returns a flattened sequence layout.
FlatteningPathIterator
- Class in
java.awt.geom
The
FlatteningPathIterator
class returns a flattened view of
 another
PathIterator
object.
FlatteningPathIterator(PathIterator, double)
- Constructor for class java.awt.geom.
FlatteningPathIterator
Constructs a new
FlatteningPathIterator
object that
 flattens a path as it iterates over it.
FlatteningPathIterator(PathIterator, double, int)
- Constructor for class java.awt.geom.
FlatteningPathIterator
Constructs a new
FlatteningPathIterator
object
 that flattens a path as it iterates over it.
FlavorEvent
- Class in
java.awt.datatransfer
FlavorEvent
is used to notify interested parties that available
DataFlavor
s have changed in the
Clipboard
(the event source).
FlavorEvent(Clipboard)
- Constructor for class java.awt.datatransfer.
FlavorEvent
Constructs a
FlavorEvent
object.
FlavorException
- Interface in
javax.print
Interface
FlavorException
is a mixin interface which a subclass of
PrintException
can implement to report an error
 condition involving a doc flavor or flavors (class
DocFlavor
).
FlavorListener
- Interface in
java.awt.datatransfer
Defines an object which listens for
FlavorEvent
s.
FlavorMap
- Interface in
java.awt.datatransfer
A two-way Map between "natives" (Strings), which correspond to
 platform-specific data formats, and "flavors" (DataFlavors), which correspond
 to platform-independent MIME types.
flavorsChanged(FlavorEvent)
- Method in interface java.awt.datatransfer.
FlavorListener
Invoked when the target
Clipboard
of the listener has changed its
 available
DataFlavor
s.
FlavorTable
- Interface in
java.awt.datatransfer
A FlavorMap which relaxes the traditional 1-to-1 restriction of a Map.
FlightRecorder
- Class in
jdk.jfr
Class for accessing, controlling, and managing Flight Recorder.
FlightRecorderListener
- Interface in
jdk.jfr
Callback interface to monitor Flight Recorder's life cycle.
FlightRecorderMXBean
- Interface in
jdk.management.jfr
Management interface for controlling Flight Recorder.
FlightRecorderPermission
- Class in
jdk.jfr
Permission for controlling access to Flight Recorder.
FlightRecorderPermission(String)
- Constructor for class jdk.jfr.
FlightRecorderPermission
Constructs a
FlightRecorderPermission
with the specified name.
flip()
- Method in class java.nio.
Buffer
Flips this buffer.
flip()
- Method in class java.nio.
ByteBuffer
Flips this buffer.
flip()
- Method in class java.nio.
CharBuffer
Flips this buffer.
flip()
- Method in class java.nio.
DoubleBuffer
Flips this buffer.
flip()
- Method in class java.nio.
FloatBuffer
Flips this buffer.
flip()
- Method in class java.nio.
IntBuffer
Flips this buffer.
flip()
- Method in class java.nio.
LongBuffer
Flips this buffer.
flip()
- Method in class java.nio.
MappedByteBuffer
Flips this buffer.
flip()
- Method in class java.nio.
ShortBuffer
Flips this buffer.
flip(int)
- Method in class java.util.
BitSet
Sets the bit at the specified index to the complement of its
 current value.
flip(int, int)
- Method in class java.util.
BitSet
Sets each bit from the specified
fromIndex
(inclusive) to the
 specified
toIndex
(exclusive) to the complement of its current
 value.
flip(BufferCapabilities.FlipContents)
- Method in class java.awt.
Component.FlipBufferStrategy
Flipping moves the contents of the back buffer to the front buffer,
 either by copying or by moving the video pointer.
flipBit(int)
- Method in class java.math.
BigInteger
Returns a BigInteger whose value is equivalent to this BigInteger
 with the designated bit flipped.
FlipBufferStrategy(int, BufferCapabilities)
- Constructor for class java.awt.
Component.FlipBufferStrategy
Creates a new flipping buffer strategy for this component.
flipEastAndWestAtEnds(int, Position.Bias)
- Method in class javax.swing.text.
BoxView
Determines in which direction the next view lays.
flipEastAndWestAtEnds(int, Position.Bias)
- Method in class javax.swing.text.
CompositeView
Determines in which direction the next view lays.
flipEastAndWestAtEnds(int, Position.Bias)
- Method in class javax.swing.text.
ParagraphView
Determines in which direction the next view lays.
Float
- Class in
java.lang
The
Float
class wraps a value of primitive type
float
in an object.
Float()
- Constructor for class java.awt.geom.
Arc2D.Float
Constructs a new OPEN arc, initialized to location (0, 0),
 size (0, 0), angular extents (start = 0, extent = 0).
Float()
- Constructor for class java.awt.geom.
CubicCurve2D.Float
Constructs and initializes a CubicCurve with coordinates
 (0, 0, 0, 0, 0, 0, 0, 0).
Float()
- Constructor for class java.awt.geom.
Ellipse2D.Float
Constructs a new
Ellipse2D
, initialized to
 location (0, 0) and size (0, 0).
Float()
- Constructor for class java.awt.geom.
Line2D.Float
Constructs and initializes a Line with coordinates (0, 0) → (0, 0).
Float()
- Constructor for class java.awt.geom.
Path2D.Float
Constructs a new empty single precision
Path2D
object
 with a default winding rule of
Path2D.WIND_NON_ZERO
.
Float()
- Constructor for class java.awt.geom.
Point2D.Float
Constructs and initializes a
Point2D
with
 coordinates (0, 0).
Float()
- Constructor for class java.awt.geom.
QuadCurve2D.Float
Constructs and initializes a
QuadCurve2D
with
 coordinates (0, 0, 0, 0, 0, 0).
Float()
- Constructor for class java.awt.geom.
Rectangle2D.Float
Constructs a new
Rectangle2D
, initialized to
 location (0.0, 0.0) and size (0.0, 0.0).
Float()
- Constructor for class java.awt.geom.
RoundRectangle2D.Float
Constructs a new
RoundRectangle2D
, initialized to
 location (0.0, 0.0), size (0.0, 0.0), and corner arcs
 of radius 0.0.
Float(double)
- Constructor for class java.lang.
Float
Deprecated, for removal: This API element is subject to removal in a future version.
It is rarely appropriate to use this constructor. Instead, use the
 static factory method
Float.valueOf(float)
method as follows:
Float.valueOf((float)value)
.
Float(float)
- Constructor for class java.lang.
Float
Deprecated, for removal: This API element is subject to removal in a future version.
It is rarely appropriate to use this constructor. The static factory
Float.valueOf(float)
is generally a better choice, as it is
 likely to yield significantly better space and time performance.
Float(float, float)
- Constructor for class java.awt.geom.
Point2D.Float
Constructs and initializes a
Point2D
with
 the specified coordinates.
Float(float, float, float, float)
- Constructor for class java.awt.geom.
Ellipse2D.Float
Constructs and initializes an
Ellipse2D
from the
 specified coordinates.
Float(float, float, float, float)
- Constructor for class java.awt.geom.
Line2D.Float
Constructs and initializes a Line from the specified coordinates.
Float(float, float, float, float)
- Constructor for class java.awt.geom.
Rectangle2D.Float
Constructs and initializes a
Rectangle2D
from the specified
float
coordinates.
Float(float, float, float, float, float, float)
- Constructor for class java.awt.geom.
QuadCurve2D.Float
Constructs and initializes a
QuadCurve2D
from the
 specified
float
coordinates.
Float(float, float, float, float, float, float)
- Constructor for class java.awt.geom.
RoundRectangle2D.Float
Constructs and initializes a
RoundRectangle2D
from the specified
float
coordinates.
Float(float, float, float, float, float, float, float, float)
- Constructor for class java.awt.geom.
CubicCurve2D.Float
Constructs and initializes a
CubicCurve2D
from
 the specified
float
coordinates.
Float(float, float, float, float, float, float, int)
- Constructor for class java.awt.geom.
Arc2D.Float
Constructs a new arc, initialized to the specified location,
 size, angular extents, and closure type.
Float(int)
- Constructor for class java.awt.geom.
Arc2D.Float
Constructs a new arc, initialized to location (0, 0),
 size (0, 0), angular extents (start = 0, extent = 0), and
 the specified closure type.
Float(int)
- Constructor for class java.awt.geom.
Path2D.Float
Constructs a new empty single precision
Path2D
object
 with the specified winding rule to control operations that
 require the interior of the path to be defined.
Float(int, int)
- Constructor for class java.awt.geom.
Path2D.Float
Constructs a new empty single precision
Path2D
object
 with the specified winding rule and the specified initial
 capacity to store path segments.
Float(Point2D, Point2D)
- Constructor for class java.awt.geom.
Line2D.Float
Constructs and initializes a
Line2D
from the
 specified
Point2D
objects.
Float(Rectangle2D, float, float, int)
- Constructor for class java.awt.geom.
Arc2D.Float
Constructs a new arc, initialized to the specified location,
 size, angular extents, and closure type.
Float(Shape)
- Constructor for class java.awt.geom.
Path2D.Float
Constructs a new single precision
Path2D
object
 from an arbitrary
Shape
object.
Float(Shape, AffineTransform)
- Constructor for class java.awt.geom.
Path2D.Float
Constructs a new single precision
Path2D
object
 from an arbitrary
Shape
object, transformed by an
AffineTransform
object.
Float(String)
- Constructor for class java.lang.
Float
Deprecated, for removal: This API element is subject to removal in a future version.
It is rarely appropriate to use this constructor.
 Use
Float.parseFloat(String)
to convert a string to a
float
primitive, or use
Float.valueOf(String)
to convert a string to a
Float
object.
FLOAT
- Enum constant in enum class java.sql.
JDBCType
Identifies the generic SQL type
FLOAT
.
FLOAT
- Enum constant in enum class javax.lang.model.type.
TypeKind
The primitive type
float
.
FLOAT
- Static variable in class java.sql.
Types
The constant in the Java programming language, sometimes referred
 to as a type code, that identifies the generic SQL type
FLOAT
.
FLOAT
- Static variable in class javax.management.openmbean.
SimpleType
The
SimpleType
instance describing values whose
 Java class name is
java.lang.Float
.
FLOAT
- Static variable in class javax.swing.text.html.
CSS.Attribute
CSS attribute "float".
FLOAT_LITERAL
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
LiteralTree
representing
 a floating-point literal expression of type
float
.
float16ToFloat(short)
- Static method in class java.lang.
Float
Returns the
float
value closest to the numerical value
 of the argument, a floating-point binary16 value encoded in a
short
.
floatAt(Point, Point)
- Method in class javax.swing.plaf.basic.
BasicToolBarUI
The method is called at end of dragging to place the frame in either
 its original place or in its floating frame.
FloatBuffer
- Class in
java.nio
A float buffer.
FloatControl
- Class in
javax.sound.sampled
A
FloatControl
object provides control over a range of floating-point
 values.
FloatControl(FloatControl.Type, float, float, float, int, float, String)
- Constructor for class javax.sound.sampled.
FloatControl
Constructs a new float control object with the given parameters.
FloatControl(FloatControl.Type, float, float, float, int, float, String, String, String, String)
- Constructor for class javax.sound.sampled.
FloatControl
Constructs a new float control object with the given parameters.
FloatControl.Type
- Class in
javax.sound.sampled
An instance of the
FloatControl.Type
inner class identifies one
 kind of float control.
floatingBorderColor
- Variable in class javax.swing.plaf.basic.
BasicToolBarUI
The color of the not docking border.
floatingColor
- Variable in class javax.swing.plaf.basic.
BasicToolBarUI
The background color of the not docking border.
Floating-point Equality, Equivalence, and Comparison
- Search tag in class java.lang.Double
Section
Floating-point Equality, Equivalence, and Comparison
- Search tag in class java.lang.Float
Section
floatToFloat16(float)
- Static method in class java.lang.
Float
Returns the floating-point binary16 value, encoded in a
short
, closest in value to the argument.
floatToIntBits(float)
- Static method in class java.lang.
Float
Returns a representation of the specified floating-point value
 according to the IEEE 754 floating-point "single format" bit
 layout.
floatToRawIntBits(float)
- Static method in class java.lang.
Float
Returns a representation of the specified floating-point value
 according to the IEEE 754 floating-point "single format" bit
 layout, preserving Not-a-Number (NaN) values.
FloatType
- Interface in
com.sun.jdi
The type of all primitive float values accessed in
 the target VM.
floatValue()
- Method in interface com.sun.jdi.
PrimitiveValue
Converts this value to a FloatValue and returns the result
 as a float.
floatValue()
- Method in class java.lang.
Byte
Returns the value of this
Byte
as a
float
after
 a widening primitive conversion.
floatValue()
- Method in class java.lang.
Double
Returns the value of this
Double
as a
float
after a narrowing primitive conversion.
floatValue()
- Method in class java.lang.
Float
Returns the
float
value of this
Float
object.
floatValue()
- Method in class java.lang.
Integer
Returns the value of this
Integer
as a
float
after a widening primitive conversion.
floatValue()
- Method in class java.lang.
Long
Returns the value of this
Long
as a
float
after
 a widening primitive conversion.
floatValue()
- Method in class java.lang.
Number
Returns the value of the specified number as a
float
.
floatValue()
- Method in class java.lang.
Short
Returns the value of this
Short
as a
float
after a widening primitive conversion.
floatValue()
- Method in class java.math.
BigDecimal
Converts this
BigDecimal
to a
float
.
floatValue()
- Method in class java.math.
BigInteger
Converts this BigInteger to a
float
.
floatValue()
- Method in class java.util.concurrent.atomic.
AtomicInteger
Returns the current value of this
AtomicInteger
as a
float
after a widening primitive conversion,
 with memory effects as specified by
VarHandle.getVolatile(java.lang.Object...)
.
floatValue()
- Method in class java.util.concurrent.atomic.
AtomicLong
Returns the current value of this
AtomicLong
as a
float
after a widening primitive conversion,
 with memory effects as specified by
VarHandle.getVolatile(java.lang.Object...)
.
floatValue()
- Method in class java.util.concurrent.atomic.
DoubleAccumulator
Returns the
current value
as a
float
after a narrowing primitive conversion.
floatValue()
- Method in class java.util.concurrent.atomic.
DoubleAdder
Returns the
DoubleAdder.sum()
as a
float
after a narrowing primitive conversion.
floatValue()
- Method in class java.util.concurrent.atomic.
LongAccumulator
Returns the
current value
as a
float
after a widening primitive conversion.
floatValue()
- Method in class java.util.concurrent.atomic.
LongAdder
Returns the
LongAdder.sum()
as a
float
after a widening primitive conversion.
FloatValue
- Interface in
com.sun.jdi
Provides access to a primitive
float
value in
 the target VM.
FloatVector
- Class in
jdk.incubator.vector
A specialized
Vector
representing an ordered immutable sequence of
float
values.
floor(double)
- Static method in class java.lang.
Math
Returns the largest (closest to positive infinity)
double
value that is less than or equal to the
 argument and is equal to a mathematical integer.
floor(double)
- Static method in class java.lang.
StrictMath
Returns the largest (closest to positive infinity)
double
value that is less than or equal to the
 argument and is equal to a mathematical integer.
floor(E)
- Method in class java.util.concurrent.
ConcurrentSkipListSet
floor(E)
- Method in interface java.util.
NavigableSet
Returns the greatest element in this set less than or equal to
 the given element, or
null
if there is no such element.
floor(E)
- Method in class java.util.
TreeSet
FLOOR
- Enum constant in enum class java.math.
RoundingMode
Rounding mode to round towards negative infinity.
floorDiv(int, int)
- Static method in class java.lang.
Math
Returns the largest (closest to positive infinity)
int
value that is less than or equal to the algebraic quotient.
floorDiv(int, int)
- Static method in class java.lang.
StrictMath
Returns the largest (closest to positive infinity)
int
value that is less than or equal to the algebraic quotient.
floorDiv(long, int)
- Static method in class java.lang.
Math
Returns the largest (closest to positive infinity)
long
value that is less than or equal to the algebraic quotient.
floorDiv(long, int)
- Static method in class java.lang.
StrictMath
Returns the largest (closest to positive infinity)
long
value that is less than or equal to the algebraic quotient.
floorDiv(long, long)
- Static method in class java.lang.
Math
Returns the largest (closest to positive infinity)
long
value that is less than or equal to the algebraic quotient.
floorDiv(long, long)
- Static method in class java.lang.
StrictMath
Returns the largest (closest to positive infinity)
long
value that is less than or equal to the algebraic quotient.
floorDivExact(int, int)
- Static method in class java.lang.
Math
Returns the largest (closest to positive infinity)
int
value that is less than or equal to the algebraic quotient.
floorDivExact(int, int)
- Static method in class java.lang.
StrictMath
Returns the largest (closest to positive infinity)
int
value that is less than or equal to the algebraic quotient.
floorDivExact(long, long)
- Static method in class java.lang.
Math
Returns the largest (closest to positive infinity)
long
value that is less than or equal to the algebraic quotient.
floorDivExact(long, long)
- Static method in class java.lang.
StrictMath
Returns the largest (closest to positive infinity)
long
value that is less than or equal to the algebraic quotient.
floorEntry(K)
- Method in class java.util.concurrent.
ConcurrentSkipListMap
Returns a key-value mapping associated with the greatest key
 less than or equal to the given key, or
null
if there
 is no such key.
floorEntry(K)
- Method in interface java.util.
NavigableMap
Returns a key-value mapping associated with the greatest key
 less than or equal to the given key, or
null
if there
 is no such key.
floorEntry(K)
- Method in class java.util.
TreeMap
floorKey(K)
- Method in class java.util.concurrent.
ConcurrentSkipListMap
floorKey(K)
- Method in interface java.util.
NavigableMap
Returns the greatest key less than or equal to the given key,
 or
null
if there is no such key.
floorKey(K)
- Method in class java.util.
TreeMap
floorMod(int, int)
- Static method in class java.lang.
Math
Returns the floor modulus of the
int
arguments.
floorMod(int, int)
- Static method in class java.lang.
StrictMath
Returns the floor modulus of the
int
arguments.
floorMod(long, int)
- Static method in class java.lang.
Math
Returns the floor modulus of the
long
and
int
arguments.
floorMod(long, int)
- Static method in class java.lang.
StrictMath
Returns the floor modulus of the
long
and
int
arguments.
floorMod(long, long)
- Static method in class java.lang.
Math
Returns the floor modulus of the
long
arguments.
floorMod(long, long)
- Static method in class java.lang.
StrictMath
Returns the floor modulus of the
long
arguments.
floppyDriveIcon
- Variable in class javax.swing.plaf.basic.
BasicFileChooserUI
Floppy drive icon
Flow
- Class in
java.util.concurrent
Interrelated interfaces and static methods for establishing
 flow-controlled components in which
Publishers
produce items consumed by one or more
Subscribers
, each managed by a
Subscription
.
Flow.Processor<T,
R>
- Interface in
java.util.concurrent
A component that acts as both a Subscriber and Publisher.
Flow.Publisher<T>
- Interface in
java.util.concurrent
A producer of items (and related control messages) received by
 Subscribers.
Flow.Subscriber<T>
- Interface in
java.util.concurrent
A receiver of messages.
Flow.Subscription
- Interface in
java.util.concurrent
Message control linking a
Flow.Publisher
and
Flow.Subscriber
.
FlowLayout
- Class in
java.awt
A flow layout arranges components in a directional flow, much
 like lines of text in a paragraph.
FlowLayout()
- Constructor for class java.awt.
FlowLayout
Constructs a new
FlowLayout
with a centered alignment and a
 default 5-unit horizontal and vertical gap.
FlowLayout(int)
- Constructor for class java.awt.
FlowLayout
Constructs a new
FlowLayout
with the specified
 alignment and a default 5-unit horizontal and vertical gap.
FlowLayout(int, int, int)
- Constructor for class java.awt.
FlowLayout
Creates a new flow layout manager with the indicated alignment
 and the indicated horizontal and vertical gaps.
FLOWS_FROM
- Static variable in class javax.accessibility.
AccessibleRelation
Indicates an object is logically contiguous with a second object where
 the second object occurs before the object.
FLOWS_FROM_PROPERTY
- Static variable in class javax.accessibility.
AccessibleRelation
Indicates the
FLOWS_FROM
relation between two objects has
 changed.
FLOWS_TO
- Static variable in class javax.accessibility.
AccessibleRelation
Indicates an object is logically contiguous with a second object where
 the second object occurs after the object.
FLOWS_TO_PROPERTY
- Static variable in class javax.accessibility.
AccessibleRelation
Indicates the
FLOWS_TO
relation between two objects has changed.
FlowStrategy()
- Constructor for class javax.swing.text.
FlowView.FlowStrategy
Constructs a
FlowStrategy
.
FlowView
- Class in
javax.swing.text
A View that tries to flow it's children into some
 partially constrained space.
FlowView(Element, int)
- Constructor for class javax.swing.text.
FlowView
Constructs a FlowView for the given element.
FlowView.FlowStrategy
- Class in
javax.swing.text
Strategy for maintaining the physical form
 of the flow.
flush()
- Method in class java.awt.
Image
Flushes all reconstructable resources being used by this Image object.
flush()
- Method in class java.beans.
XMLEncoder
This method writes out the preamble associated with the
 XML encoding if it has not been written already and
 then writes out all of the values that been
 written to the stream since the last time
flush
was called.
flush()
- Method in class java.io.
BufferedOutputStream
Flushes this buffered output stream.
flush()
- Method in class java.io.
BufferedWriter
Flushes the stream.
flush()
- Method in class java.io.
CharArrayWriter
Flush the stream.
flush()
- Method in class java.io.
Console
Flushes the console and forces any buffered output to be written
 immediately .
flush()
- Method in class java.io.
DataOutputStream
Flushes this data output stream.
flush()
- Method in class java.io.
FilterOutputStream
Flushes this output stream and forces any buffered output bytes
 to be written out to the stream.
flush()
- Method in class java.io.
FilterWriter
Flushes the stream.
flush()
- Method in interface java.io.
Flushable
Flushes this stream by writing any buffered output to the underlying
 stream.
flush()
- Method in interface java.io.
ObjectOutput
Flushes the stream.
flush()
- Method in class java.io.
ObjectOutputStream
Flushes the stream.
flush()
- Method in class java.io.
OutputStream
Flushes this output stream and forces any buffered output bytes
 to be written out.
flush()
- Method in class java.io.
OutputStreamWriter
Flushes the stream.
flush()
- Method in class java.io.
PipedOutputStream
Flushes this output stream and forces any buffered output bytes
 to be written out.
flush()
- Method in class java.io.
PipedWriter
Flushes this output stream and forces any buffered output characters
 to be written out.
flush()
- Method in class java.io.
PrintStream
Flushes the stream.
flush()
- Method in class java.io.
PrintWriter
Flushes the stream.
flush()
- Method in class java.io.
StringWriter
Flush the stream.
flush()
- Method in class java.io.
Writer
Flushes the stream.
flush()
- Method in class java.util.
Formatter
Flushes this formatter.
flush()
- Method in class java.util.logging.
Handler
Flush any buffered output.
flush()
- Method in class java.util.logging.
MemoryHandler
Causes a flush on the target
Handler
.
flush()
- Method in class java.util.logging.
StreamHandler
Flush any buffered messages.
flush()
- Method in class java.util.prefs.
AbstractPreferences
Implements the
flush
method as per the specification in
Preferences.flush()
.
flush()
- Method in class java.util.prefs.
Preferences
Forces any changes in the contents of this preference node and its
 descendants to the persistent store.
flush()
- Method in class java.util.zip.
DeflaterOutputStream
Flushes the compressed output stream.
flush()
- Method in class java.util.zip.
InflaterOutputStream
Flushes this output stream, forcing any pending buffered output bytes to be
 written.
flush()
- Method in class javax.crypto.
CipherOutputStream
Flushes this output stream by forcing any buffered output bytes
 that have already been processed by the encapsulated
Cipher
object to be written out.
flush()
- Method in interface javax.imageio.stream.
ImageInputStream
Discards the initial position of the stream prior to the current
 stream position.
flush()
- Method in class javax.imageio.stream.
ImageInputStreamImpl
flush()
- Method in interface javax.sound.sampled.
DataLine
Flushes queued data from the line.
flush()
- Method in class javax.swing.text.html.
HTMLDocument.HTMLReader
The last method called on the reader.
flush()
- Method in class javax.swing.text.html.
HTMLEditorKit.ParserCallback
The last method called on the reader.
flush()
- Method in class javax.tools.
ForwardingJavaFileManager
flush()
- Method in interface javax.tools.
JavaFileManager
Flushes any resources opened for output by this file manager
 directly or indirectly.
flush()
- Method in interface javax.xml.stream.
XMLEventWriter
Writes any cached events to the underlying output mechanism
flush()
- Method in interface javax.xml.stream.
XMLStreamWriter
Write any cached data to the underlying output mechanism.
flush()
- Method in interface jdk.jshell.
JShellConsole
Flushes the console and forces any buffered output to be written
 immediately.
flush(ByteBuffer)
- Method in class java.nio.charset.
CharsetEncoder
Flushes this encoder.
flush(CharBuffer)
- Method in class java.nio.charset.
CharsetDecoder
Flushes this decoder.
FLUSH_FAILURE
- Static variable in class java.util.logging.
ErrorManager
FLUSH_FAILURE is used when a flush to an output stream fails.
Flush3DBorder()
- Constructor for class javax.swing.plaf.metal.
MetalBorders.Flush3DBorder
Constructs a
Flush3DBorder
.
Flushable
- Interface in
java.io
A
Flushable
is a destination of data that can be flushed.
flushAttributes()
- Method in class javax.swing.text.html.parser.
Parser
Removes the current attributes.
flushBefore(long)
- Method in class javax.imageio.stream.
FileCacheImageOutputStream
flushBefore(long)
- Method in interface javax.imageio.stream.
ImageInputStream
Discards the initial portion of the stream prior to the
 indicated position.
flushBefore(long)
- Method in class javax.imageio.stream.
ImageInputStreamImpl
flushBefore(long)
- Method in interface javax.imageio.stream.
ImageOutputStream
Flushes all data prior to the given position to the underlying
 destination, such as an
OutputStream
or
File
.
flushBefore(long)
- Method in class javax.imageio.stream.
MemoryCacheImageOutputStream
flushBits()
- Method in class javax.imageio.stream.
ImageOutputStreamImpl
If the bit offset is non-zero, forces the remaining bits
 in the current byte to 0 and advances the stream position
 by one.
flushCaches()
- Static method in class java.beans.
Introspector
Flush all of the Introspector's internal caches.
flushedPos
- Variable in class javax.imageio.stream.
ImageInputStreamImpl
The position prior to which data may be discarded.
flushFromCaches(Class<?>)
- Static method in class java.beans.
Introspector
Flush the Introspector's internal cached information for a given class.
flushRequirementChanges()
- Method in class javax.swing.text.
AsyncBoxView
Publish the changes in preferences upward to the parent
 view.
flushSpi()
- Method in class java.util.prefs.
AbstractPreferences
This method is invoked with this node locked.
fma(double, double)
- Method in class jdk.incubator.vector.
DoubleVector
Multiplies this vector by a scalar multiplier, and sums
 the result with a scalar addend.
fma(double, double, double)
- Static method in class java.lang.
Math
Returns the fused multiply add of the three arguments; that is,
 returns the exact product of the first two arguments summed
 with the third argument and then rounded once to the nearest
double
.
fma(double, double, double)
- Static method in class java.lang.
StrictMath
Returns the fused multiply add of the three arguments; that is,
 returns the exact product of the first two arguments summed
 with the third argument and then rounded once to the nearest
double
.
fma(float, float)
- Method in class jdk.incubator.vector.
FloatVector
Multiplies this vector by a scalar multiplier, and sums
 the result with a scalar addend.
fma(float, float, float)
- Static method in class java.lang.
Math
Returns the fused multiply add of the three arguments; that is,
 returns the exact product of the first two arguments summed
 with the third argument and then rounded once to the nearest
float
.
fma(float, float, float)
- Static method in class java.lang.
StrictMath
Returns the fused multiply add of the three arguments; that is,
 returns the exact product of the first two arguments summed
 with the third argument and then rounded once to the nearest
float
.
fma(Vector<Double>, Vector<Double>)
- Method in class jdk.incubator.vector.
DoubleVector
Multiplies this vector by a second input vector, and sums
 the result with a third.
fma(Vector<Float>, Vector<Float>)
- Method in class jdk.incubator.vector.
FloatVector
Multiplies this vector by a second input vector, and sums
 the result with a third.
FMA
- Static variable in class jdk.incubator.vector.
VectorOperators
Produce
fma(a,b,c)
.
FMT
- Static variable in class java.util.
FormatProcessor
PREVIEW
This predefined
FormatProcessor
PREVIEW
instance constructs a
String
result using
 the Locale.ROOT
Locale
.
FOCAL_PLANE_RESOLUTION_UNIT_CENTIMETER
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "FocalPlaneXResolution" tag.
FOCAL_PLANE_RESOLUTION_UNIT_INCH
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "FocalPlaneXResolution" tag.
FOCAL_PLANE_RESOLUTION_UNIT_NONE
- Static variable in class javax.imageio.plugins.tiff.
ExifTIFFTagSet
A value to be used with the "FocalPlaneResolutionUnit" tag.
focus
- Variable in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Focus color
focus()
- Method in interface org.w3c.dom.html.
HTMLAnchorElement
Gives keyboard focus to this element.
focus()
- Method in interface org.w3c.dom.html.
HTMLInputElement
Gives keyboard focus to this element.
focus()
- Method in interface org.w3c.dom.html.
HTMLSelectElement
Gives keyboard focus to this element.
focus()
- Method in interface org.w3c.dom.html.
HTMLTextAreaElement
Gives keyboard focus to this element.
FOCUS
- Static variable in class com.sun.java.accessibility.util.
EventID
Maps to AWT Focus support (i.e., FocusListener and FocusEvent)
FOCUS
- Static variable in class javax.swing.plaf.synth.
ColorType
ColorType for the focus.
FOCUS_ACCELERATOR_KEY
- Static variable in class javax.swing.text.
JTextComponent
The bound property name for the focus accelerator.
FOCUS_EVENT_MASK
- Static variable in class java.awt.
AWTEvent
The event mask for selecting focus events.
FOCUS_FIRST
- Static variable in class java.awt.event.
FocusEvent
The first number in the range of ids used for focus events.
FOCUS_GAINED
- Static variable in class java.awt.event.
FocusEvent
This event indicates that the Component is now the focus owner.
FOCUS_LAST
- Static variable in class java.awt.event.
FocusEvent
The last number in the range of ids used for focus events.
FOCUS_LOST
- Static variable in class java.awt.event.
FocusEvent
This event indicates that the Component is no longer the focus owner.
FOCUS_MANAGER_CLASS_PROPERTY
- Static variable in class javax.swing.
FocusManager
This field is obsolete, and its use is discouraged since its
 specification is incompatible with the 1.4 focus APIs.
FOCUS_PAINTED_CHANGED_PROPERTY
- Static variable in class javax.swing.
AbstractButton
Identifies a change to having the border highlighted when focused,
 or not.
Focusability
- Search tag in package java.awt
Section
FOCUSABLE
- Static variable in class javax.accessibility.
AccessibleState
Indicates this object can accept keyboard focus, which means all events
 resulting from typing on the keyboard will normally be passed to it when
 it has focus.
Focusable Windows
- Search tag in package java.awt
Section
FocusAdapter
- Class in
java.awt.event
An abstract adapter class for receiving keyboard focus events.
FocusAdapter()
- Constructor for class java.awt.event.
FocusAdapter
Constructs a
FocusAdapter
.
Focus and PropertyChangeListener
- Search tag in package java.awt
Section
Focus and VetoableChangeListener
- Search tag in package java.awt
Section
focusColor
- Variable in class javax.swing.plaf.metal.
MetalButtonUI
The color of the focused button.
focusColor
- Variable in class javax.swing.plaf.metal.
MetalRadioButtonUI
The color of the focused radio button.
focusColor
- Variable in class javax.swing.plaf.metal.
MetalToggleButtonUI
The color of a focused toggle button.
FOCUSED
- Static variable in class javax.accessibility.
AccessibleState
Indicates this object currently has the keyboard focus.
FOCUSED
- Static variable in interface javax.swing.plaf.synth.
SynthConstants
Indicates the region has focus.
focusedCompIndex
- Variable in class javax.swing.plaf.basic.
BasicToolBarUI
The index of the focused component.
FocusEvent
- Class in
java.awt.event
A low-level event which indicates that a Component has gained or lost the
 input focus.
FocusEvent(Component, int)
- Constructor for class java.awt.event.
FocusEvent
Constructs a
FocusEvent
object and identifies it
 as a permanent change in focus.
FocusEvent(Component, int, boolean)
- Constructor for class java.awt.event.
FocusEvent
Constructs a
FocusEvent
object and identifies
 whether or not the change is temporary.
FocusEvent(Component, int, boolean, Component)
- Constructor for class java.awt.event.
FocusEvent
Constructs a
FocusEvent
object with the
 specified temporary state, opposite
Component
and the
Cause.UNKNOWN
cause.
FocusEvent(Component, int, boolean, Component, FocusEvent.Cause)
- Constructor for class java.awt.event.
FocusEvent
Constructs a
FocusEvent
object with the
 specified temporary state, opposite
Component
and the cause.
FocusEvent.Cause
- Enum Class in
java.awt.event
This enum represents the cause of a
FocusEvent
- the reason why it
 occurred.
FocusEvent and WindowEvent
- Search tag in package java.awt
Section
focusGained(FocusEvent)
- Method in class java.awt.
AWTEventMulticaster
Handles the focusGained event by invoking the
 focusGained methods on listener-a and listener-b.
focusGained(FocusEvent)
- Method in class java.awt.
Component.AccessibleAWTComponent.AccessibleAWTFocusHandler
focusGained(FocusEvent)
- Method in class java.awt.event.
FocusAdapter
Invoked when a component gains the keyboard focus.
focusGained(FocusEvent)
- Method in interface java.awt.event.
FocusListener
Invoked when a component gains the keyboard focus.
focusGained(FocusEvent)
- Method in class javax.swing.
JComponent.AccessibleJComponent.AccessibleFocusHandler
Deprecated.
focusGained(FocusEvent)
- Method in class javax.swing.plaf.basic.
BasicButtonListener
focusGained(FocusEvent)
- Method in class javax.swing.plaf.basic.
BasicComboBoxEditor
focusGained(FocusEvent)
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI.FocusHandler
focusGained(FocusEvent)
- Method in class javax.swing.plaf.basic.
BasicListUI.FocusHandler
focusGained(FocusEvent)
- Method in class javax.swing.plaf.basic.
BasicSliderUI.FocusHandler
focusGained(FocusEvent)
- Method in class javax.swing.plaf.basic.
BasicTableUI.FocusHandler
focusGained(FocusEvent)
- Method in class javax.swing.plaf.basic.
BasicToolBarUI.ToolBarFocusListener
focusGained(FocusEvent)
- Method in class javax.swing.plaf.basic.
BasicTreeUI.FocusHandler
Invoked when focus is activated on the tree we're in, redraws the
 lead row.
focusGained(FocusEvent)
- Method in class javax.swing.text.
DefaultCaret
Called when the component containing the caret gains
 focus.
FocusHandler()
- Constructor for class javax.swing.plaf.basic.
BasicComboBoxUI.FocusHandler
Constructs a
FocusHandler
.
FocusHandler()
- Constructor for class javax.swing.plaf.basic.
BasicListUI.FocusHandler
Constructs a
FocusHandler
.
FocusHandler()
- Constructor for class javax.swing.plaf.basic.
BasicSliderUI.FocusHandler
Constructs a
FocusHandler
.
FocusHandler()
- Constructor for class javax.swing.plaf.basic.
BasicSplitPaneUI.FocusHandler
Constructs a
FocusHandler
.
FocusHandler()
- Constructor for class javax.swing.plaf.basic.
BasicTabbedPaneUI.FocusHandler
Constructs a
FocusHandler
.
FocusHandler()
- Constructor for class javax.swing.plaf.basic.
BasicTableUI.FocusHandler
Constructs a
FocusHandler
.
FocusHandler()
- Constructor for class javax.swing.plaf.basic.
BasicTreeUI.FocusHandler
Constructs a
FocusHandler
.
focusInsets
- Variable in class javax.swing.plaf.basic.
BasicSliderUI
Focus insets
focusListener
- Variable in class javax.swing.plaf.basic.
BasicComboBoxUI
This protected field is implementation specific.
focusListener
- Variable in class javax.swing.plaf.basic.
BasicListUI
FocusListener
that attached to
JList
.
focusListener
- Variable in class javax.swing.plaf.basic.
BasicSliderUI
Focus listener
focusListener
- Variable in class javax.swing.plaf.basic.
BasicSplitPaneUI
Instance of the FocusListener for this JSplitPane.
focusListener
- Variable in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Focus change listener
focusListener
- Variable in class javax.swing.plaf.basic.
BasicTableUI
FocusListener
that are attached to the
JTable
.
FocusListener
- Interface in
java.awt.event
The listener interface for receiving keyboard focus events on
 a component.
focusLost(FocusEvent)
- Method in class java.awt.
AWTEventMulticaster
Handles the focusLost event by invoking the
 focusLost methods on listener-a and listener-b.
focusLost(FocusEvent)
- Method in class java.awt.
Component.AccessibleAWTComponent.AccessibleAWTFocusHandler
focusLost(FocusEvent)
- Method in class java.awt.event.
FocusAdapter
Invoked when a component loses the keyboard focus.
focusLost(FocusEvent)
- Method in interface java.awt.event.
FocusListener
Invoked when a component loses the keyboard focus.
focusLost(FocusEvent)
- Method in class javax.swing.
JComponent.AccessibleJComponent.AccessibleFocusHandler
Deprecated.
focusLost(FocusEvent)
- Method in class javax.swing.plaf.basic.
BasicButtonListener
focusLost(FocusEvent)
- Method in class javax.swing.plaf.basic.
BasicComboBoxEditor
focusLost(FocusEvent)
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI.FocusHandler
focusLost(FocusEvent)
- Method in class javax.swing.plaf.basic.
BasicListUI.FocusHandler
focusLost(FocusEvent)
- Method in class javax.swing.plaf.basic.
BasicSliderUI.FocusHandler
focusLost(FocusEvent)
- Method in class javax.swing.plaf.basic.
BasicTableUI.FocusHandler
focusLost(FocusEvent)
- Method in class javax.swing.plaf.basic.
BasicToolBarUI.ToolBarFocusListener
focusLost(FocusEvent)
- Method in class javax.swing.plaf.basic.
BasicTreeUI.FocusHandler
Invoked when focus is activated on the tree we're in, redraws the
 lead row.
focusLost(FocusEvent)
- Method in class javax.swing.text.
DefaultCaret
Called when the component containing the caret loses
 focus.
FocusManager
- Class in
javax.swing
This class has been obsoleted by the 1.4 focus APIs.
FocusManager()
- Constructor for class javax.swing.
FocusManager
Constructor for subclasses to call.
focusNextComponent()
- Method in class java.awt.
KeyboardFocusManager
Focuses the Component after the current focus owner.
focusNextComponent(Component)
- Method in class java.awt.
DefaultKeyboardFocusManager
Focuses the Component after aComponent, typically based on a
 FocusTraversalPolicy.
focusNextComponent(Component)
- Method in class java.awt.
KeyboardFocusManager
Focuses the Component after aComponent, typically based on a
 FocusTraversalPolicy.
focusPreviousComponent()
- Method in class java.awt.
KeyboardFocusManager
Focuses the Component before the current focus owner.
focusPreviousComponent(Component)
- Method in class java.awt.
DefaultKeyboardFocusManager
Focuses the Component before aComponent, typically based on a
 FocusTraversalPolicy.
focusPreviousComponent(Component)
- Method in class java.awt.
KeyboardFocusManager
Focuses the Component before aComponent, typically based on a
 FocusTraversalPolicy.
focusRect
- Variable in class javax.swing.plaf.basic.
BasicSliderUI
Focus rectangle
Focus Traversal
- Search tag in package java.awt
Section
FocusTraversalPolicy
- Search tag in package java.awt
Section
FocusTraversalPolicy
- Class in
java.awt
A FocusTraversalPolicy defines the order in which Components with a
 particular focus cycle root are traversed.
FocusTraversalPolicy()
- Constructor for class java.awt.
FocusTraversalPolicy
Constructs a
FocusTraversalPolicy
.
Focus Traversal Policy Providers
- Search tag in package java.awt
Section
foldArguments(MethodHandle, int, MethodHandle)
- Static method in class java.lang.invoke.
MethodHandles
Adapts a target method handle by pre-processing some of its arguments, starting at a given position, and then
 calling the target with the result of the pre-processing, inserted into the original sequence of arguments just
 before the folded arguments.
foldArguments(MethodHandle, MethodHandle)
- Static method in class java.lang.invoke.
MethodHandles
Adapts a target method handle by pre-processing
 some of its arguments, and then calling the target with
 the result of the pre-processing, inserted into the original
 sequence of arguments.
FolderIcon16()
- Constructor for class javax.swing.plaf.metal.
MetalIconFactory.FolderIcon16
Constructs a
FolderIcon16
.
FOLIO
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for Folio, 8 1/2 x 13 in.
FOLIO
- Static variable in class javax.print.attribute.standard.
MediaSize.Other
Specifies the folio size, 8.5 inches by 13 inches.
FOLIO
- Static variable in class javax.print.attribute.standard.
MediaSizeName
folio size.
FOLLOW_LINKS
- Enum constant in enum class java.nio.file.
FileVisitOption
Follow symbolic links.
following(int)
- Method in class java.text.
BreakIterator
Returns the first boundary following the specified character offset.
followRedirects()
- Method in class java.net.http.
HttpClient
Returns the follow redirects policy for this client.
followRedirects(HttpClient.Redirect)
- Method in interface java.net.http.
HttpClient.Builder
Specifies whether requests will automatically follow redirects issued
 by the server.
font
- Variable in class java.awt.
FontMetrics
The actual
Font
from which the font metrics are
 created.
font
- Variable in class javax.swing.tree.
DefaultTreeCellEditor
Font to paint with,
null
indicates
 font of renderer is to be used.
Font
- Class in
java.awt
The
Font
class represents fonts, which are used to
 render text in a visible way.
Font(Font)
- Constructor for class java.awt.
Font
Creates a new
Font
from the specified
font
.
Font(String, int, int)
- Constructor for class java.awt.
Font
Creates a new
Font
from the specified name, style and
 point size.
Font(Map<? extends AttributedCharacterIterator.Attribute, ?>)
- Constructor for class java.awt.
Font
Creates a new
Font
with the specified attributes.
FONT
- Static variable in class java.awt.font.
TextAttribute
Attribute key used to provide the font to use to render text.
FONT
- Static variable in class javax.swing.text.html.
CSS.Attribute
CSS attribute "font".
FONT
- Static variable in class javax.swing.text.html.
HTML.Tag
Tag <font>
FONT_CHANGE_BIGGER
- Static variable in class javax.swing.text.html.
HTMLEditorKit
The  font size increase to next value action identifier
FONT_CHANGE_SMALLER
- Static variable in class javax.swing.text.html.
HTMLEditorKit
The font size decrease to next value action identifier
FONT_CHOOSER
- Static variable in class javax.accessibility.
AccessibleRole
A
FONT_CHOOSER
is a component that lets the user pick various
 attributes for fonts.
FONT_FACE_RULE
- Static variable in interface org.w3c.dom.css.
CSSRule
The rule is a
CSSFontFaceRule
.
FONT_FAMILY
- Static variable in class javax.swing.text.html.
CSS.Attribute
CSS attribute "font-family".
FONT_SIZE
- Static variable in class javax.swing.text.html.
CSS.Attribute
CSS attribute "font-size".
FONT_STYLE
- Static variable in class javax.swing.text.html.
CSS.Attribute
CSS attribute "font-style".
FONT_VARIANT
- Static variable in class javax.swing.text.html.
CSS.Attribute
CSS attribute "font-variant".
FONT_WEIGHT
- Static variable in class javax.swing.text.html.
CSS.Attribute
CSS attribute "font-weight".
Font and TextAttribute
- Search tag in class java.awt.Font
Section
fontChanged
- Static variable in class javax.swing.plaf.basic.
BasicListUI
The bit relates to font changed property.
Font Faces and Names
- Search tag in class java.awt.Font
Section
FontFamily
- Static variable in class javax.swing.text.
StyleConstants
Name of the font family.
FontFamilyAction(String, String)
- Constructor for class javax.swing.text.
StyledEditorKit.FontFamilyAction
Creates a new FontFamilyAction.
FontFormatException
- Exception Class in
java.awt
Thrown by method createFont in the
Font
class to indicate
 that the specified font is bad.
FontFormatException(String)
- Constructor for exception class java.awt.
FontFormatException
Report a FontFormatException for the reason specified.
FontMetrics
- Class in
java.awt
The
FontMetrics
class defines a font metrics object, which
 encapsulates information about the rendering of a particular font on a
 particular screen.
FontMetrics(Font)
- Constructor for class java.awt.
FontMetrics
Creates a new
FontMetrics
object for finding out
 height and width information about the specified
Font
and specific character glyphs in that
Font
.
FontRenderContext
- Class in
java.awt.font
The
FontRenderContext
class is a container for the
   information needed to correctly measure text.
FontRenderContext()
- Constructor for class java.awt.font.
FontRenderContext
Constructs a new
FontRenderContext
object.
FontRenderContext(AffineTransform, boolean, boolean)
- Constructor for class java.awt.font.
FontRenderContext
Constructs a
FontRenderContext
object from an
 optional
AffineTransform
and two
boolean
values that determine if the newly constructed object has
 anti-aliasing or fractional metrics.
FontRenderContext(AffineTransform, Object, Object)
- Constructor for class java.awt.font.
FontRenderContext
Constructs a
FontRenderContext
object from an
 optional
AffineTransform
and two
Object
values that determine if the newly constructed object has
 anti-aliasing or fractional metrics.
FontSize
- Static variable in class javax.swing.text.
StyleConstants
Name of the font size.
FontSizeAction(String, int)
- Constructor for class javax.swing.text.
StyledEditorKit.FontSizeAction
Creates a new FontSizeAction.
Font Style
- Search tag in class javax.swing.plaf.metal.DefaultMetalTheme
Section
FontUIResource
- Class in
javax.swing.plaf
A subclass of java.awt.Font that implements UIResource.
FontUIResource(Font)
- Constructor for class javax.swing.plaf.
FontUIResource
Constructs a
FontUIResource
.
FontUIResource(String, int, int)
- Constructor for class javax.swing.plaf.
FontUIResource
Constructs a
FontUIResource
.
FOOTER
- Static variable in class javax.accessibility.
AccessibleRole
A text footer.
FOR_LOOP
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
ForLoopTree
.
forBitSize(int)
- Static method in enum class jdk.incubator.vector.
VectorShape
Finds an appropriate shape depending on the
 proposed bit-size of a vector.
force()
- Method in interface java.lang.foreign.
MemorySegment
PREVIEW
Forces any changes made to the contents of this mapped segment to be written to the
 storage device described by the mapped segment's file descriptor.
force()
- Method in class java.nio.
MappedByteBuffer
Forces any changes made to this buffer's content to be written to the
 storage device containing the mapped file.
force(boolean)
- Method in class java.nio.channels.
AsynchronousFileChannel
Forces any updates to this channel's file to be written to the storage
 device that contains it.
force(boolean)
- Method in class java.nio.channels.
FileChannel
Forces any updates to this channel's file to be written to the storage
 device that contains it.
force(int, int)
- Method in class java.nio.
MappedByteBuffer
Forces any changes made to a region of this buffer's content to
 be written to the storage device containing the mapped
 file.
ForcedBreakWeight
- Static variable in class javax.swing.text.
View
The weight to indicate a view supports breaking,
 and must be broken to be represented properly
 when placed in a view that formats its children
 by breaking them.
forceEarlyReturn(Value)
- Method in interface com.sun.jdi.
ThreadReference
Force a method to return before it reaches a return
 statement.
forceTermination()
- Method in class java.util.concurrent.
Phaser
Forces this phaser to enter termination state.
forClass()
- Method in class java.io.
ObjectStreamClass
Return the class in the local VM that this version is mapped to.
forClass(Class<?>)
- Static method in class jdk.dynalink.beans.
StaticClass
Retrieves the
StaticClass
instance for the specified class.
forDigit(int, int)
- Static method in class java.lang.
Character
Determines the character representation for a specific digit in
 the specified radix.
forEach(long, BiConsumer<? super K, ? super V>)
- Method in class java.util.concurrent.
ConcurrentHashMap
Performs the given action for each (key, value).
forEach(long, BiFunction<? super K, ? super V, ? extends U>, Consumer<? super U>)
- Method in class java.util.concurrent.
ConcurrentHashMap
Performs the given action for each non-null transformation
 of each (key, value).
forEach(BiConsumer<? super Object, ? super Object>)
- Method in class java.security.
Provider
forEach(BiConsumer<? super K, ? super V>)
- Method in interface java.util.concurrent.
ConcurrentMap
Performs the given action for each entry in this map until all entries
 have been processed or the action throws an exception.
forEach(BiConsumer<? super K, ? super V>)
- Method in interface java.util.
Map
Performs the given action for each entry in this map until all entries
 have been processed or the action throws an exception.
forEach(Consumer<? super E>)
- Method in class java.util.
ArrayDeque
forEach(Consumer<? super E>)
- Method in class java.util.
ArrayList
forEach(Consumer<? super E>)
- Method in class java.util.concurrent.
ArrayBlockingQueue
forEach(Consumer<? super E>)
- Method in class java.util.concurrent.
ConcurrentLinkedDeque
forEach(Consumer<? super E>)
- Method in class java.util.concurrent.
ConcurrentLinkedQueue
forEach(Consumer<? super E>)
- Method in class java.util.concurrent.
CopyOnWriteArrayList
forEach(Consumer<? super E>)
- Method in class java.util.concurrent.
CopyOnWriteArraySet
forEach(Consumer<? super E>)
- Method in class java.util.concurrent.
LinkedBlockingDeque
forEach(Consumer<? super E>)
- Method in class java.util.concurrent.
LinkedBlockingQueue
forEach(Consumer<? super E>)
- Method in class java.util.concurrent.
LinkedTransferQueue
forEach(Consumer<? super E>)
- Method in class java.util.concurrent.
PriorityBlockingQueue
forEach(Consumer<? super E>)
- Method in class java.util.
PriorityQueue
forEach(Consumer<? super E>)
- Method in class java.util.
Vector
forEach(Consumer<? super StackWalker.StackFrame>)
- Method in class java.lang.
StackWalker
Performs the given action on each element of
StackFrame
stream
 of the current thread, traversing from the top frame of the stack,
 which is the method calling this
forEach
method.
forEach(Consumer<? super T>)
- Method in interface java.lang.
Iterable
Performs the given action for each element of the
Iterable
until all elements have been processed or the action throws an
 exception.
forEach(Consumer<? super T>)
- Method in interface java.util.stream.
Stream
Performs an action for each element of this stream.
forEach(DoubleConsumer)
- Method in interface java.util.stream.
DoubleStream
Performs an action for each element of this stream.
forEach(IntConsumer)
- Method in interface java.util.stream.
IntStream
Performs an action for each element of this stream.
forEach(LongConsumer)
- Method in interface java.util.stream.
LongStream
Performs an action for each element of this stream.
forEachEntry(long, Consumer<? super Map.Entry<K, V>>)
- Method in class java.util.concurrent.
ConcurrentHashMap
Performs the given action for each entry.
forEachEntry(long, Function<Map.Entry<K, V>, ? extends U>, Consumer<? super U>)
- Method in class java.util.concurrent.
ConcurrentHashMap
Performs the given action for each non-null transformation
 of each entry.
forEachKey(long, Consumer<? super K>)
- Method in class java.util.concurrent.
ConcurrentHashMap
Performs the given action for each key.
forEachKey(long, Function<? super K, ? extends U>, Consumer<? super U>)
- Method in class java.util.concurrent.
ConcurrentHashMap
Performs the given action for each non-null transformation
 of each key.
forEachOrdered(Consumer<? super T>)
- Method in interface java.util.stream.
Stream
Performs an action for each element of this stream, in the encounter
 order of the stream if the stream has a defined encounter order.
forEachOrdered(DoubleConsumer)
- Method in interface java.util.stream.
DoubleStream
Performs an action for each element of this stream, guaranteeing that
 each element is processed in encounter order for streams that have a
 defined encounter order.
forEachOrdered(IntConsumer)
- Method in interface java.util.stream.
IntStream
Performs an action for each element of this stream, guaranteeing that
 each element is processed in encounter order for streams that have a
 defined encounter order.
forEachOrdered(LongConsumer)
- Method in interface java.util.stream.
LongStream
Performs an action for each element of this stream, guaranteeing that
 each element is processed in encounter order for streams that have a
 defined encounter order.
forEachRemaining(Consumer<? super E>)
- Method in interface java.util.
Iterator
Performs the given action for each remaining element until all elements
 have been processed or the action throws an exception.
forEachRemaining(Consumer<? super Double>)
- Method in interface java.util.
PrimitiveIterator.OfDouble
Performs the given action for each remaining element until all elements
 have been processed or the action throws an exception.
forEachRemaining(Consumer<? super Double>)
- Method in interface java.util.
Spliterator.OfDouble
Performs the given action for each remaining element, sequentially in
 the current thread, until all elements have been processed or the action
 throws an exception.
forEachRemaining(Consumer<? super Integer>)
- Method in interface java.util.
PrimitiveIterator.OfInt
Performs the given action for each remaining element until all elements
 have been processed or the action throws an exception.
forEachRemaining(Consumer<? super Integer>)
- Method in interface java.util.
Spliterator.OfInt
Performs the given action for each remaining element, sequentially in
 the current thread, until all elements have been processed or the action
 throws an exception.
forEachRemaining(Consumer<? super Long>)
- Method in interface java.util.
PrimitiveIterator.OfLong
Performs the given action for each remaining element until all elements
 have been processed or the action throws an exception.
forEachRemaining(Consumer<? super Long>)
- Method in interface java.util.
Spliterator.OfLong
Performs the given action for each remaining element, sequentially in
 the current thread, until all elements have been processed or the action
 throws an exception.
forEachRemaining(Consumer<? super T>)
- Method in interface java.util.
Spliterator
Performs the given action for each remaining element, sequentially in
 the current thread, until all elements have been processed or the action
 throws an exception.
forEachRemaining(DoubleConsumer)
- Method in interface java.util.
PrimitiveIterator.OfDouble
Performs the given action for each remaining element until all elements
 have been processed or the action throws an exception.
forEachRemaining(IntConsumer)
- Method in interface java.util.
PrimitiveIterator.OfInt
Performs the given action for each remaining element until all elements
 have been processed or the action throws an exception.
forEachRemaining(LongConsumer)
- Method in interface java.util.
PrimitiveIterator.OfLong
Performs the given action for each remaining element until all elements
 have been processed or the action throws an exception.
forEachRemaining(T_CONS)
- Method in interface java.util.
PrimitiveIterator
Performs the given action for each remaining element until all elements
 have been processed or the action throws an exception.
forEachRemaining(T_CONS)
- Method in interface java.util.
Spliterator.OfPrimitive
Performs the given action for each remaining element, sequentially in
 the current thread, until all elements have been processed or the
 action throws an exception.
forEachValue(long, Consumer<? super V>)
- Method in class java.util.concurrent.
ConcurrentHashMap
Performs the given action for each value.
forEachValue(long, Function<? super V, ? extends U>, Consumer<? super U>)
- Method in class java.util.concurrent.
ConcurrentHashMap
Performs the given action for each non-null transformation
 of each value.
Foreground
- Static variable in class javax.swing.text.
StyleConstants
Name of the foreground color attribute.
FOREGROUND
- Static variable in class java.awt.font.
TextAttribute
Attribute key for the paint used to render the text.
FOREGROUND
- Static variable in class javax.swing.plaf.synth.
ColorType
ColorType for the foreground of a region.
ForegroundAction(String, Color)
- Constructor for class javax.swing.text.
StyledEditorKit.ForegroundAction
Creates a new ForegroundAction.
Foreign function access
- Search tag in package java.lang.foreign
Section
Foreign memory access
- Search tag in package java.lang.foreign
Section
FOREVER
- Enum constant in enum class java.time.temporal.
ChronoUnit
Artificial unit that represents the concept of forever.
forget(Xid)
- Method in interface javax.transaction.xa.
XAResource
Tells the resource manager to forget about a heuristically
 completed transaction branch.
forIndexBitSize(int, int)
- Static method in enum class jdk.incubator.vector.
VectorShape
Finds an appropriate index shape depending on the
 proposed index-bit-size and element-size of a vector.
fork()
- Method in class java.util.concurrent.
ForkJoinTask
Arranges to asynchronously execute this task in the pool the
 current task is running in, if applicable, or using the
ForkJoinPool.commonPool()
if not
ForkJoinTask.inForkJoinPool()
.
fork(Callable<? extends U>)
- Method in class java.util.concurrent.
StructuredTaskScope
PREVIEW
Starts a new thread in this task scope to execute a value-returning task, thus
 creating a
subtask
of this task scope.
ForkJoinPool
- Class in
java.util.concurrent
An
ExecutorService
for running
ForkJoinTask
s.
ForkJoinPool()
- Constructor for class java.util.concurrent.
ForkJoinPool
Creates a
ForkJoinPool
with parallelism equal to
Runtime.availableProcessors()
, using defaults for all
 other parameters (see
ForkJoinPool(int, ForkJoinWorkerThreadFactory, UncaughtExceptionHandler, boolean, int, int, int, Predicate, long, TimeUnit)
).
ForkJoinPool(int)
- Constructor for class java.util.concurrent.
ForkJoinPool
Creates a
ForkJoinPool
with the indicated parallelism
 level, using defaults for all other parameters (see
ForkJoinPool(int, ForkJoinWorkerThreadFactory, UncaughtExceptionHandler, boolean, int, int, int, Predicate, long, TimeUnit)
).
ForkJoinPool(int, ForkJoinPool.ForkJoinWorkerThreadFactory, Thread.UncaughtExceptionHandler, boolean)
- Constructor for class java.util.concurrent.
ForkJoinPool
Creates a
ForkJoinPool
with the given parameters (using
 defaults for others -- see
ForkJoinPool(int, ForkJoinWorkerThreadFactory, UncaughtExceptionHandler, boolean, int, int, int, Predicate, long, TimeUnit)
).
ForkJoinPool(int, ForkJoinPool.ForkJoinWorkerThreadFactory, Thread.UncaughtExceptionHandler, boolean, int, int, int, Predicate<? super ForkJoinPool>, long, TimeUnit)
- Constructor for class java.util.concurrent.
ForkJoinPool
Creates a
ForkJoinPool
with the given parameters.
ForkJoinPool.ForkJoinWorkerThreadFactory
- Interface in
java.util.concurrent
Factory for creating new
ForkJoinWorkerThread
s.
ForkJoinPool.ManagedBlocker
- Interface in
java.util.concurrent
Interface for extending managed parallelism for tasks running
 in
ForkJoinPool
s.
ForkJoinTask<V>
- Class in
java.util.concurrent
Abstract base class for tasks that run within a
ForkJoinPool
.
ForkJoinTask()
- Constructor for class java.util.concurrent.
ForkJoinTask
Constructor for subclasses to call.
ForkJoinWorkerThread
- Class in
java.util.concurrent
A thread managed by a
ForkJoinPool
, which executes
ForkJoinTask
s.
ForkJoinWorkerThread(ThreadGroup, ForkJoinPool, boolean)
- Constructor for class java.util.concurrent.
ForkJoinWorkerThread
Creates a ForkJoinWorkerThread operating in the given thread group and
 pool, and with the given policy for preserving ThreadLocals.
ForkJoinWorkerThread(ForkJoinPool)
- Constructor for class java.util.concurrent.
ForkJoinWorkerThread
Creates a ForkJoinWorkerThread operating in the given pool.
forLanguageTag(String)
- Static method in class java.util.
Locale
Returns a locale for the specified IETF BCP 47 language tag string.
ForLoopTree
- Interface in
com.sun.source.tree
A tree node for a basic
for
loop statement.
FORM
- Static variable in class javax.swing.text.html.
HTML.Tag
Tag <form>
FormAction()
- Constructor for class javax.swing.text.html.
HTMLDocument.HTMLReader.FormAction
Constructs a
FormAction
.
format
- Variable in class javax.sound.sampled.
AudioInputStream
The format of the audio data contained in the stream.
format(double)
- Method in class java.text.
NumberFormat
Specialization of format.
format(double, StringBuffer, FieldPosition)
- Method in class java.text.
ChoiceFormat
Returns pattern with formatted double.
format(double, StringBuffer, FieldPosition)
- Method in class java.text.
CompactNumberFormat
Formats a double to produce a string representing its compact form.
format(double, StringBuffer, FieldPosition)
- Method in class java.text.
DecimalFormat
Formats a double to produce a string.
format(double, StringBuffer, FieldPosition)
- Method in class java.text.
NumberFormat
Specialization of format.
format(long)
- Method in class java.text.
NumberFormat
Specialization of format.
format(long, StringBuffer, FieldPosition)
- Method in class java.text.
ChoiceFormat
Specialization of format.
format(long, StringBuffer, FieldPosition)
- Method in class java.text.
CompactNumberFormat
Formats a long to produce a string representing its compact form.
format(long, StringBuffer, FieldPosition)
- Method in class java.text.
DecimalFormat
Format a long to produce a string.
format(long, StringBuffer, FieldPosition)
- Method in class java.text.
NumberFormat
Specialization of format.
format(Object)
- Method in class java.text.
Format
Formats an object to produce a string.
format(Object[], StringBuffer, FieldPosition)
- Method in class java.text.
MessageFormat
Formats an array of objects and appends the
MessageFormat
's
 pattern, with format elements replaced by the formatted objects, to the
 provided
StringBuffer
.
format(Object, StringBuffer, FieldPosition)
- Method in class java.text.
CompactNumberFormat
Formats a number to produce a string representing its compact form.
format(Object, StringBuffer, FieldPosition)
- Method in class java.text.
DateFormat
Formats the given
Object
into a date-time string.
format(Object, StringBuffer, FieldPosition)
- Method in class java.text.
DecimalFormat
Formats a number and appends the resulting text to the given string
 buffer.
format(Object, StringBuffer, FieldPosition)
- Method in class java.text.
Format
Formats an object and appends the resulting text to a given string
 buffer.
format(Object, StringBuffer, FieldPosition)
- Method in class java.text.
MessageFormat
Formats an array of objects and appends the
MessageFormat
's
 pattern, with format elements replaced by the formatted objects, to the
 provided
StringBuffer
.
format(Object, StringBuffer, FieldPosition)
- Method in class java.text.
NumberFormat
Formats a number and appends the resulting text to the given string
 buffer.
format(String, Object...)
- Method in class java.io.
Console
Writes a formatted string to this console's output stream using
 the specified format string and arguments.
format(String, Object...)
- Method in class java.io.
PrintStream
Writes a formatted string to this output stream using the specified
 format string and arguments.
format(String, Object...)
- Method in class java.io.
PrintWriter
Writes a formatted string to this writer using the specified format
 string and arguments.
format(String, Object...)
- Static method in class java.lang.
String
Returns a formatted string using the specified format string and
 arguments.
format(String, Object...)
- Static method in class java.text.
MessageFormat
Creates a MessageFormat with the given pattern and uses it
 to format the given arguments.
format(String, Object...)
- Method in class java.util.
Formatter
Writes a formatted string to this object's destination using the
 specified format string and arguments.
format(DateTimeFormatter)
- Method in interface java.time.chrono.
ChronoLocalDate
Formats this date using the specified formatter.
format(DateTimeFormatter)
- Method in interface java.time.chrono.
ChronoLocalDateTime
Formats this date-time using the specified formatter.
format(DateTimeFormatter)
- Method in interface java.time.chrono.
ChronoZonedDateTime
Formats this date-time using the specified formatter.
format(DateTimeFormatter)
- Method in class java.time.
LocalDate
Formats this date using the specified formatter.
format(DateTimeFormatter)
- Method in class java.time.
LocalDateTime
Formats this date-time using the specified formatter.
format(DateTimeFormatter)
- Method in class java.time.
LocalTime
Formats this time using the specified formatter.
format(DateTimeFormatter)
- Method in class java.time.
MonthDay
Formats this month-day using the specified formatter.
format(DateTimeFormatter)
- Method in class java.time.
OffsetDateTime
Formats this date-time using the specified formatter.
format(DateTimeFormatter)
- Method in class java.time.
OffsetTime
Formats this time using the specified formatter.
format(DateTimeFormatter)
- Method in class java.time.
Year
Formats this year using the specified formatter.
format(DateTimeFormatter)
- Method in class java.time.
YearMonth
Formats this year-month using the specified formatter.
format(DateTimeFormatter)
- Method in class java.time.
ZonedDateTime
Formats this date-time using the specified formatter.
format(TemporalAccessor)
- Method in class java.time.format.
DateTimeFormatter
Formats a date-time object using this formatter.
format(Date)
- Method in class java.text.
DateFormat
Formats a
Date
into a date-time string.
format(Date, StringBuffer, FieldPosition)
- Method in class java.text.
DateFormat
Formats a
Date
into a date-time string.
format(Date, StringBuffer, FieldPosition)
- Method in class java.text.
SimpleDateFormat
Formats the given
Date
into a date/time string and appends
 the result to the given
StringBuffer
.
format(Locale, String, Object...)
- Method in class java.io.
PrintStream
Writes a formatted string to this output stream using the specified
 format string and arguments.
format(Locale, String, Object...)
- Method in class java.io.
PrintWriter
Writes a formatted string to this writer using the specified format
 string and arguments.
format(Locale, String, Object...)
- Static method in class java.lang.
String
Returns a formatted string using the specified locale, format string,
 and arguments.
format(Locale, String, Object...)
- Method in class java.util.
Formatter
Writes a formatted string to this object's destination using the
 specified locale, format string, and arguments.
format(LogRecord)
- Method in class java.util.logging.
Formatter
Format the given log record and return the formatted string.
format(LogRecord)
- Method in class java.util.logging.
SimpleFormatter
Format the given LogRecord.
format(LogRecord)
- Method in class java.util.logging.
XMLFormatter
Format the given message to XML.
Format
- Class in
java.text
Format
is an abstract base class for formatting locale-sensitive
 information such as dates, messages, and numbers.
Format()
- Constructor for class java.text.
Format
Sole constructor.
FORMAT
- Enum constant in enum class java.util.
Locale.Category
Category used to represent the default locale for
 formatting dates, numbers, and/or currencies.
FORMAT
- Static variable in class java.lang.
Character
General category "Cf" in the Unicode specification.
FORMAT_CLASS
- Static variable in class java.util.
ResourceBundle.Control
The class-only format
List
containing
"java.class"
.
FORMAT_DEFAULT
- Static variable in class java.util.
ResourceBundle.Control
The default format
List
, which contains the strings
"java.class"
and
"java.properties"
, in
 this order.
FORMAT_FAILURE
- Static variable in class java.util.logging.
ErrorManager
FORMAT_FAILURE is used when formatting fails for any reason.
FORMAT_PROPERTIES
- Static variable in class java.util.
ResourceBundle.Control
The properties-only format
List
containing
"java.properties"
.
Format.Field
- Class in
java.text
Defines constants that are used as attribute keys in the
AttributedCharacterIterator
returned
 from
Format.formatToCharacterIterator
and as
 field identifiers in
FieldPosition
.
FormatConversionProvider
- Class in
javax.sound.sampled.spi
A format conversion provider provides format conversion services from one or
 more input formats to one or more output formats.
FormatConversionProvider()
- Constructor for class javax.sound.sampled.spi.
FormatConversionProvider
Constructor for subclasses to call.
FormatFlagsConversionMismatchException
- Exception Class in
java.util
Unchecked exception thrown when a conversion and flag are incompatible.
FormatFlagsConversionMismatchException(String, char)
- Constructor for exception class java.util.
FormatFlagsConversionMismatchException
Constructs an instance of this class with the specified flag
 and conversion.
formatHex(byte[])
- Method in class java.util.
HexFormat
Returns a hexadecimal string formatted from a byte array.
formatHex(byte[], int, int)
- Method in class java.util.
HexFormat
Returns a hexadecimal string formatted from a byte array range.
formatHex(A, byte[])
- Method in class java.util.
HexFormat
Appends formatted hexadecimal strings from a byte array to the
Appendable
.
formatHex(A, byte[], int, int)
- Method in class java.util.
HexFormat
Appends formatted hexadecimal strings from a byte array range to the
Appendable
.
formatMessage(LogRecord)
- Method in class java.util.logging.
Formatter
Localize and format the message string from a log record.
FormatProcessor
PREVIEW
- Class in
java.util
This
StringTemplate.Processor
PREVIEW
constructs a
String
result using
Formatter
specifications and values found in the
StringTemplate
PREVIEW
.
Format String Syntax
- Search tag in class java.util.Formatter
Section
FormatStyle
- Enum Class in
java.time.format
Enumeration of the style of a localized date, time or date-time formatter.
Formattable
- Interface in
java.util
The
Formattable
interface must be implemented by any class that
 needs to perform custom formatting using the
's'
conversion
 specifier of
Formatter
.
FormattableFlags
- Class in
java.util
FormattableFlags are passed to the
Formattable.formatTo()
method and modify the output format for
Formattables
.
formatted(Object...)
- Method in class java.lang.
String
Formats using this string as the format string, and the supplied
 arguments.
FORMATTED_TEXT_FIELD
- Static variable in class javax.swing.plaf.synth.
Region
FormattedTextField region.
Formatter
- Class in
java.util
An interpreter for printf-style format strings.
Formatter
- Class in
java.util.logging
A Formatter provides support for formatting LogRecords.
Formatter()
- Constructor for class java.util.
Formatter
Constructs a new formatter.
Formatter()
- Constructor for class java.util.logging.
Formatter
Construct a new formatter.
Formatter(File)
- Constructor for class java.util.
Formatter
Constructs a new formatter with the specified file.
Formatter(File, String)
- Constructor for class java.util.
Formatter
Constructs a new formatter with the specified file and charset.
Formatter(File, String, Locale)
- Constructor for class java.util.
Formatter
Constructs a new formatter with the specified file, charset, and
 locale.
Formatter(File, Charset, Locale)
- Constructor for class java.util.
Formatter
Constructs a new formatter with the specified file, charset, and
 locale.
Formatter(OutputStream)
- Constructor for class java.util.
Formatter
Constructs a new formatter with the specified output stream.
Formatter(OutputStream, String)
- Constructor for class java.util.
Formatter
Constructs a new formatter with the specified output stream and
 charset.
Formatter(OutputStream, String, Locale)
- Constructor for class java.util.
Formatter
Constructs a new formatter with the specified output stream, charset,
 and locale.
Formatter(OutputStream, Charset, Locale)
- Constructor for class java.util.
Formatter
Constructs a new formatter with the specified output stream, charset,
 and locale.
Formatter(PrintStream)
- Constructor for class java.util.
Formatter
Constructs a new formatter with the specified print stream.
Formatter(Appendable)
- Constructor for class java.util.
Formatter
Constructs a new formatter with the specified destination.
Formatter(Appendable, Locale)
- Constructor for class java.util.
Formatter
Constructs a new formatter with the specified destination and locale.
Formatter(String)
- Constructor for class java.util.
Formatter
Constructs a new formatter with the specified file name.
Formatter(String, String)
- Constructor for class java.util.
Formatter
Constructs a new formatter with the specified file name and charset.
Formatter(String, String, Locale)
- Constructor for class java.util.
Formatter
Constructs a new formatter with the specified file name, charset, and
 locale.
Formatter(String, Charset, Locale)
- Constructor for class java.util.
Formatter
Constructs a new formatter with the specified file name, charset, and
 locale.
Formatter(Locale)
- Constructor for class java.util.
Formatter
Constructs a new formatter with the specified locale.
Formatter.BigDecimalLayoutForm
- Enum Class in
java.util
Enum for
BigDecimal
formatting.
FormatterClosedException
- Exception Class in
java.util
Unchecked exception thrown when the formatter has been closed.
FormatterClosedException()
- Constructor for exception class java.util.
FormatterClosedException
Constructs an instance of this class.
Formatting
- Search tag in class java.text.CompactNumberFormat
Section
formatTo(TemporalAccessor, Appendable)
- Method in class java.time.format.
DateTimeFormatter
Formats a date-time object to an
Appendable
using this formatter.
formatTo(Formatter, int, int, int)
- Method in interface java.util.
Formattable
Formats the object using the provided
formatter
.
formatToCharacterIterator(Object)
- Method in class java.text.
CompactNumberFormat
Formats an Object producing an
AttributedCharacterIterator
.
formatToCharacterIterator(Object)
- Method in class java.text.
DecimalFormat
Formats an Object producing an
AttributedCharacterIterator
.
formatToCharacterIterator(Object)
- Method in class java.text.
Format
Formats an Object producing an
AttributedCharacterIterator
.
formatToCharacterIterator(Object)
- Method in class java.text.
MessageFormat
Formats an array of objects and inserts them into the
MessageFormat
's pattern, producing an
AttributedCharacterIterator
.
formatToCharacterIterator(Object)
- Method in class java.text.
SimpleDateFormat
Formats an Object producing an
AttributedCharacterIterator
.
FormSubmitEvent
- Class in
javax.swing.text.html
FormSubmitEvent is used to notify interested
 parties that a form was submitted.
FormSubmitEvent.MethodType
- Enum Class in
javax.swing.text.html
Represents an HTML form method type.
FormView
- Class in
javax.swing.text.html
Component decorator that implements the view interface
 for form elements, <input>, <textarea>,
 and <select>.
FormView(Element)
- Constructor for class javax.swing.text.html.
FormView
Creates a new FormView object.
FormView.MouseEventListener
- Class in
javax.swing.text.html
MouseEventListener class to handle form submissions when
 an input with type equal to image is clicked on.
forName(Module, String)
- Static method in class java.lang.
Class
Returns the
Class
with the given
binary name
in the given module.
forName(String)
- Static method in class java.lang.
Character.UnicodeBlock
Returns the UnicodeBlock with the given name.
forName(String)
- Static method in enum class java.lang.
Character.UnicodeScript
Returns the UnicodeScript constant with the given Unicode script
 name or the script name alias.
forName(String)
- Static method in class java.lang.
Class
Returns the
Class
object associated with the class or
 interface with the given string name.
forName(String)
- Static method in class java.nio.charset.
Charset
Returns a charset object for the named charset.
forName(String, boolean, ClassLoader)
- Static method in class java.lang.
Class
Returns the
Class
object associated with the class or
 interface with the given string name, using the given class loader.
forName(String, Charset)
- Static method in class java.nio.charset.
Charset
Returns a charset object for the named charset.
forRemoval()
- Element in annotation interface java.lang.
Deprecated
Indicates whether the annotated element is subject to removal in a
 future version.
Forward
- Static variable in class javax.swing.text.
Position.Bias
Indicates to bias toward the next character
 in the model.
FORWARD_TRAVERSAL_KEYS
- Static variable in class java.awt.
KeyboardFocusManager
The identifier for the Forward focus traversal keys.
forwardAction
- Static variable in class javax.swing.text.
DefaultEditorKit
Name of the Action for moving the caret
 logically forward one position.
forwardExecutionControl(ExecutionControl, ObjectInput, ObjectOutput)
- Static method in class jdk.jshell.execution.
Util
Forward commands from the input to the specified
ExecutionControl
instance, then responses back on the output.
forwardExecutionControlAndIO(ExecutionControl, InputStream, OutputStream, Map<String, Consumer<OutputStream>>, Map<String, Consumer<InputStream>>)
- Static method in class jdk.jshell.execution.
Util
Forward commands from the input to the specified
ExecutionControl
instance, then responses back on the output.
ForwardingFileObject<F>
- Class in
javax.tools
Forwards calls to a given file object.
ForwardingFileObject(F)
- Constructor for class javax.tools.
ForwardingFileObject
Creates a new instance of
ForwardingFileObject
.
ForwardingJavaFileManager<M>
- Class in
javax.tools
Forwards calls to a given file manager.
ForwardingJavaFileManager(M)
- Constructor for class javax.tools.
ForwardingJavaFileManager
Creates a new instance of
ForwardingJavaFileManager
.
ForwardingJavaFileObject<F>
- Class in
javax.tools
Forwards calls to a given file object.
ForwardingJavaFileObject(F)
- Constructor for class javax.tools.
ForwardingJavaFileObject
Creates a new instance of
ForwardingJavaFileObject
.
forwardUpdate(DocumentEvent.ElementChange, DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.
BoxView
Forwards the given
DocumentEvent
to the child views
 that need to be notified of the change to the model.
forwardUpdate(DocumentEvent.ElementChange, DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.
View
Forwards the given
DocumentEvent
to the child views
 that need to be notified of the change to the model.
forwardUpdateToView(View, DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.
View
Forwards the
DocumentEvent
to the give child view.
foundType()
- Method in exception class java.lang.annotation.
AnnotationTypeMismatchException
Returns the type of data found in the incorrectly typed element.
FRACTION
- Static variable in class java.text.
NumberFormat.Field
Constant identifying the fraction field.
FRACTION_FIELD
- Static variable in class java.text.
NumberFormat
Field constant used to construct a FieldPosition object.
fragmentHtmlFlavor
- Static variable in class java.awt.datatransfer.
DataFlavor
Represents a piece of an HTML markup.
fragments()
- Method in interface java.lang.
StringTemplate
PREVIEW
Returns a list of fragment literals for this
StringTemplate
PREVIEW
.
frame
- Variable in class javax.swing.plaf.basic.
BasicDesktopIconUI
The instance of
JInternalFrame
.
frame
- Variable in class javax.swing.plaf.basic.
BasicInternalFrameTitlePane
The instance of
JInternalFrame
.
frame
- Variable in class javax.swing.plaf.basic.
BasicInternalFrameUI
frame
frame(int)
- Method in interface com.sun.jdi.
ThreadReference
Returns the
StackFrame
at the given index in the
 thread's current call stack.
Frame
- Class in
java.awt
A
Frame
is a top-level window with a title and a border.
Frame()
- Constructor for class java.awt.
Frame
Constructs a new instance of
Frame
that is
 initially invisible.
Frame(GraphicsConfiguration)
- Constructor for class java.awt.
Frame
Constructs a new, initially invisible
Frame
with the
 specified
GraphicsConfiguration
.
Frame(String)
- Constructor for class java.awt.
Frame
Constructs a new, initially invisible
Frame
object
 with the specified title.
Frame(String, GraphicsConfiguration)
- Constructor for class java.awt.
Frame
Constructs a new, initially invisible
Frame
object
 with the specified title and a
GraphicsConfiguration
.
FRAME
- Static variable in class javax.accessibility.
AccessibleRole
A top level window with a title bar, border, menu bar, etc.
FRAME
- Static variable in class javax.swing.
JRootPane
Constant used for the windowDecorationStyle property.
FRAME
- Static variable in class javax.swing.text.html.
HTML.Tag
Tag <frame>
FRAME_CONTENT_LAYER
- Static variable in class javax.swing.
JLayeredPane
Convenience object defining the Frame Content layer.
FRAME_ICON_PROPERTY
- Static variable in class javax.swing.
JInternalFrame
Bound property name.
Frame.AccessibleAWTFrame
- Class in
java.awt
This class implements accessibility support for the
Frame
class.
FRAMEBITS
- Static variable in interface java.awt.image.
ImageObserver
This flag in the infoflags argument to imageUpdate indicates that
 another complete frame of a multi-frame image which was previously
 drawn is now available to be drawn again.
FRAMEBORDER
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "frameborder"
frameCount()
- Method in interface com.sun.jdi.
ThreadReference
Returns the number of stack frames in the thread's current
 call stack.
frameIcon
- Variable in class javax.swing.
JInternalFrame
The icon shown in the top-left corner of this internal frame.
frameInit()
- Method in class javax.swing.
JFrame
Called by the constructors to init the
JFrame
properly.
frameLength
- Variable in class javax.sound.sampled.
AudioInputStream
This stream's length, in sample frames.
FrameListener()
- Constructor for class javax.swing.plaf.basic.
BasicToolBarUI.FrameListener
Constructs a
FrameListener
.
framePos
- Variable in class javax.sound.sampled.
AudioInputStream
The current position in this stream, in sample frames (zero-based).
frameRate
- Variable in class javax.sound.sampled.
AudioFormat
The number of frames played or recorded per second, for sounds that have
 this format.
frames()
- Method in interface com.sun.jdi.
ThreadReference
Returns a List containing each
StackFrame
in the
 thread's current call stack.
frames(int, int)
- Method in interface com.sun.jdi.
ThreadReference
Returns a List containing a range of
StackFrame
mirrors
 from the thread's current call stack.
FRAMESET
- Static variable in class javax.swing.text.html.
HTML.Tag
Tag <frameset>
frameSize
- Variable in class javax.sound.sampled.
AudioFormat
The number of bytes in each frame of a sound that has this format.
frameSize
- Variable in class javax.sound.sampled.
AudioInputStream
The size of each frame, in bytes.
FRANCE
- Static variable in class java.util.
Locale
Useful constant for country.
free()
- Method in interface java.sql.
Array
This method frees the
Array
object and releases the resources that
 it holds.
free()
- Method in interface java.sql.
Blob
This method frees the
Blob
object and releases the resources that
 it holds.
free()
- Method in interface java.sql.
Clob
This method releases the resources that the
Clob
object
 holds.
free()
- Method in interface java.sql.
SQLXML
This method closes this object and releases the resources that it held.
free()
- Method in class javax.sql.rowset.serial.
SerialArray
This method frees the
SerialArray
object and releases the
 resources that it holds.
free()
- Method in class javax.sql.rowset.serial.
SerialBlob
This method frees the
SerialBlob
object and releases the
 resources that it holds.
free()
- Method in class javax.sql.rowset.serial.
SerialClob
This method frees the
SerialClob
object and releases the
 resources that it holds.
FREE_STANDING_PROP
- Static variable in class javax.swing.plaf.metal.
MetalScrollBarUI
The property
JScrollBar.isFreeStanding
.
freeMemory()
- Method in class java.lang.
Runtime
Returns the amount of free memory in the Java Virtual Machine.
FRENCH
- Static variable in class java.util.
Locale
Useful constant for language.
frequency(Collection<?>, Object)
- Static method in class java.util.
Collections
Returns the number of elements in the specified collection equal to the
 specified object.
Frequency
- Annotation Interface in
jdk.jfr
Event field annotation, specifies that the value is a frequency, measured in Hz.
FRIDAY
- Enum constant in enum class java.time.
DayOfWeek
The singleton instance for the day-of-week of Friday.
FRIDAY
- Static variable in class java.util.
Calendar
Value of the
Calendar.DAY_OF_WEEK
field indicating
 Friday.
from(long, TimeUnit)
- Static method in class java.nio.file.attribute.
FileTime
Returns a
FileTime
representing a value at the given unit of
 granularity.
from(File)
- Static method in class java.lang.
ProcessBuilder.Redirect
Returns a redirect to read from the specified file.
from(Instant)
- Static method in class java.nio.file.attribute.
FileTime
Returns a
FileTime
representing the same point of time value
 on the time-line as the provided
Instant
object.
from(Instant)
- Static method in class java.sql.
Timestamp
Obtains an instance of
Timestamp
from an
Instant
object.
from(Instant)
- Static method in class java.util.
Date
Obtains an instance of
Date
from an
Instant
object.
from(TemporalAccessor)
- Static method in interface java.time.chrono.
ChronoLocalDate
Obtains an instance of
ChronoLocalDate
from a temporal object.
from(TemporalAccessor)
- Static method in interface java.time.chrono.
ChronoLocalDateTime
Obtains an instance of
ChronoLocalDateTime
from a temporal object.
from(TemporalAccessor)
- Static method in interface java.time.chrono.
Chronology
Obtains an instance of
Chronology
from a temporal object.
from(TemporalAccessor)
- Static method in interface java.time.chrono.
ChronoZonedDateTime
Obtains an instance of
ChronoZonedDateTime
from a temporal object.
from(TemporalAccessor)
- Static method in class java.time.chrono.
HijrahDate
Obtains a
HijrahDate
of the Islamic Umm Al-Qura calendar from a temporal object.
from(TemporalAccessor)
- Static method in class java.time.chrono.
JapaneseDate
Obtains a
JapaneseDate
from a temporal object.
from(TemporalAccessor)
- Static method in class java.time.chrono.
MinguoDate
Obtains a
MinguoDate
from a temporal object.
from(TemporalAccessor)
- Static method in class java.time.chrono.
ThaiBuddhistDate
Obtains a
ThaiBuddhistDate
from a temporal object.
from(TemporalAccessor)
- Static method in enum class java.time.
DayOfWeek
Obtains an instance of
DayOfWeek
from a temporal object.
from(TemporalAccessor)
- Static method in class java.time.
Instant
Obtains an instance of
Instant
from a temporal object.
from(TemporalAccessor)
- Static method in class java.time.
LocalDate
Obtains an instance of
LocalDate
from a temporal object.
from(TemporalAccessor)
- Static method in class java.time.
LocalDateTime
Obtains an instance of
LocalDateTime
from a temporal object.
from(TemporalAccessor)
- Static method in class java.time.
LocalTime
Obtains an instance of
LocalTime
from a temporal object.
from(TemporalAccessor)
- Static method in enum class java.time.
Month
Obtains an instance of
Month
from a temporal object.
from(TemporalAccessor)
- Static method in class java.time.
MonthDay
Obtains an instance of
MonthDay
from a temporal object.
from(TemporalAccessor)
- Static method in class java.time.
OffsetDateTime
Obtains an instance of
OffsetDateTime
from a temporal object.
from(TemporalAccessor)
- Static method in class java.time.
OffsetTime
Obtains an instance of
OffsetTime
from a temporal object.
from(TemporalAccessor)
- Static method in class java.time.
Year
Obtains an instance of
Year
from a temporal object.
from(TemporalAccessor)
- Static method in class java.time.
YearMonth
Obtains an instance of
YearMonth
from a temporal object.
from(TemporalAccessor)
- Static method in class java.time.
ZonedDateTime
Obtains an instance of
ZonedDateTime
from a temporal object.
from(TemporalAccessor)
- Static method in class java.time.
ZoneId
Obtains an instance of
ZoneId
from a temporal object.
from(TemporalAccessor)
- Static method in class java.time.
ZoneOffset
Obtains an instance of
ZoneOffset
from a temporal object.
from(TemporalAmount)
- Static method in class java.time.
Duration
Obtains an instance of
Duration
from a temporal amount.
from(TemporalAmount)
- Static method in class java.time.
Period
Obtains an instance of
Period
from a temporal amount.
from(ZonedDateTime)
- Static method in class java.util.
GregorianCalendar
Obtains an instance of
GregorianCalendar
with the default locale
 from a
ZonedDateTime
object.
from(RandomGenerator)
- Static method in class java.util.
Random
Returns an instance of
Random
that delegates method calls to the
RandomGenerator
argument.
from(CompositeData)
- Static method in class com.sun.management.
GarbageCollectionNotificationInfo
Returns a
GarbageCollectionNotificationInfo
object represented by the
 given
CompositeData
.
from(CompositeData)
- Static method in class com.sun.management.
GcInfo
Returns a
GcInfo
object represented by the
 given
CompositeData
.
from(CompositeData)
- Static method in class com.sun.management.
VMOption
Returns a
VMOption
object represented by the
 given
CompositeData
.
from(CompositeData)
- Static method in class java.lang.management.
LockInfo
Returns a
LockInfo
object represented by the
 given
CompositeData
.
from(CompositeData)
- Static method in class java.lang.management.
MemoryNotificationInfo
Returns a
MemoryNotificationInfo
object represented by the
 given
CompositeData
.
from(CompositeData)
- Static method in class java.lang.management.
MemoryUsage
Returns a
MemoryUsage
object represented by the
 given
CompositeData
.
from(CompositeData)
- Static method in class java.lang.management.
MonitorInfo
Returns a
MonitorInfo
object represented by the
 given
CompositeData
.
from(CompositeData)
- Static method in class java.lang.management.
ThreadInfo
Returns a
ThreadInfo
object represented by the
 given
CompositeData
.
from(CompositeData)
- Static method in class jdk.management.jfr.
ConfigurationInfo
Returns a
ConfigurationInfo
object represented by the specified
CompositeData
.
from(CompositeData)
- Static method in class jdk.management.jfr.
EventTypeInfo
Returns an
EventType
represented by the specified
CompositeData
from(CompositeData)
- Static method in class jdk.management.jfr.
RecordingInfo
Returns a
RecordingInfo
represented by the specified
CompositeData
object.
from(CompositeData)
- Static method in class jdk.management.jfr.
SettingDescriptorInfo
Returns an
SettingDescriptorInfo
represented by the specified
CompositeData
fromArray(Object, int)
- Method in interface jdk.incubator.vector.
VectorSpecies
Returns a vector of this species
 where lane elements are initialized
 from the given array at the given offset.
fromArray(VectorSpecies<E>, boolean[], int)
- Static method in class jdk.incubator.vector.
VectorMask
Loads a mask from a
boolean
array starting at an offset.
fromArray(VectorSpecies<E>, int[], int)
- Static method in class jdk.incubator.vector.
VectorShuffle
Creates a shuffle for a given species from
 an
int
array starting at an offset.
fromArray(VectorSpecies<Byte>, byte[], int)
- Static method in class jdk.incubator.vector.
ByteVector
Loads a vector from an array of type
byte[]
starting at an offset.
fromArray(VectorSpecies<Byte>, byte[], int, int[], int)
- Static method in class jdk.incubator.vector.
ByteVector
Gathers a new vector composed of elements from an array of type
byte[]
,
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
fromArray(VectorSpecies<Byte>, byte[], int, int[], int, VectorMask<Byte>)
- Static method in class jdk.incubator.vector.
ByteVector
Gathers a new vector composed of elements from an array of type
byte[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
fromArray(VectorSpecies<Byte>, byte[], int, VectorMask<Byte>)
- Static method in class jdk.incubator.vector.
ByteVector
Loads a vector from an array of type
byte[]
starting at an offset and using a mask.
fromArray(VectorSpecies<Double>, double[], int)
- Static method in class jdk.incubator.vector.
DoubleVector
Loads a vector from an array of type
double[]
starting at an offset.
fromArray(VectorSpecies<Double>, double[], int, int[], int)
- Static method in class jdk.incubator.vector.
DoubleVector
Gathers a new vector composed of elements from an array of type
double[]
,
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
fromArray(VectorSpecies<Double>, double[], int, int[], int, VectorMask<Double>)
- Static method in class jdk.incubator.vector.
DoubleVector
Gathers a new vector composed of elements from an array of type
double[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
fromArray(VectorSpecies<Double>, double[], int, VectorMask<Double>)
- Static method in class jdk.incubator.vector.
DoubleVector
Loads a vector from an array of type
double[]
starting at an offset and using a mask.
fromArray(VectorSpecies<Float>, float[], int)
- Static method in class jdk.incubator.vector.
FloatVector
Loads a vector from an array of type
float[]
starting at an offset.
fromArray(VectorSpecies<Float>, float[], int, int[], int)
- Static method in class jdk.incubator.vector.
FloatVector
Gathers a new vector composed of elements from an array of type
float[]
,
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
fromArray(VectorSpecies<Float>, float[], int, int[], int, VectorMask<Float>)
- Static method in class jdk.incubator.vector.
FloatVector
Gathers a new vector composed of elements from an array of type
float[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
fromArray(VectorSpecies<Float>, float[], int, VectorMask<Float>)
- Static method in class jdk.incubator.vector.
FloatVector
Loads a vector from an array of type
float[]
starting at an offset and using a mask.
fromArray(VectorSpecies<Integer>, int[], int)
- Static method in class jdk.incubator.vector.
IntVector
Loads a vector from an array of type
int[]
starting at an offset.
fromArray(VectorSpecies<Integer>, int[], int, int[], int)
- Static method in class jdk.incubator.vector.
IntVector
Gathers a new vector composed of elements from an array of type
int[]
,
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
fromArray(VectorSpecies<Integer>, int[], int, int[], int, VectorMask<Integer>)
- Static method in class jdk.incubator.vector.
IntVector
Gathers a new vector composed of elements from an array of type
int[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
fromArray(VectorSpecies<Integer>, int[], int, VectorMask<Integer>)
- Static method in class jdk.incubator.vector.
IntVector
Loads a vector from an array of type
int[]
starting at an offset and using a mask.
fromArray(VectorSpecies<Long>, long[], int)
- Static method in class jdk.incubator.vector.
LongVector
Loads a vector from an array of type
long[]
starting at an offset.
fromArray(VectorSpecies<Long>, long[], int, int[], int)
- Static method in class jdk.incubator.vector.
LongVector
Gathers a new vector composed of elements from an array of type
long[]
,
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
fromArray(VectorSpecies<Long>, long[], int, int[], int, VectorMask<Long>)
- Static method in class jdk.incubator.vector.
LongVector
Gathers a new vector composed of elements from an array of type
long[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
fromArray(VectorSpecies<Long>, long[], int, VectorMask<Long>)
- Static method in class jdk.incubator.vector.
LongVector
Loads a vector from an array of type
long[]
starting at an offset and using a mask.
fromArray(VectorSpecies<Short>, short[], int)
- Static method in class jdk.incubator.vector.
ShortVector
Loads a vector from an array of type
short[]
starting at an offset.
fromArray(VectorSpecies<Short>, short[], int, int[], int)
- Static method in class jdk.incubator.vector.
ShortVector
Gathers a new vector composed of elements from an array of type
short[]
,
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
fromArray(VectorSpecies<Short>, short[], int, int[], int, VectorMask<Short>)
- Static method in class jdk.incubator.vector.
ShortVector
Gathers a new vector composed of elements from an array of type
short[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
fromArray(VectorSpecies<Short>, short[], int, VectorMask<Short>)
- Static method in class jdk.incubator.vector.
ShortVector
Loads a vector from an array of type
short[]
starting at an offset and using a mask.
fromBooleanArray(VectorSpecies<Byte>, boolean[], int)
- Static method in class jdk.incubator.vector.
ByteVector
Loads a vector from an array of type
boolean[]
starting at an offset.
fromBooleanArray(VectorSpecies<Byte>, boolean[], int, int[], int)
- Static method in class jdk.incubator.vector.
ByteVector
Gathers a new vector composed of elements from an array of type
boolean[]
,
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
fromBooleanArray(VectorSpecies<Byte>, boolean[], int, int[], int, VectorMask<Byte>)
- Static method in class jdk.incubator.vector.
ByteVector
Gathers a new vector composed of elements from an array of type
boolean[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
fromBooleanArray(VectorSpecies<Byte>, boolean[], int, VectorMask<Byte>)
- Static method in class jdk.incubator.vector.
ByteVector
Loads a vector from an array of type
boolean[]
starting at an offset and using a mask.
fromCharArray(VectorSpecies<Short>, char[], int)
- Static method in class jdk.incubator.vector.
ShortVector
Loads a vector from an array of type
char[]
starting at an offset.
fromCharArray(VectorSpecies<Short>, char[], int, int[], int)
- Static method in class jdk.incubator.vector.
ShortVector
Gathers a new vector composed of elements from an array of type
char[]
,
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
fromCharArray(VectorSpecies<Short>, char[], int, int[], int, VectorMask<Short>)
- Static method in class jdk.incubator.vector.
ShortVector
Gathers a new vector composed of elements from an array of type
char[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
fromCharArray(VectorSpecies<Short>, char[], int, VectorMask<Short>)
- Static method in class jdk.incubator.vector.
ShortVector
Loads a vector from an array of type
char[]
starting at an offset and using a mask.
fromCIEXYZ(float[])
- Method in class java.awt.color.
ColorSpace
Transforms a color value assumed to be in the
CS_CIEXYZ
conversion color space into this
ColorSpace
.
fromCIEXYZ(float[])
- Method in class java.awt.color.
ICC_ColorSpace
Transforms a color value assumed to be in the
CS_CIEXYZ
conversion color space into this ColorSpace.
fromHexDigit(int)
- Static method in class java.util.
HexFormat
Returns the value for the hexadecimal character or codepoint.
fromHexDigits(CharSequence)
- Static method in class java.util.
HexFormat
Returns the
int
value parsed from a string of up to eight hexadecimal characters.
fromHexDigits(CharSequence, int, int)
- Static method in class java.util.
HexFormat
Returns the
int
value parsed from a string range of up to eight hexadecimal
 characters.
fromHexDigitsToLong(CharSequence)
- Static method in class java.util.
HexFormat
Returns the long value parsed from a string of up to sixteen hexadecimal characters.
fromHexDigitsToLong(CharSequence, int, int)
- Static method in class java.util.
HexFormat
Returns the long value parsed from a string range of up to sixteen hexadecimal
 characters.
fromIndex
- Variable in class javax.swing.event.
TableColumnModelEvent
The index of the column from where it was moved or removed
fromLineSubscriber(Flow.Subscriber<? super String>)
- Static method in class java.net.http.
HttpResponse.BodyHandlers
Returns a response body handler that returns a
BodySubscriber
<Void>
obtained from
BodySubscribers.fromLineSubscriber(subscriber, s -> null, charset, null)
,
 with the given
subscriber
.
fromLineSubscriber(Flow.Subscriber<? super String>)
- Static method in class java.net.http.
HttpResponse.BodySubscribers
Returns a body subscriber that forwards all response body to the
 given
Flow.Subscriber
, line by line.
fromLineSubscriber(S, Function<? super S, ? extends T>, String)
- Static method in class java.net.http.
HttpResponse.BodyHandlers
Returns a response body handler that returns a
BodySubscriber
<T>
obtained from
BodySubscribers.fromLineSubscriber(subscriber, finisher, charset, lineSeparator)
,
 with the given
subscriber
,
finisher
function, and line separator.
fromLineSubscriber(S, Function<? super S, ? extends T>, Charset, String)
- Static method in class java.net.http.
HttpResponse.BodySubscribers
Returns a body subscriber that forwards all response body to the
 given
Flow.Subscriber
, line by line.
fromLong(VectorSpecies<E>, long)
- Static method in class jdk.incubator.vector.
VectorMask
Returns a mask where each lane is set or unset according to
 the bits in the given bitmask, starting with the least
 significant bit, and continuing up to the sign bit.
fromMajor(int)
- Static method in enum class java.lang.reflect.
ClassFileFormatVersion
Returns the latest class file format version whose major class
 file version matches the argument.
fromMemorySegment(MemorySegment, long, ByteOrder)
- Method in interface jdk.incubator.vector.
VectorSpecies
Loads a vector of this species from a
memory segment
PREVIEW
starting at an offset into the memory segment.
fromMemorySegment(VectorSpecies<Byte>, MemorySegment, long, ByteOrder)
- Static method in class jdk.incubator.vector.
ByteVector
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment.
fromMemorySegment(VectorSpecies<Byte>, MemorySegment, long, ByteOrder, VectorMask<Byte>)
- Static method in class jdk.incubator.vector.
ByteVector
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment
 and using a mask.
fromMemorySegment(VectorSpecies<Double>, MemorySegment, long, ByteOrder)
- Static method in class jdk.incubator.vector.
DoubleVector
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment.
fromMemorySegment(VectorSpecies<Double>, MemorySegment, long, ByteOrder, VectorMask<Double>)
- Static method in class jdk.incubator.vector.
DoubleVector
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment
 and using a mask.
fromMemorySegment(VectorSpecies<Float>, MemorySegment, long, ByteOrder)
- Static method in class jdk.incubator.vector.
FloatVector
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment.
fromMemorySegment(VectorSpecies<Float>, MemorySegment, long, ByteOrder, VectorMask<Float>)
- Static method in class jdk.incubator.vector.
FloatVector
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment
 and using a mask.
fromMemorySegment(VectorSpecies<Integer>, MemorySegment, long, ByteOrder)
- Static method in class jdk.incubator.vector.
IntVector
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment.
fromMemorySegment(VectorSpecies<Integer>, MemorySegment, long, ByteOrder, VectorMask<Integer>)
- Static method in class jdk.incubator.vector.
IntVector
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment
 and using a mask.
fromMemorySegment(VectorSpecies<Long>, MemorySegment, long, ByteOrder)
- Static method in class jdk.incubator.vector.
LongVector
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment.
fromMemorySegment(VectorSpecies<Long>, MemorySegment, long, ByteOrder, VectorMask<Long>)
- Static method in class jdk.incubator.vector.
LongVector
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment
 and using a mask.
fromMemorySegment(VectorSpecies<Short>, MemorySegment, long, ByteOrder)
- Static method in class jdk.incubator.vector.
ShortVector
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment.
fromMemorySegment(VectorSpecies<Short>, MemorySegment, long, ByteOrder, VectorMask<Short>)
- Static method in class jdk.incubator.vector.
ShortVector
Loads a vector from a
memory segment
PREVIEW
starting at an offset into the memory segment
 and using a mask.
fromMethodDescriptorString(String, ClassLoader)
- Static method in class java.lang.invoke.
MethodType
Finds or creates an instance of a method type of the given method descriptor
 (JVMS
4.3.3
).
fromMillis(long)
- Static method in class java.nio.file.attribute.
FileTime
Returns a
FileTime
representing the given value in milliseconds.
fromOp(VectorSpecies<E>, IntUnaryOperator)
- Static method in class jdk.incubator.vector.
VectorShuffle
Creates a shuffle for a given species from
 the successive values of an operator applied to
 the range
[0..VLENGTH-1]
.
fromPublisher(Flow.Publisher<? extends ByteBuffer>)
- Static method in class java.net.http.
HttpRequest.BodyPublishers
Returns a request body publisher whose body is retrieved from the
 given
Flow.Publisher
.
fromPublisher(Flow.Publisher<? extends ByteBuffer>, long)
- Static method in class java.net.http.
HttpRequest.BodyPublishers
Returns a request body publisher whose body is retrieved from the
 given
Flow.Publisher
.
fromRGB(float[])
- Method in class java.awt.color.
ColorSpace
Transforms a color value assumed to be in the default
CS_sRGB
color space into this
ColorSpace
.
fromRGB(float[])
- Method in class java.awt.color.
ICC_ColorSpace
Transforms a color value assumed to be in the default
CS_sRGB
color space into this
ColorSpace
.
fromString(String)
- Static method in class java.nio.file.attribute.
PosixFilePermissions
Returns the set of permissions corresponding to a given
String
representation.
fromString(String)
- Static method in class java.util.
UUID
Creates a
UUID
from the string standard representation as
 described in the
UUID.toString()
method.
fromSubscriber(Flow.Subscriber<? super List<ByteBuffer>>)
- Static method in class java.net.http.
HttpResponse.BodyHandlers
Returns a response body handler that returns a
BodySubscriber
<Void>
obtained from
HttpResponse.BodySubscribers.fromSubscriber(Subscriber)
, with the given
subscriber
.
fromSubscriber(Flow.Subscriber<? super List<ByteBuffer>>)
- Static method in class java.net.http.
HttpResponse.BodySubscribers
Returns a body subscriber that forwards all response body to the
 given
Flow.Subscriber
.
fromSubscriber(S, Function<? super S, ? extends T>)
- Static method in class java.net.http.
HttpResponse.BodyHandlers
Returns a response body handler that returns a
BodySubscriber
<T>
obtained from
HttpResponse.BodySubscribers.fromSubscriber(Subscriber, Function)
, with the
 given
subscriber
and
finisher
function.
fromSubscriber(S, Function<? super S, ? extends T>)
- Static method in class java.net.http.
HttpResponse.BodySubscribers
Returns a body subscriber that forwards all response body to the
 given
Flow.Subscriber
.
fromValues(VectorSpecies<E>, boolean...)
- Static method in class jdk.incubator.vector.
VectorMask
Returns a mask where each lane is set or unset according to given
boolean
values.
fromValues(VectorSpecies<E>, int...)
- Static method in class jdk.incubator.vector.
VectorShuffle
Creates a shuffle for a given species from
 a series of source indexes.
FTP
- Static variable in class javax.print.attribute.standard.
ReferenceUriSchemesSupported
File Transfer Protocol (FTP).
ftp.nonProxyHosts
- Search tag in package java.net
System Property
ftp.proxyHost
- Search tag in package java.net
System Property
ftp.proxyPort
- Search tag in package java.net
System Property
FULL
- Enum constant in enum class java.time.format.
FormatStyle
Full text style, with the most detail.
FULL
- Enum constant in enum class java.time.format.
TextStyle
Full text, typically the full description.
FULL
- Static variable in class java.text.
DateFormat
Constant for full style pattern.
FULL_DECOMPOSITION
- Static variable in class java.text.
Collator
Decomposition mode value.
FULL_FLUSH
- Static variable in class java.util.zip.
Deflater
Compression flush mode used to flush out all pending output and
 reset the deflater.
FULL_JOIN
- Static variable in interface javax.sql.rowset.
JoinRowSet
An ANSI-style
JOIN
providing a full JOIN.
FULL_STANDALONE
- Enum constant in enum class java.time.format.
TextStyle
Full text for stand-alone use, typically the full description.
fullClassName()
- Method in interface jdk.jshell.
SourceCodeAnalysis.SnippetWrapper
Returns the fully qualified class name of the
SourceCodeAnalysis.SnippetWrapper.wrapped()
class.
fullFence()
- Static method in class java.lang.invoke.
VarHandle
Ensures that loads and stores before the fence will not be reordered
 with
 loads and stores after the fence.
fullname()
- Method in class jdk.jshell.
ImportSnippet
The qualified name of the import.
FULLWIDTH_DIGITS
- Static variable in class java.awt.im.
InputSubset
Constant for the fullwidth digits included in the Unicode halfwidth and
 fullwidth forms character block.
FULLWIDTH_LATIN
- Static variable in class java.awt.im.
InputSubset
Constant for the fullwidth ASCII variants subset of the Unicode halfwidth and
 fullwidth forms character block.
Function<T,
R>
- Interface in
java.util.function
Represents a function that accepts one argument and produces a result.
FunctionalInterface
- Annotation Interface in
java.lang
An informative annotation type used to indicate that an interface
 type declaration is intended to be a
functional interface
as
 defined by the Java Language Specification.
functionColumnIn
- Static variable in interface java.sql.
DatabaseMetaData
Indicates that the parameter or column is an IN parameter.
functionColumnInOut
- Static variable in interface java.sql.
DatabaseMetaData
Indicates that the parameter or column is an INOUT parameter.
functionColumnOut
- Static variable in interface java.sql.
DatabaseMetaData
Indicates that the parameter or column is an OUT parameter.
functionColumnResult
- Static variable in interface java.sql.
DatabaseMetaData
Indicates that the parameter or column is a column in a result set.
functionColumnUnknown
- Static variable in interface java.sql.
DatabaseMetaData
Indicates that type of the parameter or column is unknown.
FunctionDescriptor
PREVIEW
- Interface in
java.lang.foreign
A function descriptor models the signature of a foreign function.
functionNoNulls
- Static variable in interface java.sql.
DatabaseMetaData
Indicates that
NULL
values are not allowed.
functionNoTable
- Static variable in interface java.sql.
DatabaseMetaData
Indicates that the function  does not return a table.
functionNullable
- Static variable in interface java.sql.
DatabaseMetaData
Indicates that
NULL
values are allowed.
functionNullableUnknown
- Static variable in interface java.sql.
DatabaseMetaData
Indicates that whether
NULL
values are allowed
 is unknown.
Function pointers
- Search tag in interface java.lang.foreign.Linker
Section
functionResultUnknown
- Static variable in interface java.sql.
DatabaseMetaData
Indicates that it is not known whether the function returns
 a result or a table.
functionReturn
- Static variable in interface java.sql.
DatabaseMetaData
Indicates that the parameter or column is a return value.
functionReturnsTable
- Static variable in interface java.sql.
DatabaseMetaData
Indicates that the function  returns a table.
Functions returning pointers
- Search tag in interface java.lang.foreign.Linker
Section
FUSER_OVER_TEMP
- Static variable in class javax.print.attribute.standard.
PrinterStateReason
The fuser temperature is above normal.
FUSER_UNDER_TEMP
- Static variable in class javax.print.attribute.standard.
PrinterStateReason
The fuser temperature is below normal.
Future<V>
- Interface in
java.util.concurrent
A
Future
represents the result of an asynchronous
 computation.
Future.State
- Enum Class in
java.util.concurrent
Represents the computation state.
FutureTask<V>
- Class in
java.util.concurrent
A cancellable asynchronous computation.
FutureTask(Runnable, V)
- Constructor for class java.util.concurrent.
FutureTask
Creates a
FutureTask
that will, upon running, execute the
 given
Runnable
, and arrange that
get
will return the
 given result on successful completion.
FutureTask(Callable<V>)
- Constructor for class java.util.concurrent.
FutureTask
Creates a
FutureTask
that will, upon running, execute the
 given
Callable
.
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
_
All Classes and Interfaces
|
All Packages
|
Constant Field Values
|
Serialized Form
|
System Properties
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.