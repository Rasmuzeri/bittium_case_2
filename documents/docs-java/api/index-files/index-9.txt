I-Index (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Index
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
_
All Classes and Interfaces
|
All Packages
|
Constant Field Values
|
Serialized Form
|
System Properties
I
2.0 Implementation Guidelines
- Search tag in interface javax.sql.rowset.Predicate
Section
2. Indirect access to an MXBean interface via MBeanServer
- Search tag in class java.lang.management.ManagementFactory
Section
3.0 Implementer's Guide
- Search tag in package javax.sql.rowset
Section
I
- Static variable in class javax.swing.text.html.
HTML.Tag
Tag <i>
I2B
- Static variable in class jdk.incubator.vector.
VectorOperators
Convert
intVal
to
(byte)intVal
.
I2D
- Static variable in class jdk.incubator.vector.
VectorOperators
Convert
intVal
to
(double)intVal
.
I2F
- Static variable in class jdk.incubator.vector.
VectorOperators
Convert
intVal
to
(float)intVal
.
I2L
- Static variable in class jdk.incubator.vector.
VectorOperators
Convert
intVal
to
(long)intVal
.
I2S
- Static variable in class jdk.incubator.vector.
VectorOperators
Convert
intVal
to
(short)intVal
.
icAbsoluteColorimetric
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Rendering Intent: AbsoluteColorimetric.
ICC_ColorSpace
- Class in
java.awt.color
The
ICC_ColorSpace
class is an implementation of the abstract
ColorSpace
class.
ICC_ColorSpace(ICC_Profile)
- Constructor for class java.awt.color.
ICC_ColorSpace
Constructs a new
ICC_ColorSpace
from an
ICC_Profile
object.
ICC_Profile
- Class in
java.awt.color
A representation of color profile data for device independent and device
 dependent color spaces based on the International Color Consortium
 Specification ICC.1:2001-12, File Format for Color Profiles, (see
http://www.color.org
).
ICC_ProfileGray
- Class in
java.awt.color
The
ICC_ProfileGray
class is a subclass of the
ICC_Profile
class that represents profiles which meet the following criteria: the color
 space type of the profile is
TYPE_GRAY
and the profile includes the
grayTRCTag
and
mediaWhitePointTag
tags.
ICC_ProfileRGB
- Class in
java.awt.color
The
ICC_ProfileRGB
class is a subclass of the
ICC_Profile
class that represents profiles which meet the following criteria: the
 profile's color space type is RGB, and the profile includes the
redColorantTag
,
greenColorantTag
,
blueColorantTag
,
redTRCTag
,
greenTRCTag
,
blueTRCTag
,
mediaWhitePointTag
tags.
ICC Profiles
- Search tag in package javax.imageio.metadata
Section
ICC Profiles
- Search tag in package javax.imageio.metadata
Section
icCurveCount
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Constant: curveType count.
icCurveData
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Constant: curveType data.
icHdrAttributes
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Header Location: device attributes.
icHdrCmmId
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Header Location: CMM for this profile.
icHdrColorSpace
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Header Location: color space of data.
icHdrCreator
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Header Location: profile creator.
icHdrDate
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Header Location: date profile was created.
icHdrDeviceClass
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Header Location: type of profile.
icHdrFlags
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Header Location: various bit settings.
icHdrIlluminant
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Header Location: profile illuminant.
icHdrMagic
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Header Location: icMagicNumber.
icHdrManufacturer
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Header Location: device manufacturer.
icHdrModel
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Header Location: device model number.
icHdrPcs
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Header Location: PCS - XYZ or Lab only.
icHdrPlatform
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Header Location: primary platform.
icHdrProfileID
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Header Location: profile's ID.
icHdrRenderingIntent
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Header Location: rendering intent.
icHdrSize
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Header Location: profile size in bytes.
icHdrVersion
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Header Location: format version number.
icICCAbsoluteColorimetric
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Rendering Intent: ICC-AbsoluteColorimetric.
icMediaRelativeColorimetric
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Rendering Intent: Media-RelativeColorimetric.
icon
- Variable in class javax.swing.
JOptionPane
Icon used in pane.
icon
- Variable in class javax.swing.plaf.basic.
BasicRadioButtonUI
The icon.
Icon
- Interface in
javax.swing
A small fixed size picture, typically used to decorate components.
ICON
- Static variable in class javax.accessibility.
AccessibleRole
A small fixed size picture, typically used to decorate components.
ICON_BADGE_IMAGE_WINDOW
- Enum constant in enum class java.awt.
Taskbar.Feature
Represents a graphical icon badge feature for a window.
ICON_BADGE_NUMBER
- Enum constant in enum class java.awt.
Taskbar.Feature
Represents a numerical icon badge feature.
ICON_BADGE_TEXT
- Enum constant in enum class java.awt.
Taskbar.Feature
Represents a textual icon badge feature.
ICON_CHANGED_PROPERTY
- Static variable in class javax.swing.
AbstractButton
Identifies a change to the icon that represents the button.
ICON_COLOR_16x16
- Static variable in interface java.beans.
BeanInfo
Constant to indicate a 16 x 16 color icon.
ICON_COLOR_32x32
- Static variable in interface java.beans.
BeanInfo
Constant to indicate a 32 x 32 color icon.
ICON_IMAGE
- Enum constant in enum class java.awt.
Taskbar.Feature
Represents an icon feature.
ICON_MONO_16x16
- Static variable in interface java.beans.
BeanInfo
Constant to indicate a 16 x 16 monochrome icon.
ICON_MONO_32x32
- Static variable in interface java.beans.
BeanInfo
Constant to indicate a 32 x 32 monochrome icon.
ICON_PROPERTY
- Static variable in class javax.swing.
JOptionPane
Bound property name for
icon
.
iconable
- Variable in class javax.swing.
JInternalFrame
The frame can "iconified" (shrunk down and displayed as
 an icon-image).
IconAttribute
- Static variable in class javax.swing.text.
StyleConstants
Name of the icon attribute.
iconButton
- Variable in class javax.swing.plaf.basic.
BasicInternalFrameTitlePane
The iconify button.
iconCache
- Variable in class javax.swing.plaf.basic.
BasicFileChooserUI.BasicFileView
The icon cache
IconElementName
- Static variable in class javax.swing.text.
StyleConstants
Name of elements used to represent icons.
iconIcon
- Variable in class javax.swing.plaf.basic.
BasicInternalFrameTitlePane
The iconify icon.
ICONIFIED
- Static variable in class java.awt.
Frame
This state bit indicates that frame is iconified.
ICONIFIED
- Static variable in class javax.accessibility.
AccessibleState
Indicates this object is minimized and is represented only by an icon.
ICONIFY_CMD
- Static variable in class javax.swing.plaf.basic.
BasicInternalFrameTitlePane
The minimize button text property.
iconifyAction
- Variable in class javax.swing.plaf.basic.
BasicInternalFrameTitlePane
The instance of an
IconifyAction
.
IconifyAction()
- Constructor for class javax.swing.plaf.basic.
BasicInternalFrameTitlePane.IconifyAction
Constructs a new instance of an
IconifyAction
.
iconifyFrame(JInternalFrame)
- Method in class javax.swing.
DefaultDesktopManager
Removes the frame from its parent and adds its
desktopIcon
to the parent.
iconifyFrame(JInternalFrame)
- Method in interface javax.swing.
DesktopManager
Generally, remove this frame from its parent and add an iconic representation.
iconifyFrame(JInternalFrame)
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI
This method is called when the user wants to iconify the frame.
iconOnly
- Variable in class javax.swing.plaf.metal.
MetalComboBoxButton
The
iconOnly
value.
iconPane
- Variable in class javax.swing.plaf.basic.
BasicDesktopIconUI
The title pane component used in the desktop icon.
IconUIResource
- Class in
javax.swing.plaf
An Icon wrapper class which implements UIResource.
IconUIResource(Icon)
- Constructor for class javax.swing.plaf.
IconUIResource
Creates a UIResource icon object which wraps
 an existing Icon instance.
IconView
- Class in
javax.swing.text
Icon decorator that implements the view interface.
IconView(Element)
- Constructor for class javax.swing.text.
IconView
Creates a new icon view that represents an element.
icPerceptual
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Rendering Intent: Perceptual.
icRelativeColorimetric
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Rendering Intent: RelativeColorimetric.
icSaturation
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Rendering Intent: Saturation.
icSigAbstractClass
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Class Signature: 'abst'.
icSigAToB0Tag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'A2B0'.
icSigAToB1Tag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'A2B1'.
icSigAToB2Tag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'A2B2'.
icSigBlueColorantTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'bXYZ'.
icSigBlueMatrixColumnTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'bXYZ'.
icSigBlueTRCTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'bTRC'.
icSigBToA0Tag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'B2A0'.
icSigBToA1Tag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'B2A1'.
icSigBToA2Tag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'B2A2'.
icSigCalibrationDateTimeTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'calt'.
icSigCharTargetTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'targ'.
icSigChromaticAdaptationTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'chad'.
icSigChromaticityTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'chrm'.
icSigCmyData
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Color Space Type Signature: 'CMY '.
icSigCmykData
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Color Space Type Signature: 'CMYK'.
icSigColorantOrderTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'clro'.
icSigColorantTableTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'clrt'.
icSigColorSpaceClass
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Class Signature: 'spac'.
icSigCopyrightTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'cprt'.
icSigCrdInfoTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'crdi'.
icSigDeviceMfgDescTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'dmnd'.
icSigDeviceModelDescTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'dmdd'.
icSigDeviceSettingsTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'devs'.
icSigDisplayClass
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Class Signature: 'mntr'.
icSigGamutTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'gamt'.
icSigGrayData
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Color Space Type Signature: 'GRAY'.
icSigGrayTRCTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'kTRC'.
icSigGreenColorantTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'gXYZ'.
icSigGreenMatrixColumnTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'gXYZ'.
icSigGreenTRCTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'gTRC'.
icSigHead
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'head' - special.
icSigHlsData
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Color Space Type Signature: 'HLS'.
icSigHsvData
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Color Space Type Signature: 'HSV'.
icSigInputClass
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Class Signature: 'scnr'.
icSigLabData
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Color Space Type Signature: 'Lab '.
icSigLinkClass
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Class Signature: 'link'.
icSigLuminanceTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'lumi'.
icSigLuvData
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Color Space Type Signature: 'Luv '.
icSigMeasurementTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'meas'.
icSigMediaBlackPointTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'bkpt'.
icSigMediaWhitePointTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'wtpt'.
icSigNamedColor2Tag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'ncl2'.
icSigNamedColorClass
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Class Signature: 'nmcl'.
icSigOutputClass
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Class Signature: 'prtr'.
icSigOutputResponseTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'resp'.
icSigPreview0Tag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'pre0'.
icSigPreview1Tag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'pre1'.
icSigPreview2Tag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'pre2'.
icSigProfileDescriptionTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'desc'.
icSigProfileSequenceDescTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'pseq'.
icSigPs2CRD0Tag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'psd0'.
icSigPs2CRD1Tag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'psd1'.
icSigPs2CRD2Tag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'psd2'.
icSigPs2CRD3Tag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'psd3'.
icSigPs2CSATag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'ps2s'.
icSigPs2RenderingIntentTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'ps2i'.
icSigRedColorantTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'rXYZ'.
icSigRedMatrixColumnTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'rXYZ'.
icSigRedTRCTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'rTRC'.
icSigRgbData
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Color Space Type Signature: 'RGB '.
icSigScreeningDescTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'scrd'.
icSigScreeningTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'scrn'.
icSigSpace2CLR
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Color Space Type Signature: '2CLR'.
icSigSpace3CLR
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Color Space Type Signature: '3CLR'.
icSigSpace4CLR
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Color Space Type Signature: '4CLR'.
icSigSpace5CLR
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Color Space Type Signature: '5CLR'.
icSigSpace6CLR
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Color Space Type Signature: '6CLR'.
icSigSpace7CLR
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Color Space Type Signature: '7CLR'.
icSigSpace8CLR
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Color Space Type Signature: '8CLR'.
icSigSpace9CLR
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Color Space Type Signature: '9CLR'.
icSigSpaceACLR
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Color Space Type Signature: 'ACLR'.
icSigSpaceBCLR
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Color Space Type Signature: 'BCLR'.
icSigSpaceCCLR
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Color Space Type Signature: 'CCLR'.
icSigSpaceDCLR
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Color Space Type Signature: 'DCLR'.
icSigSpaceECLR
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Color Space Type Signature: 'ECLR'.
icSigSpaceFCLR
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Color Space Type Signature: 'FCLR'.
icSigTechnologyTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'tech'.
icSigUcrBgTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'bfd '.
icSigViewingCondDescTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'vued'.
icSigViewingConditionsTag
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Tag Signature: 'view'.
icSigXYZData
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Color Space Type Signature: 'XYZ '.
icSigYCbCrData
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Color Space Type Signature: 'YCbr'.
icSigYxyData
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Color Space Type Signature: 'Yxy '.
icTagReserved
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Constant: reserved.
icTagType
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Constant: tag type signature.
icXYZNumberX
- Static variable in class java.awt.color.
ICC_Profile
ICC Profile Constant: XYZNumber X.
id
- Variable in class java.awt.
AWTEvent
The event's id.
id
- Variable in class java.awt.
Event
Deprecated.
Indicates which type of event the event is, and which
 other
Event
variables are relevant for the event.
id
- Variable in class javax.naming.ldap.
BasicControl
The control's object identifier string.
id()
- Method in class com.sun.tools.attach.
VirtualMachine
Returns the identifier for this Java virtual machine.
id()
- Method in class com.sun.tools.attach.
VirtualMachineDescriptor
Return the identifier component of this descriptor.
id()
- Method in class jdk.jshell.
Snippet
The unique identifier for the snippet.
id()
- Method in exception class jdk.jshell.spi.
ExecutionControl.ResolutionException
Retrieves the internal identifier of the unresolved identifier.
id()
- Method in exception class jdk.jshell.spi.
SPIResolutionException
Retrieves the internal identifier of the unresolved identifier.
ID
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "id"
ID
- Static variable in interface javax.swing.text.html.parser.
DTDConstants
The DTD constant corresponds to ID
IDENTICAL
- Static variable in class java.text.
Collator
Collator strength value.
identifier
- Variable in class javax.swing.table.
TableColumn
This object is not used internally by the drawing machinery of
  the
JTable
; identifiers may be set in the
TableColumn
as an
  optional way to tag and locate table columns.
IDENTIFIER
- Enum constant in enum class com.sun.source.doctree.
DocTree.Kind
Used for instances of
IdentifierTree
representing an identifier.
IDENTIFIER
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
IdentifierTree
.
IdentifierTree
- Interface in
com.sun.source.doctree
An identifier in a documentation comment.
IdentifierTree
- Interface in
com.sun.source.tree
A tree node for an identifier expression.
identities()
- Method in class java.security.
IdentityScope
Deprecated.
Returns an enumeration of all identities in this identity scope.
Identities
- Search tag in class java.net.URI
Section
identity()
- Static method in interface java.util.function.
DoubleUnaryOperator
Returns a unary operator that always returns its input argument.
identity()
- Static method in interface java.util.function.
Function
Returns a function that always returns its input argument.
identity()
- Static method in interface java.util.function.
IntUnaryOperator
Returns a unary operator that always returns its input argument.
identity()
- Static method in interface java.util.function.
LongUnaryOperator
Returns a unary operator that always returns its input argument.
identity()
- Static method in interface java.util.function.
UnaryOperator
Returns a unary operator that always returns its input argument.
identity(Class<?>)
- Static method in class java.lang.invoke.
MethodHandles
Produces a method handle which returns its sole argument when invoked.
Identity
- Class in
java.security
Deprecated, for removal: This API element is subject to removal in a future version.
This class is deprecated and subject to removal in a future
     version of Java SE. It has been replaced by
java.security.KeyStore
, the
java.security.cert
package,
     and
java.security.Principal
.
Identity()
- Constructor for class java.security.
Identity
Deprecated.
Constructor for serialization only.
Identity(String)
- Constructor for class java.security.
Identity
Deprecated.
Constructs an
Identity
with the specified name and no scope.
Identity(String, IdentityScope)
- Constructor for class java.security.
Identity
Deprecated.
Constructs an
Identity
with the specified name and scope.
IDENTITY
- Static variable in class java.awt.font.
TransformAttribute
A
TransformAttribute
representing the identity transform.
IDENTITY_FINISH
- Enum constant in enum class java.util.stream.
Collector.Characteristics
Indicates that the finisher function is the identity function and
 can be elided.
identityEquals(Identity)
- Method in class java.security.
Identity
Deprecated.
Tests for equality between the specified
Identity
and this
Identity
.
identityHashCode(Object)
- Static method in class java.lang.
System
Returns the same hash code for the given object as
 would be returned by the default method hashCode(),
 whether or not the given object's class overrides
 hashCode().
IdentityHashMap<K,
V>
- Class in
java.util
This class implements the
Map
interface with a hash table, using
 reference-equality in place of object-equality when comparing keys (and
 values).
IdentityHashMap()
- Constructor for class java.util.
IdentityHashMap
Constructs a new, empty identity hash map with a default expected
 maximum size (21).
IdentityHashMap(int)
- Constructor for class java.util.
IdentityHashMap
Constructs a new, empty map with the specified expected maximum size.
IdentityHashMap(Map<? extends K, ? extends V>)
- Constructor for class java.util.
IdentityHashMap
Constructs a new identity hash map containing the keys-value mappings
 in the specified map.
IdentityScope
- Class in
java.security
Deprecated, for removal: This API element is subject to removal in a future version.
This class is deprecated and subject to removal in a future
     version of Java SE. It has been replaced by
java.security.KeyStore
, the
java.security.cert
package,
     and
java.security.Principal
.
IdentityScope()
- Constructor for class java.security.
IdentityScope
Deprecated.
This constructor is used for serialization only and should not
 be used by subclasses.
IdentityScope(String)
- Constructor for class java.security.
IdentityScope
Deprecated.
Constructs a new identity scope with the specified name.
IdentityScope(String, IdentityScope)
- Constructor for class java.security.
IdentityScope
Deprecated.
Constructs a new identity scope with the specified name and scope.
IDEOGRAPHIC_DESCRIPTION_CHARACTERS
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Ideographic Description Characters" Unicode character block.
IDEOGRAPHIC_SYMBOLS_AND_PUNCTUATION
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Ideographic Symbols and Punctuation" Unicode
 character block.
idGenerator(BiFunction<Snippet, Integer, String>)
- Method in class jdk.jshell.
JShell.Builder
Sets the generator of identifying names for Snippets.
IDLE
- Static variable in class javax.print.attribute.standard.
PrinterState
Indicates that new jobs can start processing without waiting.
IDN
- Class in
java.net
Provides methods to convert internationalized domain names (IDNs) between
 a normal Unicode representation and an ASCII Compatible Encoding (ACE) representation.
IDREF
- Static variable in interface javax.swing.text.html.parser.
DTDConstants
The DTD constant corresponds to IDREF
IDREFS
- Static variable in interface javax.swing.text.html.parser.
DTDConstants
The DTD constant corresponds to IDREFS
IEEE 754 binary16 format
- Search tag in java.lang.Float.float16ToFloat(short)
Section
IEEE 754 Recommended Operations
- Search tag in class java.lang.Math
Section
IEEE 754 Recommended Operations
- Search tag in class java.lang.StrictMath
Section
IEEEremainder(double, double)
- Static method in class java.lang.
Math
Computes the remainder operation on two arguments as prescribed
 by the IEEE 754 standard.
IEEEremainder(double, double)
- Static method in class java.lang.
StrictMath
Computes the remainder operation on two arguments as prescribed
 by the IEEE 754 standard.
IF
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
IfTree
.
ifModifiedSince
- Variable in class java.net.
URLConnection
Some protocols support skipping the fetching of the object unless
 the object has been modified more recently than a certain time.
ifPresent(Consumer<? super T>)
- Method in class java.util.
Optional
If a value is present, performs the given action with the value,
 otherwise does nothing.
ifPresent(DoubleConsumer)
- Method in class java.util.
OptionalDouble
If a value is present, performs the given action with the value,
 otherwise does nothing.
ifPresent(IntConsumer)
- Method in class java.util.
OptionalInt
If a value is present, performs the given action with the value,
 otherwise does nothing.
ifPresent(LongConsumer)
- Method in class java.util.
OptionalLong
If a value is present, performs the given action with the value,
 otherwise does nothing.
ifPresentOrElse(Consumer<? super T>, Runnable)
- Method in class java.util.
Optional
If a value is present, performs the given action with the value,
 otherwise performs the given empty-based action.
ifPresentOrElse(DoubleConsumer, Runnable)
- Method in class java.util.
OptionalDouble
If a value is present, performs the given action with the value,
 otherwise performs the given empty-based action.
ifPresentOrElse(IntConsumer, Runnable)
- Method in class java.util.
OptionalInt
If a value is present, performs the given action with the value,
 otherwise performs the given empty-based action.
ifPresentOrElse(LongConsumer, Runnable)
- Method in class java.util.
OptionalLong
If a value is present, performs the given action with the value,
 otherwise performs the given empty-based action.
If the remote MBean Server is 1.2
- Search tag in package javax.management
Section
IfTree
- Interface in
com.sun.source.tree
A tree node for an
if
statement.
ignorableWhitespace(char[], int, int)
- Method in interface org.xml.sax.
ContentHandler
Receive notification of ignorable whitespace in element content.
ignorableWhitespace(char[], int, int)
- Method in interface org.xml.sax.
DocumentHandler
Deprecated.
Receive notification of ignorable whitespace in element content.
ignorableWhitespace(char[], int, int)
- Method in class org.xml.sax.
HandlerBase
Deprecated.
Receive notification of ignorable whitespace in element content.
ignorableWhitespace(char[], int, int)
- Method in class org.xml.sax.helpers.
DefaultHandler
Receive notification of ignorable whitespace in element content.
ignorableWhitespace(char[], int, int)
- Method in class org.xml.sax.helpers.
ParserAdapter
Adapter implementation method; do not call.
ignorableWhitespace(char[], int, int)
- Method in class org.xml.sax.helpers.
XMLFilterImpl
Filter an ignorable whitespace event.
ignorableWhitespace(char[], int, int)
- Method in class org.xml.sax.helpers.
XMLReaderAdapter
Adapt a SAX2 ignorable whitespace event.
IGNORE
- Static variable in class java.nio.charset.
CodingErrorAction
Action indicating that a coding error is to be handled by dropping the
 erroneous input and resuming the coding operation.
IGNORE_ALL_BEANINFO
- Static variable in class java.beans.
Introspector
Flag to indicate to ignore all beaninfo.
IGNORE_EXTENDED_RANGES
- Enum constant in enum class java.util.
Locale.FilteringMode
Specifies basic filtering: Note that any extended language ranges
 included in the given Language Priority List are ignored.
IGNORE_IMMEDIATE_BEANINFO
- Static variable in class java.beans.
Introspector
Flag to indicate to ignore immediate beaninfo.
ignoreMetadata
- Variable in class javax.imageio.
ImageReader
true
if the current input source has been marked
 as allowing metadata to be ignored by
setInput
.
IIOByteBuffer
- Class in
javax.imageio.stream
A class representing a mutable reference to an array of bytes and
 an offset and length within that array.
IIOByteBuffer(byte[], int, int)
- Constructor for class javax.imageio.stream.
IIOByteBuffer
Constructs an
IIOByteBuffer
that references a
 given byte array, offset, and length.
IIOException
- Exception Class in
javax.imageio
An exception class used for signaling run-time failure of reading
 and writing operations.
IIOException(String)
- Constructor for exception class javax.imageio.
IIOException
Constructs an
IIOException
with a given message
String
.
IIOException(String, Throwable)
- Constructor for exception class javax.imageio.
IIOException
Constructs an
IIOException
with a given message
String
and a
Throwable
that was its
 underlying cause.
IIOImage
- Class in
javax.imageio
A simple container class to aggregate an image, a set of
 thumbnail (preview) images, and an object representing metadata
 associated with the image.
IIOImage(Raster, List<? extends BufferedImage>, IIOMetadata)
- Constructor for class javax.imageio.
IIOImage
Constructs an
IIOImage
containing a
Raster
, and thumbnails and metadata
 associated with it.
IIOImage(RenderedImage, List<? extends BufferedImage>, IIOMetadata)
- Constructor for class javax.imageio.
IIOImage
Constructs an
IIOImage
containing a
RenderedImage
, and thumbnails and metadata
 associated with it.
IIOInvalidTreeException
- Exception Class in
javax.imageio.metadata
An
IIOInvalidTreeException
is thrown when an attempt
 by an
IIOMetadata
object to parse a tree of
IIOMetadataNode
s fails.
IIOInvalidTreeException(String, Throwable, Node)
- Constructor for exception class javax.imageio.metadata.
IIOInvalidTreeException
Constructs an
IIOInvalidTreeException
with a
 message string, a reference to an exception that caused this
 exception, and a reference to the
Node
that caused
 the parsing error.
IIOInvalidTreeException(String, Node)
- Constructor for exception class javax.imageio.metadata.
IIOInvalidTreeException
Constructs an
IIOInvalidTreeException
with a
 message string and a reference to the
Node
that
 caused the parsing error.
IIOMetadata
- Class in
javax.imageio.metadata
An abstract class to be extended by objects that represent metadata
 (non-image data) associated with images and streams.
IIOMetadata()
- Constructor for class javax.imageio.metadata.
IIOMetadata
Constructs an empty
IIOMetadata
object.
IIOMetadata(boolean, String, String, String[], String[])
- Constructor for class javax.imageio.metadata.
IIOMetadata
Constructs an
IIOMetadata
object with the given
 format names and format class names, as well as a boolean
 indicating whether the standard format is supported.
IIOMetadataController
- Interface in
javax.imageio.metadata
An interface to be implemented by objects that can determine the
 settings of an
IIOMetadata
object, either by putting
 up a GUI to obtain values from a user, or by other means.
IIOMetadataFormat
- Interface in
javax.imageio.metadata
An object describing the structure of metadata documents returned
 from
IIOMetadata.getAsTree
and passed to
IIOMetadata.setFromTree
and
mergeTree
.
IIOMetadataFormatImpl
- Class in
javax.imageio.metadata
A concrete class providing a reusable implementation of the
IIOMetadataFormat
interface.
IIOMetadataFormatImpl(String, int)
- Constructor for class javax.imageio.metadata.
IIOMetadataFormatImpl
Constructs a blank
IIOMetadataFormatImpl
instance,
 with a given root element name and child policy (other than
CHILD_POLICY_REPEAT
).
IIOMetadataFormatImpl(String, int, int)
- Constructor for class javax.imageio.metadata.
IIOMetadataFormatImpl
Constructs a blank
IIOMetadataFormatImpl
instance,
 with a given root element name and a child policy of
CHILD_POLICY_REPEAT
.
IIOMetadataNode
- Class in
javax.imageio.metadata
A class representing a node in a meta-data tree, which implements
 the
org.w3c.dom.Element
interface and additionally allows
 for the storage of non-textual objects via the
getUserObject
and
setUserObject
methods.
IIOMetadataNode()
- Constructor for class javax.imageio.metadata.
IIOMetadataNode
Constructs an empty
IIOMetadataNode
.
IIOMetadataNode(String)
- Constructor for class javax.imageio.metadata.
IIOMetadataNode
Constructs an
IIOMetadataNode
with a given node
 name.
IIOParam
- Class in
javax.imageio
A superclass of all classes describing how streams should be
 decoded or encoded.
IIOParam()
- Constructor for class javax.imageio.
IIOParam
Protected constructor may be called only by subclasses.
IIOParamController
- Interface in
javax.imageio
An interface to be implemented by objects that can determine the
 settings of an
IIOParam
object, either by putting up a
 GUI to obtain values from a user, or by other means.
IIOReadProgressListener
- Interface in
javax.imageio.event
An interface used by
ImageReader
implementations to
 notify callers of their image and thumbnail reading methods of
 progress.
IIOReadUpdateListener
- Interface in
javax.imageio.event
An interface used by
ImageReader
implementations to
 notify callers of their image and thumbnail reading methods of
 pixel updates.
IIOReadWarningListener
- Interface in
javax.imageio.event
An interface used by
ImageReader
implementations to
 notify callers of their image and thumbnail reading methods of
 warnings (non-fatal errors).
IIORegistry
- Class in
javax.imageio.spi
A registry for Image I/O service provider instances.
IIOServiceProvider
- Class in
javax.imageio.spi
A superinterface for functionality common to all Image I/O service
 provider interfaces (SPIs).
IIOServiceProvider()
- Constructor for class javax.imageio.spi.
IIOServiceProvider
Constructs a blank
IIOServiceProvider
.
IIOServiceProvider(String, String)
- Constructor for class javax.imageio.spi.
IIOServiceProvider
Constructs an
IIOServiceProvider
with a given
 vendor name and version identifier.
IIOWriteProgressListener
- Interface in
javax.imageio.event
An interface used by
ImageWriter
implementations to notify
 callers of their image writing methods of progress.
IIOWriteWarningListener
- Interface in
javax.imageio.event
An interface used by
ImageWriter
implementations to
 notify callers of their image and thumbnail reading methods of
 warnings (non-fatal errors).
IllegalAccessError
- Exception Class in
java.lang
Thrown if an application attempts to access or modify a field, or
 to call a method that it does not have access to.
IllegalAccessError()
- Constructor for exception class java.lang.
IllegalAccessError
Constructs an
IllegalAccessError
with no detail message.
IllegalAccessError(String)
- Constructor for exception class java.lang.
IllegalAccessError
Constructs an
IllegalAccessError
with the specified
 detail message.
IllegalAccessException
- Exception Class in
java.lang
An IllegalAccessException is thrown when an application tries
 to reflectively create an instance (other than an array),
 set or get a field, or invoke a method, but the currently
 executing method does not have access to the definition of
 the specified class, field, method or constructor.
IllegalAccessException()
- Constructor for exception class java.lang.
IllegalAccessException
Constructs an
IllegalAccessException
without a
 detail message.
IllegalAccessException(String)
- Constructor for exception class java.lang.
IllegalAccessException
Constructs an
IllegalAccessException
with a detail message.
IllegalArgumentException
- Exception Class in
java.lang
Thrown to indicate that a method has been passed an illegal or
 inappropriate argument.
IllegalArgumentException()
- Constructor for exception class java.lang.
IllegalArgumentException
Constructs an
IllegalArgumentException
with no
 detail message.
IllegalArgumentException(String)
- Constructor for exception class java.lang.
IllegalArgumentException
Constructs an
IllegalArgumentException
with the
 specified detail message.
IllegalArgumentException(String, Throwable)
- Constructor for exception class java.lang.
IllegalArgumentException
Constructs a new exception with the specified detail message and
 cause.
IllegalArgumentException(Throwable)
- Constructor for exception class java.lang.
IllegalArgumentException
Constructs a new exception with the specified cause and a detail
 message of
(cause==null ? null : cause.toString())
(which
 typically contains the class and detail message of
cause
).
IllegalBlockingModeException
- Exception Class in
java.nio.channels
Unchecked exception thrown when a blocking-mode-specific operation
 is invoked upon a channel in the incorrect blocking mode.
IllegalBlockingModeException()
- Constructor for exception class java.nio.channels.
IllegalBlockingModeException
Constructs an instance of this class.
IllegalBlockSizeException
- Exception Class in
javax.crypto
This exception is thrown when the length of data provided to a block
 cipher is incorrect, i.e., does not match the block size of the cipher.
IllegalBlockSizeException()
- Constructor for exception class javax.crypto.
IllegalBlockSizeException
Constructs an
IllegalBlockSizeException
with no detail message.
IllegalBlockSizeException(String)
- Constructor for exception class javax.crypto.
IllegalBlockSizeException
Constructs an
IllegalBlockSizeException
with the specified
 detail message.
IllegalCallerException
- Exception Class in
java.lang
Thrown to indicate that a method has been called by an inappropriate caller.
IllegalCallerException()
- Constructor for exception class java.lang.
IllegalCallerException
Constructs an IllegalCallerException with no detail message.
IllegalCallerException(String)
- Constructor for exception class java.lang.
IllegalCallerException
Constructs an IllegalCallerException with the specified detail
 message.
IllegalCallerException(String, Throwable)
- Constructor for exception class java.lang.
IllegalCallerException
Constructs a new exception with the specified detail message and
 cause.
IllegalCallerException(Throwable)
- Constructor for exception class java.lang.
IllegalCallerException
Constructs a new exception with the specified cause and a detail
 message of
(cause==null ? null : cause.toString())
(which
 typically contains the class and detail message of
cause
).
IllegalChannelGroupException
- Exception Class in
java.nio.channels
Unchecked exception thrown when an attempt is made to open a channel
 in a group that was not created by the same provider.
IllegalChannelGroupException()
- Constructor for exception class java.nio.channels.
IllegalChannelGroupException
Constructs an instance of this class.
IllegalCharsetNameException
- Exception Class in
java.nio.charset
Unchecked exception thrown when a string that is not a
legal charset name
is used as such.
IllegalCharsetNameException(String)
- Constructor for exception class java.nio.charset.
IllegalCharsetNameException
Constructs an instance of this class.
IllegalClassFormatException
- Exception Class in
java.lang.instrument
Thrown by an implementation of
ClassFileTransformer.transform
when its input parameters are invalid.
IllegalClassFormatException()
- Constructor for exception class java.lang.instrument.
IllegalClassFormatException
Constructs an
IllegalClassFormatException
with no
 detail message.
IllegalClassFormatException(String)
- Constructor for exception class java.lang.instrument.
IllegalClassFormatException
Constructs an
IllegalClassFormatException
with the
 specified detail message.
IllegalComponentStateException
- Exception Class in
java.awt
Signals that an AWT component is not in an appropriate state for
 the requested operation.
IllegalComponentStateException()
- Constructor for exception class java.awt.
IllegalComponentStateException
Constructs an IllegalComponentStateException with no detail message.
IllegalComponentStateException(String)
- Constructor for exception class java.awt.
IllegalComponentStateException
Constructs an IllegalComponentStateException with the specified detail
 message.
IllegalConnectorArgumentsException
- Exception Class in
com.sun.jdi.connect
Thrown to indicate an invalid argument or
 inconsistent passed to a
Connector
.
IllegalConnectorArgumentsException(String, String)
- Constructor for exception class com.sun.jdi.connect.
IllegalConnectorArgumentsException
Construct an
IllegalConnectorArgumentsException
with the specified detail message and the name of the argument
 which is invalid or inconsistent.
IllegalConnectorArgumentsException(String, List<String>)
- Constructor for exception class com.sun.jdi.connect.
IllegalConnectorArgumentsException
Construct an
IllegalConnectorArgumentsException
with the specified detail message and a
List
of
 names of arguments which are invalid or inconsistent.
IllegalFormatCodePointException
- Exception Class in
java.util
Unchecked exception thrown when a character with an invalid Unicode code
 point as defined by
Character.isValidCodePoint(int)
is passed to the
Formatter
.
IllegalFormatCodePointException(int)
- Constructor for exception class java.util.
IllegalFormatCodePointException
Constructs an instance of this class with the specified illegal code
 point as defined by
Character.isValidCodePoint(int)
.
IllegalFormatConversionException
- Exception Class in
java.util
Unchecked exception thrown when the argument corresponding to the format
 specifier is of an incompatible type.
IllegalFormatConversionException(char, Class<?>)
- Constructor for exception class java.util.
IllegalFormatConversionException
Constructs an instance of this class with the mismatched conversion and
 the corresponding argument class.
IllegalFormatException
- Exception Class in
java.util
Unchecked exception thrown when a format string contains an illegal syntax
 or a format specifier that is incompatible with the given arguments.
IllegalFormatFlagsException
- Exception Class in
java.util
Unchecked exception thrown when an illegal combination flags is given.
IllegalFormatFlagsException(String)
- Constructor for exception class java.util.
IllegalFormatFlagsException
Constructs an instance of this class with the specified flags.
IllegalFormatPrecisionException
- Exception Class in
java.util
Unchecked exception thrown when the precision is a negative value other than
-1
, the conversion does not support a precision, or the value is
 otherwise unsupported.
IllegalFormatPrecisionException(int)
- Constructor for exception class java.util.
IllegalFormatPrecisionException
Constructs an instance of this class with the specified precision.
IllegalFormatWidthException
- Exception Class in
java.util
Unchecked exception thrown when the format width is a negative value other
 than
-1
or is otherwise unsupported.
IllegalFormatWidthException(int)
- Constructor for exception class java.util.
IllegalFormatWidthException
Constructs an instance of this class with the specified width.
IllegalMonitorStateException
- Exception Class in
java.lang
Thrown to indicate that a thread has attempted to wait on an
 object's monitor or to notify other threads waiting on an object's
 monitor without owning the specified monitor.
IllegalMonitorStateException()
- Constructor for exception class java.lang.
IllegalMonitorStateException
Constructs an
IllegalMonitorStateException
with no
 detail message.
IllegalMonitorStateException(String)
- Constructor for exception class java.lang.
IllegalMonitorStateException
Constructs an
IllegalMonitorStateException
with the
 specified detail message.
IllegalPathStateException
- Exception Class in
java.awt.geom
The
IllegalPathStateException
represents an
 exception that is thrown if an operation is performed on a path
 that is in an illegal state with respect to the particular
 operation being performed, such as appending a path segment
 to a
GeneralPath
without an initial moveto.
IllegalPathStateException()
- Constructor for exception class java.awt.geom.
IllegalPathStateException
Constructs an
IllegalPathStateException
with no
 detail message.
IllegalPathStateException(String)
- Constructor for exception class java.awt.geom.
IllegalPathStateException
Constructs an
IllegalPathStateException
with the
 specified detail message.
IllegalReceiveException
- Exception Class in
com.sun.nio.sctp
Unchecked exception thrown when an attempt is made to invoke the
receive
method of
SctpChannel
or
SctpMultiChannel
from a notification handler.
IllegalReceiveException()
- Constructor for exception class com.sun.nio.sctp.
IllegalReceiveException
Constructs an instance of this class.
IllegalReceiveException(String)
- Constructor for exception class com.sun.nio.sctp.
IllegalReceiveException
Constructs an instance of this class with the specified message.
IllegalSelectorException
- Exception Class in
java.nio.channels
Unchecked exception thrown when an attempt is made to register a channel
 with a selector that was not created by the provider that created the
 channel.
IllegalSelectorException()
- Constructor for exception class java.nio.channels.
IllegalSelectorException
Constructs an instance of this class.
IllegalStateException
- Exception Class in
java.lang
Signals that a method has been invoked at an illegal or
 inappropriate time.
IllegalStateException()
- Constructor for exception class java.lang.
IllegalStateException
Constructs an IllegalStateException with no detail message.
IllegalStateException(String)
- Constructor for exception class java.lang.
IllegalStateException
Constructs an IllegalStateException with the specified detail
 message.
IllegalStateException(String, Throwable)
- Constructor for exception class java.lang.
IllegalStateException
Constructs a new exception with the specified detail message and
 cause.
IllegalStateException(Throwable)
- Constructor for exception class java.lang.
IllegalStateException
Constructs a new exception with the specified cause and a detail
 message of
(cause==null ? null : cause.toString())
(which
 typically contains the class and detail message of
cause
).
IllegalThreadStateException
- Exception Class in
java.lang
Thrown to indicate that a thread is not in an appropriate state
 for the requested operation.
IllegalThreadStateException()
- Constructor for exception class java.lang.
IllegalThreadStateException
Constructs an
IllegalThreadStateException
with no
 detail message.
IllegalThreadStateException(String)
- Constructor for exception class java.lang.
IllegalThreadStateException
Constructs an
IllegalThreadStateException
with the
 specified detail message.
IllegalUnbindException
- Exception Class in
com.sun.nio.sctp
Unchecked exception thrown when an attempt is made to remove an
 address that is not bound to the channel, or remove an address from a
 channel that has only one address bound to it.
IllegalUnbindException()
- Constructor for exception class com.sun.nio.sctp.
IllegalUnbindException
Constructs an instance of this class.
IllegalUnbindException(String)
- Constructor for exception class com.sun.nio.sctp.
IllegalUnbindException
Constructs an instance of this class with the specified detailed message.
IllformedLocaleException
- Exception Class in
java.util
Thrown by methods in
Locale
and
Locale.Builder
to
 indicate that an argument is not a well-formed BCP 47 tag.
IllformedLocaleException()
- Constructor for exception class java.util.
IllformedLocaleException
Constructs a new
IllformedLocaleException
with no
 detail message and -1 as the error index.
IllformedLocaleException(String)
- Constructor for exception class java.util.
IllformedLocaleException
Constructs a new
IllformedLocaleException
with the
 given message and -1 as the error index.
IllformedLocaleException(String, int)
- Constructor for exception class java.util.
IllformedLocaleException
Constructs a new
IllformedLocaleException
with the
 given message and the error index.
image
- Variable in class javax.imageio.
IIOImage
The
RenderedImage
being referenced.
Image
- Class in
java.awt
The abstract class
Image
is the superclass of all
 classes that represent graphical images.
Image()
- Constructor for class java.awt.
Image
Constructor for subclasses to call.
IMAGE_INCOMPATIBLE
- Static variable in class java.awt.image.
VolatileImage
Validated image is incompatible with supplied
GraphicsConfiguration
object and should be
 re-created as appropriate.
IMAGE_OK
- Static variable in class java.awt.image.
VolatileImage
Validated image is ready to use as-is.
IMAGE_RESTORED
- Static variable in class java.awt.image.
VolatileImage
Validated image has been restored and is now ready to use.
IMAGEABORTED
- Static variable in interface java.awt.image.
ImageConsumer
The image creation process was deliberately aborted.
ImageCapabilities
- Class in
java.awt
Capabilities and properties of images.
ImageCapabilities(boolean)
- Constructor for class java.awt.
ImageCapabilities
Creates a new object for specifying image capabilities.
imageComplete(int)
- Method in class java.awt.image.
BufferedImageFilter
Filters the information provided in the
imageComplete
method of the
ImageConsumer
interface.
imageComplete(int)
- Method in interface java.awt.image.
ImageConsumer
The imageComplete method is called when the ImageProducer is
 finished delivering all of the pixels that the source image
 contains, or when a single frame of a multi-frame animation has
 been completed, or when an error in loading or producing the
 image has occurred.
imageComplete(int)
- Method in class java.awt.image.
ImageFilter
Filters the information provided in the imageComplete method of
 the ImageConsumer interface.
imageComplete(int)
- Method in class java.awt.image.
PixelGrabber
The imageComplete method is part of the ImageConsumer API which
 this class must implement to retrieve the pixels.
imageComplete(ImageReader)
- Method in interface javax.imageio.event.
IIOReadProgressListener
Reports that the current image read operation has completed.
imageComplete(ImageWriter)
- Method in interface javax.imageio.event.
IIOWriteProgressListener
Reports that the image write operation has completed.
ImageConsumer
- Interface in
java.awt.image
The interface for objects expressing interest in image data through
 the ImageProducer interfaces.
IMAGEERROR
- Static variable in interface java.awt.image.
ImageConsumer
An error was encountered while producing the image.
ImageFilter
- Class in
java.awt.image
This class implements a filter for the set of interface methods that
 are used to deliver data from an ImageProducer to an ImageConsumer.
ImageFilter()
- Constructor for class java.awt.image.
ImageFilter
Constructs an
ImageFilter
.
imageFlavor
- Static variable in class java.awt.datatransfer.
DataFlavor
The
DataFlavor
representing a Java Image class, where:
ImageGraphicAttribute
- Class in
java.awt.font
The
ImageGraphicAttribute
class is an implementation of
GraphicAttribute
which draws images in
 a
TextLayout
.
ImageGraphicAttribute(Image, int)
- Constructor for class java.awt.font.
ImageGraphicAttribute
Constructs an
ImageGraphicAttribute
from the specified
Image
.
ImageGraphicAttribute(Image, int, float, float)
- Constructor for class java.awt.font.
ImageGraphicAttribute
Constructs an
ImageGraphicAttribute
from the specified
Image
.
ImageIcon
- Class in
javax.swing
An implementation of the Icon interface that paints Icons
 from Images.
ImageIcon()
- Constructor for class javax.swing.
ImageIcon
Creates an uninitialized image icon.
ImageIcon(byte[])
- Constructor for class javax.swing.
ImageIcon
Creates an ImageIcon from an array of bytes which were
 read from an image file containing a supported image format,
 such as GIF, JPEG, or (as of 1.3) PNG.
ImageIcon(byte[], String)
- Constructor for class javax.swing.
ImageIcon
Creates an ImageIcon from an array of bytes which were
 read from an image file containing a supported image format,
 such as GIF, JPEG, or (as of 1.3) PNG.
ImageIcon(Image)
- Constructor for class javax.swing.
ImageIcon
Creates an ImageIcon from an image object.
ImageIcon(Image, String)
- Constructor for class javax.swing.
ImageIcon
Creates an ImageIcon from the image.
ImageIcon(String)
- Constructor for class javax.swing.
ImageIcon
Creates an ImageIcon from the specified file.
ImageIcon(String, String)
- Constructor for class javax.swing.
ImageIcon
Creates an ImageIcon from the specified file.
ImageIcon(URL)
- Constructor for class javax.swing.
ImageIcon
Creates an ImageIcon from the specified URL.
ImageIcon(URL, String)
- Constructor for class javax.swing.
ImageIcon
Creates an ImageIcon from the specified URL.
ImageIcon.AccessibleImageIcon
- Class in
javax.swing
This class implements accessibility support for the
ImageIcon
class.
ImageInputStream
- Interface in
javax.imageio.stream
A seekable input stream interface for use by
ImageReader
s.
ImageInputStreamImpl
- Class in
javax.imageio.stream
An abstract class implementing the
ImageInputStream
interface.
ImageInputStreamImpl()
- Constructor for class javax.imageio.stream.
ImageInputStreamImpl
Constructs an
ImageInputStreamImpl
.
ImageInputStreamSpi
- Class in
javax.imageio.spi
The service provider interface (SPI) for
ImageInputStream
s.
ImageInputStreamSpi()
- Constructor for class javax.imageio.spi.
ImageInputStreamSpi
Constructs a blank
ImageInputStreamSpi
.
ImageInputStreamSpi(String, String, Class<?>)
- Constructor for class javax.imageio.spi.
ImageInputStreamSpi
Constructs an
ImageInputStreamSpi
with a given set
 of values.
ImageIO
- Class in
javax.imageio
A class containing static convenience methods for locating
ImageReader
s and
ImageWriter
s, and
 performing simple encoding and decoding.
Image Metadata
- Search tag in package javax.imageio.metadata
Section
Image Metadata DTD
- Search tag in package javax.imageio.metadata
Section
ImageObserver
- Interface in
java.awt.image
An asynchronous update interface for receiving notifications about
 Image information as the Image is constructed.
ImageOutputStream
- Interface in
javax.imageio.stream
A seekable output stream interface for use by
ImageWriter
s.
ImageOutputStreamImpl
- Class in
javax.imageio.stream
An abstract class implementing the
ImageOutputStream
interface.
ImageOutputStreamImpl()
- Constructor for class javax.imageio.stream.
ImageOutputStreamImpl
Constructs an
ImageOutputStreamImpl
.
ImageOutputStreamSpi
- Class in
javax.imageio.spi
The service provider interface (SPI) for
ImageOutputStream
s.
ImageOutputStreamSpi()
- Constructor for class javax.imageio.spi.
ImageOutputStreamSpi
Constructs a blank
ImageOutputStreamSpi
.
ImageOutputStreamSpi(String, String, Class<?>)
- Constructor for class javax.imageio.spi.
ImageOutputStreamSpi
Constructs an
ImageOutputStreamSpi
with a given
 set of values.
ImageProducer
- Interface in
java.awt.image
The interface for objects which can produce the image data for Images.
imageProgress(ImageReader, float)
- Method in interface javax.imageio.event.
IIOReadProgressListener
Reports the approximate degree of completion of the current
read
call of the associated
ImageReader
.
imageProgress(ImageWriter, float)
- Method in interface javax.imageio.event.
IIOWriteProgressListener
Reports the approximate degree of completion of the current
write
call within the associated
ImageWriter
.
ImageReader
- Class in
javax.imageio
An abstract superclass for parsing and decoding of images.
ImageReader(ImageReaderSpi)
- Constructor for class javax.imageio.
ImageReader
Constructs an
ImageReader
and sets its
originatingProvider
field to the supplied value.
ImageReaderSpi
- Class in
javax.imageio.spi
The service provider interface (SPI) for
ImageReader
s.
ImageReaderSpi()
- Constructor for class javax.imageio.spi.
ImageReaderSpi
Constructs a blank
ImageReaderSpi
.
ImageReaderSpi(String, String, String[], String[], String[], String, Class<?>[], String[], boolean, String, String, String[], String[], boolean, String, String, String[], String[])
- Constructor for class javax.imageio.spi.
ImageReaderSpi
Constructs an
ImageReaderSpi
with a given
 set of values.
ImageReaderWriterSpi
- Class in
javax.imageio.spi
A superclass containing instance variables and methods common to
ImageReaderSpi
and
ImageWriterSpi
.
ImageReaderWriterSpi()
- Constructor for class javax.imageio.spi.
ImageReaderWriterSpi
Constructs a blank
ImageReaderWriterSpi
.
ImageReaderWriterSpi(String, String, String[], String[], String[], String, boolean, String, String, String[], String[], boolean, String, String, String[], String[])
- Constructor for class javax.imageio.spi.
ImageReaderWriterSpi
Constructs an
ImageReaderWriterSpi
with a given
 set of values.
ImageReadParam
- Class in
javax.imageio
A class describing how a stream is to be decoded.
ImageReadParam()
- Constructor for class javax.imageio.
ImageReadParam
Constructs an
ImageReadParam
.
imageStarted(ImageReader, int)
- Method in interface javax.imageio.event.
IIOReadProgressListener
Reports that an image read operation is beginning.
imageStarted(ImageWriter, int)
- Method in interface javax.imageio.event.
IIOWriteProgressListener
Reports that an image write operation is beginning.
imageSubmit(String)
- Method in class javax.swing.text.html.
FormView
This method is called to submit a form in response
 to a click on an image -- an <INPUT> form
 element of type "image".
ImageTranscoder
- Interface in
javax.imageio
An interface providing metadata transcoding capability.
ImageTranscoderSpi
- Class in
javax.imageio.spi
The service provider interface (SPI) for
ImageTranscoder
s.
ImageTranscoderSpi()
- Constructor for class javax.imageio.spi.
ImageTranscoderSpi
Constructs a blank
ImageTranscoderSpi
.
ImageTranscoderSpi(String, String)
- Constructor for class javax.imageio.spi.
ImageTranscoderSpi
Constructs an
ImageTranscoderSpi
with a given set
 of values.
ImageTypeSpecifier
- Class in
javax.imageio
A class that allows the format of an image (in particular, its
SampleModel
and
ColorModel
) to be
 specified in a convenient manner.
ImageTypeSpecifier(ColorModel, SampleModel)
- Constructor for class javax.imageio.
ImageTypeSpecifier
Constructs an
ImageTypeSpecifier
directly
 from a
ColorModel
and a
SampleModel
.
ImageTypeSpecifier(RenderedImage)
- Constructor for class javax.imageio.
ImageTypeSpecifier
Constructs an
ImageTypeSpecifier
from a
RenderedImage
.
imageUpdate(Image, int, int, int, int, int)
- Method in class java.awt.
Component
Repaints the component when the image has changed.
imageUpdate(Image, int, int, int, int, int)
- Method in interface java.awt.image.
ImageObserver
This method is called when information about an image which was
 previously requested using an asynchronous interface becomes
 available.
imageUpdate(Image, int, int, int, int, int)
- Method in class javax.swing.
AbstractButton
If the button icon for the current button state is either
null
or not an
ImageIcon
with an
Image
equal to the
 passed in
Image
, return
false
; otherwise it
 will delegate to the super-class.
imageUpdate(Image, int, int, int, int, int)
- Method in class javax.swing.
JLabel
If the component is not showing or either the icon or disabled
 icon is not an
ImageIcon
with an
Image
equal to the passed in
Image
, return
false
;
 otherwise it will delegate to the super-class.
imageUpdate(Image, int, int, int, int, int)
- Method in class javax.swing.
JLayer
Delegates its functionality to the
LayerUI.imageUpdate(java.awt.Image, int, int, int, int, int, JLayer)
method,
 if the
LayerUI
is set.
imageUpdate(Image, int, int, int, int, int)
- Method in class javax.swing.
JSlider
Repaints the component when the image has changed.
imageUpdate(Image, int, int, int, int, int, JLayer<? extends V>)
- Method in class javax.swing.plaf.
LayerUI
Delegates its functionality to the default implementation of the
JLayer.imageUpdate
method
 which is inherited from
JLayer
's base classes.
imageUpdate(ImageReader, BufferedImage, int, int, int, int, int, int, int[])
- Method in interface javax.imageio.event.
IIOReadUpdateListener
Reports that a given region of the image has been updated.
ImageView
- Class in
javax.swing.text.html
View of an Image, intended to support the HTML <IMG> tag.
ImageView(Element)
- Constructor for class javax.swing.text.html.
ImageView
Creates a new view that represents an IMG element.
ImageWriteParam
- Class in
javax.imageio
A class describing how a stream is to be encoded.
ImageWriteParam()
- Constructor for class javax.imageio.
ImageWriteParam
Constructs an empty
ImageWriteParam
.
ImageWriteParam(Locale)
- Constructor for class javax.imageio.
ImageWriteParam
Constructs an
ImageWriteParam
set to use a
 given
Locale
.
ImageWriter
- Class in
javax.imageio
An abstract superclass for encoding and writing images.
ImageWriter(ImageWriterSpi)
- Constructor for class javax.imageio.
ImageWriter
Constructs an
ImageWriter
and sets its
originatingProvider
instance variable to the
 supplied value.
ImageWriterSpi
- Class in
javax.imageio.spi
The service provider interface (SPI) for
ImageWriter
s.
ImageWriterSpi()
- Constructor for class javax.imageio.spi.
ImageWriterSpi
Constructs a blank
ImageWriterSpi
.
ImageWriterSpi(String, String, String[], String[], String[], String, Class<?>[], String[], boolean, String, String, String[], String[], boolean, String, String, String[], String[])
- Constructor for class javax.imageio.spi.
ImageWriterSpi
Constructs an
ImageWriterSpi
with a given
 set of values.
ImagingOpException
- Exception Class in
java.awt.image
The
ImagingOpException
is thrown if one of the
BufferedImageOp
or
RasterOp
filter methods cannot
 process the image.
ImagingOpException(String)
- Constructor for exception class java.awt.image.
ImagingOpException
Constructs an
ImagingOpException
object with the
 specified message.
IMG
- Static variable in class javax.swing.text.html.
HTML.Tag
Tag <img>
IMG_ALIGN_BOTTOM
- Static variable in class javax.swing.text.html.
HTMLEditorKit
Align images at the bottom.
IMG_ALIGN_MIDDLE
- Static variable in class javax.swing.text.html.
HTMLEditorKit
Align images in the middle.
IMG_ALIGN_TOP
- Static variable in class javax.swing.text.html.
HTMLEditorKit
Align images at the top.
IMG_BORDER
- Static variable in class javax.swing.text.html.
HTMLEditorKit
Align images at the border.
IMMUTABLE
- Static variable in interface java.util.
Spliterator
Characteristic value signifying that the element source cannot be
 structurally modified; that is, elements cannot be added, replaced, or
 removed, so such changes cannot occur during traversal.
IMMUTABLE_INFO_FIELD
- Static variable in class javax.management.
JMX
The name of the
immutableInfo
field.
ImmutableDescriptor
- Class in
javax.management
An immutable descriptor.
ImmutableDescriptor(String...)
- Constructor for class javax.management.
ImmutableDescriptor
Construct a descriptor containing the given fields.
ImmutableDescriptor(String[], Object[])
- Constructor for class javax.management.
ImmutableDescriptor
Construct a descriptor containing the given fields and values.
ImmutableDescriptor(Map<String, ?>)
- Constructor for class javax.management.
ImmutableDescriptor
Construct a descriptor where the names and values of the fields
 are the keys and values of the given Map.
IMPERIAL_ARAMAIC
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Imperial_Aramaic".
IMPERIAL_ARAMAIC
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Imperial Aramaic" Unicode character block.
impersonate(GSSName)
- Method in interface com.sun.security.jgss.
ExtendedGSSCredential
Impersonates a principal.
implAccept(Socket)
- Method in class java.net.
ServerSocket
Subclasses of ServerSocket use this method to override accept()
 to return their own subclass of socket.
implCloseChannel()
- Method in class java.nio.channels.spi.
AbstractInterruptibleChannel
Closes this channel.
implCloseChannel()
- Method in class java.nio.channels.spi.
AbstractSelectableChannel
Closes this channel.
implCloseChannel(SelectableChannel)
- Method in interface jdk.nio.
Channels.SelectableChannelCloser
Closes a selectable channel.
implCloseSelectableChannel()
- Method in class java.nio.channels.spi.
AbstractSelectableChannel
Closes this selectable channel.
implCloseSelector()
- Method in class java.nio.channels.spi.
AbstractSelector
Closes this selector.
implConfigureBlocking(boolean)
- Method in class java.nio.channels.spi.
AbstractSelectableChannel
Adjusts this channel's blocking mode.
IMPLEMENTATION_TITLE
- Static variable in class java.util.jar.
Attributes.Name
Name
object for
Implementation-Title
manifest attribute used for package versioning.
IMPLEMENTATION_URL
- Static variable in class java.util.jar.
Attributes.Name
Deprecated.
Extension mechanism is no longer supported.
IMPLEMENTATION_VENDOR
- Static variable in class java.util.jar.
Attributes.Name
Name
object for
Implementation-Vendor
manifest attribute used for package versioning.
IMPLEMENTATION_VENDOR_ID
- Static variable in class java.util.jar.
Attributes.Name
Deprecated.
Extension mechanism is no longer supported.
IMPLEMENTATION_VERSION
- Static variable in class java.util.jar.
Attributes.Name
Name
object for
Implementation-Version
manifest attribute used for package versioning.
Implementation Caveats
- Search tag in class java.awt.AlphaComposite
Section
Implementation Considerations
- Search tag in interface java.util.concurrent.locks.Condition
Section
Implementation Considerations
- Search tag in interface java.util.concurrent.locks.Lock
Section
Implementation-dependent behavior.
- Search tag in package java.awt
Section
Implementation Notes
- Search tag in class java.util.concurrent.locks.ReentrantReadWriteLock
Section
Implementation Notes
- Search tag in class javax.swing.SizeSequence
Section
Implementation Specific Properties
- Search tag in module java.xml
Section
Implementing exception-throwing behavior
- Search tag in interface jdk.dynalink.beans.MissingMemberHandlerFactory
Section
implementors()
- Method in interface com.sun.jdi.
InterfaceType
Gets the currently prepared classes which directly implement this
 interface.
implFlush(ByteBuffer)
- Method in class java.nio.charset.
CharsetEncoder
Flushes this encoder.
implFlush(CharBuffer)
- Method in class java.nio.charset.
CharsetDecoder
Flushes this decoder.
IMPLIED
- Static variable in class javax.swing.text.html.
HTML.Tag
All text content must be in a paragraph element.
IMPLIED
- Static variable in class javax.swing.text.html.
HTMLEditorKit.ParserCallback
This is passed as an attribute in the attributeset to indicate
 the element is implied eg, the string '<>foo<\t>'
 contains an implied html element and an implied body element.
IMPLIED
- Static variable in interface javax.swing.text.html.parser.
DTDConstants
The DTD constant corresponds to IMPLIED
implies(CodeSource)
- Method in class java.security.
CodeSource
Returns true if this
CodeSource
object "implies" the specified
CodeSource
.
implies(Permission)
- Method in class java.io.
FilePermission
Checks if this FilePermission object "implies" the specified permission.
implies(Permission)
- Method in class java.net.
SocketPermission
Checks if this socket permission object "implies" the
 specified permission.
implies(Permission)
- Method in class java.net.
URLPermission
Checks if this URLPermission implies the given permission.
implies(Permission)
- Method in class java.security.
AllPermission
Checks if the specified permission is "implied" by
 this object.
implies(Permission)
- Method in class java.security.
BasicPermission
Checks if the specified permission is "implied" by
 this object.
implies(Permission)
- Method in class java.security.
Permission
Checks if the specified permission's actions are "implied by"
 this object's actions.
implies(Permission)
- Method in class java.security.
PermissionCollection
Checks to see if the specified permission is implied by
 the collection of
Permission
objects held in this
PermissionCollection
.
implies(Permission)
- Method in class java.security.
Permissions
Checks to see if this object's
PermissionCollection
for
 permissions of the specified permission's class implies the permissions
 expressed in the
permission
object.
implies(Permission)
- Method in class java.security.
ProtectionDomain
Check and see if this
ProtectionDomain
implies the permissions
 expressed in the
Permission
object.
implies(Permission)
- Method in class java.security.
UnresolvedPermission
This method always returns
false
for unresolved permissions.
implies(Permission)
- Method in class java.util.
PropertyPermission
Checks if this PropertyPermission object "implies" the specified
 permission.
implies(Permission)
- Method in class javax.management.
MBeanPermission
Checks if this MBeanPermission object "implies" the
 specified permission.
implies(Permission)
- Method in class javax.management.
MBeanServerPermission
Checks if this MBeanServerPermission object "implies" the specified
 permission.
implies(Permission)
- Method in class javax.security.auth.kerberos.
DelegationPermission
Checks if this Kerberos delegation permission object "implies" the
 specified permission.
implies(Permission)
- Method in class javax.security.auth.kerberos.
ServicePermission
Checks if this Kerberos service permission object "implies" the
 specified permission.
implies(Permission)
- Method in class javax.security.auth.
PrivateCredentialPermission
Checks if this
PrivateCredentialPermission
implies
 the specified
Permission
.
implies(Permission)
- Method in class javax.smartcardio.
CardPermission
Checks if this CardPermission object implies the specified permission.
implies(ProtectionDomain, Permission)
- Method in class java.security.
Policy
Deprecated.
Evaluates the global policy for the permissions granted to
 the ProtectionDomain and tests whether the permission is
 granted.
implies(Subject)
- Method in interface com.sun.security.auth.
PrincipalComparator
Check if the specified
Subject
is implied by
 this object.
implies(Subject)
- Method in interface java.security.
Principal
Returns
true
if the specified subject is implied by this
Principal
.
implOnMalformedInput(CodingErrorAction)
- Method in class java.nio.charset.
CharsetDecoder
Reports a change to this decoder's malformed-input action.
implOnMalformedInput(CodingErrorAction)
- Method in class java.nio.charset.
CharsetEncoder
Reports a change to this encoder's malformed-input action.
implOnUnmappableCharacter(CodingErrorAction)
- Method in class java.nio.charset.
CharsetDecoder
Reports a change to this decoder's unmappable-character action.
implOnUnmappableCharacter(CodingErrorAction)
- Method in class java.nio.charset.
CharsetEncoder
Reports a change to this encoder's unmappable-character action.
implReleaseChannel(SelectableChannel)
- Method in interface jdk.nio.
Channels.SelectableChannelCloser
Release the file descriptor and any resources for a selectable
 channel that closed while registered with one or more
Selector
s.
implReplaceWith(byte[])
- Method in class java.nio.charset.
CharsetEncoder
Reports a change to this encoder's replacement value.
implReplaceWith(String)
- Method in class java.nio.charset.
CharsetDecoder
Reports a change to this decoder's replacement value.
implReset()
- Method in class java.nio.charset.
CharsetDecoder
Resets this decoder, clearing any charset-specific internal state.
implReset()
- Method in class java.nio.charset.
CharsetEncoder
Resets this encoder, clearing any charset-specific internal state.
IMPORT
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
ImportTree
.
IMPORT
- Enum constant in enum class jdk.jshell.
Snippet.Kind
An import declaration:
import
...
IMPORT_RULE
- Static variable in interface org.w3c.dom.css.
CSSRule
The rule is a
CSSImportRule
.
importData(JComponent, Transferable)
- Method in class javax.swing.
TransferHandler
Causes a transfer to a component from a clipboard or a
 DND drop operation.
importData(TransferHandler.TransferSupport)
- Method in class javax.swing.
TransferHandler
Causes a transfer to occur from a clipboard or a drag and
 drop operation.
importedKeyCascade
- Static variable in interface java.sql.
DatabaseMetaData
For the column
UPDATE_RULE
,
 indicates that
 when the primary key is updated, the foreign key (imported key)
 is changed to agree with it.
importedKeyInitiallyDeferred
- Static variable in interface java.sql.
DatabaseMetaData
Indicates deferrability.
importedKeyInitiallyImmediate
- Static variable in interface java.sql.
DatabaseMetaData
Indicates deferrability.
importedKeyNoAction
- Static variable in interface java.sql.
DatabaseMetaData
For the columns
UPDATE_RULE
and
DELETE_RULE
, indicates that
 if the primary key has been imported, it cannot be updated or deleted.
importedKeyNotDeferrable
- Static variable in interface java.sql.
DatabaseMetaData
Indicates deferrability.
importedKeyRestrict
- Static variable in interface java.sql.
DatabaseMetaData
For the column
UPDATE_RULE
, indicates that
 a primary key may not be updated if it has been imported by
 another table as a foreign key.
importedKeySetDefault
- Static variable in interface java.sql.
DatabaseMetaData
For the columns
UPDATE_RULE
and
DELETE_RULE
, indicates that
 if the primary key is updated or deleted, the foreign key (imported key)
 is set to the default value.
importedKeySetNull
- Static variable in interface java.sql.
DatabaseMetaData
For the columns
UPDATE_RULE
and
DELETE_RULE
, indicates that
 when the primary key is updated or deleted, the foreign key (imported key)
 is changed to
NULL
.
importNode(Node, boolean)
- Method in interface org.w3c.dom.
Document
Imports a node from another document to this document, without altering
 or removing the source node from the original document; this method
 creates a new copy of the source node.
importPreferences(InputStream)
- Static method in class java.util.prefs.
Preferences
Imports all of the preferences represented by the XML document on the
 specified input stream.
imports()
- Method in class jdk.jshell.
JShell
Returns the active import snippets.
ImportSnippet
- Class in
jdk.jshell
Snippet for an import declaration.
importStyleSheet(URL)
- Method in class javax.swing.text.html.
StyleSheet
Imports a style sheet from
url
.
ImportTree
- Interface in
com.sun.source.tree
A tree node for an import declaration.
in
- Static variable in class java.io.
FileDescriptor
A handle to the standard input stream.
in
- Variable in class java.io.
FilterInputStream
The input stream to be filtered.
in
- Variable in class java.io.
FilterReader
The underlying character-input stream.
in
- Variable in class java.io.
PipedInputStream
The index of the position in the circular buffer at which the
 next byte of data will be stored when received from the connected
 piped output stream.
in
- Static variable in class java.lang.
System
The "standard" input stream.
in(InputStream)
- Method in class jdk.jshell.
JShell.Builder
Sets the input for the running evaluation (it's
System.in
).
in(InputStream, InputStream)
- Method in interface jdk.jshell.tool.
JavaShellToolBuilder
Set the input channels.
in(Class<?>)
- Method in class java.lang.invoke.
MethodHandles.Lookup
Creates a lookup on the specified new lookup class.
in(ValueExp, ValueExp[])
- Static method in class javax.management.
Query
Returns an expression constraining a value to be one of an explicit list.
InaccessibleObjectException
- Exception Class in
java.lang.reflect
Thrown when Java language access checks cannot be suppressed.
InaccessibleObjectException()
- Constructor for exception class java.lang.reflect.
InaccessibleObjectException
Constructs an
InaccessibleObjectException
with no detail message.
InaccessibleObjectException(String)
- Constructor for exception class java.lang.reflect.
InaccessibleObjectException
Constructs an
InaccessibleObjectException
with the given detail
 message.
INACTIVE_CAPTION
- Static variable in class java.awt.
SystemColor
The array index for the
SystemColor.inactiveCaption
system color.
INACTIVE_CAPTION_BORDER
- Static variable in class java.awt.
SystemColor
The array index for the
SystemColor.inactiveCaptionBorder
system color.
INACTIVE_CAPTION_TEXT
- Static variable in class java.awt.
SystemColor
The array index for the
SystemColor.inactiveCaptionText
system color.
inactiveCaption
- Static variable in class java.awt.
SystemColor
The color rendered for the window-title background of inactive windows.
inactiveCaptionBorder
- Static variable in class java.awt.
SystemColor
The color rendered for the border around inactive windows.
inactiveCaptionText
- Static variable in class java.awt.
SystemColor
The color rendered for the window-title text of inactive windows.
INCH
- Static variable in class javax.print.attribute.
Size2DSyntax
Value to indicate units of inches (in).
INCH
- Static variable in class javax.print.attribute.standard.
MediaPrintableArea
Value to indicate units of inches (in).
include(RowFilter.Entry<? extends M, ? extends I>)
- Method in class javax.swing.
RowFilter
Returns true if the specified entry should be shown;
 returns false if the entry should be hidden.
inclusions
- Variable in class javax.swing.text.html.parser.
Element
The set of elements that can occur inside the element
INCLUSIVE
- Static variable in interface javax.xml.crypto.dsig.
CanonicalizationMethod
The
Canonical
 XML (without comments)
canonicalization method algorithm URI.
INCLUSIVE_11
- Static variable in interface javax.xml.crypto.dsig.
CanonicalizationMethod
The
Canonical XML 1.1
 (without comments)
canonicalization method algorithm URI.
INCLUSIVE_11_WITH_COMMENTS
- Static variable in interface javax.xml.crypto.dsig.
CanonicalizationMethod
The
Canonical XML 1.1 with comments
canonicalization method algorithm
 URI.
INCLUSIVE_WITH_COMMENTS
- Static variable in interface javax.xml.crypto.dsig.
CanonicalizationMethod
The
Canonical XML with comments
canonicalization method algorithm URI.
Incompatibilities with Previous Releases
- Search tag in package java.awt
Section
IncompatibleClassChangeError
- Exception Class in
java.lang
Thrown when an incompatible class change has occurred to some class
 definition.
IncompatibleClassChangeError()
- Constructor for exception class java.lang.
IncompatibleClassChangeError
Constructs an
IncompatibleClassChangeError
with no
 detail message.
IncompatibleClassChangeError(String)
- Constructor for exception class java.lang.
IncompatibleClassChangeError
Constructs an
IncompatibleClassChangeError
with the
 specified detail message.
IncompatibleThreadStateException
- Exception Class in
com.sun.jdi
Thrown to indicate that the requested operation cannot be
 completed while the specified thread is in its current state.
IncompatibleThreadStateException()
- Constructor for exception class com.sun.jdi.
IncompatibleThreadStateException
IncompatibleThreadStateException(String)
- Constructor for exception class com.sun.jdi.
IncompatibleThreadStateException
IncompleteAnnotationException
- Exception Class in
java.lang.annotation
Thrown to indicate that a program has attempted to access an element of
 an annotation interface that was added to the annotation interface definition
 after the annotation was compiled (or serialized).
IncompleteAnnotationException(Class<? extends Annotation>, String)
- Constructor for exception class java.lang.annotation.
IncompleteAnnotationException
Constructs an IncompleteAnnotationException to indicate that
 the named element was missing from the specified annotation interface.
InconsistentDebugInfoException
- Exception Class in
com.sun.jdi
Thrown to indicate that there is an inconistency in the debug
 information provided by the target VM.
InconsistentDebugInfoException()
- Constructor for exception class com.sun.jdi.
InconsistentDebugInfoException
InconsistentDebugInfoException(String)
- Constructor for exception class com.sun.jdi.
InconsistentDebugInfoException
incrButton
- Variable in class javax.swing.plaf.basic.
BasicScrollBarUI
Increment button
INCREASE_HIGHLIGHT
- Static variable in class javax.swing.plaf.basic.
BasicScrollBarUI
Increase highlight
increaseButton
- Variable in class javax.swing.plaf.metal.
MetalScrollBarUI
The increase button.
increment()
- Method in class java.util.concurrent.atomic.
LongAdder
Equivalent to
add(1)
.
INCREMENT
- Static variable in interface javax.accessibility.
AccessibleAction
An action which increments a value.
incrementAndGet()
- Method in class java.util.concurrent.atomic.
AtomicInteger
Atomically increments the current value,
 with memory effects as specified by
VarHandle.getAndAdd(java.lang.Object...)
.
incrementAndGet()
- Method in class java.util.concurrent.atomic.
AtomicLong
Atomically increments the current value,
 with memory effects as specified by
VarHandle.getAndAdd(java.lang.Object...)
.
incrementAndGet(int)
- Method in class java.util.concurrent.atomic.
AtomicIntegerArray
Atomically increments the value of the element at index
i
,
 with memory effects as specified by
VarHandle.getAndAdd(java.lang.Object...)
.
incrementAndGet(int)
- Method in class java.util.concurrent.atomic.
AtomicLongArray
Atomically increments the value of the element at index
i
,
 with memory effects as specified by
VarHandle.getAndAdd(java.lang.Object...)
.
incrementAndGet(T)
- Method in class java.util.concurrent.atomic.
AtomicIntegerFieldUpdater
Atomically increments by one the current value of the field of the
 given object managed by this updater.
incrementAndGet(T)
- Method in class java.util.concurrent.atomic.
AtomicLongFieldUpdater
Atomically increments by one the current value of the field of the
 given object managed by this updater.
incrementAnimationIndex()
- Method in class javax.swing.plaf.basic.
BasicProgressBarUI
Sets the index of the current animation frame,
 to the next valid value,
 which results in the progress bar being repainted.
incrementExact(int)
- Static method in class java.lang.
Math
Returns the argument incremented by one, throwing an exception if the
 result overflows an
int
.
incrementExact(int)
- Static method in class java.lang.
StrictMath
Returns the argument incremented by one,
 throwing an exception if the result overflows an
int
.
incrementExact(long)
- Static method in class java.lang.
Math
Returns the argument incremented by one, throwing an exception if the
 result overflows a
long
.
incrementExact(long)
- Static method in class java.lang.
StrictMath
Returns the argument incremented by one,
 throwing an exception if the result overflows a
long
.
incrGap
- Variable in class javax.swing.plaf.basic.
BasicScrollBarUI
Distance between the increment button and the track.
incrIndent()
- Method in class javax.swing.text.
AbstractWriter
Increments the indent level.
inDaylightTime(Date)
- Method in class java.util.
SimpleTimeZone
Queries if the given date is in daylight saving time.
inDaylightTime(Date)
- Method in class java.util.
TimeZone
Queries if the given
date
is in Daylight Saving Time in
 this time zone.
INDEFINITE_LIFETIME
- Static variable in interface org.ietf.jgss.
GSSContext
A lifetime constant representing indefinite context lifetime.
INDEFINITE_LIFETIME
- Static variable in interface org.ietf.jgss.
GSSCredential
A lifetime constant representing indefinite credential lifetime.
indent()
- Method in class javax.swing.text.
AbstractWriter
Does indentation.
indent(int)
- Method in class java.lang.
String
Adjusts the indentation of each line of this string based on the value of
n
, and normalizes line termination characters.
INDENT
- Enum constant in enum class javax.swing.
LayoutStyle.ComponentPlacement
Enumeration value indicating the distance to indent a component
 is being requested.
INDENT
- Static variable in class javax.xml.transform.
OutputKeys
indent = "yes" | "no".
INDETERMINATE
- Enum constant in enum class java.awt.
Taskbar.State
The progress indicator displays activity without specifying what
 proportion of the progress is complete.
INDETERMINATE
- Enum constant in enum class jdk.dynalink.linker.
ConversionComparator.Comparison
The conversions cannot be compared.
INDETERMINATE
- Static variable in class javax.accessibility.
AccessibleState
Indicates that the object state is indeterminate.
INDETERMINATE
- Static variable in class javax.xml.datatype.
DatatypeConstants
Comparison result.
index
- Variable in class javax.swing.text.html.parser.
Element
The element index
INDEX
- Enum constant in enum class com.sun.source.doctree.
DocTree.Kind
Used for instances of
IndexTree
representing an
@index
tag.
INDEX_SIZE_ERR
- Static variable in exception class org.w3c.dom.
DOMException
If index or size is negative, or greater than the allowed value.
indexAtLocation(int, int)
- Method in class javax.swing.
JTabbedPane
Returns the tab index corresponding to the tab whose bounds
 intersect the specified location.
IndexColorModel
- Class in
java.awt.image
The
IndexColorModel
class is a
ColorModel
class that works with pixel values consisting of a
 single sample that is an index into a fixed colormap in the default
 sRGB color space.
IndexColorModel(int, int, byte[], byte[], byte[])
- Constructor for class java.awt.image.
IndexColorModel
Constructs an
IndexColorModel
from the specified
 arrays of red, green, and blue components.
IndexColorModel(int, int, byte[], byte[], byte[], byte[])
- Constructor for class java.awt.image.
IndexColorModel
Constructs an
IndexColorModel
from the given
 arrays of red, green, blue and alpha components.
IndexColorModel(int, int, byte[], byte[], byte[], int)
- Constructor for class java.awt.image.
IndexColorModel
Constructs an
IndexColorModel
from the given arrays
 of red, green, and blue components.
IndexColorModel(int, int, byte[], int, boolean)
- Constructor for class java.awt.image.
IndexColorModel
Constructs an
IndexColorModel
from a single
 array of interleaved red, green, blue and optional alpha
 components.
IndexColorModel(int, int, byte[], int, boolean, int)
- Constructor for class java.awt.image.
IndexColorModel
Constructs an
IndexColorModel
from a single array of
 interleaved red, green, blue and optional alpha components.
IndexColorModel(int, int, int[], int, boolean, int, int)
- Constructor for class java.awt.image.
IndexColorModel
Constructs an
IndexColorModel
from an array of
 ints where each int is comprised of red, green, blue, and
 optional alpha components in the default RGB color model format.
IndexColorModel(int, int, int[], int, int, BigInteger)
- Constructor for class java.awt.image.
IndexColorModel
Constructs an
IndexColorModel
from an
int
array where each
int
is
 comprised of red, green, blue, and alpha
 components in the default RGB color model format.
IndexedPropertyChangeEvent
- Class in
java.beans
An "IndexedPropertyChange" event gets delivered whenever a component that
 conforms to the JavaBeans specification (a "bean") changes a bound
 indexed property.
IndexedPropertyChangeEvent(Object, String, Object, Object, int)
- Constructor for class java.beans.
IndexedPropertyChangeEvent
Constructs a new
IndexedPropertyChangeEvent
object.
IndexedPropertyDescriptor
- Class in
java.beans
An IndexedPropertyDescriptor describes a property that acts like an
 array and has an indexed read and/or indexed write method to access
 specific elements of the array.
IndexedPropertyDescriptor(String, Class<?>)
- Constructor for class java.beans.
IndexedPropertyDescriptor
This constructor constructs an IndexedPropertyDescriptor for a property
 that follows the standard Java conventions by having getFoo and setFoo
 accessor methods, for both indexed access and array access.
IndexedPropertyDescriptor(String, Class<?>, String, String, String, String)
- Constructor for class java.beans.
IndexedPropertyDescriptor
This constructor takes the name of a simple property, and method
 names for reading and writing the property, both indexed
 and non-indexed.
IndexedPropertyDescriptor(String, Method, Method, Method, Method)
- Constructor for class java.beans.
IndexedPropertyDescriptor
This constructor takes the name of a simple property, and Method
 objects for reading and writing the property.
indexInRange(int, int)
- Method in class jdk.incubator.vector.
VectorMask
Removes lanes numbered
N
from this mask where the
 adjusted index
N+offset
, is not in the range
[0..limit-1]
.
indexInRange(int, int)
- Method in interface jdk.incubator.vector.
VectorSpecies
Returns a mask of this species where only
 the lanes at index N such that the adjusted index
N+offset
is in the range
[0..limit-1]
are set.
indexInRange(long, long)
- Method in class jdk.incubator.vector.
VectorMask
Removes lanes numbered
N
from this mask where the
 adjusted index
N+offset
, is not in the range
[0..limit-1]
.
indexInRange(long, long)
- Method in interface jdk.incubator.vector.
VectorSpecies
Returns a mask of this species where only
 the lanes at index N such that the adjusted index
N+offset
is in the range
[0..limit-1]
are set.
indexOf(int)
- Method in class java.lang.
String
Returns the index within this string of the first occurrence of
 the specified character.
indexOf(int, int)
- Method in class java.lang.
String
Returns the index within this string of the first occurrence of the
 specified character, starting the search at the specified index.
indexOf(int, int, int)
- Method in class java.lang.
String
Returns the index within this string of the first occurrence of the
 specified character, starting the search at
beginIndex
and
 stopping before
endIndex
.
indexOf(E, int)
- Method in class java.util.concurrent.
CopyOnWriteArrayList
Returns the index of the first occurrence of the specified element in
 this list, searching forwards from
index
, or returns -1 if
 the element is not found.
indexOf(Object)
- Method in class java.util.
AbstractList
Returns the index of the first occurrence of the specified element
 in this list, or -1 if this list does not contain the element.
indexOf(Object)
- Method in class java.util.
ArrayList
Returns the index of the first occurrence of the specified element
 in this list, or -1 if this list does not contain the element.
indexOf(Object)
- Method in class java.util.concurrent.
CopyOnWriteArrayList
Returns the index of the first occurrence of the specified element
 in this list, or -1 if this list does not contain the element.
indexOf(Object)
- Method in class java.util.
LinkedList
Returns the index of the first occurrence of the specified element
 in this list, or -1 if this list does not contain the element.
indexOf(Object)
- Method in interface java.util.
List
Returns the index of the first occurrence of the specified element
 in this list, or -1 if this list does not contain the element.
indexOf(Object)
- Method in class java.util.
Vector
Returns the index of the first occurrence of the specified element
 in this vector, or -1 if this vector does not contain the element.
indexOf(Object)
- Method in class javax.swing.
DefaultListModel
Searches for the first occurrence of
elem
.
indexOf(Object)
- Method in class javax.swing.plaf.basic.
BasicDirectoryModel
Returns an index of element
o
in file cache.
indexOf(Object, int)
- Method in class java.util.
Vector
Returns the index of the first occurrence of the specified element in
 this vector, searching forwards from
index
, or returns -1 if
 the element is not found.
indexOf(Object, int)
- Method in class javax.swing.
DefaultListModel
Searches for the first occurrence of
elem
, beginning
 the search at
index
.
indexOf(String)
- Method in class java.lang.
String
Returns the index within this string of the first occurrence of the
 specified substring.
indexOf(String)
- Method in class java.lang.
StringBuffer
indexOf(String)
- Method in class java.lang.
StringBuilder
indexOf(String, int)
- Method in class java.lang.
String
Returns the index within this string of the first occurrence of the
 specified substring, starting at the specified index.
indexOf(String, int)
- Method in class java.lang.
StringBuffer
indexOf(String, int)
- Method in class java.lang.
StringBuilder
indexOf(String, int, int)
- Method in class java.lang.
String
Returns the index of the first occurrence of the specified substring
 within the specified index range of
this
string.
indexOfComponent(Component)
- Method in class javax.swing.
JTabbedPane
Returns the index of the tab for the specified component.
indexOfSubList(List<?>, List<?>)
- Static method in class java.util.
Collections
Returns the starting position of the first occurrence of the specified
 target list within the specified source list, or -1 if there is no
 such occurrence.
indexOfTab(String)
- Method in class javax.swing.
JTabbedPane
Returns the first tab index with a given
title
,  or
 -1 if no tab has this title.
indexOfTab(Icon)
- Method in class javax.swing.
JTabbedPane
Returns the first tab index with a given
icon
,
 or -1 if no tab has this icon.
indexOfTabComponent(Component)
- Method in class javax.swing.
JTabbedPane
Returns the index of the tab for the specified tab component.
IndexOutOfBoundsException
- Exception Class in
java.lang
Thrown to indicate that an index of some sort (such as to an array, to a
 string, or to a vector) is out of range.
IndexOutOfBoundsException()
- Constructor for exception class java.lang.
IndexOutOfBoundsException
Constructs an
IndexOutOfBoundsException
with no detail message.
IndexOutOfBoundsException(int)
- Constructor for exception class java.lang.
IndexOutOfBoundsException
Constructs a new
IndexOutOfBoundsException
class with an
 argument indicating the illegal index.
IndexOutOfBoundsException(long)
- Constructor for exception class java.lang.
IndexOutOfBoundsException
Constructs a new
IndexOutOfBoundsException
class with an
 argument indicating the illegal index.
IndexOutOfBoundsException(String)
- Constructor for exception class java.lang.
IndexOutOfBoundsException
Constructs an
IndexOutOfBoundsException
with the specified detail
 message.
indexToLocation(int)
- Method in class javax.swing.
JList
Returns the origin of the specified item in the list's coordinate
 system.
indexToLocation(JList<?>, int)
- Method in class javax.swing.plaf.basic.
BasicListUI
Returns the origin in the given
JList
, of the specified item,
 in the list's coordinate system.
indexToLocation(JList<?>, int)
- Method in class javax.swing.plaf.
ListUI
Returns the origin in the given
JList
, of the specified item,
 in the list's coordinate system.
indexToLocation(JList<?>, int)
- Method in class javax.swing.plaf.multi.
MultiListUI
Invokes the
indexToLocation
method on each UI handled by this object.
IndexTree
- Interface in
com.sun.source.doctree
A tree node for an
@index
inline tag.
INDIC_SIYAQ_NUMBERS
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Indic Siyaq Numbers" Unicode
 character block.
INET
- Enum constant in enum class java.net.
StandardProtocolFamily
Internet Protocol Version 4 (IPv4)
Inet4Address
- Class in
java.net
This class represents an Internet Protocol version 4 (IPv4) address.
INET6
- Enum constant in enum class java.net.
StandardProtocolFamily
Internet Protocol Version 6 (IPv6)
Inet6Address
- Class in
java.net
This class represents an Internet Protocol version 6 (IPv6) address.
InetAddress
- Class in
java.net
This class represents an Internet Protocol (IP) address.
InetAddress Caching
- Search tag in class java.net.InetAddress
Section
inetAddresses()
- Method in class java.net.
NetworkInterface
Get a Stream of all or a subset of the InetAddresses bound to this
 network interface.
InetAddressResolver
- Interface in
java.net.spi
This interface defines operations for looking up host names and IP addresses.
InetAddressResolver.LookupPolicy
- Class in
java.net.spi
A
LookupPolicy
object describes characteristics that can be applied to a lookup operation.
InetAddressResolverProvider
- Class in
java.net.spi
Service-provider class for
InetAddress resolvers
.
InetAddressResolverProvider()
- Constructor for class java.net.spi.
InetAddressResolverProvider
Creates a new instance of
InetAddressResolverProvider
.
InetAddressResolverProvider.Configuration
- Interface in
java.net.spi
A
Configuration
object is supplied to the
InetAddressResolverProvider.get(Configuration)
method when
 setting the system-wide resolver.
InetSocketAddress
- Class in
java.net
This class implements an IP Socket Address (IP address + port number)
 It can also be a pair (hostname + port number), in which case an attempt
 will be made to resolve the hostname.
InetSocketAddress(int)
- Constructor for class java.net.
InetSocketAddress
Creates a socket address where the IP address is the wildcard address
 and the port number a specified value.
InetSocketAddress(String, int)
- Constructor for class java.net.
InetSocketAddress
Creates a socket address from a hostname and a port number.
InetSocketAddress(InetAddress, int)
- Constructor for class java.net.
InetSocketAddress
Creates a socket address from an IP address and a port number.
inf
- Variable in class java.util.zip.
InflaterInputStream
Decompressor for this stream.
inf
- Variable in class java.util.zip.
InflaterOutputStream
Decompressor for this stream.
inferBinaryName(JavaFileManager.Location, JavaFileObject)
- Method in class javax.tools.
ForwardingJavaFileManager
inferBinaryName(JavaFileManager.Location, JavaFileObject)
- Method in interface javax.tools.
JavaFileManager
Infers a binary name of a file object based on a package-oriented location.
inferModuleName(JavaFileManager.Location)
- Method in class javax.tools.
ForwardingJavaFileManager
inferModuleName(JavaFileManager.Location)
- Method in interface javax.tools.
JavaFileManager
Infer the name of the module from its location, as returned by
getLocationForModule
or
listModuleLocations
.
inflate(byte[])
- Method in class java.util.zip.
Inflater
Uncompresses bytes into specified buffer.
inflate(byte[], int, int)
- Method in class java.util.zip.
Inflater
Uncompresses bytes into specified buffer.
inflate(ByteBuffer)
- Method in class java.util.zip.
Inflater
Uncompresses bytes into specified buffer.
Inflater
- Class in
java.util.zip
This class provides support for general purpose decompression using the
 popular ZLIB compression library.
Inflater()
- Constructor for class java.util.zip.
Inflater
Creates a new decompressor.
Inflater(boolean)
- Constructor for class java.util.zip.
Inflater
Creates a new decompressor.
InflaterInputStream
- Class in
java.util.zip
This class implements a stream filter for uncompressing data in the
 "deflate" compression format.
InflaterInputStream(InputStream)
- Constructor for class java.util.zip.
InflaterInputStream
Creates a new input stream with a default decompressor and buffer size.
InflaterInputStream(InputStream, Inflater)
- Constructor for class java.util.zip.
InflaterInputStream
Creates a new input stream with the specified decompressor and a
 default buffer size.
InflaterInputStream(InputStream, Inflater, int)
- Constructor for class java.util.zip.
InflaterInputStream
Creates a new input stream with the specified decompressor and
 buffer size.
InflaterOutputStream
- Class in
java.util.zip
Implements an output stream filter for uncompressing data stored in the
 "deflate" compression format.
InflaterOutputStream(OutputStream)
- Constructor for class java.util.zip.
InflaterOutputStream
Creates a new output stream with a default decompressor and buffer
 size.
InflaterOutputStream(OutputStream, Inflater)
- Constructor for class java.util.zip.
InflaterOutputStream
Creates a new output stream with the specified decompressor and a
 default buffer size.
InflaterOutputStream(OutputStream, Inflater, int)
- Constructor for class java.util.zip.
InflaterOutputStream
Creates a new output stream with the specified decompressor and
 buffer size.
info
- Static variable in class java.awt.
SystemColor
The color rendered for the background of tooltips or spot help.
info()
- Method in class java.lang.
Process
Returns a snapshot of information about the process.
info()
- Method in interface java.lang.
ProcessHandle
Returns a snapshot of information about the process.
info(String)
- Method in class java.util.logging.
Logger
Log an INFO message.
info(Supplier<String>)
- Method in class java.util.logging.
Logger
Log a INFO message, which is only to be constructed if the logging
 level is such that the message will actually be logged.
Info(Class<?>)
- Constructor for class javax.sound.sampled.
Line.Info
Constructs an info object that describes a line of the specified
 class.
Info(Class<?>, String, boolean)
- Constructor for class javax.sound.sampled.
Port.Info
Constructs a port's info object from the information given.
Info(Class<?>, AudioFormat)
- Constructor for class javax.sound.sampled.
DataLine.Info
Constructs a data line's info object from the specified information,
 which includes a single audio format.
Info(Class<?>, AudioFormat[], int, int)
- Constructor for class javax.sound.sampled.
DataLine.Info
Constructs a data line's info object from the specified information,
 which includes a set of supported audio formats and a range for the
 buffer size.
Info(Class<?>, AudioFormat, int)
- Constructor for class javax.sound.sampled.
DataLine.Info
Constructs a data line's info object from the specified information,
 which includes a single audio format and a desired buffer size.
Info(String, String, String, String)
- Constructor for class javax.sound.midi.
MidiDevice.Info
Constructs a device info object.
Info(String, String, String, String)
- Constructor for class javax.sound.sampled.
Mixer.Info
Constructs a mixer's info object, passing it the given textual
 information.
INFO
- Enum constant in enum class com.sun.net.httpserver.
SimpleFileServer.OutputLevel
Used to specify the informative log message output level.
INFO
- Enum constant in enum class java.awt.
TrayIcon.MessageType
An information message
INFO
- Enum constant in enum class java.lang.
System.Logger.Level
INFO
level: usually used to log information messages.
INFO
- Static variable in class java.awt.
SystemColor
The array index for the
SystemColor.info
system color.
INFO
- Static variable in class java.util.logging.
Level
INFO is a message level for informational messages.
INFO
- Static variable in class javax.management.
MBeanOperationInfo
Indicates that the operation is read-like:
 it returns information but does not change any state.
INFO_TEXT
- Static variable in class java.awt.
SystemColor
The array index for the
SystemColor.infoText
system color.
inFontTag()
- Method in class javax.swing.text.html.
MinimalHTMLWriter
Returns true if we are currently in a <font> tag.
inForkJoinPool()
- Static method in class java.util.concurrent.
ForkJoinTask
Returns
true
if the current thread is a
ForkJoinWorkerThread
executing as a ForkJoinPool computation.
INFORMATION
- Static variable in class javax.security.auth.callback.
ConfirmationCallback
INFORMATION message type.
INFORMATION
- Static variable in class javax.security.auth.callback.
TextOutputCallback
Information message.
INFORMATION_DIALOG
- Static variable in class javax.swing.
JRootPane
Constant used for the windowDecorationStyle property.
INFORMATION_MESSAGE
- Static variable in class javax.swing.
JOptionPane
Used for information messages.
infoText
- Static variable in class java.awt.
SystemColor
The color rendered for the text of tooltips or spot help.
INHERIT
- Enum constant in enum class java.lang.
ProcessBuilder.Redirect.Type
The type of
Redirect.INHERIT
.
INHERIT
- Static variable in class java.lang.
ProcessBuilder.Redirect
Indicates that subprocess I/O source or destination will be the
 same as those of the current process.
INHERIT_DOC
- Enum constant in enum class com.sun.source.doctree.
DocTree.Kind
Used for instances of
InheritDocTree
representing an
@inheritDoc
tag.
INHERIT_ONLY
- Enum constant in enum class java.nio.file.attribute.
AclEntryFlag
Can be placed on a directory but does not apply to the directory,
 only to newly created files/directories as specified by the
AclEntryFlag.FILE_INHERIT
and
AclEntryFlag.DIRECTORY_INHERIT
flags.
InheritableThreadLocal<T>
- Class in
java.lang
This class extends
ThreadLocal
to provide inheritance of values
 from parent thread to child thread: when a child thread is created, the
 child receives initial values for all inheritable thread-local variables
 for which the parent has values.
InheritableThreadLocal()
- Constructor for class java.lang.
InheritableThreadLocal
Creates an inheritable thread local variable.
Inheritance
- Search tag in class java.lang.ScopedValue
Section
Inheritance when creating threads
- Search tag in class java.lang.Thread
Section
InheritDocTree
- Interface in
com.sun.source.doctree
A tree node for an
@inheritDoc
inline tag.
Inherited
- Annotation Interface in
java.lang.annotation
Indicates that an annotation interface is automatically inherited.
INHERITED
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Inherited".
inheritedChannel()
- Static method in class java.lang.
System
Returns the channel inherited from the entity that created this
 Java virtual machine.
inheritedChannel()
- Method in class java.nio.channels.spi.
SelectorProvider
Returns the channel inherited from the entity that created this
 Java virtual machine.
inheritInheritableThreadLocals(boolean)
- Method in interface java.lang.
Thread.Builder
Sets whether the thread inherits the initial values of
inheritable-thread-local
variables from the
 constructing thread.
inheritInheritableThreadLocals(boolean)
- Method in interface java.lang.
Thread.Builder.OfPlatform
inheritInheritableThreadLocals(boolean)
- Method in interface java.lang.
Thread.Builder.OfVirtual
inheritIO()
- Method in class java.lang.
ProcessBuilder
Sets the source and destination for subprocess standard I/O
 to be the same as those of the current Java process.
inHitRegion(int, int)
- Method in class javax.swing.tree.
DefaultTreeCellEditor
Returns true if the passed in location is a valid mouse location
 to start editing from.
init()
- Method in class java.applet.
Applet
Deprecated.
Called by the browser or applet viewer to inform this applet that it has
 been loaded into the system.
init(boolean)
- Method in interface java.security.cert.
CertPathChecker
Initializes the internal state of this
CertPathChecker
.
init(boolean)
- Method in class java.security.cert.
PKIXCertPathChecker
Initializes the internal state of this
PKIXCertPathChecker
.
init(byte[])
- Method in class java.security.
AlgorithmParameters
Imports the specified parameters and decodes them according to the
 primary decoding format for parameters.
init(byte[], String)
- Method in class java.security.
AlgorithmParameters
Imports the parameters from
params
and decodes them
 according to the specified decoding scheme.
init(int)
- Method in class java.security.
AlgorithmParameterGenerator
Initializes this parameter generator for a certain size.
init(int)
- Method in class javax.crypto.
KeyGenerator
Initializes this key generator for a certain keysize.
init(int, Certificate)
- Method in class javax.crypto.
Cipher
Initializes this
Cipher
object with the public key from the given
 certificate.
init(int, Certificate, SecureRandom)
- Method in class javax.crypto.
Cipher
Initializes this
Cipher
object with the public key from the given
 certificate and a source of randomness.
init(int, Key)
- Method in class javax.crypto.
Cipher
Initializes this
Cipher
object with a key.
init(int, Key, AlgorithmParameters)
- Method in class javax.crypto.
Cipher
Initializes this
Cipher
object with a key and a set of algorithm
 parameters.
init(int, Key, AlgorithmParameters, SecureRandom)
- Method in class javax.crypto.
Cipher
Initializes this
Cipher
object with a key, a set of algorithm
 parameters, and a source of randomness.
init(int, Key, SecureRandom)
- Method in class javax.crypto.
Cipher
Initializes this
Cipher
object with a key and a
 source of randomness.
init(int, Key, AlgorithmParameterSpec)
- Method in class javax.crypto.
Cipher
Initializes this
Cipher
object with a key and a set of algorithm
 parameters.
init(int, Key, AlgorithmParameterSpec, SecureRandom)
- Method in class javax.crypto.
Cipher
Initializes this
Cipher
object with a key, a set of algorithm
 parameters, and a source of randomness.
init(int, SecureRandom)
- Method in class java.security.
AlgorithmParameterGenerator
Initializes this parameter generator for a certain size and source
 of randomness.
init(int, SecureRandom)
- Method in class javax.crypto.
KeyGenerator
Initializes this key generator for a certain keysize, using a
 user-provided source of randomness.
init(JavacTask, String...)
- Method in interface com.sun.source.util.
Plugin
Initializes the plug-in for a given compilation task.
init(String, Icon)
- Method in class javax.swing.
AbstractButton
Initialization of the
AbstractButton
.
init(String, Icon)
- Method in class javax.swing.
JMenuItem
Initializes the menu item with the specified text and icon.
init(Key)
- Method in class javax.crypto.
ExemptionMechanism
Initializes this exemption mechanism with a key.
init(Key)
- Method in class javax.crypto.
KeyAgreement
Initializes this key agreement with the given key, which is required to
 contain all the algorithm parameters required for this key agreement.
init(Key)
- Method in class javax.crypto.
Mac
Initializes this
Mac
object with the given key.
init(Key, AlgorithmParameters)
- Method in class javax.crypto.
ExemptionMechanism
Initializes this exemption mechanism with a key and a set of algorithm
 parameters.
init(Key, SecureRandom)
- Method in class javax.crypto.
KeyAgreement
Initializes this key agreement with the given key and source of
 randomness.
init(Key, AlgorithmParameterSpec)
- Method in class javax.crypto.
ExemptionMechanism
Initializes this exemption mechanism with a key and a set of algorithm
 parameters.
init(Key, AlgorithmParameterSpec)
- Method in class javax.crypto.
KeyAgreement
Initializes this key agreement with the given key and set of
 algorithm parameters.
init(Key, AlgorithmParameterSpec)
- Method in class javax.crypto.
Mac
Initializes this
Mac
object with the given key and
 algorithm parameters.
init(Key, AlgorithmParameterSpec, SecureRandom)
- Method in class javax.crypto.
KeyAgreement
Initializes this key agreement with the given key, set of
 algorithm parameters, and source of randomness.
init(KeyStore)
- Method in class javax.net.ssl.
TrustManagerFactory
Initializes this factory with a source of certificate
 authorities and related trust material.
init(KeyStore, char[])
- Method in class javax.net.ssl.
KeyManagerFactory
Initializes this factory with a source of key material.
init(SecureRandom)
- Method in class javax.crypto.
KeyGenerator
Initializes this key generator.
init(AlgorithmParameterSpec)
- Method in class java.security.
AlgorithmParameterGenerator
Initializes this parameter generator with a set of algorithm-specific
 parameter generation values.
init(AlgorithmParameterSpec)
- Method in class java.security.
AlgorithmParameters
Initializes this parameter object using the parameters
 specified in
paramSpec
.
init(AlgorithmParameterSpec)
- Method in class javax.crypto.
KeyGenerator
Initializes this key generator with the specified parameter set.
init(AlgorithmParameterSpec, SecureRandom)
- Method in class java.security.
AlgorithmParameterGenerator
Initializes this parameter generator with a set of algorithm-specific
 parameter generation values.
init(AlgorithmParameterSpec, SecureRandom)
- Method in class javax.crypto.
KeyGenerator
Initializes this key generator with the specified parameter
 set and a user-provided source of randomness.
init(Hashtable<?, ?>)
- Method in class javax.naming.
InitialContext
Initializes the initial context using the supplied environment.
init(Locale, Reporter)
- Method in interface jdk.javadoc.doclet.
Doclet
Initializes this doclet with the given locale and error reporter.
init(Locale, Reporter)
- Method in class jdk.javadoc.doclet.
StandardDoclet
init(ProcessingEnvironment)
- Method in class javax.annotation.processing.
AbstractProcessor
Initializes the processor with the processing environment by
 setting the
processingEnv
field to the value of the
processingEnv
argument.
init(ProcessingEnvironment)
- Method in interface javax.annotation.processing.
Processor
Initializes the processor with the processing environment.
init(KeyManager[], TrustManager[], SecureRandom)
- Method in class javax.net.ssl.
SSLContext
Initializes this context.
init(ManagerFactoryParameters)
- Method in class javax.net.ssl.
KeyManagerFactory
Initializes this factory with a source of provider-specific
 key material.
init(ManagerFactoryParameters)
- Method in class javax.net.ssl.
TrustManagerFactory
Initializes this factory with a source of provider-specific
 trust material.
init(StateEditable, String)
- Method in class javax.swing.undo.
StateEdit
Initialize the state edit.
init(TransformParameterSpec)
- Method in class javax.xml.crypto.dsig.
TransformService
Initializes this
TransformService
with the specified
 parameters.
init(XMLStructure, XMLCryptoContext)
- Method in class javax.xml.crypto.dsig.
TransformService
Initializes this
TransformService
with the specified
 parameters and document context.
init(DocletEnvironment, Doclet)
- Method in interface jdk.javadoc.doclet.
Taglet
Initializes this taglet with the given doclet environment and doclet.
INIT_NAME
- Static variable in class java.lang.constant.
ConstantDescs
The special name of instance initialization methods, "<init>".
initCause(Throwable)
- Method in exception class java.lang.
Throwable
Initializes the
cause
of this throwable to the specified value.
initCause(Throwable)
- Method in exception class java.net.http.
WebSocketHandshakeException
initCause(Throwable)
- Method in exception class javax.naming.
NamingException
Initializes the cause of this exception to the specified value.
initCause(Throwable)
- Method in exception class javax.xml.transform.
TransformerException
Initializes the
cause
of this throwable to the specified value.
initClassDefaults(UIDefaults)
- Method in class javax.swing.plaf.basic.
BasicLookAndFeel
Populates
table
with mappings from
uiClassID
to the
 fully qualified name of the ui class.
initClassDefaults(UIDefaults)
- Method in class javax.swing.plaf.metal.
MetalLookAndFeel
Populates
table
with mappings from
uiClassID
to
 the fully qualified name of the ui class.
initComponentDefaults(UIDefaults)
- Method in class javax.swing.plaf.basic.
BasicLookAndFeel
Populates
table
with the defaults for the basic look and
 feel.
initComponentDefaults(UIDefaults)
- Method in class javax.swing.plaf.metal.
MetalLookAndFeel
Populates
table
with the defaults for metal.
initEvent(String, boolean, boolean)
- Method in interface org.w3c.dom.events.
Event
The
initEvent
method is used to initialize the value of an
Event
created through the
DocumentEvent
interface.
INITIAL_CONTEXT_FACTORY
- Static variable in interface javax.naming.
Context
Constant that holds the name of the environment property
 for specifying the initial context factory to use.
INITIAL_QUOTE_PUNCTUATION
- Static variable in class java.lang.
Character
General category "Pi" in the Unicode specification.
INITIAL_SELECTION_VALUE_PROPERTY
- Static variable in class javax.swing.
JOptionPane
Bound property name for
initialSelectionValue
.
INITIAL_VALUE_PROPERTY
- Static variable in class javax.swing.
JOptionPane
Bound property name for
initialValue
.
InitialContext
- Class in
javax.naming
This class is the starting context for performing naming operations.
InitialContext()
- Constructor for class javax.naming.
InitialContext
Constructs an initial context.
InitialContext(boolean)
- Constructor for class javax.naming.
InitialContext
Constructs an initial context with the option of not
 initializing it.
InitialContext(Hashtable<?, ?>)
- Constructor for class javax.naming.
InitialContext
Constructs an initial context using the supplied environment.
InitialContextFactory
- Interface in
javax.naming.spi
This interface represents a factory that creates an initial context.
InitialContextFactoryBuilder
- Interface in
javax.naming.spi
This interface represents a builder that creates initial context factories.
InitialDirContext
- Class in
javax.naming.directory
This class is the starting context for performing
 directory operations.
InitialDirContext()
- Constructor for class javax.naming.directory.
InitialDirContext
Constructs an initial DirContext.
InitialDirContext(boolean)
- Constructor for class javax.naming.directory.
InitialDirContext
Constructs an initial DirContext with the option of not
 initializing it.
InitialDirContext(Hashtable<?, ?>)
- Constructor for class javax.naming.directory.
InitialDirContext
Constructs an initial DirContext using the supplied environment.
initialFocusComponent
- Variable in class javax.swing.plaf.basic.
BasicOptionPaneUI
Component to receive focus when messaged with selectInitialValue.
initialize()
- Method in class java.beans.beancontext.
BeanContextServicesSupport
called by BeanContextSupport superclass during construction and
 deserialization to initialize subclass transient state.
initialize()
- Method in class java.beans.beancontext.
BeanContextSupport
protected method called from constructor and readObject to initialize
 transient state of BeanContextSupport instance.
initialize()
- Method in class javax.swing.
LookAndFeel
Initializes the look and feel.
initialize()
- Method in class javax.swing.plaf.nimbus.
NimbusLookAndFeel
Called by UIManager when this look and feel is installed.
initialize()
- Method in class javax.swing.plaf.synth.
SynthLookAndFeel
Called by UIManager when this look and feel is installed.
initialize(int)
- Method in class java.security.
KeyPairGenerator
Initializes the key pair generator for a certain keysize using
 a default parameter set and the
SecureRandom
implementation of the highest-priority installed provider as the source
 of randomness.
initialize(int, boolean, SecureRandom)
- Method in interface java.security.interfaces.
DSAKeyPairGenerator
Initializes the key pair generator for a given modulus length
 (instead of parameters), and an optional SecureRandom bit source.
initialize(int, SecureRandom)
- Method in class java.security.
KeyPairGenerator
Initializes the key pair generator for a certain keysize with
 the given source of randomness (and a default parameter set).
initialize(int, SecureRandom)
- Method in class java.security.
KeyPairGeneratorSpi
Initializes the key pair generator for a certain keysize, using
 the default parameter set.
initialize(Applet, BeanContext)
- Method in interface java.beans.
AppletInitializer
Deprecated.
If passed to the appropriate variant of java.beans.Beans.instantiate
 this method will be called in order to associate the newly instantiated
 Applet (JavaBean) with its AppletContext, AppletStub, and Container.
initialize(Class<?>, Object, Object, Encoder)
- Method in class java.beans.
DefaultPersistenceDelegate
This default implementation of the
initialize
method assumes
 all state held in objects of this type is exposed via the
 matching pairs of "setter" and "getter" methods in the order
 they are returned by the Introspector.
initialize(Class<?>, Object, Object, Encoder)
- Method in class java.beans.
PersistenceDelegate
Produce a series of statements with side effects on
newInstance
so that the new instance becomes
equivalent
to
oldInstance
.
initialize(MethodHandle)
- Method in interface jdk.dynalink.
RelinkableCallSite
Invoked by dynamic linker to initialize the relinkable call site by
 setting a relink-and-invoke method handle.
initialize(MethodHandle)
- Method in class jdk.dynalink.support.
AbstractRelinkableCallSite
initialize(DSAParams, SecureRandom)
- Method in interface java.security.interfaces.
DSAKeyPairGenerator
Initializes the key pair generator using the DSA family parameters
 (p,q and g) and an optional SecureRandom bit source.
initialize(AlgorithmParameterSpec)
- Method in class java.security.
KeyPairGenerator
Initializes the key pair generator using the specified parameter
 set and the
SecureRandom
implementation of the highest-priority installed provider as the source
 of randomness.
initialize(AlgorithmParameterSpec, SecureRandom)
- Method in class java.security.
KeyPairGenerator
Initializes the key pair generator with the given parameter
 set and source of randomness.
initialize(AlgorithmParameterSpec, SecureRandom)
- Method in class java.security.
KeyPairGeneratorSpi
Initializes the key pair generator using the specified parameter
 set and user-provided source of randomness.
initialize(Subject, CallbackHandler, Map<String, ?>, Map<String, ?>)
- Method in class com.sun.security.auth.module.
JndiLoginModule
Initialize this
LoginModule
.
initialize(Subject, CallbackHandler, Map<String, ?>, Map<String, ?>)
- Method in class com.sun.security.auth.module.
KeyStoreLoginModule
Initialize this
LoginModule
.
initialize(Subject, CallbackHandler, Map<String, ?>, Map<String, ?>)
- Method in class com.sun.security.auth.module.
Krb5LoginModule
Initialize this
LoginModule
.
initialize(Subject, CallbackHandler, Map<String, ?>, Map<String, ?>)
- Method in class com.sun.security.auth.module.
LdapLoginModule
Initialize this
LoginModule
.
initialize(Subject, CallbackHandler, Map<String, ?>, Map<String, ?>)
- Method in class com.sun.security.auth.module.
NTLoginModule
Initialize this
LoginModule
.
initialize(Subject, CallbackHandler, Map<String, ?>, Map<String, ?>)
- Method in class com.sun.security.auth.module.
UnixLoginModule
Initialize this
LoginModule
.
initialize(Subject, CallbackHandler, Map<String, ?>, Map<String, ?>)
- Method in interface javax.security.auth.spi.
LoginModule
Initialize this
LoginModule
.
initializeAutoscrolling(Point)
- Method in class java.awt.dnd.
DropTarget
initialize autoscrolling
initializeBeanContextResources()
- Method in class java.beans.beancontext.
BeanContextChildSupport
This method may be overridden by subclasses to provide their own
 initialization behaviors.
initializeBeanContextResources()
- Method in class java.beans.beancontext.
BeanContextServicesSupport
called from setBeanContext to notify a BeanContextChild
 to allocate resources obtained from the nesting BeanContext.
initializeDesktopProperties()
- Method in class java.awt.
Toolkit
initializeDesktopProperties
initializeLocalVars()
- Method in class javax.swing.
JTable
Initializes table properties to their default values.
initializeLocalVars()
- Method in class javax.swing.table.
JTableHeader
Initializes the local variables and properties with default values.
InitialLdapContext
- Class in
javax.naming.ldap
This class is the starting context for performing
 LDAPv3-style extended operations and controls.
InitialLdapContext()
- Constructor for class javax.naming.ldap.
InitialLdapContext
Constructs an initial context using no environment properties or
 connection request controls.
InitialLdapContext(Hashtable<?, ?>, Control[])
- Constructor for class javax.naming.ldap.
InitialLdapContext
Constructs an initial context
 using environment properties and connection request controls.
initialSelectionValue
- Variable in class javax.swing.
JOptionPane
Initial value to select in
selectionValues
.
initialSubString(AttributeValueExp, StringValueExp)
- Static method in class javax.management.
Query
Returns a query expression that represents a matching constraint on
 a string argument.
initialValue
- Variable in class javax.swing.
JOptionPane
Value that should be initially selected in
options
.
initialValue()
- Method in class java.lang.
ThreadLocal
Returns the current thread's "initial value" for this
 thread-local variable.
INITIATE_AND_ACCEPT
- Static variable in interface org.ietf.jgss.
GSSCredential
Credential usage flag requesting that it be usable
 for both context initiation and acceptance.
INITIATE_ONLY
- Static variable in interface org.ietf.jgss.
GSSCredential
Credential usage flag requesting that it be usable
 for context initiation only.
initMouseEvent(String, boolean, boolean, AbstractView, int, int, int, int, int, boolean, boolean, boolean, boolean, short, EventTarget)
- Method in interface org.w3c.dom.events.
MouseEvent
The
initMouseEvent
method is used to initialize the value
 of a
MouseEvent
created through the
DocumentEvent
interface.
initMutationEvent(String, boolean, boolean, Node, String, String, String, short)
- Method in interface org.w3c.dom.events.
MutationEvent
The
initMutationEvent
method is used to initialize the
 value of a
MutationEvent
created through the
DocumentEvent
interface.
initParams()
- Method in class javax.sql.rowset.
BaseRowSet
Performs the necessary internal configurations and initializations
 to allow any JDBC
RowSet
implementation to start using
 the standard facilities provided by a
BaseRowSet
instance.
initSecContext(byte[], int, int)
- Method in interface org.ietf.jgss.
GSSContext
Called by the context initiator to start the context creation
 phase and process any tokens generated
 by the peer's
acceptSecContext
method.
initSecContext(InputStream, OutputStream)
- Method in interface org.ietf.jgss.
GSSContext
Deprecated.
The stream-based methods have been removed from RFC 8353.
 Use
GSSContext.initSecContext(byte[], int, int)
instead.
initSign(PrivateKey)
- Method in class java.security.
Signature
Initialize this object for signing.
initSign(PrivateKey, SecureRandom)
- Method in class java.security.
Signature
Initialize this object for signing.
initSystemColorDefaults(UIDefaults)
- Method in class javax.swing.plaf.basic.
BasicLookAndFeel
Populates
table
with system colors.
initSystemColorDefaults(UIDefaults)
- Method in class javax.swing.plaf.metal.
MetalLookAndFeel
Populates
table
with system colors.
initUIEvent(String, boolean, boolean, AbstractView, int)
- Method in interface org.w3c.dom.events.
UIEvent
The
initUIEvent
method is used to initialize the value of
 a
UIEvent
created through the
DocumentEvent
interface.
initVerify(Certificate)
- Method in class java.security.
Signature
Initializes this object for verification, using the public key from
 the given certificate.
initVerify(PublicKey)
- Method in class java.security.
Signature
Initializes this object for verification.
INK_SET_CMYK
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A value to be used with the "InkSet" tag.
INK_SET_NOT_CMYK
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A value to be used with the "InkSet" tag.
InlineTagTree
- Interface in
com.sun.source.doctree
A tree node used as the base class for the different types of
 inline tags.
InlineView
- Class in
javax.swing.text.html
Displays the
inline element
styles
 based upon css attributes.
InlineView(Element)
- Constructor for class javax.swing.text.html.
InlineView
Constructs a new view wrapped on an element.
INNER_CLASS
- Enum constant in enum class java.lang.reflect.
AccessFlag.Location
Inner class location.
INNER_JOIN
- Static variable in interface javax.sql.rowset.
JoinRowSet
An ANSI-style
JOIN
providing a inner join between two tables.
input
- Variable in class javax.imageio.
ImageReader
The
ImageInputStream
or other
Object
by
setInput
and retrieved
 by
getInput
.
INPUT
- Static variable in class javax.swing.text.html.
HTML.Tag
Tag <input>
INPUT_METHOD_EVENT_MASK
- Static variable in class java.awt.
AWTEvent
The event mask for selecting input method events.
INPUT_METHOD_FIRST
- Static variable in class java.awt.event.
InputMethodEvent
Marks the first integer id for the range of input method event ids.
INPUT_METHOD_HIGHLIGHT
- Static variable in class java.awt.font.
TextAttribute
Attribute key for input method highlight styles.
INPUT_METHOD_LAST
- Static variable in class java.awt.event.
InputMethodEvent
Marks the last integer id for the range of input method event ids.
INPUT_METHOD_SEGMENT
- Static variable in class java.text.
AttributedCharacterIterator.Attribute
Attribute key for input method segments.
INPUT_METHOD_TEXT_CHANGED
- Static variable in class java.awt.event.
InputMethodEvent
The event type indicating changed input method text.
INPUT_METHOD_UNDERLINE
- Static variable in class java.awt.font.
TextAttribute
Attribute key for input method underlines.
INPUT_STREAM(String)
- Constructor for class javax.print.
DocFlavor.INPUT_STREAM
Constructs a new doc flavor with the given MIME type and a print data
 representation class name of
"java.io.InputStream"
(byte
 stream).
INPUT_TRAY_MISSING
- Static variable in class javax.print.attribute.standard.
PrinterStateReason
One or more input trays are not in the device.
INPUT_VALUE_PROPERTY
- Static variable in class javax.swing.
JOptionPane
Bound property name for
inputValue
.
inputClass
- Variable in class javax.imageio.spi.
ImageInputStreamSpi
A
Class
object indicating the legal object type
 for use by the
createInputStreamInstance
method.
inputComponent
- Variable in class javax.swing.plaf.basic.
BasicOptionPaneUI
JComponent provide for input if optionPane.getWantsInput() returns
 true.
InputContext
- Class in
java.awt.im
Provides methods to control text input facilities such as input
 methods and keyboard layouts.
InputContext()
- Constructor for class java.awt.im.
InputContext
Constructs an InputContext.
InputEvent
- Class in
java.awt.event
The root event class for all component-level input events.
InputMap
- Class in
javax.swing
InputMap
provides a binding between an input event (currently only
KeyStroke
s are used) and an
Object
.
InputMap()
- Constructor for class javax.swing.
InputMap
Creates an
InputMap
with no parent and no mappings.
InputMapUIResource
- Class in
javax.swing.plaf
A subclass of javax.swing.InputMap that implements UIResource.
InputMapUIResource()
- Constructor for class javax.swing.plaf.
InputMapUIResource
Constructs an
InputMapUIResource
.
InputMethod
- Interface in
java.awt.im.spi
Defines the interface for an input method that supports complex text input.
InputMethodContext
- Interface in
java.awt.im.spi
Provides methods that input methods
 can use to communicate with their client components or to request
 other services.
InputMethodDescriptor
- Interface in
java.awt.im.spi
Defines methods that provide sufficient information about an input method
 to enable selection and loading of that input method.
InputMethodEvent
- Class in
java.awt.event
Input method events contain information about text that is being
 composed using an input method.
InputMethodEvent(Component, int, long, AttributedCharacterIterator, int, TextHitInfo, TextHitInfo)
- Constructor for class java.awt.event.
InputMethodEvent
Constructs an
InputMethodEvent
with the specified
 source component, type, time, text, caret, and visiblePosition.
InputMethodEvent(Component, int, TextHitInfo, TextHitInfo)
- Constructor for class java.awt.event.
InputMethodEvent
Constructs an
InputMethodEvent
with the
 specified source component, type, caret, and visiblePosition.
InputMethodEvent(Component, int, AttributedCharacterIterator, int, TextHitInfo, TextHitInfo)
- Constructor for class java.awt.event.
InputMethodEvent
Constructs an
InputMethodEvent
with the specified
 source component, type, text, caret, and visiblePosition.
InputMethodHighlight
- Class in
java.awt.im
An InputMethodHighlight is used to describe the highlight
 attributes of text being composed.
InputMethodHighlight(boolean, int)
- Constructor for class java.awt.im.
InputMethodHighlight
Constructs an input method highlight record.
InputMethodHighlight(boolean, int, int)
- Constructor for class java.awt.im.
InputMethodHighlight
Constructs an input method highlight record.
InputMethodHighlight(boolean, int, int, Map<TextAttribute, ?>)
- Constructor for class java.awt.im.
InputMethodHighlight
Constructs an input method highlight record.
InputMethodListener
- Interface in
java.awt.event
The listener interface for receiving input method events.
InputMethodRequests
- Interface in
java.awt.im
InputMethodRequests defines the requests that a text editing component
 has to handle in order to work with input methods.
inputMethodTextChanged(InputMethodEvent)
- Method in class java.awt.
AWTEventMulticaster
Handles the inputMethodTextChanged event by invoking the
 inputMethodTextChanged methods on listener-a and listener-b.
inputMethodTextChanged(InputMethodEvent)
- Method in interface java.awt.event.
InputMethodListener
Invoked when the text entered through an input method has changed.
InputMismatchException
- Exception Class in
java.util
Thrown by a
Scanner
to indicate that the token
 retrieved does not match the pattern for the expected type, or
 that the token is out of range for the expected type.
InputMismatchException()
- Constructor for exception class java.util.
InputMismatchException
Constructs an
InputMismatchException
with
null
as its error message string.
InputMismatchException(String)
- Constructor for exception class java.util.
InputMismatchException
Constructs an
InputMismatchException
, saving a reference
 to the error message string
s
for later retrieval by the
getMessage
method.
inputReader()
- Method in class java.lang.
Process
Returns a
BufferedReader
connected to the standard
 output of the process.
inputReader(Charset)
- Method in class java.lang.
Process
Returns a
BufferedReader
connected to the
 standard output of this process using a Charset.
InputSource
- Class in
org.xml.sax
A single input source for an XML entity.
InputSource()
- Constructor for class org.xml.sax.
InputSource
Zero-argument default constructor.
InputSource(InputStream)
- Constructor for class org.xml.sax.
InputSource
Create a new input source with a byte stream.
InputSource(Reader)
- Constructor for class org.xml.sax.
InputSource
Create a new input source with a character stream.
InputSource(String)
- Constructor for class org.xml.sax.
InputSource
Create a new input source with a system identifier.
InputStream
- Class in
java.io
This abstract class is the superclass of all classes representing
 an input stream of bytes.
InputStream()
- Constructor for class java.io.
InputStream
Constructor for subclasses to call.
InputStreamReader
- Class in
java.io
An InputStreamReader is a bridge from byte streams to character streams: It
 reads bytes and decodes them into characters using a specified
charset
.
InputStreamReader(InputStream)
- Constructor for class java.io.
InputStreamReader
Creates an InputStreamReader that uses the
default charset
.
InputStreamReader(InputStream, String)
- Constructor for class java.io.
InputStreamReader
Creates an InputStreamReader that uses the named charset.
InputStreamReader(InputStream, Charset)
- Constructor for class java.io.
InputStreamReader
Creates an InputStreamReader that uses the given charset.
InputStreamReader(InputStream, CharsetDecoder)
- Constructor for class java.io.
InputStreamReader
Creates an InputStreamReader that uses the given charset decoder.
InputSubset
- Class in
java.awt.im
Defines additional Unicode subsets for use by input methods.
inputTypes
- Variable in class javax.imageio.spi.
ImageReaderSpi
An array of
Class
objects to be returned from
getInputTypes
, initially
null
.
inputValue
- Variable in class javax.swing.
JOptionPane
Value the user has input.
InputVerifier
- Class in
javax.swing
This class provides the validation mechanism for Swing components.
InputVerifier()
- Constructor for class javax.swing.
InputVerifier
Constructor for subclasses to call.
inquireSecContext(InquireType)
- Method in interface com.sun.security.jgss.
ExtendedGSSContext
Return the mechanism-specific attribute associated with
type
.
InquireSecContextPermission
- Class in
com.sun.security.jgss
This class is used to protect various attributes of an established
 GSS security context that can be accessed using the
ExtendedGSSContext.inquireSecContext(com.sun.security.jgss.InquireType)
method.
InquireSecContextPermission(String)
- Constructor for class com.sun.security.jgss.
InquireSecContextPermission
Constructs a new
InquireSecContextPermission
object with
 the specified name.
InquireType
- Enum Class in
com.sun.security.jgss
Attribute types that can be specified as an argument of
ExtendedGSSContext.inquireSecContext(com.sun.security.jgss.InquireType)
inRange(Element)
- Method in class javax.swing.text.
AbstractWriter
This method determines whether the current element
 is in the range specified.
INSCRIPTIONAL_PAHLAVI
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Inscriptional_Pahlavi".
INSCRIPTIONAL_PAHLAVI
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Inscriptional Pahlavi" Unicode character block.
INSCRIPTIONAL_PARTHIAN
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Inscriptional_Parthian".
INSCRIPTIONAL_PARTHIAN
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Inscriptional Parthian" Unicode character block.
insert(int, boolean)
- Method in class java.lang.
StringBuffer
insert(int, boolean)
- Method in class java.lang.
StringBuilder
insert(int, char)
- Method in class java.lang.
StringBuffer
insert(int, char)
- Method in class java.lang.
StringBuilder
insert(int, char[])
- Method in class java.lang.
StringBuffer
insert(int, char[])
- Method in class java.lang.
StringBuilder
insert(int, char[], int, int)
- Method in class java.lang.
StringBuffer
insert(int, char[], int, int)
- Method in class java.lang.
StringBuilder
insert(int, double)
- Method in class java.lang.
StringBuffer
insert(int, double)
- Method in class java.lang.
StringBuilder
insert(int, float)
- Method in class java.lang.
StringBuffer
insert(int, float)
- Method in class java.lang.
StringBuilder
insert(int, int)
- Method in class java.lang.
StringBuffer
insert(int, int)
- Method in class java.lang.
StringBuilder
insert(int, int, DefaultStyledDocument.ElementSpec[], AbstractDocument.DefaultDocumentEvent)
- Method in class javax.swing.text.
DefaultStyledDocument.ElementBuffer
Inserts new content.
insert(int, long)
- Method in class java.lang.
StringBuffer
insert(int, long)
- Method in class java.lang.
StringBuilder
insert(int, CharSequence)
- Method in class java.lang.
StringBuffer
insert(int, CharSequence)
- Method in class java.lang.
StringBuilder
insert(int, CharSequence, int, int)
- Method in class java.lang.
StringBuffer
insert(int, CharSequence, int, int)
- Method in class java.lang.
StringBuilder
insert(int, Object)
- Method in class java.lang.
StringBuffer
insert(int, Object)
- Method in class java.lang.
StringBuilder
insert(int, String)
- Method in class java.lang.
StringBuffer
insert(int, String)
- Method in class java.lang.
StringBuilder
insert(int, DefaultStyledDocument.ElementSpec[])
- Method in class javax.swing.text.
DefaultStyledDocument
Inserts new elements in bulk.
insert(int, DefaultStyledDocument.ElementSpec[])
- Method in class javax.swing.text.html.
HTMLDocument
Inserts new elements in bulk.
insert(int, View)
- Method in class javax.swing.text.
View
Inserts a single child view.
insert(Component, int)
- Method in class javax.swing.
JPopupMenu
Inserts the specified component into the menu at a given
 position.
insert(MenuItem, int)
- Method in class java.awt.
Menu
Inserts a menu item into this menu
 at the specified position.
insert(String, int)
- Method in class java.awt.
Choice
Inserts the item into this choice at the specified position.
insert(String, int)
- Method in class java.awt.
Menu
Inserts a menu item with the specified label into this menu
 at the specified position.
insert(String, int)
- Method in class java.awt.
TextArea
Inserts the specified text at the specified position
 in this text area.
insert(String, int)
- Method in class javax.swing.
JMenu
Inserts a new menu item with the specified text at a
 given position.
insert(String, int)
- Method in class javax.swing.
JTextArea
Inserts the specified text at the specified position.
insert(Action, int)
- Method in class javax.swing.
JMenu
Inserts a new menu item attached to the specified
Action
object at a given position.
insert(Action, int)
- Method in class javax.swing.
JPopupMenu
Inserts a menu item for the specified
Action
object at
 a given position.
insert(JMenuItem, int)
- Method in class javax.swing.
JMenu
Inserts the specified
JMenuitem
at a given position.
insert(MutableTreeNode, int)
- Method in class javax.swing.tree.
DefaultMutableTreeNode
Removes
newChild
from its present parent (if it has a
 parent), sets the child's parent to this node, and then adds the child
 to this node's child array at index
childIndex
.
insert(MutableTreeNode, int)
- Method in interface javax.swing.tree.
MutableTreeNode
Adds
child
to the receiver at
index
.
INSERT
- Enum constant in enum class javax.swing.
DropMode
The drop location should be tracked in terms of the position
 where new data should be inserted.
INSERT
- Static variable in class java.awt.
Event
Deprecated.
The Insert key, a non-ASCII action key.
INSERT
- Static variable in interface javax.accessibility.
AccessibleTableModelChange
Identifies the insertion of new rows and/or columns.
INSERT
- Static variable in class javax.swing.event.
DocumentEvent.EventType
Insert type.
INSERT
- Static variable in class javax.swing.event.
TableModelEvent
Identifies the addition of new rows or columns.
INSERT_COLS
- Enum constant in enum class javax.swing.
DropMode
The drop location should be tracked in terms of the column index
 where new columns should be inserted to accommodate the dropped
 data.
INSERT_ROW_CONFLICT
- Static variable in interface javax.sql.rowset.spi.
SyncResolver
Indicates that a conflict occurred while the
RowSet
object was
 attempting to insert a row into the data source.
INSERT_ROWS
- Enum constant in enum class javax.swing.
DropMode
The drop location should be tracked in terms of the row index
 where new rows should be inserted to accommodate the dropped
 data.
insertAfterEnd(Element, String)
- Method in class javax.swing.text.html.
HTMLDocument
Inserts the HTML specified as a string after the end of the
 given element.
insertAfterStart(Element, String)
- Method in class javax.swing.text.html.
HTMLDocument
Inserts the HTML specified as a string at the start
 of the element.
insertArgumentLayouts(int, MemoryLayout...)
- Method in interface java.lang.foreign.
FunctionDescriptor
PREVIEW
Returns a function descriptor with the given argument layouts inserted at the given index, into the argument
 layout array of this function descriptor.
insertArguments(MethodHandle, int, Object...)
- Static method in class java.lang.invoke.
MethodHandles
Provides a target method handle with one or more
bound arguments
in advance of the method handle's invocation.
insertAtBoundary(JEditorPane, HTMLDocument, int, Element, String, HTML.Tag, HTML.Tag)
- Method in class javax.swing.text.html.
HTMLEditorKit.InsertHTMLTextAction
This is invoked when inserting at a boundary.
insertAtBoundry(JEditorPane, HTMLDocument, int, Element, String, HTML.Tag, HTML.Tag)
- Method in class javax.swing.text.html.
HTMLEditorKit.InsertHTMLTextAction
Deprecated.
As of Java 2 platform v1.3, use insertAtBoundary
insertBefore(Node, Node)
- Method in class javax.imageio.metadata.
IIOMetadataNode
Inserts the node
newChild
before the existing
 child node
refChild
.
insertBefore(Node, Node)
- Method in interface org.w3c.dom.
Node
Inserts the node
newChild
before the existing child node
refChild
.
insertBeforeEnd(Element, String)
- Method in class javax.swing.text.html.
HTMLDocument
Inserts the HTML specified as a string at the end of
 the element.
insertBeforeStart(Element, String)
- Method in class javax.swing.text.html.
HTMLDocument
Inserts the HTML specified as a string before the start of
 the given element.
insertBreakAction
- Static variable in class javax.swing.text.
DefaultEditorKit
Name of the action to place a line/paragraph break into
 the document.
InsertBreakAction()
- Constructor for class javax.swing.text.
DefaultEditorKit.InsertBreakAction
Creates this object with the appropriate identifier.
insertCell(int)
- Method in interface org.w3c.dom.html.
HTMLTableRowElement
Insert an empty
TD
cell into this row.
insertChar(AttributedCharacterIterator, int)
- Method in class java.awt.font.
LineBreakMeasurer
Updates this
LineBreakMeasurer
after a single
 character is inserted into the text, and sets the current
 position to the beginning of the paragraph.
insertChar(AttributedCharacterIterator, int)
- Method in class java.awt.font.
TextMeasurer
Updates the
TextMeasurer
after a single character has
 been inserted
 into the paragraph currently represented by this
TextMeasurer
.
insertComponent(Component)
- Method in class javax.swing.
JTextPane
Inserts a component into the document as a replacement
 for the currently selected content.
insertContentAction
- Static variable in class javax.swing.text.
DefaultEditorKit
Name of the action to place content into the associated
 document.
InsertContentAction()
- Constructor for class javax.swing.text.
DefaultEditorKit.InsertContentAction
Creates this object with the appropriate identifier.
insertCoordinates(VarHandle, int, Object...)
- Static method in class java.lang.invoke.
MethodHandles
Provides a target var handle with one or more
bound coordinates
in advance of the var handle's invocation.
insertData(int, String)
- Method in interface org.w3c.dom.
CharacterData
Insert a string at the specified 16-bit unit offset.
insertElementAt(E, int)
- Method in class java.util.
Vector
Inserts the specified object as a component in this vector at the
 specified
index
.
insertElementAt(E, int)
- Method in class javax.swing.
DefaultComboBoxModel
insertElementAt(E, int)
- Method in class javax.swing.
DefaultListModel
Inserts the specified element as a component in this list at the
 specified
index
.
insertElementAt(E, int)
- Method in interface javax.swing.
MutableComboBoxModel
Adds an item at a specific index.
insertEntries(int, int, int)
- Method in class javax.swing.
SizeSequence
Adds a contiguous group of entries to this
SizeSequence
.
insertHTML(JEditorPane, HTMLDocument, int, String, int, int, HTML.Tag)
- Method in class javax.swing.text.html.
HTMLEditorKit.InsertHTMLTextAction
A cover for HTMLEditorKit.insertHTML.
insertHTML(HTMLDocument, int, String, int, int, HTML.Tag)
- Method in class javax.swing.text.html.
HTMLEditorKit
Inserts HTML into an existing document.
InsertHTMLTextAction(String, String, HTML.Tag, HTML.Tag)
- Constructor for class javax.swing.text.html.
HTMLEditorKit.InsertHTMLTextAction
Creates a new InsertHTMLTextAction.
InsertHTMLTextAction(String, String, HTML.Tag, HTML.Tag, HTML.Tag, HTML.Tag)
- Constructor for class javax.swing.text.html.
HTMLEditorKit.InsertHTMLTextAction
Creates a new InsertHTMLTextAction.
insertIcon(Icon)
- Method in class javax.swing.
JTextPane
Inserts an icon into the document as a replacement
 for the currently selected content.
insertIndexForLayer(int, int)
- Method in class javax.swing.
JLayeredPane
Primitive method that determines the proper location to
 insert a new child based on layer and position requests.
insertIndexInterval(int, int, boolean)
- Method in class javax.swing.
DefaultListSelectionModel
Insert length indices beginning before/after index.
insertIndexInterval(int, int, boolean)
- Method in interface javax.swing.
ListSelectionModel
Insert
length
indices beginning before/after
index
.
Inserting elements
- Search tag in class javax.swing.text.html.HTMLDocument
Section
insertItemAt(E, int)
- Method in class javax.swing.
JComboBox
Inserts an item into the item list at a given index.
insertNode(Node)
- Method in interface org.w3c.dom.ranges.
Range
Inserts a node into the Document or DocumentFragment at the start of
 the Range.
insertNodeInto(MutableTreeNode, MutableTreeNode, int)
- Method in class javax.swing.tree.
DefaultTreeModel
Invoked this to insert newChild at location index in parents children.
insertParameterTypes(int, F...)
- Method in interface java.lang.invoke.
TypeDescriptor.OfMethod
Return a method descriptor that is identical to this one,
 except that a range of additional parameter types have been inserted.
insertParameterTypes(int, Class<?>...)
- Method in class java.lang.invoke.
MethodType
Finds or creates a method type with additional parameter types.
insertParameterTypes(int, ClassDesc...)
- Method in interface java.lang.constant.
MethodTypeDesc
Returns a
MethodTypeDesc
that is identical to this one,
 except that a range of additional parameter types have been inserted.
insertParameterTypes(int, List<Class<?>>)
- Method in class java.lang.invoke.
MethodType
Finds or creates a method type with additional parameter types.
insertProviderAt(Provider, int)
- Static method in class java.security.
Security
Adds a new provider, at a specified position.
insertRow()
- Method in interface java.sql.
ResultSet
Inserts the contents of the insert row into this
ResultSet
object and into the database.
insertRow(int)
- Method in interface org.w3c.dom.html.
HTMLTableElement
Insert a new empty row in the table.
insertRow(int)
- Method in interface org.w3c.dom.html.
HTMLTableSectionElement
Insert a row into this section.
insertRow(int, Object[])
- Method in class javax.swing.table.
DefaultTableModel
Inserts a row at
row
in the model.
insertRow(int, Vector<?>)
- Method in class javax.swing.table.
DefaultTableModel
Inserts a row at
row
in the model.
insertRule(String, int)
- Method in interface org.w3c.dom.css.
CSSMediaRule
Used to insert a new rule into the media block.
insertRule(String, int)
- Method in interface org.w3c.dom.css.
CSSStyleSheet
Used to insert a new rule into the style sheet.
insertsAreDetected(int)
- Method in interface java.sql.
DatabaseMetaData
Retrieves whether or not a visible row insert can be detected
 by calling the method
ResultSet.rowInserted
.
insertSeparator(int)
- Method in class java.awt.
Menu
Inserts a separator at the specified position.
insertSeparator(int)
- Method in class javax.swing.
JMenu
Inserts a separator at the specified position.
insertString(int, String)
- Method in interface javax.swing.text.
AbstractDocument.Content
Inserts a string of characters into the sequence.
insertString(int, String)
- Method in class javax.swing.text.
GapContent
Inserts a string into the content.
insertString(int, String)
- Method in class javax.swing.text.
StringContent
Inserts a string into the content.
insertString(int, String, AttributeSet)
- Method in class javax.swing.text.
AbstractDocument
Inserts some content into the document.
insertString(int, String, AttributeSet)
- Method in interface javax.swing.text.
Document
Inserts a string of content.
insertString(int, String, AttributeSet)
- Method in class javax.swing.text.
DocumentFilter.FilterBypass
Inserts the specified text, bypassing the
 DocumentFilter.
insertString(int, String, AttributeSet)
- Method in class javax.swing.text.
PlainDocument
Inserts some content into the document.
insertString(DocumentFilter.FilterBypass, int, String, AttributeSet)
- Method in class javax.swing.text.
DocumentFilter
Invoked prior to insertion of text into the
 specified Document.
insertTab(String, Icon, Component, String, int)
- Method in class javax.swing.
JTabbedPane
Inserts a new tab for the given component, at the given index,
 represented by the given title and/or icon, either of which may
 be
null
.
insertTabAction
- Static variable in class javax.swing.text.
DefaultEditorKit
Name of the action to place a tab character into
 the document.
InsertTabAction()
- Constructor for class javax.swing.text.
DefaultEditorKit.InsertTabAction
Creates this object with the appropriate identifier.
insertText(String, int)
- Method in class java.awt.
TextArea
Deprecated.
As of JDK version 1.1,
 replaced by
insert(String, int)
.
insertTextAtIndex(int, String)
- Method in interface javax.accessibility.
AccessibleEditableText
Inserts the specified string at the given index.
insertTextAtIndex(int, String)
- Method in class javax.swing.
JSpinner.AccessibleJSpinner
Inserts the specified string at the given index/
insertTextAtIndex(int, String)
- Method in class javax.swing.text.
JTextComponent.AccessibleJTextComponent
Inserts the specified string at the given index
insertUpdate(DocumentEvent)
- Method in interface javax.swing.event.
DocumentListener
Gives notification that there was an insert into the document.
insertUpdate(DocumentEvent)
- Method in class javax.swing.text.
JTextComponent.AccessibleJTextComponent
Handles document insert (fire appropriate property change event
 which is AccessibleContext.ACCESSIBLE_TEXT_PROPERTY).
insertUpdate(DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.
FieldView
Gives notification that something was inserted into the document
 in a location that this view is responsible for.
insertUpdate(DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.
FlowView
Gives notification that something was inserted into the document
 in a location that this view is responsible for.
insertUpdate(DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.
GlyphView
Gives notification that something was inserted into
 the document in a location that this view is responsible for.
insertUpdate(DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.html.
InlineView
Gives notification that something was inserted into
 the document in a location that this view is responsible for.
insertUpdate(DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.
PlainView
Gives notification that something was inserted into the document
 in a location that this view is responsible for.
insertUpdate(DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.
View
Gives notification that something was inserted into
 the document in a location that this view is responsible for.
insertUpdate(DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.
WrappedPlainView
Gives notification that something was inserted into the
 document in a location that this view is responsible for.
insertUpdate(DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.
ZoneView
Gives notification that something was inserted into the document
 in a location that this view is responsible for.
insertUpdate(AbstractDocument.DefaultDocumentEvent, AttributeSet)
- Method in class javax.swing.text.
AbstractDocument
Updates document structure as a result of text insertion.
insertUpdate(AbstractDocument.DefaultDocumentEvent, AttributeSet)
- Method in class javax.swing.text.
DefaultStyledDocument
Updates document structure as a result of text insertion.
insertUpdate(AbstractDocument.DefaultDocumentEvent, AttributeSet)
- Method in class javax.swing.text.html.
HTMLDocument
Updates document structure as a result of text insertion.
insertUpdate(AbstractDocument.DefaultDocumentEvent, AttributeSet)
- Method in class javax.swing.text.
PlainDocument
Updates document structure as a result of text insertion.
insertUpdate(DefaultStyledDocument.ElementSpec[])
- Method in class javax.swing.text.
DefaultStyledDocument.ElementBuffer
Inserts an update into the document.
insertUpdate(FlowView, DocumentEvent, Rectangle)
- Method in class javax.swing.text.
FlowView.FlowStrategy
Gives notification that something was inserted into the document
 in a location that the given flow view is responsible for.
insetCache
- Variable in class javax.swing.plaf.basic.
BasicSliderUI
Inset cache
insets
- Variable in class java.awt.
GridBagConstraints
This field specifies the external padding of the component, the
 minimum amount of space between the component and the edges of its
 display area.
insets()
- Method in class java.awt.
Container
Deprecated.
As of JDK version 1.1,
 replaced by
getInsets()
.
Insets
- Class in
java.awt
An
Insets
object is a representation of the borders
 of a container.
Insets(int, int, int, int)
- Constructor for class java.awt.
Insets
Creates and initializes a new
Insets
object with the
 specified top, left, bottom, and right insets.
InsetsUIResource
- Class in
javax.swing.plaf
A subclass of Insets that implements UIResource.
InsetsUIResource(int, int, int, int)
- Constructor for class javax.swing.plaf.
InsetsUIResource
Constructs an
InsetsUIResource
.
inside(int, int)
- Method in class java.awt.
Component
Deprecated.
As of JDK version 1.1,
 replaced by contains(int, int).
inside(int, int)
- Method in class java.awt.
Polygon
Deprecated.
As of JDK version 1.1,
 replaced by
contains(int, int)
.
inside(int, int)
- Method in class java.awt.
Rectangle
Deprecated.
As of JDK version 1.1,
 replaced by
contains(int, int)
.
insideBorder
- Variable in class javax.swing.border.
CompoundBorder
The inside border.
insideTimerAction()
- Constructor for class javax.swing.
ToolTipManager.insideTimerAction
Constructs an
insideTimerAction
.
install(JEditorPane)
- Method in class javax.swing.text.
EditorKit
Called when the kit is being installed into the
 a JEditorPane.
install(JEditorPane)
- Method in class javax.swing.text.html.
HTMLEditorKit
Called when the kit is being installed into the
 a JEditorPane.
install(JEditorPane)
- Method in class javax.swing.text.
StyledEditorKit
Called when the kit is being installed into
 a JEditorPane.
install(JFormattedTextField)
- Method in class javax.swing.
JFormattedTextField.AbstractFormatter
Installs the
AbstractFormatter
onto a particular
JFormattedTextField
.
install(JFormattedTextField)
- Method in class javax.swing.text.
DefaultFormatter
Installs the
DefaultFormatter
onto a particular
JFormattedTextField
.
install(JFormattedTextField)
- Method in class javax.swing.text.
InternationalFormatter
Installs the
DefaultFormatter
onto a particular
JFormattedTextField
.
install(JFormattedTextField)
- Method in class javax.swing.text.
MaskFormatter
Installs the
DefaultFormatter
onto a particular
JFormattedTextField
.
install(JTextComponent)
- Method in interface javax.swing.text.
Caret
Called when the UI is being installed into the
 interface of a JTextComponent.
install(JTextComponent)
- Method in class javax.swing.text.
DefaultCaret
Called when the UI is being installed into the
 interface of a JTextComponent.
install(JTextComponent)
- Method in class javax.swing.text.
DefaultHighlighter
Called when the UI is being installed into the
 interface of a JTextComponent.
install(JTextComponent)
- Method in interface javax.swing.text.
Highlighter
Called when the UI is being installed into the
 interface of a JTextComponent.
installAncestorListener()
- Method in class javax.swing.
JComboBox
Registers ancestor listener so that it will receive
AncestorEvents
when it or any of its ancestors
 move or are made visible or invisible.
installBorder(JComponent, String)
- Static method in class javax.swing.
LookAndFeel
Convenience method for setting a component's border property with
 a value from the defaults.
installChooserPanel(JColorChooser)
- Method in class javax.swing.colorchooser.
AbstractColorChooserPanel
Invoked when the panel is added to the chooser.
installColors(JComponent, String, String)
- Static method in class javax.swing.
LookAndFeel
Convenience method for setting a component's foreground
 and background color properties with values from the
 defaults.
installColorsAndFont(JComponent, String, String, String)
- Static method in class javax.swing.
LookAndFeel
Convenience method for setting a component's foreground,
 background and font properties with values from the
 defaults.
installComboBoxListeners()
- Method in class javax.swing.plaf.basic.
BasicComboPopup
This method adds the necessary listeners to the JComboBox.
installComboBoxModelListeners(ComboBoxModel<?>)
- Method in class javax.swing.plaf.basic.
BasicComboPopup
Installs the listeners on the combo box model.
installComponents()
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI
Creates and initializes the components which make up the
 aggregate combo box.
installComponents()
- Method in class javax.swing.plaf.basic.
BasicDesktopIconUI
Registers components.
installComponents()
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI
Installs the components.
installComponents()
- Method in class javax.swing.plaf.basic.
BasicOptionPaneUI
Registers components.
installComponents()
- Method in class javax.swing.plaf.basic.
BasicScrollBarUI
Installs the components.
installComponents()
- Method in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Creates and installs any required subcomponents for the JTabbedPane.
installComponents()
- Method in class javax.swing.plaf.basic.
BasicToolBarUI
Registers components.
installComponents()
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Intalls the subcomponents of the tree, which is the renderer pane.
installComponents(JFileChooser)
- Method in class javax.swing.plaf.basic.
BasicFileChooserUI
Installs the components.
installComponents(JLabel)
- Method in class javax.swing.plaf.basic.
BasicLabelUI
Registers components.
installComponents(JMenuItem)
- Method in class javax.swing.plaf.basic.
BasicMenuItemUI
Registers the subcomponents of the menu.
installComponents(JRootPane)
- Method in class javax.swing.plaf.basic.
BasicRootPaneUI
Installs components.
installDefaults()
- Method in class javax.swing.plaf.basic.
BasicColorChooserUI
Installs default properties.
installDefaults()
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI
Installs the default colors, default font, default renderer, and default
 editor into the JComboBox.
installDefaults()
- Method in class javax.swing.plaf.basic.
BasicDesktopIconUI
Installs default properties.
installDefaults()
- Method in class javax.swing.plaf.basic.
BasicDesktopPaneUI
Installs default properties.
installDefaults()
- Method in class javax.swing.plaf.basic.
BasicInternalFrameTitlePane
Installs default properties.
installDefaults()
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI
Installs the defaults.
installDefaults()
- Method in class javax.swing.plaf.basic.
BasicListUI
Initializes list properties such as font, foreground, and background,
 and adds the CellRendererPane.
installDefaults()
- Method in class javax.swing.plaf.basic.
BasicMenuBarUI
Installs default properties.
installDefaults()
- Method in class javax.swing.plaf.basic.
BasicMenuItemUI
Installs default properties.
installDefaults()
- Method in class javax.swing.plaf.basic.
BasicOptionPaneUI
Installs default properties.
installDefaults()
- Method in class javax.swing.plaf.basic.
BasicPasswordFieldUI
Installs the necessary properties on the JPasswordField.
installDefaults()
- Method in class javax.swing.plaf.basic.
BasicPopupMenuUI
Installs default properties.
installDefaults()
- Method in class javax.swing.plaf.basic.
BasicProgressBarUI
Installs default properties.
installDefaults()
- Method in class javax.swing.plaf.basic.
BasicScrollBarUI
Installs the defaults.
installDefaults()
- Method in class javax.swing.plaf.basic.
BasicSpinnerUI
Initialize the
JSpinner
border
,
foreground
, and
background
, properties
 based on the corresponding "Spinner.*" properties from defaults table.
installDefaults()
- Method in class javax.swing.plaf.basic.
BasicSplitPaneUI
Installs the UI defaults.
installDefaults()
- Method in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Installs the defaults.
installDefaults()
- Method in class javax.swing.plaf.basic.
BasicTableHeaderUI
Initializes JTableHeader properties such as font, foreground, and background.
installDefaults()
- Method in class javax.swing.plaf.basic.
BasicTableUI
Initialize JTable properties, e.g. font, foreground, and background.
installDefaults()
- Method in class javax.swing.plaf.basic.
BasicTextUI
Initializes component properties, such as font, foreground,
 background, caret color, selection color, selected text color,
 disabled text color, border, and margin.
installDefaults()
- Method in class javax.swing.plaf.basic.
BasicToolBarUI
Installs default properties.
installDefaults()
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Installs default properties.
installDefaults()
- Method in class javax.swing.plaf.synth.
SynthInternalFrameUI
Installs the defaults.
installDefaults()
- Method in class javax.swing.plaf.synth.
SynthPasswordFieldUI
Installs the necessary properties on the JPasswordField.
installDefaults()
- Method in class javax.swing.plaf.synth.
SynthSpinnerUI
Initializes the
JSpinner
border
,
foreground
, and
background
, properties
 based on the corresponding "Spinner.*" properties from defaults table.
installDefaults()
- Method in class javax.swing.plaf.synth.
SynthSplitPaneUI
Installs the UI defaults.
installDefaults()
- Method in class javax.swing.plaf.synth.
SynthTableUI
Initializes JTable properties, such as font, foreground, and background.
installDefaults(AbstractButton)
- Method in class javax.swing.plaf.basic.
BasicButtonUI
Installs default properties.
installDefaults(AbstractButton)
- Method in class javax.swing.plaf.metal.
MetalButtonUI
installDefaults(AbstractButton)
- Method in class javax.swing.plaf.metal.
MetalRadioButtonUI
installDefaults(AbstractButton)
- Method in class javax.swing.plaf.metal.
MetalToggleButtonUI
installDefaults(JComponent)
- Method in class javax.swing.plaf.basic.
BasicToolTipUI
Installs default properties.
installDefaults(JComponent)
- Method in class javax.swing.plaf.basic.
BasicViewportUI
Installs view port properties.
installDefaults(JComponent)
- Method in class javax.swing.plaf.synth.
SynthViewportUI
Installs defaults for a viewport.
installDefaults(JFileChooser)
- Method in class javax.swing.plaf.basic.
BasicFileChooserUI
Installs the defaults.
installDefaults(JLabel)
- Method in class javax.swing.plaf.basic.
BasicLabelUI
Installs default properties.
installDefaults(JPanel)
- Method in class javax.swing.plaf.basic.
BasicPanelUI
Method for installing panel properties.
installDefaults(JRootPane)
- Method in class javax.swing.plaf.basic.
BasicRootPaneUI
Installs default properties.
installDefaults(JScrollPane)
- Method in class javax.swing.plaf.basic.
BasicScrollPaneUI
Installs default properties.
installDefaults(JSeparator)
- Method in class javax.swing.plaf.basic.
BasicSeparatorUI
Installs default properties.
installDefaults(JSeparator)
- Method in class javax.swing.plaf.synth.
SynthSeparatorUI
Installs default setting.
installDefaults(JSlider)
- Method in class javax.swing.plaf.basic.
BasicSliderUI
Installs the defaults.
installDefaults(SynthContext)
- Method in class javax.swing.plaf.nimbus.
NimbusStyle
Installs the necessary state from this Style on the
JComponent
from
context
.
installDefaults(SynthContext)
- Method in class javax.swing.plaf.synth.
SynthStyle
Installs the necessary state from this Style on the
JComponent
from
context
.
installDesktopManager()
- Method in class javax.swing.plaf.basic.
BasicDesktopPaneUI
Installs desktop manager.
installed()
- Method in exception class jdk.jshell.spi.
ExecutionControl.ClassInstallException
Indicates which of the passed classes were successfully
 loaded/redefined.
installedProviders()
- Static method in class java.nio.file.spi.
FileSystemProvider
Returns a list of the installed file system providers.
installIcons(JFileChooser)
- Method in class javax.swing.plaf.basic.
BasicFileChooserUI
Installs the icons.
installKeyboardActions()
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI
Adds keyboard actions to the JComboBox.
installKeyboardActions()
- Method in class javax.swing.plaf.basic.
BasicComboPopup
Registers keyboard actions.
installKeyboardActions()
- Method in class javax.swing.plaf.basic.
BasicDesktopPaneUI
Installs keyboard actions.
installKeyboardActions()
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI
Installs the keyboard actions.
installKeyboardActions()
- Method in class javax.swing.plaf.basic.
BasicListUI
Registers the keyboard bindings on the
JList
that the
BasicListUI
is associated with.
installKeyboardActions()
- Method in class javax.swing.plaf.basic.
BasicMenuBarUI
Registers keyboard actions.
installKeyboardActions()
- Method in class javax.swing.plaf.basic.
BasicMenuItemUI
Registers keyboard action.
installKeyboardActions()
- Method in class javax.swing.plaf.basic.
BasicOptionPaneUI
Registers keyboard actions.
installKeyboardActions()
- Method in class javax.swing.plaf.basic.
BasicPopupMenuUI
Registers keyboard actions.
installKeyboardActions()
- Method in class javax.swing.plaf.basic.
BasicScrollBarUI
Installs the keyboard actions.
installKeyboardActions()
- Method in class javax.swing.plaf.basic.
BasicSpinnerUI
Installs the keyboard Actions onto the JSpinner.
installKeyboardActions()
- Method in class javax.swing.plaf.basic.
BasicSplitPaneUI
Installs the keyboard actions for the UI.
installKeyboardActions()
- Method in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Installs the keyboard actions.
installKeyboardActions()
- Method in class javax.swing.plaf.basic.
BasicTableHeaderUI
Register all keyboard actions on the JTableHeader.
installKeyboardActions()
- Method in class javax.swing.plaf.basic.
BasicTableUI
Register all keyboard actions on the JTable.
installKeyboardActions()
- Method in class javax.swing.plaf.basic.
BasicTextUI
Registers keyboard actions.
installKeyboardActions()
- Method in class javax.swing.plaf.basic.
BasicToolBarUI
Registers keyboard actions.
installKeyboardActions()
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Registers keyboard actions.
installKeyboardActions(AbstractButton)
- Method in class javax.swing.plaf.basic.
BasicButtonUI
Registers keyboard actions.
installKeyboardActions(JComponent)
- Method in class javax.swing.plaf.basic.
BasicButtonListener
Register default key actions: pressing space to "click" a
 button and registering the keyboard mnemonic (if any).
installKeyboardActions(JLabel)
- Method in class javax.swing.plaf.basic.
BasicLabelUI
Registers keyboard actions.
installKeyboardActions(JRootPane)
- Method in class javax.swing.plaf.basic.
BasicRootPaneUI
Registers keyboard actions.
installKeyboardActions(JScrollPane)
- Method in class javax.swing.plaf.basic.
BasicScrollPaneUI
Registers keyboard actions.
installKeyboardActions(JSlider)
- Method in class javax.swing.plaf.basic.
BasicSliderUI
Installs keyboard actions.
installListeners()
- Method in class javax.swing.plaf.basic.
BasicColorChooserUI
Registers listeners.
installListeners()
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI
Creates and installs listeners for the combo box and its model.
installListeners()
- Method in class javax.swing.plaf.basic.
BasicDesktopIconUI
Registers listeners.
installListeners()
- Method in class javax.swing.plaf.basic.
BasicDesktopPaneUI
Installs the
PropertyChangeListener
returned from
createPropertyChangeListener
on the
JDesktopPane
.
installListeners()
- Method in class javax.swing.plaf.basic.
BasicInternalFrameTitlePane
Registers listeners.
installListeners()
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI
Installs the listeners.
installListeners()
- Method in class javax.swing.plaf.basic.
BasicListUI
Creates and installs the listeners for the JList, its model, and its
 selectionModel.
installListeners()
- Method in class javax.swing.plaf.basic.
BasicMenuBarUI
Registers listeners.
installListeners()
- Method in class javax.swing.plaf.basic.
BasicMenuItemUI
Registers listeners.
installListeners()
- Method in class javax.swing.plaf.basic.
BasicOptionPaneUI
Registers listeners.
installListeners()
- Method in class javax.swing.plaf.basic.
BasicPopupMenuUI
Registers listeners.
installListeners()
- Method in class javax.swing.plaf.basic.
BasicProgressBarUI
Registers listeners.
installListeners()
- Method in class javax.swing.plaf.basic.
BasicScrollBarUI
Installs the listeners.
installListeners()
- Method in class javax.swing.plaf.basic.
BasicSpinnerUI
Initializes
PropertyChangeListener
with
 a shared object that delegates interesting PropertyChangeEvents
 to protected methods.
installListeners()
- Method in class javax.swing.plaf.basic.
BasicSplitPaneUI
Installs the event listeners for the UI.
installListeners()
- Method in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Installs the listeners.
installListeners()
- Method in class javax.swing.plaf.basic.
BasicTableHeaderUI
Attaches listeners to the JTableHeader.
installListeners()
- Method in class javax.swing.plaf.basic.
BasicTableUI
Attaches listeners to the JTable.
installListeners()
- Method in class javax.swing.plaf.basic.
BasicTextUI
Installs listeners for the UI.
installListeners()
- Method in class javax.swing.plaf.basic.
BasicToolBarUI
Registers listeners.
installListeners()
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Registers listeners.
installListeners()
- Method in class javax.swing.plaf.synth.
SynthSplitPaneUI
Installs the event listeners for the UI.
installListeners()
- Method in class javax.swing.plaf.synth.
SynthTableUI
Attaches listeners to the JTable.
installListeners(AbstractButton)
- Method in class javax.swing.plaf.basic.
BasicButtonUI
Registers listeners.
installListeners(JComponent)
- Method in class javax.swing.plaf.basic.
BasicToolTipUI
Registers listeners.
installListeners(JComponent)
- Method in class javax.swing.plaf.synth.
SynthViewportUI
Installs listeners into the viewport.
installListeners(JFileChooser)
- Method in class javax.swing.plaf.basic.
BasicFileChooserUI
Installs the listeners.
installListeners(JLabel)
- Method in class javax.swing.plaf.basic.
BasicLabelUI
Registers listeners.
installListeners(JPanel)
- Method in class javax.swing.plaf.synth.
SynthPanelUI
Installs listeners into the panel.
installListeners(JRootPane)
- Method in class javax.swing.plaf.basic.
BasicRootPaneUI
Registers listeners.
installListeners(JScrollPane)
- Method in class javax.swing.plaf.basic.
BasicScrollPaneUI
Registers listeners.
installListeners(JScrollPane)
- Method in class javax.swing.plaf.metal.
MetalScrollPaneUI
installListeners(JSeparator)
- Method in class javax.swing.plaf.basic.
BasicSeparatorUI
Registers listeners.
installListeners(JSeparator)
- Method in class javax.swing.plaf.synth.
SynthSeparatorUI
Installs listeners.
installListeners(JSlider)
- Method in class javax.swing.plaf.basic.
BasicSliderUI
Installs listeners.
installListListeners()
- Method in class javax.swing.plaf.basic.
BasicComboPopup
Adds the listeners to the list control.
installLookAndFeel(String, String)
- Static method in class javax.swing.
UIManager
Adds the specified look and feel to the set of available look
 and feels.
installLookAndFeel(UIManager.LookAndFeelInfo)
- Static method in class javax.swing.
UIManager
Adds the specified look and feel to the set of available look
 and feels.
installMouseHandlers(JComponent)
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI
Installs the mouse handlers.
installNextButtonListeners(Component)
- Method in class javax.swing.plaf.basic.
BasicSpinnerUI
Installs the necessary listeners on the next button,
c
,
 to update the
JSpinner
in response to a user gesture.
installNonRolloverBorders(JComponent)
- Method in class javax.swing.plaf.basic.
BasicToolBarUI
Installs non-rollover borders on all the child components of the JComponent.
installNormalBorders(JComponent)
- Method in class javax.swing.plaf.basic.
BasicToolBarUI
Installs normal borders on all the child components of the JComponent.
installPreviewPanel()
- Method in class javax.swing.plaf.basic.
BasicColorChooserUI
Installs preview panel.
installPreviousButtonListeners(Component)
- Method in class javax.swing.plaf.basic.
BasicSpinnerUI
Installs the necessary listeners on the previous button,
c
,
 to update the
JSpinner
in response to a user gesture.
installProperty(JComponent, String, Object)
- Static method in class javax.swing.
LookAndFeel
Convenience method for installing a property with the specified name
 and value on a component if that property has not already been set
 by the developer.
installRolloverBorders(JComponent)
- Method in class javax.swing.plaf.basic.
BasicToolBarUI
Installs rollover borders on all the child components of the JComponent.
installStrings(JFileChooser)
- Method in class javax.swing.plaf.basic.
BasicFileChooserUI
Installs the strings.
installTitlePane()
- Method in class javax.swing.plaf.basic.
BasicInternalFrameTitlePane
Installs the title pane.
installUI(JComponent)
- Method in class javax.swing.plaf.basic.
BasicEditorPaneUI
Installs the UI for a component.
installUI(JComponent)
- Method in class javax.swing.plaf.basic.
BasicFileChooserUI
Installs the UI.
installUI(JComponent)
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI
Installs the UI.
installUI(JComponent)
- Method in class javax.swing.plaf.basic.
BasicListUI
Initializes
this.list
by calling
installDefaults()
,
installListeners()
, and
installKeyboardActions()
in order.
installUI(JComponent)
- Method in class javax.swing.plaf.basic.
BasicOptionPaneUI
Installs the receiver as the L&F for the passed in
JOptionPane
.
installUI(JComponent)
- Method in class javax.swing.plaf.basic.
BasicScrollBarUI
Installs the UI.
installUI(JComponent)
- Method in class javax.swing.plaf.basic.
BasicSliderUI
Installs a UI.
installUI(JComponent)
- Method in class javax.swing.plaf.basic.
BasicSpinnerUI
Calls
installDefaults
,
installListeners
,
 and then adds the components returned by
createNextButton
,
createPreviousButton
, and
createEditor
.
installUI(JComponent)
- Method in class javax.swing.plaf.basic.
BasicSplitPaneUI
Installs the UI.
installUI(JComponent)
- Method in class javax.swing.plaf.basic.
BasicTextUI
Installs the UI for a component.
installUI(JComponent)
- Method in class javax.swing.plaf.
ComponentUI
Configures the specified component appropriately for the look and feel.
installUI(JComponent)
- Method in class javax.swing.plaf.
LayerUI
Configures the
JLayer
this
LayerUI
is set to.
installUI(JComponent)
- Method in class javax.swing.plaf.metal.
MetalMenuBarUI
Configures the specified component appropriate for the metal look and
 feel.
installUI(JComponent)
- Method in class javax.swing.plaf.metal.
MetalRootPaneUI
Invokes supers implementation of
installUI
to install
 the necessary state onto the passed in
JRootPane
to render the metal look and feel implementation of
RootPaneUI
.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiButtonUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiColorChooserUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiComboBoxUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiDesktopIconUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiDesktopPaneUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiFileChooserUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiInternalFrameUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiLabelUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiListUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiMenuBarUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiMenuItemUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiOptionPaneUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiPanelUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiPopupMenuUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiProgressBarUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiRootPaneUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiScrollBarUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiScrollPaneUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiSeparatorUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiSliderUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiSpinnerUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiSplitPaneUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiTabbedPaneUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiTableHeaderUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiTableUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiTextUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiToolBarUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiToolTipUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiTreeUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.multi.
MultiViewportUI
Invokes the
installUI
method on each UI handled by this object.
installUI(JComponent)
- Method in class javax.swing.plaf.synth.
SynthComboBoxUI
Configures the specified component appropriately for the look and feel.
installUI(JComponent)
- Method in class javax.swing.plaf.synth.
SynthTextPaneUI
Installs the UI for a component.
instance(ProcessingEnvironment)
- Static method in class com.sun.source.util.
DocTrees
Returns a DocTrees object for a given ProcessingEnvironment.
instance(ProcessingEnvironment)
- Static method in class com.sun.source.util.
JavacTask
Returns the
JavacTask
for a
ProcessingEnvironment
.
instance(ProcessingEnvironment)
- Static method in class com.sun.source.util.
Trees
Returns a
Trees
object for a given
ProcessingEnvironment
.
instance(JavaCompiler.CompilationTask)
- Static method in class com.sun.source.util.
DocTrees
Returns a DocTrees object for a given CompilationTask.
instance(JavaCompiler.CompilationTask)
- Static method in class com.sun.source.util.
Trees
Returns a
Trees
object for a given
CompilationTask
.
INSTANCE
- Static variable in class java.time.chrono.
HijrahChronology
Singleton instance of the Islamic Umm Al-Qura calendar of Saudi Arabia.
INSTANCE
- Static variable in class java.time.chrono.
IsoChronology
Singleton instance of the ISO chronology.
INSTANCE
- Static variable in class java.time.chrono.
JapaneseChronology
Singleton instance for Japanese chronology.
INSTANCE
- Static variable in class java.time.chrono.
MinguoChronology
Singleton instance for the Minguo chronology.
INSTANCE
- Static variable in class java.time.chrono.
ThaiBuddhistChronology
Singleton instance of the Buddhist chronology.
INSTANCE_INIT
- Enum constant in enum class javax.lang.model.element.
ElementKind
An instance initializer.
INSTANCE_OF
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
InstanceOfTree
.
InstanceAlreadyExistsException
- Exception Class in
javax.management
The MBean is already registered in the repository.
InstanceAlreadyExistsException()
- Constructor for exception class javax.management.
InstanceAlreadyExistsException
Default constructor.
InstanceAlreadyExistsException(String)
- Constructor for exception class javax.management.
InstanceAlreadyExistsException
Constructor that allows a specific error message to be specified.
instanceCounts(List<? extends ReferenceType>)
- Method in interface com.sun.jdi.
VirtualMachine
Returns the number of instances of each ReferenceType in the 'refTypes'
 list.
instanceFollowRedirects
- Variable in class java.net.
HttpURLConnection
If
true
, the protocol will automatically follow redirects.
InstanceNotFoundException
- Exception Class in
javax.management
The specified MBean does not exist in the repository.
InstanceNotFoundException()
- Constructor for exception class javax.management.
InstanceNotFoundException
Default constructor.
InstanceNotFoundException(String)
- Constructor for exception class javax.management.
InstanceNotFoundException
Constructor that allows a specific error message to be specified.
InstanceOfTree
- Interface in
com.sun.source.tree
A tree node for an
instanceof
expression.
instances(long)
- Method in interface com.sun.jdi.
ReferenceType
Returns instances of this ReferenceType.
instant()
- Method in class java.time.
Clock
Gets the current instant of the clock.
instant()
- Method in interface java.time.
InstantSource
Gets the current instant of the source.
Instant
- Class in
java.time
An instantaneous point on the time-line.
INSTANT_SECONDS
- Enum constant in enum class java.time.temporal.
ChronoField
The instant epoch-seconds.
instantiate(ClassLoader, String)
- Static method in class java.beans.
Beans
Instantiate a JavaBean.
instantiate(ClassLoader, String, BeanContext)
- Static method in class java.beans.
Beans
Instantiate a JavaBean.
instantiate(ClassLoader, String, BeanContext, AppletInitializer)
- Static method in class java.beans.
Beans
Deprecated, for removal: This API element is subject to removal in a future version.
It is recommended to use
Beans.instantiate(ClassLoader, String, BeanContext)
,
 because the Applet API is deprecated. See the
java.applet package
 documentation
for further information.
instantiate(Object, Encoder)
- Method in class java.beans.
DefaultPersistenceDelegate
This default implementation of the
instantiate
method returns
 an expression containing the predefined method name "new" which denotes a
 call to a constructor with the arguments as specified in
 the
DefaultPersistenceDelegate
's constructor.
instantiate(Object, Encoder)
- Method in class java.beans.
PersistenceDelegate
Returns an expression whose value is
oldInstance
.
instantiate(String)
- Method in interface javax.management.
MBeanServer
Instantiates an object using the list of all class loaders
 registered in the MBean server's
Class Loader
 Repository
.
instantiate(String, Object[], String[])
- Method in interface javax.management.
MBeanServer
Instantiates an object using the list of all class loaders
 registered in the MBean server
Class Loader
 Repository
.
instantiate(String, ObjectName)
- Method in interface javax.management.
MBeanServer
Instantiates an object using the class Loader specified by its
ObjectName
.
instantiate(String, ObjectName, Object[], String[])
- Method in interface javax.management.
MBeanServer
Instantiates an object.
instantiateChild(String)
- Method in interface java.beans.beancontext.
BeanContext
Instantiate the javaBean named as a
 child of this
BeanContext
.
instantiateChild(String)
- Method in class java.beans.beancontext.
BeanContextSupport
The instantiateChild method is a convenience hook
 in BeanContext to simplify
 the task of instantiating a Bean, nested,
 into a
BeanContext
.
instantiation(int, DrbgParameters.Capability, byte[])
- Static method in class java.security.
DrbgParameters
Generates a
DrbgParameters.Instantiation
object.
InstantiationError
- Exception Class in
java.lang
Thrown when an application tries to use the Java
new
construct to instantiate an abstract class or an interface.
InstantiationError()
- Constructor for exception class java.lang.
InstantiationError
Constructs an
InstantiationError
with no detail  message.
InstantiationError(String)
- Constructor for exception class java.lang.
InstantiationError
Constructs an
InstantiationError
with the specified
 detail message.
InstantiationException
- Exception Class in
java.lang
Thrown when an application tries to create an instance of a class
 using the
newInstance
method in class
Class
, but the specified class object cannot be
 instantiated.
InstantiationException()
- Constructor for exception class java.lang.
InstantiationException
Constructs an
InstantiationException
with no detail message.
InstantiationException(String)
- Constructor for exception class java.lang.
InstantiationException
Constructs an
InstantiationException
with the
 specified detail message.
InstantSource
- Interface in
java.time
Provides access to the current instant.
Instrument
- Class in
javax.sound.midi
An instrument is a sound-synthesis algorithm with certain parameter settings,
 usually designed to emulate a specific real-world musical instrument or to
 achieve a specific sort of sound effect.
Instrument(Soundbank, Patch, String, Class<?>)
- Constructor for class javax.sound.midi.
Instrument
Constructs a new MIDI instrument from the specified
Patch
.
Instrumentation
- Interface in
java.lang.instrument
This class provides services needed to instrument Java
 programming language code.
Instrumenting code in modules
- Search tag in package java.lang.instrument
Section
InsufficientResourcesException
- Exception Class in
javax.naming
This exception is thrown when resources are not available to complete
 the requested operation.
InsufficientResourcesException()
- Constructor for exception class javax.naming.
InsufficientResourcesException
Constructs a new instance of InsufficientResourcesException with
 all name resolution fields and explanation initialized to null.
InsufficientResourcesException(String)
- Constructor for exception class javax.naming.
InsufficientResourcesException
Constructs a new instance of InsufficientResourcesException using an
 explanation.
insureRowContinuity()
- Method in class javax.swing.tree.
DefaultTreeSelectionModel
Makes sure the currently selected
TreePath
s are valid
 for the current selection mode.
insureUniqueness()
- Method in class javax.swing.tree.
DefaultTreeSelectionModel
This method is obsolete and its implementation is now a noop.
INT
- Enum constant in enum class javax.lang.model.type.
TypeKind
The primitive type
int
.
INT_LITERAL
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
LiteralTree
representing
 an integral literal expression of type
int
.
IntBinaryOperator
- Interface in
java.util.function
Represents an operation upon two
int
-valued operands and producing an
int
-valued result.
intBitsToFloat(int)
- Static method in class java.lang.
Float
Returns the
float
value corresponding to a given
 bit representation.
IntBuffer
- Class in
java.nio
An int buffer.
IntConsumer
- Interface in
java.util.function
Represents an operation that accepts a single
int
-valued argument and
 returns no result.
Integer
- Class in
java.lang
The
Integer
class wraps a value of the primitive type
int
in an object.
Integer(int)
- Constructor for class java.lang.
Integer
Deprecated, for removal: This API element is subject to removal in a future version.
It is rarely appropriate to use this constructor. The static factory
Integer.valueOf(int)
is generally a better choice, as it is
 likely to yield significantly better space and time performance.
Integer(String)
- Constructor for class java.lang.
Integer
Deprecated, for removal: This API element is subject to removal in a future version.
It is rarely appropriate to use this constructor.
 Use
Integer.parseInt(String)
to convert a string to a
int
primitive, or use
Integer.valueOf(String)
to convert a string to an
Integer
object.
INTEGER
- Enum constant in enum class java.sql.
JDBCType
Identifies the generic SQL type
INTEGER
.
INTEGER
- Static variable in class java.sql.
Types
The constant in the Java programming language, sometimes referred
 to as a type code, that identifies the generic SQL type
INTEGER
.
INTEGER
- Static variable in class java.text.
NumberFormat.Field
Constant identifying the integer field.
INTEGER
- Static variable in class javax.management.openmbean.
SimpleType
The
SimpleType
instance describing values whose
 Java class name is
java.lang.Integer
.
INTEGER_FIELD
- Static variable in class java.text.
NumberFormat
Field constant used to construct a FieldPosition object.
IntegerSyntax
- Class in
javax.print.attribute
Class
IntegerSyntax
is an abstract base class providing the common
 implementation of all attributes with integer values.
IntegerSyntax(int)
- Constructor for class javax.print.attribute.
IntegerSyntax
Construct a new integer attribute with the given integer value.
IntegerSyntax(int, int, int)
- Constructor for class javax.print.attribute.
IntegerSyntax
Construct a new integer attribute with the given integer value, which
 must lie within the given range.
IntegerType
- Interface in
com.sun.jdi
The type of all primitive
int
values
 accessed in the target VM.
IntegerValue
- Interface in
com.sun.jdi
Provides access to a primitive
int
value in
 the target VM.
Interactions with older options.
- Search tag in package jdk.javadoc.doclet
Section
interactiveTerminal(boolean)
- Method in interface jdk.jshell.tool.
JavaShellToolBuilder
Set to true to specify the inputs and outputs are connected to an interactive terminal
 that can interpret the ANSI escape codes.
interestOps()
- Method in class java.nio.channels.
SelectionKey
Retrieves this key's interest set.
interestOps(int)
- Method in class java.nio.channels.
SelectionKey
Sets this key's interest set to the given value.
interestOpsAnd(int)
- Method in class java.nio.channels.
SelectionKey
Atomically sets this key's interest set to the bitwise intersection ("and")
 of the existing interest set and the given value.
interestOpsOr(int)
- Method in class java.nio.channels.
SelectionKey
Atomically sets this key's interest set to the bitwise union ("or") of
 the existing interest set and the given value.
INTERFACE
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
ClassTree
representing interfaces.
INTERFACE
- Enum constant in enum class java.lang.reflect.
AccessFlag
The access flag
ACC_INTERFACE
with a mask value of
0x0200
.
INTERFACE
- Enum constant in enum class javax.lang.model.element.
ElementKind
An interface not described by a more specific kind (like
ANNOTATION_TYPE
).
INTERFACE
- Static variable in class java.lang.reflect.
Modifier
The
int
value representing the
interface
modifier.
INTERFACE_CLASS_NAME_FIELD
- Static variable in class javax.management.
JMX
The name of the
interfaceClassName
field.
INTERFACE_SPECIAL
- Enum constant in enum class java.lang.constant.
DirectMethodHandleDesc.Kind
A method handle for an interface method invoked as with
invokespecial
INTERFACE_STATIC
- Enum constant in enum class java.lang.constant.
DirectMethodHandleDesc.Kind
A method handle for a method invoked as with
invokestatic
INTERFACE_SUBKIND
- Enum constant in enum class jdk.jshell.
Snippet.SubKind
An interface declaration.
INTERFACE_VIRTUAL
- Enum constant in enum class java.lang.constant.
DirectMethodHandleDesc.Kind
A method handle for a method invoked as with
invokeinterface
Interface Accessible
- Search tag in package javax.accessibility
Section
Interface AccessibleAction
- Search tag in package javax.accessibility
Section
Interface AccessibleComponent
- Search tag in package javax.accessibility
Section
Interface AccessibleHyperlink
- Search tag in package javax.accessibility
Section
Interface AccessibleHypertext
- Search tag in package javax.accessibility
Section
Interface AccessibleSelection
- Search tag in package javax.accessibility
Section
Interface AccessibleText
- Search tag in package javax.accessibility
Section
Interface AccessibleValue
- Search tag in package javax.accessibility
Section
InterfaceAddress
- Class in
java.net
This class represents a Network Interface address.
interfaceModifiers()
- Static method in class java.lang.reflect.
Modifier
Return an
int
value OR-ing together the source language
 modifiers that can be applied to an interface.
interfaces()
- Method in interface com.sun.jdi.
ClassType
Gets the interfaces directly implemented by this class.
Interfaces
- Search tag in package java.net
Section
InterfaceType
- Interface in
com.sun.jdi
A mirror of an interface in the target VM.
interim()
- Method in class java.lang.
Runtime.Version
Returns the value of the
interim
element of
 the version number, or zero if it is absent.
INTERLOCK_OPEN
- Static variable in class javax.print.attribute.standard.
PrinterStateReason
One or more interlock devices on the printer are unlocked.
intern()
- Method in class java.lang.
String
Returns a canonical representation for the string object.
INTERNAL_CLOCK
- Static variable in class javax.sound.midi.
Sequencer.SyncMode
A master synchronization mode that makes the sequencer get its timing
 information from its internal clock.
INTERNAL_FRAME
- Static variable in class javax.accessibility.
AccessibleRole
A frame-like object that is clipped by a desktop pane.
INTERNAL_FRAME
- Static variable in class javax.swing.plaf.synth.
Region
InternalFrame region.
INTERNAL_FRAME_ACTIVATED
- Static variable in class javax.swing.event.
InternalFrameEvent
The "window activated" event type.
INTERNAL_FRAME_CLOSED
- Static variable in class javax.swing.event.
InternalFrameEvent
The "window closed" event.
INTERNAL_FRAME_CLOSING
- Static variable in class javax.swing.event.
InternalFrameEvent
The "window is closing" event.
INTERNAL_FRAME_DEACTIVATED
- Static variable in class javax.swing.event.
InternalFrameEvent
The "window deactivated" event type.
INTERNAL_FRAME_DEICONIFIED
- Static variable in class javax.swing.event.
InternalFrameEvent
The "window deiconified" event type.
INTERNAL_FRAME_FIRST
- Static variable in class javax.swing.event.
InternalFrameEvent
The first number in the range of IDs used for internal frame events.
INTERNAL_FRAME_ICONIFIED
- Static variable in class javax.swing.event.
InternalFrameEvent
The "window iconified" event.
INTERNAL_FRAME_LAST
- Static variable in class javax.swing.event.
InternalFrameEvent
The last number in the range of IDs used for internal frame events.
INTERNAL_FRAME_OPENED
- Static variable in class javax.swing.event.
InternalFrameEvent
The "window opened" event.
INTERNAL_FRAME_TITLE_PANE
- Static variable in class javax.swing.plaf.synth.
Region
TitlePane of an InternalFrame.
internalEntityDecl(String, String)
- Method in interface org.xml.sax.ext.
DeclHandler
Report an internal entity declaration.
internalEntityDecl(String, String)
- Method in class org.xml.sax.ext.
DefaultHandler2
InternalError
- Exception Class in
java.lang
Thrown to indicate some unexpected internal error has occurred in
 the Java Virtual Machine.
InternalError()
- Constructor for exception class java.lang.
InternalError
Constructs an
InternalError
with no detail message.
InternalError(String)
- Constructor for exception class java.lang.
InternalError
Constructs an
InternalError
with the specified
 detail message.
InternalError(String, Throwable)
- Constructor for exception class java.lang.
InternalError
Constructs an
InternalError
with the specified detail
 message and cause.
InternalError(Throwable)
- Constructor for exception class java.lang.
InternalError
Constructs an
InternalError
with the specified cause
 and a detail message of
(cause==null ? null :
 cause.toString())
(which typically contains the class and
 detail message of
cause
).
InternalException
- Exception Class in
com.sun.jdi
Thrown to indicate that an unexpected internal error has
 occurred.
InternalException()
- Constructor for exception class com.sun.jdi.
InternalException
InternalException(int)
- Constructor for exception class com.sun.jdi.
InternalException
InternalException(String)
- Constructor for exception class com.sun.jdi.
InternalException
InternalException(String)
- Constructor for exception class jdk.jshell.spi.
ExecutionControl.InternalException
InternalException(String, int)
- Constructor for exception class com.sun.jdi.
InternalException
INTERNALFRAME
- Static variable in class com.sun.java.accessibility.util.
EventID
Maps to Swing InternalFrame support (i.e., InternalFrameListener)
internalFrameActivated(InternalFrameEvent)
- Method in class javax.swing.event.
InternalFrameAdapter
Invoked when an internal frame is activated.
internalFrameActivated(InternalFrameEvent)
- Method in interface javax.swing.event.
InternalFrameListener
Invoked when an internal frame is activated.
internalFrameActivated(InternalFrameEvent)
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI.BasicInternalFrameListener
Invoked when an internal frame is activated.
InternalFrameAdapter
- Class in
javax.swing.event
An abstract adapter class for receiving internal frame events.
InternalFrameAdapter()
- Constructor for class javax.swing.event.
InternalFrameAdapter
Constructor for subclasses to call.
InternalFrameBorder()
- Constructor for class javax.swing.plaf.metal.
MetalBorders.InternalFrameBorder
Constructs a
InternalFrameBorder
.
internalFrameClosed(InternalFrameEvent)
- Method in class javax.swing.event.
InternalFrameAdapter
Invoked when an internal frame has been closed.
internalFrameClosed(InternalFrameEvent)
- Method in interface javax.swing.event.
InternalFrameListener
Invoked when an internal frame has been closed.
internalFrameClosed(InternalFrameEvent)
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI.BasicInternalFrameListener
Invoked when an internal frame has been closed.
internalFrameClosing(InternalFrameEvent)
- Method in class javax.swing.event.
InternalFrameAdapter
Invoked when an internal frame is in the process of being closed.
internalFrameClosing(InternalFrameEvent)
- Method in interface javax.swing.event.
InternalFrameListener
Invoked when an internal frame is in the process of being closed.
internalFrameClosing(InternalFrameEvent)
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI.BasicInternalFrameListener
Invoked when an internal frame is in the process of being closed.
internalFrameDeactivated(InternalFrameEvent)
- Method in class javax.swing.event.
InternalFrameAdapter
Invoked when an internal frame is de-activated.
internalFrameDeactivated(InternalFrameEvent)
- Method in interface javax.swing.event.
InternalFrameListener
Invoked when an internal frame is de-activated.
internalFrameDeactivated(InternalFrameEvent)
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI.BasicInternalFrameListener
Invoked when an internal frame is de-activated.
internalFrameDeiconified(InternalFrameEvent)
- Method in class javax.swing.event.
InternalFrameAdapter
Invoked when an internal frame is de-iconified.
internalFrameDeiconified(InternalFrameEvent)
- Method in interface javax.swing.event.
InternalFrameListener
Invoked when an internal frame is de-iconified.
internalFrameDeiconified(InternalFrameEvent)
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI.BasicInternalFrameListener
Invoked when an internal frame is de-iconified.
InternalFrameEvent
- Class in
javax.swing.event
An
AWTEvent
that adds support for
JInternalFrame
objects as the event source.
InternalFrameEvent(JInternalFrame, int)
- Constructor for class javax.swing.event.
InternalFrameEvent
Constructs an
InternalFrameEvent
object.
InternalFrameFocusTraversalPolicy
- Class in
javax.swing
A FocusTraversalPolicy which can optionally provide an algorithm for
 determining a JInternalFrame's initial Component.
InternalFrameFocusTraversalPolicy()
- Constructor for class javax.swing.
InternalFrameFocusTraversalPolicy
Constructor for subclasses to call.
internalFrameIconified(InternalFrameEvent)
- Method in class javax.swing.event.
InternalFrameAdapter
Invoked when an internal frame is iconified.
internalFrameIconified(InternalFrameEvent)
- Method in interface javax.swing.event.
InternalFrameListener
Invoked when an internal frame is iconified.
internalFrameIconified(InternalFrameEvent)
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI.BasicInternalFrameListener
Invoked when an internal frame is iconified.
internalFrameLayout
- Variable in class javax.swing.plaf.basic.
BasicInternalFrameUI
Internal frame layout
InternalFrameLayout()
- Constructor for class javax.swing.plaf.basic.
BasicInternalFrameUI.InternalFrameLayout
Constructs an
InternalFrameLayout
.
InternalFrameListener
- Interface in
javax.swing.event
The listener interface for receiving internal frame events.
internalFrameOpened(InternalFrameEvent)
- Method in class javax.swing.event.
InternalFrameAdapter
Invoked when an internal frame has been opened.
internalFrameOpened(InternalFrameEvent)
- Method in interface javax.swing.event.
InternalFrameListener
Invoked when a internal frame has been opened.
internalFrameOpened(InternalFrameEvent)
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI.BasicInternalFrameListener
Invoked when a internal frame has been opened.
InternalFramePropertyChangeListener()
- Constructor for class javax.swing.plaf.basic.
BasicInternalFrameUI.InternalFramePropertyChangeListener
Constructs an
InternalFramePropertyChangeListener
.
InternalFrameUI
- Class in
javax.swing.plaf
Pluggable look and feel interface for JInternalFrame.
InternalFrameUI()
- Constructor for class javax.swing.plaf.
InternalFrameUI
Constructor for subclasses to call.
internalGet(int)
- Method in class java.util.
Calendar
Returns the value of the given calendar field.
internalName()
- Method in interface java.lang.constant.
PackageDesc
Returns the fully qualified (slash-separated) package name in internal form
 of this
PackageDesc
.
InternationalFormatter
- Class in
javax.swing.text
InternationalFormatter
extends
DefaultFormatter
,
 using an instance of
java.text.Format
to handle the
 conversion to a String, and the conversion from a String.
InternationalFormatter()
- Constructor for class javax.swing.text.
InternationalFormatter
Creates an
InternationalFormatter
with no
Format
specified.
InternationalFormatter(Format)
- Constructor for class javax.swing.text.
InternationalFormatter
Creates an
InternationalFormatter
with the specified
Format
instance.
Interoperability
- Search tag in interface java.nio.file.Path
Section
Interoperability
- Search tag in interface java.nio.file.attribute.AclFileAttributeView
Section
Interoperability
- Search tag in package java.lang.management
Section
Interoperability
- Search tag in package java.nio.file
Section
INTEROPERABILITY_INDEX_R98
- Static variable in class javax.imageio.plugins.tiff.
ExifInteroperabilityTagSet
A value to be used with the "InteroperabilityIndex" tag.
INTEROPERABILITY_INDEX_THM
- Static variable in class javax.imageio.plugins.tiff.
ExifInteroperabilityTagSet
A value to be used with the "InteroperabilityIndex" tag.
Interoperability between versions of the JMX specification
- Search tag in package javax.management
Section
Interoperability with java.nio.file package
- Search tag in class java.io.File
Section
Interoperation between method handles and Java generics
- Search tag in class java.lang.invoke.MethodHandle
Section
Interoperation between method handles and the Core Reflection API
- Search tag in class java.lang.invoke.MethodHandle
Section
Interoperation between VarHandles and Java generics
- Search tag in class java.lang.invoke.VarHandle
Section
Interoperation between VarHandles and the Core Reflection API
- Search tag in class java.lang.invoke.VarHandle
Section
interpolate()
- Method in interface java.lang.
StringTemplate
PREVIEW
Returns the string interpolation of the fragments and values for this
StringTemplate
PREVIEW
.
interpolate(List<String>, List<?>)
- Static method in interface java.lang.
StringTemplate
PREVIEW
Creates a string that interleaves the elements of values between the
 elements of fragments.
INTERPRETER_RESOURCE_UNAVAILABLE
- Static variable in class javax.print.attribute.standard.
PrinterStateReason
An interpreter resource is unavailable (e.g., font, form).
interrupt()
- Method in interface com.sun.jdi.
ThreadReference
Interrupts this thread unless the thread has been suspended by the
 debugger.
interrupt()
- Method in class java.lang.
Thread
Interrupts this thread.
interrupt()
- Method in class java.lang.
ThreadGroup
Interrupts all
live
platform threads in
 this thread group and its subgroups.
interrupted()
- Static method in class java.lang.
Thread
Tests whether the current thread has been interrupted.
InterruptedByTimeoutException
- Exception Class in
java.nio.channels
Checked exception received by a thread when a timeout elapses before an
 asynchronous operation completes.
InterruptedByTimeoutException()
- Constructor for exception class java.nio.channels.
InterruptedByTimeoutException
Constructs an instance of this class.
InterruptedException
- Exception Class in
java.lang
Thrown when a thread is waiting, sleeping, or otherwise occupied,
 and the thread is interrupted, either before or during the activity.
InterruptedException()
- Constructor for exception class java.lang.
InterruptedException
Constructs an
InterruptedException
with no detail  message.
InterruptedException(String)
- Constructor for exception class java.lang.
InterruptedException
Constructs an
InterruptedException
with the
 specified detail message.
InterruptedIOException
- Exception Class in
java.io
Signals that an I/O operation has been interrupted.
InterruptedIOException()
- Constructor for exception class java.io.
InterruptedIOException
Constructs an
InterruptedIOException
with
null
as its error detail message.
InterruptedIOException(String)
- Constructor for exception class java.io.
InterruptedIOException
Constructs an
InterruptedIOException
with the
 specified detail message.
InterruptedNamingException
- Exception Class in
javax.naming
This exception is thrown when the naming operation
 being invoked has been interrupted.
InterruptedNamingException()
- Constructor for exception class javax.naming.
InterruptedNamingException
Constructs an instance of InterruptedNamingException with
 all name resolution fields and explanation initialized to null.
InterruptedNamingException(String)
- Constructor for exception class javax.naming.
InterruptedNamingException
Constructs an instance of InterruptedNamingException using an
 explanation of the problem.
InterruptibleChannel
- Interface in
java.nio.channels
A channel that can be asynchronously closed and interrupted.
intersect(Area)
- Method in class java.awt.geom.
Area
Sets the shape of this
Area
to the intersection of
 its current shape and the shape of the specified
Area
.
intersect(Rectangle2D, Rectangle2D, Rectangle2D)
- Static method in class java.awt.geom.
Rectangle2D
Intersects the pair of specified source
Rectangle2D
objects and puts the result into the specified destination
Rectangle2D
object.
INTERSECT
- Static variable in class javax.xml.crypto.dsig.spec.
XPathType.Filter
The intersect filter operation.
intersection(Rectangle)
- Method in class java.awt.
Rectangle
Computes the intersection of this
Rectangle
with the
 specified
Rectangle
.
INTERSECTION
- Enum constant in enum class javax.lang.model.type.
TypeKind
An intersection type.
INTERSECTION_TYPE
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
IntersectionTypeTree
.
IntersectionType
- Interface in
javax.lang.model.type
Represents an intersection type.
IntersectionTypeTree
- Interface in
com.sun.source.tree
A tree node for an intersection type in a cast expression.
intersects(double, double, double, double)
- Method in class java.awt.geom.
Arc2D
Determines whether or not the interior of the arc intersects
 the interior of the specified rectangle.
intersects(double, double, double, double)
- Method in class java.awt.geom.
Area
Tests if the interior of the
Shape
intersects the
 interior of a specified rectangular area.
intersects(double, double, double, double)
- Method in class java.awt.geom.
CubicCurve2D
Tests if the interior of the
Shape
intersects the
 interior of a specified rectangular area.
intersects(double, double, double, double)
- Method in class java.awt.geom.
Ellipse2D
Tests if the interior of the
Shape
intersects the
 interior of a specified rectangular area.
intersects(double, double, double, double)
- Method in class java.awt.geom.
Line2D
Tests if the interior of the
Shape
intersects the
 interior of a specified rectangular area.
intersects(double, double, double, double)
- Method in class java.awt.geom.
Path2D
Tests if the interior of the
Shape
intersects the
 interior of a specified rectangular area.
intersects(double, double, double, double)
- Method in class java.awt.geom.
QuadCurve2D
Tests if the interior of the
Shape
intersects the
 interior of a specified rectangular area.
intersects(double, double, double, double)
- Method in class java.awt.geom.
Rectangle2D
Tests if the interior of the
Shape
intersects the
 interior of a specified rectangular area.
intersects(double, double, double, double)
- Method in class java.awt.geom.
RoundRectangle2D
Tests if the interior of the
Shape
intersects the
 interior of a specified rectangular area.
intersects(double, double, double, double)
- Method in class java.awt.
Polygon
Tests if the interior of the
Shape
intersects the
 interior of a specified rectangular area.
intersects(double, double, double, double)
- Method in interface java.awt.
Shape
Tests if the interior of the
Shape
intersects the
 interior of a specified rectangular area.
intersects(PathIterator, double, double, double, double)
- Static method in class java.awt.geom.
Path2D
Tests if the interior of the specified
PathIterator
intersects the interior of a specified set of rectangular
 coordinates.
intersects(PathIterator, Rectangle2D)
- Static method in class java.awt.geom.
Path2D
Tests if the interior of the specified
PathIterator
intersects the interior of a specified
Rectangle2D
.
intersects(Rectangle2D)
- Method in class java.awt.geom.
Area
Tests if the interior of the
Shape
intersects the
 interior of a specified
Rectangle2D
.
intersects(Rectangle2D)
- Method in class java.awt.geom.
CubicCurve2D
Tests if the interior of the
Shape
intersects the
 interior of a specified
Rectangle2D
.
intersects(Rectangle2D)
- Method in class java.awt.geom.
Line2D
Tests if the interior of the
Shape
intersects the
 interior of a specified
Rectangle2D
.
intersects(Rectangle2D)
- Method in class java.awt.geom.
Path2D
Tests if the interior of the
Shape
intersects the
 interior of a specified
Rectangle2D
.
intersects(Rectangle2D)
- Method in class java.awt.geom.
QuadCurve2D
Tests if the interior of the
Shape
intersects the
 interior of a specified
Rectangle2D
.
intersects(Rectangle2D)
- Method in class java.awt.geom.
RectangularShape
Tests if the interior of the
Shape
intersects the
 interior of a specified
Rectangle2D
.
intersects(Rectangle2D)
- Method in class java.awt.
Polygon
Tests if the interior of the
Shape
intersects the
 interior of a specified
Rectangle2D
.
intersects(Rectangle2D)
- Method in interface java.awt.
Shape
Tests if the interior of the
Shape
intersects the
 interior of a specified
Rectangle2D
.
intersects(Rectangle)
- Method in class java.awt.
Rectangle
Determines whether or not this
Rectangle
and the specified
Rectangle
intersect.
intersects(BitSet)
- Method in class java.util.
BitSet
Returns true if the specified
BitSet
has any bits set to
true
that are also set to
true
in this
BitSet
.
intersectsLine(double, double, double, double)
- Method in class java.awt.geom.
Line2D
Tests if the line segment from
(x1,y1)
to
(x2,y2)
intersects this line segment.
intersectsLine(double, double, double, double)
- Method in class java.awt.geom.
Rectangle2D
Tests if the specified line segment intersects the interior of this
Rectangle2D
.
intersectsLine(Line2D)
- Method in class java.awt.geom.
Line2D
Tests if the specified line segment intersects this line segment.
intersectsLine(Line2D)
- Method in class java.awt.geom.
Rectangle2D
Tests if the specified line segment intersects the interior of this
Rectangle2D
.
INTERVAL_ADDED
- Static variable in class javax.swing.event.
ListDataEvent
Identifies the addition of one or more contiguous items to the list
INTERVAL_REMOVED
- Static variable in class javax.swing.event.
ListDataEvent
Identifies the removal of one or more contiguous items from the list
intervalAdded(ListDataEvent)
- Method in interface javax.swing.event.
ListDataListener
Sent after the indices in the index0,index1
 interval have been inserted in the data model.
intervalAdded(ListDataEvent)
- Method in class javax.swing.
JComboBox
This method is public as an implementation side effect.
intervalAdded(ListDataEvent)
- Method in class javax.swing.
JList.AccessibleJList
List Data Listener interval added method.
intervalAdded(ListDataEvent)
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI.ListDataHandler
intervalAdded(ListDataEvent)
- Method in class javax.swing.plaf.basic.
BasicComboPopup.ListDataHandler
intervalAdded(ListDataEvent)
- Method in class javax.swing.plaf.basic.
BasicDirectoryModel
Deprecated, for removal: This API element is subject to removal in a future version.
Obsolete method, not used anymore.
intervalAdded(ListDataEvent)
- Method in class javax.swing.plaf.basic.
BasicListUI.ListDataHandler
intervalRemoved(ListDataEvent)
- Method in interface javax.swing.event.
ListDataListener
Sent after the indices in the index0,index1 interval
 have been removed from the data model.
intervalRemoved(ListDataEvent)
- Method in class javax.swing.
JComboBox
This method is public as an implementation side effect.
intervalRemoved(ListDataEvent)
- Method in class javax.swing.
JList.AccessibleJList
List Data Listener interval removed method.
intervalRemoved(ListDataEvent)
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI.ListDataHandler
intervalRemoved(ListDataEvent)
- Method in class javax.swing.plaf.basic.
BasicComboPopup.ListDataHandler
intervalRemoved(ListDataEvent)
- Method in class javax.swing.plaf.basic.
BasicDirectoryModel
Deprecated, for removal: This API element is subject to removal in a future version.
Obsolete method, not used anymore.
intervalRemoved(ListDataEvent)
- Method in class javax.swing.plaf.basic.
BasicListUI.ListDataHandler
IntFunction<R>
- Interface in
java.util.function
Represents a function that accepts an int-valued argument and produces a
 result.
intKey()
- Method in class java.awt.
RenderingHints.Key
Returns the private integer key that the subclass
 instantiated this Key with.
intoArray(boolean[], int)
- Method in class jdk.incubator.vector.
VectorMask
Stores this mask into a
boolean
array starting at offset.
intoArray(byte[], int)
- Method in class jdk.incubator.vector.
ByteVector
Stores this vector into an array of type
byte[]
starting at an offset.
intoArray(byte[], int, int[], int)
- Method in class jdk.incubator.vector.
ByteVector
Scatters this vector into an array of type
byte[]
using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
intoArray(byte[], int, int[], int, VectorMask<Byte>)
- Method in class jdk.incubator.vector.
ByteVector
Scatters this vector into an array of type
byte[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
intoArray(byte[], int, VectorMask<Byte>)
- Method in class jdk.incubator.vector.
ByteVector
Stores this vector into an array of type
byte[]
starting at offset and using a mask.
intoArray(double[], int)
- Method in class jdk.incubator.vector.
DoubleVector
Stores this vector into an array of type
double[]
starting at an offset.
intoArray(double[], int, int[], int)
- Method in class jdk.incubator.vector.
DoubleVector
Scatters this vector into an array of type
double[]
using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
intoArray(double[], int, int[], int, VectorMask<Double>)
- Method in class jdk.incubator.vector.
DoubleVector
Scatters this vector into an array of type
double[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
intoArray(double[], int, VectorMask<Double>)
- Method in class jdk.incubator.vector.
DoubleVector
Stores this vector into an array of type
double[]
starting at offset and using a mask.
intoArray(float[], int)
- Method in class jdk.incubator.vector.
FloatVector
Stores this vector into an array of type
float[]
starting at an offset.
intoArray(float[], int, int[], int)
- Method in class jdk.incubator.vector.
FloatVector
Scatters this vector into an array of type
float[]
using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
intoArray(float[], int, int[], int, VectorMask<Float>)
- Method in class jdk.incubator.vector.
FloatVector
Scatters this vector into an array of type
float[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
intoArray(float[], int, VectorMask<Float>)
- Method in class jdk.incubator.vector.
FloatVector
Stores this vector into an array of type
float[]
starting at offset and using a mask.
intoArray(int[], int)
- Method in class jdk.incubator.vector.
IntVector
Stores this vector into an array of type
int[]
starting at an offset.
intoArray(int[], int)
- Method in class jdk.incubator.vector.
VectorShuffle
Stores this shuffle into an
int
array starting at offset.
intoArray(int[], int, int[], int)
- Method in class jdk.incubator.vector.
IntVector
Scatters this vector into an array of type
int[]
using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
intoArray(int[], int, int[], int, VectorMask<Integer>)
- Method in class jdk.incubator.vector.
IntVector
Scatters this vector into an array of type
int[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
intoArray(int[], int, VectorMask<Integer>)
- Method in class jdk.incubator.vector.
IntVector
Stores this vector into an array of type
int[]
starting at offset and using a mask.
intoArray(long[], int)
- Method in class jdk.incubator.vector.
LongVector
Stores this vector into an array of type
long[]
starting at an offset.
intoArray(long[], int, int[], int)
- Method in class jdk.incubator.vector.
LongVector
Scatters this vector into an array of type
long[]
using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
intoArray(long[], int, int[], int, VectorMask<Long>)
- Method in class jdk.incubator.vector.
LongVector
Scatters this vector into an array of type
long[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
intoArray(long[], int, VectorMask<Long>)
- Method in class jdk.incubator.vector.
LongVector
Stores this vector into an array of type
long[]
starting at offset and using a mask.
intoArray(short[], int)
- Method in class jdk.incubator.vector.
ShortVector
Stores this vector into an array of type
short[]
starting at an offset.
intoArray(short[], int, int[], int)
- Method in class jdk.incubator.vector.
ShortVector
Scatters this vector into an array of type
short[]
using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
intoArray(short[], int, int[], int, VectorMask<Short>)
- Method in class jdk.incubator.vector.
ShortVector
Scatters this vector into an array of type
short[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
intoArray(short[], int, VectorMask<Short>)
- Method in class jdk.incubator.vector.
ShortVector
Stores this vector into an array of type
short[]
starting at offset and using a mask.
intoBooleanArray(boolean[], int)
- Method in class jdk.incubator.vector.
ByteVector
Stores this vector into an array of type
boolean[]
starting at an offset.
intoBooleanArray(boolean[], int, int[], int)
- Method in class jdk.incubator.vector.
ByteVector
Scatters this vector into an array of type
boolean[]
using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
intoBooleanArray(boolean[], int, int[], int, VectorMask<Byte>)
- Method in class jdk.incubator.vector.
ByteVector
Scatters this vector into an array of type
boolean[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
intoBooleanArray(boolean[], int, VectorMask<Byte>)
- Method in class jdk.incubator.vector.
ByteVector
Stores this vector into an array of type
boolean[]
starting at offset and using a mask.
intoCharArray(char[], int)
- Method in class jdk.incubator.vector.
ShortVector
Stores this vector into an array of type
char[]
starting at an offset.
intoCharArray(char[], int, int[], int)
- Method in class jdk.incubator.vector.
ShortVector
Scatters this vector into an array of type
char[]
using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
intoCharArray(char[], int, int[], int, VectorMask<Short>)
- Method in class jdk.incubator.vector.
ShortVector
Scatters this vector into an array of type
char[]
,
 under the control of a mask, and
 using indexes obtained by adding a fixed
offset
to a
 series of secondary offsets from an
index map
.
intoCharArray(char[], int, VectorMask<Short>)
- Method in class jdk.incubator.vector.
ShortVector
Stores this vector into an array of type
char[]
starting at offset and using a mask.
intoMemorySegment(MemorySegment, long, ByteOrder)
- Method in class jdk.incubator.vector.
ByteVector
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order.
intoMemorySegment(MemorySegment, long, ByteOrder)
- Method in class jdk.incubator.vector.
DoubleVector
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order.
intoMemorySegment(MemorySegment, long, ByteOrder)
- Method in class jdk.incubator.vector.
FloatVector
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order.
intoMemorySegment(MemorySegment, long, ByteOrder)
- Method in class jdk.incubator.vector.
IntVector
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order.
intoMemorySegment(MemorySegment, long, ByteOrder)
- Method in class jdk.incubator.vector.
LongVector
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order.
intoMemorySegment(MemorySegment, long, ByteOrder)
- Method in class jdk.incubator.vector.
ShortVector
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order.
intoMemorySegment(MemorySegment, long, ByteOrder)
- Method in class jdk.incubator.vector.
Vector
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order.
intoMemorySegment(MemorySegment, long, ByteOrder, VectorMask<E>)
- Method in class jdk.incubator.vector.
Vector
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order and a mask.
intoMemorySegment(MemorySegment, long, ByteOrder, VectorMask<Byte>)
- Method in class jdk.incubator.vector.
ByteVector
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order and a mask.
intoMemorySegment(MemorySegment, long, ByteOrder, VectorMask<Double>)
- Method in class jdk.incubator.vector.
DoubleVector
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order and a mask.
intoMemorySegment(MemorySegment, long, ByteOrder, VectorMask<Float>)
- Method in class jdk.incubator.vector.
FloatVector
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order and a mask.
intoMemorySegment(MemorySegment, long, ByteOrder, VectorMask<Integer>)
- Method in class jdk.incubator.vector.
IntVector
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order and a mask.
intoMemorySegment(MemorySegment, long, ByteOrder, VectorMask<Long>)
- Method in class jdk.incubator.vector.
LongVector
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order and a mask.
intoMemorySegment(MemorySegment, long, ByteOrder, VectorMask<Short>)
- Method in class jdk.incubator.vector.
ShortVector
Stores this vector into a
memory segment
PREVIEW
starting at an offset using explicit byte order and a mask.
IntPredicate
- Interface in
java.util.function
Represents a predicate (boolean-valued function) of one
int
-valued
 argument.
Introduction
- Search tag in package java.util
Section
IntrospectionException
- Exception Class in
java.beans
Thrown when an exception happens during Introspection.
IntrospectionException
- Exception Class in
javax.management
An exception occurred during the introspection of an MBean.
IntrospectionException()
- Constructor for exception class javax.management.
IntrospectionException
Default constructor.
IntrospectionException(String)
- Constructor for exception class java.beans.
IntrospectionException
Constructs an
IntrospectionException
with a
 detailed message.
IntrospectionException(String)
- Constructor for exception class javax.management.
IntrospectionException
Constructor that allows a specific error message to be specified.
Introspector
- Class in
java.beans
The Introspector class provides a standard way for tools to learn about
 the properties, events, and methods supported by a target Java Bean.
ints()
- Method in class java.util.concurrent.
ThreadLocalRandom
Returns an effectively unlimited stream of pseudorandom
int
values.
ints()
- Method in class java.util.
Random
Returns an effectively unlimited stream of pseudorandom
int
values.
ints()
- Method in interface java.util.random.
RandomGenerator
Returns an effectively unlimited stream of pseudorandomly chosen
int
values.
ints()
- Method in class java.util.
SplittableRandom
Returns an effectively unlimited stream of pseudorandom
int
values from this generator and/or one split from it.
ints(int, int)
- Method in class java.util.concurrent.
ThreadLocalRandom
Returns an effectively unlimited stream of pseudorandom
int
values, each conforming to the given origin (inclusive) and bound
 (exclusive).
ints(int, int)
- Method in class java.util.
Random
Returns an effectively unlimited stream of pseudorandom
int
values, each conforming to the given origin (inclusive) and bound
 (exclusive).
ints(int, int)
- Method in interface java.util.random.
RandomGenerator
Returns an effectively unlimited stream of pseudorandomly chosen
int
values, where each value is between the specified origin
 (inclusive) and the specified bound (exclusive).
ints(int, int)
- Method in class java.util.
SplittableRandom
Returns an effectively unlimited stream of pseudorandom
int
values from this generator and/or one split from it; each value
 conforms to the given origin (inclusive) and bound (exclusive).
ints(long)
- Method in class java.util.concurrent.
ThreadLocalRandom
Returns a stream producing the given
streamSize
number of
 pseudorandom
int
values.
ints(long)
- Method in class java.util.
Random
Returns a stream producing the given
streamSize
number of
 pseudorandom
int
values.
ints(long)
- Method in interface java.util.random.
RandomGenerator
Returns a stream producing the given
streamSize
number of
 pseudorandomly chosen
int
values.
ints(long)
- Method in class java.util.
SplittableRandom
Returns a stream producing the given
streamSize
number
 of pseudorandom
int
values from this generator and/or
 one split from it.
ints(long, int, int)
- Method in class java.util.concurrent.
ThreadLocalRandom
Returns a stream producing the given
streamSize
number
 of pseudorandom
int
values, each conforming to the given
 origin (inclusive) and bound (exclusive).
ints(long, int, int)
- Method in class java.util.
Random
Returns a stream producing the given
streamSize
number
 of pseudorandom
int
values, each conforming to the given
 origin (inclusive) and bound (exclusive).
ints(long, int, int)
- Method in interface java.util.random.
RandomGenerator
Returns a stream producing the given
streamSize
number of
 pseudorandomly chosen
int
values, where each value is between
 the specified origin (inclusive) and the specified bound (exclusive).
ints(long, int, int)
- Method in class java.util.
SplittableRandom
Returns a stream producing the given
streamSize
number
 of pseudorandom
int
values from this generator and/or one split
 from it; each value conforms to the given origin (inclusive) and bound
 (exclusive).
intStream(Supplier<? extends Spliterator.OfInt>, int, boolean)
- Static method in class java.util.stream.
StreamSupport
Creates a new sequential or parallel
IntStream
from a
Supplier
of
Spliterator.OfInt
.
intStream(Spliterator.OfInt, boolean)
- Static method in class java.util.stream.
StreamSupport
Creates a new sequential or parallel
IntStream
from a
Spliterator.OfInt
.
IntStream
- Interface in
java.util.stream
A sequence of primitive int-valued elements supporting sequential and parallel
 aggregate operations.
IntStream.Builder
- Interface in
java.util.stream
A mutable builder for an
IntStream
.
IntStream.IntMapMultiConsumer
- Interface in
java.util.stream
Represents an operation that accepts an
int
-valued argument
 and an IntConsumer, and returns no result.
IntSummaryStatistics
- Class in
java.util
A state object for collecting statistics such as count, min, max, sum, and
 average.
IntSummaryStatistics()
- Constructor for class java.util.
IntSummaryStatistics
Constructs an empty instance with zero count, zero sum,
Integer.MAX_VALUE
min,
Integer.MIN_VALUE
max and zero
 average.
IntSummaryStatistics(long, int, int, long)
- Constructor for class java.util.
IntSummaryStatistics
Constructs a non-empty instance with the specified
count
,
min
,
max
, and
sum
.
IntSupplier
- Interface in
java.util.function
Represents a supplier of
int
-valued results.
IntToDoubleFunction
- Interface in
java.util.function
Represents a function that accepts an int-valued argument and produces a
 double-valued result.
IntToLongFunction
- Interface in
java.util.function
Represents a function that accepts an int-valued argument and produces a
 long-valued result.
IntUnaryOperator
- Interface in
java.util.function
Represents an operation on a single
int
-valued operand that produces
 an
int
-valued result.
intValue()
- Method in interface com.sun.jdi.connect.
Connector.IntegerArgument
Return the value of the argument as a int.
intValue()
- Method in interface com.sun.jdi.
PrimitiveValue
Converts this value to an IntegerValue and returns the result
 as an int.
intValue()
- Method in class java.lang.
Byte
Returns the value of this
Byte
as an
int
after
 a widening primitive conversion.
intValue()
- Method in class java.lang.
Double
Returns the value of this
Double
as an
int
after a narrowing primitive conversion.
intValue()
- Method in class java.lang.
Float
Returns the value of this
Float
as an
int
after
 a narrowing primitive conversion.
intValue()
- Method in class java.lang.
Integer
Returns the value of this
Integer
as an
int
.
intValue()
- Method in class java.lang.
Long
Returns the value of this
Long
as an
int
after
 a narrowing primitive conversion.
intValue()
- Method in class java.lang.
Number
Returns the value of the specified number as an
int
.
intValue()
- Method in class java.lang.
Short
Returns the value of this
Short
as an
int
after
 a widening primitive conversion.
intValue()
- Method in class java.math.
BigDecimal
Converts this
BigDecimal
to an
int
.
intValue()
- Method in class java.math.
BigInteger
Converts this BigInteger to an
int
.
intValue()
- Method in class java.util.concurrent.atomic.
AtomicInteger
Returns the current value of this
AtomicInteger
as an
int
,
 with memory effects as specified by
VarHandle.getVolatile(java.lang.Object...)
.
intValue()
- Method in class java.util.concurrent.atomic.
AtomicLong
Returns the current value of this
AtomicLong
as an
int
after a narrowing primitive conversion,
 with memory effects as specified by
VarHandle.getVolatile(java.lang.Object...)
.
intValue()
- Method in class java.util.concurrent.atomic.
DoubleAccumulator
Returns the
current value
as an
int
after a narrowing primitive conversion.
intValue()
- Method in class java.util.concurrent.atomic.
DoubleAdder
Returns the
DoubleAdder.sum()
as an
int
after a
 narrowing primitive conversion.
intValue()
- Method in class java.util.concurrent.atomic.
LongAccumulator
Returns the
current value
as an
int
after a narrowing primitive conversion.
intValue()
- Method in class java.util.concurrent.atomic.
LongAdder
Returns the
LongAdder.sum()
as an
int
after a narrowing
 primitive conversion.
intValue()
- Method in class java.util.logging.
Level
Get the integer value for this level.
intValueExact()
- Method in class java.math.
BigDecimal
Converts this
BigDecimal
to an
int
, checking
 for lost information.
intValueExact()
- Method in class java.math.
BigInteger
Converts this
BigInteger
to an
int
, checking
 for lost information.
IntVector
- Class in
jdk.incubator.vector
A specialized
Vector
representing an ordered immutable sequence of
int
values.
INUSE_ATTRIBUTE_ERR
- Static variable in exception class org.w3c.dom.
DOMException
If an attempt is made to add an attribute that is already in use
 elsewhere.
INVALID_ACCESS_ERR
- Static variable in exception class org.w3c.dom.
DOMException
If a parameter or an operation is not supported by the underlying
 object.
INVALID_CHARACTER_ERR
- Static variable in exception class org.w3c.dom.
DOMException
If an invalid or illegal character is specified, such as in an XML name.
INVALID_EXPRESSION_ERR
- Static variable in exception class org.w3c.dom.xpath.
XPathException
If the expression has a syntax error or otherwise is not a legal
 expression according to the rules of the specific
XPathEvaluator
or contains specialized extension
 functions or variables not supported by this implementation.
INVALID_KEY_USAGE
- Enum constant in enum class java.security.cert.
PKIXReason
The certificate's key usage is invalid.
INVALID_MODIFICATION_ERR
- Static variable in exception class org.w3c.dom.
DOMException
If an attempt is made to modify the type of the underlying object.
INVALID_NAME
- Enum constant in enum class java.security.cert.
PKIXReason
The name constraints have been violated.
INVALID_NODE_TYPE_ERR
- Static variable in exception class org.w3c.dom.ranges.
RangeException
If the container of an boundary-point of a Range is being set to either
 a node of an invalid type or a node with an ancestor of an invalid
 type.
INVALID_POLICY
- Enum constant in enum class java.security.cert.
PKIXReason
The policy constraints have been violated.
INVALID_SIGNATURE
- Enum constant in enum class java.security.cert.
CertPathValidatorException.BasicReason
The signature is invalid.
INVALID_STATE_ERR
- Static variable in exception class org.w3c.dom.
DOMException
If an attempt is made to use an object that is not, or is no longer,
 usable.
InvalidAlgorithmParameterException
- Exception Class in
java.security
This is the exception for invalid or inappropriate algorithm parameters.
InvalidAlgorithmParameterException()
- Constructor for exception class java.security.
InvalidAlgorithmParameterException
Constructs an
InvalidAlgorithmParameterException
with no detail
 message.
InvalidAlgorithmParameterException(String)
- Constructor for exception class java.security.
InvalidAlgorithmParameterException
Constructs an
InvalidAlgorithmParameterException
with the
 specified detail message.
InvalidAlgorithmParameterException(String, Throwable)
- Constructor for exception class java.security.
InvalidAlgorithmParameterException
Creates an
InvalidAlgorithmParameterException
with the
 specified detail message and cause.
InvalidAlgorithmParameterException(Throwable)
- Constructor for exception class java.security.
InvalidAlgorithmParameterException
Creates an
InvalidAlgorithmParameterException
with the
 specified cause and a detail message of
(cause==null ? null : cause.toString())
(which typically contains the class and detail message of
cause
).
InvalidApplicationException
- Exception Class in
javax.management
Thrown when an attempt is made to apply either of the following: A
 subquery expression to an MBean or a qualified attribute expression
 to an MBean of the wrong class.
InvalidApplicationException(Object)
- Constructor for exception class javax.management.
InvalidApplicationException
Constructs an
InvalidApplicationException
with the specified
Object
.
invalidate()
- Method in class java.awt.
Component
Invalidates this component and its ancestors.
invalidate()
- Method in class java.awt.
Container
Invalidates the container.
invalidate()
- Method in class java.awt.
Polygon
Invalidates or flushes any internally-cached data that depends
 on the vertex coordinates of this
Polygon
.
invalidate()
- Method in interface javax.net.ssl.
SSLSession
Invalidates the session.
invalidate()
- Method in class javax.swing.
CellRendererPane
Overridden to avoid propagating a invalidate up the tree when the
 cell renderer child is configured.
invalidate()
- Method in class javax.swing.
DefaultListCellRenderer
Overridden for performance reasons.
invalidate()
- Method in class javax.swing.table.
DefaultTableCellRenderer
Overridden for performance reasons.
invalidate()
- Method in class javax.swing.tree.
DefaultTreeCellRenderer
Overridden for performance reasons.
invalidateAll(SwitchPoint[])
- Static method in class java.lang.invoke.
SwitchPoint
Sets all of the given switch points into the invalid state.
invalidateFileCache()
- Method in class javax.swing.plaf.basic.
BasicDirectoryModel
This method is used to interrupt file loading thread.
invalidateLayout(Container)
- Method in class java.awt.
BorderLayout
Invalidates the layout, indicating that if the layout manager
 has cached information it should be discarded.
invalidateLayout(Container)
- Method in class java.awt.
CardLayout
Invalidates the layout, indicating that if the layout manager
 has cached information it should be discarded.
invalidateLayout(Container)
- Method in class java.awt.
GridBagLayout
Invalidates the layout, indicating that if the layout manager
 has cached information it should be discarded.
invalidateLayout(Container)
- Method in interface java.awt.
LayoutManager2
Invalidates the layout, indicating that if the layout manager
 has cached information it should be discarded.
invalidateLayout(Container)
- Method in class javax.swing.
BoxLayout
Indicates that a child has changed its layout related information,
 and thus any cached calculations should be flushed.
invalidateLayout(Container)
- Method in class javax.swing.
GroupLayout
Invalidates the layout, indicating that if the layout manager
 has cached information it should be discarded.
invalidateLayout(Container)
- Method in class javax.swing.
JRootPane.RootLayout
invalidateLayout(Container)
- Method in class javax.swing.
OverlayLayout
Indicates a child has changed its layout related information,
 which causes any cached calculations to be flushed.
invalidateLayout(Container)
- Method in class javax.swing.plaf.basic.
BasicSplitPaneUI.BasicHorizontalLayoutManager
Does nothing.
invalidateLayout(Container)
- Method in class javax.swing.
SpringLayout
invalidatePathBounds(TreePath)
- Method in class javax.swing.tree.
AbstractLayoutCache
Instructs the
LayoutCache
that the bounds for
path
are invalid, and need to be updated.
invalidatePathBounds(TreePath)
- Method in class javax.swing.tree.
FixedHeightLayoutCache
Does nothing, FixedHeightLayoutCache doesn't cache width, and that
 is all that could change.
invalidatePathBounds(TreePath)
- Method in class javax.swing.tree.
VariableHeightLayoutCache
Instructs the
LayoutCache
that the bounds for
path
are invalid, and need to be updated.
invalidateSizes()
- Method in class javax.swing.tree.
AbstractLayoutCache
Informs the
TreeState
that it needs to recalculate
 all the sizes it is referencing.
invalidateSizes()
- Method in class javax.swing.tree.
FixedHeightLayoutCache
Informs the TreeState that it needs to recalculate all the sizes
 it is referencing.
invalidateSizes()
- Method in class javax.swing.tree.
VariableHeightLayoutCache
Informs the
TreeState
that it needs to recalculate
 all the sizes it is referencing.
InvalidAttributeIdentifierException
- Exception Class in
javax.naming.directory
This exception is thrown when an attempt is
 made to add to create an attribute with an invalid attribute identifier.
InvalidAttributeIdentifierException()
- Constructor for exception class javax.naming.directory.
InvalidAttributeIdentifierException
Constructs a new instance of InvalidAttributeIdentifierException.
InvalidAttributeIdentifierException(String)
- Constructor for exception class javax.naming.directory.
InvalidAttributeIdentifierException
Constructs a new instance of InvalidAttributeIdentifierException using the
 explanation supplied.
InvalidAttributesException
- Exception Class in
javax.naming.directory
This exception is thrown when an attempt is
 made to add or modify an attribute set that has been specified
 incompletely or incorrectly.
InvalidAttributesException()
- Constructor for exception class javax.naming.directory.
InvalidAttributesException
Constructs a new instance of InvalidAttributesException.
InvalidAttributesException(String)
- Constructor for exception class javax.naming.directory.
InvalidAttributesException
Constructs a new instance of InvalidAttributesException using an
 explanation.
InvalidAttributeValueException
- Exception Class in
javax.management
The value specified is not valid for the attribute.
InvalidAttributeValueException
- Exception Class in
javax.naming.directory
This class is thrown when an attempt is
 made to add to an attribute a value that conflicts with the attribute's
 schema definition.
InvalidAttributeValueException()
- Constructor for exception class javax.management.
InvalidAttributeValueException
Default constructor.
InvalidAttributeValueException()
- Constructor for exception class javax.naming.directory.
InvalidAttributeValueException
Constructs a new instance of InvalidAttributeValueException.
InvalidAttributeValueException(String)
- Constructor for exception class javax.management.
InvalidAttributeValueException
Constructor that allows a specific error message to be specified.
InvalidAttributeValueException(String)
- Constructor for exception class javax.naming.directory.
InvalidAttributeValueException
Constructs a new instance of InvalidAttributeValueException using
 an explanation.
InvalidClassException
- Exception Class in
java.io
Thrown when the Serialization runtime detects one of the following
 problems with a Class.
InvalidClassException(String)
- Constructor for exception class java.io.
InvalidClassException
Report an InvalidClassException for the reason specified.
InvalidClassException(String, String)
- Constructor for exception class java.io.
InvalidClassException
Constructs an InvalidClassException object.
InvalidClassException(String, String, Throwable)
- Constructor for exception class java.io.
InvalidClassException
Report an InvalidClassException for the reason and cause specified.
InvalidClassException(String, Throwable)
- Constructor for exception class java.io.
InvalidClassException
Report an InvalidClassException for the reason and cause specified.
InvalidCodeIndexException
- Exception Class in
com.sun.jdi
Deprecated.
This exception is no longer thrown
InvalidCodeIndexException()
- Constructor for exception class com.sun.jdi.
InvalidCodeIndexException
Deprecated.
InvalidCodeIndexException(String)
- Constructor for exception class com.sun.jdi.
InvalidCodeIndexException
Deprecated.
InvalidDnDOperationException
- Exception Class in
java.awt.dnd
This exception is thrown by various methods in the java.awt.dnd package.
InvalidDnDOperationException()
- Constructor for exception class java.awt.dnd.
InvalidDnDOperationException
Create a default Exception
InvalidDnDOperationException(String)
- Constructor for exception class java.awt.dnd.
InvalidDnDOperationException
Create an Exception with its own descriptive message
invalidEdit()
- Method in class javax.swing.
JFormattedTextField.AbstractFormatter
This should be invoked when the user types an invalid character.
invalidEdit()
- Method in class javax.swing.
JFormattedTextField
Invoked when the user inputs an invalid value.
InvalidKeyException
- Exception Class in
java.security
This is the exception for invalid Keys (invalid encoding, wrong
 length, uninitialized, etc.).
InvalidKeyException
- Exception Class in
javax.management.openmbean
This runtime exception is thrown to indicate that a method parameter which was expected to be
 an item name of a
composite data
or a row index of a
tabular data
is not valid.
InvalidKeyException()
- Constructor for exception class java.security.
InvalidKeyException
Constructs an
InvalidKeyException
with no detail message.
InvalidKeyException()
- Constructor for exception class javax.management.openmbean.
InvalidKeyException
An InvalidKeyException with no detail message.
InvalidKeyException(String)
- Constructor for exception class java.security.
InvalidKeyException
Constructs an
InvalidKeyException
with the specified detail
 message.
InvalidKeyException(String)
- Constructor for exception class javax.management.openmbean.
InvalidKeyException
An InvalidKeyException with a detail message.
InvalidKeyException(String, Throwable)
- Constructor for exception class java.security.
InvalidKeyException
Creates an
InvalidKeyException
with the specified
 detail message and cause.
InvalidKeyException(Throwable)
- Constructor for exception class java.security.
InvalidKeyException
Creates an
InvalidKeyException
with the specified cause
 and a detail message of
(cause==null ? null : cause.toString())
(which typically contains the class and detail message of
cause
).
InvalidKeySpecException
- Exception Class in
java.security.spec
This is the exception for invalid key specifications.
InvalidKeySpecException()
- Constructor for exception class java.security.spec.
InvalidKeySpecException
Constructs an InvalidKeySpecException with no detail message.
InvalidKeySpecException(String)
- Constructor for exception class java.security.spec.
InvalidKeySpecException
Constructs an InvalidKeySpecException with the specified detail
 message.
InvalidKeySpecException(String, Throwable)
- Constructor for exception class java.security.spec.
InvalidKeySpecException
Creates an
InvalidKeySpecException
with the specified
 detail message and cause.
InvalidKeySpecException(Throwable)
- Constructor for exception class java.security.spec.
InvalidKeySpecException
Creates an
InvalidKeySpecException
with the specified cause
 and a detail message of
(cause==null ? null : cause.toString())
(which typically contains the class and detail message of
cause
).
InvalidLineNumberException
- Exception Class in
com.sun.jdi
Deprecated.
This exception is no longer thrown
InvalidLineNumberException()
- Constructor for exception class com.sun.jdi.
InvalidLineNumberException
Deprecated.
InvalidLineNumberException(String)
- Constructor for exception class com.sun.jdi.
InvalidLineNumberException
Deprecated.
InvalidMarkException
- Exception Class in
java.nio
Unchecked exception thrown when an attempt is made to reset a buffer
 when its mark is not defined.
InvalidMarkException()
- Constructor for exception class java.nio.
InvalidMarkException
Constructs an instance of this class.
InvalidMidiDataException
- Exception Class in
javax.sound.midi
An
InvalidMidiDataException
indicates that inappropriate MIDI data
 was encountered.
InvalidMidiDataException()
- Constructor for exception class javax.sound.midi.
InvalidMidiDataException
Constructs an
InvalidMidiDataException
with
null
for its
 error detail message.
InvalidMidiDataException(String)
- Constructor for exception class javax.sound.midi.
InvalidMidiDataException
Constructs an
InvalidMidiDataException
with the specified detail
 message.
InvalidModuleDescriptorException
- Exception Class in
java.lang.module
Thrown when reading a module descriptor and the module descriptor is found
 to be malformed or otherwise cannot be interpreted as a module descriptor.
InvalidModuleDescriptorException()
- Constructor for exception class java.lang.module.
InvalidModuleDescriptorException
Constructs an
InvalidModuleDescriptorException
with no detail
 message.
InvalidModuleDescriptorException(String)
- Constructor for exception class java.lang.module.
InvalidModuleDescriptorException
Constructs an
InvalidModuleDescriptorException
with the
 specified detail message.
InvalidModuleException
- Exception Class in
com.sun.jdi
Thrown to indicate that the requested module is invalid
 or became invalid after the module was unloaded.
InvalidModuleException()
- Constructor for exception class com.sun.jdi.
InvalidModuleException
Constructs an
InvalidModuleException
with no detail message.
InvalidModuleException(String)
- Constructor for exception class com.sun.jdi.
InvalidModuleException
Constructs an
InvalidModuleException
with the given detail
 message.
InvalidNameException
- Exception Class in
javax.naming
This exception indicates that the name being specified does
 not conform to the naming syntax of a naming system.
InvalidNameException()
- Constructor for exception class javax.naming.
InvalidNameException
Constructs an instance of InvalidNameException with
 all fields set to null.
InvalidNameException(String)
- Constructor for exception class javax.naming.
InvalidNameException
Constructs an instance of InvalidNameException using an
 explanation of the problem.
InvalidObjectException
- Exception Class in
java.io
Indicates that one or more deserialized objects failed validation
 tests.
InvalidObjectException(String)
- Constructor for exception class java.io.
InvalidObjectException
Constructs an
InvalidObjectException
.
InvalidObjectException(String, Throwable)
- Constructor for exception class java.io.
InvalidObjectException
Constructs an
InvalidObjectException
with the given
 reason and cause.
InvalidOpenTypeException
- Exception Class in
javax.management.openmbean
This runtime exception is thrown to indicate that the
open type
of an
open data
value
 is not the one expected.
InvalidOpenTypeException()
- Constructor for exception class javax.management.openmbean.
InvalidOpenTypeException
An InvalidOpenTypeException with no detail message.
InvalidOpenTypeException(String)
- Constructor for exception class javax.management.openmbean.
InvalidOpenTypeException
An InvalidOpenTypeException with a detail message.
InvalidParameterException
- Exception Class in
java.security
This exception, designed for use by the JCA/JCE engine classes,
 is thrown when an invalid parameter is passed
 to a method.
InvalidParameterException()
- Constructor for exception class java.security.
InvalidParameterException
Constructs an
InvalidParameterException
with no detail message.
InvalidParameterException(String)
- Constructor for exception class java.security.
InvalidParameterException
Constructs an
InvalidParameterException
with the specified
 detail message.
InvalidParameterException(String, Throwable)
- Constructor for exception class java.security.
InvalidParameterException
Constructs an
InvalidParameterException
with the specified
 detail message and cause.
InvalidParameterException(Throwable)
- Constructor for exception class java.security.
InvalidParameterException
Constructs an
InvalidParameterException
with the specified cause
 and a detail message of
(cause==null ? null : cause.toString())
(which typically contains the class and detail message of
cause
).
InvalidParameterSpecException
- Exception Class in
java.security.spec
This is the exception for invalid parameter specifications.
InvalidParameterSpecException()
- Constructor for exception class java.security.spec.
InvalidParameterSpecException
Constructs an InvalidParameterSpecException with no detail message.
InvalidParameterSpecException(String)
- Constructor for exception class java.security.spec.
InvalidParameterSpecException
Constructs an InvalidParameterSpecException with the specified detail
 message.
InvalidPathException
- Exception Class in
java.nio.file
Unchecked exception thrown when path string cannot be converted into a
Path
because the path string contains invalid characters, or
 the path string is invalid for other file system specific reasons.
InvalidPathException(String, String)
- Constructor for exception class java.nio.file.
InvalidPathException
Constructs an instance from the given input string and reason.
InvalidPathException(String, String, int)
- Constructor for exception class java.nio.file.
InvalidPathException
Constructs an instance from the given input string, reason, and error
 index.
InvalidPreferencesFormatException
- Exception Class in
java.util.prefs
Thrown to indicate that an operation could not complete because
 the input did not conform to the appropriate XML document type
 for a collection of preferences, as per the
Preferences
specification.
InvalidPreferencesFormatException(String)
- Constructor for exception class java.util.prefs.
InvalidPreferencesFormatException
Constructs an InvalidPreferencesFormatException with the specified
 detail message.
InvalidPreferencesFormatException(String, Throwable)
- Constructor for exception class java.util.prefs.
InvalidPreferencesFormatException
Constructs an InvalidPreferencesFormatException with the specified
 detail message and cause.
InvalidPreferencesFormatException(Throwable)
- Constructor for exception class java.util.prefs.
InvalidPreferencesFormatException
Constructs an InvalidPreferencesFormatException with the specified
 cause.
InvalidPropertiesFormatException
- Exception Class in
java.util
Thrown to indicate that an operation could not complete because
 the input did not conform to the appropriate XML document type
 for a collection of properties, as per the
Properties
specification.
InvalidPropertiesFormatException(String)
- Constructor for exception class java.util.
InvalidPropertiesFormatException
Constructs an InvalidPropertiesFormatException with the specified
 detail message.
InvalidPropertiesFormatException(Throwable)
- Constructor for exception class java.util.
InvalidPropertiesFormatException
Constructs an InvalidPropertiesFormatException with the specified
 cause.
InvalidRelationIdException
- Exception Class in
javax.management.relation
This exception is raised when relation id provided for a relation is already
 used.
InvalidRelationIdException()
- Constructor for exception class javax.management.relation.
InvalidRelationIdException
Default constructor, no message put in exception.
InvalidRelationIdException(String)
- Constructor for exception class javax.management.relation.
InvalidRelationIdException
Constructor with given message put in exception.
InvalidRelationServiceException
- Exception Class in
javax.management.relation
This exception is raised when an invalid Relation Service is provided.
InvalidRelationServiceException()
- Constructor for exception class javax.management.relation.
InvalidRelationServiceException
Default constructor, no message put in exception.
InvalidRelationServiceException(String)
- Constructor for exception class javax.management.relation.
InvalidRelationServiceException
Constructor with given message put in exception.
InvalidRelationTypeException
- Exception Class in
javax.management.relation
Invalid relation type.
InvalidRelationTypeException()
- Constructor for exception class javax.management.relation.
InvalidRelationTypeException
Default constructor, no message put in exception.
InvalidRelationTypeException(String)
- Constructor for exception class javax.management.relation.
InvalidRelationTypeException
Constructor with given message put in exception.
InvalidRequestStateException
- Exception Class in
com.sun.jdi.request
Thrown to indicate that the requested event cannot be modified
 because it is enabled.
InvalidRequestStateException()
- Constructor for exception class com.sun.jdi.request.
InvalidRequestStateException
InvalidRequestStateException(String)
- Constructor for exception class com.sun.jdi.request.
InvalidRequestStateException
InvalidRoleInfoException
- Exception Class in
javax.management.relation
This exception is raised when, in a role info, its minimum degree is greater
 than its maximum degree.
InvalidRoleInfoException()
- Constructor for exception class javax.management.relation.
InvalidRoleInfoException
Default constructor, no message put in exception.
InvalidRoleInfoException(String)
- Constructor for exception class javax.management.relation.
InvalidRoleInfoException
Constructor with given message put in exception.
InvalidRoleValueException
- Exception Class in
javax.management.relation
Role value is invalid.
InvalidRoleValueException()
- Constructor for exception class javax.management.relation.
InvalidRoleValueException
Default constructor, no message put in exception.
InvalidRoleValueException(String)
- Constructor for exception class javax.management.relation.
InvalidRoleValueException
Constructor with given message put in exception.
InvalidSearchControlsException
- Exception Class in
javax.naming.directory
This exception is thrown when the specification of
 the SearchControls for a search operation is invalid.
InvalidSearchControlsException()
- Constructor for exception class javax.naming.directory.
InvalidSearchControlsException
Constructs a new instance of InvalidSearchControlsException.
InvalidSearchControlsException(String)
- Constructor for exception class javax.naming.directory.
InvalidSearchControlsException
Constructs a new instance of InvalidSearchControlsException
 with an explanation.
InvalidSearchFilterException
- Exception Class in
javax.naming.directory
This exception is thrown when the specification of
 a search filter is invalid.
InvalidSearchFilterException()
- Constructor for exception class javax.naming.directory.
InvalidSearchFilterException
Constructs a new instance of InvalidSearchFilterException.
InvalidSearchFilterException(String)
- Constructor for exception class javax.naming.directory.
InvalidSearchFilterException
Constructs a new instance of InvalidSearchFilterException
 with an explanation.
InvalidStackFrameException
- Exception Class in
com.sun.jdi
Thrown to indicate that the requested operation cannot be
 completed because the specified stack frame is no longer valid.
InvalidStackFrameException()
- Constructor for exception class com.sun.jdi.
InvalidStackFrameException
InvalidStackFrameException(String)
- Constructor for exception class com.sun.jdi.
InvalidStackFrameException
InvalidStreamException
- Exception Class in
com.sun.nio.sctp
Unchecked exception thrown when an attempt is made to send a
 message to an invalid stream.
InvalidStreamException()
- Constructor for exception class com.sun.nio.sctp.
InvalidStreamException
Constructs an instance of this class.
InvalidStreamException(String)
- Constructor for exception class com.sun.nio.sctp.
InvalidStreamException
Constructs an instance of this class with the specified detailed message.
InvalidTargetObjectTypeException
- Exception Class in
javax.management.modelmbean
Exception thrown when an invalid target object type is specified.
InvalidTargetObjectTypeException()
- Constructor for exception class javax.management.modelmbean.
InvalidTargetObjectTypeException
Default constructor.
InvalidTargetObjectTypeException(Exception, String)
- Constructor for exception class javax.management.modelmbean.
InvalidTargetObjectTypeException
Constructor taking an exception and a string.
InvalidTargetObjectTypeException(String)
- Constructor for exception class javax.management.modelmbean.
InvalidTargetObjectTypeException
Constructor from a string.
InvalidTypeException
- Exception Class in
com.sun.jdi
Thrown to indicate a type mismatch in setting the value of a field
 or variable, or in specifying the return value of a method.
InvalidTypeException()
- Constructor for exception class com.sun.jdi.
InvalidTypeException
InvalidTypeException(String)
- Constructor for exception class com.sun.jdi.
InvalidTypeException
Invariants
- Search tag in class java.nio.Buffer
Section
inverseTransform(double[], int, double[], int, int)
- Method in class java.awt.geom.
AffineTransform
Inverse transforms an array of double precision coordinates by
 this transform.
inverseTransform(Point2D, Point2D)
- Method in class java.awt.geom.
AffineTransform
Inverse transforms the specified
ptSrc
and stores the
 result in
ptDst
.
invert()
- Method in class java.awt.geom.
AffineTransform
Sets this transform to the inverse of itself.
INVITE
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for INVITE_ENVELOPE.
INVITE_ENVELOPE
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for Invitation Envelope, 220 x 220 mm.
Invocable
- Interface in
javax.script
The optional interface implemented by ScriptEngines whose methods allow the invocation of
 procedures in scripts that have previously been executed.
INVOCATION_DEFAULT
- Static variable in class java.awt.event.
InvocationEvent
The default id for all InvocationEvents.
INVOCATION_EVENT_MASK
- Static variable in class java.awt.
AWTEvent
The event mask for selecting invocation events.
INVOCATION_FIRST
- Static variable in class java.awt.event.
InvocationEvent
Marks the first integer id for the range of invocation event ids.
INVOCATION_LAST
- Static variable in class java.awt.event.
InvocationEvent
Marks the last integer id for the range of invocation event ids.
Invocation chaining
- Search tag in class java.nio.Buffer
Section
Invocation chaining
- Search tag in class java.nio.ByteBuffer
Section
Invocation checking
- Search tag in class java.lang.invoke.MethodHandle
Section
Invocation checking
- Search tag in class java.lang.invoke.VarHandle
Section
InvocationEvent
- Class in
java.awt.event
An event which executes the
run()
method on a
Runnable
when dispatched by the AWT event dispatcher thread.
InvocationEvent(Object, int, Runnable, Object, boolean)
- Constructor for class java.awt.event.
InvocationEvent
Constructs an
InvocationEvent
with the specified
 source and ID which will execute the runnable's
run()
method when dispatched.
InvocationEvent(Object, Runnable)
- Constructor for class java.awt.event.
InvocationEvent
Constructs an
InvocationEvent
with the specified
 source which will execute the runnable's
run()
method when dispatched.
InvocationEvent(Object, Runnable, Object, boolean)
- Constructor for class java.awt.event.
InvocationEvent
Constructs an
InvocationEvent
with the specified
 source which will execute the runnable's
run()
method when dispatched.
InvocationEvent(Object, Runnable, Runnable, boolean)
- Constructor for class java.awt.event.
InvocationEvent
Constructs an
InvocationEvent
with the specified
 source which will execute the runnable's
run()
method when dispatched.
InvocationException
- Exception Class in
com.sun.jdi
Thrown to indicate an exception occurred in an invoked method within
 the target VM.
InvocationException(ObjectReference)
- Constructor for exception class com.sun.jdi.
InvocationException
InvocationHandler
- Interface in
java.lang.reflect
InvocationHandler
is the interface implemented by
 the
invocation handler
of a proxy instance.
InvocationKeyHandler()
- Constructor for class javax.swing.plaf.basic.
BasicComboPopup.InvocationKeyHandler
Constructs an
InvocationKeyHandler
.
InvocationMouseHandler()
- Constructor for class javax.swing.plaf.basic.
BasicComboPopup.InvocationMouseHandler
Constructs an
InvocationMouseHandler
.
InvocationMouseMotionHandler()
- Constructor for class javax.swing.plaf.basic.
BasicComboPopup.InvocationMouseMotionHandler
Constructs an
InvocationMouseMotionHandler
.
invocationName()
- Method in class java.lang.constant.
DynamicCallSiteDesc
Returns the invocation name that would appear in the
NameAndType
operand of the
invokedynamic
.
Invocation of Locale Sensitive Services
- Search tag in class java.util.spi.LocaleServiceProvider
Section
InvocationTargetException
- Exception Class in
java.lang.reflect
InvocationTargetException is a checked exception that wraps
 an exception thrown by an invoked method or constructor.
InvocationTargetException()
- Constructor for exception class java.lang.reflect.
InvocationTargetException
Constructs an
InvocationTargetException
with
null
as the target exception.
InvocationTargetException(Throwable)
- Constructor for exception class java.lang.reflect.
InvocationTargetException
Constructs a InvocationTargetException with a target exception.
InvocationTargetException(Throwable, String)
- Constructor for exception class java.lang.reflect.
InvocationTargetException
Constructs a InvocationTargetException with a target exception
 and a detail message.
invocationType()
- Method in class java.lang.constant.
DynamicCallSiteDesc
Returns a
MethodTypeDesc
describing the invocation type that
 would appear in the
NameAndType
operand of the
invokedynamic
.
invocationType()
- Method in interface java.lang.constant.
MethodHandleDesc
Returns a
MethodTypeDesc
describing the invocation type of the
 method handle described by this nominal descriptor.
INVOICE
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for Invoice, 5 1/2 x 8 1/2 in.
INVOICE
- Static variable in class javax.print.attribute.standard.
MediaSize.Other
Specifies the invoice size, 5.5 inches by 8.5 inches.
INVOICE
- Static variable in class javax.print.attribute.standard.
MediaSizeName
invoice size.
invoke()
- Method in class java.util.concurrent.
ForkJoinTask
Commences performing this task, awaits its completion if
 necessary, and returns its result, or throws an (unchecked)
RuntimeException
or
Error
if the underlying
 computation did so.
invoke(MethodHandles.Lookup, String, Class<?>, MethodHandle, Object...)
- Static method in class java.lang.invoke.
ConstantBootstraps
Returns the result of invoking a method handle with the provided
 arguments.
invoke(Object...)
- Method in class java.lang.invoke.
MethodHandle
Invokes the method handle, allowing any caller type descriptor,
 and optionally performing conversions on arguments and return values.
invoke(Object, Object...)
- Method in class java.lang.reflect.
Method
Invokes the underlying method represented by this
Method
object, on the specified object with the specified parameters.
invoke(Object, Method, Object[])
- Method in class java.beans.
EventHandler
Extract the appropriate property value from the event and
 pass it to the action associated with
 this
EventHandler
.
invoke(Object, Method, Object[])
- Method in interface java.lang.reflect.
InvocationHandler
Processes a method invocation on a proxy instance and returns
 the result.
invoke(Object, Method, Object[])
- Method in class java.rmi.server.
RemoteObjectInvocationHandler
Processes a method invocation made on the encapsulating
 proxy instance,
proxy
, and returns the result.
invoke(Object, Method, Object[])
- Method in class javax.management.
MBeanServerInvocationHandler
invoke(Object, Method, Object[])
- Method in class javax.management.openmbean.
CompositeDataInvocationHandler
invoke(Method)
- Method in class jdk.jshell.execution.
DirectExecutionControl
Invoke the specified "doit-method", a static method with no parameters.
invoke(String, Object[], String[])
- Method in interface javax.management.
DynamicMBean
Allows an action to be invoked on the Dynamic MBean.
invoke(String, Object[], String[])
- Method in class javax.management.modelmbean.
RequiredModelMBean
Invokes a method on or through a RequiredModelMBean and returns
 the result of the method execution.
invoke(String, Object[], String[])
- Method in class javax.management.
StandardMBean
invoke(String, String)
- Method in class jdk.jshell.execution.
DirectExecutionControl
invoke(String, String)
- Method in class jdk.jshell.execution.
JdiDefaultExecutionControl
invoke(String, String)
- Method in class jdk.jshell.execution.
StreamingExecutionControl
invoke(String, String)
- Method in interface jdk.jshell.spi.
ExecutionControl
Invokes an executable Snippet by calling a method on the specified
 wrapper class.
invoke(Remote, Method, Object[], long)
- Method in interface java.rmi.server.
RemoteRef
Invoke a method.
invoke(RemoteCall)
- Method in interface java.rmi.server.
RemoteRef
Deprecated.
1.2 style stubs no longer use this method. Instead of
 using a sequence of method calls to the remote reference
 (
newCall
,
invoke
, and
done
), a
 stub uses a single method,
invoke(Remote, Method, Object[],
 int)
, on the remote reference to carry out parameter
 marshalling, remote method executing and unmarshalling of the return
 value.
invoke(ForkJoinTask<T>)
- Method in class java.util.concurrent.
ForkJoinPool
Performs the given task, returning its result upon completion.
invoke(ObjectName, String, Object[], String[])
- Method in interface javax.management.
MBeanServer
invoke(ObjectName, String, Object[], String[])
- Method in interface javax.management.
MBeanServerConnection
Invokes an operation on an MBean.
invoke(ObjectName, String, MarshalledObject, String[], Subject)
- Method in interface javax.management.remote.rmi.
RMIConnection
Handles the method
MBeanServerConnection.invoke(ObjectName, String, Object[], String[])
.
invoke(ObjectName, String, MarshalledObject, String[], Subject)
- Method in class javax.management.remote.rmi.
RMIConnectionImpl_Stub
invoke(ObjectName, String, MarshalledObject, String[], Subject)
- Method in class javax.management.remote.rmi.
RMIConnectionImpl
INVOKE
- Enum constant in enum class com.sun.source.tree.
MemberReferenceTree.ReferenceMode
enum constant for method references.
INVOKE_NONVIRTUAL
- Static variable in interface com.sun.jdi.
ObjectReference
Perform non-virtual method invocation
INVOKE_SINGLE_THREADED
- Static variable in interface com.sun.jdi.
ClassType
Perform method invocation with only the invoking thread resumed
INVOKE_SINGLE_THREADED
- Static variable in interface com.sun.jdi.
ObjectReference
Perform method invocation with only the invoking thread resumed
invokeAll(Collection<? extends Callable<T>>)
- Method in class java.util.concurrent.
AbstractExecutorService
invokeAll(Collection<? extends Callable<T>>)
- Method in interface java.util.concurrent.
ExecutorService
Executes the given tasks, returning a list of Futures holding
 their status and results when all complete.
invokeAll(Collection<? extends Callable<T>>)
- Method in class java.util.concurrent.
ForkJoinPool
invokeAll(Collection<? extends Callable<T>>, long, TimeUnit)
- Method in class java.util.concurrent.
AbstractExecutorService
invokeAll(Collection<? extends Callable<T>>, long, TimeUnit)
- Method in interface java.util.concurrent.
ExecutorService
Executes the given tasks, returning a list of Futures holding
 their status and results
 when all complete or the timeout expires, whichever happens first.
invokeAll(Collection<T>)
- Static method in class java.util.concurrent.
ForkJoinTask
Forks all tasks in the specified collection, returning when
isDone
holds for each task or an (unchecked) exception
 is encountered, in which case the exception is rethrown.
invokeAll(ForkJoinTask<?>...)
- Static method in class java.util.concurrent.
ForkJoinTask
Forks the given tasks, returning when
isDone
holds for
 each task or an (unchecked) exception is encountered, in which
 case the exception is rethrown.
invokeAll(ForkJoinTask<?>, ForkJoinTask<?>)
- Static method in class java.util.concurrent.
ForkJoinTask
Forks the given tasks, returning when
isDone
holds for
 each task or an (unchecked) exception is encountered, in which
 case the exception is rethrown.
invokeAndWait(Runnable)
- Static method in class java.awt.
EventQueue
Causes
runnable
to have its
run
method called in the
dispatch thread
of
the system EventQueue
.
invokeAndWait(Runnable)
- Static method in class javax.swing.
SwingUtilities
Causes
doRun.run()
to be executed synchronously on the
 AWT event dispatching thread.
invokeAny(Collection<? extends Callable<T>>)
- Method in class java.util.concurrent.
AbstractExecutorService
invokeAny(Collection<? extends Callable<T>>)
- Method in interface java.util.concurrent.
ExecutorService
Executes the given tasks, returning the result
 of one that has completed successfully (i.e., without throwing
 an exception), if any do.
invokeAny(Collection<? extends Callable<T>>, long, TimeUnit)
- Method in class java.util.concurrent.
AbstractExecutorService
invokeAny(Collection<? extends Callable<T>>, long, TimeUnit)
- Method in interface java.util.concurrent.
ExecutorService
Executes the given tasks, returning the result
 of one that has completed successfully (i.e., without throwing
 an exception), if any do before the given timeout elapses.
invokeDefault(Object, Method, Object...)
- Static method in interface java.lang.reflect.
InvocationHandler
Invokes the specified default method on the given
proxy
instance with
 the given parameters.
invokeExact(Object...)
- Method in class java.lang.invoke.
MethodHandle
Invokes the method handle, allowing any caller type descriptor, but requiring an exact type match.
invokeFunction(String, Object...)
- Method in interface javax.script.
Invocable
Used to call top-level procedures and functions defined in scripts.
invokeLater(Runnable)
- Static method in class java.awt.
EventQueue
Causes
runnable
to have its
run
method called in the
dispatch thread
of
the system EventQueue
.
invokeLater(Runnable)
- Static method in class javax.swing.
SwingUtilities
Causes
doRun.run()
to be executed asynchronously on the
 AWT event dispatching thread.
invokeMethod(ThreadReference, Method, List<? extends Value>, int)
- Method in interface com.sun.jdi.
ClassType
Invokes the specified static
Method
in the
 target VM.
invokeMethod(ThreadReference, Method, List<? extends Value>, int)
- Method in interface com.sun.jdi.
InterfaceType
Invokes the specified static
Method
in the
 target VM.
invokeMethod(ThreadReference, Method, List<? extends Value>, int)
- Method in interface com.sun.jdi.
ObjectReference
Invokes the specified
Method
on this object in the
 target VM.
invokeMethod(Object, String, Object...)
- Method in interface javax.script.
Invocable
Calls a method on a script object compiled during a previous script execution,
 which is retained in the state of the
ScriptEngine
.
invoker(MethodType)
- Static method in class java.lang.invoke.
MethodHandles
Produces a special
invoker method handle
which can be used to
 invoke any method handle compatible with the given type, as if by
invoke
.
INVOKES_STOP_CELL_EDITING_PROPERTY
- Static variable in class javax.swing.
JTree
Bound property name for
messagesStopCellEditing
.
invokesStopCellEditing
- Variable in class javax.swing.
JTree
If true, when editing is to be stopped by way of selection changing,
 data in tree changing or other means
stopCellEditing
is invoked, and changes are saved.
invokeWithArguments(Object...)
- Method in class java.lang.invoke.
MethodHandle
Performs a variable arity invocation, passing the arguments in the given array
 to the method handle, as if via an inexact
invoke
from a call site
 which mentions only the type
Object
, and whose actual argument count is the length
 of the argument array.
invokeWithArguments(List<?>)
- Method in class java.lang.invoke.
MethodHandle
Performs a variable arity invocation, passing the arguments in the given list
 to the method handle, as if via an inexact
invoke
from a call site
 which mentions only the type
Object
, and whose actual argument count is the length
 of the argument list.
Invoking the Filter Factory
- Search tag in interface java.io.ObjectInputFilter
Section
IOError
- Exception Class in
java.io
Thrown when a serious I/O error has occurred.
IOError(Throwable)
- Constructor for exception class java.io.
IOError
Constructs a new instance of IOError with the specified cause.
ioException()
- Method in class java.util.
Formatter
Returns the
IOException
last thrown by this formatter's
Appendable
.
ioException()
- Method in class java.util.
Scanner
Returns the
IOException
last thrown by this
Scanner
's underlying
Readable
.
IOException
- Exception Class in
java.io
Signals that an I/O exception of some sort has occurred.
IOException()
- Constructor for exception class java.io.
IOException
Constructs an
IOException
with
null
as its error detail message.
IOException(String)
- Constructor for exception class java.io.
IOException
Constructs an
IOException
with the specified detail message.
IOException(String, Throwable)
- Constructor for exception class java.io.
IOException
Constructs an
IOException
with the specified detail message
 and cause.
IOException(Throwable)
- Constructor for exception class java.io.
IOException
Constructs an
IOException
with the specified cause and a
 detail message of
(cause==null ? null : cause.toString())
(which typically contains the class and detail message of
cause
).
iota(VectorSpecies<E>, int, int, boolean)
- Static method in class jdk.incubator.vector.
VectorShuffle
Creates a shuffle using source indexes set to sequential
 values starting from
start
and stepping
 by the given
step
.
iotaShuffle(int, int, boolean)
- Method in interface jdk.incubator.vector.
VectorSpecies
Creates a shuffle using source indexes set to sequential
 values starting from
start
and stepping
 by the given
step
.
IP_DONTFRAGMENT
- Static variable in class jdk.net.
ExtendedSocketOptions
Disable IP packet fragmentation.
IP_MULTICAST_IF
- Static variable in interface java.net.
SocketOptions
Set which outgoing interface on which to send multicast packets.
IP_MULTICAST_IF
- Static variable in class java.net.
StandardSocketOptions
The network interface for Internet Protocol (IP) multicast datagrams.
IP_MULTICAST_IF2
- Static variable in interface java.net.
SocketOptions
Same as above.
IP_MULTICAST_LOOP
- Static variable in interface java.net.
SocketOptions
This option enables or disables local loopback of multicast datagrams.
IP_MULTICAST_LOOP
- Static variable in class java.net.
StandardSocketOptions
Loopback for Internet Protocol (IP) multicast datagrams.
IP_MULTICAST_TTL
- Static variable in class java.net.
StandardSocketOptions
The
time-to-live
for Internet Protocol (IP) multicast datagrams.
IP_TOS
- Static variable in interface java.net.
SocketOptions
This option sets the type-of-service or traffic class field
 in the IP header for a TCP or UDP socket.
IP_TOS
- Static variable in class java.net.
StandardSocketOptions
The Type of Service (ToS) octet in the Internet Protocol (IP) header.
IPA_EXTENSIONS
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "IPA Extensions" Unicode character block.
IP address scope
- Search tag in class java.net.InetAddress
Section
ipadx
- Variable in class java.awt.
GridBagConstraints
This field specifies the internal padding of the component, how much
 space to add to the minimum width of the component.
ipady
- Variable in class java.awt.
GridBagConstraints
This field specifies the internal padding, that is, how much
 space to add to the minimum height of the component.
IPV4
- Static variable in class java.net.spi.
InetAddressResolver.LookupPolicy
Characteristic value signifying if IPv4 addresses need to be queried during lookup.
IPV4_FIRST
- Static variable in class java.net.spi.
InetAddressResolver.LookupPolicy
Characteristic value signifying if IPv4 addresses should be returned
 first by
InetAddressResolver
.
IPv4 / IPv6
- Search tag in package java.net
Section
IPV6
- Static variable in class java.net.spi.
InetAddressResolver.LookupPolicy
Characteristic value signifying if IPv6 addresses need to be queried during lookup.
IPV6_FIRST
- Static variable in class java.net.spi.
InetAddressResolver.LookupPolicy
Characteristic value signifying if IPv6 addresses should be returned
 first by
InetAddressResolver
.
IS_CLOSED_PROPERTY
- Static variable in class javax.swing.
JInternalFrame
Constrained property name indicating that the internal frame is closed.
IS_COALESCING
- Static variable in class javax.xml.stream.
XMLInputFactory
The property that requires the parser to coalesce adjacent character data sections
IS_DEFAULT
- Static variable in class jdk.incubator.vector.
VectorOperators
Test
bits(a)==0
.
IS_FINITE
- Static variable in class jdk.incubator.vector.
VectorOperators
Test
isFinite(a)
.
IS_ICON_PROPERTY
- Static variable in class javax.swing.
JInternalFrame
Constrained property name indicating that the internal frame is iconified.
IS_INFINITE
- Static variable in class jdk.incubator.vector.
VectorOperators
Test
isInfinite(a)
.
IS_MAXIMUM_PROPERTY
- Static variable in class javax.swing.
JInternalFrame
Constrained property name indicating that the internal frame is maximized.
IS_NAMESPACE_AWARE
- Static variable in class javax.xml.stream.
XMLInputFactory
The property used to turn on/off namespace support,
 this is to support XML 1.0 documents,
 only the true setting must be supported
IS_NAN
- Static variable in class jdk.incubator.vector.
VectorOperators
Test
isNaN(a)
.
IS_NEGATIVE
- Static variable in class jdk.incubator.vector.
VectorOperators
Test
bits(a)<0
.
IS_PALETTE
- Static variable in class javax.swing.plaf.metal.
MetalInternalFrameUI
The property
JInternalFrame.isPalette
.
IS_REPAIRING_NAMESPACES
- Static variable in class javax.xml.stream.
XMLOutputFactory
Property used to set prefix defaulting on the output side
IS_REPLACING_ENTITY_REFERENCES
- Static variable in class javax.xml.stream.
XMLInputFactory
Requires the parser to replace internal
 entity references with their replacement
 text and report them as characters
IS_SELECTED_PROPERTY
- Static variable in class javax.swing.
JInternalFrame
Constrained property name indicated that this frame has
 selected status.
IS_SUPPORTING_EXTERNAL_ENTITIES
- Static variable in class javax.xml.stream.
XMLInputFactory
The property that requires the parser to resolve external parsed entities
IS_VALIDATING
- Static variable in class javax.xml.stream.
XMLInputFactory
The property used to turn on/off implementation specific validation
isAbsolute()
- Method in class java.io.
File
Tests whether this abstract pathname is absolute.
isAbsolute()
- Method in class java.net.
URI
Tells whether or not this URI is absolute.
isAbsolute()
- Method in interface java.nio.file.
Path
Tells whether or not this path is absolute.
isAbstract()
- Method in interface com.sun.jdi.
Method
Determine if this method is abstract.
isAbstract()
- Method in interface com.sun.jdi.
ReferenceType
Determines if this type was declared abstract.
isAbstract(int)
- Static method in class java.lang.reflect.
Modifier
Return
true
if the integer argument includes the
abstract
modifier,
false
otherwise.
isAccelerated()
- Method in class java.awt.
ImageCapabilities
Returns
true
if the object whose capabilities are
 encapsulated in this
ImageCapabilities
can be or is
 accelerated.
isAcceleratorHidden()
- Method in class javax.swing.plaf.metal.
MetalToolTipUI
If the accelerator is hidden, the method returns
true
,
 otherwise, returns
false
.
isAcceptable()
- Method in class java.nio.channels.
SelectionKey
Tests whether this key's channel is ready to accept a new socket
 connection.
isAcceptAllFileFilterUsed()
- Method in class javax.swing.
JFileChooser
Returns whether the
AcceptAll FileFilter
is used.
isAccessible()
- Method in class java.lang.reflect.
AccessibleObject
Deprecated.
This method is deprecated because its name hints that it checks
 if the reflected object is accessible when it actually indicates
 if the checks for Java language access control are suppressed.
 This method may return
false
on a reflected object that is
 accessible to the caller. To test if this reflected object is accessible,
 it should use
AccessibleObject.canAccess(Object)
.
isAccessible(Scope, Element, DeclaredType)
- Method in class com.sun.source.util.
Trees
Checks whether the given element is accessible as a member of the given
 type in a given scope.
isAccessible(Scope, TypeElement)
- Method in class com.sun.source.util.
Trees
Checks whether a given type is accessible in a given scope.
isAccessibleBy(Thread)
- Method in interface java.lang.foreign.
MemorySegment
PREVIEW
Returns
true
if this segment can be accessed from the provided thread.
isAccessibleChildSelected(int)
- Method in class java.awt.
List.AccessibleAWTList
Returns true if the current child of this object is selected.
isAccessibleChildSelected(int)
- Method in class java.awt.
MenuComponent.AccessibleAWTMenuComponent
Determines if the current child of this object is selected.
isAccessibleChildSelected(int)
- Method in interface javax.accessibility.
AccessibleSelection
Determines if the current child of this object is selected.
isAccessibleChildSelected(int)
- Method in class javax.swing.
JComboBox.AccessibleJComboBox
Determines if the current child of this object is selected.
isAccessibleChildSelected(int)
- Method in class javax.swing.
JList.AccessibleJList
Returns true if the current child of this object is selected.
isAccessibleChildSelected(int)
- Method in class javax.swing.
JMenu.AccessibleJMenu
Returns true if the current child of this object is selected
 (that is, if this child is a popped-up submenu).
isAccessibleChildSelected(int)
- Method in class javax.swing.
JMenuBar.AccessibleJMenuBar
Returns true if the current child of this object is selected.
isAccessibleChildSelected(int)
- Method in class javax.swing.
JTabbedPane.AccessibleJTabbedPane
isAccessibleChildSelected(int)
- Method in class javax.swing.
JTable.AccessibleJTable
Determines if the current child of this object is selected.
isAccessibleChildSelected(int)
- Method in class javax.swing.
JTree.AccessibleJTree.AccessibleJTreeNode
Returns true if the current child of this object is selected.
isAccessibleChildSelected(int)
- Method in class javax.swing.
JTree.AccessibleJTree
Returns true if the current child of this object is selected.
isAccessibleColumnSelected(int)
- Method in interface javax.accessibility.
AccessibleTable
Returns a boolean value indicating whether the specified column is
 selected.
isAccessibleColumnSelected(int)
- Method in class javax.swing.
JTable.AccessibleJTable
Returns a boolean value indicating whether the specified column
 is selected.
isAccessibleRowSelected(int)
- Method in interface javax.accessibility.
AccessibleTable
Returns a boolean value indicating whether the specified row is selected.
isAccessibleRowSelected(int)
- Method in class javax.swing.
JTable.AccessibleJTable
Returns a boolean value indicating whether the specified row
 is selected.
isAccessibleSelected(int, int)
- Method in interface javax.accessibility.
AccessibleTable
Returns a boolean value indicating whether the accessible at a specified
 row and column is selected.
isAccessibleSelected(int, int)
- Method in class javax.swing.
JTable.AccessibleJTable
Returns a boolean value indicating whether the accessible at a
 given (row, column) is selected.
isAccessModeSupported(VarHandle.AccessMode)
- Method in class java.lang.invoke.
VarHandle
Returns
true
if the given access mode is supported, otherwise
false
.
isActionKey()
- Method in class java.awt.event.
KeyEvent
Returns whether the key in this event is an "action" key.
isActive()
- Method in class java.applet.
Applet
Deprecated.
Determines if this applet is active.
isActive()
- Method in interface java.applet.
AppletStub
Deprecated.
Determines if the applet is active.
isActive()
- Method in class java.awt.dnd.
DropTarget
Reports whether or not
 this
DropTarget
is currently active (ready to accept drops).
isActive()
- Method in class java.awt.
Window
Returns whether this Window is active.
isActive()
- Method in class javax.management.monitor.
Monitor
Tests whether the monitor MBean is active.
isActive()
- Method in interface javax.management.monitor.
MonitorMBean
Tests if the monitor MBean is active.
isActive()
- Method in class javax.management.relation.
RelationService
Checks if the Relation Service is active.
isActive()
- Method in interface javax.management.relation.
RelationServiceMBean
Checks if the Relation Service is active.
isActive()
- Method in interface javax.management.remote.
JMXConnectorServerMBean
Determines whether the connector server is active.
isActive()
- Method in class javax.management.remote.rmi.
RMIConnectorServer
isActive()
- Method in class javax.management.timer.
Timer
Tests whether the timer MBean is active.
isActive()
- Method in interface javax.management.timer.
TimerMBean
Tests whether the timer MBean is active.
isActive()
- Method in interface javax.sound.sampled.
DataLine
Indicates whether the line is engaging in active I/O (such as playback or
 capture).
isActive()
- Method in class javax.swing.text.
DefaultCaret
Determines if the caret is currently active.
isActive()
- Method in enum class jdk.jshell.
Snippet.Status
Indicates whether the Snippet is active, that is,
 will a
persistent
snippet be re-evaluated when a new
JShell.eval(String)
or
JShell.drop(Snippet)
that could change
 its status is invoked.
isAddedPath()
- Method in class javax.swing.event.
TreeSelectionEvent
Returns whether the path identified by
getPath
was
 added to the selection.
isAddedPath(int)
- Method in class javax.swing.event.
TreeSelectionEvent
Returns whether the path at
getPaths()[index]
was added
 to the selection.
isAddedPath(TreePath)
- Method in class javax.swing.event.
TreeSelectionEvent
Returns whether the specified path was added to the selection.
isAfter(int, int, Rectangle)
- Method in class javax.swing.text.
BoxView
Determines if a point falls after an allocated region.
isAfter(int, int, Rectangle)
- Method in class javax.swing.text.
CompositeView
Tests whether a point lies after the rectangle range.
isAfter(ChronoLocalDate)
- Method in interface java.time.chrono.
ChronoLocalDate
Checks if this date is after the specified date ignoring the chronology.
isAfter(ChronoLocalDate)
- Method in class java.time.
LocalDate
Checks if this date is after the specified date.
isAfter(ChronoLocalDateTime<?>)
- Method in interface java.time.chrono.
ChronoLocalDateTime
Checks if this date-time is after the specified date-time ignoring the chronology.
isAfter(ChronoLocalDateTime<?>)
- Method in class java.time.
LocalDateTime
Checks if this date-time is after the specified date-time.
isAfter(ChronoZonedDateTime<?>)
- Method in interface java.time.chrono.
ChronoZonedDateTime
Checks if the instant of this date-time is after that of the specified date-time.
isAfter(Instant)
- Method in class java.time.
Instant
Checks if this instant is after the specified instant.
isAfter(LocalTime)
- Method in class java.time.
LocalTime
Checks if this time is after the specified time.
isAfter(MonthDay)
- Method in class java.time.
MonthDay
Checks if this month-day is after the specified month-day.
isAfter(OffsetDateTime)
- Method in class java.time.
OffsetDateTime
Checks if the instant of this date-time is after that of the specified date-time.
isAfter(OffsetTime)
- Method in class java.time.
OffsetTime
Checks if the instant of this
OffsetTime
is after that of the
 specified time applying both times to a common date.
isAfter(Year)
- Method in class java.time.
Year
Checks if this year is after the specified year.
isAfter(YearMonth)
- Method in class java.time.
YearMonth
Checks if this year-month is after the specified year-month.
isAfterLast()
- Method in interface java.sql.
ResultSet
Retrieves whether the cursor is after the last row in
 this
ResultSet
object.
isAlive()
- Method in interface java.lang.foreign.
MemorySegment.Scope
PREVIEW
Returns
true
, if the regions of memory backing the memory segments associated with this scope are
 still valid.
isAlive()
- Method in class java.lang.
Process
Tests whether the process represented by this
Process
is
 alive.
isAlive()
- Method in interface java.lang.
ProcessHandle
Tests whether the process represented by this
ProcessHandle
is alive.
isAlive()
- Method in class java.lang.
Thread
Tests if this thread is alive.
isAllocationValid()
- Method in class javax.swing.text.
BoxView
Are the allocations for the children still
 valid?
isAlphabetic(int)
- Static method in class java.lang.
Character
Determines if the specified character (Unicode code point) is alphabetic.
isAlphaPremultiplied()
- Method in class java.awt.image.
BufferedImage
Returns whether or not the alpha has been premultiplied.
isAlphaPremultiplied()
- Method in class java.awt.image.
ColorModel
Returns whether or not the alpha has been premultiplied in the
 pixel values to be translated by this
ColorModel
.
isAltDown()
- Method in class java.awt.event.
InputEvent
Returns whether or not the Alt modifier is down on this event.
isAltGraphDown()
- Method in class java.awt.event.
InputEvent
Returns whether or not the AltGraph modifier is down on this event.
isAlwaysOnTop()
- Method in class java.awt.
Window
Returns whether this window is an always-on-top window.
isAlwaysOnTopSupported()
- Method in class java.awt.
Toolkit
Returns whether the always-on-top mode is supported by this toolkit.
isAlwaysOnTopSupported()
- Method in class java.awt.
Window
Returns whether the always-on-top mode is supported for this
 window.
isAncestorOf(Component)
- Method in class java.awt.
Container
Checks if the component is contained in the component hierarchy of
 this container.
isAnnotation()
- Method in class java.lang.
Class
Returns true if this
Class
object represents an annotation
 interface.
isAnnotationPresent(Class<? extends Annotation>)
- Method in class java.lang.
Class
Returns true if an annotation for the specified type
 is
present
on this element, else false.
isAnnotationPresent(Class<? extends Annotation>)
- Method in class java.lang.
Package
Returns true if an annotation for the specified type
 is
present
on this element, else false.
isAnnotationPresent(Class<? extends Annotation>)
- Method in class java.lang.reflect.
AccessibleObject
Returns true if an annotation for the specified type
 is
present
on this element, else false.
isAnnotationPresent(Class<? extends Annotation>)
- Method in interface java.lang.reflect.
AnnotatedElement
Returns true if an annotation for the specified type
 is
present
on this element, else false.
isAnonymous()
- Method in interface org.ietf.jgss.
GSSName
Tests if this name object represents an anonymous entity.
isAnonymousClass()
- Method in class java.lang.
Class
Returns
true
if and only if the underlying class
 is an anonymous class.
isAntiAliased()
- Method in class java.awt.font.
FontRenderContext
Returns a boolean which indicates whether or not some form of
 antialiasing is specified by this
FontRenderContext
.
isAnyLocalAddress()
- Method in class java.net.
Inet4Address
Utility routine to check if the InetAddress is a wildcard address.
isAnyLocalAddress()
- Method in class java.net.
Inet6Address
Utility routine to check if the InetAddress is a wildcard address.
isAnyLocalAddress()
- Method in class java.net.
InetAddress
Utility routine to check if the InetAddress is a wildcard address.
isAnyPolicyInhibited()
- Method in class java.security.cert.
PKIXParameters
Checks whether the any policy OID should be processed if it
 is included in a certificate.
isArbitrarilyJumpable()
- Method in class java.util.random.
RandomGeneratorFactory
Return true if random generator can jump an arbitrarily specified distant
 point in the state cycle.
isArchive()
- Method in interface java.nio.file.attribute.
DosFileAttributes
Returns the value of the archive attribute.
isArgument()
- Method in interface com.sun.jdi.
LocalVariable
Determines if this variable is an argument to its method.
isArmed()
- Method in interface javax.swing.
ButtonModel
Indicates partial commitment towards triggering the
 button.
isArmed()
- Method in class javax.swing.
DefaultButtonModel
Indicates partial commitment towards triggering the
 button.
isArmed()
- Method in class javax.swing.
JMenuItem
Returns whether the menu item is "armed".
isArray()
- Method in class java.lang.
Class
Determines if this
Class
object represents an array class.
isArray()
- Method in interface java.lang.constant.
ClassDesc
Returns whether this
ClassDesc
describes an array type.
isArray()
- Method in interface java.lang.invoke.
TypeDescriptor.OfField
Does this field descriptor describe an array type?
isArray()
- Method in class javax.management.openmbean.
OpenType
Returns
true
if the open data values this open
 type describes are arrays,
false
otherwise.
isArray()
- Method in class jdk.jfr.
ValueDescriptor
Returns if this value descriptor is an array type.
isArray(int, MethodType)
- Static method in class jdk.dynalink.linker.support.
Guards
Creates a method handle that returns true if the argument in the specified position is a Java array.
isAscending()
- Method in class javax.naming.ldap.
SortKey
Determines the sort order.
isAssignable(TypeMirror, TypeMirror)
- Method in interface javax.lang.model.util.
Types
Tests whether one type is assignable to another.
isAssignableFrom(Class<?>)
- Method in class java.lang.
Class
Determines if the class or interface represented by this
Class
object is either the same as, or is a superclass or
 superinterface of, the class or interface represented by the specified
Class
parameter.
isAssociative()
- Method in interface jdk.incubator.vector.
VectorOperators.Operator
Returns the associativity of this operator.
isAtBreakpoint()
- Method in interface com.sun.jdi.
ThreadReference
Determines whether the thread is suspended at a breakpoint.
isAttribute()
- Method in interface javax.xml.stream.events.
XMLEvent
A utility function to check if this event is an Attribute.
isAttributeCategorySupported(Class<? extends Attribute>)
- Method in interface javax.print.
PrintService
Determines whether a client can specify the given printing attribute
 category when setting up a job for this print service.
isAttributeRequired(String, String)
- Method in interface javax.imageio.metadata.
IIOMetadataFormat
Returns
true
if the named attribute must be
 present within the named element.
isAttributeRequired(String, String)
- Method in class javax.imageio.metadata.
IIOMetadataFormatImpl
isAttributeSpecified(int)
- Method in class javax.xml.stream.util.
StreamReaderDelegate
isAttributeSpecified(int)
- Method in interface javax.xml.stream.
XMLStreamReader
Returns a boolean which indicates if this
 attribute was created by default
isAttributeValueSupported(Attribute, DocFlavor, AttributeSet)
- Method in interface javax.print.
PrintService
Determines whether a client can specify the given printing attribute
 value when setting up a job for this Print Service.
isAuthorized()
- Method in class javax.security.sasl.
AuthorizeCallback
Determines whether the authentication id is allowed to
 act on behalf of the authorization id.
isAutoDetecting()
- Method in class java.nio.charset.
CharsetDecoder
Tells whether or not this decoder implements an auto-detecting charset.
isAutoFormSubmission()
- Method in class javax.swing.text.html.
HTMLEditorKit
Indicates whether an html form submission is processed automatically
 or only
FormSubmitEvent
is fired.
isAutoIncrement(int)
- Method in interface java.sql.
ResultSetMetaData
Indicates whether the designated column is automatically numbered.
isAutoIncrement(int)
- Method in class javax.sql.rowset.
RowSetMetaDataImpl
Retrieves whether a value stored in the designated column is
 automatically numbered, and thus readonly.
isAutomatic()
- Method in class java.lang.module.
ModuleDescriptor
Returns
true
if this is an automatic module.
isAutomaticModule(ModuleElement)
- Method in interface javax.lang.model.util.
Elements
Returns
true
if the module element is an automatic
 module,
false
otherwise.
isAutoRequestFocus()
- Method in class java.awt.
Window
Returns whether this window should receive focus on subsequently being shown
 (with a call to
setVisible(true)
), or being moved to the front
 (with a call to
Window.toFront()
).
isAutoScrolling
- Variable in class javax.swing.plaf.basic.
BasicComboPopup
If
true
the auto-scrolling is enabled.
isAutoWaitForIdle()
- Method in class java.awt.
Robot
Returns whether this Robot automatically invokes
waitForIdle
after generating an event.
isAvailable()
- Static method in class jdk.jfr.
FlightRecorder
Returns
true
if the Java Virtual Machine (JVM) has Flight Recorder capabilities.
isBackgroundSet()
- Method in class java.awt.
Component
Returns whether the background color has been explicitly set for this
 Component.
isBackingStoreEnabled()
- Method in class javax.swing.
JViewport
Deprecated.
As of Java 2 platform v1.3, replaced by
getScrollMode()
.
isBefore(int, int, Rectangle)
- Method in class javax.swing.text.
BoxView
Determines if a point falls before an allocated region.
isBefore(int, int, Rectangle)
- Method in class javax.swing.text.
CompositeView
Tests whether a point lies before the rectangle range.
isBefore(ChronoLocalDate)
- Method in interface java.time.chrono.
ChronoLocalDate
Checks if this date is before the specified date ignoring the chronology.
isBefore(ChronoLocalDate)
- Method in class java.time.
LocalDate
Checks if this date is before the specified date.
isBefore(ChronoLocalDateTime<?>)
- Method in interface java.time.chrono.
ChronoLocalDateTime
Checks if this date-time is before the specified date-time ignoring the chronology.
isBefore(ChronoLocalDateTime<?>)
- Method in class java.time.
LocalDateTime
Checks if this date-time is before the specified date-time.
isBefore(ChronoZonedDateTime<?>)
- Method in interface java.time.chrono.
ChronoZonedDateTime
Checks if the instant of this date-time is before that of the specified date-time.
isBefore(Instant)
- Method in class java.time.
Instant
Checks if this instant is before the specified instant.
isBefore(LocalTime)
- Method in class java.time.
LocalTime
Checks if this time is before the specified time.
isBefore(MonthDay)
- Method in class java.time.
MonthDay
Checks if this month-day is before the specified month-day.
isBefore(OffsetDateTime)
- Method in class java.time.
OffsetDateTime
Checks if the instant of this date-time is before that of the specified date-time.
isBefore(OffsetTime)
- Method in class java.time.
OffsetTime
Checks if the instant of this
OffsetTime
is before that of the
 specified time applying both times to a common date.
isBefore(Year)
- Method in class java.time.
Year
Checks if this year is before the specified year.
isBefore(YearMonth)
- Method in class java.time.
YearMonth
Checks if this year-month is before the specified year-month.
isBeforeFirst()
- Method in interface java.sql.
ResultSet
Retrieves whether the cursor is before the first row in
 this
ResultSet
object.
isBigEndian()
- Method in class javax.sound.sampled.
AudioFormat
Indicates whether the audio data is stored in big-endian or little-endian
 byte order.
isBlank()
- Method in class java.lang.
String
Returns
true
if the string is empty or contains only
white space
codepoints,
 otherwise
false
.
isBlock()
- Method in class javax.swing.text.html.
HTML.Tag
Returns
true
if this tag is a block
 tag, which is a tag used to add structure to a
 document.
isBlocking()
- Method in class java.nio.channels.
SelectableChannel
Tells whether or not every I/O operation on this channel will block
 until it completes.
isBlocking()
- Method in class java.nio.channels.spi.
AbstractSelectableChannel
isBlockTag()
- Method in interface jdk.javadoc.doclet.
Taglet
Indicates whether this taglet supports block tags.
isBlockTag(AttributeSet)
- Method in class javax.swing.text.html.
HTMLWriter
Determines if the HTML.Tag associated with the
 element is a block tag.
isBmpCodePoint(int)
- Static method in class java.lang.
Character
Determines whether the specified character (Unicode code point)
 is in the
Basic Multilingual Plane (BMP)
.
isBold()
- Method in class java.awt.
Font
Indicates whether or not this
Font
object's style is
 BOLD.
isBold(AttributeSet)
- Static method in class javax.swing.text.
StyleConstants
Checks whether the bold attribute is set.
isBoolean()
- Method in interface jdk.incubator.vector.
VectorOperators.Operator
Reports whether this operator returns a boolean (a mask).
isBootClassPathSupported()
- Method in interface java.lang.management.
RuntimeMXBean
Tests if the Java virtual machine supports the boot class path
 mechanism used by the bootstrap class loader to search for class
 files.
isBorderOpaque()
- Method in class javax.swing.border.
AbstractBorder
This default implementation returns false.
isBorderOpaque()
- Method in class javax.swing.border.
BevelBorder
Returns whether or not the border is opaque.
isBorderOpaque()
- Method in interface javax.swing.border.
Border
Returns whether or not the border is opaque.
isBorderOpaque()
- Method in class javax.swing.border.
CompoundBorder
Returns whether or not the compound border is opaque.
isBorderOpaque()
- Method in class javax.swing.border.
EmptyBorder
Returns whether or not the border is opaque.
isBorderOpaque()
- Method in class javax.swing.border.
EtchedBorder
Returns whether or not the border is opaque.
isBorderOpaque()
- Method in class javax.swing.border.
LineBorder
Returns whether or not the border is opaque.
isBorderOpaque()
- Method in class javax.swing.border.
MatteBorder
Returns whether or not the border is opaque.
isBorderOpaque()
- Method in class javax.swing.border.
SoftBevelBorder
Returns whether or not the border is opaque.
isBorderOpaque()
- Method in class javax.swing.border.
TitledBorder
Returns whether or not the border is opaque.
isBorderOpaque()
- Method in class javax.swing.plaf.basic.
BasicBorders.SplitPaneBorder
isBorderOpaque()
- Method in class javax.swing.plaf.
BorderUIResource
isBorderPainted()
- Method in class javax.swing.
AbstractButton
Gets the
borderPainted
property.
isBorderPainted()
- Method in class javax.swing.
JMenuBar
Returns true if the menu bars border should be painted.
isBorderPainted()
- Method in class javax.swing.
JPopupMenu
Checks whether the border should be painted.
isBorderPainted()
- Method in class javax.swing.
JProgressBar
Returns the
borderPainted
property.
isBorderPainted()
- Method in class javax.swing.
JToolBar
Gets the
borderPainted
property.
isBorderPaintedFlat()
- Method in class javax.swing.
JCheckBox
Gets the value of the
borderPaintedFlat
property.
isBound()
- Method in class java.beans.
PropertyDescriptor
Updates to "bound" properties will cause a "PropertyChange" event to
 get fired when the property is changed.
isBound()
- Method in class java.lang.
ScopedValue
PREVIEW
Returns
true
if this scoped value is bound in the current thread.
isBound()
- Method in class java.net.
DatagramSocket
Returns the binding state of the socket.
isBound()
- Method in class java.net.
ServerSocket
Returns the binding state of the ServerSocket.
isBound()
- Method in class java.net.
Socket
Returns the binding state of the socket.
isBound()
- Method in class javax.security.auth.kerberos.
KeyTab
Returns if the keytab is bound to a principal
isBoundary(int)
- Method in class java.text.
BreakIterator
Returns true if the specified character offset is a text boundary.
isBridge()
- Method in interface com.sun.jdi.
Method
Determine if this method is a bridge method.
isBridge()
- Method in class java.lang.reflect.
Method
Returns
true
if this method is a bridge
 method; returns
false
otherwise.
isBridge(ExecutableElement)
- Method in interface javax.lang.model.util.
Elements
Returns
true
if the executable element is a bridge
 method,
false
otherwise.
isBroken()
- Method in class java.util.concurrent.
CyclicBarrier
Queries if this barrier is in a broken state.
isCached()
- Method in class javax.imageio.stream.
FileCacheImageInputStream
Returns
true
since this
ImageInputStream
caches data in order to allow
 seeking backwards.
isCached()
- Method in class javax.imageio.stream.
FileCacheImageOutputStream
Returns
true
since this
ImageOutputStream
caches data in order to allow
 seeking backwards.
isCached()
- Method in interface javax.imageio.stream.
ImageInputStream
Returns
true
if this
ImageInputStream
caches data itself in order to allow seeking backwards.
isCached()
- Method in class javax.imageio.stream.
ImageInputStreamImpl
Default implementation returns false.
isCached()
- Method in class javax.imageio.stream.
MemoryCacheImageInputStream
Returns
true
since this
ImageInputStream
caches data in order to allow
 seeking backwards.
isCached()
- Method in class javax.imageio.stream.
MemoryCacheImageOutputStream
Returns
true
since this
ImageOutputStream
caches data in order to allow
 seeking backwards.
isCachedFile()
- Method in class javax.imageio.stream.
FileCacheImageInputStream
Returns
true
since this
ImageInputStream
maintains a file cache.
isCachedFile()
- Method in class javax.imageio.stream.
FileCacheImageOutputStream
Returns
true
since this
ImageOutputStream
maintains a file cache.
isCachedFile()
- Method in interface javax.imageio.stream.
ImageInputStream
Returns
true
if this
ImageInputStream
caches data itself in order to allow seeking backwards, and
 the cache is kept in a temporary file.
isCachedFile()
- Method in class javax.imageio.stream.
ImageInputStreamImpl
Default implementation returns false.
isCachedFile()
- Method in class javax.imageio.stream.
MemoryCacheImageInputStream
Returns
false
since this
ImageInputStream
does not maintain a file cache.
isCachedFile()
- Method in class javax.imageio.stream.
MemoryCacheImageOutputStream
Returns
false
since this
ImageOutputStream
does not maintain a file cache.
isCachedMemory()
- Method in class javax.imageio.stream.
FileCacheImageInputStream
Returns
false
since this
ImageInputStream
does not maintain a main memory
 cache.
isCachedMemory()
- Method in class javax.imageio.stream.
FileCacheImageOutputStream
Returns
false
since this
ImageOutputStream
does not maintain a main memory
 cache.
isCachedMemory()
- Method in interface javax.imageio.stream.
ImageInputStream
Returns
true
if this
ImageInputStream
caches data itself in order to allow seeking backwards, and
 the cache is kept in main memory.
isCachedMemory()
- Method in class javax.imageio.stream.
ImageInputStreamImpl
Default implementation returns false.
isCachedMemory()
- Method in class javax.imageio.stream.
MemoryCacheImageInputStream
Returns
true
since this
ImageInputStream
maintains a main memory cache.
isCachedMemory()
- Method in class javax.imageio.stream.
MemoryCacheImageOutputStream
Returns
true
since this
ImageOutputStream
maintains a main memory cache.
isCallSiteUnstable()
- Method in interface jdk.dynalink.linker.
LinkRequest
Returns true if the call site is considered unstable, that is, it has been relinked more times than was
 specified in
DynamicLinkerFactory.setUnstableRelinkThreshold(int)
.
isCallSiteUnstable()
- Method in class jdk.dynalink.linker.support.
SimpleLinkRequest
isCanceled()
- Method in class javax.swing.
ProgressMonitor
Returns true if the user hits the Cancel button or closes
 the progress dialog.
isCancelled()
- Method in class java.awt.print.
PrinterJob
Returns
true
if a print job is
 in progress, but is going to be cancelled
 at the next opportunity; otherwise returns
false
.
isCancelled()
- Method in class java.util.concurrent.
CompletableFuture
Returns
true
if this CompletableFuture was cancelled
 before it completed normally.
isCancelled()
- Method in class java.util.concurrent.
ForkJoinTask
isCancelled()
- Method in interface java.util.concurrent.
Future
Returns
true
if this task was cancelled before it completed
 normally.
isCancelled()
- Method in class java.util.concurrent.
FutureTask
isCancelled()
- Method in class javax.swing.
SwingWorker
Returns
true
if this task was cancelled before it completed
 normally.
isCanonicalConstructor(ExecutableElement)
- Method in interface javax.lang.model.util.
Elements
Returns
true
if the executable element can be
 determined to be a canonical constructor of a record,
false
otherwise.
isCardPresent()
- Method in class javax.smartcardio.
CardTerminal
Returns whether a card is present in this terminal.
isCaseIgnored()
- Method in interface javax.naming.directory.
Attributes
Determines whether the attribute set ignores the case of
 attribute identifiers when retrieving or adding attributes.
isCaseIgnored()
- Method in class javax.naming.directory.
BasicAttributes
isCaseSensitive(int)
- Method in interface java.sql.
ResultSetMetaData
Indicates whether a column's case matters.
isCaseSensitive(int)
- Method in class javax.sql.rowset.
RowSetMetaDataImpl
Indicates whether the case of the designated column's name
 matters.
isCatalogAtStart()
- Method in interface java.sql.
DatabaseMetaData
Retrieves whether a catalog appears at the start of a fully qualified
 table name.
isCData()
- Method in interface javax.xml.stream.events.
Characters
Returns true if this is a CData section.
isCellEditable(int, int)
- Method in class javax.swing.
JTable
Returns true if the cell at
row
and
column
is editable.
isCellEditable(int, int)
- Method in class javax.swing.table.
AbstractTableModel
Returns false.
isCellEditable(int, int)
- Method in class javax.swing.table.
DefaultTableModel
Returns true regardless of parameter values.
isCellEditable(int, int)
- Method in interface javax.swing.table.
TableModel
Returns true if the cell at
rowIndex
and
columnIndex
is editable.
isCellEditable(EventObject)
- Method in class javax.swing.
AbstractCellEditor
Returns true.
isCellEditable(EventObject)
- Method in interface javax.swing.
CellEditor
Asks the editor if it can start editing using
anEvent
.
isCellEditable(EventObject)
- Method in class javax.swing.
DefaultCellEditor.EditorDelegate
Returns true if
anEvent
is
not
a
MouseEvent
.
isCellEditable(EventObject)
- Method in class javax.swing.
DefaultCellEditor
Forwards the message from the
CellEditor
to
 the
delegate
.
isCellEditable(EventObject)
- Method in class javax.swing.tree.
DefaultTreeCellEditor
If the
realEditor
returns true to this
 message,
prepareForEditing
is messaged and true is returned.
isCellSelected(int, int)
- Method in class javax.swing.
JTable
Returns true if the specified indices are in the valid range of rows
 and columns and the cell at the specified position is selected.
isCertificateEntry(String)
- Method in class java.security.
KeyStore
Returns
true
if the entry identified by the given alias
 was created by a call to
setCertificateEntry
,
 or created by a call to
setEntry
with a
TrustedCertificateEntry
.
isCharacters()
- Method in interface javax.xml.stream.events.
XMLEvent
A utility function to check if this event is Characters.
isCharacters()
- Method in class javax.xml.stream.util.
StreamReaderDelegate
isCharacters()
- Method in interface javax.xml.stream.
XMLStreamReader
Returns true if the cursor points to a character data event
isCharsetDetected()
- Method in class java.nio.charset.
CharsetDecoder
Tells whether or not this decoder has yet detected a
 charset
(optional operation)
.
isClass()
- Method in enum class javax.lang.model.element.
ElementKind
Returns
true
if this is a kind of class:
 either
CLASS
or
ENUM
or
RECORD
.
isClassOrInterface()
- Method in interface java.lang.constant.
ClassDesc
Returns whether this
ClassDesc
describes a class or interface type.
isClosable()
- Method in class javax.swing.
JInternalFrame
Returns whether this
JInternalFrame
can be closed by
 some user action.
isClosed
- Variable in class javax.swing.
JInternalFrame
The frame has been closed.
isClosed()
- Method in class java.net.
DatagramSocket
Returns whether the socket is closed or not.
isClosed()
- Method in class java.net.
ServerSocket
Returns the closed state of the ServerSocket.
isClosed()
- Method in class java.net.
Socket
Returns the closed state of the socket.
isClosed()
- Method in interface java.sql.
Connection
Retrieves whether this
Connection
object has been
 closed.
isClosed()
- Method in interface java.sql.
ResultSet
Retrieves whether this
ResultSet
object has been closed.
isClosed()
- Method in interface java.sql.
Statement
Retrieves whether this
Statement
object has been closed.
isClosed()
- Method in class java.util.concurrent.
SubmissionPublisher
Returns true if this publisher is not accepting submissions.
isClosed()
- Method in class javax.swing.
JInternalFrame
Returns whether this
JInternalFrame
is currently closed.
isCloseOnCompletion()
- Method in interface java.sql.
Statement
Returns a value indicating whether this
Statement
will be
 closed when all its dependent result sets are closed.
isCoalesce()
- Method in class javax.swing.
Timer
Returns
true
if the
Timer
coalesces
 multiple pending action events.
isCoalescing()
- Method in class javax.xml.parsers.
DocumentBuilderFactory
Indicates whether or not the factory is configured to produce
 parsers which converts CDATA nodes to Text nodes and appends it to
 the adjacent (if any) Text node.
isCollapsed(int)
- Method in class javax.swing.
JTree
Returns true if the node at the specified display row is collapsed.
isCollapsed(TreePath)
- Method in class javax.swing.
JTree
Returns true if the value identified by path is currently collapsed,
 this will return false if any of the values in path are currently
 not being displayed.
isCollected()
- Method in interface com.sun.jdi.
ObjectReference
Determines if this object has been garbage collected in the target
 VM.
isCollectionUsageThresholdExceeded()
- Method in interface java.lang.management.
MemoryPoolMXBean
Tests if the memory usage of this memory pool after
 the most recent collection on which the Java virtual
 machine has expended effort has reached or
 exceeded its collection usage threshold.
isCollectionUsageThresholdSupported()
- Method in interface java.lang.management.
MemoryPoolMXBean
Tests if this memory pool supports a collection usage threshold.
isColorTransparencySelectionEnabled()
- Method in class javax.swing.colorchooser.
AbstractColorChooserPanel
Gets whether color chooser panel allows to select the transparency
 (alpha value) of a color.
isColumnSelected(int)
- Method in class javax.swing.
JTable
Returns true if the specified index is in the valid range of columns,
 and the column at that index is selected.
isCombining()
- Method in class java.awt.font.
GlyphMetrics
Returns
true
if this is a combining glyph.
isCompactConstructor(ExecutableElement)
- Method in interface javax.lang.model.util.
Elements
Returns
true
if the executable element can be
 determined to be a compact constructor of a record,
false
otherwise.
isCompatibleRaster(Raster)
- Method in class java.awt.image.
ColorModel
Returns
true
if
raster
is compatible
 with this
ColorModel
and
false
if it is
 not.
isCompatibleRaster(Raster)
- Method in class java.awt.image.
ComponentColorModel
Returns true if
raster
is compatible with this
ColorModel
; false if it is not.
isCompatibleRaster(Raster)
- Method in class java.awt.image.
DirectColorModel
Returns
true
if
raster
is compatible
 with this
ColorModel
and
false
if it is
 not.
isCompatibleRaster(Raster)
- Method in class java.awt.image.
IndexColorModel
Returns
true
if
raster
is compatible
 with this
ColorModel
or
false
if it
 is not compatible with this
ColorModel
.
isCompatibleSampleModel(SampleModel)
- Method in class java.awt.image.
ColorModel
Checks if the
SampleModel
is compatible with this
ColorModel
.
isCompatibleSampleModel(SampleModel)
- Method in class java.awt.image.
ComponentColorModel
Checks whether or not the specified
SampleModel
is compatible with this
ColorModel
.
isCompatibleSampleModel(SampleModel)
- Method in class java.awt.image.
IndexColorModel
Checks if the specified
SampleModel
is compatible
 with this
ColorModel
.
isCompatibleSampleModel(SampleModel)
- Method in class java.awt.image.
PackedColorModel
Checks if the specified
SampleModel
is compatible
 with this
ColorModel
.
isCompatibleValue(Object)
- Method in class java.awt.
RenderingHints.Key
Returns true if the specified object is a valid value
 for this Key.
isCompatibleWith(String)
- Method in class java.lang.
Package
Compare this package's specification version with a
 desired version.
isCompilationTimeMonitoringSupported()
- Method in interface java.lang.management.
CompilationMXBean
Tests if the Java virtual machine supports the monitoring of
 compilation time.
isComplete()
- Method in class com.sun.nio.sctp.
MessageInfo
Tells whether or not the message is complete.
isComplete()
- Method in interface javax.security.sasl.
SaslClient
Determines whether the authentication exchange has completed.
isComplete()
- Method in interface javax.security.sasl.
SaslServer
Determines whether the authentication exchange has completed.
isComplete()
- Method in enum class jdk.jshell.
SourceCodeAnalysis.Completeness
Indicates whether the first snippet of source is complete.
isCompletedAbnormally()
- Method in class java.util.concurrent.
ForkJoinTask
Returns
true
if this task threw an exception or was cancelled.
isCompletedExceptionally()
- Method in class java.util.concurrent.
CompletableFuture
Returns
true
if this CompletableFuture completed
 exceptionally, in any way.
isCompletedNormally()
- Method in class java.util.concurrent.
ForkJoinTask
Returns
true
if this task completed without throwing an
 exception and was not cancelled.
isCompletelyDirty(JComponent)
- Method in class javax.swing.
RepaintManager
Convenience method that returns true if
aComponent
will be completely
 painted during the next paintDirtyRegions().
isComponent()
- Method in class java.awt.font.
GlyphMetrics
Returns
true
if this is a component glyph.
isComponentPartOfCurrentMenu(Component)
- Method in class javax.swing.
MenuSelectionManager
Return true if
c
is part of the currently used menu
isCompositionEnabled()
- Method in class java.awt.im.
InputContext
Determines whether the current input method is enabled for composition.
isCompositionEnabled()
- Method in interface java.awt.im.spi.
InputMethod
Determines whether this input method is enabled.
isCompressionLossless()
- Method in class javax.imageio.
ImageWriteParam
Returns
true
if the current compression type
 provides lossless compression.
isCompressionLossless()
- Method in class javax.imageio.plugins.jpeg.
JPEGImageWriteParam
Returns
false
since the JPEG plug-in only supports
 lossy compression.
isComputerNode(File)
- Method in class javax.swing.filechooser.
FileSystemView
Used by UI classes to decide whether to display a special icon
 for a computer node, e.g.
isConfigured()
- Method in class java.security.
Provider
Check if this
Provider
instance has been configured.
isConnectable()
- Method in class java.nio.channels.
SelectionKey
Tests whether this key's channel has either finished, or failed to
 finish, its socket-connection operation.
isConnected()
- Method in class java.net.
DatagramSocket
Returns the connection state of the socket.
isConnected()
- Method in class java.net.
Socket
Returns the connection state of the socket.
isConnected()
- Method in class java.nio.channels.
DatagramChannel
Tells whether or not this channel's socket is connected.
isConnected()
- Method in class java.nio.channels.
SocketChannel
Tells whether or not this channel's network socket is connected.
isConnectionPending()
- Method in class com.sun.nio.sctp.
SctpChannel
Tells whether or not a connection operation is in progress on this channel.
isConnectionPending()
- Method in class java.nio.channels.
SocketChannel
Tells whether or not a connection operation is in progress on this
 channel.
isConstrained()
- Method in class java.beans.
PropertyDescriptor
Attempted updates to "Constrained" properties will cause a "VetoableChange"
 event to get fired when the property is changed.
isConstructor()
- Method in interface com.sun.jdi.
Method
Determine if this method is a constructor.
isConsumed()
- Method in class java.awt.
AWTEvent
Returns whether this event has been consumed.
isConsumed()
- Method in class java.awt.event.
InputEvent
Returns whether or not this event has been consumed.
isConsumed()
- Method in class java.awt.event.
InputMethodEvent
Returns whether or not this event has been consumed.
isConsumer(ImageConsumer)
- Method in class java.awt.image.
FilteredImageSource
Determines whether an ImageConsumer is on the list of consumers
 currently interested in data for this image.
isConsumer(ImageConsumer)
- Method in interface java.awt.image.
ImageProducer
Determines if a specified
ImageConsumer
object is currently registered with this
ImageProducer
as one of its consumers.
isConsumer(ImageConsumer)
- Method in class java.awt.image.
MemoryImageSource
Determines if an ImageConsumer is on the list of consumers currently
 interested in data for this image.
isConsumer(ImageConsumer)
- Method in class java.awt.image.renderable.
RenderableImageProducer
Determine if an ImageConsumer is on the list of consumers
 currently interested in data for this image.
isContentAreaFilled()
- Method in class javax.swing.
AbstractButton
Gets the
contentAreaFilled
property.
isContextual()
- Method in class java.awt.font.
NumericShaper
Returns a
boolean
indicating whether or not
 this shaper shapes contextually.
isContinuousLayout()
- Method in class javax.swing.
JSplitPane
Gets the
continuousLayout
property.
isContinuousLayout()
- Method in class javax.swing.plaf.basic.
BasicSplitPaneUI
Determines whether the
JSplitPane
is set to use a continuous layout.
isControlDown()
- Method in class java.awt.event.
InputEvent
Returns whether or not the Control modifier is down on this event.
isControlSupported(Control.Type)
- Method in interface javax.sound.sampled.
Line
Indicates whether the line supports a control of the specified type.
isConversionSupported(AudioFormat.Encoding, AudioFormat)
- Static method in class javax.sound.sampled.
AudioSystem
Indicates whether an audio input stream of the specified encoding can be
 obtained from an audio input stream that has the specified format.
isConversionSupported(AudioFormat.Encoding, AudioFormat)
- Method in class javax.sound.sampled.spi.
FormatConversionProvider
Indicates whether the format converter supports conversion to a
 particular encoding from a particular format.
isConversionSupported(AudioFormat, AudioFormat)
- Static method in class javax.sound.sampled.
AudioSystem
Indicates whether an audio input stream of a specified format can be
 obtained from an audio input stream of another specified format.
isConversionSupported(AudioFormat, AudioFormat)
- Method in class javax.sound.sampled.spi.
FormatConversionProvider
Indicates whether the format converter supports conversion to one
 particular format from another.
isConvertibleWithoutLoss(Class<?>, Class<?>)
- Static method in class jdk.dynalink.linker.support.
TypeUtilities
Determines whether a type can be converted to another without losing any
 precision.
isCritical()
- Method in interface java.security.cert.
Extension
Gets the extension's criticality setting.
isCritical()
- Method in interface java.security.cert.
PolicyNode
Returns the criticality indicator of the certificate policy extension
 in the most recently processed certificate.
isCritical()
- Method in class javax.naming.ldap.
BasicControl
Determines the control's criticality.
isCritical()
- Method in interface javax.naming.ldap.
Control
Determines the criticality of the LDAP control.
isCryptoAllowed(Key)
- Method in class javax.crypto.
ExemptionMechanism
Returns whether the result blob has been generated successfully by this
 exemption mechanism.
isCS_sRGB()
- Method in class java.awt.color.
ColorSpace
Returns true if the
ColorSpace
is
CS_sRGB
.
isCurrency(int)
- Method in interface java.sql.
ResultSetMetaData
Indicates whether the designated column is a cash value.
isCurrency(int)
- Method in class javax.sql.rowset.
RowSetMetaDataImpl
Indicates whether a value stored in the designated column
 is a cash value.
isCurrent()
- Method in class javax.security.auth.kerberos.
KerberosTicket
Determines if this ticket is still current.
isCurrent()
- Method in interface javax.security.auth.
Refreshable
Determine if this
Object
is current.
isCurrentServiceInvalidNow()
- Method in class java.beans.beancontext.
BeanContextServiceRevokedEvent
Reports if the current service is being forcibly revoked,
 in which case the references are now invalidated and unusable.
isCurrentThreadCpuTimeSupported()
- Method in interface java.lang.management.
ThreadMXBean
Tests if the Java virtual machine supports CPU time measurement from
 a platform thread with the
ThreadMXBean.getCurrentThreadCpuTime()
and
ThreadMXBean.getCurrentThreadUserTime()
methods.
isCursorSet()
- Method in class java.awt.
Component
Returns whether the cursor has been explicitly set for this Component.
isCyclic()
- Method in class java.awt.
GradientPaint
Returns
true
if the gradient cycles repeatedly
 between the two colors C1 and C2.
isDaemon()
- Method in class java.lang.management.
ThreadInfo
Tests if the thread associated with this
ThreadInfo
is
 a
daemon thread
.
isDaemon()
- Method in class java.lang.
Thread
Tests if this thread is a daemon thread.
isDaemon()
- Method in class java.lang.
ThreadGroup
Deprecated, for removal: This API element is subject to removal in a future version.
This method originally indicated if the thread group is a
daemon thread group
that is automatically destroyed
             when its last thread terminates. The concept of daemon
             thread group no longer exists.
             A thread group is eligible to be GC'ed when there are no
             live threads in the group and it is otherwise unreachable.
isDataFlavorAvailable(DataFlavor)
- Method in class java.awt.datatransfer.
Clipboard
Returns whether or not the current contents of this clipboard can be
 provided in the specified
DataFlavor
.
isDataFlavorSupported(DataFlavor)
- Method in class java.awt.datatransfer.
StringSelection
Returns whether the requested flavor is supported by this
Transferable
.
isDataFlavorSupported(DataFlavor)
- Method in interface java.awt.datatransfer.
Transferable
Returns whether or not the specified data flavor is supported for this
 object.
isDataFlavorSupported(DataFlavor)
- Method in class java.awt.dnd.
DropTargetContext
This method returns a
boolean
indicating if the given
DataFlavor
is
 supported by this
DropTargetContext
.
isDataFlavorSupported(DataFlavor)
- Method in class java.awt.dnd.
DropTargetContext.TransferableProxy
Returns whether or not the specified data flavor is supported by
 the encapsulated transferable.
isDataFlavorSupported(DataFlavor)
- Method in class java.awt.dnd.
DropTargetDragEvent
This method returns a
boolean
indicating
 if the specified
DataFlavor
is supported.
isDataFlavorSupported(DataFlavor)
- Method in class java.awt.dnd.
DropTargetDropEvent
This method returns a
boolean
indicating if the
 specified
DataFlavor
is available
 from the source.
isDataFlavorSupported(DataFlavor)
- Method in class javax.swing.
TransferHandler.TransferSupport
Returns whether or not the given data flavor is supported.
isDataTypeOK(int)
- Method in class javax.imageio.plugins.tiff.
TIFFTag
Returns
true
if the given data type
 may be used for the data associated with this tag.
isDateBased()
- Method in enum class java.time.temporal.
ChronoField
Checks if this field represents a component of a date.
isDateBased()
- Method in enum class java.time.temporal.
ChronoUnit
Checks if this unit is a date unit.
isDateBased()
- Method in interface java.time.temporal.
TemporalField
Checks if this field represents a component of a date.
isDateBased()
- Method in interface java.time.temporal.
TemporalUnit
Checks if this unit represents a component of a date.
isDaylightSavings(Instant)
- Method in class java.time.zone.
ZoneRules
Checks if the specified instant is in daylight savings.
isDecimalSeparatorAlwaysShown()
- Method in class java.text.
DecimalFormat
Allows you to get the behavior of the decimal separator with integers.
isDeclared()
- Method in enum class javax.lang.model.util.
Elements.Origin
Returns
true
for values corresponding to constructs
 that are implicitly or explicitly declared,
false
otherwise.
isDeclared(int)
- Method in interface org.xml.sax.ext.
Attributes2
Returns false unless the attribute was declared in the DTD.
isDeclared(int)
- Method in class org.xml.sax.ext.
Attributes2Impl
Returns the current value of the attribute's "declared" flag.
isDeclared(String)
- Method in interface org.xml.sax.ext.
Attributes2
Returns false unless the attribute was declared in the DTD.
isDeclared(String)
- Method in class org.xml.sax.ext.
Attributes2Impl
Returns the current value of the attribute's "declared" flag.
isDeclared(String, String)
- Method in interface org.xml.sax.ext.
Attributes2
Returns false unless the attribute was declared in the DTD.
isDeclared(String, String)
- Method in class org.xml.sax.ext.
Attributes2Impl
Returns the current value of the attribute's "declared" flag.
isDeclaredType()
- Method in enum class javax.lang.model.element.
ElementKind
Returns
true
if this is a kind of declared type, a
class
or an
interface
, and
false
otherwise.
isDefault()
- Method in interface com.sun.jdi.
Method
Determine if this method is a default method
isDefault()
- Method in class java.lang.reflect.
Method
Returns
true
if this method is a default
 method; returns
false
otherwise.
isDefault()
- Method in interface javax.lang.model.element.
ExecutableElement
Returns
true
if this method is a default method and
 returns
false
otherwise.
isDefaultButton()
- Method in class javax.swing.
JButton
Gets the value of the
defaultButton
property,
 which if
true
means that this button is the current
 default button for its
JRootPane
.
isDefaultCapable()
- Method in class javax.swing.
JButton
Gets the value of the
defaultCapable
property.
isDefaultLookAndFeelDecorated()
- Static method in class javax.swing.
JDialog
Returns true if newly created
JDialog
s should have their
 Window decorations provided by the current look and feel.
isDefaultLookAndFeelDecorated()
- Static method in class javax.swing.
JFrame
Returns true if newly created
JFrame
s should have their
 Window decorations provided by the current look and feel.
isDefaultNamespace(String)
- Method in class javax.imageio.metadata.
IIOMetadataNode
This DOM Level 3 method is not supported for
IIOMetadataNode
and will throw a
DOMException
.
isDefaultNamespace(String)
- Method in interface org.w3c.dom.
Node
This method checks if the specified
namespaceURI
is the
 default namespace or not.
isDefaultNamespaceDeclaration()
- Method in interface javax.xml.stream.events.
Namespace
returns true if this attribute declares the default namespace
isDefined()
- Method in enum class jdk.jshell.
Snippet.Status
Indicates whether the snippet is currently part of the defined state
 of the JShell.
isDefined(char)
- Static method in class java.lang.
Character
Determines if a character is defined in Unicode.
isDefined(int)
- Static method in class java.lang.
Character
Determines if a character (Unicode code point) is defined in Unicode.
isDefined(Object)
- Method in class javax.swing.text.
AbstractDocument.AbstractElement
Checks whether a given attribute is defined.
isDefined(Object)
- Method in interface javax.swing.text.
AttributeSet
Checks whether the named attribute has a value specified in
 the set without resolving through another attribute
 set.
isDefined(Object)
- Method in class javax.swing.text.
SimpleAttributeSet
Tells whether a given attribute is defined.
isDefined(Object)
- Method in class javax.swing.text.
StyleContext.NamedStyle
Checks whether a given attribute is defined.
isDefined(Object)
- Method in class javax.swing.text.
StyleContext.SmallAttributeSet
Checks whether a given attribute is defined.
isDefinitelyWritable(int)
- Method in interface java.sql.
ResultSetMetaData
Indicates whether a write on the designated column will definitely succeed.
isDefinitelyWritable(int)
- Method in class javax.sql.rowset.
RowSetMetaDataImpl
Indicates whether a write operation on the designated column
 will definitely succeed.
isDelegated()
- Method in class java.beans.beancontext.
BeanContextChildSupport
Reports whether or not this class is a delegate of another.
isDeprecated()
- Method in interface java.util.random.
RandomGenerator
Return true if the implementation of RandomGenerator (algorithm) has been
 marked for deprecation.
isDeprecated()
- Method in class java.util.random.
RandomGeneratorFactory
Return true if the implementation of RandomGenerator (algorithm) has been
 marked for deprecation.
isDeprecated(Element)
- Method in interface javax.lang.model.util.
Elements
Returns
true
if the element is deprecated,
false
otherwise.
isDerivedFrom(String, String, int)
- Method in interface org.w3c.dom.
TypeInfo
This method returns if there is a derivation between the reference
 type definition, i.e. the
TypeInfo
on which the method
 is being called, and the other type definition, i.e. the one passed
 as parameters.
isDescendant(TreePath)
- Method in class javax.swing.tree.
TreePath
Returns true if
aTreePath
is a
 descendant of this
TreePath
.
isDescendingFrom(Component, Component)
- Static method in class javax.swing.
SwingUtilities
Return
true
if a component
a
descends from a component
b
isDesignTime()
- Method in class java.beans.beancontext.
BeanContextSupport
Reports whether or not this object is in
 currently in design time mode.
isDesignTime()
- Static method in class java.beans.
Beans
Test if we are in design-mode.
isDesignTime()
- Method in interface java.beans.
DesignMode
A value of true denotes that JavaBeans should behave in design time
 mode, a value of false denotes runtime behavior.
isDesktopSupported()
- Static method in class java.awt.
Desktop
Tests whether this class is supported on the current platform.
isDestroyed()
- Method in class java.lang.
ThreadGroup
Deprecated, for removal: This API element is subject to removal in a future version.
This method originally indicated if the thread group is
             destroyed. The ability to destroy a thread group and the
             concept of a destroyed thread group no longer exists.
             A thread group is eligible to be GC'ed when there are no
             live threads in the group and it is otherwise unreachable.
isDestroyed()
- Method in class java.security.
KeyStore.PasswordProtection
Determines if password has been cleared.
isDestroyed()
- Method in interface javax.security.auth.
Destroyable
Determine if this
Object
has been destroyed.
isDestroyed()
- Method in class javax.security.auth.kerberos.
KerberosKey
Determines if this key has been destroyed.
isDestroyed()
- Method in class javax.security.auth.kerberos.
KerberosTicket
Determines if this ticket has been destroyed.
isDestroyed()
- Method in class javax.security.auth.x500.
X500PrivateCredential
Determines if the references to the X.509 certificate and private key
 in this object have been cleared.
isDeviceSupported(MidiDevice.Info)
- Method in class javax.sound.midi.spi.
MidiDeviceProvider
Indicates whether the device provider supports the device represented by
 the specified device info object.
isDigit(char)
- Static method in class java.lang.
Character
Determines if the specified character is a digit.
isDigit(int)
- Static method in class java.lang.
Character
Determines if the specified character (Unicode code point) is a digit.
isDirect()
- Method in class java.nio.
Buffer
Tells whether or not this buffer is
direct
.
isDirect()
- Method in class java.nio.
ByteBuffer
Tells whether or not this byte buffer is direct.
isDirect()
- Method in class java.nio.
CharBuffer
Tells whether or not this char buffer is direct.
isDirect()
- Method in class java.nio.
DoubleBuffer
Tells whether or not this double buffer is direct.
isDirect()
- Method in class java.nio.
FloatBuffer
Tells whether or not this float buffer is direct.
isDirect()
- Method in class java.nio.
IntBuffer
Tells whether or not this int buffer is direct.
isDirect()
- Method in class java.nio.
LongBuffer
Tells whether or not this long buffer is direct.
isDirect()
- Method in class java.nio.
ShortBuffer
Tells whether or not this short buffer is direct.
isDirectory()
- Method in class java.io.
File
Tests whether the file denoted by this abstract pathname is a
 directory.
isDirectory()
- Method in interface java.nio.file.attribute.
BasicFileAttributes
Tells whether the file is a directory.
isDirectory()
- Method in class java.util.zip.
ZipEntry
Returns true if this is a directory entry.
isDirectory(Path, LinkOption...)
- Static method in class java.nio.file.
Files
Tests whether a file is a directory.
isDirectorySelected()
- Method in class javax.swing.plaf.basic.
BasicFileChooserUI
Property to remember whether a directory is currently selected in the UI.
isDirectorySelectionEnabled()
- Method in class javax.swing.
JFileChooser
Convenience call that determines if directories are selectable based
 on the current file selection mode.
isDispatched()
- Method in class java.awt.event.
InvocationEvent
Returns
true
if the event is dispatched or any exception is
 thrown while dispatching,
false
otherwise.
isDispatchThread()
- Static method in class java.awt.
EventQueue
Returns true if the calling thread is
the current AWT EventQueue
's
 dispatch thread.
isDisplayable()
- Method in class java.awt.
Component
Determines whether this component is displayable.
isDisplayChangeSupported()
- Method in class java.awt.
GraphicsDevice
Returns
true
if this
GraphicsDevice
supports low-level display changes.
isDisposed()
- Method in class javax.print.
StreamPrintService
Returns a
boolean
indicating whether or not this
StreamPrintService
has been disposed.
isDocFlavorSupported(DocFlavor)
- Method in interface javax.print.
PrintService
Determines if this print service supports a specific
DocFlavor
.
isDomainPattern()
- Method in class javax.management.
ObjectName
Checks whether the object name is a pattern on the domain part.
isDone()
- Method in class java.awt.geom.
FlatteningPathIterator
Tests if the iteration is complete.
isDone()
- Method in interface java.awt.geom.
PathIterator
Tests if the iteration is complete.
isDone()
- Method in class java.util.concurrent.
CompletableFuture
Returns
true
if completed in any fashion: normally,
 exceptionally, or via cancellation.
isDone()
- Method in class java.util.concurrent.
ForkJoinTask
isDone()
- Method in interface java.util.concurrent.
Future
Returns
true
if this task completed.
isDone()
- Method in class java.util.concurrent.
FutureTask
isDone()
- Method in class javax.swing.
SwingWorker
Returns
true
if this task completed.
isDoubleBuffered()
- Method in class java.awt.
Component
Returns true if this component is painted to an offscreen image
 ("buffer") that's copied to the screen later.
isDoubleBuffered()
- Method in class javax.swing.
JComponent
Returns whether this component should use a buffer to paint.
isDoubleBufferingEnabled()
- Method in class javax.swing.
RepaintManager
Returns true if this RepaintManager is double buffered.
isDragging
- Variable in class javax.swing.plaf.basic.
BasicScrollBarUI
Dragging
isDragging
- Variable in class javax.swing.plaf.basic.
BasicToolBarUI.DockingListener
true
if the
JToolBar
is being dragged.
isDragging()
- Method in class javax.swing.plaf.basic.
BasicSliderUI
Returns true if the user is dragging the slider.
isDragImageSupported()
- Static method in class java.awt.dnd.
DragSource
Reports
 whether or not drag
Image
support
 is available on the underlying platform.
isDrawingBuffer()
- Method in class javax.swing.
DebugGraphics
Returns the drawingBuffer value.
isDrive(File)
- Method in class javax.swing.filechooser.
FileSystemView
Used by UI classes to decide whether to display a special icon
 for drives or partitions, e.g. a "hard disk" icon.
isDrop()
- Method in class javax.swing.
TransferHandler.TransferSupport
Returns whether or not this
TransferSupport
represents a drop operation.
isDropLine(JTree.DropLocation)
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Tells if a
DropLocation
should be indicated by a line between
 nodes.
isDuplicateToken()
- Method in class org.ietf.jgss.
MessageProp
Tests if this is a duplicate of an earlier token.
isDurationEstimated()
- Method in enum class java.time.temporal.
ChronoUnit
Checks if the duration of the unit is an estimate.
isDurationEstimated()
- Method in interface java.time.temporal.
TemporalUnit
Checks if the duration of the unit is an estimate.
isDynamic()
- Method in interface java.awt.image.renderable.
ContextualRenderedImageFactory
Returns true if successive renderings (that is, calls to
 create(RenderContext, ParameterBlock)) with the same arguments
 may produce different results.
isDynamic()
- Method in interface java.awt.image.renderable.
RenderableImage
Returns true if successive renderings (that is, calls to
 createRendering() or createScaledRendering()) with the same arguments
 may produce different results.
isDynamic()
- Method in class java.awt.image.renderable.
RenderableImageOp
Returns true if successive renderings (that is, calls to
 createRendering() or createScaledRendering()) with the same arguments
 may produce different results.
isDynamicConstructor(Object)
- Static method in class jdk.dynalink.beans.
BeansLinker
Returns true if the object is a Java constructor (obtained through
BeansLinker.getConstructorMethod(Class, String)
}.
isDynamicLayoutActive()
- Method in class java.awt.
Toolkit
Returns whether dynamic layout of Containers on resize is currently
 enabled on the underlying operating system and/or window manager.
isDynamicLayoutSet()
- Method in class java.awt.
Toolkit
Returns whether the layout of Containers is validated dynamically
 during resizing, or statically, after resizing is complete.
isDynamicMethod(Object)
- Static method in class jdk.dynalink.beans.
BeansLinker
Returns true if the object is a Java dynamic method (e.g., one
 obtained through a
GET:METHOD
operation on a Java object or
StaticClass
or through
BeansLinker.getConstructorMethod(Class, String)
.
isEchoOn()
- Method in class javax.security.auth.callback.
PasswordCallback
Return whether the password
 should be displayed as it is being typed.
isEditable
- Variable in class javax.swing.
JComboBox
This protected field is implementation specific.
isEditable()
- Method in class java.awt.
TextComponent
Indicates whether or not this text component is editable.
isEditable()
- Method in class javax.swing.
JComboBox
Returns true if the
JComboBox
is editable.
isEditable()
- Method in class javax.swing.
JTree
Returns true if the tree is editable.
isEditable()
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Returns whether the drawn tree component should be enabled for editing.
isEditable()
- Method in class javax.swing.text.
JTextComponent
Returns the boolean indicating whether this
TextComponent
is editable or not.
isEditing()
- Method in class javax.swing.
JTable
Returns true if a cell is being edited.
isEditing()
- Method in class javax.swing.
JTree
Returns true if the tree is being edited.
isEditing(JTree)
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Returns true if the tree is being edited.
isEditing(JTree)
- Method in class javax.swing.plaf.multi.
MultiTreeUI
Invokes the
isEditing
method on each UI handled by this object.
isEditing(JTree)
- Method in class javax.swing.plaf.
TreeUI
Returns true if the tree is being edited.
isEditValid()
- Method in class javax.swing.
JFormattedTextField
Returns true if the current value being edited is valid.
isElementContentWhitespace()
- Method in interface org.w3c.dom.
Text
Returns whether this text node contains
element content whitespace
, often abusively called "ignorable whitespace".
isEmoji(int)
- Static method in class java.lang.
Character
Determines if the specified character (Unicode code point) is an Emoji.
isEmojiComponent(int)
- Static method in class java.lang.
Character
Determines if the specified character (Unicode code point) is an
 Emoji Component.
isEmojiModifier(int)
- Static method in class java.lang.
Character
Determines if the specified character (Unicode code point) is an
 Emoji Modifier.
isEmojiModifierBase(int)
- Static method in class java.lang.
Character
Determines if the specified character (Unicode code point) is an
 Emoji Modifier Base.
isEmojiPresentation(int)
- Static method in class java.lang.
Character
Determines if the specified character (Unicode code point) has the
 Emoji Presentation property by default.
isEmpty()
- Method in class com.sun.net.httpserver.
Headers
isEmpty()
- Method in class java.awt.geom.
Arc2D.Double
Determines whether the
RectangularShape
is empty.
isEmpty()
- Method in class java.awt.geom.
Arc2D.Float
Determines whether the
RectangularShape
is empty.
isEmpty()
- Method in class java.awt.geom.
Area
Tests whether this
Area
object encloses any area.
isEmpty()
- Method in class java.awt.geom.
Ellipse2D.Double
Determines whether the
RectangularShape
is empty.
isEmpty()
- Method in class java.awt.geom.
Ellipse2D.Float
Determines whether the
RectangularShape
is empty.
isEmpty()
- Method in class java.awt.geom.
Rectangle2D.Double
Determines whether the
RectangularShape
is empty.
isEmpty()
- Method in class java.awt.geom.
Rectangle2D.Float
Determines whether the
RectangularShape
is empty.
isEmpty()
- Method in class java.awt.geom.
RectangularShape
Determines whether the
RectangularShape
is empty.
isEmpty()
- Method in class java.awt.geom.
RoundRectangle2D.Double
Determines whether the
RectangularShape
is empty.
isEmpty()
- Method in class java.awt.geom.
RoundRectangle2D.Float
Determines whether the
RectangularShape
is empty.
isEmpty()
- Method in class java.awt.
Rectangle
Determines whether the
RectangularShape
is empty.
isEmpty()
- Method in class java.awt.
RenderingHints
Returns
true
if this
RenderingHints
contains no key-value mappings.
isEmpty()
- Method in class java.beans.beancontext.
BeanContextSupport
Reports whether or not this
BeanContext
is empty.
isEmpty()
- Method in interface java.lang.
CharSequence
Returns
true
if this character sequence is empty.
isEmpty()
- Method in class java.lang.
String
Returns
true
if, and only if,
String.length()
is
0
.
isEmpty()
- Method in class java.nio.
CharBuffer
Returns
true
if this character buffer is empty.
isEmpty()
- Method in class java.util.
AbstractCollection
Returns
true
if this collection contains no elements.
isEmpty()
- Method in class java.util.
AbstractMap
Returns
true
if this map contains no key-value mappings.
isEmpty()
- Method in class java.util.
ArrayDeque
Returns
true
if this deque contains no elements.
isEmpty()
- Method in class java.util.
ArrayList
Returns
true
if this list contains no elements.
isEmpty()
- Method in class java.util.
BitSet
Returns true if this
BitSet
contains no bits that are set
 to
true
.
isEmpty()
- Method in interface java.util.
Collection
Returns
true
if this collection contains no elements.
isEmpty()
- Method in class java.util.concurrent.
ConcurrentHashMap.KeySetView
isEmpty()
- Method in class java.util.concurrent.
ConcurrentHashMap
Returns
true
if this map contains no key-value mappings.
isEmpty()
- Method in class java.util.concurrent.
ConcurrentLinkedDeque
Returns
true
if this collection contains no elements.
isEmpty()
- Method in class java.util.concurrent.
ConcurrentLinkedQueue
Returns
true
if this queue contains no elements.
isEmpty()
- Method in class java.util.concurrent.
ConcurrentSkipListMap
Returns
true
if this map contains no key-value mappings.
isEmpty()
- Method in class java.util.concurrent.
ConcurrentSkipListSet
Returns
true
if this set contains no elements.
isEmpty()
- Method in class java.util.concurrent.
CopyOnWriteArrayList
Returns
true
if this list contains no elements.
isEmpty()
- Method in class java.util.concurrent.
CopyOnWriteArraySet
Returns
true
if this set contains no elements.
isEmpty()
- Method in class java.util.concurrent.
LinkedTransferQueue
Returns
true
if this queue contains no elements.
isEmpty()
- Method in class java.util.concurrent.
SynchronousQueue
Always returns
true
.
isEmpty()
- Method in class java.util.
Dictionary
Tests if this dictionary maps no keys to value.
isEmpty()
- Method in class java.util.
HashMap
Returns
true
if this map contains no key-value mappings.
isEmpty()
- Method in class java.util.
HashSet
Returns
true
if this set contains no elements.
isEmpty()
- Method in class java.util.
Hashtable
Tests if this hashtable maps no keys to values.
isEmpty()
- Method in class java.util.
IdentityHashMap
Returns
true
if this identity hash map contains no key-value
 mappings.
isEmpty()
- Method in class java.util.jar.
Attributes
Returns true if this Map contains no attributes.
isEmpty()
- Method in interface java.util.
List
Returns
true
if this list contains no elements.
isEmpty()
- Method in interface java.util.
Map
Returns
true
if this map contains no key-value mappings.
isEmpty()
- Method in class java.util.
Optional
If a value is  not present, returns
true
, otherwise
false
.
isEmpty()
- Method in class java.util.
OptionalDouble
If a value is not present, returns
true
, otherwise
false
.
isEmpty()
- Method in class java.util.
OptionalInt
If a value is not present, returns
true
, otherwise
false
.
isEmpty()
- Method in class java.util.
OptionalLong
If a value is not present, returns
true
, otherwise
false
.
isEmpty()
- Method in interface java.util.
Set
Returns
true
if this set contains no elements.
isEmpty()
- Method in class java.util.
TreeSet
Returns
true
if this set contains no elements.
isEmpty()
- Method in class java.util.
Vector
Tests if this vector has no components.
isEmpty()
- Method in class java.util.
WeakHashMap
Returns
true
if this map contains no key-value mappings.
isEmpty()
- Method in interface javax.management.openmbean.
TabularData
Returns
true
if the number of
CompositeData
values (ie the number of rows) contained in this
TabularData
instance is zero.
isEmpty()
- Method in class javax.management.openmbean.
TabularDataSupport
Returns
true
if this
TabularDataSupport
instance contains no rows.
isEmpty()
- Method in class javax.management.timer.
Timer
Tests whether the list of timer notifications is empty.
isEmpty()
- Method in interface javax.management.timer.
TimerMBean
Tests whether the list of timer notifications is empty.
isEmpty()
- Method in class javax.naming.
CompositeName
Determines whether this composite name is empty.
isEmpty()
- Method in class javax.naming.
CompoundName
Determines whether this compound name is empty.
isEmpty()
- Method in class javax.naming.ldap.
LdapName
Determines whether this LDAP name is empty.
isEmpty()
- Method in interface javax.naming.
Name
Determines whether this name is empty.
isEmpty()
- Method in interface javax.print.attribute.
AttributeSet
Returns
true
if this attribute set contains no attributes.
isEmpty()
- Method in class javax.print.attribute.
HashAttributeSet
Returns
true
if this attribute set contains no attributes.
isEmpty()
- Method in class javax.script.
SimpleBindings
Returns
true
if this map contains no key-value mappings.
isEmpty()
- Method in class javax.swing.
DefaultListModel
Tests whether this list has any components.
isEmpty()
- Method in class javax.swing.text.html.parser.
Element
Check if empty
isEmpty()
- Method in class javax.swing.text.
SimpleAttributeSet
Checks whether the set of attributes is empty.
isEmpty()
- Method in class javax.xml.transform.dom.
DOMSource
Indicates whether the
DOMSource
object is empty.
isEmpty()
- Method in class javax.xml.transform.sax.
SAXSource
Indicates whether the
SAXSource
object is empty.
isEmpty()
- Method in interface javax.xml.transform.
Source
Indicates whether the
Source
object is empty.
isEmpty()
- Method in class javax.xml.transform.stax.
StAXSource
Indicates whether the
StAXSource
object is empty.
isEmpty()
- Method in class javax.xml.transform.stream.
StreamSource
Indicates whether the
StreamSource
object is empty.
isEmpty()
- Method in class org.xml.sax.
InputSource
Indicates whether the
InputSource
object is empty.
isEnabled()
- Method in class com.sun.java.accessibility.util.
Translator
Determine if the object is enabled.
isEnabled()
- Method in interface com.sun.jdi.request.
EventRequest
Determines if this event request is currently enabled.
isEnabled()
- Method in class java.awt.
Component.AccessibleAWTComponent
Determines if the object is enabled.
isEnabled()
- Method in class java.awt.
Component
Determines whether this component is enabled.
isEnabled()
- Method in class java.awt.
List.AccessibleAWTList.AccessibleAWTListChild
Determine if the object is enabled.
isEnabled()
- Method in class java.awt.
MenuComponent.AccessibleAWTMenuComponent
Determines if the object is enabled.
isEnabled()
- Method in class java.awt.
MenuItem
Checks whether this menu item is enabled.
isEnabled()
- Method in interface javax.accessibility.
AccessibleComponent
Determines if the object is enabled.
isEnabled()
- Method in class javax.swing.
AbstractAction
Returns true if the action is enabled.
isEnabled()
- Method in interface javax.swing.
Action
Returns the enabled state of the
Action
.
isEnabled()
- Method in interface javax.swing.
ButtonModel
Indicates if the button can be selected or triggered by
 an input device, such as a mouse pointer.
isEnabled()
- Method in class javax.swing.
DefaultButtonModel
Indicates if the button can be selected or triggered by
 an input device, such as a mouse pointer.
isEnabled()
- Method in class javax.swing.
JList.AccessibleJList.AccessibleJListChild
isEnabled()
- Method in class javax.swing.
JTable.AccessibleJTable.AccessibleJTableCell
Determines if the object is enabled.
isEnabled()
- Method in class javax.swing.
JTree.AccessibleJTree.AccessibleJTreeNode
isEnabled()
- Method in class javax.swing.table.
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry
isEnabled()
- Method in class javax.swing.
ToolTipManager
Returns true if this object is enabled.
isEnabled()
- Method in class jdk.jfr.
Event
Returns
true
if at least one recording is running, and the
 enabled setting for this event is set to
true
, otherwise
false
is returned.
isEnabled()
- Method in class jdk.jfr.
EventType
Returns
true
if the event is enabled and at least one recording is
 running,
false
otherwise.
isEnabledAt(int)
- Method in class javax.swing.
JTabbedPane
Returns whether or not the tab at
index
is
 currently enabled.
isEndDocument()
- Method in interface javax.xml.stream.events.
XMLEvent
A utility function to check if this event is an EndDocument.
isEndElement()
- Method in interface javax.xml.stream.events.
XMLEvent
A utility function to check if this event is a EndElement.
isEndElement()
- Method in class javax.xml.stream.util.
StreamReaderDelegate
isEndElement()
- Method in interface javax.xml.stream.
XMLStreamReader
Returns true if the cursor points to an end tag (otherwise false)
isEnqueued()
- Method in class java.lang.ref.
Reference
Deprecated.
This method was originally specified to test if a reference object has
 been cleared and enqueued but was never implemented to do this test.
 This method could be misused due to the inherent race condition
 or without an associated
ReferenceQueue
.
 An application relying on this method to release critical resources
 could cause serious performance issue.
 An application should use
ReferenceQueue
to reliably determine
 what reference objects that have been enqueued or
refersTo(null)
to determine if this reference
 object has been cleared.
isEntityReference()
- Method in interface javax.xml.stream.events.
XMLEvent
A utility function to check if this event is an EntityReference.
isEnum()
- Method in interface com.sun.jdi.
ClassType
Determine if this class was declared as an enum.
isEnum()
- Method in class java.lang.
Class
Returns true if and only if this class was declared as an enum in the
 source code.
isEnumConstant()
- Method in interface com.sun.jdi.
Field
Determine if this is a field that represents an enum constant.
isEnumConstant()
- Method in class java.lang.reflect.
Field
Returns
true
if this field represents an element of
 an enumerated class; returns
false
otherwise.
isEqual(byte[], byte[])
- Static method in class java.security.
MessageDigest
Compares two digests for equality.
isEqual(Object)
- Static method in interface java.util.function.
Predicate
Returns a predicate that tests if two arguments are equal according
 to
Objects.equals(Object, Object)
.
isEqual(ChronoLocalDate)
- Method in interface java.time.chrono.
ChronoLocalDate
Checks if this date is equal to the specified date ignoring the chronology.
isEqual(ChronoLocalDate)
- Method in class java.time.
LocalDate
Checks if this date is equal to the specified date.
isEqual(ChronoLocalDateTime<?>)
- Method in interface java.time.chrono.
ChronoLocalDateTime
Checks if this date-time is equal to the specified date-time ignoring the chronology.
isEqual(ChronoLocalDateTime<?>)
- Method in class java.time.
LocalDateTime
Checks if this date-time is equal to the specified date-time.
isEqual(ChronoZonedDateTime<?>)
- Method in interface java.time.chrono.
ChronoZonedDateTime
Checks if the instant of this date-time is equal to that of the specified date-time.
isEqual(OffsetDateTime)
- Method in class java.time.
OffsetDateTime
Checks if the instant of this date-time is equal to that of the specified date-time.
isEqual(OffsetTime)
- Method in class java.time.
OffsetTime
Checks if the instant of this
OffsetTime
is equal to that of the
 specified time applying both times to a common date.
isEqual(AttributeSet)
- Method in class javax.swing.text.
AbstractDocument.AbstractElement
Checks whether two attribute sets are equal.
isEqual(AttributeSet)
- Method in interface javax.swing.text.
AttributeSet
Determines if the two attribute sets are equivalent.
isEqual(AttributeSet)
- Method in class javax.swing.text.
SimpleAttributeSet
Compares two attribute sets.
isEqual(AttributeSet)
- Method in class javax.swing.text.
StyleContext.NamedStyle
Checks whether two attribute sets are equal.
isEqual(AttributeSet)
- Method in class javax.swing.text.
StyleContext.SmallAttributeSet
Checks whether two attribute sets are equal.
isEqualNode(Node)
- Method in class javax.imageio.metadata.
IIOMetadataNode
This DOM Level 3 method is not supported for
IIOMetadataNode
and will throw a
DOMException
.
isEqualNode(Node)
- Method in interface org.w3c.dom.
Node
Tests whether two nodes are equal.
isError()
- Method in class java.nio.charset.
CoderResult
Tells whether or not this object describes an error condition.
isError()
- Method in class jdk.jshell.
Diag
Indicates whether this diagnostic is an error (as opposed to a warning or
 note).
isErrorAny()
- Method in class java.awt.
MediaTracker
Checks the error status of all of the images.
isErrorID(int)
- Method in class java.awt.
MediaTracker
Checks the error status of all of the images tracked by this
 media tracker with the specified identifier.
isEstablished()
- Method in interface org.ietf.jgss.
GSSContext
Used during context establishment to determine the state of the
 context.
isEventDispatchThread()
- Static method in class javax.swing.
SwingUtilities
Returns true if the current thread is an AWT event dispatching thread.
isExecutable()
- Method in enum class javax.lang.model.element.
ElementKind
Returns
true
if this is a kind of executable: either
METHOD
or
CONSTRUCTOR
or
STATIC_INIT
or
INSTANCE_INIT
.
isExecutable()
- Method in enum class jdk.jshell.
Snippet.SubKind
Indicates whether this
SubKind
is executable.
isExecutable(Path)
- Static method in class java.nio.file.
Files
Tests whether a file is executable.
isExpanded(int)
- Method in class javax.swing.
JTree
Returns true if the node at the specified display row is currently
 expanded.
isExpanded(TreePath)
- Method in class javax.swing.
JTree
Returns true if the node identified by the path is currently expanded,
isExpanded(TreePath)
- Method in class javax.swing.tree.
AbstractLayoutCache
Returns true if the value identified by row is currently expanded.
isExpanded(TreePath)
- Method in class javax.swing.tree.
FixedHeightLayoutCache
Returns true if the value identified by row is currently expanded.
isExpanded(TreePath)
- Method in class javax.swing.tree.
VariableHeightLayoutCache
Returns true if the value identified by
path
is
 currently expanded.
isExpandEntityReferences()
- Method in class javax.xml.parsers.
DocumentBuilderFactory
Indicates whether or not the factory is configured to produce
 parsers which expand entity reference nodes.
isExpert()
- Method in class java.beans.
FeatureDescriptor
The "expert" flag is used to distinguish between those features that are
 intended for expert users from those that are intended for normal users.
isExplicitPolicyRequired()
- Method in class java.security.cert.
PKIXParameters
Checks if explicit policy is required.
isExported(String)
- Method in class java.lang.
Module
Returns
true
if this module exports the given package
 unconditionally.
isExported(String, Module)
- Method in class java.lang.
Module
Returns
true
if this module exports the given package to at
 least the given module.
isExtendedPictographic(int)
- Static method in class java.lang.
Character
Determines if the specified character (Unicode code point) is
 an Extended Pictographic.
isFair()
- Method in class java.util.concurrent.locks.
ReentrantLock
Returns
true
if this lock has fairness set true.
isFair()
- Method in class java.util.concurrent.locks.
ReentrantReadWriteLock
Returns
true
if this lock has fairness set true.
isFair()
- Method in class java.util.concurrent.
Semaphore
Returns
true
if this semaphore has fairness set true.
isFeatureSupported(String)
- Method in class javax.xml.crypto.dom.
DOMStructure
isFeatureSupported(String)
- Method in class javax.xml.crypto.dsig.keyinfo.
KeyInfoFactory
Indicates whether a specified feature is supported.
isFeatureSupported(String)
- Method in class javax.xml.crypto.dsig.
XMLSignatureFactory
Indicates whether a specified feature is supported.
isFeatureSupported(String)
- Method in interface javax.xml.crypto.
XMLStructure
Indicates whether a specified feature is supported.
isField()
- Method in enum class javax.lang.model.element.
ElementKind
Returns
true
if this is a kind of field:
 either
FIELD
or
ENUM_CONSTANT
.
isFile()
- Method in class java.io.
File
Tests whether the file denoted by this abstract pathname is a normal
 file.
isFileHidingEnabled()
- Method in class javax.swing.
JFileChooser
Returns true if hidden files are not shown in the file chooser;
 otherwise, returns false.
isFileSelectionEnabled()
- Method in class javax.swing.
JFileChooser
Convenience call that determines if files are selectable based on the
 current file selection mode.
isFileSystem(File)
- Method in class javax.swing.filechooser.
FileSystemView
Checks if
f
represents a real directory or file as opposed to a
 special folder such as
"Desktop"
.
isFileSystemRoot(File)
- Method in class javax.swing.filechooser.
FileSystemView
Is dir the root of a tree in the file system, such as a drive
 or partition.
isFileTypeSupported(int)
- Static method in class javax.sound.midi.
MidiSystem
Indicates whether file writing support for the specified MIDI file type
 is provided by the system.
isFileTypeSupported(int)
- Method in class javax.sound.midi.spi.
MidiFileWriter
Indicates whether file writing support for the specified MIDI file type
 is provided by this file writer.
isFileTypeSupported(int, Sequence)
- Static method in class javax.sound.midi.
MidiSystem
Indicates whether a MIDI file of the file type specified can be written
 from the sequence indicated.
isFileTypeSupported(int, Sequence)
- Method in class javax.sound.midi.spi.
MidiFileWriter
Indicates whether a MIDI file of the file type specified can be written
 from the sequence indicated.
isFileTypeSupported(AudioFileFormat.Type)
- Static method in class javax.sound.sampled.
AudioSystem
Indicates whether file writing support for the specified file type is
 provided by the system.
isFileTypeSupported(AudioFileFormat.Type)
- Method in class javax.sound.sampled.spi.
AudioFileWriter
Indicates whether file writing support for the specified file type is
 provided by this audio file writer.
isFileTypeSupported(AudioFileFormat.Type, AudioInputStream)
- Static method in class javax.sound.sampled.
AudioSystem
Indicates whether an audio file of the specified file type can be written
 from the indicated audio input stream.
isFileTypeSupported(AudioFileFormat.Type, AudioInputStream)
- Method in class javax.sound.sampled.spi.
AudioFileWriter
Indicates whether an audio file of the type specified can be written from
 the audio input stream indicated.
isFinal()
- Method in interface com.sun.jdi.
ReferenceType
Determines if this type was declared final.
isFinal()
- Method in interface com.sun.jdi.
TypeComponent
Determines if this TypeComponent is final.
isFinal(int)
- Static method in class java.lang.reflect.
Modifier
Return
true
if the integer argument includes the
final
modifier,
false
otherwise.
isFinite(double)
- Static method in class java.lang.
Double
Returns
true
if the argument is a finite floating-point
 value; returns
false
otherwise (for NaN and infinity
 arguments).
isFinite(float)
- Static method in class java.lang.
Float
Returns
true
if the argument is a finite floating-point
 value; returns
false
otherwise (for NaN and infinity
 arguments).
isFirst()
- Method in interface java.sql.
ResultSet
Retrieves whether the cursor is on the first row of
 this
ResultSet
object.
isFixed()
- Method in class java.time.temporal.
ValueRange
Is the value range fixed and fully known.
isFixedOffset()
- Method in class java.time.zone.
ZoneRules
Checks of the zone rules are fixed, such that the offset never varies.
isFixedRowHeight()
- Method in class javax.swing.
JTree
Returns true if the height of each display row is a fixed size.
isFixedRowHeight()
- Method in class javax.swing.tree.
AbstractLayoutCache
Returns true if the height of each row is a fixed size.
isFlavorJavaFileListType()
- Method in class java.awt.datatransfer.
DataFlavor
Returns
true
if the
DataFlavor
specified represents a
 list of file objects.
isFlavorRemoteObjectType()
- Method in class java.awt.datatransfer.
DataFlavor
Returns
true
if the
DataFlavor
specified represents a
 remote object.
isFlavorSerializedObjectType()
- Method in class java.awt.datatransfer.
DataFlavor
Returns
true
if the
DataFlavor
specified represents a
 serialized object.
isFlavorTextType()
- Method in class java.awt.datatransfer.
DataFlavor
Returns whether this
DataFlavor
is a valid text flavor for this
 implementation of the Java platform.
isFloatable()
- Method in class javax.swing.
JToolBar
Gets the
floatable
property.
isFloating()
- Method in class javax.swing.plaf.basic.
BasicToolBarUI
Returns
true
if the
JToolBar
is floating
isFloppyDrive(File)
- Method in class javax.swing.filechooser.
FileSystemView
Used by UI classes to decide whether to display a special icon
 for a floppy disk.
isFocusable()
- Method in class java.awt.
Component
Returns whether this Component can be focused.
isFocusableWindow()
- Method in class java.awt.
Window
Returns whether this Window can become the focused Window, that is,
 whether this Window or any of its subcomponents can become the focus
 owner.
isFocusCycleRoot()
- Method in class java.awt.
Container
Returns whether this Container is the root of a focus traversal cycle.
isFocusCycleRoot()
- Method in class java.awt.
Window
Always returns
true
because all Windows must be roots of a
 focus traversal cycle.
isFocusCycleRoot()
- Method in class javax.swing.
JInternalFrame
Always returns
true
because all
JInternalFrame
s must be
 roots of a focus traversal cycle.
isFocusCycleRoot(Container)
- Method in class java.awt.
Component
Returns whether the specified Container is the focus cycle root of this
 Component's focus traversal cycle.
isFocusCycleRoot(Container)
- Method in class java.awt.
Container
Returns whether the specified Container is the focus cycle root of this
 Container's focus traversal cycle.
isFocused()
- Method in class java.awt.
Window
Returns whether this Window is focused.
isFocusManagerEnabled()
- Static method in class javax.swing.
FocusManager
Deprecated.
As of 1.4, replaced by
KeyboardFocusManager.getDefaultFocusTraversalPolicy()
isFocusOwner()
- Method in class java.awt.
Component
Returns
true
if this
Component
is the
    focus owner.
isFocusPainted()
- Method in class javax.swing.
AbstractButton
Gets the
paintFocus
property.
isFocusTraversable()
- Method in class com.sun.java.accessibility.util.
Translator
Returns whether this object can accept focus or not.
isFocusTraversable()
- Method in class java.awt.
Component.AccessibleAWTComponent
Returns whether this object can accept focus or not.
isFocusTraversable()
- Method in class java.awt.
Component
Deprecated.
As of 1.4, replaced by
isFocusable()
.
isFocusTraversable()
- Method in class java.awt.
List.AccessibleAWTList.AccessibleAWTListChild
Returns whether this object can accept focus or not.
isFocusTraversable()
- Method in class java.awt.
MenuComponent.AccessibleAWTMenuComponent
Returns whether this object can accept focus or not.
isFocusTraversable()
- Method in interface javax.accessibility.
AccessibleComponent
Returns whether this object can accept focus or not.
isFocusTraversable()
- Method in class javax.swing.
JList.AccessibleJList.AccessibleJListChild
isFocusTraversable()
- Method in class javax.swing.
JTable.AccessibleJTable.AccessibleJTableCell
isFocusTraversable()
- Method in class javax.swing.
JTree.AccessibleJTree.AccessibleJTreeNode
isFocusTraversable()
- Method in class javax.swing.plaf.basic.
BasicArrowButton
Returns whether the arrow button should get the focus.
isFocusTraversable()
- Method in class javax.swing.plaf.basic.
BasicComboPopup
Overridden to unconditionally return false.
isFocusTraversable()
- Method in class javax.swing.plaf.basic.
BasicInternalFrameTitlePane.SystemMenuBar
isFocusTraversable()
- Method in class javax.swing.plaf.metal.
MetalComboBoxButton
isFocusTraversable()
- Method in class javax.swing.table.
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry
isFocusTraversable(JComboBox<?>)
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI
Determines if the JComboBox is focus traversable.
isFocusTraversable(JComboBox<?>)
- Method in class javax.swing.plaf.
ComboBoxUI
Determine whether or not the combo box itself is traversable
isFocusTraversable(JComboBox<?>)
- Method in class javax.swing.plaf.multi.
MultiComboBoxUI
Invokes the
isFocusTraversable
method on each UI handled by this object.
isFocusTraversalPolicyProvider()
- Method in class java.awt.
Container
Returns whether this container provides focus traversal
 policy.
isFocusTraversalPolicySet()
- Method in class java.awt.
Container
Returns whether the focus traversal policy has been explicitly set for
 this Container.
isFontSet()
- Method in class java.awt.
Component
Returns whether the font has been explicitly set for this Component.
isForegroundSet()
- Method in class java.awt.
Component
Returns whether the foreground color has been explicitly set for this
 Component.
isFormatLossless()
- Method in class javax.imageio.spi.
ImageWriterSpi
Returns
true
if the format that this writer
 outputs preserves pixel data bit-accurately.
isFormatSupported(AudioFormat)
- Method in class javax.sound.sampled.
DataLine.Info
Indicates whether this data line supports a particular audio format.
isForwardable()
- Method in class javax.security.auth.kerberos.
KerberosTicket
Determines if this ticket is forwardable.
isForwardCheckingSupported()
- Method in interface java.security.cert.
CertPathChecker
Indicates if forward checking is supported.
isForwardCheckingSupported()
- Method in class java.security.cert.
PKIXCertPathChecker
Indicates if forward checking is supported.
isForwarded()
- Method in class javax.security.auth.kerberos.
KerberosTicket
Determines if this ticket had been forwarded or was issued based on
 authentication involving a forwarded ticket-granting ticket.
isFrameStateSupported(int)
- Method in class java.awt.
Toolkit
Returns whether Toolkit supports this state for
Frame
s.
isFreeStanding
- Variable in class javax.swing.plaf.metal.
MetalScrollBarUI
The value of the property
JScrollBar.isFreeStanding
.
isFullScreenRequired()
- Method in class java.awt.
BufferCapabilities
Returns whether page flipping is only available in full-screen mode.
isFullScreenSupported()
- Method in class java.awt.
GraphicsDevice
Returns
true
if this
GraphicsDevice
supports full-screen exclusive mode.
isFunctionalInterface(TypeElement)
- Method in interface javax.lang.model.util.
Elements
Returns
true
if the type element is a functional
 interface,
false
otherwise.
isGap()
- Method in class java.time.zone.
ZoneOffsetTransition
Does this transition represent a gap in the local time-line.
isGapToken()
- Method in class org.ietf.jgss.
MessageProp
Tests if an expected token was not received, i.e., one or more
 predecessor tokens have not yet been successfully processed.
isGeneral()
- Method in class javax.swing.text.html.parser.
Entity
Returns
true
if it is a general entity.
isGraphicsConfigSupported(GraphicsConfiguration)
- Method in class java.awt.
GraphicsConfigTemplate
Returns a
boolean
indicating whether or
 not the specified
GraphicsConfiguration
can be
 used to create a drawing surface that supports the indicated
 features.
isGroupingUsed()
- Method in class java.text.
CompactNumberFormat
Returns true if grouping is used in this format.
isGroupingUsed()
- Method in class java.text.
NumberFormat
Returns true if grouping is used in this format.
isGuiAvailable()
- Static method in class java.beans.
Beans
Determines whether beans can assume a GUI is available.
isGUIInitialized()
- Static method in class com.sun.java.accessibility.util.
EventQueueMonitor
Says whether the GUI subsystem has been initialized or not.
isHardware()
- Method in class java.util.random.
RandomGeneratorFactory
Return true if random generator uses a hardware device (HRNG) to produce
 entropic input.
isHeadless()
- Static method in class java.awt.
GraphicsEnvironment
Tests whether or not a display, keyboard, and mouse can be
 supported in this environment.
isHeadlessInstance()
- Method in class java.awt.
GraphicsEnvironment
Returns whether or not a display, keyboard, and mouse can be
 supported in this graphics environment.
isHeldByCurrentThread()
- Method in class java.util.concurrent.locks.
ReentrantLock
Queries if this lock is held by the current thread.
isHeldByCurrentThread()
- Method in class java.util.concurrent.locks.
ReentrantReadWriteLock.WriteLock
Queries if this write lock is held by the current thread.
isHeldExclusively()
- Method in class java.util.concurrent.locks.
AbstractQueuedLongSynchronizer
Returns
true
if synchronization is held exclusively with
 respect to the current (calling) thread.
isHeldExclusively()
- Method in class java.util.concurrent.locks.
AbstractQueuedSynchronizer
Returns
true
if synchronization is held exclusively with
 respect to the current (calling) thread.
isHexDigit(int)
- Static method in class java.util.
HexFormat
Returns
true
if the character is a valid hexadecimal character or codepoint.
isHidden()
- Method in class java.beans.
FeatureDescriptor
The "hidden" flag is used to identify features that are intended only
 for tool use, and which should not be exposed to humans.
isHidden()
- Method in class java.io.
File
Tests whether the file named by this abstract pathname is a hidden
 file.
isHidden()
- Method in class java.lang.
Class
Returns
true
if and only if the underlying class is a hidden class.
isHidden()
- Method in interface java.nio.file.attribute.
DosFileAttributes
Returns the value of the hidden attribute.
isHidden()
- Method in class jdk.jfr.consumer.
RecordedMethod
Returns whether this method is hidden (for example, wrapper code in a lambda
 expressions).
isHidden(File)
- Method in class javax.swing.plaf.basic.
BasicFileChooserUI.BasicFileView
Returns whether or not a file is hidden.
isHidden(Path)
- Static method in class java.nio.file.
Files
Tells whether or not a file is considered
hidden
.
isHidden(Path)
- Method in class java.nio.file.spi.
FileSystemProvider
Tells whether or not a file is considered
hidden
.
isHiddenFile(File)
- Method in class javax.swing.filechooser.
FileSystemView
Returns whether a file is hidden or not.
isHighSurrogate(char)
- Static method in class java.lang.
Character
Determines if the given
char
value is a
Unicode high-surrogate code unit
(also known as
leading-surrogate code unit
).
isHorizontal()
- Method in class java.awt.
ComponentOrientation
Are lines horizontal?
isHTMLString(String)
- Static method in class javax.swing.plaf.basic.
BasicHTML
Check the given string to see if it should trigger the
 html rendering logic in a non-text component that supports
 html rendering.
isHttpOnly()
- Method in class java.net.
HttpCookie
Returns
true
if this cookie contains the
HttpOnly
attribute.
isIcon
- Variable in class javax.swing.
JInternalFrame
The frame has been iconified.
isIcon()
- Method in class javax.swing.
JInternalFrame
Returns whether the
JInternalFrame
is currently iconified.
isIconifiable()
- Method in class javax.swing.
JInternalFrame
Gets the
iconable
property,
 which by default is
false
.
isIconOnly()
- Method in class javax.swing.plaf.metal.
MetalComboBoxButton
Returns the
isIconOnly
value.
isId()
- Method in interface org.w3c.dom.
Attr
Returns whether this attribute is known to be of type ID (i.e. to
 contain an identifier for its owner element) or not.
isIdAttribute(int)
- Method in class javax.xml.validation.
TypeInfoProvider
Returns
true
if the specified attribute is determined
 to be ID.
isIdentifier(CharSequence)
- Static method in enum class javax.lang.model.
SourceVersion
Returns whether or not
name
is a syntactically valid
 identifier (simple name) or keyword in the latest source
 version.
isIdentifierIgnorable(char)
- Static method in class java.lang.
Character
Determines if the specified character should be regarded as
 an ignorable character in a Java identifier or a Unicode identifier.
isIdentifierIgnorable(int)
- Static method in class java.lang.
Character
Determines if the specified character (Unicode code point) should be regarded as
 an ignorable character in a Java identifier or a Unicode identifier.
isIdentity()
- Method in class java.awt.font.
TransformAttribute
Returns
true
if the wrapped transform is
 an identity transform.
isIdentity()
- Method in class java.awt.geom.
AffineTransform
Returns
true
if this
AffineTransform
is
 an identity transform.
isIdeographic(int)
- Static method in class java.lang.
Character
Determines if the specified character (Unicode code point) is a CJKV
 (Chinese, Japanese, Korean and Vietnamese) ideograph, as defined by
 the Unicode Standard.
isIFDPointer()
- Method in class javax.imageio.plugins.tiff.
TIFFTag
Returns
true
if this tag is used to point to an IFD
 structure containing additional tags.
isIgnorableWhiteSpace()
- Method in interface javax.xml.stream.events.
Characters
Return true if this is ignorableWhiteSpace.
isIgnoringComments()
- Method in class javax.xml.parsers.
DocumentBuilderFactory
Indicates whether or not the factory is configured to produce
 parsers which ignores comments.
isIgnoringElementContentWhitespace()
- Method in class javax.xml.parsers.
DocumentBuilderFactory
Indicates whether or not the factory is configured to produce
 parsers which ignore ignorable whitespace in element content.
isIgnoringMetadata()
- Method in class javax.imageio.
ImageReader
Returns
true
if the current input source has been
 marked as allowing metadata to be ignored by passing
true
as the
ignoreMetadata
argument
 to the
setInput
method.
isImageAutoSize()
- Method in class java.awt.
TrayIcon
Returns the value of the auto-size property.
isImageTiled(int)
- Method in class javax.imageio.
ImageReader
Returns
true
if the image is organized into
tiles
, that is, equal-sized non-overlapping rectangles.
isImplicit()
- Method in class java.lang.reflect.
Parameter
Returns
true
if this parameter is implicitly declared
 in source code; returns
false
otherwise.
isInboundDone()
- Method in class javax.net.ssl.
SSLEngine
Returns whether
SSLEngine.unwrap(ByteBuffer, ByteBuffer)
will
 accept any more inbound data messages.
isIncluded(Element)
- Method in interface jdk.javadoc.doclet.
DocletEnvironment
Returns true if an element should be
included
in the
 documentation.
isInDefaultEventSet()
- Method in class java.beans.
EventSetDescriptor
Reports if an event set is in the "default" set.
isIndeterminate()
- Method in class javax.swing.
JProgressBar
Returns the value of the
indeterminate
property.
isindex
- Variable in class javax.swing.text.html.parser.
DTD
The element corresponding to isindex.
ISINDEX
- Static variable in class javax.swing.text.html.
HTML.Tag
Tag <isindex>
IsindexAction()
- Constructor for class javax.swing.text.html.
HTMLDocument.HTMLReader.IsindexAction
Constructs a
IsindexAction
.
isIndexSelected(int)
- Method in class java.awt.
List
Determines if the specified item in this scrolling list is
 selected.
isInfinite()
- Method in class java.lang.
Double
Returns
true
if this
Double
value is
 infinitely large in magnitude,
false
otherwise.
isInfinite()
- Method in class java.lang.
Float
Returns
true
if this
Float
value is
 infinitely large in magnitude,
false
otherwise.
isInfinite(double)
- Static method in class java.lang.
Double
Returns
true
if the specified number is infinitely
 large in magnitude,
false
otherwise.
isInfinite(float)
- Static method in class java.lang.
Float
Returns
true
if the specified number is infinitely
 large in magnitude,
false
otherwise.
isInherited()
- Method in class javax.swing.text.html.
CSS.Attribute
Indicates if the attribute should be inherited
 from the parent or not.
isInitial()
- Method in class javax.security.auth.kerberos.
KerberosTicket
Determines if this ticket was issued using the Kerberos AS-Exchange
 protocol, and not issued based on some ticket-granting ticket.
isInitialized()
- Method in interface com.sun.jdi.
ReferenceType
Determines if this type has been initialized.
isInitialized()
- Method in class javax.annotation.processing.
AbstractProcessor
Returns
true
if this object has been
initialized
,
false
otherwise.
isInitialized()
- Static method in class jdk.jfr.
FlightRecorder
Returns
true
if Flight Recorder is initialized.
isInitializer()
- Method in enum class javax.lang.model.element.
ElementKind
Returns
true
if this is a kind of initializer: either
STATIC_INIT
or
INSTANCE_INIT
.
isInitiator()
- Method in interface org.ietf.jgss.
GSSContext
Determines if this is the context initiator.
isInline()
- Method in interface com.sun.source.doctree.
ReturnTree
Returns whether this instance is an inline tag.
isInlineTag()
- Method in interface jdk.javadoc.doclet.
Taglet
Indicates whether this taglet supports inline tags.
isInNative()
- Method in class java.lang.management.
ThreadInfo
Tests if the thread associated with this
ThreadInfo
is executing native code via the Java Native Interface (JNI).
isInProgress()
- Method in class javax.swing.undo.
CompoundEdit
Returns true if this edit is in progress--that is, it has not
 received end.
isInputClosed()
- Method in interface java.net.http.
WebSocket
Tells whether this WebSocket's input is closed.
isInputShutdown()
- Method in class java.net.
Socket
Returns whether the read-half of the socket connection is closed.
isInRelationService()
- Method in class javax.management.relation.
RelationSupport
Returns an internal flag specifying if the object is still handled by
 the Relation Service.
isInRelationService()
- Method in interface javax.management.relation.
RelationSupportMBean
Returns an internal flag specifying if the object is still handled by
 the Relation Service.
isInsert()
- Method in class javax.swing.
JList.DropLocation
Returns whether or not this location represents an insert
 location.
isInsertColumn()
- Method in class javax.swing.
JTable.DropLocation
Returns whether or not this location represents an insert
 of a column.
isInsertRow()
- Method in class javax.swing.
JTable.DropLocation
Returns whether or not this location represents an insert
 of a row.
isInstance(Class<?>, int, MethodType)
- Static method in class jdk.dynalink.linker.support.
Guards
Creates a method handle with arguments of a specified type, but with boolean return value.
isInstance(Class<?>, MethodType)
- Static method in class jdk.dynalink.linker.support.
Guards
Creates a method handle with arguments of a specified type, but with boolean return value.
isInstance(Object)
- Method in class java.lang.
Class
Determines if the specified
Object
is assignment-compatible
 with the object represented by this
Class
.
isInstanceOf(Object, Class<?>)
- Static method in class java.beans.
Beans
Check if a bean can be viewed as a given target type.
isInstanceOf(ObjectName, String)
- Method in interface javax.management.
MBeanServer
isInstanceOf(ObjectName, String)
- Method in interface javax.management.
MBeanServerConnection
Returns true if the MBean specified is an instance of the
 specified class, false otherwise.
isInstanceOf(ObjectName, String, Subject)
- Method in interface javax.management.remote.rmi.
RMIConnection
Handles the method
MBeanServerConnection.isInstanceOf(ObjectName, String)
.
isInstanceOf(ObjectName, String, Subject)
- Method in class javax.management.remote.rmi.
RMIConnectionImpl_Stub
isInstanceOf(ObjectName, String, Subject)
- Method in class javax.management.remote.rmi.
RMIConnectionImpl
isInstanceOf(StringValueExp)
- Static method in class javax.management.
Query
Returns a query expression that represents an inheritance constraint
 on an MBean class.
isInState(T)
- Method in class javax.swing.plaf.nimbus.
State
Gets whether the specified JComponent is in the custom state represented
 by this class.
isIntegral()
- Method in class javax.imageio.plugins.tiff.
TIFFField
Indicates whether the value associated with the field is of
 integral data type.
isInterface
- Variable in enum class java.lang.constant.
DirectMethodHandleDesc.Kind
Is this an interface
isInterface()
- Method in class java.lang.
Class
Determines if this
Class
object represents an
 interface type.
isInterface()
- Method in enum class javax.lang.model.element.
ElementKind
Returns
true
if this is a kind of interface:
 either
INTERFACE
or
ANNOTATION_TYPE
.
isInterface(int)
- Static method in class java.lang.reflect.
Modifier
Return
true
if the integer argument includes the
interface
modifier,
false
otherwise.
isInterrupted()
- Method in class java.lang.
Thread
Tests whether this thread has been interrupted.
isIntValue()
- Method in class java.time.temporal.
ValueRange
Checks if all values in the range fit in an
int
.
isIPv4CompatibleAddress()
- Method in class java.net.
Inet6Address
Utility routine to check if the InetAddress is an
 IPv4 compatible IPv6 address.
isIs()
- Method in class javax.management.
MBeanAttributeInfo
Indicates if this attribute has an "is" getter.
isIs()
- Method in interface javax.management.openmbean.
OpenMBeanAttributeInfo
Returns
true
if the attribute described by this
OpenMBeanAttributeInfo
instance
 is accessed through a
is
XXX
getter
 (applies only to
boolean
and
Boolean
values),
false
otherwise.
isIsoBased()
- Method in interface java.time.chrono.
Chronology
Checks if this chronology is ISO based.
isIsoBased()
- Method in class java.time.chrono.
IsoChronology
IsoChronology
is an ISO based chronology, which supports fields
 in
IsoFields
, such as
DAY_OF_QUARTER
and
QUARTER_OF_YEAR
.
isIsoBased()
- Method in class java.time.chrono.
JapaneseChronology
JapaneseChronology
is an ISO based chronology, which supports fields
 in
IsoFields
, such as
DAY_OF_QUARTER
and
QUARTER_OF_YEAR
.
isIsoBased()
- Method in class java.time.chrono.
MinguoChronology
MinguoChronology
is an ISO based chronology, which supports fields
 in
IsoFields
, such as
DAY_OF_QUARTER
and
QUARTER_OF_YEAR
.
isIsoBased()
- Method in class java.time.chrono.
ThaiBuddhistChronology
ThaiBuddhistChronology
is an ISO based chronology, which supports fields
 in
IsoFields
, such as
DAY_OF_QUARTER
and
QUARTER_OF_YEAR
.
isISOControl(char)
- Static method in class java.lang.
Character
Determines if the specified character is an ISO control
 character.
isISOControl(int)
- Static method in class java.lang.
Character
Determines if the referenced character (Unicode code point) is an ISO control
 character.
isItalic()
- Method in class java.awt.
Font
Indicates whether or not this
Font
object's style is
 ITALIC.
isItalic(AttributeSet)
- Static method in class javax.swing.text.
StyleConstants
Checks whether the italic attribute is set.
isJavaFrame()
- Method in class jdk.jfr.consumer.
RecordedFrame
Returns
true
if this is a Java frame,
false
otherwise.
isJavaIdentifierPart(char)
- Static method in class java.lang.
Character
Determines if the specified character may be part of a Java
 identifier as other than the first character.
isJavaIdentifierPart(int)
- Static method in class java.lang.
Character
Determines if the character (Unicode code point) may be part of a Java
 identifier as other than the first character.
isJavaIdentifierStart(char)
- Static method in class java.lang.
Character
Determines if the specified character is
 permissible as the first character in a Java identifier.
isJavaIdentifierStart(int)
- Static method in class java.lang.
Character
Determines if the character (Unicode code point) is
 permissible as the first character in a Java identifier.
isJavaLetter(char)
- Static method in class java.lang.
Character
Deprecated.
Replaced by isJavaIdentifierStart(char).
isJavaLetterOrDigit(char)
- Static method in class java.lang.
Character
Deprecated.
Replaced by isJavaIdentifierPart(char).
isJavaMIMEType(String)
- Static method in class java.awt.datatransfer.
SystemFlavorMap
Returns whether the specified
String
is an encoded Java MIME
 type.
isJumpable()
- Method in class java.util.random.
RandomGeneratorFactory
Return true if random generator can jump a specified distant point in
 the state cycle.
isKeyBindingActive()
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI
Returns whether or no the key binding is active.
isKeyBindingRegistered()
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI
Returns whether or no the key binding is registered.
isKeyDown
- Variable in class javax.swing.plaf.basic.
BasicTreeUI.KeyHandler
Set to true while keyPressed is active.
isKeyEntry(String)
- Method in class java.security.
KeyStore
Returns
true
if the entry identified by the given alias
 was created by a call to
setKeyEntry
,
 or created by a call to
setEntry
with a
PrivateKeyEntry
or a
SecretKeyEntry
.
isKeyword(CharSequence)
- Static method in enum class javax.lang.model.
SourceVersion
Returns whether or not
s
is a keyword, boolean literal,
 or null literal in the latest source version.
isKeyword(CharSequence, SourceVersion)
- Static method in enum class javax.lang.model.
SourceVersion
Returns whether or not
s
is a keyword, boolean literal,
 or null literal in the given source version.
isLargeModel()
- Method in class javax.swing.
JTree
Returns true if the tree is configured for a large model.
isLargeModel()
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Returns
true
if large model is set.
isLast()
- Method in interface java.sql.
ResultSet
Retrieves whether the cursor is on the last row of
 this
ResultSet
object.
isLayoutValid()
- Method in class javax.swing.text.
AsyncBoxView.ChildState
Has the child view been laid out.
isLayoutValid(int)
- Method in class javax.swing.text.
BoxView
Determines if the layout is valid along the given axis.
isLeadAnchorNotificationEnabled()
- Method in class javax.swing.
DefaultListSelectionModel
Returns the value of the
leadAnchorNotificationEnabled
flag.
isLeadingEdge()
- Method in class java.awt.font.
TextHitInfo
Returns
true
if the leading edge of the character was
 hit.
isLeaf()
- Method in class javax.swing.
JTree.DynamicUtilTreeNode
Returns true if this node allows children.
isLeaf()
- Method in class javax.swing.text.
AbstractDocument.AbstractElement
Checks whether the element is a leaf.
isLeaf()
- Method in class javax.swing.text.
AbstractDocument.BranchElement
Checks whether the element is a leaf.
isLeaf()
- Method in class javax.swing.text.
AbstractDocument.LeafElement
Checks whether the element is a leaf.
isLeaf()
- Method in interface javax.swing.text.
Element
Is this element a leaf element?
isLeaf()
- Method in class javax.swing.tree.
DefaultMutableTreeNode
Returns true if this node has no children.
isLeaf()
- Method in interface javax.swing.tree.
TreeNode
Returns true if the receiver is a leaf.
isLeaf(int)
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Returns
true
if the node at
row
is a leaf.
isLeaf(Object)
- Method in class javax.swing.tree.
DefaultTreeModel
Returns whether the specified node is a leaf node.
isLeaf(Object)
- Method in interface javax.swing.tree.
TreeModel
Returns
true
if
node
is a leaf.
isLeap()
- Method in class java.time.
Year
Checks if the year is a leap year, according to the ISO proleptic
 calendar system rules.
isLeap(long)
- Static method in class java.time.
Year
Checks if the year is a leap year, according to the ISO proleptic
 calendar system rules.
isLeapable()
- Method in class java.util.random.
RandomGeneratorFactory
Return true if random generator is jumpable and can leap to a very distant
 point in the state cycle.
isLeapYear()
- Method in interface java.time.chrono.
ChronoLocalDate
Checks if the year is a leap year, as defined by the calendar system.
isLeapYear()
- Method in class java.time.chrono.
HijrahDate
Checks if the year is a leap year, according to the Hijrah calendar system rules.
isLeapYear()
- Method in class java.time.
LocalDate
Checks if the year is a leap year, according to the ISO proleptic
 calendar system rules.
isLeapYear()
- Method in class java.time.
YearMonth
Checks if the year is a leap year, according to the ISO proleptic
 calendar system rules.
isLeapYear(int)
- Method in class java.util.
GregorianCalendar
Determines if the given year is a leap year.
isLeapYear(long)
- Method in interface java.time.chrono.
Chronology
Checks if the specified year is a leap year.
isLeapYear(long)
- Method in class java.time.chrono.
HijrahChronology
isLeapYear(long)
- Method in class java.time.chrono.
IsoChronology
Checks if the year is a leap year, according to the ISO proleptic
 calendar system rules.
isLeapYear(long)
- Method in class java.time.chrono.
JapaneseChronology
Checks if the specified year is a leap year.
isLeapYear(long)
- Method in class java.time.chrono.
MinguoChronology
Checks if the specified year is a leap year.
isLeapYear(long)
- Method in class java.time.chrono.
ThaiBuddhistChronology
Checks if the specified year is a leap year.
isLeftMouseButton(MouseEvent)
- Static method in class javax.swing.
SwingUtilities
Returns true if the mouse event specifies the left mouse button.
isLeftToRight()
- Method in class java.awt.
ComponentOrientation
HorizontalLines: Do items run left-to-right?
isLeftToRight()
- Method in class java.awt.font.
TextLayout
Returns
true
if this
TextLayout
has
 a left-to-right base direction or
false
if it has
 a right-to-left base direction.
isLeftToRight()
- Method in class java.text.
Bidi
Return true if the line is all left-to-right text and the base direction is left-to-right.
isLegalReplacement(byte[])
- Method in class java.nio.charset.
CharsetEncoder
Tells whether or not the given byte array is a legal replacement value
 for this encoder.
isLenient()
- Method in class java.text.
DateFormat
Tell whether date/time parsing is to be lenient.
isLenient()
- Method in class java.util.
Calendar
Tells whether date/time interpretation is to be lenient.
isLetter(char)
- Static method in class java.lang.
Character
Determines if the specified character is a letter.
isLetter(int)
- Static method in class java.lang.
Character
Determines if the specified character (Unicode code point) is a letter.
isLetterOrDigit(char)
- Static method in class java.lang.
Character
Determines if the specified character is a letter or digit.
isLetterOrDigit(int)
- Static method in class java.lang.
Character
Determines if the specified character (Unicode code point) is a letter or digit.
isLigature()
- Method in class java.awt.font.
GlyphMetrics
Returns
true
if this is a ligature glyph.
isLight
- Variable in class javax.swing.plaf.metal.
MetalIconFactory.TreeControlIcon
if
true
the icon is collapsed.
isLightweight()
- Method in class java.awt.
Component
A lightweight component doesn't have a native toolkit peer.
isLightweightComponent(Component)
- Static method in class javax.swing.
JComponent
Returns true if this component is lightweight, that is, if it doesn't
 have a native window system peer.
isLightWeightPopupEnabled()
- Method in class javax.swing.
JComboBox
Gets the value of the
lightWeightPopupEnabled
property.
isLightWeightPopupEnabled()
- Method in class javax.swing.
JPopupMenu
Gets the
lightWeightPopupEnabled
property.
isLightWeightPopupEnabled()
- Method in class javax.swing.
ToolTipManager
Returns true if lightweight (all-Java)
Tooltips
are in use, or false if heavyweight (native peer)
Tooltips
are being used.
isLineEmpty()
- Method in class javax.swing.text.
AbstractWriter
Returns true if the current line should be considered empty.
isLineSupported(Line.Info)
- Static method in class javax.sound.sampled.
AudioSystem
Indicates whether the system supports any lines that match the specified
Line.Info
object.
isLineSupported(Line.Info)
- Method in interface javax.sound.sampled.
Mixer
Indicates whether the mixer supports a line (or lines) that match the
 specified
Line.Info
object.
isLink(File)
- Method in class javax.swing.filechooser.
FileSystemView
Returns whether the specified file denotes a shell interpreted link which
 can be obtained by the
FileSystemView.getLinkLocation(File)
.
isLinkLocalAddress()
- Method in class java.net.
Inet4Address
Utility routine to check if the InetAddress is a link local address.
isLinkLocalAddress()
- Method in class java.net.
Inet6Address
Utility routine to check if the InetAddress is a link local address.
isLinkLocalAddress()
- Method in class java.net.
InetAddress
Utility routine to check if the InetAddress is a link local address.
isLoaded()
- Method in interface java.lang.foreign.
MemorySegment
PREVIEW
Determines whether the contents of this mapped segment is resident in physical
 memory.
isLoaded()
- Method in class java.nio.
MappedByteBuffer
Tells whether or not this buffer's content is resident in physical
 memory.
isLocal
- Variable in class java.awt.dnd.
DropTargetContext.TransferableProxy
A
boolean
indicating if the encapsulated
Transferable
object represents the result
 of local drag-n-drop operation (within the same JVM).
isLocalClass()
- Method in class java.lang.
Class
Returns
true
if and only if the underlying class
 is a local class.
isLocallyDefined(KeyStroke)
- Method in interface javax.swing.text.
Keymap
Determines if the given key sequence is locally defined.
isLocalTransfer()
- Method in class java.awt.dnd.
DropTargetDropEvent
This method returns an
int
indicating if
 the source is in the same JVM as the target.
isLocationByPlatform()
- Method in class java.awt.
Window
Returns
true
if this Window will appear at the default location
 for the native windowing system the next time this Window is made visible.
isLocationInExpandControl(int, int, int, int)
- Method in class javax.swing.plaf.metal.
MetalTreeUI
Returns
true
if a point with X coordinate
mouseX
and Y coordinate
mouseY
is in expanded control.
isLocationInExpandControl(TreePath, int, int)
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Returns
true
if
mouseX
and
mouseY
fall
 in the area of row that is used to expand/collapse the node and
 the node at
row
does not represent a leaf.
isLocked()
- Method in class java.util.concurrent.locks.
ReentrantLock
Queries if this lock is held by any thread.
isLockStamp(long)
- Static method in class java.util.concurrent.locks.
StampedLock
Tells whether a stamp represents holding a lock.
isLoggable(System.Logger.Level)
- Method in interface java.lang.
System.Logger
Checks if a message of the given level would be logged by
 this logger.
isLoggable(Level)
- Method in class java.util.logging.
Logger
Check if a message of the given level would actually be logged
 by this logger.
isLoggable(LogRecord)
- Method in interface java.util.logging.
Filter
Check if a given log record should be published.
isLoggable(LogRecord)
- Method in class java.util.logging.
Handler
Check if this
Handler
would actually log a given
LogRecord
.
isLoggable(LogRecord)
- Method in class java.util.logging.
MemoryHandler
Check if this
Handler
would actually log a given
LogRecord
into its internal buffer.
isLoggable(LogRecord)
- Method in class java.util.logging.
StreamHandler
Check if this
Handler
would actually log a given
LogRecord
.
isLongerThan(Duration)
- Method in class javax.xml.datatype.
Duration
Checks if this duration object is strictly longer than
 another
Duration
object.
isLoopback()
- Method in class java.net.
NetworkInterface
Returns whether a network interface is a loopback interface.
isLoopbackAddress()
- Method in class java.net.
Inet4Address
Utility routine to check if the InetAddress is a loopback address.
isLoopbackAddress()
- Method in class java.net.
Inet6Address
Utility routine to check if the InetAddress is a loopback address.
isLoopbackAddress()
- Method in class java.net.
InetAddress
Utility routine to check if the InetAddress is a loopback address.
isLowerCase(char)
- Static method in class java.lang.
Character
Determines if the specified character is a lowercase character.
isLowerCase(int)
- Static method in class java.lang.
Character
Determines if the specified character (Unicode code point) is a
 lowercase character.
isLowSurrogate(char)
- Static method in class java.lang.
Character
Determines if the given
char
value is a
Unicode low-surrogate code unit
(also known as
trailing-surrogate code unit
).
isMalformed()
- Method in class java.nio.charset.
CoderResult
Tells whether or not this object describes a malformed-input error.
isManagingFocus()
- Method in class javax.swing.
JComponent
Deprecated.
As of 1.4, replaced by
Component.setFocusTraversalKeys(int, Set)
and
Container.setFocusCycleRoot(boolean)
.
ISMAP
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "ismap"
isMapped()
- Method in interface java.lang.foreign.
MemorySegment
PREVIEW
Returns
true
if this segment is a mapped segment.
isMarked()
- Method in class java.util.concurrent.atomic.
AtomicMarkableReference
Returns the current value of the mark.
isMaximizable()
- Method in class javax.swing.
JInternalFrame
Gets the value of the
maximizable
property.
isMaximum
- Variable in class javax.swing.
JInternalFrame
The frame has been expanded to its maximum size.
isMaximum()
- Method in class javax.swing.
JInternalFrame
Returns whether the
JInternalFrame
is currently maximized.
isMaximumSizeSet()
- Method in class java.awt.
Component
Returns true if the maximum size has been set to a non-
null
value otherwise returns false.
isMCGlobal()
- Method in class java.net.
Inet4Address
Utility routine to check if the multicast address has global scope.
isMCGlobal()
- Method in class java.net.
Inet6Address
Utility routine to check if the multicast address has global scope.
isMCGlobal()
- Method in class java.net.
InetAddress
Utility routine to check if the multicast address has global scope.
isMCLinkLocal()
- Method in class java.net.
Inet4Address
Utility routine to check if the multicast address has link scope.
isMCLinkLocal()
- Method in class java.net.
Inet6Address
Utility routine to check if the multicast address has link scope.
isMCLinkLocal()
- Method in class java.net.
InetAddress
Utility routine to check if the multicast address has link scope.
isMCNodeLocal()
- Method in class java.net.
Inet4Address
Utility routine to check if the multicast address has node scope.
isMCNodeLocal()
- Method in class java.net.
Inet6Address
Utility routine to check if the multicast address has node scope.
isMCNodeLocal()
- Method in class java.net.
InetAddress
Utility routine to check if the multicast address has node scope.
isMCOrgLocal()
- Method in class java.net.
Inet4Address
Utility routine to check if the multicast address has organization scope.
isMCOrgLocal()
- Method in class java.net.
Inet6Address
Utility routine to check if the multicast address has organization scope.
isMCOrgLocal()
- Method in class java.net.
InetAddress
Utility routine to check if the multicast address has organization scope.
isMCSiteLocal()
- Method in class java.net.
Inet4Address
Utility routine to check if the multicast address has site scope.
isMCSiteLocal()
- Method in class java.net.
Inet6Address
Utility routine to check if the multicast address has site scope.
isMCSiteLocal()
- Method in class java.net.
InetAddress
Utility routine to check if the multicast address has site scope.
isMemberClass()
- Method in class java.lang.
Class
Returns
true
if and only if the underlying class
 is a member class.
isMenuComponent(Component)
- Method in class javax.swing.
JMenu
Returns true if the specified component exists in the
 submenu hierarchy.
isMetaDown()
- Method in class java.awt.event.
InputEvent
Returns whether or not the Meta modifier is down on this event.
isMethodInvocationConvertible(Class<?>, Class<?>)
- Static method in class jdk.dynalink.linker.support.
TypeUtilities
Determines whether one type can be converted to another type using a method invocation conversion, as per JLS 5.3
 "Method Invocation Conversion".
isMiddleMouseButton(MouseEvent)
- Static method in class javax.swing.
SwingUtilities
Returns true if the mouse event specifies the middle mouse button.
isMidnightEndOfDay()
- Method in class java.time.zone.
ZoneOffsetTransitionRule
Is the transition local time midnight at the end of day.
isMimeTypeEqual(DataFlavor)
- Method in class java.awt.datatransfer.
DataFlavor
Compares the
mimeType
of two
DataFlavor
objects.
isMimeTypeEqual(String)
- Method in class java.awt.datatransfer.
DataFlavor
Returns whether the string representation of the MIME type passed in is
 equivalent to the MIME type of this
DataFlavor
.
isMimeTypeSerializedObject()
- Method in class java.awt.datatransfer.
DataFlavor
Does the
DataFlavor
represent a serialized object?
isMinimumSizeDirty
- Variable in class javax.swing.plaf.basic.
BasicComboBoxUI
The flag for recalculating the minimum preferred size.
isMinimumSizeSet()
- Method in class java.awt.
Component
Returns whether or not
setMinimumSize
has been
 invoked with a non-null value.
isMirrored(char)
- Static method in class java.lang.
Character
Determines whether the character is mirrored according to the
 Unicode specification.
isMirrored(int)
- Static method in class java.lang.
Character
Determines whether the specified character (Unicode code point)
 is mirrored according to the Unicode specification.
isMixed()
- Method in class java.text.
Bidi
Return true if the line is not left-to-right or right-to-left.
isMixerSupported(Mixer.Info)
- Method in class javax.sound.sampled.spi.
MixerProvider
Indicates whether the mixer provider supports the mixer represented by
 the specified mixer info object.
isMN()
- Method in interface org.ietf.jgss.
GSSName
Tests if this name object represents a Mechanism Name (MN).
isModal()
- Method in class java.awt.
Dialog
Indicates whether the dialog is modal.
isModalExclusionTypeSupported(Dialog.ModalExclusionType)
- Method in class java.awt.
Toolkit
Returns whether the given modal exclusion type is supported by this
 toolkit.
isModalityTypeSupported(Dialog.ModalityType)
- Method in class java.awt.
Toolkit
Returns whether the given modality type is supported by this toolkit.
isModifiableClass(Class<?>)
- Method in interface java.lang.instrument.
Instrumentation
Tests whether a class is modifiable by
retransformation
or
redefinition
.
isModifiableModule(Module)
- Method in interface java.lang.instrument.
Instrumentation
Tests whether a module can be modified with
redefineModule
.
isModuleOrientedLocation()
- Method in interface javax.tools.
JavaFileManager.Location
Indicates if this location is module-oriented location, and therefore
 expected to contain classes in a
module/package/class
hierarchy, as compared to a package-oriented location, which
 is expected to contain classes in a
package/class
hierarchy.
isModuleOrientedLocation()
- Method in enum class javax.tools.
StandardLocation
Indicates if this location is module-oriented location, and therefore
 expected to contain classes in a
module/package/class
hierarchy, as compared to a package-oriented location, which
 is expected to contain classes in a
package/class
hierarchy.
isMouseOver()
- Method in class javax.swing.plaf.basic.
BasicSplitPaneDivider
Returns whether or not the mouse is currently over the divider
isMultiBufferAvailable()
- Method in class java.awt.
BufferCapabilities
Returns whether or not
 page flipping can be performed using more than two buffers (one or more
 intermediate buffers as well as the front and back buffer).
isMulticastAddress()
- Method in class java.net.
Inet4Address
Utility routine to check if the InetAddress is an
 IP multicast address.
isMulticastAddress()
- Method in class java.net.
Inet6Address
Utility routine to check if the InetAddress is an IP multicast
 address. 11111111 at the start of the address identifies the
 address as being a multicast address.
isMulticastAddress()
- Method in class java.net.
InetAddress
Utility routine to check if the InetAddress is an
 IP multicast address.
isMultipleMode()
- Method in class java.awt.
FileDialog
Returns whether the file dialog allows the multiple file selection.
isMultipleMode()
- Method in class java.awt.
List
Determines whether this list allows multiple selections.
isMultiRelease()
- Method in class java.util.jar.
JarFile
Indicates whether or not this jar file is a multi-release jar file.
isMultiSelectEvent(MouseEvent)
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Returning
true
signifies a mouse event on the node should select
 from the anchor point.
isMultiSelectionEnabled()
- Method in class javax.swing.
JFileChooser
Returns true if multiple files can be selected.
isMXBean()
- Method in class javax.management.
MBeanServerInvocationHandler
If true, the proxy is for an MXBean, and appropriate mappings
 are applied to method parameters and return values.
isMXBeanInterface(Class<?>)
- Static method in class javax.management.
JMX
Test whether an interface is an MXBean interface.
isName(CharSequence)
- Static method in enum class javax.lang.model.
SourceVersion
Returns whether or not
name
is a syntactically valid
 qualified name in the latest source version.
isName(CharSequence, SourceVersion)
- Static method in enum class javax.lang.model.
SourceVersion
Returns whether or not
name
is a syntactically valid
 qualified name in the given source version.
isNameCompatible(String, JavaFileObject.Kind)
- Method in class javax.tools.
ForwardingJavaFileObject
isNameCompatible(String, JavaFileObject.Kind)
- Method in interface javax.tools.
JavaFileObject
Checks if this file object is compatible with the specified
 simple name and kind.
isNameCompatible(String, JavaFileObject.Kind)
- Method in class javax.tools.
SimpleJavaFileObject
This implementation compares the path of its URI to the given
 simple name.
isNamed()
- Method in class java.lang.
Module
Returns
true
if this module is a named module.
isNamePresent()
- Method in class java.lang.reflect.
Parameter
Returns true if the parameter has a name according to the class
 file; returns false otherwise.
isNamespace()
- Method in interface javax.xml.stream.events.
XMLEvent
A utility function to check if this event is a Namespace.
isNamespaceAware()
- Method in class javax.xml.parsers.
DocumentBuilder
Indicates whether or not this parser is configured to
 understand namespaces.
isNamespaceAware()
- Method in class javax.xml.parsers.
DocumentBuilderFactory
Indicates whether or not the factory is configured to produce
 parsers which are namespace aware.
isNamespaceAware()
- Method in class javax.xml.parsers.
SAXParser
Indicates whether or not this parser is configured to
 understand namespaces.
isNamespaceAware()
- Method in class javax.xml.parsers.
SAXParserFactory
Indicates whether or not the factory is configured to produce
 parsers which are namespace aware.
isNamespaceDeclUris()
- Method in class org.xml.sax.helpers.
NamespaceSupport
Returns true if namespace declaration attributes are placed into
 a namespace.
isNaN()
- Method in class java.lang.
Double
Returns
true
if this
Double
value is
 a Not-a-Number (NaN),
false
otherwise.
isNaN()
- Method in class java.lang.
Float
Returns
true
if this
Float
value is a
 Not-a-Number (NaN),
false
otherwise.
isNaN(double)
- Static method in class java.lang.
Double
Returns
true
if the specified number is a
 Not-a-Number (NaN) value,
false
otherwise.
isNaN(float)
- Static method in class java.lang.
Float
Returns
true
if the specified number is a
 Not-a-Number (NaN) value,
false
otherwise.
isNative()
- Method in interface com.sun.jdi.
Method
Determine if this method is native.
isNative()
- Method in interface java.lang.foreign.
MemorySegment
PREVIEW
Returns
true
if this segment is a native segment.
isNative(int)
- Static method in class java.lang.reflect.
Modifier
Return
true
if the integer argument includes the
native
modifier,
false
otherwise.
isNativeAccessEnabled()
- Method in class java.lang.
Module
Returns
true
if this module can access
restricted
methods.
isNativeLookAndFeel()
- Method in class javax.swing.
LookAndFeel
If the underlying platform has a "native" look and feel, and
 this is an implementation of it, return
true
.
isNativeLookAndFeel()
- Method in class javax.swing.plaf.metal.
MetalLookAndFeel
Returns
false
;
MetalLookAndFeel
is not a native
 look and feel.
isNativeLookAndFeel()
- Method in class javax.swing.plaf.multi.
MultiLookAndFeel
Returns
false
;
 this look and feel is not native to any platform.
isNativeLookAndFeel()
- Method in class javax.swing.plaf.synth.
SynthLookAndFeel
Returns false, SynthLookAndFeel is not a native look and feel.
isNativeMethod()
- Method in class java.lang.
StackTraceElement
Returns true if the method containing the execution point
 represented by this stack trace element is a native method.
isNativeMethod()
- Method in interface java.lang.
StackWalker.StackFrame
Returns
true
if the method containing the execution point
 represented by this stack frame is a native method.
isNativeMethodPrefixSupported()
- Method in interface java.lang.instrument.
Instrumentation
Returns whether the current JVM configuration supports
setting a native method prefix
.
isNavigationKey(int)
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI
Returns whether or not the supplied keyCode maps to a key that is used for
 navigation.
isNegative()
- Method in interface java.time.chrono.
ChronoPeriod
Checks if any of the supported units of this period are negative.
isNegative()
- Method in class java.time.
Duration
Checks if this duration is negative, excluding zero.
isNegative()
- Method in class java.time.
Period
Checks if any of the three units of this period are negative.
isNested()
- Method in enum class javax.lang.model.element.
NestingKind
Does this constant correspond to a nested type element?
isNestmateOf(Class<?>)
- Method in class java.lang.
Class
Determines if the given
Class
is a nestmate of the
 class or interface represented by this
Class
object.
isNodeAncestor(TreeNode)
- Method in class javax.swing.tree.
DefaultMutableTreeNode
Returns true if
anotherNode
is an ancestor of this node
 -- if it is this node, this node's parent, or an ancestor of this
 node's parent.
isNodeChild(TreeNode)
- Method in class javax.swing.tree.
DefaultMutableTreeNode
Returns true if
aNode
is a child of this node.
isNodeDescendant(DefaultMutableTreeNode)
- Method in class javax.swing.tree.
DefaultMutableTreeNode
Returns true if
anotherNode
is a descendant of this node
 -- if it is this node, one of this node's children, or a descendant of
 one of this node's children.
isNodeRelated(DefaultMutableTreeNode)
- Method in class javax.swing.tree.
DefaultMutableTreeNode
Returns true if and only if
aNode
is in the same tree
 as this node.
isNodeSibling(TreeNode)
- Method in class javax.swing.tree.
DefaultMutableTreeNode
Returns true if
anotherNode
is a sibling of (has the
 same parent as) this node.
isNormalized(CharSequence, Normalizer.Form)
- Static method in class java.text.
Normalizer
Determines if the given sequence of char values is normalized.
isNotificationEnabled(Notification)
- Method in class javax.management.
AttributeChangeNotificationFilter
Invoked before sending the specified notification to the listener.
isNotificationEnabled(Notification)
- Method in interface javax.management.
NotificationFilter
Invoked before sending the specified notification to the listener.
isNotificationEnabled(Notification)
- Method in class javax.management.
NotificationFilterSupport
Invoked before sending the specified notification to the listener.
isNotificationEnabled(Notification)
- Method in class javax.management.relation.
MBeanServerNotificationFilter
Invoked before sending the specified notification to the listener.
isNotifyOnEDT()
- Method in class javax.swing.event.
SwingPropertyChangeSupport
Returns
notifyOnEDT
property.
isNotNull()
- Static method in class jdk.dynalink.linker.support.
Guards
Returns a guard that tests whether the first argument is not null.
isNull()
- Static method in class jdk.dynalink.linker.support.
Guards
Returns a guard that tests whether the first argument is null.
isNull(Object)
- Static method in class java.util.
Objects
Returns
true
if the provided reference is
null
otherwise
 returns
false
.
isNullable(int)
- Method in interface java.sql.
ParameterMetaData
Retrieves whether null values are allowed in the designated parameter.
isNullable(int)
- Method in interface java.sql.
ResultSetMetaData
Indicates the nullability of values in the designated column.
isNullable(int)
- Method in class javax.sql.rowset.
RowSetMetaDataImpl
Retrieves a constant indicating whether it is possible
 to store a
NULL
value in the designated column.
ISO
- Static variable in class java.time.temporal.
WeekFields
The ISO-8601 definition, where a week starts on Monday and the first week
 has a minimum of 4 days.
ISO_2A0
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN and JIS 2A0, 1189 x 1682 mm.
ISO_4A0
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN and JIS 4A0, 1682 x 2378 mm.
ISO_8859_1
- Static variable in class java.nio.charset.
StandardCharsets
ISO Latin Alphabet No. 1, also known as ISO-LATIN-1.
ISO_A0
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN and JIS A0, 841 x 1189 mm.
ISO_A0
- Static variable in class javax.print.attribute.standard.
MediaSizeName
A0 size.
ISO_A1
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN and JIS A1, 594 x 841 mm.
ISO_A1
- Static variable in class javax.print.attribute.standard.
MediaSizeName
A1 size.
ISO_A10
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN and JIS A10, 26 x 37 mm.
ISO_A10
- Static variable in class javax.print.attribute.standard.
MediaSizeName
A10 size.
ISO_A2
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN and JIS A2, 420 x 594 mm.
ISO_A2
- Static variable in class javax.print.attribute.standard.
MediaSizeName
A2 size.
ISO_A3
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN and JIS A3, 297 x 420 mm.
ISO_A3
- Static variable in class javax.print.attribute.standard.
MediaSizeName
A3 size.
ISO_A4
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN and JIS A4, 210 x 297 mm.
ISO_A4
- Static variable in class javax.print.attribute.standard.
MediaSizeName
A4 size.
ISO_A4_TRANSPARENT
- Static variable in class javax.print.attribute.standard.
MediaName
A4 transparency.
ISO_A4_WHITE
- Static variable in class javax.print.attribute.standard.
MediaName
white A4 paper.
ISO_A5
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN and JIS A5, 148 x 210 mm.
ISO_A5
- Static variable in class javax.print.attribute.standard.
MediaSizeName
A5 size.
ISO_A6
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN and JIS A6, 105 x 148 mm.
ISO_A6
- Static variable in class javax.print.attribute.standard.
MediaSizeName
A6 size.
ISO_A7
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN and JIS A7, 74 x 105 mm.
ISO_A7
- Static variable in class javax.print.attribute.standard.
MediaSizeName
A7 size.
ISO_A8
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN and JIS A8, 52 x 74 mm.
ISO_A8
- Static variable in class javax.print.attribute.standard.
MediaSizeName
A8 size.
ISO_A9
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN and JIS A9, 37 x 52 mm.
ISO_A9
- Static variable in class javax.print.attribute.standard.
MediaSizeName
A9 size.
ISO_B0
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN B0, 1000 x 1414 mm.
ISO_B0
- Static variable in class javax.print.attribute.standard.
MediaSizeName
ISO B0 size.
ISO_B1
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN B1, 707 x 1000 mm.
ISO_B1
- Static variable in class javax.print.attribute.standard.
MediaSizeName
ISO B1 size.
ISO_B10
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN B10, 31 x 44 mm.
ISO_B10
- Static variable in class javax.print.attribute.standard.
MediaSizeName
ISO B10 size.
ISO_B2
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN B2, 500 x 707 mm.
ISO_B2
- Static variable in class javax.print.attribute.standard.
MediaSizeName
ISO B2 size.
ISO_B3
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN B3, 353 x 500 mm.
ISO_B3
- Static variable in class javax.print.attribute.standard.
MediaSizeName
ISO B3 size.
ISO_B4
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN B4, 250 x 353 mm.
ISO_B4
- Static variable in class javax.print.attribute.standard.
MediaSizeName
ISO B4 size.
ISO_B4_ENVELOPE
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ISO_B4.
ISO_B5
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN B5, 176 x 250 mm.
ISO_B5
- Static variable in class javax.print.attribute.standard.
MediaSizeName
ISO B5 size.
ISO_B5_ENVELOPE
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ISO_B5.
ISO_B6
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN B6, 125 x 176 mm.
ISO_B6
- Static variable in class javax.print.attribute.standard.
MediaSizeName
ISO B6 size.
ISO_B7
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN B7, 88 x 125 mm.
ISO_B7
- Static variable in class javax.print.attribute.standard.
MediaSizeName
ISO B7 size.
ISO_B8
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN B8, 62 x 88 mm.
ISO_B8
- Static variable in class javax.print.attribute.standard.
MediaSizeName
ISO B8 size.
ISO_B9
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN B9, 44 x 62 mm.
ISO_B9
- Static variable in class javax.print.attribute.standard.
MediaSizeName
ISO B9 size.
ISO_C0
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN C0, 917 x 1297 mm.
ISO_C0
- Static variable in class javax.print.attribute.standard.
MediaSizeName
ISO C0 size.
ISO_C0_ENVELOPE
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ISO_C0.
ISO_C1
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN C1, 648 x 917 mm.
ISO_C1
- Static variable in class javax.print.attribute.standard.
MediaSizeName
ISO C1 size.
ISO_C1_ENVELOPE
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ISO_C1.
ISO_C10
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN C10, 28 x 40 mm.
ISO_C10_ENVELOPE
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ISO_C10.
ISO_C2
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN C2, 458 x 648 mm.
ISO_C2
- Static variable in class javax.print.attribute.standard.
MediaSizeName
ISO C2 size.
ISO_C2_ENVELOPE
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ISO_C2.
ISO_C3
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN C3, 324 x 458 mm.
ISO_C3
- Static variable in class javax.print.attribute.standard.
MediaSizeName
ISO C3 size.
ISO_C3_ENVELOPE
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ISO_C3.
ISO_C4
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN C4, 229 x 324 mm.
ISO_C4
- Static variable in class javax.print.attribute.standard.
MediaSizeName
ISO C4 size.
ISO_C4_ENVELOPE
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ISO_C4.
ISO_C5
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN C5, 162 x 229 mm.
ISO_C5
- Static variable in class javax.print.attribute.standard.
MediaSizeName
ISO C5 size.
ISO_C5_ENVELOPE
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ISO_C5.
ISO_C6
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN C6, 114 x 162 mm.
ISO_C6
- Static variable in class javax.print.attribute.standard.
MediaSizeName
letter size.
ISO_C6_ENVELOPE
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ISO_C6.
ISO_C7
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN C7, 81 x 114 mm.
ISO_C7_ENVELOPE
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ISO_C7.
ISO_C8
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN C8, 57 x 81 mm.
ISO_C8_ENVELOPE
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ISO_C8.
ISO_C9
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO/DIN C9, 40 x 57 mm.
ISO_C9_ENVELOPE
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ISO_C9.
ISO_DATE
- Static variable in class java.time.format.
DateTimeFormatter
The ISO date formatter that formats or parses a date with the
 offset if available, such as '2011-12-03' or '2011-12-03+01:00'.
ISO_DATE_TIME
- Static variable in class java.time.format.
DateTimeFormatter
The ISO-like date-time formatter that formats or parses a date-time with
 the offset and zone if available, such as '2011-12-03T10:15:30',
 '2011-12-03T10:15:30+01:00' or '2011-12-03T10:15:30+01:00[Europe/Paris]'.
ISO_DESIGNATED_LONG
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for ISO Designated Long, 110 x 220 mm.
ISO_DESIGNATED_LONG
- Static variable in class javax.print.attribute.standard.
MediaSizeName
ISO designated long size.
ISO_DESIGNATED_LONG_ENVELOPE
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ISO_DESIGNATED_LONG.
ISO_INSTANT
- Static variable in class java.time.format.
DateTimeFormatter
The ISO instant formatter that formats or parses an instant in UTC,
 such as '2011-12-03T10:15:30Z'.
ISO_LOCAL_DATE
- Static variable in class java.time.format.
DateTimeFormatter
The ISO date formatter that formats or parses a date without an
 offset, such as '2011-12-03'.
ISO_LOCAL_DATE_TIME
- Static variable in class java.time.format.
DateTimeFormatter
The ISO date-time formatter that formats or parses a date-time without
 an offset, such as '2011-12-03T10:15:30'.
ISO_LOCAL_TIME
- Static variable in class java.time.format.
DateTimeFormatter
The ISO time formatter that formats or parses a time without an
 offset, such as '10:15' or '10:15:30'.
ISO_OFFSET_DATE
- Static variable in class java.time.format.
DateTimeFormatter
The ISO date formatter that formats or parses a date with an
 offset, such as '2011-12-03+01:00'.
ISO_OFFSET_DATE_TIME
- Static variable in class java.time.format.
DateTimeFormatter
The ISO date-time formatter that formats or parses a date-time with an
 offset, such as '2011-12-03T10:15:30+01:00'.
ISO_OFFSET_TIME
- Static variable in class java.time.format.
DateTimeFormatter
The ISO time formatter that formats or parses a time with an
 offset, such as '10:15+01:00' or '10:15:30+01:00'.
ISO_ORDINAL_DATE
- Static variable in class java.time.format.
DateTimeFormatter
The ISO date formatter that formats or parses the ordinal date
 without an offset, such as '2012-337'.
ISO_TIME
- Static variable in class java.time.format.
DateTimeFormatter
The ISO time formatter that formats or parses a time, with the
 offset if available, such as '10:15', '10:15:30' or '10:15:30+01:00'.
ISO_WEEK_DATE
- Static variable in class java.time.format.
DateTimeFormatter
The ISO date formatter that formats or parses the week-based date
 without an offset, such as '2012-W48-6'.
ISO_ZONED_DATE_TIME
- Static variable in class java.time.format.
DateTimeFormatter
The ISO-like date-time formatter that formats or parses a date-time with
 offset and zone, such as '2011-12-03T10:15:30+01:00[Europe/Paris]'.
isObjectModelSupported(String)
- Method in class javax.xml.xpath.
XPathFactory
Is specified object model supported by this
XPathFactory
?
isObjectMonitorUsageSupported()
- Method in interface java.lang.management.
ThreadMXBean
Tests if the Java virtual machine supports monitoring of
 object monitor usage.
isObsolete()
- Method in interface com.sun.jdi.
Method
Determine if this method is obsolete.
IsoChronology
- Class in
java.time.chrono
The ISO calendar system.
IsoEra
- Enum Class in
java.time.chrono
An era in the ISO calendar system.
isOfClass(Class<?>, MethodType)
- Static method in class jdk.dynalink.linker.support.
Guards
Creates a guard method handle with arguments of a specified type, but with boolean return value.
IsoFields
- Class in
java.time.temporal
Fields and units specific to the ISO-8601 calendar system,
 including quarter-of-year and week-based-year.
ISO - ISO 4217 - Currency codes
- Search tag in class java.util.Currency
External Specification
isOldToken()
- Method in class org.ietf.jgss.
MessageProp
Tests if this token's validity period has expired, i.e., the token
 is too old to be checked for duplication.
isOneTouchExpandable()
- Method in class javax.swing.
JSplitPane
Gets the
oneTouchExpandable
property.
isOnKeyRelease()
- Method in class java.awt.
AWTKeyStroke
Returns whether this
AWTKeyStroke
represents a key release.
isOpaque()
- Method in class java.awt.
Component
Returns true if this component is completely opaque, returns
 false by default.
isOpaque()
- Method in class java.awt.
Window
Indicates if the window is currently opaque.
isOpaque()
- Method in class java.net.
URI
Tells whether or not this URI is opaque.
isOpaque()
- Method in class javax.swing.
DefaultListCellRenderer
Overridden for performance reasons.
isOpaque()
- Method in class javax.swing.
JComponent
Returns true if this component is completely opaque.
isOpaque()
- Method in class javax.swing.table.
DefaultTableCellRenderer
Overridden for performance reasons.
isOpaque(SynthContext)
- Method in class javax.swing.plaf.nimbus.
NimbusStyle
Returns true if the region is opaque.
isOpaque(SynthContext)
- Method in class javax.swing.plaf.synth.
SynthStyle
Returns true if the region is opaque.
isOpen()
- Method in class com.sun.jdi.connect.spi.
Connection
Tells whether or not this connection is open.
isOpen()
- Method in class java.lang.module.
ModuleDescriptor
Returns
true
if this is an open module.
isOpen()
- Method in interface java.nio.channels.
Channel
Tells whether or not this channel is open.
isOpen()
- Method in class java.nio.channels.
Selector
Tells whether or not this selector is open.
isOpen()
- Method in class java.nio.channels.spi.
AbstractInterruptibleChannel
isOpen()
- Method in class java.nio.channels.spi.
AbstractSelector
isOpen()
- Method in class java.nio.file.
FileSystem
Tells whether or not this file system is open.
isOpen()
- Method in interface javax.lang.model.element.
ModuleElement
Returns
true
if this is an open module and
false
otherwise.
isOpen()
- Method in interface javax.sound.midi.
MidiDevice
Reports whether the device is open.
isOpen()
- Method in interface javax.sound.sampled.
Line
Indicates whether the line is open, meaning that it has reserved system
 resources and is operational, although it might not currently be playing
 or capturing sound.
isOpen(String)
- Method in class java.lang.
Module
Returns
true
if this module has
opened
a package
 unconditionally.
isOpen(String, Module)
- Method in class java.lang.
Module
Returns
true
if this module has
opened
a package to at
 least the given module.
isOptimisticReadStamp(long)
- Static method in class java.util.concurrent.locks.
StampedLock
Tells whether a stamp represents a successful optimistic read.
isOptimizedDrawingEnabled()
- Method in class javax.swing.
JComponent
Returns true if this component tiles its children -- that is, if
 it can guarantee that the children will not overlap.
isOptimizedDrawingEnabled()
- Method in class javax.swing.
JLayer
The
JLayer
overrides the default implementation of
 this method (in
JComponent
) to return
false
.
isOptimizedDrawingEnabled()
- Method in class javax.swing.
JLayeredPane
Returns false if components in the pane can overlap, which makes
 optimized drawing impossible.
isOptimizedDrawingEnabled()
- Method in class javax.swing.
JRootPane
The
glassPane
and
contentPane
have the same bounds, which means
JRootPane
does not tiles its children and this should return false.
isOptimizedDrawingEnabled()
- Method in class javax.swing.
JViewport
The
JViewport
overrides the default implementation of
 this method (in
JComponent
) to return false.
isOrdered()
- Method in interface javax.naming.directory.
Attribute
Determines whether this attribute's values are ordered.
isOrdered()
- Method in class javax.naming.directory.
BasicAttribute
isOther()
- Method in interface java.nio.file.attribute.
BasicFileAttributes
Tells whether the file is something other than a regular file, directory,
 or symbolic link.
isOutboundDone()
- Method in class javax.net.ssl.
SSLEngine
Returns whether
SSLEngine.wrap(ByteBuffer, ByteBuffer)
will
 produce any more outbound data messages.
isOutputClosed()
- Method in interface java.net.http.
WebSocket
Tells whether this WebSocket's output is closed.
isOutputLocation()
- Method in enum class javax.tools.
DocumentationTool.Location
isOutputLocation()
- Method in interface javax.tools.
JavaFileManager.Location
Determines if this is an output location.
isOutputLocation()
- Method in enum class javax.tools.
StandardLocation
isOutputShutdown()
- Method in class java.net.
Socket
Returns whether the write-half of the socket connection is closed.
isOverflow()
- Method in class java.nio.charset.
CoderResult
Tells whether or not this object describes an overflow condition.
isOverlap()
- Method in class java.time.zone.
ZoneOffsetTransition
Does this transition represent an overlap in the local time-line.
isOwnerInterface()
- Method in interface java.lang.constant.
DirectMethodHandleDesc
Indicates if the method is declared by an interface
isOwnReader(ImageReader)
- Method in class javax.imageio.spi.
ImageReaderSpi
Returns
true
if the
ImageReader
object
 passed in is an instance of the
ImageReader
associated with this service provider.
isOwnWriter(ImageWriter)
- Method in class javax.imageio.spi.
ImageWriterSpi
Returns
true
if the
ImageWriter
object
 passed in is an instance of the
ImageWriter
associated with this service provider.
isPackagePrivate()
- Method in interface com.sun.jdi.
Accessible
Determines if this object mirrors a package private item.
isPageFlipping()
- Method in class java.awt.
BufferCapabilities
Returns whether or not the buffer strategy uses page flipping.
isPaintable()
- Method in interface java.beans.
PropertyEditor
Determines whether this property editor is paintable.
isPaintable()
- Method in class java.beans.
PropertyEditorSupport
Determines whether the class will honor the paintValue method.
isPaintingForPrint()
- Method in class javax.swing.
JComponent
Returns
true
if the current painting operation on this
 component is part of a
print
operation.
isPaintingOrigin()
- Method in class javax.swing.
JComponent
Returns
true
if a paint triggered on a child component should cause
 painting to originate from this Component, or one of its ancestors.
isPaintingOrigin()
- Method in class javax.swing.
JLayer
Always returns
true
to cause painting to originate from
JLayer
,
 or one of its ancestors.
isPaintingOrigin()
- Method in class javax.swing.
JViewport
Returns true if scroll mode is a
BACKINGSTORE_SCROLL_MODE
to cause
 painting to originate from
JViewport
, or one of its
 ancestors.
isPaintingTile()
- Method in class javax.swing.
JComponent
Returns true if the component is currently painting a tile.
isPalette
- Variable in class javax.swing.plaf.metal.
MetalInternalFrameTitlePane
The value
isPalette
isParallel()
- Method in interface java.util.stream.
BaseStream
Returns whether this stream, if a terminal operation were to be executed,
 would execute in parallel.
isParameter()
- Method in class javax.swing.text.html.parser.
Entity
Returns
true
if it is a parameter entity.
isParent(File, File)
- Method in class javax.swing.filechooser.
FileSystemView
On Windows, a file can appear in multiple folders, other than its
 parent directory in the filesystem.
isParityAdjusted(byte[], int)
- Static method in class javax.crypto.spec.
DESedeKeySpec
Checks if the given DES-EDE key, starting at
offset
inclusive, is parity-adjusted.
isParityAdjusted(byte[], int)
- Static method in class javax.crypto.spec.
DESKeySpec
Checks if the given DES key material, starting at
offset
inclusive, is parity-adjusted.
isParseBigDecimal()
- Method in class java.text.
CompactNumberFormat
Returns whether the
CompactNumberFormat.parse(String, ParsePosition)
method returns
BigDecimal
.
isParseBigDecimal()
- Method in class java.text.
DecimalFormat
Returns whether the
DecimalFormat.parse(java.lang.String, java.text.ParsePosition)
method returns
BigDecimal
.
isParseIntegerOnly()
- Method in class java.text.
CompactNumberFormat
Returns true if this format parses only an integer from the number
 component of a compact number.
isParseIntegerOnly()
- Method in class java.text.
NumberFormat
Returns true if this format will parse numbers as integers only.
isPartialReturn()
- Method in class javax.swing.text.
Segment
Flag to indicate that partial returns are valid.
isPathEditable(TreePath)
- Method in class javax.swing.
JTree
Returns
isEditable
.
isPathSelected(TreePath)
- Method in class javax.swing.
JTree
Returns true if the item identified by the path is currently selected.
isPathSelected(TreePath)
- Method in class javax.swing.tree.
DefaultTreeSelectionModel
Returns true if the path,
path
,
 is in the current selection.
isPathSelected(TreePath)
- Method in interface javax.swing.tree.
TreeSelectionModel
Returns true if the path,
path
, is in the current
 selection.
isPattern()
- Method in class javax.management.
ObjectName
Checks whether the object name is a pattern.
isPeriodic()
- Method in interface java.util.concurrent.
RunnableScheduledFuture
Returns
true
if this task is periodic.
isPersistent()
- Method in enum class jdk.jshell.
Snippet.Kind
Indicates whether this
Kind
of Snippet is persistent.
isPlain()
- Method in class java.awt.
Font
Indicates whether or not this
Font
object's style is
 PLAIN.
isPointToPoint()
- Method in class java.net.
NetworkInterface
Returns whether a network interface is a point to point interface.
isPolicyMappingInhibited()
- Method in class java.security.cert.
PKIXParameters
Checks if policy mapping is inhibited.
isPolygonal()
- Method in class java.awt.geom.
Area
Tests whether this
Area
consists entirely of
 straight edged polygonal geometry.
isPoolable()
- Method in interface java.sql.
Statement
Returns a  value indicating whether the
Statement
is poolable or not.
isPopupMenuVisible()
- Method in class javax.swing.
JMenu
Returns true if the menu's popup window is visible.
isPopupTrigger()
- Method in class java.awt.event.
MouseEvent
Returns whether or not this mouse event is the popup menu
 trigger event for the platform.
isPopupTrigger(MouseEvent)
- Method in class javax.swing.
JPopupMenu
Returns true if the
MouseEvent
is considered a popup trigger
 by the
JPopupMenu
's currently installed UI.
isPopupTrigger(MouseEvent)
- Method in class javax.swing.plaf.multi.
MultiPopupMenuUI
Invokes the
isPopupTrigger
method on each UI handled by this object.
isPopupTrigger(MouseEvent)
- Method in class javax.swing.plaf.
PopupMenuUI
Returns whether or not the given
MouseEvent
is the popup menu
 trigger event for the platform
isPopupVisible()
- Method in class javax.swing.
JComboBox
Determines the visibility of the popup.
isPopupVisible(JComboBox<?>)
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI
Tells if the popup is visible or not.
isPopupVisible(JComboBox<?>)
- Method in class javax.swing.plaf.
ComboBoxUI
Determine the visibility of the popup
isPopupVisible(JComboBox<?>)
- Method in class javax.swing.plaf.multi.
MultiComboBoxUI
Invokes the
isPopupVisible
method on each UI handled by this object.
isPositive()
- Method in class java.time.
Duration
Checks if this duration is positive, excluding zero.
isPostdated()
- Method in class javax.security.auth.kerberos.
KerberosTicket
Determines is this ticket is post-dated.
isPreferred()
- Method in class java.beans.
FeatureDescriptor
The "preferred" flag is used to identify features that are particularly
 important for presenting to humans.
isPreferredSizeSet()
- Method in class java.awt.
Component
Returns true if the preferred size has been set to a
 non-
null
value otherwise returns false.
isPreformatted()
- Method in class javax.swing.text.html.
HTML.Tag
Returns
true
if this tag is pre-formatted,
 which is true if the tag is either
PRE
or
TEXTAREA
.
isPreformatted()
- Method in class javax.swing.text.html.parser.
TagElement
Returns
true
if this tag is pre-formatted.
isPrehash()
- Method in class java.security.spec.
EdDSAParameterSpec
Get whether the prehash mode is specified.
isPrepared()
- Method in interface com.sun.jdi.
ReferenceType
Determines if this type has been prepared.
isPresent()
- Method in class java.util.
Optional
If a value is present, returns
true
, otherwise
false
.
isPresent()
- Method in class java.util.
OptionalDouble
If a value is present, returns
true
, otherwise
false
.
isPresent()
- Method in class java.util.
OptionalInt
If a value is present, returns
true
, otherwise
false
.
isPresent()
- Method in class java.util.
OptionalLong
If a value is present, returns
true
, otherwise
false
.
isPressed()
- Method in interface javax.swing.
ButtonModel
Indicates if the button is pressed.
isPressed()
- Method in class javax.swing.
DefaultButtonModel
Indicates if the button is pressed.
isPreviewEnabled()
- Method in interface javax.annotation.processing.
ProcessingEnvironment
Returns
true
if
preview features
are enabled
 and
false
otherwise.
isPrimaryGroup()
- Method in class com.sun.security.auth.
UnixNumericGroupPrincipal
Return whether this group identification number (GID) represents
 the primary group to which this user belongs.
isPrimitive()
- Method in class java.io.
ObjectStreamField
Return true if this field has a primitive type.
isPrimitive()
- Method in class java.lang.
Class
Determines if the specified
Class
object represents a
 primitive type.
isPrimitive()
- Method in interface java.lang.constant.
ClassDesc
Returns whether this
ClassDesc
describes a primitive type.
isPrimitive()
- Method in interface java.lang.invoke.
TypeDescriptor.OfField
Does this field descriptor describe a primitive type (including void.)
isPrimitive()
- Method in enum class javax.lang.model.type.
TypeKind
Returns
true
if this kind corresponds to a primitive
 type and
false
otherwise.
isPrimitiveArray()
- Method in class javax.management.openmbean.
ArrayType
Returns
true
if the open data values this open
 type describes are primitive arrays,
false
otherwise.
isPrivate()
- Method in interface com.sun.jdi.
Accessible
Determines if this object mirrors a private item.
isPrivate(int)
- Static method in class java.lang.reflect.
Modifier
Return
true
if the integer argument includes the
private
modifier,
false
otherwise.
isProbablePrime(int)
- Method in class java.math.
BigInteger
Returns
true
if this BigInteger is probably prime,
false
if it's definitely composite.
isProcessingInstruction()
- Method in interface javax.xml.stream.events.
XMLEvent
A utility function to check if this event is a ProcessingInstruction.
isPropagated()
- Method in class java.beans.beancontext.
BeanContextEvent
Reports whether or not this event is
 propagated from some other
BeanContext
.
isPropertyListPattern()
- Method in class javax.management.
ObjectName
Checks whether the object name is a pattern on the key property list.
isPropertyPattern()
- Method in class javax.management.
ObjectName
Checks whether the object name is a pattern on the key properties.
isPropertySupported(String)
- Method in class javax.xml.stream.
XMLInputFactory
Query the set of properties that this factory supports.
isPropertySupported(String)
- Method in class javax.xml.stream.
XMLOutputFactory
Query the set of properties that this factory supports.
isPropertyValuePattern()
- Method in class javax.management.
ObjectName
Checks whether the object name is a pattern on the value part
 of at least one of the key properties.
isPropertyValuePattern(String)
- Method in class javax.management.
ObjectName
Checks whether the value associated with a key in a key
 property is a pattern.
isProtected()
- Method in interface com.sun.jdi.
Accessible
Determines if this object mirrors a protected item.
isProtected(int)
- Static method in class java.lang.reflect.
Modifier
Return
true
if the integer argument includes the
protected
modifier,
false
otherwise.
isProtReady()
- Method in interface org.ietf.jgss.
GSSContext
Determines if the context is ready for per message operations to be
 used over it.
isProxiable()
- Method in class javax.security.auth.kerberos.
KerberosTicket
Determines if this ticket is proxiable.
isProxy()
- Method in class javax.security.auth.kerberos.
KerberosTicket
Determines is this ticket is a proxy-ticket.
isProxyClass(Class<?>)
- Static method in class java.lang.reflect.
Proxy
Returns true if the given class is a proxy class.
isPublic()
- Method in interface com.sun.jdi.
Accessible
Determines if this object mirrors a public item.
isPublic(int)
- Static method in class java.lang.reflect.
Modifier
Return
true
if the integer argument includes the
public
modifier,
false
otherwise.
isQualified()
- Method in class java.lang.module.
ModuleDescriptor.Exports
Returns
true
if this is a qualified export.
isQualified()
- Method in class java.lang.module.
ModuleDescriptor.Opens
Returns
true
if this is a qualified
Opens
.
isQueued(Thread)
- Method in class java.util.concurrent.locks.
AbstractQueuedLongSynchronizer
Returns true if the given thread is currently queued.
isQueued(Thread)
- Method in class java.util.concurrent.locks.
AbstractQueuedSynchronizer
Returns true if the given thread is currently queued.
isQuiescent()
- Method in class java.util.concurrent.
ForkJoinPool
Returns
true
if all worker threads are currently idle.
isRandomAccessEasy(int)
- Method in class javax.imageio.
ImageReader
Returns
true
if the storage format of the given
 image places no inherent impediment on random access to pixels.
isReachable(int)
- Method in class java.net.
InetAddress
Test whether that address is reachable.
isReachable(NetworkInterface, int, int)
- Method in class java.net.
InetAddress
Test whether that address is reachable.
isReadable()
- Method in class java.nio.channels.
SelectionKey
Tests whether this key's channel is ready for reading.
isReadable()
- Method in class javax.management.
MBeanAttributeInfo
Whether the value of the attribute can be read.
isReadable()
- Method in interface javax.management.openmbean.
OpenMBeanAttributeInfo
Returns
true
if the attribute described by this
OpenMBeanAttributeInfo
instance is readable,
false
otherwise.
isReadable()
- Method in class javax.management.relation.
RoleInfo
Returns read access mode for the role (true if it is readable).
isReadable(Path)
- Static method in class java.nio.file.
Files
Tests whether a file is readable.
isReadLocked()
- Method in class java.util.concurrent.locks.
StampedLock
Returns
true
if the lock is currently held non-exclusively.
isReadLockStamp(long)
- Static method in class java.util.concurrent.locks.
StampedLock
Tells whether a stamp represents holding a lock non-exclusively.
isReadOnly()
- Method in interface java.lang.foreign.
MemorySegment
PREVIEW
Returns
true
, if this segment is read-only.
isReadOnly()
- Method in class java.nio.
Buffer
Tells whether or not this buffer is read-only.
isReadOnly()
- Method in interface java.nio.file.attribute.
DosFileAttributes
Returns the value of the read-only attribute.
isReadOnly()
- Method in class java.nio.file.
FileStore
Tells whether this file store is read-only.
isReadOnly()
- Method in class java.nio.file.
FileSystem
Tells whether or not this file system allows only read-only access to
 its file stores.
isReadOnly()
- Method in class java.security.
PermissionCollection
Returns
true
if this
PermissionCollection
object is
 marked as readonly.
isReadOnly()
- Method in interface java.sql.
Connection
Retrieves whether this
Connection
object is in read-only mode.
isReadOnly()
- Method in interface java.sql.
DatabaseMetaData
Retrieves whether this database is in read-only mode.
isReadOnly()
- Method in class javax.imageio.metadata.
IIOMetadata
Returns
true
if this object does not support the
mergeTree
,
setFromTree
, and
reset
methods.
isReadOnly()
- Method in class javax.security.auth.
Subject
Query whether this
Subject
is read-only.
isReadOnly()
- Method in class javax.sql.rowset.
BaseRowSet
Returns a
boolean
indicating whether this
RowSet
object is read-only.
isReadOnly()
- Method in interface javax.sql.
RowSet
Retrieves whether this
RowSet
object is read-only.
isReadOnly(int)
- Method in interface java.sql.
ResultSetMetaData
Indicates whether the designated column is definitely not writable.
isReadOnly(int)
- Method in class javax.sql.rowset.
RowSetMetaDataImpl
Indicates whether the designated column is definitely
 not writable, thus readonly.
isRecord()
- Method in class java.lang.
Class
Returns
true
if and only if this class is a record class.
isRecording()
- Method in interface javax.sound.midi.
Sequencer
Indicates whether the Sequencer is currently recording.
isRectangleContainingRectangle(Rectangle, Rectangle)
- Static method in class javax.swing.
SwingUtilities
Return
true
if
a
contains
b
isRectangular()
- Method in class java.awt.geom.
Area
Tests whether this
Area
is rectangular in shape.
isRedefineClassesSupported()
- Method in interface java.lang.instrument.
Instrumentation
Returns whether or not the current JVM configuration supports redefinition
 of classes.
isRegistered()
- Method in class java.nio.channels.
SelectableChannel
Tells whether or not this channel is currently registered with any
 selectors.
isRegistered()
- Method in class java.nio.channels.spi.
AbstractSelectableChannel
isRegistered()
- Method in class java.nio.charset.
Charset
Tells whether or not this charset is registered in the
IANA Charset
 Registry
.
isRegistered(ObjectName)
- Method in interface javax.management.
MBeanServer
isRegistered(ObjectName)
- Method in interface javax.management.
MBeanServerConnection
Checks whether an MBean, identified by its object name, is
 already registered with the MBean server.
isRegistered(ObjectName, Subject)
- Method in interface javax.management.remote.rmi.
RMIConnection
Handles the method
MBeanServerConnection.isRegistered(ObjectName)
.
isRegistered(ObjectName, Subject)
- Method in class javax.management.remote.rmi.
RMIConnectionImpl_Stub
isRegistered(ObjectName, Subject)
- Method in class javax.management.remote.rmi.
RMIConnectionImpl
isRegisteredAsParallelCapable()
- Method in class java.lang.
ClassLoader
Returns
true
if this class loader is registered as
parallel capable
, otherwise
false
.
isRegularFile()
- Method in interface java.nio.file.attribute.
BasicFileAttributes
Tells whether the file is a regular file with opaque content.
isRegularFile(Path, LinkOption...)
- Static method in class java.nio.file.
Files
Tests whether a file is a regular file with opaque content.
isRelation(ObjectName)
- Method in class javax.management.relation.
RelationService
Returns the relation id associated to the given ObjectName if the
 MBean has been added as a relation in the Relation Service.
isRelation(ObjectName)
- Method in interface javax.management.relation.
RelationServiceMBean
Returns the relation id associated to the given ObjectName if the
 MBean has been added as a relation in the Relation Service.
isRelationMBean(String)
- Method in class javax.management.relation.
RelationService
If the relation is represented by an MBean (created by the user and
 added as a relation in the Relation Service), returns the ObjectName of
 the MBean.
isRelationMBean(String)
- Method in interface javax.management.relation.
RelationServiceMBean
If the relation is represented by an MBean (created by the user and
 added as a relation in the Relation Service), returns the ObjectName of
 the MBean.
isRelative()
- Method in class javax.naming.
NameClassPair
Determines whether the name of this binding is
 relative to the target context (which is named by
 the first parameter of the
list()
method).
isReleasable()
- Method in interface java.util.concurrent.
ForkJoinPool.ManagedBlocker
Returns
true
if blocking is unnecessary.
isRemoved()
- Method in class java.util.prefs.
AbstractPreferences
Returns
true
iff this node (or an ancestor) has been
 removed with the
AbstractPreferences.removeNode()
method.
isRenewable()
- Method in class javax.security.auth.kerberos.
KerberosTicket
Determines is this ticket is renewable.
isRepeats()
- Method in class javax.swing.
Timer
Returns
true
(the default)
 if the
Timer
will send
 an action event
 to its listeners multiple times.
isReplacing
- Variable in class javax.swing.text.
DefaultStyledDocument.AttributeUndoableEdit
true if all the attributes in the element were removed first.
isRepresentationClassByteBuffer()
- Method in class java.awt.datatransfer.
DataFlavor
Returns whether the representation class for this
DataFlavor
is
java.nio.ByteBuffer
or a subclass thereof.
isRepresentationClassCharBuffer()
- Method in class java.awt.datatransfer.
DataFlavor
Returns whether the representation class for this
DataFlavor
is
java.nio.CharBuffer
or a subclass thereof.
isRepresentationClassInputStream()
- Method in class java.awt.datatransfer.
DataFlavor
Does the
DataFlavor
represent a
java.io.InputStream
?
isRepresentationClassReader()
- Method in class java.awt.datatransfer.
DataFlavor
Returns whether the representation class for this
DataFlavor
is
java.io.Reader
or a subclass thereof.
isRepresentationClassRemote()
- Method in class java.awt.datatransfer.
DataFlavor
Returns
true
if the representation class is
Remote
.
isRepresentationClassSerializable()
- Method in class java.awt.datatransfer.
DataFlavor
Returns
true
if the representation class can be serialized.
isRequestFocusEnabled()
- Method in class javax.swing.
JComponent
Returns
true
if this
JComponent
should
 get focus; otherwise returns
false
.
isResizable
- Variable in class javax.swing.table.
TableColumn
If true, the user is allowed to resize the column; the default is true.
isResizable()
- Method in class java.awt.
Dialog
Indicates whether this dialog is resizable by the user.
isResizable()
- Method in class java.awt.
Frame
Indicates whether this frame is resizable by the user.
isResizable()
- Method in class javax.swing.
JInternalFrame
Returns whether the
JInternalFrame
can be resized
 by some user action.
isResolvable()
- Method in class jdk.jshell.
SourceCodeAnalysis.QualifiedNames
Indicates whether the given simple name in the original code refers
 to a resolvable element.
isRetransformClassesSupported()
- Method in interface java.lang.instrument.
Instrumentation
Returns whether or not the current JVM configuration supports retransformation
 of classes.
isRevocationEnabled()
- Method in class java.security.cert.
PKIXParameters
Checks the RevocationEnabled flag.
isRevoked(Certificate)
- Method in class java.security.cert.
CRL
Checks whether the given certificate is on this CRL.
isRightMouseButton(MouseEvent)
- Static method in class javax.swing.
SwingUtilities
Returns true if the mouse event specifies the right mouse button.
isRightToLeft()
- Method in class java.text.
Bidi
Return true if the line is all right-to-left text, and the base direction is right-to-left.
isRoleStatus(int)
- Static method in class javax.management.relation.
RoleStatus
Returns true if given value corresponds to a known role status, false
 otherwise.
isRollover()
- Method in interface javax.swing.
ButtonModel
Indicates that the mouse is over the button.
isRollover()
- Method in class javax.swing.
DefaultButtonModel
Indicates that the mouse is over the button.
isRollover()
- Method in class javax.swing.
JToolBar
Returns the rollover state.
isRolloverBorders()
- Method in class javax.swing.plaf.basic.
BasicToolBarUI
Returns a flag to determine whether rollover button borders
 are enabled.
isRolloverEnabled()
- Method in class javax.swing.
AbstractButton
Gets the
rolloverEnabled
property.
isRoot()
- Method in class javax.swing.tree.
DefaultMutableTreeNode
Returns true if this node is the root of the tree.
isRoot(File)
- Method in class javax.swing.filechooser.
FileSystemView
Determines if the given file is a root in the navigable tree(s).
isRootPaneCheckingEnabled()
- Method in class javax.swing.
JApplet
Deprecated.
Returns whether calls to
add
and
setLayout
are forwarded to the
contentPane
.
isRootPaneCheckingEnabled()
- Method in class javax.swing.
JDialog
Returns whether calls to
add
and
setLayout
are forwarded to the
contentPane
.
isRootPaneCheckingEnabled()
- Method in class javax.swing.
JFrame
Returns whether calls to
add
and
setLayout
are forwarded to the
contentPane
.
isRootPaneCheckingEnabled()
- Method in class javax.swing.
JInternalFrame
Returns whether calls to
add
and
setLayout
are forwarded to the
contentPane
.
isRootPaneCheckingEnabled()
- Method in class javax.swing.
JWindow
Returns whether calls to
add
and
setLayout
are forwarded to the
contentPane
.
isRootVisible()
- Method in class javax.swing.
JTree
Returns true if the root node of the tree is displayed.
isRootVisible()
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Returns whether the root node of the drawn tree component should be displayed.
isRootVisible()
- Method in class javax.swing.tree.
AbstractLayoutCache
Returns true if the root node of the tree is displayed.
isRowSelected(int)
- Method in class javax.swing.
JTable
Returns true if the specified index is in the valid range of rows,
 and the row at that index is selected.
isRowSelected(int)
- Method in class javax.swing.
JTree
Returns true if the node identified by row is selected.
isRowSelected(int)
- Method in class javax.swing.tree.
DefaultTreeSelectionModel
Returns true if the row identified by
row
is selected.
isRowSelected(int)
- Method in interface javax.swing.tree.
TreeSelectionModel
Returns true if the row identified by
row
is selected.
isRunning()
- Method in interface javax.sound.midi.
Sequencer
Indicates whether the Sequencer is currently running.
isRunning()
- Method in interface javax.sound.sampled.
DataLine
Indicates whether the line is running.
isRunning()
- Method in class javax.swing.
Timer
Returns
true
if the
Timer
is running.
isSameFile(Path, Path)
- Static method in class java.nio.file.
Files
Tests if two paths locate the same file.
isSameFile(Path, Path)
- Method in class java.nio.file.spi.
FileSystemProvider
Tests if two paths locate the same file.
isSameFile(FileObject, FileObject)
- Method in class javax.tools.
ForwardingJavaFileManager
isSameFile(FileObject, FileObject)
- Method in interface javax.tools.
JavaFileManager
Compares two file objects and return true if they represent the
 same underlying object.
isSameFile(FileObject, FileObject)
- Method in interface javax.tools.
StandardJavaFileManager
Compares two file objects and return true if they represent the
 same canonical file, zip file entry, or entry in any file
 system based container.
isSameNode(Node)
- Method in class javax.imageio.metadata.
IIOMetadataNode
This DOM Level 3 method is not supported for
IIOMetadataNode
and will throw a
DOMException
.
isSameNode(Node)
- Method in interface org.w3c.dom.
Node
Returns whether this node is the same node as the given one.
isSameRM(XAResource)
- Method in interface javax.transaction.xa.
XAResource
This method is called to determine if the resource manager
 instance represented by the target object is the same as the
 resource manager instance represented by the parameter
xares
.
isSameType(TypeMirror, TypeMirror)
- Method in interface javax.lang.model.util.
Types
Tests whether two
TypeMirror
objects represent the same type.
isSchemaLanguageSupported(String)
- Method in class javax.xml.validation.
SchemaFactory
Is specified schema supported by this
SchemaFactory
?
isSealed()
- Method in class java.lang.
Class
Returns
true
if and only if this
Class
object represents
 a sealed class or interface.
isSealed()
- Method in class java.lang.
Package
Returns true if this package is sealed.
isSealed(URL)
- Method in class java.lang.
Package
Returns true if this package is sealed with respect to the specified
 code source
url
.
isSearchable(int)
- Method in interface java.sql.
ResultSetMetaData
Indicates whether the designated column can be used in a where clause.
isSearchable(int)
- Method in class javax.sql.rowset.
RowSetMetaDataImpl
Indicates whether a value stored in the designated column
 can be used in a
WHERE
clause.
isSeekForwardOnly()
- Method in class javax.imageio.
ImageReader
Returns
true
if the current input source has been
 marked as seek forward only by passing
true
as the
seekForwardOnly
argument to the
setInput
method.
isSelected
- Variable in class javax.swing.
JInternalFrame
The frame is currently selected.
isSelected
- Variable in class javax.swing.plaf.basic.
BasicMenuUI.ChangeHandler
true
if an item of popup menu is selected.
isSelected()
- Method in class java.awt.im.
InputMethodHighlight
Returns whether the text range is selected.
isSelected()
- Method in class javax.swing.
AbstractButton
Returns the state of the button.
isSelected()
- Method in interface javax.swing.
ButtonModel
Indicates if the button has been selected.
isSelected()
- Method in class javax.swing.
DefaultButtonModel
Indicates if the button has been selected.
isSelected()
- Method in class javax.swing.
DefaultSingleSelectionModel
Returns true if the selection model currently has a selected value.
isSelected()
- Method in class javax.swing.
JInternalFrame
Returns whether the
JInternalFrame
is the
 currently "selected" or active frame.
isSelected()
- Method in class javax.swing.
JMenu
Returns true if the menu is currently selected (highlighted).
isSelected()
- Method in class javax.swing.
JMenuBar
Returns true if the menu bar currently has a component selected.
isSelected()
- Method in class javax.swing.
JToggleButton.ToggleButtonModel
Checks if the button is selected.
isSelected()
- Method in interface javax.swing.
SingleSelectionModel
Returns true if the selection model currently has a selected value.
isSelected()
- Method in class javax.swing.text.html.
Option
Fetches the selection state associated with this option.
isSelected(int)
- Method in class java.awt.
List
Deprecated.
As of JDK version 1.1,
 replaced by
isIndexSelected(int)
.
isSelected(Element)
- Method in interface jdk.javadoc.doclet.
DocletEnvironment
Returns true if the element is
selected
.
isSelected(ButtonModel)
- Method in class javax.swing.
ButtonGroup
Returns whether a
ButtonModel
is selected.
isSelectedIndex(int)
- Method in class javax.swing.
DefaultListSelectionModel
Returns true if the specified index is selected.
isSelectedIndex(int)
- Method in class javax.swing.
JList
Returns
true
if the specified index is selected,
 else
false
.
isSelectedIndex(int)
- Method in interface javax.swing.
ListSelectionModel
Returns true if the specified index is selected.
isSelectionEmpty()
- Method in class javax.swing.
DefaultListSelectionModel
Returns true if no indices are selected.
isSelectionEmpty()
- Method in class javax.swing.
JList
Returns
true
if nothing is selected, else
false
.
isSelectionEmpty()
- Method in class javax.swing.
JTree
Returns true if the selection is currently empty.
isSelectionEmpty()
- Method in interface javax.swing.
ListSelectionModel
Returns true if no indices are selected.
isSelectionEmpty()
- Method in class javax.swing.tree.
DefaultTreeSelectionModel
Returns true if the selection is currently empty.
isSelectionEmpty()
- Method in interface javax.swing.tree.
TreeSelectionModel
Returns true if the selection is currently empty.
isSelectionVisible()
- Method in interface javax.swing.text.
Caret
Determines if the selection is currently visible.
isSelectionVisible()
- Method in class javax.swing.text.
DefaultCaret
Checks whether the current selection is visible.
isSelfClosing()
- Method in interface com.sun.source.doctree.
StartElementTree
Returns
true
if this is a self-closing element,
 as indicated by a
"/"
before the closing
">"
.
isSerializing()
- Method in class java.beans.beancontext.
BeanContextSupport
Is this
BeanContext
in the
 process of being serialized?
isServiceClass(Class<?>)
- Method in class java.beans.beancontext.
BeanContextServiceRevokedEvent
Checks this event to determine whether or not
 the service being revoked is of a particular class.
isSet
- Variable in class java.util.
Calendar
The flags which tell if a specified calendar field for the calendar is set.
isSet(int)
- Method in class java.util.
Calendar
Determines if the given calendar field has a value set,
 including cases that the value has been set by internal fields
 calculations triggered by a
get
method call.
isSet(DatatypeConstants.Field)
- Method in class javax.xml.datatype.
Duration
Checks if a field is set.
isShared()
- Method in class java.nio.channels.
FileLock
Tells whether this lock is shared.
isShiftDown()
- Method in class java.awt.event.
InputEvent
Returns whether or not the Shift modifier is down on this event.
isShorterThan(Duration)
- Method in class javax.xml.datatype.
Duration
Checks if this duration object is strictly shorter than
 another
Duration
object.
isShowing()
- Method in class com.sun.java.accessibility.util.
Translator
Determine if the object is showing.
isShowing()
- Method in class java.awt.
Component.AccessibleAWTComponent
Determines if the object is showing.
isShowing()
- Method in class java.awt.
Component
Determines whether this component is showing on screen.
isShowing()
- Method in class java.awt.
List.AccessibleAWTList.AccessibleAWTListChild
Determine if the object is showing.
isShowing()
- Method in class java.awt.
MenuComponent.AccessibleAWTMenuComponent
Determines if the object is showing.
isShowing()
- Method in class java.awt.
Window
Checks if this Window is showing on screen.
isShowing()
- Method in interface javax.accessibility.
AccessibleComponent
Determines if the object is showing.
isShowing()
- Method in class javax.swing.
JList.AccessibleJList.AccessibleJListChild
isShowing()
- Method in class javax.swing.
JTable.AccessibleJTable.AccessibleJTableCell
Determines if the object is showing.
isShowing()
- Method in class javax.swing.
JTree.AccessibleJTree.AccessibleJTreeNode
isShowing()
- Method in class javax.swing.table.
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry
isShutdown()
- Method in class java.nio.channels.
AsynchronousChannelGroup
Tells whether or not this asynchronous channel group is shutdown.
isShutdown()
- Method in interface java.util.concurrent.
ExecutorService
Returns
true
if this executor has been shut down.
isShutdown()
- Method in class java.util.concurrent.
ForkJoinPool
Returns
true
if this pool has been shut down.
isShutdown()
- Method in class java.util.concurrent.
StructuredTaskScope
PREVIEW
Returns true if this task scope is shutdown, otherwise false.
isShutdown()
- Method in class java.util.concurrent.
ThreadPoolExecutor
isSignatureChange()
- Method in class jdk.jshell.
SnippetEvent
Indicates whether the signature has changed.
isSigned(int)
- Method in interface java.sql.
ParameterMetaData
Retrieves whether values for the designated parameter can be signed numbers.
isSigned(int)
- Method in interface java.sql.
ResultSetMetaData
Indicates whether values in the designated column are signed numbers.
isSigned(int)
- Method in class javax.sql.rowset.
RowSetMetaDataImpl
Indicates whether a value stored in the designated column is
 a signed number.
isSignificant()
- Method in class javax.swing.text.
AbstractDocument.DefaultDocumentEvent
DefaultDocument events are significant.
isSignificant()
- Method in class javax.swing.undo.
AbstractUndoableEdit
This default implementation returns true.
isSignificant()
- Method in class javax.swing.undo.
CompoundEdit
Returns true if any of the
UndoableEdit
s
 in
edits
do.
isSignificant()
- Method in interface javax.swing.undo.
UndoableEdit
Returns true if this edit is considered significant.
isSimpleIdentifier(String)
- Method in interface java.sql.
Statement
Retrieves whether
identifier
is a simple SQL identifier.
isSingular()
- Method in class java.awt.geom.
Area
Tests whether this
Area
is comprised of a single
 closed subpath.
isSiteLocalAddress()
- Method in class java.net.
Inet4Address
Utility routine to check if the InetAddress is a site local address.
isSiteLocalAddress()
- Method in class java.net.
Inet6Address
Utility routine to check if the InetAddress is a site local address.
isSiteLocalAddress()
- Method in class java.net.
InetAddress
Utility routine to check if the InetAddress is a site local address.
isSortable(int)
- Method in class javax.swing.
DefaultRowSorter
Returns true if the specified column is sortable; otherwise, false.
isSorted()
- Method in class javax.naming.ldap.
SortResponseControl
Determines if the search results have been successfully sorted.
isSoundbankSupported(Soundbank)
- Method in interface javax.sound.midi.
Synthesizer
Informs the caller whether this synthesizer is capable of loading
 instruments from the specified soundbank.
isSource()
- Method in class javax.sound.sampled.
Port.Info
Indicates whether the port is a source or a target for its mixer.
isSourceEncodingSupported(AudioFormat.Encoding)
- Method in class javax.sound.sampled.spi.
FormatConversionProvider
Indicates whether the format converter supports conversion from the
 specified source format encoding.
isSpace(char)
- Static method in class java.lang.
Character
Deprecated.
Replaced by isWhitespace(char).
isSpaceChar(char)
- Static method in class java.lang.
Character
Determines if the specified character is a Unicode space character.
isSpaceChar(int)
- Static method in class java.lang.
Character
Determines if the specified character (Unicode code point) is a
 Unicode space character.
isSpecified()
- Method in interface javax.xml.stream.events.
Attribute
A flag indicating whether this attribute was actually
 specified in the start-tag of its element, or was defaulted from the schema.
isSpecified(int)
- Method in class javax.xml.validation.
TypeInfoProvider
Returns
false
if the attribute was added by the validator.
isSpecified(int)
- Method in interface org.xml.sax.ext.
Attributes2
Returns true unless the attribute value was provided
 by DTD defaulting.
isSpecified(int)
- Method in class org.xml.sax.ext.
Attributes2Impl
Returns the current value of an attribute's "specified" flag.
isSpecified(String)
- Method in interface org.xml.sax.ext.
Attributes2
Returns true unless the attribute value was provided
 by DTD defaulting.
isSpecified(String)
- Method in class org.xml.sax.ext.
Attributes2Impl
Returns the current value of an attribute's "specified" flag.
isSpecified(String, String)
- Method in interface org.xml.sax.ext.
Attributes2
Returns true unless the attribute value was provided
 by DTD defaulting.
isSpecified(String, String)
- Method in class org.xml.sax.ext.
Attributes2Impl
Returns the current value of an attribute's "specified" flag.
isSplittable()
- Method in class java.util.random.
RandomGeneratorFactory
Return true if random generator can be cloned into a separate object with
 the same properties but positioned further in the state cycle.
isStandalone()
- Method in enum class java.time.format.
TextStyle
Returns true if the Style is a stand-alone style.
isStandalone()
- Method in interface javax.xml.stream.events.
StartDocument
Returns if this XML is standalone
isStandalone()
- Method in class javax.xml.stream.util.
StreamReaderDelegate
isStandalone()
- Method in interface javax.xml.stream.
XMLStreamReader
Get the standalone declaration from the xml declaration
isStandard()
- Method in class java.awt.font.
GlyphMetrics
Returns
true
if this is a standard glyph.
isStandardImageMetadataFormatSupported()
- Method in class javax.imageio.spi.
ImageReaderWriterSpi
Returns
true
if the standard metadata format is
 among the document formats recognized by the
getAsTree
and
setFromTree
methods on
 the image metadata objects produced or consumed by this
 plug-in.
isStandardMetadataFormatSupported()
- Method in class javax.imageio.metadata.
IIOMetadata
Returns
true
if the standard metadata format is
 supported by
getMetadataFormat
,
getAsTree
,
setFromTree
, and
mergeTree
.
isStandardStreamMetadataFormatSupported()
- Method in class javax.imageio.spi.
ImageReaderWriterSpi
Returns
true
if the standard metadata format is
 among the document formats recognized by the
getAsTree
and
setFromTree
methods on
 the stream metadata objects produced or consumed by this
 plug-in.
isStartDocument()
- Method in interface javax.xml.stream.events.
XMLEvent
A utility function to check if this event is a StartDocument.
isStartElement()
- Method in interface javax.xml.stream.events.
XMLEvent
A utility function to check if this event is a StartElement.
isStartElement()
- Method in class javax.xml.stream.util.
StreamReaderDelegate
isStartElement()
- Method in interface javax.xml.stream.
XMLStreamReader
Returns true if the cursor points to a start tag (otherwise false)
isStatic()
- Method in interface com.sun.jdi.
ReferenceType
Determines if this type was declared static.
isStatic()
- Method in interface com.sun.jdi.
TypeComponent
Determines if this TypeComponent is static.
isStatic()
- Method in interface com.sun.source.tree.
BlockTree
Returns true if and only if this is a static initializer block.
isStatic()
- Method in interface com.sun.source.tree.
ImportTree
Returns true if this is a static import declaration.
isStatic()
- Method in interface com.sun.source.tree.
RequiresTree
Returns true if this is a "requires static" directive.
isStatic()
- Method in interface javax.lang.model.element.
ModuleElement.RequiresDirective
Returns whether or not this is a static dependency.
isStatic()
- Method in class jdk.jshell.
ImportSnippet
Indicates whether this snippet represents a static import.
isStatic(int)
- Static method in class java.lang.reflect.
Modifier
Return
true
if the integer argument includes the
static
modifier,
false
otherwise.
isStaticInitializer()
- Method in interface com.sun.jdi.
Method
Determine if this method is a static initializer.
isStatistical()
- Method in class java.util.random.
RandomGeneratorFactory
Return true if random generator is computed using an arithmetic
algorithm
and is statistically deterministic.
isStochastic()
- Method in class java.util.random.
RandomGeneratorFactory
Return true if random generator is computed using external or entropic
 sources as inputs.
isStreamable()
- Method in class java.util.random.
RandomGeneratorFactory
Return true if random generator can be used to create
Streams
of random numbers.
isStrict(int)
- Static method in class java.lang.reflect.
Modifier
Return
true
if the integer argument includes the
strictfp
modifier,
false
otherwise.
isStrikeThrough()
- Method in class javax.swing.text.
GlyphView
Determine if the glyphs should have a strikethrough
 line.
isStrikeThrough()
- Method in class javax.swing.text.
LabelView
Determines if the glyphs should have a strikethrough
 line.
isStrikeThrough(AttributeSet)
- Static method in class javax.swing.text.
StyleConstants
Checks whether the strikethrough attribute is set.
isStringPainted()
- Method in class javax.swing.
JProgressBar
Returns the value of the
stringPainted
property.
isSubregion()
- Method in class javax.swing.plaf.synth.
Region
Returns true if the Region is a subregion of a Component, otherwise
 false.
isSubscribed(Flow.Subscriber<? super T>)
- Method in class java.util.concurrent.
SubmissionPublisher
Returns true if the given Subscriber is currently subscribed.
isSubscript()
- Method in class javax.swing.text.
GlyphView
Determine if the glyphs should be rendered as superscript.
isSubscript()
- Method in class javax.swing.text.
LabelView
Determines if the glyphs should be rendered as superscript.
isSubscript(AttributeSet)
- Static method in class javax.swing.text.
StyleConstants
Checks whether the subscript attribute is set.
isSubsignature(ExecutableType, ExecutableType)
- Method in interface javax.lang.model.util.
Types
Tests whether the signature of one method is a
subsignature
of another.
isSubtype(Class<?>, Class<?>)
- Static method in class jdk.dynalink.linker.support.
TypeUtilities
Determines whether one type is a subtype of another type, as per JLS
 4.10 "Subtyping".
isSubtype(TypeMirror, TypeMirror)
- Method in interface javax.lang.model.util.
Types
Tests whether one type is a subtype of another.
isSuperscript()
- Method in class javax.swing.text.
GlyphView
Determine if the glyphs should be rendered as subscript.
isSuperscript()
- Method in class javax.swing.text.
LabelView
Determines if the glyphs should be rendered as subscript.
isSuperscript(AttributeSet)
- Static method in class javax.swing.text.
StyleConstants
Checks whether the superscript attribute is set.
isSupplementaryCodePoint(int)
- Static method in class java.lang.
Character
Determines whether the specified character (Unicode code point)
 is in the
supplementary character
range.
isSupported()
- Static method in class java.awt.
SystemTray
Returns whether the system tray is supported on the current
 platform.
isSupported(Desktop.Action)
- Method in class java.awt.
Desktop
Tests whether an action is supported on the current platform.
isSupported(Taskbar.Feature)
- Method in class java.awt.
Taskbar
Tests whether a
Feature
is supported on the current platform.
isSupported(String)
- Static method in class java.nio.charset.
Charset
Tells whether the named charset is supported.
isSupported(String, String)
- Method in class javax.imageio.metadata.
IIOMetadataNode
Returns
false
since DOM features are not
 supported.
isSupported(String, String)
- Method in interface org.w3c.dom.
Node
Tests whether the DOM implementation implements a specific feature and
 that feature is supported by this node, as specified in .
isSupported(TemporalField)
- Method in interface java.time.chrono.
ChronoLocalDate
Checks if the specified field is supported.
isSupported(TemporalField)
- Method in interface java.time.chrono.
ChronoLocalDateTime
Checks if the specified field is supported.
isSupported(TemporalField)
- Method in interface java.time.chrono.
ChronoZonedDateTime
Checks if the specified field is supported.
isSupported(TemporalField)
- Method in interface java.time.chrono.
Era
Checks if the specified field is supported.
isSupported(TemporalField)
- Method in class java.time.chrono.
JapaneseDate
Checks if the specified field is supported.
isSupported(TemporalField)
- Method in enum class java.time.
DayOfWeek
Checks if the specified field is supported.
isSupported(TemporalField)
- Method in class java.time.
Instant
Checks if the specified field is supported.
isSupported(TemporalField)
- Method in class java.time.
LocalDate
Checks if the specified field is supported.
isSupported(TemporalField)
- Method in class java.time.
LocalDateTime
Checks if the specified field is supported.
isSupported(TemporalField)
- Method in class java.time.
LocalTime
Checks if the specified field is supported.
isSupported(TemporalField)
- Method in enum class java.time.
Month
Checks if the specified field is supported.
isSupported(TemporalField)
- Method in class java.time.
MonthDay
Checks if the specified field is supported.
isSupported(TemporalField)
- Method in class java.time.
OffsetDateTime
Checks if the specified field is supported.
isSupported(TemporalField)
- Method in class java.time.
OffsetTime
Checks if the specified field is supported.
isSupported(TemporalField)
- Method in interface java.time.temporal.
TemporalAccessor
Checks if the specified field is supported.
isSupported(TemporalField)
- Method in class java.time.
Year
Checks if the specified field is supported.
isSupported(TemporalField)
- Method in class java.time.
YearMonth
Checks if the specified field is supported.
isSupported(TemporalField)
- Method in class java.time.
ZonedDateTime
Checks if the specified field is supported.
isSupported(TemporalField)
- Method in class java.time.
ZoneOffset
Checks if the specified field is supported.
isSupported(TemporalUnit)
- Method in interface java.time.chrono.
ChronoLocalDate
Checks if the specified unit is supported.
isSupported(TemporalUnit)
- Method in interface java.time.chrono.
ChronoLocalDateTime
Checks if the specified unit is supported.
isSupported(TemporalUnit)
- Method in interface java.time.chrono.
ChronoZonedDateTime
Checks if the specified unit is supported.
isSupported(TemporalUnit)
- Method in class java.time.
Instant
Checks if the specified unit is supported.
isSupported(TemporalUnit)
- Method in class java.time.
LocalDate
Checks if the specified unit is supported.
isSupported(TemporalUnit)
- Method in class java.time.
LocalDateTime
Checks if the specified unit is supported.
isSupported(TemporalUnit)
- Method in class java.time.
LocalTime
Checks if the specified unit is supported.
isSupported(TemporalUnit)
- Method in class java.time.
OffsetDateTime
Checks if the specified unit is supported.
isSupported(TemporalUnit)
- Method in class java.time.
OffsetTime
Checks if the specified unit is supported.
isSupported(TemporalUnit)
- Method in interface java.time.temporal.
Temporal
Checks if the specified unit is supported.
isSupported(TemporalUnit)
- Method in class java.time.
Year
Checks if the specified unit is supported.
isSupported(TemporalUnit)
- Method in class java.time.
YearMonth
Checks if the specified unit is supported.
isSupported(TemporalUnit)
- Method in class java.time.
ZonedDateTime
Checks if the specified unit is supported.
isSupportedBy(Temporal)
- Method in interface java.time.temporal.
TemporalUnit
Checks if this unit is supported by the specified temporal object.
isSupportedBy(TemporalAccessor)
- Method in enum class java.time.temporal.
ChronoField
isSupportedBy(TemporalAccessor)
- Method in interface java.time.temporal.
TemporalField
Checks if this field is supported by the temporal object.
isSupportedLocale(Locale)
- Method in class java.util.spi.
LocaleServiceProvider
Returns
true
if the given
locale
is supported by
 this locale service provider.
isSupportedLookAndFeel()
- Method in class javax.swing.
LookAndFeel
Return
true
if the underlying platform supports and or permits
 this look and feel.
isSupportedLookAndFeel()
- Method in class javax.swing.plaf.metal.
MetalLookAndFeel
Returns
true
;
MetalLookAndFeel
can be run on
 any platform.
isSupportedLookAndFeel()
- Method in class javax.swing.plaf.multi.
MultiLookAndFeel
Returns
true
;
 every platform permits this look and feel.
isSupportedLookAndFeel()
- Method in class javax.swing.plaf.synth.
SynthLookAndFeel
Returns true, SynthLookAndFeel is always supported.
isSupportedOption(String)
- Method in class javax.tools.
ForwardingJavaFileManager
isSupportedOption(String)
- Method in interface javax.tools.
OptionChecker
Determines if the given option is supported and if so, the
 number of arguments the option takes.
isSurrogate(char)
- Static method in class java.lang.
Character
Determines if the given
char
value is a Unicode
surrogate code unit
.
isSurrogatePair(char, char)
- Static method in class java.lang.
Character
Determines whether the specified pair of
char
values is a valid
Unicode surrogate pair
.
isSuspended()
- Method in interface com.sun.jdi.
ThreadReference
Determines whether the thread has been suspended by the
 the debugger.
isSuspended()
- Method in class java.lang.management.
ThreadInfo
Tests if the thread associated with this
ThreadInfo
is suspended.
isSymbolicLink()
- Method in interface java.nio.file.attribute.
BasicFileAttributes
Tells whether the file is a symbolic link.
isSymbolicLink(Path)
- Static method in class java.nio.file.
Files
Tests whether a file is a symbolic link.
isSynchronizationSupported(Line[], boolean)
- Method in interface javax.sound.sampled.
Mixer
Reports whether this mixer supports synchronization of the specified set
 of lines.
isSynchronized()
- Method in interface com.sun.jdi.
Method
Determine if this method is synchronized.
isSynchronized(int)
- Static method in class java.lang.reflect.
Modifier
Return
true
if the integer argument includes the
synchronized
modifier,
false
otherwise.
isSynchronizerUsageSupported()
- Method in interface java.lang.management.
ThreadMXBean
Tests if the Java virtual machine supports monitoring of
ownable synchronizer
usage.
isSynthetic()
- Method in interface com.sun.jdi.
TypeComponent
Determines if this TypeComponent is synthetic.
isSynthetic()
- Method in class java.lang.
Class
Returns
true
if and only if this class has the synthetic modifier
 bit set.
isSynthetic()
- Method in class java.lang.reflect.
Constructor
Returns
true
if this executable is a synthetic
 construct; returns
false
otherwise.
isSynthetic()
- Method in class java.lang.reflect.
Executable
Returns
true
if this executable is a synthetic
 construct; returns
false
otherwise.
isSynthetic()
- Method in class java.lang.reflect.
Field
Returns
true
if this field is a synthetic
 field; returns
false
otherwise.
isSynthetic()
- Method in interface java.lang.reflect.
Member
Returns
true
if this member was introduced by
 the compiler; returns
false
otherwise.
isSynthetic()
- Method in class java.lang.reflect.
Method
Returns
true
if this executable is a synthetic
 construct; returns
false
otherwise.
isSynthetic()
- Method in class java.lang.reflect.
Parameter
Returns
true
if this parameter is neither implicitly
 nor explicitly declared in source code; returns
false
otherwise.
isSystem()
- Method in interface java.nio.file.attribute.
DosFileAttributes
Returns the value of the system attribute.
isTargetEncodingSupported(AudioFormat.Encoding)
- Method in class javax.sound.sampled.spi.
FormatConversionProvider
Indicates whether the format converter supports conversion to the
 specified target format encoding.
isTaskbarSupported()
- Static method in class java.awt.
Taskbar
Tests whether this class is supported on the current platform.
isTearOff()
- Method in class java.awt.
Menu
Indicates whether this menu is a tear-off menu.
isTearOff()
- Method in class javax.swing.
JMenu
Returns true if the menu can be torn off.
isTemporary()
- Method in class java.awt.event.
FocusEvent
Identifies the focus change event as temporary or permanent.
isTerminated()
- Method in class java.net.http.
HttpClient
Returns
true
if all operations have completed following
 a shutdown.
isTerminated()
- Method in class java.nio.channels.
AsynchronousChannelGroup
Tells whether or not this group has terminated.
isTerminated()
- Method in interface java.util.concurrent.
ExecutorService
Returns
true
if all tasks have completed following shut down.
isTerminated()
- Method in class java.util.concurrent.
ForkJoinPool
Returns
true
if all tasks have completed following shut down.
isTerminated()
- Method in class java.util.concurrent.
Phaser
Returns
true
if this phaser has been terminated.
isTerminated()
- Method in class java.util.concurrent.
ThreadPoolExecutor
isTerminating()
- Method in class java.util.concurrent.
ForkJoinPool
Returns
true
if the process of termination has
 commenced but not yet completed.
isTerminating()
- Method in class java.util.concurrent.
ThreadPoolExecutor
Returns true if this executor is in the process of terminating
 after
ThreadPoolExecutor.shutdown()
or
ThreadPoolExecutor.shutdownNow()
but has not
 completely terminated.
isText(Element)
- Method in class javax.swing.text.html.
MinimalHTMLWriter
Returns true if the element is a text element.
isThreadAllocatedMemoryEnabled()
- Method in interface com.sun.management.
ThreadMXBean
Tests if thread memory allocation measurement is enabled.
isThreadAllocatedMemorySupported()
- Method in interface com.sun.management.
ThreadMXBean
Tests if the Java virtual machine implementation supports thread memory
 allocation measurement.
isThreadContentionMonitoringEnabled()
- Method in interface java.lang.management.
ThreadMXBean
Tests if thread contention monitoring is enabled.
isThreadContentionMonitoringSupported()
- Method in interface java.lang.management.
ThreadMXBean
Tests if the Java virtual machine supports thread contention monitoring.
isThreadCpuTimeEnabled()
- Method in interface java.lang.management.
ThreadMXBean
Tests if thread CPU time measurement is enabled.
isThreadCpuTimeSupported()
- Method in interface java.lang.management.
ThreadMXBean
Tests if the Java virtual machine implementation supports CPU time
 measurement for any platform thread.
isThumbRollover()
- Method in class javax.swing.plaf.basic.
BasicScrollBarUI
Returns true if the mouse is currently over the thumb.
isTileWritable(int, int)
- Method in class java.awt.image.
BufferedImage
Returns whether or not a tile is currently checked out for writing.
isTileWritable(int, int)
- Method in interface java.awt.image.
WritableRenderedImage
Returns whether a tile is currently checked out for writing.
isTimeBased()
- Method in enum class java.time.temporal.
ChronoField
Checks if this field represents a component of a time.
isTimeBased()
- Method in enum class java.time.temporal.
ChronoUnit
Checks if this unit is a time unit.
isTimeBased()
- Method in interface java.time.temporal.
TemporalField
Checks if this field represents a component of a time.
isTimeBased()
- Method in interface java.time.temporal.
TemporalUnit
Checks if this unit represents a component of a time.
isTimeSet
- Variable in class java.util.
Calendar
True if then the value of
time
is valid.
isTitleCase(char)
- Static method in class java.lang.
Character
Determines if the specified character is a titlecase character.
isTitleCase(int)
- Static method in class java.lang.
Character
Determines if the specified character (Unicode code point) is a titlecase character.
isToDisk()
- Method in class jdk.jfr.
Recording
Returns
true
if this recording uses the disk repository,
false
otherwise.
isToDisk()
- Method in class jdk.management.jfr.
RecordingInfo
Returns
true
if the recording associated with this
RecordingInfo
should be flushed to disk, when memory buffers are
 full,
false
otherwise.
isToggleEvent(MouseEvent)
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Returning
true
indicates the row under the mouse should be toggled
 based on the event.
isToggleSelectionEvent(MouseEvent)
- Method in class javax.swing.plaf.basic.
BasicTreeUI
Returning
true
signifies a mouse event on the node should toggle
 the selection of only the row under mouse.
isTopDown()
- Method in class javax.imageio.plugins.bmp.
BMPImageWriteParam
Returns the value of the
topDown
parameter.
isTopLevelMenu()
- Method in class javax.swing.
JMenu
Returns true if the menu is a 'top-level menu', that is, if it is
 the direct child of a menubar.
isTransferable()
- Method in interface org.ietf.jgss.
GSSContext
Determines if the context is transferable to other processes
 through the use of the
export
method.
isTransformed()
- Method in class java.awt.font.
FontRenderContext
Indicates whether or not this
FontRenderContext
object
 measures text in a transformed render context.
isTransformed()
- Method in class java.awt.
Font
Indicates whether or not this
Font
object has a
 transform that affects its size in addition to the Size
 attribute.
isTransient()
- Method in interface com.sun.jdi.
Field
Determine if this is a transient field.
isTransient(int)
- Static method in class java.lang.reflect.
Modifier
Return
true
if the integer argument includes the
transient
modifier,
false
otherwise.
isTransitive()
- Method in interface com.sun.source.tree.
RequiresTree
Returns true if this is a "requires transitive" directive.
isTransitive()
- Method in interface javax.lang.model.element.
ModuleElement.RequiresDirective
Returns whether or not this is a transitive dependency.
isTranslucencyCapable()
- Method in class java.awt.
GraphicsConfiguration
Returns whether this
GraphicsConfiguration
supports
 the
PERPIXEL_TRANSLUCENT
kind of translucency.
isTraversable(File)
- Method in class javax.swing.filechooser.
FileSystemView
Returns true if the file (directory) can be visited.
isTraversable(File)
- Method in class javax.swing.filechooser.
FileView
Whether the directory is traversable or not.
isTraversable(File)
- Method in class javax.swing.
JFileChooser
Returns true if the file (directory) can be visited.
isTrivial()
- Static method in interface java.lang.foreign.
Linker.Option
PREVIEW
Returns a linker option used to mark a foreign function as
trivial
.
isTrueVolatile()
- Method in class java.awt.
ImageCapabilities
Returns
true
if the
VolatileImage
described by this
ImageCapabilities
can lose
 its surfaces.
isTruncated()
- Method in class jdk.jfr.consumer.
RecordedStackTrace
Returns
true
if the stack trace is truncated due to its size,
false
otherwise.
isTypeParameter()
- Method in interface com.sun.source.doctree.
ParamTree
Returns
true
if this is documenting a type parameter.
isUndecorated()
- Method in class java.awt.
Dialog
Indicates whether this dialog is undecorated.
isUndecorated()
- Method in class java.awt.
Frame
Indicates whether this frame is undecorated.
isUnderflow()
- Method in class java.nio.charset.
CoderResult
Tells whether or not this object describes an underflow condition.
isUnderline()
- Method in class javax.swing.text.
GlyphView
Determine if the glyphs should be underlined.
isUnderline()
- Method in class javax.swing.text.
LabelView
Determines if the glyphs should be underlined.
isUnderline(AttributeSet)
- Static method in class javax.swing.text.
StyleConstants
Checks whether the underline attribute is set.
isUnicast()
- Method in class java.beans.
EventSetDescriptor
Normally event sources are multicast.
isUnicodeIdentifierPart(char)
- Static method in class java.lang.
Character
Determines if the specified character may be part of a Unicode
 identifier as other than the first character.
isUnicodeIdentifierPart(int)
- Static method in class java.lang.
Character
Determines if the specified character (Unicode code point) may be part of a Unicode
 identifier as other than the first character.
isUnicodeIdentifierStart(char)
- Static method in class java.lang.
Character
Determines if the specified character is permissible as the
 first character in a Unicode identifier.
isUnicodeIdentifierStart(int)
- Static method in class java.lang.
Character
Determines if the specified character (Unicode code point) is permissible as the
 first character in a Unicode identifier.
isUnique()
- Static method in class java.rmi.dgc.
VMID
Deprecated.
isUnmappable()
- Method in class java.nio.charset.
CoderResult
Tells whether or not this object describes an unmappable-character
 error.
isUnnamed()
- Method in interface javax.lang.model.element.
ModuleElement
Returns
true
if this is an unnamed module and
false
otherwise.
isUnnamed()
- Method in interface javax.lang.model.element.
PackageElement
Returns
true
if this is an unnamed package and
false
otherwise.
isUnnamed()
- Method in interface javax.lang.model.element.
TypeElement
Returns
true
if this is an unnamed class and
false
otherwise.
isUnnamed()
- Method in interface javax.lang.model.element.
VariableElement
Returns
true
if this is an unnamed variable and
false
otherwise.
isUnnamedClass()
- Method in class java.lang.
Class
Returns
true
if and only if the underlying class
 is an unnamed class.
isUnordered()
- Method in class com.sun.nio.sctp.
MessageInfo
Tells whether or not the message is unordered.
isUnresolved()
- Method in class java.net.
InetSocketAddress
Checks whether the address has been resolved or not.
isUnseqToken()
- Method in class org.ietf.jgss.
MessageProp
Tests if a later token had already been processed.
isUnshared()
- Method in class java.io.
ObjectStreamField
Returns boolean value indicating whether or not the serializable field
 represented by this ObjectStreamField instance is unshared.
isUp()
- Method in class java.net.
NetworkInterface
Returns whether a network interface is up and running.
isUpperCase()
- Method in class java.util.
HexFormat
Returns
true
if the hexadecimal digits are uppercase,
 otherwise
false
.
isUpperCase(char)
- Static method in class java.lang.
Character
Determines if the specified character is an uppercase character.
isUpperCase(int)
- Static method in class java.lang.
Character
Determines if the specified character (Unicode code point) is an uppercase character.
isUpToDate()
- Method in class jdk.jshell.
SourceCodeAnalysis.QualifiedNames
Indicates whether the result is based on up-to-date data.
isUsageThresholdExceeded()
- Method in interface java.lang.management.
MemoryPoolMXBean
Tests if the memory usage of this memory pool
 reaches or exceeds its usage threshold value.
isUsageThresholdSupported()
- Method in interface java.lang.management.
MemoryPoolMXBean
Tests if this memory pool supports usage threshold.
isUserNode()
- Method in class java.util.prefs.
AbstractPreferences
Implements the
isUserNode
method as per the specification in
Preferences.isUserNode()
.
isUserNode()
- Method in class java.util.prefs.
Preferences
Returns
true
if this preference node is in the user
 preference tree,
false
if it's in the system preference tree.
isValid()
- Method in class java.awt.
Component
Determines whether this component is valid.
isValid()
- Method in class java.awt.image.
IndexColorModel
Returns whether or not all of the pixels are valid.
isValid()
- Method in interface java.lang.management.
MemoryManagerMXBean
Tests if this memory manager is valid in the Java virtual
 machine.
isValid()
- Method in interface java.lang.management.
MemoryPoolMXBean
Tests if this memory pool is valid in the Java virtual
 machine.
isValid()
- Method in class java.nio.channels.
FileLock
Tells whether or not this lock is valid.
isValid()
- Method in class java.nio.channels.
MembershipKey
Tells whether or not this membership is valid.
isValid()
- Method in class java.nio.channels.
SelectionKey
Tells whether or not this key is valid.
isValid()
- Method in class java.nio.channels.spi.
AbstractSelectionKey
isValid()
- Method in interface java.nio.file.
WatchKey
Tells whether or not this watch key is valid.
isValid()
- Method in class javax.accessibility.
AccessibleHyperlink
Since the document a link is associated with may have changed, this
 method returns whether or not this Link is still valid (with respect to
 the document it references).
isValid()
- Method in interface javax.management.
Descriptor
Returns true if all of the fields have legal values given their
 names.
isValid()
- Method in class javax.management.
ImmutableDescriptor
Returns true if all of the fields have legal values given their
 names.
isValid()
- Method in class javax.management.modelmbean.
DescriptorSupport
Returns true if all of the fields have legal values given their
 names.
isValid()
- Method in interface javax.net.ssl.
SSLSession
Returns whether this session is valid and available for resuming or
 joining.
isValid()
- Method in class javax.swing.
JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink
Since the document a link is associated with may have
 changed, this method returns whether this Link is valid
 anymore (with respect to the document it references).
isValid()
- Method in class javax.swing.plaf.basic.
BasicSplitPaneDivider.DragController
Returns
true
if the dragging session is valid.
isValid()
- Method in class javax.swing.text.html.
HTMLDocument.Iterator
Indicates if the iterator is currently
 representing an occurrence of a tag.
isValid()
- Method in class javax.xml.datatype.
XMLGregorianCalendar
Validate instance by
getXMLSchemaType()
constraints.
isValid(int)
- Method in interface com.sun.jdi.connect.
Connector.IntegerArgument
Performs basic sanity check of argument.
isValid(int)
- Method in class java.awt.image.
IndexColorModel
Returns whether or not the pixel is valid.
isValid(int)
- Method in interface java.sql.
Connection
Returns true if the connection has not been closed and is still valid.
isValid(String)
- Method in interface com.sun.jdi.connect.
Connector.Argument
Performs basic sanity check of argument.
isValid(String)
- Method in interface com.sun.jdi.connect.
Connector.BooleanArgument
Performs basic sanity check of argument.
isValid(String)
- Method in interface com.sun.jdi.connect.
Connector.IntegerArgument
Performs basic sanity check of argument.
isValid(String)
- Method in interface com.sun.jdi.connect.
Connector.SelectedArgument
Performs basic sanity check of argument.
isValid(String)
- Method in interface com.sun.jdi.connect.
Connector.StringArgument
Performs basic sanity check of argument.
isValidateRoot()
- Method in class java.applet.
Applet
Deprecated.
Indicates if this container is a validate root.
isValidateRoot()
- Method in class java.awt.
Container
Indicates if this container is a
validate root
.
isValidateRoot()
- Method in class java.awt.
Window
Indicates if this container is a validate root.
isValidateRoot()
- Method in class javax.swing.
JComponent
If this method returns true,
revalidate
calls by
 descendants of this component will cause the entire tree
 beginning with this root to be validated.
isValidateRoot()
- Method in class javax.swing.
JRootPane
If a descendant of this
JRootPane
calls
revalidate
, validate from here on down.
isValidateRoot()
- Method in class javax.swing.
JScrollPane
Overridden to return true so that any calls to
revalidate
on any descendants of this
JScrollPane
will cause the
 entire tree beginning with this
JScrollPane
to be
 validated.
isValidateRoot()
- Method in class javax.swing.
JSplitPane
Returns true, so that calls to
revalidate
on any descendant of this
JSplitPane
will cause a request to be queued that
 will validate the
JSplitPane
and all its descendants.
isValidateRoot()
- Method in class javax.swing.
JTextField
Calls to
revalidate
that come from within the
 textfield itself will
 be handled by validating the textfield, unless the textfield
 is contained within a
JViewport
,
 in which case this returns false.
isValidating()
- Method in class javax.xml.parsers.
DocumentBuilder
Indicates whether or not this parser is configured to
 validate XML documents.
isValidating()
- Method in class javax.xml.parsers.
DocumentBuilderFactory
Indicates whether or not the factory is configured to produce
 parsers which validate the XML content during parse.
isValidating()
- Method in class javax.xml.parsers.
SAXParser
Indicates whether or not this parser is configured to
 validate XML documents.
isValidating()
- Method in class javax.xml.parsers.
SAXParserFactory
Indicates whether or not the factory is configured to produce
 parsers which validate the XML content during parse.
isValidCodePoint(int)
- Static method in class java.lang.
Character
Determines whether the specified code point is a valid
Unicode code point value
.
isValidDay(int)
- Method in class java.time.
YearMonth
Checks if the day-of-month is valid for this year-month.
isValidIntValue(long)
- Method in class java.time.temporal.
ValueRange
Checks if the value is within the valid range and that all values
 in the range fit in an
int
.
isValidMonthDay(MonthDay)
- Method in class java.time.
Year
Checks if the month-day is valid for this year.
isValidOffset(LocalDateTime, ZoneOffset)
- Method in class java.time.zone.
ZoneRules
Checks if the offset date-time is valid for these rules.
isValidOffset(ZoneOffset)
- Method in class java.time.zone.
ZoneOffsetTransition
Checks if the specified offset is valid during this transition.
isValidValue(long)
- Method in class java.time.temporal.
ValueRange
Checks if the value is within the valid range.
isValidYear(int)
- Method in class java.time.
MonthDay
Checks if the year is valid for this month-day.
isValue(Object)
- Method in class javax.management.openmbean.
ArrayType
Tests whether
obj
is a value for this
ArrayType
instance.
isValue(Object)
- Method in class javax.management.openmbean.
CompositeType
Tests whether
obj
is a value which could be
 described by this
CompositeType
instance.
isValue(Object)
- Method in class javax.management.openmbean.
OpenMBeanAttributeInfoSupport
Tests whether
obj
is a valid value for the attribute
 described by this
OpenMBeanAttributeInfoSupport
instance.
isValue(Object)
- Method in interface javax.management.openmbean.
OpenMBeanParameterInfo
Tests whether
obj
is a valid value for the parameter
 described by this
OpenMBeanParameterInfo
instance.
isValue(Object)
- Method in class javax.management.openmbean.
OpenMBeanParameterInfoSupport
Tests whether
obj
is a valid value for the parameter
 described by this
OpenMBeanParameterInfo
instance.
isValue(Object)
- Method in class javax.management.openmbean.
OpenType
Tests whether
obj
is a value for this open type.
isValue(Object)
- Method in class javax.management.openmbean.
SimpleType
Tests whether
obj
is a value for this
SimpleType
instance.
isValue(Object)
- Method in class javax.management.openmbean.
TabularType
Tests whether
obj
is a value which could be
 described by this
TabularType
instance.
isVarArgs()
- Method in interface com.sun.jdi.
Method
Determine if this method accepts a variable number of arguments.
isVarArgs()
- Method in interface java.lang.invoke.
MethodHandleInfo
Determines if the underlying member was a variable arity method or constructor.
isVarArgs()
- Method in class java.lang.reflect.
Constructor
Returns
true
if this executable was declared to take a
 variable number of arguments; returns
false
otherwise.
isVarArgs()
- Method in class java.lang.reflect.
Executable
Returns
true
if this executable was declared to take a
 variable number of arguments; returns
false
otherwise.
isVarArgs()
- Method in class java.lang.reflect.
Method
Returns
true
if this executable was declared to take a
 variable number of arguments; returns
false
otherwise.
isVarArgs()
- Method in class java.lang.reflect.
Parameter
Returns
true
if this parameter represents a variable
 argument list; returns
false
otherwise.
isVarArgs()
- Method in interface javax.lang.model.element.
ExecutableElement
Returns
true
if this method or constructor accepts a variable
 number of arguments and returns
false
otherwise.
isVarargsCollector()
- Method in class java.lang.invoke.
MethodHandle
Determines if this method handle
 supports
variable arity
calls.
isVariable()
- Method in enum class javax.lang.model.element.
ElementKind
Returns
true
if this is a kind of variable: including
ENUM_CONSTANT
,
FIELD
,
PARAMETER
,
LOCAL_VARIABLE
,
EXCEPTION_PARAMETER
,
RESOURCE_VARIABLE
, and
BINDING_VARIABLE
.
isVerbose()
- Method in interface java.lang.management.
ClassLoadingMXBean
Tests if the verbose output for the class loading system is enabled.
isVerbose()
- Method in interface java.lang.management.
MemoryMXBean
Tests if verbose output for the memory system is enabled.
isVerified()
- Method in interface com.sun.jdi.
ReferenceType
Determines if this type has been verified.
isVertical()
- Method in class java.awt.font.
TextLayout
Returns
true
if this
TextLayout
is vertical.
isViewSizeSet
- Variable in class javax.swing.
JViewport
True when the viewport dimensions have been determined.
isVirtual()
- Method in interface com.sun.jdi.
ThreadReference
Returns
true
if the thread is a
virtual thread
.
isVirtual()
- Method in class java.lang.
Thread
Returns
true
if this thread is a virtual thread.
isVirtual()
- Method in class java.net.
NetworkInterface
Returns whether this interface is a virtual interface (also called
 subinterface).
isVirtual()
- Method in class jdk.jfr.consumer.
RecordedThread
Returns
true
if this is a virtual Thread,
false
otherwise.
isVisible()
- Method in class com.sun.java.accessibility.util.
Translator
Determine if the object is visible.
isVisible()
- Method in class java.awt.
Component.AccessibleAWTComponent
Determines if the object is visible.
isVisible()
- Method in class java.awt.
Component
Determines whether this component should be visible when its
 parent is visible.
isVisible()
- Method in class java.awt.
List.AccessibleAWTList.AccessibleAWTListChild
Determine if the object is visible.
isVisible()
- Method in class java.awt.
MenuComponent.AccessibleAWTMenuComponent
Determines if the object is visible.
isVisible()
- Method in class java.awt.
SplashScreen
Determines whether the splash screen is visible.
isVisible()
- Method in interface javax.accessibility.
AccessibleComponent
Determines if the object is visible.
isVisible()
- Method in class javax.swing.
JList.AccessibleJList.AccessibleJListChild
isVisible()
- Method in class javax.swing.
JPopupMenu
Returns true if the popup menu is visible (currently
 being displayed).
isVisible()
- Method in class javax.swing.
JTable.AccessibleJTable.AccessibleJTableCell
Determines if this object is visible.
isVisible()
- Method in class javax.swing.
JTree.AccessibleJTree.AccessibleJTreeNode
isVisible()
- Method in interface javax.swing.plaf.basic.
ComboPopup
Returns true if the popup is visible (currently being displayed).
isVisible()
- Method in class javax.swing.table.
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry
isVisible()
- Method in interface javax.swing.text.
Caret
Determines if the caret is currently visible.
isVisible()
- Method in class javax.swing.text.
DefaultCaret
Indicates whether or not the caret is currently visible.
isVisible()
- Method in class javax.swing.text.html.
ParagraphView
Indicates whether or not this view should be
 displayed.
isVisible()
- Method in class javax.swing.text.
View
Returns a boolean that indicates whether
  the view is visible or not.
isVisible(StackFrame)
- Method in interface com.sun.jdi.
LocalVariable
Determines whether this variable can be accessed from the given
StackFrame
.
isVisible(TreePath)
- Method in class javax.swing.
JTree
Returns true if the value identified by path is currently viewable,
 which means it is either the root or all of its parents are expanded.
isVolatile()
- Method in interface com.sun.jdi.
Field
Determine if this is a volatile field.
isVolatile(int)
- Static method in class java.lang.reflect.
Modifier
Return
true
if the integer argument includes the
volatile
modifier,
false
otherwise.
isWeak(byte[], int)
- Static method in class javax.crypto.spec.
DESKeySpec
Checks if the given DES key material is weak or semi-weak.
isWeekDateSupported()
- Method in class java.util.
Calendar
Returns whether this
Calendar
supports week dates.
isWeekDateSupported()
- Method in class java.util.
GregorianCalendar
Returns
true
indicating this
GregorianCalendar
supports week dates.
isWheelScrollingEnabled()
- Method in class java.awt.
ScrollPane
Indicates whether or not scrolling will take place in response to
 the mouse wheel.
isWheelScrollingEnabled()
- Method in class javax.swing.
JScrollPane
Indicates whether or not scrolling will take place in response to the
 mouse wheel.
isWhitespace()
- Method in class java.awt.font.
GlyphMetrics
Returns
true
if this is a whitespace glyph.
isWhitespace(char)
- Static method in class java.lang.
Character
Determines if the specified character is white space according to Java.
isWhitespace(int)
- Static method in class java.lang.
Character
Determines if the specified character (Unicode code point) is
 white space according to Java.
isWhiteSpace()
- Method in interface javax.xml.stream.events.
Characters
Returns true if this set of Characters
 is all whitespace.
isWhiteSpace()
- Method in class javax.xml.stream.util.
StreamReaderDelegate
isWhiteSpace()
- Method in interface javax.xml.stream.
XMLStreamReader
Returns true if the cursor points to a character data event
 that consists of all whitespace
isWindowTranslucencySupported(GraphicsDevice.WindowTranslucency)
- Method in class java.awt.
GraphicsDevice
Returns whether the given level of translucency is supported by
 this graphics device.
isWrapperFor(Class<?>)
- Method in interface java.sql.
Wrapper
Returns true if this either implements the interface argument or is directly or indirectly a wrapper
 for an object that does.
isWrapperFor(Class<?>)
- Method in class javax.sql.rowset.
RowSetMetaDataImpl
Returns true if this either implements the interface argument or is directly or indirectly a wrapper
 for an object that does.
isWrapperInstance(Object)
- Static method in class java.lang.invoke.
MethodHandleProxies
Determines if the given object was produced by a call to
asInterfaceInstance
.
isWrapperType(Class<?>)
- Static method in class jdk.dynalink.linker.support.
TypeUtilities
Returns true if the passed type is a wrapper for a primitive type.
isWritable()
- Method in class java.nio.channels.
SelectionKey
Tests whether this key's channel is ready for writing.
isWritable()
- Method in class javax.management.
MBeanAttributeInfo
Whether new values can be written to the attribute.
isWritable()
- Method in interface javax.management.openmbean.
OpenMBeanAttributeInfo
Returns
true
if the attribute described by this
OpenMBeanAttributeInfo
instance is writable,
false
otherwise.
isWritable()
- Method in class javax.management.relation.
RoleInfo
Returns write access mode for the role (true if it is writable).
isWritable(int)
- Method in interface java.sql.
ResultSetMetaData
Indicates whether it is possible for a write on the designated column to succeed.
isWritable(int)
- Method in class javax.sql.rowset.
RowSetMetaDataImpl
Indicates whether it is possible for a write operation on
 the designated column to succeed.
isWritable(Path)
- Static method in class java.nio.file.
Files
Tests whether a file is writable.
isWriteable()
- Method in class com.sun.management.
VMOption
Tests if this VM option is writeable.
isWriteLocked()
- Method in class java.util.concurrent.locks.
ReentrantReadWriteLock
Queries if the write lock is held by any thread.
isWriteLocked()
- Method in class java.util.concurrent.locks.
StampedLock
Returns
true
if the lock is currently held exclusively.
isWriteLockedByCurrentThread()
- Method in class java.util.concurrent.locks.
ReentrantReadWriteLock
Queries if the write lock is held by the current thread.
isWriteLockStamp(long)
- Static method in class java.util.concurrent.locks.
StampedLock
Tells whether a stamp represents holding a lock exclusively.
isXIncludeAware()
- Method in class javax.xml.parsers.
DocumentBuilder
Get the XInclude processing mode for this parser.
isXIncludeAware()
- Method in class javax.xml.parsers.
DocumentBuilderFactory
Get state of XInclude processing.
isXIncludeAware()
- Method in class javax.xml.parsers.
SAXParser
Get the XInclude processing mode for this parser.
isXIncludeAware()
- Method in class javax.xml.parsers.
SAXParserFactory
Get state of XInclude processing.
isXOdd()
- Method in class java.security.spec.
EdECPoint
Get whether the x-coordinate of the point is odd.
isZero()
- Method in interface java.time.chrono.
ChronoPeriod
Checks if all the supported units of this period are zero.
isZero()
- Method in class java.time.
Duration
Checks if this duration is zero length.
isZero()
- Method in class java.time.
Period
Checks if all three units of this period are zero.
isZoneLoaded(View)
- Method in class javax.swing.text.
ZoneView
Determine if a zone is in the loaded state.
ITALIAN
- Static variable in class java.util.
Locale
Useful constant for language.
Italic
- Static variable in class javax.swing.text.
StyleConstants
Name of the italic attribute.
ITALIC
- Static variable in class java.awt.
Font
The italicized style constant.
ITALIC_ACTION
- Static variable in class javax.swing.text.html.
HTMLEditorKit
The italic action identifier
ItalicAction()
- Constructor for class javax.swing.text.
StyledEditorKit.ItalicAction
Constructs a new ItalicAction.
ITALY
- Static variable in class java.awt.
PageAttributes.MediaType
An alias for ITALY_ENVELOPE.
ITALY
- Static variable in class java.util.
Locale
Useful constant for country.
ITALY_ENVELOPE
- Static variable in class java.awt.
PageAttributes.MediaType
The MediaType instance for Italy Envelope, 110 x 230 mm.
ITALY_ENVELOPE
- Static variable in class javax.print.attribute.standard.
MediaSize.Other
Specifies the Italy envelope size, 110 mm by 230 mm.
ITALY_ENVELOPE
- Static variable in class javax.print.attribute.standard.
MediaSizeName
Italy envelope size.
item(int)
- Method in class javax.imageio.metadata.
IIOMetadataNode
item(int)
- Method in interface org.w3c.dom.css.
CSSRuleList
Used to retrieve a CSS rule by ordinal index.
item(int)
- Method in interface org.w3c.dom.css.
CSSStyleDeclaration
Used to retrieve the properties that have been explicitly set in this
 declaration block.
item(int)
- Method in interface org.w3c.dom.css.
CSSValueList
Used to retrieve a
CSSValue
by ordinal index.
item(int)
- Method in interface org.w3c.dom.
DOMImplementationList
Returns the
index
th item in the collection.
item(int)
- Method in interface org.w3c.dom.
DOMStringList
Returns the
index
th item in the collection.
item(int)
- Method in interface org.w3c.dom.html.
HTMLCollection
This method retrieves a node specified by ordinal index.
item(int)
- Method in interface org.w3c.dom.
NamedNodeMap
Returns the
index
th item in the map.
item(int)
- Method in interface org.w3c.dom.
NodeList
Returns the
index
th item in the collection.
item(int)
- Method in interface org.w3c.dom.stylesheets.
MediaList
Returns the
index
th in the list.
item(int)
- Method in interface org.w3c.dom.stylesheets.
StyleSheetList
Used to retrieve a style sheet by ordinal index.
ITEM
- Static variable in class com.sun.java.accessibility.util.
EventID
Maps to AWT Item support (i.e., ItemListener and ItemEvent)
ITEM_EVENT_MASK
- Static variable in class java.awt.
AWTEvent
The event mask for selecting item events.
ITEM_FIRST
- Static variable in class java.awt.event.
ItemEvent
The first number in the range of ids used for item events.
ITEM_LAST
- Static variable in class java.awt.event.
ItemEvent
The last number in the range of ids used for item events.
ITEM_STATE_CHANGED
- Static variable in class java.awt.event.
ItemEvent
This event id indicates that an item's state changed.
ItemEvent
- Class in
java.awt.event
A semantic event which indicates that an item was selected or deselected.
ItemEvent(ItemSelectable, int, Object, int)
- Constructor for class java.awt.event.
ItemEvent
Constructs an
ItemEvent
object.
ItemHandler()
- Constructor for class javax.swing.plaf.basic.
BasicComboBoxUI.ItemHandler
Constructs a
ItemHandler
.
ItemHandler()
- Constructor for class javax.swing.plaf.basic.
BasicComboPopup.ItemHandler
Constructs an
ItemHandler
.
itemListener
- Variable in class javax.swing.
AbstractButton
The button model's
ItemListener
.
itemListener
- Variable in class javax.swing.plaf.basic.
BasicComboBoxUI
This protected field is implementation specific.
itemListener
- Variable in class javax.swing.plaf.basic.
BasicComboPopup
This protected field is implementation specific.
ItemListener
- Interface in
java.awt.event
The listener interface for receiving item events.
ItemSelectable
- Interface in
java.awt
The interface for objects which contain a set of items for
 which zero or more can be selected.
itemStateChanged(ItemEvent)
- Method in class java.awt.
AWTEventMulticaster
Handles the itemStateChanged event by invoking the
 itemStateChanged methods on listener-a and listener-b.
itemStateChanged(ItemEvent)
- Method in class java.awt.
Checkbox.AccessibleAWTCheckbox
Fire accessible property change events when the state of the
 toggle button changes.
itemStateChanged(ItemEvent)
- Method in interface java.awt.event.
ItemListener
Invoked when an item has been selected or deselected by the user.
itemStateChanged(ItemEvent)
- Method in class java.awt.
List.AccessibleAWTList
itemStateChanged(ItemEvent)
- Method in class javax.swing.
DefaultCellEditor.EditorDelegate
When an item's state changes, editing is ended.
itemStateChanged(ItemEvent)
- Method in class javax.swing.
JToggleButton.AccessibleJToggleButton
Fire accessible property change events when the state of the
 toggle button changes.
itemStateChanged(ItemEvent)
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI.ItemHandler
itemStateChanged(ItemEvent)
- Method in class javax.swing.plaf.basic.
BasicComboPopup.ItemHandler
Iterable<T>
- Interface in
java.lang
Implementing this interface allows an object to be the target of the enhanced
for
statement (sometimes called the "for-each loop" statement).
iterate(double, DoublePredicate, DoubleUnaryOperator)
- Static method in interface java.util.stream.
DoubleStream
Returns a sequential ordered
DoubleStream
produced by iterative
 application of the given
next
function to an initial element,
 conditioned on satisfying the given
hasNext
predicate.
iterate(double, DoubleUnaryOperator)
- Static method in interface java.util.stream.
DoubleStream
Returns an infinite sequential ordered
DoubleStream
produced by iterative
 application of a function
f
to an initial element
seed
,
 producing a
Stream
consisting of
seed
,
f(seed)
,
f(f(seed))
, etc.
iterate(int, IntPredicate, IntUnaryOperator)
- Static method in interface java.util.stream.
IntStream
Returns a sequential ordered
IntStream
produced by iterative
 application of the given
next
function to an initial element,
 conditioned on satisfying the given
hasNext
predicate.
iterate(int, IntUnaryOperator)
- Static method in interface java.util.stream.
IntStream
Returns an infinite sequential ordered
IntStream
produced by iterative
 application of a function
f
to an initial element
seed
,
 producing a
Stream
consisting of
seed
,
f(seed)
,
f(f(seed))
, etc.
iterate(long, LongPredicate, LongUnaryOperator)
- Static method in interface java.util.stream.
LongStream
Returns a sequential ordered
LongStream
produced by iterative
 application of the given
next
function to an initial element,
 conditioned on satisfying the given
hasNext
predicate.
iterate(long, LongUnaryOperator)
- Static method in interface java.util.stream.
LongStream
Returns an infinite sequential ordered
LongStream
produced by iterative
 application of a function
f
to an initial element
seed
,
 producing a
Stream
consisting of
seed
,
f(seed)
,
f(f(seed))
, etc.
iterate(T, Predicate<? super T>, UnaryOperator<T>)
- Static method in interface java.util.stream.
Stream
Returns a sequential ordered
Stream
produced by iterative
 application of the given
next
function to an initial element,
 conditioned on satisfying the given
hasNext
predicate.
iterate(T, UnaryOperator<T>)
- Static method in interface java.util.stream.
Stream
Returns an infinite sequential ordered
Stream
produced by iterative
 application of a function
f
to an initial element
seed
,
 producing a
Stream
consisting of
seed
,
f(seed)
,
f(f(seed))
, etc.
iteratedLoop(MethodHandle, MethodHandle, MethodHandle)
- Static method in class java.lang.invoke.
MethodHandles
Constructs a loop that ranges over the values produced by an
Iterator<T>
.
iterateNext()
- Method in interface org.w3c.dom.xpath.
XPathResult
Iterates and returns the next node from the node set or
null
if there are no more nodes.
iterator()
- Method in class com.sun.source.util.
DocTreePath
iterator()
- Method in class com.sun.source.util.
TreePath
Iterates from leaves to root.
iterator()
- Method in class java.awt.dnd.
DragGestureEvent
Returns an
Iterator
for the events
 comprising the gesture.
iterator()
- Method in class java.beans.beancontext.
BeanContextMembershipEvent
Gets the array of children affected by this event.
iterator()
- Method in class java.beans.beancontext.
BeanContextSupport
Gets all JavaBean or
BeanContext
instances
 currently nested in this
BeanContext
.
iterator()
- Method in interface java.lang.
Iterable
Returns an iterator over elements of type
T
.
iterator()
- Method in interface java.nio.file.
DirectoryStream
Returns the iterator associated with this
DirectoryStream
.
iterator()
- Method in interface java.nio.file.
Path
Returns an iterator over the name elements of this path.
iterator()
- Method in exception class java.sql.
SQLException
Returns an iterator over the chained SQLExceptions.
iterator()
- Method in class java.util.
AbstractCollection
Returns an iterator over the elements contained in this collection.
iterator()
- Method in class java.util.
AbstractList
Returns an iterator over the elements in this list in proper sequence.
iterator()
- Method in class java.util.
AbstractSequentialList
Returns an iterator over the elements in this list (in proper
 sequence).
iterator()
- Method in class java.util.
ArrayDeque
Returns an iterator over the elements in this deque.
iterator()
- Method in class java.util.
ArrayList
Returns an iterator over the elements in this list in proper sequence.
iterator()
- Method in interface java.util.
Collection
Returns an iterator over the elements in this collection.
iterator()
- Method in class java.util.concurrent.
ArrayBlockingQueue
Returns an iterator over the elements in this queue in proper sequence.
iterator()
- Method in interface java.util.concurrent.
BlockingDeque
Returns an iterator over the elements in this deque in proper sequence.
iterator()
- Method in class java.util.concurrent.
ConcurrentHashMap.KeySetView
iterator()
- Method in class java.util.concurrent.
ConcurrentLinkedDeque
Returns an iterator over the elements in this deque in proper sequence.
iterator()
- Method in class java.util.concurrent.
ConcurrentLinkedQueue
Returns an iterator over the elements in this queue in proper sequence.
iterator()
- Method in class java.util.concurrent.
ConcurrentSkipListSet
Returns an iterator over the elements in this set in ascending order.
iterator()
- Method in class java.util.concurrent.
CopyOnWriteArrayList
Returns an iterator over the elements in this list in proper sequence.
iterator()
- Method in class java.util.concurrent.
CopyOnWriteArraySet
Returns an iterator over the elements contained in this set
 in the order in which these elements were added.
iterator()
- Method in class java.util.concurrent.
DelayQueue
Returns an iterator over all the elements (both expired and
 unexpired) in this queue.
iterator()
- Method in class java.util.concurrent.
LinkedBlockingDeque
Returns an iterator over the elements in this deque in proper sequence.
iterator()
- Method in class java.util.concurrent.
LinkedBlockingQueue
Returns an iterator over the elements in this queue in proper sequence.
iterator()
- Method in class java.util.concurrent.
LinkedTransferQueue
Returns an iterator over the elements in this queue in proper sequence.
iterator()
- Method in class java.util.concurrent.
PriorityBlockingQueue
Returns an iterator over the elements in this queue.
iterator()
- Method in class java.util.concurrent.
SynchronousQueue
Returns an empty iterator in which
hasNext
always returns
false
.
iterator()
- Method in interface java.util.
Deque
Returns an iterator over the elements in this deque in proper sequence.
iterator()
- Method in class java.util.
HashSet
Returns an iterator over the elements in this set.
iterator()
- Method in interface java.util.
List
Returns an iterator over the elements in this list in proper sequence.
iterator()
- Method in interface java.util.
NavigableSet
Returns an iterator over the elements in this set, in ascending order.
iterator()
- Method in class java.util.
PriorityQueue
Returns an iterator over the elements in this queue.
iterator()
- Method in class java.util.
ServiceLoader
Returns an iterator to lazily load and instantiate the available
 providers of this loader's service.
iterator()
- Method in interface java.util.
Set
Returns an iterator over the elements in this set.
iterator()
- Method in interface java.util.stream.
BaseStream
Returns an iterator for the elements of this stream.
iterator()
- Method in class java.util.
TreeSet
Returns an iterator over the elements in this set in ascending order.
iterator()
- Method in class java.util.
Vector
Returns an iterator over the elements in this list in proper sequence.
iterator()
- Method in class javax.xml.crypto.dom.
DOMCryptoContext
Returns a read-only iterator over the set of Id/Element mappings of
 this
DOMCryptoContext
.
iterator()
- Method in interface javax.xml.crypto.
NodeSetData
Returns a read-only iterator over the nodes contained in this
NodeSetData
in
document order
.
iterator()
- Method in interface javax.xml.xpath.
XPathNodes
Returns an iterator of the Nodes.
iterator(Spliterator.OfDouble)
- Static method in class java.util.
Spliterators
Creates an
PrimitiveIterator.OfDouble
from a
Spliterator.OfDouble
.
iterator(Spliterator.OfInt)
- Static method in class java.util.
Spliterators
Creates an
PrimitiveIterator.OfInt
from a
Spliterator.OfInt
.
iterator(Spliterator.OfLong)
- Static method in class java.util.
Spliterators
Creates an
PrimitiveIterator.OfLong
from a
Spliterator.OfLong
.
iterator(Spliterator<? extends T>)
- Static method in class java.util.
Spliterators
Creates an
Iterator
from a
Spliterator
.
Iterator<E>
- Interface in
java.util
An iterator over a collection.
Iterator()
- Constructor for class javax.swing.text.html.
HTMLDocument.Iterator
Constructor for subclasses to call.
Iterator Interface
- Search tag in package java.util
Section
Iterator Interface
- Search tag in package java.util
Section
IvParameterSpec
- Class in
javax.crypto.spec
This class specifies an
initialization vector
(IV).
IvParameterSpec(byte[])
- Constructor for class javax.crypto.spec.
IvParameterSpec
Creates an IvParameterSpec object using the bytes in
iv
as the IV.
IvParameterSpec(byte[], int, int)
- Constructor for class javax.crypto.spec.
IvParameterSpec
Creates an IvParameterSpec object using the first
len
bytes in
iv
, beginning at
offset
inclusive, as the IV.
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
_
All Classes and Interfaces
|
All Packages
|
Constant Field Values
|
Serialized Form
|
System Properties
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.