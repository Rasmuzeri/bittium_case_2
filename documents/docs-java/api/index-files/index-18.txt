R-Index (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
SEARCH
Index
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
_
All Classes and Interfaces
|
All Packages
|
Constant Field Values
|
Serialized Form
|
System Properties
R
'requires' directives with 'static' modifier
- Search tag in package java.lang.module
Section
2.0 Registering SyncProvider Implementations
- Search tag in class javax.sql.rowset.spi.SyncFactory
Section
2.0 Retrieving Data from a CachedRowSet Object
- Search tag in interface javax.sql.rowset.CachedRowSet
Section
2.1 Retrieving RowSetMetaData
- Search tag in interface javax.sql.rowset.CachedRowSet
Section
4.0 Related Specifications
- Search tag in package javax.sql.rowset
Section
4.0 Resolving Synchronization Conflicts
- Search tag in package javax.sql.rowset.spi
Section
5.0 Registering and Notifying Listeners
- Search tag in interface javax.sql.rowset.CachedRowSet
Section
5.0 Related Documentation
- Search tag in package javax.sql.rowset
Section
5.0 Related Specifications
- Search tag in package javax.sql.rowset.spi
Section
6.0 Related Documentation
- Search tag in package javax.sql.rowset.spi
Section
RadialGradientPaint
- Class in
java.awt
The
RadialGradientPaint
class provides a way to fill a shape with
 a circular radial color gradient pattern.
RadialGradientPaint(float, float, float, float[], Color[])
- Constructor for class java.awt.
RadialGradientPaint
Constructs a
RadialGradientPaint
with a default
NO_CYCLE
repeating method and
SRGB
color space,
 using the center as the focus point.
RadialGradientPaint(float, float, float, float[], Color[], MultipleGradientPaint.CycleMethod)
- Constructor for class java.awt.
RadialGradientPaint
Constructs a
RadialGradientPaint
with a default
SRGB
color space, using the center as the focus point.
RadialGradientPaint(float, float, float, float, float, float[], Color[], MultipleGradientPaint.CycleMethod)
- Constructor for class java.awt.
RadialGradientPaint
Constructs a
RadialGradientPaint
with a default
SRGB
color space.
RadialGradientPaint(Point2D, float, float[], Color[])
- Constructor for class java.awt.
RadialGradientPaint
Constructs a
RadialGradientPaint
with a default
NO_CYCLE
repeating method and
SRGB
color space,
 using the center as the focus point.
RadialGradientPaint(Point2D, float, float[], Color[], MultipleGradientPaint.CycleMethod)
- Constructor for class java.awt.
RadialGradientPaint
Constructs a
RadialGradientPaint
with a default
SRGB
color space, using the center as the focus point.
RadialGradientPaint(Point2D, float, Point2D, float[], Color[], MultipleGradientPaint.CycleMethod)
- Constructor for class java.awt.
RadialGradientPaint
Constructs a
RadialGradientPaint
with a default
SRGB
color space.
RadialGradientPaint(Point2D, float, Point2D, float[], Color[], MultipleGradientPaint.CycleMethod, MultipleGradientPaint.ColorSpaceType, AffineTransform)
- Constructor for class java.awt.
RadialGradientPaint
Constructs a
RadialGradientPaint
.
RadialGradientPaint(Rectangle2D, float[], Color[], MultipleGradientPaint.CycleMethod)
- Constructor for class java.awt.
RadialGradientPaint
Constructs a
RadialGradientPaint
with a default
SRGB
color space.
RADIO_BUTTON
- Static variable in class javax.accessibility.
AccessibleRole
A specialized check box that will cause other radio buttons in the same
 group to become unchecked when this one is checked.
RADIO_BUTTON
- Static variable in class javax.swing.plaf.synth.
Region
RadioButton region.
RADIO_BUTTON_MENU_ITEM
- Static variable in class javax.swing.plaf.synth.
Region
RadioButtonMenuItem  region.
RadioButtonBorder(Color, Color, Color, Color)
- Constructor for class javax.swing.plaf.basic.
BasicBorders.RadioButtonBorder
Constructs a new instance of a
RadioButtonBorder
.
radix()
- Method in class java.util.
Scanner
Returns this scanner's default radix.
RAISED
- Static variable in class javax.swing.border.
BevelBorder
Raised bevel type.
RAISED
- Static variable in class javax.swing.border.
EtchedBorder
Raised etched type.
random()
- Static method in class java.lang.
Math
Returns a
double
value with a positive sign, greater
 than or equal to
0.0
and less than
1.0
.
random()
- Static method in class java.lang.
StrictMath
Returns a
double
value with a positive sign, greater
 than or equal to
0.0
and less than
1.0
.
Random
- Class in
java.util
An instance of this class is used to generate a stream of
 pseudorandom numbers; its period is only 2
48
.
Random()
- Constructor for class java.util.
Random
Creates a new random number generator.
Random(long)
- Constructor for class java.util.
Random
Creates a new random number generator using a single
long
seed.
RandomAccess
- Interface in
java.util
Marker interface used by
List
implementations to indicate that
 they support fast (generally constant time) random access.
RandomAccessFile
- Class in
java.io
Instances of this class support both reading and writing to a
 random access file.
RandomAccessFile(File, String)
- Constructor for class java.io.
RandomAccessFile
Creates a random access file stream to read from, and optionally to
 write to, the file specified by the
File
argument.
RandomAccessFile(String, String)
- Constructor for class java.io.
RandomAccessFile
Creates a random access file stream to read from, and optionally
 to write to, a file with the specified name.
RandomGenerator
- Interface in
java.util.random
The
RandomGenerator
interface is designed to provide a common
 protocol for objects that generate random or (more typically) pseudorandom
 sequences of numbers (or Boolean values).
RandomGenerator.ArbitrarilyJumpableGenerator
- Interface in
java.util.random
This interface is designed to provide a common protocol for objects that
 generate sequences of pseudorandom values and can easily
jump
forward, by an arbitrary amount, to a distant point in the state cycle.
RandomGenerator.JumpableGenerator
- Interface in
java.util.random
This interface is designed to provide a common protocol for objects that
 generate pseudorandom values and can easily
jump
forward, by a
 moderate amount (ex. 2
64
) to a distant point in the state cycle.
RandomGenerator.LeapableGenerator
- Interface in
java.util.random
This interface is designed to provide a common protocol for objects that
 generate sequences of pseudorandom values and can easily not only jump
 but also
leap
forward, by a large amount (ex. 2
128
), to
 a very distant point in the state cycle.
RandomGenerator.SplittableGenerator
- Interface in
java.util.random
This interface is designed to provide a common protocol for objects that
 generate sequences of pseudorandom values and can be
split
into
 two objects (the original one and a new one) each of which obey that same
 protocol (and therefore can be recursively split indefinitely).
RandomGenerator.StreamableGenerator
- Interface in
java.util.random
The
RandomGenerator.StreamableGenerator
interface augments the
RandomGenerator
interface to provide methods that return streams
 of
RandomGenerator
objects.
RandomGeneratorFactory<T>
- Class in
java.util.random
This is a factory class for generating multiple random number generators
 of a specific
algorithm
.
Random Number Generator Algorithms Available
- Search tag in package java.util.random
Section
RANDOMPIXELORDER
- Static variable in interface java.awt.image.
ImageConsumer
The pixels will be delivered in a random order.
randomUUID()
- Static method in class java.util.
UUID
Static factory to retrieve a type 4 (pseudo randomly generated) UUID.
range()
- Method in enum class java.time.temporal.
ChronoField
Gets the range of valid values for the field.
range()
- Method in interface java.time.temporal.
TemporalField
Gets the range of valid values for the field.
range(int, int)
- Static method in interface java.util.stream.
IntStream
Returns a sequential ordered
IntStream
from
startInclusive
(inclusive) to
endExclusive
(exclusive) by an incremental step of
1
.
range(long, long)
- Static method in interface java.util.stream.
LongStream
Returns a sequential ordered
LongStream
from
startInclusive
(inclusive) to
endExclusive
(exclusive) by an incremental step of
1
.
range(E, E)
- Static method in class java.util.
EnumSet
Creates an enum set initially containing all of the elements in the
 range defined by the two specified endpoints.
range(ChronoField)
- Method in interface java.time.chrono.
Chronology
Gets the range of valid values for the specified field.
range(ChronoField)
- Method in class java.time.chrono.
HijrahChronology
range(ChronoField)
- Method in class java.time.chrono.
IsoChronology
range(ChronoField)
- Method in class java.time.chrono.
JapaneseChronology
range(ChronoField)
- Method in class java.time.chrono.
MinguoChronology
range(ChronoField)
- Method in class java.time.chrono.
ThaiBuddhistChronology
range(TemporalField)
- Method in interface java.time.chrono.
Era
Gets the range of valid values for the specified field.
range(TemporalField)
- Method in enum class java.time.chrono.
HijrahEra
Gets the range of valid values for the specified field.
range(TemporalField)
- Method in class java.time.chrono.
JapaneseEra
Gets the range of valid values for the specified field.
range(TemporalField)
- Method in enum class java.time.
DayOfWeek
Gets the range of valid values for the specified field.
range(TemporalField)
- Method in class java.time.
Instant
Gets the range of valid values for the specified field.
range(TemporalField)
- Method in class java.time.
LocalDate
Gets the range of valid values for the specified field.
range(TemporalField)
- Method in class java.time.
LocalDateTime
Gets the range of valid values for the specified field.
range(TemporalField)
- Method in class java.time.
LocalTime
Gets the range of valid values for the specified field.
range(TemporalField)
- Method in enum class java.time.
Month
Gets the range of valid values for the specified field.
range(TemporalField)
- Method in class java.time.
MonthDay
Gets the range of valid values for the specified field.
range(TemporalField)
- Method in class java.time.
OffsetDateTime
Gets the range of valid values for the specified field.
range(TemporalField)
- Method in class java.time.
OffsetTime
Gets the range of valid values for the specified field.
range(TemporalField)
- Method in interface java.time.temporal.
TemporalAccessor
Gets the range of valid values for the specified field.
range(TemporalField)
- Method in class java.time.
Year
Gets the range of valid values for the specified field.
range(TemporalField)
- Method in class java.time.
YearMonth
Gets the range of valid values for the specified field.
range(TemporalField)
- Method in class java.time.
ZonedDateTime
Gets the range of valid values for the specified field.
range(TemporalField)
- Method in class java.time.
ZoneOffset
Gets the range of valid values for the specified field.
Range
- Interface in
org.w3c.dom.ranges
See also the
Document Object Model (DOM) Level 2 Traversal and Range Specification
.
RANGE
- Static variable in class java.awt.
JobAttributes.DefaultSelectionType
The
DefaultSelectionType
instance to use for
 specifying that a range of pages of the job should be printed.
rangeClosed(int, int)
- Static method in interface java.util.stream.
IntStream
Returns a sequential ordered
IntStream
from
startInclusive
(inclusive) to
endInclusive
(inclusive) by an incremental step of
1
.
rangeClosed(long, long)
- Static method in interface java.util.stream.
LongStream
Returns a sequential ordered
LongStream
from
startInclusive
(inclusive) to
endInclusive
(inclusive) by an incremental step of
1
.
RangeException
- Exception Class in
org.w3c.dom.ranges
Range operations may throw a
RangeException
as specified in
 their method descriptions.
RangeException(short, String)
- Constructor for exception class org.w3c.dom.ranges.
RangeException
Range of allowed values
- Search tag in class javax.xml.datatype.Duration
Section
rangeRefinedBy(TemporalAccessor)
- Method in enum class java.time.temporal.
ChronoField
rangeRefinedBy(TemporalAccessor)
- Method in interface java.time.temporal.
TemporalField
Get the range of valid values for this field using the temporal object to
 refine the result.
rangeType()
- Method in interface jdk.incubator.vector.
VectorOperators.Conversion
The range of this conversion, a primitive type.
rangeType()
- Method in interface jdk.incubator.vector.
VectorOperators.Operator
Reports the special return type of this operator.
raster
- Variable in class javax.imageio.
IIOImage
The
Raster
being referenced.
Raster
- Class in
java.awt.image
A class representing a rectangular array of pixels.
Raster(SampleModel, DataBuffer, Point)
- Constructor for class java.awt.image.
Raster
Constructs a Raster with the given SampleModel and DataBuffer.
Raster(SampleModel, DataBuffer, Rectangle, Point, Raster)
- Constructor for class java.awt.image.
Raster
Constructs a Raster with the given SampleModel, DataBuffer, and
 parent.
Raster(SampleModel, Point)
- Constructor for class java.awt.image.
Raster
Constructs a Raster with the given SampleModel.
RasterFormatException
- Exception Class in
java.awt.image
The
RasterFormatException
is thrown if there is
 invalid layout information in the
Raster
.
RasterFormatException(String)
- Constructor for exception class java.awt.image.
RasterFormatException
Constructs a new
RasterFormatException
with the
 specified message.
RasterOp
- Interface in
java.awt.image
This interface describes single-input/single-output
 operations performed on Raster objects.
RATA_DIE
- Static variable in class java.time.temporal.
JulianFields
Rata Die field.
RAW
- Static variable in interface java.lang.
StringTemplate
PREVIEW
This
StringTemplate.Processor
PREVIEW
instance is conventionally used to indicate that the
 processing of the
StringTemplate
PREVIEW
is to be deferred to a later time.
RAW_SEND_SIZE
- Static variable in class javax.security.sasl.
Sasl
The name of a property that specifies the maximum size of the raw send
 buffer in bytes of
SaslClient
/
SaslServer
.
RAW_TEXT
- Static variable in class java.awt.im.
InputMethodHighlight
Constant for the raw text state.
RAW_X509_CERTIFICATE_TYPE
- Static variable in interface javax.xml.crypto.dsig.keyinfo.
X509Data
URI identifying the binary (ASN.1 DER) X.509 Certificate KeyInfo type:
 http://www.w3.org/2000/09/xmldsig#rawX509Certificate.
rawCompiledVersion()
- Method in class java.lang.module.
ModuleDescriptor.Requires
Returns the string with the possibly-unparseable version of the module
 if recorded at compile-time.
rawVersion()
- Method in class java.lang.module.
ModuleDescriptor
Returns the string with the possibly-unparseable version of the
 module.
RC2ParameterSpec
- Class in
javax.crypto.spec
This class specifies the parameters used with the
RC2
algorithm.
RC2ParameterSpec(int)
- Constructor for class javax.crypto.spec.
RC2ParameterSpec
Constructs a parameter set for RC2 from the given effective key size
 (in bits).
RC2ParameterSpec(int, byte[])
- Constructor for class javax.crypto.spec.
RC2ParameterSpec
Constructs a parameter set for RC2 from the given effective key size
 (in bits) and an 8-byte IV.
RC2ParameterSpec(int, byte[], int)
- Constructor for class javax.crypto.spec.
RC2ParameterSpec
Constructs a parameter set for RC2 from the given effective key size
 (in bits) and IV.
RC5ParameterSpec
- Class in
javax.crypto.spec
This class specifies the parameters used with the
RC5
algorithm.
RC5ParameterSpec(int, int, int)
- Constructor for class javax.crypto.spec.
RC5ParameterSpec
Constructs a parameter set for RC5 from the given version, number of
 rounds and word size (in bits).
RC5ParameterSpec(int, int, int, byte[])
- Constructor for class javax.crypto.spec.
RC5ParameterSpec
Constructs a parameter set for RC5 from the given version, number of
 rounds, word size (in bits), and IV.
RC5ParameterSpec(int, int, int, byte[], int)
- Constructor for class javax.crypto.spec.
RC5ParameterSpec
Constructs a parameter set for RC5 from the given version, number of
 rounds, word size (in bits), and IV.
RCDATA
- Static variable in interface javax.swing.text.html.parser.
DTDConstants
The DTD constant corresponds to RCDATA
RCSID
- Static variable in class javax.swing.undo.
StateEdit
Obsolete RCS version identity.
RCSID
- Static variable in interface javax.swing.undo.
StateEditable
Resource ID for this class.
Rdn
- Class in
javax.naming.ldap
This class represents a relative distinguished name, or RDN, which is a
 component of a distinguished name as specified by
RFC 2253
.
Rdn(String)
- Constructor for class javax.naming.ldap.
Rdn
Constructs an Rdn from the given string.
Rdn(String, Object)
- Constructor for class javax.naming.ldap.
Rdn
Constructs an Rdn from the given attribute type and
 value.
Rdn(Attributes)
- Constructor for class javax.naming.ldap.
Rdn
Constructs an Rdn from the given attribute set.
Rdn(Rdn)
- Constructor for class javax.naming.ldap.
Rdn
Constructs an Rdn from the given
rdn
.
Reachability
- Search tag in package java.lang.ref
Section
reachabilityFence(Object)
- Static method in class java.lang.ref.
Reference
Ensures that the object referenced by the given reference remains
strongly reachable
,
 regardless of any prior actions of the program that might otherwise cause
 the object to become unreachable; thus, the referenced object is not
 reclaimable by garbage collection at least until after the invocation of
 this method.
read()
- Method in class java.io.
BufferedInputStream
See
 the general contract of the
read
method of
InputStream
.
read()
- Method in class java.io.
BufferedReader
Reads a single character.
read()
- Method in class java.io.
ByteArrayInputStream
Reads the next byte of data from this input stream.
read()
- Method in class java.io.
CharArrayReader
Reads a single character.
read()
- Method in class java.io.
FileInputStream
Reads a byte of data from this input stream.
read()
- Method in class java.io.
FilterInputStream
Reads the next byte of data from the input stream.
read()
- Method in class java.io.
FilterReader
Reads a single character.
read()
- Method in class java.io.
InputStream
Reads the next byte of data from the input stream.
read()
- Method in class java.io.
InputStreamReader
Reads a single character.
read()
- Method in class java.io.
LineNumberInputStream
Deprecated.
Reads the next byte of data from this input stream.
read()
- Method in class java.io.
LineNumberReader
Read a single character.
read()
- Method in interface java.io.
ObjectInput
Reads a byte of data.
read()
- Method in class java.io.
ObjectInputStream
Reads a byte of data.
read()
- Method in class java.io.
PipedInputStream
Reads the next byte of data from this piped input stream.
read()
- Method in class java.io.
PipedReader
Reads the next character of data from this piped stream.
read()
- Method in class java.io.
PushbackInputStream
Reads the next byte of data from this input stream.
read()
- Method in class java.io.
PushbackReader
Reads a single character.
read()
- Method in class java.io.
RandomAccessFile
Reads a byte of data from this file.
read()
- Method in class java.io.
Reader
Reads a single character.
read()
- Method in class java.io.
SequenceInputStream
Reads the next byte of data from the input stream.
read()
- Method in class java.io.
StringBufferInputStream
Deprecated.
Reads the next byte of data from this input stream.
read()
- Method in class java.io.
StringReader
Reads a single character.
read()
- Method in class java.security.
DigestInputStream
Reads a byte, and updates the message digest (if the digest
 function is on).
read()
- Method in class java.util.zip.
CheckedInputStream
Reads a byte.
read()
- Method in class java.util.zip.
DeflaterInputStream
Reads a single byte of compressed data from the input stream.
read()
- Method in class java.util.zip.
InflaterInputStream
Reads a byte of uncompressed data.
read()
- Method in class java.util.zip.
ZipInputStream
Reads the next byte of data from the input stream for the current
 ZIP entry.
read()
- Method in class javax.crypto.
CipherInputStream
Reads the next byte of data from this input stream.
read()
- Method in class javax.imageio.stream.
FileCacheImageInputStream
read()
- Method in class javax.imageio.stream.
FileCacheImageOutputStream
read()
- Method in class javax.imageio.stream.
FileImageInputStream
read()
- Method in class javax.imageio.stream.
FileImageOutputStream
read()
- Method in interface javax.imageio.stream.
ImageInputStream
Reads a single byte from the stream and returns it as an
 integer between 0 and 255.
read()
- Method in class javax.imageio.stream.
ImageInputStreamImpl
Reads a single byte from the stream and returns it as an
int
between 0 and 255.
read()
- Method in class javax.imageio.stream.
MemoryCacheImageInputStream
read()
- Method in class javax.imageio.stream.
MemoryCacheImageOutputStream
read()
- Method in class javax.sound.sampled.
AudioInputStream
Reads the next byte of data from the audio input stream.
read()
- Method in class javax.swing.
ProgressMonitorInputStream
Overrides
FilterInputStream.read
to update the progress monitor after the read.
read(byte[])
- Method in class java.io.
DataInputStream
Reads some number of bytes from the contained input stream and
 stores them into the buffer array
b
.
read(byte[])
- Method in class java.io.
FileInputStream
Reads up to
b.length
bytes of data from this input
 stream into an array of bytes.
read(byte[])
- Method in class java.io.
FilterInputStream
Reads up to
b.length
bytes of data from this
 input stream into an array of bytes.
read(byte[])
- Method in class java.io.
InputStream
Reads some number of bytes from the input stream and stores them into
 the buffer array
b
.
read(byte[])
- Method in interface java.io.
ObjectInput
Reads into an array of bytes.
read(byte[])
- Method in class java.io.
RandomAccessFile
Reads up to
b.length
bytes of data from this file
 into an array of bytes.
read(byte[])
- Method in class javax.crypto.
CipherInputStream
Reads up to
b.length
bytes of data from this input
 stream into an array of bytes.
read(byte[])
- Method in interface javax.imageio.stream.
ImageInputStream
Reads up to
b.length
bytes from the stream, and
 stores them into
b
starting at index 0.
read(byte[])
- Method in class javax.imageio.stream.
ImageInputStreamImpl
A convenience method that calls
read(b, 0, b.length)
.
read(byte[])
- Method in class javax.sound.sampled.
AudioInputStream
Reads some number of bytes from the audio input stream and stores them
 into the buffer array
b
.
read(byte[])
- Method in class javax.swing.
ProgressMonitorInputStream
Overrides
FilterInputStream.read
to update the progress monitor after the read.
read(byte[], int, int)
- Method in class java.io.
BufferedInputStream
Reads bytes from this byte-input stream into the specified byte array,
 starting at the given offset.
read(byte[], int, int)
- Method in class java.io.
ByteArrayInputStream
Reads up to
len
bytes of data into an array of bytes from this
 input stream.
read(byte[], int, int)
- Method in class java.io.
DataInputStream
Reads up to
len
bytes of data from the contained
 input stream into an array of bytes.
read(byte[], int, int)
- Method in class java.io.
FileInputStream
Reads up to
len
bytes of data from this input stream
 into an array of bytes.
read(byte[], int, int)
- Method in class java.io.
FilterInputStream
Reads up to
len
bytes of data from this input stream
 into an array of bytes.
read(byte[], int, int)
- Method in class java.io.
InputStream
Reads up to
len
bytes of data from the input stream into
 an array of bytes.
read(byte[], int, int)
- Method in class java.io.
LineNumberInputStream
Deprecated.
Reads up to
len
bytes of data from this input stream
 into an array of bytes.
read(byte[], int, int)
- Method in interface java.io.
ObjectInput
Reads into an array of bytes.
read(byte[], int, int)
- Method in class java.io.
ObjectInputStream
Reads into an array of bytes.
read(byte[], int, int)
- Method in class java.io.
PipedInputStream
Reads up to
len
bytes of data from this piped input
 stream into an array of bytes.
read(byte[], int, int)
- Method in class java.io.
PushbackInputStream
Reads up to
len
bytes of data from this input stream into
 an array of bytes.
read(byte[], int, int)
- Method in class java.io.
RandomAccessFile
Reads up to
len
bytes of data from this file into an
 array of bytes.
read(byte[], int, int)
- Method in class java.io.
SequenceInputStream
Reads up to
len
bytes of data from this input stream into an
 array of bytes.
read(byte[], int, int)
- Method in class java.io.
StringBufferInputStream
Deprecated.
Reads up to
len
bytes of data from this input stream
 into an array of bytes.
read(byte[], int, int)
- Method in class java.security.
DigestInputStream
Reads into a byte array, and updates the message digest (if the
 digest function is on).
read(byte[], int, int)
- Method in class java.util.jar.
JarInputStream
Reads from the current JAR entry into an array of bytes, returning the number of
 inflated bytes.
read(byte[], int, int)
- Method in class java.util.zip.
CheckedInputStream
Reads into an array of bytes.
read(byte[], int, int)
- Method in class java.util.zip.
DeflaterInputStream
Reads compressed data into a byte array.
read(byte[], int, int)
- Method in class java.util.zip.
GZIPInputStream
Reads uncompressed data into an array of bytes, returning the number of inflated
 bytes.
read(byte[], int, int)
- Method in class java.util.zip.
InflaterInputStream
Reads uncompressed data into an array of bytes, returning the number of inflated
 bytes.
read(byte[], int, int)
- Method in class java.util.zip.
ZipInputStream
Reads the requested number of bytes from the input stream into the given
 byte array for the current ZIP entry returning the number of
 inflated bytes.
read(byte[], int, int)
- Method in class javax.crypto.
CipherInputStream
Reads up to
len
bytes of data from this input stream
 into an array of bytes.
read(byte[], int, int)
- Method in class javax.imageio.stream.
FileCacheImageInputStream
read(byte[], int, int)
- Method in class javax.imageio.stream.
FileCacheImageOutputStream
read(byte[], int, int)
- Method in class javax.imageio.stream.
FileImageInputStream
read(byte[], int, int)
- Method in class javax.imageio.stream.
FileImageOutputStream
read(byte[], int, int)
- Method in interface javax.imageio.stream.
ImageInputStream
Reads up to
len
bytes from the stream, and stores
 them into
b
starting at index
off
.
read(byte[], int, int)
- Method in class javax.imageio.stream.
ImageInputStreamImpl
Reads up to
len
bytes from the stream, and stores
 them into
b
starting at index
off
.
read(byte[], int, int)
- Method in class javax.imageio.stream.
MemoryCacheImageInputStream
read(byte[], int, int)
- Method in class javax.imageio.stream.
MemoryCacheImageOutputStream
read(byte[], int, int)
- Method in class javax.sound.sampled.
AudioInputStream
Reads up to a specified maximum number of bytes of data from the audio
 stream, putting them into the given byte array.
read(byte[], int, int)
- Method in interface javax.sound.sampled.
TargetDataLine
Reads audio data from the data line's input buffer.
read(byte[], int, int)
- Method in class javax.swing.
ProgressMonitorInputStream
Overrides
FilterInputStream.read
to update the progress monitor after the read.
read(char[])
- Method in class java.io.
Reader
Reads characters into an array.
read(char[], int, int)
- Method in class java.io.
BufferedReader
Reads characters into a portion of an array.
read(char[], int, int)
- Method in class java.io.
CharArrayReader
Reads characters into a portion of an array.
read(char[], int, int)
- Method in class java.io.
FilterReader
Reads characters into a portion of an array.
read(char[], int, int)
- Method in class java.io.
InputStreamReader
Reads characters into a portion of an array.
read(char[], int, int)
- Method in class java.io.
LineNumberReader
Reads characters into a portion of an array.
read(char[], int, int)
- Method in class java.io.
PipedReader
Reads characters into a portion of an array.
read(char[], int, int)
- Method in class java.io.
Reader
Reads characters into a portion of an array.
read(char[], int, int)
- Method in class java.io.
StringReader
Reads characters into a portion of an array.
read(int)
- Method in class javax.imageio.
ImageReader
Reads the image indexed by
imageIndex
and returns
 it as a complete
BufferedImage
, using a default
ImageReadParam
.
read(int, ImageReadParam)
- Method in class javax.imageio.
ImageReader
Reads the image indexed by
imageIndex
and returns
 it as a complete
BufferedImage
, using a supplied
ImageReadParam
.
read(DataInput)
- Static method in class java.rmi.server.
UID
Constructs and returns a new
UID
instance by
 unmarshalling a binary representation from an
DataInput
instance.
read(DataInputStream)
- Method in class javax.swing.text.html.parser.
DTD
Recreates a DTD from an archived format.
read(File)
- Static method in class javax.imageio.
ImageIO
Returns a
BufferedImage
as the result of decoding
 a supplied
File
with an
ImageReader
chosen automatically from among those currently registered.
read(InputStream)
- Static method in class java.lang.module.
ModuleDescriptor
Reads the binary form of a module declaration from an input stream as a
 module descriptor.
read(InputStream)
- Method in class java.util.jar.
Manifest
Reads the Manifest from the specified InputStream.
read(InputStream)
- Static method in class javax.imageio.
ImageIO
Returns a
BufferedImage
as the result of decoding
 a supplied
InputStream
with an
ImageReader
chosen automatically from among those currently registered.
read(InputStream, Object)
- Method in class javax.swing.
JEditorPane
This method initializes from a stream.
read(InputStream, Supplier<Set<String>>)
- Static method in class java.lang.module.
ModuleDescriptor
Reads the binary form of a module declaration from an input stream
 as a module descriptor.
read(InputStream, Document, int)
- Method in class javax.swing.text.
DefaultEditorKit
Inserts content from the given stream which is expected
 to be in a format appropriate for this kind of content
 handler.
read(InputStream, Document, int)
- Method in class javax.swing.text.
EditorKit
Inserts content from the given stream which is expected
 to be in a format appropriate for this kind of content
 handler.
read(InputStream, Document, int)
- Method in class javax.swing.text.rtf.
RTFEditorKit
Insert content from the given stream which is expected
 to be in a format appropriate for this kind of content
 handler.
read(ObjectInput)
- Static method in class java.rmi.server.
ObjID
Constructs and returns a new
ObjID
instance by
 unmarshalling a binary representation from an
ObjectInput
instance.
read(Reader, Object)
- Method in class javax.swing.text.
JTextComponent
Initializes from a stream.
read(Reader, Document, int)
- Method in class javax.swing.text.
DefaultEditorKit
Inserts content from the given stream, which will be
 treated as plain text.
read(Reader, Document, int)
- Method in class javax.swing.text.
EditorKit
Inserts content from the given stream which is expected
 to be in a format appropriate for this kind of content
 handler.
read(Reader, Document, int)
- Method in class javax.swing.text.html.
HTMLEditorKit
Inserts content from the given stream.
read(Reader, Document, int)
- Method in class javax.swing.text.rtf.
RTFEditorKit
Insert content from the given stream, which will be
 treated as plain text.
read(String)
- Method in interface java.lang.module.
ModuleReader
Reads a resource, returning a byte buffer with the contents of the
 resource.
read(String, ByteBuffer)
- Method in interface java.nio.file.attribute.
UserDefinedFileAttributeView
Read the value of a user-defined attribute into a buffer.
read(URL)
- Static method in class javax.imageio.
ImageIO
Returns a
BufferedImage
as the result of decoding
 a supplied
URL
with an
ImageReader
chosen automatically from among those currently registered.
read(ByteBuffer)
- Static method in class java.lang.module.
ModuleDescriptor
Reads the binary form of a module declaration from a byte buffer as a
 module descriptor.
read(ByteBuffer)
- Method in interface java.nio.channels.
AsynchronousByteChannel
Reads a sequence of bytes from this channel into the given buffer.
read(ByteBuffer)
- Method in class java.nio.channels.
AsynchronousSocketChannel
read(ByteBuffer)
- Method in class java.nio.channels.
DatagramChannel
Reads a datagram from this channel.
read(ByteBuffer)
- Method in class java.nio.channels.
FileChannel
Reads a sequence of bytes from this channel into the given buffer.
read(ByteBuffer)
- Method in interface java.nio.channels.
ReadableByteChannel
Reads a sequence of bytes from this channel into the given buffer.
read(ByteBuffer)
- Method in interface java.nio.channels.
SeekableByteChannel
Reads a sequence of bytes from this channel into the given buffer.
read(ByteBuffer)
- Method in class java.nio.channels.
SocketChannel
read(ByteBuffer[])
- Method in class java.nio.channels.
DatagramChannel
Reads a datagram from this channel.
read(ByteBuffer[])
- Method in class java.nio.channels.
FileChannel
Reads a sequence of bytes from this channel into the given buffers.
read(ByteBuffer[])
- Method in interface java.nio.channels.
ScatteringByteChannel
Reads a sequence of bytes from this channel into the given buffers.
read(ByteBuffer[])
- Method in class java.nio.channels.
SocketChannel
read(ByteBuffer[], int, int)
- Method in class java.nio.channels.
DatagramChannel
Reads a datagram from this channel.
read(ByteBuffer[], int, int)
- Method in class java.nio.channels.
FileChannel
Reads a sequence of bytes from this channel into a subsequence of the
 given buffers.
read(ByteBuffer[], int, int)
- Method in interface java.nio.channels.
ScatteringByteChannel
Reads a sequence of bytes from this channel into a subsequence of the
 given buffers.
read(ByteBuffer[], int, int)
- Method in class java.nio.channels.
SocketChannel
read(ByteBuffer[], int, int, long, TimeUnit, A, CompletionHandler<Long, ? super A>)
- Method in class java.nio.channels.
AsynchronousSocketChannel
Reads a sequence of bytes from this channel into a subsequence of the
 given buffers.
read(ByteBuffer, long)
- Method in class java.nio.channels.
AsynchronousFileChannel
Reads a sequence of bytes from this channel into the given buffer,
 starting at the given file position.
read(ByteBuffer, long)
- Method in class java.nio.channels.
FileChannel
Reads a sequence of bytes from this channel into the given buffer,
 starting at the given file position.
read(ByteBuffer, long, A, CompletionHandler<Integer, ? super A>)
- Method in class java.nio.channels.
AsynchronousFileChannel
Reads a sequence of bytes from this channel into the given buffer,
 starting at the given file position.
read(ByteBuffer, long, TimeUnit, A, CompletionHandler<Integer, ? super A>)
- Method in class java.nio.channels.
AsynchronousSocketChannel
Reads a sequence of bytes from this channel into the given buffer.
read(ByteBuffer, A, CompletionHandler<Integer, ? super A>)
- Method in interface java.nio.channels.
AsynchronousByteChannel
Reads a sequence of bytes from this channel into the given buffer.
read(ByteBuffer, A, CompletionHandler<Integer, ? super A>)
- Method in class java.nio.channels.
AsynchronousSocketChannel
read(ByteBuffer, Supplier<Set<String>>)
- Static method in class java.lang.module.
ModuleDescriptor
Reads the binary form of a module declaration from a byte buffer
 as a module descriptor.
read(CharBuffer)
- Method in class java.io.
Reader
Attempts to read characters into the specified character buffer.
read(CharBuffer)
- Method in interface java.lang.
Readable
Attempts to read characters into the specified character buffer.
read(CharBuffer)
- Method in class java.nio.
CharBuffer
Attempts to read characters into the specified character buffer.
read(ImageInputStream)
- Static method in class javax.imageio.
ImageIO
Returns a
BufferedImage
as the result of decoding
 a supplied
ImageInputStream
with an
ImageReader
chosen automatically from among those
 currently registered.
READ
- Enum constant in enum class java.lang.
ProcessBuilder.Redirect.Type
The type of redirects returned from
Redirect.from(File)
.
READ
- Enum constant in enum class java.nio.file.
AccessMode
Test read access.
READ
- Enum constant in enum class java.nio.file.
StandardOpenOption
Open for read access.
READ_ACL
- Enum constant in enum class java.nio.file.attribute.
AclEntryPermission
Permission to read the ACL attribute.
READ_ATTRIBUTES
- Enum constant in enum class java.nio.file.attribute.
AclEntryPermission
The ability to read (non-acl) file attributes.
READ_DATA
- Enum constant in enum class java.nio.file.attribute.
AclEntryPermission
Permission to read the data of the file.
READ_NAMED_ATTRS
- Enum constant in enum class java.nio.file.attribute.
AclEntryPermission
Permission to read the named attributes of a file.
READ_ONLY
- Static variable in class java.nio.channels.
FileChannel.MapMode
Mode for a read-only mapping.
READ_ONLY_SYNC
- Static variable in class jdk.nio.mapmode.
ExtendedMapMode
File mapping mode for a read-only mapping of a file backed by
 non-volatile RAM.
READ_WRITE
- Static variable in class java.nio.channels.
FileChannel.MapMode
Mode for a read/write mapping.
READ_WRITE_SYNC
- Static variable in class jdk.nio.mapmode.
ExtendedMapMode
File mapping mode for a read-write mapping of a file backed by
 non-volatile RAM.
Readable
- Interface in
java.lang
A
Readable
is a source of characters.
ReadableByteChannel
- Interface in
java.nio.channels
A channel that can read bytes.
readAborted(ImageReader)
- Method in interface javax.imageio.event.
IIOReadProgressListener
Reports that a read has been aborted via the reader's
abort
method.
readAll(int, ImageReadParam)
- Method in class javax.imageio.
ImageReader
Reads the image indexed by
imageIndex
and returns
 an
IIOImage
containing the image, thumbnails, and
 associated image metadata, using a supplied
ImageReadParam
.
readAll(Iterator<? extends ImageReadParam>)
- Method in class javax.imageio.
ImageReader
Returns an
Iterator
containing all the images,
 thumbnails, and metadata, starting at the index given by
getMinIndex
, from the input source in the form of
IIOImage
objects.
readAllBytes()
- Method in class java.io.
ByteArrayInputStream
readAllBytes()
- Method in class java.io.
InputStream
Reads all remaining bytes from the input stream.
readAllBytes()
- Method in class java.util.zip.
ZipInputStream
Reads all remaining bytes from the input stream for the current ZIP entry.
readAllBytes(Path)
- Static method in class java.nio.file.
Files
Reads all the bytes from a file.
readAllEvents(Path)
- Static method in class jdk.jfr.consumer.
RecordingFile
Returns a list of all events in a file.
readAllLines(Path)
- Static method in class java.nio.file.
Files
Read all lines from a file.
readAllLines(Path, Charset)
- Static method in class java.nio.file.
Files
Read all lines from a file.
readArray()
- Method in interface java.sql.
SQLInput
Reads an SQL
ARRAY
value from the stream and returns it as an
Array
object in the Java programming language.
readArray()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Reads an SQL
ARRAY
value from the stream and
 returns it as an
Array
object in the Java programming
 language.
readAsciiStream()
- Method in interface java.sql.
SQLInput
Reads the next attribute in the stream and returns it as a stream of ASCII characters.
readAsciiStream()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Returns the next attribute in this
SQLInputImpl
object
 as a stream of ASCII characters.
readAsRenderedImage(int, ImageReadParam)
- Method in class javax.imageio.
ImageReader
Returns a
RenderedImage
object that contains the
 contents of the image indexed by
imageIndex
.
readAttributes()
- Method in interface java.nio.file.attribute.
BasicFileAttributeView
Reads the basic file attributes as a bulk operation.
readAttributes()
- Method in interface java.nio.file.attribute.
DosFileAttributeView
readAttributes()
- Method in interface java.nio.file.attribute.
PosixFileAttributeView
readAttributes(ObjectInputStream, MutableAttributeSet)
- Method in class javax.swing.text.
StyleContext
Context-specific handling of reading in attributes
readAttributes(Path, Class<A>, LinkOption...)
- Static method in class java.nio.file.
Files
Reads a file's attributes as a bulk operation.
readAttributes(Path, Class<A>, LinkOption...)
- Method in class java.nio.file.spi.
FileSystemProvider
Reads a file's attributes as a bulk operation.
readAttributes(Path, String, LinkOption...)
- Static method in class java.nio.file.
Files
Reads a set of file attributes as a bulk operation.
readAttributes(Path, String, LinkOption...)
- Method in class java.nio.file.spi.
FileSystemProvider
Reads a set of file attributes as a bulk operation.
readAttributeSet(ObjectInputStream, MutableAttributeSet)
- Static method in class javax.swing.text.
StyleContext
Reads a set of attributes from the given object input
 stream that have been previously written out with
writeAttributeSet
.
readAttributesIfExists(Path, Class<A>, LinkOption...)
- Method in class java.nio.file.spi.
FileSystemProvider
Reads a file's attributes as a bulk operation if it exists.
readBigDecimal()
- Method in interface java.sql.
SQLInput
Reads the next attribute in the stream and returns it as a
java.math.BigDecimal
object in the Java programming language.
readBigDecimal()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Retrieves the next attribute in this
SQLInputImpl
object
 as a
java.math.BigDecimal
.
readBinaryStream()
- Method in interface java.sql.
SQLInput
Reads the next attribute in the stream and returns it as a stream of uninterpreted
 bytes.
readBinaryStream()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Returns the next attribute in this
SQLInputImpl
object
 as a stream of uninterpreted bytes.
readBit()
- Method in interface javax.imageio.stream.
ImageInputStream
Reads a single bit from the stream and returns it as an
int
with the value
0
or
1
.
readBit()
- Method in class javax.imageio.stream.
ImageInputStreamImpl
readBits(int)
- Method in interface javax.imageio.stream.
ImageInputStream
Reads a bitstring from the stream and returns it as a
long
, with the first bit read becoming the most
 significant bit of the output.
readBits(int)
- Method in class javax.imageio.stream.
ImageInputStreamImpl
readBlob()
- Method in interface java.sql.
SQLInput
Reads an SQL
BLOB
value from the stream and returns it as a
Blob
object in the Java programming language.
readBlob()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Retrieves the
BLOB
value at the head of this
SQLInputImpl
object as a
Blob
object
 in the Java programming language.
readBoolean()
- Method in interface java.io.
DataInput
Reads one input byte and returns
true
if that byte is nonzero,
false
if that byte is zero.
readBoolean()
- Method in class java.io.
DataInputStream
See the general contract of the
readBoolean
method of
DataInput
.
readBoolean()
- Method in class java.io.
ObjectInputStream
Reads in a boolean.
readBoolean()
- Method in class java.io.
RandomAccessFile
Reads a
boolean
from this file.
readBoolean()
- Method in interface java.sql.
SQLInput
Reads the next attribute in the stream and returns it as a
boolean
in the Java programming language.
readBoolean()
- Method in interface javax.imageio.stream.
ImageInputStream
Reads a byte from the stream and returns a
boolean
value of
true
if it is nonzero,
false
if it is zero.
readBoolean()
- Method in class javax.imageio.stream.
ImageInputStreamImpl
readBoolean()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Retrieves the next attribute in this
SQLInputImpl
object as
 a
boolean
in the Java programming language.
readByte()
- Method in interface java.io.
DataInput
Reads and returns one input byte.
readByte()
- Method in class java.io.
DataInputStream
See the general contract of the
readByte
method of
DataInput
.
readByte()
- Method in class java.io.
ObjectInputStream
Reads an 8-bit byte.
readByte()
- Method in class java.io.
RandomAccessFile
Reads a signed eight-bit value from this file.
readByte()
- Method in interface java.sql.
SQLInput
Reads the next attribute in the stream and returns it as a
byte
in the Java programming language.
readByte()
- Method in interface javax.imageio.stream.
ImageInputStream
Reads a byte from the stream and returns it as a
byte
value.
readByte()
- Method in class javax.imageio.stream.
ImageInputStreamImpl
readByte()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Retrieves the next attribute in this
SQLInputImpl
object as
 a
byte
in the Java programming language.
readBytes()
- Method in interface java.sql.
SQLInput
Reads the next attribute in the stream and returns it as an array of bytes
 in the Java programming language.
readBytes()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Retrieves the next attribute in this
SQLInputImpl
object
 as an array of bytes.
readBytes(IIOByteBuffer, int)
- Method in interface javax.imageio.stream.
ImageInputStream
Reads up to
len
bytes from the stream, and
 modifies the supplied
IIOByteBuffer
to indicate
 the byte array, offset, and length where the data may be found.
readBytes(IIOByteBuffer, int)
- Method in class javax.imageio.stream.
ImageInputStreamImpl
readChar()
- Method in interface java.io.
DataInput
Reads two input bytes and returns a
char
value.
readChar()
- Method in class java.io.
DataInputStream
See the general contract of the
readChar
method of
DataInput
.
readChar()
- Method in class java.io.
ObjectInputStream
Reads a 16-bit char.
readChar()
- Method in class java.io.
RandomAccessFile
Reads a character from this file.
readChar()
- Method in interface javax.imageio.stream.
ImageInputStream
Equivalent to
readUnsignedShort
, except that the
 result is returned using the
char
datatype.
readChar()
- Method in class javax.imageio.stream.
ImageInputStreamImpl
readCharacterStream()
- Method in interface java.sql.
SQLInput
Reads the next attribute in the stream and returns it as a stream of Unicode characters.
readCharacterStream()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Retrieves the next attribute in this
SQLInputImpl
object
 as a stream of Unicode characters.
readChildren(ObjectInputStream)
- Method in class java.beans.beancontext.
BeanContextSupport
When an instance of this class is used as a delegate for the
 implementation of the BeanContext protocols (and its subprotocols)
 there exists a 'chicken and egg' problem during deserialization
readClassDescriptor()
- Method in class java.io.
ObjectInputStream
Read a class descriptor from the serialization stream.
readClob()
- Method in interface java.sql.
SQLInput
Reads an SQL
CLOB
value from the stream and returns it as a
Clob
object in the Java programming language.
readClob()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Retrieves the
CLOB
value at the head of this
SQLInputImpl
object as a
Clob
object
 in the Java programming language.
readConfiguration()
- Method in class java.util.logging.
LogManager
Reads and initializes the logging configuration.
readConfiguration(InputStream)
- Method in class java.util.logging.
LogManager
Reads and initializes the logging configuration from the given input stream.
readData(RowSetInternal)
- Method in interface javax.sql.
RowSetReader
Reads the new contents of the calling
RowSet
object.
readDate()
- Method in interface java.sql.
SQLInput
Reads the next attribute in the stream and returns it as a
java.sql.Date
object.
readDate()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Retrieves the next attribute in this
SQLInputImpl
as
 a
java.sql.Date
object.
readDouble()
- Method in interface java.io.
DataInput
Reads eight input bytes and returns
 a
double
value.
readDouble()
- Method in class java.io.
DataInputStream
See the general contract of the
readDouble
method of
DataInput
.
readDouble()
- Method in class java.io.
ObjectInputStream
Reads a 64-bit double.
readDouble()
- Method in class java.io.
RandomAccessFile
Reads a
double
from this file.
readDouble()
- Method in interface java.sql.
SQLInput
Reads the next attribute in the stream and returns it as a
double
in the Java programming language.
readDouble()
- Method in interface javax.imageio.stream.
ImageInputStream
Reads 8 bytes from the stream, and (conceptually) concatenates
 them according to the current byte order and returns the result
 as a
double
.
readDouble()
- Method in class javax.imageio.stream.
ImageInputStreamImpl
readDouble()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Retrieves the next attribute in this
SQLInputImpl
object
 as a
double
in the Java programming language.
reader
- Variable in class javax.script.
SimpleScriptContext
This is the reader to be used for input from scripts.
reader()
- Method in class java.io.
Console
Retrieves the unique
Reader
object associated
 with this console.
reader()
- Method in interface jdk.jshell.
JShellConsole
Retrieves the unique
Reader
object associated
 with this console.
Reader
- Class in
java.io
Abstract class for reading character streams.
Reader()
- Constructor for class java.io.
Reader
Creates a new character-stream reader whose critical sections will
 synchronize on the reader itself.
Reader(Object)
- Constructor for class java.io.
Reader
Creates a new character-stream reader whose critical sections will
 synchronize on the given object.
READER(String)
- Constructor for class javax.print.
DocFlavor.READER
Constructs a new doc flavor with the given MIME type and a print data
 representation class name of
"java.io.Reader"
(character
 stream).
readerSpiNames
- Variable in class javax.imageio.spi.
ImageWriterSpi
An array of strings to be returned from
getImageReaderSpiNames
, initially
null
.
readerSupportsThumbnails()
- Method in class javax.imageio.
ImageReader
Returns
true
if the image format understood by
 this reader supports thumbnail preview images associated with
 it.
readEvent()
- Method in class jdk.jfr.consumer.
RecordingFile
Reads the next event in the recording.
readEventTypes()
- Method in class jdk.jfr.consumer.
RecordingFile
Returns a list of all event types in this recording.
readExternal(ObjectInput)
- Method in class java.awt.datatransfer.
DataFlavor
Restores this
DataFlavor
from a Serialized state.
readExternal(ObjectInput)
- Method in interface java.io.
Externalizable
The object implements the readExternal method to restore its
 contents by calling the methods of DataInput for primitive
 types and readObject for objects, strings and arrays.
readExternal(ObjectInput)
- Method in class javax.management.loading.
MLet
Deprecated.
Restore this MLet's contents from the given
ObjectInput
.
readFields()
- Method in class java.io.
ObjectInputStream
Reads the persistent fields from the stream and makes them available by
 name.
readFloat()
- Method in interface java.io.
DataInput
Reads four input bytes and returns
 a
float
value.
readFloat()
- Method in class java.io.
DataInputStream
See the general contract of the
readFloat
method of
DataInput
.
readFloat()
- Method in class java.io.
ObjectInputStream
Reads a 32-bit float.
readFloat()
- Method in class java.io.
RandomAccessFile
Reads a
float
from this file.
readFloat()
- Method in interface java.sql.
SQLInput
Reads the next attribute in the stream and returns it as a
float
in the Java programming language.
readFloat()
- Method in interface javax.imageio.stream.
ImageInputStream
Reads 4 bytes from the stream, and (conceptually) concatenates
 them according to the current byte order and returns the result
 as a
float
.
readFloat()
- Method in class javax.imageio.stream.
ImageInputStreamImpl
readFloat()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Retrieves the next attribute in this
SQLInputImpl
object
 as a
float
in the Java programming language.
readFully(byte[])
- Method in interface java.io.
DataInput
Reads some bytes from an input
 stream and stores them into the buffer
 array
b
.
readFully(byte[])
- Method in class java.io.
DataInputStream
See the general contract of the
readFully
method of
DataInput
.
readFully(byte[])
- Method in class java.io.
ObjectInputStream
Reads bytes, blocking until all bytes are read.
readFully(byte[])
- Method in class java.io.
RandomAccessFile
Reads
b.length
bytes from this file into the byte
 array, starting at the current file pointer.
readFully(byte[])
- Method in interface javax.imageio.stream.
ImageInputStream
Reads
b.length
bytes from the stream, and stores them
 into
b
starting at index
0
.
readFully(byte[])
- Method in class javax.imageio.stream.
ImageInputStreamImpl
readFully(byte[], int, int)
- Method in interface java.io.
DataInput
Reads
len
bytes from
 an input stream.
readFully(byte[], int, int)
- Method in class java.io.
DataInputStream
See the general contract of the
readFully
method of
DataInput
.
readFully(byte[], int, int)
- Method in class java.io.
ObjectInputStream
Reads bytes, blocking until all bytes are read.
readFully(byte[], int, int)
- Method in class java.io.
RandomAccessFile
Reads exactly
len
bytes from this file into the byte
 array, starting at the current file pointer.
readFully(byte[], int, int)
- Method in interface javax.imageio.stream.
ImageInputStream
Reads
len
bytes from the stream, and stores them
 into
b
starting at index
off
.
readFully(byte[], int, int)
- Method in class javax.imageio.stream.
ImageInputStreamImpl
readFully(char[], int, int)
- Method in interface javax.imageio.stream.
ImageInputStream
Reads
len
chars (unsigned 16-bit integers) from the
 stream according to the current byte order, and
 stores them into
c
starting at index
off
.
readFully(char[], int, int)
- Method in class javax.imageio.stream.
ImageInputStreamImpl
readFully(double[], int, int)
- Method in interface javax.imageio.stream.
ImageInputStream
Reads
len
doubles (64-bit IEEE double-precision
 floats) from the stream according to the current byte order,
 and stores them into
d
starting at
 index
off
.
readFully(double[], int, int)
- Method in class javax.imageio.stream.
ImageInputStreamImpl
readFully(float[], int, int)
- Method in interface javax.imageio.stream.
ImageInputStream
Reads
len
floats (32-bit IEEE single-precision
 floats) from the stream according to the current byte order,
 and stores them into
f
starting at
 index
off
.
readFully(float[], int, int)
- Method in class javax.imageio.stream.
ImageInputStreamImpl
readFully(int[], int, int)
- Method in interface javax.imageio.stream.
ImageInputStream
Reads
len
ints (signed 32-bit integers) from the
 stream according to the current byte order, and
 stores them into
i
starting at index
off
.
readFully(int[], int, int)
- Method in class javax.imageio.stream.
ImageInputStreamImpl
readFully(long[], int, int)
- Method in interface javax.imageio.stream.
ImageInputStream
Reads
len
longs (signed 64-bit integers) from the
 stream according to the current byte order, and
 stores them into
l
starting at index
off
.
readFully(long[], int, int)
- Method in class javax.imageio.stream.
ImageInputStreamImpl
readFully(short[], int, int)
- Method in interface javax.imageio.stream.
ImageInputStream
Reads
len
shorts (signed 16-bit integers) from the
 stream according to the current byte order, and
 stores them into
s
starting at index
off
.
readFully(short[], int, int)
- Method in class javax.imageio.stream.
ImageInputStreamImpl
READING
- Static variable in class java.text.
AttributedCharacterIterator.Attribute
Attribute key for the reading of some text.
Reading Compressed Exif Images
- Search tag in package javax.imageio.metadata
Section
Reading Exif Images
- Search tag in package javax.imageio.metadata
Section
Reading Images
- Search tag in package javax.imageio.metadata
Section
Reading Uncompressed Exif Images
- Search tag in package javax.imageio.metadata
Section
Reading Zip File Entries
- Search tag in class java.util.zip.ZipInputStream
Section
readInt()
- Method in interface java.io.
DataInput
Reads four input bytes and returns an
int
value.
readInt()
- Method in class java.io.
DataInputStream
See the general contract of the
readInt
method of
DataInput
.
readInt()
- Method in class java.io.
ObjectInputStream
Reads a 32-bit int.
readInt()
- Method in class java.io.
RandomAccessFile
Reads a signed 32-bit integer from this file.
readInt()
- Method in interface java.sql.
SQLInput
Reads the next attribute in the stream and returns it as an
int
in the Java programming language.
readInt()
- Method in interface javax.imageio.stream.
ImageInputStream
Reads 4 bytes from the stream, and (conceptually) concatenates
 them according to the current byte order and returns the result
 as an
int
.
readInt()
- Method in class javax.imageio.stream.
ImageInputStreamImpl
readInt()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Retrieves the next attribute in this
SQLInputImpl
object
 as an
int
in the Java programming language.
readLine()
- Method in class java.io.
BufferedReader
Reads a line of text.
readLine()
- Method in class java.io.
Console
Reads a single line of text from the console.
readLine()
- Method in interface java.io.
DataInput
Reads the next line of text from the input stream.
readLine()
- Method in class java.io.
DataInputStream
Deprecated.
This method does not properly convert bytes to characters.
 As of JDK 1.1, the preferred way to read lines of text is via the
BufferedReader.readLine()
method.  Programs that use the
DataInputStream
class to read lines can be converted to use
 the
BufferedReader
class by replacing code of the form:
DataInputStream d = new DataInputStream(in);
with:
BufferedReader d
          = new BufferedReader(new InputStreamReader(in));
readLine()
- Method in class java.io.
LineNumberReader
Read a line of text.
readLine()
- Method in class java.io.
ObjectInputStream
Deprecated.
This method does not properly convert bytes to characters.
          see DataInputStream for the details and alternatives.
readLine()
- Method in class java.io.
RandomAccessFile
Reads the next line of text from this file.
readLine()
- Method in interface javax.imageio.stream.
ImageInputStream
Reads the next line of text from the input stream.
readLine()
- Method in class javax.imageio.stream.
ImageInputStreamImpl
readLine(String)
- Method in interface jdk.jshell.
JShellConsole
Provides a prompt, then reads a single line of text from the
 console.
readLine(String, Object...)
- Method in class java.io.
Console
Provides a formatted prompt, then reads a single line of text from the
 console.
readLock()
- Method in interface java.util.concurrent.locks.
ReadWriteLock
Returns the lock used for reading.
readLock()
- Method in class java.util.concurrent.locks.
ReentrantReadWriteLock
readLock()
- Method in class java.util.concurrent.locks.
StampedLock
Non-exclusively acquires the lock, blocking if necessary
 until available.
readLock()
- Method in class javax.swing.text.
AbstractDocument
Acquires a lock to begin reading some state from the
 document.
ReadLock(ReentrantReadWriteLock)
- Constructor for class java.util.concurrent.locks.
ReentrantReadWriteLock.ReadLock
Constructor for use by subclasses.
readLockInterruptibly()
- Method in class java.util.concurrent.locks.
StampedLock
Non-exclusively acquires the lock, blocking if necessary
 until available or the current thread is interrupted.
readLong()
- Method in interface java.io.
DataInput
Reads eight input bytes and returns
 a
long
value.
readLong()
- Method in class java.io.
DataInputStream
See the general contract of the
readLong
method of
DataInput
.
readLong()
- Method in class java.io.
ObjectInputStream
Reads a 64-bit long.
readLong()
- Method in class java.io.
RandomAccessFile
Reads a signed 64-bit integer from this file.
readLong()
- Method in interface java.sql.
SQLInput
Reads the next attribute in the stream and returns it as a
long
in the Java programming language.
readLong()
- Method in interface javax.imageio.stream.
ImageInputStream
Reads 8 bytes from the stream, and (conceptually) concatenates
 them according to the current byte order and returns the result
 as a
long
.
readLong()
- Method in class javax.imageio.stream.
ImageInputStreamImpl
readLong()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Retrieves the next attribute in this
SQLInputImpl
object
 as a
long
in the Java programming language.
readNBytes(byte[], int, int)
- Method in class java.io.
ByteArrayInputStream
readNBytes(byte[], int, int)
- Method in class java.io.
InputStream
Reads the requested number of bytes from the input stream into the given
 byte array.
readNBytes(byte[], int, int)
- Method in class java.util.zip.
ZipInputStream
Reads the requested number of bytes from the input stream into the given
 byte array for the current ZIP entry returning the number of
 inflated bytes.
readNBytes(int)
- Method in class java.io.
InputStream
Reads up to a specified number of bytes from the input stream.
readNBytes(int)
- Method in class java.util.zip.
ZipInputStream
Reads up to a specified number of bytes from the input stream
 for the current ZIP entry.
readNClob()
- Method in interface java.sql.
SQLInput
Reads an SQL
NCLOB
value from the stream and returns it as a
NClob
object in the Java programming language.
readNClob()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Reads an SQL
NCLOB
value from the stream and returns it as a
Clob
object in the Java programming language.
readNString()
- Method in interface java.sql.
SQLInput
Reads the next attribute in the stream and returns it as a
String
in the Java programming language.
readNString()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Reads the next attribute in the stream and returns it as a
String
in the Java programming language.
readObject()
- Method in class java.beans.
XMLDecoder
Reads the next object from the underlying input stream.
readObject()
- Method in interface java.io.
ObjectInput
Read and return an object.
readObject()
- Method in class java.io.
ObjectInputStream
Read an object from the ObjectInputStream.
readObject()
- Method in interface java.sql.
SQLInput
Reads the datum at the head of the stream and returns it as an
Object
in the Java programming language.
readObject()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Retrieves the value at the head of this
SQLInputImpl
object as an
Object
in the Java programming language.
readObject(Class<T>)
- Method in interface java.sql.
SQLInput
Reads the next attribute in the stream and returns it as an
Object
in the Java programming language.
readObjectOverride()
- Method in class java.io.
ObjectInputStream
This method is called by trusted subclasses of ObjectInputStream that
 constructed ObjectInputStream using the protected no-arg constructor.
readOnlyAction
- Static variable in class javax.swing.text.
DefaultEditorKit
Name of the action to set the editor into read-only
 mode.
ReadOnlyBufferException
- Exception Class in
java.nio
Unchecked exception thrown when a content-mutation method such as
put
or
compact
is invoked upon a read-only buffer.
ReadOnlyBufferException()
- Constructor for exception class java.nio.
ReadOnlyBufferException
Constructs an instance of this class.
Read-only buffers
- Search tag in class java.nio.Buffer
Section
ReadOnlyFileSystemException
- Exception Class in
java.nio.file
Unchecked exception thrown when an attempt is made to update an object
 associated with a
read-only
FileSystem
.
ReadOnlyFileSystemException()
- Constructor for exception class java.nio.file.
ReadOnlyFileSystemException
Constructs an instance of this class.
readPacket()
- Method in class com.sun.jdi.connect.spi.
Connection
Reads a packet from the target VM.
readPassword()
- Method in class java.io.
Console
Reads a password or passphrase from the console with echoing disabled
readPassword(String)
- Method in interface jdk.jshell.
JShellConsole
Provides a prompt, then reads a password or passphrase from
 the console with echoing disabled.
readPassword(String, Object...)
- Method in class java.io.
Console
Provides a formatted prompt, then reads a password or passphrase from
 the console with echoing disabled.
ReadPendingException
- Exception Class in
java.nio.channels
Unchecked exception thrown when an attempt is made to read from an
 asynchronous socket channel and a previous read has not completed.
ReadPendingException()
- Constructor for exception class java.nio.channels.
ReadPendingException
Constructs an instance of this class.
readRaster(int, ImageReadParam)
- Method in class javax.imageio.
ImageReader
Returns a new
Raster
object containing the raw pixel data
 from the image stream, without any color conversion applied.
readRef()
- Method in interface java.sql.
SQLInput
Reads an SQL
REF
value from the stream and returns it as a
Ref
object in the Java programming language.
readRef()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Retrieves the value at the head of this
SQLInputImpl
object
 as a
Ref
object in the Java programming language.
readResolve()
- Method in class java.awt.
AWTKeyStroke
Returns a cached instance of
AWTKeyStroke
(or a subclass of
AWTKeyStroke
) which is equal to this instance.
readResolve()
- Method in class java.awt.color.
ICC_Profile
Resolves instances being deserialized into instances registered with CMM.
readResolve()
- Method in class java.awt.font.
TextAttribute
Resolves instances being deserialized to the predefined constants.
readResolve()
- Method in class java.security.cert.
Certificate.CertificateRep
Returns a
Certificate
with the type and data of this
CertificateRep
.
readResolve()
- Method in class java.security.cert.
CertPath.CertPathRep
Returns a
CertPath
constructed from the type and data of
 this
CertPathRep
.
readResolve()
- Method in class java.security.
KeyRep
Resolve the Key object.
readResolve()
- Method in class java.text.
AttributedCharacterIterator.Attribute
Resolves instances being deserialized to the predefined constants.
readResolve()
- Method in class java.text.
DateFormat.Field
Resolves instances being deserialized to the predefined constants.
readResolve()
- Method in class java.text.
MessageFormat.Field
Resolves instances being deserialized to the predefined constants.
readResolve()
- Method in class java.text.
NumberFormat.Field
Resolves instances being deserialized to the predefined constants.
readResolve()
- Method in class javax.management.openmbean.
SimpleType
Replace an object read from an
ObjectInputStream
with the unique instance for that
 value.
readResolve()
- Method in class javax.print.attribute.
EnumSyntax
During object input, convert this deserialized enumeration instance to
 the proper enumeration value defined in the enumeration attribute class.
readRowId()
- Method in interface java.sql.
SQLInput
Reads an SQL
ROWID
value from the stream and returns it as a
RowId
object in the Java programming language.
readRowId()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Reads an SQL
ROWID
value from the stream and returns it as a
RowId
object in the Java programming language.
reads()
- Method in class java.lang.module.
ResolvedModule
Returns the set of resolved modules that this resolved module reads.
readShort()
- Method in interface java.io.
DataInput
Reads two input bytes and returns
 a
short
value.
readShort()
- Method in class java.io.
DataInputStream
See the general contract of the
readShort
method of
DataInput
.
readShort()
- Method in class java.io.
ObjectInputStream
Reads a 16-bit short.
readShort()
- Method in class java.io.
RandomAccessFile
Reads a signed 16-bit number from this file.
readShort()
- Method in interface java.sql.
SQLInput
Reads the next attribute in the stream and returns it as a
short
in the Java programming language.
readShort()
- Method in interface javax.imageio.stream.
ImageInputStream
Reads two bytes from the stream, and (conceptually)
 concatenates them according to the current byte order, and
 returns the result as a
short
value.
readShort()
- Method in class javax.imageio.stream.
ImageInputStreamImpl
readShort()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Retrieves the next attribute in this
SQLInputImpl
object
 as a
short
in the Java programming language.
readSQL(SQLInput, String)
- Method in interface java.sql.
SQLData
Populates this object with data read from the database.
readSQLXML()
- Method in interface java.sql.
SQLInput
Reads an SQL
XML
value from the stream and returns it as a
SQLXML
object in the Java programming language.
readSQLXML()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Reads an SQL
XML
value from the stream and returns it as a
SQLXML
object in the Java programming language.
readStream(long)
- Method in interface jdk.management.jfr.
FlightRecorderMXBean
Reads a portion of data from the stream with the specified ID, or returns
null
if no more data is available.
readStreamHeader()
- Method in class java.io.
ObjectInputStream
The readStreamHeader method is provided to allow subclasses to read and
 verify their own stream headers.
readString()
- Method in interface java.sql.
SQLInput
Reads the next attribute in the stream and returns it as a
String
in the Java programming language.
readString()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Retrieves the next attribute in this
SQLInputImpl
object as
 a
String
in the Java programming language.
readString(Path)
- Static method in class java.nio.file.
Files
Reads all content from a file into a string, decoding from bytes to characters
 using the
UTF-8
charset
.
readString(Path, Charset)
- Static method in class java.nio.file.
Files
Reads all characters from a file into a string, decoding from bytes to characters
 using the specified
charset
.
readSymbolicLink(Path)
- Static method in class java.nio.file.
Files
Reads the target of a symbolic link
(optional operation)
.
readSymbolicLink(Path)
- Method in class java.nio.file.spi.
FileSystemProvider
Reads the target of a symbolic link.
readThumbnail(int, int)
- Method in class javax.imageio.
ImageReader
Returns the thumbnail preview image indexed by
thumbnailIndex
, associated with the image indexed
 by
ImageIndex
as a
BufferedImage
.
readTile(int, int, int)
- Method in class javax.imageio.
ImageReader
Reads the tile indicated by the
tileX
and
tileY
arguments, returning it as a
BufferedImage
.
readTileRaster(int, int, int)
- Method in class javax.imageio.
ImageReader
Returns a new
Raster
object containing the raw
 pixel data from the tile, without any color conversion applied.
readTime()
- Method in interface java.sql.
SQLInput
Reads the next attribute in the stream and returns it as a
java.sql.Time
object.
readTime()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Retrieves the next attribute in this
SQLInputImpl
object as
 a
java.sql.Time
object.
readTimestamp()
- Method in interface java.sql.
SQLInput
Reads the next attribute in the stream and returns it as a
java.sql.Timestamp
object.
readTimestamp()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Retrieves the next attribute in this
SQLInputImpl
object as
 a
java.sql.Timestamp
object.
readUnlock()
- Method in class javax.swing.text.
AbstractDocument
Does a read unlock.
readUnshared()
- Method in class java.io.
ObjectInputStream
Reads an "unshared" object from the ObjectInputStream.
readUnsignedByte()
- Method in interface java.io.
DataInput
Reads one input byte, zero-extends
 it to type
int
, and returns
 the result, which is therefore in the range
0
through
255
.
readUnsignedByte()
- Method in class java.io.
DataInputStream
See the general contract of the
readUnsignedByte
method of
DataInput
.
readUnsignedByte()
- Method in class java.io.
ObjectInputStream
Reads an unsigned 8-bit byte.
readUnsignedByte()
- Method in class java.io.
RandomAccessFile
Reads an unsigned eight-bit number from this file.
readUnsignedByte()
- Method in interface javax.imageio.stream.
ImageInputStream
Reads a byte from the stream, and (conceptually) converts it to
 an int, masks it with
0xff
in order to strip off
 any sign-extension bits, and returns it as a
byte
value.
readUnsignedByte()
- Method in class javax.imageio.stream.
ImageInputStreamImpl
readUnsignedInt()
- Method in interface javax.imageio.stream.
ImageInputStream
Reads 4 bytes from the stream, and (conceptually) concatenates
 them according to the current byte order, converts the result
 to a long, masks it with
0xffffffffL
in order to
 strip off any sign-extension bits, and returns the result as an
 unsigned
long
value.
readUnsignedInt()
- Method in class javax.imageio.stream.
ImageInputStreamImpl
readUnsignedShort()
- Method in interface java.io.
DataInput
Reads two input bytes and returns
 an
int
value in the range
0
through
65535
.
readUnsignedShort()
- Method in class java.io.
DataInputStream
See the general contract of the
readUnsignedShort
method of
DataInput
.
readUnsignedShort()
- Method in class java.io.
ObjectInputStream
Reads an unsigned 16-bit short.
readUnsignedShort()
- Method in class java.io.
RandomAccessFile
Reads an unsigned 16-bit number from this file.
readUnsignedShort()
- Method in interface javax.imageio.stream.
ImageInputStream
Reads two bytes from the stream, and (conceptually)
 concatenates them according to the current byte order, converts
 the resulting value to an
int
, masks it with
0xffff
in order to strip off any sign-extension
 buts, and returns the result as an unsigned
int
value.
readUnsignedShort()
- Method in class javax.imageio.stream.
ImageInputStreamImpl
readURL()
- Method in interface java.sql.
SQLInput
Reads an SQL
DATALINK
value from the stream and returns it as a
java.net.URL
object in the Java programming language.
readURL()
- Method in class javax.sql.rowset.serial.
SQLInputImpl
Reads an SQL
DATALINK
value from the stream and
 returns it as an
URL
object in the Java programming
 language.
readUTF()
- Method in interface java.io.
DataInput
Reads in a string that has been encoded using a
modified UTF-8
format.
readUTF()
- Method in class java.io.
DataInputStream
See the general contract of the
readUTF
method of
DataInput
.
readUTF()
- Method in class java.io.
ObjectInputStream
Reads a String in
modified UTF-8
format.
readUTF()
- Method in class java.io.
RandomAccessFile
Reads in a string from this file.
readUTF()
- Method in interface javax.imageio.stream.
ImageInputStream
Reads in a string that has been encoded using a
modified UTF-8
format.
readUTF()
- Method in class javax.imageio.stream.
ImageInputStreamImpl
readUTF(DataInput)
- Static method in class java.io.
DataInputStream
Reads from the
 stream
in
a representation
 of a Unicode  character string encoded in
modified UTF-8
format;
 this string of characters is then returned as a
String
.
ReadWriteLock
- Interface in
java.util.concurrent.locks
A
ReadWriteLock
maintains a pair of associated
locks
, one for read-only operations and one for writing.
readWriteSelectableChannel(FileDescriptor, Channels.SelectableChannelCloser)
- Static method in class jdk.nio.
Channels
Creates a selectable channel to a file descriptor that supports an
operation-set
of
OP_READ
and
OP_WRITE
.
readXml(InputStream)
- Method in interface javax.sql.rowset.
WebRowSet
Reads a stream based XML input to populate this
WebRowSet
object.
readXml(Reader)
- Method in interface javax.sql.rowset.
WebRowSet
Reads a
WebRowSet
object in its XML format from the given
Reader
object.
readXML(WebRowSet, Reader)
- Method in interface javax.sql.rowset.spi.
XmlReader
Reads and parses the given
WebRowSet
object from the given
 input stream in XML format.
ready()
- Method in class java.io.
BufferedReader
Tells whether this stream is ready to be read.
ready()
- Method in class java.io.
CharArrayReader
Tells whether this stream is ready to be read.
ready()
- Method in class java.io.
FilterReader
Tells whether this stream is ready to be read.
ready()
- Method in class java.io.
InputStreamReader
Tells whether this stream is ready to be read.
ready()
- Method in class java.io.
PipedReader
Tell whether this stream is ready to be read.
ready()
- Method in class java.io.
PushbackReader
Tells whether this stream is ready to be read.
ready()
- Method in class java.io.
Reader
Tells whether this stream is ready to be read.
ready()
- Method in class java.io.
StringReader
Tells whether this stream is ready to be read.
readyOps()
- Method in class java.nio.channels.
SelectionKey
Retrieves this key's ready-operation set.
REAL
- Enum constant in enum class java.sql.
JDBCType
Identifies the generic SQL type
REAL
.
REAL
- Static variable in class java.sql.
Types
The constant in the Java programming language, sometimes referred
 to as a type code, that identifies the generic SQL type
REAL
.
realEditor
- Variable in class javax.swing.tree.
DefaultTreeCellEditor
Editor handling the editing.
realm
- Variable in class com.sun.net.httpserver.
BasicAuthenticator
The HTTP Basic authentication realm.
RealmCallback
- Class in
javax.security.sasl
This callback is used by
SaslClient
and
SaslServer
to retrieve realm information.
RealmCallback(String)
- Constructor for class javax.security.sasl.
RealmCallback
Constructs a
RealmCallback
with a prompt.
RealmCallback(String, String)
- Constructor for class javax.security.sasl.
RealmCallback
Constructs a
RealmCallback
with a prompt and default
 realm information.
RealmChoiceCallback
- Class in
javax.security.sasl
This callback is used by
SaslClient
and
SaslServer
to obtain a realm given a list of realm choices.
RealmChoiceCallback(String, String[], int, boolean)
- Constructor for class javax.security.sasl.
RealmChoiceCallback
Constructs a
RealmChoiceCallback
with a prompt, a list of
 choices and a default choice.
realSource
- Variable in class javax.swing.undo.
UndoableEditSupport
The real source.
rearrange(VectorShuffle<E>)
- Method in class jdk.incubator.vector.
Vector
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle.
rearrange(VectorShuffle<E>)
- Method in class jdk.incubator.vector.
VectorShuffle
Rearranges the lane elements of this shuffle selecting lane indexes
 controlled by another shuffle.
rearrange(VectorShuffle<E>, Vector<E>)
- Method in class jdk.incubator.vector.
Vector
Rearranges the lane elements of two vectors, selecting lanes
 under the control of a specific shuffle, using both normal and
 exceptional indexes in the shuffle to steer data.
rearrange(VectorShuffle<E>, VectorMask<E>)
- Method in class jdk.incubator.vector.
Vector
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle and a mask.
rearrange(VectorShuffle<Byte>)
- Method in class jdk.incubator.vector.
ByteVector
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle.
rearrange(VectorShuffle<Byte>, Vector<Byte>)
- Method in class jdk.incubator.vector.
ByteVector
Rearranges the lane elements of two vectors, selecting lanes
 under the control of a specific shuffle, using both normal and
 exceptional indexes in the shuffle to steer data.
rearrange(VectorShuffle<Byte>, VectorMask<Byte>)
- Method in class jdk.incubator.vector.
ByteVector
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle and a mask.
rearrange(VectorShuffle<Double>)
- Method in class jdk.incubator.vector.
DoubleVector
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle.
rearrange(VectorShuffle<Double>, Vector<Double>)
- Method in class jdk.incubator.vector.
DoubleVector
Rearranges the lane elements of two vectors, selecting lanes
 under the control of a specific shuffle, using both normal and
 exceptional indexes in the shuffle to steer data.
rearrange(VectorShuffle<Double>, VectorMask<Double>)
- Method in class jdk.incubator.vector.
DoubleVector
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle and a mask.
rearrange(VectorShuffle<Float>)
- Method in class jdk.incubator.vector.
FloatVector
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle.
rearrange(VectorShuffle<Float>, Vector<Float>)
- Method in class jdk.incubator.vector.
FloatVector
Rearranges the lane elements of two vectors, selecting lanes
 under the control of a specific shuffle, using both normal and
 exceptional indexes in the shuffle to steer data.
rearrange(VectorShuffle<Float>, VectorMask<Float>)
- Method in class jdk.incubator.vector.
FloatVector
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle and a mask.
rearrange(VectorShuffle<Integer>)
- Method in class jdk.incubator.vector.
IntVector
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle.
rearrange(VectorShuffle<Integer>, Vector<Integer>)
- Method in class jdk.incubator.vector.
IntVector
Rearranges the lane elements of two vectors, selecting lanes
 under the control of a specific shuffle, using both normal and
 exceptional indexes in the shuffle to steer data.
rearrange(VectorShuffle<Integer>, VectorMask<Integer>)
- Method in class jdk.incubator.vector.
IntVector
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle and a mask.
rearrange(VectorShuffle<Long>)
- Method in class jdk.incubator.vector.
LongVector
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle.
rearrange(VectorShuffle<Long>, Vector<Long>)
- Method in class jdk.incubator.vector.
LongVector
Rearranges the lane elements of two vectors, selecting lanes
 under the control of a specific shuffle, using both normal and
 exceptional indexes in the shuffle to steer data.
rearrange(VectorShuffle<Long>, VectorMask<Long>)
- Method in class jdk.incubator.vector.
LongVector
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle and a mask.
rearrange(VectorShuffle<Short>)
- Method in class jdk.incubator.vector.
ShortVector
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle.
rearrange(VectorShuffle<Short>, Vector<Short>)
- Method in class jdk.incubator.vector.
ShortVector
Rearranges the lane elements of two vectors, selecting lanes
 under the control of a specific shuffle, using both normal and
 exceptional indexes in the shuffle to steer data.
rearrange(VectorShuffle<Short>, VectorMask<Short>)
- Method in class jdk.incubator.vector.
ShortVector
Rearranges the lane elements of this vector, selecting lanes
 under the control of a specific shuffle and a mask.
REASON_UNKNOWN
- Enum constant in enum class java.sql.
ClientInfoStatus
The client info property could not be set for some unknown reason
REASON_UNKNOWN_PROPERTY
- Enum constant in enum class java.sql.
ClientInfoStatus
The client info property name specified was not a recognized property
 name.
REASON_VALUE_INVALID
- Enum constant in enum class java.sql.
ClientInfoStatus
The value specified for the client info property was not valid.
REASON_VALUE_TRUNCATED
- Enum constant in enum class java.sql.
ClientInfoStatus
The value specified for the client info property was too large.
rebind(String, Object)
- Method in interface javax.naming.
Context
Binds a name to an object, overwriting any existing binding.
rebind(String, Object)
- Method in class javax.naming.
InitialContext
rebind(String, Object, Attributes)
- Method in interface javax.naming.directory.
DirContext
Binds a name to an object, along with associated attributes,
 overwriting any existing binding.
rebind(String, Object, Attributes)
- Method in class javax.naming.directory.
InitialDirContext
rebind(String, Remote)
- Static method in class java.rmi.
Naming
Rebinds the specified name to a new remote object.
rebind(String, Remote)
- Method in interface java.rmi.registry.
Registry
Replaces the binding for the specified
name
in
 this registry with the supplied remote reference.
rebind(Name, Object)
- Method in interface javax.naming.
Context
Binds a name to an object, overwriting any existing binding.
rebind(Name, Object)
- Method in class javax.naming.
InitialContext
rebind(Name, Object, Attributes)
- Method in interface javax.naming.directory.
DirContext
Binds a name to an object, along with associated attributes,
 overwriting any existing binding.
rebind(Name, Object, Attributes)
- Method in class javax.naming.directory.
InitialDirContext
Rebinding
- Search tag in class java.lang.ScopedValue
Section
recalculateIfInsetsChanged()
- Method in class javax.swing.plaf.basic.
BasicSliderUI
Recalculates if the insets have changed.
recalculateIfOrientationChanged()
- Method in class javax.swing.plaf.basic.
BasicSliderUI
Recalculates if the orientation has changed.
recalcWidthCache()
- Method in class javax.swing.table.
DefaultTableColumnModel
Recalculates the total combined width of all columns.
receive(int)
- Method in class java.io.
PipedInputStream
Receives a byte of data.
receive(DatagramPacket)
- Method in class java.net.
DatagramSocket
Receives a datagram packet from this socket.
receive(DatagramPacket)
- Method in class java.net.
DatagramSocketImpl
Receive the datagram packet.
receive(ByteBuffer)
- Method in class java.nio.channels.
DatagramChannel
Receives a datagram via this channel.
receive(ByteBuffer, T, NotificationHandler<T>)
- Method in class com.sun.nio.sctp.
SctpChannel
Receives a message into the given buffer and/or handles a notification.
receive(ByteBuffer, T, NotificationHandler<T>)
- Method in class com.sun.nio.sctp.
SctpMultiChannel
Receives a message and/or handles a notification via this channel.
Receiver
- Interface in
javax.sound.midi
A
Receiver
receives
MidiEvent
objects and typically does
 something useful in response, such as interpreting them to generate sound or
 raw MIDI output.
reclaim(AttributeSet)
- Method in interface javax.swing.text.
AbstractDocument.AttributeContext
Reclaims an attribute set.
reclaim(AttributeSet)
- Method in class javax.swing.text.
StyleContext
Returns a set no longer needed by the MutableAttributeSet implementation.
Recognized Properties and Features
- Search tag in class javax.xml.validation.ValidatorHandler
Section
Recommendations for Look and Feels
- Search tag in class javax.swing.LookAndFeel
Section
Recommended DocFlavors
- Search tag in class javax.print.DocFlavor
Section
reconnect(Control[])
- Method in class javax.naming.ldap.
InitialLdapContext
reconnect(Control[])
- Method in interface javax.naming.ldap.
LdapContext
Reconnects to the LDAP server using the supplied controls and
 this context's environment.
Reconstructing an instance of a record class from a CompositeData
- Search tag in annotation interface javax.management.MXBean
Section
Reconstructing an instance of Java type or record class J from a CompositeData
- Search tag in annotation interface javax.management.MXBean
Section
reconvert()
- Method in class java.awt.im.
InputContext
Asks the current input method to reconvert text from the
 current client component.
reconvert()
- Method in interface java.awt.im.spi.
InputMethod
Starts the reconversion operation.
Record
- Class in
java.lang
This is the common base class of all Java language record classes.
Record()
- Constructor for class java.lang.
Record
Constructor for record classes to call.
RECORD
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
ClassTree
representing records.
RECORD
- Enum constant in enum class javax.lang.model.element.
ElementKind
A record class.
RECORD_COMPONENT
- Enum constant in enum class java.lang.annotation.
ElementType
Record component
RECORD_COMPONENT
- Enum constant in enum class javax.lang.model.element.
ElementKind
A record component of a
record
.
RECORD_SUBKIND
- Enum constant in enum class jdk.jshell.
Snippet.SubKind
A record declaration.
RecordComponent
- Class in
java.lang.reflect
A
RecordComponent
provides information about, and dynamic access to, a
 component of a record class.
RecordComponentElement
- Interface in
javax.lang.model.element
Represents a record component.
recordComponentFor(ExecutableElement)
- Method in interface javax.lang.model.util.
Elements
Returns the record component for the given accessor.
recordComponentsIn(Iterable<? extends Element>)
- Static method in class javax.lang.model.util.
ElementFilter
Returns a list of record components in
elements
.
recordComponentsIn(Set<? extends Element>)
- Static method in class javax.lang.model.util.
ElementFilter
Returns a set of record components in
elements
.
recordDisable(Track)
- Method in interface javax.sound.midi.
Sequencer
Disables recording to the specified track.
RecordedClass
- Class in
jdk.jfr.consumer
A recorded Java type, such as a class or an interface.
RecordedClassLoader
- Class in
jdk.jfr.consumer
A recorded Java class loader.
RecordedEvent
- Class in
jdk.jfr.consumer
A recorded event.
RecordedFrame
- Class in
jdk.jfr.consumer
A recorded frame in a stack trace.
RecordedMethod
- Class in
jdk.jfr.consumer
A recorded method.
RecordedObject
- Class in
jdk.jfr.consumer
A complex data type that consists of one or more fields.
RecordedStackTrace
- Class in
jdk.jfr.consumer
A recorded stack trace.
RecordedThread
- Class in
jdk.jfr.consumer
A recorded thread.
RecordedThreadGroup
- Class in
jdk.jfr.consumer
A recorded Java thread group.
recordEnable(Track, int)
- Method in interface javax.sound.midi.
Sequencer
Prepares the specified track for recording events received on a
 particular channel.
recorderInitialized(FlightRecorder)
- Method in interface jdk.jfr.
FlightRecorderListener
Receives notification when Flight Recorder is initialized.
Recording
- Class in
jdk.jfr
Provides means to configure, start, stop and dump recording data to disk.
Recording()
- Constructor for class jdk.jfr.
Recording
Creates a recording without any settings.
Recording(Map<String, String>)
- Constructor for class jdk.jfr.
Recording
Creates a recording with settings from a map of name-value pairs.
Recording(Configuration)
- Constructor for class jdk.jfr.
Recording
Creates a recording with settings from a configuration.
RecordingFile
- Class in
jdk.jfr.consumer
A recording file.
RecordingFile(Path)
- Constructor for class jdk.jfr.consumer.
RecordingFile
Creates a recording file.
RecordingInfo
- Class in
jdk.management.jfr
Management representation of a
Recording
.
Recording options
- Search tag in interface jdk.management.jfr.FlightRecorderMXBean
Section
RecordingState
- Enum Class in
jdk.jfr
Indicates a state in the life cycle of a recording.
recordingStateChanged(Recording)
- Method in interface jdk.jfr.
FlightRecorderListener
Receives notification when the state of a recording changes.
RecordingStream
- Class in
jdk.jfr.consumer
A recording stream produces events from the current JVM (Java Virtual
 Machine).
RecordingStream()
- Constructor for class jdk.jfr.consumer.
RecordingStream
Creates an event stream for the current JVM (Java Virtual Machine).
RecordingStream(Configuration)
- Constructor for class jdk.jfr.consumer.
RecordingStream
Creates a recording stream using settings from a configuration.
recover(int)
- Method in interface javax.transaction.xa.
XAResource
Obtains a list of prepared transaction branches from a resource
 manager.
RECOVERABLE_DEFINED
- Enum constant in enum class jdk.jshell.
Snippet.Status
The snippet is a declaration snippet with potentially recoverable
 unresolved references or other issues in its body
 (in the context of current
JShell
state).
RECOVERABLE_NOT_DEFINED
- Enum constant in enum class jdk.jshell.
Snippet.Status
The snippet is a declaration snippet with potentially recoverable
 unresolved references or other issues
 (in the context of current
JShell
state).
Rect
- Interface in
org.w3c.dom.css
The
Rect
interface is used to represent any rect value.
Rectangle
- Class in
java.awt
A
Rectangle
specifies an area in a coordinate space that is
 enclosed by the
Rectangle
object's upper-left point
(x,y)
in the coordinate space, its width, and its height.
Rectangle()
- Constructor for class java.awt.
Rectangle
Constructs a new
Rectangle
whose upper-left corner
 is at (0, 0) in the coordinate space, and whose width and
 height are both zero.
Rectangle(int, int)
- Constructor for class java.awt.
Rectangle
Constructs a new
Rectangle
whose upper-left corner
 is at (0, 0) in the coordinate space, and whose width and
 height are specified by the arguments of the same name.
Rectangle(int, int, int, int)
- Constructor for class java.awt.
Rectangle
Constructs a new
Rectangle
whose upper-left corner is
 specified as
(x,y)
and whose width and height
 are specified by the arguments of the same name.
Rectangle(Dimension)
- Constructor for class java.awt.
Rectangle
Constructs a new
Rectangle
whose top left corner is
 (0, 0) and whose width and height are specified
 by the
Dimension
argument.
Rectangle(Point)
- Constructor for class java.awt.
Rectangle
Constructs a new
Rectangle
whose upper-left corner is the
 specified
Point
, and whose width and height are both zero.
Rectangle(Point, Dimension)
- Constructor for class java.awt.
Rectangle
Constructs a new
Rectangle
whose upper-left corner is
 specified by the
Point
argument, and
 whose width and height are specified by the
Dimension
argument.
Rectangle(Rectangle)
- Constructor for class java.awt.
Rectangle
Constructs a new
Rectangle
, initialized to match
 the values of the specified
Rectangle
.
Rectangle2D
- Class in
java.awt.geom
The
Rectangle2D
class describes a rectangle
 defined by a location
(x,y)
and dimension
(w x h)
.
Rectangle2D()
- Constructor for class java.awt.geom.
Rectangle2D
This is an abstract class that cannot be instantiated directly.
Rectangle2D.Double
- Class in
java.awt.geom
The
Double
class defines a rectangle specified in
 double coordinates.
Rectangle2D.Float
- Class in
java.awt.geom
The
Float
class defines a rectangle specified in float
 coordinates.
rectangleForCurrentValue()
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI
Returns the area that is reserved for drawing the currently selected item.
RectangularShape
- Class in
java.awt.geom
RectangularShape
is the base class for a number of
Shape
objects whose geometry is defined by a rectangular frame.
RectangularShape()
- Constructor for class java.awt.geom.
RectangularShape
This is an abstract class that cannot be instantiated directly.
rects
- Variable in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Tab rects
RecursiveAction
- Class in
java.util.concurrent
A recursive resultless
ForkJoinTask
.
RecursiveAction()
- Constructor for class java.util.concurrent.
RecursiveAction
Constructor for subclasses to call.
RecursiveTask<V>
- Class in
java.util.concurrent
A recursive result-bearing
ForkJoinTask
.
RecursiveTask()
- Constructor for class java.util.concurrent.
RecursiveTask
Constructor for subclasses to call.
Recursive types
- Search tag in annotation interface javax.management.MXBean
Section
red
- Static variable in class java.awt.
Color
The color red.
RED
- Static variable in class java.awt.
Color
The color red.
REDCOMPONENT
- Static variable in class java.awt.color.
ICC_ProfileRGB
Used to get a gamma value or TRC for the red component.
redefine(ExecutionControl.ClassBytecodes[])
- Method in class jdk.jshell.execution.
DirectExecutionControl
redefine(ExecutionControl.ClassBytecodes[])
- Method in class jdk.jshell.execution.
JdiExecutionControl
Redefine the specified classes.
redefine(ExecutionControl.ClassBytecodes[])
- Method in class jdk.jshell.execution.
RemoteExecutionControl
Redefine processing on the remote end is only to register the redefined classes
redefine(ExecutionControl.ClassBytecodes[])
- Method in class jdk.jshell.execution.
StreamingExecutionControl
redefine(ExecutionControl.ClassBytecodes[])
- Method in interface jdk.jshell.spi.
ExecutionControl
Attempts to redefine previously loaded classes.
redefineClasses(ClassDefinition...)
- Method in interface java.lang.instrument.
Instrumentation
Redefine the supplied set of classes using the supplied class files.
redefineClasses(Map<? extends ReferenceType, byte[]>)
- Method in interface com.sun.jdi.
VirtualMachine
All classes given are redefined according to the
 definitions supplied.
redefineModule(Module, Set<Module>, Map<String, Set<Module>>, Map<String, Set<Module>>, Set<Class<?>>, Map<Class<?>, List<Class<?>>>)
- Method in interface java.lang.instrument.
Instrumentation
Redefine a module to expand the set of modules that it reads, the set of
 packages that it exports or opens, or the services that it uses or
 provides.
redirectError()
- Method in class java.lang.
ProcessBuilder
Returns this process builder's standard error destination.
redirectError(File)
- Method in class java.lang.
ProcessBuilder
Sets this process builder's standard error destination to a file.
redirectError(ProcessBuilder.Redirect)
- Method in class java.lang.
ProcessBuilder
Sets this process builder's standard error destination.
redirectErrorStream()
- Method in class java.lang.
ProcessBuilder
Tells whether this process builder merges standard error and
 standard output.
redirectErrorStream(boolean)
- Method in class java.lang.
ProcessBuilder
Sets this process builder's
redirectErrorStream
property.
redirectInput()
- Method in class java.lang.
ProcessBuilder
Returns this process builder's standard input source.
redirectInput(File)
- Method in class java.lang.
ProcessBuilder
Sets this process builder's standard input source to a file.
redirectInput(ProcessBuilder.Redirect)
- Method in class java.lang.
ProcessBuilder
Sets this process builder's standard input source.
redirectOutput()
- Method in class java.lang.
ProcessBuilder
Returns this process builder's standard output destination.
redirectOutput(File)
- Method in class java.lang.
ProcessBuilder
Sets this process builder's standard output destination to a file.
redirectOutput(ProcessBuilder.Redirect)
- Method in class java.lang.
ProcessBuilder
Sets this process builder's standard output destination.
redispatchEvent(Component, AWTEvent)
- Method in class java.awt.
KeyboardFocusManager
Redispatches an AWTEvent in such a way that the AWT event dispatcher
 will not recursively request that the KeyboardFocusManager, or any
 installed KeyEventDispatchers, dispatch the event again.
redo()
- Method in class javax.swing.text.
AbstractDocument.DefaultDocumentEvent
Redoes a change.
redo()
- Method in class javax.swing.text.
AbstractDocument.ElementEdit
Redoes a change.
redo()
- Method in class javax.swing.text.
DefaultStyledDocument.AttributeUndoableEdit
Redoes a change.
redo()
- Method in class javax.swing.undo.
AbstractUndoableEdit
Throws
CannotRedoException
if
canRedo
returns false.
redo()
- Method in class javax.swing.undo.
CompoundEdit
Sends
redo
to all contained
UndoableEdit
s in the order in
 which they were added.
redo()
- Method in class javax.swing.undo.
StateEdit
Tells the edited object to apply the state after the edit
redo()
- Method in interface javax.swing.undo.
UndoableEdit
Re-applies the edit.
redo()
- Method in class javax.swing.undo.
UndoManager
Redoes the appropriate edits.
RedoName
- Static variable in class javax.swing.undo.
AbstractUndoableEdit
String returned by
getRedoPresentationName
;
 as of Java 2 platform v1.3.1 this field is no longer used.
redoTo(UndoableEdit)
- Method in class javax.swing.undo.
UndoManager
Redoes all changes from the index of the next edit to
edit
, updating the index of the next edit appropriately.
reduce(double, DoubleBinaryOperator)
- Method in interface java.util.stream.
DoubleStream
Performs a
reduction
on the
 elements of this stream, using the provided identity value and an
associative
accumulation function, and returns the reduced value.
reduce(int, IntBinaryOperator)
- Method in interface java.util.stream.
IntStream
Performs a
reduction
on the
 elements of this stream, using the provided identity value and an
associative
accumulation function, and returns the reduced value.
reduce(long, BiFunction<? super K, ? super V, ? extends U>, BiFunction<? super U, ? super U, ? extends U>)
- Method in class java.util.concurrent.
ConcurrentHashMap
Returns the result of accumulating the given transformation
 of all (key, value) pairs using the given reducer to
 combine values, or null if none.
reduce(long, LongBinaryOperator)
- Method in interface java.util.stream.
LongStream
Performs a
reduction
on the
 elements of this stream, using the provided identity value and an
associative
accumulation function, and returns the reduced value.
reduce(BinaryOperator<T>)
- Method in interface java.util.stream.
Stream
Performs a
reduction
on the
 elements of this stream, using an
associative
accumulation
 function, and returns an
Optional
describing the reduced value,
 if any.
reduce(DoubleBinaryOperator)
- Method in interface java.util.stream.
DoubleStream
Performs a
reduction
on the
 elements of this stream, using an
associative
accumulation
 function, and returns an
OptionalDouble
describing the reduced
 value, if any.
reduce(IntBinaryOperator)
- Method in interface java.util.stream.
IntStream
Performs a
reduction
on the
 elements of this stream, using an
associative
accumulation
 function, and returns an
OptionalInt
describing the reduced value,
 if any.
reduce(LongBinaryOperator)
- Method in interface java.util.stream.
LongStream
Performs a
reduction
on the
 elements of this stream, using an
associative
accumulation
 function, and returns an
OptionalLong
describing the reduced value,
 if any.
reduce(R, R)
- Method in class com.sun.source.util.
DocTreeScanner
Reduces two results into a combined result.
reduce(R, R)
- Method in class com.sun.source.util.
TreeScanner
Reduces two results into a combined result.
reduce(T, BinaryOperator<T>)
- Method in interface java.util.stream.
Stream
Performs a
reduction
on the
 elements of this stream, using the provided identity value and an
associative
accumulation function, and returns the reduced value.
reduce(U, BiFunction<U, ? super T, U>, BinaryOperator<U>)
- Method in interface java.util.stream.
Stream
Performs a
reduction
on the
 elements of this stream, using the provided identity, accumulation and
 combining functions.
reduceEntries(long, BiFunction<Map.Entry<K, V>, Map.Entry<K, V>, ? extends Map.Entry<K, V>>)
- Method in class java.util.concurrent.
ConcurrentHashMap
Returns the result of accumulating all entries using the
 given reducer to combine values, or null if none.
reduceEntries(long, Function<Map.Entry<K, V>, ? extends U>, BiFunction<? super U, ? super U, ? extends U>)
- Method in class java.util.concurrent.
ConcurrentHashMap
Returns the result of accumulating the given transformation
 of all entries using the given reducer to combine values,
 or null if none.
reduceEntriesToDouble(long, ToDoubleFunction<Map.Entry<K, V>>, double, DoubleBinaryOperator)
- Method in class java.util.concurrent.
ConcurrentHashMap
Returns the result of accumulating the given transformation
 of all entries using the given reducer to combine values,
 and the given basis as an identity value.
reduceEntriesToInt(long, ToIntFunction<Map.Entry<K, V>>, int, IntBinaryOperator)
- Method in class java.util.concurrent.
ConcurrentHashMap
Returns the result of accumulating the given transformation
 of all entries using the given reducer to combine values,
 and the given basis as an identity value.
reduceEntriesToLong(long, ToLongFunction<Map.Entry<K, V>>, long, LongBinaryOperator)
- Method in class java.util.concurrent.
ConcurrentHashMap
Returns the result of accumulating the given transformation
 of all entries using the given reducer to combine values,
 and the given basis as an identity value.
reduceKeys(long, BiFunction<? super K, ? super K, ? extends K>)
- Method in class java.util.concurrent.
ConcurrentHashMap
Returns the result of accumulating all keys using the given
 reducer to combine values, or null if none.
reduceKeys(long, Function<? super K, ? extends U>, BiFunction<? super U, ? super U, ? extends U>)
- Method in class java.util.concurrent.
ConcurrentHashMap
Returns the result of accumulating the given transformation
 of all keys using the given reducer to combine values, or
 null if none.
reduceKeysToDouble(long, ToDoubleFunction<? super K>, double, DoubleBinaryOperator)
- Method in class java.util.concurrent.
ConcurrentHashMap
Returns the result of accumulating the given transformation
 of all keys using the given reducer to combine values, and
 the given basis as an identity value.
reduceKeysToInt(long, ToIntFunction<? super K>, int, IntBinaryOperator)
- Method in class java.util.concurrent.
ConcurrentHashMap
Returns the result of accumulating the given transformation
 of all keys using the given reducer to combine values, and
 the given basis as an identity value.
reduceKeysToLong(long, ToLongFunction<? super K>, long, LongBinaryOperator)
- Method in class java.util.concurrent.
ConcurrentHashMap
Returns the result of accumulating the given transformation
 of all keys using the given reducer to combine values, and
 the given basis as an identity value.
reduceLanes(VectorOperators.Associative)
- Method in class jdk.incubator.vector.
ByteVector
Returns a value accumulated from all the lanes of this vector.
reduceLanes(VectorOperators.Associative)
- Method in class jdk.incubator.vector.
DoubleVector
Returns a value accumulated from all the lanes of this vector.
reduceLanes(VectorOperators.Associative)
- Method in class jdk.incubator.vector.
FloatVector
Returns a value accumulated from all the lanes of this vector.
reduceLanes(VectorOperators.Associative)
- Method in class jdk.incubator.vector.
IntVector
Returns a value accumulated from all the lanes of this vector.
reduceLanes(VectorOperators.Associative)
- Method in class jdk.incubator.vector.
LongVector
Returns a value accumulated from all the lanes of this vector.
reduceLanes(VectorOperators.Associative)
- Method in class jdk.incubator.vector.
ShortVector
Returns a value accumulated from all the lanes of this vector.
reduceLanes(VectorOperators.Associative, VectorMask<Byte>)
- Method in class jdk.incubator.vector.
ByteVector
Returns a value accumulated from selected lanes of this vector,
 controlled by a mask.
reduceLanes(VectorOperators.Associative, VectorMask<Double>)
- Method in class jdk.incubator.vector.
DoubleVector
Returns a value accumulated from selected lanes of this vector,
 controlled by a mask.
reduceLanes(VectorOperators.Associative, VectorMask<Float>)
- Method in class jdk.incubator.vector.
FloatVector
Returns a value accumulated from selected lanes of this vector,
 controlled by a mask.
reduceLanes(VectorOperators.Associative, VectorMask<Integer>)
- Method in class jdk.incubator.vector.
IntVector
Returns a value accumulated from selected lanes of this vector,
 controlled by a mask.
reduceLanes(VectorOperators.Associative, VectorMask<Long>)
- Method in class jdk.incubator.vector.
LongVector
Returns a value accumulated from selected lanes of this vector,
 controlled by a mask.
reduceLanes(VectorOperators.Associative, VectorMask<Short>)
- Method in class jdk.incubator.vector.
ShortVector
Returns a value accumulated from selected lanes of this vector,
 controlled by a mask.
reduceLanesToLong(VectorOperators.Associative)
- Method in class jdk.incubator.vector.
Vector
Returns a value accumulated from all the lanes of this vector.
reduceLanesToLong(VectorOperators.Associative, VectorMask<E>)
- Method in class jdk.incubator.vector.
Vector
Returns a value accumulated from selected lanes of this vector,
 controlled by a mask.
reducePermits(int)
- Method in class java.util.concurrent.
Semaphore
Shrinks the number of available permits by the indicated
 reduction.
reduceToDouble(long, ToDoubleBiFunction<? super K, ? super V>, double, DoubleBinaryOperator)
- Method in class java.util.concurrent.
ConcurrentHashMap
Returns the result of accumulating the given transformation
 of all (key, value) pairs using the given reducer to
 combine values, and the given basis as an identity value.
reduceToInt(long, ToIntBiFunction<? super K, ? super V>, int, IntBinaryOperator)
- Method in class java.util.concurrent.
ConcurrentHashMap
Returns the result of accumulating the given transformation
 of all (key, value) pairs using the given reducer to
 combine values, and the given basis as an identity value.
reduceToLong(long, ToLongBiFunction<? super K, ? super V>, long, LongBinaryOperator)
- Method in class java.util.concurrent.
ConcurrentHashMap
Returns the result of accumulating the given transformation
 of all (key, value) pairs using the given reducer to
 combine values, and the given basis as an identity value.
reduceValues(long, BiFunction<? super V, ? super V, ? extends V>)
- Method in class java.util.concurrent.
ConcurrentHashMap
Returns the result of accumulating all values using the
 given reducer to combine values, or null if none.
reduceValues(long, Function<? super V, ? extends U>, BiFunction<? super U, ? super U, ? extends U>)
- Method in class java.util.concurrent.
ConcurrentHashMap
Returns the result of accumulating the given transformation
 of all values using the given reducer to combine values, or
 null if none.
reduceValuesToDouble(long, ToDoubleFunction<? super V>, double, DoubleBinaryOperator)
- Method in class java.util.concurrent.
ConcurrentHashMap
Returns the result of accumulating the given transformation
 of all values using the given reducer to combine values,
 and the given basis as an identity value.
reduceValuesToInt(long, ToIntFunction<? super V>, int, IntBinaryOperator)
- Method in class java.util.concurrent.
ConcurrentHashMap
Returns the result of accumulating the given transformation
 of all values using the given reducer to combine values,
 and the given basis as an identity value.
reduceValuesToLong(long, ToLongFunction<? super V>, long, LongBinaryOperator)
- Method in class java.util.concurrent.
ConcurrentHashMap
Returns the result of accumulating the given transformation
 of all values using the given reducer to combine values,
 and the given basis as an identity value.
reducing(BinaryOperator<T>)
- Static method in class java.util.stream.
Collectors
Returns a
Collector
which performs a reduction of its
 input elements under a specified
BinaryOperator
.
reducing(T, BinaryOperator<T>)
- Static method in class java.util.stream.
Collectors
Returns a
Collector
which performs a reduction of its
 input elements under a specified
BinaryOperator
using the
 provided identity.
reducing(U, Function<? super T, ? extends U>, BinaryOperator<U>)
- Static method in class java.util.stream.
Collectors
Returns a
Collector
which performs a reduction of its
 input elements under a specified mapping function and
BinaryOperator
.
Reduction, concurrency, and ordering
- Search tag in package java.util.stream
Section
Reduction operations
- Search tag in package java.util.stream
Section
ReentrantLock
- Class in
java.util.concurrent.locks
A reentrant mutual exclusion
Lock
with the same basic
 behavior and semantics as the implicit monitor lock accessed using
synchronized
methods and statements, but with extended
 capabilities.
ReentrantLock()
- Constructor for class java.util.concurrent.locks.
ReentrantLock
Creates an instance of
ReentrantLock
.
ReentrantLock(boolean)
- Constructor for class java.util.concurrent.locks.
ReentrantLock
Creates an instance of
ReentrantLock
with the
 given fairness policy.
ReentrantReadWriteLock
- Class in
java.util.concurrent.locks
An implementation of
ReadWriteLock
supporting similar
 semantics to
ReentrantLock
.
ReentrantReadWriteLock()
- Constructor for class java.util.concurrent.locks.
ReentrantReadWriteLock
Creates a new
ReentrantReadWriteLock
with
 default (nonfair) ordering properties.
ReentrantReadWriteLock(boolean)
- Constructor for class java.util.concurrent.locks.
ReentrantReadWriteLock
Creates a new
ReentrantReadWriteLock
with
 the given fairness policy.
ReentrantReadWriteLock.ReadLock
- Class in
java.util.concurrent.locks
The lock returned by method
ReentrantReadWriteLock.readLock()
.
ReentrantReadWriteLock.WriteLock
- Class in
java.util.concurrent.locks
The lock returned by method
ReentrantReadWriteLock.writeLock()
.
ref
- Variable in class java.rmi.server.
RemoteObject
The object's remote reference.
Ref
- Interface in
java.sql
The mapping in the Java programming language of an SQL
REF
value, which is a reference to an SQL structured type value in the database.
REF
- Enum constant in enum class java.sql.
JDBCType
Identifies the generic SQL type
REF
.
REF
- Static variable in class java.sql.
Types
The constant in the Java programming language, sometimes referred to
 as a type code, that identifies the generic SQL type
REF
.
REF_CURSOR
- Enum constant in enum class java.sql.
JDBCType
Identifies the generic SQL type
REF_CURSOR
.
REF_CURSOR
- Static variable in class java.sql.
Types
The constant in the Java programming language, sometimes referred to
 as a type code, that identifies the generic SQL type
REF CURSOR
.
REF_getField
- Static variable in interface java.lang.invoke.
MethodHandleInfo
A direct method handle reference kind,
 as defined in the
table above
.
REF_getStatic
- Static variable in interface java.lang.invoke.
MethodHandleInfo
A direct method handle reference kind,
 as defined in the
table above
.
REF_invokeInterface
- Static variable in interface java.lang.invoke.
MethodHandleInfo
A direct method handle reference kind,
 as defined in the
table above
.
REF_invokeSpecial
- Static variable in interface java.lang.invoke.
MethodHandleInfo
A direct method handle reference kind,
 as defined in the
table above
.
REF_invokeStatic
- Static variable in interface java.lang.invoke.
MethodHandleInfo
A direct method handle reference kind,
 as defined in the
table above
.
REF_invokeVirtual
- Static variable in interface java.lang.invoke.
MethodHandleInfo
A direct method handle reference kind,
 as defined in the
table above
.
REF_MBEAN_NOT_REGISTERED
- Static variable in class javax.management.relation.
RoleStatus
Problem type when trying to set a role value including the ObjectName of
 a MBean not registered in the MBean Server.
REF_MBEAN_OF_INCORRECT_CLASS
- Static variable in class javax.management.relation.
RoleStatus
Problem type when trying to set a role value including the ObjectName of
 a MBean not of the class expected for that role.
REF_newInvokeSpecial
- Static variable in interface java.lang.invoke.
MethodHandleInfo
A direct method handle reference kind,
 as defined in the
table above
.
REF_putField
- Static variable in interface java.lang.invoke.
MethodHandleInfo
A direct method handle reference kind,
 as defined in the
table above
.
REF_putStatic
- Static variable in interface java.lang.invoke.
MethodHandleInfo
A direct method handle reference kind,
 as defined in the
table above
.
RefAddr
- Class in
javax.naming
This class represents the address of a communications end-point.
RefAddr(String)
- Constructor for class javax.naming.
RefAddr
Constructs a new instance of RefAddr using its address type.
reference()
- Method in class java.lang.module.
ResolvedModule
Returns the reference to the module's content.
Reference<T>
- Class in
java.lang.ref
Abstract base class for reference objects.
Reference
- Class in
javax.naming
This class represents a reference to an object that is found outside of
 the naming/directory system.
Reference
- Interface in
javax.xml.crypto.dsig
A representation of the
Reference
element as defined in the
W3C Recommendation for XML-Signature Syntax and Processing
.
Reference(String)
- Constructor for class javax.naming.
Reference
Constructs a new reference for an object with class name 'className'.
Reference(String, String, String)
- Constructor for class javax.naming.
Reference
Constructs a new reference for an object with class name 'className',
 and the class name and location of the object's factory.
Reference(String, RefAddr)
- Constructor for class javax.naming.
Reference
Constructs a new reference for an object with class name 'className' and
 an address.
Reference(String, RefAddr, String, String)
- Constructor for class javax.naming.
Reference
Constructs a new reference for an object with class name 'className',
 the class name and location of the object's factory, and the address for
 the object.
REFERENCE
- Enum constant in enum class com.sun.source.doctree.
DocTree.Kind
Used for instances of
ReferenceTree
representing a reference to an element in the
 Java programming language.
Referenceable
- Interface in
javax.naming
This interface is implemented by an object that can provide a
 Reference to itself.
Reference kinds
- Search tag in interface java.lang.invoke.MethodHandleInfo
Section
referenceKindToString(int)
- Static method in interface java.lang.invoke.
MethodHandleInfo
Returns the descriptive name of the given reference kind,
 as defined in the
table above
.
ReferenceQueue<T>
- Class in
java.lang.ref
Reference queues, to which registered reference objects are appended by the
 garbage collector after the appropriate reachability changes are detected.
ReferenceQueue()
- Constructor for class java.lang.ref.
ReferenceQueue
Constructs a new reference-object queue.
references()
- Method in interface java.io.
ObjectInputFilter.FilterInfo
The current number of object references.
References
- Search tag in package javax.naming
Section
ReferenceTree
- Interface in
com.sun.source.doctree
A tree node for a reference to a Java language element.
referenceType()
- Method in interface com.sun.jdi.event.
ClassPrepareEvent
Returns the reference type for which this event was generated.
referenceType()
- Method in interface com.sun.jdi.
ObjectReference
Gets the
ReferenceType
that mirrors the type
 of this object.
referenceType(VirtualMachine, String)
- Method in class jdk.jshell.execution.
JdiExecutionControl
Returns the JDI
ReferenceType
corresponding to the specified
 class name.
ReferenceType
- Interface in
com.sun.jdi
The type of an object in a target VM.
ReferenceType
- Interface in
javax.lang.model.type
Represents a reference type.
ReferenceUriSchemesSupported
- Class in
javax.print.attribute.standard
Class
ReferenceUriSchemesSupported
is a printing attribute class an
 enumeration, that indicates a "URI scheme," such as "http:" or "ftp:", that a
 printer can use to retrieve print data stored at a
URI
location.
ReferenceUriSchemesSupported(int)
- Constructor for class javax.print.attribute.standard.
ReferenceUriSchemesSupported
Construct a new reference
URI
scheme enumeration value with the
 given integer value.
REFERRAL
- Static variable in interface javax.naming.
Context
Constant that holds the name of the environment property for
 specifying how referrals encountered by the service provider
 are to be processed.
ReferralException
- Exception Class in
javax.naming
This abstract class is used to represent a referral exception,
 which is generated in response to a
referral
such as that returned by LDAP v3 servers.
ReferralException()
- Constructor for exception class javax.naming.
ReferralException
Constructs a new instance of ReferralException.
ReferralException(String)
- Constructor for exception class javax.naming.
ReferralException
Constructs a new instance of ReferralException using the
 explanation supplied.
referringObjects(long)
- Method in interface com.sun.jdi.
ObjectReference
Returns objects that directly reference this object.
refersTo(T)
- Method in class java.lang.ref.
Reference
Tests if the referent of this reference object is
obj
.
refKind
- Variable in enum class java.lang.constant.
DirectMethodHandleDesc.Kind
The corresponding
refKind
value for this kind of method handle,
 as defined by
MethodHandleInfo
refKind()
- Method in interface java.lang.constant.
DirectMethodHandleDesc
Returns the
refKind
of the method handle described by this nominal
 reference, as defined by
MethodHandleInfo
.
REFLECT
- Enum constant in enum class java.awt.
MultipleGradientPaint.CycleMethod
Cycle the gradient colors start-to-end, end-to-start
 to fill the remaining area.
reflectAs(Class<T>, MethodHandle)
- Static method in class java.lang.invoke.
MethodHandles
Performs an unchecked "crack" of a
direct method handle
.
reflectAs(Class<T>, MethodHandles.Lookup)
- Method in interface java.lang.invoke.
MethodHandleInfo
Reflects the underlying member as a method, constructor, or field object.
reflectedType()
- Method in interface com.sun.jdi.
ClassObjectReference
Returns the
ReferenceType
corresponding to this
 class object.
ReflectionException
- Exception Class in
javax.management
Represents exceptions thrown in the MBean server when using the
 java.lang.reflect classes to invoke methods on MBeans.
ReflectionException(Exception)
- Constructor for exception class javax.management.
ReflectionException
Creates a
ReflectionException
that wraps the actual
java.lang.Exception
.
ReflectionException(Exception, String)
- Constructor for exception class javax.management.
ReflectionException
Creates a
ReflectionException
that wraps the actual
java.lang.Exception
with
 a detail message.
ReflectiveOperationException
- Exception Class in
java.lang
Common superclass of exceptions thrown by reflective operations in
 core reflection.
ReflectiveOperationException()
- Constructor for exception class java.lang.
ReflectiveOperationException
Constructs a new exception with
null
as its detail
 message.
ReflectiveOperationException(String)
- Constructor for exception class java.lang.
ReflectiveOperationException
Constructs a new exception with the specified detail message.
ReflectiveOperationException(String, Throwable)
- Constructor for exception class java.lang.
ReflectiveOperationException
Constructs a new exception with the specified detail message
 and cause.
ReflectiveOperationException(Throwable)
- Constructor for exception class java.lang.
ReflectiveOperationException
Constructs a new exception with the specified cause and a detail
 message of
(cause==null ? null : cause.toString())
(which
 typically contains the class and detail message of
cause
).
ReflectPermission
- Class in
java.lang.reflect
The Permission class for reflective operations.
ReflectPermission(String)
- Constructor for class java.lang.reflect.
ReflectPermission
Constructs a ReflectPermission with the specified name.
ReflectPermission(String, String)
- Constructor for class java.lang.reflect.
ReflectPermission
Constructs a ReflectPermission with the specified name and actions.
refresh()
- Method in class com.sun.security.auth.login.
ConfigFile
Refresh and reload the
Configuration
by re-reading all of the
 login configurations.
refresh()
- Method in class java.security.
Policy
Deprecated.
Refreshes/reloads the policy configuration.
refresh()
- Static method in class java.time.zone.
ZoneRulesProvider
Refreshes the rules from the underlying data provider.
refresh()
- Method in class javax.security.auth.kerberos.
KerberosTicket
Extends the validity period of this ticket.
refresh()
- Method in class javax.security.auth.login.
Configuration
Refresh and reload the Configuration.
refresh()
- Method in interface javax.security.auth.
Refreshable
Update or extend the validity period for this
Object
.
REFRESH_RATE_UNKNOWN
- Static variable in class java.awt.
DisplayMode
Value of the refresh rate if not known.
Refreshable
- Interface in
javax.security.auth
Objects such as credentials may optionally implement this
 interface to provide the capability to refresh itself.
RefreshFailedException
- Exception Class in
javax.security.auth
Signals that a
refresh
operation failed.
RefreshFailedException()
- Constructor for exception class javax.security.auth.
RefreshFailedException
Constructs a RefreshFailedException with no detail message.
RefreshFailedException(String)
- Constructor for exception class javax.security.auth.
RefreshFailedException
Constructs a RefreshFailedException with the specified detail
 message.
refreshRow()
- Method in interface java.sql.
ResultSet
Refreshes the current row with its most recent value in
 the database.
regexFilter(String, int...)
- Static method in class javax.swing.
RowFilter
Returns a
RowFilter
that uses a regular
 expression to determine which entries to include.
region(int, int)
- Method in class java.util.regex.
Matcher
Sets the limits of this matcher's region.
Region
- Class in
javax.swing.plaf.synth
A distinct rendering area of a Swing component.
Region(String, String, boolean)
- Constructor for class javax.swing.plaf.synth.
Region
Creates a Region with the specified name.
regionEnd()
- Method in class java.util.regex.
Matcher
Reports the end index (exclusive) of this matcher's region.
regionMatches(boolean, int, String, int, int)
- Method in class java.lang.
String
Tests if two string regions are equal.
regionMatches(int, String, int, int)
- Method in class java.lang.
String
Tests if two string regions are equal.
regionStart()
- Method in class java.util.regex.
Matcher
Reports the start index of this matcher's region.
register()
- Method in class java.util.concurrent.
Phaser
Adds a new unarrived party to this phaser.
register()
- Method in class jdk.jfr.
EventFactory
Registers an unregistered event.
register(Class<? extends Event>)
- Static method in class jdk.jfr.
FlightRecorder
Registers an event class.
register(Object, Runnable)
- Method in class java.lang.ref.
Cleaner
Registers an object and a cleaning action to run when the object
 becomes phantom reachable.
register(Selector, int)
- Method in class java.nio.channels.
SelectableChannel
Registers this channel with the given selector, returning a selection
 key.
register(Selector, int, Object)
- Method in class java.nio.channels.
SelectableChannel
Registers this channel with the given selector, returning a selection
 key.
register(Selector, int, Object)
- Method in class java.nio.channels.spi.
AbstractSelectableChannel
Registers this channel with the given selector, returning a selection key.
register(AbstractSelectableChannel, int, Object)
- Method in class java.nio.channels.spi.
AbstractSelector
Registers the given channel with this selector.
register(WatchService, WatchEvent.Kind<?>...)
- Method in interface java.nio.file.
Path
Registers the file located by this path with a watch service.
register(WatchService, WatchEvent.Kind<?>...)
- Method in interface java.nio.file.
Watchable
Registers an object with a watch service.
register(WatchService, WatchEvent.Kind<?>[], WatchEvent.Modifier...)
- Method in interface java.nio.file.
Path
Registers the file located by this path with a watch service.
register(WatchService, WatchEvent.Kind<?>[], WatchEvent.Modifier...)
- Method in interface java.nio.file.
Watchable
Registers an object with a watch service.
register(Region, String)
- Method in class javax.swing.plaf.nimbus.
NimbusLookAndFeel
Registers a third party component with the NimbusLookAndFeel.
RegisterableService
- Interface in
javax.imageio.spi
An optional interface that may be provided by service provider
 objects that will be registered with a
ServiceRegistry
.
registerApplicationClasspathSpis()
- Method in class javax.imageio.spi.
IIORegistry
Registers all available service providers found on the
 application class path, using the default
ClassLoader
.
registerAsParallelCapable()
- Static method in class java.lang.
ClassLoader
Registers the caller as
parallel capable
.
registerComponent(JComponent)
- Method in class javax.swing.
ToolTipManager
Registers a component for tooltip management.
registerDriver(Driver)
- Static method in class java.sql.
DriverManager
Registers the given driver with the
DriverManager
.
registerDriver(Driver, DriverAction)
- Static method in class java.sql.
DriverManager
Registers the given driver with the
DriverManager
.
Registered
- Annotation Interface in
jdk.jfr
Event annotation, for programmatic event registration.
registerEditor(Class<?>, Class<?>)
- Static method in class java.beans.
PropertyEditorManager
Registers an editor class to edit values of the given target class.
registerEditorKitForContentType(String, String)
- Static method in class javax.swing.
JEditorPane
Establishes the default bindings of
type
to
classname
.
registerEditorKitForContentType(String, String, ClassLoader)
- Static method in class javax.swing.
JEditorPane
Establishes the default bindings of
type
to
classname
.
registerEngineExtension(String, ScriptEngineFactory)
- Method in class javax.script.
ScriptEngineManager
Registers a
ScriptEngineFactory
to handle an extension.
registerEngineMimeType(String, ScriptEngineFactory)
- Method in class javax.script.
ScriptEngineManager
Registers a
ScriptEngineFactory
to handle a mime type.
registerEngineName(String, ScriptEngineFactory)
- Method in class javax.script.
ScriptEngineManager
Registers a
ScriptEngineFactory
to handle a language
 name.
registerFont(Font)
- Method in class java.awt.
GraphicsEnvironment
Registers a
created
Font
in this
GraphicsEnvironment
.
registerKeyboardAction(ActionListener, String, KeyStroke, int)
- Method in class javax.swing.
JComponent
This method is now obsolete, please use a combination of
getActionMap()
and
getInputMap()
for
 similar behavior.
registerKeyboardAction(ActionListener, KeyStroke, int)
- Method in class javax.swing.
JComponent
This method is now obsolete, please use a combination of
getActionMap()
and
getInputMap()
for
 similar behavior.
registerKeyboardActions()
- Method in class javax.swing.plaf.basic.
BasicDesktopPaneUI
Registers keyboard actions.
registerListeners()
- Method in class java.awt.dnd.
DragGestureRecognizer
register this DragGestureRecognizer's Listeners with the Component

 subclasses must override this method
registerListeners()
- Method in class java.awt.dnd.
MouseDragGestureRecognizer
register this DragGestureRecognizer's Listeners with the Component
registerMBean(Object, ObjectName)
- Method in interface javax.management.
MBeanServer
Registers a pre-existing object as an MBean with the MBean
 server.
registerOutParameter(int, int)
- Method in interface java.sql.
CallableStatement
Registers the OUT parameter in ordinal position
parameterIndex
to the JDBC type
sqlType
.
registerOutParameter(int, int, int)
- Method in interface java.sql.
CallableStatement
Registers the parameter in ordinal position
parameterIndex
to be of JDBC type
sqlType
.
registerOutParameter(int, int, String)
- Method in interface java.sql.
CallableStatement
Registers the designated output parameter.
registerOutParameter(int, SQLType)
- Method in interface java.sql.
CallableStatement
Registers the OUT parameter in ordinal position
parameterIndex
to the JDBC type
sqlType
.
registerOutParameter(int, SQLType, int)
- Method in interface java.sql.
CallableStatement
Registers the parameter in ordinal position
parameterIndex
to be of JDBC type
sqlType
.
registerOutParameter(int, SQLType, String)
- Method in interface java.sql.
CallableStatement
Registers the designated output parameter.
registerOutParameter(String, int)
- Method in interface java.sql.
CallableStatement
Registers the OUT parameter named
parameterName
to the JDBC type
sqlType
.
registerOutParameter(String, int, int)
- Method in interface java.sql.
CallableStatement
Registers the parameter named
parameterName
to be of JDBC type
sqlType
.
registerOutParameter(String, int, String)
- Method in interface java.sql.
CallableStatement
Registers the designated output parameter.
registerOutParameter(String, SQLType)
- Method in interface java.sql.
CallableStatement
Registers the OUT parameter named
parameterName
to the JDBC type
sqlType
.
registerOutParameter(String, SQLType, int)
- Method in interface java.sql.
CallableStatement
Registers the parameter named
parameterName
to be of JDBC type
sqlType
.
registerOutParameter(String, SQLType, String)
- Method in interface java.sql.
CallableStatement
Registers the designated output parameter.
registerProvider(String)
- Static method in class javax.sql.rowset.spi.
SyncFactory
Adds the given synchronization provider to the factory register.
registerProvider(ZoneRulesProvider)
- Static method in class java.time.zone.
ZoneRulesProvider
Registers a zone rules provider.
registerService(PrintService)
- Static method in class javax.print.
PrintServiceLookup
Allows an application to directly register an instance of a class which
 implements a print service.
registerServiceProvider(Object)
- Method in class javax.imageio.spi.
ServiceRegistry
Adds a service provider object to the registry.
registerServiceProvider(PrintServiceLookup)
- Static method in class javax.print.
PrintServiceLookup
Allows an application to explicitly register a class that implements
 lookup services.
registerServiceProvider(T, Class<T>)
- Method in class javax.imageio.spi.
ServiceRegistry
Adds a service provider object to the registry.
registerServiceProviders(Iterator<?>)
- Method in class javax.imageio.spi.
ServiceRegistry
Adds a set of service provider objects, taken from an
Iterator
to the registry.
registerStaticAttributeKey(Object)
- Static method in class javax.swing.text.
StyleContext
Registers an object as a static object that is being
 used as a key in attribute sets.
registerSubclass(Class<?>)
- Static method in class java.awt.
AWTKeyStroke
Deprecated.
registerTag(HTML.Tag, HTMLDocument.HTMLReader.TagAction)
- Method in class javax.swing.text.html.
HTMLDocument.HTMLReader
Registers a handler for the given tag.
registerValidation(ObjectInputValidation, int)
- Method in class java.io.
ObjectInputStream
Register an object to be validated before the graph is returned.
REGISTRATION_NOTIFICATION
- Static variable in class javax.management.
MBeanServerNotification
Notification type denoting that an MBean has been registered.
Registry
- Interface in
java.rmi.registry
Registry
is a remote interface to a simple remote
 object registry that provides methods for storing and retrieving
 remote object references bound with arbitrary string names.
REGISTRY_ID
- Static variable in class java.rmi.server.
ObjID
Object number for well-known
ObjID
of the registry.
REGISTRY_PORT
- Static variable in interface java.rmi.registry.
Registry
Well known port for registry.
RegistryHandler
- Interface in
java.rmi.registry
Deprecated.
no replacement
registryImpl(int)
- Method in interface java.rmi.registry.
RegistryHandler
Deprecated.
no replacement.  As of the Java 2 platform v1.2, RMI no
 longer uses the
RegistryHandler
to obtain the registry's
 implementation.
registryStub(String, int)
- Method in interface java.rmi.registry.
RegistryHandler
Deprecated.
no replacement.  As of the Java 2 platform v1.2, RMI no
 longer uses the
RegistryHandler
to obtain the registry's
 stub.
rehash()
- Method in class java.util.
Hashtable
Increases the capacity of and internally reorganizes this
 hashtable, in order to accommodate and access its entries more
 efficiently.
reinitialize()
- Method in class java.util.concurrent.
ForkJoinTask
Resets the internal bookkeeping state of this task, allowing a
 subsequent
fork
.
reinterpret(long)
- Method in interface java.lang.foreign.
MemorySegment
PREVIEW
Returns a new memory segment that has the same address and scope as this segment, but with the provided size.
reinterpret(long, Arena, Consumer<MemorySegment>)
- Method in interface java.lang.foreign.
MemorySegment
PREVIEW
Returns a new segment with the same address as this segment, but with the provided size and scope.
reinterpret(Arena, Consumer<MemorySegment>)
- Method in interface java.lang.foreign.
MemorySegment
PREVIEW
Returns a new memory segment with the same address and size as this segment, but with the provided scope.
REINTERPRET_D2L
- Static variable in class jdk.incubator.vector.
VectorOperators
Reinterpret bits of
doubleVal
as
long
.
REINTERPRET_F2I
- Static variable in class jdk.incubator.vector.
VectorOperators
Reinterpret bits of
floatVal
as
int
.
REINTERPRET_I2F
- Static variable in class jdk.incubator.vector.
VectorOperators
Reinterpret bits of
intVal
as
float
.
REINTERPRET_L2D
- Static variable in class jdk.incubator.vector.
VectorOperators
Reinterpret bits of
longVal
as
double
.
reinterpretAsBytes()
- Method in class jdk.incubator.vector.
ByteVector
Views this vector as a vector of the same shape
 and contents but a lane type of
byte
,
 where the bytes are extracted from the lanes
 according to little-endian order.
reinterpretAsBytes()
- Method in class jdk.incubator.vector.
DoubleVector
Views this vector as a vector of the same shape
 and contents but a lane type of
byte
,
 where the bytes are extracted from the lanes
 according to little-endian order.
reinterpretAsBytes()
- Method in class jdk.incubator.vector.
FloatVector
Views this vector as a vector of the same shape
 and contents but a lane type of
byte
,
 where the bytes are extracted from the lanes
 according to little-endian order.
reinterpretAsBytes()
- Method in class jdk.incubator.vector.
IntVector
Views this vector as a vector of the same shape
 and contents but a lane type of
byte
,
 where the bytes are extracted from the lanes
 according to little-endian order.
reinterpretAsBytes()
- Method in class jdk.incubator.vector.
LongVector
Views this vector as a vector of the same shape
 and contents but a lane type of
byte
,
 where the bytes are extracted from the lanes
 according to little-endian order.
reinterpretAsBytes()
- Method in class jdk.incubator.vector.
ShortVector
Views this vector as a vector of the same shape
 and contents but a lane type of
byte
,
 where the bytes are extracted from the lanes
 according to little-endian order.
reinterpretAsBytes()
- Method in class jdk.incubator.vector.
Vector
Views this vector as a vector of the same shape
 and contents but a lane type of
byte
,
 where the bytes are extracted from the lanes
 according to little-endian order.
reinterpretAsDoubles()
- Method in class jdk.incubator.vector.
ByteVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
double
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsDoubles()
- Method in class jdk.incubator.vector.
DoubleVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
double
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsDoubles()
- Method in class jdk.incubator.vector.
FloatVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
double
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsDoubles()
- Method in class jdk.incubator.vector.
IntVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
double
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsDoubles()
- Method in class jdk.incubator.vector.
LongVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
double
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsDoubles()
- Method in class jdk.incubator.vector.
ShortVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
double
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsDoubles()
- Method in class jdk.incubator.vector.
Vector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
double
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsFloats()
- Method in class jdk.incubator.vector.
ByteVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
float
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsFloats()
- Method in class jdk.incubator.vector.
DoubleVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
float
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsFloats()
- Method in class jdk.incubator.vector.
FloatVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
float
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsFloats()
- Method in class jdk.incubator.vector.
IntVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
float
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsFloats()
- Method in class jdk.incubator.vector.
LongVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
float
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsFloats()
- Method in class jdk.incubator.vector.
ShortVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
float
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsFloats()
- Method in class jdk.incubator.vector.
Vector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
float
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsInts()
- Method in class jdk.incubator.vector.
ByteVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
int
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsInts()
- Method in class jdk.incubator.vector.
DoubleVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
int
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsInts()
- Method in class jdk.incubator.vector.
FloatVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
int
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsInts()
- Method in class jdk.incubator.vector.
IntVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
int
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsInts()
- Method in class jdk.incubator.vector.
LongVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
int
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsInts()
- Method in class jdk.incubator.vector.
ShortVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
int
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsInts()
- Method in class jdk.incubator.vector.
Vector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
int
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsLongs()
- Method in class jdk.incubator.vector.
ByteVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
long
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsLongs()
- Method in class jdk.incubator.vector.
DoubleVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
long
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsLongs()
- Method in class jdk.incubator.vector.
FloatVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
long
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsLongs()
- Method in class jdk.incubator.vector.
IntVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
long
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsLongs()
- Method in class jdk.incubator.vector.
LongVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
long
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsLongs()
- Method in class jdk.incubator.vector.
ShortVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
long
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsLongs()
- Method in class jdk.incubator.vector.
Vector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
long
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsShorts()
- Method in class jdk.incubator.vector.
ByteVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
short
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsShorts()
- Method in class jdk.incubator.vector.
DoubleVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
short
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsShorts()
- Method in class jdk.incubator.vector.
FloatVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
short
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsShorts()
- Method in class jdk.incubator.vector.
IntVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
short
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsShorts()
- Method in class jdk.incubator.vector.
LongVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
short
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsShorts()
- Method in class jdk.incubator.vector.
ShortVector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
short
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretAsShorts()
- Method in class jdk.incubator.vector.
Vector
Reinterprets this vector as a vector of the same shape
 and contents but a lane type of
short
,
 where the lanes are assembled from successive bytes
 according to little-endian order.
reinterpretShape(VectorSpecies<F>, int)
- Method in class jdk.incubator.vector.
Vector
Transforms this vector to a vector of the given species of
 element type
F
, reinterpreting the bytes of this
 vector without performing any value conversions.
REIWA
- Static variable in class java.time.chrono.
JapaneseEra
The singleton instance for the 'Reiwa' era (2019-05-01 - )
 which has the value 3.
REJANG
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Rejang".
REJANG
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Rejang" Unicode character block.
REJECT_EXTENDED_RANGES
- Enum constant in enum class java.util.
Locale.FilteringMode
Specifies basic filtering: If any extended language ranges are
 included in the given Language Priority List, the list is rejected
 and the filtering method throws
IllegalArgumentException
.
rejectDrag()
- Method in class java.awt.dnd.
DropTargetContext
reject the Drag.
rejectDrag()
- Method in class java.awt.dnd.
DropTargetDragEvent
Rejects the drag as a result of examining either the
dropAction
or the available
DataFlavor
types.
rejectDrop()
- Method in class java.awt.dnd.
DropTargetContext
called to signal that the drop is unacceptable.
rejectDrop()
- Method in class java.awt.dnd.
DropTargetDropEvent
reject the Drop.
REJECTED
- Enum constant in enum class java.io.
ObjectInputFilter.Status
The status is rejected.
REJECTED
- Enum constant in enum class jdk.jshell.
Snippet.Status
The snippet is inactive because it failed compilation on initial
 evaluation and it is not capable of becoming valid with further
 changes to the JShell state.
rejectedExecution(Runnable, ThreadPoolExecutor)
- Method in interface java.util.concurrent.
RejectedExecutionHandler
Method that may be invoked by a
ThreadPoolExecutor
when
execute
cannot accept a
 task.
rejectedExecution(Runnable, ThreadPoolExecutor)
- Method in class java.util.concurrent.
ThreadPoolExecutor.AbortPolicy
Always throws RejectedExecutionException.
rejectedExecution(Runnable, ThreadPoolExecutor)
- Method in class java.util.concurrent.
ThreadPoolExecutor.CallerRunsPolicy
Executes task r in the caller's thread, unless the executor
 has been shut down, in which case the task is discarded.
rejectedExecution(Runnable, ThreadPoolExecutor)
- Method in class java.util.concurrent.
ThreadPoolExecutor.DiscardOldestPolicy
Obtains and ignores the next task that the executor
 would otherwise execute, if one is immediately available,
 and then retries execution of task r, unless the executor
 is shut down, in which case task r is instead discarded.
rejectedExecution(Runnable, ThreadPoolExecutor)
- Method in class java.util.concurrent.
ThreadPoolExecutor.DiscardPolicy
Does nothing, which has the effect of discarding task r.
RejectedExecutionException
- Exception Class in
java.util.concurrent
Exception thrown by an
Executor
when a task cannot be
 accepted for execution.
RejectedExecutionException()
- Constructor for exception class java.util.concurrent.
RejectedExecutionException
Constructs a
RejectedExecutionException
with no detail message.
RejectedExecutionException(String)
- Constructor for exception class java.util.concurrent.
RejectedExecutionException
Constructs a
RejectedExecutionException
with the
 specified detail message.
RejectedExecutionException(String, Throwable)
- Constructor for exception class java.util.concurrent.
RejectedExecutionException
Constructs a
RejectedExecutionException
with the
 specified detail message and cause.
RejectedExecutionException(Throwable)
- Constructor for exception class java.util.concurrent.
RejectedExecutionException
Constructs a
RejectedExecutionException
with the
 specified cause.
RejectedExecutionHandler
- Interface in
java.util.concurrent
A handler for tasks that cannot be executed by a
ThreadPoolExecutor
.
rejectedSetBCOnce
- Variable in class java.beans.beancontext.
BeanContextChildSupport
A flag indicating that there has been
 at least one
PropertyChangeVetoException
thrown for the attempted setBeanContext operation.
rejectFilter(Predicate<Class<?>>, ObjectInputFilter.Status)
- Static method in interface java.io.
ObjectInputFilter
Returns a filter that returns
Status.REJECTED
if the predicate
 on the class is
true
.
rejectUndecidedClass(ObjectInputFilter)
- Static method in interface java.io.
ObjectInputFilter
Returns a filter that invokes a given filter and maps
UNDECIDED
to
REJECTED
for classes, with some special cases, and otherwise returns the status.
REL
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "rel"
RELATED
- Enum constant in enum class javax.swing.
LayoutStyle.ComponentPlacement
Enumeration value indicating the two components are
 visually related and will be placed in the same parent.
Related AWT features
- Search tag in package java.awt
Section
Related Documentation
- Search tag in package java.awt.im
Section
Related Documentation
- Search tag in package java.awt.im.spi
Section
Related Documentation
- Search tag in package java.beans
Section
Related Documentation
- Search tag in package java.security
Section
Related Documentation
- Search tag in package java.security.cert
Section
Related Documentation
- Search tag in package java.security.interfaces
Section
Related Documentation
- Search tag in package java.security.spec
Section
Related Documentation
- Search tag in package java.sql
Section
Related Documentation
- Search tag in package java.util.logging
Section
Related Documentation
- Search tag in package java.util.regex
Section
Related Documentation
- Search tag in package javax.crypto
Section
Related Documentation
- Search tag in package javax.crypto.interfaces
Section
Related Documentation
- Search tag in package javax.crypto.spec
Section
Related Documentation
- Search tag in package javax.security.sasl
Section
Related Documentation
- Search tag in package javax.sound.midi
Section
Related Documentation
- Search tag in package javax.sound.midi.spi
Section
Related Documentation
- Search tag in package javax.sound.sampled
Section
Related Documentation
- Search tag in package javax.sound.sampled.spi
Section
Related Documentation
- Search tag in package javax.sql
Section
Related Documentation
- Search tag in package javax.swing
Section
Related Documentation
- Search tag in package javax.swing.border
Section
Related Documentation
- Search tag in package javax.swing.colorchooser
Section
Related Documentation
- Search tag in package javax.swing.event
Section
Related Documentation
- Search tag in package javax.swing.filechooser
Section
Related Documentation
- Search tag in package javax.swing.table
Section
Related Documentation
- Search tag in package javax.swing.text
Section
Related Documentation
- Search tag in package javax.swing.tree
Section
Related Documentation
- Search tag in package javax.swing.undo
Section
Related Documentation
- Search tag in package org.ietf.jgss
Section
Relation
- Interface in
javax.management.relation
This interface has to be implemented by any MBean class expected to
 represent a relation managed using the Relation Service.
RELATION_BASIC_CREATION
- Static variable in class javax.management.relation.
RelationNotification
Type for the creation of an internal relation.
RELATION_BASIC_REMOVAL
- Static variable in class javax.management.relation.
RelationNotification
Type for the removal from the Relation Service of an internal relation.
RELATION_BASIC_UPDATE
- Static variable in class javax.management.relation.
RelationNotification
Type for an update of an internal relation.
RELATION_MBEAN_CREATION
- Static variable in class javax.management.relation.
RelationNotification
Type for the relation MBean added into the Relation Service.
RELATION_MBEAN_REMOVAL
- Static variable in class javax.management.relation.
RelationNotification
Type for the removal from the Relation Service of a relation MBean.
RELATION_MBEAN_UPDATE
- Static variable in class javax.management.relation.
RelationNotification
Type for the update of a relation MBean.
Relational
- Annotation Interface in
jdk.jfr
Meta annotation for relational annotations, to be used on an annotation.
RelationException
- Exception Class in
javax.management.relation
This class is the superclass of any exception which can be raised during
 relation management.
RelationException()
- Constructor for exception class javax.management.relation.
RelationException
Default constructor, no message put in exception.
RelationException(String)
- Constructor for exception class javax.management.relation.
RelationException
Constructor with given message put in exception.
RelationNotFoundException
- Exception Class in
javax.management.relation
This exception is raised when there is no relation for a given relation id
 in a Relation Service.
RelationNotFoundException()
- Constructor for exception class javax.management.relation.
RelationNotFoundException
Default constructor, no message put in exception.
RelationNotFoundException(String)
- Constructor for exception class javax.management.relation.
RelationNotFoundException
Constructor with given message put in exception.
RelationNotification
- Class in
javax.management.relation
A notification of a change in the Relation Service.
RelationNotification(String, Object, long, long, String, String, String, ObjectName, String, List<ObjectName>, List<ObjectName>)
- Constructor for class javax.management.relation.
RelationNotification
Creates a notification for a role update in a relation.
RelationNotification(String, Object, long, long, String, String, String, ObjectName, List<ObjectName>)
- Constructor for class javax.management.relation.
RelationNotification
Creates a notification for either a relation creation (RelationSupport
 object created internally in the Relation Service, or an MBean added as a
 relation) or for a relation removal from the Relation Service.
relations
- Variable in class javax.accessibility.
AccessibleRelationSet
Each entry in the
Vector
represents an
AccessibleRelation
.
RelationService
- Class in
javax.management.relation
The Relation Service is in charge of creating and deleting relation types
 and relations, of handling the consistency and of providing query
 mechanisms.
RelationService(boolean)
- Constructor for class javax.management.relation.
RelationService
Constructor.
RelationServiceMBean
- Interface in
javax.management.relation
The Relation Service is in charge of creating and deleting relation types
 and relations, of handling the consistency and of providing query
 mechanisms.
RelationServiceNotRegisteredException
- Exception Class in
javax.management.relation
This exception is raised when an access is done to the Relation Service and
 that one is not registered.
RelationServiceNotRegisteredException()
- Constructor for exception class javax.management.relation.
RelationServiceNotRegisteredException
Default constructor, no message put in exception.
RelationServiceNotRegisteredException(String)
- Constructor for exception class javax.management.relation.
RelationServiceNotRegisteredException
Constructor with given message put in exception.
RelationSupport
- Class in
javax.management.relation
A RelationSupport object is used internally by the Relation Service to
 represent simple relations (only roles, no properties or methods), with an
 unlimited number of roles, of any relation type.
RelationSupport(String, ObjectName, String, RoleList)
- Constructor for class javax.management.relation.
RelationSupport
Creates a
RelationSupport
object.
RelationSupport(String, ObjectName, MBeanServer, String, RoleList)
- Constructor for class javax.management.relation.
RelationSupport
Creates a
RelationSupport
object.
RelationSupportMBean
- Interface in
javax.management.relation
A RelationSupport object is used internally by the Relation Service to
 represent simple relations (only roles, no properties or methods), with an
 unlimited number of roles, of any relation type.
Relation to IEEE 754 Decimal Arithmetic
- Search tag in class java.math.BigDecimal
Section
RelationType
- Interface in
javax.management.relation
The RelationType interface has to be implemented by any class expected to
 represent a relation type.
RelationTypeNotFoundException
- Exception Class in
javax.management.relation
This exception is raised when there is no relation type with given name in
 Relation Service.
RelationTypeNotFoundException()
- Constructor for exception class javax.management.relation.
RelationTypeNotFoundException
Default constructor, no message put in exception.
RelationTypeNotFoundException(String)
- Constructor for exception class javax.management.relation.
RelationTypeNotFoundException
Constructor with given message put in exception.
RelationTypeSupport
- Class in
javax.management.relation
A RelationTypeSupport object implements the RelationType interface.
RelationTypeSupport(String)
- Constructor for class javax.management.relation.
RelationTypeSupport
Constructor to be used for subclasses.
RelationTypeSupport(String, RoleInfo[])
- Constructor for class javax.management.relation.
RelationTypeSupport
Constructor where all role definitions are dynamically created and
 passed as parameter.
relative(int)
- Method in interface java.sql.
ResultSet
Moves the cursor a relative number of rows, either positive or negative.
RELATIVE
- Static variable in class java.awt.
GridBagConstraints
Specifies that this component is the next-to-last component in its
 column or row (
gridwidth
,
gridheight
),
 or that this component be placed next to the previously added
 component (
gridx
,
gridy
).
relativeCCW(double, double)
- Method in class java.awt.geom.
Line2D
Returns an indicator of where the specified point
(px,py)
lies with respect to this line segment.
relativeCCW(double, double, double, double, double, double)
- Static method in class java.awt.geom.
Line2D
Returns an indicator of where the specified point
(px,py)
lies with respect to the line segment from
(x1,y1)
to
(x2,y2)
.
relativeCCW(Point2D)
- Method in class java.awt.geom.
Line2D
Returns an indicator of where the specified
Point2D
lies with respect to this line segment.
relativize(URI)
- Method in class java.net.
URI
Relativizes the given URI against this URI.
relativize(Path)
- Method in interface java.nio.file.
Path
Constructs a relative path between this path and a given path.
RELAX NG
- Search tag in javax.xml.validation.SchemaFactory.newSchema()
Section
RELAX NG
- Search tag in javax.xml.validation.SchemaFactory.newSchema(Source[])
Section
RELAXNG_NS_URI
- Static variable in class javax.xml.
XMLConstants
RELAX NG Namespace URI.
release()
- Method in class java.nio.channels.
FileLock
Releases this lock.
release()
- Method in class java.util.concurrent.
Semaphore
Releases a permit, returning it to the semaphore.
release()
- Method in interface javax.sql.rowset.
CachedRowSet
Releases the current contents of this
CachedRowSet
object and sends a
rowSetChanged
event to all
 registered listeners.
release(int)
- Method in class java.util.concurrent.locks.
AbstractQueuedSynchronizer
Releases in exclusive mode.
release(int)
- Method in class java.util.concurrent.
Semaphore
Releases the given number of permits, returning them to the semaphore.
release(long)
- Method in class java.util.concurrent.locks.
AbstractQueuedLongSynchronizer
Releases in exclusive mode.
release(ByteBuffer)
- Method in interface java.lang.module.
ModuleReader
Releases a byte buffer.
RELEASE_0
- Enum constant in enum class java.lang.reflect.
ClassFileFormatVersion
The original version.
RELEASE_0
- Enum constant in enum class javax.lang.model.
SourceVersion
The original version.
RELEASE_1
- Enum constant in enum class java.lang.reflect.
ClassFileFormatVersion
The version recognized by the Java Platform 1.1.
RELEASE_1
- Enum constant in enum class javax.lang.model.
SourceVersion
The version introduced by the Java Platform 1.1.
RELEASE_10
- Enum constant in enum class java.lang.reflect.
ClassFileFormatVersion
The version introduced by the Java Platform, Standard Edition
 10.
RELEASE_10
- Enum constant in enum class javax.lang.model.
SourceVersion
The version introduced by the Java Platform, Standard Edition
 10.
RELEASE_11
- Enum constant in enum class java.lang.reflect.
ClassFileFormatVersion
The version introduced by the Java Platform, Standard Edition
 11.
RELEASE_11
- Enum constant in enum class javax.lang.model.
SourceVersion
The version introduced by the Java Platform, Standard Edition
 11.
RELEASE_12
- Enum constant in enum class java.lang.reflect.
ClassFileFormatVersion
The version introduced by the Java Platform, Standard Edition
 12.
RELEASE_12
- Enum constant in enum class javax.lang.model.
SourceVersion
The version introduced by the Java Platform, Standard Edition
 12.
RELEASE_13
- Enum constant in enum class java.lang.reflect.
ClassFileFormatVersion
The version introduced by the Java Platform, Standard Edition
 13.
RELEASE_13
- Enum constant in enum class javax.lang.model.
SourceVersion
The version introduced by the Java Platform, Standard Edition
 13.
RELEASE_14
- Enum constant in enum class java.lang.reflect.
ClassFileFormatVersion
The version introduced by the Java Platform, Standard Edition
 14.
RELEASE_14
- Enum constant in enum class javax.lang.model.
SourceVersion
The version introduced by the Java Platform, Standard Edition
 14.
RELEASE_15
- Enum constant in enum class java.lang.reflect.
ClassFileFormatVersion
The version introduced by the Java Platform, Standard Edition
 15.
RELEASE_15
- Enum constant in enum class javax.lang.model.
SourceVersion
The version introduced by the Java Platform, Standard Edition
 15.
RELEASE_16
- Enum constant in enum class java.lang.reflect.
ClassFileFormatVersion
The version introduced by the Java Platform, Standard Edition
 16.
RELEASE_16
- Enum constant in enum class javax.lang.model.
SourceVersion
The version introduced by the Java Platform, Standard Edition
 16.
RELEASE_17
- Enum constant in enum class java.lang.reflect.
ClassFileFormatVersion
The version introduced by the Java Platform, Standard Edition
 17.
RELEASE_17
- Enum constant in enum class javax.lang.model.
SourceVersion
The version introduced by the Java Platform, Standard Edition
 17.
RELEASE_18
- Enum constant in enum class java.lang.reflect.
ClassFileFormatVersion
The version introduced by the Java Platform, Standard Edition
 18.
RELEASE_18
- Enum constant in enum class javax.lang.model.
SourceVersion
The version introduced by the Java Platform, Standard Edition
 18.
RELEASE_19
- Enum constant in enum class java.lang.reflect.
ClassFileFormatVersion
The version introduced by the Java Platform, Standard Edition
 19.
RELEASE_19
- Enum constant in enum class javax.lang.model.
SourceVersion
The version introduced by the Java Platform, Standard Edition
 19.
RELEASE_2
- Enum constant in enum class java.lang.reflect.
ClassFileFormatVersion
The version introduced by the Java 2 Platform, Standard Edition,
 v 1.2.
RELEASE_2
- Enum constant in enum class javax.lang.model.
SourceVersion
The version introduced by the Java 2 Platform, Standard Edition,
 v 1.2.
RELEASE_20
- Enum constant in enum class java.lang.reflect.
ClassFileFormatVersion
The version introduced by the Java Platform, Standard Edition
 20.
RELEASE_20
- Enum constant in enum class javax.lang.model.
SourceVersion
The version introduced by the Java Platform, Standard Edition
 20.
RELEASE_21
- Enum constant in enum class java.lang.reflect.
ClassFileFormatVersion
The version introduced by the Java Platform, Standard Edition
 21.
RELEASE_21
- Enum constant in enum class javax.lang.model.
SourceVersion
The version introduced by the Java Platform, Standard Edition
 21.
RELEASE_3
- Enum constant in enum class java.lang.reflect.
ClassFileFormatVersion
The version introduced by the Java 2 Platform, Standard Edition,
 v 1.3.
RELEASE_3
- Enum constant in enum class javax.lang.model.
SourceVersion
The version introduced by the Java 2 Platform, Standard Edition,
 v 1.3.
RELEASE_4
- Enum constant in enum class java.lang.reflect.
ClassFileFormatVersion
The version introduced by the Java 2 Platform, Standard Edition,
 v 1.4.
RELEASE_4
- Enum constant in enum class javax.lang.model.
SourceVersion
The version introduced by the Java 2 Platform, Standard Edition,
 v 1.4.
RELEASE_5
- Enum constant in enum class java.lang.reflect.
ClassFileFormatVersion
The version introduced by the Java 2 Platform, Standard
 Edition 5.0.
RELEASE_5
- Enum constant in enum class javax.lang.model.
SourceVersion
The version introduced by the Java 2 Platform, Standard
 Edition 5.0.
RELEASE_6
- Enum constant in enum class java.lang.reflect.
ClassFileFormatVersion
The version introduced by the Java Platform, Standard Edition
 6.
RELEASE_6
- Enum constant in enum class javax.lang.model.
SourceVersion
The version introduced by the Java Platform, Standard Edition
 6.
RELEASE_7
- Enum constant in enum class java.lang.reflect.
ClassFileFormatVersion
The version introduced by the Java Platform, Standard Edition
 7.
RELEASE_7
- Enum constant in enum class javax.lang.model.
SourceVersion
The version introduced by the Java Platform, Standard Edition
 7.
RELEASE_8
- Enum constant in enum class java.lang.reflect.
ClassFileFormatVersion
The version introduced by the Java Platform, Standard Edition
 8.
RELEASE_8
- Enum constant in enum class javax.lang.model.
SourceVersion
The version introduced by the Java Platform, Standard Edition
 8.
RELEASE_9
- Enum constant in enum class java.lang.reflect.
ClassFileFormatVersion
The version introduced by the Java Platform, Standard Edition
 9.
RELEASE_9
- Enum constant in enum class javax.lang.model.
SourceVersion
The version introduced by the Java Platform, Standard Edition
 9.
releaseBeanContextResources()
- Method in class java.beans.beancontext.
BeanContextChildSupport
This method may be overridden by subclasses to provide their own
 release behaviors.
releaseBeanContextResources()
- Method in class java.beans.beancontext.
BeanContextServicesSupport
called from setBeanContext to notify a BeanContextChild
 to release resources obtained from the nesting BeanContext.
releaseFence()
- Static method in class java.lang.invoke.
VarHandle
Ensures that loads and stores before the fence will not be
 reordered with stores after the fence.
releaseInputStream()
- Method in interface java.rmi.server.
RemoteCall
Deprecated.
no replacement
releaseMBeanServer(MBeanServer)
- Static method in class javax.management.
MBeanServerFactory
Remove internal MBeanServerFactory references to a created
 MBeanServer.
releaseOutputStream()
- Method in interface java.rmi.server.
RemoteCall
Deprecated.
no replacement
releaseSavepoint(Savepoint)
- Method in interface java.sql.
Connection
Removes the specified
Savepoint
and subsequent
Savepoint
objects from the current
 transaction.
releaseService(BeanContextChild, Object, Object)
- Method in interface java.beans.beancontext.
BeanContextServices
Releases a
BeanContextChild
's
 (or any arbitrary object associated with a BeanContextChild)
 reference to the specified service by calling releaseService()
 on the underlying
BeanContextServiceProvider
.
releaseService(BeanContextChild, Object, Object)
- Method in class java.beans.beancontext.
BeanContextServicesSupport
release a service
releaseService(BeanContextServices, Object, Object)
- Method in interface java.beans.beancontext.
BeanContextServiceProvider
Invoked by
BeanContextServices
,
 this method releases a nested
BeanContextChild
's
 (or any arbitrary object associated with a
BeanContextChild
) reference to the specified service.
releaseService(BeanContextServices, Object, Object)
- Method in class java.beans.beancontext.
BeanContextServicesSupport.BCSSProxyServiceProvider
releaseShared(int)
- Method in class java.util.concurrent.locks.
AbstractQueuedSynchronizer
Releases in shared mode.
releaseShared(long)
- Method in class java.util.concurrent.locks.
AbstractQueuedLongSynchronizer
Releases in shared mode.
releaseWritableTile(int, int)
- Method in class java.awt.image.
BufferedImage
Relinquishes permission to write to a tile.
releaseWritableTile(int, int)
- Method in interface java.awt.image.
WritableRenderedImage
Relinquishes the right to write to a tile.
relink(GuardedInvocation, MethodHandle)
- Method in interface jdk.dynalink.
RelinkableCallSite
This method will be called by the dynamic linker every time the call site
 is relinked (but see
RelinkableCallSite.resetAndRelink(GuardedInvocation, MethodHandle)
for an
 exception).
relink(GuardedInvocation, MethodHandle)
- Method in class jdk.dynalink.support.
ChainedCallSite
relink(GuardedInvocation, MethodHandle)
- Method in class jdk.dynalink.support.
SimpleRelinkableCallSite
RelinkableCallSite
- Interface in
jdk.dynalink
Interface for call sites managed by a
DynamicLinker
.
reload()
- Method in class java.util.
ServiceLoader
Clear this loader's provider cache so that all providers will be
 reloaded.
reload()
- Method in class javax.swing.tree.
DefaultTreeModel
Invoke this method if you've modified the
TreeNode
s upon which
 this model depends.
reload(TreeNode)
- Method in class javax.swing.tree.
DefaultTreeModel
Invoke this method if you've modified the
TreeNode
s upon which
 this model depends.
remainder(BigDecimal)
- Method in class java.math.
BigDecimal
Returns a
BigDecimal
whose value is
(this % divisor)
.
remainder(BigDecimal, MathContext)
- Method in class java.math.
BigDecimal
Returns a
BigDecimal
whose value is
(this %
 divisor)
, with rounding according to the context settings.
remainder(BigInteger)
- Method in class java.math.
BigInteger
Returns a BigInteger whose value is
(this % val)
.
REMAINDER
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
BinaryTree
representing
 remainder
%
.
REMAINDER
- Static variable in class java.awt.
GridBagConstraints
Specifies that this component is the
 last component in its column or row.
REMAINDER_ASSIGNMENT
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
CompoundAssignmentTree
representing
 remainder assignment
%=
.
remainderUnsigned(int, int)
- Static method in class java.lang.
Integer
Returns the unsigned remainder from dividing the first argument
 by the second where each argument and the result is interpreted
 as an unsigned value.
remainderUnsigned(long, long)
- Static method in class java.lang.
Long
Returns the unsigned remainder from dividing the first argument
 by the second where each argument and the result is interpreted
 as an unsigned value.
remaining()
- Method in class java.nio.
Buffer
Returns the number of elements between the current position and the
 limit.
remaining()
- Method in interface jdk.jshell.
SourceCodeAnalysis.CompletionInfo
Input remaining after the complete part of the source.
remainingCapacity()
- Method in class java.util.concurrent.
ArrayBlockingQueue
Returns the number of additional elements that this queue can ideally
 (in the absence of memory or resource constraints) accept without
 blocking.
remainingCapacity()
- Method in interface java.util.concurrent.
BlockingQueue
Returns the number of additional elements that this queue can ideally
 (in the absence of memory or resource constraints) accept without
 blocking, or
Integer.MAX_VALUE
if there is no intrinsic
 limit.
remainingCapacity()
- Method in class java.util.concurrent.
DelayQueue
Always returns
Integer.MAX_VALUE
because
 a
DelayQueue
is not capacity constrained.
remainingCapacity()
- Method in class java.util.concurrent.
LinkedBlockingDeque
Returns the number of additional elements that this deque can ideally
 (in the absence of memory or resource constraints) accept without
 blocking.
remainingCapacity()
- Method in class java.util.concurrent.
LinkedBlockingQueue
Returns the number of additional elements that this queue can ideally
 (in the absence of memory or resource constraints) accept without
 blocking.
remainingCapacity()
- Method in class java.util.concurrent.
LinkedTransferQueue
Always returns
Integer.MAX_VALUE
because a
LinkedTransferQueue
is not capacity constrained.
remainingCapacity()
- Method in class java.util.concurrent.
PriorityBlockingQueue
Always returns
Integer.MAX_VALUE
because
 a
PriorityBlockingQueue
is not capacity constrained.
remainingCapacity()
- Method in class java.util.concurrent.
SynchronousQueue
Always returns zero.
remainingName
- Variable in exception class javax.naming.
NamingException
Contains the remaining name that has not been resolved yet.
remainingName
- Variable in class javax.naming.spi.
ResolveResult
Field containing the remaining name yet to be resolved.
remainingNewName
- Variable in exception class javax.naming.
CannotProceedException
Contains the remaining unresolved part of the second
 "name" argument to Context.rename().
remapInstrument(Instrument, Instrument)
- Method in interface javax.sound.midi.
Synthesizer
Remaps an instrument.
Remote
- Interface in
java.rmi
The
Remote
interface serves to identify interfaces whose
 methods may be invoked from a non-local virtual machine.
REMOTE
- Enum constant in enum class java.awt.desktop.
UserSessionEvent.Reason
The session was connected/disconnected to the remote terminal.
Remote Access to MBeans
- Search tag in package javax.management
Section
RemoteCall
- Interface in
java.rmi.server
Deprecated.
no replacement.
remoteEquals(RemoteRef)
- Method in interface java.rmi.server.
RemoteRef
Compares two remote objects for equality.
RemoteException
- Exception Class in
java.rmi
A
RemoteException
is the common superclass for a number of
 communication-related exceptions that may occur during the execution of a
 remote method call.
RemoteException()
- Constructor for exception class java.rmi.
RemoteException
Constructs a
RemoteException
.
RemoteException(String)
- Constructor for exception class java.rmi.
RemoteException
Constructs a
RemoteException
with the specified
 detail message.
RemoteException(String, Throwable)
- Constructor for exception class java.rmi.
RemoteException
Constructs a
RemoteException
with the specified detail
 message and cause.
RemoteExecutionControl
- Class in
jdk.jshell.execution
The remote agent runs in the execution process (separate from the main JShell
 process).
RemoteExecutionControl()
- Constructor for class jdk.jshell.execution.
RemoteExecutionControl
Create an instance using the default class loading.
RemoteExecutionControl(LoaderDelegate)
- Constructor for class jdk.jshell.execution.
RemoteExecutionControl
Creates an instance, delegating loader operations to the specified
 delegate.
remoteHashCode()
- Method in interface java.rmi.server.
RemoteRef
Returns a hashcode for a remote object.
remoteInputOutput(InputStream, OutputStream, Map<String, OutputStream>, Map<String, InputStream>, BiFunction<ObjectInput, ObjectOutput, ExecutionControl>)
- Static method in class jdk.jshell.execution.
Util
Creates an ExecutionControl for given packetized input and output.
RemoteObject
- Class in
java.rmi.server
The
RemoteObject
class implements the
java.lang.Object
behavior for remote objects.
RemoteObject()
- Constructor for class java.rmi.server.
RemoteObject
Creates a remote object.
RemoteObject(RemoteRef)
- Constructor for class java.rmi.server.
RemoteObject
Creates a remote object, initialized with the specified remote
 reference.
RemoteObjectInvocationHandler
- Class in
java.rmi.server
An implementation of the
InvocationHandler
interface for
 use with Java Remote Method Invocation (Java RMI).
RemoteObjectInvocationHandler(RemoteRef)
- Constructor for class java.rmi.server.
RemoteObjectInvocationHandler
Creates a new
RemoteObjectInvocationHandler
constructed
 with the specified
RemoteRef
.
RemoteRecordingStream
- Class in
jdk.management.jfr
An implementation of an
EventStream
that can serialize events over
 the network using an
MBeanServerConnection
.
RemoteRecordingStream(MBeanServerConnection)
- Constructor for class jdk.management.jfr.
RemoteRecordingStream
Creates an event stream that operates against a
MBeanServerConnection
that has a registered
FlightRecorderMXBean
.
RemoteRecordingStream(MBeanServerConnection, Path)
- Constructor for class jdk.management.jfr.
RemoteRecordingStream
Creates an event stream that operates against a
MBeanServerConnection
that has a registered
FlightRecorderMXBean
.
RemoteRef
- Interface in
java.rmi.server
RemoteRef
represents the handle for a remote object.
RemoteServer
- Class in
java.rmi.server
The
RemoteServer
class is the common superclass to server
 implementations and provides the framework to support a wide range
 of remote reference semantics.
RemoteServer()
- Constructor for class java.rmi.server.
RemoteServer
Constructs a
RemoteServer
.
RemoteServer(RemoteRef)
- Constructor for class java.rmi.server.
RemoteServer
Constructs a
RemoteServer
with the given reference type.
RemoteStub
- Class in
java.rmi.server
Deprecated.
Statically generated stubs are deprecated, since
 stubs are generated dynamically. See
UnicastRemoteObject
for information about dynamic stub generation.
RemoteStub()
- Constructor for class java.rmi.server.
RemoteStub
Deprecated.
Constructs a
RemoteStub
.
RemoteStub(RemoteRef)
- Constructor for class java.rmi.server.
RemoteStub
Deprecated.
Constructs a
RemoteStub
with the specified remote
 reference.
remoteToString()
- Method in interface java.rmi.server.
RemoteRef
Returns a String that represents the reference of this remote
 object.
remoteVMOptions(String...)
- Method in class jdk.jshell.
JShell.Builder
Sets additional VM options for launching the VM.
REMOVAL
- Static variable in interface org.w3c.dom.events.
MutationEvent
The
Attr
was just removed.
remove()
- Method in interface com.sun.jdi.event.
EventQueue
Waits forever for the next available event.
remove()
- Method in class java.lang.ref.
ReferenceQueue
Removes the next reference object in this queue, blocking until one
 becomes available.
remove()
- Method in class java.lang.
ThreadLocal
Removes the current thread's value for this thread-local
 variable.
remove()
- Method in class java.util.
AbstractQueue
Retrieves and removes the head of this queue.
remove()
- Method in class java.util.
ArrayDeque
Retrieves and removes the head of the queue represented by this deque.
remove()
- Method in interface java.util.concurrent.
BlockingDeque
Retrieves and removes the head of the queue represented by this deque
 (in other words, the first element of this deque).
remove()
- Method in class java.util.concurrent.
ConcurrentLinkedDeque
remove()
- Method in class java.util.concurrent.
DelayQueue
Retrieves and removes the
expired head
of
 this queue, or throws an exception if this queue has no
expired elements
.
remove()
- Method in class java.util.concurrent.
LinkedBlockingDeque
Retrieves and removes the head of the queue represented by this deque.
remove()
- Method in interface java.util.
Deque
Retrieves and removes the head of the queue represented by this deque
 (in other words, the first element of this deque).
remove()
- Method in interface java.util.
Iterator
Removes from the underlying collection the last element returned
 by this iterator (optional operation).
remove()
- Method in class java.util.
LinkedList
Retrieves and removes the head (first element) of this list.
remove()
- Method in interface java.util.
ListIterator
Removes from the list the last element that was returned by
ListIterator.next()
or
ListIterator.previous()
(optional operation).
remove()
- Method in interface java.util.
Queue
Retrieves and removes the head of this queue.
remove()
- Method in class java.util.
Scanner
The remove operation is not supported by this implementation of
Iterator
.
remove(int)
- Method in class java.awt.
Choice
Removes an item from the choice menu
 at the specified position.
remove(int)
- Method in class java.awt.
Container
Removes the component, specified by
index
,
 from this container.
remove(int)
- Method in class java.awt.
List
Removes the item at the specified position
 from this scrolling list.
remove(int)
- Method in class java.awt.
Menu
Removes the menu item at the specified index from this menu.
remove(int)
- Method in class java.awt.
MenuBar
Removes the menu located at the specified
 index from this menu bar.
remove(int)
- Method in class java.util.
AbstractList
Removes the element at the specified position in this list (optional
 operation).
remove(int)
- Method in class java.util.
AbstractSequentialList
Removes the element at the specified position in this list (optional
 operation).
remove(int)
- Method in class java.util.
ArrayList
Removes the element at the specified position in this list.
remove(int)
- Method in class java.util.concurrent.
CopyOnWriteArrayList
Removes the element at the specified position in this list.
remove(int)
- Method in class java.util.
LinkedList
Removes the element at the specified position in this list.
remove(int)
- Method in interface java.util.
List
Removes the element at the specified position in this list (optional
 operation).
remove(int)
- Method in class java.util.
Vector
Removes the element at the specified position in this Vector.
remove(int)
- Method in class javax.naming.
CompositeName
Deletes a component from this composite name.
remove(int)
- Method in class javax.naming.
CompoundName
Deletes a component from this compound name.
remove(int)
- Method in interface javax.naming.directory.
Attribute
Removes an attribute value from the ordered list of attribute values.
remove(int)
- Method in class javax.naming.directory.
BasicAttribute
remove(int)
- Method in class javax.naming.ldap.
LdapName
Removes a component from this LDAP name.
remove(int)
- Method in interface javax.naming.
Name
Removes a component from this name.
remove(int)
- Method in class javax.naming.
Reference
Deletes the address at index posn from the list of addresses.
remove(int)
- Method in class javax.swing.
DefaultListModel
Removes the element at the specified position in this list.
remove(int)
- Method in class javax.swing.
JDesktopPane
Remove the indexed component from this pane.
remove(int)
- Method in class javax.swing.
JLayeredPane
Remove the indexed component from this pane.
remove(int)
- Method in class javax.swing.
JMenu
Removes the menu item at the specified index from this menu.
remove(int)
- Method in class javax.swing.
JPopupMenu
Removes the component at the specified index from this popup menu.
remove(int)
- Method in class javax.swing.
JSplitPane
Removes the
Component
at the specified index.
remove(int)
- Method in class javax.swing.
JTabbedPane
Removes the tab and component which corresponds to the specified index.
remove(int)
- Method in class javax.swing.text.
View
Removes one of the children at the given position.
remove(int)
- Method in class javax.swing.tree.
DefaultMutableTreeNode
Removes the child at the specified index from this node's children
 and sets that node's parent to null.
remove(int)
- Method in interface javax.swing.tree.
MutableTreeNode
Removes the child at
index
from the receiver.
remove(int)
- Method in interface org.w3c.dom.html.
HTMLSelectElement
Remove an element from the collection of
OPTION
elements
 for this
SELECT
.
remove(int, int)
- Method in interface javax.swing.text.
AbstractDocument.Content
Removes some portion of the sequence.
remove(int, int)
- Method in class javax.swing.text.
AbstractDocument
Removes some content from the document.
remove(int, int)
- Method in interface javax.swing.text.
Document
Removes a portion of the content of the document.
remove(int, int)
- Method in class javax.swing.text.
DocumentFilter.FilterBypass
Removes the specified region of text, bypassing the
 DocumentFilter.
remove(int, int)
- Method in class javax.swing.text.
GapContent
Removes part of the content.
remove(int, int)
- Method in class javax.swing.text.
StringContent
Removes part of the content.
remove(int, int, AbstractDocument.DefaultDocumentEvent)
- Method in class javax.swing.text.
DefaultStyledDocument.ElementBuffer
Removes content.
remove(long)
- Method in interface com.sun.jdi.event.
EventQueue
Waits a specified time for the next available event.
remove(long)
- Method in class java.lang.ref.
ReferenceQueue
Removes the next reference object in this queue, blocking until either
 one becomes available or the given timeout period expires.
remove(Component)
- Method in class java.awt.
Container
Removes the specified component from this container.
remove(Component)
- Method in class javax.swing.
JApplet
Deprecated.
Removes the specified component from the container.
remove(Component)
- Method in class javax.swing.
JDialog
Removes the specified component from the container.
remove(Component)
- Method in class javax.swing.
JFrame
Removes the specified component from the container.
remove(Component)
- Method in class javax.swing.
JInternalFrame
Removes the specified component from the container.
remove(Component)
- Method in class javax.swing.
JMenu
Removes the component
c
from this menu.
remove(Component)
- Method in class javax.swing.
JSplitPane
Removes the child component,
component
from the
 pane.
remove(Component)
- Method in class javax.swing.
JTabbedPane
Removes the specified
Component
from the
JTabbedPane
.
remove(Component)
- Method in class javax.swing.
JViewport
Removes the
Viewport
s one lightweight child.
remove(Component)
- Method in class javax.swing.
JWindow
Removes the specified component from the container.
remove(ActionListener, ActionListener)
- Static method in class java.awt.
AWTEventMulticaster
Removes the old action-listener from action-listener-l and
 returns the resulting multicast listener.
remove(AdjustmentListener, AdjustmentListener)
- Static method in class java.awt.
AWTEventMulticaster
Removes the old adjustment-listener from adjustment-listener-l and
 returns the resulting multicast listener.
remove(ComponentListener, ComponentListener)
- Static method in class java.awt.
AWTEventMulticaster
Removes the old component-listener from component-listener-l and
 returns the resulting multicast listener.
remove(ContainerListener, ContainerListener)
- Static method in class java.awt.
AWTEventMulticaster
Removes the old container-listener from container-listener-l and
 returns the resulting multicast listener.
remove(FocusListener, FocusListener)
- Static method in class java.awt.
AWTEventMulticaster
Removes the old focus-listener from focus-listener-l and
 returns the resulting multicast listener.
remove(HierarchyBoundsListener, HierarchyBoundsListener)
- Static method in class java.awt.
AWTEventMulticaster
Removes the old hierarchy-bounds-listener from
 hierarchy-bounds-listener-l and returns the resulting multicast
 listener.
remove(HierarchyListener, HierarchyListener)
- Static method in class java.awt.
AWTEventMulticaster
Removes the old hierarchy-listener from hierarchy-listener-l and
 returns the resulting multicast listener.
remove(InputMethodListener, InputMethodListener)
- Static method in class java.awt.
AWTEventMulticaster
Removes the old input-method-listener from input-method-listener-l and
 returns the resulting multicast listener.
remove(ItemListener, ItemListener)
- Static method in class java.awt.
AWTEventMulticaster
Removes the old item-listener from item-listener-l and
 returns the resulting multicast listener.
remove(KeyListener, KeyListener)
- Static method in class java.awt.
AWTEventMulticaster
Removes the old key-listener from key-listener-l and
 returns the resulting multicast listener.
remove(MouseListener, MouseListener)
- Static method in class java.awt.
AWTEventMulticaster
Removes the old mouse-listener from mouse-listener-l and
 returns the resulting multicast listener.
remove(MouseMotionListener, MouseMotionListener)
- Static method in class java.awt.
AWTEventMulticaster
Removes the old mouse-motion-listener from mouse-motion-listener-l
 and returns the resulting multicast listener.
remove(MouseWheelListener, MouseWheelListener)
- Static method in class java.awt.
AWTEventMulticaster
Removes the old mouse-wheel-listener from mouse-wheel-listener-l
 and returns the resulting multicast listener.
remove(TextListener, TextListener)
- Static method in class java.awt.
AWTEventMulticaster
Removes the old text-listener from text-listener-l and
 returns the resulting multicast listener.
remove(WindowFocusListener, WindowFocusListener)
- Static method in class java.awt.
AWTEventMulticaster
Removes the old window-focus-listener from window-focus-listener-l
 and returns the resulting multicast listener.
remove(WindowListener, WindowListener)
- Static method in class java.awt.
AWTEventMulticaster
Removes the old window-listener from window-listener-l and
 returns the resulting multicast listener.
remove(WindowStateListener, WindowStateListener)
- Static method in class java.awt.
AWTEventMulticaster
Removes the old window-state-listener from window-state-listener-l
 and returns the resulting multicast listener.
remove(MenuComponent)
- Method in class java.awt.
Component
Removes the specified popup menu from the component.
remove(MenuComponent)
- Method in class java.awt.
Frame
Removes the specified menu bar from this frame.
remove(MenuComponent)
- Method in class java.awt.
Menu
Removes the specified menu item from this menu.
remove(MenuComponent)
- Method in class java.awt.
MenuBar
Removes the specified menu component from this menu bar.
remove(MenuComponent)
- Method in interface java.awt.
MenuContainer
Removes the specified menu component from the menu.
remove(TrayIcon)
- Method in class java.awt.
SystemTray
Removes the specified
TrayIcon
from the
SystemTray
.
remove(Class<?>)
- Method in class java.lang.
ClassValue
Removes the associated value for the given class.
remove(Class<?>)
- Method in interface javax.print.attribute.
AttributeSet
Removes any attribute for this category from this attribute set if
 present.
remove(Class<?>)
- Method in class javax.print.attribute.
HashAttributeSet
Removes any attribute for this category from this attribute set if
 present.
remove(Class<? extends EventListener>, EventListener)
- Method in class com.sun.java.accessibility.util.
AccessibilityListenerList
Remove the listener as a listener of the specified type.
remove(Class<T>, T)
- Method in class javax.swing.event.
EventListenerList
Removes the listener as a listener of the specified type.
remove(Object)
- Method in class com.sun.net.httpserver.
Headers
remove(Object)
- Method in class java.awt.
RenderingHints
Removes the key and its corresponding value from this
RenderingHints
object.
remove(Object)
- Method in class java.beans.beancontext.
BeanContextSupport
Removes a child from this BeanContext.
remove(Object)
- Method in class java.beans.
Encoder
Removes the entry for this instance, returning the old entry.
remove(Object)
- Method in class java.security.
Provider
Removes the
key
property (and its corresponding
value
).
remove(Object)
- Method in class java.util.
AbstractCollection
Removes a single instance of the specified element from this
 collection, if it is present (optional operation).
remove(Object)
- Method in class java.util.
AbstractMap
Removes the mapping for a key from this map if it is present
 (optional operation).
remove(Object)
- Method in class java.util.
ArrayDeque
Removes a single instance of the specified element from this deque.
remove(Object)
- Method in class java.util.
ArrayList
Removes the first occurrence of the specified element from this list,
 if it is present.
remove(Object)
- Method in interface java.util.
Collection
Removes a single instance of the specified element from this
 collection, if it is present (optional operation).
remove(Object)
- Method in class java.util.concurrent.
ArrayBlockingQueue
Removes a single instance of the specified element from this queue,
 if it is present.
remove(Object)
- Method in interface java.util.concurrent.
BlockingDeque
Removes the first occurrence of the specified element from this deque.
remove(Object)
- Method in interface java.util.concurrent.
BlockingQueue
Removes a single instance of the specified element from this queue,
 if it is present.
remove(Object)
- Method in class java.util.concurrent.
ConcurrentHashMap.KeySetView
Removes the key from this map view, by removing the key (and its
 corresponding value) from the backing map.
remove(Object)
- Method in class java.util.concurrent.
ConcurrentHashMap
Removes the key (and its corresponding value) from this map.
remove(Object)
- Method in class java.util.concurrent.
ConcurrentLinkedDeque
Removes the first occurrence of the specified element from this deque.
remove(Object)
- Method in class java.util.concurrent.
ConcurrentLinkedQueue
Removes a single instance of the specified element from this queue,
 if it is present.
remove(Object)
- Method in class java.util.concurrent.
ConcurrentSkipListMap
Removes the mapping for the specified key from this map if present.
remove(Object)
- Method in class java.util.concurrent.
ConcurrentSkipListSet
Removes the specified element from this set if it is present.
remove(Object)
- Method in class java.util.concurrent.
CopyOnWriteArrayList
Removes the first occurrence of the specified element from this list,
 if it is present.
remove(Object)
- Method in class java.util.concurrent.
CopyOnWriteArraySet
Removes the specified element from this set if it is present.
remove(Object)
- Method in class java.util.concurrent.
DelayQueue
Removes a single instance of the specified element from this
 queue, if it is present, whether or not it has expired.
remove(Object)
- Method in class java.util.concurrent.
LinkedBlockingDeque
Removes the first occurrence of the specified element from this deque.
remove(Object)
- Method in class java.util.concurrent.
LinkedBlockingQueue
Removes a single instance of the specified element from this queue,
 if it is present.
remove(Object)
- Method in class java.util.concurrent.
LinkedTransferQueue
Removes a single instance of the specified element from this queue,
 if it is present.
remove(Object)
- Method in class java.util.concurrent.
PriorityBlockingQueue
Removes a single instance of the specified element from this queue,
 if it is present.
remove(Object)
- Method in class java.util.concurrent.
SynchronousQueue
Always returns
false
.
remove(Object)
- Method in interface java.util.
Deque
Removes the first occurrence of the specified element from this deque.
remove(Object)
- Method in class java.util.
Dictionary
Removes the
key
(and its corresponding
value
) from this dictionary.
remove(Object)
- Method in class java.util.
EnumMap
Removes the mapping for this key from this map if present.
remove(Object)
- Method in class java.util.
HashMap
Removes the mapping for the specified key from this map if present.
remove(Object)
- Method in class java.util.
HashSet
Removes the specified element from this set if it is present.
remove(Object)
- Method in class java.util.
Hashtable
Removes the key (and its corresponding value) from this
 hashtable.
remove(Object)
- Method in class java.util.
IdentityHashMap
Removes the mapping for this key from this map if present.
remove(Object)
- Method in class java.util.jar.
Attributes
Removes the attribute with the specified name (key) from this Map.
remove(Object)
- Method in class java.util.
LinkedList
Removes the first occurrence of the specified element from this list,
 if it is present.
remove(Object)
- Method in interface java.util.
List
Removes the first occurrence of the specified element from this list,
 if it is present (optional operation).
remove(Object)
- Method in interface java.util.
Map
Removes the mapping for a key from this map if it is present
 (optional operation).
remove(Object)
- Method in class java.util.
PriorityQueue
Removes a single instance of the specified element from this queue,
 if it is present.
remove(Object)
- Method in interface java.util.
Set
Removes the specified element from this set if it is present
 (optional operation).
remove(Object)
- Method in class java.util.
TreeMap
Removes the mapping for this key from this TreeMap if present.
remove(Object)
- Method in class java.util.
TreeSet
Removes the specified element from this set if it is present.
remove(Object)
- Method in class java.util.
Vector
Removes the first occurrence of the specified element in this Vector
 If the Vector does not contain the element, it is unchanged.
remove(Object)
- Method in class java.util.
WeakHashMap
Removes the mapping for a key from this weak hash map if it is present.
remove(Object)
- Method in class javax.management.openmbean.
TabularDataSupport
This method simply calls
remove((Object[]) key)
.
remove(Object)
- Method in interface javax.naming.directory.
Attribute
Removes a specified value from the attribute.
remove(Object)
- Method in class javax.naming.directory.
BasicAttribute
Removes a specified value from this attribute.
remove(Object)
- Method in interface javax.script.
Bindings
Removes the mapping for this key from this map if it is present
 (optional operation).
remove(Object)
- Method in class javax.script.
SimpleBindings
Removes the mapping for this key from this map if it is present
 (optional operation).
remove(Object)
- Method in class javax.swing.
ActionMap
Removes the binding for
key
from this
ActionMap
.
remove(Object)
- Method in interface jdk.jfr.consumer.
EventStream
Unregisters an action.
remove(Object)
- Method in class jdk.jfr.consumer.
RecordingStream
remove(Object)
- Method in class jdk.management.jfr.
RemoteRecordingStream
remove(Object[])
- Method in interface javax.management.openmbean.
TabularData
Removes the
CompositeData
value whose index is
key
from this
TabularData
instance,
 and returns the removed value, or returns
null
if there is no value whose index is
key
.
remove(Object[])
- Method in class javax.management.openmbean.
TabularDataSupport
Removes the
CompositeData
value whose index is
key
from this
TabularData
instance,
 and returns the removed value, or returns
null
if there is no value whose index is
key
.
remove(Object, boolean)
- Method in class java.beans.beancontext.
BeanContextSupport
internal remove used when removal caused by
 unexpected
setBeanContext
or
 by
remove()
invocation.
remove(Object, Object)
- Method in class java.security.
Provider
Removes the entry for the specified key only if it is currently
 mapped to the specified value.
remove(Object, Object)
- Method in class java.util.concurrent.
ConcurrentHashMap
Removes the entry for a key only if currently mapped to a given value.
remove(Object, Object)
- Method in interface java.util.concurrent.
ConcurrentMap
Removes the entry for a key only if currently mapped to a given value.
remove(Object, Object)
- Method in class java.util.concurrent.
ConcurrentSkipListMap
Removes the entry for a key only if currently mapped to a given value.
remove(Object, Object)
- Method in class java.util.
IdentityHashMap
Removes the entry for the specified key only if it is currently
 mapped to the specified value.
remove(Object, Object)
- Method in interface java.util.
Map
Removes the entry for the specified key only if it is currently
 mapped to the specified value.
remove(Runnable)
- Method in class java.util.concurrent.
ThreadPoolExecutor
Removes this task from the executor's internal queue if it is
 present, thus causing it not to be run if it has not already
 started.
remove(String)
- Method in class java.awt.
Choice
Removes the first occurrence of
item
from the
Choice
menu.
remove(String)
- Method in class java.awt.
List
Removes the first occurrence of an item from the list.
remove(String)
- Method in class java.util.prefs.
AbstractPreferences
Implements the
remove(String)
method as per the specification
 in
Preferences.remove(String)
.
remove(String)
- Method in class java.util.prefs.
Preferences
Removes the value associated with the specified key in this preference
 node, if any.
remove(String)
- Method in interface javax.naming.directory.
Attributes
Removes the attribute with the attribute id 'attrID' from
 the attribute set.
remove(String)
- Method in class javax.naming.directory.
BasicAttributes
remove(URI, HttpCookie)
- Method in interface java.net.
CookieStore
Remove a cookie from store.
remove(EventListener)
- Method in class java.awt.
AWTEventMulticaster
Removes a listener from this multicaster.
remove(AccessibleRelation)
- Method in class javax.accessibility.
AccessibleRelationSet
Removes a relation from the current relation set.
remove(AccessibleState)
- Method in class javax.accessibility.
AccessibleStateSet
Removes a state from the current state set.
remove(Attribute)
- Method in interface javax.print.attribute.
AttributeSet
Removes the specified attribute from this attribute set if present.
remove(Attribute)
- Method in class javax.print.attribute.
HashAttributeSet
Removes the specified attribute from this attribute set if present.
remove(MidiEvent)
- Method in class javax.sound.midi.
Track
Removes the specified event from the track.
remove(AbstractButton)
- Method in class javax.swing.
ButtonGroup
Removes the button from the group.
remove(JMenuItem)
- Method in class javax.swing.
JMenu
Removes the specified menu item from this menu.
remove(KeyStroke)
- Method in class javax.swing.
ComponentInputMap
Removes the binding for
key
from this object.
remove(KeyStroke)
- Method in class javax.swing.
InputMap
Removes the binding for
key
from this
InputMap
.
remove(DocumentFilter.FilterBypass, int, int)
- Method in class javax.swing.text.
DocumentFilter
Invoked prior to removal of the specified region in the
 specified Document.
remove(MutableTreeNode)
- Method in class javax.swing.tree.
DefaultMutableTreeNode
Removes
aChild
from this node's child array, giving it a
 null parent.
remove(MutableTreeNode)
- Method in interface javax.swing.tree.
MutableTreeNode
Removes
node
from the receiver.
REMOVE
- Enum constant in enum class jdk.dynalink.
StandardOperation
Removes the value from a namespace defined on an object.
REMOVE
- Static variable in class javax.swing.event.
DocumentEvent.EventType
Remove type.
REMOVE_ATTRIBUTE
- Static variable in interface javax.naming.directory.
DirContext
This constant specifies to delete
 the specified attribute values from the attribute.
REMOVE_FROM_CRL
- Enum constant in enum class java.security.cert.
CRLReason
This reason indicates that the certificate was previously on hold
 and should be removed from the CRL.
removeAccessibleSelection(int)
- Method in class java.awt.
List.AccessibleAWTList
Removes the specified selected item in the object from the object's
 selection.
removeAccessibleSelection(int)
- Method in class java.awt.
MenuComponent.AccessibleAWTMenuComponent
Removes the specified child of the object from the object's
 selection.
removeAccessibleSelection(int)
- Method in interface javax.accessibility.
AccessibleSelection
Removes the specified child of the object from the object's selection.
removeAccessibleSelection(int)
- Method in class javax.swing.
JComboBox.AccessibleJComboBox
Removes the specified child of the object from the object's
 selection.
removeAccessibleSelection(int)
- Method in class javax.swing.
JList.AccessibleJList
Removes the specified selected item in the object from the object's
 selection.
removeAccessibleSelection(int)
- Method in class javax.swing.
JMenu.AccessibleJMenu
Removes the nth item from the selection.
removeAccessibleSelection(int)
- Method in class javax.swing.
JMenuBar.AccessibleJMenuBar
Removes the nth selected item in the object from the object's
 selection.
removeAccessibleSelection(int)
- Method in class javax.swing.
JTabbedPane.AccessibleJTabbedPane
removeAccessibleSelection(int)
- Method in class javax.swing.
JTable.AccessibleJTable
Removes the specified child of the object from the object's
 selection.
removeAccessibleSelection(int)
- Method in class javax.swing.
JTree.AccessibleJTree.AccessibleJTreeNode
Removes the specified selected item in the object from the
 object's
 selection.
removeAccessibleSelection(int)
- Method in class javax.swing.
JTree.AccessibleJTree
Removes the specified selected item in the object from the object's
 selection.
removeActionListener(ActionListener)
- Static method in class com.sun.java.accessibility.util.
AWTEventMonitor
Removes the specified listener so it no longer receives
ACTION
events when they occur.
removeActionListener(ActionListener)
- Method in class java.awt.
Button
Removes the specified action listener so that it no longer
 receives action events from this button.
removeActionListener(ActionListener)
- Method in class java.awt.
List
Removes the specified action listener so that it no longer
 receives action events from this list.
removeActionListener(ActionListener)
- Method in class java.awt.
MenuItem
Removes the specified action listener so it no longer receives
 action events from this menu item.
removeActionListener(ActionListener)
- Method in class java.awt.
TextField
Removes the specified action listener so that it no longer
 receives action events from this text field.
removeActionListener(ActionListener)
- Method in class java.awt.
TrayIcon
Removes the specified action listener.
removeActionListener(ActionListener)
- Method in class javax.swing.
AbstractButton
Removes an
ActionListener
from the button.
removeActionListener(ActionListener)
- Method in interface javax.swing.
ButtonModel
Removes an
ActionListener
from the model.
removeActionListener(ActionListener)
- Method in interface javax.swing.
ComboBoxEditor
Remove an ActionListener
removeActionListener(ActionListener)
- Method in class javax.swing.
DefaultButtonModel
Removes an
ActionListener
from the model.
removeActionListener(ActionListener)
- Method in class javax.swing.
JComboBox
Removes an
ActionListener
.
removeActionListener(ActionListener)
- Method in class javax.swing.
JFileChooser
Removes an
ActionListener
from the file chooser.
removeActionListener(ActionListener)
- Method in class javax.swing.
JTextField
Removes the specified action listener so that it no longer
 receives action events from this textfield.
removeActionListener(ActionListener)
- Method in class javax.swing.plaf.basic.
BasicComboBoxEditor
removeActionListener(ActionListener)
- Method in class javax.swing.
Timer
Removes the specified action listener from the
Timer
.
removeAdjustmentListener(AdjustmentListener)
- Static method in class com.sun.java.accessibility.util.
AWTEventMonitor
Removes the specified listener so it no longer receives
ADJUSTMENT
events when they occur.
removeAdjustmentListener(AdjustmentListener)
- Method in interface java.awt.
Adjustable
Removes an adjustment listener.
removeAdjustmentListener(AdjustmentListener)
- Method in class java.awt.
Scrollbar
Removes the specified adjustment listener so that it no longer
 receives instances of
AdjustmentEvent
from this scroll bar.
removeAdjustmentListener(AdjustmentListener)
- Method in class java.awt.
ScrollPaneAdjustable
Removes the specified adjustment listener so that it no longer
 receives adjustment events from this
ScrollPaneAdjustable
.
removeAdjustmentListener(AdjustmentListener)
- Method in class javax.swing.
JScrollBar
Removes an AdjustmentEvent listener.
removeAll()
- Method in class java.awt.
Choice
Removes all items from the choice menu.
removeAll()
- Method in class java.awt.
Container
Removes all the components from this container.
removeAll()
- Method in class java.awt.
List
Removes all items from this list.
removeAll()
- Method in class java.awt.
Menu
Removes all items from this menu.
removeAll()
- Method in interface java.net.
CookieStore
Remove all cookies in this cookie store.
removeAll()
- Method in class javax.swing.
JDesktopPane
Removes all the components from this container.
removeAll()
- Method in class javax.swing.
JLayeredPane
Removes all the components from this container.
removeAll()
- Method in class javax.swing.
JMenu
Removes all menu items from this menu.
removeAll()
- Method in class javax.swing.
JSplitPane
Removes all the child components from the split pane.
removeAll()
- Method in class javax.swing.
JTabbedPane
Removes all the tabs and their corresponding components
 from the
tabbedpane
.
removeAll()
- Method in class javax.swing.text.
View
Removes all of the children.
removeAll(Collection)
- Method in class java.beans.beancontext.
BeanContextSupport
remove all specified children (Unsupported)
 implementations must synchronized on the hierarchy lock and "children" protected field
removeAll(Collection<?>)
- Method in class java.util.
AbstractCollection
Removes all of this collection's elements that are also contained in the
 specified collection (optional operation).
removeAll(Collection<?>)
- Method in class java.util.
AbstractSet
Removes from this set all of its elements that are contained in the
 specified collection (optional operation).
removeAll(Collection<?>)
- Method in class java.util.
ArrayDeque
removeAll(Collection<?>)
- Method in class java.util.
ArrayList
Removes from this list all of its elements that are contained in the
 specified collection.
removeAll(Collection<?>)
- Method in interface java.util.
Collection
Removes all of this collection's elements that are also contained in the
 specified collection (optional operation).
removeAll(Collection<?>)
- Method in class java.util.concurrent.
ArrayBlockingQueue
removeAll(Collection<?>)
- Method in class java.util.concurrent.
ConcurrentHashMap.KeySetView
removeAll(Collection<?>)
- Method in class java.util.concurrent.
ConcurrentLinkedDeque
removeAll(Collection<?>)
- Method in class java.util.concurrent.
ConcurrentLinkedQueue
removeAll(Collection<?>)
- Method in class java.util.concurrent.
ConcurrentSkipListSet
Removes from this set all of its elements that are contained in
 the specified collection.
removeAll(Collection<?>)
- Method in class java.util.concurrent.
CopyOnWriteArrayList
Removes from this list all of its elements that are contained in
 the specified collection.
removeAll(Collection<?>)
- Method in class java.util.concurrent.
CopyOnWriteArraySet
Removes from this set all of its elements that are contained in the
 specified collection.
removeAll(Collection<?>)
- Method in class java.util.concurrent.
LinkedBlockingDeque
removeAll(Collection<?>)
- Method in class java.util.concurrent.
LinkedBlockingQueue
removeAll(Collection<?>)
- Method in class java.util.concurrent.
LinkedTransferQueue
removeAll(Collection<?>)
- Method in class java.util.concurrent.
PriorityBlockingQueue
removeAll(Collection<?>)
- Method in class java.util.concurrent.
SynchronousQueue
Always returns
false
.
removeAll(Collection<?>)
- Method in interface java.util.
List
Removes from this list all of its elements that are contained in the
 specified collection (optional operation).
removeAll(Collection<?>)
- Method in class java.util.
PriorityQueue
removeAll(Collection<?>)
- Method in interface java.util.
Set
Removes from this set all of its elements that are contained in the
 specified collection (optional operation).
removeAll(Collection<?>)
- Method in class java.util.
Vector
Removes from this Vector all of its elements that are contained in the
 specified Collection.
removeAllChildren()
- Method in class javax.swing.tree.
DefaultMutableTreeNode
Removes all of this node's children, setting their parents to null.
removeAllElements()
- Method in class java.util.
Vector
Removes all components from this vector and sets its size to zero.
removeAllElements()
- Method in class javax.swing.
DefaultComboBoxModel
Empties the list.
removeAllElements()
- Method in class javax.swing.
DefaultListModel
Removes all components from this list and sets its size to zero.
removeAllHighlights()
- Method in class javax.swing.text.
DefaultHighlighter
Removes all highlights.
removeAllHighlights()
- Method in interface javax.swing.text.
Highlighter
Removes all highlights this highlighter is responsible for.
removeAllIIOReadProgressListeners()
- Method in class javax.imageio.
ImageReader
Removes all currently registered
IIOReadProgressListener
objects.
removeAllIIOReadUpdateListeners()
- Method in class javax.imageio.
ImageReader
Removes all currently registered
IIOReadUpdateListener
objects.
removeAllIIOReadWarningListeners()
- Method in class javax.imageio.
ImageReader
Removes all currently registered
IIOReadWarningListener
objects.
removeAllIIOWriteProgressListeners()
- Method in class javax.imageio.
ImageWriter
Removes all currently registered
IIOWriteProgressListener
objects.
removeAllIIOWriteWarningListeners()
- Method in class javax.imageio.
ImageWriter
Removes all currently registered
IIOWriteWarningListener
objects.
removeAllItems()
- Method in class javax.swing.
JComboBox
Removes all items from the item list.
removeAllNotifications()
- Method in class javax.management.timer.
Timer
Removes all the timer notifications from the list of notifications
 and resets the counter used to update the timer notification identifiers.
removeAllNotifications()
- Method in interface javax.management.timer.
TimerMBean
Removes all the timer notifications from the list of notifications
 and resets the counter used to update the timer notification identifiers.
removeAllowedTagSet(TIFFTagSet)
- Method in class javax.imageio.plugins.tiff.
TIFFImageReadParam
Removes a
TIFFTagSet
object from the list of
 allowed tag sets.
removeAncestorListener(AncestorListener)
- Static method in class com.sun.java.accessibility.util.
SwingEventMonitor
Removes the specified listener so it no longer receives
ANCESTOR
events when they occur.
removeAncestorListener(AncestorListener)
- Method in class javax.swing.
JComponent
Unregisters
listener
so that it will no longer receive
AncestorEvents
.
removeAppEventListener(SystemEventListener)
- Method in class java.awt.
Desktop
Removes sub-types of
SystemEventListener
to listen for notifications
 from the native system.
removeAttribute(int)
- Method in class org.xml.sax.helpers.
AttributesImpl
Remove an attribute from the list.
removeAttribute(Object)
- Method in class javax.swing.text.
AbstractDocument.AbstractElement
Removes an attribute from the set.
removeAttribute(Object)
- Method in interface javax.swing.text.
MutableAttributeSet
Removes an attribute with the given
name
.
removeAttribute(Object)
- Method in class javax.swing.text.
SimpleAttributeSet
Removes an attribute from the list.
removeAttribute(Object)
- Method in class javax.swing.text.
StyleContext.NamedStyle
Removes an attribute from the set.
removeAttribute(String)
- Method in class javax.imageio.metadata.
IIOMetadataNode
removeAttribute(String)
- Method in interface org.w3c.dom.
Element
Removes an attribute by name.
removeAttribute(String)
- Method in class org.xml.sax.helpers.
AttributeListImpl
Deprecated.
Remove an attribute from the list.
removeAttribute(String, int)
- Method in interface javax.script.
ScriptContext
Remove an attribute in a given scope.
removeAttribute(String, int)
- Method in class javax.script.
SimpleScriptContext
Remove an attribute in a given scope.
removeAttribute(String, String)
- Method in class javax.imageio.metadata.
IIOMetadataFormatImpl
Removes an attribute from a previously defined element.
removeAttribute(AttributeSet, Object)
- Method in interface javax.swing.text.
AbstractDocument.AttributeContext
Removes an attribute from the set.
removeAttribute(AttributeSet, Object)
- Method in class javax.swing.text.html.
StyleSheet
Removes an attribute from the set.
removeAttribute(AttributeSet, Object)
- Method in class javax.swing.text.
StyleContext
Removes an attribute from the set.
removeAttributeChangeNotificationListener(NotificationListener, String)
- Method in interface javax.management.modelmbean.
ModelMBeanNotificationBroadcaster
Removes a listener for attributeChangeNotifications from the RequiredModelMBean.
removeAttributeChangeNotificationListener(NotificationListener, String)
- Method in class javax.management.modelmbean.
RequiredModelMBean
removeAttributeNode(Attr)
- Method in class javax.imageio.metadata.
IIOMetadataNode
removeAttributeNode(Attr)
- Method in interface org.w3c.dom.
Element
Removes the specified attribute node.
removeAttributeNS(String, String)
- Method in class javax.imageio.metadata.
IIOMetadataNode
Equivalent to
removeAttribute(localName)
.
removeAttributeNS(String, String)
- Method in interface org.w3c.dom.
Element
Removes an attribute by local name and namespace URI.
removeAttributes(Enumeration<?>)
- Method in class javax.swing.text.
AbstractDocument.AbstractElement
Removes a set of attributes for the element.
removeAttributes(Enumeration<?>)
- Method in interface javax.swing.text.
MutableAttributeSet
Removes an attribute set with the given
names
.
removeAttributes(Enumeration<?>)
- Method in class javax.swing.text.
SimpleAttributeSet
Removes a set of attributes from the list.
removeAttributes(Enumeration<?>)
- Method in class javax.swing.text.
StyleContext.NamedStyle
Removes a set of attributes for the element.
removeAttributes(AttributeSet)
- Method in class javax.swing.text.
AbstractDocument.AbstractElement
Removes a set of attributes for the element.
removeAttributes(AttributeSet)
- Method in interface javax.swing.text.
MutableAttributeSet
Removes a set of attributes with the given
name
.
removeAttributes(AttributeSet)
- Method in class javax.swing.text.
SimpleAttributeSet
Removes a set of attributes from the list.
removeAttributes(AttributeSet)
- Method in class javax.swing.text.
StyleContext.NamedStyle
Removes a set of attributes for the element.
removeAttributes(AttributeSet, Enumeration<?>)
- Method in interface javax.swing.text.
AbstractDocument.AttributeContext
Removes a set of attributes for the element.
removeAttributes(AttributeSet, Enumeration<?>)
- Method in class javax.swing.text.html.
StyleSheet
Removes a set of attributes for the element.
removeAttributes(AttributeSet, Enumeration<?>)
- Method in class javax.swing.text.
StyleContext
Removes a set of attributes for the element.
removeAttributes(AttributeSet, AttributeSet)
- Method in interface javax.swing.text.
AbstractDocument.AttributeContext
Removes a set of attributes for the element.
removeAttributes(AttributeSet, AttributeSet)
- Method in class javax.swing.text.html.
StyleSheet
Removes a set of attributes.
removeAttributes(AttributeSet, AttributeSet)
- Method in class javax.swing.text.
StyleContext
Removes a set of attributes for the element.
removeAuxiliaryLookAndFeel(LookAndFeel)
- Static method in class javax.swing.
UIManager
Removes a
LookAndFeel
from the list of auxiliary look and feels.
removeAWTEventListener(AWTEventListener)
- Method in class java.awt.
Toolkit
Removes an AWTEventListener from receiving dispatched AWTEvents.
removeBeanContextMembershipListener(BeanContextMembershipListener)
- Method in interface java.beans.beancontext.
BeanContext
Removes the specified
BeanContextMembershipListener
so that it no longer receives
BeanContextMembershipEvent
s
 when the child
Component
(s) are added or removed.
removeBeanContextMembershipListener(BeanContextMembershipListener)
- Method in class java.beans.beancontext.
BeanContextSupport
Removes a BeanContextMembershipListener
removeBeanContextServicesListener(BeanContextServicesListener)
- Method in interface java.beans.beancontext.
BeanContextServices
Removes a
BeanContextServicesListener
from this
BeanContext
removeBeanContextServicesListener(BeanContextServicesListener)
- Method in class java.beans.beancontext.
BeanContextServicesSupport
remove a BeanContextServicesListener
removeBindings()
- Method in interface javax.swing.text.
Keymap
Removes all bindings from the keymap.
removeCaretListener(CaretListener)
- Static method in class com.sun.java.accessibility.util.
SwingEventMonitor
Removes the specified listener so it no longer receives
CARET
events when they occur.
removeCaretListener(CaretListener)
- Method in class javax.swing.text.
JTextComponent
Removes a caret listener.
removeCellEditorListener(CellEditorListener)
- Static method in class com.sun.java.accessibility.util.
SwingEventMonitor
Removes the specified listener so it no longer receives
CELLEDITOR
events when they occur.
removeCellEditorListener(CellEditorListener)
- Method in class javax.swing.
AbstractCellEditor
Removes a
CellEditorListener
from the listener list.
removeCellEditorListener(CellEditorListener)
- Method in interface javax.swing.
CellEditor
Removes a listener from the list that's notified
removeCellEditorListener(CellEditorListener)
- Method in class javax.swing.tree.
DefaultTreeCellEditor
Removes the previously added
CellEditorListener
.
removeCertificate(Certificate)
- Method in class java.security.
Identity
Deprecated.
Removes a certificate from this
Identity
.
removeChangeListener(ChangeListener)
- Static method in class com.sun.java.accessibility.util.
SwingEventMonitor
Removes the specified listener so it no longer receives
CHANGE
events when they occur.
removeChangeListener(ChangeListener)
- Method in class javax.swing.
AbstractButton
Removes a ChangeListener from the button.
removeChangeListener(ChangeListener)
- Method in class javax.swing.
AbstractSpinnerModel
Removes a ChangeListener from the model's listener list.
removeChangeListener(ChangeListener)
- Method in interface javax.swing.
BoundedRangeModel
Removes a ChangeListener from the model's listener list.
removeChangeListener(ChangeListener)
- Method in interface javax.swing.
ButtonModel
Removes a
ChangeListener
from the model.
removeChangeListener(ChangeListener)
- Method in interface javax.swing.colorchooser.
ColorSelectionModel
Removes
listener
as a listener to changes in the model.
removeChangeListener(ChangeListener)
- Method in class javax.swing.colorchooser.
DefaultColorSelectionModel
Removes a
ChangeListener
from the model.
removeChangeListener(ChangeListener)
- Method in class javax.swing.
DefaultBoundedRangeModel
Removes a
ChangeListener
.
removeChangeListener(ChangeListener)
- Method in class javax.swing.
DefaultButtonModel
Removes a
ChangeListener
from the model.
removeChangeListener(ChangeListener)
- Method in class javax.swing.
DefaultSingleSelectionModel
Removes a
ChangeListener
from the button.
removeChangeListener(ChangeListener)
- Method in class javax.swing.
JProgressBar
Removes a
ChangeListener
from the progress bar.
removeChangeListener(ChangeListener)
- Method in class javax.swing.
JSlider
Removes a ChangeListener from the slider.
removeChangeListener(ChangeListener)
- Method in class javax.swing.
JSpinner
Removes a
ChangeListener
from this spinner.
removeChangeListener(ChangeListener)
- Method in class javax.swing.
JTabbedPane
Removes a
ChangeListener
from this tabbedpane.
removeChangeListener(ChangeListener)
- Method in class javax.swing.
JViewport
Removes a
ChangeListener
from the list that's notified each
 time the views size, position, or the viewports extent size
 has changed.
removeChangeListener(ChangeListener)
- Method in class javax.swing.
MenuSelectionManager
Removes a ChangeListener from the button.
removeChangeListener(ChangeListener)
- Method in interface javax.swing.
SingleSelectionModel
Removes
listener
as a listener to changes in the model.
removeChangeListener(ChangeListener)
- Method in interface javax.swing.
SpinnerModel
Removes a
ChangeListener
from the model's listener list.
removeChangeListener(ChangeListener)
- Method in interface javax.swing.text.
Caret
Removes a listener that was tracking caret position changes.
removeChangeListener(ChangeListener)
- Method in class javax.swing.text.
DefaultCaret
Removes a listener that was tracking caret position changes.
removeChangeListener(ChangeListener)
- Method in interface javax.swing.text.
Style
Removes a listener that was tracking attribute changes.
removeChangeListener(ChangeListener)
- Method in class javax.swing.text.
StyleContext.NamedStyle
Removes a change listener.
removeChangeListener(ChangeListener)
- Method in class javax.swing.text.
StyleContext
Removes a listener that was tracking styles being
 added or removed.
removeChild(Node)
- Method in class javax.imageio.metadata.
IIOMetadataNode
Removes the child node indicated by
oldChild
from
 the list of children, and returns it.
removeChild(Node)
- Method in interface org.w3c.dom.
Node
Removes the child node indicated by
oldChild
from the list
 of children, and returns it.
removeChoosableFileFilter(FileFilter)
- Method in class javax.swing.
JFileChooser
Removes a filter from the list of user choosable file filters.
removeChooserPanel(AbstractColorChooserPanel)
- Method in class javax.swing.
JColorChooser
Removes the Color Panel specified.
removeColumn(TableColumn)
- Method in class javax.swing.
JTable
Removes
aColumn
from this
JTable
's
  array of columns.
removeColumn(TableColumn)
- Method in class javax.swing.table.
DefaultTableColumnModel
Deletes the
column
from the
tableColumns
array.
removeColumn(TableColumn)
- Method in interface javax.swing.table.
TableColumnModel
Deletes the
TableColumn
column
from the
tableColumns
array.
removeColumnModelListener(TableColumnModelListener)
- Static method in class com.sun.java.accessibility.util.
SwingEventMonitor
Removes the specified listener so it no longer receives
COLUMNMODEL
events when they occur.
removeColumnModelListener(TableColumnModelListener)
- Method in class javax.swing.table.
DefaultTableColumnModel
Removes a listener for table column model events.
removeColumnModelListener(TableColumnModelListener)
- Method in interface javax.swing.table.
TableColumnModel
Removes a listener for table column model events.
removeColumnSelectionInterval(int, int)
- Method in class javax.swing.
JTable
Deselects the columns from
index0
to
index1
, inclusive.
removeComponentListener(ComponentListener)
- Static method in class com.sun.java.accessibility.util.
AWTEventMonitor
Removes the specified listener so it no longer receives
COMPONENT
events when they occur.
removeComponentListener(ComponentListener)
- Method in class java.awt.
Component
Removes the specified component listener so that it no longer
 receives component events from this component.
removeConfigurationListener(Runnable)
- Method in class java.util.logging.
LogManager
Removes a previously registered configuration listener.
removeConnectionEventListener(ConnectionEventListener)
- Method in interface javax.sql.
PooledConnection
Removes the given event listener from the list of components that
 will be notified when an event occurs on this
PooledConnection
object.
removeConnectionNotificationListener(NotificationListener)
- Method in interface javax.management.remote.
JMXConnector
Removes a listener from the list to be informed of changes
 in status.
removeConnectionNotificationListener(NotificationListener)
- Method in class javax.management.remote.rmi.
RMIConnector
removeConnectionNotificationListener(NotificationListener, NotificationFilter, Object)
- Method in interface javax.management.remote.
JMXConnector
Removes a listener from the list to be informed of changes
 in status.
removeConnectionNotificationListener(NotificationListener, NotificationFilter, Object)
- Method in class javax.management.remote.rmi.
RMIConnector
removeConsumer(ImageConsumer)
- Method in class java.awt.image.
FilteredImageSource
Removes an ImageConsumer from the list of consumers interested in
 data for this image.
removeConsumer(ImageConsumer)
- Method in interface java.awt.image.
ImageProducer
Removes the specified
ImageConsumer
object
 from the list of consumers currently registered to
 receive image data.
removeConsumer(ImageConsumer)
- Method in class java.awt.image.
MemoryImageSource
Removes an ImageConsumer from the list of consumers interested in
 data for this image.
removeConsumer(ImageConsumer)
- Method in class java.awt.image.renderable.
RenderableImageProducer
Remove an ImageConsumer from the list of consumers interested in
 data for this image.
removeContainerListener(ContainerListener)
- Static method in class com.sun.java.accessibility.util.
AWTEventMonitor
Removes the specified listener so it no longer receives
CONTAINER
events when they occur.
removeContainerListener(ContainerListener)
- Method in class java.awt.
Container
Removes the specified container listener so it no longer receives
 container events from this container.
removeContext(HttpContext)
- Method in class com.sun.net.httpserver.
HttpServer
Removes the given context from the server.
removeContext(String)
- Method in class com.sun.net.httpserver.
HttpServer
Removes the context identified by the given path from the server.
removeContextPropertyChangeListener(PropertyChangeListener)
- Method in class com.sun.tools.jconsole.
JConsolePlugin
Removes a
PropertyChangeListener
from the listener list of the
JConsoleContext
object for this plugin.
removeControlButtons()
- Method in class javax.swing.plaf.metal.
MetalFileChooserUI
Removes control buttons from bottom panel.
removeControllerEventListener(ControllerEventListener, int[])
- Method in interface javax.sound.midi.
Sequencer
Removes a controller event listener's interest in one or more types of
 controller event.
removeDescendantSelectedPaths(TreePath, boolean)
- Method in class javax.swing.
JTree
Removes any paths in the selection that are descendants of
path
.
removeDescendantToggledPaths(Enumeration<TreePath>)
- Method in class javax.swing.
JTree
Removes any descendants of the
TreePaths
in
toRemove
that have been expanded.
removeDocumentListener(DocumentListener)
- Static method in class com.sun.java.accessibility.util.
SwingEventMonitor
Removes the specified listener so it no longer receives
DOCUMENT
events when they occur.
removeDocumentListener(DocumentListener)
- Method in class javax.swing.text.
AbstractDocument
Removes a document listener.
removeDocumentListener(DocumentListener)
- Method in class javax.swing.text.
DefaultStyledDocument
Removes a document listener.
removeDocumentListener(DocumentListener)
- Method in interface javax.swing.text.
Document
Unregisters the given observer from the notification list
 so it will no longer receive change updates.
removeDragGestureListener(DragGestureListener)
- Method in class java.awt.dnd.
DragGestureRecognizer
unregister the current DragGestureListener
removeDragSourceListener(DragSourceListener)
- Method in class java.awt.dnd.
DragSource
Removes the specified
DragSourceListener
from this
DragSource
.
removeDragSourceListener(DragSourceListener)
- Method in class java.awt.dnd.
DragSourceContext
Removes the specified
DragSourceListener
from  this
DragSourceContext
.
removeDragSourceMotionListener(DragSourceMotionListener)
- Method in class java.awt.dnd.
DragSource
Removes the specified
DragSourceMotionListener
from this
DragSource
.
removeDropTargetListener(DropTargetListener)
- Method in class java.awt.dnd.
DropTarget
Removes the current
DropTargetListener
(UNICAST SOURCE).
removeEditor()
- Method in class javax.swing.
JTable
Discards the editor object and frees the real estate it used for
 cell rendering.
removeEditor()
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI
This public method is implementation specific and should be private.
removeEldestEntry(Map.Entry<K, V>)
- Method in class java.util.
LinkedHashMap
Returns
true
if this map should remove its eldest entry.
removeElement(Object)
- Method in class java.util.
Vector
Removes the first (lowest-indexed) occurrence of the argument
 from this vector.
removeElement(Object)
- Method in class javax.swing.
DefaultComboBoxModel
removeElement(Object)
- Method in class javax.swing.
DefaultListModel
Removes the first (lowest-indexed) occurrence of the argument
 from this list.
removeElement(Object)
- Method in interface javax.swing.
MutableComboBoxModel
Removes an item from the model.
removeElement(String)
- Method in class javax.imageio.metadata.
IIOMetadataFormatImpl
Removes an element from the format.
removeElement(Element)
- Method in class javax.swing.text.
DefaultStyledDocument
Removes an element from this document.
removeElementAt(int)
- Method in class java.util.
Vector
Deletes the component at the specified index.
removeElementAt(int)
- Method in class javax.swing.
DefaultComboBoxModel
removeElementAt(int)
- Method in class javax.swing.
DefaultListModel
Deletes the component at the specified index.
removeElementAt(int)
- Method in interface javax.swing.
MutableComboBoxModel
Removes an item at a specific index.
removeEntries(int, int)
- Method in class javax.swing.
SizeSequence
Removes a contiguous group of entries
 from this
SizeSequence
.
removeEventListener(String, EventListener, boolean)
- Method in interface org.w3c.dom.events.
EventTarget
This method allows the removal of event listeners from the event
 target.
removeField(String)
- Method in interface javax.management.
Descriptor
Removes a field from the descriptor.
removeField(String)
- Method in class javax.management.
ImmutableDescriptor
Removes a field from the descriptor.
removeField(String)
- Method in class javax.management.modelmbean.
DescriptorSupport
removeFirst()
- Method in class java.util.
ArrayDeque
removeFirst()
- Method in class java.util.
ArrayList
Removes and returns the first element of this collection (optional operation).
removeFirst()
- Method in class java.util.concurrent.
ConcurrentLinkedDeque
removeFirst()
- Method in class java.util.concurrent.
CopyOnWriteArrayList
Removes and returns the first element of this collection (optional operation).
removeFirst()
- Method in class java.util.concurrent.
LinkedBlockingDeque
removeFirst()
- Method in interface java.util.
Deque
Retrieves and removes the first element of this deque.
removeFirst()
- Method in class java.util.
LinkedHashSet
Removes and returns the first element of this collection (optional operation).
removeFirst()
- Method in class java.util.
LinkedList
Removes and returns the first element from this list.
removeFirst()
- Method in interface java.util.
List
Removes and returns the first element of this collection (optional operation).
removeFirst()
- Method in interface java.util.
NavigableSet
Removes and returns the first element of this collection (optional operation).
removeFirst()
- Method in interface java.util.
SequencedCollection
Removes and returns the first element of this collection (optional operation).
removeFirst()
- Method in interface java.util.
SortedSet
Removes and returns the first element of this collection (optional operation).
removeFirstOccurrence(Object)
- Method in class java.util.
ArrayDeque
Removes the first occurrence of the specified element in this
 deque (when traversing the deque from head to tail).
removeFirstOccurrence(Object)
- Method in interface java.util.concurrent.
BlockingDeque
Removes the first occurrence of the specified element from this deque.
removeFirstOccurrence(Object)
- Method in class java.util.concurrent.
ConcurrentLinkedDeque
Removes the first occurrence of the specified element from this deque.
removeFirstOccurrence(Object)
- Method in class java.util.concurrent.
LinkedBlockingDeque
removeFirstOccurrence(Object)
- Method in interface java.util.
Deque
Removes the first occurrence of the specified element from this deque.
removeFirstOccurrence(Object)
- Method in class java.util.
LinkedList
Removes the first occurrence of the specified element in this
 list (when traversing the list from head to tail).
removeFlavorListener(FlavorListener)
- Method in class java.awt.datatransfer.
Clipboard
Removes the specified
FlavorListener
so that it no longer
 receives
FlavorEvent
s from this
Clipboard
.
removeFocusListener(FocusListener)
- Static method in class com.sun.java.accessibility.util.
AWTEventMonitor
Removes the specified listener so it no longer receives
FOCUS
events when they occur.
removeFocusListener(FocusListener)
- Method in class com.sun.java.accessibility.util.
Translator
Removes the specified focus listener so it no longer receives focus
 events from this component.
removeFocusListener(FocusListener)
- Method in class java.awt.
Component.AccessibleAWTComponent
Removes the specified focus listener so it no longer receives focus
 events from this component.
removeFocusListener(FocusListener)
- Method in class java.awt.
Component
Removes the specified focus listener so that it no longer
 receives focus events from this component.
removeFocusListener(FocusListener)
- Method in class java.awt.
List.AccessibleAWTList.AccessibleAWTListChild
Removes the specified focus listener so it no longer receives
 focus events from this component.
removeFocusListener(FocusListener)
- Method in class java.awt.
MenuComponent.AccessibleAWTMenuComponent
Removes the specified focus listener so it no longer receives focus
 events from this component.
removeFocusListener(FocusListener)
- Method in interface javax.accessibility.
AccessibleComponent
Removes the specified focus listener so it no longer receives focus
 events from this component.
removeFocusListener(FocusListener)
- Method in class javax.swing.
JList.AccessibleJList.AccessibleJListChild
removeFocusListener(FocusListener)
- Method in class javax.swing.
JTable.AccessibleJTable.AccessibleJTableCell
removeFocusListener(FocusListener)
- Method in class javax.swing.
JTree.AccessibleJTree.AccessibleJTreeNode
removeFocusListener(FocusListener)
- Method in class javax.swing.table.
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry
removeFromEnvironment(String)
- Method in interface javax.naming.
Context
Removes an environment property from the environment of this
 context.
removeFromEnvironment(String)
- Method in class javax.naming.
InitialContext
removeFromParent()
- Method in class javax.swing.tree.
DefaultMutableTreeNode
Removes the subtree rooted at this node from the tree, giving this
 node a null parent.
removeFromParent()
- Method in interface javax.swing.tree.
MutableTreeNode
Removes the receiver from its parent.
removeFromSource()
- Method in class javax.swing.plaf.basic.
BasicTreeUI.MouseInputHandler
Removes an event from the source.
removeGUIInitializedListener(GUIInitializedListener)
- Static method in class com.sun.java.accessibility.util.
EventQueueMonitor
Removes the specified listener to be notified when the GUI subsystem
 is initialized.
removeHandler(Handler)
- Method in class java.util.logging.
Logger
Remove a log Handler.
removeHandshakeCompletedListener(HandshakeCompletedListener)
- Method in class javax.net.ssl.
SSLSocket
Removes a previously registered handshake completion listener.
removeHierarchyBoundsListener(HierarchyBoundsListener)
- Method in class java.awt.
Component
Removes the specified hierarchy bounds listener so that it no longer
 receives hierarchy bounds events from this component.
removeHierarchyListener(HierarchyListener)
- Method in class java.awt.
Component
Removes the specified hierarchy listener so that it no longer
 receives hierarchy changed events from this component.
removeHighlight(Object)
- Method in class javax.swing.text.
DefaultHighlighter
Removes a highlight from the view.
removeHighlight(Object)
- Method in interface javax.swing.text.
Highlighter
Removes a highlight from the view.
removeHyperlinkListener(HyperlinkListener)
- Method in class javax.swing.
JEditorPane
Removes a hyperlink listener.
removeIconFor(JInternalFrame)
- Method in class javax.swing.
DefaultDesktopManager
Convenience method to remove the desktopIcon of
f
is necessary.
removeIdentity(Identity)
- Method in class java.security.
IdentityScope
Deprecated.
Removes an
Identity
from this identity scope.
removeIf(Predicate<? super E>)
- Method in class java.util.
ArrayDeque
removeIf(Predicate<? super E>)
- Method in class java.util.
ArrayList
removeIf(Predicate<? super E>)
- Method in interface java.util.
Collection
Removes all of the elements of this collection that satisfy the given
 predicate.
removeIf(Predicate<? super E>)
- Method in class java.util.concurrent.
ArrayBlockingQueue
removeIf(Predicate<? super E>)
- Method in class java.util.concurrent.
ConcurrentLinkedDeque
removeIf(Predicate<? super E>)
- Method in class java.util.concurrent.
ConcurrentLinkedQueue
removeIf(Predicate<? super E>)
- Method in class java.util.concurrent.
CopyOnWriteArrayList
removeIf(Predicate<? super E>)
- Method in class java.util.concurrent.
CopyOnWriteArraySet
removeIf(Predicate<? super E>)
- Method in class java.util.concurrent.
LinkedBlockingDeque
removeIf(Predicate<? super E>)
- Method in class java.util.concurrent.
LinkedBlockingQueue
removeIf(Predicate<? super E>)
- Method in class java.util.concurrent.
LinkedTransferQueue
removeIf(Predicate<? super E>)
- Method in class java.util.concurrent.
PriorityBlockingQueue
removeIf(Predicate<? super E>)
- Method in class java.util.
PriorityQueue
removeIf(Predicate<? super E>)
- Method in class java.util.
Vector
removeIIOReadProgressListener(IIOReadProgressListener)
- Method in class javax.imageio.
ImageReader
Removes an
IIOReadProgressListener
from the list
 of registered progress listeners.
removeIIOReadUpdateListener(IIOReadUpdateListener)
- Method in class javax.imageio.
ImageReader
Removes an
IIOReadUpdateListener
from the list of
 registered update listeners.
removeIIOReadWarningListener(IIOReadWarningListener)
- Method in class javax.imageio.
ImageReader
Removes an
IIOReadWarningListener
from the list of
 registered error listeners.
removeIIOWriteProgressListener(IIOWriteProgressListener)
- Method in class javax.imageio.
ImageWriter
Removes an
IIOWriteProgressListener
from the list
 of registered progress listeners.
removeIIOWriteWarningListener(IIOWriteWarningListener)
- Method in class javax.imageio.
ImageWriter
Removes an
IIOWriteWarningListener
from the list
 of registered warning listeners.
removeImage(int)
- Method in class javax.imageio.
ImageWriter
Removes an image from the stream.
removeImage(Image)
- Method in class java.awt.
MediaTracker
Removes the specified image from this media tracker.
removeImage(Image, int)
- Method in class java.awt.
MediaTracker
Removes the specified image from the specified tracking
 ID of this media tracker.
removeImage(Image, int, int, int)
- Method in class java.awt.
MediaTracker
Removes the specified image with the specified
 width, height, and ID from this media tracker.
removeIndexInterval(int, int)
- Method in class javax.swing.
DefaultListSelectionModel
Remove the indices in the interval index0,index1 (inclusive) from
 the selection model.
removeIndexInterval(int, int)
- Method in interface javax.swing.
ListSelectionModel
Remove the indices in the interval
index0,index1
(inclusive) from
 the selection model.
removeInputMethodListener(InputMethodListener)
- Method in class java.awt.
Component
Removes the specified input method listener so that it no longer
 receives input method events from this component.
removeInternal(EventListener, EventListener)
- Static method in class java.awt.
AWTEventMulticaster
Returns the resulting multicast listener after removing the
 old listener from listener-l.
removeInternalFrameListener(InternalFrameListener)
- Static method in class com.sun.java.accessibility.util.
SwingEventMonitor
Removes the specified listener so it no longer receives
INTERNALFRAME
events when they occur.
removeInternalFrameListener(InternalFrameListener)
- Method in class javax.swing.
JInternalFrame
Removes the specified internal frame listener so that it no longer
 receives internal frame events from this internal frame.
removeInvalidComponent(JComponent)
- Method in class javax.swing.
RepaintManager
Remove a component from the list of invalid components.
removeItem(Object)
- Method in class javax.swing.
JComboBox
Removes an item from the item list.
removeItemAt(int)
- Method in class javax.swing.
JComboBox
Removes the item at
anIndex
This method works only if the
JComboBox
uses a
 mutable data model.
removeItemListener(ItemListener)
- Static method in class com.sun.java.accessibility.util.
AWTEventMonitor
Removes the specified listener so it no longer receives
ITEM
events when they occur.
removeItemListener(ItemListener)
- Method in class java.awt.
Checkbox
Removes the specified item listener so that the item listener
 no longer receives item events from this check box.
removeItemListener(ItemListener)
- Method in class java.awt.
CheckboxMenuItem
Removes the specified item listener so that it no longer receives
 item events from this check box menu item.
removeItemListener(ItemListener)
- Method in class java.awt.
Choice
Removes the specified item listener so that it no longer receives
 item events from this
Choice
menu.
removeItemListener(ItemListener)
- Method in interface java.awt.
ItemSelectable
Removes an item listener.
removeItemListener(ItemListener)
- Method in class java.awt.
List
Removes the specified item listener so that it no longer
 receives item events from this list.
removeItemListener(ItemListener)
- Method in class javax.swing.
AbstractButton
Removes an
ItemListener
from the button.
removeItemListener(ItemListener)
- Method in interface javax.swing.
ButtonModel
Removes an
ItemListener
from the model.
removeItemListener(ItemListener)
- Method in class javax.swing.
DefaultButtonModel
Removes an
ItemListener
from the model.
removeItemListener(ItemListener)
- Method in class javax.swing.
JComboBox
Removes an
ItemListener
.
removeKeyEventDispatcher(KeyEventDispatcher)
- Method in class java.awt.
KeyboardFocusManager
Removes a KeyEventDispatcher which was previously added to this
 KeyboardFocusManager's dispatcher chain.
removeKeyEventPostProcessor(KeyEventPostProcessor)
- Method in class java.awt.
KeyboardFocusManager
Removes a previously added KeyEventPostProcessor from this
 KeyboardFocusManager's post-processor chain.
removeKeyListener(KeyListener)
- Static method in class com.sun.java.accessibility.util.
AWTEventMonitor
Removes the specified listener so it no longer receives
KEY
events when they occur.
removeKeyListener(KeyListener)
- Method in class java.awt.
Component
Removes the specified key listener so that it no longer
 receives key events from this component.
removeKeymap(String)
- Static method in class javax.swing.text.
JTextComponent
Removes a named keymap previously added to the document.
removeKeyStrokeBinding(KeyStroke)
- Method in interface javax.swing.text.
Keymap
Removes a binding from the keymap.
removeLast()
- Method in class java.util.
ArrayDeque
removeLast()
- Method in class java.util.
ArrayList
Removes and returns the last element of this collection (optional operation).
removeLast()
- Method in class java.util.concurrent.
ConcurrentLinkedDeque
removeLast()
- Method in class java.util.concurrent.
CopyOnWriteArrayList
Removes and returns the last element of this collection (optional operation).
removeLast()
- Method in class java.util.concurrent.
LinkedBlockingDeque
removeLast()
- Method in interface java.util.
Deque
Retrieves and removes the last element of this deque.
removeLast()
- Method in class java.util.
LinkedHashSet
Removes and returns the last element of this collection (optional operation).
removeLast()
- Method in class java.util.
LinkedList
Removes and returns the last element from this list.
removeLast()
- Method in interface java.util.
List
Removes and returns the last element of this collection (optional operation).
removeLast()
- Method in interface java.util.
NavigableSet
Removes and returns the last element of this collection (optional operation).
removeLast()
- Method in interface java.util.
SequencedCollection
Removes and returns the last element of this collection (optional operation).
removeLast()
- Method in interface java.util.
SortedSet
Removes and returns the last element of this collection (optional operation).
removeLastOccurrence(Object)
- Method in class java.util.
ArrayDeque
Removes the last occurrence of the specified element in this
 deque (when traversing the deque from head to tail).
removeLastOccurrence(Object)
- Method in interface java.util.concurrent.
BlockingDeque
Removes the last occurrence of the specified element from this deque.
removeLastOccurrence(Object)
- Method in class java.util.concurrent.
ConcurrentLinkedDeque
Removes the last occurrence of the specified element from this deque.
removeLastOccurrence(Object)
- Method in class java.util.concurrent.
LinkedBlockingDeque
removeLastOccurrence(Object)
- Method in interface java.util.
Deque
Removes the last occurrence of the specified element from this deque.
removeLastOccurrence(Object)
- Method in class java.util.
LinkedList
Removes the last occurrence of the specified element in this
 list (when traversing the list from head to tail).
removeLayoutComponent(Component)
- Method in class java.awt.
BorderLayout
Removes the specified component from this border layout.
removeLayoutComponent(Component)
- Method in class java.awt.
CardLayout
Removes the specified component from the layout.
removeLayoutComponent(Component)
- Method in class java.awt.
FlowLayout
Removes the specified component from the layout.
removeLayoutComponent(Component)
- Method in class java.awt.
GridBagLayout
Removes the specified component from this layout.
removeLayoutComponent(Component)
- Method in class java.awt.
GridLayout
Removes the specified component from the layout.
removeLayoutComponent(Component)
- Method in interface java.awt.
LayoutManager
Removes the specified component from the layout.
removeLayoutComponent(Component)
- Method in class javax.swing.
BoxLayout
Not used by this class.
removeLayoutComponent(Component)
- Method in class javax.swing.
GroupLayout
Notification that a
Component
has been removed from
 the parent container.
removeLayoutComponent(Component)
- Method in class javax.swing.
JRootPane.RootLayout
removeLayoutComponent(Component)
- Method in class javax.swing.
JSpinner.DefaultEditor
This
LayoutManager
method does nothing.
removeLayoutComponent(Component)
- Method in class javax.swing.
OverlayLayout
Removes the specified component from the layout.
removeLayoutComponent(Component)
- Method in class javax.swing.plaf.basic.
BasicComboBoxUI.ComboBoxLayoutManager
removeLayoutComponent(Component)
- Method in class javax.swing.plaf.basic.
BasicInternalFrameTitlePane.TitlePaneLayout
removeLayoutComponent(Component)
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI.InternalFrameLayout
Removes the specified component from the layout.
removeLayoutComponent(Component)
- Method in class javax.swing.plaf.basic.
BasicOptionPaneUI.ButtonAreaLayout
removeLayoutComponent(Component)
- Method in class javax.swing.plaf.basic.
BasicScrollBarUI
removeLayoutComponent(Component)
- Method in class javax.swing.plaf.basic.
BasicSplitPaneDivider.DividerLayout
removeLayoutComponent(Component)
- Method in class javax.swing.plaf.basic.
BasicSplitPaneUI.BasicHorizontalLayoutManager
Removes the specified component from our knowledge.
removeLayoutComponent(Component)
- Method in class javax.swing.plaf.basic.
BasicTabbedPaneUI.TabbedPaneLayout
removeLayoutComponent(Component)
- Method in class javax.swing.
ScrollPaneLayout
Removes the specified component from the layout.
removeLayoutComponent(Component)
- Method in class javax.swing.
SpringLayout
Removes the constraints associated with the specified component.
removeLayoutComponent(Component)
- Method in class javax.swing.
ViewportLayout
Removes the specified component from the layout.
removeLineListener(LineListener)
- Method in interface javax.sound.sampled.
Line
Removes the specified listener from this line's list of listeners.
removeListDataListener(ListDataListener)
- Static method in class com.sun.java.accessibility.util.
SwingEventMonitor
Removes the specified listener so it no longer receives
LISTDATA
events when they occur.
removeListDataListener(ListDataListener)
- Method in class javax.swing.
AbstractListModel
Removes a listener from the list that's notified each time a
 change to the data model occurs.
removeListDataListener(ListDataListener)
- Method in interface javax.swing.
ListModel
Removes a listener from the list that's notified each time a
 change to the data model occurs.
removeListener(FlightRecorderListener)
- Static method in class jdk.jfr.
FlightRecorder
Removes a recorder listener.
removeListeners()
- Method in class javax.swing.plaf.metal.
MetalComboBoxUI
Deprecated.
As of Java 2 platform v1.4.
removeListSelectionListener(ListSelectionListener)
- Static method in class com.sun.java.accessibility.util.
SwingEventMonitor
Removes the specified listener so it no longer receives
LISTSELECTION
events when they occur.
removeListSelectionListener(ListSelectionListener)
- Method in class javax.swing.
DefaultListSelectionModel
Remove a listener from the list that's notified each time a
 change to the selection occurs.
removeListSelectionListener(ListSelectionListener)
- Method in class javax.swing.
JList
Removes a selection listener from the list.
removeListSelectionListener(ListSelectionListener)
- Method in interface javax.swing.
ListSelectionModel
Remove a listener from the list that's notified each time a
 change to the selection occurs.
removeMember(String)
- Method in class netscape.javascript.
JSObject
Removes a named member of a JavaScript object.
removeMenuDragMouseListener(MenuDragMouseListener)
- Method in class javax.swing.
JMenuItem
Removes a
MenuDragMouseListener
from the menu item.
removeMenuKeyListener(MenuKeyListener)
- Method in class javax.swing.
JMenuItem
Removes a
MenuKeyListener
from the menu item.
removeMenuKeyListener(MenuKeyListener)
- Method in class javax.swing.
JPopupMenu
Removes a
MenuKeyListener
from the popup menu.
removeMenuListener(MenuListener)
- Static method in class com.sun.java.accessibility.util.
SwingEventMonitor
Removes the specified listener so it no longer receives
MENU
events when they occur.
removeMenuListener(MenuListener)
- Method in class javax.swing.
JMenu
Removes a listener for menu events.
removeMetaEventListener(MetaEventListener)
- Method in interface javax.sound.midi.
Sequencer
Removes the specified meta-event listener from this sequencer's list of
 registered listeners, if in fact the listener is registered.
removeMouseListener(MouseListener)
- Static method in class com.sun.java.accessibility.util.
AWTEventMonitor
Removes the specified listener so it no longer receives
MOUSE
events when they occur.
removeMouseListener(MouseListener)
- Method in class java.awt.
Component
Removes the specified mouse listener so that it no longer
 receives mouse events from this component.
removeMouseListener(MouseListener)
- Method in class java.awt.
TrayIcon
Removes the specified mouse listener.
removeMouseMotionListener(MouseMotionListener)
- Static method in class com.sun.java.accessibility.util.
AWTEventMonitor
Removes the specified listener so it no longer receives
MOTION
events when they occur.
removeMouseMotionListener(MouseMotionListener)
- Method in class java.awt.
Component
Removes the specified mouse motion listener so that it no longer
 receives mouse motion events from this component.
removeMouseMotionListener(MouseMotionListener)
- Method in class java.awt.
TrayIcon
Removes the specified mouse-motion listener.
removeMouseWheelListener(MouseWheelListener)
- Method in class java.awt.
Component
Removes the specified mouse wheel listener so that it no longer
 receives mouse wheel events from this component.
removeNamedItem(String)
- Method in interface org.w3c.dom.
NamedNodeMap
Removes a node specified by name.
removeNamedItemNS(String, String)
- Method in interface org.w3c.dom.
NamedNodeMap
Removes a node specified by local name and namespace URI.
removeNamingListener(NamingListener)
- Method in interface javax.naming.event.
EventContext
Removes a listener from receiving naming events fired
 by this
EventContext
.
removeNode()
- Method in class java.util.prefs.
AbstractPreferences
Implements the
removeNode()
method as per the specification in
Preferences.removeNode()
.
removeNode()
- Method in class java.util.prefs.
Preferences
Removes this preference node and all of its descendants, invalidating
 any preferences contained in the removed nodes.
removeNodeChangeListener(NodeChangeListener)
- Method in class java.util.prefs.
AbstractPreferences
removeNodeChangeListener(NodeChangeListener)
- Method in class java.util.prefs.
Preferences
Removes the specified
NodeChangeListener
, so it no longer
 receives change events.
removeNodeFromParent(MutableTreeNode)
- Method in class javax.swing.tree.
DefaultTreeModel
Message this to remove node from its parent.
removeNodeSpi()
- Method in class java.util.prefs.
AbstractPreferences
Removes this preference node, invalidating it and any preferences that
 it contains.
removeNotification(Integer)
- Method in class javax.management.timer.
Timer
Removes the timer notification corresponding to the specified identifier from the list of notifications.
removeNotification(Integer)
- Method in interface javax.management.timer.
TimerMBean
Removes the timer notification corresponding to the specified identifier from the list of notifications.
removeNotificationListener(NotificationListener)
- Method in class javax.management.
MBeanServerDelegate
removeNotificationListener(NotificationListener)
- Method in class javax.management.modelmbean.
RequiredModelMBean
Removes a listener for Notifications from the RequiredModelMBean.
removeNotificationListener(NotificationListener)
- Method in interface javax.management.
NotificationBroadcaster
Removes a listener from this MBean.
removeNotificationListener(NotificationListener)
- Method in class javax.management.
NotificationBroadcasterSupport
removeNotificationListener(NotificationListener)
- Method in class javax.management.
StandardEmitterMBean
removeNotificationListener(NotificationListener, NotificationFilter, Object)
- Method in class javax.management.
MBeanServerDelegate
removeNotificationListener(NotificationListener, NotificationFilter, Object)
- Method in class javax.management.modelmbean.
RequiredModelMBean
removeNotificationListener(NotificationListener, NotificationFilter, Object)
- Method in class javax.management.
NotificationBroadcasterSupport
removeNotificationListener(NotificationListener, NotificationFilter, Object)
- Method in interface javax.management.
NotificationEmitter
Removes a listener from this MBean.
removeNotificationListener(NotificationListener, NotificationFilter, Object)
- Method in class javax.management.
StandardEmitterMBean
removeNotificationListener(ObjectName, NotificationListener)
- Method in interface javax.management.
MBeanServer
removeNotificationListener(ObjectName, NotificationListener)
- Method in interface javax.management.
MBeanServerConnection
Removes a listener from a registered MBean.
removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)
- Method in interface javax.management.
MBeanServer
removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)
- Method in interface javax.management.
MBeanServerConnection
Removes a listener from a registered MBean.
removeNotificationListener(ObjectName, ObjectName)
- Method in interface javax.management.
MBeanServer
removeNotificationListener(ObjectName, ObjectName)
- Method in interface javax.management.
MBeanServerConnection
Removes a listener from a registered MBean.
removeNotificationListener(ObjectName, ObjectName, MarshalledObject, MarshalledObject, Subject)
- Method in interface javax.management.remote.rmi.
RMIConnection
Handles the method
MBeanServerConnection.removeNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)
.
removeNotificationListener(ObjectName, ObjectName, MarshalledObject, MarshalledObject, Subject)
- Method in class javax.management.remote.rmi.
RMIConnectionImpl_Stub
removeNotificationListener(ObjectName, ObjectName, MarshalledObject, MarshalledObject, Subject)
- Method in class javax.management.remote.rmi.
RMIConnectionImpl
removeNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)
- Method in interface javax.management.
MBeanServer
removeNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)
- Method in interface javax.management.
MBeanServerConnection
Removes a listener from a registered MBean.
removeNotificationListener(ObjectName, ObjectName, Subject)
- Method in interface javax.management.remote.rmi.
RMIConnection
Handles the method
MBeanServerConnection.removeNotificationListener(ObjectName, ObjectName)
.
removeNotificationListener(ObjectName, ObjectName, Subject)
- Method in class javax.management.remote.rmi.
RMIConnectionImpl_Stub
removeNotificationListener(ObjectName, ObjectName, Subject)
- Method in class javax.management.remote.rmi.
RMIConnectionImpl
removeNotificationListeners(ObjectName, Integer[], Subject)
- Method in interface javax.management.remote.rmi.
RMIConnection
Handles the
removeNotificationListener(ObjectName, NotificationListener)
and
removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)
methods.
removeNotificationListeners(ObjectName, Integer[], Subject)
- Method in class javax.management.remote.rmi.
RMIConnectionImpl_Stub
removeNotificationListeners(ObjectName, Integer[], Subject)
- Method in class javax.management.remote.rmi.
RMIConnectionImpl
removeNotifications(String)
- Method in class javax.management.timer.
Timer
Removes all the timer notifications corresponding to the specified type from the list of notifications.
removeNotifications(String)
- Method in interface javax.management.timer.
TimerMBean
Removes all the timer notifications corresponding to the specified type from the list of notifications.
removeNotify()
- Method in class java.awt.
Component
Makes this
Component
undisplayable by destroying it native
 screen resource.
removeNotify()
- Method in class java.awt.
Container
Makes this Container undisplayable by removing its connection
 to its native screen resource.
removeNotify()
- Method in class java.awt.dnd.
DropTarget
Notify the DropTarget that it has been disassociated from a Component


 This method is usually called from java.awt.Component.removeNotify() of
 the Component associated with this DropTarget to notify the DropTarget
 that a ComponentPeer has been disassociated with that Component.
removeNotify()
- Method in class java.awt.
Frame
Makes this Frame undisplayable by removing its connection
 to its native screen resource.
removeNotify()
- Method in interface java.awt.im.spi.
InputMethod
Notifies the input method that a client component has been
 removed from its containment hierarchy, or that input method
 support has been disabled for the component.
removeNotify()
- Method in class java.awt.
List
Removes the peer for this list.
removeNotify()
- Method in class java.awt.
Menu
Removes the menu's peer.
removeNotify()
- Method in class java.awt.
MenuBar
Removes the menu bar's peer.
removeNotify()
- Method in class java.awt.
MenuComponent
Removes the menu component's peer.
removeNotify()
- Method in class java.awt.
TextComponent
Removes the
TextComponent
's peer.
removeNotify()
- Method in class javax.swing.
AbstractButton
Notifies this component that it no longer has a parent component.
removeNotify()
- Method in class javax.swing.
JButton
Overrides
JComponent.removeNotify
to check if
 this button is currently set as the default button on the
RootPane
, and if so, sets the
RootPane
's
 default button to
null
to ensure the
RootPane
doesn't hold onto an invalid button reference.
removeNotify()
- Method in class javax.swing.
JComponent
Notifies this component that it no longer has a parent component.
removeNotify()
- Method in class javax.swing.
JMenuBar
Overrides
JComponent.removeNotify
to unregister this
 menu bar with the current keyboard manager.
removeNotify()
- Method in class javax.swing.
JTable
Calls the
unconfigureEnclosingScrollPane
method.
removeNotify(Component)
- Method in class java.awt.im.
InputContext
Notifies the input context that a client component has been
 removed from its containment hierarchy, or that input method
 support has been disabled for the component.
removeObjectValue(String)
- Method in class javax.imageio.metadata.
IIOMetadataFormatImpl
Disallows an
Object
reference from being stored in
 nodes implementing the named element.
removeObservedObject(ObjectName)
- Method in class javax.management.monitor.
Monitor
Removes the specified object from the set of observed MBeans.
removeObservedObject(ObjectName)
- Method in interface javax.management.monitor.
MonitorMBean
Removes the specified object from the set of observed MBeans.
removeParameters()
- Method in class java.awt.image.renderable.
ParameterBlock
Clears the list of parameters.
removePeriodicEvent(Runnable)
- Static method in class jdk.jfr.
FlightRecorder
Removes a hook for a periodic event.
removePopupMenuListener(PopupMenuListener)
- Static method in class com.sun.java.accessibility.util.
SwingEventMonitor
Removes the specified listener so it no longer receives
POPUPMENU
events when they occur.
removePopupMenuListener(PopupMenuListener)
- Method in class javax.swing.
JComboBox
Removes a
PopupMenuListener
.
removePopupMenuListener(PopupMenuListener)
- Method in class javax.swing.
JPopupMenu
Removes a
PopupMenu
listener.
removePreferenceChangeListener(PreferenceChangeListener)
- Method in class java.util.prefs.
AbstractPreferences
removePreferenceChangeListener(PreferenceChangeListener)
- Method in class java.util.prefs.
Preferences
Removes the specified preference change listener, so it no longer
 receives preference change events.
removePrintJobAttributeListener(PrintJobAttributeListener)
- Method in interface javax.print.
DocPrintJob
Removes an attribute listener from this print job.
removePrintJobListener(PrintJobListener)
- Method in interface javax.print.
DocPrintJob
Removes a listener from this print job.
removePrintServiceAttributeListener(PrintServiceAttributeListener)
- Method in interface javax.print.
PrintService
Removes the print-service listener from this print service.
removeProperty(String)
- Method in interface org.w3c.dom.css.
CSSStyleDeclaration
Used to remove a CSS property if it has been explicitly set within
 this declaration block.
removePropertyChangeListener(PropertyChangeListener)
- Static method in class com.sun.java.accessibility.util.
AccessibilityEventMonitor
Removes the specified listener so it no longer receives PropertyChange
 events when they occur.
removePropertyChangeListener(PropertyChangeListener)
- Static method in class com.sun.java.accessibility.util.
SwingEventMonitor
Removes the specified listener so it no longer receives
PROPERTYCHANGE
events when they occur.
removePropertyChangeListener(PropertyChangeListener)
- Method in class com.sun.java.accessibility.util.
Translator
Remove the
PropertyChangeListener
from the listener list.
removePropertyChangeListener(PropertyChangeListener)
- Method in interface com.sun.tools.jconsole.
JConsoleContext
Removes a
PropertyChangeListener
from the listener list.
removePropertyChangeListener(PropertyChangeListener)
- Method in class java.awt.
Component.AccessibleAWTComponent
Remove a PropertyChangeListener from the listener list.
removePropertyChangeListener(PropertyChangeListener)
- Method in class java.awt.
Component
Removes a PropertyChangeListener from the listener list.
removePropertyChangeListener(PropertyChangeListener)
- Method in class java.awt.
Container.AccessibleAWTContainer
Remove a PropertyChangeListener from the listener list.
removePropertyChangeListener(PropertyChangeListener)
- Method in class java.awt.
KeyboardFocusManager
Removes a PropertyChangeListener from the listener list.
removePropertyChangeListener(PropertyChangeListener)
- Method in interface java.beans.
Customizer
Remove a listener for the PropertyChange event.
removePropertyChangeListener(PropertyChangeListener)
- Method in class java.beans.
PropertyChangeSupport
Remove a PropertyChangeListener from the listener list.
removePropertyChangeListener(PropertyChangeListener)
- Method in interface java.beans.
PropertyEditor
Removes a listener for the value change.
removePropertyChangeListener(PropertyChangeListener)
- Method in class java.beans.
PropertyEditorSupport
Removes a listener for the value change.
removePropertyChangeListener(PropertyChangeListener)
- Method in class javax.accessibility.
AccessibleContext
Removes a
PropertyChangeListener
from the listener list.
removePropertyChangeListener(PropertyChangeListener)
- Method in class javax.swing.
AbstractAction
Removes a
PropertyChangeListener
from the listener list.
removePropertyChangeListener(PropertyChangeListener)
- Method in interface javax.swing.
Action
Removes a
PropertyChange
listener.
removePropertyChangeListener(PropertyChangeListener)
- Method in class javax.swing.
JComponent.AccessibleJComponent
Removes a PropertyChangeListener from the listener list.
removePropertyChangeListener(PropertyChangeListener)
- Method in class javax.swing.
JTable.AccessibleJTable.AccessibleJTableCell
Removes a
PropertyChangeListener
from the
 listener list.
removePropertyChangeListener(PropertyChangeListener)
- Method in class javax.swing.
JTree.AccessibleJTree.AccessibleJTreeNode
Remove a PropertyChangeListener from the listener list.
removePropertyChangeListener(PropertyChangeListener)
- Method in class javax.swing.
JTree.EmptySelectionModel
This is overridden to do nothing;
EmptySelectionModel
does not allow a selection.
removePropertyChangeListener(PropertyChangeListener)
- Method in class javax.swing.plaf.basic.
BasicDirectoryModel
Removes a PropertyChangeListener from the listener list.
removePropertyChangeListener(PropertyChangeListener)
- Method in class javax.swing.plaf.
LayerUI
Removes a PropertyChangeListener from the listener list.
removePropertyChangeListener(PropertyChangeListener)
- Method in class javax.swing.
SwingWorker
Removes a
PropertyChangeListener
from the listener list.
removePropertyChangeListener(PropertyChangeListener)
- Method in class javax.swing.table.
TableColumn
Removes a
PropertyChangeListener
from the listener list.
removePropertyChangeListener(PropertyChangeListener)
- Method in class javax.swing.tree.
DefaultTreeSelectionModel
Removes a PropertyChangeListener from the listener list.
removePropertyChangeListener(PropertyChangeListener)
- Method in interface javax.swing.tree.
TreeSelectionModel
Removes a PropertyChangeListener from the listener list.
removePropertyChangeListener(PropertyChangeListener)
- Method in class javax.swing.
UIDefaults
Removes a
PropertyChangeListener
from the listener list.
removePropertyChangeListener(PropertyChangeListener)
- Static method in class javax.swing.
UIManager
Removes a
PropertyChangeListener
from the listener list.
removePropertyChangeListener(String, PropertyChangeListener)
- Method in class java.awt.
Component
Removes a
PropertyChangeListener
from the listener
 list for a specific property.
removePropertyChangeListener(String, PropertyChangeListener)
- Method in class java.awt.
KeyboardFocusManager
Removes a PropertyChangeListener from the listener list for a specific
 property.
removePropertyChangeListener(String, PropertyChangeListener)
- Method in class java.awt.
SystemTray
Removes a
PropertyChangeListener
from the listener list
 for a specific property.
removePropertyChangeListener(String, PropertyChangeListener)
- Method in class java.awt.
Toolkit
Removes the specified property change listener for the named
 desktop property.
removePropertyChangeListener(String, PropertyChangeListener)
- Method in interface java.beans.beancontext.
BeanContextChild
Removes a
PropertyChangeListener
from this
BeanContextChild
so that it no longer
 receives
PropertyChangeEvents
when the
 specified property is changed.
removePropertyChangeListener(String, PropertyChangeListener)
- Method in class java.beans.beancontext.
BeanContextChildSupport
Remove a PropertyChangeListener for a specific property.
removePropertyChangeListener(String, PropertyChangeListener)
- Method in class java.beans.
PropertyChangeSupport
Remove a PropertyChangeListener for a specific property.
removePropertyChangeListener(String, PropertyChangeListener)
- Method in class javax.swing.plaf.
LayerUI
Removes a
PropertyChangeListener
from the listener
 list for a specific property.
removeProvider(String)
- Static method in class java.security.
Security
Removes the provider with the specified name.
removeRange(int, int)
- Method in class java.util.
AbstractList
Removes from this list all of the elements whose index is between
fromIndex
, inclusive, and
toIndex
, exclusive.
removeRange(int, int)
- Method in class java.util.
ArrayList
Removes from this list all of the elements whose index is between
fromIndex
, inclusive, and
toIndex
, exclusive.
removeRange(int, int)
- Method in class java.util.
Vector
Removes from this list all of the elements whose index is between
fromIndex
, inclusive, and
toIndex
, exclusive.
removeRange(int, int)
- Method in class javax.swing.
DefaultListModel
Deletes the components at the specified range of indexes.
removeRedundantState()
- Method in class javax.swing.undo.
StateEdit
Remove redundant key/values in state hashtables.
removeRelation(String)
- Method in class javax.management.relation.
RelationService
Removes given relation from the Relation Service.
removeRelation(String)
- Method in interface javax.management.relation.
RelationServiceMBean
Removes given relation from the Relation Service.
removeRelationType(String)
- Method in class javax.management.relation.
RelationService
Removes given relation type from Relation Service.
removeRelationType(String)
- Method in interface javax.management.relation.
RelationServiceMBean
Removes given relation type from Relation Service.
removeResourceBundle(String)
- Method in class javax.swing.
UIDefaults
Removes a resource bundle from the list of resource bundles that are
 searched for localized defaults.
removeRow(int)
- Method in class javax.swing.table.
DefaultTableModel
Removes the row at
row
from the model.
removeRowSelectionInterval(int, int)
- Method in class javax.swing.
JTable
Deselects the rows from
index0
to
index1
, inclusive.
removeRowSetListener(RowSetListener)
- Method in class javax.sql.rowset.
BaseRowSet
Removes the designated object from this
RowSet
object's list of listeners.
removeRowSetListener(RowSetListener)
- Method in interface javax.sql.
RowSet
Removes the specified listener from the list of components that will be
 notified when an event occurs on this
RowSet
object.
removeRowSorterListener(RowSorterListener)
- Method in class javax.swing.
RowSorter
Removes a
RowSorterListener
.
removeSelectionInterval(int, int)
- Method in class javax.swing.
DefaultListSelectionModel
Changes the selection to be the set difference of the current selection
 and the indices between
index0
and
index1
inclusive.
removeSelectionInterval(int, int)
- Method in class javax.swing.
JList
Sets the selection to be the set difference of the specified interval
 and the current selection.
removeSelectionInterval(int, int)
- Method in class javax.swing.
JTree
Removes the specified rows (inclusive) from the selection.
removeSelectionInterval(int, int)
- Method in interface javax.swing.
ListSelectionModel
Changes the selection to be the set difference of the current selection
 and the indices between
index0
and
index1
inclusive.
removeSelectionPath(TreePath)
- Method in class javax.swing.
JTree
Removes the node identified by the specified path from the current
 selection.
removeSelectionPath(TreePath)
- Method in class javax.swing.tree.
DefaultTreeSelectionModel
Removes path from the selection.
removeSelectionPath(TreePath)
- Method in interface javax.swing.tree.
TreeSelectionModel
Removes path from the selection.
removeSelectionPaths(TreePath[])
- Method in class javax.swing.
JTree.EmptySelectionModel
This is overridden to do nothing;
EmptySelectionModel
does not allow a selection.
removeSelectionPaths(TreePath[])
- Method in class javax.swing.
JTree
Removes the nodes identified by the specified paths from the
 current selection.
removeSelectionPaths(TreePath[])
- Method in class javax.swing.tree.
DefaultTreeSelectionModel
Removes paths from the selection.
removeSelectionPaths(TreePath[])
- Method in interface javax.swing.tree.
TreeSelectionModel
Removes paths from the selection.
removeSelectionRow(int)
- Method in class javax.swing.
JTree
Removes the row at the index
row
from the current
 selection.
removeSelectionRows(int[])
- Method in class javax.swing.
JTree
Removes the rows that are selected at each of the specified
 rows.
removeService(Provider.Service)
- Method in class java.security.
Provider
Remove a service previously added using
putService()
.
removeShutdownHook(Thread)
- Method in class java.lang.
Runtime
De-registers a previously-registered virtual-machine shutdown hook.
removeSources()
- Method in class java.awt.image.renderable.
ParameterBlock
Clears the list of source images.
removeSpi(String)
- Method in class java.util.prefs.
AbstractPreferences
Remove the association (if any) for the specified key at this
 preference node.
removeStatementEventListener(StatementEventListener)
- Method in interface javax.sql.
PooledConnection
Removes the specified
StatementEventListener
from the list of
 components that will be notified when the driver detects that a
PreparedStatement
has been closed or is invalid.
removeStyle(String)
- Method in class javax.swing.
JTextPane
Removes a named non-
null
style previously added to
 the document.
removeStyle(String)
- Method in class javax.swing.text.
DefaultStyledDocument
Removes a named style previously added to the document.
removeStyle(String)
- Method in class javax.swing.text.html.
StyleSheet
Removes a named style previously added to the document.
removeStyle(String)
- Method in class javax.swing.text.
StyleContext
Removes a named style previously added to the document.
removeStyle(String)
- Method in interface javax.swing.text.
StyledDocument
Removes a named style previously added to the document.
removeStyleSheet(StyleSheet)
- Method in class javax.swing.text.html.
StyleSheet
Removes the StyleSheet
ss
from those of the receiver.
removeTabAt(int)
- Method in class javax.swing.
JTabbedPane
Removes the tab at
index
.
removeTableModelListener(TableModelListener)
- Static method in class com.sun.java.accessibility.util.
SwingEventMonitor
Removes the specified listener so it no longer receives
TABLEMODEL
events when they occur.
removeTableModelListener(TableModelListener)
- Method in class javax.swing.table.
AbstractTableModel
Removes a listener from the list that's notified each time a
 change to the data model occurs.
removeTableModelListener(TableModelListener)
- Method in interface javax.swing.table.
TableModel
Removes a listener from the list that is notified each time a
 change to the data model occurs.
removeTagSet(TIFFTagSet)
- Method in class javax.imageio.plugins.tiff.
TIFFDirectory
Removes an element from the group of
TIFFTagSet
s of which this
 directory is aware.
removeTaskListener(TaskListener)
- Method in class com.sun.source.util.
JavacTask
Removes the specified listener so that it no longer receives
 notification of events describing the progress of this
 compilation task.
removeTextListener(TextListener)
- Static method in class com.sun.java.accessibility.util.
AWTEventMonitor
Removes the specified listener so it no longer receives
TEXT
events when they occur.
removeTextListener(TextListener)
- Method in class java.awt.
TextComponent
Removes the specified text event listener so that it no longer
 receives text events from this text component
 If
l
is
null
, no exception is
 thrown and no action is performed.
removeTIFFField(int)
- Method in class javax.imageio.plugins.tiff.
TIFFDirectory
Removes a TIFF field from the directory.
removeTIFFFields()
- Method in class javax.imageio.plugins.tiff.
TIFFDirectory
Removes all TIFF fields from the directory.
removeTileObserver(TileObserver)
- Method in class java.awt.image.
BufferedImage
Removes a tile observer.
removeTileObserver(TileObserver)
- Method in interface java.awt.image.
WritableRenderedImage
Removes an observer.
removeTopLevelWindowListener(TopLevelWindowListener)
- Static method in class com.sun.java.accessibility.util.
EventQueueMonitor
Removes the specified listener to be notified when a top level window
 is created or destroyed.
removeTransformer(ClassFileTransformer)
- Method in interface java.lang.instrument.
Instrumentation
Unregisters the supplied transformer.
removeTreeExpansionListener(TreeExpansionListener)
- Static method in class com.sun.java.accessibility.util.
SwingEventMonitor
Removes the specified listener so it no longer receives
TREEEXPANSION
events when they occur.
removeTreeExpansionListener(TreeExpansionListener)
- Method in class javax.swing.
JTree
Removes a listener for
TreeExpansion
events.
removeTreeModelListener(TreeModelListener)
- Static method in class com.sun.java.accessibility.util.
SwingEventMonitor
Removes the specified listener so it no longer receives
TREEMODEL
events when they occur.
removeTreeModelListener(TreeModelListener)
- Method in class javax.swing.tree.
DefaultTreeModel
Removes a listener previously added with
addTreeModelListener()
.
removeTreeModelListener(TreeModelListener)
- Method in interface javax.swing.tree.
TreeModel
Removes a listener previously added with
addTreeModelListener
.
removeTreeSelectionListener(TreeSelectionListener)
- Static method in class com.sun.java.accessibility.util.
SwingEventMonitor
Removes the specified listener so it no longer receives
TREESELECTION
events when they occur.
removeTreeSelectionListener(TreeSelectionListener)
- Method in class javax.swing.
JTree.EmptySelectionModel
This is overridden to do nothing;
EmptySelectionModel
does not allow a selection.
removeTreeSelectionListener(TreeSelectionListener)
- Method in class javax.swing.
JTree
Removes a
TreeSelection
listener.
removeTreeSelectionListener(TreeSelectionListener)
- Method in class javax.swing.tree.
DefaultTreeSelectionModel
Removes x from the list of listeners that are notified each time
 the set of selected TreePaths changes.
removeTreeSelectionListener(TreeSelectionListener)
- Method in interface javax.swing.tree.
TreeSelectionModel
Removes x from the list of listeners that are notified each time
 the set of selected TreePaths changes.
removeTreeWillExpandListener(TreeWillExpandListener)
- Method in class javax.swing.
JTree
Removes a listener for
TreeWillExpand
events.
removeUndoableEditListener(UndoableEditListener)
- Static method in class com.sun.java.accessibility.util.
SwingEventMonitor
Removes the specified listener so it no longer receives
UNDOABLEEDIT
events when they occur.
removeUndoableEditListener(UndoableEditListener)
- Method in class javax.swing.text.
AbstractDocument
Removes an undo listener.
removeUndoableEditListener(UndoableEditListener)
- Method in interface javax.swing.text.
Document
Unregisters the given observer from the notification list
 so it will no longer receive updates.
removeUndoableEditListener(UndoableEditListener)
- Method in class javax.swing.undo.
UndoableEditSupport
Removes an
UndoableEditListener
.
removeUnicodeLocaleAttribute(String)
- Method in class java.util.
Locale.Builder
Removes a unicode locale attribute, if present, otherwise has no
 effect.
removeUpdate()
- Method in class javax.swing.text.
DefaultStyledDocument.ElementBuffer
Updates the element structure in response to a removal from the
 associated sequence in the document.
removeUpdate(DocumentEvent)
- Method in interface javax.swing.event.
DocumentListener
Gives notification that a portion of the document has been
 removed.
removeUpdate(DocumentEvent)
- Method in class javax.swing.text.
JTextComponent.AccessibleJTextComponent
Handles document remove (fire appropriate property change event,
 which is AccessibleContext.ACCESSIBLE_TEXT_PROPERTY).
removeUpdate(DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.
FieldView
Gives notification that something was removed from the document
 in a location that this view is responsible for.
removeUpdate(DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.
FlowView
Gives notification that something was removed from the document
 in a location that this view is responsible for.
removeUpdate(DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.
GlyphView
Gives notification that something was removed from the document
 in a location that this view is responsible for.
removeUpdate(DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.html.
InlineView
Gives notification that something was removed from the document
 in a location that this view is responsible for.
removeUpdate(DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.
PlainView
Gives notification that something was removed from the document
 in a location that this view is responsible for.
removeUpdate(DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.
View
Gives notification that something was removed from the document
 in a location that this view is responsible for.
removeUpdate(DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.
WrappedPlainView
Gives notification that something was removed from the
 document in a location that this view is responsible for.
removeUpdate(DocumentEvent, Shape, ViewFactory)
- Method in class javax.swing.text.
ZoneView
Gives notification that something was removed from the document
 in a location that this view is responsible for.
removeUpdate(AbstractDocument.DefaultDocumentEvent)
- Method in class javax.swing.text.
AbstractDocument
Updates any document structure as a result of text removal.
removeUpdate(AbstractDocument.DefaultDocumentEvent)
- Method in class javax.swing.text.
DefaultStyledDocument
Updates document structure as a result of text removal.
removeUpdate(AbstractDocument.DefaultDocumentEvent)
- Method in class javax.swing.text.
PlainDocument
Updates any document structure as a result of text removal.
removeUpdate(FlowView, DocumentEvent, Rectangle)
- Method in class javax.swing.text.
FlowView.FlowStrategy
Gives notification that something was removed from the document
 in a location that the given flow view is responsible for.
removeValue(String)
- Method in interface javax.net.ssl.
SSLSession
Removes the object bound to the given name in the session's
 application layer data.
removeVetoableChangeListener(VetoableChangeListener)
- Static method in class com.sun.java.accessibility.util.
SwingEventMonitor
Removes the specified listener so it no longer receives
VETOABLECHANGE
events when they occur.
removeVetoableChangeListener(VetoableChangeListener)
- Method in class java.awt.
KeyboardFocusManager
Removes a VetoableChangeListener from the listener list.
removeVetoableChangeListener(VetoableChangeListener)
- Method in class java.beans.
VetoableChangeSupport
Remove a VetoableChangeListener from the listener list.
removeVetoableChangeListener(VetoableChangeListener)
- Method in class javax.swing.
JComponent
Removes a
VetoableChangeListener
from the listener list.
removeVetoableChangeListener(String, VetoableChangeListener)
- Method in class java.awt.
KeyboardFocusManager
Removes a VetoableChangeListener from the listener list for a specific
 property.
removeVetoableChangeListener(String, VetoableChangeListener)
- Method in interface java.beans.beancontext.
BeanContextChild
Removes a
VetoableChangeListener
from this
BeanContextChild
so that it no longer receives
 events when the specified property changes.
removeVetoableChangeListener(String, VetoableChangeListener)
- Method in class java.beans.beancontext.
BeanContextChildSupport
Removes a
VetoableChangeListener
.
removeVetoableChangeListener(String, VetoableChangeListener)
- Method in class java.beans.
VetoableChangeSupport
Remove a VetoableChangeListener for a specific property.
removeWindowFocusListener(WindowFocusListener)
- Method in class java.awt.
Window
Removes the specified window focus listener so that it no longer
 receives window events from this window.
removeWindowListener(WindowListener)
- Static method in class com.sun.java.accessibility.util.
AWTEventMonitor
Removes the specified listener so it no longer receives
WINDOW
events when they occur.
removeWindowListener(WindowListener)
- Method in class java.awt.
Window
Removes the specified window listener so that it no longer
 receives window events from this window.
removeWindowStateListener(WindowStateListener)
- Method in class java.awt.
Window
Removes the specified window state listener so that it no
 longer receives window events from this window.
rename(String, String)
- Method in interface javax.naming.
Context
Binds a new name to the object bound to an old name, and unbinds
 the old name.
rename(String, String)
- Method in class javax.naming.
InitialContext
rename(Name, Name)
- Method in interface javax.naming.
Context
Binds a new name to the object bound to an old name, and unbinds
 the old name.
rename(Name, Name)
- Method in class javax.naming.
InitialContext
renameFile(File, File)
- Method in class javax.swing.plaf.basic.
BasicDirectoryModel
Renames a file in the underlying file system.
renameNode(Node, String, String)
- Method in interface org.w3c.dom.
Document
Rename an existing node of type
ELEMENT_NODE
or
ATTRIBUTE_NODE
.
renameTo(File)
- Method in class java.io.
File
Renames the file denoted by this abstract pathname.
render(Runnable)
- Method in class javax.swing.text.
AbstractDocument
This allows the model to be safely rendered in the presence
 of currency, if the model supports being updated asynchronously.
render(Runnable)
- Method in interface javax.swing.text.
Document
Allows the model to be safely rendered in the presence
 of concurrency, if the model supports being updated asynchronously.
RENDERABLE_IMAGE
- Static variable in class javax.print.
DocFlavor.SERVICE_FORMATTED
Service formatted print data doc flavor with print data
 representation class name =
"java.awt.image.renderable.RenderableImage"
(renderable image
 object).
RenderableImage
- Interface in
java.awt.image.renderable
A RenderableImage is a common interface for rendering-independent
 images (a notion which subsumes resolution independence).
RenderableImageOp
- Class in
java.awt.image.renderable
This class handles the renderable aspects of an operation with help
 from its associated instance of a ContextualRenderedImageFactory.
RenderableImageOp(ContextualRenderedImageFactory, ParameterBlock)
- Constructor for class java.awt.image.renderable.
RenderableImageOp
Constructs a RenderedImageOp given a
 ContextualRenderedImageFactory object, and
 a ParameterBlock containing RenderableImage sources and other
 parameters.
RenderableImageProducer
- Class in
java.awt.image.renderable
An adapter class that implements ImageProducer to allow the
 asynchronous production of a RenderableImage.
RenderableImageProducer(RenderableImage, RenderContext)
- Constructor for class java.awt.image.renderable.
RenderableImageProducer
Constructs a new RenderableImageProducer from a RenderableImage
 and a RenderContext.
RenderContext
- Class in
java.awt.image.renderable
A RenderContext encapsulates the information needed to produce a
 specific rendering from a RenderableImage.
RenderContext(AffineTransform)
- Constructor for class java.awt.image.renderable.
RenderContext
Constructs a RenderContext with a given transform.
RenderContext(AffineTransform, RenderingHints)
- Constructor for class java.awt.image.renderable.
RenderContext
Constructs a RenderContext with a given transform and rendering hints.
RenderContext(AffineTransform, Shape)
- Constructor for class java.awt.image.renderable.
RenderContext
Constructs a RenderContext with a given transform and area of interest.
RenderContext(AffineTransform, Shape, RenderingHints)
- Constructor for class java.awt.image.renderable.
RenderContext
Constructs a RenderContext with a given transform.
RenderedImage
- Interface in
java.awt.image
RenderedImage is a common interface for objects which contain
 or can produce image data in the form of Rasters.
RenderedImageFactory
- Interface in
java.awt.image.renderable
The RenderedImageFactory interface (often abbreviated RIF) is
 intended to be implemented by classes that wish to act as factories
 to produce different renderings, for example by executing a series
 of BufferedImageOps on a set of sources, depending on a specific
 set of parameters, properties, and rendering hints.
renderer
- Variable in class javax.swing.
JComboBox
This protected field is implementation specific.
renderer
- Variable in class javax.swing.tree.
DefaultTreeCellEditor
Renderer, used to get border and offsets from.
Renderer
- Interface in
javax.swing
Defines the requirements for an object responsible for
 "rendering" (displaying) a value.
rendererPane
- Variable in class javax.swing.plaf.basic.
BasicListUI
The instance of
CellRendererPane
.
rendererPane
- Variable in class javax.swing.plaf.basic.
BasicTableHeaderUI
The instance of
CellRendererPane
.
rendererPane
- Variable in class javax.swing.plaf.basic.
BasicTableUI
The instance of
CellRendererPane
.
rendererPane
- Variable in class javax.swing.plaf.basic.
BasicTreeUI
Used to paint the TreeCellRenderer.
rendererPane
- Variable in class javax.swing.plaf.metal.
MetalComboBoxButton
The instance of
CellRendererPane
.
Rendering Compatibility Issues
- Search tag in class java.awt.Graphics2D
Section
RenderingHints
- Class in
java.awt
The
RenderingHints
class defines and manages collections of
 keys and associated values which allow an application to provide input
 into the choice of algorithms used by other classes which perform
 rendering and image manipulation services.
RenderingHints(RenderingHints.Key, Object)
- Constructor for class java.awt.
RenderingHints
Constructs a new object with the specified key/value pair.
RenderingHints(Map<RenderingHints.Key, ?>)
- Constructor for class java.awt.
RenderingHints
Constructs a new object with keys and values initialized
 from the specified Map object which may be null.
RenderingHints.Key
- Class in
java.awt
Defines the base type of all keys used along with the
RenderingHints
class to control various
 algorithm choices in the rendering and imaging pipelines.
Rendering Process
- Search tag in class java.awt.Graphics2D
Section
reorderingAllowed
- Variable in class javax.swing.table.
JTableHeader
If true, reordering of columns are allowed by the user;
 the default is true.
reorderVisually(byte[], int, Object[], int, int)
- Static method in class java.text.
Bidi
Reorder the objects in the array into visual order based on their levels.
repaint()
- Method in class java.awt.
Component
Repaints this component.
repaint()
- Method in class javax.swing.
DefaultListCellRenderer
Overridden for performance reasons.
repaint()
- Method in class javax.swing.table.
DefaultTableCellRenderer
Overridden for performance reasons.
repaint()
- Method in class javax.swing.text.
DefaultCaret
Cause the caret to be painted.
repaint()
- Method in class javax.swing.tree.
DefaultTreeCellRenderer
Overridden for performance reasons.
repaint(int, int, int, int)
- Method in class java.awt.
Component
Repaints the specified rectangle of this component.
repaint(long)
- Method in class java.awt.
Component
Repaints the component.
repaint(long, int, int, int, int)
- Method in class java.awt.
Component
Repaints the specified rectangle of this component within
tm
milliseconds.
repaint(long, int, int, int, int)
- Method in class javax.swing.
DefaultListCellRenderer
Overridden for performance reasons.
repaint(long, int, int, int, int)
- Method in class javax.swing.
JApplet
Deprecated.
Repaints the specified rectangle of this component within
time
milliseconds.
repaint(long, int, int, int, int)
- Method in class javax.swing.
JComponent
Adds the specified region to the dirty region list if the component
 is showing.
repaint(long, int, int, int, int)
- Method in class javax.swing.
JDialog
Repaints the specified rectangle of this component within
time
milliseconds.
repaint(long, int, int, int, int)
- Method in class javax.swing.
JFrame
Repaints the specified rectangle of this component within
time
milliseconds.
repaint(long, int, int, int, int)
- Method in class javax.swing.
JViewport
Always repaint in the parents coordinate system to make sure
 only one paint is performed by the
RepaintManager
.
repaint(long, int, int, int, int)
- Method in class javax.swing.
JWindow
Repaints the specified rectangle of this component within
time
milliseconds.
repaint(long, int, int, int, int)
- Method in class javax.swing.table.
DefaultTableCellRenderer
Overridden for performance reasons.
repaint(long, int, int, int, int)
- Method in class javax.swing.tree.
DefaultTreeCellRenderer
Overridden for performance reasons.
repaint(Rectangle)
- Method in class javax.swing.
DefaultListCellRenderer
Overridden for performance reasons.
repaint(Rectangle)
- Method in class javax.swing.
JComponent
Adds the specified region to the dirty region list if the component
 is showing.
repaint(Rectangle)
- Method in class javax.swing.table.
DefaultTableCellRenderer
Overridden for performance reasons.
repaint(Rectangle)
- Method in class javax.swing.tree.
DefaultTreeCellRenderer
Overridden for performance reasons.
repaintCellFocus()
- Method in class javax.swing.plaf.basic.
BasicListUI.FocusHandler
Repaints focused cells.
RepaintManager
- Class in
javax.swing
This class manages repaint requests, allowing the number
 of repaints to be minimized, for example by collapsing multiple
 requests into a single repaint for members of a component tree.
RepaintManager()
- Constructor for class javax.swing.
RepaintManager
Create a new RepaintManager instance.
repeat(int)
- Method in class java.lang.
String
Returns a string whose value is the concatenation of this
 string repeated
count
times.
repeat(int, int)
- Method in class java.lang.
StringBuffer
repeat(int, int)
- Method in class java.lang.
StringBuilder
repeat(CharSequence, int)
- Method in class java.lang.
StringBuffer
repeat(CharSequence, int)
- Method in class java.lang.
StringBuilder
REPEAT
- Enum constant in enum class java.awt.
MultipleGradientPaint.CycleMethod
Cycle the gradient colors start-to-end, start-to-end
 to fill the remaining area.
Repeatable
- Annotation Interface in
java.lang.annotation
The annotation interface
java.lang.annotation.Repeatable
is
 used to indicate that the annotation interface whose declaration it
 (meta-)annotates is
repeatable
.
repeatKeyAction
- Variable in class javax.swing.plaf.basic.
BasicTreeUI.KeyHandler
Key code that is being generated for.
replace(char, char)
- Method in class java.lang.
String
Returns a string resulting from replacing all occurrences of
oldChar
in this string with
newChar
.
replace(int, int, Object, int)
- Method in class javax.swing.text.
GapContent
Replace the given logical position in the storage with
 the given new items.
replace(int, int, String)
- Method in class java.lang.
StringBuffer
replace(int, int, String)
- Method in class java.lang.
StringBuilder
replace(int, int, String, AttributeSet)
- Method in class javax.swing.text.
AbstractDocument
Deletes the region of text from
offset
to
offset + length
, and replaces it with
text
.
replace(int, int, String, AttributeSet)
- Method in class javax.swing.text.
DocumentFilter.FilterBypass
Deletes the region of text from
offset
to
offset + length
, and replaces it with
text
.
replace(int, int, Element[])
- Method in class javax.swing.text.
AbstractDocument.BranchElement
Replaces content with a new set of elements.
replace(int, int, View[])
- Method in class javax.swing.text.
AsyncBoxView
Calls the superclass to update the child views, and
 updates the status records for the children.
replace(int, int, View[])
- Method in class javax.swing.text.
BoxView
Invalidates the layout and resizes the cache of
 requests/allocations.
replace(int, int, View[])
- Method in class javax.swing.text.
CompositeView
Replaces child views.
replace(int, int, View[])
- Method in class javax.swing.text.
TableView
Change the child views.
replace(int, int, View[])
- Method in class javax.swing.text.
TableView.TableRow
Change the child views.
replace(int, int, View[])
- Method in class javax.swing.text.
View
Replaces child views.
replace(Component, Component)
- Method in class javax.swing.
GroupLayout
Replaces an existing component with a new one.
replace(CharSequence, CharSequence)
- Method in class java.lang.
String
Replaces each substring of this string that matches the literal target
 sequence with the specified literal replacement sequence.
replace(Object, Object)
- Method in class java.security.
Provider
Replaces the entry for the specified key only if it is
 currently mapped to some value.
replace(Object, Object, Object)
- Method in class java.security.
Provider
Replaces the entry for the specified key only if currently
 mapped to the specified value.
replace(DocumentFilter.FilterBypass, int, int, String, AttributeSet)
- Method in class javax.swing.text.
DocumentFilter
Invoked prior to replacing a region of text in the
 specified Document.
replace(K, V)
- Method in class java.util.concurrent.
ConcurrentHashMap
Replaces the entry for a key only if currently mapped to some value.
replace(K, V)
- Method in interface java.util.concurrent.
ConcurrentMap
Replaces the entry for a key only if currently mapped to some value.
replace(K, V)
- Method in class java.util.concurrent.
ConcurrentSkipListMap
Replaces the entry for a key only if currently mapped to some value.
replace(K, V)
- Method in interface java.util.
Map
Replaces the entry for the specified key only if it is
 currently mapped to some value.
replace(K, V, V)
- Method in class java.util.concurrent.
ConcurrentHashMap
Replaces the entry for a key only if currently mapped to a given value.
replace(K, V, V)
- Method in interface java.util.concurrent.
ConcurrentMap
Replaces the entry for a key only if currently mapped to a given value.
replace(K, V, V)
- Method in class java.util.concurrent.
ConcurrentSkipListMap
Replaces the entry for a key only if currently mapped to a given value.
replace(K, V, V)
- Method in class java.util.
IdentityHashMap
Replaces the entry for the specified key only if currently
 mapped to the specified value.
replace(K, V, V)
- Method in interface java.util.
Map
Replaces the entry for the specified key only if currently
 mapped to the specified value.
REPLACE
- Static variable in class java.nio.charset.
CodingErrorAction
Action indicating that a coding error is to be handled by dropping the
 erroneous input, appending the coder's replacement value to the output
 buffer, and resuming the coding operation.
REPLACE_ATTRIBUTE
- Static variable in interface javax.naming.directory.
DirContext
This constant specifies to replace an attribute with specified values.
REPLACE_EXISTING
- Enum constant in enum class java.nio.file.
StandardCopyOption
Replace an existing file if it exists.
replaceAll(String)
- Method in class java.util.regex.
Matcher
Replaces every subsequence of the input sequence that matches the
 pattern with the given replacement string.
replaceAll(String, String)
- Method in class java.lang.
String
Replaces each substring of this string that matches the given
regular expression
with the
 given replacement.
replaceAll(BiFunction<? super Object, ? super Object, ? extends Object>)
- Method in class java.security.
Provider
Replaces each entry's value with the result of invoking the given
 function on that entry, in the order entries are returned by an entry
 set iterator, until all entries have been processed or the function
 throws an exception.
replaceAll(BiFunction<? super K, ? super V, ? extends V>)
- Method in interface java.util.concurrent.
ConcurrentMap
Replaces each entry's value with the result of invoking the given
 function on that entry until all entries have been processed or the
 function throws an exception.
replaceAll(BiFunction<? super K, ? super V, ? extends V>)
- Method in interface java.util.
Map
Replaces each entry's value with the result of invoking the given
 function on that entry until all entries have been processed or the
 function throws an exception.
replaceAll(Function<MatchResult, String>)
- Method in class java.util.regex.
Matcher
Replaces every subsequence of the input sequence that matches the
 pattern with the result of applying the given replacer function to the
 match result of this matcher corresponding to that subsequence.
replaceAll(UnaryOperator<E>)
- Method in interface java.util.
List
Replaces each element of this list with the result of applying the
 operator to that element.
replaceAll(UnaryOperator<E>)
- Method in class java.util.
Vector
replaceAll(List<T>, T, T)
- Static method in class java.util.
Collections
Replaces all occurrences of one specified value in a list with another.
replaceArguments(CallSiteDescriptor, Object...)
- Method in interface jdk.dynalink.linker.
LinkRequest
Returns a request identical to this one with call site descriptor and arguments replaced with the ones specified.
replaceArguments(CallSiteDescriptor, Object...)
- Method in class jdk.dynalink.linker.support.
SimpleLinkRequest
replaceChild(Node, Node)
- Method in class javax.imageio.metadata.
IIOMetadataNode
Replaces the child node
oldChild
with
newChild
in the list of children, and returns the
oldChild
node.
replaceChild(Node, Node)
- Method in interface org.w3c.dom.
Node
Replaces the child node
oldChild
with
newChild
in the list of children, and returns the
oldChild
node.
replaceData(int, int, String)
- Method in interface org.w3c.dom.
CharacterData
Replace the characters starting at the specified 16-bit unit offset
 with the specified string.
replaceEdit(UndoableEdit)
- Method in class javax.swing.undo.
AbstractUndoableEdit
This default implementation returns false.
replaceEdit(UndoableEdit)
- Method in interface javax.swing.undo.
UndoableEdit
Returns true if this
UndoableEdit
should replace
anEdit
.
replaceEditor(JComponent, JComponent)
- Method in class javax.swing.plaf.basic.
BasicSpinnerUI
Called by the
PropertyChangeListener
when the
JSpinner
editor property changes.
replaceEditor(JComponent, JComponent)
- Method in class javax.swing.plaf.synth.
SynthSpinnerUI
Called by the
PropertyChangeListener
when the
JSpinner
editor property changes.
replaceFirst(String)
- Method in class java.util.regex.
Matcher
Replaces the first subsequence of the input sequence that matches the
 pattern with the given replacement string.
replaceFirst(String, String)
- Method in class java.lang.
String
Replaces the first substring of this string that matches the given
regular expression
with the
 given replacement.
replaceFirst(Function<MatchResult, String>)
- Method in class java.util.regex.
Matcher
Replaces the first subsequence of the input sequence that matches the
 pattern with the result of applying the given replacer function to the
 match result of this matcher corresponding to that subsequence.
replaceImageMetadata(int, IIOMetadata)
- Method in class javax.imageio.
ImageWriter
Replaces the image metadata associated with an existing image.
replaceItem(String, int)
- Method in class java.awt.
List
Replaces the item at the specified index in the scrolling list
 with the new string.
replacement()
- Method in class java.nio.charset.
CharsetDecoder
Returns this decoder's replacement value.
replacement()
- Method in class java.nio.charset.
CharsetEncoder
Returns this encoder's replacement value.
replaceMethods(MethodHandle, MethodHandle)
- Method in class jdk.dynalink.linker.
GuardedInvocation
Creates a new guarded invocation with different methods, preserving the switch point.
replaceObject(Object)
- Method in class java.io.
ObjectOutputStream
This method will allow trusted subclasses of ObjectOutputStream to
 substitute one object for another during serialization.
replacePane(JComponent, JComponent)
- Method in class javax.swing.plaf.basic.
BasicInternalFrameUI
Installs necessary mouse handlers on
newPane
and adds it to the frame.
replacePixels(Raster, ImageWriteParam)
- Method in class javax.imageio.
ImageWriter
Replaces a portion of an image already present in the output
 with a portion of the given
Raster
.
replacePixels(RenderedImage, ImageWriteParam)
- Method in class javax.imageio.
ImageWriter
Replaces a portion of an image already present in the output
 with a portion of the given image.
replaceRange(String, int, int)
- Method in class java.awt.
TextArea
Replaces text between the indicated start and end positions
 with the specified replacement text.
replaceRange(String, int, int)
- Method in class javax.swing.
JTextArea
Replaces text from the indicated start to end position with the
 new text specified.
replaceSelection(String)
- Method in class javax.swing.
JEditorPane
Replaces the currently selected content with new content
 represented by the given string.
replaceSelection(String)
- Method in class javax.swing.
JTextPane
Replaces the currently selected content with new content
 represented by the given string.
replaceSelection(String)
- Method in class javax.swing.text.
JTextComponent
Replaces the currently selected content with new content
 represented by the given string.
replaceStreamMetadata(IIOMetadata)
- Method in class javax.imageio.
ImageWriter
Replaces the stream metadata in the output with new
 information.
replaceText(int, int, String)
- Method in interface javax.accessibility.
AccessibleEditableText
Replaces the text between two indices with the specified string.
replaceText(int, int, String)
- Method in class javax.swing.
JSpinner.AccessibleJSpinner
Replaces the text between two indices with the specified
 string.
replaceText(int, int, String)
- Method in class javax.swing.text.
JTextComponent.AccessibleJTextComponent
Replaces the text between two indices with the specified
 string.
replaceText(String, int, int)
- Method in class java.awt.
TextArea
Deprecated.
As of JDK version 1.1,
 replaced by
replaceRange(String, int, int)
.
replaceUIActionMap(JComponent, ActionMap)
- Static method in class javax.swing.
SwingUtilities
Convenience method to change the UI ActionMap for
component
to
uiActionMap
.
replaceUIInputMap(JComponent, int, InputMap)
- Static method in class javax.swing.
SwingUtilities
Convenience method to change the UI InputMap for
component
to
uiInputMap
.
replaceWholeText(String)
- Method in interface org.w3c.dom.
Text
Replaces the text of the current node and all logically-adjacent text
 nodes with the specified text.
replaceWith(byte[])
- Method in class java.nio.charset.
CharsetEncoder
Changes this encoder's replacement value.
replaceWith(String)
- Method in class java.nio.charset.
CharsetDecoder
Changes this decoder's replacement value.
replacing(U)
- Static method in class java.net.http.
HttpResponse.BodyHandlers
Returns a response body handler that returns the given replacement
 value, after discarding the response body.
replacing(U)
- Static method in class java.net.http.
HttpResponse.BodySubscribers
Returns a response subscriber which discards the response body.
Replacing DefaultKeyboardFocusManager
- Search tag in package java.awt
Section
Replacing elements
- Search tag in class javax.swing.text.html.HTMLDocument
Section
ReplicateScaleFilter
- Class in
java.awt.image
An ImageFilter class for scaling images using the simplest algorithm.
ReplicateScaleFilter(int, int)
- Constructor for class java.awt.image.
ReplicateScaleFilter
Constructs a ReplicateScaleFilter that scales the pixels from
 its source Image as specified by the width and height parameters.
report(String, String, Object, Location)
- Method in interface javax.xml.stream.
XMLReporter
Report the desired message in an application specific format.
report(Diagnostic<? extends S>)
- Method in class javax.tools.
DiagnosticCollector
report(Diagnostic<? extends S>)
- Method in interface javax.tools.
DiagnosticListener
Invoked when a problem is found.
REPORT
- Static variable in class java.nio.charset.
CodingErrorAction
Action indicating that a coding error is to be reported, either by
 returning a
CoderResult
object or by throwing a
CharacterCodingException
, whichever is appropriate for the method
 implementing the coding process.
REPORT
- Static variable in class javax.print.attribute.standard.
Severity
Indicates that the
PrinterStateReason
is a
 "report" (least severe).
Reporter
- Interface in
jdk.javadoc.doclet
Interface for reporting diagnostics and other messages.
REPORTER
- Static variable in class javax.xml.stream.
XMLInputFactory
The property used to
 set/get the implementation of the XMLReporter interface
reportError(String, Exception, int)
- Method in class java.util.logging.
Handler
Protected convenience method to report an error to this Handler's
 ErrorManager.
request()
- Method in interface com.sun.jdi.event.
Event
request()
- Method in interface java.net.http.
HttpResponse
Returns the
HttpRequest
corresponding to this response.
request(long)
- Method in interface java.net.http.
WebSocket
Increments the counter of invocations of receive methods.
request(long)
- Method in interface java.util.concurrent.
Flow.Subscription
Adds the given number
n
of items to the current
 unfulfilled demand for this subscription.
Request
- Interface in
com.sun.net.httpserver
A view of the immutable request state of an HTTP exchange.
requestAnonymity(boolean)
- Method in interface org.ietf.jgss.
GSSContext
Requests that the initiator's identity not be
 disclosed to the acceptor.
requestConf(boolean)
- Method in interface org.ietf.jgss.
GSSContext
Requests that data confidentiality be enabled
 for the
wrap
method.
Request Controls
- Search tag in class javax.naming.ldap.InitialLdapContext
Section
Request Controls
- Search tag in interface javax.naming.ldap.LdapContext
Section
requestCredDeleg(boolean)
- Method in interface org.ietf.jgss.
GSSContext
Requests that the initiator's credentials be
 delegated to the acceptor during context establishment.
requestDefaultFocus()
- Method in class javax.swing.
JComponent
Deprecated.
As of 1.4, replaced by
FocusTraversalPolicy.getDefaultComponent(Container).requestFocus()
requestDelegPolicy(boolean)
- Method in interface com.sun.security.jgss.
ExtendedGSSContext
Requests that the delegation policy be respected.
requestFocus()
- Method in class com.sun.java.accessibility.util.
Translator
Requests focus for this object.
requestFocus()
- Method in class java.awt.
Component.AccessibleAWTComponent
Requests focus for this object.
requestFocus()
- Method in class java.awt.
Component
Requests that this Component get the input focus, and that this
 Component's top-level ancestor become the focused Window.
requestFocus()
- Method in class java.awt.
List.AccessibleAWTList.AccessibleAWTListChild
Requests focus for this object.
requestFocus()
- Method in class java.awt.
MenuComponent.AccessibleAWTMenuComponent
Requests focus for this object.
requestFocus()
- Method in interface javax.accessibility.
AccessibleComponent
Requests focus for this object.
requestFocus()
- Method in class javax.swing.
JComponent
Requests that this
Component
gets the input focus.
requestFocus()
- Method in class javax.swing.
JList.AccessibleJList.AccessibleJListChild
requestFocus()
- Method in class javax.swing.
JTable.AccessibleJTable.AccessibleJTableCell
requestFocus()
- Method in class javax.swing.
JTree.AccessibleJTree.AccessibleJTreeNode
requestFocus()
- Method in class javax.swing.table.
JTableHeader.AccessibleJTableHeader.AccessibleJTableHeaderEntry
requestFocus(boolean)
- Method in class java.awt.
Component
Requests that this
Component
get the input focus,
 and that this
Component
's top-level ancestor
 become the focused
Window
.
requestFocus(boolean)
- Method in class javax.swing.
JComponent
Requests that this
Component
gets the input focus.
requestFocus(boolean, FocusEvent.Cause)
- Method in class java.awt.
Component
Requests by the reason of
cause
that this
Component
get
 the input focus, and that this
Component
's top-level ancestor
 become the focused
Window
.
requestFocus(FocusEvent.Cause)
- Method in class java.awt.
Component
Requests by the reason of
cause
that this Component get the input
 focus, and that this Component's top-level ancestor become the
 focused Window.
requestFocus(FocusEvent.Cause)
- Method in class javax.swing.
JToggleButton
If this toggle button is a member of the
ButtonGroup
which has
 another toggle button which is selected and can be the focus owner,
 and the focus cause argument denotes window activation or focus
 traversal action of any direction the result of the method execution
 is the same as calling
Component.requestFocus(FocusEvent.Cause)
on the toggle button
 selected in the group.
requestFocusInWindow()
- Method in class java.awt.
Component
Requests that this Component get the input focus, if this
 Component's top-level ancestor is already the focused
 Window.
requestFocusInWindow()
- Method in class javax.swing.
JComponent
Requests that this
Component
gets the input focus.
requestFocusInWindow(boolean)
- Method in class java.awt.
Component
Requests that this
Component
get the input focus,
 if this
Component
's top-level ancestor is already
 the focused
Window
.
requestFocusInWindow(boolean)
- Method in class javax.swing.
JComponent
Requests that this
Component
gets the input focus.
requestFocusInWindow(FocusEvent.Cause)
- Method in class java.awt.
Component
Requests by the reason of
cause
that this Component get the input
 focus, if this Component's top-level ancestor is already the focused
 Window.
requestFocusInWindow(FocusEvent.Cause)
- Method in class javax.swing.
JToggleButton
If this toggle button is a member of the
ButtonGroup
which has
 another toggle button which is selected and can be the focus owner,
 and the focus cause argument denotes window activation or focus
 traversal action of any direction the result of the method execution
 is the same as calling
Component.requestFocusInWindow(FocusEvent.Cause)
on the toggle
 button selected in the group.
requestForeground(boolean)
- Method in class java.awt.
Desktop
Requests this application to move to the foreground.
Requesting Focus
- Search tag in package java.awt
Section
RequestingUserName
- Class in
javax.print.attribute.standard
Class
RequestingUserName
is a printing attribute class, a text
 attribute, that specifies the name of the end user that submitted the print
 job.
RequestingUserName(String, Locale)
- Constructor for class javax.print.attribute.standard.
RequestingUserName
Constructs a new requesting user name attribute with the given user name
 and locale.
requestInteg(boolean)
- Method in interface org.ietf.jgss.
GSSContext
Requests that data integrity be enabled
 for the
wrap
and
getMIC
methods.
requestLifetime(int)
- Method in interface org.ietf.jgss.
GSSContext
Requests a lifetime in seconds for the
 context.
requestMutualAuth(boolean)
- Method in interface org.ietf.jgss.
GSSContext
Requests that mutual authentication be done during
 context establishment.
requestPasswordAuthentication(String, InetAddress, int, String, String, String)
- Static method in class java.net.
Authenticator
Ask the authenticator that has been registered with the system
 for a password.
requestPasswordAuthentication(String, InetAddress, int, String, String, String, URL, Authenticator.RequestorType)
- Static method in class java.net.
Authenticator
Ask the authenticator that has been registered with the system
 for a password.
requestPasswordAuthentication(Authenticator, String, InetAddress, int, String, String, String, URL, Authenticator.RequestorType)
- Static method in class java.net.
Authenticator
Ask the given
authenticator
for a password.
requestPasswordAuthentication(InetAddress, int, String, String, String)
- Static method in class java.net.
Authenticator
Ask the authenticator that has been registered with the system
 for a password.
requestPasswordAuthenticationInstance(String, InetAddress, int, String, String, String, URL, Authenticator.RequestorType)
- Method in class java.net.
Authenticator
Ask this authenticator for a password.
requestReplayDet(boolean)
- Method in interface org.ietf.jgss.
GSSContext
Requests that replay detection be enabled for the
 per-message security services after context establishment.
requestSequenceDet(boolean)
- Method in interface org.ietf.jgss.
GSSContext
Requests that sequence checking be enabled for the
 per-message security services after context establishment.
requestTopDownLeftRightResend(ImageConsumer)
- Method in class java.awt.image.
FilteredImageSource
Requests that a given ImageConsumer have the image data delivered
 one more time in top-down, left-right order.
requestTopDownLeftRightResend(ImageConsumer)
- Method in interface java.awt.image.
ImageProducer
Requests, on behalf of the
ImageConsumer
,
 that the
ImageProducer
attempt to resend
 the image data one more time in TOPDOWNLEFTRIGHT order
 so that higher quality conversion algorithms which
 depend on receiving pixels in order can be used to
 produce a better output version of the image.
requestTopDownLeftRightResend(ImageConsumer)
- Method in class java.awt.image.
MemoryImageSource
Requests that a given ImageConsumer have the image data delivered
 one more time in top-down, left-right order.
requestTopDownLeftRightResend(ImageConsumer)
- Method in class java.awt.image.renderable.
RenderableImageProducer
Requests that a given ImageConsumer have the image data delivered
 one more time in top-down, left-right order.
requestUserAttention(boolean, boolean)
- Method in class java.awt.
Taskbar
Requests user attention to this application.
requestWindowUserAttention(Window)
- Method in class java.awt.
Taskbar
Requests user attention to the specified window.
require(int, String, String)
- Method in class javax.xml.stream.util.
StreamReaderDelegate
require(int, String, String)
- Method in interface javax.xml.stream.
XMLStreamReader
Test if the current event is of the given type and if the namespace and name match the current
 namespace and name of the current event.
required
- Variable in class java.sql.
DriverPropertyInfo
The
required
field is
true
if a value must be
 supplied for this property
 during
Driver.connect
and
false
otherwise.
required()
- Element in annotation interface java.beans.
BeanProperty
The value that indicates whether the annotated property is
 a required property or not.
REQUIRED
- Static variable in class java.awt.
GraphicsConfigTemplate
Value used for "Enum" (Integer) type.
REQUIRED
- Static variable in class javax.security.auth.login.
AppConfigurationEntry.LoginModuleControlFlag
Required
LoginModule
.
REQUIRED
- Static variable in interface javax.swing.text.html.parser.
DTDConstants
The DTD constant corresponds to REQUIRED
RequiredModelMBean
- Class in
javax.management.modelmbean
This class is the implementation of a ModelMBean.
RequiredModelMBean()
- Constructor for class javax.management.modelmbean.
RequiredModelMBean
Constructs an
RequiredModelMBean
with an empty
 ModelMBeanInfo.
RequiredModelMBean(ModelMBeanInfo)
- Constructor for class javax.management.modelmbean.
RequiredModelMBean
Constructs a RequiredModelMBean object using ModelMBeanInfo passed in.
requireEnd()
- Method in class java.util.regex.
Matcher
Returns true if more input could change a positive match into a
 negative one.
requireNonNull(T)
- Static method in class java.util.
Objects
Checks that the specified object reference is not
null
.
requireNonNull(T, String)
- Static method in class java.util.
Objects
Checks that the specified object reference is not
null
and
 throws a customized
NullPointerException
if it is.
requireNonNull(T, Supplier<String>)
- Static method in class java.util.
Objects
Checks that the specified object reference is not
null
and
 throws a customized
NullPointerException
if it is.
requireNonNullElse(T, T)
- Static method in class java.util.
Objects
Returns the first argument if it is non-
null
and
 otherwise returns the non-
null
second argument.
requireNonNullElseGet(T, Supplier<? extends T>)
- Static method in class java.util.
Objects
Returns the first argument if it is non-
null
and otherwise
 returns the non-
null
value of
supplier.get()
.
requires()
- Method in class java.lang.module.
ModuleDescriptor
Returns the set of
Requires
objects representing the module
 dependences.
requires(ModuleDescriptor.Requires)
- Method in class java.lang.module.
ModuleDescriptor.Builder
Adds a dependence on a module.
requires(String)
- Method in class java.lang.module.
ModuleDescriptor.Builder
Adds a dependence on a module with an empty set of modifiers.
requires(Set<ModuleDescriptor.Requires.Modifier>, String)
- Method in class java.lang.module.
ModuleDescriptor.Builder
Adds a dependence on a module with the given (and possibly empty)
 set of modifiers.
requires(Set<ModuleDescriptor.Requires.Modifier>, String, ModuleDescriptor.Version)
- Method in class java.lang.module.
ModuleDescriptor.Builder
Adds a dependence on a module with the given (and possibly empty)
 set of modifiers.
REQUIRES
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
RequiresTree
representing
 requires directives in a module declaration.
REQUIRES
- Enum constant in enum class javax.lang.model.element.
ModuleElement.DirectiveKind
A "requires (static|transitive)* module-name" directive.
REQUIRES_ATTENTION
- Static variable in class javax.print.event.
PrintJobEvent
The print service indicates that a - possibly transient - problem may
 require external intervention before the print service can continue.
requiresBidi(char[], int, int)
- Static method in class java.text.
Bidi
Return true if the specified text requires bidi analysis.
requiresIn(Iterable<? extends ModuleElement.Directive>)
- Static method in class javax.lang.model.util.
ElementFilter
Returns a list of
requires
directives in
directives
.
RequiresTree
- Interface in
com.sun.source.tree
A tree node for a 'requires' directive in a module declaration.
REQUISITE
- Static variable in class javax.security.auth.login.
AppConfigurationEntry.LoginModuleControlFlag
Requisite
LoginModule
.
RescaleOp
- Class in
java.awt.image
This class performs a pixel-by-pixel rescaling of the data in the
 source image by multiplying the sample values for each pixel by a scale
 factor and then adding an offset.
RescaleOp(float[], float[], RenderingHints)
- Constructor for class java.awt.image.
RescaleOp
Constructs a new RescaleOp with the desired scale factors
 and offsets.
RescaleOp(float, float, RenderingHints)
- Constructor for class java.awt.image.
RescaleOp
Constructs a new RescaleOp with the desired scale factor
 and offset.
rescanCurrentDirectory()
- Method in class javax.swing.
JFileChooser
Tells the UI to rescan its files list from the current directory.
rescanCurrentDirectory(JFileChooser)
- Method in class javax.swing.plaf.basic.
BasicFileChooserUI
Rescan the current directory.
rescanCurrentDirectory(JFileChooser)
- Method in class javax.swing.plaf.
FileChooserUI
Rescan the current directory.
rescanCurrentDirectory(JFileChooser)
- Method in class javax.swing.plaf.multi.
MultiFileChooserUI
Invokes the
rescanCurrentDirectory
method on each UI handled by this object.
reseed()
- Method in class java.security.
SecureRandom
Reseeds this
SecureRandom
with entropy input read from its
 entropy source.
reseed(boolean, byte[])
- Static method in class java.security.
DrbgParameters
Generates a
DrbgParameters.Reseed
object.
reseed(SecureRandomParameters)
- Method in class java.security.
SecureRandom
Reseeds this
SecureRandom
with entropy input read from its
 entropy source with additional parameters.
RESEED_ONLY
- Enum constant in enum class java.security.
DrbgParameters.Capability
Reseed but no prediction resistance.
resendTopDownLeftRight(ImageProducer)
- Method in class java.awt.image.
ImageFilter
Responds to a request for a TopDownLeftRight (TDLR) ordered resend
 of the pixel data from an
ImageConsumer
.
RESERVED_ID_MAX
- Static variable in class java.awt.
AWTEvent
The maximum value for reserved AWT event IDs.
RESERVED_UIROLE
- Static variable in class javax.print.
ServiceUIFactory
Not a valid role but role id's greater than this may be used for private
 roles supported by a service.
reset()
- Method in class java.awt.geom.
Area
Removes all of the geometry from this
Area
and
 restores it to an empty area.
reset()
- Method in class java.awt.geom.
Path2D
Resets the path to empty.
reset()
- Method in class java.awt.
Polygon
Resets this
Polygon
object to an empty polygon.
reset()
- Method in class java.io.
BufferedInputStream
See the general contract of the
reset
method of
InputStream
.
reset()
- Method in class java.io.
BufferedReader
Resets the stream to the most recent mark.
reset()
- Method in class java.io.
ByteArrayInputStream
Resets the buffer to the marked position.
reset()
- Method in class java.io.
ByteArrayOutputStream
Resets the
count
field of this
ByteArrayOutputStream
to zero, so that all currently accumulated output in the
 output stream is discarded.
reset()
- Method in class java.io.
CharArrayReader
Resets the stream to the most recent mark, or to the beginning if it has
 never been marked.
reset()
- Method in class java.io.
CharArrayWriter
Resets the buffer so that you can use it again without
 throwing away the already allocated buffer.
reset()
- Method in class java.io.
FilterInputStream
Repositions this stream to the position at the time the
mark
method was last called on this input stream.
reset()
- Method in class java.io.
FilterReader
Resets the stream.
reset()
- Method in class java.io.
InputStream
Repositions this stream to the position at the time the
mark
method was last called on this input stream.
reset()
- Method in class java.io.
LineNumberInputStream
Deprecated.
Repositions this stream to the position at the time the
mark
method was last called on this input stream.
reset()
- Method in class java.io.
LineNumberReader
Reset the stream to the most recent mark.
reset()
- Method in class java.io.
ObjectOutputStream
Reset will disregard the state of any objects already written to the
 stream.
reset()
- Method in class java.io.
PushbackInputStream
Repositions this stream to the position at the time the
mark
method was last called on this input stream.
reset()
- Method in class java.io.
PushbackReader
Resets the stream.
reset()
- Method in class java.io.
Reader
Resets the stream.
reset()
- Method in class java.io.
StringBufferInputStream
Deprecated.
Resets the input stream to begin reading from the first character
 of this input stream's underlying buffer.
reset()
- Method in class java.io.
StringReader
Resets the stream to the most recent mark, or to the beginning of the
 string if it has never been marked.
reset()
- Method in class java.nio.
Buffer
Resets this buffer's position to the previously-marked position.
reset()
- Method in class java.nio.
ByteBuffer
Resets this buffer's position to the previously-marked position.
reset()
- Method in class java.nio.
CharBuffer
Resets this buffer's position to the previously-marked position.
reset()
- Method in class java.nio.charset.
CharsetDecoder
Resets this decoder, clearing any internal state.
reset()
- Method in class java.nio.charset.
CharsetEncoder
Resets this encoder, clearing any internal state.
reset()
- Method in class java.nio.
DoubleBuffer
Resets this buffer's position to the previously-marked position.
reset()
- Method in interface java.nio.file.
WatchKey
Resets this watch key.
reset()
- Method in class java.nio.
FloatBuffer
Resets this buffer's position to the previously-marked position.
reset()
- Method in class java.nio.
IntBuffer
Resets this buffer's position to the previously-marked position.
reset()
- Method in class java.nio.
LongBuffer
Resets this buffer's position to the previously-marked position.
reset()
- Method in class java.nio.
MappedByteBuffer
Resets this buffer's position to the previously-marked position.
reset()
- Method in class java.nio.
ShortBuffer
Resets this buffer's position to the previously-marked position.
reset()
- Method in class java.security.
MessageDigest
Resets the digest for further use.
reset()
- Method in class java.text.
CollationElementIterator
Resets the cursor to the beginning of the string.
reset()
- Method in class java.util.concurrent.atomic.
DoubleAccumulator
Resets variables maintaining updates to the identity value.
reset()
- Method in class java.util.concurrent.atomic.
DoubleAdder
Resets variables maintaining the sum to zero.
reset()
- Method in class java.util.concurrent.atomic.
LongAccumulator
Resets variables maintaining updates to the identity value.
reset()
- Method in class java.util.concurrent.atomic.
LongAdder
Resets variables maintaining the sum to zero.
reset()
- Method in class java.util.concurrent.
CyclicBarrier
Resets the barrier to its initial state.
reset()
- Method in class java.util.logging.
LogManager
Reset the logging configuration.
reset()
- Method in class java.util.regex.
Matcher
Resets this matcher.
reset()
- Method in class java.util.
Scanner
Resets this scanner.
reset()
- Method in class java.util.zip.
Adler32
Resets the checksum to initial value.
reset()
- Method in interface java.util.zip.
Checksum
Resets the checksum to its initial value.
reset()
- Method in class java.util.zip.
CRC32
Resets CRC-32 to initial value.
reset()
- Method in class java.util.zip.
CRC32C
Resets CRC-32C to initial value.
reset()
- Method in class java.util.zip.
Deflater
Resets deflater so that a new set of input data can be processed.
reset()
- Method in class java.util.zip.
DeflaterInputStream
This operation is not supported
.
reset()
- Method in class java.util.zip.
Inflater
Resets inflater so that a new set of input data can be processed.
reset()
- Method in class java.util.zip.
InflaterInputStream
Repositions this stream to the position at the time the
mark
method was last called on this input stream.
reset()
- Method in class javax.crypto.
Mac
Resets this
Mac
object.
reset()
- Method in class javax.imageio.
ImageReader
Restores the
ImageReader
to its initial state.
reset()
- Method in class javax.imageio.
ImageWriter
Restores the
ImageWriter
to its initial state.
reset()
- Method in class javax.imageio.metadata.
IIOMetadata
Resets all the data stored in this object to default values,
 usually to the state this object was in immediately after
 construction, though the precise semantics are plug-in specific.
reset()
- Method in interface javax.imageio.stream.
ImageInputStream
Returns the stream pointer to its previous position, including
 the bit offset, at the time of the most recent unmatched call
 to
mark
.
reset()
- Method in class javax.imageio.stream.
ImageInputStreamImpl
Resets the current stream byte and bit positions from the stack
 of marked positions.
reset()
- Method in class javax.sound.sampled.
AudioInputStream
Repositions this audio input stream to the position it had at the time
 its
mark
method was last invoked.
reset()
- Method in class javax.swing.
ProgressMonitorInputStream
Overrides
FilterInputStream.reset
to reset the progress monitor as well as the stream.
reset()
- Method in class javax.xml.datatype.
XMLGregorianCalendar
Reset this
XMLGregorianCalendar
to its original values.
reset()
- Method in class javax.xml.parsers.
DocumentBuilder
Reset this
DocumentBuilder
to its original configuration.
reset()
- Method in class javax.xml.parsers.
SAXParser
Reset this
SAXParser
to its original configuration.
reset()
- Method in class javax.xml.transform.
Transformer
Reset this
Transformer
to its original configuration.
reset()
- Method in class javax.xml.validation.
Validator
Reset this
Validator
to its original configuration.
reset()
- Method in interface javax.xml.xpath.
XPath
Reset this
XPath
to its original configuration.
reset()
- Method in interface org.w3c.dom.html.
HTMLFormElement
Restores a form element's default values.
reset()
- Method in class org.xml.sax.helpers.
NamespaceSupport
Reset this Namespace support object for reuse.
reset(CharSequence)
- Method in class java.util.regex.
Matcher
Resets this matcher with a new input sequence.
RESET
- Static variable in class javax.swing.text.html.
FormView
Deprecated.
As of 1.3, value comes from UIManager UIManager property
             FormView.resetButtonText
RESET_FLAGS_ALREADY_NOTIFIED
- Static variable in class javax.management.monitor.
Monitor
This flag is used to reset the
alreadyNotifieds
monitor attribute.
resetAllControllers()
- Method in interface javax.sound.midi.
MidiChannel
Resets all the implemented controllers to their default values.
resetAndRelink(GuardedInvocation, MethodHandle)
- Method in interface jdk.dynalink.
RelinkableCallSite
This method will be called by the dynamic linker every time the call site
 is relinked
and
the linker wishes the call site to throw away any
 prior linkage state (that is how it differs from
RelinkableCallSite.relink(GuardedInvocation, MethodHandle)
).
resetAndRelink(GuardedInvocation, MethodHandle)
- Method in class jdk.dynalink.support.
ChainedCallSite
resetAndRelink(GuardedInvocation, MethodHandle)
- Method in class jdk.dynalink.support.
SimpleRelinkableCallSite
resetChoosableFileFilters()
- Method in class javax.swing.
JFileChooser
Resets the choosable file filter list to its starting state.
resetInputValue()
- Method in class javax.swing.plaf.basic.
BasicOptionPaneUI
Sets the input value in the option pane the receiver is providing
 the look and feel for based on the value in the inputComponent.
resetKeyboardActions()
- Method in class javax.swing.
JComponent
Unregisters all the bindings in the first tier
InputMaps
and
ActionMap
.
resetLayoutManager()
- Method in class javax.swing.plaf.basic.
BasicSplitPaneUI
Resets the layout manager based on orientation and messages it
 with invalidateLayout to pull in appropriate Components.
resetMarksAtZero()
- Method in class javax.swing.text.
GapContent
Resets all the marks that have an offset of 0 to have an index of
 zero as well.
resetPeakThreadCount()
- Method in interface java.lang.management.
ThreadMXBean
Resets the peak thread count to the current number of
 live platform threads.
resetPeakUsage()
- Method in interface java.lang.management.
MemoryPoolMXBean
Resets the peak memory usage statistic of this memory pool
 to the current memory usage.
resetRecognizer()
- Method in class java.awt.dnd.
DragGestureRecognizer
Reset the Recognizer, if its currently recognizing a gesture, ignore
 it.
resetRowSelection()
- Method in class javax.swing.tree.
DefaultTreeSelectionModel
Updates this object's mapping from TreePath to rows.
resetRowSelection()
- Method in interface javax.swing.tree.
TreeSelectionModel
Updates this object's mapping from TreePaths to rows.
resetSizeAt(int)
- Method in class javax.swing.plaf.basic.
BasicSplitPaneUI.BasicHorizontalLayoutManager
Resets the size of the Component at the passed in location.
resetSyntax()
- Method in class java.io.
StreamTokenizer
Resets this tokenizer's syntax table so that all characters are
 "ordinary."
resetToPreferredSizes()
- Method in class javax.swing.
JSplitPane
Lays out the
JSplitPane
layout based on the preferred size
 of the children components.
resetToPreferredSizes()
- Method in class javax.swing.plaf.basic.
BasicSplitPaneUI.BasicHorizontalLayoutManager
Marks the receiver so that the next time this instance is
 laid out it'll ask for the preferred sizes.
resetToPreferredSizes(JSplitPane)
- Method in class javax.swing.plaf.basic.
BasicSplitPaneUI
Messaged to reset the preferred sizes.
resetToPreferredSizes(JSplitPane)
- Method in class javax.swing.plaf.multi.
MultiSplitPaneUI
Invokes the
resetToPreferredSizes
method on each UI handled by this object.
resetToPreferredSizes(JSplitPane)
- Method in class javax.swing.plaf.
SplitPaneUI
Messaged to relayout the JSplitPane based on the preferred size
 of the children components.
resetViewPort()
- Method in class javax.swing.
JScrollPane.AccessibleJScrollPane
Resets the viewport ChangeListener and PropertyChangeListener
reshape(int, int, int, int)
- Method in class java.awt.
Component
Deprecated.
As of JDK version 1.1,
 replaced by
setBounds(int, int, int, int)
.
reshape(int, int, int, int)
- Method in class java.awt.
Rectangle
Deprecated.
As of JDK version 1.1,
 replaced by
setBounds(int, int, int, int)
.
reshape(int, int, int, int)
- Method in class java.awt.
Window
Deprecated.
As of JDK version 1.1,
 replaced by
setBounds(int, int, int, int)
.
reshape(int, int, int, int)
- Method in class javax.swing.
JComponent
Deprecated.
As of JDK 5,
 replaced by
Component.setBounds(int, int, int, int)
.
Moves and resizes this component.
reshape(int, int, int, int)
- Method in class javax.swing.
JInternalFrame
Moves and resizes this component.
reshape(int, int, int, int)
- Method in class javax.swing.
JViewport
Sets the bounds of this viewport.
reshape(long...)
- Method in interface java.lang.foreign.
SequenceLayout
PREVIEW
Rearranges the elements in this sequence layout into a multi-dimensional sequence layout.
resizable
- Variable in class javax.swing.
JInternalFrame
The frame's size can be changed.
RESIZABLE
- Static variable in class javax.accessibility.
AccessibleState
Indicates the size of this object is not fixed.
resize(int, int)
- Method in class java.applet.
Applet
Deprecated.
Requests that this applet be resized.
resize(int, int)
- Method in class java.awt.
Component
Deprecated.
As of JDK version 1.1,
 replaced by
setSize(int, int)
.
resize(int, int)
- Method in class java.awt.
Rectangle
Deprecated.
As of JDK version 1.1,
 replaced by
setSize(int, int)
.
resize(Dimension)
- Method in class java.applet.
Applet
Deprecated.
Requests that this applet be resized.
resize(Dimension)
- Method in class java.awt.
Component
Deprecated.
As of JDK version 1.1,
 replaced by
setSize(Dimension)
.
RESIZE_NONE
- Variable in class javax.swing.plaf.basic.
BasicInternalFrameUI.BorderListener
resize none
RESIZE_WEIGHT_PROPERTY
- Static variable in class javax.swing.
JSplitPane
Bound property for weight.
resizeAndRepaint()
- Method in class javax.swing.
JTable
Equivalent to
revalidate
followed by
repaint
.
resizeAndRepaint()
- Method in class javax.swing.table.
JTableHeader
Sizes the header and marks it as needing display.
resizedPostingDisableCount
- Variable in class javax.swing.table.
TableColumn
Deprecated.
as of Java 2 platform v1.3
resizeFrame(JComponent, int, int, int, int)
- Method in class javax.swing.
DefaultDesktopManager
Calls
setBoundsForFrame
with the new values.
resizeFrame(JComponent, int, int, int, int)
- Method in interface javax.swing.
DesktopManager
The user has resized the component.
resizingAllowed
- Variable in class javax.swing.table.
JTableHeader
If true, resizing of columns are allowed by the user;
 the default is true.
resizingColumn
- Variable in class javax.swing.table.
JTableHeader
The index of the column being resized.
resolution
- Variable in class javax.sound.midi.
MidiFileFormat
The timing resolution of the MIDI file.
resolution
- Variable in class javax.sound.midi.
Sequence
The timing resolution of the sequence.
RESOLUTION_UNIT_CENTIMETER
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A value to be used with the "ResolutionUnit" tag.
RESOLUTION_UNIT_INCH
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A value to be used with the "ResolutionUnit" tag.
RESOLUTION_UNIT_NONE
- Static variable in class javax.imageio.plugins.tiff.
BaselineTIFFTagSet
A value to be used with the "ResolutionUnit" tag.
ResolutionException
- Exception Class in
java.lang.module
Thrown when resolving a set of modules, or resolving a set of modules with
 service binding, fails.
ResolutionException()
- Constructor for exception class java.lang.module.
ResolutionException
Constructs a
ResolutionException
with no detail message.
ResolutionException(int, StackTraceElement[])
- Constructor for exception class jdk.jshell.spi.
ExecutionControl.ResolutionException
Constructs an exception indicating that a
DeclarationSnippet
with unresolved references has been encountered.
ResolutionException(String)
- Constructor for exception class java.lang.module.
ResolutionException
Constructs a
ResolutionException
with the given detail
 message.
ResolutionException(String, Throwable)
- Constructor for exception class java.lang.module.
ResolutionException
Constructs a
ResolutionException
with the given detail message
 and cause.
ResolutionException(Throwable)
- Constructor for exception class java.lang.module.
ResolutionException
Constructs an instance of this exception with the given cause.
Resolution of URIs within a transformation
- Search tag in package javax.xml.transform
Section
ResolutionSyntax
- Class in
javax.print.attribute
Class
ResolutionSyntax
is an abstract base class providing the common
 implementation of all attributes denoting a printer resolution.
ResolutionSyntax(int, int, int)
- Constructor for class javax.print.attribute.
ResolutionSyntax
Construct a new resolution attribute from the given items.
resolve(ModuleFinder, ModuleFinder, Collection<String>)
- Method in class java.lang.module.
Configuration
Resolves a collection of root modules, with this configuration as its
 parent, to create a new configuration.
resolve(ModuleFinder, List<Configuration>, ModuleFinder, Collection<String>)
- Static method in class java.lang.module.
Configuration
Resolves a collection of root modules to create a configuration.
resolve(String)
- Method in class java.net.
URI
Constructs a new URI by parsing the given string and then resolving it
 against this URI.
resolve(String)
- Method in interface java.nio.file.
Path
Converts a given path string to a
Path
and resolves it against
 this
Path
in exactly the manner specified by the
resolve
method.
resolve(String, String)
- Method in interface javax.xml.catalog.
CatalogResolver
Implements URIResolver.
resolve(String, String)
- Method in interface javax.xml.transform.
URIResolver
Called by the processor when it encounters
 an xsl:include, xsl:import, or document() function.
resolve(URI)
- Method in class java.net.
URI
Resolves the given URI against this URI.
resolve(Path)
- Method in interface java.nio.file.
Path
Resolve the given path against this path.
resolve(Map<TemporalField, Long>, TemporalAccessor, ResolverStyle)
- Method in interface java.time.temporal.
TemporalField
Resolves this field to provide a simpler alternative or a date.
RESOLVE
- Enum constant in enum class javax.xml.catalog.
CatalogFeatures.Feature
The
javax.xml.catalog.resolve
property as described in
 item
RESOLVE
of the
 Catalog Features table.
resolveAndBind(ModuleFinder, ModuleFinder, Collection<String>)
- Method in class java.lang.module.
Configuration
Resolves a collection of root modules, with service binding, and with
 this configuration as its parent, to create a new configuration.
resolveAndBind(ModuleFinder, List<Configuration>, ModuleFinder, Collection<String>)
- Static method in class java.lang.module.
Configuration
Resolves a collection of root modules, with service binding, to create
 configuration.
ResolveAttribute
- Static variable in interface javax.swing.text.
AttributeSet
Attribute name used to identify the resolving parent
 set of attributes, if one is defined.
ResolveAttribute
- Static variable in class javax.swing.text.
StyleConstants
Attribute name used to identify the resolving parent
 set of attributes, if one is defined.
resolveCallSiteDesc(MethodHandles.Lookup)
- Method in class java.lang.constant.
DynamicCallSiteDesc
Reflectively invokes the bootstrap method with the specified arguments,
 and return the resulting
CallSite
resolveClass(ObjectStreamClass)
- Method in class java.io.
ObjectInputStream
Load the local class equivalent of the specified stream class
 description.
resolveClass(Class<?>)
- Method in class java.lang.
ClassLoader
Links the specified class.
resolveConstantDesc(MethodHandles.Lookup)
- Method in interface java.lang.constant.
ClassDesc
resolveConstantDesc(MethodHandles.Lookup)
- Method in interface java.lang.constant.
ConstantDesc
Resolves this descriptor reflectively, emulating the resolution behavior
 of JVMS
5.4.3
and the access control behavior of JVMS
5.4.4
.
resolveConstantDesc(MethodHandles.Lookup)
- Method in class java.lang.constant.
DynamicConstantDesc
resolveConstantDesc(MethodHandles.Lookup)
- Method in interface java.lang.constant.
MethodHandleDesc
resolveConstantDesc(MethodHandles.Lookup)
- Method in interface java.lang.constant.
MethodTypeDesc
Resolves this descriptor reflectively, emulating the resolution behavior
 of JVMS
5.4.3
and the access control behavior of JVMS
5.4.4
.
resolveConstantDesc(MethodHandles.Lookup)
- Method in class java.lang.
Double
Resolves this instance as a
ConstantDesc
, the result of which is
 the instance itself.
resolveConstantDesc(MethodHandles.Lookup)
- Method in class java.lang.
Float
Resolves this instance as a
ConstantDesc
, the result of which is
 the instance itself.
resolveConstantDesc(MethodHandles.Lookup)
- Method in class java.lang.
Integer
Resolves this instance as a
ConstantDesc
, the result of which is
 the instance itself.
resolveConstantDesc(MethodHandles.Lookup)
- Method in class java.lang.
Long
Resolves this instance as a
ConstantDesc
, the result of which is
 the instance itself.
resolveConstantDesc(MethodHandles.Lookup)
- Method in class java.lang.
String
Resolves this instance as a
ConstantDesc
, the result of which is
 the instance itself.
resolveDate(Map<TemporalField, Long>, ResolverStyle)
- Method in class java.time.chrono.
AbstractChronology
Resolves parsed
ChronoField
values into a date during parsing.
resolveDate(Map<TemporalField, Long>, ResolverStyle)
- Method in interface java.time.chrono.
Chronology
Resolves parsed
ChronoField
values into a date during parsing.
resolveDate(Map<TemporalField, Long>, ResolverStyle)
- Method in class java.time.chrono.
HijrahChronology
resolveDate(Map<TemporalField, Long>, ResolverStyle)
- Method in class java.time.chrono.
IsoChronology
Resolves parsed
ChronoField
values into a date during parsing.
resolveDate(Map<TemporalField, Long>, ResolverStyle)
- Method in class java.time.chrono.
JapaneseChronology
resolveDate(Map<TemporalField, Long>, ResolverStyle)
- Method in class java.time.chrono.
MinguoChronology
resolveDate(Map<TemporalField, Long>, ResolverStyle)
- Method in class java.time.chrono.
ThaiBuddhistChronology
ResolvedModule
- Class in
java.lang.module
A module in a graph of
resolved modules
.
resolvedName
- Variable in exception class javax.naming.
NamingException
Contains the part of the name that has been successfully resolved.
resolvedObj
- Variable in exception class javax.naming.
NamingException
Contains the object to which resolution of the part of the name was
 successful.
resolvedObj
- Variable in class javax.naming.spi.
ResolveResult
Field containing the Object that was resolved to successfully.
resolveEntity(String, String)
- Method in interface javax.xml.catalog.
CatalogResolver
Implements
EntityResolver
.
resolveEntity(String, String)
- Method in interface org.xml.sax.
EntityResolver
Allow the application to resolve external entities.
resolveEntity(String, String)
- Method in class org.xml.sax.ext.
DefaultHandler2
Invokes
EntityResolver2.resolveEntity()
with null entity name and base URI.
resolveEntity(String, String)
- Method in class org.xml.sax.
HandlerBase
Deprecated.
Resolve an external entity.
resolveEntity(String, String)
- Method in class org.xml.sax.helpers.
DefaultHandler
Resolve an external entity.
resolveEntity(String, String)
- Method in class org.xml.sax.helpers.
XMLFilterImpl
Filter an external entity resolution.
resolveEntity(String, String, String, String)
- Method in interface javax.xml.catalog.
CatalogResolver
Implements
XMLResolver
.
resolveEntity(String, String, String, String)
- Method in interface javax.xml.stream.
XMLResolver
Retrieves a resource.
resolveEntity(String, String, String, String)
- Method in class org.xml.sax.ext.
DefaultHandler2
Tells the parser to resolve the systemId against the baseURI
 and read the entity text from that resulting absolute URI.
resolveEntity(String, String, String, String)
- Method in interface org.xml.sax.ext.
EntityResolver2
Allows applications to map references to external entities into input
 sources, or tell the parser it should use conventional URI resolution.
resolveFunction(QName, int)
- Method in interface javax.xml.xpath.
XPathFunctionResolver
Find a function in the set of available functions.
resolveObject(Object)
- Method in class java.io.
ObjectInputStream
This method will allow trusted subclasses of ObjectInputStream to
 substitute one object for another during deserialization.
resolveProxyClass(String[])
- Method in class java.io.
ObjectInputStream
Returns a proxy class that implements the interfaces named in a proxy
 class descriptor; subclasses may implement this method to read custom
 data from the stream along with the descriptors for dynamic proxy
 classes, allowing them to use an alternate loading mechanism for the
 interfaces and the proxy class.
Resolver
- Interface in
javax.naming.spi
This interface represents an "intermediate context" for name resolution.
RESOLVER
- Static variable in class javax.xml.stream.
XMLInputFactory
The property used to set/get the implementation of the XMLResolver
resolveResource(String, String, String, String, String)
- Method in interface javax.xml.catalog.
CatalogResolver
Implements
LSResourceResolver
.
resolveResource(String, String, String, String, String)
- Method in interface org.w3c.dom.ls.
LSResourceResolver
Allow the application to resolve external resources.
ResolveResult
- Class in
javax.naming.spi
This class represents the result of resolution of a name.
ResolveResult()
- Constructor for class javax.naming.spi.
ResolveResult
Constructs an instance of ResolveResult with the
 resolved object and remaining name both initialized to null.
ResolveResult(Object, String)
- Constructor for class javax.naming.spi.
ResolveResult
Constructs a new instance of ResolveResult consisting of
 the resolved object and the remaining unresolved component.
ResolveResult(Object, Name)
- Constructor for class javax.naming.spi.
ResolveResult
Constructs a new instance of ResolveResult consisting of
 the resolved Object and the remaining name.
ResolverStyle
- Enum Class in
java.time.format
Enumeration of different ways to resolve dates and times.
resolveSibling(String)
- Method in interface java.nio.file.
Path
Converts a given path string to a
Path
and resolves it against
 this path's
parent
path in exactly the manner
 specified by the
resolveSibling
method.
resolveSibling(Path)
- Method in interface java.nio.file.
Path
Resolves the given path against this path's
parent
path.
resolveToClass(String, Class<? extends Context>)
- Method in interface javax.naming.spi.
Resolver
Partially resolves a name.
resolveToClass(Name, Class<? extends Context>)
- Method in interface javax.naming.spi.
Resolver
Partially resolves a name.
resolveVariable(QName)
- Method in interface javax.xml.xpath.
XPathVariableResolver
Find a variable in the set of available variables.
Resolving
- Search tag in class java.time.format.DateTimeFormatter
Section
RESOURCE_VARIABLE
- Enum constant in enum class javax.lang.model.element.
ElementKind
A resource variable.
ResourceBundle
- Class in
java.util
Resource bundles contain locale-specific objects.
ResourceBundle()
- Constructor for class java.util.
ResourceBundle
Sole constructor.
ResourceBundle.Control
- Search tag in class java.util.ResourceBundle
Section
ResourceBundle.Control
- Class in
java.util
ResourceBundle.Control
defines a set of callback methods
 that are invoked by the
ResourceBundle.getBundle
factory
 methods during the bundle loading process.
ResourceBundleControlProvider
- Interface in
java.util.spi
An interface for service providers that provide implementations of
ResourceBundle.Control
.
ResourceBundleProvider
- Interface in
java.util.spi
ResourceBundleProvider
is a service provider interface for
 resource bundles.
Resource Bundles and Named Modules
- Search tag in class java.util.ResourceBundle
Section
Resource bundles as service providers
- Search tag in class java.util.ResourceBundle
Section
Resource bundles in automatic modules
- Search tag in class java.util.ResourceBundle
Section
Resource bundles in other modules and class path
- Search tag in class java.util.ResourceBundle
Section
Resource bundles together with an application
- Search tag in class java.util.ResourceBundle
Section
Resource Files
- Search tag in interface javax.naming.Context
Section
resources(String)
- Method in class java.lang.
ClassLoader
Returns a stream whose elements are the URLs of all the resources with
 the given name.
RESOURCES_ARE_NOT_READY
- Static variable in class javax.print.attribute.standard.
JobStateReason
At least one of the resources needed by the job, such as media, fonts,
 resource objects, etc., is not ready on any of the physical printers for
 which the job is a candidate.
ResponseAPDU
- Class in
javax.smartcardio
A response APDU as defined in ISO/IEC 7816-4.
ResponseAPDU(byte[])
- Constructor for class javax.smartcardio.
ResponseAPDU
Constructs a ResponseAPDU from a byte array containing the complete
 APDU contents (conditional body and trailed).
ResponseCache
- Class in
java.net
Represents implementations of URLConnection caches.
ResponseCache()
- Constructor for class java.net.
ResponseCache
Constructor for subclasses to call.
responseCode
- Variable in class java.net.
HttpURLConnection
An
int
representing the three digit HTTP Status-Code.
responseCode()
- Method in exception class java.net.
HttpRetryException
Returns the http response code
Response Controls
- Search tag in interface javax.naming.ldap.LdapContext
Section
responseMessage
- Variable in class java.net.
HttpURLConnection
The HTTP response message.
restart()
- Method in class javax.swing.
Timer
Restarts the
Timer
,
 canceling any pending firings and causing
 it to fire with its initial delay.
RESTART
- Enum constant in enum class com.sun.nio.sctp.
AssociationChangeNotification.AssocChangeEvent
SCTP has detected that the peer has restarted.
RESTORE_CMD
- Static variable in class javax.swing.plaf.basic.
BasicInternalFrameTitlePane
The restore button text property.
restoreAction
- Variable in class javax.swing.plaf.basic.
BasicInternalFrameTitlePane
The instance of a
RestoreAction
.
RestoreAction()
- Constructor for class javax.swing.plaf.basic.
BasicInternalFrameTitlePane.RestoreAction
Constructs a new instance of a
RestoreAction
.
restoreComposedText()
- Method in class javax.swing.text.
JTextComponent
Restores composed text previously saved by
saveComposedText
.
restoreOriginal()
- Method in interface javax.sql.rowset.
CachedRowSet
Restores this
CachedRowSet
object to its original
 value, that is, its value before the last set of changes.
restoreState(Hashtable<?, ?>)
- Method in interface javax.swing.undo.
StateEditable
Upon receiving this message the receiver should extract any relevant
 state out of
state
.
restoreSubcomponentFocus()
- Method in class javax.swing.
JInternalFrame
Requests the internal frame to restore focus to the
 last subcomponent that had focus.
Restricted methods
- Search tag in package java.lang.foreign
Section
Restrictions on Cracking
- Search tag in interface java.lang.invoke.MethodHandleInfo
Section
result()
- Method in class java.util.concurrent.
StructuredTaskScope.ShutdownOnSuccess
PREVIEW
Returns the result of the first subtask that completed
successfully
PREVIEW
.
result(Function<Throwable, ? extends X>)
- Method in class java.util.concurrent.
StructuredTaskScope.ShutdownOnSuccess
PREVIEW
Returns the result of the first subtask that completed
successfully
PREVIEW
, otherwise throws an exception produced
 by the given exception supplying function.
Result
- Interface in
javax.xml.transform
An object that implements this interface contains the information
 needed to build a transformation result tree.
Result()
- Constructor for class com.sun.net.httpserver.
Authenticator.Result
Constructor for subclasses to call.
Result(Object, Attributes)
- Constructor for class javax.naming.spi.
DirStateFactory.Result
Constructs an instance of Result.
resultNow()
- Method in interface java.util.concurrent.
Future
Returns the computed result, without waiting.
results()
- Method in class java.util.regex.
Matcher
Returns a stream of match results for each subsequence of the input
 sequence that matches the pattern.
ResultSet
- Interface in
java.sql
A table of data representing a database result set, which
 is usually generated by executing a statement that queries the database.
ResultSetMetaData
- Interface in
java.sql
An object that can be used to get information about the types
 and properties of the columns in a
ResultSet
object.
Result Tree Serialization
- Search tag in package javax.xml.transform
Section
resume()
- Method in interface com.sun.jdi.event.
EventSet
Resumes threads suspended by this event set.
resume()
- Method in interface com.sun.jdi.
ThreadGroupReference
Resumes all threads in this thread group.
resume()
- Method in interface com.sun.jdi.
ThreadReference
Resumes this thread.
resume()
- Method in interface com.sun.jdi.
VirtualMachine
Continues the execution of the application running in this
 virtual machine.
resume()
- Method in class java.lang.
Thread
Deprecated, for removal: This API element is subject to removal in a future version.
This method was originally specified to resume a thread
     suspended with
Thread.suspend()
. Suspending a thread was
     inherently deadlock-prone.
     For more information, see
Why
     are Thread.stop, Thread.suspend and Thread.resume Deprecated?
.
resume()
- Method in class java.lang.
ThreadGroup
Deprecated, for removal: This API element is subject to removal in a future version.
This method was originally specified to resume all threads
             in the thread group.
RETAIN_CLASS_REFERENCE
- Enum constant in enum class java.lang.
StackWalker.Option
Retains
Class
object in
StackFrame
s
 walked by this
StackWalker
.
retainAll(Collection)
- Method in class java.beans.beancontext.
BeanContextSupport
retain only specified children (Unsupported)
 implementations must synchronized on the hierarchy lock and "children" protected field
retainAll(Collection<?>)
- Method in class java.util.
AbstractCollection
Retains only the elements in this collection that are contained in the
 specified collection (optional operation).
retainAll(Collection<?>)
- Method in class java.util.
ArrayDeque
retainAll(Collection<?>)
- Method in class java.util.
ArrayList
Retains only the elements in this list that are contained in the
 specified collection.
retainAll(Collection<?>)
- Method in interface java.util.
Collection
Retains only the elements in this collection that are contained in the
 specified collection (optional operation).
retainAll(Collection<?>)
- Method in class java.util.concurrent.
ArrayBlockingQueue
retainAll(Collection<?>)
- Method in class java.util.concurrent.
ConcurrentHashMap.KeySetView
retainAll(Collection<?>)
- Method in class java.util.concurrent.
ConcurrentLinkedDeque
retainAll(Collection<?>)
- Method in class java.util.concurrent.
ConcurrentLinkedQueue
retainAll(Collection<?>)
- Method in class java.util.concurrent.
CopyOnWriteArrayList
Retains only the elements in this list that are contained in the
 specified collection.
retainAll(Collection<?>)
- Method in class java.util.concurrent.
CopyOnWriteArraySet
Retains only the elements in this set that are contained in the
 specified collection.
retainAll(Collection<?>)
- Method in class java.util.concurrent.
LinkedBlockingDeque
retainAll(Collection<?>)
- Method in class java.util.concurrent.
LinkedBlockingQueue
retainAll(Collection<?>)
- Method in class java.util.concurrent.
LinkedTransferQueue
retainAll(Collection<?>)
- Method in class java.util.concurrent.
PriorityBlockingQueue
retainAll(Collection<?>)
- Method in class java.util.concurrent.
SynchronousQueue
Always returns
false
.
retainAll(Collection<?>)
- Method in interface java.util.
List
Retains only the elements in this list that are contained in the
 specified collection (optional operation).
retainAll(Collection<?>)
- Method in class java.util.
PriorityQueue
retainAll(Collection<?>)
- Method in interface java.util.
Set
Retains only the elements in this set that are contained in the
 specified collection (optional operation).
retainAll(Collection<?>)
- Method in class java.util.
Vector
Retains only the elements in this Vector that are contained in the
 specified Collection.
Retention
- Annotation Interface in
java.lang.annotation
Indicates how long annotations with the annotated interface are to
 be retained.
RetentionPolicy
- Enum Class in
java.lang.annotation
Annotation retention policy.
retransformClasses(Class<?>...)
- Method in interface java.lang.instrument.
Instrumentation
Retransform the supplied set of classes.
RetrievalMethod
- Interface in
javax.xml.crypto.dsig.keyinfo
A representation of the XML
RetrievalMethod
element as
 defined in the
W3C Recommendation for XML-Signature Syntax and Processing
.
retrieveAllRoles()
- Method in interface javax.management.relation.
Relation
Returns all roles in the relation without checking read mode.
retrieveAllRoles()
- Method in class javax.management.relation.
RelationSupport
Returns all roles in the relation without checking read mode.
Retry(int)
- Constructor for class com.sun.net.httpserver.
Authenticator.Retry
Creates a
Retry
instance with given response code.
retryReferral()
- Method in exception class javax.naming.
ReferralException
Retries the referral currently being processed.
RETURN
- Enum constant in enum class com.sun.nio.sctp.
HandlerResult
Return without trying to receive any more data.
RETURN
- Enum constant in enum class com.sun.source.doctree.
DocTree.Kind
Used for instances of
ReturnTree
representing an
@return
tag.
RETURN
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
ReturnTree
.
RETURN_GENERATED_KEYS
- Static variable in interface java.sql.
Statement
The constant indicating that generated keys should be made
 available for retrieval.
returnLayout()
- Method in interface java.lang.foreign.
FunctionDescriptor
PREVIEW
Returns the return layout (if any) of this function descriptor.
ReturnTree
- Interface in
com.sun.source.doctree
A tree node for an
@return
block tag.
ReturnTree
- Interface in
com.sun.source.tree
A tree node for a
return
statement.
returnType()
- Method in interface com.sun.jdi.
Method
Returns the return type,
 as specified in the declaration of this method.
returnType()
- Method in interface java.lang.constant.
MethodTypeDesc
Gets the return type of the method type described by this
MethodTypeDesc
.
returnType()
- Method in class java.lang.invoke.
MethodType
Returns the return type of this method type.
returnType()
- Method in interface java.lang.invoke.
TypeDescriptor.OfMethod
Return a field descriptor describing the return type of the method type described
 by this descriptor
returnTypeName()
- Method in interface com.sun.jdi.
Method
Returns a text representation of the return type,
 as specified in the declaration of this method.
returnValue()
- Method in interface com.sun.jdi.event.
MethodExitEvent
Returns the value that the method will return.
returnValue()
- Method in exception class com.sun.tools.attach.
AgentInitializationException
If the exception was created with the return value from the agent
Agent_OnAttach
function then this returns that value,
 otherwise returns
0
.
REUSE
- Static variable in class javax.security.sasl.
Sasl
The name of a property that specifies whether to reuse previously
 authenticated session information.
REV
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "rev"
revalidate()
- Method in class java.awt.
Component.BltBufferStrategy
Restore the drawing buffer if it has been lost
revalidate()
- Method in class java.awt.
Component.FlipBufferStrategy
Restore the drawing buffer if it has been lost
revalidate()
- Method in class java.awt.
Component
Revalidates the component hierarchy up to the nearest validate root.
revalidate()
- Method in class javax.swing.
DefaultListCellRenderer
Overridden for performance reasons.
revalidate()
- Method in class javax.swing.
JComponent
Supports deferred automatic layout.
revalidate()
- Method in class javax.swing.table.
DefaultTableCellRenderer
Overridden for performance reasons.
revalidate()
- Method in class javax.swing.tree.
DefaultTreeCellRenderer
Overridden for performance reasons.
revealDirect(MethodHandle)
- Method in class java.lang.invoke.
MethodHandles.Lookup
Cracks a
direct method handle
created by this lookup object or a similar one.
REVERB
- Static variable in class javax.sound.sampled.
EnumControl.Type
Represents a control over a set of possible reverberation settings.
REVERB_RETURN
- Static variable in class javax.sound.sampled.
FloatControl.Type
Represents a control for the post-reverb gain on a line.
REVERB_SEND
- Static variable in class javax.sound.sampled.
FloatControl.Type
Represents a control for the pre-reverb gain on a line.
ReverbType
- Class in
javax.sound.sampled
The
ReverbType
class provides methods for accessing various
 reverberation settings to be applied to an audio signal.
ReverbType(String, int, float, int, float, int)
- Constructor for class javax.sound.sampled.
ReverbType
Constructs a new reverb type that has the specified reverberation
 parameter values.
reverse()
- Method in class java.lang.
StringBuffer
reverse()
- Method in class java.lang.
StringBuilder
reverse(int)
- Static method in class java.lang.
Integer
Returns the value obtained by reversing the order of the bits in the
 two's complement binary representation of the specified
int
value.
reverse(long)
- Static method in class java.lang.
Long
Returns the value obtained by reversing the order of the bits in the
 two's complement binary representation of the specified
long
value.
reverse(List<?>)
- Static method in class java.util.
Collections
Reverses the order of the elements in the specified list.
REVERSE
- Static variable in class jdk.incubator.vector.
VectorOperators
Produce
reverse(a)
REVERSE_BYTES
- Static variable in class jdk.incubator.vector.
VectorOperators
Produce
reverseBytes(a)
REVERSE_LANDSCAPE
- Static variable in class java.awt.print.
PageFormat
The origin is at the top right of the paper with x
  running top to bottom and y running right to left.
REVERSE_LANDSCAPE
- Static variable in class javax.print.attribute.standard.
OrientationRequested
The content will be imaged across the long edge of the medium, but in the
 opposite manner from landscape.
REVERSE_PORTRAIT
- Static variable in class javax.print.attribute.standard.
OrientationRequested
The content will be imaged across the short edge of the medium, but in
 the opposite manner from portrait.
reverseBytes(char)
- Static method in class java.lang.
Character
Returns the value obtained by reversing the order of the bytes in the
 specified
char
value.
reverseBytes(int)
- Static method in class java.lang.
Integer
Returns the value obtained by reversing the order of the bytes in the
 two's complement representation of the specified
int
value.
reverseBytes(long)
- Static method in class java.lang.
Long
Returns the value obtained by reversing the order of the bytes in the
 two's complement representation of the specified
long
value.
reverseBytes(short)
- Static method in class java.lang.
Short
Returns the value obtained by reversing the order of the bytes in the
 two's complement representation of the specified
short
value.
reversed()
- Method in interface java.util.
Comparator
Returns a comparator that imposes the reverse ordering of this
 comparator.
reversed()
- Method in class java.util.concurrent.
CopyOnWriteArrayList
Returns a reverse-ordered
view
of this collection.
reversed()
- Method in interface java.util.
Deque
Returns a reverse-ordered
view
of this collection.
reversed()
- Method in class java.util.
LinkedHashMap
Returns a reverse-ordered
view
of this map.
reversed()
- Method in class java.util.
LinkedHashSet
Returns a reverse-ordered
view
of this collection.
reversed()
- Method in class java.util.
LinkedList
Returns a reverse-ordered
view
of this collection.
reversed()
- Method in interface java.util.
List
Returns a reverse-ordered
view
of this collection.
reversed()
- Method in interface java.util.
NavigableMap
Returns a reverse-ordered
view
of this map.
reversed()
- Method in interface java.util.
NavigableSet
Returns a reverse-ordered
view
of this collection.
reversed()
- Method in interface java.util.
SequencedCollection
Returns a reverse-ordered
view
of this collection.
reversed()
- Method in interface java.util.
SequencedMap
Returns a reverse-ordered
view
of this map.
reversed()
- Method in interface java.util.
SequencedSet
Returns a reverse-ordered
view
of this collection.
reversed()
- Method in interface java.util.
SortedMap
Returns a reverse-ordered
view
of this map.
reversed()
- Method in interface java.util.
SortedSet
Returns a reverse-ordered
view
of this collection.
reverseOrder()
- Static method in class java.util.
Collections
Returns a comparator that imposes the reverse of the
natural
 ordering
on a collection of objects that implement the
Comparable
interface.
reverseOrder()
- Static method in interface java.util.
Comparator
Returns a comparator that imposes the reverse of the
natural
 ordering
.
reverseOrder(Comparator<T>)
- Static method in class java.util.
Collections
Returns a comparator that imposes the reverse ordering of the specified
 comparator.
REVERT
- Static variable in class javax.swing.
JFormattedTextField
Constant identifying that when focus is lost, editing value should
 be reverted to current value set on the
JFormattedTextField
.
REVOKED
- Enum constant in enum class java.security.cert.
CertPathValidatorException.BasicReason
The certificate is revoked.
revokeService(Class<?>, BeanContextServiceProvider, boolean)
- Method in interface java.beans.beancontext.
BeanContextServices
BeanContextServiceProviders wishing to remove
 a currently registered service from this context
 may do so via invocation of this method.
revokeService(Class<?>, BeanContextServiceProvider, boolean)
- Method in class java.beans.beancontext.
BeanContextServicesSupport
remove a service
rewind()
- Method in class java.nio.
Buffer
Rewinds this buffer.
rewind()
- Method in class java.nio.
ByteBuffer
Rewinds this buffer.
rewind()
- Method in class java.nio.
CharBuffer
Rewinds this buffer.
rewind()
- Method in class java.nio.
DoubleBuffer
Rewinds this buffer.
rewind()
- Method in class java.nio.
FloatBuffer
Rewinds this buffer.
rewind()
- Method in class java.nio.
IntBuffer
Rewinds this buffer.
rewind()
- Method in class java.nio.
LongBuffer
Rewinds this buffer.
rewind()
- Method in class java.nio.
MappedByteBuffer
Rewinds this buffer.
rewind()
- Method in class java.nio.
ShortBuffer
Rewinds this buffer.
RFC_1123_DATE_TIME
- Static variable in class java.time.format.
DateTimeFormatter
The RFC-1123 date-time formatter, such as 'Tue, 3 Jun 2008 11:05:30 GMT'.
RFC 1122: Requirements for Internet Hosts - Communication Layers
- Search tag in class java.net.IDN
External Specification
RFC 1122: Requirements for Internet Hosts - Communication Layers
- Search tag in java.net.StandardSocketOptions.SO_KEEPALIVE
External Specification
RFC 1122: Requirements for Internet Hosts - Communication Layers
- Search tag in java.net.StandardSocketOptions.TCP_NODELAY
External Specification
RFC 1123: Requirements for Internet Hosts - Application and Support
- Search tag in class java.net.IDN
External Specification
RFC 1323: TCP Extensions for High Performance
- Search tag in java.net.StandardSocketOptions.SO_RCVBUF
External Specification
RFC 1349: Type of Service in the Internet Protocol Suite
- Search tag in java.net.StandardSocketOptions.IP_TOS
External Specification
RFC1779
- Static variable in class javax.security.auth.x500.
X500Principal
RFC 1779 String format of Distinguished Names.
RFC 1918: Address Allocation for Private Internets
- Search tag in class java.net.Inet4Address
External Specification
RFC 1918: Address Allocation for Private Internets
- Search tag in class java.net.InetAddress
External Specification
RFC 1950: ZLIB Compressed Data Format Specification version 3.3
- Search tag in package java.util.zip
External Specification
RFC 1951: DEFLATE Compressed Data Format Specification version 1.3
- Search tag in package java.util.zip
External Specification
RFC 1952: GZIP file format specification version 4.3
- Search tag in package java.util.zip
External Specification
RFC 2045: Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies
- Search tag in class java.util.Base64
External Specification
RFC 2045: Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies
- Search tag in java.nio.file.Files.probeContentType(Path)
External Specification
RFC 2045: Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies
- Search tag in java.nio.file.spi.FileTypeDetector.probeContentType(Path)
External Specification
RFC 2109: HTTP State Management Mechanism
- Search tag in class java.net.HttpCookie
External Specification
RFC 2236: Internet Group Management Protocol, Version 2
- Search tag in interface java.nio.channels.MulticastChannel
External Specification
RFC2253
- Static variable in class javax.security.auth.x500.
X500Principal
RFC 2253 String format of Distinguished Names.
RFC 2278: IANA Charset Registration Procedures
- Search tag in class java.nio.charset.Charset
External Specification
RFC 2278: IANA Charset Registration Procedures
- Search tag in package java.nio.charset
External Specification
RFC 2279: UTF-8, a transformation format of ISO 10646
- Search tag in class java.net.URI
External Specification
RFC 2279: UTF-8, a transformation format of ISO 10646
- Search tag in class java.nio.charset.Charset
External Specification
RFC 2296: HTTP Remote Variant Selection Algorithm -- RVSA/1.0
- Search tag in class java.net.URLPermission
External Specification
RFC 2365: Administratively Scoped IP Multicast
- Search tag in class java.net.Inet4Address
External Specification
RFC 2365: Administratively Scoped IP Multicast
- Search tag in class java.net.InetAddress
External Specification
RFC 2373: IP Version 6 Addressing Architecture
- Search tag in class java.net.Inet6Address
External Specification
RFC 2373: IP Version 6 Addressing Architecture
- Search tag in class java.net.InetAddress
External Specification
RFC 2373: IP Version 6 Addressing Architecture
- Search tag in class java.net.URI
External Specification
RFC 2373: IP Version 6 Addressing Architecture
- Search tag in java.net.InetAddress.getAllByName(String)
External Specification
RFC 2373: IP Version 6 Addressing Architecture
- Search tag in java.net.InetAddress.getByName(String)
External Specification
RFC 2373: IP Version 6 Addressing Architecture
- Search tag in java.net.URI.URI(String)
External Specification
RFC 2373: IP Version 6 Addressing Architecture
- Search tag in java.net.URI.getHost()
External Specification
RFC 2373: IP Version 6 Addressing Architecture
- Search tag in java.net.URL.URL(String, String, int, String)
External Specification
RFC 2396: Uniform Resource Identifiers (URI): Generic Syntax
- Search tag in class java.net.URI
External Specification
RFC 2396: Uniform Resource Identifiers (URI): Generic Syntax
- Search tag in class java.net.URL
External Specification
RFC 2396: Uniform Resource Identifiers (URI): Generic Syntax
- Search tag in java.net.URI.URI(String)
External Specification
RFC 2396: Uniform Resource Identifiers (URI): Generic Syntax
- Search tag in java.net.URI.URI(String, String, String, String, String)
External Specification
RFC 2396: Uniform Resource Identifiers (URI): Generic Syntax
- Search tag in java.net.URI.URI(String, String, String, int, String, String, String)
External Specification
RFC 2396: Uniform Resource Identifiers (URI): Generic Syntax
- Search tag in java.net.URI.normalize()
External Specification
RFC 2396: Uniform Resource Identifiers (URI): Generic Syntax
- Search tag in java.net.URI.parseServerAuthority()
External Specification
RFC 2396: Uniform Resource Identifiers (URI): Generic Syntax
- Search tag in java.net.URI.resolve(URI)
External Specification
RFC 2396: Uniform Resource Identifiers (URI): Generic Syntax
- Search tag in java.net.URI.toString()
External Specification
RFC 2474: Definition of the Differentiated Services Field (DS Field) in the IPv4 and IPv6 Headers
- Search tag in java.net.StandardSocketOptions.IP_TOS
External Specification
RFC 2616: Hypertext Transfer Protocol -- HTTP/1.1
- Search tag in class java.net.ResponseCache
External Specification
RFC 2616: Hypertext Transfer Protocol -- HTTP/1.1
- Search tag in class java.net.URLConnection
External Specification
RFC 2616: Hypertext Transfer Protocol -- HTTP/1.1
- Search tag in java.util.Locale.LanguageRange.parse(String)
External Specification
RFC 2616: Hypertext Transfer Protocol -- HTTP/1.1
- Search tag in java.util.Locale.LanguageRange.parse(String, Map<String, List<String>>)
External Specification
RFC 2710: Multicast Listener Discovery (MLD) for IPv6
- Search tag in interface java.nio.channels.MulticastChannel
External Specification
RFC 2732: Format for Literal IPv6 Addresses in URL's
- Search tag in class java.net.SocketPermission
External Specification
RFC 2732: Format for Literal IPv6 Addresses in URL's
- Search tag in class java.net.URI
External Specification
RFC 2732: Format for Literal IPv6 Addresses in URL's
- Search tag in class java.net.URL
External Specification
RFC 2732: Format for Literal IPv6 Addresses in URL's
- Search tag in class java.net.URLPermission
External Specification
RFC 2732: Format for Literal IPv6 Addresses in URL's
- Search tag in java.net.URI.URI(String)
External Specification
RFC 2732: Format for Literal IPv6 Addresses in URL's
- Search tag in java.net.URL.URL(String, String, int, String)
External Specification
RFC 2781: UTF-16, an encoding of ISO 10646
- Search tag in class java.nio.charset.Charset
External Specification
RFC 2965: HTTP State Management Mechanism
- Search tag in class java.net.CookieHandler
External Specification
RFC 2965: HTTP State Management Mechanism
- Search tag in class java.net.CookieManager
External Specification
RFC 2965: HTTP State Management Mechanism
- Search tag in class java.net.HttpCookie
External Specification
RFC 3330: Special-Use IPv4 Addresses
- Search tag in java.net.InetAddress.getAllByName(String)
External Specification
RFC 3330: Special-Use IPv4 Addresses
- Search tag in java.net.InetAddress.getByName(String)
External Specification
RFC 3376: Internet Group Management Protocol, Version 3
- Search tag in interface java.nio.channels.MulticastChannel
External Specification
RFC 3454: Preparation of Internationalized Strings ("stringprep")
- Search tag in class java.net.IDN
External Specification
RFC 3490: Internationalizing Domain Names in Applications (IDNA)
- Search tag in class java.net.IDN
External Specification
RFC 3490: Internationalizing Domain Names in Applications (IDNA)
- Search tag in java.net.IDN.toASCII(String)
External Specification
RFC 3490: Internationalizing Domain Names in Applications (IDNA)
- Search tag in java.net.IDN.toASCII(String, int)
External Specification
RFC 3490: Internationalizing Domain Names in Applications (IDNA)
- Search tag in java.net.IDN.toUnicode(String)
External Specification
RFC 3490: Internationalizing Domain Names in Applications (IDNA)
- Search tag in java.net.IDN.toUnicode(String, int)
External Specification
RFC 3491: Nameprep: A Stringprep Profile for Internationalized Domain Names (IDN)
- Search tag in class java.net.IDN
External Specification
RFC 3492: Punycode: A Bootstring encoding of Unicode for Internationalized Domain Names in Applications (IDNA)
- Search tag in class java.net.IDN
External Specification
RFC 3530: Network File System (NFS) version 4 Protocol
- Search tag in class java.nio.file.attribute.AclEntry
External Specification
RFC 3530: Network File System (NFS) version 4 Protocol
- Search tag in interface java.nio.file.attribute.AclFileAttributeView
External Specification
RFC 3530: Network File System (NFS) version 4 Protocol
- Search tag in java.nio.file.attribute.AclEntryPermission.READ_NAMED_ATTRS
External Specification
RFC 3530: Network File System (NFS) version 4 Protocol
- Search tag in java.nio.file.attribute.AclEntryPermission.WRITE_NAMED_ATTRS
External Specification
RFC 3530: Network File System (NFS) version 4 Protocol
- Search tag in package java.nio.file.attribute
External Specification
RFC 3720: Internet Small Computer Systems Interface (iSCSI)
- Search tag in class java.util.zip.CRC32C
External Specification
RFC 3720: Internet Small Computer Systems Interface (iSCSI)
- Search tag in package java.util.zip
External Specification
RFC 3810: Multicast Listener Discovery Version 2 (MLDv2) for IPv6
- Search tag in interface java.nio.channels.MulticastChannel
External Specification
RFC 3986: Uniform Resource Identifier (URI): Generic Syntax
- Search tag in class java.net.URI
External Specification
RFC 3986: Uniform Resource Identifier (URI): Generic Syntax
- Search tag in class java.net.URL
External Specification
RFC 3986: Uniform Resource Identifier (URI): Generic Syntax
- Search tag in interface javax.annotation.processing.Filer
External Specification
RFC 3986: Uniform Resource Identifier (URI): Generic Syntax
- Search tag in interface javax.tools.JavaFileManager
External Specification
RFC 4122: A Universally Unique IDentifier (UUID) URN Namespace
- Search tag in class java.util.UUID
External Specification
RFC 4122: A Universally Unique IDentifier (UUID) URN Namespace
- Search tag in java.util.UUID.variant()
External Specification
RFC 4234: Augmented BNF for Syntax Specifications: ABNF
- Search tag in class java.util.Locale.LanguageRange
External Specification
RFC 4647: Matching of Language Tags
- Search tag in class java.util.Locale
External Specification
RFC 4647: Matching of Language Tags
- Search tag in class java.util.Locale.LanguageRange
External Specification
RFC 4647: Matching of Language Tags
- Search tag in enum class java.util.Locale.FilteringMode
External Specification
RFC 4648: The Base16, Base32, and Base64 Data Encodings
- Search tag in class java.util.Base64
External Specification
RFC 5646: Tags for Identifying Languages
- Search tag in class java.util.Locale
External Specification
RFC5646 2.1.1. Formatting of Language Tags
- Search tag in java.util.Locale.caseFoldLanguageTag(String)
External Specification
RFC5646 2.1. Syntax
- Search tag in java.util.Locale.caseFoldLanguageTag(String)
External Specification
RFC 790: Assigned numbers
- Search tag in class java.net.Inet4Address
External Specification
RFC 790: Assigned numbers
- Search tag in class java.net.InetAddress
External Specification
RFC 793: Transmission Control Protocol
- Search tag in java.net.StandardSocketOptions.SO_REUSEADDR
External Specification
RFC 822: STANDARD FOR THE FORMAT OF ARPA INTERNET TEXT MESSAGES
- Search tag in class java.util.Formatter
External Specification
RFC 919: Broadcasting Internet Datagrams
- Search tag in java.net.StandardSocketOptions.SO_BROADCAST
External Specification
RGBColor
- Interface in
org.w3c.dom.css
The
RGBColor
interface is used to represent any RGB color
 value.
RGBImageFilter
- Class in
java.awt.image
This class provides an easy way to create an ImageFilter which modifies
 the pixels of an image in the default RGB ColorModel.
RGBImageFilter()
- Constructor for class java.awt.image.
RGBImageFilter
Constructor for subclasses to call.
RGBtoHSB(int, int, int, float[])
- Static method in class java.awt.
Color
Converts the components of a color, as specified by the default RGB
 model, to an equivalent set of values for hue, saturation, and
 brightness that are the three components of the HSB model.
right
- Variable in class java.awt.
Insets
The inset from the right.
right
- Variable in class javax.swing.border.
EmptyBorder
The right inset of the border.
RIGHT
- Static variable in class java.awt.
Event
Deprecated.
The Right Arrow key, a non-ASCII action key.
RIGHT
- Static variable in class java.awt.
FlowLayout
This value indicates that each row of components
 should be right-justified.
RIGHT
- Static variable in class java.awt.
Label
Indicates that the label should be right justified.
RIGHT
- Static variable in class javax.swing.border.
TitledBorder
Position title text at the right side of the border line.
RIGHT
- Static variable in class javax.swing.
JSplitPane
Used to add a
Component
to the right of the other
Component
.
RIGHT
- Static variable in interface javax.swing.
SwingConstants
Box-orientation constant used to specify the right side of a box.
RIGHT_ALIGNMENT
- Static variable in class java.awt.
Component
Ease-of-use constant for
getAlignmentX
.
RIGHT_OUTER_JOIN
- Static variable in interface javax.sql.rowset.
JoinRowSet
An ANSI-style
JOIN
providing a right outer join between
 two tables.
RIGHT_SHIFT
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
BinaryTree
representing
 right shift
>>
.
RIGHT_SHIFT_ASSIGNMENT
- Enum constant in enum class com.sun.source.tree.
Tree.Kind
Used for instances of
CompoundAssignmentTree
representing
 right shift assignment
>>=
.
RIGHT_TO_LEFT
- Static variable in class java.awt.
ComponentOrientation
Items run right to left and lines flow top to bottom
 Examples: Arabic, Hebrew.
rightButton
- Variable in class javax.swing.plaf.basic.
BasicSplitPaneDivider
Button for quickly toggling the right component.
rightChildIndent
- Variable in class javax.swing.plaf.basic.
BasicTreeUI
Distance to add to leftChildIndent to determine where cell
 contents will be drawn.
rightComponent
- Variable in class javax.swing.
JSplitPane
The right or bottom component.
RightIndent
- Static variable in class javax.swing.text.
StyleConstants
The amount to indent the right side
 of the paragraph.
rightKey
- Variable in class javax.swing.plaf.basic.
BasicSplitPaneUI
Deprecated.
As of Java 2 platform v1.3.
rightKey
- Variable in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Deprecated.
As of Java 2 platform v1.3.
rightKey
- Variable in class javax.swing.plaf.basic.
BasicToolBarUI
Deprecated.
As of Java 2 platform v1.3.
rint(double)
- Static method in class java.lang.
Math
Returns the
double
value that is closest in value
 to the argument and is equal to a mathematical integer.
rint(double)
- Static method in class java.lang.
StrictMath
Returns the
double
value that is closest in value
 to the argument and is equal to a mathematical integer.
RIPEMD160
- Static variable in interface javax.xml.crypto.dsig.
DigestMethod
The
RIPEMD-160
digest method algorithm URI.
RMI_CLIENT_SOCKET_FACTORY_ATTRIBUTE
- Static variable in class javax.management.remote.rmi.
RMIConnectorServer
Name of the attribute that specifies the
RMIClientSocketFactory
for the RMI objects created in
 conjunction with this connector.
RMI_SERVER_SOCKET_FACTORY_ATTRIBUTE
- Static variable in class javax.management.remote.rmi.
RMIConnectorServer
Name of the attribute that specifies the
RMIServerSocketFactory
for the RMI objects created in
 conjunction with this connector.
RMIClassLoader
- Class in
java.rmi.server
RMIClassLoader
comprises static methods to support
 dynamic class loading with RMI.
RMIClassLoaderSpi
- Class in
java.rmi.server
RMIClassLoaderSpi
is the service provider interface for
RMIClassLoader
.
RMIClassLoaderSpi()
- Constructor for class java.rmi.server.
RMIClassLoaderSpi
Constructor for subclasses to call.
RMIClientSocketFactory
- Interface in
java.rmi.server
An
RMIClientSocketFactory
instance is used by the RMI runtime
 in order to obtain client sockets for RMI calls.
RMIConnection
- Interface in
javax.management.remote.rmi
RMI object used to forward an MBeanServer request from a client
 to its MBeanServer implementation on the server side.
RMIConnectionImpl
- Class in
javax.management.remote.rmi
Implementation of the
RMIConnection
interface.
RMIConnectionImpl(RMIServerImpl, String, ClassLoader, Subject, Map<String, ?>)
- Constructor for class javax.management.remote.rmi.
RMIConnectionImpl
Constructs a new
RMIConnection
.
RMIConnectionImpl_Stub
- Class in
javax.management.remote.rmi
RMIConnectionImpl remote stub.
RMIConnectionImpl_Stub(RemoteRef)
- Constructor for class javax.management.remote.rmi.
RMIConnectionImpl_Stub
Constructor.
RMIConnector
- Class in
javax.management.remote.rmi
A connection to a remote RMI connector.
RMIConnector(JMXServiceURL, Map<String, ?>)
- Constructor for class javax.management.remote.rmi.
RMIConnector
Constructs an
RMIConnector
that will connect
 the RMI connector server with the given address.
RMIConnector(RMIServer, Map<String, ?>)
- Constructor for class javax.management.remote.rmi.
RMIConnector
Constructs an
RMIConnector
using the given RMI stub.
RMIConnectorServer
- Class in
javax.management.remote.rmi
A JMX API connector server that creates RMI-based connections
 from remote clients.
RMIConnectorServer(JMXServiceURL, Map<String, ?>)
- Constructor for class javax.management.remote.rmi.
RMIConnectorServer
Makes an
RMIConnectorServer
.
RMIConnectorServer(JMXServiceURL, Map<String, ?>, MBeanServer)
- Constructor for class javax.management.remote.rmi.
RMIConnectorServer
Makes an
RMIConnectorServer
for the given MBean
 server.
RMIConnectorServer(JMXServiceURL, Map<String, ?>, RMIServerImpl, MBeanServer)
- Constructor for class javax.management.remote.rmi.
RMIConnectorServer
Makes an
RMIConnectorServer
for the given MBean
 server.
RMIFailureHandler
- Interface in
java.rmi.server
An
RMIFailureHandler
can be registered via the
RMISocketFactory.setFailureHandler
call.
RMIJRMPServerImpl
- Class in
javax.management.remote.rmi
An
RMIServer
object that is exported through JRMP and that
 creates client connections as RMI objects exported through JRMP.
RMIJRMPServerImpl(int, RMIClientSocketFactory, RMIServerSocketFactory, Map<String, ?>)
- Constructor for class javax.management.remote.rmi.
RMIJRMPServerImpl
Creates a new
RMIServer
object that will be exported
 on the given port using the given socket factories.
rmiregistry
- Search tag in module java.rmi
rmiregistry tool
RMISecurityException
- Exception Class in
java.rmi
Deprecated.
Use
SecurityException
instead.
 Application code should never directly reference this class, and
RMISecurityManager
no longer throws this subclass of
java.lang.SecurityException
.
RMISecurityException(String)
- Constructor for exception class java.rmi.
RMISecurityException
Deprecated.
no replacement
RMISecurityException(String, String)
- Constructor for exception class java.rmi.
RMISecurityException
Deprecated.
no replacement
RMISecurityManager
- Class in
java.rmi
Deprecated, for removal: This API element is subject to removal in a future version.
This class is only useful in conjunction with
the Security Manager
, which is deprecated
       and subject to removal in a future release. Consequently, this class
       is also deprecated and subject to removal. There is no replacement for
       the Security Manager or this class.
RMISecurityManager()
- Constructor for class java.rmi.
RMISecurityManager
Deprecated.
Constructs a new
RMISecurityManager
.
RMIServer
- Interface in
javax.management.remote.rmi
RMI object used to establish connections to an RMI connector.
RMIServerImpl
- Class in
javax.management.remote.rmi
An RMI object representing a connector server.
RMIServerImpl(Map<String, ?>)
- Constructor for class javax.management.remote.rmi.
RMIServerImpl
Constructs a new
RMIServerImpl
.
RMIServerImpl_Stub
- Class in
javax.management.remote.rmi
RMIServerImpl remote stub.
RMIServerImpl_Stub(RemoteRef)
- Constructor for class javax.management.remote.rmi.
RMIServerImpl_Stub
Constructor.
RMIServerSocketFactory
- Interface in
java.rmi.server
An
RMIServerSocketFactory
instance is used by the RMI runtime
 in order to obtain server sockets for RMI calls.
RMISocketFactory
- Class in
java.rmi.server
An
RMISocketFactory
instance is used by the RMI runtime
 in order to obtain client and server sockets for RMI calls.
RMISocketFactory()
- Constructor for class java.rmi.server.
RMISocketFactory
Constructs an
RMISocketFactory
.
rngs()
- Method in interface java.util.random.
RandomGenerator.JumpableGenerator
Returns an effectively unlimited stream of new pseudorandom number
 generators, each of which implements the
RandomGenerator
interface.
rngs()
- Method in interface java.util.random.
RandomGenerator.SplittableGenerator
Returns an effectively unlimited stream of new pseudorandom number
 generators, each of which implements the
RandomGenerator
interface.
rngs()
- Method in interface java.util.random.
RandomGenerator.StreamableGenerator
Returns an effectively unlimited stream of objects, each of which
 implements the
RandomGenerator
interface.
rngs(long)
- Method in interface java.util.random.
RandomGenerator.JumpableGenerator
Returns a stream producing the given
streamSize
number of new
 pseudorandom number generators, each of which implements the
RandomGenerator
interface.
rngs(long)
- Method in interface java.util.random.
RandomGenerator.SplittableGenerator
Returns a stream producing the given
streamSize
number of new
 pseudorandom number generators, each of which implements the
RandomGenerator
interface.
rngs(long)
- Method in interface java.util.random.
RandomGenerator.StreamableGenerator
Returns an effectively unlimited stream of objects, each of which
 implements the
RandomGenerator
interface.
Robot
- Class in
java.awt
This class is used to generate native system input events
 for the purposes of test automation, self-running demos, and
 other applications where control of the mouse and keyboard
 is needed.
Robot()
- Constructor for class java.awt.
Robot
Constructs a Robot object in the coordinate system of the primary screen.
Robot(GraphicsDevice)
- Constructor for class java.awt.
Robot
Creates a Robot for the given screen device.
ROC
- Enum constant in enum class java.time.chrono.
MinguoEra
The singleton instance for the current era, 'Republic of China Era',
 which has the numeric value 1.
ROL
- Static variable in class jdk.incubator.vector.
VectorOperators
Produce
rotateLeft(a,n)
.
Role
- Class in
javax.management.relation
Represents a role: includes a role name and referenced MBeans (via their
 ObjectNames).
Role(String, List<ObjectName>)
- Constructor for class javax.management.relation.
Role
Make a new Role object.
ROLE_CARDINALITY_INFINITY
- Static variable in class javax.management.relation.
RoleInfo
To specify an unlimited cardinality.
ROLE_NOT_READABLE
- Static variable in class javax.management.relation.
RoleStatus
Problem type when trying to read a non-readable attribute.
ROLE_NOT_WRITABLE
- Static variable in class javax.management.relation.
RoleStatus
Problem type when trying to update a non-writable attribute.
RoleInfo
- Class in
javax.management.relation
A RoleInfo object summarises a role in a relation type.
RoleInfo(String, String)
- Constructor for class javax.management.relation.
RoleInfo
Constructor.
RoleInfo(String, String, boolean, boolean)
- Constructor for class javax.management.relation.
RoleInfo
Constructor.
RoleInfo(String, String, boolean, boolean, int, int, String)
- Constructor for class javax.management.relation.
RoleInfo
Constructor.
RoleInfo(RoleInfo)
- Constructor for class javax.management.relation.
RoleInfo
Copy constructor.
RoleInfoNotFoundException
- Exception Class in
javax.management.relation
This exception is raised when there is no role info with given name in a
 given relation type.
RoleInfoNotFoundException()
- Constructor for exception class javax.management.relation.
RoleInfoNotFoundException
Default constructor, no message put in exception.
RoleInfoNotFoundException(String)
- Constructor for exception class javax.management.relation.
RoleInfoNotFoundException
Constructor with given message put in exception.
RoleList
- Class in
javax.management.relation
A RoleList represents a list of roles (Role objects).
RoleList()
- Constructor for class javax.management.relation.
RoleList
Constructs an empty RoleList.
RoleList(int)
- Constructor for class javax.management.relation.
RoleList
Constructs an empty RoleList with the initial capacity
 specified.
RoleList(List<Role>)
- Constructor for class javax.management.relation.
RoleList
Constructs a
RoleList
containing the elements of the
List
specified, in the order in which they are returned by
 the
List
's iterator.
RoleNotFoundException
- Exception Class in
javax.management.relation
This exception is raised when a role in a relation does not exist, or is not
 readable, or is not settable.
RoleNotFoundException()
- Constructor for exception class javax.management.relation.
RoleNotFoundException
Default constructor, no message put in exception.
RoleNotFoundException(String)
- Constructor for exception class javax.management.relation.
RoleNotFoundException
Constructor with given message put in exception.
RoleResult
- Class in
javax.management.relation
Represents the result of a multiple access to several roles of a relation
 (either for reading or writing).
RoleResult(RoleList, RoleUnresolvedList)
- Constructor for class javax.management.relation.
RoleResult
Constructor.
RoleStatus
- Class in
javax.management.relation
This class describes the various problems which can be encountered when
 accessing a role.
RoleStatus()
- Constructor for class javax.management.relation.
RoleStatus
Deprecated, for removal: This API element is subject to removal in a future version.
RoleUnresolved
- Class in
javax.management.relation
Represents an unresolved role: a role not retrieved from a relation due
 to a problem.
RoleUnresolved(String, List<ObjectName>, int)
- Constructor for class javax.management.relation.
RoleUnresolved
Constructor.
RoleUnresolvedList
- Class in
javax.management.relation
A RoleUnresolvedList represents a list of RoleUnresolved objects,
 representing roles not retrieved from a relation due to a problem
 encountered when trying to access (read or write) the roles.
RoleUnresolvedList()
- Constructor for class javax.management.relation.
RoleUnresolvedList
Constructs an empty RoleUnresolvedList.
RoleUnresolvedList(int)
- Constructor for class javax.management.relation.
RoleUnresolvedList
Constructs an empty RoleUnresolvedList with the initial capacity
 specified.
RoleUnresolvedList(List<RoleUnresolved>)
- Constructor for class javax.management.relation.
RoleUnresolvedList
Constructs a
RoleUnresolvedList
containing the elements of the
List
specified, in the order in which they are returned by
 the
List
's iterator.
roleValueToString(List<ObjectName>)
- Static method in class javax.management.relation.
Role
Returns a string for the given role value.
roll(int, boolean)
- Method in class java.util.
Calendar
Adds or subtracts (up/down) a single unit of time on the given time
 field without changing larger fields.
roll(int, boolean)
- Method in class java.util.
GregorianCalendar
Adds or subtracts (up/down) a single unit of time on the given time
 field without changing larger fields.
roll(int, int)
- Method in class java.util.
Calendar
Adds the specified (signed) amount to the specified calendar field
 without changing larger fields.
roll(int, int)
- Method in class java.util.
GregorianCalendar
Adds a signed amount to the specified calendar field without changing larger fields.
rollback()
- Method in interface java.sql.
Connection
Undoes all changes made in the current transaction
 and releases any database locks currently held
 by this
Connection
object.
rollback()
- Method in interface javax.sql.rowset.
CachedRowSet
Each
CachedRowSet
object's
SyncProvider
contains
 a
Connection
object from the original
ResultSet
or JDBC properties passed to it.
rollback()
- Method in interface javax.sql.rowset.
JdbcRowSet
Each
JdbcRowSet
contains a
Connection
object from
 the original
ResultSet
or JDBC properties passed to it.
rollback()
- Method in interface javax.sql.rowset.spi.
TransactionalWriter
Undoes all changes made in the current transaction.
rollback(Savepoint)
- Method in interface java.sql.
Connection
Undoes all changes made after the given
Savepoint
object
 was set.
rollback(Savepoint)
- Method in interface javax.sql.rowset.
CachedRowSet
Each
CachedRowSet
object's
SyncProvider
contains
 a
Connection
object from the original
ResultSet
or JDBC properties passed to it.
rollback(Savepoint)
- Method in interface javax.sql.rowset.
JdbcRowSet
Each
JdbcRowSet
contains a
Connection
object from
 the original
ResultSet
or JDBC properties passed to it.
rollback(Savepoint)
- Method in interface javax.sql.rowset.spi.
TransactionalWriter
Undoes all changes made in the current transaction made prior to the given
Savepoint
object.
rollback(Xid)
- Method in interface javax.transaction.xa.
XAResource
Informs the resource manager to roll back work done on behalf
 of a transaction branch.
ROLLBACK
- Enum constant in enum class java.awt.event.
FocusEvent.Cause
Restoring focus after a focus request has been rejected.
ROLLOVER
- Static variable in class javax.swing.
DefaultButtonModel
Identifies the "rollover" bit in the bitmask, which
 indicates that the mouse is over the button.
ROLLOVER_ENABLED_CHANGED_PROPERTY
- Static variable in class javax.swing.
AbstractButton
Identifies a change from rollover enabled to disabled or back
 to enabled.
ROLLOVER_ICON_CHANGED_PROPERTY
- Static variable in class javax.swing.
AbstractButton
Identifies a change to the icon used when the cursor is over
 the button.
ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY
- Static variable in class javax.swing.
AbstractButton
Identifies a change to the icon used when the cursor is
 over the button and it has been selected.
RolloverButtonBorder()
- Constructor for class javax.swing.plaf.metal.
MetalBorders.RolloverButtonBorder
Constructs a
RolloverButtonBorder
.
RolloverButtonBorder(Color, Color, Color, Color)
- Constructor for class javax.swing.plaf.basic.
BasicBorders.RolloverButtonBorder
Constructs a new instance of a
RolloverButtonBorder
.
rolloverColumnUpdated(int, int)
- Method in class javax.swing.plaf.basic.
BasicTableHeaderUI
This method gets called every time when a rollover column in the table
 header is updated.
rolloverListener
- Variable in class javax.swing.plaf.metal.
MetalToolBarUI
This protected field is implementation specific.
ROMAN_BASELINE
- Static variable in class java.awt.font.
GraphicAttribute
Aligns origin of graphic to roman baseline of line.
ROMAN_BASELINE
- Static variable in class java.awt.
Font
The baseline used in most Roman scripts when laying out text.
root
- Variable in class javax.swing.tree.
DefaultTreeModel
Root of the tree.
ROOT
- Static variable in class java.util.
Locale
Useful constant for the root locale.
ROOT_PANE
- Static variable in class javax.accessibility.
AccessibleRole
A specialized pane that has a glass pane and a layered pane as its
 children.
ROOT_PANE
- Static variable in class javax.swing.plaf.synth.
Region
RootPane region.
ROOT_PANE_PROPERTY
- Static variable in class javax.swing.
JInternalFrame
Bound property name.
ROOT_VISIBLE_PROPERTY
- Static variable in class javax.swing.
JTree
Bound property name for
rootVisible
.
rootException
- Variable in exception class javax.naming.
NamingException
Contains the original exception that caused this NamingException to
 be thrown.
RootLayout()
- Constructor for class javax.swing.
JRootPane.RootLayout
Constructs a
RootLayout
.
Root modules
- Search tag in package java.lang.module
Section
rootPane
- Variable in class javax.swing.
JApplet
Deprecated.
The
JRootPane
instance that manages the
contentPane
.
rootPane
- Variable in class javax.swing.
JDialog
The
JRootPane
instance that manages the
contentPane
.
rootPane
- Variable in class javax.swing.
JFrame
The
JRootPane
instance that manages the
contentPane
and optional
menuBar
for this frame, as well as the
glassPane
.
rootPane
- Variable in class javax.swing.
JInternalFrame
The
JRootPane
instance that manages the
 content pane
 and optional menu bar for this internal frame, as well as the
 glass pane.
rootPane
- Variable in class javax.swing.
JWindow
The
JRootPane
instance that manages the
contentPane
and optional
menuBar
for this frame, as well as the
glassPane
.
rootPaneCheckingEnabled
- Variable in class javax.swing.
JApplet
Deprecated.
If true then calls to
add
and
setLayout
will be forwarded to the
contentPane
.
rootPaneCheckingEnabled
- Variable in class javax.swing.
JDialog
If true then calls to
add
and
setLayout
will be forwarded to the
contentPane
.
rootPaneCheckingEnabled
- Variable in class javax.swing.
JFrame
If true then calls to
add
and
setLayout
will be forwarded to the
contentPane
.
rootPaneCheckingEnabled
- Variable in class javax.swing.
JInternalFrame
If true then calls to
add
and
setLayout
will be forwarded to the
contentPane
.
rootPaneCheckingEnabled
- Variable in class javax.swing.
JWindow
If true then calls to
add
and
setLayout
will be forwarded to the
contentPane
.
RootPaneContainer
- Interface in
javax.swing
This interface is implemented by components that have a single
 JRootPane child: JDialog, JFrame, JWindow, JApplet, JInternalFrame.
RootPaneUI
- Class in
javax.swing.plaf
Pluggable look and feel interface for JRootPane.
RootPaneUI()
- Constructor for class javax.swing.plaf.
RootPaneUI
Constructor for subclasses to call.
rootVisible
- Variable in class javax.swing.
JTree
True if the root node is displayed, false if its children are
 the highest visible nodes.
rootVisible
- Variable in class javax.swing.tree.
AbstractLayoutCache
True if the root node is displayed, false if its children are
 the highest visible nodes.
ROR
- Static variable in class jdk.incubator.vector.
VectorOperators
Produce
rotateRight(a,n)
.
rotate(double)
- Method in class java.awt.geom.
AffineTransform
Concatenates this transform with a rotation transformation.
rotate(double)
- Method in class java.awt.
Graphics2D
Concatenates the current
Graphics2D
Transform
with a rotation transform.
rotate(double, double)
- Method in class java.awt.geom.
AffineTransform
Concatenates this transform with a transform that rotates
 coordinates according to a rotation vector.
rotate(double, double, double)
- Method in class java.awt.geom.
AffineTransform
Concatenates this transform with a transform that rotates
 coordinates around an anchor point.
rotate(double, double, double)
- Method in class java.awt.
Graphics2D
Concatenates the current
Graphics2D
Transform
with a translated rotation
 transform.
rotate(double, double, double, double)
- Method in class java.awt.geom.
AffineTransform
Concatenates this transform with a transform that rotates
 coordinates around an anchor point according to a rotation
 vector.
rotate(List<?>, int)
- Static method in class java.util.
Collections
Rotates the elements in the specified list by the specified distance.
rotateInsets(Insets, Insets, int)
- Static method in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Rotates the insets.
rotateLeft(int, int)
- Static method in class java.lang.
Integer
Returns the value obtained by rotating the two's complement binary
 representation of the specified
int
value left by the
 specified number of bits.
rotateLeft(long, int)
- Static method in class java.lang.
Long
Returns the value obtained by rotating the two's complement binary
 representation of the specified
long
value left by the
 specified number of bits.
rotateRight(int, int)
- Static method in class java.lang.
Integer
Returns the value obtained by rotating the two's complement binary
 representation of the specified
int
value right by the
 specified number of bits.
rotateRight(long, int)
- Static method in class java.lang.
Long
Returns the value obtained by rotating the two's complement binary
 representation of the specified
long
value right by the
 specified number of bits.
rotateTabRuns(int, int)
- Method in class javax.swing.plaf.basic.
BasicTabbedPaneUI.TabbedPaneLayout
Rotates the run-index array so that the selected run is run[0].
round(double)
- Static method in class java.lang.
Math
Returns the closest
long
to the argument, with ties
 rounding to positive infinity.
round(double)
- Static method in class java.lang.
StrictMath
Returns the closest
long
to the argument, with ties
 rounding to positive infinity.
round(float)
- Static method in class java.lang.
Math
Returns the closest
int
to the argument, with ties
 rounding to positive infinity.
round(float)
- Static method in class java.lang.
StrictMath
Returns the closest
int
to the argument, with ties
 rounding to positive infinity.
round(MathContext)
- Method in class java.math.
BigDecimal
Returns a
BigDecimal
rounded according to the
MathContext
settings.
ROUND_CEILING
- Static variable in class java.math.
BigDecimal
Deprecated.
Use
RoundingMode.CEILING
instead.
ROUND_DOWN
- Static variable in class java.math.
BigDecimal
Deprecated.
Use
RoundingMode.DOWN
instead.
ROUND_FLOOR
- Static variable in class java.math.
BigDecimal
Deprecated.
Use
RoundingMode.FLOOR
instead.
ROUND_HALF_DOWN
- Static variable in class java.math.
BigDecimal
Deprecated.
Use
RoundingMode.HALF_DOWN
instead.
ROUND_HALF_EVEN
- Static variable in class java.math.
BigDecimal
Deprecated.
Use
RoundingMode.HALF_EVEN
instead.
ROUND_HALF_UP
- Static variable in class java.math.
BigDecimal
Deprecated.
Use
RoundingMode.HALF_UP
instead.
ROUND_UNNECESSARY
- Static variable in class java.math.
BigDecimal
Deprecated.
Use
RoundingMode.UNNECESSARY
instead.
ROUND_UP
- Static variable in class java.math.
BigDecimal
Deprecated.
Use
RoundingMode.UP
instead.
roundedCorners
- Variable in class javax.swing.border.
LineBorder
Whether or not the border has rounded corners.
RoundEnvironment
- Interface in
javax.annotation.processing
An annotation processing tool framework will
provide an annotation processor with an object
 implementing this interface
so that the processor can query for
 information about a round of annotation processing.
Rounding
- Search tag in class java.text.CompactNumberFormat
Section
Rounding
- Search tag in class java.text.DecimalFormat
Section
RoundingMode
- Enum Class in
java.math
Specifies a
rounding policy
for numerical operations capable
 of discarding precision.
RoundRectangle2D
- Class in
java.awt.geom
The
RoundRectangle2D
class defines a rectangle with
 rounded corners defined by a location
(x,y)
, a
 dimension
(w x h)
, and the width and height of an arc
 with which to round the corners.
RoundRectangle2D()
- Constructor for class java.awt.geom.
RoundRectangle2D
This is an abstract class that cannot be instantiated directly.
RoundRectangle2D.Double
- Class in
java.awt.geom
The
Double
class defines a rectangle with rounded
 corners all specified in
double
coordinates.
RoundRectangle2D.Float
- Class in
java.awt.geom
The
Float
class defines a rectangle with rounded
 corners all specified in
float
coordinates.
ROW_HEADER
- Static variable in class javax.accessibility.
AccessibleRole
The header for a row of data.
ROW_HEADER
- Static variable in interface javax.swing.
ScrollPaneConstants
Identifies the area along the left side of the viewport between the
 upper left corner and the lower left corner.
ROW_HEIGHT_PROPERTY
- Static variable in class javax.swing.
JTree
Bound property name for
rowHeight
.
rowAtPoint(Point)
- Method in class javax.swing.
JTable
Returns the index of the row that
point
lies in,
 or -1 if the result is not in the range
 [0,
getRowCount()
-1].
rowChanged(RowSetEvent)
- Method in interface javax.sql.
RowSetListener
Notifies registered listeners that a
RowSet
object
 has had a change in one of its rows.
rowDeleted()
- Method in interface java.sql.
ResultSet
Retrieves whether a row has been deleted.
RowFilter<M,
I>
- Class in
javax.swing
RowFilter
is used to filter out entries from the
 model so that they are not shown in the view.
RowFilter()
- Constructor for class javax.swing.
RowFilter
Constructor for subclasses to call.
RowFilter.ComparisonType
- Enum Class in
javax.swing
Enumeration of the possible comparison values supported by
 some of the default
RowFilter
s.
RowFilter.Entry<M,
I>
- Class in
javax.swing
An
Entry
object is passed to instances of
RowFilter
, allowing the filter to get the value of the
 entry's data, and thus to determine whether the entry should be shown.
rowHead
- Variable in class javax.swing.
ScrollPaneLayout
The row header child.
rowHeader
- Variable in class javax.swing.
JScrollPane
The row header child.
rowHeight
- Variable in class javax.swing.
JTable
The height in pixels of each row in the table.
rowHeight
- Variable in class javax.swing.
JTree
Height to use for each display row.
rowHeight
- Variable in class javax.swing.tree.
AbstractLayoutCache
Height to use for each row.
rowHeights
- Variable in class java.awt.
GridBagLayout
This field holds the overrides to the row minimum
 heights.
RowId
- Interface in
java.sql
The representation (mapping) in the Java programming language of an SQL ROWID
 value.
ROWID
- Enum constant in enum class java.sql.
JDBCType
Identifies the SQL type
ROWID
.
ROWID
- Static variable in class java.sql.
Types
The constant in the Java programming language, sometimes referred to
 as a type code, that identifies the generic SQL type
ROWID
ROWID_UNSUPPORTED
- Enum constant in enum class java.sql.
RowIdLifetime
Indicates that this data source does not support the ROWID type.
ROWID_VALID_FOREVER
- Enum constant in enum class java.sql.
RowIdLifetime
Indicates that the lifetime of a RowId from this data source is, effectively,
 unlimited.
ROWID_VALID_OTHER
- Enum constant in enum class java.sql.
RowIdLifetime
Indicates that the lifetime of a RowId from this data source is indeterminate;
 but not one of ROWID_VALID_TRANSACTION, ROWID_VALID_SESSION, or,
 ROWID_VALID_FOREVER.
ROWID_VALID_SESSION
- Enum constant in enum class java.sql.
RowIdLifetime
Indicates that the lifetime of a RowId from this data source is at least the
 containing session.
ROWID_VALID_TRANSACTION
- Enum constant in enum class java.sql.
RowIdLifetime
Indicates that the lifetime of a RowId from this data source is at least the
 containing transaction.
RowIdLifetime
- Enum Class in
java.sql
Enumeration for RowId life-time values.
rowInserted()
- Method in interface java.sql.
ResultSet
Retrieves whether the current row has had an insertion.
rowMapper
- Variable in class javax.swing.tree.
DefaultTreeSelectionModel
Provides a row for a given path.
RowMapper
- Interface in
javax.swing.tree
Defines the requirements for an object that translates paths in
 the tree into display rows.
rowMargin
- Variable in class javax.swing.
JTable
The height in pixels of the margin between the cells in each row.
ROWS
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "rows"
rowsDeleted(int, int)
- Method in class javax.swing.
DefaultRowSorter
Invoked when rows have been deleted from the underlying model
 in the specified range (inclusive).
rowsDeleted(int, int)
- Method in class javax.swing.
RowSorter
Invoked when rows have been deleted from the underlying model
 in the specified range (inclusive).
rowSelectionAllowed
- Variable in class javax.swing.
JTable
True if row selection is allowed in this table.
RowSet
- Interface in
javax.sql
The interface that adds support to the JDBC API for the
 JavaBeans component model.
ROWSET_SYNC_PROVIDER
- Static variable in class javax.sql.rowset.spi.
SyncFactory
The standard property-id for a synchronization provider implementation
 name.
ROWSET_SYNC_PROVIDER_VERSION
- Static variable in class javax.sql.rowset.spi.
SyncFactory
The standard property-id for a synchronization provider implementation
 version tag.
ROWSET_SYNC_VENDOR
- Static variable in class javax.sql.rowset.spi.
SyncFactory
The standard property-id for a synchronization provider implementation
 vendor name.
rowSetChanged(RowSetEvent)
- Method in interface javax.sql.
RowSetListener
Notifies registered listeners that a
RowSet
object
 in the given
RowSetEvent
object has changed its entire contents.
RowSetEvent
- Class in
javax.sql
An
Event
object generated when an event occurs to a
RowSet
object.
RowSetEvent(RowSet)
- Constructor for class javax.sql.
RowSetEvent
Constructs a
RowSetEvent
object initialized with the
 given
RowSet
object.
RowSetFactory
- Interface in
javax.sql.rowset
An interface that defines the implementation of a factory that is used
 to obtain different types of
RowSet
implementations.
RowSetInternal
- Interface in
javax.sql
The interface that a
RowSet
object implements in order to
 present itself to a
RowSetReader
or
RowSetWriter
object.
RowSetListener
- Interface in
javax.sql
An interface that must be implemented by a
 component that wants to be notified when a significant
 event happens in the life of a
RowSet
object.
RowSetMetaData
- Interface in
javax.sql
An object that contains information about the columns in a
RowSet
object.
RowSetMetaDataImpl
- Class in
javax.sql.rowset
Provides implementations for the methods that set and get
 metadata information about a
RowSet
object's columns.
RowSetMetaDataImpl()
- Constructor for class javax.sql.rowset.
RowSetMetaDataImpl
Constructs a
RowSetMetaDataImpl
object.
rowSetPopulated(RowSetEvent, int)
- Method in interface javax.sql.rowset.
CachedRowSet
Notifies registered listeners that a RowSet object in the given RowSetEvent
 object has populated a number of additional rows.
RowSetProvider
- Class in
javax.sql.rowset
A factory API that enables applications to obtain a
RowSetFactory
implementation  that can be used to create different
 types of
RowSet
implementations.
RowSetProvider()
- Constructor for class javax.sql.rowset.
RowSetProvider
RowSetProvider constructor
RowSetReader
- Interface in
javax.sql
The facility that a disconnected
RowSet
object calls on
 to populate itself with rows of data.
Rowsets
- Search tag in package javax.sql
Section
RowSetWarning
- Exception Class in
javax.sql.rowset
An extension of
SQLException
that provides information
 about database warnings set on
RowSet
objects.
RowSetWarning()
- Constructor for exception class javax.sql.rowset.
RowSetWarning
Constructs a default
RowSetWarning
object.
RowSetWarning(String)
- Constructor for exception class javax.sql.rowset.
RowSetWarning
Constructs a
RowSetWarning
object
 with the given value for the reason; SQLState defaults to null,
 and vendorCode defaults to 0.
RowSetWarning(String, String)
- Constructor for exception class javax.sql.rowset.
RowSetWarning
Constructs a
RowSetWarning
object initialized with the
 given values for the reason and SQLState.
RowSetWarning(String, String, int)
- Constructor for exception class javax.sql.rowset.
RowSetWarning
Constructs a fully specified
RowSetWarning
object initialized
 with the given values for the reason, SQLState and vendorCode.
RowSetWriter
- Interface in
javax.sql
An object that implements the
RowSetWriter
interface,
 called a
writer
.
rowsInserted(int, int)
- Method in class javax.swing.
DefaultRowSorter
Invoked when rows have been inserted into the underlying model
 in the specified range (inclusive).
rowsInserted(int, int)
- Method in class javax.swing.
RowSorter
Invoked when rows have been inserted into the underlying model
 in the specified range (inclusive).
RowSorter<M>
- Class in
javax.swing
RowSorter
provides the basis for sorting and filtering.
RowSorter()
- Constructor for class javax.swing.
RowSorter
Creates a
RowSorter
.
RowSorter.SortKey
- Class in
javax.swing
SortKey describes the sort order for a particular column.
RowSorterEvent
- Class in
javax.swing.event
RowSorterEvent
provides notification of changes to
 a
RowSorter
.
RowSorterEvent(RowSorter<?>)
- Constructor for class javax.swing.event.
RowSorterEvent
Creates a
RowSorterEvent
of type
SORT_ORDER_CHANGED
.
RowSorterEvent(RowSorter<?>, RowSorterEvent.Type, int[])
- Constructor for class javax.swing.event.
RowSorterEvent
Creates a
RowSorterEvent
.
RowSorterEvent.Type
- Enum Class in
javax.swing.event
Enumeration of the types of
RowSorterEvent
s.
RowSorterListener
- Interface in
javax.swing.event
RowSorterListener
s are notified of changes to a
RowSorter
.
ROWSPAN
- Static variable in class javax.swing.text.html.
HTML.Attribute
Attribute "rowspan"
rowsRemoved(TableModelEvent)
- Method in class javax.swing.table.
DefaultTableModel
Equivalent to
fireTableChanged
.
rowsUpdated(int, int)
- Method in class javax.swing.
DefaultRowSorter
Invoked when rows have been changed in the underlying model
 between the specified range (inclusive).
rowsUpdated(int, int)
- Method in class javax.swing.
RowSorter
Invoked when rows have been changed in the underlying model
 between the specified range (inclusive).
rowsUpdated(int, int, int)
- Method in class javax.swing.
DefaultRowSorter
Invoked when the column in the rows have been updated in
 the underlying model between the specified range.
rowsUpdated(int, int, int)
- Method in class javax.swing.
RowSorter
Invoked when the column in the rows have been updated in
 the underlying model between the specified range.
rowUpdated()
- Method in interface java.sql.
ResultSet
Retrieves whether the current row has been updated.
rowWeights
- Variable in class java.awt.
GridBagLayout
This field holds the overrides to the row weights.
RSA_PSS
- Static variable in interface javax.xml.crypto.dsig.
SignatureMethod
The
RSASSA-PSS
signature method algorithm URI.
RSA_SHA1
- Static variable in interface javax.xml.crypto.dsig.
SignatureMethod
The
RSA-SHA1
(PKCS #1) signature method algorithm URI.
RSA_SHA224
- Static variable in interface javax.xml.crypto.dsig.
SignatureMethod
The
RSA-SHA224
(PKCS #1) signature method algorithm URI.
RSA_SHA256
- Static variable in interface javax.xml.crypto.dsig.
SignatureMethod
The
RSA-SHA256
(PKCS #1) signature method algorithm URI.
RSA_SHA384
- Static variable in interface javax.xml.crypto.dsig.
SignatureMethod
The
RSA-SHA384
(PKCS #1) signature method algorithm URI.
RSA_SHA512
- Static variable in interface javax.xml.crypto.dsig.
SignatureMethod
The
RSA-SHA512
(PKCS #1) signature method algorithm URI.
RSA_TYPE
- Static variable in interface javax.xml.crypto.dsig.keyinfo.
KeyValue
URI identifying the RSA KeyValue KeyInfo type:
 http://www.w3.org/2000/09/xmldsig#RSAKeyValue.
RSAKey
- Interface in
java.security.interfaces
The interface to a public or private key in
PKCS#1 v2.2
standard,
 such as those for RSA, or RSASSA-PSS algorithms.
RSAKeyGenParameterSpec
- Class in
java.security.spec
This class specifies the set of parameters used to generate an RSA
 key pair.
RSAKeyGenParameterSpec(int, BigInteger)
- Constructor for class java.security.spec.
RSAKeyGenParameterSpec
Constructs a new
RSAKeyGenParameterSpec
object from the
 given keysize, public-exponent value, and null key parameters.
RSAKeyGenParameterSpec(int, BigInteger, AlgorithmParameterSpec)
- Constructor for class java.security.spec.
RSAKeyGenParameterSpec
Constructs a new
RSAKeyGenParameterSpec
object from the
 given keysize, public-exponent value, and key parameters.
RSAMultiPrimePrivateCrtKey
- Interface in
java.security.interfaces
The interface to an RSA multi-prime private key, as defined in the
PKCS#1 v2.2
standard,
 using the
Chinese Remainder Theorem
(CRT) information values.
RSAMultiPrimePrivateCrtKeySpec
- Class in
java.security.spec
This class specifies an RSA multi-prime private key, as defined in the
PKCS#1 v2.2
standard
 using the Chinese Remainder Theorem (CRT) information values
 for efficiency.
RSAMultiPrimePrivateCrtKeySpec(BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, RSAOtherPrimeInfo[])
- Constructor for class java.security.spec.
RSAMultiPrimePrivateCrtKeySpec
Creates a new
RSAMultiPrimePrivateCrtKeySpec
.
RSAMultiPrimePrivateCrtKeySpec(BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, RSAOtherPrimeInfo[], AlgorithmParameterSpec)
- Constructor for class java.security.spec.
RSAMultiPrimePrivateCrtKeySpec
Creates a new
RSAMultiPrimePrivateCrtKeySpec
with additional
 key parameters.
RSAOtherPrimeInfo
- Class in
java.security.spec
This class represents the triplet (prime, exponent, and coefficient)
 inside RSA's OtherPrimeInfo structure, as defined in the
PKCS#1 v2.2
standard.
RSAOtherPrimeInfo(BigInteger, BigInteger, BigInteger)
- Constructor for class java.security.spec.
RSAOtherPrimeInfo
Creates a new
RSAOtherPrimeInfo
given the prime, primeExponent, and
 crtCoefficient as defined in PKCS#1.
RSAPrivateCrtKey
- Interface in
java.security.interfaces
The interface to an RSA private key, as defined in the
PKCS#1 v2.2
standard,
 using the
Chinese Remainder Theorem
(CRT) information values.
RSAPrivateCrtKeySpec
- Class in
java.security.spec
This class specifies an RSA private key, as defined in the
PKCS#1 v2.2
standard,
 using the Chinese Remainder Theorem (CRT) information values for efficiency.
RSAPrivateCrtKeySpec(BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger)
- Constructor for class java.security.spec.
RSAPrivateCrtKeySpec
Creates a new
RSAPrivateCrtKeySpec
.
RSAPrivateCrtKeySpec(BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, AlgorithmParameterSpec)
- Constructor for class java.security.spec.
RSAPrivateCrtKeySpec
Creates a new
RSAPrivateCrtKeySpec
with additional
 key parameters.
RSAPrivateKey
- Interface in
java.security.interfaces
The interface to an RSA private key.
RSAPrivateKeySpec
- Class in
java.security.spec
This class specifies an RSA private key.
RSAPrivateKeySpec(BigInteger, BigInteger)
- Constructor for class java.security.spec.
RSAPrivateKeySpec
Creates a new RSAPrivateKeySpec.
RSAPrivateKeySpec(BigInteger, BigInteger, AlgorithmParameterSpec)
- Constructor for class java.security.spec.
RSAPrivateKeySpec
Creates a new RSAPrivateKeySpec with additional key parameters.
RSAPSSParameterSpec
- Class in
javax.xml.crypto.dsig.spec
Parameters for the
XML Signature RSASSA-PSS Algorithm
.
RSAPSSParameterSpec(PSSParameterSpec)
- Constructor for class javax.xml.crypto.dsig.spec.
RSAPSSParameterSpec
Creates a new
RSAPSSParameterSpec
object with the specified
PSSParameterSpec
object.
RSAPublicKey
- Interface in
java.security.interfaces
The interface to an RSA public key.
RSAPublicKeySpec
- Class in
java.security.spec
This class specifies an RSA public key.
RSAPublicKeySpec(BigInteger, BigInteger)
- Constructor for class java.security.spec.
RSAPublicKeySpec
Creates a new RSAPublicKeySpec.
RSAPublicKeySpec(BigInteger, BigInteger, AlgorithmParameterSpec)
- Constructor for class java.security.spec.
RSAPublicKeySpec
Creates a new RSAPublicKeySpec with additional key parameters.
RTFEditorKit
- Class in
javax.swing.text.rtf
This is the default implementation of RTF editing
 functionality.
RTFEditorKit()
- Constructor for class javax.swing.text.rtf.
RTFEditorKit
Constructs an RTFEditorKit.
RULE
- Enum constant in enum class com.sun.source.tree.
CaseTree.CaseKind
Case is in the form:
case <expression> -> <expression>
.
RuleBasedCollator
- Class in
java.text
The
RuleBasedCollator
class is a concrete subclass of
Collator
that provides a simple, data-driven, table
 collator.
RuleBasedCollator(String)
- Constructor for class java.text.
RuleBasedCollator
RuleBasedCollator constructor.
RULER
- Static variable in class javax.accessibility.
AccessibleRole
A ruler is an object used to measure distance.
RUMI_NUMERAL_SYMBOLS
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Rumi Numeral Symbols" Unicode character block.
run()
- Method in class java.awt.image.renderable.
RenderableImageProducer
The runnable method for this class.
run()
- Method in interface java.lang.
Runnable
Runs this operation.
run()
- Method in class java.lang.
Thread
This method is run by the thread when it executes.
run()
- Method in interface java.security.
PrivilegedAction
Performs the computation.
run()
- Method in interface java.security.
PrivilegedExceptionAction
Performs the computation.
run()
- Method in class java.util.concurrent.
ForkJoinWorkerThread
This method is required to be public, but should never be
 called explicitly.
run()
- Method in class java.util.concurrent.
FutureTask
run()
- Method in interface java.util.concurrent.
RunnableFuture
Sets this Future to the result of its computation
 unless it has been cancelled.
run()
- Method in class java.util.
TimerTask
The action to be performed by this timer task.
run()
- Method in class javax.swing.
SwingWorker
Sets this
Future
to the result of computation unless
 it has been cancelled.
run()
- Method in class javax.swing.text.
AsyncBoxView.ChildState
Update the child state.
run(InputStream, OutputStream, OutputStream, String...)
- Method in interface javax.tools.
Tool
Run the tool with the given I/O channels and arguments.
run(PrintStream, PrintStream, String...)
- Method in interface java.util.spi.
ToolProvider
Runs an instance of the tool, returning zero for a successful run.
run(PrintWriter, PrintWriter, String...)
- Method in interface java.util.spi.
ToolProvider
Runs an instance of the tool, returning zero for a successful run.
run(Runnable)
- Method in class java.lang.
ScopedValue.Carrier
PREVIEW
Runs an operation with each scoped value in this mapping bound to its value
 in the current thread.
run(String...)
- Method in interface jdk.jshell.tool.
JavaShellToolBuilder
Run an instance of the Java shell tool as configured by the other methods
 in this interface.
run(DocletEnvironment)
- Method in interface jdk.javadoc.doclet.
Doclet
The entry point of the doclet.
run(DocletEnvironment)
- Method in class jdk.javadoc.doclet.
StandardDoclet
RUN_DIRECTION
- Static variable in class java.awt.font.
TextAttribute
Attribute key for the run direction of the line.
RUN_DIRECTION_LTR
- Static variable in class java.awt.font.
TextAttribute
Left-to-right run direction.
RUN_DIRECTION_RTL
- Static variable in class java.awt.font.
TextAttribute
Right-to-left run direction.
runAfterBoth(CompletionStage<?>, Runnable)
- Method in class java.util.concurrent.
CompletableFuture
runAfterBoth(CompletionStage<?>, Runnable)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when this and the other
 given stage both complete normally, executes the given action.
runAfterBothAsync(CompletionStage<?>, Runnable)
- Method in class java.util.concurrent.
CompletableFuture
runAfterBothAsync(CompletionStage<?>, Runnable)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when this and the other
 given stage both complete normally, executes the given action
 using this stage's default asynchronous execution facility.
runAfterBothAsync(CompletionStage<?>, Runnable, Executor)
- Method in class java.util.concurrent.
CompletableFuture
runAfterBothAsync(CompletionStage<?>, Runnable, Executor)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when this and the other
 given stage both complete normally, executes the given action
 using the supplied executor.
runAfterEither(CompletionStage<?>, Runnable)
- Method in class java.util.concurrent.
CompletableFuture
runAfterEither(CompletionStage<?>, Runnable)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when either this or the
 other given stage complete normally, executes the given action.
runAfterEitherAsync(CompletionStage<?>, Runnable)
- Method in class java.util.concurrent.
CompletableFuture
runAfterEitherAsync(CompletionStage<?>, Runnable)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when either this or the
 other given stage complete normally, executes the given action
 using this stage's default asynchronous execution facility.
runAfterEitherAsync(CompletionStage<?>, Runnable, Executor)
- Method in class java.util.concurrent.
CompletableFuture
runAfterEitherAsync(CompletionStage<?>, Runnable, Executor)
- Method in interface java.util.concurrent.
CompletionStage
Returns a new CompletionStage that, when either this or the
 other given stage complete normally, executes the given action
 using the supplied executor.
runAndReset()
- Method in class java.util.concurrent.
FutureTask
Executes the computation without setting its result, and then
 resets this future to initial state, failing to do so if the
 computation encounters an exception or is cancelled.
runAsync(Runnable)
- Static method in class java.util.concurrent.
CompletableFuture
Returns a new CompletableFuture that is asynchronously completed
 by a task running in the
ForkJoinPool.commonPool()
after
 it runs the given action.
runAsync(Runnable, Executor)
- Static method in class java.util.concurrent.
CompletableFuture
Returns a new CompletableFuture that is asynchronously completed
 by a task running in the given executor after it runs the given
 action.
runCount
- Variable in class javax.swing.plaf.basic.
BasicTabbedPaneUI
Run count
RunElement(Element, AttributeSet, int, int)
- Constructor for class javax.swing.text.html.
HTMLDocument.RunElement
Constructs an element that represents content within the
 document (has no children).
runFinalization()
- Method in class java.lang.
Runtime
Deprecated, for removal: This API element is subject to removal in a future version.
Finalization has been deprecated for removal.  See
Object.finalize()
for background information and details
 about migration options.
When running in a JVM in which finalization has been disabled or removed,
 no objects will be pending finalization, so this method does nothing.
runFinalization()
- Static method in class java.lang.
System
Deprecated, for removal: This API element is subject to removal in a future version.
Finalization has been deprecated for removal.  See
Object.finalize()
for background information and details
 about migration options.
When running in a JVM in which finalization has been disabled or removed,
 no objects will be pending finalization, so this method does nothing.
RUNIC
- Enum constant in enum class java.lang.
Character.UnicodeScript
Unicode script "Runic".
RUNIC
- Static variable in class java.lang.
Character.UnicodeBlock
Constant for the "Runic" Unicode character block.
runnable
- Variable in class java.awt.event.
InvocationEvent
The Runnable whose run() method will be called.
Runnable
- Interface in
java.lang
Represents an operation that does not return a result.
RUNNABLE
- Enum constant in enum class java.lang.
Thread.State
Thread state for a runnable thread.
RunnableFuture<V>
- Interface in
java.util.concurrent
A
Future
that is
Runnable
.
RunnableScheduledFuture<V>
- Interface in
java.util.concurrent
A
ScheduledFuture
that is
Runnable
.
RUNNING
- Enum constant in enum class java.util.concurrent.
Future.State
The task has not completed.
RUNNING
- Enum constant in enum class jdk.jfr.
RecordingState
The recording is recording data and an invocation of the
Recording.stop()
method will transition the recording to the
STOPPED
state.
Runtime
- Class in
java.lang
Every Java application has a single instance of class
Runtime
that allows the application to interface with
 the environment in which the application is running.
RUNTIME
- Enum constant in enum class java.lang.annotation.
RetentionPolicy
Annotations are to be recorded in the class file by the compiler and
 retained by the VM at run time, so they may be read reflectively.
RUNTIME_ERROR
- Static variable in class javax.management.monitor.
MonitorNotification
Notification type denoting that a non-predefined error type has occurred when trying to get the value of the observed attribute.
RUNTIME_ERROR_NOTIFIED
- Static variable in class javax.management.monitor.
Monitor
Flag denoting that a notification has occurred after changing
 the observed object or the observed attribute.
RUNTIME_MXBEAN_NAME
- Static variable in class java.lang.management.
ManagementFactory
String representation of the
ObjectName
for the
RuntimeMXBean
.
Runtime.Version
- Class in
java.lang
A representation of a version string for an implementation of the
 Java SE Platform.
Run-time Built-in Class Loaders
- Search tag in class java.lang.ClassLoader
Section
RuntimeErrorException
- Exception Class in
javax.management
When a
java.lang.Error
occurs in the agent it should be caught and
 re-thrown as a
RuntimeErrorException
.
RuntimeErrorException(Error)
- Constructor for exception class javax.management.
RuntimeErrorException
Default constructor.
RuntimeErrorException(Error, String)
- Constructor for exception class javax.management.
RuntimeErrorException
Constructor that allows a specific error message to be specified.
RuntimeException
- Exception Class in
java.lang
RuntimeException
is the superclass of those
 exceptions that can be thrown during the normal operation of the
 Java Virtual Machine.
RuntimeException()
- Constructor for exception class java.lang.
RuntimeException
Constructs a new runtime exception with
null
as its
 detail message.
RuntimeException(String)
- Constructor for exception class java.lang.
RuntimeException
Constructs a new runtime exception with the specified detail message.
RuntimeException(String, Throwable)
- Constructor for exception class java.lang.
RuntimeException
Constructs a new runtime exception with the specified detail message and
 cause.
RuntimeException(String, Throwable, boolean, boolean)
- Constructor for exception class java.lang.
RuntimeException
Constructs a new runtime exception with the specified detail
 message, cause, suppression enabled or disabled, and writable
 stack trace enabled or disabled.
RuntimeException(Throwable)
- Constructor for exception class java.lang.
RuntimeException
Constructs a new runtime exception with the specified cause and a
 detail message of
(cause==null ? null : cause.toString())
(which typically contains the class and detail message of
cause
).
RuntimeMBeanException
- Exception Class in
javax.management
Represents runtime exceptions thrown by MBean methods in
 the agent.
RuntimeMBeanException(RuntimeException)
- Constructor for exception class javax.management.
RuntimeMBeanException
Creates a
RuntimeMBeanException
that wraps the actual
java.lang.RuntimeException
.
RuntimeMBeanException(RuntimeException, String)
- Constructor for exception class javax.management.
RuntimeMBeanException
Creates a
RuntimeMBeanException
that wraps the actual
java.lang.RuntimeException
with
 a detailed message.
RuntimeMXBean
- Interface in
java.lang.management
The management interface for the runtime system of
 the Java virtual machine.
RuntimeOperationsException
- Exception Class in
javax.management
Represents runtime exceptions thrown in the agent when performing operations on MBeans.
RuntimeOperationsException(RuntimeException)
- Constructor for exception class javax.management.
RuntimeOperationsException
Creates a
RuntimeOperationsException
that wraps the actual
java.lang.RuntimeException
.
RuntimeOperationsException(RuntimeException, String)
- Constructor for exception class javax.management.
RuntimeOperationsException
Creates a
RuntimeOperationsException
that wraps the actual
java.lang.RuntimeException
with a detailed message.
RuntimePermission
- Class in
java.lang
This class is for runtime permissions.
RuntimePermission(String)
- Constructor for class java.lang.
RuntimePermission
Creates a new RuntimePermission with the specified name.
RuntimePermission(String, String)
- Constructor for class java.lang.
RuntimePermission
Creates a new RuntimePermission object with the specified name.
runtimeVersion()
- Method in enum class java.lang.reflect.
ClassFileFormatVersion
Returns the least runtime version that supports this class
 file format version; otherwise
null
.
runtimeVersion()
- Static method in class java.util.jar.
JarFile
Returns the version that represents the effective runtime versioned
 configuration of a multi-release jar file.
runtimeVersion()
- Method in enum class javax.lang.model.
SourceVersion
Returns the least runtime version that supports this source
 version; otherwise
null
.
runWhere(ScopedValue<T>, T, Runnable)
- Static method in class java.lang.
ScopedValue
PREVIEW
Run an operation with a
ScopedValue
bound to a value in the current
 thread.
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
_
All Classes and Interfaces
|
All Packages
|
Constant Field Values
|
Serialized Form
|
System Properties
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.