XAResource (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field
|
Constr |
Method
Detail:
Field
|
Constr |
Method
SEARCH
Module
java.transaction.xa
Package
javax.transaction.xa
Interface XAResource
public interface
XAResource
The XAResource interface is a Java mapping of the industry standard
 XA interface based on the X/Open CAE Specification (Distributed
 Transaction Processing: The XA Specification).
The XA interface defines the contract between a Resource Manager
 and a Transaction Manager in a distributed transaction processing
 (DTP) environment. A JDBC driver or a JMS provider implements
 this interface to support the association between a global transaction
 and a database or message service connection.
The XAResource interface can be supported by any transactional
 resource that is intended to be used by application programs in an
 environment where transactions are controlled by an external
 transaction manager. An example of such a resource is a database
 management system. An application may access data through multiple
 database connections. Each database connection is enlisted with
 the transaction manager as a transactional resource. The transaction
 manager obtains an XAResource for each connection participating
 in a global transaction. The transaction manager uses the
start
method
 to associate the global transaction with the resource, and it uses the
end
method to disassociate the transaction from
 the resource. The resource
 manager is responsible for associating the global transaction to all
 work performed on its data between the start and end method invocations.
At transaction commit time, the resource managers are informed by
 the transaction manager to prepare, commit, or rollback a transaction
 according to the two-phase commit protocol.
Since:
1.4
Field Summary
Fields
Modifier and Type
Field
Description
static final int
TMENDRSCAN
Ends a recovery scan.
static final int
TMFAIL
Disassociates the caller and marks the transaction branch
 rollback-only.
static final int
TMJOIN
Caller is joining existing transaction branch.
static final int
TMNOFLAGS
Use TMNOFLAGS to indicate no flags value is selected.
static final int
TMONEPHASE
Caller is using one-phase optimization.
static final int
TMRESUME
Caller is resuming association with a suspended
 transaction branch.
static final int
TMSTARTRSCAN
Starts a recovery scan.
static final int
TMSUCCESS
Disassociates caller from a transaction branch.
static final int
TMSUSPEND
Caller is suspending (not ending) its association with
 a transaction branch.
static final int
XA_OK
The transaction work has been prepared normally.
static final int
XA_RDONLY
The transaction branch has been read-only and has been committed.
Method Summary
All Methods
Instance Methods
Abstract Methods
Modifier and Type
Method
Description
void
commit
(
Xid
xid,
 boolean onePhase)
Commits the global transaction specified by xid.
void
end
(
Xid
xid,
 int flags)
Ends the work performed on behalf of a transaction branch.
void
forget
(
Xid
xid)
Tells the resource manager to forget about a heuristically
 completed transaction branch.
int
getTransactionTimeout
()
Obtains the current transaction timeout value set for this
 XAResource instance.
boolean
isSameRM
(
XAResource
xares)
This method is called to determine if the resource manager
 instance represented by the target object is the same as the
 resource manager instance represented by the parameter
xares
.
int
prepare
(
Xid
xid)
Ask the resource manager to prepare for a transaction commit
 of the transaction specified in xid.
Xid
[]
recover
(int flag)
Obtains a list of prepared transaction branches from a resource
 manager.
void
rollback
(
Xid
xid)
Informs the resource manager to roll back work done on behalf
 of a transaction branch.
boolean
setTransactionTimeout
(int seconds)
Sets the current transaction timeout value for this
XAResource
instance.
void
start
(
Xid
xid,
 int flags)
Starts work on behalf of a transaction branch specified in
xid
.
Field Details
TMENDRSCAN
static final
int
TMENDRSCAN
Ends a recovery scan.
See Also:
Constant Field Values
TMFAIL
static final
int
TMFAIL
Disassociates the caller and marks the transaction branch
 rollback-only.
See Also:
Constant Field Values
TMJOIN
static final
int
TMJOIN
Caller is joining existing transaction branch.
See Also:
Constant Field Values
TMNOFLAGS
static final
int
TMNOFLAGS
Use TMNOFLAGS to indicate no flags value is selected.
See Also:
Constant Field Values
TMONEPHASE
static final
int
TMONEPHASE
Caller is using one-phase optimization.
See Also:
Constant Field Values
TMRESUME
static final
int
TMRESUME
Caller is resuming association with a suspended
 transaction branch.
See Also:
Constant Field Values
TMSTARTRSCAN
static final
int
TMSTARTRSCAN
Starts a recovery scan.
See Also:
Constant Field Values
TMSUCCESS
static final
int
TMSUCCESS
Disassociates caller from a transaction branch.
See Also:
Constant Field Values
TMSUSPEND
static final
int
TMSUSPEND
Caller is suspending (not ending) its association with
 a transaction branch.
See Also:
Constant Field Values
XA_RDONLY
static final
int
XA_RDONLY
The transaction branch has been read-only and has been committed.
See Also:
Constant Field Values
XA_OK
static final
int
XA_OK
The transaction work has been prepared normally.
See Also:
Constant Field Values
Method Details
commit
void
commit
(
Xid
xid,
 boolean onePhase)
throws
XAException
Commits the global transaction specified by xid.
Parameters:
xid
- A global transaction identifier
onePhase
- If true, the resource manager should use a one-phase
 commit protocol to commit the work done on behalf of xid.
Throws:
XAException
- An error has occurred. Possible XAExceptions
 are XA_HEURHAZ, XA_HEURCOM, XA_HEURRB, XA_HEURMIX, XAER_RMERR,
 XAER_RMFAIL, XAER_NOTA, XAER_INVAL, or XAER_PROTO.
If the resource manager did not commit the transaction and the
  paramether onePhase is set to true, the resource manager may throw
  one of the XA_RB* exceptions. Upon return, the resource manager has
  rolled back the branch's work and has released all held resources.
end
void
end
(
Xid
xid,
 int flags)
throws
XAException
Ends the work performed on behalf of a transaction branch.
 The resource manager disassociates the XA resource from the
 transaction branch specified and lets the transaction
 complete.
If TMSUSPEND is specified in the flags, the transaction branch
 is temporarily suspended in an incomplete state. The transaction
 context is in a suspended state and must be resumed via the
start
method with TMRESUME specified.
If TMFAIL is specified, the portion of work has failed.
 The resource manager may mark the transaction as rollback-only
If TMSUCCESS is specified, the portion of work has completed
 successfully.
Parameters:
xid
- A global transaction identifier that is the same as
 the identifier used previously in the
start
method.
flags
- One of TMSUCCESS, TMFAIL, or TMSUSPEND.
Throws:
XAException
- An error has occurred. Possible XAException
 values are XAER_RMERR, XAER_RMFAILED, XAER_NOTA, XAER_INVAL,
 XAER_PROTO, or XA_RB*.
forget
void
forget
(
Xid
xid)
throws
XAException
Tells the resource manager to forget about a heuristically
 completed transaction branch.
Parameters:
xid
- A global transaction identifier.
Throws:
XAException
- An error has occurred. Possible exception
 values are XAER_RMERR, XAER_RMFAIL, XAER_NOTA, XAER_INVAL, or
 XAER_PROTO.
getTransactionTimeout
int
getTransactionTimeout
()
                   throws
XAException
Obtains the current transaction timeout value set for this
 XAResource instance. If
XAResource.setTransactionTimeout
was not used prior to invoking this method, the return value
 is the default timeout set for the resource manager; otherwise,
 the value used in the previous
setTransactionTimeout
call is returned.
Returns:
the transaction timeout value in seconds.
Throws:
XAException
- An error has occurred. Possible exception
 values are XAER_RMERR and XAER_RMFAIL.
isSameRM
boolean
isSameRM
(
XAResource
xares)
throws
XAException
This method is called to determine if the resource manager
 instance represented by the target object is the same as the
 resource manager instance represented by the parameter
xares
.
Parameters:
xares
- An XAResource object whose resource manager instance
      is to be compared with the resource manager instance of the
      target object.
Returns:
true
if it's the same RM instance; otherwise
false
.
Throws:
XAException
- An error has occurred. Possible exception
 values are XAER_RMERR and XAER_RMFAIL.
prepare
int
prepare
(
Xid
xid)
throws
XAException
Ask the resource manager to prepare for a transaction commit
 of the transaction specified in xid.
Parameters:
xid
- A global transaction identifier.
Returns:
A value indicating the resource manager's vote on the
 outcome of the transaction. The possible values are: XA_RDONLY
 or XA_OK. If the resource manager wants to roll back the
 transaction, it should do so by raising an appropriate XAException
 in the prepare method.
Throws:
XAException
- An error has occurred. Possible exception
 values are: XA_RB*, XAER_RMERR, XAER_RMFAIL, XAER_NOTA, XAER_INVAL,
 or XAER_PROTO.
recover
Xid
[]
recover
(int flag)
throws
XAException
Obtains a list of prepared transaction branches from a resource
 manager. The transaction manager calls this method during recovery
 to obtain the list of transaction branches that are currently in
 prepared or heuristically completed states.
Parameters:
flag
- One of TMSTARTRSCAN, TMENDRSCAN, TMNOFLAGS. TMNOFLAGS
 must be used when no other flags are set in the parameter.
Returns:
The resource manager returns zero or more XIDs of the
 transaction branches that are currently in a prepared or
 heuristically completed state. If an error occurs during the
 operation, the resource manager should throw the appropriate
 XAException.
Throws:
XAException
- An error has occurred. Possible values are
 XAER_RMERR, XAER_RMFAIL, XAER_INVAL, and XAER_PROTO.
rollback
void
rollback
(
Xid
xid)
throws
XAException
Informs the resource manager to roll back work done on behalf
 of a transaction branch.
Parameters:
xid
- A global transaction identifier.
Throws:
XAException
- An error has occurred.
setTransactionTimeout
boolean
setTransactionTimeout
(int seconds)
throws
XAException
Sets the current transaction timeout value for this
XAResource
instance. Once set, this timeout value is effective until
setTransactionTimeout
is invoked again with a different
 value. To reset the timeout value to the default value used by the resource
 manager, set the value to zero.

 If the timeout operation is performed successfully, the method returns
true
; otherwise
false
. If a resource manager does not
 support explicitly setting the transaction timeout value, this method
 returns
false
.
Parameters:
seconds
- The transaction timeout value in seconds.
Returns:
true
if the transaction timeout value is set successfully;
       otherwise
false
.
Throws:
XAException
- An error has occurred. Possible exception values
 are XAER_RMERR, XAER_RMFAIL, or XAER_INVAL.
start
void
start
(
Xid
xid,
 int flags)
throws
XAException
Starts work on behalf of a transaction branch specified in
xid
.

 If TMJOIN is specified, the start applies to joining a transaction
 previously seen by the resource manager. If TMRESUME is specified,
 the start applies to resuming a suspended transaction specified in the
 parameter
xid
.

 If neither TMJOIN nor TMRESUME is specified and the transaction
 specified by
xid
has previously been seen by the resource
 manager, the resource manager throws the XAException exception with
 XAER_DUPID error code.
Parameters:
xid
- A global transaction identifier to be associated
 with the resource.
flags
- One of TMNOFLAGS, TMJOIN, or TMRESUME.
Throws:
XAException
- An error has occurred. Possible exceptions
 are XA_RB*, XAER_RMERR, XAER_RMFAIL, XAER_DUPID, XAER_OUTSIDE,
 XAER_NOTA, XAER_INVAL, or XAER_PROTO.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.