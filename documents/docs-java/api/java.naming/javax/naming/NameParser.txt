NameParser (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field |
Constr |
Method
Detail:
Field |
Constr |
Method
SEARCH
Module
java.naming
Package
javax.naming
Interface NameParser
public interface
NameParser
This interface is used for parsing names from a hierarchical
 namespace.  The NameParser contains knowledge of the syntactic
 information (like left-to-right orientation, name separator, etc.)
 needed to parse names.

 The equals() method, when used to compare two NameParsers, returns
 true if and only if they serve the same namespace.
Since:
1.3
See Also:
CompoundName
Name
Method Summary
All Methods
Instance Methods
Abstract Methods
Modifier and Type
Method
Description
Name
parse
(
String
name)
Parses a name into its components.
Method Details
parse
Name
parse
(
String
name)
throws
NamingException
Parses a name into its components.
Parameters:
name
- The non-null string name to parse.
Returns:
A non-null parsed form of the name using the naming convention
 of this parser.
Throws:
InvalidNameException
- If name does not conform to
     syntax defined for the namespace.
NamingException
- If a naming exception was encountered.
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.