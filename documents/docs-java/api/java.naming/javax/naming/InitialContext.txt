InitialContext (Java SE 21 & JDK 21)
JavaScript is disabled on your browser.
Skip navigation links
Java SE 21 & JDK 21
Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help
Summary:
Nested
Field
Constr
Method
Detail:
Field
Constr
Method
Summary:
Nested |
Field
|
Constr
|
Method
Detail:
Field
|
Constr
|
Method
SEARCH
Module
java.naming
Package
javax.naming
Class InitialContext
java.lang.Object
javax.naming.InitialContext
All Implemented Interfaces:
Context
Direct Known Subclasses:
InitialDirContext
public class
InitialContext
extends
Object
implements
Context
This class is the starting context for performing naming operations.
All naming operations are relative to a context.
 The initial context implements the Context interface and
 provides the starting point for resolution of names.
When the initial context is constructed, its environment
 is initialized with properties defined in the environment parameter
 passed to the constructor, and in any
application resource files
.
JNDI determines each property's value by merging
 the values from the following two sources, in order:
The first occurrence of the property from the constructor's
 environment parameter and system properties.
The application resource files (
jndi.properties
).
For each property found in both of these two sources, or in
 more than one application resource file, the property's value
 is determined as follows.  If the property is
 one of the standard JNDI properties that specify a list of JNDI
 factories (see
Context
),
 all of the values are
 concatenated into a single colon-separated list.  For other
 properties, only the first value found is used.
The initial context implementation is determined at runtime.
 The default policy uses the environment property
 "
java.naming.factory.initial
",
 which contains the class name of the initial context factory.
 An exception to this policy is made when resolving URL strings, as described
 below.
When a URL string (a
String
of the form
scheme_id:rest_of_name
) is passed as a name parameter to
 any method, a URL context factory for handling that scheme is
 located and used to resolve the URL.  If no such factory is found,
 the initial context specified by
"java.naming.factory.initial"
is used.  Similarly, when a
CompositeName
object whose first component is a URL string is
 passed as a name parameter to any method, a URL context factory is
 located and used to resolve the first name component.
 See
NamingManager.getURLContext()
for a description of how URL
 context factories are located.
This default policy of locating the initial context and URL context
 factories may be overridden
 by calling
NamingManager.setInitialContextFactoryBuilder()
.
NoInitialContextException is thrown when an initial context cannot
 be instantiated. This exception can be thrown during any interaction
 with the InitialContext, not only when the InitialContext is constructed.
 For example, the implementation of the initial context might lazily
 retrieve the context only when actual methods are invoked on it.
 The application should not have any dependency on when the existence
 of an initial context is determined.
When the environment property "java.naming.factory.initial" is
 non-null, the InitialContext constructor will attempt to create the
 initial context specified therein. At that time, the initial context factory
 involved might throw an exception if a problem is encountered. However,
 it is provider implementation-dependent when it verifies and indicates
 to the users of the initial context any environment property- or
 connection- related problems. It can do so lazily--delaying until
 an operation is performed on the context, or eagerly, at the time
 the context is constructed.
An InitialContext instance is not synchronized against concurrent
 access by multiple threads. Multiple threads each manipulating a
 different InitialContext instance need not synchronize.
 Threads that need to access a single InitialContext instance
 concurrently should synchronize amongst themselves and provide the
 necessary locking.
Since:
1.3, JNDI 1.1
See Also:
Context
NamingManager.setInitialContextFactoryBuilder
Field Summary
Fields
Modifier and Type
Field
Description
protected
Context
defaultInitCtx
Field holding the result of calling NamingManager.getInitialContext().
protected boolean
gotDefault
Field indicating whether the initial context has been obtained
 by calling NamingManager.getInitialContext().
protected
Hashtable
<
Object
,
Object
>
myProps
The environment associated with this InitialContext.
Fields declared in interface javax.naming.
Context
APPLET
,
AUTHORITATIVE
,
BATCHSIZE
,
DNS_URL
,
INITIAL_CONTEXT_FACTORY
,
LANGUAGE
,
OBJECT_FACTORIES
,
PROVIDER_URL
,
REFERRAL
,
SECURITY_AUTHENTICATION
,
SECURITY_CREDENTIALS
,
SECURITY_PRINCIPAL
,
SECURITY_PROTOCOL
,
STATE_FACTORIES
,
URL_PKG_PREFIXES
Constructor Summary
Constructors
Modifier
Constructor
Description
InitialContext
()
Constructs an initial context.
protected
InitialContext
(boolean lazy)
Constructs an initial context with the option of not
 initializing it.
InitialContext
(
Hashtable
<?,
?> environment)
Constructs an initial context using the supplied environment.
Method Summary
All Methods
Static Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
Object
addToEnvironment
(
String
propName,
Object
propVal)
Adds a new environment property to the environment of this
 context.
void
bind
(
String
name,
Object
obj)
Binds a name to an object.
void
bind
(
Name
name,
Object
obj)
Binds a name to an object.
void
close
()
Closes this context.
String
composeName
(
String
name,
String
prefix)
Composes the name of this context with a name relative to
 this context.
Name
composeName
(
Name
name,
Name
prefix)
Composes the name of this context with a name relative to
 this context.
Context
createSubcontext
(
String
name)
Creates and binds a new context.
Context
createSubcontext
(
Name
name)
Creates and binds a new context.
void
destroySubcontext
(
String
name)
Destroys the named context and removes it from the namespace.
void
destroySubcontext
(
Name
name)
Destroys the named context and removes it from the namespace.
static <T> T
doLookup
(
String
name)
A static method to retrieve the named object.
static <T> T
doLookup
(
Name
name)
A static method to retrieve the named object.
protected
Context
getDefaultInitCtx
()
Retrieves the initial context by calling
NamingManager.getInitialContext()
and cache it in defaultInitCtx.
Hashtable
<?,
?>
getEnvironment
()
Retrieves the environment in effect for this context.
String
getNameInNamespace
()
Retrieves the full name of this context within its own namespace.
NameParser
getNameParser
(
String
name)
Retrieves the parser associated with the named context.
NameParser
getNameParser
(
Name
name)
Retrieves the parser associated with the named context.
protected
Context
getURLOrDefaultInitCtx
(
String
name)
Retrieves a context for resolving the string name
name
.
protected
Context
getURLOrDefaultInitCtx
(
Name
name)
Retrieves a context for resolving
name
.
protected void
init
(
Hashtable
<?,
?> environment)
Initializes the initial context using the supplied environment.
NamingEnumeration
<
NameClassPair
>
list
(
String
name)
Enumerates the names bound in the named context, along with the
 class names of objects bound to them.
NamingEnumeration
<
NameClassPair
>
list
(
Name
name)
Enumerates the names bound in the named context, along with the
 class names of objects bound to them.
NamingEnumeration
<
Binding
>
listBindings
(
String
name)
Enumerates the names bound in the named context, along with the
 objects bound to them.
NamingEnumeration
<
Binding
>
listBindings
(
Name
name)
Enumerates the names bound in the named context, along with the
 objects bound to them.
Object
lookup
(
String
name)
Retrieves the named object.
Object
lookup
(
Name
name)
Retrieves the named object.
Object
lookupLink
(
String
name)
Retrieves the named object, following links except
 for the terminal atomic component of the name.
Object
lookupLink
(
Name
name)
Retrieves the named object, following links except
 for the terminal atomic component of the name.
void
rebind
(
String
name,
Object
obj)
Binds a name to an object, overwriting any existing binding.
void
rebind
(
Name
name,
Object
obj)
Binds a name to an object, overwriting any existing binding.
Object
removeFromEnvironment
(
String
propName)
Removes an environment property from the environment of this
 context.
void
rename
(
String
oldName,
String
newName)
Binds a new name to the object bound to an old name, and unbinds
 the old name.
void
rename
(
Name
oldName,
Name
newName)
Binds a new name to the object bound to an old name, and unbinds
 the old name.
void
unbind
(
String
name)
Unbinds the named object.
void
unbind
(
Name
name)
Unbinds the named object.
Methods declared in class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Field Details
myProps
protected
Hashtable
<
Object
,
Object
>
myProps
The environment associated with this InitialContext.
 It is initialized to null and is updated by the constructor
 that accepts an environment or by the
init()
method.
See Also:
addToEnvironment(java.lang.String, java.lang.Object)
removeFromEnvironment(java.lang.String)
getEnvironment()
defaultInitCtx
protected
Context
defaultInitCtx
Field holding the result of calling NamingManager.getInitialContext().
 It is set by getDefaultInitCtx() the first time getDefaultInitCtx()
 is called. Subsequent invocations of getDefaultInitCtx() return
 the value of defaultInitCtx.
See Also:
getDefaultInitCtx()
gotDefault
protected
boolean
gotDefault
Field indicating whether the initial context has been obtained
 by calling NamingManager.getInitialContext().
 If true, its result is in
defaultInitCtx
.
Constructor Details
InitialContext
protected
InitialContext
(boolean lazy)
throws
NamingException
Constructs an initial context with the option of not
 initializing it.  This may be used by a constructor in
 a subclass when the value of the environment parameter
 is not yet known at the time the
InitialContext
constructor is called.  The subclass's constructor will
 call this constructor, compute the value of the environment,
 and then call
init()
before returning.
Parameters:
lazy
- true means do not initialize the initial context; false
          is equivalent to calling
new InitialContext()
Throws:
NamingException
- if a naming exception is encountered
Since:
1.3
See Also:
init(Hashtable)
InitialContext
public
InitialContext
()
               throws
NamingException
Constructs an initial context.
 No environment properties are supplied.
 Equivalent to
new InitialContext(null)
.
Throws:
NamingException
- if a naming exception is encountered
See Also:
InitialContext(Hashtable)
InitialContext
public
InitialContext
(
Hashtable
<?,
?> environment)
throws
NamingException
Constructs an initial context using the supplied environment.
 Environment properties are discussed in the class description.
This constructor will not modify
environment
or save a reference to it, but may save a clone.
 Caller should not modify mutable keys and values in
environment
after it has been passed to the constructor.
Parameters:
environment
- environment used to create the initial context.
          Null indicates an empty environment.
Throws:
NamingException
- if a naming exception is encountered
Method Details
init
protected
void
init
(
Hashtable
<?,
?> environment)
throws
NamingException
Initializes the initial context using the supplied environment.
 Environment properties are discussed in the class description.
This method will modify
environment
and save
 a reference to it.  The caller may no longer modify it.
Parameters:
environment
- environment used to create the initial context.
          Null indicates an empty environment.
Throws:
NamingException
- if a naming exception is encountered
Since:
1.3
See Also:
InitialContext(boolean)
doLookup
public static
<T>
T
doLookup
(
Name
name)
throws
NamingException
A static method to retrieve the named object.
 This is a shortcut method equivalent to invoking:
InitialContext ic = new InitialContext();
        Object obj = ic.lookup();
If
name
is empty, returns a new instance of this context
 (which represents the same naming context as this context, but its
 environment may be modified independently and it may be accessed
 concurrently).
Type Parameters:
T
- the type of the returned object
Parameters:
name
- the name of the object to look up
Returns:
the object bound to
name
Throws:
NamingException
- if a naming exception is encountered
Since:
1.6
See Also:
doLookup(String)
lookup(Name)
doLookup
public static
<T>
T
doLookup
(
String
name)
throws
NamingException
A static method to retrieve the named object.
 See
doLookup(Name)
for details.
Type Parameters:
T
- the type of the returned object
Parameters:
name
- the name of the object to look up
Returns:
the object bound to
name
Throws:
NamingException
- if a naming exception is encountered
Since:
1.6
getDefaultInitCtx
protected
Context
getDefaultInitCtx
()
                             throws
NamingException
Retrieves the initial context by calling
NamingManager.getInitialContext()
and cache it in defaultInitCtx.
 Set
gotDefault
so that we know we've tried this before.
Returns:
The non-null cached initial context.
Throws:
NoInitialContextException
- If cannot find an initial context.
NamingException
- If a naming exception was encountered.
getURLOrDefaultInitCtx
protected
Context
getURLOrDefaultInitCtx
(
String
name)
throws
NamingException
Retrieves a context for resolving the string name
name
.
 If
name
name is a URL string, then attempt
 to find a URL context for it. If none is found, or if
name
is not a URL string, then return
getDefaultInitCtx()
.
See getURLOrDefaultInitCtx(Name) for description
 of how a subclass should use this method.
Parameters:
name
- The non-null name for which to get the context.
Returns:
A URL context for
name
or the cached
         initial context. The result cannot be null.
Throws:
NoInitialContextException
- If cannot find an initial context.
NamingException
- In a naming exception is encountered.
See Also:
NamingManager.getURLContext(java.lang.String, java.util.Hashtable<?, ?>)
getURLOrDefaultInitCtx
protected
Context
getURLOrDefaultInitCtx
(
Name
name)
throws
NamingException
Retrieves a context for resolving
name
.
 If the first component of
name
name is a URL string,
 then attempt to find a URL context for it. If none is found, or if
 the first component of
name
is not a URL string,
 then return
getDefaultInitCtx()
.
When creating a subclass of InitialContext, use this method as
 follows.
 Define a new method that uses this method to get an initial
 context of the desired subclass.
protected XXXContext getURLOrDefaultInitXXXCtx(Name name)
 throws NamingException {
  Context answer = getURLOrDefaultInitCtx(name);
  if (!(answer instanceof XXXContext)) {
    if (answer == null) {
      throw new NoInitialContextException();
    } else {
      throw new NotContextException("Not an XXXContext");
    }
  }
  return (XXXContext)answer;
 }
When providing implementations for the new methods in the subclass,
 use this newly defined method to get the initial context.
public Object XXXMethod1(Name name, ...) {
  throws NamingException {
    return getURLOrDefaultInitXXXCtx(name).XXXMethod1(name, ...);
 }
Parameters:
name
- The non-null name for which to get the context.
Returns:
A URL context for
name
or the cached
         initial context. The result cannot be null.
Throws:
NoInitialContextException
- If cannot find an initial context.
NamingException
- In a naming exception is encountered.
See Also:
NamingManager.getURLContext(java.lang.String, java.util.Hashtable<?, ?>)
lookup
public
Object
lookup
(
String
name)
throws
NamingException
Description copied from interface:
Context
Retrieves the named object.
 See
Context.lookup(Name)
for details.
Specified by:
lookup
in interface
Context
Parameters:
name
- the name of the object to look up
Returns:
the object bound to
name
Throws:
NamingException
- if a naming exception is encountered
lookup
public
Object
lookup
(
Name
name)
throws
NamingException
Description copied from interface:
Context
Retrieves the named object.
 If
name
is empty, returns a new instance of this context
 (which represents the same naming context as this context, but its
 environment may be modified independently and it may be accessed
 concurrently).
Specified by:
lookup
in interface
Context
Parameters:
name
- the name of the object to look up
Returns:
the object bound to
name
Throws:
NamingException
- if a naming exception is encountered
See Also:
Context.lookup(String)
Context.lookupLink(Name)
bind
public
void
bind
(
String
name,
Object
obj)
throws
NamingException
Description copied from interface:
Context
Binds a name to an object.
 See
Context.bind(Name, Object)
for details.
Specified by:
bind
in interface
Context
Parameters:
name
- the name to bind; may not be empty
obj
- the object to bind; possibly null
Throws:
NameAlreadyBoundException
- if name is already bound
InvalidAttributesException
- if object did not supply all mandatory attributes
NamingException
- if a naming exception is encountered
bind
public
void
bind
(
Name
name,
Object
obj)
throws
NamingException
Description copied from interface:
Context
Binds a name to an object.
 All intermediate contexts and the target context (that named by all
 but terminal atomic component of the name) must already exist.
Specified by:
bind
in interface
Context
Parameters:
name
- the name to bind; may not be empty
obj
- the object to bind; possibly null
Throws:
NameAlreadyBoundException
- if name is already bound
InvalidAttributesException
- if object did not supply all mandatory attributes
NamingException
- if a naming exception is encountered
See Also:
Context.bind(String, Object)
Context.rebind(Name, Object)
DirContext.bind(Name, Object, javax.naming.directory.Attributes)
rebind
public
void
rebind
(
String
name,
Object
obj)
throws
NamingException
Description copied from interface:
Context
Binds a name to an object, overwriting any existing binding.
 See
Context.rebind(Name, Object)
for details.
Specified by:
rebind
in interface
Context
Parameters:
name
- the name to bind; may not be empty
obj
- the object to bind; possibly null
Throws:
InvalidAttributesException
- if object did not supply all mandatory attributes
NamingException
- if a naming exception is encountered
rebind
public
void
rebind
(
Name
name,
Object
obj)
throws
NamingException
Description copied from interface:
Context
Binds a name to an object, overwriting any existing binding.
 All intermediate contexts and the target context (that named by all
 but terminal atomic component of the name) must already exist.
If the object is a
DirContext
, any existing attributes
 associated with the name are replaced with those of the object.
 Otherwise, any existing attributes associated with the name remain
 unchanged.
Specified by:
rebind
in interface
Context
Parameters:
name
- the name to bind; may not be empty
obj
- the object to bind; possibly null
Throws:
InvalidAttributesException
- if object did not supply all mandatory attributes
NamingException
- if a naming exception is encountered
See Also:
Context.rebind(String, Object)
Context.bind(Name, Object)
DirContext.rebind(Name, Object, javax.naming.directory.Attributes)
DirContext
unbind
public
void
unbind
(
String
name)
throws
NamingException
Description copied from interface:
Context
Unbinds the named object.
 See
Context.unbind(Name)
for details.
Specified by:
unbind
in interface
Context
Parameters:
name
- the name to unbind; may not be empty
Throws:
NameNotFoundException
- if an intermediate context does not exist
NamingException
- if a naming exception is encountered
unbind
public
void
unbind
(
Name
name)
throws
NamingException
Description copied from interface:
Context
Unbinds the named object.
 Removes the terminal atomic name in
name
from the target context--that named by all but the terminal
 atomic part of
name
.
This method is idempotent.
 It succeeds even if the terminal atomic name
 is not bound in the target context, but throws
NameNotFoundException
if any of the intermediate contexts do not exist.
Any attributes associated with the name are removed.
 Intermediate contexts are not changed.
Specified by:
unbind
in interface
Context
Parameters:
name
- the name to unbind; may not be empty
Throws:
NameNotFoundException
- if an intermediate context does not exist
NamingException
- if a naming exception is encountered
See Also:
Context.unbind(String)
rename
public
void
rename
(
String
oldName,
String
newName)
throws
NamingException
Description copied from interface:
Context
Binds a new name to the object bound to an old name, and unbinds
 the old name.
 See
Context.rename(Name, Name)
for details.
Specified by:
rename
in interface
Context
Parameters:
oldName
- the name of the existing binding; may not be empty
newName
- the name of the new binding; may not be empty
Throws:
NameAlreadyBoundException
- if
newName
is already bound
NamingException
- if a naming exception is encountered
rename
public
void
rename
(
Name
oldName,
Name
newName)
throws
NamingException
Description copied from interface:
Context
Binds a new name to the object bound to an old name, and unbinds
 the old name.  Both names are relative to this context.
 Any attributes associated with the old name become associated
 with the new name.
 Intermediate contexts of the old name are not changed.
Specified by:
rename
in interface
Context
Parameters:
oldName
- the name of the existing binding; may not be empty
newName
- the name of the new binding; may not be empty
Throws:
NameAlreadyBoundException
- if
newName
is already bound
NamingException
- if a naming exception is encountered
See Also:
Context.rename(String, String)
Context.bind(Name, Object)
Context.rebind(Name, Object)
list
public
NamingEnumeration
<
NameClassPair
>
list
(
String
name)
throws
NamingException
Description copied from interface:
Context
Enumerates the names bound in the named context, along with the
 class names of objects bound to them.
 See
Context.list(Name)
for details.
Specified by:
list
in interface
Context
Parameters:
name
- the name of the context to list
Returns:
an enumeration of the names and class names of the
          bindings in this context.  Each element of the
          enumeration is of type
NameClassPair
.
Throws:
NamingException
- if a naming exception is encountered
list
public
NamingEnumeration
<
NameClassPair
>
list
(
Name
name)
throws
NamingException
Description copied from interface:
Context
Enumerates the names bound in the named context, along with the
 class names of objects bound to them.
 The contents of any subcontexts are not included.
If a binding is added to or removed from this context,
 its effect on an enumeration previously returned is undefined.
Specified by:
list
in interface
Context
Parameters:
name
- the name of the context to list
Returns:
an enumeration of the names and class names of the
          bindings in this context.  Each element of the
          enumeration is of type
NameClassPair
.
Throws:
NamingException
- if a naming exception is encountered
See Also:
Context.list(String)
Context.listBindings(Name)
NameClassPair
listBindings
public
NamingEnumeration
<
Binding
>
listBindings
(
String
name)
throws
NamingException
Description copied from interface:
Context
Enumerates the names bound in the named context, along with the
 objects bound to them.
 See
Context.listBindings(Name)
for details.
Specified by:
listBindings
in interface
Context
Parameters:
name
- the name of the context to list
Returns:
an enumeration of the bindings in this context.
          Each element of the enumeration is of type
Binding
.
Throws:
NamingException
- if a naming exception is encountered
listBindings
public
NamingEnumeration
<
Binding
>
listBindings
(
Name
name)
throws
NamingException
Description copied from interface:
Context
Enumerates the names bound in the named context, along with the
 objects bound to them.
 The contents of any subcontexts are not included.
If a binding is added to or removed from this context,
 its effect on an enumeration previously returned is undefined.
Specified by:
listBindings
in interface
Context
Parameters:
name
- the name of the context to list
Returns:
an enumeration of the bindings in this context.
          Each element of the enumeration is of type
Binding
.
Throws:
NamingException
- if a naming exception is encountered
See Also:
Context.listBindings(String)
Context.list(Name)
Binding
destroySubcontext
public
void
destroySubcontext
(
String
name)
throws
NamingException
Description copied from interface:
Context
Destroys the named context and removes it from the namespace.
 See
Context.destroySubcontext(Name)
for details.
Specified by:
destroySubcontext
in interface
Context
Parameters:
name
- the name of the context to be destroyed; may not be empty
Throws:
NameNotFoundException
- if an intermediate context does not exist
NotContextException
- if the name is bound but does not name a
          context, or does not name a context of the appropriate type
ContextNotEmptyException
- if the named context is not empty
NamingException
- if a naming exception is encountered
destroySubcontext
public
void
destroySubcontext
(
Name
name)
throws
NamingException
Description copied from interface:
Context
Destroys the named context and removes it from the namespace.
 Any attributes associated with the name are also removed.
 Intermediate contexts are not destroyed.
This method is idempotent.
 It succeeds even if the terminal atomic name
 is not bound in the target context, but throws
NameNotFoundException
if any of the intermediate contexts do not exist.
In a federated naming system, a context from one naming system
 may be bound to a name in another.  One can subsequently
 look up and perform operations on the foreign context using a
 composite name.  However, an attempt destroy the context using
 this composite name will fail with
NotContextException
, because the foreign context is not
 a "subcontext" of the context in which it is bound.
 Instead, use
unbind()
to remove the
 binding of the foreign context.  Destroying the foreign context
 requires that the
destroySubcontext()
be performed
 on a context from the foreign context's "native" naming system.
Specified by:
destroySubcontext
in interface
Context
Parameters:
name
- the name of the context to be destroyed; may not be empty
Throws:
NameNotFoundException
- if an intermediate context does not exist
NotContextException
- if the name is bound but does not name a
          context, or does not name a context of the appropriate type
ContextNotEmptyException
- if the named context is not empty
NamingException
- if a naming exception is encountered
See Also:
Context.destroySubcontext(String)
createSubcontext
public
Context
createSubcontext
(
String
name)
throws
NamingException
Description copied from interface:
Context
Creates and binds a new context.
 See
Context.createSubcontext(Name)
for details.
Specified by:
createSubcontext
in interface
Context
Parameters:
name
- the name of the context to create; may not be empty
Returns:
the newly created context
Throws:
NameAlreadyBoundException
- if name is already bound
InvalidAttributesException
- if creation of the subcontext requires specification of
          mandatory attributes
NamingException
- if a naming exception is encountered
createSubcontext
public
Context
createSubcontext
(
Name
name)
throws
NamingException
Description copied from interface:
Context
Creates and binds a new context.
 Creates a new context with the given name and binds it in
 the target context (that named by all but terminal atomic
 component of the name).  All intermediate contexts and the
 target context must already exist.
Specified by:
createSubcontext
in interface
Context
Parameters:
name
- the name of the context to create; may not be empty
Returns:
the newly created context
Throws:
NameAlreadyBoundException
- if name is already bound
InvalidAttributesException
- if creation of the subcontext requires specification of
          mandatory attributes
NamingException
- if a naming exception is encountered
See Also:
Context.createSubcontext(String)
DirContext.createSubcontext(javax.naming.Name, javax.naming.directory.Attributes)
lookupLink
public
Object
lookupLink
(
String
name)
throws
NamingException
Description copied from interface:
Context
Retrieves the named object, following links except
 for the terminal atomic component of the name.
 See
Context.lookupLink(Name)
for details.
Specified by:
lookupLink
in interface
Context
Parameters:
name
- the name of the object to look up
Returns:
the object bound to
name
, not following the
          terminal link (if any)
Throws:
NamingException
- if a naming exception is encountered
lookupLink
public
Object
lookupLink
(
Name
name)
throws
NamingException
Description copied from interface:
Context
Retrieves the named object, following links except
 for the terminal atomic component of the name.
 If the object bound to
name
is not a link,
 returns the object itself.
Specified by:
lookupLink
in interface
Context
Parameters:
name
- the name of the object to look up
Returns:
the object bound to
name
, not following the
          terminal link (if any).
Throws:
NamingException
- if a naming exception is encountered
See Also:
Context.lookupLink(String)
getNameParser
public
NameParser
getNameParser
(
String
name)
throws
NamingException
Description copied from interface:
Context
Retrieves the parser associated with the named context.
 See
Context.getNameParser(Name)
for details.
Specified by:
getNameParser
in interface
Context
Parameters:
name
- the name of the context from which to get the parser
Returns:
a name parser that can parse compound names into their atomic
          components
Throws:
NamingException
- if a naming exception is encountered
getNameParser
public
NameParser
getNameParser
(
Name
name)
throws
NamingException
Description copied from interface:
Context
Retrieves the parser associated with the named context.
 In a federation of namespaces, different naming systems will
 parse names differently.  This method allows an application
 to get a parser for parsing names into their atomic components
 using the naming convention of a particular naming system.
 Within any single naming system,
NameParser
objects
 returned by this method must be equal (using the
equals()
test).
Specified by:
getNameParser
in interface
Context
Parameters:
name
- the name of the context from which to get the parser
Returns:
a name parser that can parse compound names into their atomic
          components
Throws:
NamingException
- if a naming exception is encountered
See Also:
Context.getNameParser(String)
CompoundName
composeName
public
String
composeName
(
String
name,
String
prefix)
throws
NamingException
Composes the name of this context with a name relative to
 this context.
 Since an initial context may never be named relative
 to any context other than itself, the value of the
prefix
parameter must be an empty name (
""
).
Specified by:
composeName
in interface
Context
Parameters:
name
- a name relative to this context
prefix
- the name of this context relative to one of its ancestors
Returns:
the composition of
prefix
and
name
Throws:
NamingException
- if a naming exception is encountered
composeName
public
Name
composeName
(
Name
name,
Name
prefix)
throws
NamingException
Composes the name of this context with a name relative to
 this context.
 Since an initial context may never be named relative
 to any context other than itself, the value of the
prefix
parameter must be an empty name.
Specified by:
composeName
in interface
Context
Parameters:
name
- a name relative to this context
prefix
- the name of this context relative to one of its ancestors
Returns:
the composition of
prefix
and
name
Throws:
NamingException
- if a naming exception is encountered
See Also:
Context.composeName(String, String)
addToEnvironment
public
Object
addToEnvironment
(
String
propName,
Object
propVal)
throws
NamingException
Description copied from interface:
Context
Adds a new environment property to the environment of this
 context.  If the property already exists, its value is overwritten.
 See class description for more details on environment properties.
Specified by:
addToEnvironment
in interface
Context
Parameters:
propName
- the name of the environment property to add; may not be null
propVal
- the value of the property to add; may not be null
Returns:
the previous value of the property, or null if the property was
          not in the environment before
Throws:
NamingException
- if a naming exception is encountered
See Also:
Context.getEnvironment()
Context.removeFromEnvironment(String)
removeFromEnvironment
public
Object
removeFromEnvironment
(
String
propName)
throws
NamingException
Description copied from interface:
Context
Removes an environment property from the environment of this
 context.  See class description for more details on environment
 properties.
Specified by:
removeFromEnvironment
in interface
Context
Parameters:
propName
- the name of the environment property to remove; may not be null
Returns:
the previous value of the property, or null if the property was
          not in the environment
Throws:
NamingException
- if a naming exception is encountered
See Also:
Context.getEnvironment()
Context.addToEnvironment(String, Object)
getEnvironment
public
Hashtable
<?,
?>
getEnvironment
()
                              throws
NamingException
Description copied from interface:
Context
Retrieves the environment in effect for this context.
 See class description for more details on environment properties.
The caller should not make any changes to the object returned:
 their effect on the context is undefined.
 The environment of this context may be changed using
addToEnvironment()
and
removeFromEnvironment()
.
Specified by:
getEnvironment
in interface
Context
Returns:
the environment of this context; never null
Throws:
NamingException
- if a naming exception is encountered
See Also:
Context.addToEnvironment(String, Object)
Context.removeFromEnvironment(String)
close
public
void
close
()
           throws
NamingException
Description copied from interface:
Context
Closes this context.
 This method releases this context's resources immediately, instead of
 waiting for them to be released automatically by the garbage collector.
This method is idempotent:  invoking it on a context that has
 already been closed has no effect.  Invoking any other method
 on a closed context is not allowed, and results in undefined behaviour.
Specified by:
close
in interface
Context
Throws:
NamingException
- if a naming exception is encountered
getNameInNamespace
public
String
getNameInNamespace
()
                          throws
NamingException
Description copied from interface:
Context
Retrieves the full name of this context within its own namespace.
Many naming services have a notion of a "full name" for objects
 in their respective namespaces.  For example, an LDAP entry has
 a distinguished name, and a DNS record has a fully qualified name.
 This method allows the client application to retrieve this name.
 The string returned by this method is not a JNDI composite name
 and should not be passed directly to context methods.
 In naming systems for which the notion of full name does not
 make sense,
OperationNotSupportedException
is thrown.
Specified by:
getNameInNamespace
in interface
Context
Returns:
this context's name in its own namespace; never null
Throws:
OperationNotSupportedException
- if the naming system does
          not have the notion of a full name
NamingException
- if a naming exception is encountered
Report a bug or suggest an enhancement
For further API reference and developer documentation see the
Java SE Documentation
, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples.
Other versions.
Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries.
Copyright
© 1993, 2024, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.
All rights reserved. Use is subject to
license terms
and the
documentation redistribution policy
.